
LoRA_TC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094bc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000418  0800964c  0800964c  0000a64c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a64  08009a64  0000b06c  2**0
                  CONTENTS
  4 .ARM          00000008  08009a64  08009a64  0000aa64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a6c  08009a6c  0000b06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a6c  08009a6c  0000aa6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009a70  08009a70  0000aa70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08009a74  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002e00  2000006c  08009ae0  0000b06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002e6c  08009ae0  0000be6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ed0f  00000000  00000000  0000b09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048d5  00000000  00000000  00029dab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001910  00000000  00000000  0002e680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000134c  00000000  00000000  0002ff90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ca49  00000000  00000000  000312dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000214c1  00000000  00000000  0005dd25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001015b8  00000000  00000000  0007f1e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018079e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000704c  00000000  00000000  001807e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00187830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009634 	.word	0x08009634

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08009634 	.word	0x08009634

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <initializeBuffer>:
	hGNSSCom.huartDebug = huartDebug;

	//hGNSSCom.Rx = initializeBuffer(UART_RX_BUFFER_SIZE);

}
DynamicBuffer* initializeBuffer(size_t initialSize) {
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	DynamicBuffer *bufferDynamic = pvPortMalloc(sizeof(DynamicBuffer));
 8000578:	2008      	movs	r0, #8
 800057a:	f007 fc77 	bl	8007e6c <pvPortMalloc>
 800057e:	60f8      	str	r0, [r7, #12]
	if (bufferDynamic == NULL) {
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	2b00      	cmp	r3, #0
 8000584:	d101      	bne.n	800058a <initializeBuffer+0x1a>
		return NULL; // Échec de l'allocation mémoire
 8000586:	2300      	movs	r3, #0
 8000588:	e012      	b.n	80005b0 <initializeBuffer+0x40>
	}

	bufferDynamic->buffer = pvPortMalloc(initialSize);
 800058a:	6878      	ldr	r0, [r7, #4]
 800058c:	f007 fc6e 	bl	8007e6c <pvPortMalloc>
 8000590:	4602      	mov	r2, r0
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	601a      	str	r2, [r3, #0]
	if (bufferDynamic->buffer == NULL) {
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d104      	bne.n	80005a8 <initializeBuffer+0x38>
		vPortFree(bufferDynamic); // Libérer la mémoire allouée pour la structure
 800059e:	68f8      	ldr	r0, [r7, #12]
 80005a0:	f007 fd32 	bl	8008008 <vPortFree>
		return NULL; // Échec de l'allocation mémoire
 80005a4:	2300      	movs	r3, #0
 80005a6:	e003      	b.n	80005b0 <initializeBuffer+0x40>
	}

	bufferDynamic->size = initialSize;
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	605a      	str	r2, [r3, #4]
	return bufferDynamic;
 80005ae:	68fb      	ldr	r3, [r7, #12]
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3710      	adds	r7, #16
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <freeBuffer>:
	if (newData != NULL) {
		bufferDynamic->buffer = newData;
		bufferDynamic->size = newSize;
	}
}
void freeBuffer(DynamicBuffer *bufferDynamic) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	vPortFree(bufferDynamic->buffer);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4618      	mov	r0, r3
 80005c6:	f007 fd1f 	bl	8008008 <vPortFree>
	vPortFree(bufferDynamic);
 80005ca:	6878      	ldr	r0, [r7, #4]
 80005cc:	f007 fd1c 	bl	8008008 <vPortFree>
}
 80005d0:	bf00      	nop
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <LORACom_Init>:
#include "LORA/RFM9x.h"
#include "shared.h"
LORACom_HandleTypeDef hLORACom;

void LORACom_Init(SPI_HandleTypeDef* hspi,UART_HandleTypeDef* huartDebug)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
 80005e0:	6039      	str	r1, [r7, #0]
	hLORACom.hspi = hspi;
 80005e2:	4a06      	ldr	r2, [pc, #24]	@ (80005fc <LORACom_Init+0x24>)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	6013      	str	r3, [r2, #0]
	hLORACom.huartDebug = huartDebug;
 80005e8:	4a04      	ldr	r2, [pc, #16]	@ (80005fc <LORACom_Init+0x24>)
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	6053      	str	r3, [r2, #4]
}
 80005ee:	bf00      	nop
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	20000088 	.word	0x20000088

08000600 <RFM9x_Init>:
/* Private function prototypes -----------------------------------------------*/
/* User code -----------------------------------------------------------------*/


void RFM9x_Init( void )
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
	// Assert Reset low on the RFM9x
	RF_TestSpi();
 8000606:	f000 f9af 	bl	8000968 <RF_TestSpi>
	HAL_GPIO_WritePin(SPI2_RST_GPIO_Port, SPI2_RST_Pin, GPIO_PIN_RESET);
 800060a:	2200      	movs	r2, #0
 800060c:	2140      	movs	r1, #64	@ 0x40
 800060e:	4829      	ldr	r0, [pc, #164]	@ (80006b4 <RFM9x_Init+0xb4>)
 8000610:	f001 fc60 	bl	8001ed4 <HAL_GPIO_WritePin>
	vTaskDelay(10);
 8000614:	200a      	movs	r0, #10
 8000616:	f006 f927 	bl	8006868 <vTaskDelay>
	HAL_GPIO_WritePin(SPI2_RST_GPIO_Port, SPI2_RST_Pin, GPIO_PIN_SET);
 800061a:	2201      	movs	r2, #1
 800061c:	2140      	movs	r1, #64	@ 0x40
 800061e:	4825      	ldr	r0, [pc, #148]	@ (80006b4 <RFM9x_Init+0xb4>)
 8000620:	f001 fc58 	bl	8001ed4 <HAL_GPIO_WritePin>
	vTaskDelay(10);
 8000624:	200a      	movs	r0, #10
 8000626:	f006 f91f 	bl	8006868 <vTaskDelay>
	RF_TestSpi();
 800062a:	f000 f99d 	bl	8000968 <RF_TestSpi>
	// Set sleep mode, so we can also set RFM9x mode:
	RFM9x_WriteReg(RFM9x_REG_01_OP_MODE, RFM9x_MODE_SLEEP | RFM9x_LONG_RANGE_MODE);
 800062e:	2180      	movs	r1, #128	@ 0x80
 8000630:	2001      	movs	r0, #1
 8000632:	f000 f95d 	bl	80008f0 <RFM9x_WriteReg>

	// Wait for sleep mode to take over from say, CAD
	//HDelay_ms(10);

	// Check we are in sleep mode, with RFM9x set
	if (RFM9x_ReadReg(RFM9x_REG_01_OP_MODE) != (RFM9x_MODE_SLEEP | RFM9x_LONG_RANGE_MODE))
 8000636:	2001      	movs	r0, #1
 8000638:	f000 f91a 	bl	8000870 <RFM9x_ReadReg>
	{
		//	TODO: Throw RFM9x init error
	}
	// Either Rx or Tx can use the entire 256 byte FIFO, but not at same time
	RFM9x_WriteReg(RFM9x_REG_0E_FIFO_TX_BASE_ADDR, 0x00);
 800063c:	2100      	movs	r1, #0
 800063e:	200e      	movs	r0, #14
 8000640:	f000 f956 	bl	80008f0 <RFM9x_WriteReg>
	RFM9x_WriteReg(RFM9x_REG_0F_FIFO_RX_BASE_ADDR, 0x80);
 8000644:	2180      	movs	r1, #128	@ 0x80
 8000646:	200f      	movs	r0, #15
 8000648:	f000 f952 	bl	80008f0 <RFM9x_WriteReg>

	// BW = 7: 125 kHz
	// CodingRate = 1:  4/5 code rate
	// ImplicitHeaderModeOn = 1, Implicit Header mode
	RFM9x_WriteReg(RFM9x_REG_1D_MODEM_CONFIG1, 0x72);
 800064c:	2172      	movs	r1, #114	@ 0x72
 800064e:	201d      	movs	r0, #29
 8000650:	f000 f94e 	bl	80008f0 <RFM9x_WriteReg>
	// SymbTimeout[9:8] = 0
	//RFM9x_WriteReg(RFM9x_REG_1E_MODEM_CONFIG2, 0x74);

	// LowDataRateOptimize = 1 : Enabled; mandated for when the symbol length exceeds 16ms
	// AgcAutoOn = 0 : LNA gain set by register LnaGain
	RFM9x_WriteReg(RFM9x_REG_26_MODEM_CONFIG3, 0x04);
 8000654:	2104      	movs	r1, #4
 8000656:	2026      	movs	r0, #38	@ 0x26
 8000658:	f000 f94a 	bl	80008f0 <RFM9x_WriteReg>

	// Preamble Length = 16;
	RFM9x_WriteReg(RFM9x_REG_20_PREAMBLE_MSB, 0x00);
 800065c:	2100      	movs	r1, #0
 800065e:	2020      	movs	r0, #32
 8000660:	f000 f946 	bl	80008f0 <RFM9x_WriteReg>
	RFM9x_WriteReg(RFM9x_REG_21_PREAMBLE_LSB, 0x10);
 8000664:	2110      	movs	r1, #16
 8000666:	2021      	movs	r0, #33	@ 0x21
 8000668:	f000 f942 	bl	80008f0 <RFM9x_WriteReg>
	//   FRF[23:0] = Freq / Fstep
	//   Fstep = Fxosc / 2^^19
	// where:
	//   Freq = 433 MHz
	//   Fxosc = 32 MHz
	uint32_t frf = (uint32_t) ( 433000000.0 / (32000000.0 / 524288.0) ) ;
 800066c:	4b12      	ldr	r3, [pc, #72]	@ (80006b8 <RFM9x_Init+0xb8>)
 800066e:	607b      	str	r3, [r7, #4]
	RFM9x_WriteReg(RFM9x_REG_06_FRF_MSB, (frf >> 16) & 0xff);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	0c1b      	lsrs	r3, r3, #16
 8000674:	b2db      	uxtb	r3, r3
 8000676:	4619      	mov	r1, r3
 8000678:	2006      	movs	r0, #6
 800067a:	f000 f939 	bl	80008f0 <RFM9x_WriteReg>
	RFM9x_WriteReg(RFM9x_REG_07_FRF_MID, (frf >> 8) & 0xff);
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	0a1b      	lsrs	r3, r3, #8
 8000682:	b2db      	uxtb	r3, r3
 8000684:	4619      	mov	r1, r3
 8000686:	2007      	movs	r0, #7
 8000688:	f000 f932 	bl	80008f0 <RFM9x_WriteReg>
	RFM9x_WriteReg(RFM9x_REG_08_FRF_LSB, frf & 0xff);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	b2db      	uxtb	r3, r3
 8000690:	4619      	mov	r1, r3
 8000692:	2008      	movs	r0, #8
 8000694:	f000 f92c 	bl	80008f0 <RFM9x_WriteReg>

	// PaDac = 4 : Disables the +20dBm option on PA_BOOST pin
	RFM9x_WriteReg(RFM9x_REG_4D_PA_DAC, 0x04);
 8000698:	2104      	movs	r1, #4
 800069a:	204d      	movs	r0, #77	@ 0x4d
 800069c:	f000 f928 	bl	80008f0 <RFM9x_WriteReg>

	// PaSelect = 1 : PA_BOOST pin (instead of RFO pin).
	// MaxPower = 0 : Pmax=10.8+0.6*MaxPower [dBm]
	// Output Power = 8 : 10dBm from Pout=17-(15-OutputPower) if PaSelect = 1. RadioHead says this is 13 dBm, though
	//RFM9x_WriteReg(RFM9x_REG_09_PA_CONFIG, 0x88);
	RFM9x_WriteReg(RFM9x_REG_09_PA_CONFIG, 0xcf);
 80006a0:	21cf      	movs	r1, #207	@ 0xcf
 80006a2:	2009      	movs	r0, #9
 80006a4:	f000 f924 	bl	80008f0 <RFM9x_WriteReg>

	//On decide  a est par defaut en mode ECOUTE
	RFM9x_SetMode_Receive();
 80006a8:	f000 f8d2 	bl	8000850 <RFM9x_SetMode_Receive>
}
 80006ac:	bf00      	nop
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	48000400 	.word	0x48000400
 80006b8:	006c4000 	.word	0x006c4000

080006bc <RFM9x_Send>:


void RFM9x_Send(uint8_t* data, uint8_t len)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
 80006c4:	460b      	mov	r3, r1
 80006c6:	70fb      	strb	r3, [r7, #3]
		if (!waitCAD()){
			return 0;  // Check channel activity
		}
	}*/
	// Position at the beginning of the FIFO
	RFM9x_WriteReg(RFM9x_REG_0D_FIFO_ADDR_PTR, 0);
 80006c8:	2100      	movs	r1, #0
 80006ca:	200d      	movs	r0, #13
 80006cc:	f000 f910 	bl	80008f0 <RFM9x_WriteReg>

	// The payload data
	for(int i=0; i < len; i++)
 80006d0:	2300      	movs	r3, #0
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	e00a      	b.n	80006ec <RFM9x_Send+0x30>
	{
		RFM9x_WriteReg(RFM9x_REG_00_FIFO, data[i]);
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	687a      	ldr	r2, [r7, #4]
 80006da:	4413      	add	r3, r2
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	4619      	mov	r1, r3
 80006e0:	2000      	movs	r0, #0
 80006e2:	f000 f905 	bl	80008f0 <RFM9x_WriteReg>
	for(int i=0; i < len; i++)
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	3301      	adds	r3, #1
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	78fb      	ldrb	r3, [r7, #3]
 80006ee:	68fa      	ldr	r2, [r7, #12]
 80006f0:	429a      	cmp	r2, r3
 80006f2:	dbf0      	blt.n	80006d6 <RFM9x_Send+0x1a>
	}
	// The message length
	RFM9x_WriteReg(RFM9x_REG_22_PAYLOAD_LENGTH, len);
 80006f4:	78fb      	ldrb	r3, [r7, #3]
 80006f6:	4619      	mov	r1, r3
 80006f8:	2022      	movs	r0, #34	@ 0x22
 80006fa:	f000 f8f9 	bl	80008f0 <RFM9x_WriteReg>

	// Start the transmitter
	RFM9x_WriteReg(RFM9x_REG_01_OP_MODE, RFM9x_MODE_TX);
 80006fe:	2103      	movs	r1, #3
 8000700:	2001      	movs	r0, #1
 8000702:	f000 f8f5 	bl	80008f0 <RFM9x_WriteReg>
	vTaskDelay(5);
 8000706:	2005      	movs	r0, #5
 8000708:	f006 f8ae 	bl	8006868 <vTaskDelay>
	// Interrupt on DIO0 for TxDone
	RFM9x_WriteReg(RFM9x_REG_40_DIO_MAPPING1, 0x40);
 800070c:	2140      	movs	r1, #64	@ 0x40
 800070e:	2040      	movs	r0, #64	@ 0x40
 8000710:	f000 f8ee 	bl	80008f0 <RFM9x_WriteReg>
	//vTaskDelay(5);
	RFM9x_SetMode_Receive();
 8000714:	f000 f89c 	bl	8000850 <RFM9x_SetMode_Receive>
}
 8000718:	bf00      	nop
 800071a:	3710      	adds	r7, #16
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}

08000720 <RFM9x_Receive>:
			return 0;
		}
	}
	return 1;  // No activity detected
}*/
void RFM9x_Receive(LORA_MessageReception* LORA_Receive_Message){
 8000720:	b590      	push	{r4, r7, lr}
 8000722:	b087      	sub	sp, #28
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	logMemoryUsage("START - RFM9x Reception");
 8000728:	4847      	ldr	r0, [pc, #284]	@ (8000848 <RFM9x_Receive+0x128>)
 800072a:	f000 fa65 	bl	8000bf8 <logMemoryUsage>

	// Number of bytes received
	uint8_t start = RFM9x_ReadReg(RFM9x_REG_10_FIFO_RX_CURRENT_ADDR);
 800072e:	2010      	movs	r0, #16
 8000730:	f000 f89e 	bl	8000870 <RFM9x_ReadReg>
 8000734:	4603      	mov	r3, r0
 8000736:	74fb      	strb	r3, [r7, #19]
	uint8_t len_RFM9x = RFM9x_ReadReg(RFM9x_REG_13_RX_NB_BYTES);
 8000738:	2013      	movs	r0, #19
 800073a:	f000 f899 	bl	8000870 <RFM9x_ReadReg>
 800073e:	4603      	mov	r3, r0
 8000740:	74bb      	strb	r3, [r7, #18]

	if (len_RFM9x < sizeof(LORA_HeaderforReception)){
 8000742:	7cbb      	ldrb	r3, [r7, #18]
 8000744:	2b03      	cmp	r3, #3
 8000746:	d809      	bhi.n	800075c <RFM9x_Receive+0x3c>
		LORA_Receive_Message->RxNbrBytes=0;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2200      	movs	r2, #0
 800074c:	709a      	strb	r2, [r3, #2]
		RFM9x_WriteReg( RFM9x_REG_12_IRQ_FLAGS, 0xFF );
 800074e:	21ff      	movs	r1, #255	@ 0xff
 8000750:	2012      	movs	r0, #18
 8000752:	f000 f8cd 	bl	80008f0 <RFM9x_WriteReg>
		RFM9x_SetMode_Receive();
 8000756:	f000 f87b 	bl	8000850 <RFM9x_SetMode_Receive>
		return;
 800075a:	e072      	b.n	8000842 <RFM9x_Receive+0x122>
	}
	// get the read data
	if (len_RFM9x > (RFM9x_FIFO_SIZE)) len_RFM9x = RFM9x_FIFO_SIZE; //Pas sure de lutilité

	RFM9x_WriteReg(RFM9x_REG_0D_FIFO_ADDR_PTR, start);
 800075c:	7cfb      	ldrb	r3, [r7, #19]
 800075e:	4619      	mov	r1, r3
 8000760:	200d      	movs	r0, #13
 8000762:	f000 f8c5 	bl	80008f0 <RFM9x_WriteReg>
	uint8_t* data = (uint8_t*)pvPortMalloc(len_RFM9x * sizeof(uint8_t));
 8000766:	7cbb      	ldrb	r3, [r7, #18]
 8000768:	4618      	mov	r0, r3
 800076a:	f007 fb7f 	bl	8007e6c <pvPortMalloc>
 800076e:	60f8      	str	r0, [r7, #12]
	if (data == NULL) Error_Handler();
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d101      	bne.n	800077a <RFM9x_Receive+0x5a>
 8000776:	f000 fdff 	bl	8001378 <Error_Handler>

	for (int i = 0; i < len_RFM9x; i++)
 800077a:	2300      	movs	r3, #0
 800077c:	617b      	str	r3, [r7, #20]
 800077e:	e00a      	b.n	8000796 <RFM9x_Receive+0x76>
	{
		data[i] = RFM9x_ReadReg(RFM9x_REG_00_FIFO);
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	68fa      	ldr	r2, [r7, #12]
 8000784:	18d4      	adds	r4, r2, r3
 8000786:	2000      	movs	r0, #0
 8000788:	f000 f872 	bl	8000870 <RFM9x_ReadReg>
 800078c:	4603      	mov	r3, r0
 800078e:	7023      	strb	r3, [r4, #0]
	for (int i = 0; i < len_RFM9x; i++)
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	3301      	adds	r3, #1
 8000794:	617b      	str	r3, [r7, #20]
 8000796:	7cbb      	ldrb	r3, [r7, #18]
 8000798:	697a      	ldr	r2, [r7, #20]
 800079a:	429a      	cmp	r2, r3
 800079c:	dbf0      	blt.n	8000780 <RFM9x_Receive+0x60>
	}
	LORA_Receive_Message->IRQFlags=RFM9x_ReadReg(RFM9x_REG_12_IRQ_FLAGS);
 800079e:	2012      	movs	r0, #18
 80007a0:	f000 f866 	bl	8000870 <RFM9x_ReadReg>
 80007a4:	4603      	mov	r3, r0
 80007a6:	461a      	mov	r2, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	701a      	strb	r2, [r3, #0]
	LORA_Receive_Message->RxCurrAddr=start;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	7cfa      	ldrb	r2, [r7, #19]
 80007b0:	705a      	strb	r2, [r3, #1]
	LORA_Receive_Message->RxNbrBytes=len_RFM9x;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	7cba      	ldrb	r2, [r7, #18]
 80007b6:	709a      	strb	r2, [r3, #2]
	LORA_Receive_Message->SNR=RFM9x_ReadReg(RFM9x_REG_19_PKT_SNR_VALUE);
 80007b8:	2019      	movs	r0, #25
 80007ba:	f000 f859 	bl	8000870 <RFM9x_ReadReg>
 80007be:	4603      	mov	r3, r0
 80007c0:	461a      	mov	r2, r3
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	70da      	strb	r2, [r3, #3]
	LORA_Receive_Message->RSSI = RFM9x_ReadReg(RFM9x_REG_1A_PKT_RSSI_VALUE);
 80007c6:	201a      	movs	r0, #26
 80007c8:	f000 f852 	bl	8000870 <RFM9x_ReadReg>
 80007cc:	4603      	mov	r3, r0
 80007ce:	461a      	mov	r2, r3
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	711a      	strb	r2, [r3, #4]

	////On copie  la valeur de data[i] a l'adresse recipient,sender...
	LORA_Receive_Message->header->recipient=data[0];
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	689b      	ldr	r3, [r3, #8]
 80007d8:	68fa      	ldr	r2, [r7, #12]
 80007da:	7812      	ldrb	r2, [r2, #0]
 80007dc:	701a      	strb	r2, [r3, #0]
	LORA_Receive_Message->header->sender=data[1];
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	689b      	ldr	r3, [r3, #8]
 80007e2:	68fa      	ldr	r2, [r7, #12]
 80007e4:	7852      	ldrb	r2, [r2, #1]
 80007e6:	705a      	strb	r2, [r3, #1]
	LORA_Receive_Message->header->type=data[2];
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	689b      	ldr	r3, [r3, #8]
 80007ec:	68fa      	ldr	r2, [r7, #12]
 80007ee:	7892      	ldrb	r2, [r2, #2]
 80007f0:	709a      	strb	r2, [r3, #2]
	LORA_Receive_Message->header->len_payload=data[3];
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	689b      	ldr	r3, [r3, #8]
 80007f6:	68fa      	ldr	r2, [r7, #12]
 80007f8:	78d2      	ldrb	r2, [r2, #3]
 80007fa:	719a      	strb	r2, [r3, #6]
	//---------//
	LORA_Receive_Message->payload = (uint8_t*)pvPortMalloc(sizeof(uint8_t)*(len_RFM9x-sizeof(LORA_HeaderforReception)));
 80007fc:	7cbb      	ldrb	r3, [r7, #18]
 80007fe:	3b04      	subs	r3, #4
 8000800:	4618      	mov	r0, r3
 8000802:	f007 fb33 	bl	8007e6c <pvPortMalloc>
 8000806:	4602      	mov	r2, r0
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	60da      	str	r2, [r3, #12]
	if (LORA_Receive_Message->payload == NULL) Error_Handler();
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	68db      	ldr	r3, [r3, #12]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d101      	bne.n	8000818 <RFM9x_Receive+0xf8>
 8000814:	f000 fdb0 	bl	8001378 <Error_Handler>

	memcpy(LORA_Receive_Message->payload, data+sizeof(LORA_HeaderforReception), len_RFM9x-sizeof(LORA_HeaderforReception));
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	68d8      	ldr	r0, [r3, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	1d19      	adds	r1, r3, #4
 8000820:	7cbb      	ldrb	r3, [r7, #18]
 8000822:	3b04      	subs	r3, #4
 8000824:	461a      	mov	r2, r3
 8000826:	f008 f89e 	bl	8008966 <memcpy>

	vPortFree(data);
 800082a:	68f8      	ldr	r0, [r7, #12]
 800082c:	f007 fbec 	bl	8008008 <vPortFree>
	// clear all the IRQ flags
	RFM9x_WriteReg(RFM9x_REG_12_IRQ_FLAGS, 0xFF);
 8000830:	21ff      	movs	r1, #255	@ 0xff
 8000832:	2012      	movs	r0, #18
 8000834:	f000 f85c 	bl	80008f0 <RFM9x_WriteReg>
	RFM9x_SetMode_Receive();
 8000838:	f000 f80a 	bl	8000850 <RFM9x_SetMode_Receive>
	logMemoryUsage("END - RFM9x Reception");
 800083c:	4803      	ldr	r0, [pc, #12]	@ (800084c <RFM9x_Receive+0x12c>)
 800083e:	f000 f9db 	bl	8000bf8 <logMemoryUsage>

}
 8000842:	371c      	adds	r7, #28
 8000844:	46bd      	mov	sp, r7
 8000846:	bd90      	pop	{r4, r7, pc}
 8000848:	0800964c 	.word	0x0800964c
 800084c:	08009664 	.word	0x08009664

08000850 <RFM9x_SetMode_Receive>:
void RFM9x_SetMode_Receive(void){
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
	// Set sleep mode, so we can also set RFM9x mode:
	RFM9x_WriteReg(RFM9x_REG_01_OP_MODE, RFM9x_MODE_SLEEP | RFM9x_LONG_RANGE_MODE);
 8000854:	2180      	movs	r1, #128	@ 0x80
 8000856:	2001      	movs	r0, #1
 8000858:	f000 f84a 	bl	80008f0 <RFM9x_WriteReg>
	// Configurer le mode réception continue
	RFM9x_WriteReg(RFM9x_REG_01_OP_MODE, RFM9x_MODE_RXCONTINUOUS);
 800085c:	2105      	movs	r1, #5
 800085e:	2001      	movs	r0, #1
 8000860:	f000 f846 	bl	80008f0 <RFM9x_WriteReg>
	// Configurer l'interruption sur DIO0 pour RxDone
	RFM9x_WriteReg(RFM9x_REG_40_DIO_MAPPING1, 0x00); // Interrupt on RxDone
 8000864:	2100      	movs	r1, #0
 8000866:	2040      	movs	r0, #64	@ 0x40
 8000868:	f000 f842 	bl	80008f0 <RFM9x_WriteReg>
}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}

08000870 <RFM9x_ReadReg>:
	// set to clear all the IRQ bits
	RFM9x_WriteReg( RFM9x_REG_12_IRQ_FLAGS, 0xFF );
}

uint8_t RFM9x_ReadReg( uint8_t reg )
{
 8000870:	b590      	push	{r4, r7, lr}
 8000872:	b089      	sub	sp, #36	@ 0x24
 8000874:	af02      	add	r7, sp, #8
 8000876:	4603      	mov	r3, r0
 8000878:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status;

	// clear reg msb for read
	reg &= 0x7f;
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000880:	71fb      	strb	r3, [r7, #7]

	// buffers to transmit/receive
	uint8_t txData[] = {reg, 0x00};
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	743b      	strb	r3, [r7, #16]
 8000886:	2300      	movs	r3, #0
 8000888:	747b      	strb	r3, [r7, #17]
	uint8_t rxData[] = {0x00, 0x00};
 800088a:	2300      	movs	r3, #0
 800088c:	81bb      	strh	r3, [r7, #12]
	const uint16_t	size = sizeof(txData);
 800088e:	2302      	movs	r3, #2
 8000890:	82bb      	strh	r3, [r7, #20]

	// default data value if error
	uint8_t data = 0x00;
 8000892:	2300      	movs	r3, #0
 8000894:	75fb      	strb	r3, [r7, #23]

	// Set nCS low (active)
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8000896:	2200      	movs	r2, #0
 8000898:	2140      	movs	r1, #64	@ 0x40
 800089a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800089e:	f001 fb19 	bl	8001ed4 <HAL_GPIO_WritePin>

	// write 8 bit reg and read 8 bit data
	status = HAL_SPI_TransmitReceive(hLORACom.hspi, txData, rxData, size, HAL_MAX_DELAY);
 80008a2:	4b11      	ldr	r3, [pc, #68]	@ (80008e8 <RFM9x_ReadReg+0x78>)
 80008a4:	6818      	ldr	r0, [r3, #0]
 80008a6:	8abb      	ldrh	r3, [r7, #20]
 80008a8:	f107 020c 	add.w	r2, r7, #12
 80008ac:	f107 0110 	add.w	r1, r7, #16
 80008b0:	f04f 34ff 	mov.w	r4, #4294967295
 80008b4:	9400      	str	r4, [sp, #0]
 80008b6:	f003 f88f 	bl	80039d8 <HAL_SPI_TransmitReceive>
 80008ba:	4603      	mov	r3, r0
 80008bc:	74fb      	strb	r3, [r7, #19]

	if (status == HAL_OK)
 80008be:	7cfb      	ldrb	r3, [r7, #19]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d102      	bne.n	80008ca <RFM9x_ReadReg+0x5a>
	{
		//second byte is the register value
		data = rxData[1];
 80008c4:	7b7b      	ldrb	r3, [r7, #13]
 80008c6:	75fb      	strb	r3, [r7, #23]
 80008c8:	e003      	b.n	80008d2 <RFM9x_ReadReg+0x62>
	}
	else
	{
		print1("*HAL_ERROR*", 99);
 80008ca:	2163      	movs	r1, #99	@ 0x63
 80008cc:	4807      	ldr	r0, [pc, #28]	@ (80008ec <RFM9x_ReadReg+0x7c>)
 80008ce:	f000 f883 	bl	80009d8 <print1>

	}

	// Set nCS high (inactive)
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 80008d2:	2201      	movs	r2, #1
 80008d4:	2140      	movs	r1, #64	@ 0x40
 80008d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008da:	f001 fafb 	bl	8001ed4 <HAL_GPIO_WritePin>

	return data;
 80008de:	7dfb      	ldrb	r3, [r7, #23]
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	371c      	adds	r7, #28
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd90      	pop	{r4, r7, pc}
 80008e8:	20000088 	.word	0x20000088
 80008ec:	0800967c 	.word	0x0800967c

080008f0 <RFM9x_WriteReg>:

void RFM9x_WriteReg( uint8_t reg, uint8_t data )
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	460a      	mov	r2, r1
 80008fa:	71fb      	strb	r3, [r7, #7]
 80008fc:	4613      	mov	r3, r2
 80008fe:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef status;

	//print2("RFM9x WR", reg, data );

	//set the reg msb for write
	reg |= 0x80;
 8000900:	79fb      	ldrb	r3, [r7, #7]
 8000902:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000906:	71fb      	strb	r3, [r7, #7]

	// Transmit buffer
	uint8_t txData[2] = {reg, data};
 8000908:	79fb      	ldrb	r3, [r7, #7]
 800090a:	723b      	strb	r3, [r7, #8]
 800090c:	79bb      	ldrb	r3, [r7, #6]
 800090e:	727b      	strb	r3, [r7, #9]
	const uint16_t size = sizeof(txData);
 8000910:	2302      	movs	r3, #2
 8000912:	81fb      	strh	r3, [r7, #14]


	// Set nCS low (active)
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8000914:	2200      	movs	r2, #0
 8000916:	2140      	movs	r1, #64	@ 0x40
 8000918:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800091c:	f001 fada 	bl	8001ed4 <HAL_GPIO_WritePin>

	// write 8 bit reg and read 8 bit data
	status = HAL_SPI_Transmit(hLORACom.hspi, txData, size, HAL_MAX_DELAY);
 8000920:	4b0f      	ldr	r3, [pc, #60]	@ (8000960 <RFM9x_WriteReg+0x70>)
 8000922:	6818      	ldr	r0, [r3, #0]
 8000924:	89fa      	ldrh	r2, [r7, #14]
 8000926:	f107 0108 	add.w	r1, r7, #8
 800092a:	f04f 33ff 	mov.w	r3, #4294967295
 800092e:	f002 fede 	bl	80036ee <HAL_SPI_Transmit>
 8000932:	4603      	mov	r3, r0
 8000934:	737b      	strb	r3, [r7, #13]

	if (status != HAL_OK)
 8000936:	7b7b      	ldrb	r3, [r7, #13]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d007      	beq.n	800094c <RFM9x_WriteReg+0x5c>
	{
		HAL_UART_Transmit(hLORACom.huartDebug, (uint8_t *) &"*HAL_ERROR*\r\n", 13, HAL_MAX_DELAY);
 800093c:	4b08      	ldr	r3, [pc, #32]	@ (8000960 <RFM9x_WriteReg+0x70>)
 800093e:	6858      	ldr	r0, [r3, #4]
 8000940:	f04f 33ff 	mov.w	r3, #4294967295
 8000944:	220d      	movs	r2, #13
 8000946:	4907      	ldr	r1, [pc, #28]	@ (8000964 <RFM9x_WriteReg+0x74>)
 8000948:	f003 fece 	bl	80046e8 <HAL_UART_Transmit>
	}

	//HACK: Wait for SPI transfer to complete
	//HAL_Delay(1);
	// Set nCS high (inactive)
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 800094c:	2201      	movs	r2, #1
 800094e:	2140      	movs	r1, #64	@ 0x40
 8000950:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000954:	f001 fabe 	bl	8001ed4 <HAL_GPIO_WritePin>
}
 8000958:	bf00      	nop
 800095a:	3710      	adds	r7, #16
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20000088 	.word	0x20000088
 8000964:	08009688 	.word	0x08009688

08000968 <RF_TestSpi>:

	return;
}
// Debug Routines
void RF_TestSpi( void )
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t v;
	print("\r\n----TEST----");
 800096e:	4816      	ldr	r0, [pc, #88]	@ (80009c8 <RF_TestSpi+0x60>)
 8000970:	f000 f858 	bl	8000a24 <print>
	for(i=0; i<8; i++)
 8000974:	2300      	movs	r3, #0
 8000976:	71fb      	strb	r3, [r7, #7]
 8000978:	e01b      	b.n	80009b2 <RF_TestSpi+0x4a>
	{
		v = (1 << i);
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	2201      	movs	r2, #1
 800097e:	fa02 f303 	lsl.w	r3, r2, r3
 8000982:	71bb      	strb	r3, [r7, #6]
		print1("Write", v);
 8000984:	79bb      	ldrb	r3, [r7, #6]
 8000986:	4619      	mov	r1, r3
 8000988:	4810      	ldr	r0, [pc, #64]	@ (80009cc <RF_TestSpi+0x64>)
 800098a:	f000 f825 	bl	80009d8 <print1>
		RFM9x_WriteReg(RFM9x_REG_40_DIO_MAPPING1, v);
 800098e:	79bb      	ldrb	r3, [r7, #6]
 8000990:	4619      	mov	r1, r3
 8000992:	2040      	movs	r0, #64	@ 0x40
 8000994:	f7ff ffac 	bl	80008f0 <RFM9x_WriteReg>
		//Delay_ms(1);
		v =RFM9x_ReadReg(RFM9x_REG_40_DIO_MAPPING1);
 8000998:	2040      	movs	r0, #64	@ 0x40
 800099a:	f7ff ff69 	bl	8000870 <RFM9x_ReadReg>
 800099e:	4603      	mov	r3, r0
 80009a0:	71bb      	strb	r3, [r7, #6]
		print1("Read ", v);
 80009a2:	79bb      	ldrb	r3, [r7, #6]
 80009a4:	4619      	mov	r1, r3
 80009a6:	480a      	ldr	r0, [pc, #40]	@ (80009d0 <RF_TestSpi+0x68>)
 80009a8:	f000 f816 	bl	80009d8 <print1>
	for(i=0; i<8; i++)
 80009ac:	79fb      	ldrb	r3, [r7, #7]
 80009ae:	3301      	adds	r3, #1
 80009b0:	71fb      	strb	r3, [r7, #7]
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	2b07      	cmp	r3, #7
 80009b6:	d9e0      	bls.n	800097a <RF_TestSpi+0x12>
		//Delay_ms(1);
	}
	print("------------");
 80009b8:	4806      	ldr	r0, [pc, #24]	@ (80009d4 <RF_TestSpi+0x6c>)
 80009ba:	f000 f833 	bl	8000a24 <print>
	return;
 80009be:	bf00      	nop
}
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	08009698 	.word	0x08009698
 80009cc:	080096a8 	.word	0x080096a8
 80009d0:	080096b0 	.word	0x080096b0
 80009d4:	080096b8 	.word	0x080096b8

080009d8 <print1>:
void print1(const char *text, uint8_t x)
{	char msg[50];
 80009d8:	b590      	push	{r4, r7, lr}
 80009da:	b091      	sub	sp, #68	@ 0x44
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
 80009e0:	460b      	mov	r3, r1
 80009e2:	70fb      	strb	r3, [r7, #3]
sprintf(msg, "%s 0x%02X\r\n", text, (int) x );
 80009e4:	78fb      	ldrb	r3, [r7, #3]
 80009e6:	f107 000c 	add.w	r0, r7, #12
 80009ea:	687a      	ldr	r2, [r7, #4]
 80009ec:	490b      	ldr	r1, [pc, #44]	@ (8000a1c <print1+0x44>)
 80009ee:	f007 fe6d 	bl	80086cc <siprintf>
HAL_UART_Transmit(hLORACom.huartDebug, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);
 80009f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000a20 <print1+0x48>)
 80009f4:	685c      	ldr	r4, [r3, #4]
 80009f6:	f107 030c 	add.w	r3, r7, #12
 80009fa:	4618      	mov	r0, r3
 80009fc:	f7ff fbe8 	bl	80001d0 <strlen>
 8000a00:	4603      	mov	r3, r0
 8000a02:	b29a      	uxth	r2, r3
 8000a04:	f107 010c 	add.w	r1, r7, #12
 8000a08:	f04f 33ff 	mov.w	r3, #4294967295
 8000a0c:	4620      	mov	r0, r4
 8000a0e:	f003 fe6b 	bl	80046e8 <HAL_UART_Transmit>
}
 8000a12:	bf00      	nop
 8000a14:	3744      	adds	r7, #68	@ 0x44
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd90      	pop	{r4, r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	080096c8 	.word	0x080096c8
 8000a20:	20000088 	.word	0x20000088

08000a24 <print>:
void print(const char *text)
{char msg[50];
 8000a24:	b590      	push	{r4, r7, lr}
 8000a26:	b091      	sub	sp, #68	@ 0x44
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
sprintf(msg, "%s\r\n", text );
 8000a2c:	f107 030c 	add.w	r3, r7, #12
 8000a30:	687a      	ldr	r2, [r7, #4]
 8000a32:	490c      	ldr	r1, [pc, #48]	@ (8000a64 <print+0x40>)
 8000a34:	4618      	mov	r0, r3
 8000a36:	f007 fe49 	bl	80086cc <siprintf>
HAL_UART_Transmit(hLORACom.huartDebug, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a68 <print+0x44>)
 8000a3c:	685c      	ldr	r4, [r3, #4]
 8000a3e:	f107 030c 	add.w	r3, r7, #12
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff fbc4 	bl	80001d0 <strlen>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	b29a      	uxth	r2, r3
 8000a4c:	f107 010c 	add.w	r1, r7, #12
 8000a50:	f04f 33ff 	mov.w	r3, #4294967295
 8000a54:	4620      	mov	r0, r4
 8000a56:	f003 fe47 	bl	80046e8 <HAL_UART_Transmit>
}
 8000a5a:	bf00      	nop
 8000a5c:	3744      	adds	r7, #68	@ 0x44
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd90      	pop	{r4, r7, pc}
 8000a62:	bf00      	nop
 8000a64:	080096d4 	.word	0x080096d4
 8000a68:	20000088 	.word	0x20000088

08000a6c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000a74:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000a78:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000a7c:	f003 0301 	and.w	r3, r3, #1
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d013      	beq.n	8000aac <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000a84:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000a88:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000a8c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d00b      	beq.n	8000aac <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000a94:	e000      	b.n	8000a98 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000a96:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000a98:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d0f9      	beq.n	8000a96 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000aa2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000aa6:	687a      	ldr	r2, [r7, #4]
 8000aa8:	b2d2      	uxtb	r2, r2
 8000aaa:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000aac:	687b      	ldr	r3, [r7, #4]
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
	...

08000abc <debug>:

#include "RTOS_subfunctions/debug.h"
#include "shared.h"
HeapStats_t heapStats;
/************************ TASK ************************/
void debug(void){
 8000abc:	b580      	push	{r7, lr}
 8000abe:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8000ac2:	af02      	add	r7, sp, #8
	char buffer[512];
	UARTdebugQ_t UARTdebug;

	xQueueReceive(UARTdebugHandle, &UARTdebug, osWaitForever);
 8000ac4:	4b1f      	ldr	r3, [pc, #124]	@ (8000b44 <debug+0x88>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4639      	mov	r1, r7
 8000aca:	f04f 32ff 	mov.w	r2, #4294967295
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f005 f8e0 	bl	8005c94 <xQueueReceive>

	snprintf(buffer, sizeof(buffer), "%s%s%s", UARTdebug.color, UARTdebug.message, ANSI_COLOR_RESET);
 8000ad4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000ad8:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8000adc:	685a      	ldr	r2, [r3, #4]
 8000ade:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000ae2:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f107 0008 	add.w	r0, r7, #8
 8000aec:	4916      	ldr	r1, [pc, #88]	@ (8000b48 <debug+0x8c>)
 8000aee:	9101      	str	r1, [sp, #4]
 8000af0:	9300      	str	r3, [sp, #0]
 8000af2:	4613      	mov	r3, r2
 8000af4:	4a15      	ldr	r2, [pc, #84]	@ (8000b4c <debug+0x90>)
 8000af6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000afa:	f007 fdb3 	bl	8008664 <sniprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer),HAL_MAX_DELAY); //Le IT ne met pas les messages dans le bon ordre
 8000afe:	f107 0308 	add.w	r3, r7, #8
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff fb64 	bl	80001d0 <strlen>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	b29a      	uxth	r2, r3
 8000b0c:	f107 0108 	add.w	r1, r7, #8
 8000b10:	f04f 33ff 	mov.w	r3, #4294967295
 8000b14:	480e      	ldr	r0, [pc, #56]	@ (8000b50 <debug+0x94>)
 8000b16:	f003 fde7 	bl	80046e8 <HAL_UART_Transmit>
	vPortFree(UARTdebug.message);
 8000b1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000b1e:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4618      	mov	r0, r3
 8000b26:	f007 fa6f 	bl	8008008 <vPortFree>
	vPortFree(UARTdebug.color);
 8000b2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000b2e:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	4618      	mov	r0, r3
 8000b36:	f007 fa67 	bl	8008008 <vPortFree>
}
 8000b3a:	bf00      	nop
 8000b3c:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	200000c0 	.word	0x200000c0
 8000b48:	080096e4 	.word	0x080096e4
 8000b4c:	080096dc 	.word	0x080096dc
 8000b50:	20000428 	.word	0x20000428

08000b54 <UART_Transmit_With_Color>:
/************************ ---- ************************/
/************************ FUNCTIONS ************************/
void UART_Transmit_With_Color(char *data, char *color) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	6039      	str	r1, [r7, #0]
	UARTdebugQ_t UARTdebug;

	// Allouer de la mémoire pour le message et la couleur
	UARTdebug.message = pvPortMalloc(strlen(data) + 1);
 8000b5e:	6878      	ldr	r0, [r7, #4]
 8000b60:	f7ff fb36 	bl	80001d0 <strlen>
 8000b64:	4603      	mov	r3, r0
 8000b66:	3301      	adds	r3, #1
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f007 f97f 	bl	8007e6c <pvPortMalloc>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	60bb      	str	r3, [r7, #8]
	UARTdebug.color = pvPortMalloc(strlen(color) + 1);
 8000b72:	6838      	ldr	r0, [r7, #0]
 8000b74:	f7ff fb2c 	bl	80001d0 <strlen>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f007 f975 	bl	8007e6c <pvPortMalloc>
 8000b82:	4603      	mov	r3, r0
 8000b84:	60fb      	str	r3, [r7, #12]

	if (UARTdebug.message == NULL || UARTdebug.color == NULL) Error_Handler();
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d002      	beq.n	8000b92 <UART_Transmit_With_Color+0x3e>
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d101      	bne.n	8000b96 <UART_Transmit_With_Color+0x42>
 8000b92:	f000 fbf1 	bl	8001378 <Error_Handler>

	// Copier les données
	strcpy(UARTdebug.message, data);
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	6879      	ldr	r1, [r7, #4]
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f007 fedb 	bl	8008956 <strcpy>
	strcpy(UARTdebug.color, color);
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	6839      	ldr	r1, [r7, #0]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f007 fed6 	bl	8008956 <strcpy>
	xQueueSendToBack(UARTdebugHandle, &UARTdebug, osWaitForever);
 8000baa:	4b06      	ldr	r3, [pc, #24]	@ (8000bc4 <UART_Transmit_With_Color+0x70>)
 8000bac:	6818      	ldr	r0, [r3, #0]
 8000bae:	f107 0108 	add.w	r1, r7, #8
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb8:	f004 feda 	bl	8005970 <xQueueGenericSend>

}
 8000bbc:	bf00      	nop
 8000bbe:	3710      	adds	r7, #16
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	200000c0 	.word	0x200000c0

08000bc8 <__io_putchar>:
		snprintf(hexString + (i * 2), 3, "%02X", array[i]);
	}
	hexString[len * 2+1] = '\0';	// Ajouter le caractère de fin de chaîne
}

int __io_putchar(int ch) {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff ff4a 	bl	8000a6c <ITM_SendChar>
	return ch;
 8000bd8:	687b      	ldr	r3, [r7, #4]
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
	...

08000be4 <updateMemoryUsage>:

void updateMemoryUsage(void) {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
	vPortGetHeapStats(&heapStats);
 8000be8:	4802      	ldr	r0, [pc, #8]	@ (8000bf4 <updateMemoryUsage+0x10>)
 8000bea:	f007 fb2d 	bl	8008248 <vPortGetHeapStats>
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000090 	.word	0x20000090

08000bf8 <logMemoryUsage>:
void logMemoryUsage(char*phase) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
	// Obtenir les statistiques de la mémoire
	vPortGetHeapStats(&heapStats);
 8000c00:	481c      	ldr	r0, [pc, #112]	@ (8000c74 <logMemoryUsage+0x7c>)
 8000c02:	f007 fb21 	bl	8008248 <vPortGetHeapStats>
	 TickType_t systemTime = xTaskGetTickCount() * portTICK_PERIOD_MS;
 8000c06:	f005 ff7d 	bl	8006b04 <xTaskGetTickCount>
 8000c0a:	60f8      	str	r0, [r7, #12]
	// Imprimer les statistiques de mémoire
	printf("\n-----%s-----\tTIME: %lu\n", phase,systemTime);
 8000c0c:	68fa      	ldr	r2, [r7, #12]
 8000c0e:	6879      	ldr	r1, [r7, #4]
 8000c10:	4819      	ldr	r0, [pc, #100]	@ (8000c78 <logMemoryUsage+0x80>)
 8000c12:	f007 fd15 	bl	8008640 <iprintf>
	printf("Available Heap Space: %u bytes\n", (unsigned int)heapStats.xAvailableHeapSpaceInBytes);
 8000c16:	4b17      	ldr	r3, [pc, #92]	@ (8000c74 <logMemoryUsage+0x7c>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4817      	ldr	r0, [pc, #92]	@ (8000c7c <logMemoryUsage+0x84>)
 8000c1e:	f007 fd0f 	bl	8008640 <iprintf>
	printf("Largest Free Block: %u bytes\n", (unsigned int)heapStats.xSizeOfLargestFreeBlockInBytes);
 8000c22:	4b14      	ldr	r3, [pc, #80]	@ (8000c74 <logMemoryUsage+0x7c>)
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	4619      	mov	r1, r3
 8000c28:	4815      	ldr	r0, [pc, #84]	@ (8000c80 <logMemoryUsage+0x88>)
 8000c2a:	f007 fd09 	bl	8008640 <iprintf>
	printf("Smallest Free Block: %u bytes\n", (unsigned int)heapStats.xSizeOfSmallestFreeBlockInBytes);
 8000c2e:	4b11      	ldr	r3, [pc, #68]	@ (8000c74 <logMemoryUsage+0x7c>)
 8000c30:	689b      	ldr	r3, [r3, #8]
 8000c32:	4619      	mov	r1, r3
 8000c34:	4813      	ldr	r0, [pc, #76]	@ (8000c84 <logMemoryUsage+0x8c>)
 8000c36:	f007 fd03 	bl	8008640 <iprintf>
	printf("Number of Free Blocks: %u\n", (unsigned int)heapStats.xNumberOfFreeBlocks);
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c74 <logMemoryUsage+0x7c>)
 8000c3c:	68db      	ldr	r3, [r3, #12]
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4811      	ldr	r0, [pc, #68]	@ (8000c88 <logMemoryUsage+0x90>)
 8000c42:	f007 fcfd 	bl	8008640 <iprintf>
	printf("Minimum Ever Free Bytes Remaining: %u bytes\n", (unsigned int)heapStats.xMinimumEverFreeBytesRemaining);
 8000c46:	4b0b      	ldr	r3, [pc, #44]	@ (8000c74 <logMemoryUsage+0x7c>)
 8000c48:	691b      	ldr	r3, [r3, #16]
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	480f      	ldr	r0, [pc, #60]	@ (8000c8c <logMemoryUsage+0x94>)
 8000c4e:	f007 fcf7 	bl	8008640 <iprintf>
	printf("Number of Successful Allocations: %u\n", (unsigned int)heapStats.xNumberOfSuccessfulAllocations);
 8000c52:	4b08      	ldr	r3, [pc, #32]	@ (8000c74 <logMemoryUsage+0x7c>)
 8000c54:	695b      	ldr	r3, [r3, #20]
 8000c56:	4619      	mov	r1, r3
 8000c58:	480d      	ldr	r0, [pc, #52]	@ (8000c90 <logMemoryUsage+0x98>)
 8000c5a:	f007 fcf1 	bl	8008640 <iprintf>
	printf("Number of Successful Frees: %u\n\n", (unsigned int)heapStats.xNumberOfSuccessfulFrees);
 8000c5e:	4b05      	ldr	r3, [pc, #20]	@ (8000c74 <logMemoryUsage+0x7c>)
 8000c60:	699b      	ldr	r3, [r3, #24]
 8000c62:	4619      	mov	r1, r3
 8000c64:	480b      	ldr	r0, [pc, #44]	@ (8000c94 <logMemoryUsage+0x9c>)
 8000c66:	f007 fceb 	bl	8008640 <iprintf>
}
 8000c6a:	bf00      	nop
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000090 	.word	0x20000090
 8000c78:	080096f4 	.word	0x080096f4
 8000c7c:	08009710 	.word	0x08009710
 8000c80:	08009730 	.word	0x08009730
 8000c84:	08009750 	.word	0x08009750
 8000c88:	08009770 	.word	0x08009770
 8000c8c:	0800978c 	.word	0x0800978c
 8000c90:	080097bc 	.word	0x080097bc
 8000c94:	080097e4 	.word	0x080097e4

08000c98 <receivedLora>:
 */

#include <RTOS_subfunctions/receiverLoRA.h>

/************************ TASK ************************/
void receivedLora(void){
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
	logMemoryUsage("START - LoRA Reception");
 8000c9e:	4826      	ldr	r0, [pc, #152]	@ (8000d38 <receivedLora+0xa0>)
 8000ca0:	f7ff ffaa 	bl	8000bf8 <logMemoryUsage>
	UART_Transmit_With_Color("\n\r--- RECEIVED MESSAGE ---",ANSI_COLOR_GREEN);
 8000ca4:	4925      	ldr	r1, [pc, #148]	@ (8000d3c <receivedLora+0xa4>)
 8000ca6:	4826      	ldr	r0, [pc, #152]	@ (8000d40 <receivedLora+0xa8>)
 8000ca8:	f7ff ff54 	bl	8000b54 <UART_Transmit_With_Color>
	LORA_MessageReception* LORA_Receive_Message = (LORA_MessageReception*)pvPortMalloc(sizeof(LORA_MessageReception)); // On pointe vers une partie de la memoire HEAP protégée
 8000cac:	2010      	movs	r0, #16
 8000cae:	f007 f8dd 	bl	8007e6c <pvPortMalloc>
 8000cb2:	6078      	str	r0, [r7, #4]
	if (LORA_Receive_Message == NULL) Error_Handler();
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d101      	bne.n	8000cbe <receivedLora+0x26>
 8000cba:	f000 fb5d 	bl	8001378 <Error_Handler>
	LORA_Receive_Message->header = (LORA_HeaderforSending*)pvPortMalloc(sizeof(LORA_HeaderforSending));
 8000cbe:	2007      	movs	r0, #7
 8000cc0:	f007 f8d4 	bl	8007e6c <pvPortMalloc>
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
	if (LORA_Receive_Message->header == NULL) Error_Handler();
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	689b      	ldr	r3, [r3, #8]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d101      	bne.n	8000cd6 <receivedLora+0x3e>
 8000cd2:	f000 fb51 	bl	8001378 <Error_Handler>

	updateMemoryUsage();
 8000cd6:	f7ff ff85 	bl	8000be4 <updateMemoryUsage>

	ITM_Port32(30)=357951;
 8000cda:	4b1a      	ldr	r3, [pc, #104]	@ (8000d44 <receivedLora+0xac>)
 8000cdc:	4a1a      	ldr	r2, [pc, #104]	@ (8000d48 <receivedLora+0xb0>)
 8000cde:	601a      	str	r2, [r3, #0]
	RFM9x_Receive(LORA_Receive_Message);
 8000ce0:	6878      	ldr	r0, [r7, #4]
 8000ce2:	f7ff fd1d 	bl	8000720 <RFM9x_Receive>

	if (!LORA_Receive_Message->RxNbrBytes){
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	789b      	ldrb	r3, [r3, #2]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d103      	bne.n	8000cf6 <receivedLora+0x5e>
		ITM_Port32(30)=66; //Si on recoit du bruit
 8000cee:	4b15      	ldr	r3, [pc, #84]	@ (8000d44 <receivedLora+0xac>)
 8000cf0:	2242      	movs	r2, #66	@ 0x42
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	e00e      	b.n	8000d14 <receivedLora+0x7c>
	}

	else if (LORA_Receive_Message->header->recipient == MODULE_BROADCAST_ADDRESS
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	689b      	ldr	r3, [r3, #8]
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	2bff      	cmp	r3, #255	@ 0xff
 8000cfe:	d004      	beq.n	8000d0a <receivedLora+0x72>
			||LORA_Receive_Message->header->recipient == MODULE_SOURCE_ADDRESS){
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	689b      	ldr	r3, [r3, #8]
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d104      	bne.n	8000d14 <receivedLora+0x7c>
			vPortFree(LORA_Receive_Message->payload);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	68db      	ldr	r3, [r3, #12]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f007 f97a 	bl	8008008 <vPortFree>

	}
	updateMemoryUsage();
 8000d14:	f7ff ff66 	bl	8000be4 <updateMemoryUsage>
	vPortFree(LORA_Receive_Message->header);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	689b      	ldr	r3, [r3, #8]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f007 f973 	bl	8008008 <vPortFree>
	vPortFree(LORA_Receive_Message); //contient des attribut qui sont pvPortMalloc et qui sont free de facon asynchrone
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f007 f970 	bl	8008008 <vPortFree>
	logMemoryUsage("END -LoRA Reception");
 8000d28:	4808      	ldr	r0, [pc, #32]	@ (8000d4c <receivedLora+0xb4>)
 8000d2a:	f7ff ff65 	bl	8000bf8 <logMemoryUsage>
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	08009808 	.word	0x08009808
 8000d3c:	08009820 	.word	0x08009820
 8000d40:	08009828 	.word	0x08009828
 8000d44:	e0000078 	.word	0xe0000078
 8000d48:	0005763f 	.word	0x0005763f
 8000d4c:	08009844 	.word	0x08009844

08000d50 <senderLoRA>:
 *      Author: romain.pace
 */
#include "RTOS_subfunctions/senderLoRA.h"

/************************ TASK ************************/
void senderLoRA(){
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
	LoRAtoSendQ_t LoRAtoSend;
	logMemoryUsage("START - Lora Sender");
 8000d56:	482a      	ldr	r0, [pc, #168]	@ (8000e00 <senderLoRA+0xb0>)
 8000d58:	f7ff ff4e 	bl	8000bf8 <logMemoryUsage>
	//RECEVOIR D UNE QUEUE : format :{Header, DynamicBuffer}
	//Allouer memoire ou pas
	xQueueReceive(LoRA_toSendHandle, &LoRAtoSend, osWaitForever);
 8000d5c:	4b29      	ldr	r3, [pc, #164]	@ (8000e04 <senderLoRA+0xb4>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	1d39      	adds	r1, r7, #4
 8000d62:	f04f 32ff 	mov.w	r2, #4294967295
 8000d66:	4618      	mov	r0, r3
 8000d68:	f004 ff94 	bl	8005c94 <xQueueReceive>
	UART_Transmit_With_Color("\n\r--- SEND MESSAGE ---",ANSI_COLOR_MAGENTA);
 8000d6c:	4926      	ldr	r1, [pc, #152]	@ (8000e08 <senderLoRA+0xb8>)
 8000d6e:	4827      	ldr	r0, [pc, #156]	@ (8000e0c <senderLoRA+0xbc>)
 8000d70:	f7ff fef0 	bl	8000b54 <UART_Transmit_With_Color>
	updateMemoryUsage();
 8000d74:	f7ff ff36 	bl	8000be4 <updateMemoryUsage>
	uint8_t* buffer = (uint8_t*)pvPortMalloc(LoRAtoSend.header->len_payload + sizeof(LORA_HeaderforReception));
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	78db      	ldrb	r3, [r3, #3]
 8000d7c:	3304      	adds	r3, #4
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f007 f874 	bl	8007e6c <pvPortMalloc>
 8000d84:	60f8      	str	r0, [r7, #12]
	if(buffer == NULL) Error_Handler();
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d101      	bne.n	8000d90 <senderLoRA+0x40>
 8000d8c:	f000 faf4 	bl	8001378 <Error_Handler>
	updateMemoryUsage();
 8000d90:	f7ff ff28 	bl	8000be4 <updateMemoryUsage>


	//On rempli la premiere partie du buffer

	buffer[0] = LoRAtoSend.header->recipient;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	781a      	ldrb	r2, [r3, #0]
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	701a      	strb	r2, [r3, #0]
	buffer[1] = LoRAtoSend.header->sender;
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	3301      	adds	r3, #1
 8000da2:	7852      	ldrb	r2, [r2, #1]
 8000da4:	701a      	strb	r2, [r3, #0]
	buffer[2] = LoRAtoSend.header->type;
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	3302      	adds	r3, #2
 8000dac:	7892      	ldrb	r2, [r2, #2]
 8000dae:	701a      	strb	r2, [r3, #0]
	buffer[3] = (uint8_t)LoRAtoSend.header->len_payload;
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	3303      	adds	r3, #3
 8000db6:	78d2      	ldrb	r2, [r2, #3]
 8000db8:	701a      	strb	r2, [r3, #0]

	memcpy(buffer + sizeof(LORA_HeaderforReception),
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	1d18      	adds	r0, r3, #4
			LoRAtoSend.payload->buffer ,
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	6819      	ldr	r1, [r3, #0]
			LoRAtoSend.header->len_payload);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	78db      	ldrb	r3, [r3, #3]
	memcpy(buffer + sizeof(LORA_HeaderforReception),
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	f007 fdcd 	bl	8008966 <memcpy>
	updateMemoryUsage();
 8000dcc:	f7ff ff0a 	bl	8000be4 <updateMemoryUsage>

	RFM9x_Send(buffer, LoRAtoSend.header->len_payload + sizeof(LORA_HeaderforReception)); //Pour l'instant on s'oblige a faire comme cela,
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	78db      	ldrb	r3, [r3, #3]
 8000dd4:	3304      	adds	r3, #4
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	4619      	mov	r1, r3
 8000dda:	68f8      	ldr	r0, [r7, #12]
 8000ddc:	f7ff fc6e 	bl	80006bc <RFM9x_Send>
	UART_Transmit_With_Color("\n\r--- SEND MESSAGE - DONE ---\n",ANSI_COLOR_MAGENTA);
 8000de0:	4909      	ldr	r1, [pc, #36]	@ (8000e08 <senderLoRA+0xb8>)
 8000de2:	480b      	ldr	r0, [pc, #44]	@ (8000e10 <senderLoRA+0xc0>)
 8000de4:	f7ff feb6 	bl	8000b54 <UART_Transmit_With_Color>
	vPortFree(buffer);
 8000de8:	68f8      	ldr	r0, [r7, #12]
 8000dea:	f007 f90d 	bl	8008008 <vPortFree>

	logMemoryUsage("END - Lora Sender");
 8000dee:	4809      	ldr	r0, [pc, #36]	@ (8000e14 <senderLoRA+0xc4>)
 8000df0:	f7ff ff02 	bl	8000bf8 <logMemoryUsage>
	RFM9x_SetMode_Receive();
 8000df4:	f7ff fd2c 	bl	8000850 <RFM9x_SetMode_Receive>
}
 8000df8:	bf00      	nop
 8000dfa:	3710      	adds	r7, #16
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	08009858 	.word	0x08009858
 8000e04:	200000bc 	.word	0x200000bc
 8000e08:	0800986c 	.word	0x0800986c
 8000e0c:	08009874 	.word	0x08009874
 8000e10:	0800988c 	.word	0x0800988c
 8000e14:	080098ac 	.word	0x080098ac

08000e18 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0

}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr

08000e26 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0
return 0;
 8000e2a:	2300      	movs	r3, #0
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
	...

08000e38 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	4a07      	ldr	r2, [pc, #28]	@ (8000e64 <vApplicationGetIdleTaskMemory+0x2c>)
 8000e48:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	4a06      	ldr	r2, [pc, #24]	@ (8000e68 <vApplicationGetIdleTaskMemory+0x30>)
 8000e4e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2280      	movs	r2, #128	@ 0x80
 8000e54:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000e56:	bf00      	nop
 8000e58:	3714      	adds	r7, #20
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	200000c8 	.word	0x200000c8
 8000e68:	20000174 	.word	0x20000174

08000e6c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000e6c:	b5b0      	push	{r4, r5, r7, lr}
 8000e6e:	b0a6      	sub	sp, #152	@ 0x98
 8000e70:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of xSem_LORAReceive_start */
  osSemaphoreDef(xSem_LORAReceive_start);
 8000e72:	2300      	movs	r3, #0
 8000e74:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000e78:	2300      	movs	r3, #0
 8000e7a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  xSem_LORAReceive_startHandle = osSemaphoreCreate(osSemaphore(xSem_LORAReceive_start), 1);
 8000e7e:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8000e82:	2101      	movs	r1, #1
 8000e84:	4618      	mov	r0, r3
 8000e86:	f004 fa9b 	bl	80053c0 <osSemaphoreCreate>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	4a36      	ldr	r2, [pc, #216]	@ (8000f68 <MX_FREERTOS_Init+0xfc>)
 8000e8e:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of LoRA_toSend */
  osMessageQDef(LoRA_toSend, 16, LoRAtoSendQ_t);
 8000e90:	4b36      	ldr	r3, [pc, #216]	@ (8000f6c <MX_FREERTOS_Init+0x100>)
 8000e92:	f107 0480 	add.w	r4, r7, #128	@ 0x80
 8000e96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  LoRA_toSendHandle = osMessageCreate(osMessageQ(LoRA_toSend), NULL);
 8000e9c:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f004 fb42 	bl	800552c <osMessageCreate>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	4a31      	ldr	r2, [pc, #196]	@ (8000f70 <MX_FREERTOS_Init+0x104>)
 8000eac:	6013      	str	r3, [r2, #0]

  /* definition and creation of UARTdebug */
  osMessageQDef(UARTdebug, 16, UARTdebugQ_t);
 8000eae:	4b2f      	ldr	r3, [pc, #188]	@ (8000f6c <MX_FREERTOS_Init+0x100>)
 8000eb0:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 8000eb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000eb6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  UARTdebugHandle = osMessageCreate(osMessageQ(UARTdebug), NULL);
 8000eba:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f004 fb33 	bl	800552c <osMessageCreate>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	4a2a      	ldr	r2, [pc, #168]	@ (8000f74 <MX_FREERTOS_Init+0x108>)
 8000eca:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of StartInit */
  osThreadDef(StartInit, StartInitHandle_TASK, osPriorityRealtime, 0, 512);
 8000ecc:	4b2a      	ldr	r3, [pc, #168]	@ (8000f78 <MX_FREERTOS_Init+0x10c>)
 8000ece:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8000ed2:	461d      	mov	r5, r3
 8000ed4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ed6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ed8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000edc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  StartInitHandle = osThreadCreate(osThread(StartInit), NULL);
 8000ee0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f004 f986 	bl	80051f8 <osThreadCreate>
 8000eec:	4603      	mov	r3, r0
 8000eee:	4a23      	ldr	r2, [pc, #140]	@ (8000f7c <MX_FREERTOS_Init+0x110>)
 8000ef0:	6013      	str	r3, [r2, #0]

  /* definition and creation of SenderLoRA */
  osThreadDef(SenderLoRA, SenderLoRA_TASK, osPriorityNormal, 0, 512);
 8000ef2:	4b23      	ldr	r3, [pc, #140]	@ (8000f80 <MX_FREERTOS_Init+0x114>)
 8000ef4:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8000ef8:	461d      	mov	r5, r3
 8000efa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000efc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000efe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SenderLoRAHandle = osThreadCreate(osThread(SenderLoRA), NULL);
 8000f06:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f004 f973 	bl	80051f8 <osThreadCreate>
 8000f12:	4603      	mov	r3, r0
 8000f14:	4a1b      	ldr	r2, [pc, #108]	@ (8000f84 <MX_FREERTOS_Init+0x118>)
 8000f16:	6013      	str	r3, [r2, #0]

  /* definition and creation of ReceiverLoRA */
  osThreadDef(ReceiverLoRA, ReceiverLoRA_TASK, osPriorityNormal, 0, 512);
 8000f18:	4b1b      	ldr	r3, [pc, #108]	@ (8000f88 <MX_FREERTOS_Init+0x11c>)
 8000f1a:	f107 041c 	add.w	r4, r7, #28
 8000f1e:	461d      	mov	r5, r3
 8000f20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f24:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f28:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ReceiverLoRAHandle = osThreadCreate(osThread(ReceiverLoRA), NULL);
 8000f2c:	f107 031c 	add.w	r3, r7, #28
 8000f30:	2100      	movs	r1, #0
 8000f32:	4618      	mov	r0, r3
 8000f34:	f004 f960 	bl	80051f8 <osThreadCreate>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	4a14      	ldr	r2, [pc, #80]	@ (8000f8c <MX_FREERTOS_Init+0x120>)
 8000f3c:	6013      	str	r3, [r2, #0]

  /* definition and creation of Debug */
  osThreadDef(Debug, Debug_TASK, osPriorityBelowNormal, 0, 512);
 8000f3e:	4b14      	ldr	r3, [pc, #80]	@ (8000f90 <MX_FREERTOS_Init+0x124>)
 8000f40:	463c      	mov	r4, r7
 8000f42:	461d      	mov	r5, r3
 8000f44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f48:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f4c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DebugHandle = osThreadCreate(osThread(Debug), NULL);
 8000f50:	463b      	mov	r3, r7
 8000f52:	2100      	movs	r1, #0
 8000f54:	4618      	mov	r0, r3
 8000f56:	f004 f94f 	bl	80051f8 <osThreadCreate>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f94 <MX_FREERTOS_Init+0x128>)
 8000f5e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000f60:	bf00      	nop
 8000f62:	3798      	adds	r7, #152	@ 0x98
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bdb0      	pop	{r4, r5, r7, pc}
 8000f68:	200000c4 	.word	0x200000c4
 8000f6c:	080098c0 	.word	0x080098c0
 8000f70:	200000bc 	.word	0x200000bc
 8000f74:	200000c0 	.word	0x200000c0
 8000f78:	080098dc 	.word	0x080098dc
 8000f7c:	200000ac 	.word	0x200000ac
 8000f80:	08009904 	.word	0x08009904
 8000f84:	200000b0 	.word	0x200000b0
 8000f88:	08009930 	.word	0x08009930
 8000f8c:	200000b4 	.word	0x200000b4
 8000f90:	08009954 	.word	0x08009954
 8000f94:	200000b8 	.word	0x200000b8

08000f98 <StartInitHandle_TASK>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartInitHandle_TASK */
void StartInitHandle_TASK(void const * argument)
{
 8000f98:	b590      	push	{r4, r7, lr}
 8000f9a:	b08d      	sub	sp, #52	@ 0x34
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartInitHandle_TASK */
  /* Infinite loop */
	const char startMessage[] = "\r\nStarting...\r\n";
 8000fa0:	4b22      	ldr	r3, [pc, #136]	@ (800102c <StartInitHandle_TASK+0x94>)
 8000fa2:	f107 041c 	add.w	r4, r7, #28
 8000fa6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fa8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	const char initDoneMessage[] = "\r\nInit Done\r\n\n";
 8000fac:	4b20      	ldr	r3, [pc, #128]	@ (8001030 <StartInitHandle_TASK+0x98>)
 8000fae:	f107 040c 	add.w	r4, r7, #12
 8000fb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fb4:	c407      	stmia	r4!, {r0, r1, r2}
 8000fb6:	8023      	strh	r3, [r4, #0]
 8000fb8:	3402      	adds	r4, #2
 8000fba:	0c1b      	lsrs	r3, r3, #16
 8000fbc:	7023      	strb	r3, [r4, #0]

	HAL_UART_Transmit(&huart2, (uint8_t *)startMessage, sizeof(startMessage), 10);
 8000fbe:	f107 011c 	add.w	r1, r7, #28
 8000fc2:	230a      	movs	r3, #10
 8000fc4:	2210      	movs	r2, #16
 8000fc6:	481b      	ldr	r0, [pc, #108]	@ (8001034 <StartInitHandle_TASK+0x9c>)
 8000fc8:	f003 fb8e 	bl	80046e8 <HAL_UART_Transmit>

	LORACom_Init(&hspi2,&huart2);
 8000fcc:	4919      	ldr	r1, [pc, #100]	@ (8001034 <StartInitHandle_TASK+0x9c>)
 8000fce:	481a      	ldr	r0, [pc, #104]	@ (8001038 <StartInitHandle_TASK+0xa0>)
 8000fd0:	f7ff fb02 	bl	80005d8 <LORACom_Init>
	RFM9x_Init();
 8000fd4:	f7ff fb14 	bl	8000600 <RFM9x_Init>

	vTaskDelay(1000);
 8000fd8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fdc:	f005 fc44 	bl	8006868 <vTaskDelay>

	HAL_UART_Transmit(&huart2, (uint8_t *)initDoneMessage, sizeof(initDoneMessage), 10);
 8000fe0:	f107 010c 	add.w	r1, r7, #12
 8000fe4:	230a      	movs	r3, #10
 8000fe6:	220f      	movs	r2, #15
 8000fe8:	4812      	ldr	r0, [pc, #72]	@ (8001034 <StartInitHandle_TASK+0x9c>)
 8000fea:	f003 fb7d 	bl	80046e8 <HAL_UART_Transmit>

	logMemoryUsage("INITILISATION");
 8000fee:	4813      	ldr	r0, [pc, #76]	@ (800103c <StartInitHandle_TASK+0xa4>)
 8000ff0:	f7ff fe02 	bl	8000bf8 <logMemoryUsage>
	osSignalSet(ReceiverLoRAHandle, 0x01);
 8000ff4:	4b12      	ldr	r3, [pc, #72]	@ (8001040 <StartInitHandle_TASK+0xa8>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f004 f954 	bl	80052a8 <osSignalSet>
	osSignalSet(SenderLoRAHandle, 0x01);
 8001000:	4b10      	ldr	r3, [pc, #64]	@ (8001044 <StartInitHandle_TASK+0xac>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2101      	movs	r1, #1
 8001006:	4618      	mov	r0, r3
 8001008:	f004 f94e 	bl	80052a8 <osSignalSet>
	osStatus event = osThreadTerminate(StartInitHandle);
 800100c:	4b0e      	ldr	r3, [pc, #56]	@ (8001048 <StartInitHandle_TASK+0xb0>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4618      	mov	r0, r3
 8001012:	f004 f93d 	bl	8005290 <osThreadTerminate>
 8001016:	62f8      	str	r0, [r7, #44]	@ 0x2c
	if (event != osOK)Error_Handler();
 8001018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <StartInitHandle_TASK+0x8a>
 800101e:	f000 f9ab 	bl	8001378 <Error_Handler>
  /* USER CODE END StartInitHandle_TASK */
}
 8001022:	bf00      	nop
 8001024:	3734      	adds	r7, #52	@ 0x34
 8001026:	46bd      	mov	sp, r7
 8001028:	bd90      	pop	{r4, r7, pc}
 800102a:	bf00      	nop
 800102c:	08009980 	.word	0x08009980
 8001030:	08009990 	.word	0x08009990
 8001034:	20000428 	.word	0x20000428
 8001038:	20000374 	.word	0x20000374
 800103c:	08009970 	.word	0x08009970
 8001040:	200000b4 	.word	0x200000b4
 8001044:	200000b0 	.word	0x200000b0
 8001048:	200000ac 	.word	0x200000ac

0800104c <SenderLoRA_TASK>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SenderLoRA_TASK */
void SenderLoRA_TASK(void const * argument)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08e      	sub	sp, #56	@ 0x38
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SenderLoRA_TASK */
	/* Infinite loop */
	osEvent eventFromStart = osSignalWait(0x01, osWaitForever);
 8001054:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001058:	f04f 32ff 	mov.w	r2, #4294967295
 800105c:	2101      	movs	r1, #1
 800105e:	4618      	mov	r0, r3
 8001060:	f004 f962 	bl	8005328 <osSignalWait>
	if (eventFromStart.status == osEventSignal){
 8001064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001066:	2b08      	cmp	r3, #8
 8001068:	d143      	bne.n	80010f2 <SenderLoRA_TASK+0xa6>
		for(;;)
		{
			uint8_t pollingStatutCommand [] = {0xb5, 0x62, 0x01, 0x43, 0x00, 0x00, 0x44, 0xcd};
 800106a:	4a24      	ldr	r2, [pc, #144]	@ (80010fc <SenderLoRA_TASK+0xb0>)
 800106c:	f107 031c 	add.w	r3, r7, #28
 8001070:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001074:	e883 0003 	stmia.w	r3, {r0, r1}
			DynamicBuffer* payloadForPolling =(DynamicBuffer*)initializeBuffer(sizeof(pollingStatutCommand));
 8001078:	2008      	movs	r0, #8
 800107a:	f7ff fa79 	bl	8000570 <initializeBuffer>
 800107e:	6378      	str	r0, [r7, #52]	@ 0x34
			memcpy(payloadForPolling->buffer, pollingStatutCommand, sizeof(pollingStatutCommand));
 8001080:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	461a      	mov	r2, r3
 8001086:	f107 031c 	add.w	r3, r7, #28
 800108a:	cb03      	ldmia	r3!, {r0, r1}
 800108c:	6010      	str	r0, [r2, #0]
 800108e:	6051      	str	r1, [r2, #4]

			LORA_HeaderforReception* headerForPolling = (LORA_HeaderforReception*)pvPortMalloc(sizeof(LORA_HeaderforReception));
 8001090:	2004      	movs	r0, #4
 8001092:	f006 feeb 	bl	8007e6c <pvPortMalloc>
 8001096:	6338      	str	r0, [r7, #48]	@ 0x30
			if (headerForPolling == NULL) Error_Handler();
 8001098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800109a:	2b00      	cmp	r3, #0
 800109c:	d101      	bne.n	80010a2 <SenderLoRA_TASK+0x56>
 800109e:	f000 f96b 	bl	8001378 <Error_Handler>

			*headerForPolling = (LORA_HeaderforReception){
				.recipient = MODULE_BROADCAST_ADDRESS,
						.sender = MODULE_SOURCE_ADDRESS,
						.type = PACKET_TYPE_POLL,
						.len_payload = payloadForPolling->size
 80010a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010a4:	685b      	ldr	r3, [r3, #4]
			*headerForPolling = (LORA_HeaderforReception){
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010aa:	21ff      	movs	r1, #255	@ 0xff
 80010ac:	7019      	strb	r1, [r3, #0]
 80010ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010b0:	2101      	movs	r1, #1
 80010b2:	7059      	strb	r1, [r3, #1]
 80010b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010b6:	2103      	movs	r1, #3
 80010b8:	7099      	strb	r1, [r3, #2]
 80010ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010bc:	70da      	strb	r2, [r3, #3]
			};

			LoRAtoSendQ_t pollingStatutGNSS = (LoRAtoSendQ_t){
 80010be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010c4:	617b      	str	r3, [r7, #20]
				.header = headerForPolling,
						.payload = payloadForPolling
			};
			xQueueSendToBack(LoRA_toSendHandle,&pollingStatutGNSS,osWaitForever);
 80010c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001100 <SenderLoRA_TASK+0xb4>)
 80010c8:	6818      	ldr	r0, [r3, #0]
 80010ca:	f107 0110 	add.w	r1, r7, #16
 80010ce:	2300      	movs	r3, #0
 80010d0:	f04f 32ff 	mov.w	r2, #4294967295
 80010d4:	f004 fc4c 	bl	8005970 <xQueueGenericSend>
			senderLoRA();
 80010d8:	f7ff fe3a 	bl	8000d50 <senderLoRA>
			freeBuffer(payloadForPolling);
 80010dc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80010de:	f7ff fa6b 	bl	80005b8 <freeBuffer>
			vPortFree(headerForPolling);
 80010e2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80010e4:	f006 ff90 	bl	8008008 <vPortFree>
			vTaskDelay(2000);
 80010e8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80010ec:	f005 fbbc 	bl	8006868 <vTaskDelay>
		{
 80010f0:	e7bb      	b.n	800106a <SenderLoRA_TASK+0x1e>
		}
	}
  /* USER CODE END SenderLoRA_TASK */
}
 80010f2:	bf00      	nop
 80010f4:	3738      	adds	r7, #56	@ 0x38
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	080099a0 	.word	0x080099a0
 8001100:	200000bc 	.word	0x200000bc

08001104 <ReceiverLoRA_TASK>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ReceiverLoRA_TASK */
void ReceiverLoRA_TASK(void const * argument)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ReceiverLoRA_TASK */
  /* Infinite loop */
	osEvent eventFromStart = osSignalWait(0x01, osWaitForever);
 800110c:	f107 030c 	add.w	r3, r7, #12
 8001110:	f04f 32ff 	mov.w	r2, #4294967295
 8001114:	2101      	movs	r1, #1
 8001116:	4618      	mov	r0, r3
 8001118:	f004 f906 	bl	8005328 <osSignalWait>
	if (eventFromStart.status == osEventSignal){
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	2b08      	cmp	r3, #8
 8001120:	d10a      	bne.n	8001138 <ReceiverLoRA_TASK+0x34>
		for(;;)
		{
			osSemaphoreWait(xSem_LORAReceive_startHandle, osWaitForever);
 8001122:	4b07      	ldr	r3, [pc, #28]	@ (8001140 <ReceiverLoRA_TASK+0x3c>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f04f 31ff 	mov.w	r1, #4294967295
 800112a:	4618      	mov	r0, r3
 800112c:	f004 f97a 	bl	8005424 <osSemaphoreWait>
			receivedLora();
 8001130:	f7ff fdb2 	bl	8000c98 <receivedLora>
			osSemaphoreWait(xSem_LORAReceive_startHandle, osWaitForever);
 8001134:	bf00      	nop
 8001136:	e7f4      	b.n	8001122 <ReceiverLoRA_TASK+0x1e>
		}
	}
  /* USER CODE END ReceiverLoRA_TASK */
}
 8001138:	bf00      	nop
 800113a:	3718      	adds	r7, #24
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	200000c4 	.word	0x200000c4

08001144 <Debug_TASK>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Debug_TASK */
void Debug_TASK(void const * argument)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Debug_TASK */
  /* Infinite loop */
  for(;;)
  {
	debug();
 800114c:	f7ff fcb6 	bl	8000abc <debug>
 8001150:	e7fc      	b.n	800114c <Debug_TASK+0x8>
	...

08001154 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b08a      	sub	sp, #40	@ 0x28
 8001158:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115a:	f107 0314 	add.w	r3, r7, #20
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]
 8001166:	60da      	str	r2, [r3, #12]
 8001168:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800116a:	4b45      	ldr	r3, [pc, #276]	@ (8001280 <MX_GPIO_Init+0x12c>)
 800116c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800116e:	4a44      	ldr	r2, [pc, #272]	@ (8001280 <MX_GPIO_Init+0x12c>)
 8001170:	f043 0304 	orr.w	r3, r3, #4
 8001174:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001176:	4b42      	ldr	r3, [pc, #264]	@ (8001280 <MX_GPIO_Init+0x12c>)
 8001178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800117a:	f003 0304 	and.w	r3, r3, #4
 800117e:	613b      	str	r3, [r7, #16]
 8001180:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001182:	4b3f      	ldr	r3, [pc, #252]	@ (8001280 <MX_GPIO_Init+0x12c>)
 8001184:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001186:	4a3e      	ldr	r2, [pc, #248]	@ (8001280 <MX_GPIO_Init+0x12c>)
 8001188:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800118c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800118e:	4b3c      	ldr	r3, [pc, #240]	@ (8001280 <MX_GPIO_Init+0x12c>)
 8001190:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001192:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800119a:	4b39      	ldr	r3, [pc, #228]	@ (8001280 <MX_GPIO_Init+0x12c>)
 800119c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800119e:	4a38      	ldr	r2, [pc, #224]	@ (8001280 <MX_GPIO_Init+0x12c>)
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011a6:	4b36      	ldr	r3, [pc, #216]	@ (8001280 <MX_GPIO_Init+0x12c>)
 80011a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	60bb      	str	r3, [r7, #8]
 80011b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b2:	4b33      	ldr	r3, [pc, #204]	@ (8001280 <MX_GPIO_Init+0x12c>)
 80011b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b6:	4a32      	ldr	r2, [pc, #200]	@ (8001280 <MX_GPIO_Init+0x12c>)
 80011b8:	f043 0302 	orr.w	r3, r3, #2
 80011bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011be:	4b30      	ldr	r3, [pc, #192]	@ (8001280 <MX_GPIO_Init+0x12c>)
 80011c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|SPI2_CS_Pin, GPIO_PIN_RESET);
 80011ca:	2200      	movs	r2, #0
 80011cc:	2160      	movs	r1, #96	@ 0x60
 80011ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011d2:	f000 fe7f 	bl	8001ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_EN_GPIO_Port, SPI2_EN_Pin, GPIO_PIN_SET);
 80011d6:	2201      	movs	r2, #1
 80011d8:	2180      	movs	r1, #128	@ 0x80
 80011da:	482a      	ldr	r0, [pc, #168]	@ (8001284 <MX_GPIO_Init+0x130>)
 80011dc:	f000 fe7a 	bl	8001ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_RST_GPIO_Port, SPI2_RST_Pin, GPIO_PIN_RESET);
 80011e0:	2200      	movs	r2, #0
 80011e2:	2140      	movs	r1, #64	@ 0x40
 80011e4:	4828      	ldr	r0, [pc, #160]	@ (8001288 <MX_GPIO_Init+0x134>)
 80011e6:	f000 fe75 	bl	8001ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011f0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80011f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011fa:	f107 0314 	add.w	r3, r7, #20
 80011fe:	4619      	mov	r1, r3
 8001200:	4820      	ldr	r0, [pc, #128]	@ (8001284 <MX_GPIO_Init+0x130>)
 8001202:	f000 fcbd 	bl	8001b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|SPI2_CS_Pin;
 8001206:	2360      	movs	r3, #96	@ 0x60
 8001208:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120a:	2301      	movs	r3, #1
 800120c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001212:	2300      	movs	r3, #0
 8001214:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001216:	f107 0314 	add.w	r3, r7, #20
 800121a:	4619      	mov	r1, r3
 800121c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001220:	f000 fcae 	bl	8001b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_IRQ_Pin;
 8001224:	2380      	movs	r3, #128	@ 0x80
 8001226:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001228:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800122c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI2_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001232:	f107 0314 	add.w	r3, r7, #20
 8001236:	4619      	mov	r1, r3
 8001238:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800123c:	f000 fca0 	bl	8001b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_EN_Pin;
 8001240:	2380      	movs	r3, #128	@ 0x80
 8001242:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001244:	2301      	movs	r3, #1
 8001246:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124c:	2300      	movs	r3, #0
 800124e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_EN_GPIO_Port, &GPIO_InitStruct);
 8001250:	f107 0314 	add.w	r3, r7, #20
 8001254:	4619      	mov	r1, r3
 8001256:	480b      	ldr	r0, [pc, #44]	@ (8001284 <MX_GPIO_Init+0x130>)
 8001258:	f000 fc92 	bl	8001b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_RST_Pin;
 800125c:	2340      	movs	r3, #64	@ 0x40
 800125e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001260:	2301      	movs	r3, #1
 8001262:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001268:	2300      	movs	r3, #0
 800126a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_RST_GPIO_Port, &GPIO_InitStruct);
 800126c:	f107 0314 	add.w	r3, r7, #20
 8001270:	4619      	mov	r1, r3
 8001272:	4805      	ldr	r0, [pc, #20]	@ (8001288 <MX_GPIO_Init+0x134>)
 8001274:	f000 fc84 	bl	8001b80 <HAL_GPIO_Init>

}
 8001278:	bf00      	nop
 800127a:	3728      	adds	r7, #40	@ 0x28
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40021000 	.word	0x40021000
 8001284:	48000800 	.word	0x48000800
 8001288:	48000400 	.word	0x48000400

0800128c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001290:	f000 fb54 	bl	800193c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001294:	f000 f80c 	bl	80012b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001298:	f7ff ff5c 	bl	8001154 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800129c:	f000 fa98 	bl	80017d0 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80012a0:	f000 f876 	bl	8001390 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80012a4:	f7ff fde2 	bl	8000e6c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80012a8:	f003 ff9f 	bl	80051ea <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012ac:	bf00      	nop
 80012ae:	e7fd      	b.n	80012ac <main+0x20>

080012b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b096      	sub	sp, #88	@ 0x58
 80012b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012b6:	f107 0314 	add.w	r3, r7, #20
 80012ba:	2244      	movs	r2, #68	@ 0x44
 80012bc:	2100      	movs	r1, #0
 80012be:	4618      	mov	r0, r3
 80012c0:	f007 fa67 	bl	8008792 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012c4:	463b      	mov	r3, r7
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]
 80012ce:	60da      	str	r2, [r3, #12]
 80012d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80012d2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80012d6:	f000 fe23 	bl	8001f20 <HAL_PWREx_ControlVoltageScaling>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80012e0:	f000 f84a 	bl	8001378 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012e4:	2302      	movs	r3, #2
 80012e6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012ec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012ee:	2310      	movs	r3, #16
 80012f0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012f2:	2302      	movs	r3, #2
 80012f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012f6:	2302      	movs	r3, #2
 80012f8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80012fa:	2301      	movs	r3, #1
 80012fc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80012fe:	230a      	movs	r3, #10
 8001300:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001302:	2307      	movs	r3, #7
 8001304:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001306:	2302      	movs	r3, #2
 8001308:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800130a:	2302      	movs	r3, #2
 800130c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800130e:	f107 0314 	add.w	r3, r7, #20
 8001312:	4618      	mov	r0, r3
 8001314:	f000 fe5a 	bl	8001fcc <HAL_RCC_OscConfig>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800131e:	f000 f82b 	bl	8001378 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001322:	230f      	movs	r3, #15
 8001324:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001326:	2303      	movs	r3, #3
 8001328:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800132a:	2300      	movs	r3, #0
 800132c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001332:	2300      	movs	r3, #0
 8001334:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001336:	463b      	mov	r3, r7
 8001338:	2104      	movs	r1, #4
 800133a:	4618      	mov	r0, r3
 800133c:	f001 fa22 	bl	8002784 <HAL_RCC_ClockConfig>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001346:	f000 f817 	bl	8001378 <Error_Handler>
  }
}
 800134a:	bf00      	nop
 800134c:	3758      	adds	r7, #88	@ 0x58
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
	...

08001354 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a04      	ldr	r2, [pc, #16]	@ (8001374 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d101      	bne.n	800136a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001366:	f000 fb09 	bl	800197c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40012c00 	.word	0x40012c00

08001378 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800137c:	b672      	cpsid	i
}
 800137e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  logMemoryUsage("ERROR_HANDLER");
 8001380:	4802      	ldr	r0, [pc, #8]	@ (800138c <Error_Handler+0x14>)
 8001382:	f7ff fc39 	bl	8000bf8 <logMemoryUsage>
  while (1)
 8001386:	bf00      	nop
 8001388:	e7fd      	b.n	8001386 <Error_Handler+0xe>
 800138a:	bf00      	nop
 800138c:	080099a8 	.word	0x080099a8

08001390 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001394:	4b1b      	ldr	r3, [pc, #108]	@ (8001404 <MX_SPI2_Init+0x74>)
 8001396:	4a1c      	ldr	r2, [pc, #112]	@ (8001408 <MX_SPI2_Init+0x78>)
 8001398:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800139a:	4b1a      	ldr	r3, [pc, #104]	@ (8001404 <MX_SPI2_Init+0x74>)
 800139c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80013a0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80013a2:	4b18      	ldr	r3, [pc, #96]	@ (8001404 <MX_SPI2_Init+0x74>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80013a8:	4b16      	ldr	r3, [pc, #88]	@ (8001404 <MX_SPI2_Init+0x74>)
 80013aa:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80013ae:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013b0:	4b14      	ldr	r3, [pc, #80]	@ (8001404 <MX_SPI2_Init+0x74>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013b6:	4b13      	ldr	r3, [pc, #76]	@ (8001404 <MX_SPI2_Init+0x74>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80013bc:	4b11      	ldr	r3, [pc, #68]	@ (8001404 <MX_SPI2_Init+0x74>)
 80013be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013c2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80013c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001404 <MX_SPI2_Init+0x74>)
 80013c6:	2220      	movs	r2, #32
 80013c8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001404 <MX_SPI2_Init+0x74>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80013d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001404 <MX_SPI2_Init+0x74>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001404 <MX_SPI2_Init+0x74>)
 80013d8:	2200      	movs	r2, #0
 80013da:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80013dc:	4b09      	ldr	r3, [pc, #36]	@ (8001404 <MX_SPI2_Init+0x74>)
 80013de:	2207      	movs	r2, #7
 80013e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80013e2:	4b08      	ldr	r3, [pc, #32]	@ (8001404 <MX_SPI2_Init+0x74>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013e8:	4b06      	ldr	r3, [pc, #24]	@ (8001404 <MX_SPI2_Init+0x74>)
 80013ea:	2208      	movs	r2, #8
 80013ec:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80013ee:	4805      	ldr	r0, [pc, #20]	@ (8001404 <MX_SPI2_Init+0x74>)
 80013f0:	f002 f8da 	bl	80035a8 <HAL_SPI_Init>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80013fa:	f7ff ffbd 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000374 	.word	0x20000374
 8001408:	40003800 	.word	0x40003800

0800140c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08a      	sub	sp, #40	@ 0x28
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001414:	f107 0314 	add.w	r3, r7, #20
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a25      	ldr	r2, [pc, #148]	@ (80014c0 <HAL_SPI_MspInit+0xb4>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d144      	bne.n	80014b8 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800142e:	4b25      	ldr	r3, [pc, #148]	@ (80014c4 <HAL_SPI_MspInit+0xb8>)
 8001430:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001432:	4a24      	ldr	r2, [pc, #144]	@ (80014c4 <HAL_SPI_MspInit+0xb8>)
 8001434:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001438:	6593      	str	r3, [r2, #88]	@ 0x58
 800143a:	4b22      	ldr	r3, [pc, #136]	@ (80014c4 <HAL_SPI_MspInit+0xb8>)
 800143c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800143e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001442:	613b      	str	r3, [r7, #16]
 8001444:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001446:	4b1f      	ldr	r3, [pc, #124]	@ (80014c4 <HAL_SPI_MspInit+0xb8>)
 8001448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800144a:	4a1e      	ldr	r2, [pc, #120]	@ (80014c4 <HAL_SPI_MspInit+0xb8>)
 800144c:	f043 0304 	orr.w	r3, r3, #4
 8001450:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001452:	4b1c      	ldr	r3, [pc, #112]	@ (80014c4 <HAL_SPI_MspInit+0xb8>)
 8001454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001456:	f003 0304 	and.w	r3, r3, #4
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800145e:	4b19      	ldr	r3, [pc, #100]	@ (80014c4 <HAL_SPI_MspInit+0xb8>)
 8001460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001462:	4a18      	ldr	r2, [pc, #96]	@ (80014c4 <HAL_SPI_MspInit+0xb8>)
 8001464:	f043 0302 	orr.w	r3, r3, #2
 8001468:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800146a:	4b16      	ldr	r3, [pc, #88]	@ (80014c4 <HAL_SPI_MspInit+0xb8>)
 800146c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	60bb      	str	r3, [r7, #8]
 8001474:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001476:	230c      	movs	r3, #12
 8001478:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147a:	2302      	movs	r3, #2
 800147c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001482:	2303      	movs	r3, #3
 8001484:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001486:	2305      	movs	r3, #5
 8001488:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800148a:	f107 0314 	add.w	r3, r7, #20
 800148e:	4619      	mov	r1, r3
 8001490:	480d      	ldr	r0, [pc, #52]	@ (80014c8 <HAL_SPI_MspInit+0xbc>)
 8001492:	f000 fb75 	bl	8001b80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001496:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800149a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149c:	2302      	movs	r3, #2
 800149e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a4:	2303      	movs	r3, #3
 80014a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014a8:	2305      	movs	r3, #5
 80014aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	4619      	mov	r1, r3
 80014b2:	4806      	ldr	r0, [pc, #24]	@ (80014cc <HAL_SPI_MspInit+0xc0>)
 80014b4:	f000 fb64 	bl	8001b80 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80014b8:	bf00      	nop
 80014ba:	3728      	adds	r7, #40	@ 0x28
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40003800 	.word	0x40003800
 80014c4:	40021000 	.word	0x40021000
 80014c8:	48000800 	.word	0x48000800
 80014cc:	48000400 	.word	0x48000400

080014d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d6:	4b11      	ldr	r3, [pc, #68]	@ (800151c <HAL_MspInit+0x4c>)
 80014d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014da:	4a10      	ldr	r2, [pc, #64]	@ (800151c <HAL_MspInit+0x4c>)
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	6613      	str	r3, [r2, #96]	@ 0x60
 80014e2:	4b0e      	ldr	r3, [pc, #56]	@ (800151c <HAL_MspInit+0x4c>)
 80014e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	607b      	str	r3, [r7, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ee:	4b0b      	ldr	r3, [pc, #44]	@ (800151c <HAL_MspInit+0x4c>)
 80014f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014f2:	4a0a      	ldr	r2, [pc, #40]	@ (800151c <HAL_MspInit+0x4c>)
 80014f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80014fa:	4b08      	ldr	r3, [pc, #32]	@ (800151c <HAL_MspInit+0x4c>)
 80014fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001502:	603b      	str	r3, [r7, #0]
 8001504:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001506:	2200      	movs	r2, #0
 8001508:	210f      	movs	r1, #15
 800150a:	f06f 0001 	mvn.w	r0, #1
 800150e:	f000 fb0d 	bl	8001b2c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40021000 	.word	0x40021000

08001520 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b08c      	sub	sp, #48	@ 0x30
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001528:	2300      	movs	r3, #0
 800152a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800152e:	4b2e      	ldr	r3, [pc, #184]	@ (80015e8 <HAL_InitTick+0xc8>)
 8001530:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001532:	4a2d      	ldr	r2, [pc, #180]	@ (80015e8 <HAL_InitTick+0xc8>)
 8001534:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001538:	6613      	str	r3, [r2, #96]	@ 0x60
 800153a:	4b2b      	ldr	r3, [pc, #172]	@ (80015e8 <HAL_InitTick+0xc8>)
 800153c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800153e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001542:	60bb      	str	r3, [r7, #8]
 8001544:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001546:	f107 020c 	add.w	r2, r7, #12
 800154a:	f107 0310 	add.w	r3, r7, #16
 800154e:	4611      	mov	r1, r2
 8001550:	4618      	mov	r0, r3
 8001552:	f001 fadb 	bl	8002b0c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001556:	f001 fac3 	bl	8002ae0 <HAL_RCC_GetPCLK2Freq>
 800155a:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800155c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800155e:	4a23      	ldr	r2, [pc, #140]	@ (80015ec <HAL_InitTick+0xcc>)
 8001560:	fba2 2303 	umull	r2, r3, r2, r3
 8001564:	0c9b      	lsrs	r3, r3, #18
 8001566:	3b01      	subs	r3, #1
 8001568:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800156a:	4b21      	ldr	r3, [pc, #132]	@ (80015f0 <HAL_InitTick+0xd0>)
 800156c:	4a21      	ldr	r2, [pc, #132]	@ (80015f4 <HAL_InitTick+0xd4>)
 800156e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001570:	4b1f      	ldr	r3, [pc, #124]	@ (80015f0 <HAL_InitTick+0xd0>)
 8001572:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001576:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001578:	4a1d      	ldr	r2, [pc, #116]	@ (80015f0 <HAL_InitTick+0xd0>)
 800157a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800157c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800157e:	4b1c      	ldr	r3, [pc, #112]	@ (80015f0 <HAL_InitTick+0xd0>)
 8001580:	2200      	movs	r2, #0
 8001582:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001584:	4b1a      	ldr	r3, [pc, #104]	@ (80015f0 <HAL_InitTick+0xd0>)
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800158a:	4b19      	ldr	r3, [pc, #100]	@ (80015f0 <HAL_InitTick+0xd0>)
 800158c:	2200      	movs	r2, #0
 800158e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001590:	4817      	ldr	r0, [pc, #92]	@ (80015f0 <HAL_InitTick+0xd0>)
 8001592:	f002 fda7 	bl	80040e4 <HAL_TIM_Base_Init>
 8001596:	4603      	mov	r3, r0
 8001598:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800159c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d11b      	bne.n	80015dc <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80015a4:	4812      	ldr	r0, [pc, #72]	@ (80015f0 <HAL_InitTick+0xd0>)
 80015a6:	f002 fdff 	bl	80041a8 <HAL_TIM_Base_Start_IT>
 80015aa:	4603      	mov	r3, r0
 80015ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80015b0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d111      	bne.n	80015dc <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80015b8:	2019      	movs	r0, #25
 80015ba:	f000 fad3 	bl	8001b64 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2b0f      	cmp	r3, #15
 80015c2:	d808      	bhi.n	80015d6 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80015c4:	2200      	movs	r2, #0
 80015c6:	6879      	ldr	r1, [r7, #4]
 80015c8:	2019      	movs	r0, #25
 80015ca:	f000 faaf 	bl	8001b2c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015ce:	4a0a      	ldr	r2, [pc, #40]	@ (80015f8 <HAL_InitTick+0xd8>)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6013      	str	r3, [r2, #0]
 80015d4:	e002      	b.n	80015dc <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80015dc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3730      	adds	r7, #48	@ 0x30
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40021000 	.word	0x40021000
 80015ec:	431bde83 	.word	0x431bde83
 80015f0:	200003d8 	.word	0x200003d8
 80015f4:	40012c00 	.word	0x40012c00
 80015f8:	20000004 	.word	0x20000004

080015fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001600:	bf00      	nop
 8001602:	e7fd      	b.n	8001600 <NMI_Handler+0x4>

08001604 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001608:	bf00      	nop
 800160a:	e7fd      	b.n	8001608 <HardFault_Handler+0x4>

0800160c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001610:	bf00      	nop
 8001612:	e7fd      	b.n	8001610 <MemManage_Handler+0x4>

08001614 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001618:	bf00      	nop
 800161a:	e7fd      	b.n	8001618 <BusFault_Handler+0x4>

0800161c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001620:	bf00      	nop
 8001622:	e7fd      	b.n	8001620 <UsageFault_Handler+0x4>

08001624 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001628:	bf00      	nop
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
	...

08001634 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(SPI2_IRQ_Pin) != RESET){
 8001638:	4b07      	ldr	r3, [pc, #28]	@ (8001658 <TIM1_UP_TIM16_IRQHandler+0x24>)
 800163a:	695b      	ldr	r3, [r3, #20]
 800163c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001640:	2b00      	cmp	r3, #0
 8001642:	d004      	beq.n	800164e <TIM1_UP_TIM16_IRQHandler+0x1a>
	osSemaphoreRelease(xSem_LORAReceive_startHandle);
 8001644:	4b05      	ldr	r3, [pc, #20]	@ (800165c <TIM1_UP_TIM16_IRQHandler+0x28>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4618      	mov	r0, r3
 800164a:	f003 ff39 	bl	80054c0 <osSemaphoreRelease>
	}
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800164e:	4804      	ldr	r0, [pc, #16]	@ (8001660 <TIM1_UP_TIM16_IRQHandler+0x2c>)
 8001650:	f002 fe1a 	bl	8004288 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001654:	bf00      	nop
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40010400 	.word	0x40010400
 800165c:	200000c4 	.word	0x200000c4
 8001660:	200003d8 	.word	0x200003d8

08001664 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]
 8001674:	e00a      	b.n	800168c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001676:	f3af 8000 	nop.w
 800167a:	4601      	mov	r1, r0
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	1c5a      	adds	r2, r3, #1
 8001680:	60ba      	str	r2, [r7, #8]
 8001682:	b2ca      	uxtb	r2, r1
 8001684:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	3301      	adds	r3, #1
 800168a:	617b      	str	r3, [r7, #20]
 800168c:	697a      	ldr	r2, [r7, #20]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	429a      	cmp	r2, r3
 8001692:	dbf0      	blt.n	8001676 <_read+0x12>
  }

  return len;
 8001694:	687b      	ldr	r3, [r7, #4]
}
 8001696:	4618      	mov	r0, r3
 8001698:	3718      	adds	r7, #24
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b086      	sub	sp, #24
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	60f8      	str	r0, [r7, #12]
 80016a6:	60b9      	str	r1, [r7, #8]
 80016a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016aa:	2300      	movs	r3, #0
 80016ac:	617b      	str	r3, [r7, #20]
 80016ae:	e009      	b.n	80016c4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	1c5a      	adds	r2, r3, #1
 80016b4:	60ba      	str	r2, [r7, #8]
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff fa85 	bl	8000bc8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	3301      	adds	r3, #1
 80016c2:	617b      	str	r3, [r7, #20]
 80016c4:	697a      	ldr	r2, [r7, #20]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	dbf1      	blt.n	80016b0 <_write+0x12>
  }
  return len;
 80016cc:	687b      	ldr	r3, [r7, #4]
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3718      	adds	r7, #24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <_close>:

int _close(int file)
{
 80016d6:	b480      	push	{r7}
 80016d8:	b083      	sub	sp, #12
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr

080016ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b083      	sub	sp, #12
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
 80016f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016fe:	605a      	str	r2, [r3, #4]
  return 0;
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <_isatty>:

int _isatty(int file)
{
 800170e:	b480      	push	{r7}
 8001710:	b083      	sub	sp, #12
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001716:	2301      	movs	r3, #1
}
 8001718:	4618      	mov	r0, r3
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3714      	adds	r7, #20
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
	...

08001740 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001748:	4a14      	ldr	r2, [pc, #80]	@ (800179c <_sbrk+0x5c>)
 800174a:	4b15      	ldr	r3, [pc, #84]	@ (80017a0 <_sbrk+0x60>)
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001754:	4b13      	ldr	r3, [pc, #76]	@ (80017a4 <_sbrk+0x64>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d102      	bne.n	8001762 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800175c:	4b11      	ldr	r3, [pc, #68]	@ (80017a4 <_sbrk+0x64>)
 800175e:	4a12      	ldr	r2, [pc, #72]	@ (80017a8 <_sbrk+0x68>)
 8001760:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001762:	4b10      	ldr	r3, [pc, #64]	@ (80017a4 <_sbrk+0x64>)
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4413      	add	r3, r2
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	429a      	cmp	r2, r3
 800176e:	d207      	bcs.n	8001780 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001770:	f007 f8c4 	bl	80088fc <__errno>
 8001774:	4603      	mov	r3, r0
 8001776:	220c      	movs	r2, #12
 8001778:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800177a:	f04f 33ff 	mov.w	r3, #4294967295
 800177e:	e009      	b.n	8001794 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001780:	4b08      	ldr	r3, [pc, #32]	@ (80017a4 <_sbrk+0x64>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001786:	4b07      	ldr	r3, [pc, #28]	@ (80017a4 <_sbrk+0x64>)
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4413      	add	r3, r2
 800178e:	4a05      	ldr	r2, [pc, #20]	@ (80017a4 <_sbrk+0x64>)
 8001790:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001792:	68fb      	ldr	r3, [r7, #12]
}
 8001794:	4618      	mov	r0, r3
 8001796:	3718      	adds	r7, #24
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	20018000 	.word	0x20018000
 80017a0:	00000400 	.word	0x00000400
 80017a4:	20000424 	.word	0x20000424
 80017a8:	20002e70 	.word	0x20002e70

080017ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80017b0:	4b06      	ldr	r3, [pc, #24]	@ (80017cc <SystemInit+0x20>)
 80017b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017b6:	4a05      	ldr	r2, [pc, #20]	@ (80017cc <SystemInit+0x20>)
 80017b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017d4:	4b14      	ldr	r3, [pc, #80]	@ (8001828 <MX_USART2_UART_Init+0x58>)
 80017d6:	4a15      	ldr	r2, [pc, #84]	@ (800182c <MX_USART2_UART_Init+0x5c>)
 80017d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017da:	4b13      	ldr	r3, [pc, #76]	@ (8001828 <MX_USART2_UART_Init+0x58>)
 80017dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017e2:	4b11      	ldr	r3, [pc, #68]	@ (8001828 <MX_USART2_UART_Init+0x58>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001828 <MX_USART2_UART_Init+0x58>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001828 <MX_USART2_UART_Init+0x58>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001828 <MX_USART2_UART_Init+0x58>)
 80017f6:	220c      	movs	r2, #12
 80017f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001828 <MX_USART2_UART_Init+0x58>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001800:	4b09      	ldr	r3, [pc, #36]	@ (8001828 <MX_USART2_UART_Init+0x58>)
 8001802:	2200      	movs	r2, #0
 8001804:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001806:	4b08      	ldr	r3, [pc, #32]	@ (8001828 <MX_USART2_UART_Init+0x58>)
 8001808:	2200      	movs	r2, #0
 800180a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800180c:	4b06      	ldr	r3, [pc, #24]	@ (8001828 <MX_USART2_UART_Init+0x58>)
 800180e:	2200      	movs	r2, #0
 8001810:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001812:	4805      	ldr	r0, [pc, #20]	@ (8001828 <MX_USART2_UART_Init+0x58>)
 8001814:	f002 ff1a 	bl	800464c <HAL_UART_Init>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800181e:	f7ff fdab 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000428 	.word	0x20000428
 800182c:	40004400 	.word	0x40004400

08001830 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b0ac      	sub	sp, #176	@ 0xb0
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001838:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	2288      	movs	r2, #136	@ 0x88
 800184e:	2100      	movs	r1, #0
 8001850:	4618      	mov	r0, r3
 8001852:	f006 ff9e 	bl	8008792 <memset>
  if(uartHandle->Instance==USART2)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a21      	ldr	r2, [pc, #132]	@ (80018e0 <HAL_UART_MspInit+0xb0>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d13b      	bne.n	80018d8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001860:	2302      	movs	r3, #2
 8001862:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001864:	2300      	movs	r3, #0
 8001866:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001868:	f107 0314 	add.w	r3, r7, #20
 800186c:	4618      	mov	r0, r3
 800186e:	f001 f9df 	bl	8002c30 <HAL_RCCEx_PeriphCLKConfig>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001878:	f7ff fd7e 	bl	8001378 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800187c:	4b19      	ldr	r3, [pc, #100]	@ (80018e4 <HAL_UART_MspInit+0xb4>)
 800187e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001880:	4a18      	ldr	r2, [pc, #96]	@ (80018e4 <HAL_UART_MspInit+0xb4>)
 8001882:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001886:	6593      	str	r3, [r2, #88]	@ 0x58
 8001888:	4b16      	ldr	r3, [pc, #88]	@ (80018e4 <HAL_UART_MspInit+0xb4>)
 800188a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800188c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001890:	613b      	str	r3, [r7, #16]
 8001892:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001894:	4b13      	ldr	r3, [pc, #76]	@ (80018e4 <HAL_UART_MspInit+0xb4>)
 8001896:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001898:	4a12      	ldr	r2, [pc, #72]	@ (80018e4 <HAL_UART_MspInit+0xb4>)
 800189a:	f043 0301 	orr.w	r3, r3, #1
 800189e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018a0:	4b10      	ldr	r3, [pc, #64]	@ (80018e4 <HAL_UART_MspInit+0xb4>)
 80018a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018a4:	f003 0301 	and.w	r3, r3, #1
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018ac:	230c      	movs	r3, #12
 80018ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b2:	2302      	movs	r3, #2
 80018b4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018be:	2303      	movs	r3, #3
 80018c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018c4:	2307      	movs	r3, #7
 80018c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ca:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80018ce:	4619      	mov	r1, r3
 80018d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018d4:	f000 f954 	bl	8001b80 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80018d8:	bf00      	nop
 80018da:	37b0      	adds	r7, #176	@ 0xb0
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40004400 	.word	0x40004400
 80018e4:	40021000 	.word	0x40021000

080018e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80018e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001920 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018ec:	f7ff ff5e 	bl	80017ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018f0:	480c      	ldr	r0, [pc, #48]	@ (8001924 <LoopForever+0x6>)
  ldr r1, =_edata
 80018f2:	490d      	ldr	r1, [pc, #52]	@ (8001928 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018f4:	4a0d      	ldr	r2, [pc, #52]	@ (800192c <LoopForever+0xe>)
  movs r3, #0
 80018f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018f8:	e002      	b.n	8001900 <LoopCopyDataInit>

080018fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018fe:	3304      	adds	r3, #4

08001900 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001900:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001902:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001904:	d3f9      	bcc.n	80018fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001906:	4a0a      	ldr	r2, [pc, #40]	@ (8001930 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001908:	4c0a      	ldr	r4, [pc, #40]	@ (8001934 <LoopForever+0x16>)
  movs r3, #0
 800190a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800190c:	e001      	b.n	8001912 <LoopFillZerobss>

0800190e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800190e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001910:	3204      	adds	r2, #4

08001912 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001912:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001914:	d3fb      	bcc.n	800190e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001916:	f006 fff7 	bl	8008908 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800191a:	f7ff fcb7 	bl	800128c <main>

0800191e <LoopForever>:

LoopForever:
    b LoopForever
 800191e:	e7fe      	b.n	800191e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001920:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001924:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001928:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800192c:	08009a74 	.word	0x08009a74
  ldr r2, =_sbss
 8001930:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001934:	20002e6c 	.word	0x20002e6c

08001938 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001938:	e7fe      	b.n	8001938 <ADC1_2_IRQHandler>
	...

0800193c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001942:	2300      	movs	r3, #0
 8001944:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001946:	4b0c      	ldr	r3, [pc, #48]	@ (8001978 <HAL_Init+0x3c>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a0b      	ldr	r2, [pc, #44]	@ (8001978 <HAL_Init+0x3c>)
 800194c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001950:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001952:	2003      	movs	r0, #3
 8001954:	f000 f8df 	bl	8001b16 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001958:	200f      	movs	r0, #15
 800195a:	f7ff fde1 	bl	8001520 <HAL_InitTick>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d002      	beq.n	800196a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	71fb      	strb	r3, [r7, #7]
 8001968:	e001      	b.n	800196e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800196a:	f7ff fdb1 	bl	80014d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800196e:	79fb      	ldrb	r3, [r7, #7]
}
 8001970:	4618      	mov	r0, r3
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40022000 	.word	0x40022000

0800197c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001980:	4b06      	ldr	r3, [pc, #24]	@ (800199c <HAL_IncTick+0x20>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	461a      	mov	r2, r3
 8001986:	4b06      	ldr	r3, [pc, #24]	@ (80019a0 <HAL_IncTick+0x24>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4413      	add	r3, r2
 800198c:	4a04      	ldr	r2, [pc, #16]	@ (80019a0 <HAL_IncTick+0x24>)
 800198e:	6013      	str	r3, [r2, #0]
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	20000008 	.word	0x20000008
 80019a0:	200004b0 	.word	0x200004b0

080019a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  return uwTick;
 80019a8:	4b03      	ldr	r3, [pc, #12]	@ (80019b8 <HAL_GetTick+0x14>)
 80019aa:	681b      	ldr	r3, [r3, #0]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	200004b0 	.word	0x200004b0

080019bc <__NVIC_SetPriorityGrouping>:
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001a00 <__NVIC_SetPriorityGrouping+0x44>)
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019d2:	68ba      	ldr	r2, [r7, #8]
 80019d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019d8:	4013      	ands	r3, r2
 80019da:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ee:	4a04      	ldr	r2, [pc, #16]	@ (8001a00 <__NVIC_SetPriorityGrouping+0x44>)
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	60d3      	str	r3, [r2, #12]
}
 80019f4:	bf00      	nop
 80019f6:	3714      	adds	r7, #20
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	e000ed00 	.word	0xe000ed00

08001a04 <__NVIC_GetPriorityGrouping>:
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a08:	4b04      	ldr	r3, [pc, #16]	@ (8001a1c <__NVIC_GetPriorityGrouping+0x18>)
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	0a1b      	lsrs	r3, r3, #8
 8001a0e:	f003 0307 	and.w	r3, r3, #7
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	e000ed00 	.word	0xe000ed00

08001a20 <__NVIC_EnableIRQ>:
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	4603      	mov	r3, r0
 8001a28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	db0b      	blt.n	8001a4a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a32:	79fb      	ldrb	r3, [r7, #7]
 8001a34:	f003 021f 	and.w	r2, r3, #31
 8001a38:	4907      	ldr	r1, [pc, #28]	@ (8001a58 <__NVIC_EnableIRQ+0x38>)
 8001a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3e:	095b      	lsrs	r3, r3, #5
 8001a40:	2001      	movs	r0, #1
 8001a42:	fa00 f202 	lsl.w	r2, r0, r2
 8001a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001a4a:	bf00      	nop
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	e000e100 	.word	0xe000e100

08001a5c <__NVIC_SetPriority>:
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4603      	mov	r3, r0
 8001a64:	6039      	str	r1, [r7, #0]
 8001a66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	db0a      	blt.n	8001a86 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	490c      	ldr	r1, [pc, #48]	@ (8001aa8 <__NVIC_SetPriority+0x4c>)
 8001a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7a:	0112      	lsls	r2, r2, #4
 8001a7c:	b2d2      	uxtb	r2, r2
 8001a7e:	440b      	add	r3, r1
 8001a80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001a84:	e00a      	b.n	8001a9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	b2da      	uxtb	r2, r3
 8001a8a:	4908      	ldr	r1, [pc, #32]	@ (8001aac <__NVIC_SetPriority+0x50>)
 8001a8c:	79fb      	ldrb	r3, [r7, #7]
 8001a8e:	f003 030f 	and.w	r3, r3, #15
 8001a92:	3b04      	subs	r3, #4
 8001a94:	0112      	lsls	r2, r2, #4
 8001a96:	b2d2      	uxtb	r2, r2
 8001a98:	440b      	add	r3, r1
 8001a9a:	761a      	strb	r2, [r3, #24]
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	e000e100 	.word	0xe000e100
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <NVIC_EncodePriority>:
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b089      	sub	sp, #36	@ 0x24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f003 0307 	and.w	r3, r3, #7
 8001ac2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	f1c3 0307 	rsb	r3, r3, #7
 8001aca:	2b04      	cmp	r3, #4
 8001acc:	bf28      	it	cs
 8001ace:	2304      	movcs	r3, #4
 8001ad0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	3304      	adds	r3, #4
 8001ad6:	2b06      	cmp	r3, #6
 8001ad8:	d902      	bls.n	8001ae0 <NVIC_EncodePriority+0x30>
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	3b03      	subs	r3, #3
 8001ade:	e000      	b.n	8001ae2 <NVIC_EncodePriority+0x32>
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	43da      	mvns	r2, r3
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	401a      	ands	r2, r3
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001af8:	f04f 31ff 	mov.w	r1, #4294967295
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	fa01 f303 	lsl.w	r3, r1, r3
 8001b02:	43d9      	mvns	r1, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b08:	4313      	orrs	r3, r2
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3724      	adds	r7, #36	@ 0x24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr

08001b16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b082      	sub	sp, #8
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7ff ff4c 	bl	80019bc <__NVIC_SetPriorityGrouping>
}
 8001b24:	bf00      	nop
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
 8001b38:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b3e:	f7ff ff61 	bl	8001a04 <__NVIC_GetPriorityGrouping>
 8001b42:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	68b9      	ldr	r1, [r7, #8]
 8001b48:	6978      	ldr	r0, [r7, #20]
 8001b4a:	f7ff ffb1 	bl	8001ab0 <NVIC_EncodePriority>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b54:	4611      	mov	r1, r2
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff ff80 	bl	8001a5c <__NVIC_SetPriority>
}
 8001b5c:	bf00      	nop
 8001b5e:	3718      	adds	r7, #24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff ff54 	bl	8001a20 <__NVIC_EnableIRQ>
}
 8001b78:	bf00      	nop
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b087      	sub	sp, #28
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b8e:	e17f      	b.n	8001e90 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	2101      	movs	r1, #1
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f000 8171 	beq.w	8001e8a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f003 0303 	and.w	r3, r3, #3
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d005      	beq.n	8001bc0 <HAL_GPIO_Init+0x40>
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f003 0303 	and.w	r3, r3, #3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d130      	bne.n	8001c22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	2203      	movs	r2, #3
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	68da      	ldr	r2, [r3, #12]
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	4013      	ands	r3, r2
 8001c04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	091b      	lsrs	r3, r3, #4
 8001c0c:	f003 0201 	and.w	r2, r3, #1
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f003 0303 	and.w	r3, r3, #3
 8001c2a:	2b03      	cmp	r3, #3
 8001c2c:	d118      	bne.n	8001c60 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001c34:	2201      	movs	r2, #1
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	4013      	ands	r3, r2
 8001c42:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	08db      	lsrs	r3, r3, #3
 8001c4a:	f003 0201 	and.w	r2, r3, #1
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f003 0303 	and.w	r3, r3, #3
 8001c68:	2b03      	cmp	r3, #3
 8001c6a:	d017      	beq.n	8001c9c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	2203      	movs	r2, #3
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	4013      	ands	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f003 0303 	and.w	r3, r3, #3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d123      	bne.n	8001cf0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	08da      	lsrs	r2, r3, #3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	3208      	adds	r2, #8
 8001cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	f003 0307 	and.w	r3, r3, #7
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	220f      	movs	r2, #15
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	691a      	ldr	r2, [r3, #16]
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	08da      	lsrs	r2, r3, #3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	3208      	adds	r2, #8
 8001cea:	6939      	ldr	r1, [r7, #16]
 8001cec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	2203      	movs	r2, #3
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	43db      	mvns	r3, r3
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	4013      	ands	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f003 0203 	and.w	r2, r3, #3
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	f000 80ac 	beq.w	8001e8a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d32:	4b5f      	ldr	r3, [pc, #380]	@ (8001eb0 <HAL_GPIO_Init+0x330>)
 8001d34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d36:	4a5e      	ldr	r2, [pc, #376]	@ (8001eb0 <HAL_GPIO_Init+0x330>)
 8001d38:	f043 0301 	orr.w	r3, r3, #1
 8001d3c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d3e:	4b5c      	ldr	r3, [pc, #368]	@ (8001eb0 <HAL_GPIO_Init+0x330>)
 8001d40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	60bb      	str	r3, [r7, #8]
 8001d48:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d4a:	4a5a      	ldr	r2, [pc, #360]	@ (8001eb4 <HAL_GPIO_Init+0x334>)
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	089b      	lsrs	r3, r3, #2
 8001d50:	3302      	adds	r3, #2
 8001d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d56:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	f003 0303 	and.w	r3, r3, #3
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	220f      	movs	r2, #15
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	43db      	mvns	r3, r3
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001d74:	d025      	beq.n	8001dc2 <HAL_GPIO_Init+0x242>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a4f      	ldr	r2, [pc, #316]	@ (8001eb8 <HAL_GPIO_Init+0x338>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d01f      	beq.n	8001dbe <HAL_GPIO_Init+0x23e>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a4e      	ldr	r2, [pc, #312]	@ (8001ebc <HAL_GPIO_Init+0x33c>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d019      	beq.n	8001dba <HAL_GPIO_Init+0x23a>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a4d      	ldr	r2, [pc, #308]	@ (8001ec0 <HAL_GPIO_Init+0x340>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d013      	beq.n	8001db6 <HAL_GPIO_Init+0x236>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a4c      	ldr	r2, [pc, #304]	@ (8001ec4 <HAL_GPIO_Init+0x344>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d00d      	beq.n	8001db2 <HAL_GPIO_Init+0x232>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a4b      	ldr	r2, [pc, #300]	@ (8001ec8 <HAL_GPIO_Init+0x348>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d007      	beq.n	8001dae <HAL_GPIO_Init+0x22e>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a4a      	ldr	r2, [pc, #296]	@ (8001ecc <HAL_GPIO_Init+0x34c>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d101      	bne.n	8001daa <HAL_GPIO_Init+0x22a>
 8001da6:	2306      	movs	r3, #6
 8001da8:	e00c      	b.n	8001dc4 <HAL_GPIO_Init+0x244>
 8001daa:	2307      	movs	r3, #7
 8001dac:	e00a      	b.n	8001dc4 <HAL_GPIO_Init+0x244>
 8001dae:	2305      	movs	r3, #5
 8001db0:	e008      	b.n	8001dc4 <HAL_GPIO_Init+0x244>
 8001db2:	2304      	movs	r3, #4
 8001db4:	e006      	b.n	8001dc4 <HAL_GPIO_Init+0x244>
 8001db6:	2303      	movs	r3, #3
 8001db8:	e004      	b.n	8001dc4 <HAL_GPIO_Init+0x244>
 8001dba:	2302      	movs	r3, #2
 8001dbc:	e002      	b.n	8001dc4 <HAL_GPIO_Init+0x244>
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e000      	b.n	8001dc4 <HAL_GPIO_Init+0x244>
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	697a      	ldr	r2, [r7, #20]
 8001dc6:	f002 0203 	and.w	r2, r2, #3
 8001dca:	0092      	lsls	r2, r2, #2
 8001dcc:	4093      	lsls	r3, r2
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001dd4:	4937      	ldr	r1, [pc, #220]	@ (8001eb4 <HAL_GPIO_Init+0x334>)
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	089b      	lsrs	r3, r3, #2
 8001dda:	3302      	adds	r3, #2
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001de2:	4b3b      	ldr	r3, [pc, #236]	@ (8001ed0 <HAL_GPIO_Init+0x350>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	43db      	mvns	r3, r3
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	4013      	ands	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e06:	4a32      	ldr	r2, [pc, #200]	@ (8001ed0 <HAL_GPIO_Init+0x350>)
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e0c:	4b30      	ldr	r3, [pc, #192]	@ (8001ed0 <HAL_GPIO_Init+0x350>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	43db      	mvns	r3, r3
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d003      	beq.n	8001e30 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e30:	4a27      	ldr	r2, [pc, #156]	@ (8001ed0 <HAL_GPIO_Init+0x350>)
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e36:	4b26      	ldr	r3, [pc, #152]	@ (8001ed0 <HAL_GPIO_Init+0x350>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	4013      	ands	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e5a:	4a1d      	ldr	r2, [pc, #116]	@ (8001ed0 <HAL_GPIO_Init+0x350>)
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001e60:	4b1b      	ldr	r3, [pc, #108]	@ (8001ed0 <HAL_GPIO_Init+0x350>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d003      	beq.n	8001e84 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e84:	4a12      	ldr	r2, [pc, #72]	@ (8001ed0 <HAL_GPIO_Init+0x350>)
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	fa22 f303 	lsr.w	r3, r2, r3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f47f ae78 	bne.w	8001b90 <HAL_GPIO_Init+0x10>
  }
}
 8001ea0:	bf00      	nop
 8001ea2:	bf00      	nop
 8001ea4:	371c      	adds	r7, #28
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	40010000 	.word	0x40010000
 8001eb8:	48000400 	.word	0x48000400
 8001ebc:	48000800 	.word	0x48000800
 8001ec0:	48000c00 	.word	0x48000c00
 8001ec4:	48001000 	.word	0x48001000
 8001ec8:	48001400 	.word	0x48001400
 8001ecc:	48001800 	.word	0x48001800
 8001ed0:	40010400 	.word	0x40010400

08001ed4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	460b      	mov	r3, r1
 8001ede:	807b      	strh	r3, [r7, #2]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ee4:	787b      	ldrb	r3, [r7, #1]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001eea:	887a      	ldrh	r2, [r7, #2]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ef0:	e002      	b.n	8001ef8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ef2:	887a      	ldrh	r2, [r7, #2]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f08:	4b04      	ldr	r3, [pc, #16]	@ (8001f1c <HAL_PWREx_GetVoltageRange+0x18>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	40007000 	.word	0x40007000

08001f20 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f2e:	d130      	bne.n	8001f92 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f30:	4b23      	ldr	r3, [pc, #140]	@ (8001fc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001f38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f3c:	d038      	beq.n	8001fb0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f3e:	4b20      	ldr	r3, [pc, #128]	@ (8001fc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001f46:	4a1e      	ldr	r2, [pc, #120]	@ (8001fc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f48:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f4c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f4e:	4b1d      	ldr	r3, [pc, #116]	@ (8001fc4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2232      	movs	r2, #50	@ 0x32
 8001f54:	fb02 f303 	mul.w	r3, r2, r3
 8001f58:	4a1b      	ldr	r2, [pc, #108]	@ (8001fc8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5e:	0c9b      	lsrs	r3, r3, #18
 8001f60:	3301      	adds	r3, #1
 8001f62:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f64:	e002      	b.n	8001f6c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f6c:	4b14      	ldr	r3, [pc, #80]	@ (8001fc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f6e:	695b      	ldr	r3, [r3, #20]
 8001f70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f78:	d102      	bne.n	8001f80 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1f2      	bne.n	8001f66 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f80:	4b0f      	ldr	r3, [pc, #60]	@ (8001fc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f82:	695b      	ldr	r3, [r3, #20]
 8001f84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f8c:	d110      	bne.n	8001fb0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e00f      	b.n	8001fb2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f92:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001f9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f9e:	d007      	beq.n	8001fb0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001fa0:	4b07      	ldr	r3, [pc, #28]	@ (8001fc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001fa8:	4a05      	ldr	r2, [pc, #20]	@ (8001fc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001faa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3714      	adds	r7, #20
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	40007000 	.word	0x40007000
 8001fc4:	20000000 	.word	0x20000000
 8001fc8:	431bde83 	.word	0x431bde83

08001fcc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b088      	sub	sp, #32
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e3ca      	b.n	8002774 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fde:	4b97      	ldr	r3, [pc, #604]	@ (800223c <HAL_RCC_OscConfig+0x270>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f003 030c 	and.w	r3, r3, #12
 8001fe6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fe8:	4b94      	ldr	r3, [pc, #592]	@ (800223c <HAL_RCC_OscConfig+0x270>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	f003 0303 	and.w	r3, r3, #3
 8001ff0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0310 	and.w	r3, r3, #16
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	f000 80e4 	beq.w	80021c8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d007      	beq.n	8002016 <HAL_RCC_OscConfig+0x4a>
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	2b0c      	cmp	r3, #12
 800200a:	f040 808b 	bne.w	8002124 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	2b01      	cmp	r3, #1
 8002012:	f040 8087 	bne.w	8002124 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002016:	4b89      	ldr	r3, [pc, #548]	@ (800223c <HAL_RCC_OscConfig+0x270>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d005      	beq.n	800202e <HAL_RCC_OscConfig+0x62>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e3a2      	b.n	8002774 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a1a      	ldr	r2, [r3, #32]
 8002032:	4b82      	ldr	r3, [pc, #520]	@ (800223c <HAL_RCC_OscConfig+0x270>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0308 	and.w	r3, r3, #8
 800203a:	2b00      	cmp	r3, #0
 800203c:	d004      	beq.n	8002048 <HAL_RCC_OscConfig+0x7c>
 800203e:	4b7f      	ldr	r3, [pc, #508]	@ (800223c <HAL_RCC_OscConfig+0x270>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002046:	e005      	b.n	8002054 <HAL_RCC_OscConfig+0x88>
 8002048:	4b7c      	ldr	r3, [pc, #496]	@ (800223c <HAL_RCC_OscConfig+0x270>)
 800204a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800204e:	091b      	lsrs	r3, r3, #4
 8002050:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002054:	4293      	cmp	r3, r2
 8002056:	d223      	bcs.n	80020a0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a1b      	ldr	r3, [r3, #32]
 800205c:	4618      	mov	r0, r3
 800205e:	f000 fd87 	bl	8002b70 <RCC_SetFlashLatencyFromMSIRange>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e383      	b.n	8002774 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800206c:	4b73      	ldr	r3, [pc, #460]	@ (800223c <HAL_RCC_OscConfig+0x270>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a72      	ldr	r2, [pc, #456]	@ (800223c <HAL_RCC_OscConfig+0x270>)
 8002072:	f043 0308 	orr.w	r3, r3, #8
 8002076:	6013      	str	r3, [r2, #0]
 8002078:	4b70      	ldr	r3, [pc, #448]	@ (800223c <HAL_RCC_OscConfig+0x270>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	496d      	ldr	r1, [pc, #436]	@ (800223c <HAL_RCC_OscConfig+0x270>)
 8002086:	4313      	orrs	r3, r2
 8002088:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800208a:	4b6c      	ldr	r3, [pc, #432]	@ (800223c <HAL_RCC_OscConfig+0x270>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	021b      	lsls	r3, r3, #8
 8002098:	4968      	ldr	r1, [pc, #416]	@ (800223c <HAL_RCC_OscConfig+0x270>)
 800209a:	4313      	orrs	r3, r2
 800209c:	604b      	str	r3, [r1, #4]
 800209e:	e025      	b.n	80020ec <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020a0:	4b66      	ldr	r3, [pc, #408]	@ (800223c <HAL_RCC_OscConfig+0x270>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a65      	ldr	r2, [pc, #404]	@ (800223c <HAL_RCC_OscConfig+0x270>)
 80020a6:	f043 0308 	orr.w	r3, r3, #8
 80020aa:	6013      	str	r3, [r2, #0]
 80020ac:	4b63      	ldr	r3, [pc, #396]	@ (800223c <HAL_RCC_OscConfig+0x270>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a1b      	ldr	r3, [r3, #32]
 80020b8:	4960      	ldr	r1, [pc, #384]	@ (800223c <HAL_RCC_OscConfig+0x270>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020be:	4b5f      	ldr	r3, [pc, #380]	@ (800223c <HAL_RCC_OscConfig+0x270>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	021b      	lsls	r3, r3, #8
 80020cc:	495b      	ldr	r1, [pc, #364]	@ (800223c <HAL_RCC_OscConfig+0x270>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d109      	bne.n	80020ec <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	4618      	mov	r0, r3
 80020de:	f000 fd47 	bl	8002b70 <RCC_SetFlashLatencyFromMSIRange>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e343      	b.n	8002774 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020ec:	f000 fc4a 	bl	8002984 <HAL_RCC_GetSysClockFreq>
 80020f0:	4602      	mov	r2, r0
 80020f2:	4b52      	ldr	r3, [pc, #328]	@ (800223c <HAL_RCC_OscConfig+0x270>)
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	091b      	lsrs	r3, r3, #4
 80020f8:	f003 030f 	and.w	r3, r3, #15
 80020fc:	4950      	ldr	r1, [pc, #320]	@ (8002240 <HAL_RCC_OscConfig+0x274>)
 80020fe:	5ccb      	ldrb	r3, [r1, r3]
 8002100:	f003 031f 	and.w	r3, r3, #31
 8002104:	fa22 f303 	lsr.w	r3, r2, r3
 8002108:	4a4e      	ldr	r2, [pc, #312]	@ (8002244 <HAL_RCC_OscConfig+0x278>)
 800210a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800210c:	4b4e      	ldr	r3, [pc, #312]	@ (8002248 <HAL_RCC_OscConfig+0x27c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff fa05 	bl	8001520 <HAL_InitTick>
 8002116:	4603      	mov	r3, r0
 8002118:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800211a:	7bfb      	ldrb	r3, [r7, #15]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d052      	beq.n	80021c6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002120:	7bfb      	ldrb	r3, [r7, #15]
 8002122:	e327      	b.n	8002774 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d032      	beq.n	8002192 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800212c:	4b43      	ldr	r3, [pc, #268]	@ (800223c <HAL_RCC_OscConfig+0x270>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a42      	ldr	r2, [pc, #264]	@ (800223c <HAL_RCC_OscConfig+0x270>)
 8002132:	f043 0301 	orr.w	r3, r3, #1
 8002136:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002138:	f7ff fc34 	bl	80019a4 <HAL_GetTick>
 800213c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800213e:	e008      	b.n	8002152 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002140:	f7ff fc30 	bl	80019a4 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b02      	cmp	r3, #2
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e310      	b.n	8002774 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002152:	4b3a      	ldr	r3, [pc, #232]	@ (800223c <HAL_RCC_OscConfig+0x270>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d0f0      	beq.n	8002140 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800215e:	4b37      	ldr	r3, [pc, #220]	@ (800223c <HAL_RCC_OscConfig+0x270>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a36      	ldr	r2, [pc, #216]	@ (800223c <HAL_RCC_OscConfig+0x270>)
 8002164:	f043 0308 	orr.w	r3, r3, #8
 8002168:	6013      	str	r3, [r2, #0]
 800216a:	4b34      	ldr	r3, [pc, #208]	@ (800223c <HAL_RCC_OscConfig+0x270>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a1b      	ldr	r3, [r3, #32]
 8002176:	4931      	ldr	r1, [pc, #196]	@ (800223c <HAL_RCC_OscConfig+0x270>)
 8002178:	4313      	orrs	r3, r2
 800217a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800217c:	4b2f      	ldr	r3, [pc, #188]	@ (800223c <HAL_RCC_OscConfig+0x270>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	69db      	ldr	r3, [r3, #28]
 8002188:	021b      	lsls	r3, r3, #8
 800218a:	492c      	ldr	r1, [pc, #176]	@ (800223c <HAL_RCC_OscConfig+0x270>)
 800218c:	4313      	orrs	r3, r2
 800218e:	604b      	str	r3, [r1, #4]
 8002190:	e01a      	b.n	80021c8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002192:	4b2a      	ldr	r3, [pc, #168]	@ (800223c <HAL_RCC_OscConfig+0x270>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a29      	ldr	r2, [pc, #164]	@ (800223c <HAL_RCC_OscConfig+0x270>)
 8002198:	f023 0301 	bic.w	r3, r3, #1
 800219c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800219e:	f7ff fc01 	bl	80019a4 <HAL_GetTick>
 80021a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021a4:	e008      	b.n	80021b8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021a6:	f7ff fbfd 	bl	80019a4 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d901      	bls.n	80021b8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e2dd      	b.n	8002774 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021b8:	4b20      	ldr	r3, [pc, #128]	@ (800223c <HAL_RCC_OscConfig+0x270>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1f0      	bne.n	80021a6 <HAL_RCC_OscConfig+0x1da>
 80021c4:	e000      	b.n	80021c8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021c6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0301 	and.w	r3, r3, #1
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d074      	beq.n	80022be <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	2b08      	cmp	r3, #8
 80021d8:	d005      	beq.n	80021e6 <HAL_RCC_OscConfig+0x21a>
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	2b0c      	cmp	r3, #12
 80021de:	d10e      	bne.n	80021fe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	2b03      	cmp	r3, #3
 80021e4:	d10b      	bne.n	80021fe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021e6:	4b15      	ldr	r3, [pc, #84]	@ (800223c <HAL_RCC_OscConfig+0x270>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d064      	beq.n	80022bc <HAL_RCC_OscConfig+0x2f0>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d160      	bne.n	80022bc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e2ba      	b.n	8002774 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002206:	d106      	bne.n	8002216 <HAL_RCC_OscConfig+0x24a>
 8002208:	4b0c      	ldr	r3, [pc, #48]	@ (800223c <HAL_RCC_OscConfig+0x270>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a0b      	ldr	r2, [pc, #44]	@ (800223c <HAL_RCC_OscConfig+0x270>)
 800220e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002212:	6013      	str	r3, [r2, #0]
 8002214:	e026      	b.n	8002264 <HAL_RCC_OscConfig+0x298>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800221e:	d115      	bne.n	800224c <HAL_RCC_OscConfig+0x280>
 8002220:	4b06      	ldr	r3, [pc, #24]	@ (800223c <HAL_RCC_OscConfig+0x270>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a05      	ldr	r2, [pc, #20]	@ (800223c <HAL_RCC_OscConfig+0x270>)
 8002226:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800222a:	6013      	str	r3, [r2, #0]
 800222c:	4b03      	ldr	r3, [pc, #12]	@ (800223c <HAL_RCC_OscConfig+0x270>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a02      	ldr	r2, [pc, #8]	@ (800223c <HAL_RCC_OscConfig+0x270>)
 8002232:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002236:	6013      	str	r3, [r2, #0]
 8002238:	e014      	b.n	8002264 <HAL_RCC_OscConfig+0x298>
 800223a:	bf00      	nop
 800223c:	40021000 	.word	0x40021000
 8002240:	080099e8 	.word	0x080099e8
 8002244:	20000000 	.word	0x20000000
 8002248:	20000004 	.word	0x20000004
 800224c:	4ba0      	ldr	r3, [pc, #640]	@ (80024d0 <HAL_RCC_OscConfig+0x504>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a9f      	ldr	r2, [pc, #636]	@ (80024d0 <HAL_RCC_OscConfig+0x504>)
 8002252:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002256:	6013      	str	r3, [r2, #0]
 8002258:	4b9d      	ldr	r3, [pc, #628]	@ (80024d0 <HAL_RCC_OscConfig+0x504>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a9c      	ldr	r2, [pc, #624]	@ (80024d0 <HAL_RCC_OscConfig+0x504>)
 800225e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002262:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d013      	beq.n	8002294 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800226c:	f7ff fb9a 	bl	80019a4 <HAL_GetTick>
 8002270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002274:	f7ff fb96 	bl	80019a4 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b64      	cmp	r3, #100	@ 0x64
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e276      	b.n	8002774 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002286:	4b92      	ldr	r3, [pc, #584]	@ (80024d0 <HAL_RCC_OscConfig+0x504>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d0f0      	beq.n	8002274 <HAL_RCC_OscConfig+0x2a8>
 8002292:	e014      	b.n	80022be <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002294:	f7ff fb86 	bl	80019a4 <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800229c:	f7ff fb82 	bl	80019a4 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b64      	cmp	r3, #100	@ 0x64
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e262      	b.n	8002774 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022ae:	4b88      	ldr	r3, [pc, #544]	@ (80024d0 <HAL_RCC_OscConfig+0x504>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1f0      	bne.n	800229c <HAL_RCC_OscConfig+0x2d0>
 80022ba:	e000      	b.n	80022be <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d060      	beq.n	800238c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	2b04      	cmp	r3, #4
 80022ce:	d005      	beq.n	80022dc <HAL_RCC_OscConfig+0x310>
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	2b0c      	cmp	r3, #12
 80022d4:	d119      	bne.n	800230a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d116      	bne.n	800230a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022dc:	4b7c      	ldr	r3, [pc, #496]	@ (80024d0 <HAL_RCC_OscConfig+0x504>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d005      	beq.n	80022f4 <HAL_RCC_OscConfig+0x328>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d101      	bne.n	80022f4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e23f      	b.n	8002774 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022f4:	4b76      	ldr	r3, [pc, #472]	@ (80024d0 <HAL_RCC_OscConfig+0x504>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	061b      	lsls	r3, r3, #24
 8002302:	4973      	ldr	r1, [pc, #460]	@ (80024d0 <HAL_RCC_OscConfig+0x504>)
 8002304:	4313      	orrs	r3, r2
 8002306:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002308:	e040      	b.n	800238c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d023      	beq.n	800235a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002312:	4b6f      	ldr	r3, [pc, #444]	@ (80024d0 <HAL_RCC_OscConfig+0x504>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a6e      	ldr	r2, [pc, #440]	@ (80024d0 <HAL_RCC_OscConfig+0x504>)
 8002318:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800231c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800231e:	f7ff fb41 	bl	80019a4 <HAL_GetTick>
 8002322:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002324:	e008      	b.n	8002338 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002326:	f7ff fb3d 	bl	80019a4 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d901      	bls.n	8002338 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e21d      	b.n	8002774 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002338:	4b65      	ldr	r3, [pc, #404]	@ (80024d0 <HAL_RCC_OscConfig+0x504>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002340:	2b00      	cmp	r3, #0
 8002342:	d0f0      	beq.n	8002326 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002344:	4b62      	ldr	r3, [pc, #392]	@ (80024d0 <HAL_RCC_OscConfig+0x504>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	061b      	lsls	r3, r3, #24
 8002352:	495f      	ldr	r1, [pc, #380]	@ (80024d0 <HAL_RCC_OscConfig+0x504>)
 8002354:	4313      	orrs	r3, r2
 8002356:	604b      	str	r3, [r1, #4]
 8002358:	e018      	b.n	800238c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800235a:	4b5d      	ldr	r3, [pc, #372]	@ (80024d0 <HAL_RCC_OscConfig+0x504>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a5c      	ldr	r2, [pc, #368]	@ (80024d0 <HAL_RCC_OscConfig+0x504>)
 8002360:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002364:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002366:	f7ff fb1d 	bl	80019a4 <HAL_GetTick>
 800236a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800236c:	e008      	b.n	8002380 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800236e:	f7ff fb19 	bl	80019a4 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d901      	bls.n	8002380 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e1f9      	b.n	8002774 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002380:	4b53      	ldr	r3, [pc, #332]	@ (80024d0 <HAL_RCC_OscConfig+0x504>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1f0      	bne.n	800236e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0308 	and.w	r3, r3, #8
 8002394:	2b00      	cmp	r3, #0
 8002396:	d03c      	beq.n	8002412 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	695b      	ldr	r3, [r3, #20]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d01c      	beq.n	80023da <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023a0:	4b4b      	ldr	r3, [pc, #300]	@ (80024d0 <HAL_RCC_OscConfig+0x504>)
 80023a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023a6:	4a4a      	ldr	r2, [pc, #296]	@ (80024d0 <HAL_RCC_OscConfig+0x504>)
 80023a8:	f043 0301 	orr.w	r3, r3, #1
 80023ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b0:	f7ff faf8 	bl	80019a4 <HAL_GetTick>
 80023b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023b8:	f7ff faf4 	bl	80019a4 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e1d4      	b.n	8002774 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023ca:	4b41      	ldr	r3, [pc, #260]	@ (80024d0 <HAL_RCC_OscConfig+0x504>)
 80023cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d0ef      	beq.n	80023b8 <HAL_RCC_OscConfig+0x3ec>
 80023d8:	e01b      	b.n	8002412 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023da:	4b3d      	ldr	r3, [pc, #244]	@ (80024d0 <HAL_RCC_OscConfig+0x504>)
 80023dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023e0:	4a3b      	ldr	r2, [pc, #236]	@ (80024d0 <HAL_RCC_OscConfig+0x504>)
 80023e2:	f023 0301 	bic.w	r3, r3, #1
 80023e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ea:	f7ff fadb 	bl	80019a4 <HAL_GetTick>
 80023ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023f0:	e008      	b.n	8002404 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023f2:	f7ff fad7 	bl	80019a4 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d901      	bls.n	8002404 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e1b7      	b.n	8002774 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002404:	4b32      	ldr	r3, [pc, #200]	@ (80024d0 <HAL_RCC_OscConfig+0x504>)
 8002406:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1ef      	bne.n	80023f2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0304 	and.w	r3, r3, #4
 800241a:	2b00      	cmp	r3, #0
 800241c:	f000 80a6 	beq.w	800256c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002420:	2300      	movs	r3, #0
 8002422:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002424:	4b2a      	ldr	r3, [pc, #168]	@ (80024d0 <HAL_RCC_OscConfig+0x504>)
 8002426:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002428:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d10d      	bne.n	800244c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002430:	4b27      	ldr	r3, [pc, #156]	@ (80024d0 <HAL_RCC_OscConfig+0x504>)
 8002432:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002434:	4a26      	ldr	r2, [pc, #152]	@ (80024d0 <HAL_RCC_OscConfig+0x504>)
 8002436:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800243a:	6593      	str	r3, [r2, #88]	@ 0x58
 800243c:	4b24      	ldr	r3, [pc, #144]	@ (80024d0 <HAL_RCC_OscConfig+0x504>)
 800243e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002440:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002444:	60bb      	str	r3, [r7, #8]
 8002446:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002448:	2301      	movs	r3, #1
 800244a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800244c:	4b21      	ldr	r3, [pc, #132]	@ (80024d4 <HAL_RCC_OscConfig+0x508>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002454:	2b00      	cmp	r3, #0
 8002456:	d118      	bne.n	800248a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002458:	4b1e      	ldr	r3, [pc, #120]	@ (80024d4 <HAL_RCC_OscConfig+0x508>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a1d      	ldr	r2, [pc, #116]	@ (80024d4 <HAL_RCC_OscConfig+0x508>)
 800245e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002462:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002464:	f7ff fa9e 	bl	80019a4 <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800246c:	f7ff fa9a 	bl	80019a4 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e17a      	b.n	8002774 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800247e:	4b15      	ldr	r3, [pc, #84]	@ (80024d4 <HAL_RCC_OscConfig+0x508>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002486:	2b00      	cmp	r3, #0
 8002488:	d0f0      	beq.n	800246c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d108      	bne.n	80024a4 <HAL_RCC_OscConfig+0x4d8>
 8002492:	4b0f      	ldr	r3, [pc, #60]	@ (80024d0 <HAL_RCC_OscConfig+0x504>)
 8002494:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002498:	4a0d      	ldr	r2, [pc, #52]	@ (80024d0 <HAL_RCC_OscConfig+0x504>)
 800249a:	f043 0301 	orr.w	r3, r3, #1
 800249e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80024a2:	e029      	b.n	80024f8 <HAL_RCC_OscConfig+0x52c>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	2b05      	cmp	r3, #5
 80024aa:	d115      	bne.n	80024d8 <HAL_RCC_OscConfig+0x50c>
 80024ac:	4b08      	ldr	r3, [pc, #32]	@ (80024d0 <HAL_RCC_OscConfig+0x504>)
 80024ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024b2:	4a07      	ldr	r2, [pc, #28]	@ (80024d0 <HAL_RCC_OscConfig+0x504>)
 80024b4:	f043 0304 	orr.w	r3, r3, #4
 80024b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80024bc:	4b04      	ldr	r3, [pc, #16]	@ (80024d0 <HAL_RCC_OscConfig+0x504>)
 80024be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024c2:	4a03      	ldr	r2, [pc, #12]	@ (80024d0 <HAL_RCC_OscConfig+0x504>)
 80024c4:	f043 0301 	orr.w	r3, r3, #1
 80024c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80024cc:	e014      	b.n	80024f8 <HAL_RCC_OscConfig+0x52c>
 80024ce:	bf00      	nop
 80024d0:	40021000 	.word	0x40021000
 80024d4:	40007000 	.word	0x40007000
 80024d8:	4b9c      	ldr	r3, [pc, #624]	@ (800274c <HAL_RCC_OscConfig+0x780>)
 80024da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024de:	4a9b      	ldr	r2, [pc, #620]	@ (800274c <HAL_RCC_OscConfig+0x780>)
 80024e0:	f023 0301 	bic.w	r3, r3, #1
 80024e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80024e8:	4b98      	ldr	r3, [pc, #608]	@ (800274c <HAL_RCC_OscConfig+0x780>)
 80024ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024ee:	4a97      	ldr	r2, [pc, #604]	@ (800274c <HAL_RCC_OscConfig+0x780>)
 80024f0:	f023 0304 	bic.w	r3, r3, #4
 80024f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d016      	beq.n	800252e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002500:	f7ff fa50 	bl	80019a4 <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002506:	e00a      	b.n	800251e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002508:	f7ff fa4c 	bl	80019a4 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002516:	4293      	cmp	r3, r2
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e12a      	b.n	8002774 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800251e:	4b8b      	ldr	r3, [pc, #556]	@ (800274c <HAL_RCC_OscConfig+0x780>)
 8002520:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d0ed      	beq.n	8002508 <HAL_RCC_OscConfig+0x53c>
 800252c:	e015      	b.n	800255a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800252e:	f7ff fa39 	bl	80019a4 <HAL_GetTick>
 8002532:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002534:	e00a      	b.n	800254c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002536:	f7ff fa35 	bl	80019a4 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002544:	4293      	cmp	r3, r2
 8002546:	d901      	bls.n	800254c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e113      	b.n	8002774 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800254c:	4b7f      	ldr	r3, [pc, #508]	@ (800274c <HAL_RCC_OscConfig+0x780>)
 800254e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1ed      	bne.n	8002536 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800255a:	7ffb      	ldrb	r3, [r7, #31]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d105      	bne.n	800256c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002560:	4b7a      	ldr	r3, [pc, #488]	@ (800274c <HAL_RCC_OscConfig+0x780>)
 8002562:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002564:	4a79      	ldr	r2, [pc, #484]	@ (800274c <HAL_RCC_OscConfig+0x780>)
 8002566:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800256a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002570:	2b00      	cmp	r3, #0
 8002572:	f000 80fe 	beq.w	8002772 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800257a:	2b02      	cmp	r3, #2
 800257c:	f040 80d0 	bne.w	8002720 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002580:	4b72      	ldr	r3, [pc, #456]	@ (800274c <HAL_RCC_OscConfig+0x780>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	f003 0203 	and.w	r2, r3, #3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002590:	429a      	cmp	r2, r3
 8002592:	d130      	bne.n	80025f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800259e:	3b01      	subs	r3, #1
 80025a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d127      	bne.n	80025f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d11f      	bne.n	80025f6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80025c0:	2a07      	cmp	r2, #7
 80025c2:	bf14      	ite	ne
 80025c4:	2201      	movne	r2, #1
 80025c6:	2200      	moveq	r2, #0
 80025c8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d113      	bne.n	80025f6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025d8:	085b      	lsrs	r3, r3, #1
 80025da:	3b01      	subs	r3, #1
 80025dc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80025de:	429a      	cmp	r2, r3
 80025e0:	d109      	bne.n	80025f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ec:	085b      	lsrs	r3, r3, #1
 80025ee:	3b01      	subs	r3, #1
 80025f0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d06e      	beq.n	80026d4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	2b0c      	cmp	r3, #12
 80025fa:	d069      	beq.n	80026d0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80025fc:	4b53      	ldr	r3, [pc, #332]	@ (800274c <HAL_RCC_OscConfig+0x780>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d105      	bne.n	8002614 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002608:	4b50      	ldr	r3, [pc, #320]	@ (800274c <HAL_RCC_OscConfig+0x780>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e0ad      	b.n	8002774 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002618:	4b4c      	ldr	r3, [pc, #304]	@ (800274c <HAL_RCC_OscConfig+0x780>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a4b      	ldr	r2, [pc, #300]	@ (800274c <HAL_RCC_OscConfig+0x780>)
 800261e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002622:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002624:	f7ff f9be 	bl	80019a4 <HAL_GetTick>
 8002628:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800262c:	f7ff f9ba 	bl	80019a4 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e09a      	b.n	8002774 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800263e:	4b43      	ldr	r3, [pc, #268]	@ (800274c <HAL_RCC_OscConfig+0x780>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1f0      	bne.n	800262c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800264a:	4b40      	ldr	r3, [pc, #256]	@ (800274c <HAL_RCC_OscConfig+0x780>)
 800264c:	68da      	ldr	r2, [r3, #12]
 800264e:	4b40      	ldr	r3, [pc, #256]	@ (8002750 <HAL_RCC_OscConfig+0x784>)
 8002650:	4013      	ands	r3, r2
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800265a:	3a01      	subs	r2, #1
 800265c:	0112      	lsls	r2, r2, #4
 800265e:	4311      	orrs	r1, r2
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002664:	0212      	lsls	r2, r2, #8
 8002666:	4311      	orrs	r1, r2
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800266c:	0852      	lsrs	r2, r2, #1
 800266e:	3a01      	subs	r2, #1
 8002670:	0552      	lsls	r2, r2, #21
 8002672:	4311      	orrs	r1, r2
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002678:	0852      	lsrs	r2, r2, #1
 800267a:	3a01      	subs	r2, #1
 800267c:	0652      	lsls	r2, r2, #25
 800267e:	4311      	orrs	r1, r2
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002684:	0912      	lsrs	r2, r2, #4
 8002686:	0452      	lsls	r2, r2, #17
 8002688:	430a      	orrs	r2, r1
 800268a:	4930      	ldr	r1, [pc, #192]	@ (800274c <HAL_RCC_OscConfig+0x780>)
 800268c:	4313      	orrs	r3, r2
 800268e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002690:	4b2e      	ldr	r3, [pc, #184]	@ (800274c <HAL_RCC_OscConfig+0x780>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a2d      	ldr	r2, [pc, #180]	@ (800274c <HAL_RCC_OscConfig+0x780>)
 8002696:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800269a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800269c:	4b2b      	ldr	r3, [pc, #172]	@ (800274c <HAL_RCC_OscConfig+0x780>)
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	4a2a      	ldr	r2, [pc, #168]	@ (800274c <HAL_RCC_OscConfig+0x780>)
 80026a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80026a8:	f7ff f97c 	bl	80019a4 <HAL_GetTick>
 80026ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026b0:	f7ff f978 	bl	80019a4 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e058      	b.n	8002774 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026c2:	4b22      	ldr	r3, [pc, #136]	@ (800274c <HAL_RCC_OscConfig+0x780>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d0f0      	beq.n	80026b0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026ce:	e050      	b.n	8002772 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e04f      	b.n	8002774 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026d4:	4b1d      	ldr	r3, [pc, #116]	@ (800274c <HAL_RCC_OscConfig+0x780>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d148      	bne.n	8002772 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80026e0:	4b1a      	ldr	r3, [pc, #104]	@ (800274c <HAL_RCC_OscConfig+0x780>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a19      	ldr	r2, [pc, #100]	@ (800274c <HAL_RCC_OscConfig+0x780>)
 80026e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026ea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026ec:	4b17      	ldr	r3, [pc, #92]	@ (800274c <HAL_RCC_OscConfig+0x780>)
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	4a16      	ldr	r2, [pc, #88]	@ (800274c <HAL_RCC_OscConfig+0x780>)
 80026f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026f6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80026f8:	f7ff f954 	bl	80019a4 <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026fe:	e008      	b.n	8002712 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002700:	f7ff f950 	bl	80019a4 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b02      	cmp	r3, #2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e030      	b.n	8002774 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002712:	4b0e      	ldr	r3, [pc, #56]	@ (800274c <HAL_RCC_OscConfig+0x780>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d0f0      	beq.n	8002700 <HAL_RCC_OscConfig+0x734>
 800271e:	e028      	b.n	8002772 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	2b0c      	cmp	r3, #12
 8002724:	d023      	beq.n	800276e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002726:	4b09      	ldr	r3, [pc, #36]	@ (800274c <HAL_RCC_OscConfig+0x780>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a08      	ldr	r2, [pc, #32]	@ (800274c <HAL_RCC_OscConfig+0x780>)
 800272c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002730:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002732:	f7ff f937 	bl	80019a4 <HAL_GetTick>
 8002736:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002738:	e00c      	b.n	8002754 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800273a:	f7ff f933 	bl	80019a4 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d905      	bls.n	8002754 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e013      	b.n	8002774 <HAL_RCC_OscConfig+0x7a8>
 800274c:	40021000 	.word	0x40021000
 8002750:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002754:	4b09      	ldr	r3, [pc, #36]	@ (800277c <HAL_RCC_OscConfig+0x7b0>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1ec      	bne.n	800273a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002760:	4b06      	ldr	r3, [pc, #24]	@ (800277c <HAL_RCC_OscConfig+0x7b0>)
 8002762:	68da      	ldr	r2, [r3, #12]
 8002764:	4905      	ldr	r1, [pc, #20]	@ (800277c <HAL_RCC_OscConfig+0x7b0>)
 8002766:	4b06      	ldr	r3, [pc, #24]	@ (8002780 <HAL_RCC_OscConfig+0x7b4>)
 8002768:	4013      	ands	r3, r2
 800276a:	60cb      	str	r3, [r1, #12]
 800276c:	e001      	b.n	8002772 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e000      	b.n	8002774 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	3720      	adds	r7, #32
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	40021000 	.word	0x40021000
 8002780:	feeefffc 	.word	0xfeeefffc

08002784 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d101      	bne.n	8002798 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e0e7      	b.n	8002968 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002798:	4b75      	ldr	r3, [pc, #468]	@ (8002970 <HAL_RCC_ClockConfig+0x1ec>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0307 	and.w	r3, r3, #7
 80027a0:	683a      	ldr	r2, [r7, #0]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d910      	bls.n	80027c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027a6:	4b72      	ldr	r3, [pc, #456]	@ (8002970 <HAL_RCC_ClockConfig+0x1ec>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f023 0207 	bic.w	r2, r3, #7
 80027ae:	4970      	ldr	r1, [pc, #448]	@ (8002970 <HAL_RCC_ClockConfig+0x1ec>)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027b6:	4b6e      	ldr	r3, [pc, #440]	@ (8002970 <HAL_RCC_ClockConfig+0x1ec>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d001      	beq.n	80027c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e0cf      	b.n	8002968 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0302 	and.w	r3, r3, #2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d010      	beq.n	80027f6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689a      	ldr	r2, [r3, #8]
 80027d8:	4b66      	ldr	r3, [pc, #408]	@ (8002974 <HAL_RCC_ClockConfig+0x1f0>)
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d908      	bls.n	80027f6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027e4:	4b63      	ldr	r3, [pc, #396]	@ (8002974 <HAL_RCC_ClockConfig+0x1f0>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	4960      	ldr	r1, [pc, #384]	@ (8002974 <HAL_RCC_ClockConfig+0x1f0>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d04c      	beq.n	800289c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	2b03      	cmp	r3, #3
 8002808:	d107      	bne.n	800281a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800280a:	4b5a      	ldr	r3, [pc, #360]	@ (8002974 <HAL_RCC_ClockConfig+0x1f0>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d121      	bne.n	800285a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e0a6      	b.n	8002968 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	2b02      	cmp	r3, #2
 8002820:	d107      	bne.n	8002832 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002822:	4b54      	ldr	r3, [pc, #336]	@ (8002974 <HAL_RCC_ClockConfig+0x1f0>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d115      	bne.n	800285a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e09a      	b.n	8002968 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d107      	bne.n	800284a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800283a:	4b4e      	ldr	r3, [pc, #312]	@ (8002974 <HAL_RCC_ClockConfig+0x1f0>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d109      	bne.n	800285a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e08e      	b.n	8002968 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800284a:	4b4a      	ldr	r3, [pc, #296]	@ (8002974 <HAL_RCC_ClockConfig+0x1f0>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e086      	b.n	8002968 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800285a:	4b46      	ldr	r3, [pc, #280]	@ (8002974 <HAL_RCC_ClockConfig+0x1f0>)
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f023 0203 	bic.w	r2, r3, #3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	4943      	ldr	r1, [pc, #268]	@ (8002974 <HAL_RCC_ClockConfig+0x1f0>)
 8002868:	4313      	orrs	r3, r2
 800286a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800286c:	f7ff f89a 	bl	80019a4 <HAL_GetTick>
 8002870:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002872:	e00a      	b.n	800288a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002874:	f7ff f896 	bl	80019a4 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002882:	4293      	cmp	r3, r2
 8002884:	d901      	bls.n	800288a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e06e      	b.n	8002968 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800288a:	4b3a      	ldr	r3, [pc, #232]	@ (8002974 <HAL_RCC_ClockConfig+0x1f0>)
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f003 020c 	and.w	r2, r3, #12
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	429a      	cmp	r2, r3
 800289a:	d1eb      	bne.n	8002874 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d010      	beq.n	80028ca <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	4b31      	ldr	r3, [pc, #196]	@ (8002974 <HAL_RCC_ClockConfig+0x1f0>)
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d208      	bcs.n	80028ca <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028b8:	4b2e      	ldr	r3, [pc, #184]	@ (8002974 <HAL_RCC_ClockConfig+0x1f0>)
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	492b      	ldr	r1, [pc, #172]	@ (8002974 <HAL_RCC_ClockConfig+0x1f0>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028ca:	4b29      	ldr	r3, [pc, #164]	@ (8002970 <HAL_RCC_ClockConfig+0x1ec>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0307 	and.w	r3, r3, #7
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d210      	bcs.n	80028fa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028d8:	4b25      	ldr	r3, [pc, #148]	@ (8002970 <HAL_RCC_ClockConfig+0x1ec>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f023 0207 	bic.w	r2, r3, #7
 80028e0:	4923      	ldr	r1, [pc, #140]	@ (8002970 <HAL_RCC_ClockConfig+0x1ec>)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028e8:	4b21      	ldr	r3, [pc, #132]	@ (8002970 <HAL_RCC_ClockConfig+0x1ec>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0307 	and.w	r3, r3, #7
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d001      	beq.n	80028fa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e036      	b.n	8002968 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0304 	and.w	r3, r3, #4
 8002902:	2b00      	cmp	r3, #0
 8002904:	d008      	beq.n	8002918 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002906:	4b1b      	ldr	r3, [pc, #108]	@ (8002974 <HAL_RCC_ClockConfig+0x1f0>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	4918      	ldr	r1, [pc, #96]	@ (8002974 <HAL_RCC_ClockConfig+0x1f0>)
 8002914:	4313      	orrs	r3, r2
 8002916:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0308 	and.w	r3, r3, #8
 8002920:	2b00      	cmp	r3, #0
 8002922:	d009      	beq.n	8002938 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002924:	4b13      	ldr	r3, [pc, #76]	@ (8002974 <HAL_RCC_ClockConfig+0x1f0>)
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	4910      	ldr	r1, [pc, #64]	@ (8002974 <HAL_RCC_ClockConfig+0x1f0>)
 8002934:	4313      	orrs	r3, r2
 8002936:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002938:	f000 f824 	bl	8002984 <HAL_RCC_GetSysClockFreq>
 800293c:	4602      	mov	r2, r0
 800293e:	4b0d      	ldr	r3, [pc, #52]	@ (8002974 <HAL_RCC_ClockConfig+0x1f0>)
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	091b      	lsrs	r3, r3, #4
 8002944:	f003 030f 	and.w	r3, r3, #15
 8002948:	490b      	ldr	r1, [pc, #44]	@ (8002978 <HAL_RCC_ClockConfig+0x1f4>)
 800294a:	5ccb      	ldrb	r3, [r1, r3]
 800294c:	f003 031f 	and.w	r3, r3, #31
 8002950:	fa22 f303 	lsr.w	r3, r2, r3
 8002954:	4a09      	ldr	r2, [pc, #36]	@ (800297c <HAL_RCC_ClockConfig+0x1f8>)
 8002956:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002958:	4b09      	ldr	r3, [pc, #36]	@ (8002980 <HAL_RCC_ClockConfig+0x1fc>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4618      	mov	r0, r3
 800295e:	f7fe fddf 	bl	8001520 <HAL_InitTick>
 8002962:	4603      	mov	r3, r0
 8002964:	72fb      	strb	r3, [r7, #11]

  return status;
 8002966:	7afb      	ldrb	r3, [r7, #11]
}
 8002968:	4618      	mov	r0, r3
 800296a:	3710      	adds	r7, #16
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	40022000 	.word	0x40022000
 8002974:	40021000 	.word	0x40021000
 8002978:	080099e8 	.word	0x080099e8
 800297c:	20000000 	.word	0x20000000
 8002980:	20000004 	.word	0x20000004

08002984 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002984:	b480      	push	{r7}
 8002986:	b089      	sub	sp, #36	@ 0x24
 8002988:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800298a:	2300      	movs	r3, #0
 800298c:	61fb      	str	r3, [r7, #28]
 800298e:	2300      	movs	r3, #0
 8002990:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002992:	4b3e      	ldr	r3, [pc, #248]	@ (8002a8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f003 030c 	and.w	r3, r3, #12
 800299a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800299c:	4b3b      	ldr	r3, [pc, #236]	@ (8002a8c <HAL_RCC_GetSysClockFreq+0x108>)
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	f003 0303 	and.w	r3, r3, #3
 80029a4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d005      	beq.n	80029b8 <HAL_RCC_GetSysClockFreq+0x34>
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	2b0c      	cmp	r3, #12
 80029b0:	d121      	bne.n	80029f6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d11e      	bne.n	80029f6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80029b8:	4b34      	ldr	r3, [pc, #208]	@ (8002a8c <HAL_RCC_GetSysClockFreq+0x108>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0308 	and.w	r3, r3, #8
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d107      	bne.n	80029d4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80029c4:	4b31      	ldr	r3, [pc, #196]	@ (8002a8c <HAL_RCC_GetSysClockFreq+0x108>)
 80029c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029ca:	0a1b      	lsrs	r3, r3, #8
 80029cc:	f003 030f 	and.w	r3, r3, #15
 80029d0:	61fb      	str	r3, [r7, #28]
 80029d2:	e005      	b.n	80029e0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80029d4:	4b2d      	ldr	r3, [pc, #180]	@ (8002a8c <HAL_RCC_GetSysClockFreq+0x108>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	091b      	lsrs	r3, r3, #4
 80029da:	f003 030f 	and.w	r3, r3, #15
 80029de:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80029e0:	4a2b      	ldr	r2, [pc, #172]	@ (8002a90 <HAL_RCC_GetSysClockFreq+0x10c>)
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029e8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d10d      	bne.n	8002a0c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029f4:	e00a      	b.n	8002a0c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	2b04      	cmp	r3, #4
 80029fa:	d102      	bne.n	8002a02 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80029fc:	4b25      	ldr	r3, [pc, #148]	@ (8002a94 <HAL_RCC_GetSysClockFreq+0x110>)
 80029fe:	61bb      	str	r3, [r7, #24]
 8002a00:	e004      	b.n	8002a0c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	2b08      	cmp	r3, #8
 8002a06:	d101      	bne.n	8002a0c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a08:	4b23      	ldr	r3, [pc, #140]	@ (8002a98 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a0a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	2b0c      	cmp	r3, #12
 8002a10:	d134      	bne.n	8002a7c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a12:	4b1e      	ldr	r3, [pc, #120]	@ (8002a8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	f003 0303 	and.w	r3, r3, #3
 8002a1a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d003      	beq.n	8002a2a <HAL_RCC_GetSysClockFreq+0xa6>
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	2b03      	cmp	r3, #3
 8002a26:	d003      	beq.n	8002a30 <HAL_RCC_GetSysClockFreq+0xac>
 8002a28:	e005      	b.n	8002a36 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002a2a:	4b1a      	ldr	r3, [pc, #104]	@ (8002a94 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a2c:	617b      	str	r3, [r7, #20]
      break;
 8002a2e:	e005      	b.n	8002a3c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002a30:	4b19      	ldr	r3, [pc, #100]	@ (8002a98 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a32:	617b      	str	r3, [r7, #20]
      break;
 8002a34:	e002      	b.n	8002a3c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	617b      	str	r3, [r7, #20]
      break;
 8002a3a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a3c:	4b13      	ldr	r3, [pc, #76]	@ (8002a8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	091b      	lsrs	r3, r3, #4
 8002a42:	f003 0307 	and.w	r3, r3, #7
 8002a46:	3301      	adds	r3, #1
 8002a48:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a4a:	4b10      	ldr	r3, [pc, #64]	@ (8002a8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	0a1b      	lsrs	r3, r3, #8
 8002a50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a54:	697a      	ldr	r2, [r7, #20]
 8002a56:	fb03 f202 	mul.w	r2, r3, r2
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a60:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a62:	4b0a      	ldr	r3, [pc, #40]	@ (8002a8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	0e5b      	lsrs	r3, r3, #25
 8002a68:	f003 0303 	and.w	r3, r3, #3
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002a72:	697a      	ldr	r2, [r7, #20]
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a7a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002a7c:	69bb      	ldr	r3, [r7, #24]
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3724      	adds	r7, #36	@ 0x24
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	40021000 	.word	0x40021000
 8002a90:	08009a00 	.word	0x08009a00
 8002a94:	00f42400 	.word	0x00f42400
 8002a98:	007a1200 	.word	0x007a1200

08002a9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002aa0:	4b03      	ldr	r3, [pc, #12]	@ (8002ab0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	20000000 	.word	0x20000000

08002ab4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ab8:	f7ff fff0 	bl	8002a9c <HAL_RCC_GetHCLKFreq>
 8002abc:	4602      	mov	r2, r0
 8002abe:	4b06      	ldr	r3, [pc, #24]	@ (8002ad8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	0a1b      	lsrs	r3, r3, #8
 8002ac4:	f003 0307 	and.w	r3, r3, #7
 8002ac8:	4904      	ldr	r1, [pc, #16]	@ (8002adc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002aca:	5ccb      	ldrb	r3, [r1, r3]
 8002acc:	f003 031f 	and.w	r3, r3, #31
 8002ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	080099f8 	.word	0x080099f8

08002ae0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ae4:	f7ff ffda 	bl	8002a9c <HAL_RCC_GetHCLKFreq>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	4b06      	ldr	r3, [pc, #24]	@ (8002b04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	0adb      	lsrs	r3, r3, #11
 8002af0:	f003 0307 	and.w	r3, r3, #7
 8002af4:	4904      	ldr	r1, [pc, #16]	@ (8002b08 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002af6:	5ccb      	ldrb	r3, [r1, r3]
 8002af8:	f003 031f 	and.w	r3, r3, #31
 8002afc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	40021000 	.word	0x40021000
 8002b08:	080099f8 	.word	0x080099f8

08002b0c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	220f      	movs	r2, #15
 8002b1a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002b1c:	4b12      	ldr	r3, [pc, #72]	@ (8002b68 <HAL_RCC_GetClockConfig+0x5c>)
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f003 0203 	and.w	r2, r3, #3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002b28:	4b0f      	ldr	r3, [pc, #60]	@ (8002b68 <HAL_RCC_GetClockConfig+0x5c>)
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002b34:	4b0c      	ldr	r3, [pc, #48]	@ (8002b68 <HAL_RCC_GetClockConfig+0x5c>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002b40:	4b09      	ldr	r3, [pc, #36]	@ (8002b68 <HAL_RCC_GetClockConfig+0x5c>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	08db      	lsrs	r3, r3, #3
 8002b46:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002b4e:	4b07      	ldr	r3, [pc, #28]	@ (8002b6c <HAL_RCC_GetClockConfig+0x60>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0207 	and.w	r2, r3, #7
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	601a      	str	r2, [r3, #0]
}
 8002b5a:	bf00      	nop
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	40021000 	.word	0x40021000
 8002b6c:	40022000 	.word	0x40022000

08002b70 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b78:	2300      	movs	r3, #0
 8002b7a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b7c:	4b2a      	ldr	r3, [pc, #168]	@ (8002c28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d003      	beq.n	8002b90 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002b88:	f7ff f9bc 	bl	8001f04 <HAL_PWREx_GetVoltageRange>
 8002b8c:	6178      	str	r0, [r7, #20]
 8002b8e:	e014      	b.n	8002bba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b90:	4b25      	ldr	r3, [pc, #148]	@ (8002c28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b94:	4a24      	ldr	r2, [pc, #144]	@ (8002c28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b9c:	4b22      	ldr	r3, [pc, #136]	@ (8002c28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ba0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ba4:	60fb      	str	r3, [r7, #12]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002ba8:	f7ff f9ac 	bl	8001f04 <HAL_PWREx_GetVoltageRange>
 8002bac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002bae:	4b1e      	ldr	r3, [pc, #120]	@ (8002c28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bb2:	4a1d      	ldr	r2, [pc, #116]	@ (8002c28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bb4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bb8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002bc0:	d10b      	bne.n	8002bda <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2b80      	cmp	r3, #128	@ 0x80
 8002bc6:	d919      	bls.n	8002bfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2ba0      	cmp	r3, #160	@ 0xa0
 8002bcc:	d902      	bls.n	8002bd4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002bce:	2302      	movs	r3, #2
 8002bd0:	613b      	str	r3, [r7, #16]
 8002bd2:	e013      	b.n	8002bfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	613b      	str	r3, [r7, #16]
 8002bd8:	e010      	b.n	8002bfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2b80      	cmp	r3, #128	@ 0x80
 8002bde:	d902      	bls.n	8002be6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002be0:	2303      	movs	r3, #3
 8002be2:	613b      	str	r3, [r7, #16]
 8002be4:	e00a      	b.n	8002bfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2b80      	cmp	r3, #128	@ 0x80
 8002bea:	d102      	bne.n	8002bf2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002bec:	2302      	movs	r3, #2
 8002bee:	613b      	str	r3, [r7, #16]
 8002bf0:	e004      	b.n	8002bfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b70      	cmp	r3, #112	@ 0x70
 8002bf6:	d101      	bne.n	8002bfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8002c2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f023 0207 	bic.w	r2, r3, #7
 8002c04:	4909      	ldr	r1, [pc, #36]	@ (8002c2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c0c:	4b07      	ldr	r3, [pc, #28]	@ (8002c2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0307 	and.w	r3, r3, #7
 8002c14:	693a      	ldr	r2, [r7, #16]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d001      	beq.n	8002c1e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e000      	b.n	8002c20 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3718      	adds	r7, #24
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	40021000 	.word	0x40021000
 8002c2c:	40022000 	.word	0x40022000

08002c30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b086      	sub	sp, #24
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c38:	2300      	movs	r3, #0
 8002c3a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d041      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c50:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002c54:	d02a      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002c56:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002c5a:	d824      	bhi.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002c5c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002c60:	d008      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002c62:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002c66:	d81e      	bhi.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00a      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002c6c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c70:	d010      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002c72:	e018      	b.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c74:	4b86      	ldr	r3, [pc, #536]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	4a85      	ldr	r2, [pc, #532]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c7e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c80:	e015      	b.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	3304      	adds	r3, #4
 8002c86:	2100      	movs	r1, #0
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f000 fabb 	bl	8003204 <RCCEx_PLLSAI1_Config>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c92:	e00c      	b.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	3320      	adds	r3, #32
 8002c98:	2100      	movs	r1, #0
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f000 fba6 	bl	80033ec <RCCEx_PLLSAI2_Config>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ca4:	e003      	b.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	74fb      	strb	r3, [r7, #19]
      break;
 8002caa:	e000      	b.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002cac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cae:	7cfb      	ldrb	r3, [r7, #19]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d10b      	bne.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002cb4:	4b76      	ldr	r3, [pc, #472]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cba:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002cc2:	4973      	ldr	r1, [pc, #460]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002cca:	e001      	b.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ccc:	7cfb      	ldrb	r3, [r7, #19]
 8002cce:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d041      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ce0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002ce4:	d02a      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002ce6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002cea:	d824      	bhi.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002cec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002cf0:	d008      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002cf2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002cf6:	d81e      	bhi.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00a      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002cfc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d00:	d010      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002d02:	e018      	b.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d04:	4b62      	ldr	r3, [pc, #392]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	4a61      	ldr	r2, [pc, #388]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d0e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d10:	e015      	b.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	3304      	adds	r3, #4
 8002d16:	2100      	movs	r1, #0
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f000 fa73 	bl	8003204 <RCCEx_PLLSAI1_Config>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d22:	e00c      	b.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	3320      	adds	r3, #32
 8002d28:	2100      	movs	r1, #0
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f000 fb5e 	bl	80033ec <RCCEx_PLLSAI2_Config>
 8002d30:	4603      	mov	r3, r0
 8002d32:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d34:	e003      	b.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	74fb      	strb	r3, [r7, #19]
      break;
 8002d3a:	e000      	b.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002d3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d3e:	7cfb      	ldrb	r3, [r7, #19]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d10b      	bne.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002d44:	4b52      	ldr	r3, [pc, #328]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d4a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d52:	494f      	ldr	r1, [pc, #316]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002d5a:	e001      	b.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d5c:	7cfb      	ldrb	r3, [r7, #19]
 8002d5e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	f000 80a0 	beq.w	8002eae <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d72:	4b47      	ldr	r3, [pc, #284]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e000      	b.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002d82:	2300      	movs	r3, #0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00d      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d88:	4b41      	ldr	r3, [pc, #260]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d8c:	4a40      	ldr	r2, [pc, #256]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d92:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d94:	4b3e      	ldr	r3, [pc, #248]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d9c:	60bb      	str	r3, [r7, #8]
 8002d9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002da0:	2301      	movs	r3, #1
 8002da2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002da4:	4b3b      	ldr	r3, [pc, #236]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a3a      	ldr	r2, [pc, #232]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002daa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002db0:	f7fe fdf8 	bl	80019a4 <HAL_GetTick>
 8002db4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002db6:	e009      	b.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002db8:	f7fe fdf4 	bl	80019a4 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d902      	bls.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	74fb      	strb	r3, [r7, #19]
        break;
 8002dca:	e005      	b.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002dcc:	4b31      	ldr	r3, [pc, #196]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d0ef      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002dd8:	7cfb      	ldrb	r3, [r7, #19]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d15c      	bne.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002dde:	4b2c      	ldr	r3, [pc, #176]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002de4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002de8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d01f      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d019      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002dfc:	4b24      	ldr	r3, [pc, #144]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e06:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e08:	4b21      	ldr	r3, [pc, #132]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e0e:	4a20      	ldr	r2, [pc, #128]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e18:	4b1d      	ldr	r3, [pc, #116]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e1e:	4a1c      	ldr	r2, [pc, #112]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e28:	4a19      	ldr	r2, [pc, #100]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d016      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e3a:	f7fe fdb3 	bl	80019a4 <HAL_GetTick>
 8002e3e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e40:	e00b      	b.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e42:	f7fe fdaf 	bl	80019a4 <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d902      	bls.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	74fb      	strb	r3, [r7, #19]
            break;
 8002e58:	e006      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d0ec      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002e68:	7cfb      	ldrb	r3, [r7, #19]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d10c      	bne.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e6e:	4b08      	ldr	r3, [pc, #32]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e74:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e7e:	4904      	ldr	r1, [pc, #16]	@ (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002e86:	e009      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e88:	7cfb      	ldrb	r3, [r7, #19]
 8002e8a:	74bb      	strb	r3, [r7, #18]
 8002e8c:	e006      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002e8e:	bf00      	nop
 8002e90:	40021000 	.word	0x40021000
 8002e94:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e98:	7cfb      	ldrb	r3, [r7, #19]
 8002e9a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e9c:	7c7b      	ldrb	r3, [r7, #17]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d105      	bne.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ea2:	4b9e      	ldr	r3, [pc, #632]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ea4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ea6:	4a9d      	ldr	r2, [pc, #628]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ea8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002eac:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00a      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002eba:	4b98      	ldr	r3, [pc, #608]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ec0:	f023 0203 	bic.w	r2, r3, #3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ec8:	4994      	ldr	r1, [pc, #592]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d00a      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002edc:	4b8f      	ldr	r3, [pc, #572]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ee2:	f023 020c 	bic.w	r2, r3, #12
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eea:	498c      	ldr	r1, [pc, #560]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0304 	and.w	r3, r3, #4
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00a      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002efe:	4b87      	ldr	r3, [pc, #540]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f04:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0c:	4983      	ldr	r1, [pc, #524]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0308 	and.w	r3, r3, #8
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d00a      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f20:	4b7e      	ldr	r3, [pc, #504]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f26:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f2e:	497b      	ldr	r1, [pc, #492]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0310 	and.w	r3, r3, #16
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00a      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f42:	4b76      	ldr	r3, [pc, #472]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f48:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f50:	4972      	ldr	r1, [pc, #456]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0320 	and.w	r3, r3, #32
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00a      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f64:	4b6d      	ldr	r3, [pc, #436]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f6a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f72:	496a      	ldr	r1, [pc, #424]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00a      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f86:	4b65      	ldr	r3, [pc, #404]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f8c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f94:	4961      	ldr	r1, [pc, #388]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00a      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002fa8:	4b5c      	ldr	r3, [pc, #368]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fb6:	4959      	ldr	r1, [pc, #356]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00a      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fca:	4b54      	ldr	r3, [pc, #336]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fd0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fd8:	4950      	ldr	r1, [pc, #320]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00a      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002fec:	4b4b      	ldr	r3, [pc, #300]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ff2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ffa:	4948      	ldr	r1, [pc, #288]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00a      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800300e:	4b43      	ldr	r3, [pc, #268]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003010:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003014:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800301c:	493f      	ldr	r1, [pc, #252]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800301e:	4313      	orrs	r3, r2
 8003020:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d028      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003030:	4b3a      	ldr	r3, [pc, #232]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003032:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003036:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800303e:	4937      	ldr	r1, [pc, #220]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003040:	4313      	orrs	r3, r2
 8003042:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800304a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800304e:	d106      	bne.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003050:	4b32      	ldr	r3, [pc, #200]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	4a31      	ldr	r2, [pc, #196]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003056:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800305a:	60d3      	str	r3, [r2, #12]
 800305c:	e011      	b.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003062:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003066:	d10c      	bne.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	3304      	adds	r3, #4
 800306c:	2101      	movs	r1, #1
 800306e:	4618      	mov	r0, r3
 8003070:	f000 f8c8 	bl	8003204 <RCCEx_PLLSAI1_Config>
 8003074:	4603      	mov	r3, r0
 8003076:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003078:	7cfb      	ldrb	r3, [r7, #19]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800307e:	7cfb      	ldrb	r3, [r7, #19]
 8003080:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d028      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800308e:	4b23      	ldr	r3, [pc, #140]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003090:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003094:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800309c:	491f      	ldr	r1, [pc, #124]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80030ac:	d106      	bne.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030ae:	4b1b      	ldr	r3, [pc, #108]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	4a1a      	ldr	r2, [pc, #104]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80030b8:	60d3      	str	r3, [r2, #12]
 80030ba:	e011      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80030c4:	d10c      	bne.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	3304      	adds	r3, #4
 80030ca:	2101      	movs	r1, #1
 80030cc:	4618      	mov	r0, r3
 80030ce:	f000 f899 	bl	8003204 <RCCEx_PLLSAI1_Config>
 80030d2:	4603      	mov	r3, r0
 80030d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030d6:	7cfb      	ldrb	r3, [r7, #19]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d001      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80030dc:	7cfb      	ldrb	r3, [r7, #19]
 80030de:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d02b      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80030ec:	4b0b      	ldr	r3, [pc, #44]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030fa:	4908      	ldr	r1, [pc, #32]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003106:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800310a:	d109      	bne.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800310c:	4b03      	ldr	r3, [pc, #12]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	4a02      	ldr	r2, [pc, #8]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003112:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003116:	60d3      	str	r3, [r2, #12]
 8003118:	e014      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800311a:	bf00      	nop
 800311c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003124:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003128:	d10c      	bne.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	3304      	adds	r3, #4
 800312e:	2101      	movs	r1, #1
 8003130:	4618      	mov	r0, r3
 8003132:	f000 f867 	bl	8003204 <RCCEx_PLLSAI1_Config>
 8003136:	4603      	mov	r3, r0
 8003138:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800313a:	7cfb      	ldrb	r3, [r7, #19]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d001      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003140:	7cfb      	ldrb	r3, [r7, #19]
 8003142:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d02f      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003150:	4b2b      	ldr	r3, [pc, #172]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003152:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003156:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800315e:	4928      	ldr	r1, [pc, #160]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003160:	4313      	orrs	r3, r2
 8003162:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800316a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800316e:	d10d      	bne.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	3304      	adds	r3, #4
 8003174:	2102      	movs	r1, #2
 8003176:	4618      	mov	r0, r3
 8003178:	f000 f844 	bl	8003204 <RCCEx_PLLSAI1_Config>
 800317c:	4603      	mov	r3, r0
 800317e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003180:	7cfb      	ldrb	r3, [r7, #19]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d014      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003186:	7cfb      	ldrb	r3, [r7, #19]
 8003188:	74bb      	strb	r3, [r7, #18]
 800318a:	e011      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003190:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003194:	d10c      	bne.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	3320      	adds	r3, #32
 800319a:	2102      	movs	r1, #2
 800319c:	4618      	mov	r0, r3
 800319e:	f000 f925 	bl	80033ec <RCCEx_PLLSAI2_Config>
 80031a2:	4603      	mov	r3, r0
 80031a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031a6:	7cfb      	ldrb	r3, [r7, #19]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d001      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80031ac:	7cfb      	ldrb	r3, [r7, #19]
 80031ae:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00a      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80031bc:	4b10      	ldr	r3, [pc, #64]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031c2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80031ca:	490d      	ldr	r1, [pc, #52]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00b      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80031de:	4b08      	ldr	r3, [pc, #32]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031e4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031ee:	4904      	ldr	r1, [pc, #16]	@ (8003200 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80031f6:	7cbb      	ldrb	r3, [r7, #18]
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3718      	adds	r7, #24
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	40021000 	.word	0x40021000

08003204 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800320e:	2300      	movs	r3, #0
 8003210:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003212:	4b75      	ldr	r3, [pc, #468]	@ (80033e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	f003 0303 	and.w	r3, r3, #3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d018      	beq.n	8003250 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800321e:	4b72      	ldr	r3, [pc, #456]	@ (80033e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	f003 0203 	and.w	r2, r3, #3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	429a      	cmp	r2, r3
 800322c:	d10d      	bne.n	800324a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
       ||
 8003232:	2b00      	cmp	r3, #0
 8003234:	d009      	beq.n	800324a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003236:	4b6c      	ldr	r3, [pc, #432]	@ (80033e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	091b      	lsrs	r3, r3, #4
 800323c:	f003 0307 	and.w	r3, r3, #7
 8003240:	1c5a      	adds	r2, r3, #1
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
       ||
 8003246:	429a      	cmp	r2, r3
 8003248:	d047      	beq.n	80032da <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	73fb      	strb	r3, [r7, #15]
 800324e:	e044      	b.n	80032da <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2b03      	cmp	r3, #3
 8003256:	d018      	beq.n	800328a <RCCEx_PLLSAI1_Config+0x86>
 8003258:	2b03      	cmp	r3, #3
 800325a:	d825      	bhi.n	80032a8 <RCCEx_PLLSAI1_Config+0xa4>
 800325c:	2b01      	cmp	r3, #1
 800325e:	d002      	beq.n	8003266 <RCCEx_PLLSAI1_Config+0x62>
 8003260:	2b02      	cmp	r3, #2
 8003262:	d009      	beq.n	8003278 <RCCEx_PLLSAI1_Config+0x74>
 8003264:	e020      	b.n	80032a8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003266:	4b60      	ldr	r3, [pc, #384]	@ (80033e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d11d      	bne.n	80032ae <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003276:	e01a      	b.n	80032ae <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003278:	4b5b      	ldr	r3, [pc, #364]	@ (80033e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003280:	2b00      	cmp	r3, #0
 8003282:	d116      	bne.n	80032b2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003288:	e013      	b.n	80032b2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800328a:	4b57      	ldr	r3, [pc, #348]	@ (80033e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d10f      	bne.n	80032b6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003296:	4b54      	ldr	r3, [pc, #336]	@ (80033e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d109      	bne.n	80032b6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80032a6:	e006      	b.n	80032b6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	73fb      	strb	r3, [r7, #15]
      break;
 80032ac:	e004      	b.n	80032b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80032ae:	bf00      	nop
 80032b0:	e002      	b.n	80032b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80032b2:	bf00      	nop
 80032b4:	e000      	b.n	80032b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80032b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80032b8:	7bfb      	ldrb	r3, [r7, #15]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10d      	bne.n	80032da <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80032be:	4b4a      	ldr	r3, [pc, #296]	@ (80033e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6819      	ldr	r1, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	3b01      	subs	r3, #1
 80032d0:	011b      	lsls	r3, r3, #4
 80032d2:	430b      	orrs	r3, r1
 80032d4:	4944      	ldr	r1, [pc, #272]	@ (80033e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80032da:	7bfb      	ldrb	r3, [r7, #15]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d17d      	bne.n	80033dc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80032e0:	4b41      	ldr	r3, [pc, #260]	@ (80033e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a40      	ldr	r2, [pc, #256]	@ (80033e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032e6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80032ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032ec:	f7fe fb5a 	bl	80019a4 <HAL_GetTick>
 80032f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80032f2:	e009      	b.n	8003308 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032f4:	f7fe fb56 	bl	80019a4 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d902      	bls.n	8003308 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	73fb      	strb	r3, [r7, #15]
        break;
 8003306:	e005      	b.n	8003314 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003308:	4b37      	ldr	r3, [pc, #220]	@ (80033e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1ef      	bne.n	80032f4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003314:	7bfb      	ldrb	r3, [r7, #15]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d160      	bne.n	80033dc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d111      	bne.n	8003344 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003320:	4b31      	ldr	r3, [pc, #196]	@ (80033e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003328:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	6892      	ldr	r2, [r2, #8]
 8003330:	0211      	lsls	r1, r2, #8
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	68d2      	ldr	r2, [r2, #12]
 8003336:	0912      	lsrs	r2, r2, #4
 8003338:	0452      	lsls	r2, r2, #17
 800333a:	430a      	orrs	r2, r1
 800333c:	492a      	ldr	r1, [pc, #168]	@ (80033e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800333e:	4313      	orrs	r3, r2
 8003340:	610b      	str	r3, [r1, #16]
 8003342:	e027      	b.n	8003394 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d112      	bne.n	8003370 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800334a:	4b27      	ldr	r3, [pc, #156]	@ (80033e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003352:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	6892      	ldr	r2, [r2, #8]
 800335a:	0211      	lsls	r1, r2, #8
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	6912      	ldr	r2, [r2, #16]
 8003360:	0852      	lsrs	r2, r2, #1
 8003362:	3a01      	subs	r2, #1
 8003364:	0552      	lsls	r2, r2, #21
 8003366:	430a      	orrs	r2, r1
 8003368:	491f      	ldr	r1, [pc, #124]	@ (80033e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800336a:	4313      	orrs	r3, r2
 800336c:	610b      	str	r3, [r1, #16]
 800336e:	e011      	b.n	8003394 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003370:	4b1d      	ldr	r3, [pc, #116]	@ (80033e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003378:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	6892      	ldr	r2, [r2, #8]
 8003380:	0211      	lsls	r1, r2, #8
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	6952      	ldr	r2, [r2, #20]
 8003386:	0852      	lsrs	r2, r2, #1
 8003388:	3a01      	subs	r2, #1
 800338a:	0652      	lsls	r2, r2, #25
 800338c:	430a      	orrs	r2, r1
 800338e:	4916      	ldr	r1, [pc, #88]	@ (80033e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003390:	4313      	orrs	r3, r2
 8003392:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003394:	4b14      	ldr	r3, [pc, #80]	@ (80033e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a13      	ldr	r2, [pc, #76]	@ (80033e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800339a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800339e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033a0:	f7fe fb00 	bl	80019a4 <HAL_GetTick>
 80033a4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80033a6:	e009      	b.n	80033bc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033a8:	f7fe fafc 	bl	80019a4 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d902      	bls.n	80033bc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	73fb      	strb	r3, [r7, #15]
          break;
 80033ba:	e005      	b.n	80033c8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80033bc:	4b0a      	ldr	r3, [pc, #40]	@ (80033e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d0ef      	beq.n	80033a8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80033c8:	7bfb      	ldrb	r3, [r7, #15]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d106      	bne.n	80033dc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80033ce:	4b06      	ldr	r3, [pc, #24]	@ (80033e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033d0:	691a      	ldr	r2, [r3, #16]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	4904      	ldr	r1, [pc, #16]	@ (80033e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80033dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3710      	adds	r7, #16
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	40021000 	.word	0x40021000

080033ec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033f6:	2300      	movs	r3, #0
 80033f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80033fa:	4b6a      	ldr	r3, [pc, #424]	@ (80035a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	f003 0303 	and.w	r3, r3, #3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d018      	beq.n	8003438 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003406:	4b67      	ldr	r3, [pc, #412]	@ (80035a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	f003 0203 	and.w	r2, r3, #3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	429a      	cmp	r2, r3
 8003414:	d10d      	bne.n	8003432 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
       ||
 800341a:	2b00      	cmp	r3, #0
 800341c:	d009      	beq.n	8003432 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800341e:	4b61      	ldr	r3, [pc, #388]	@ (80035a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	091b      	lsrs	r3, r3, #4
 8003424:	f003 0307 	and.w	r3, r3, #7
 8003428:	1c5a      	adds	r2, r3, #1
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
       ||
 800342e:	429a      	cmp	r2, r3
 8003430:	d047      	beq.n	80034c2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	73fb      	strb	r3, [r7, #15]
 8003436:	e044      	b.n	80034c2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2b03      	cmp	r3, #3
 800343e:	d018      	beq.n	8003472 <RCCEx_PLLSAI2_Config+0x86>
 8003440:	2b03      	cmp	r3, #3
 8003442:	d825      	bhi.n	8003490 <RCCEx_PLLSAI2_Config+0xa4>
 8003444:	2b01      	cmp	r3, #1
 8003446:	d002      	beq.n	800344e <RCCEx_PLLSAI2_Config+0x62>
 8003448:	2b02      	cmp	r3, #2
 800344a:	d009      	beq.n	8003460 <RCCEx_PLLSAI2_Config+0x74>
 800344c:	e020      	b.n	8003490 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800344e:	4b55      	ldr	r3, [pc, #340]	@ (80035a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d11d      	bne.n	8003496 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800345e:	e01a      	b.n	8003496 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003460:	4b50      	ldr	r3, [pc, #320]	@ (80035a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003468:	2b00      	cmp	r3, #0
 800346a:	d116      	bne.n	800349a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003470:	e013      	b.n	800349a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003472:	4b4c      	ldr	r3, [pc, #304]	@ (80035a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10f      	bne.n	800349e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800347e:	4b49      	ldr	r3, [pc, #292]	@ (80035a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d109      	bne.n	800349e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800348e:	e006      	b.n	800349e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	73fb      	strb	r3, [r7, #15]
      break;
 8003494:	e004      	b.n	80034a0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003496:	bf00      	nop
 8003498:	e002      	b.n	80034a0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800349a:	bf00      	nop
 800349c:	e000      	b.n	80034a0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800349e:	bf00      	nop
    }

    if(status == HAL_OK)
 80034a0:	7bfb      	ldrb	r3, [r7, #15]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10d      	bne.n	80034c2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80034a6:	4b3f      	ldr	r3, [pc, #252]	@ (80035a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6819      	ldr	r1, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	3b01      	subs	r3, #1
 80034b8:	011b      	lsls	r3, r3, #4
 80034ba:	430b      	orrs	r3, r1
 80034bc:	4939      	ldr	r1, [pc, #228]	@ (80035a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80034c2:	7bfb      	ldrb	r3, [r7, #15]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d167      	bne.n	8003598 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80034c8:	4b36      	ldr	r3, [pc, #216]	@ (80035a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a35      	ldr	r2, [pc, #212]	@ (80035a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034d4:	f7fe fa66 	bl	80019a4 <HAL_GetTick>
 80034d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80034da:	e009      	b.n	80034f0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80034dc:	f7fe fa62 	bl	80019a4 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d902      	bls.n	80034f0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	73fb      	strb	r3, [r7, #15]
        break;
 80034ee:	e005      	b.n	80034fc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80034f0:	4b2c      	ldr	r3, [pc, #176]	@ (80035a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d1ef      	bne.n	80034dc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80034fc:	7bfb      	ldrb	r3, [r7, #15]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d14a      	bne.n	8003598 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d111      	bne.n	800352c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003508:	4b26      	ldr	r3, [pc, #152]	@ (80035a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800350a:	695b      	ldr	r3, [r3, #20]
 800350c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003510:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	6892      	ldr	r2, [r2, #8]
 8003518:	0211      	lsls	r1, r2, #8
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	68d2      	ldr	r2, [r2, #12]
 800351e:	0912      	lsrs	r2, r2, #4
 8003520:	0452      	lsls	r2, r2, #17
 8003522:	430a      	orrs	r2, r1
 8003524:	491f      	ldr	r1, [pc, #124]	@ (80035a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003526:	4313      	orrs	r3, r2
 8003528:	614b      	str	r3, [r1, #20]
 800352a:	e011      	b.n	8003550 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800352c:	4b1d      	ldr	r3, [pc, #116]	@ (80035a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800352e:	695b      	ldr	r3, [r3, #20]
 8003530:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003534:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	6892      	ldr	r2, [r2, #8]
 800353c:	0211      	lsls	r1, r2, #8
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	6912      	ldr	r2, [r2, #16]
 8003542:	0852      	lsrs	r2, r2, #1
 8003544:	3a01      	subs	r2, #1
 8003546:	0652      	lsls	r2, r2, #25
 8003548:	430a      	orrs	r2, r1
 800354a:	4916      	ldr	r1, [pc, #88]	@ (80035a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800354c:	4313      	orrs	r3, r2
 800354e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003550:	4b14      	ldr	r3, [pc, #80]	@ (80035a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a13      	ldr	r2, [pc, #76]	@ (80035a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003556:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800355a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800355c:	f7fe fa22 	bl	80019a4 <HAL_GetTick>
 8003560:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003562:	e009      	b.n	8003578 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003564:	f7fe fa1e 	bl	80019a4 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b02      	cmp	r3, #2
 8003570:	d902      	bls.n	8003578 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	73fb      	strb	r3, [r7, #15]
          break;
 8003576:	e005      	b.n	8003584 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003578:	4b0a      	ldr	r3, [pc, #40]	@ (80035a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d0ef      	beq.n	8003564 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003584:	7bfb      	ldrb	r3, [r7, #15]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d106      	bne.n	8003598 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800358a:	4b06      	ldr	r3, [pc, #24]	@ (80035a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800358c:	695a      	ldr	r2, [r3, #20]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	4904      	ldr	r1, [pc, #16]	@ (80035a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003594:	4313      	orrs	r3, r2
 8003596:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003598:	7bfb      	ldrb	r3, [r7, #15]
}
 800359a:	4618      	mov	r0, r3
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	40021000 	.word	0x40021000

080035a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e095      	b.n	80036e6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d108      	bne.n	80035d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80035ca:	d009      	beq.n	80035e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	61da      	str	r2, [r3, #28]
 80035d2:	e005      	b.n	80035e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d106      	bne.n	8003600 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f7fd ff06 	bl	800140c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2202      	movs	r2, #2
 8003604:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003616:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003620:	d902      	bls.n	8003628 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003622:	2300      	movs	r3, #0
 8003624:	60fb      	str	r3, [r7, #12]
 8003626:	e002      	b.n	800362e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003628:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800362c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003636:	d007      	beq.n	8003648 <HAL_SPI_Init+0xa0>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003640:	d002      	beq.n	8003648 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003658:	431a      	orrs	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	431a      	orrs	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	695b      	ldr	r3, [r3, #20]
 8003668:	f003 0301 	and.w	r3, r3, #1
 800366c:	431a      	orrs	r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003676:	431a      	orrs	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	69db      	ldr	r3, [r3, #28]
 800367c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003680:	431a      	orrs	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800368a:	ea42 0103 	orr.w	r1, r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003692:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	430a      	orrs	r2, r1
 800369c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	699b      	ldr	r3, [r3, #24]
 80036a2:	0c1b      	lsrs	r3, r3, #16
 80036a4:	f003 0204 	and.w	r2, r3, #4
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ac:	f003 0310 	and.w	r3, r3, #16
 80036b0:	431a      	orrs	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036b6:	f003 0308 	and.w	r3, r3, #8
 80036ba:	431a      	orrs	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80036c4:	ea42 0103 	orr.w	r1, r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	430a      	orrs	r2, r1
 80036d4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b088      	sub	sp, #32
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	60f8      	str	r0, [r7, #12]
 80036f6:	60b9      	str	r1, [r7, #8]
 80036f8:	603b      	str	r3, [r7, #0]
 80036fa:	4613      	mov	r3, r2
 80036fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80036fe:	2300      	movs	r3, #0
 8003700:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003708:	2b01      	cmp	r3, #1
 800370a:	d101      	bne.n	8003710 <HAL_SPI_Transmit+0x22>
 800370c:	2302      	movs	r3, #2
 800370e:	e15f      	b.n	80039d0 <HAL_SPI_Transmit+0x2e2>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003718:	f7fe f944 	bl	80019a4 <HAL_GetTick>
 800371c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800371e:	88fb      	ldrh	r3, [r7, #6]
 8003720:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b01      	cmp	r3, #1
 800372c:	d002      	beq.n	8003734 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800372e:	2302      	movs	r3, #2
 8003730:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003732:	e148      	b.n	80039c6 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d002      	beq.n	8003740 <HAL_SPI_Transmit+0x52>
 800373a:	88fb      	ldrh	r3, [r7, #6]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d102      	bne.n	8003746 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003744:	e13f      	b.n	80039c6 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2203      	movs	r2, #3
 800374a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	68ba      	ldr	r2, [r7, #8]
 8003758:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	88fa      	ldrh	r2, [r7, #6]
 800375e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	88fa      	ldrh	r2, [r7, #6]
 8003764:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2200      	movs	r2, #0
 800376a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2200      	movs	r2, #0
 8003778:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003790:	d10f      	bne.n	80037b2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80037b0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037bc:	2b40      	cmp	r3, #64	@ 0x40
 80037be:	d007      	beq.n	80037d0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80037ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80037d8:	d94f      	bls.n	800387a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d002      	beq.n	80037e8 <HAL_SPI_Transmit+0xfa>
 80037e2:	8afb      	ldrh	r3, [r7, #22]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d142      	bne.n	800386e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ec:	881a      	ldrh	r2, [r3, #0]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037f8:	1c9a      	adds	r2, r3, #2
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003802:	b29b      	uxth	r3, r3
 8003804:	3b01      	subs	r3, #1
 8003806:	b29a      	uxth	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800380c:	e02f      	b.n	800386e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b02      	cmp	r3, #2
 800381a:	d112      	bne.n	8003842 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003820:	881a      	ldrh	r2, [r3, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800382c:	1c9a      	adds	r2, r3, #2
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003836:	b29b      	uxth	r3, r3
 8003838:	3b01      	subs	r3, #1
 800383a:	b29a      	uxth	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003840:	e015      	b.n	800386e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003842:	f7fe f8af 	bl	80019a4 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	683a      	ldr	r2, [r7, #0]
 800384e:	429a      	cmp	r2, r3
 8003850:	d803      	bhi.n	800385a <HAL_SPI_Transmit+0x16c>
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003858:	d102      	bne.n	8003860 <HAL_SPI_Transmit+0x172>
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d106      	bne.n	800386e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800386c:	e0ab      	b.n	80039c6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003872:	b29b      	uxth	r3, r3
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1ca      	bne.n	800380e <HAL_SPI_Transmit+0x120>
 8003878:	e080      	b.n	800397c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d002      	beq.n	8003888 <HAL_SPI_Transmit+0x19a>
 8003882:	8afb      	ldrh	r3, [r7, #22]
 8003884:	2b01      	cmp	r3, #1
 8003886:	d174      	bne.n	8003972 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800388c:	b29b      	uxth	r3, r3
 800388e:	2b01      	cmp	r3, #1
 8003890:	d912      	bls.n	80038b8 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003896:	881a      	ldrh	r2, [r3, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038a2:	1c9a      	adds	r2, r3, #2
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	3b02      	subs	r3, #2
 80038b0:	b29a      	uxth	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80038b6:	e05c      	b.n	8003972 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	330c      	adds	r3, #12
 80038c2:	7812      	ldrb	r2, [r2, #0]
 80038c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ca:	1c5a      	adds	r2, r3, #1
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	3b01      	subs	r3, #1
 80038d8:	b29a      	uxth	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80038de:	e048      	b.n	8003972 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d12b      	bne.n	8003946 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d912      	bls.n	800391e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038fc:	881a      	ldrh	r2, [r3, #0]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003908:	1c9a      	adds	r2, r3, #2
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003912:	b29b      	uxth	r3, r3
 8003914:	3b02      	subs	r3, #2
 8003916:	b29a      	uxth	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800391c:	e029      	b.n	8003972 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	330c      	adds	r3, #12
 8003928:	7812      	ldrb	r2, [r2, #0]
 800392a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003930:	1c5a      	adds	r2, r3, #1
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800393a:	b29b      	uxth	r3, r3
 800393c:	3b01      	subs	r3, #1
 800393e:	b29a      	uxth	r2, r3
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003944:	e015      	b.n	8003972 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003946:	f7fe f82d 	bl	80019a4 <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	429a      	cmp	r2, r3
 8003954:	d803      	bhi.n	800395e <HAL_SPI_Transmit+0x270>
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800395c:	d102      	bne.n	8003964 <HAL_SPI_Transmit+0x276>
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d106      	bne.n	8003972 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003970:	e029      	b.n	80039c6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003976:	b29b      	uxth	r3, r3
 8003978:	2b00      	cmp	r3, #0
 800397a:	d1b1      	bne.n	80038e0 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	6839      	ldr	r1, [r7, #0]
 8003980:	68f8      	ldr	r0, [r7, #12]
 8003982:	f000 fb69 	bl	8004058 <SPI_EndRxTxTransaction>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d002      	beq.n	8003992 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2220      	movs	r2, #32
 8003990:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10a      	bne.n	80039b0 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800399a:	2300      	movs	r3, #0
 800399c:	613b      	str	r3, [r7, #16]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	613b      	str	r3, [r7, #16]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	613b      	str	r3, [r7, #16]
 80039ae:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d002      	beq.n	80039be <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	77fb      	strb	r3, [r7, #31]
 80039bc:	e003      	b.n	80039c6 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2201      	movs	r2, #1
 80039c2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80039ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3720      	adds	r7, #32
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b08a      	sub	sp, #40	@ 0x28
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]
 80039e4:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80039e6:	2301      	movs	r3, #1
 80039e8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80039ea:	2300      	movs	r3, #0
 80039ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d101      	bne.n	80039fe <HAL_SPI_TransmitReceive+0x26>
 80039fa:	2302      	movs	r3, #2
 80039fc:	e20a      	b.n	8003e14 <HAL_SPI_TransmitReceive+0x43c>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a06:	f7fd ffcd 	bl	80019a4 <HAL_GetTick>
 8003a0a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003a12:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003a1a:	887b      	ldrh	r3, [r7, #2]
 8003a1c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003a1e:	887b      	ldrh	r3, [r7, #2]
 8003a20:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a22:	7efb      	ldrb	r3, [r7, #27]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d00e      	beq.n	8003a46 <HAL_SPI_TransmitReceive+0x6e>
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a2e:	d106      	bne.n	8003a3e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d102      	bne.n	8003a3e <HAL_SPI_TransmitReceive+0x66>
 8003a38:	7efb      	ldrb	r3, [r7, #27]
 8003a3a:	2b04      	cmp	r3, #4
 8003a3c:	d003      	beq.n	8003a46 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003a3e:	2302      	movs	r3, #2
 8003a40:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003a44:	e1e0      	b.n	8003e08 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d005      	beq.n	8003a58 <HAL_SPI_TransmitReceive+0x80>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d002      	beq.n	8003a58 <HAL_SPI_TransmitReceive+0x80>
 8003a52:	887b      	ldrh	r3, [r7, #2]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d103      	bne.n	8003a60 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003a5e:	e1d3      	b.n	8003e08 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	2b04      	cmp	r3, #4
 8003a6a:	d003      	beq.n	8003a74 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2205      	movs	r2, #5
 8003a70:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	887a      	ldrh	r2, [r7, #2]
 8003a84:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	887a      	ldrh	r2, [r7, #2]
 8003a8c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	68ba      	ldr	r2, [r7, #8]
 8003a94:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	887a      	ldrh	r2, [r7, #2]
 8003a9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	887a      	ldrh	r2, [r7, #2]
 8003aa0:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003ab6:	d802      	bhi.n	8003abe <HAL_SPI_TransmitReceive+0xe6>
 8003ab8:	8a3b      	ldrh	r3, [r7, #16]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d908      	bls.n	8003ad0 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	685a      	ldr	r2, [r3, #4]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003acc:	605a      	str	r2, [r3, #4]
 8003ace:	e007      	b.n	8003ae0 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	685a      	ldr	r2, [r3, #4]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003ade:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aea:	2b40      	cmp	r3, #64	@ 0x40
 8003aec:	d007      	beq.n	8003afe <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003afc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003b06:	f240 8081 	bls.w	8003c0c <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d002      	beq.n	8003b18 <HAL_SPI_TransmitReceive+0x140>
 8003b12:	8a7b      	ldrh	r3, [r7, #18]
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d16d      	bne.n	8003bf4 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b1c:	881a      	ldrh	r2, [r3, #0]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b28:	1c9a      	adds	r2, r3, #2
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	3b01      	subs	r3, #1
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b3c:	e05a      	b.n	8003bf4 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d11b      	bne.n	8003b84 <HAL_SPI_TransmitReceive+0x1ac>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d016      	beq.n	8003b84 <HAL_SPI_TransmitReceive+0x1ac>
 8003b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d113      	bne.n	8003b84 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b60:	881a      	ldrh	r2, [r3, #0]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b6c:	1c9a      	adds	r2, r3, #2
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	b29a      	uxth	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b80:	2300      	movs	r3, #0
 8003b82:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d11c      	bne.n	8003bcc <HAL_SPI_TransmitReceive+0x1f4>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d016      	beq.n	8003bcc <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68da      	ldr	r2, [r3, #12]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba8:	b292      	uxth	r2, r2
 8003baa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb0:	1c9a      	adds	r2, r3, #2
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	b29a      	uxth	r2, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003bcc:	f7fd feea 	bl	80019a4 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d80b      	bhi.n	8003bf4 <HAL_SPI_TransmitReceive+0x21c>
 8003bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be2:	d007      	beq.n	8003bf4 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003bf2:	e109      	b.n	8003e08 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d19f      	bne.n	8003b3e <HAL_SPI_TransmitReceive+0x166>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d199      	bne.n	8003b3e <HAL_SPI_TransmitReceive+0x166>
 8003c0a:	e0e3      	b.n	8003dd4 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d003      	beq.n	8003c1c <HAL_SPI_TransmitReceive+0x244>
 8003c14:	8a7b      	ldrh	r3, [r7, #18]
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	f040 80cf 	bne.w	8003dba <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d912      	bls.n	8003c4c <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c2a:	881a      	ldrh	r2, [r3, #0]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c36:	1c9a      	adds	r2, r3, #2
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	3b02      	subs	r3, #2
 8003c44:	b29a      	uxth	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003c4a:	e0b6      	b.n	8003dba <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	330c      	adds	r3, #12
 8003c56:	7812      	ldrb	r2, [r2, #0]
 8003c58:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c5e:	1c5a      	adds	r2, r3, #1
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	b29a      	uxth	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c72:	e0a2      	b.n	8003dba <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d134      	bne.n	8003cec <HAL_SPI_TransmitReceive+0x314>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d02f      	beq.n	8003cec <HAL_SPI_TransmitReceive+0x314>
 8003c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d12c      	bne.n	8003cec <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d912      	bls.n	8003cc2 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ca0:	881a      	ldrh	r2, [r3, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cac:	1c9a      	adds	r2, r3, #2
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	3b02      	subs	r3, #2
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003cc0:	e012      	b.n	8003ce8 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	330c      	adds	r3, #12
 8003ccc:	7812      	ldrb	r2, [r2, #0]
 8003cce:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cd4:	1c5a      	adds	r2, r3, #1
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d148      	bne.n	8003d8c <HAL_SPI_TransmitReceive+0x3b4>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d042      	beq.n	8003d8c <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d923      	bls.n	8003d5a <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68da      	ldr	r2, [r3, #12]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d1c:	b292      	uxth	r2, r2
 8003d1e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d24:	1c9a      	adds	r2, r3, #2
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	3b02      	subs	r3, #2
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d81f      	bhi.n	8003d88 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003d56:	605a      	str	r2, [r3, #4]
 8003d58:	e016      	b.n	8003d88 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f103 020c 	add.w	r2, r3, #12
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d66:	7812      	ldrb	r2, [r2, #0]
 8003d68:	b2d2      	uxtb	r2, r2
 8003d6a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d70:	1c5a      	adds	r2, r3, #1
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003d8c:	f7fd fe0a 	bl	80019a4 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d803      	bhi.n	8003da4 <HAL_SPI_TransmitReceive+0x3cc>
 8003d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da2:	d102      	bne.n	8003daa <HAL_SPI_TransmitReceive+0x3d2>
 8003da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d107      	bne.n	8003dba <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003db8:	e026      	b.n	8003e08 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f47f af57 	bne.w	8003c74 <HAL_SPI_TransmitReceive+0x29c>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	f47f af50 	bne.w	8003c74 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003dd4:	69fa      	ldr	r2, [r7, #28]
 8003dd6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003dd8:	68f8      	ldr	r0, [r7, #12]
 8003dda:	f000 f93d 	bl	8004058 <SPI_EndRxTxTransaction>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d005      	beq.n	8003df0 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2220      	movs	r2, #32
 8003dee:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d003      	beq.n	8003e00 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dfe:	e003      	b.n	8003e08 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003e10:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3728      	adds	r7, #40	@ 0x28
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b088      	sub	sp, #32
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	603b      	str	r3, [r7, #0]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003e2c:	f7fd fdba 	bl	80019a4 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e34:	1a9b      	subs	r3, r3, r2
 8003e36:	683a      	ldr	r2, [r7, #0]
 8003e38:	4413      	add	r3, r2
 8003e3a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003e3c:	f7fd fdb2 	bl	80019a4 <HAL_GetTick>
 8003e40:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003e42:	4b39      	ldr	r3, [pc, #228]	@ (8003f28 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	015b      	lsls	r3, r3, #5
 8003e48:	0d1b      	lsrs	r3, r3, #20
 8003e4a:	69fa      	ldr	r2, [r7, #28]
 8003e4c:	fb02 f303 	mul.w	r3, r2, r3
 8003e50:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e52:	e054      	b.n	8003efe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e5a:	d050      	beq.n	8003efe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e5c:	f7fd fda2 	bl	80019a4 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	69fa      	ldr	r2, [r7, #28]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d902      	bls.n	8003e72 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d13d      	bne.n	8003eee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	685a      	ldr	r2, [r3, #4]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003e80:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e8a:	d111      	bne.n	8003eb0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e94:	d004      	beq.n	8003ea0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e9e:	d107      	bne.n	8003eb0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003eae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eb4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003eb8:	d10f      	bne.n	8003eda <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ec8:	601a      	str	r2, [r3, #0]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ed8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e017      	b.n	8003f1e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d101      	bne.n	8003ef8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	3b01      	subs	r3, #1
 8003efc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	689a      	ldr	r2, [r3, #8]
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	4013      	ands	r3, r2
 8003f08:	68ba      	ldr	r2, [r7, #8]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	bf0c      	ite	eq
 8003f0e:	2301      	moveq	r3, #1
 8003f10:	2300      	movne	r3, #0
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	461a      	mov	r2, r3
 8003f16:	79fb      	ldrb	r3, [r7, #7]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d19b      	bne.n	8003e54 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3720      	adds	r7, #32
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	20000000 	.word	0x20000000

08003f2c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b08a      	sub	sp, #40	@ 0x28
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
 8003f38:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003f3e:	f7fd fd31 	bl	80019a4 <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f46:	1a9b      	subs	r3, r3, r2
 8003f48:	683a      	ldr	r2, [r7, #0]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003f4e:	f7fd fd29 	bl	80019a4 <HAL_GetTick>
 8003f52:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	330c      	adds	r3, #12
 8003f5a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003f5c:	4b3d      	ldr	r3, [pc, #244]	@ (8004054 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	4613      	mov	r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	4413      	add	r3, r2
 8003f66:	00da      	lsls	r2, r3, #3
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	0d1b      	lsrs	r3, r3, #20
 8003f6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f6e:	fb02 f303 	mul.w	r3, r2, r3
 8003f72:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003f74:	e060      	b.n	8004038 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003f7c:	d107      	bne.n	8003f8e <SPI_WaitFifoStateUntilTimeout+0x62>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d104      	bne.n	8003f8e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003f8c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f94:	d050      	beq.n	8004038 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f96:	f7fd fd05 	bl	80019a4 <HAL_GetTick>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	6a3b      	ldr	r3, [r7, #32]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d902      	bls.n	8003fac <SPI_WaitFifoStateUntilTimeout+0x80>
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d13d      	bne.n	8004028 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	685a      	ldr	r2, [r3, #4]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003fba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003fc4:	d111      	bne.n	8003fea <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fce:	d004      	beq.n	8003fda <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fd8:	d107      	bne.n	8003fea <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003fe8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ff2:	d10f      	bne.n	8004014 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004002:	601a      	str	r2, [r3, #0]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004012:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e010      	b.n	800404a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800402e:	2300      	movs	r3, #0
 8004030:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	3b01      	subs	r3, #1
 8004036:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	689a      	ldr	r2, [r3, #8]
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	4013      	ands	r3, r2
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	429a      	cmp	r2, r3
 8004046:	d196      	bne.n	8003f76 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3728      	adds	r7, #40	@ 0x28
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	20000000 	.word	0x20000000

08004058 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b086      	sub	sp, #24
 800405c:	af02      	add	r7, sp, #8
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	9300      	str	r3, [sp, #0]
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	2200      	movs	r2, #0
 800406c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004070:	68f8      	ldr	r0, [r7, #12]
 8004072:	f7ff ff5b 	bl	8003f2c <SPI_WaitFifoStateUntilTimeout>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d007      	beq.n	800408c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004080:	f043 0220 	orr.w	r2, r3, #32
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e027      	b.n	80040dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	9300      	str	r3, [sp, #0]
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	2200      	movs	r2, #0
 8004094:	2180      	movs	r1, #128	@ 0x80
 8004096:	68f8      	ldr	r0, [r7, #12]
 8004098:	f7ff fec0 	bl	8003e1c <SPI_WaitFlagStateUntilTimeout>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d007      	beq.n	80040b2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040a6:	f043 0220 	orr.w	r2, r3, #32
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e014      	b.n	80040dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	9300      	str	r3, [sp, #0]
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80040be:	68f8      	ldr	r0, [r7, #12]
 80040c0:	f7ff ff34 	bl	8003f2c <SPI_WaitFifoStateUntilTimeout>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d007      	beq.n	80040da <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040ce:	f043 0220 	orr.w	r2, r3, #32
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e000      	b.n	80040dc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80040da:	2300      	movs	r3, #0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3710      	adds	r7, #16
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d101      	bne.n	80040f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e049      	b.n	800418a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d106      	bne.n	8004110 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 f841 	bl	8004192 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2202      	movs	r2, #2
 8004114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	3304      	adds	r3, #4
 8004120:	4619      	mov	r1, r3
 8004122:	4610      	mov	r0, r2
 8004124:	f000 f9da 	bl	80044dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3708      	adds	r7, #8
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}

08004192 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004192:	b480      	push	{r7}
 8004194:	b083      	sub	sp, #12
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800419a:	bf00      	nop
 800419c:	370c      	adds	r7, #12
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
	...

080041a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d001      	beq.n	80041c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e04f      	b.n	8004260 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2202      	movs	r2, #2
 80041c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68da      	ldr	r2, [r3, #12]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f042 0201 	orr.w	r2, r2, #1
 80041d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a23      	ldr	r2, [pc, #140]	@ (800426c <HAL_TIM_Base_Start_IT+0xc4>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d01d      	beq.n	800421e <HAL_TIM_Base_Start_IT+0x76>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041ea:	d018      	beq.n	800421e <HAL_TIM_Base_Start_IT+0x76>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a1f      	ldr	r2, [pc, #124]	@ (8004270 <HAL_TIM_Base_Start_IT+0xc8>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d013      	beq.n	800421e <HAL_TIM_Base_Start_IT+0x76>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a1e      	ldr	r2, [pc, #120]	@ (8004274 <HAL_TIM_Base_Start_IT+0xcc>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d00e      	beq.n	800421e <HAL_TIM_Base_Start_IT+0x76>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a1c      	ldr	r2, [pc, #112]	@ (8004278 <HAL_TIM_Base_Start_IT+0xd0>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d009      	beq.n	800421e <HAL_TIM_Base_Start_IT+0x76>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a1b      	ldr	r2, [pc, #108]	@ (800427c <HAL_TIM_Base_Start_IT+0xd4>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d004      	beq.n	800421e <HAL_TIM_Base_Start_IT+0x76>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a19      	ldr	r2, [pc, #100]	@ (8004280 <HAL_TIM_Base_Start_IT+0xd8>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d115      	bne.n	800424a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	689a      	ldr	r2, [r3, #8]
 8004224:	4b17      	ldr	r3, [pc, #92]	@ (8004284 <HAL_TIM_Base_Start_IT+0xdc>)
 8004226:	4013      	ands	r3, r2
 8004228:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2b06      	cmp	r3, #6
 800422e:	d015      	beq.n	800425c <HAL_TIM_Base_Start_IT+0xb4>
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004236:	d011      	beq.n	800425c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f042 0201 	orr.w	r2, r2, #1
 8004246:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004248:	e008      	b.n	800425c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f042 0201 	orr.w	r2, r2, #1
 8004258:	601a      	str	r2, [r3, #0]
 800425a:	e000      	b.n	800425e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800425c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800425e:	2300      	movs	r3, #0
}
 8004260:	4618      	mov	r0, r3
 8004262:	3714      	adds	r7, #20
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr
 800426c:	40012c00 	.word	0x40012c00
 8004270:	40000400 	.word	0x40000400
 8004274:	40000800 	.word	0x40000800
 8004278:	40000c00 	.word	0x40000c00
 800427c:	40013400 	.word	0x40013400
 8004280:	40014000 	.word	0x40014000
 8004284:	00010007 	.word	0x00010007

08004288 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d020      	beq.n	80042ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d01b      	beq.n	80042ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f06f 0202 	mvn.w	r2, #2
 80042bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2201      	movs	r2, #1
 80042c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	f003 0303 	and.w	r3, r3, #3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d003      	beq.n	80042da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 f8e4 	bl	80044a0 <HAL_TIM_IC_CaptureCallback>
 80042d8:	e005      	b.n	80042e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 f8d6 	bl	800448c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f000 f8e7 	bl	80044b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	f003 0304 	and.w	r3, r3, #4
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d020      	beq.n	8004338 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f003 0304 	and.w	r3, r3, #4
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d01b      	beq.n	8004338 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f06f 0204 	mvn.w	r2, #4
 8004308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2202      	movs	r2, #2
 800430e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800431a:	2b00      	cmp	r3, #0
 800431c:	d003      	beq.n	8004326 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 f8be 	bl	80044a0 <HAL_TIM_IC_CaptureCallback>
 8004324:	e005      	b.n	8004332 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 f8b0 	bl	800448c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f000 f8c1 	bl	80044b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	f003 0308 	and.w	r3, r3, #8
 800433e:	2b00      	cmp	r3, #0
 8004340:	d020      	beq.n	8004384 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f003 0308 	and.w	r3, r3, #8
 8004348:	2b00      	cmp	r3, #0
 800434a:	d01b      	beq.n	8004384 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f06f 0208 	mvn.w	r2, #8
 8004354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2204      	movs	r2, #4
 800435a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	69db      	ldr	r3, [r3, #28]
 8004362:	f003 0303 	and.w	r3, r3, #3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d003      	beq.n	8004372 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 f898 	bl	80044a0 <HAL_TIM_IC_CaptureCallback>
 8004370:	e005      	b.n	800437e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 f88a 	bl	800448c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f000 f89b 	bl	80044b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	f003 0310 	and.w	r3, r3, #16
 800438a:	2b00      	cmp	r3, #0
 800438c:	d020      	beq.n	80043d0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f003 0310 	and.w	r3, r3, #16
 8004394:	2b00      	cmp	r3, #0
 8004396:	d01b      	beq.n	80043d0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f06f 0210 	mvn.w	r2, #16
 80043a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2208      	movs	r2, #8
 80043a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	69db      	ldr	r3, [r3, #28]
 80043ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d003      	beq.n	80043be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 f872 	bl	80044a0 <HAL_TIM_IC_CaptureCallback>
 80043bc:	e005      	b.n	80043ca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 f864 	bl	800448c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f000 f875 	bl	80044b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	f003 0301 	and.w	r3, r3, #1
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d00c      	beq.n	80043f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f003 0301 	and.w	r3, r3, #1
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d007      	beq.n	80043f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f06f 0201 	mvn.w	r2, #1
 80043ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f7fc ffb0 	bl	8001354 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00c      	beq.n	8004418 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004404:	2b00      	cmp	r3, #0
 8004406:	d007      	beq.n	8004418 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 f906 	bl	8004624 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00c      	beq.n	800443c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004428:	2b00      	cmp	r3, #0
 800442a:	d007      	beq.n	800443c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 f8fe 	bl	8004638 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00c      	beq.n	8004460 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800444c:	2b00      	cmp	r3, #0
 800444e:	d007      	beq.n	8004460 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 f834 	bl	80044c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	f003 0320 	and.w	r3, r3, #32
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00c      	beq.n	8004484 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f003 0320 	and.w	r3, r3, #32
 8004470:	2b00      	cmp	r3, #0
 8004472:	d007      	beq.n	8004484 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f06f 0220 	mvn.w	r2, #32
 800447c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 f8c6 	bl	8004610 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004484:	bf00      	nop
 8004486:	3710      	adds	r7, #16
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044a8:	bf00      	nop
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044bc:	bf00      	nop
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044d0:	bf00      	nop
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80044dc:	b480      	push	{r7}
 80044de:	b085      	sub	sp, #20
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a40      	ldr	r2, [pc, #256]	@ (80045f0 <TIM_Base_SetConfig+0x114>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d013      	beq.n	800451c <TIM_Base_SetConfig+0x40>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044fa:	d00f      	beq.n	800451c <TIM_Base_SetConfig+0x40>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a3d      	ldr	r2, [pc, #244]	@ (80045f4 <TIM_Base_SetConfig+0x118>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d00b      	beq.n	800451c <TIM_Base_SetConfig+0x40>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a3c      	ldr	r2, [pc, #240]	@ (80045f8 <TIM_Base_SetConfig+0x11c>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d007      	beq.n	800451c <TIM_Base_SetConfig+0x40>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a3b      	ldr	r2, [pc, #236]	@ (80045fc <TIM_Base_SetConfig+0x120>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d003      	beq.n	800451c <TIM_Base_SetConfig+0x40>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a3a      	ldr	r2, [pc, #232]	@ (8004600 <TIM_Base_SetConfig+0x124>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d108      	bne.n	800452e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004522:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	4313      	orrs	r3, r2
 800452c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a2f      	ldr	r2, [pc, #188]	@ (80045f0 <TIM_Base_SetConfig+0x114>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d01f      	beq.n	8004576 <TIM_Base_SetConfig+0x9a>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800453c:	d01b      	beq.n	8004576 <TIM_Base_SetConfig+0x9a>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a2c      	ldr	r2, [pc, #176]	@ (80045f4 <TIM_Base_SetConfig+0x118>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d017      	beq.n	8004576 <TIM_Base_SetConfig+0x9a>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a2b      	ldr	r2, [pc, #172]	@ (80045f8 <TIM_Base_SetConfig+0x11c>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d013      	beq.n	8004576 <TIM_Base_SetConfig+0x9a>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a2a      	ldr	r2, [pc, #168]	@ (80045fc <TIM_Base_SetConfig+0x120>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d00f      	beq.n	8004576 <TIM_Base_SetConfig+0x9a>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a29      	ldr	r2, [pc, #164]	@ (8004600 <TIM_Base_SetConfig+0x124>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d00b      	beq.n	8004576 <TIM_Base_SetConfig+0x9a>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a28      	ldr	r2, [pc, #160]	@ (8004604 <TIM_Base_SetConfig+0x128>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d007      	beq.n	8004576 <TIM_Base_SetConfig+0x9a>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a27      	ldr	r2, [pc, #156]	@ (8004608 <TIM_Base_SetConfig+0x12c>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d003      	beq.n	8004576 <TIM_Base_SetConfig+0x9a>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a26      	ldr	r2, [pc, #152]	@ (800460c <TIM_Base_SetConfig+0x130>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d108      	bne.n	8004588 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800457c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	4313      	orrs	r3, r2
 8004586:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	4313      	orrs	r3, r2
 8004594:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68fa      	ldr	r2, [r7, #12]
 800459a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	689a      	ldr	r2, [r3, #8]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a10      	ldr	r2, [pc, #64]	@ (80045f0 <TIM_Base_SetConfig+0x114>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d00f      	beq.n	80045d4 <TIM_Base_SetConfig+0xf8>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a12      	ldr	r2, [pc, #72]	@ (8004600 <TIM_Base_SetConfig+0x124>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d00b      	beq.n	80045d4 <TIM_Base_SetConfig+0xf8>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a11      	ldr	r2, [pc, #68]	@ (8004604 <TIM_Base_SetConfig+0x128>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d007      	beq.n	80045d4 <TIM_Base_SetConfig+0xf8>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a10      	ldr	r2, [pc, #64]	@ (8004608 <TIM_Base_SetConfig+0x12c>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d003      	beq.n	80045d4 <TIM_Base_SetConfig+0xf8>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a0f      	ldr	r2, [pc, #60]	@ (800460c <TIM_Base_SetConfig+0x130>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d103      	bne.n	80045dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	691a      	ldr	r2, [r3, #16]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	615a      	str	r2, [r3, #20]
}
 80045e2:	bf00      	nop
 80045e4:	3714      	adds	r7, #20
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	40012c00 	.word	0x40012c00
 80045f4:	40000400 	.word	0x40000400
 80045f8:	40000800 	.word	0x40000800
 80045fc:	40000c00 	.word	0x40000c00
 8004600:	40013400 	.word	0x40013400
 8004604:	40014000 	.word	0x40014000
 8004608:	40014400 	.word	0x40014400
 800460c:	40014800 	.word	0x40014800

08004610 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004618:	bf00      	nop
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800462c:	bf00      	nop
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d101      	bne.n	800465e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e040      	b.n	80046e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004662:	2b00      	cmp	r3, #0
 8004664:	d106      	bne.n	8004674 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f7fd f8de 	bl	8001830 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2224      	movs	r2, #36	@ 0x24
 8004678:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f022 0201 	bic.w	r2, r2, #1
 8004688:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800468e:	2b00      	cmp	r3, #0
 8004690:	d002      	beq.n	8004698 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 fb6a 	bl	8004d6c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 f8af 	bl	80047fc <UART_SetConfig>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d101      	bne.n	80046a8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e01b      	b.n	80046e0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	685a      	ldr	r2, [r3, #4]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80046b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	689a      	ldr	r2, [r3, #8]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80046c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f042 0201 	orr.w	r2, r2, #1
 80046d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 fbe9 	bl	8004eb0 <UART_CheckIdleState>
 80046de:	4603      	mov	r3, r0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3708      	adds	r7, #8
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b08a      	sub	sp, #40	@ 0x28
 80046ec:	af02      	add	r7, sp, #8
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	603b      	str	r3, [r7, #0]
 80046f4:	4613      	mov	r3, r2
 80046f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046fc:	2b20      	cmp	r3, #32
 80046fe:	d177      	bne.n	80047f0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d002      	beq.n	800470c <HAL_UART_Transmit+0x24>
 8004706:	88fb      	ldrh	r3, [r7, #6]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d101      	bne.n	8004710 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e070      	b.n	80047f2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2200      	movs	r2, #0
 8004714:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2221      	movs	r2, #33	@ 0x21
 800471c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800471e:	f7fd f941 	bl	80019a4 <HAL_GetTick>
 8004722:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	88fa      	ldrh	r2, [r7, #6]
 8004728:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	88fa      	ldrh	r2, [r7, #6]
 8004730:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800473c:	d108      	bne.n	8004750 <HAL_UART_Transmit+0x68>
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d104      	bne.n	8004750 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004746:	2300      	movs	r3, #0
 8004748:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	61bb      	str	r3, [r7, #24]
 800474e:	e003      	b.n	8004758 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004754:	2300      	movs	r3, #0
 8004756:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004758:	e02f      	b.n	80047ba <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	9300      	str	r3, [sp, #0]
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	2200      	movs	r2, #0
 8004762:	2180      	movs	r1, #128	@ 0x80
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	f000 fc4b 	bl	8005000 <UART_WaitOnFlagUntilTimeout>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d004      	beq.n	800477a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2220      	movs	r2, #32
 8004774:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e03b      	b.n	80047f2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d10b      	bne.n	8004798 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	881a      	ldrh	r2, [r3, #0]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800478c:	b292      	uxth	r2, r2
 800478e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	3302      	adds	r3, #2
 8004794:	61bb      	str	r3, [r7, #24]
 8004796:	e007      	b.n	80047a8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	781a      	ldrb	r2, [r3, #0]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	3301      	adds	r3, #1
 80047a6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	3b01      	subs	r3, #1
 80047b2:	b29a      	uxth	r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1c9      	bne.n	800475a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	9300      	str	r3, [sp, #0]
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	2200      	movs	r2, #0
 80047ce:	2140      	movs	r1, #64	@ 0x40
 80047d0:	68f8      	ldr	r0, [r7, #12]
 80047d2:	f000 fc15 	bl	8005000 <UART_WaitOnFlagUntilTimeout>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d004      	beq.n	80047e6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2220      	movs	r2, #32
 80047e0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e005      	b.n	80047f2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2220      	movs	r2, #32
 80047ea:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80047ec:	2300      	movs	r3, #0
 80047ee:	e000      	b.n	80047f2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80047f0:	2302      	movs	r3, #2
  }
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3720      	adds	r7, #32
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
	...

080047fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004800:	b08a      	sub	sp, #40	@ 0x28
 8004802:	af00      	add	r7, sp, #0
 8004804:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004806:	2300      	movs	r3, #0
 8004808:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	689a      	ldr	r2, [r3, #8]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	431a      	orrs	r2, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	431a      	orrs	r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	69db      	ldr	r3, [r3, #28]
 8004820:	4313      	orrs	r3, r2
 8004822:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	4ba4      	ldr	r3, [pc, #656]	@ (8004abc <UART_SetConfig+0x2c0>)
 800482c:	4013      	ands	r3, r2
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	6812      	ldr	r2, [r2, #0]
 8004832:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004834:	430b      	orrs	r3, r1
 8004836:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	68da      	ldr	r2, [r3, #12]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	430a      	orrs	r2, r1
 800484c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a99      	ldr	r2, [pc, #612]	@ (8004ac0 <UART_SetConfig+0x2c4>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d004      	beq.n	8004868 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6a1b      	ldr	r3, [r3, #32]
 8004862:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004864:	4313      	orrs	r3, r2
 8004866:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004878:	430a      	orrs	r2, r1
 800487a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a90      	ldr	r2, [pc, #576]	@ (8004ac4 <UART_SetConfig+0x2c8>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d126      	bne.n	80048d4 <UART_SetConfig+0xd8>
 8004886:	4b90      	ldr	r3, [pc, #576]	@ (8004ac8 <UART_SetConfig+0x2cc>)
 8004888:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800488c:	f003 0303 	and.w	r3, r3, #3
 8004890:	2b03      	cmp	r3, #3
 8004892:	d81b      	bhi.n	80048cc <UART_SetConfig+0xd0>
 8004894:	a201      	add	r2, pc, #4	@ (adr r2, 800489c <UART_SetConfig+0xa0>)
 8004896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800489a:	bf00      	nop
 800489c:	080048ad 	.word	0x080048ad
 80048a0:	080048bd 	.word	0x080048bd
 80048a4:	080048b5 	.word	0x080048b5
 80048a8:	080048c5 	.word	0x080048c5
 80048ac:	2301      	movs	r3, #1
 80048ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048b2:	e116      	b.n	8004ae2 <UART_SetConfig+0x2e6>
 80048b4:	2302      	movs	r3, #2
 80048b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048ba:	e112      	b.n	8004ae2 <UART_SetConfig+0x2e6>
 80048bc:	2304      	movs	r3, #4
 80048be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048c2:	e10e      	b.n	8004ae2 <UART_SetConfig+0x2e6>
 80048c4:	2308      	movs	r3, #8
 80048c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048ca:	e10a      	b.n	8004ae2 <UART_SetConfig+0x2e6>
 80048cc:	2310      	movs	r3, #16
 80048ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048d2:	e106      	b.n	8004ae2 <UART_SetConfig+0x2e6>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a7c      	ldr	r2, [pc, #496]	@ (8004acc <UART_SetConfig+0x2d0>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d138      	bne.n	8004950 <UART_SetConfig+0x154>
 80048de:	4b7a      	ldr	r3, [pc, #488]	@ (8004ac8 <UART_SetConfig+0x2cc>)
 80048e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048e4:	f003 030c 	and.w	r3, r3, #12
 80048e8:	2b0c      	cmp	r3, #12
 80048ea:	d82d      	bhi.n	8004948 <UART_SetConfig+0x14c>
 80048ec:	a201      	add	r2, pc, #4	@ (adr r2, 80048f4 <UART_SetConfig+0xf8>)
 80048ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f2:	bf00      	nop
 80048f4:	08004929 	.word	0x08004929
 80048f8:	08004949 	.word	0x08004949
 80048fc:	08004949 	.word	0x08004949
 8004900:	08004949 	.word	0x08004949
 8004904:	08004939 	.word	0x08004939
 8004908:	08004949 	.word	0x08004949
 800490c:	08004949 	.word	0x08004949
 8004910:	08004949 	.word	0x08004949
 8004914:	08004931 	.word	0x08004931
 8004918:	08004949 	.word	0x08004949
 800491c:	08004949 	.word	0x08004949
 8004920:	08004949 	.word	0x08004949
 8004924:	08004941 	.word	0x08004941
 8004928:	2300      	movs	r3, #0
 800492a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800492e:	e0d8      	b.n	8004ae2 <UART_SetConfig+0x2e6>
 8004930:	2302      	movs	r3, #2
 8004932:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004936:	e0d4      	b.n	8004ae2 <UART_SetConfig+0x2e6>
 8004938:	2304      	movs	r3, #4
 800493a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800493e:	e0d0      	b.n	8004ae2 <UART_SetConfig+0x2e6>
 8004940:	2308      	movs	r3, #8
 8004942:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004946:	e0cc      	b.n	8004ae2 <UART_SetConfig+0x2e6>
 8004948:	2310      	movs	r3, #16
 800494a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800494e:	e0c8      	b.n	8004ae2 <UART_SetConfig+0x2e6>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a5e      	ldr	r2, [pc, #376]	@ (8004ad0 <UART_SetConfig+0x2d4>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d125      	bne.n	80049a6 <UART_SetConfig+0x1aa>
 800495a:	4b5b      	ldr	r3, [pc, #364]	@ (8004ac8 <UART_SetConfig+0x2cc>)
 800495c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004960:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004964:	2b30      	cmp	r3, #48	@ 0x30
 8004966:	d016      	beq.n	8004996 <UART_SetConfig+0x19a>
 8004968:	2b30      	cmp	r3, #48	@ 0x30
 800496a:	d818      	bhi.n	800499e <UART_SetConfig+0x1a2>
 800496c:	2b20      	cmp	r3, #32
 800496e:	d00a      	beq.n	8004986 <UART_SetConfig+0x18a>
 8004970:	2b20      	cmp	r3, #32
 8004972:	d814      	bhi.n	800499e <UART_SetConfig+0x1a2>
 8004974:	2b00      	cmp	r3, #0
 8004976:	d002      	beq.n	800497e <UART_SetConfig+0x182>
 8004978:	2b10      	cmp	r3, #16
 800497a:	d008      	beq.n	800498e <UART_SetConfig+0x192>
 800497c:	e00f      	b.n	800499e <UART_SetConfig+0x1a2>
 800497e:	2300      	movs	r3, #0
 8004980:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004984:	e0ad      	b.n	8004ae2 <UART_SetConfig+0x2e6>
 8004986:	2302      	movs	r3, #2
 8004988:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800498c:	e0a9      	b.n	8004ae2 <UART_SetConfig+0x2e6>
 800498e:	2304      	movs	r3, #4
 8004990:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004994:	e0a5      	b.n	8004ae2 <UART_SetConfig+0x2e6>
 8004996:	2308      	movs	r3, #8
 8004998:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800499c:	e0a1      	b.n	8004ae2 <UART_SetConfig+0x2e6>
 800499e:	2310      	movs	r3, #16
 80049a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049a4:	e09d      	b.n	8004ae2 <UART_SetConfig+0x2e6>
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a4a      	ldr	r2, [pc, #296]	@ (8004ad4 <UART_SetConfig+0x2d8>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d125      	bne.n	80049fc <UART_SetConfig+0x200>
 80049b0:	4b45      	ldr	r3, [pc, #276]	@ (8004ac8 <UART_SetConfig+0x2cc>)
 80049b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049b6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80049ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80049bc:	d016      	beq.n	80049ec <UART_SetConfig+0x1f0>
 80049be:	2bc0      	cmp	r3, #192	@ 0xc0
 80049c0:	d818      	bhi.n	80049f4 <UART_SetConfig+0x1f8>
 80049c2:	2b80      	cmp	r3, #128	@ 0x80
 80049c4:	d00a      	beq.n	80049dc <UART_SetConfig+0x1e0>
 80049c6:	2b80      	cmp	r3, #128	@ 0x80
 80049c8:	d814      	bhi.n	80049f4 <UART_SetConfig+0x1f8>
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d002      	beq.n	80049d4 <UART_SetConfig+0x1d8>
 80049ce:	2b40      	cmp	r3, #64	@ 0x40
 80049d0:	d008      	beq.n	80049e4 <UART_SetConfig+0x1e8>
 80049d2:	e00f      	b.n	80049f4 <UART_SetConfig+0x1f8>
 80049d4:	2300      	movs	r3, #0
 80049d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049da:	e082      	b.n	8004ae2 <UART_SetConfig+0x2e6>
 80049dc:	2302      	movs	r3, #2
 80049de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049e2:	e07e      	b.n	8004ae2 <UART_SetConfig+0x2e6>
 80049e4:	2304      	movs	r3, #4
 80049e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049ea:	e07a      	b.n	8004ae2 <UART_SetConfig+0x2e6>
 80049ec:	2308      	movs	r3, #8
 80049ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049f2:	e076      	b.n	8004ae2 <UART_SetConfig+0x2e6>
 80049f4:	2310      	movs	r3, #16
 80049f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049fa:	e072      	b.n	8004ae2 <UART_SetConfig+0x2e6>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a35      	ldr	r2, [pc, #212]	@ (8004ad8 <UART_SetConfig+0x2dc>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d12a      	bne.n	8004a5c <UART_SetConfig+0x260>
 8004a06:	4b30      	ldr	r3, [pc, #192]	@ (8004ac8 <UART_SetConfig+0x2cc>)
 8004a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a0c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a10:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a14:	d01a      	beq.n	8004a4c <UART_SetConfig+0x250>
 8004a16:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a1a:	d81b      	bhi.n	8004a54 <UART_SetConfig+0x258>
 8004a1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a20:	d00c      	beq.n	8004a3c <UART_SetConfig+0x240>
 8004a22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a26:	d815      	bhi.n	8004a54 <UART_SetConfig+0x258>
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d003      	beq.n	8004a34 <UART_SetConfig+0x238>
 8004a2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a30:	d008      	beq.n	8004a44 <UART_SetConfig+0x248>
 8004a32:	e00f      	b.n	8004a54 <UART_SetConfig+0x258>
 8004a34:	2300      	movs	r3, #0
 8004a36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a3a:	e052      	b.n	8004ae2 <UART_SetConfig+0x2e6>
 8004a3c:	2302      	movs	r3, #2
 8004a3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a42:	e04e      	b.n	8004ae2 <UART_SetConfig+0x2e6>
 8004a44:	2304      	movs	r3, #4
 8004a46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a4a:	e04a      	b.n	8004ae2 <UART_SetConfig+0x2e6>
 8004a4c:	2308      	movs	r3, #8
 8004a4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a52:	e046      	b.n	8004ae2 <UART_SetConfig+0x2e6>
 8004a54:	2310      	movs	r3, #16
 8004a56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a5a:	e042      	b.n	8004ae2 <UART_SetConfig+0x2e6>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a17      	ldr	r2, [pc, #92]	@ (8004ac0 <UART_SetConfig+0x2c4>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d13a      	bne.n	8004adc <UART_SetConfig+0x2e0>
 8004a66:	4b18      	ldr	r3, [pc, #96]	@ (8004ac8 <UART_SetConfig+0x2cc>)
 8004a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a6c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004a70:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a74:	d01a      	beq.n	8004aac <UART_SetConfig+0x2b0>
 8004a76:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a7a:	d81b      	bhi.n	8004ab4 <UART_SetConfig+0x2b8>
 8004a7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a80:	d00c      	beq.n	8004a9c <UART_SetConfig+0x2a0>
 8004a82:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a86:	d815      	bhi.n	8004ab4 <UART_SetConfig+0x2b8>
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d003      	beq.n	8004a94 <UART_SetConfig+0x298>
 8004a8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a90:	d008      	beq.n	8004aa4 <UART_SetConfig+0x2a8>
 8004a92:	e00f      	b.n	8004ab4 <UART_SetConfig+0x2b8>
 8004a94:	2300      	movs	r3, #0
 8004a96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a9a:	e022      	b.n	8004ae2 <UART_SetConfig+0x2e6>
 8004a9c:	2302      	movs	r3, #2
 8004a9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004aa2:	e01e      	b.n	8004ae2 <UART_SetConfig+0x2e6>
 8004aa4:	2304      	movs	r3, #4
 8004aa6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004aaa:	e01a      	b.n	8004ae2 <UART_SetConfig+0x2e6>
 8004aac:	2308      	movs	r3, #8
 8004aae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ab2:	e016      	b.n	8004ae2 <UART_SetConfig+0x2e6>
 8004ab4:	2310      	movs	r3, #16
 8004ab6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004aba:	e012      	b.n	8004ae2 <UART_SetConfig+0x2e6>
 8004abc:	efff69f3 	.word	0xefff69f3
 8004ac0:	40008000 	.word	0x40008000
 8004ac4:	40013800 	.word	0x40013800
 8004ac8:	40021000 	.word	0x40021000
 8004acc:	40004400 	.word	0x40004400
 8004ad0:	40004800 	.word	0x40004800
 8004ad4:	40004c00 	.word	0x40004c00
 8004ad8:	40005000 	.word	0x40005000
 8004adc:	2310      	movs	r3, #16
 8004ade:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a9f      	ldr	r2, [pc, #636]	@ (8004d64 <UART_SetConfig+0x568>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d17a      	bne.n	8004be2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004aec:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004af0:	2b08      	cmp	r3, #8
 8004af2:	d824      	bhi.n	8004b3e <UART_SetConfig+0x342>
 8004af4:	a201      	add	r2, pc, #4	@ (adr r2, 8004afc <UART_SetConfig+0x300>)
 8004af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004afa:	bf00      	nop
 8004afc:	08004b21 	.word	0x08004b21
 8004b00:	08004b3f 	.word	0x08004b3f
 8004b04:	08004b29 	.word	0x08004b29
 8004b08:	08004b3f 	.word	0x08004b3f
 8004b0c:	08004b2f 	.word	0x08004b2f
 8004b10:	08004b3f 	.word	0x08004b3f
 8004b14:	08004b3f 	.word	0x08004b3f
 8004b18:	08004b3f 	.word	0x08004b3f
 8004b1c:	08004b37 	.word	0x08004b37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b20:	f7fd ffc8 	bl	8002ab4 <HAL_RCC_GetPCLK1Freq>
 8004b24:	61f8      	str	r0, [r7, #28]
        break;
 8004b26:	e010      	b.n	8004b4a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b28:	4b8f      	ldr	r3, [pc, #572]	@ (8004d68 <UART_SetConfig+0x56c>)
 8004b2a:	61fb      	str	r3, [r7, #28]
        break;
 8004b2c:	e00d      	b.n	8004b4a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b2e:	f7fd ff29 	bl	8002984 <HAL_RCC_GetSysClockFreq>
 8004b32:	61f8      	str	r0, [r7, #28]
        break;
 8004b34:	e009      	b.n	8004b4a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b3a:	61fb      	str	r3, [r7, #28]
        break;
 8004b3c:	e005      	b.n	8004b4a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004b48:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	f000 80fb 	beq.w	8004d48 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	685a      	ldr	r2, [r3, #4]
 8004b56:	4613      	mov	r3, r2
 8004b58:	005b      	lsls	r3, r3, #1
 8004b5a:	4413      	add	r3, r2
 8004b5c:	69fa      	ldr	r2, [r7, #28]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d305      	bcc.n	8004b6e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b68:	69fa      	ldr	r2, [r7, #28]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d903      	bls.n	8004b76 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004b74:	e0e8      	b.n	8004d48 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	461c      	mov	r4, r3
 8004b7c:	4615      	mov	r5, r2
 8004b7e:	f04f 0200 	mov.w	r2, #0
 8004b82:	f04f 0300 	mov.w	r3, #0
 8004b86:	022b      	lsls	r3, r5, #8
 8004b88:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004b8c:	0222      	lsls	r2, r4, #8
 8004b8e:	68f9      	ldr	r1, [r7, #12]
 8004b90:	6849      	ldr	r1, [r1, #4]
 8004b92:	0849      	lsrs	r1, r1, #1
 8004b94:	2000      	movs	r0, #0
 8004b96:	4688      	mov	r8, r1
 8004b98:	4681      	mov	r9, r0
 8004b9a:	eb12 0a08 	adds.w	sl, r2, r8
 8004b9e:	eb43 0b09 	adc.w	fp, r3, r9
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	603b      	str	r3, [r7, #0]
 8004baa:	607a      	str	r2, [r7, #4]
 8004bac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004bb0:	4650      	mov	r0, sl
 8004bb2:	4659      	mov	r1, fp
 8004bb4:	f7fb fb64 	bl	8000280 <__aeabi_uldivmod>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	460b      	mov	r3, r1
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004bc0:	69bb      	ldr	r3, [r7, #24]
 8004bc2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004bc6:	d308      	bcc.n	8004bda <UART_SetConfig+0x3de>
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004bce:	d204      	bcs.n	8004bda <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	69ba      	ldr	r2, [r7, #24]
 8004bd6:	60da      	str	r2, [r3, #12]
 8004bd8:	e0b6      	b.n	8004d48 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004be0:	e0b2      	b.n	8004d48 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	69db      	ldr	r3, [r3, #28]
 8004be6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bea:	d15e      	bne.n	8004caa <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004bec:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004bf0:	2b08      	cmp	r3, #8
 8004bf2:	d828      	bhi.n	8004c46 <UART_SetConfig+0x44a>
 8004bf4:	a201      	add	r2, pc, #4	@ (adr r2, 8004bfc <UART_SetConfig+0x400>)
 8004bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bfa:	bf00      	nop
 8004bfc:	08004c21 	.word	0x08004c21
 8004c00:	08004c29 	.word	0x08004c29
 8004c04:	08004c31 	.word	0x08004c31
 8004c08:	08004c47 	.word	0x08004c47
 8004c0c:	08004c37 	.word	0x08004c37
 8004c10:	08004c47 	.word	0x08004c47
 8004c14:	08004c47 	.word	0x08004c47
 8004c18:	08004c47 	.word	0x08004c47
 8004c1c:	08004c3f 	.word	0x08004c3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c20:	f7fd ff48 	bl	8002ab4 <HAL_RCC_GetPCLK1Freq>
 8004c24:	61f8      	str	r0, [r7, #28]
        break;
 8004c26:	e014      	b.n	8004c52 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c28:	f7fd ff5a 	bl	8002ae0 <HAL_RCC_GetPCLK2Freq>
 8004c2c:	61f8      	str	r0, [r7, #28]
        break;
 8004c2e:	e010      	b.n	8004c52 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c30:	4b4d      	ldr	r3, [pc, #308]	@ (8004d68 <UART_SetConfig+0x56c>)
 8004c32:	61fb      	str	r3, [r7, #28]
        break;
 8004c34:	e00d      	b.n	8004c52 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c36:	f7fd fea5 	bl	8002984 <HAL_RCC_GetSysClockFreq>
 8004c3a:	61f8      	str	r0, [r7, #28]
        break;
 8004c3c:	e009      	b.n	8004c52 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c42:	61fb      	str	r3, [r7, #28]
        break;
 8004c44:	e005      	b.n	8004c52 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004c46:	2300      	movs	r3, #0
 8004c48:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004c50:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d077      	beq.n	8004d48 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	005a      	lsls	r2, r3, #1
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	085b      	lsrs	r3, r3, #1
 8004c62:	441a      	add	r2, r3
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c6c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	2b0f      	cmp	r3, #15
 8004c72:	d916      	bls.n	8004ca2 <UART_SetConfig+0x4a6>
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c7a:	d212      	bcs.n	8004ca2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	f023 030f 	bic.w	r3, r3, #15
 8004c84:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	085b      	lsrs	r3, r3, #1
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	f003 0307 	and.w	r3, r3, #7
 8004c90:	b29a      	uxth	r2, r3
 8004c92:	8afb      	ldrh	r3, [r7, #22]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	8afa      	ldrh	r2, [r7, #22]
 8004c9e:	60da      	str	r2, [r3, #12]
 8004ca0:	e052      	b.n	8004d48 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004ca8:	e04e      	b.n	8004d48 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004caa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004cae:	2b08      	cmp	r3, #8
 8004cb0:	d827      	bhi.n	8004d02 <UART_SetConfig+0x506>
 8004cb2:	a201      	add	r2, pc, #4	@ (adr r2, 8004cb8 <UART_SetConfig+0x4bc>)
 8004cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb8:	08004cdd 	.word	0x08004cdd
 8004cbc:	08004ce5 	.word	0x08004ce5
 8004cc0:	08004ced 	.word	0x08004ced
 8004cc4:	08004d03 	.word	0x08004d03
 8004cc8:	08004cf3 	.word	0x08004cf3
 8004ccc:	08004d03 	.word	0x08004d03
 8004cd0:	08004d03 	.word	0x08004d03
 8004cd4:	08004d03 	.word	0x08004d03
 8004cd8:	08004cfb 	.word	0x08004cfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cdc:	f7fd feea 	bl	8002ab4 <HAL_RCC_GetPCLK1Freq>
 8004ce0:	61f8      	str	r0, [r7, #28]
        break;
 8004ce2:	e014      	b.n	8004d0e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ce4:	f7fd fefc 	bl	8002ae0 <HAL_RCC_GetPCLK2Freq>
 8004ce8:	61f8      	str	r0, [r7, #28]
        break;
 8004cea:	e010      	b.n	8004d0e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cec:	4b1e      	ldr	r3, [pc, #120]	@ (8004d68 <UART_SetConfig+0x56c>)
 8004cee:	61fb      	str	r3, [r7, #28]
        break;
 8004cf0:	e00d      	b.n	8004d0e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cf2:	f7fd fe47 	bl	8002984 <HAL_RCC_GetSysClockFreq>
 8004cf6:	61f8      	str	r0, [r7, #28]
        break;
 8004cf8:	e009      	b.n	8004d0e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004cfe:	61fb      	str	r3, [r7, #28]
        break;
 8004d00:	e005      	b.n	8004d0e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004d02:	2300      	movs	r3, #0
 8004d04:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004d0c:	bf00      	nop
    }

    if (pclk != 0U)
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d019      	beq.n	8004d48 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	085a      	lsrs	r2, r3, #1
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	441a      	add	r2, r3
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d26:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d28:	69bb      	ldr	r3, [r7, #24]
 8004d2a:	2b0f      	cmp	r3, #15
 8004d2c:	d909      	bls.n	8004d42 <UART_SetConfig+0x546>
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d34:	d205      	bcs.n	8004d42 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	60da      	str	r2, [r3, #12]
 8004d40:	e002      	b.n	8004d48 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2200      	movs	r2, #0
 8004d52:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004d54:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3728      	adds	r7, #40	@ 0x28
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d62:	bf00      	nop
 8004d64:	40008000 	.word	0x40008000
 8004d68:	00f42400 	.word	0x00f42400

08004d6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d78:	f003 0308 	and.w	r3, r3, #8
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00a      	beq.n	8004d96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	430a      	orrs	r2, r1
 8004d94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d9a:	f003 0301 	and.w	r3, r3, #1
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00a      	beq.n	8004db8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	430a      	orrs	r2, r1
 8004db6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dbc:	f003 0302 	and.w	r3, r3, #2
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d00a      	beq.n	8004dda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	430a      	orrs	r2, r1
 8004dd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dde:	f003 0304 	and.w	r3, r3, #4
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00a      	beq.n	8004dfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	430a      	orrs	r2, r1
 8004dfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e00:	f003 0310 	and.w	r3, r3, #16
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00a      	beq.n	8004e1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e22:	f003 0320 	and.w	r3, r3, #32
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00a      	beq.n	8004e40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	430a      	orrs	r2, r1
 8004e3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d01a      	beq.n	8004e82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e6a:	d10a      	bne.n	8004e82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00a      	beq.n	8004ea4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	605a      	str	r2, [r3, #4]
  }
}
 8004ea4:	bf00      	nop
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b098      	sub	sp, #96	@ 0x60
 8004eb4:	af02      	add	r7, sp, #8
 8004eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ec0:	f7fc fd70 	bl	80019a4 <HAL_GetTick>
 8004ec4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0308 	and.w	r3, r3, #8
 8004ed0:	2b08      	cmp	r3, #8
 8004ed2:	d12e      	bne.n	8004f32 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ed4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ed8:	9300      	str	r3, [sp, #0]
 8004eda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004edc:	2200      	movs	r2, #0
 8004ede:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 f88c 	bl	8005000 <UART_WaitOnFlagUntilTimeout>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d021      	beq.n	8004f32 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ef6:	e853 3f00 	ldrex	r3, [r3]
 8004efa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004efc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004efe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f02:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	461a      	mov	r2, r3
 8004f0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f0e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f10:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004f12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f14:	e841 2300 	strex	r3, r2, [r1]
 8004f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004f1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d1e6      	bne.n	8004eee <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2220      	movs	r2, #32
 8004f24:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e062      	b.n	8004ff8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0304 	and.w	r3, r3, #4
 8004f3c:	2b04      	cmp	r3, #4
 8004f3e:	d149      	bne.n	8004fd4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f40:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004f44:	9300      	str	r3, [sp, #0]
 8004f46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f000 f856 	bl	8005000 <UART_WaitOnFlagUntilTimeout>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d03c      	beq.n	8004fd4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f62:	e853 3f00 	ldrex	r3, [r3]
 8004f66:	623b      	str	r3, [r7, #32]
   return(result);
 8004f68:	6a3b      	ldr	r3, [r7, #32]
 8004f6a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	461a      	mov	r2, r3
 8004f76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f78:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f80:	e841 2300 	strex	r3, r2, [r1]
 8004f84:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1e6      	bne.n	8004f5a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	3308      	adds	r3, #8
 8004f92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	e853 3f00 	ldrex	r3, [r3]
 8004f9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f023 0301 	bic.w	r3, r3, #1
 8004fa2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	3308      	adds	r3, #8
 8004faa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004fac:	61fa      	str	r2, [r7, #28]
 8004fae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb0:	69b9      	ldr	r1, [r7, #24]
 8004fb2:	69fa      	ldr	r2, [r7, #28]
 8004fb4:	e841 2300 	strex	r3, r2, [r1]
 8004fb8:	617b      	str	r3, [r7, #20]
   return(result);
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d1e5      	bne.n	8004f8c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2220      	movs	r2, #32
 8004fc4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e011      	b.n	8004ff8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2220      	movs	r2, #32
 8004fd8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2220      	movs	r2, #32
 8004fde:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004ff6:	2300      	movs	r3, #0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3758      	adds	r7, #88	@ 0x58
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	603b      	str	r3, [r7, #0]
 800500c:	4613      	mov	r3, r2
 800500e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005010:	e049      	b.n	80050a6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005018:	d045      	beq.n	80050a6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800501a:	f7fc fcc3 	bl	80019a4 <HAL_GetTick>
 800501e:	4602      	mov	r2, r0
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	69ba      	ldr	r2, [r7, #24]
 8005026:	429a      	cmp	r2, r3
 8005028:	d302      	bcc.n	8005030 <UART_WaitOnFlagUntilTimeout+0x30>
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d101      	bne.n	8005034 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005030:	2303      	movs	r3, #3
 8005032:	e048      	b.n	80050c6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0304 	and.w	r3, r3, #4
 800503e:	2b00      	cmp	r3, #0
 8005040:	d031      	beq.n	80050a6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	69db      	ldr	r3, [r3, #28]
 8005048:	f003 0308 	and.w	r3, r3, #8
 800504c:	2b08      	cmp	r3, #8
 800504e:	d110      	bne.n	8005072 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2208      	movs	r2, #8
 8005056:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005058:	68f8      	ldr	r0, [r7, #12]
 800505a:	f000 f838 	bl	80050ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2208      	movs	r2, #8
 8005062:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e029      	b.n	80050c6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	69db      	ldr	r3, [r3, #28]
 8005078:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800507c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005080:	d111      	bne.n	80050a6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800508a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800508c:	68f8      	ldr	r0, [r7, #12]
 800508e:	f000 f81e 	bl	80050ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2220      	movs	r2, #32
 8005096:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2200      	movs	r2, #0
 800509e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e00f      	b.n	80050c6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	69da      	ldr	r2, [r3, #28]
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	4013      	ands	r3, r2
 80050b0:	68ba      	ldr	r2, [r7, #8]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	bf0c      	ite	eq
 80050b6:	2301      	moveq	r3, #1
 80050b8:	2300      	movne	r3, #0
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	461a      	mov	r2, r3
 80050be:	79fb      	ldrb	r3, [r7, #7]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d0a6      	beq.n	8005012 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3710      	adds	r7, #16
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}

080050ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050ce:	b480      	push	{r7}
 80050d0:	b095      	sub	sp, #84	@ 0x54
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050de:	e853 3f00 	ldrex	r3, [r3]
 80050e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80050e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	461a      	mov	r2, r3
 80050f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80050f6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80050fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80050fc:	e841 2300 	strex	r3, r2, [r1]
 8005100:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005104:	2b00      	cmp	r3, #0
 8005106:	d1e6      	bne.n	80050d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	3308      	adds	r3, #8
 800510e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005110:	6a3b      	ldr	r3, [r7, #32]
 8005112:	e853 3f00 	ldrex	r3, [r3]
 8005116:	61fb      	str	r3, [r7, #28]
   return(result);
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	f023 0301 	bic.w	r3, r3, #1
 800511e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	3308      	adds	r3, #8
 8005126:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005128:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800512a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800512e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005130:	e841 2300 	strex	r3, r2, [r1]
 8005134:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005138:	2b00      	cmp	r3, #0
 800513a:	d1e5      	bne.n	8005108 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005140:	2b01      	cmp	r3, #1
 8005142:	d118      	bne.n	8005176 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	e853 3f00 	ldrex	r3, [r3]
 8005150:	60bb      	str	r3, [r7, #8]
   return(result);
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	f023 0310 	bic.w	r3, r3, #16
 8005158:	647b      	str	r3, [r7, #68]	@ 0x44
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	461a      	mov	r2, r3
 8005160:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005162:	61bb      	str	r3, [r7, #24]
 8005164:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005166:	6979      	ldr	r1, [r7, #20]
 8005168:	69ba      	ldr	r2, [r7, #24]
 800516a:	e841 2300 	strex	r3, r2, [r1]
 800516e:	613b      	str	r3, [r7, #16]
   return(result);
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1e6      	bne.n	8005144 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2220      	movs	r2, #32
 800517a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800518a:	bf00      	nop
 800518c:	3754      	adds	r7, #84	@ 0x54
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr

08005196 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005196:	b480      	push	{r7}
 8005198:	b085      	sub	sp, #20
 800519a:	af00      	add	r7, sp, #0
 800519c:	4603      	mov	r3, r0
 800519e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80051a0:	2300      	movs	r3, #0
 80051a2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80051a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051a8:	2b84      	cmp	r3, #132	@ 0x84
 80051aa:	d005      	beq.n	80051b8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80051ac:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	4413      	add	r3, r2
 80051b4:	3303      	adds	r3, #3
 80051b6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80051b8:	68fb      	ldr	r3, [r7, #12]
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3714      	adds	r7, #20
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr

080051c6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80051c6:	b480      	push	{r7}
 80051c8:	b083      	sub	sp, #12
 80051ca:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051cc:	f3ef 8305 	mrs	r3, IPSR
 80051d0:	607b      	str	r3, [r7, #4]
  return(result);
 80051d2:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	bf14      	ite	ne
 80051d8:	2301      	movne	r3, #1
 80051da:	2300      	moveq	r3, #0
 80051dc:	b2db      	uxtb	r3, r3
}
 80051de:	4618      	mov	r0, r3
 80051e0:	370c      	adds	r7, #12
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr

080051ea <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80051ea:	b580      	push	{r7, lr}
 80051ec:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80051ee:	f001 fb71 	bl	80068d4 <vTaskStartScheduler>
  
  return osOK;
 80051f2:	2300      	movs	r3, #0
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80051f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051fa:	b089      	sub	sp, #36	@ 0x24
 80051fc:	af04      	add	r7, sp, #16
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d020      	beq.n	800524c <osThreadCreate+0x54>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d01c      	beq.n	800524c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685c      	ldr	r4, [r3, #4]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	691e      	ldr	r6, [r3, #16]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005224:	4618      	mov	r0, r3
 8005226:	f7ff ffb6 	bl	8005196 <makeFreeRtosPriority>
 800522a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	695b      	ldr	r3, [r3, #20]
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005234:	9202      	str	r2, [sp, #8]
 8005236:	9301      	str	r3, [sp, #4]
 8005238:	9100      	str	r1, [sp, #0]
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	4632      	mov	r2, r6
 800523e:	4629      	mov	r1, r5
 8005240:	4620      	mov	r0, r4
 8005242:	f001 f8c3 	bl	80063cc <xTaskCreateStatic>
 8005246:	4603      	mov	r3, r0
 8005248:	60fb      	str	r3, [r7, #12]
 800524a:	e01c      	b.n	8005286 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685c      	ldr	r4, [r3, #4]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005258:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005260:	4618      	mov	r0, r3
 8005262:	f7ff ff98 	bl	8005196 <makeFreeRtosPriority>
 8005266:	4602      	mov	r2, r0
 8005268:	f107 030c 	add.w	r3, r7, #12
 800526c:	9301      	str	r3, [sp, #4]
 800526e:	9200      	str	r2, [sp, #0]
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	4632      	mov	r2, r6
 8005274:	4629      	mov	r1, r5
 8005276:	4620      	mov	r0, r4
 8005278:	f001 f908 	bl	800648c <xTaskCreate>
 800527c:	4603      	mov	r3, r0
 800527e:	2b01      	cmp	r3, #1
 8005280:	d001      	beq.n	8005286 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005282:	2300      	movs	r3, #0
 8005284:	e000      	b.n	8005288 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005286:	68fb      	ldr	r3, [r7, #12]
}
 8005288:	4618      	mov	r0, r3
 800528a:	3714      	adds	r7, #20
 800528c:	46bd      	mov	sp, r7
 800528e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005290 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f001 fa55 	bl	8006748 <vTaskDelete>
  return osOK;
 800529e:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3708      	adds	r7, #8
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b086      	sub	sp, #24
 80052ac:	af02      	add	r7, sp, #8
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80052b2:	2300      	movs	r3, #0
 80052b4:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 80052b6:	2300      	movs	r3, #0
 80052b8:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 80052ba:	f7ff ff84 	bl	80051c6 <inHandlerMode>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d01c      	beq.n	80052fe <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 80052c4:	6839      	ldr	r1, [r7, #0]
 80052c6:	f107 0208 	add.w	r2, r7, #8
 80052ca:	f107 030c 	add.w	r3, r7, #12
 80052ce:	9300      	str	r3, [sp, #0]
 80052d0:	4613      	mov	r3, r2
 80052d2:	2201      	movs	r2, #1
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f002 fa2b 	bl	8007730 <xTaskGenericNotifyFromISR>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d002      	beq.n	80052e6 <osSignalSet+0x3e>
      return 0x80000000;
 80052e0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80052e4:	e019      	b.n	800531a <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d015      	beq.n	8005318 <osSignalSet+0x70>
 80052ec:	4b0d      	ldr	r3, [pc, #52]	@ (8005324 <osSignalSet+0x7c>)
 80052ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052f2:	601a      	str	r2, [r3, #0]
 80052f4:	f3bf 8f4f 	dsb	sy
 80052f8:	f3bf 8f6f 	isb	sy
 80052fc:	e00c      	b.n	8005318 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 80052fe:	6839      	ldr	r1, [r7, #0]
 8005300:	f107 0308 	add.w	r3, r7, #8
 8005304:	2201      	movs	r2, #1
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f002 f950 	bl	80075ac <xTaskGenericNotify>
 800530c:	4603      	mov	r3, r0
 800530e:	2b01      	cmp	r3, #1
 8005310:	d002      	beq.n	8005318 <osSignalSet+0x70>
    return 0x80000000;
 8005312:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005316:	e000      	b.n	800531a <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8005318:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 800531a:	4618      	mov	r0, r3
 800531c:	3710      	adds	r7, #16
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	e000ed04 	.word	0xe000ed04

08005328 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8005328:	b590      	push	{r4, r7, lr}
 800532a:	b089      	sub	sp, #36	@ 0x24
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8005334:	2300      	movs	r3, #0
 8005336:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8005338:	2300      	movs	r3, #0
 800533a:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005342:	d103      	bne.n	800534c <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8005344:	f04f 33ff 	mov.w	r3, #4294967295
 8005348:	61fb      	str	r3, [r7, #28]
 800534a:	e009      	b.n	8005360 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d006      	beq.n	8005360 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d101      	bne.n	8005360 <osSignalWait+0x38>
      ticks = 1;
 800535c:	2301      	movs	r3, #1
 800535e:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8005360:	f7ff ff31 	bl	80051c6 <inHandlerMode>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d002      	beq.n	8005370 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 800536a:	2382      	movs	r3, #130	@ 0x82
 800536c:	613b      	str	r3, [r7, #16]
 800536e:	e01b      	b.n	80053a8 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8005370:	68b9      	ldr	r1, [r7, #8]
 8005372:	f107 0310 	add.w	r3, r7, #16
 8005376:	1d1a      	adds	r2, r3, #4
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	2000      	movs	r0, #0
 800537c:	f002 f8b6 	bl	80074ec <xTaskNotifyWait>
 8005380:	4603      	mov	r3, r0
 8005382:	2b01      	cmp	r3, #1
 8005384:	d008      	beq.n	8005398 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d102      	bne.n	8005392 <osSignalWait+0x6a>
 800538c:	2300      	movs	r3, #0
 800538e:	613b      	str	r3, [r7, #16]
 8005390:	e00a      	b.n	80053a8 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 8005392:	2340      	movs	r3, #64	@ 0x40
 8005394:	613b      	str	r3, [r7, #16]
 8005396:	e007      	b.n	80053a8 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	2b00      	cmp	r3, #0
 800539c:	da02      	bge.n	80053a4 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 800539e:	2386      	movs	r3, #134	@ 0x86
 80053a0:	613b      	str	r3, [r7, #16]
 80053a2:	e001      	b.n	80053a8 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 80053a4:	2308      	movs	r3, #8
 80053a6:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	461c      	mov	r4, r3
 80053ac:	f107 0310 	add.w	r3, r7, #16
 80053b0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80053b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80053b8:	68f8      	ldr	r0, [r7, #12]
 80053ba:	3724      	adds	r7, #36	@ 0x24
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd90      	pop	{r4, r7, pc}

080053c0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b086      	sub	sp, #24
 80053c4:	af02      	add	r7, sp, #8
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d00f      	beq.n	80053f2 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d10a      	bne.n	80053ee <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	2203      	movs	r2, #3
 80053de:	9200      	str	r2, [sp, #0]
 80053e0:	2200      	movs	r2, #0
 80053e2:	2100      	movs	r1, #0
 80053e4:	2001      	movs	r0, #1
 80053e6:	f000 f9e7 	bl	80057b8 <xQueueGenericCreateStatic>
 80053ea:	4603      	mov	r3, r0
 80053ec:	e016      	b.n	800541c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80053ee:	2300      	movs	r3, #0
 80053f0:	e014      	b.n	800541c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d110      	bne.n	800541a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80053f8:	2203      	movs	r2, #3
 80053fa:	2100      	movs	r1, #0
 80053fc:	2001      	movs	r0, #1
 80053fe:	f000 fa58 	bl	80058b2 <xQueueGenericCreate>
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d005      	beq.n	8005416 <osSemaphoreCreate+0x56>
 800540a:	2300      	movs	r3, #0
 800540c:	2200      	movs	r2, #0
 800540e:	2100      	movs	r1, #0
 8005410:	68f8      	ldr	r0, [r7, #12]
 8005412:	f000 faad 	bl	8005970 <xQueueGenericSend>
      return sema;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	e000      	b.n	800541c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800541a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800541c:	4618      	mov	r0, r3
 800541e:	3710      	adds	r7, #16
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800542e:	2300      	movs	r3, #0
 8005430:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d101      	bne.n	800543c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8005438:	2380      	movs	r3, #128	@ 0x80
 800543a:	e03a      	b.n	80054b2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800543c:	2300      	movs	r3, #0
 800543e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005446:	d103      	bne.n	8005450 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8005448:	f04f 33ff 	mov.w	r3, #4294967295
 800544c:	60fb      	str	r3, [r7, #12]
 800544e:	e009      	b.n	8005464 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d006      	beq.n	8005464 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d101      	bne.n	8005464 <osSemaphoreWait+0x40>
      ticks = 1;
 8005460:	2301      	movs	r3, #1
 8005462:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005464:	f7ff feaf 	bl	80051c6 <inHandlerMode>
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d017      	beq.n	800549e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800546e:	f107 0308 	add.w	r3, r7, #8
 8005472:	461a      	mov	r2, r3
 8005474:	2100      	movs	r1, #0
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 fdfe 	bl	8006078 <xQueueReceiveFromISR>
 800547c:	4603      	mov	r3, r0
 800547e:	2b01      	cmp	r3, #1
 8005480:	d001      	beq.n	8005486 <osSemaphoreWait+0x62>
      return osErrorOS;
 8005482:	23ff      	movs	r3, #255	@ 0xff
 8005484:	e015      	b.n	80054b2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d011      	beq.n	80054b0 <osSemaphoreWait+0x8c>
 800548c:	4b0b      	ldr	r3, [pc, #44]	@ (80054bc <osSemaphoreWait+0x98>)
 800548e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005492:	601a      	str	r2, [r3, #0]
 8005494:	f3bf 8f4f 	dsb	sy
 8005498:	f3bf 8f6f 	isb	sy
 800549c:	e008      	b.n	80054b0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800549e:	68f9      	ldr	r1, [r7, #12]
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f000 fcd9 	bl	8005e58 <xQueueSemaphoreTake>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d001      	beq.n	80054b0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80054ac:	23ff      	movs	r3, #255	@ 0xff
 80054ae:	e000      	b.n	80054b2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3710      	adds	r7, #16
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	e000ed04 	.word	0xe000ed04

080054c0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80054c8:	2300      	movs	r3, #0
 80054ca:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80054cc:	2300      	movs	r3, #0
 80054ce:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80054d0:	f7ff fe79 	bl	80051c6 <inHandlerMode>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d016      	beq.n	8005508 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80054da:	f107 0308 	add.w	r3, r7, #8
 80054de:	4619      	mov	r1, r3
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f000 fb47 	bl	8005b74 <xQueueGiveFromISR>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d001      	beq.n	80054f0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80054ec:	23ff      	movs	r3, #255	@ 0xff
 80054ee:	e017      	b.n	8005520 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d013      	beq.n	800551e <osSemaphoreRelease+0x5e>
 80054f6:	4b0c      	ldr	r3, [pc, #48]	@ (8005528 <osSemaphoreRelease+0x68>)
 80054f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054fc:	601a      	str	r2, [r3, #0]
 80054fe:	f3bf 8f4f 	dsb	sy
 8005502:	f3bf 8f6f 	isb	sy
 8005506:	e00a      	b.n	800551e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8005508:	2300      	movs	r3, #0
 800550a:	2200      	movs	r2, #0
 800550c:	2100      	movs	r1, #0
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 fa2e 	bl	8005970 <xQueueGenericSend>
 8005514:	4603      	mov	r3, r0
 8005516:	2b01      	cmp	r3, #1
 8005518:	d001      	beq.n	800551e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800551a:	23ff      	movs	r3, #255	@ 0xff
 800551c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800551e:	68fb      	ldr	r3, [r7, #12]
}
 8005520:	4618      	mov	r0, r3
 8005522:	3710      	adds	r7, #16
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}
 8005528:	e000ed04 	.word	0xe000ed04

0800552c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800552c:	b590      	push	{r4, r7, lr}
 800552e:	b085      	sub	sp, #20
 8005530:	af02      	add	r7, sp, #8
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d011      	beq.n	8005562 <osMessageCreate+0x36>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d00d      	beq.n	8005562 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6818      	ldr	r0, [r3, #0]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6859      	ldr	r1, [r3, #4]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	689a      	ldr	r2, [r3, #8]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	2400      	movs	r4, #0
 8005558:	9400      	str	r4, [sp, #0]
 800555a:	f000 f92d 	bl	80057b8 <xQueueGenericCreateStatic>
 800555e:	4603      	mov	r3, r0
 8005560:	e008      	b.n	8005574 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6818      	ldr	r0, [r3, #0]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	4619      	mov	r1, r3
 800556e:	f000 f9a0 	bl	80058b2 <xQueueGenericCreate>
 8005572:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005574:	4618      	mov	r0, r3
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	bd90      	pop	{r4, r7, pc}

0800557c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f103 0208 	add.w	r2, r3, #8
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f04f 32ff 	mov.w	r2, #4294967295
 8005594:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f103 0208 	add.w	r2, r3, #8
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f103 0208 	add.w	r2, r3, #8
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80055b0:	bf00      	nop
 80055b2:	370c      	adds	r7, #12
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80055ca:	bf00      	nop
 80055cc:	370c      	adds	r7, #12
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr

080055d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80055d6:	b480      	push	{r7}
 80055d8:	b085      	sub	sp, #20
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
 80055de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	689a      	ldr	r2, [r3, #8]
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	683a      	ldr	r2, [r7, #0]
 80055fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	683a      	ldr	r2, [r7, #0]
 8005600:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	1c5a      	adds	r2, r3, #1
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	601a      	str	r2, [r3, #0]
}
 8005612:	bf00      	nop
 8005614:	3714      	adds	r7, #20
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr

0800561e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800561e:	b480      	push	{r7}
 8005620:	b085      	sub	sp, #20
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
 8005626:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005634:	d103      	bne.n	800563e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	60fb      	str	r3, [r7, #12]
 800563c:	e00c      	b.n	8005658 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	3308      	adds	r3, #8
 8005642:	60fb      	str	r3, [r7, #12]
 8005644:	e002      	b.n	800564c <vListInsert+0x2e>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	60fb      	str	r3, [r7, #12]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68ba      	ldr	r2, [r7, #8]
 8005654:	429a      	cmp	r2, r3
 8005656:	d2f6      	bcs.n	8005646 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	685a      	ldr	r2, [r3, #4]
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	683a      	ldr	r2, [r7, #0]
 8005666:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	683a      	ldr	r2, [r7, #0]
 8005672:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	1c5a      	adds	r2, r3, #1
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	601a      	str	r2, [r3, #0]
}
 8005684:	bf00      	nop
 8005686:	3714      	adds	r7, #20
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005690:	b480      	push	{r7}
 8005692:	b085      	sub	sp, #20
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	6892      	ldr	r2, [r2, #8]
 80056a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	6852      	ldr	r2, [r2, #4]
 80056b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d103      	bne.n	80056c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	689a      	ldr	r2, [r3, #8]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	1e5a      	subs	r2, r3, #1
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3714      	adds	r7, #20
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d10b      	bne.n	8005710 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80056f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056fc:	f383 8811 	msr	BASEPRI, r3
 8005700:	f3bf 8f6f 	isb	sy
 8005704:	f3bf 8f4f 	dsb	sy
 8005708:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800570a:	bf00      	nop
 800570c:	bf00      	nop
 800570e:	e7fd      	b.n	800570c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005710:	f002 fa8a 	bl	8007c28 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800571c:	68f9      	ldr	r1, [r7, #12]
 800571e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005720:	fb01 f303 	mul.w	r3, r1, r3
 8005724:	441a      	add	r2, r3
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005740:	3b01      	subs	r3, #1
 8005742:	68f9      	ldr	r1, [r7, #12]
 8005744:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005746:	fb01 f303 	mul.w	r3, r1, r3
 800574a:	441a      	add	r2, r3
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	22ff      	movs	r2, #255	@ 0xff
 8005754:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	22ff      	movs	r2, #255	@ 0xff
 800575c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d114      	bne.n	8005790 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d01a      	beq.n	80057a4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	3310      	adds	r3, #16
 8005772:	4618      	mov	r0, r3
 8005774:	f001 fb34 	bl	8006de0 <xTaskRemoveFromEventList>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d012      	beq.n	80057a4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800577e:	4b0d      	ldr	r3, [pc, #52]	@ (80057b4 <xQueueGenericReset+0xd0>)
 8005780:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005784:	601a      	str	r2, [r3, #0]
 8005786:	f3bf 8f4f 	dsb	sy
 800578a:	f3bf 8f6f 	isb	sy
 800578e:	e009      	b.n	80057a4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	3310      	adds	r3, #16
 8005794:	4618      	mov	r0, r3
 8005796:	f7ff fef1 	bl	800557c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	3324      	adds	r3, #36	@ 0x24
 800579e:	4618      	mov	r0, r3
 80057a0:	f7ff feec 	bl	800557c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80057a4:	f002 fa72 	bl	8007c8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80057a8:	2301      	movs	r3, #1
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3710      	adds	r7, #16
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	e000ed04 	.word	0xe000ed04

080057b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b08e      	sub	sp, #56	@ 0x38
 80057bc:	af02      	add	r7, sp, #8
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	607a      	str	r2, [r7, #4]
 80057c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d10b      	bne.n	80057e4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80057cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057d0:	f383 8811 	msr	BASEPRI, r3
 80057d4:	f3bf 8f6f 	isb	sy
 80057d8:	f3bf 8f4f 	dsb	sy
 80057dc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80057de:	bf00      	nop
 80057e0:	bf00      	nop
 80057e2:	e7fd      	b.n	80057e0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d10b      	bne.n	8005802 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80057ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ee:	f383 8811 	msr	BASEPRI, r3
 80057f2:	f3bf 8f6f 	isb	sy
 80057f6:	f3bf 8f4f 	dsb	sy
 80057fa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80057fc:	bf00      	nop
 80057fe:	bf00      	nop
 8005800:	e7fd      	b.n	80057fe <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d002      	beq.n	800580e <xQueueGenericCreateStatic+0x56>
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d001      	beq.n	8005812 <xQueueGenericCreateStatic+0x5a>
 800580e:	2301      	movs	r3, #1
 8005810:	e000      	b.n	8005814 <xQueueGenericCreateStatic+0x5c>
 8005812:	2300      	movs	r3, #0
 8005814:	2b00      	cmp	r3, #0
 8005816:	d10b      	bne.n	8005830 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800581c:	f383 8811 	msr	BASEPRI, r3
 8005820:	f3bf 8f6f 	isb	sy
 8005824:	f3bf 8f4f 	dsb	sy
 8005828:	623b      	str	r3, [r7, #32]
}
 800582a:	bf00      	nop
 800582c:	bf00      	nop
 800582e:	e7fd      	b.n	800582c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d102      	bne.n	800583c <xQueueGenericCreateStatic+0x84>
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d101      	bne.n	8005840 <xQueueGenericCreateStatic+0x88>
 800583c:	2301      	movs	r3, #1
 800583e:	e000      	b.n	8005842 <xQueueGenericCreateStatic+0x8a>
 8005840:	2300      	movs	r3, #0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d10b      	bne.n	800585e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800584a:	f383 8811 	msr	BASEPRI, r3
 800584e:	f3bf 8f6f 	isb	sy
 8005852:	f3bf 8f4f 	dsb	sy
 8005856:	61fb      	str	r3, [r7, #28]
}
 8005858:	bf00      	nop
 800585a:	bf00      	nop
 800585c:	e7fd      	b.n	800585a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800585e:	2350      	movs	r3, #80	@ 0x50
 8005860:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	2b50      	cmp	r3, #80	@ 0x50
 8005866:	d00b      	beq.n	8005880 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800586c:	f383 8811 	msr	BASEPRI, r3
 8005870:	f3bf 8f6f 	isb	sy
 8005874:	f3bf 8f4f 	dsb	sy
 8005878:	61bb      	str	r3, [r7, #24]
}
 800587a:	bf00      	nop
 800587c:	bf00      	nop
 800587e:	e7fd      	b.n	800587c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005880:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005888:	2b00      	cmp	r3, #0
 800588a:	d00d      	beq.n	80058a8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800588c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800588e:	2201      	movs	r2, #1
 8005890:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005894:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800589a:	9300      	str	r3, [sp, #0]
 800589c:	4613      	mov	r3, r2
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	68b9      	ldr	r1, [r7, #8]
 80058a2:	68f8      	ldr	r0, [r7, #12]
 80058a4:	f000 f840 	bl	8005928 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80058a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3730      	adds	r7, #48	@ 0x30
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}

080058b2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80058b2:	b580      	push	{r7, lr}
 80058b4:	b08a      	sub	sp, #40	@ 0x28
 80058b6:	af02      	add	r7, sp, #8
 80058b8:	60f8      	str	r0, [r7, #12]
 80058ba:	60b9      	str	r1, [r7, #8]
 80058bc:	4613      	mov	r3, r2
 80058be:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d10b      	bne.n	80058de <xQueueGenericCreate+0x2c>
	__asm volatile
 80058c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ca:	f383 8811 	msr	BASEPRI, r3
 80058ce:	f3bf 8f6f 	isb	sy
 80058d2:	f3bf 8f4f 	dsb	sy
 80058d6:	613b      	str	r3, [r7, #16]
}
 80058d8:	bf00      	nop
 80058da:	bf00      	nop
 80058dc:	e7fd      	b.n	80058da <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	68ba      	ldr	r2, [r7, #8]
 80058e2:	fb02 f303 	mul.w	r3, r2, r3
 80058e6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	3350      	adds	r3, #80	@ 0x50
 80058ec:	4618      	mov	r0, r3
 80058ee:	f002 fabd 	bl	8007e6c <pvPortMalloc>
 80058f2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d011      	beq.n	800591e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	3350      	adds	r3, #80	@ 0x50
 8005902:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	2200      	movs	r2, #0
 8005908:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800590c:	79fa      	ldrb	r2, [r7, #7]
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	9300      	str	r3, [sp, #0]
 8005912:	4613      	mov	r3, r2
 8005914:	697a      	ldr	r2, [r7, #20]
 8005916:	68b9      	ldr	r1, [r7, #8]
 8005918:	68f8      	ldr	r0, [r7, #12]
 800591a:	f000 f805 	bl	8005928 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800591e:	69bb      	ldr	r3, [r7, #24]
	}
 8005920:	4618      	mov	r0, r3
 8005922:	3720      	adds	r7, #32
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	607a      	str	r2, [r7, #4]
 8005934:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d103      	bne.n	8005944 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	69ba      	ldr	r2, [r7, #24]
 8005940:	601a      	str	r2, [r3, #0]
 8005942:	e002      	b.n	800594a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005950:	69bb      	ldr	r3, [r7, #24]
 8005952:	68ba      	ldr	r2, [r7, #8]
 8005954:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005956:	2101      	movs	r1, #1
 8005958:	69b8      	ldr	r0, [r7, #24]
 800595a:	f7ff fec3 	bl	80056e4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	78fa      	ldrb	r2, [r7, #3]
 8005962:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005966:	bf00      	nop
 8005968:	3710      	adds	r7, #16
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
	...

08005970 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b08e      	sub	sp, #56	@ 0x38
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	607a      	str	r2, [r7, #4]
 800597c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800597e:	2300      	movs	r3, #0
 8005980:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005988:	2b00      	cmp	r3, #0
 800598a:	d10b      	bne.n	80059a4 <xQueueGenericSend+0x34>
	__asm volatile
 800598c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005990:	f383 8811 	msr	BASEPRI, r3
 8005994:	f3bf 8f6f 	isb	sy
 8005998:	f3bf 8f4f 	dsb	sy
 800599c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800599e:	bf00      	nop
 80059a0:	bf00      	nop
 80059a2:	e7fd      	b.n	80059a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d103      	bne.n	80059b2 <xQueueGenericSend+0x42>
 80059aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d101      	bne.n	80059b6 <xQueueGenericSend+0x46>
 80059b2:	2301      	movs	r3, #1
 80059b4:	e000      	b.n	80059b8 <xQueueGenericSend+0x48>
 80059b6:	2300      	movs	r3, #0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d10b      	bne.n	80059d4 <xQueueGenericSend+0x64>
	__asm volatile
 80059bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059c0:	f383 8811 	msr	BASEPRI, r3
 80059c4:	f3bf 8f6f 	isb	sy
 80059c8:	f3bf 8f4f 	dsb	sy
 80059cc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80059ce:	bf00      	nop
 80059d0:	bf00      	nop
 80059d2:	e7fd      	b.n	80059d0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d103      	bne.n	80059e2 <xQueueGenericSend+0x72>
 80059da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d101      	bne.n	80059e6 <xQueueGenericSend+0x76>
 80059e2:	2301      	movs	r3, #1
 80059e4:	e000      	b.n	80059e8 <xQueueGenericSend+0x78>
 80059e6:	2300      	movs	r3, #0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d10b      	bne.n	8005a04 <xQueueGenericSend+0x94>
	__asm volatile
 80059ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059f0:	f383 8811 	msr	BASEPRI, r3
 80059f4:	f3bf 8f6f 	isb	sy
 80059f8:	f3bf 8f4f 	dsb	sy
 80059fc:	623b      	str	r3, [r7, #32]
}
 80059fe:	bf00      	nop
 8005a00:	bf00      	nop
 8005a02:	e7fd      	b.n	8005a00 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a04:	f001 fbb2 	bl	800716c <xTaskGetSchedulerState>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d102      	bne.n	8005a14 <xQueueGenericSend+0xa4>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d101      	bne.n	8005a18 <xQueueGenericSend+0xa8>
 8005a14:	2301      	movs	r3, #1
 8005a16:	e000      	b.n	8005a1a <xQueueGenericSend+0xaa>
 8005a18:	2300      	movs	r3, #0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d10b      	bne.n	8005a36 <xQueueGenericSend+0xc6>
	__asm volatile
 8005a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a22:	f383 8811 	msr	BASEPRI, r3
 8005a26:	f3bf 8f6f 	isb	sy
 8005a2a:	f3bf 8f4f 	dsb	sy
 8005a2e:	61fb      	str	r3, [r7, #28]
}
 8005a30:	bf00      	nop
 8005a32:	bf00      	nop
 8005a34:	e7fd      	b.n	8005a32 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a36:	f002 f8f7 	bl	8007c28 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d302      	bcc.n	8005a4c <xQueueGenericSend+0xdc>
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	2b02      	cmp	r3, #2
 8005a4a:	d129      	bne.n	8005aa0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a4c:	683a      	ldr	r2, [r7, #0]
 8005a4e:	68b9      	ldr	r1, [r7, #8]
 8005a50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005a52:	f000 fbab 	bl	80061ac <prvCopyDataToQueue>
 8005a56:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d010      	beq.n	8005a82 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a62:	3324      	adds	r3, #36	@ 0x24
 8005a64:	4618      	mov	r0, r3
 8005a66:	f001 f9bb 	bl	8006de0 <xTaskRemoveFromEventList>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d013      	beq.n	8005a98 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005a70:	4b3f      	ldr	r3, [pc, #252]	@ (8005b70 <xQueueGenericSend+0x200>)
 8005a72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a76:	601a      	str	r2, [r3, #0]
 8005a78:	f3bf 8f4f 	dsb	sy
 8005a7c:	f3bf 8f6f 	isb	sy
 8005a80:	e00a      	b.n	8005a98 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d007      	beq.n	8005a98 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005a88:	4b39      	ldr	r3, [pc, #228]	@ (8005b70 <xQueueGenericSend+0x200>)
 8005a8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a8e:	601a      	str	r2, [r3, #0]
 8005a90:	f3bf 8f4f 	dsb	sy
 8005a94:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005a98:	f002 f8f8 	bl	8007c8c <vPortExitCritical>
				return pdPASS;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e063      	b.n	8005b68 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d103      	bne.n	8005aae <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005aa6:	f002 f8f1 	bl	8007c8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	e05c      	b.n	8005b68 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005aae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d106      	bne.n	8005ac2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ab4:	f107 0314 	add.w	r3, r7, #20
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f001 f9f5 	bl	8006ea8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005ac2:	f002 f8e3 	bl	8007c8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005ac6:	f000 ff71 	bl	80069ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005aca:	f002 f8ad 	bl	8007c28 <vPortEnterCritical>
 8005ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ad0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005ad4:	b25b      	sxtb	r3, r3
 8005ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ada:	d103      	bne.n	8005ae4 <xQueueGenericSend+0x174>
 8005adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ae6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005aea:	b25b      	sxtb	r3, r3
 8005aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af0:	d103      	bne.n	8005afa <xQueueGenericSend+0x18a>
 8005af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005af4:	2200      	movs	r2, #0
 8005af6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005afa:	f002 f8c7 	bl	8007c8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005afe:	1d3a      	adds	r2, r7, #4
 8005b00:	f107 0314 	add.w	r3, r7, #20
 8005b04:	4611      	mov	r1, r2
 8005b06:	4618      	mov	r0, r3
 8005b08:	f001 f9e4 	bl	8006ed4 <xTaskCheckForTimeOut>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d124      	bne.n	8005b5c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005b12:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b14:	f000 fc42 	bl	800639c <prvIsQueueFull>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d018      	beq.n	8005b50 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b20:	3310      	adds	r3, #16
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	4611      	mov	r1, r2
 8005b26:	4618      	mov	r0, r3
 8005b28:	f001 f934 	bl	8006d94 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005b2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b2e:	f000 fbcd 	bl	80062cc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005b32:	f000 ff49 	bl	80069c8 <xTaskResumeAll>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	f47f af7c 	bne.w	8005a36 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8005b70 <xQueueGenericSend+0x200>)
 8005b40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b44:	601a      	str	r2, [r3, #0]
 8005b46:	f3bf 8f4f 	dsb	sy
 8005b4a:	f3bf 8f6f 	isb	sy
 8005b4e:	e772      	b.n	8005a36 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005b50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b52:	f000 fbbb 	bl	80062cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b56:	f000 ff37 	bl	80069c8 <xTaskResumeAll>
 8005b5a:	e76c      	b.n	8005a36 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005b5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b5e:	f000 fbb5 	bl	80062cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b62:	f000 ff31 	bl	80069c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005b66:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3738      	adds	r7, #56	@ 0x38
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	e000ed04 	.word	0xe000ed04

08005b74 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b08e      	sub	sp, #56	@ 0x38
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d10b      	bne.n	8005ba0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8005b88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b8c:	f383 8811 	msr	BASEPRI, r3
 8005b90:	f3bf 8f6f 	isb	sy
 8005b94:	f3bf 8f4f 	dsb	sy
 8005b98:	623b      	str	r3, [r7, #32]
}
 8005b9a:	bf00      	nop
 8005b9c:	bf00      	nop
 8005b9e:	e7fd      	b.n	8005b9c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d00b      	beq.n	8005bc0 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8005ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bac:	f383 8811 	msr	BASEPRI, r3
 8005bb0:	f3bf 8f6f 	isb	sy
 8005bb4:	f3bf 8f4f 	dsb	sy
 8005bb8:	61fb      	str	r3, [r7, #28]
}
 8005bba:	bf00      	nop
 8005bbc:	bf00      	nop
 8005bbe:	e7fd      	b.n	8005bbc <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d103      	bne.n	8005bd0 <xQueueGiveFromISR+0x5c>
 8005bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d101      	bne.n	8005bd4 <xQueueGiveFromISR+0x60>
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e000      	b.n	8005bd6 <xQueueGiveFromISR+0x62>
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d10b      	bne.n	8005bf2 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8005bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bde:	f383 8811 	msr	BASEPRI, r3
 8005be2:	f3bf 8f6f 	isb	sy
 8005be6:	f3bf 8f4f 	dsb	sy
 8005bea:	61bb      	str	r3, [r7, #24]
}
 8005bec:	bf00      	nop
 8005bee:	bf00      	nop
 8005bf0:	e7fd      	b.n	8005bee <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005bf2:	f002 f8f9 	bl	8007de8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005bf6:	f3ef 8211 	mrs	r2, BASEPRI
 8005bfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bfe:	f383 8811 	msr	BASEPRI, r3
 8005c02:	f3bf 8f6f 	isb	sy
 8005c06:	f3bf 8f4f 	dsb	sy
 8005c0a:	617a      	str	r2, [r7, #20]
 8005c0c:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005c0e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c16:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d22b      	bcs.n	8005c7a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c24:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c2e:	1c5a      	adds	r2, r3, #1
 8005c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c32:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005c34:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c3c:	d112      	bne.n	8005c64 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d016      	beq.n	8005c74 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c48:	3324      	adds	r3, #36	@ 0x24
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f001 f8c8 	bl	8006de0 <xTaskRemoveFromEventList>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d00e      	beq.n	8005c74 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d00b      	beq.n	8005c74 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	601a      	str	r2, [r3, #0]
 8005c62:	e007      	b.n	8005c74 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005c64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005c68:	3301      	adds	r3, #1
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	b25a      	sxtb	r2, r3
 8005c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005c74:	2301      	movs	r3, #1
 8005c76:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c78:	e001      	b.n	8005c7e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c80:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005c88:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005c8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3738      	adds	r7, #56	@ 0x38
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b08c      	sub	sp, #48	@ 0x30
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d10b      	bne.n	8005cc6 <xQueueReceive+0x32>
	__asm volatile
 8005cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cb2:	f383 8811 	msr	BASEPRI, r3
 8005cb6:	f3bf 8f6f 	isb	sy
 8005cba:	f3bf 8f4f 	dsb	sy
 8005cbe:	623b      	str	r3, [r7, #32]
}
 8005cc0:	bf00      	nop
 8005cc2:	bf00      	nop
 8005cc4:	e7fd      	b.n	8005cc2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d103      	bne.n	8005cd4 <xQueueReceive+0x40>
 8005ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d101      	bne.n	8005cd8 <xQueueReceive+0x44>
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e000      	b.n	8005cda <xQueueReceive+0x46>
 8005cd8:	2300      	movs	r3, #0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d10b      	bne.n	8005cf6 <xQueueReceive+0x62>
	__asm volatile
 8005cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ce2:	f383 8811 	msr	BASEPRI, r3
 8005ce6:	f3bf 8f6f 	isb	sy
 8005cea:	f3bf 8f4f 	dsb	sy
 8005cee:	61fb      	str	r3, [r7, #28]
}
 8005cf0:	bf00      	nop
 8005cf2:	bf00      	nop
 8005cf4:	e7fd      	b.n	8005cf2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005cf6:	f001 fa39 	bl	800716c <xTaskGetSchedulerState>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d102      	bne.n	8005d06 <xQueueReceive+0x72>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d101      	bne.n	8005d0a <xQueueReceive+0x76>
 8005d06:	2301      	movs	r3, #1
 8005d08:	e000      	b.n	8005d0c <xQueueReceive+0x78>
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d10b      	bne.n	8005d28 <xQueueReceive+0x94>
	__asm volatile
 8005d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d14:	f383 8811 	msr	BASEPRI, r3
 8005d18:	f3bf 8f6f 	isb	sy
 8005d1c:	f3bf 8f4f 	dsb	sy
 8005d20:	61bb      	str	r3, [r7, #24]
}
 8005d22:	bf00      	nop
 8005d24:	bf00      	nop
 8005d26:	e7fd      	b.n	8005d24 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d28:	f001 ff7e 	bl	8007c28 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d30:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d01f      	beq.n	8005d78 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005d38:	68b9      	ldr	r1, [r7, #8]
 8005d3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d3c:	f000 faa0 	bl	8006280 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d42:	1e5a      	subs	r2, r3, #1
 8005d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d46:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d4a:	691b      	ldr	r3, [r3, #16]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d00f      	beq.n	8005d70 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d52:	3310      	adds	r3, #16
 8005d54:	4618      	mov	r0, r3
 8005d56:	f001 f843 	bl	8006de0 <xTaskRemoveFromEventList>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d007      	beq.n	8005d70 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005d60:	4b3c      	ldr	r3, [pc, #240]	@ (8005e54 <xQueueReceive+0x1c0>)
 8005d62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d66:	601a      	str	r2, [r3, #0]
 8005d68:	f3bf 8f4f 	dsb	sy
 8005d6c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005d70:	f001 ff8c 	bl	8007c8c <vPortExitCritical>
				return pdPASS;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e069      	b.n	8005e4c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d103      	bne.n	8005d86 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d7e:	f001 ff85 	bl	8007c8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005d82:	2300      	movs	r3, #0
 8005d84:	e062      	b.n	8005e4c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d106      	bne.n	8005d9a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d8c:	f107 0310 	add.w	r3, r7, #16
 8005d90:	4618      	mov	r0, r3
 8005d92:	f001 f889 	bl	8006ea8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d96:	2301      	movs	r3, #1
 8005d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d9a:	f001 ff77 	bl	8007c8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d9e:	f000 fe05 	bl	80069ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005da2:	f001 ff41 	bl	8007c28 <vPortEnterCritical>
 8005da6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005da8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005dac:	b25b      	sxtb	r3, r3
 8005dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db2:	d103      	bne.n	8005dbc <xQueueReceive+0x128>
 8005db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005db6:	2200      	movs	r2, #0
 8005db8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dbe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005dc2:	b25b      	sxtb	r3, r3
 8005dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dc8:	d103      	bne.n	8005dd2 <xQueueReceive+0x13e>
 8005dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005dd2:	f001 ff5b 	bl	8007c8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005dd6:	1d3a      	adds	r2, r7, #4
 8005dd8:	f107 0310 	add.w	r3, r7, #16
 8005ddc:	4611      	mov	r1, r2
 8005dde:	4618      	mov	r0, r3
 8005de0:	f001 f878 	bl	8006ed4 <xTaskCheckForTimeOut>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d123      	bne.n	8005e32 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005dea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005dec:	f000 fac0 	bl	8006370 <prvIsQueueEmpty>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d017      	beq.n	8005e26 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005df8:	3324      	adds	r3, #36	@ 0x24
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	4611      	mov	r1, r2
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f000 ffc8 	bl	8006d94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005e04:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e06:	f000 fa61 	bl	80062cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005e0a:	f000 fddd 	bl	80069c8 <xTaskResumeAll>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d189      	bne.n	8005d28 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005e14:	4b0f      	ldr	r3, [pc, #60]	@ (8005e54 <xQueueReceive+0x1c0>)
 8005e16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e1a:	601a      	str	r2, [r3, #0]
 8005e1c:	f3bf 8f4f 	dsb	sy
 8005e20:	f3bf 8f6f 	isb	sy
 8005e24:	e780      	b.n	8005d28 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005e26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e28:	f000 fa50 	bl	80062cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e2c:	f000 fdcc 	bl	80069c8 <xTaskResumeAll>
 8005e30:	e77a      	b.n	8005d28 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005e32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e34:	f000 fa4a 	bl	80062cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e38:	f000 fdc6 	bl	80069c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e3e:	f000 fa97 	bl	8006370 <prvIsQueueEmpty>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	f43f af6f 	beq.w	8005d28 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005e4a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3730      	adds	r7, #48	@ 0x30
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}
 8005e54:	e000ed04 	.word	0xe000ed04

08005e58 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b08e      	sub	sp, #56	@ 0x38
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005e62:	2300      	movs	r3, #0
 8005e64:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d10b      	bne.n	8005e8c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8005e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e78:	f383 8811 	msr	BASEPRI, r3
 8005e7c:	f3bf 8f6f 	isb	sy
 8005e80:	f3bf 8f4f 	dsb	sy
 8005e84:	623b      	str	r3, [r7, #32]
}
 8005e86:	bf00      	nop
 8005e88:	bf00      	nop
 8005e8a:	e7fd      	b.n	8005e88 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d00b      	beq.n	8005eac <xQueueSemaphoreTake+0x54>
	__asm volatile
 8005e94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e98:	f383 8811 	msr	BASEPRI, r3
 8005e9c:	f3bf 8f6f 	isb	sy
 8005ea0:	f3bf 8f4f 	dsb	sy
 8005ea4:	61fb      	str	r3, [r7, #28]
}
 8005ea6:	bf00      	nop
 8005ea8:	bf00      	nop
 8005eaa:	e7fd      	b.n	8005ea8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005eac:	f001 f95e 	bl	800716c <xTaskGetSchedulerState>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d102      	bne.n	8005ebc <xQueueSemaphoreTake+0x64>
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d101      	bne.n	8005ec0 <xQueueSemaphoreTake+0x68>
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e000      	b.n	8005ec2 <xQueueSemaphoreTake+0x6a>
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d10b      	bne.n	8005ede <xQueueSemaphoreTake+0x86>
	__asm volatile
 8005ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eca:	f383 8811 	msr	BASEPRI, r3
 8005ece:	f3bf 8f6f 	isb	sy
 8005ed2:	f3bf 8f4f 	dsb	sy
 8005ed6:	61bb      	str	r3, [r7, #24]
}
 8005ed8:	bf00      	nop
 8005eda:	bf00      	nop
 8005edc:	e7fd      	b.n	8005eda <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ede:	f001 fea3 	bl	8007c28 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ee6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d024      	beq.n	8005f38 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ef0:	1e5a      	subs	r2, r3, #1
 8005ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ef4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d104      	bne.n	8005f08 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005efe:	f001 fae1 	bl	80074c4 <pvTaskIncrementMutexHeldCount>
 8005f02:	4602      	mov	r2, r0
 8005f04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f06:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f0a:	691b      	ldr	r3, [r3, #16]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d00f      	beq.n	8005f30 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f12:	3310      	adds	r3, #16
 8005f14:	4618      	mov	r0, r3
 8005f16:	f000 ff63 	bl	8006de0 <xTaskRemoveFromEventList>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d007      	beq.n	8005f30 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005f20:	4b54      	ldr	r3, [pc, #336]	@ (8006074 <xQueueSemaphoreTake+0x21c>)
 8005f22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f26:	601a      	str	r2, [r3, #0]
 8005f28:	f3bf 8f4f 	dsb	sy
 8005f2c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005f30:	f001 feac 	bl	8007c8c <vPortExitCritical>
				return pdPASS;
 8005f34:	2301      	movs	r3, #1
 8005f36:	e098      	b.n	800606a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d112      	bne.n	8005f64 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d00b      	beq.n	8005f5c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8005f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f48:	f383 8811 	msr	BASEPRI, r3
 8005f4c:	f3bf 8f6f 	isb	sy
 8005f50:	f3bf 8f4f 	dsb	sy
 8005f54:	617b      	str	r3, [r7, #20]
}
 8005f56:	bf00      	nop
 8005f58:	bf00      	nop
 8005f5a:	e7fd      	b.n	8005f58 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005f5c:	f001 fe96 	bl	8007c8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005f60:	2300      	movs	r3, #0
 8005f62:	e082      	b.n	800606a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d106      	bne.n	8005f78 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f6a:	f107 030c 	add.w	r3, r7, #12
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f000 ff9a 	bl	8006ea8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f74:	2301      	movs	r3, #1
 8005f76:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f78:	f001 fe88 	bl	8007c8c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f7c:	f000 fd16 	bl	80069ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f80:	f001 fe52 	bl	8007c28 <vPortEnterCritical>
 8005f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f86:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005f8a:	b25b      	sxtb	r3, r3
 8005f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f90:	d103      	bne.n	8005f9a <xQueueSemaphoreTake+0x142>
 8005f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f94:	2200      	movs	r2, #0
 8005f96:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f9c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005fa0:	b25b      	sxtb	r3, r3
 8005fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fa6:	d103      	bne.n	8005fb0 <xQueueSemaphoreTake+0x158>
 8005fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005faa:	2200      	movs	r2, #0
 8005fac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005fb0:	f001 fe6c 	bl	8007c8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005fb4:	463a      	mov	r2, r7
 8005fb6:	f107 030c 	add.w	r3, r7, #12
 8005fba:	4611      	mov	r1, r2
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f000 ff89 	bl	8006ed4 <xTaskCheckForTimeOut>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d132      	bne.n	800602e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005fc8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005fca:	f000 f9d1 	bl	8006370 <prvIsQueueEmpty>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d026      	beq.n	8006022 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005fd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d109      	bne.n	8005ff0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8005fdc:	f001 fe24 	bl	8007c28 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005fe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f001 f8df 	bl	80071a8 <xTaskPriorityInherit>
 8005fea:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005fec:	f001 fe4e 	bl	8007c8c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ff2:	3324      	adds	r3, #36	@ 0x24
 8005ff4:	683a      	ldr	r2, [r7, #0]
 8005ff6:	4611      	mov	r1, r2
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f000 fecb 	bl	8006d94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005ffe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006000:	f000 f964 	bl	80062cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006004:	f000 fce0 	bl	80069c8 <xTaskResumeAll>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	f47f af67 	bne.w	8005ede <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006010:	4b18      	ldr	r3, [pc, #96]	@ (8006074 <xQueueSemaphoreTake+0x21c>)
 8006012:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006016:	601a      	str	r2, [r3, #0]
 8006018:	f3bf 8f4f 	dsb	sy
 800601c:	f3bf 8f6f 	isb	sy
 8006020:	e75d      	b.n	8005ede <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006022:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006024:	f000 f952 	bl	80062cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006028:	f000 fcce 	bl	80069c8 <xTaskResumeAll>
 800602c:	e757      	b.n	8005ede <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800602e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006030:	f000 f94c 	bl	80062cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006034:	f000 fcc8 	bl	80069c8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006038:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800603a:	f000 f999 	bl	8006370 <prvIsQueueEmpty>
 800603e:	4603      	mov	r3, r0
 8006040:	2b00      	cmp	r3, #0
 8006042:	f43f af4c 	beq.w	8005ede <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006048:	2b00      	cmp	r3, #0
 800604a:	d00d      	beq.n	8006068 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800604c:	f001 fdec 	bl	8007c28 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006050:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006052:	f000 f893 	bl	800617c <prvGetDisinheritPriorityAfterTimeout>
 8006056:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800605e:	4618      	mov	r0, r3
 8006060:	f001 f9a0 	bl	80073a4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006064:	f001 fe12 	bl	8007c8c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006068:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800606a:	4618      	mov	r0, r3
 800606c:	3738      	adds	r7, #56	@ 0x38
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	e000ed04 	.word	0xe000ed04

08006078 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b08e      	sub	sp, #56	@ 0x38
 800607c:	af00      	add	r7, sp, #0
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	60b9      	str	r1, [r7, #8]
 8006082:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800608a:	2b00      	cmp	r3, #0
 800608c:	d10b      	bne.n	80060a6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800608e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006092:	f383 8811 	msr	BASEPRI, r3
 8006096:	f3bf 8f6f 	isb	sy
 800609a:	f3bf 8f4f 	dsb	sy
 800609e:	623b      	str	r3, [r7, #32]
}
 80060a0:	bf00      	nop
 80060a2:	bf00      	nop
 80060a4:	e7fd      	b.n	80060a2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d103      	bne.n	80060b4 <xQueueReceiveFromISR+0x3c>
 80060ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d101      	bne.n	80060b8 <xQueueReceiveFromISR+0x40>
 80060b4:	2301      	movs	r3, #1
 80060b6:	e000      	b.n	80060ba <xQueueReceiveFromISR+0x42>
 80060b8:	2300      	movs	r3, #0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d10b      	bne.n	80060d6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80060be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060c2:	f383 8811 	msr	BASEPRI, r3
 80060c6:	f3bf 8f6f 	isb	sy
 80060ca:	f3bf 8f4f 	dsb	sy
 80060ce:	61fb      	str	r3, [r7, #28]
}
 80060d0:	bf00      	nop
 80060d2:	bf00      	nop
 80060d4:	e7fd      	b.n	80060d2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80060d6:	f001 fe87 	bl	8007de8 <vPortValidateInterruptPriority>
	__asm volatile
 80060da:	f3ef 8211 	mrs	r2, BASEPRI
 80060de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060e2:	f383 8811 	msr	BASEPRI, r3
 80060e6:	f3bf 8f6f 	isb	sy
 80060ea:	f3bf 8f4f 	dsb	sy
 80060ee:	61ba      	str	r2, [r7, #24]
 80060f0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80060f2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80060f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80060f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060fa:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80060fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d02f      	beq.n	8006162 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006104:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006108:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800610c:	68b9      	ldr	r1, [r7, #8]
 800610e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006110:	f000 f8b6 	bl	8006280 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006116:	1e5a      	subs	r2, r3, #1
 8006118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800611a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800611c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006124:	d112      	bne.n	800614c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d016      	beq.n	800615c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800612e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006130:	3310      	adds	r3, #16
 8006132:	4618      	mov	r0, r3
 8006134:	f000 fe54 	bl	8006de0 <xTaskRemoveFromEventList>
 8006138:	4603      	mov	r3, r0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d00e      	beq.n	800615c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d00b      	beq.n	800615c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	601a      	str	r2, [r3, #0]
 800614a:	e007      	b.n	800615c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800614c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006150:	3301      	adds	r3, #1
 8006152:	b2db      	uxtb	r3, r3
 8006154:	b25a      	sxtb	r2, r3
 8006156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006158:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800615c:	2301      	movs	r3, #1
 800615e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006160:	e001      	b.n	8006166 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8006162:	2300      	movs	r3, #0
 8006164:	637b      	str	r3, [r7, #52]	@ 0x34
 8006166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006168:	613b      	str	r3, [r7, #16]
	__asm volatile
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	f383 8811 	msr	BASEPRI, r3
}
 8006170:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006172:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006174:	4618      	mov	r0, r3
 8006176:	3738      	adds	r7, #56	@ 0x38
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800617c:	b480      	push	{r7}
 800617e:	b085      	sub	sp, #20
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006188:	2b00      	cmp	r3, #0
 800618a:	d006      	beq.n	800619a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f1c3 0307 	rsb	r3, r3, #7
 8006196:	60fb      	str	r3, [r7, #12]
 8006198:	e001      	b.n	800619e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800619a:	2300      	movs	r3, #0
 800619c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800619e:	68fb      	ldr	r3, [r7, #12]
	}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3714      	adds	r7, #20
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b086      	sub	sp, #24
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80061b8:	2300      	movs	r3, #0
 80061ba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061c0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d10d      	bne.n	80061e6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d14d      	bne.n	800626e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	4618      	mov	r0, r3
 80061d8:	f001 f85c 	bl	8007294 <xTaskPriorityDisinherit>
 80061dc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	609a      	str	r2, [r3, #8]
 80061e4:	e043      	b.n	800626e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d119      	bne.n	8006220 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6858      	ldr	r0, [r3, #4]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061f4:	461a      	mov	r2, r3
 80061f6:	68b9      	ldr	r1, [r7, #8]
 80061f8:	f002 fbb5 	bl	8008966 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	685a      	ldr	r2, [r3, #4]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006204:	441a      	add	r2, r3
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	685a      	ldr	r2, [r3, #4]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	429a      	cmp	r2, r3
 8006214:	d32b      	bcc.n	800626e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	605a      	str	r2, [r3, #4]
 800621e:	e026      	b.n	800626e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	68d8      	ldr	r0, [r3, #12]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006228:	461a      	mov	r2, r3
 800622a:	68b9      	ldr	r1, [r7, #8]
 800622c:	f002 fb9b 	bl	8008966 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	68da      	ldr	r2, [r3, #12]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006238:	425b      	negs	r3, r3
 800623a:	441a      	add	r2, r3
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	68da      	ldr	r2, [r3, #12]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	429a      	cmp	r2, r3
 800624a:	d207      	bcs.n	800625c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	689a      	ldr	r2, [r3, #8]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006254:	425b      	negs	r3, r3
 8006256:	441a      	add	r2, r3
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2b02      	cmp	r3, #2
 8006260:	d105      	bne.n	800626e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d002      	beq.n	800626e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	3b01      	subs	r3, #1
 800626c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	1c5a      	adds	r2, r3, #1
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006276:	697b      	ldr	r3, [r7, #20]
}
 8006278:	4618      	mov	r0, r3
 800627a:	3718      	adds	r7, #24
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800628e:	2b00      	cmp	r3, #0
 8006290:	d018      	beq.n	80062c4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	68da      	ldr	r2, [r3, #12]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800629a:	441a      	add	r2, r3
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	68da      	ldr	r2, [r3, #12]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d303      	bcc.n	80062b4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	68d9      	ldr	r1, [r3, #12]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062bc:	461a      	mov	r2, r3
 80062be:	6838      	ldr	r0, [r7, #0]
 80062c0:	f002 fb51 	bl	8008966 <memcpy>
	}
}
 80062c4:	bf00      	nop
 80062c6:	3708      	adds	r7, #8
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80062d4:	f001 fca8 	bl	8007c28 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80062de:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80062e0:	e011      	b.n	8006306 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d012      	beq.n	8006310 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	3324      	adds	r3, #36	@ 0x24
 80062ee:	4618      	mov	r0, r3
 80062f0:	f000 fd76 	bl	8006de0 <xTaskRemoveFromEventList>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d001      	beq.n	80062fe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80062fa:	f000 fe4f 	bl	8006f9c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80062fe:	7bfb      	ldrb	r3, [r7, #15]
 8006300:	3b01      	subs	r3, #1
 8006302:	b2db      	uxtb	r3, r3
 8006304:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006306:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800630a:	2b00      	cmp	r3, #0
 800630c:	dce9      	bgt.n	80062e2 <prvUnlockQueue+0x16>
 800630e:	e000      	b.n	8006312 <prvUnlockQueue+0x46>
					break;
 8006310:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	22ff      	movs	r2, #255	@ 0xff
 8006316:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800631a:	f001 fcb7 	bl	8007c8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800631e:	f001 fc83 	bl	8007c28 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006328:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800632a:	e011      	b.n	8006350 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	691b      	ldr	r3, [r3, #16]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d012      	beq.n	800635a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	3310      	adds	r3, #16
 8006338:	4618      	mov	r0, r3
 800633a:	f000 fd51 	bl	8006de0 <xTaskRemoveFromEventList>
 800633e:	4603      	mov	r3, r0
 8006340:	2b00      	cmp	r3, #0
 8006342:	d001      	beq.n	8006348 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006344:	f000 fe2a 	bl	8006f9c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006348:	7bbb      	ldrb	r3, [r7, #14]
 800634a:	3b01      	subs	r3, #1
 800634c:	b2db      	uxtb	r3, r3
 800634e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006350:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006354:	2b00      	cmp	r3, #0
 8006356:	dce9      	bgt.n	800632c <prvUnlockQueue+0x60>
 8006358:	e000      	b.n	800635c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800635a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	22ff      	movs	r2, #255	@ 0xff
 8006360:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006364:	f001 fc92 	bl	8007c8c <vPortExitCritical>
}
 8006368:	bf00      	nop
 800636a:	3710      	adds	r7, #16
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b084      	sub	sp, #16
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006378:	f001 fc56 	bl	8007c28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006380:	2b00      	cmp	r3, #0
 8006382:	d102      	bne.n	800638a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006384:	2301      	movs	r3, #1
 8006386:	60fb      	str	r3, [r7, #12]
 8006388:	e001      	b.n	800638e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800638a:	2300      	movs	r3, #0
 800638c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800638e:	f001 fc7d 	bl	8007c8c <vPortExitCritical>

	return xReturn;
 8006392:	68fb      	ldr	r3, [r7, #12]
}
 8006394:	4618      	mov	r0, r3
 8006396:	3710      	adds	r7, #16
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80063a4:	f001 fc40 	bl	8007c28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d102      	bne.n	80063ba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80063b4:	2301      	movs	r3, #1
 80063b6:	60fb      	str	r3, [r7, #12]
 80063b8:	e001      	b.n	80063be <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80063ba:	2300      	movs	r3, #0
 80063bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80063be:	f001 fc65 	bl	8007c8c <vPortExitCritical>

	return xReturn;
 80063c2:	68fb      	ldr	r3, [r7, #12]
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3710      	adds	r7, #16
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b08e      	sub	sp, #56	@ 0x38
 80063d0:	af04      	add	r7, sp, #16
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	607a      	str	r2, [r7, #4]
 80063d8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80063da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d10b      	bne.n	80063f8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80063e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063e4:	f383 8811 	msr	BASEPRI, r3
 80063e8:	f3bf 8f6f 	isb	sy
 80063ec:	f3bf 8f4f 	dsb	sy
 80063f0:	623b      	str	r3, [r7, #32]
}
 80063f2:	bf00      	nop
 80063f4:	bf00      	nop
 80063f6:	e7fd      	b.n	80063f4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80063f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d10b      	bne.n	8006416 <xTaskCreateStatic+0x4a>
	__asm volatile
 80063fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006402:	f383 8811 	msr	BASEPRI, r3
 8006406:	f3bf 8f6f 	isb	sy
 800640a:	f3bf 8f4f 	dsb	sy
 800640e:	61fb      	str	r3, [r7, #28]
}
 8006410:	bf00      	nop
 8006412:	bf00      	nop
 8006414:	e7fd      	b.n	8006412 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006416:	23ac      	movs	r3, #172	@ 0xac
 8006418:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	2bac      	cmp	r3, #172	@ 0xac
 800641e:	d00b      	beq.n	8006438 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006424:	f383 8811 	msr	BASEPRI, r3
 8006428:	f3bf 8f6f 	isb	sy
 800642c:	f3bf 8f4f 	dsb	sy
 8006430:	61bb      	str	r3, [r7, #24]
}
 8006432:	bf00      	nop
 8006434:	bf00      	nop
 8006436:	e7fd      	b.n	8006434 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006438:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800643a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800643c:	2b00      	cmp	r3, #0
 800643e:	d01e      	beq.n	800647e <xTaskCreateStatic+0xb2>
 8006440:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006442:	2b00      	cmp	r3, #0
 8006444:	d01b      	beq.n	800647e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006448:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800644a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800644c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800644e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006452:	2202      	movs	r2, #2
 8006454:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006458:	2300      	movs	r3, #0
 800645a:	9303      	str	r3, [sp, #12]
 800645c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800645e:	9302      	str	r3, [sp, #8]
 8006460:	f107 0314 	add.w	r3, r7, #20
 8006464:	9301      	str	r3, [sp, #4]
 8006466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006468:	9300      	str	r3, [sp, #0]
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	68b9      	ldr	r1, [r7, #8]
 8006470:	68f8      	ldr	r0, [r7, #12]
 8006472:	f000 f851 	bl	8006518 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006476:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006478:	f000 f8f8 	bl	800666c <prvAddNewTaskToReadyList>
 800647c:	e001      	b.n	8006482 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800647e:	2300      	movs	r3, #0
 8006480:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006482:	697b      	ldr	r3, [r7, #20]
	}
 8006484:	4618      	mov	r0, r3
 8006486:	3728      	adds	r7, #40	@ 0x28
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}

0800648c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800648c:	b580      	push	{r7, lr}
 800648e:	b08c      	sub	sp, #48	@ 0x30
 8006490:	af04      	add	r7, sp, #16
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	603b      	str	r3, [r7, #0]
 8006498:	4613      	mov	r3, r2
 800649a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800649c:	88fb      	ldrh	r3, [r7, #6]
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	4618      	mov	r0, r3
 80064a2:	f001 fce3 	bl	8007e6c <pvPortMalloc>
 80064a6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00e      	beq.n	80064cc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80064ae:	20ac      	movs	r0, #172	@ 0xac
 80064b0:	f001 fcdc 	bl	8007e6c <pvPortMalloc>
 80064b4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d003      	beq.n	80064c4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80064bc:	69fb      	ldr	r3, [r7, #28]
 80064be:	697a      	ldr	r2, [r7, #20]
 80064c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80064c2:	e005      	b.n	80064d0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80064c4:	6978      	ldr	r0, [r7, #20]
 80064c6:	f001 fd9f 	bl	8008008 <vPortFree>
 80064ca:	e001      	b.n	80064d0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80064cc:	2300      	movs	r3, #0
 80064ce:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d017      	beq.n	8006506 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80064d6:	69fb      	ldr	r3, [r7, #28]
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80064de:	88fa      	ldrh	r2, [r7, #6]
 80064e0:	2300      	movs	r3, #0
 80064e2:	9303      	str	r3, [sp, #12]
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	9302      	str	r3, [sp, #8]
 80064e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064ea:	9301      	str	r3, [sp, #4]
 80064ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ee:	9300      	str	r3, [sp, #0]
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	68b9      	ldr	r1, [r7, #8]
 80064f4:	68f8      	ldr	r0, [r7, #12]
 80064f6:	f000 f80f 	bl	8006518 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80064fa:	69f8      	ldr	r0, [r7, #28]
 80064fc:	f000 f8b6 	bl	800666c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006500:	2301      	movs	r3, #1
 8006502:	61bb      	str	r3, [r7, #24]
 8006504:	e002      	b.n	800650c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006506:	f04f 33ff 	mov.w	r3, #4294967295
 800650a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800650c:	69bb      	ldr	r3, [r7, #24]
	}
 800650e:	4618      	mov	r0, r3
 8006510:	3720      	adds	r7, #32
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
	...

08006518 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b088      	sub	sp, #32
 800651c:	af00      	add	r7, sp, #0
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	60b9      	str	r1, [r7, #8]
 8006522:	607a      	str	r2, [r7, #4]
 8006524:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006528:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	461a      	mov	r2, r3
 8006530:	21a5      	movs	r1, #165	@ 0xa5
 8006532:	f002 f92e 	bl	8008792 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006538:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006540:	3b01      	subs	r3, #1
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	4413      	add	r3, r2
 8006546:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	f023 0307 	bic.w	r3, r3, #7
 800654e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006550:	69bb      	ldr	r3, [r7, #24]
 8006552:	f003 0307 	and.w	r3, r3, #7
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00b      	beq.n	8006572 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800655a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800655e:	f383 8811 	msr	BASEPRI, r3
 8006562:	f3bf 8f6f 	isb	sy
 8006566:	f3bf 8f4f 	dsb	sy
 800656a:	617b      	str	r3, [r7, #20]
}
 800656c:	bf00      	nop
 800656e:	bf00      	nop
 8006570:	e7fd      	b.n	800656e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d01f      	beq.n	80065b8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006578:	2300      	movs	r3, #0
 800657a:	61fb      	str	r3, [r7, #28]
 800657c:	e012      	b.n	80065a4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800657e:	68ba      	ldr	r2, [r7, #8]
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	4413      	add	r3, r2
 8006584:	7819      	ldrb	r1, [r3, #0]
 8006586:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	4413      	add	r3, r2
 800658c:	3334      	adds	r3, #52	@ 0x34
 800658e:	460a      	mov	r2, r1
 8006590:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006592:	68ba      	ldr	r2, [r7, #8]
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	4413      	add	r3, r2
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d006      	beq.n	80065ac <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	3301      	adds	r3, #1
 80065a2:	61fb      	str	r3, [r7, #28]
 80065a4:	69fb      	ldr	r3, [r7, #28]
 80065a6:	2b0f      	cmp	r3, #15
 80065a8:	d9e9      	bls.n	800657e <prvInitialiseNewTask+0x66>
 80065aa:	e000      	b.n	80065ae <prvInitialiseNewTask+0x96>
			{
				break;
 80065ac:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80065ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b0:	2200      	movs	r2, #0
 80065b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80065b6:	e003      	b.n	80065c0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80065b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ba:	2200      	movs	r2, #0
 80065bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80065c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065c2:	2b06      	cmp	r3, #6
 80065c4:	d901      	bls.n	80065ca <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80065c6:	2306      	movs	r3, #6
 80065c8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80065ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80065ce:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80065d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80065d4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80065d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065d8:	2200      	movs	r2, #0
 80065da:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80065dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065de:	3304      	adds	r3, #4
 80065e0:	4618      	mov	r0, r3
 80065e2:	f7fe ffeb 	bl	80055bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80065e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065e8:	3318      	adds	r3, #24
 80065ea:	4618      	mov	r0, r3
 80065ec:	f7fe ffe6 	bl	80055bc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80065f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065f4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065f8:	f1c3 0207 	rsb	r2, r3, #7
 80065fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065fe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006602:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006604:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8006606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006608:	2200      	movs	r2, #0
 800660a:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800660c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800660e:	2200      	movs	r2, #0
 8006610:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006616:	2200      	movs	r2, #0
 8006618:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800661c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800661e:	3358      	adds	r3, #88	@ 0x58
 8006620:	224c      	movs	r2, #76	@ 0x4c
 8006622:	2100      	movs	r1, #0
 8006624:	4618      	mov	r0, r3
 8006626:	f002 f8b4 	bl	8008792 <memset>
 800662a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800662c:	4a0c      	ldr	r2, [pc, #48]	@ (8006660 <prvInitialiseNewTask+0x148>)
 800662e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006632:	4a0c      	ldr	r2, [pc, #48]	@ (8006664 <prvInitialiseNewTask+0x14c>)
 8006634:	661a      	str	r2, [r3, #96]	@ 0x60
 8006636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006638:	4a0b      	ldr	r2, [pc, #44]	@ (8006668 <prvInitialiseNewTask+0x150>)
 800663a:	665a      	str	r2, [r3, #100]	@ 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800663c:	683a      	ldr	r2, [r7, #0]
 800663e:	68f9      	ldr	r1, [r7, #12]
 8006640:	69b8      	ldr	r0, [r7, #24]
 8006642:	f001 f9c1 	bl	80079c8 <pxPortInitialiseStack>
 8006646:	4602      	mov	r2, r0
 8006648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800664a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800664c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800664e:	2b00      	cmp	r3, #0
 8006650:	d002      	beq.n	8006658 <prvInitialiseNewTask+0x140>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006654:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006656:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006658:	bf00      	nop
 800665a:	3720      	adds	r7, #32
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}
 8006660:	20002d28 	.word	0x20002d28
 8006664:	20002d90 	.word	0x20002d90
 8006668:	20002df8 	.word	0x20002df8

0800666c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b082      	sub	sp, #8
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006674:	f001 fad8 	bl	8007c28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006678:	4b2c      	ldr	r3, [pc, #176]	@ (800672c <prvAddNewTaskToReadyList+0xc0>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	3301      	adds	r3, #1
 800667e:	4a2b      	ldr	r2, [pc, #172]	@ (800672c <prvAddNewTaskToReadyList+0xc0>)
 8006680:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006682:	4b2b      	ldr	r3, [pc, #172]	@ (8006730 <prvAddNewTaskToReadyList+0xc4>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d109      	bne.n	800669e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800668a:	4a29      	ldr	r2, [pc, #164]	@ (8006730 <prvAddNewTaskToReadyList+0xc4>)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006690:	4b26      	ldr	r3, [pc, #152]	@ (800672c <prvAddNewTaskToReadyList+0xc0>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	2b01      	cmp	r3, #1
 8006696:	d110      	bne.n	80066ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006698:	f000 fca4 	bl	8006fe4 <prvInitialiseTaskLists>
 800669c:	e00d      	b.n	80066ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800669e:	4b25      	ldr	r3, [pc, #148]	@ (8006734 <prvAddNewTaskToReadyList+0xc8>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d109      	bne.n	80066ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80066a6:	4b22      	ldr	r3, [pc, #136]	@ (8006730 <prvAddNewTaskToReadyList+0xc4>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d802      	bhi.n	80066ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80066b4:	4a1e      	ldr	r2, [pc, #120]	@ (8006730 <prvAddNewTaskToReadyList+0xc4>)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80066ba:	4b1f      	ldr	r3, [pc, #124]	@ (8006738 <prvAddNewTaskToReadyList+0xcc>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	3301      	adds	r3, #1
 80066c0:	4a1d      	ldr	r2, [pc, #116]	@ (8006738 <prvAddNewTaskToReadyList+0xcc>)
 80066c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80066c4:	4b1c      	ldr	r3, [pc, #112]	@ (8006738 <prvAddNewTaskToReadyList+0xcc>)
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066d0:	2201      	movs	r2, #1
 80066d2:	409a      	lsls	r2, r3
 80066d4:	4b19      	ldr	r3, [pc, #100]	@ (800673c <prvAddNewTaskToReadyList+0xd0>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4313      	orrs	r3, r2
 80066da:	4a18      	ldr	r2, [pc, #96]	@ (800673c <prvAddNewTaskToReadyList+0xd0>)
 80066dc:	6013      	str	r3, [r2, #0]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066e2:	4613      	mov	r3, r2
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	4413      	add	r3, r2
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	4a15      	ldr	r2, [pc, #84]	@ (8006740 <prvAddNewTaskToReadyList+0xd4>)
 80066ec:	441a      	add	r2, r3
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	3304      	adds	r3, #4
 80066f2:	4619      	mov	r1, r3
 80066f4:	4610      	mov	r0, r2
 80066f6:	f7fe ff6e 	bl	80055d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80066fa:	f001 fac7 	bl	8007c8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80066fe:	4b0d      	ldr	r3, [pc, #52]	@ (8006734 <prvAddNewTaskToReadyList+0xc8>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d00e      	beq.n	8006724 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006706:	4b0a      	ldr	r3, [pc, #40]	@ (8006730 <prvAddNewTaskToReadyList+0xc4>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006710:	429a      	cmp	r2, r3
 8006712:	d207      	bcs.n	8006724 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006714:	4b0b      	ldr	r3, [pc, #44]	@ (8006744 <prvAddNewTaskToReadyList+0xd8>)
 8006716:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800671a:	601a      	str	r2, [r3, #0]
 800671c:	f3bf 8f4f 	dsb	sy
 8006720:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006724:	bf00      	nop
 8006726:	3708      	adds	r7, #8
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}
 800672c:	200005b4 	.word	0x200005b4
 8006730:	200004b4 	.word	0x200004b4
 8006734:	200005c0 	.word	0x200005c0
 8006738:	200005d0 	.word	0x200005d0
 800673c:	200005bc 	.word	0x200005bc
 8006740:	200004b8 	.word	0x200004b8
 8006744:	e000ed04 	.word	0xe000ed04

08006748 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8006748:	b580      	push	{r7, lr}
 800674a:	b084      	sub	sp, #16
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006750:	f001 fa6a 	bl	8007c28 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d102      	bne.n	8006760 <vTaskDelete+0x18>
 800675a:	4b39      	ldr	r3, [pc, #228]	@ (8006840 <vTaskDelete+0xf8>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	e000      	b.n	8006762 <vTaskDelete+0x1a>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	3304      	adds	r3, #4
 8006768:	4618      	mov	r0, r3
 800676a:	f7fe ff91 	bl	8005690 <uxListRemove>
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d115      	bne.n	80067a0 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006778:	4932      	ldr	r1, [pc, #200]	@ (8006844 <vTaskDelete+0xfc>)
 800677a:	4613      	mov	r3, r2
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	4413      	add	r3, r2
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	440b      	add	r3, r1
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d10a      	bne.n	80067a0 <vTaskDelete+0x58>
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800678e:	2201      	movs	r2, #1
 8006790:	fa02 f303 	lsl.w	r3, r2, r3
 8006794:	43da      	mvns	r2, r3
 8006796:	4b2c      	ldr	r3, [pc, #176]	@ (8006848 <vTaskDelete+0x100>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4013      	ands	r3, r2
 800679c:	4a2a      	ldr	r2, [pc, #168]	@ (8006848 <vTaskDelete+0x100>)
 800679e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d004      	beq.n	80067b2 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	3318      	adds	r3, #24
 80067ac:	4618      	mov	r0, r3
 80067ae:	f7fe ff6f 	bl	8005690 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80067b2:	4b26      	ldr	r3, [pc, #152]	@ (800684c <vTaskDelete+0x104>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	3301      	adds	r3, #1
 80067b8:	4a24      	ldr	r2, [pc, #144]	@ (800684c <vTaskDelete+0x104>)
 80067ba:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80067bc:	4b20      	ldr	r3, [pc, #128]	@ (8006840 <vTaskDelete+0xf8>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	68fa      	ldr	r2, [r7, #12]
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d10b      	bne.n	80067de <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	3304      	adds	r3, #4
 80067ca:	4619      	mov	r1, r3
 80067cc:	4820      	ldr	r0, [pc, #128]	@ (8006850 <vTaskDelete+0x108>)
 80067ce:	f7fe ff02 	bl	80055d6 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80067d2:	4b20      	ldr	r3, [pc, #128]	@ (8006854 <vTaskDelete+0x10c>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	3301      	adds	r3, #1
 80067d8:	4a1e      	ldr	r2, [pc, #120]	@ (8006854 <vTaskDelete+0x10c>)
 80067da:	6013      	str	r3, [r2, #0]
 80067dc:	e009      	b.n	80067f2 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80067de:	4b1e      	ldr	r3, [pc, #120]	@ (8006858 <vTaskDelete+0x110>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	3b01      	subs	r3, #1
 80067e4:	4a1c      	ldr	r2, [pc, #112]	@ (8006858 <vTaskDelete+0x110>)
 80067e6:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80067e8:	68f8      	ldr	r0, [r7, #12]
 80067ea:	f000 fc69 	bl	80070c0 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80067ee:	f000 fc9d 	bl	800712c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80067f2:	f001 fa4b 	bl	8007c8c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80067f6:	4b19      	ldr	r3, [pc, #100]	@ (800685c <vTaskDelete+0x114>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d01c      	beq.n	8006838 <vTaskDelete+0xf0>
		{
			if( pxTCB == pxCurrentTCB )
 80067fe:	4b10      	ldr	r3, [pc, #64]	@ (8006840 <vTaskDelete+0xf8>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	68fa      	ldr	r2, [r7, #12]
 8006804:	429a      	cmp	r2, r3
 8006806:	d117      	bne.n	8006838 <vTaskDelete+0xf0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8006808:	4b15      	ldr	r3, [pc, #84]	@ (8006860 <vTaskDelete+0x118>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d00b      	beq.n	8006828 <vTaskDelete+0xe0>
	__asm volatile
 8006810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006814:	f383 8811 	msr	BASEPRI, r3
 8006818:	f3bf 8f6f 	isb	sy
 800681c:	f3bf 8f4f 	dsb	sy
 8006820:	60bb      	str	r3, [r7, #8]
}
 8006822:	bf00      	nop
 8006824:	bf00      	nop
 8006826:	e7fd      	b.n	8006824 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8006828:	4b0e      	ldr	r3, [pc, #56]	@ (8006864 <vTaskDelete+0x11c>)
 800682a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800682e:	601a      	str	r2, [r3, #0]
 8006830:	f3bf 8f4f 	dsb	sy
 8006834:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006838:	bf00      	nop
 800683a:	3710      	adds	r7, #16
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}
 8006840:	200004b4 	.word	0x200004b4
 8006844:	200004b8 	.word	0x200004b8
 8006848:	200005bc 	.word	0x200005bc
 800684c:	200005d0 	.word	0x200005d0
 8006850:	20000588 	.word	0x20000588
 8006854:	2000059c 	.word	0x2000059c
 8006858:	200005b4 	.word	0x200005b4
 800685c:	200005c0 	.word	0x200005c0
 8006860:	200005dc 	.word	0x200005dc
 8006864:	e000ed04 	.word	0xe000ed04

08006868 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006868:	b580      	push	{r7, lr}
 800686a:	b084      	sub	sp, #16
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006870:	2300      	movs	r3, #0
 8006872:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d018      	beq.n	80068ac <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800687a:	4b14      	ldr	r3, [pc, #80]	@ (80068cc <vTaskDelay+0x64>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d00b      	beq.n	800689a <vTaskDelay+0x32>
	__asm volatile
 8006882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006886:	f383 8811 	msr	BASEPRI, r3
 800688a:	f3bf 8f6f 	isb	sy
 800688e:	f3bf 8f4f 	dsb	sy
 8006892:	60bb      	str	r3, [r7, #8]
}
 8006894:	bf00      	nop
 8006896:	bf00      	nop
 8006898:	e7fd      	b.n	8006896 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800689a:	f000 f887 	bl	80069ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800689e:	2100      	movs	r1, #0
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f001 f82b 	bl	80078fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80068a6:	f000 f88f 	bl	80069c8 <xTaskResumeAll>
 80068aa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d107      	bne.n	80068c2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80068b2:	4b07      	ldr	r3, [pc, #28]	@ (80068d0 <vTaskDelay+0x68>)
 80068b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068b8:	601a      	str	r2, [r3, #0]
 80068ba:	f3bf 8f4f 	dsb	sy
 80068be:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80068c2:	bf00      	nop
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop
 80068cc:	200005dc 	.word	0x200005dc
 80068d0:	e000ed04 	.word	0xe000ed04

080068d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b08a      	sub	sp, #40	@ 0x28
 80068d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80068da:	2300      	movs	r3, #0
 80068dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80068de:	2300      	movs	r3, #0
 80068e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80068e2:	463a      	mov	r2, r7
 80068e4:	1d39      	adds	r1, r7, #4
 80068e6:	f107 0308 	add.w	r3, r7, #8
 80068ea:	4618      	mov	r0, r3
 80068ec:	f7fa faa4 	bl	8000e38 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80068f0:	6839      	ldr	r1, [r7, #0]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	68ba      	ldr	r2, [r7, #8]
 80068f6:	9202      	str	r2, [sp, #8]
 80068f8:	9301      	str	r3, [sp, #4]
 80068fa:	2300      	movs	r3, #0
 80068fc:	9300      	str	r3, [sp, #0]
 80068fe:	2300      	movs	r3, #0
 8006900:	460a      	mov	r2, r1
 8006902:	4922      	ldr	r1, [pc, #136]	@ (800698c <vTaskStartScheduler+0xb8>)
 8006904:	4822      	ldr	r0, [pc, #136]	@ (8006990 <vTaskStartScheduler+0xbc>)
 8006906:	f7ff fd61 	bl	80063cc <xTaskCreateStatic>
 800690a:	4603      	mov	r3, r0
 800690c:	4a21      	ldr	r2, [pc, #132]	@ (8006994 <vTaskStartScheduler+0xc0>)
 800690e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006910:	4b20      	ldr	r3, [pc, #128]	@ (8006994 <vTaskStartScheduler+0xc0>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d002      	beq.n	800691e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006918:	2301      	movs	r3, #1
 800691a:	617b      	str	r3, [r7, #20]
 800691c:	e001      	b.n	8006922 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800691e:	2300      	movs	r3, #0
 8006920:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	2b01      	cmp	r3, #1
 8006926:	d11d      	bne.n	8006964 <vTaskStartScheduler+0x90>
	__asm volatile
 8006928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800692c:	f383 8811 	msr	BASEPRI, r3
 8006930:	f3bf 8f6f 	isb	sy
 8006934:	f3bf 8f4f 	dsb	sy
 8006938:	613b      	str	r3, [r7, #16]
}
 800693a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800693c:	4b16      	ldr	r3, [pc, #88]	@ (8006998 <vTaskStartScheduler+0xc4>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	3358      	adds	r3, #88	@ 0x58
 8006942:	4a16      	ldr	r2, [pc, #88]	@ (800699c <vTaskStartScheduler+0xc8>)
 8006944:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006946:	4b16      	ldr	r3, [pc, #88]	@ (80069a0 <vTaskStartScheduler+0xcc>)
 8006948:	f04f 32ff 	mov.w	r2, #4294967295
 800694c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800694e:	4b15      	ldr	r3, [pc, #84]	@ (80069a4 <vTaskStartScheduler+0xd0>)
 8006950:	2201      	movs	r2, #1
 8006952:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006954:	4b14      	ldr	r3, [pc, #80]	@ (80069a8 <vTaskStartScheduler+0xd4>)
 8006956:	2200      	movs	r2, #0
 8006958:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800695a:	f7fa fa5d 	bl	8000e18 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800695e:	f001 f8bf 	bl	8007ae0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006962:	e00f      	b.n	8006984 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800696a:	d10b      	bne.n	8006984 <vTaskStartScheduler+0xb0>
	__asm volatile
 800696c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006970:	f383 8811 	msr	BASEPRI, r3
 8006974:	f3bf 8f6f 	isb	sy
 8006978:	f3bf 8f4f 	dsb	sy
 800697c:	60fb      	str	r3, [r7, #12]
}
 800697e:	bf00      	nop
 8006980:	bf00      	nop
 8006982:	e7fd      	b.n	8006980 <vTaskStartScheduler+0xac>
}
 8006984:	bf00      	nop
 8006986:	3718      	adds	r7, #24
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}
 800698c:	080099b8 	.word	0x080099b8
 8006990:	08006fb5 	.word	0x08006fb5
 8006994:	200005d8 	.word	0x200005d8
 8006998:	200004b4 	.word	0x200004b4
 800699c:	2000001c 	.word	0x2000001c
 80069a0:	200005d4 	.word	0x200005d4
 80069a4:	200005c0 	.word	0x200005c0
 80069a8:	200005b8 	.word	0x200005b8

080069ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80069ac:	b480      	push	{r7}
 80069ae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80069b0:	4b04      	ldr	r3, [pc, #16]	@ (80069c4 <vTaskSuspendAll+0x18>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	3301      	adds	r3, #1
 80069b6:	4a03      	ldr	r2, [pc, #12]	@ (80069c4 <vTaskSuspendAll+0x18>)
 80069b8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80069ba:	bf00      	nop
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr
 80069c4:	200005dc 	.word	0x200005dc

080069c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80069ce:	2300      	movs	r3, #0
 80069d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80069d2:	2300      	movs	r3, #0
 80069d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80069d6:	4b42      	ldr	r3, [pc, #264]	@ (8006ae0 <xTaskResumeAll+0x118>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d10b      	bne.n	80069f6 <xTaskResumeAll+0x2e>
	__asm volatile
 80069de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069e2:	f383 8811 	msr	BASEPRI, r3
 80069e6:	f3bf 8f6f 	isb	sy
 80069ea:	f3bf 8f4f 	dsb	sy
 80069ee:	603b      	str	r3, [r7, #0]
}
 80069f0:	bf00      	nop
 80069f2:	bf00      	nop
 80069f4:	e7fd      	b.n	80069f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80069f6:	f001 f917 	bl	8007c28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80069fa:	4b39      	ldr	r3, [pc, #228]	@ (8006ae0 <xTaskResumeAll+0x118>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	3b01      	subs	r3, #1
 8006a00:	4a37      	ldr	r2, [pc, #220]	@ (8006ae0 <xTaskResumeAll+0x118>)
 8006a02:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a04:	4b36      	ldr	r3, [pc, #216]	@ (8006ae0 <xTaskResumeAll+0x118>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d161      	bne.n	8006ad0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006a0c:	4b35      	ldr	r3, [pc, #212]	@ (8006ae4 <xTaskResumeAll+0x11c>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d05d      	beq.n	8006ad0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a14:	e02e      	b.n	8006a74 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a16:	4b34      	ldr	r3, [pc, #208]	@ (8006ae8 <xTaskResumeAll+0x120>)
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	3318      	adds	r3, #24
 8006a22:	4618      	mov	r0, r3
 8006a24:	f7fe fe34 	bl	8005690 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	3304      	adds	r3, #4
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f7fe fe2f 	bl	8005690 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a36:	2201      	movs	r2, #1
 8006a38:	409a      	lsls	r2, r3
 8006a3a:	4b2c      	ldr	r3, [pc, #176]	@ (8006aec <xTaskResumeAll+0x124>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	4a2a      	ldr	r2, [pc, #168]	@ (8006aec <xTaskResumeAll+0x124>)
 8006a42:	6013      	str	r3, [r2, #0]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a48:	4613      	mov	r3, r2
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	4413      	add	r3, r2
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	4a27      	ldr	r2, [pc, #156]	@ (8006af0 <xTaskResumeAll+0x128>)
 8006a52:	441a      	add	r2, r3
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	3304      	adds	r3, #4
 8006a58:	4619      	mov	r1, r3
 8006a5a:	4610      	mov	r0, r2
 8006a5c:	f7fe fdbb 	bl	80055d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a64:	4b23      	ldr	r3, [pc, #140]	@ (8006af4 <xTaskResumeAll+0x12c>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d302      	bcc.n	8006a74 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006a6e:	4b22      	ldr	r3, [pc, #136]	@ (8006af8 <xTaskResumeAll+0x130>)
 8006a70:	2201      	movs	r2, #1
 8006a72:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a74:	4b1c      	ldr	r3, [pc, #112]	@ (8006ae8 <xTaskResumeAll+0x120>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d1cc      	bne.n	8006a16 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d001      	beq.n	8006a86 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006a82:	f000 fb53 	bl	800712c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006a86:	4b1d      	ldr	r3, [pc, #116]	@ (8006afc <xTaskResumeAll+0x134>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d010      	beq.n	8006ab4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006a92:	f000 f847 	bl	8006b24 <xTaskIncrementTick>
 8006a96:	4603      	mov	r3, r0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d002      	beq.n	8006aa2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006a9c:	4b16      	ldr	r3, [pc, #88]	@ (8006af8 <xTaskResumeAll+0x130>)
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	3b01      	subs	r3, #1
 8006aa6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d1f1      	bne.n	8006a92 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006aae:	4b13      	ldr	r3, [pc, #76]	@ (8006afc <xTaskResumeAll+0x134>)
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006ab4:	4b10      	ldr	r3, [pc, #64]	@ (8006af8 <xTaskResumeAll+0x130>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d009      	beq.n	8006ad0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006abc:	2301      	movs	r3, #1
 8006abe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006ac0:	4b0f      	ldr	r3, [pc, #60]	@ (8006b00 <xTaskResumeAll+0x138>)
 8006ac2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ac6:	601a      	str	r2, [r3, #0]
 8006ac8:	f3bf 8f4f 	dsb	sy
 8006acc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ad0:	f001 f8dc 	bl	8007c8c <vPortExitCritical>

	return xAlreadyYielded;
 8006ad4:	68bb      	ldr	r3, [r7, #8]
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3710      	adds	r7, #16
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	bf00      	nop
 8006ae0:	200005dc 	.word	0x200005dc
 8006ae4:	200005b4 	.word	0x200005b4
 8006ae8:	20000574 	.word	0x20000574
 8006aec:	200005bc 	.word	0x200005bc
 8006af0:	200004b8 	.word	0x200004b8
 8006af4:	200004b4 	.word	0x200004b4
 8006af8:	200005c8 	.word	0x200005c8
 8006afc:	200005c4 	.word	0x200005c4
 8006b00:	e000ed04 	.word	0xe000ed04

08006b04 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006b04:	b480      	push	{r7}
 8006b06:	b083      	sub	sp, #12
 8006b08:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006b0a:	4b05      	ldr	r3, [pc, #20]	@ (8006b20 <xTaskGetTickCount+0x1c>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006b10:	687b      	ldr	r3, [r7, #4]
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	370c      	adds	r7, #12
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr
 8006b1e:	bf00      	nop
 8006b20:	200005b8 	.word	0x200005b8

08006b24 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b086      	sub	sp, #24
 8006b28:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b2e:	4b4f      	ldr	r3, [pc, #316]	@ (8006c6c <xTaskIncrementTick+0x148>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	f040 808f 	bne.w	8006c56 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006b38:	4b4d      	ldr	r3, [pc, #308]	@ (8006c70 <xTaskIncrementTick+0x14c>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	3301      	adds	r3, #1
 8006b3e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006b40:	4a4b      	ldr	r2, [pc, #300]	@ (8006c70 <xTaskIncrementTick+0x14c>)
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d121      	bne.n	8006b90 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006b4c:	4b49      	ldr	r3, [pc, #292]	@ (8006c74 <xTaskIncrementTick+0x150>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d00b      	beq.n	8006b6e <xTaskIncrementTick+0x4a>
	__asm volatile
 8006b56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b5a:	f383 8811 	msr	BASEPRI, r3
 8006b5e:	f3bf 8f6f 	isb	sy
 8006b62:	f3bf 8f4f 	dsb	sy
 8006b66:	603b      	str	r3, [r7, #0]
}
 8006b68:	bf00      	nop
 8006b6a:	bf00      	nop
 8006b6c:	e7fd      	b.n	8006b6a <xTaskIncrementTick+0x46>
 8006b6e:	4b41      	ldr	r3, [pc, #260]	@ (8006c74 <xTaskIncrementTick+0x150>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	60fb      	str	r3, [r7, #12]
 8006b74:	4b40      	ldr	r3, [pc, #256]	@ (8006c78 <xTaskIncrementTick+0x154>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a3e      	ldr	r2, [pc, #248]	@ (8006c74 <xTaskIncrementTick+0x150>)
 8006b7a:	6013      	str	r3, [r2, #0]
 8006b7c:	4a3e      	ldr	r2, [pc, #248]	@ (8006c78 <xTaskIncrementTick+0x154>)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6013      	str	r3, [r2, #0]
 8006b82:	4b3e      	ldr	r3, [pc, #248]	@ (8006c7c <xTaskIncrementTick+0x158>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	3301      	adds	r3, #1
 8006b88:	4a3c      	ldr	r2, [pc, #240]	@ (8006c7c <xTaskIncrementTick+0x158>)
 8006b8a:	6013      	str	r3, [r2, #0]
 8006b8c:	f000 face 	bl	800712c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006b90:	4b3b      	ldr	r3, [pc, #236]	@ (8006c80 <xTaskIncrementTick+0x15c>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	693a      	ldr	r2, [r7, #16]
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d348      	bcc.n	8006c2c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b9a:	4b36      	ldr	r3, [pc, #216]	@ (8006c74 <xTaskIncrementTick+0x150>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d104      	bne.n	8006bae <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ba4:	4b36      	ldr	r3, [pc, #216]	@ (8006c80 <xTaskIncrementTick+0x15c>)
 8006ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8006baa:	601a      	str	r2, [r3, #0]
					break;
 8006bac:	e03e      	b.n	8006c2c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bae:	4b31      	ldr	r3, [pc, #196]	@ (8006c74 <xTaskIncrementTick+0x150>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	68db      	ldr	r3, [r3, #12]
 8006bb6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006bbe:	693a      	ldr	r2, [r7, #16]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d203      	bcs.n	8006bce <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006bc6:	4a2e      	ldr	r2, [pc, #184]	@ (8006c80 <xTaskIncrementTick+0x15c>)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006bcc:	e02e      	b.n	8006c2c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	3304      	adds	r3, #4
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f7fe fd5c 	bl	8005690 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d004      	beq.n	8006bea <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	3318      	adds	r3, #24
 8006be4:	4618      	mov	r0, r3
 8006be6:	f7fe fd53 	bl	8005690 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bee:	2201      	movs	r2, #1
 8006bf0:	409a      	lsls	r2, r3
 8006bf2:	4b24      	ldr	r3, [pc, #144]	@ (8006c84 <xTaskIncrementTick+0x160>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	4a22      	ldr	r2, [pc, #136]	@ (8006c84 <xTaskIncrementTick+0x160>)
 8006bfa:	6013      	str	r3, [r2, #0]
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c00:	4613      	mov	r3, r2
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	4413      	add	r3, r2
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	4a1f      	ldr	r2, [pc, #124]	@ (8006c88 <xTaskIncrementTick+0x164>)
 8006c0a:	441a      	add	r2, r3
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	3304      	adds	r3, #4
 8006c10:	4619      	mov	r1, r3
 8006c12:	4610      	mov	r0, r2
 8006c14:	f7fe fcdf 	bl	80055d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c1c:	4b1b      	ldr	r3, [pc, #108]	@ (8006c8c <xTaskIncrementTick+0x168>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d3b9      	bcc.n	8006b9a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006c26:	2301      	movs	r3, #1
 8006c28:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c2a:	e7b6      	b.n	8006b9a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006c2c:	4b17      	ldr	r3, [pc, #92]	@ (8006c8c <xTaskIncrementTick+0x168>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c32:	4915      	ldr	r1, [pc, #84]	@ (8006c88 <xTaskIncrementTick+0x164>)
 8006c34:	4613      	mov	r3, r2
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	4413      	add	r3, r2
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	440b      	add	r3, r1
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d901      	bls.n	8006c48 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006c44:	2301      	movs	r3, #1
 8006c46:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006c48:	4b11      	ldr	r3, [pc, #68]	@ (8006c90 <xTaskIncrementTick+0x16c>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d007      	beq.n	8006c60 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006c50:	2301      	movs	r3, #1
 8006c52:	617b      	str	r3, [r7, #20]
 8006c54:	e004      	b.n	8006c60 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006c56:	4b0f      	ldr	r3, [pc, #60]	@ (8006c94 <xTaskIncrementTick+0x170>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	4a0d      	ldr	r2, [pc, #52]	@ (8006c94 <xTaskIncrementTick+0x170>)
 8006c5e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006c60:	697b      	ldr	r3, [r7, #20]
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3718      	adds	r7, #24
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	bf00      	nop
 8006c6c:	200005dc 	.word	0x200005dc
 8006c70:	200005b8 	.word	0x200005b8
 8006c74:	2000056c 	.word	0x2000056c
 8006c78:	20000570 	.word	0x20000570
 8006c7c:	200005cc 	.word	0x200005cc
 8006c80:	200005d4 	.word	0x200005d4
 8006c84:	200005bc 	.word	0x200005bc
 8006c88:	200004b8 	.word	0x200004b8
 8006c8c:	200004b4 	.word	0x200004b4
 8006c90:	200005c8 	.word	0x200005c8
 8006c94:	200005c4 	.word	0x200005c4

08006c98 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b086      	sub	sp, #24
 8006c9c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006c9e:	4b35      	ldr	r3, [pc, #212]	@ (8006d74 <vTaskSwitchContext+0xdc>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d003      	beq.n	8006cae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006ca6:	4b34      	ldr	r3, [pc, #208]	@ (8006d78 <vTaskSwitchContext+0xe0>)
 8006ca8:	2201      	movs	r2, #1
 8006caa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006cac:	e05e      	b.n	8006d6c <vTaskSwitchContext+0xd4>
		xYieldPending = pdFALSE;
 8006cae:	4b32      	ldr	r3, [pc, #200]	@ (8006d78 <vTaskSwitchContext+0xe0>)
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8006cb4:	f7fa f8b7 	bl	8000e26 <getRunTimeCounterValue>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	4a30      	ldr	r2, [pc, #192]	@ (8006d7c <vTaskSwitchContext+0xe4>)
 8006cbc:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8006cbe:	4b2f      	ldr	r3, [pc, #188]	@ (8006d7c <vTaskSwitchContext+0xe4>)
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	4b2f      	ldr	r3, [pc, #188]	@ (8006d80 <vTaskSwitchContext+0xe8>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d909      	bls.n	8006cde <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8006cca:	4b2e      	ldr	r3, [pc, #184]	@ (8006d84 <vTaskSwitchContext+0xec>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006cd0:	4a2a      	ldr	r2, [pc, #168]	@ (8006d7c <vTaskSwitchContext+0xe4>)
 8006cd2:	6810      	ldr	r0, [r2, #0]
 8006cd4:	4a2a      	ldr	r2, [pc, #168]	@ (8006d80 <vTaskSwitchContext+0xe8>)
 8006cd6:	6812      	ldr	r2, [r2, #0]
 8006cd8:	1a82      	subs	r2, r0, r2
 8006cda:	440a      	add	r2, r1
 8006cdc:	655a      	str	r2, [r3, #84]	@ 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8006cde:	4b27      	ldr	r3, [pc, #156]	@ (8006d7c <vTaskSwitchContext+0xe4>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a27      	ldr	r2, [pc, #156]	@ (8006d80 <vTaskSwitchContext+0xe8>)
 8006ce4:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ce6:	4b28      	ldr	r3, [pc, #160]	@ (8006d88 <vTaskSwitchContext+0xf0>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	fab3 f383 	clz	r3, r3
 8006cf2:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006cf4:	7afb      	ldrb	r3, [r7, #11]
 8006cf6:	f1c3 031f 	rsb	r3, r3, #31
 8006cfa:	617b      	str	r3, [r7, #20]
 8006cfc:	4923      	ldr	r1, [pc, #140]	@ (8006d8c <vTaskSwitchContext+0xf4>)
 8006cfe:	697a      	ldr	r2, [r7, #20]
 8006d00:	4613      	mov	r3, r2
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	4413      	add	r3, r2
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	440b      	add	r3, r1
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d10b      	bne.n	8006d28 <vTaskSwitchContext+0x90>
	__asm volatile
 8006d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d14:	f383 8811 	msr	BASEPRI, r3
 8006d18:	f3bf 8f6f 	isb	sy
 8006d1c:	f3bf 8f4f 	dsb	sy
 8006d20:	607b      	str	r3, [r7, #4]
}
 8006d22:	bf00      	nop
 8006d24:	bf00      	nop
 8006d26:	e7fd      	b.n	8006d24 <vTaskSwitchContext+0x8c>
 8006d28:	697a      	ldr	r2, [r7, #20]
 8006d2a:	4613      	mov	r3, r2
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	4413      	add	r3, r2
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	4a16      	ldr	r2, [pc, #88]	@ (8006d8c <vTaskSwitchContext+0xf4>)
 8006d34:	4413      	add	r3, r2
 8006d36:	613b      	str	r3, [r7, #16]
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	685a      	ldr	r2, [r3, #4]
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	605a      	str	r2, [r3, #4]
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	685a      	ldr	r2, [r3, #4]
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	3308      	adds	r3, #8
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d104      	bne.n	8006d58 <vTaskSwitchContext+0xc0>
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	685a      	ldr	r2, [r3, #4]
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	605a      	str	r2, [r3, #4]
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	68db      	ldr	r3, [r3, #12]
 8006d5e:	4a09      	ldr	r2, [pc, #36]	@ (8006d84 <vTaskSwitchContext+0xec>)
 8006d60:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006d62:	4b08      	ldr	r3, [pc, #32]	@ (8006d84 <vTaskSwitchContext+0xec>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	3358      	adds	r3, #88	@ 0x58
 8006d68:	4a09      	ldr	r2, [pc, #36]	@ (8006d90 <vTaskSwitchContext+0xf8>)
 8006d6a:	6013      	str	r3, [r2, #0]
}
 8006d6c:	bf00      	nop
 8006d6e:	3718      	adds	r7, #24
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	200005dc 	.word	0x200005dc
 8006d78:	200005c8 	.word	0x200005c8
 8006d7c:	200005e4 	.word	0x200005e4
 8006d80:	200005e0 	.word	0x200005e0
 8006d84:	200004b4 	.word	0x200004b4
 8006d88:	200005bc 	.word	0x200005bc
 8006d8c:	200004b8 	.word	0x200004b8
 8006d90:	2000001c 	.word	0x2000001c

08006d94 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b084      	sub	sp, #16
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d10b      	bne.n	8006dbc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006da8:	f383 8811 	msr	BASEPRI, r3
 8006dac:	f3bf 8f6f 	isb	sy
 8006db0:	f3bf 8f4f 	dsb	sy
 8006db4:	60fb      	str	r3, [r7, #12]
}
 8006db6:	bf00      	nop
 8006db8:	bf00      	nop
 8006dba:	e7fd      	b.n	8006db8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006dbc:	4b07      	ldr	r3, [pc, #28]	@ (8006ddc <vTaskPlaceOnEventList+0x48>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	3318      	adds	r3, #24
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f7fe fc2a 	bl	800561e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006dca:	2101      	movs	r1, #1
 8006dcc:	6838      	ldr	r0, [r7, #0]
 8006dce:	f000 fd95 	bl	80078fc <prvAddCurrentTaskToDelayedList>
}
 8006dd2:	bf00      	nop
 8006dd4:	3710      	adds	r7, #16
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	200004b4 	.word	0x200004b4

08006de0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b086      	sub	sp, #24
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d10b      	bne.n	8006e0e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dfa:	f383 8811 	msr	BASEPRI, r3
 8006dfe:	f3bf 8f6f 	isb	sy
 8006e02:	f3bf 8f4f 	dsb	sy
 8006e06:	60fb      	str	r3, [r7, #12]
}
 8006e08:	bf00      	nop
 8006e0a:	bf00      	nop
 8006e0c:	e7fd      	b.n	8006e0a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	3318      	adds	r3, #24
 8006e12:	4618      	mov	r0, r3
 8006e14:	f7fe fc3c 	bl	8005690 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e18:	4b1d      	ldr	r3, [pc, #116]	@ (8006e90 <xTaskRemoveFromEventList+0xb0>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d11c      	bne.n	8006e5a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	3304      	adds	r3, #4
 8006e24:	4618      	mov	r0, r3
 8006e26:	f7fe fc33 	bl	8005690 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e2e:	2201      	movs	r2, #1
 8006e30:	409a      	lsls	r2, r3
 8006e32:	4b18      	ldr	r3, [pc, #96]	@ (8006e94 <xTaskRemoveFromEventList+0xb4>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4313      	orrs	r3, r2
 8006e38:	4a16      	ldr	r2, [pc, #88]	@ (8006e94 <xTaskRemoveFromEventList+0xb4>)
 8006e3a:	6013      	str	r3, [r2, #0]
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e40:	4613      	mov	r3, r2
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	4413      	add	r3, r2
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	4a13      	ldr	r2, [pc, #76]	@ (8006e98 <xTaskRemoveFromEventList+0xb8>)
 8006e4a:	441a      	add	r2, r3
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	3304      	adds	r3, #4
 8006e50:	4619      	mov	r1, r3
 8006e52:	4610      	mov	r0, r2
 8006e54:	f7fe fbbf 	bl	80055d6 <vListInsertEnd>
 8006e58:	e005      	b.n	8006e66 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	3318      	adds	r3, #24
 8006e5e:	4619      	mov	r1, r3
 8006e60:	480e      	ldr	r0, [pc, #56]	@ (8006e9c <xTaskRemoveFromEventList+0xbc>)
 8006e62:	f7fe fbb8 	bl	80055d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8006ea0 <xTaskRemoveFromEventList+0xc0>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d905      	bls.n	8006e80 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006e74:	2301      	movs	r3, #1
 8006e76:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006e78:	4b0a      	ldr	r3, [pc, #40]	@ (8006ea4 <xTaskRemoveFromEventList+0xc4>)
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	601a      	str	r2, [r3, #0]
 8006e7e:	e001      	b.n	8006e84 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006e80:	2300      	movs	r3, #0
 8006e82:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006e84:	697b      	ldr	r3, [r7, #20]
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3718      	adds	r7, #24
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop
 8006e90:	200005dc 	.word	0x200005dc
 8006e94:	200005bc 	.word	0x200005bc
 8006e98:	200004b8 	.word	0x200004b8
 8006e9c:	20000574 	.word	0x20000574
 8006ea0:	200004b4 	.word	0x200004b4
 8006ea4:	200005c8 	.word	0x200005c8

08006ea8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006eb0:	4b06      	ldr	r3, [pc, #24]	@ (8006ecc <vTaskInternalSetTimeOutState+0x24>)
 8006eb2:	681a      	ldr	r2, [r3, #0]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006eb8:	4b05      	ldr	r3, [pc, #20]	@ (8006ed0 <vTaskInternalSetTimeOutState+0x28>)
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	605a      	str	r2, [r3, #4]
}
 8006ec0:	bf00      	nop
 8006ec2:	370c      	adds	r7, #12
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr
 8006ecc:	200005cc 	.word	0x200005cc
 8006ed0:	200005b8 	.word	0x200005b8

08006ed4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b088      	sub	sp, #32
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d10b      	bne.n	8006efc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ee8:	f383 8811 	msr	BASEPRI, r3
 8006eec:	f3bf 8f6f 	isb	sy
 8006ef0:	f3bf 8f4f 	dsb	sy
 8006ef4:	613b      	str	r3, [r7, #16]
}
 8006ef6:	bf00      	nop
 8006ef8:	bf00      	nop
 8006efa:	e7fd      	b.n	8006ef8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d10b      	bne.n	8006f1a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f06:	f383 8811 	msr	BASEPRI, r3
 8006f0a:	f3bf 8f6f 	isb	sy
 8006f0e:	f3bf 8f4f 	dsb	sy
 8006f12:	60fb      	str	r3, [r7, #12]
}
 8006f14:	bf00      	nop
 8006f16:	bf00      	nop
 8006f18:	e7fd      	b.n	8006f16 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006f1a:	f000 fe85 	bl	8007c28 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006f1e:	4b1d      	ldr	r3, [pc, #116]	@ (8006f94 <xTaskCheckForTimeOut+0xc0>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	69ba      	ldr	r2, [r7, #24]
 8006f2a:	1ad3      	subs	r3, r2, r3
 8006f2c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f36:	d102      	bne.n	8006f3e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	61fb      	str	r3, [r7, #28]
 8006f3c:	e023      	b.n	8006f86 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	4b15      	ldr	r3, [pc, #84]	@ (8006f98 <xTaskCheckForTimeOut+0xc4>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d007      	beq.n	8006f5a <xTaskCheckForTimeOut+0x86>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	69ba      	ldr	r2, [r7, #24]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d302      	bcc.n	8006f5a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006f54:	2301      	movs	r3, #1
 8006f56:	61fb      	str	r3, [r7, #28]
 8006f58:	e015      	b.n	8006f86 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	697a      	ldr	r2, [r7, #20]
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d20b      	bcs.n	8006f7c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	1ad2      	subs	r2, r2, r3
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f7ff ff99 	bl	8006ea8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006f76:	2300      	movs	r3, #0
 8006f78:	61fb      	str	r3, [r7, #28]
 8006f7a:	e004      	b.n	8006f86 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006f82:	2301      	movs	r3, #1
 8006f84:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006f86:	f000 fe81 	bl	8007c8c <vPortExitCritical>

	return xReturn;
 8006f8a:	69fb      	ldr	r3, [r7, #28]
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3720      	adds	r7, #32
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}
 8006f94:	200005b8 	.word	0x200005b8
 8006f98:	200005cc 	.word	0x200005cc

08006f9c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006fa0:	4b03      	ldr	r3, [pc, #12]	@ (8006fb0 <vTaskMissedYield+0x14>)
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	601a      	str	r2, [r3, #0]
}
 8006fa6:	bf00      	nop
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr
 8006fb0:	200005c8 	.word	0x200005c8

08006fb4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b082      	sub	sp, #8
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006fbc:	f000 f852 	bl	8007064 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006fc0:	4b06      	ldr	r3, [pc, #24]	@ (8006fdc <prvIdleTask+0x28>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d9f9      	bls.n	8006fbc <prvIdleTask+0x8>
			{
				taskYIELD();
 8006fc8:	4b05      	ldr	r3, [pc, #20]	@ (8006fe0 <prvIdleTask+0x2c>)
 8006fca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fce:	601a      	str	r2, [r3, #0]
 8006fd0:	f3bf 8f4f 	dsb	sy
 8006fd4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006fd8:	e7f0      	b.n	8006fbc <prvIdleTask+0x8>
 8006fda:	bf00      	nop
 8006fdc:	200004b8 	.word	0x200004b8
 8006fe0:	e000ed04 	.word	0xe000ed04

08006fe4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b082      	sub	sp, #8
 8006fe8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006fea:	2300      	movs	r3, #0
 8006fec:	607b      	str	r3, [r7, #4]
 8006fee:	e00c      	b.n	800700a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	4613      	mov	r3, r2
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	4413      	add	r3, r2
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	4a12      	ldr	r2, [pc, #72]	@ (8007044 <prvInitialiseTaskLists+0x60>)
 8006ffc:	4413      	add	r3, r2
 8006ffe:	4618      	mov	r0, r3
 8007000:	f7fe fabc 	bl	800557c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	3301      	adds	r3, #1
 8007008:	607b      	str	r3, [r7, #4]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2b06      	cmp	r3, #6
 800700e:	d9ef      	bls.n	8006ff0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007010:	480d      	ldr	r0, [pc, #52]	@ (8007048 <prvInitialiseTaskLists+0x64>)
 8007012:	f7fe fab3 	bl	800557c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007016:	480d      	ldr	r0, [pc, #52]	@ (800704c <prvInitialiseTaskLists+0x68>)
 8007018:	f7fe fab0 	bl	800557c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800701c:	480c      	ldr	r0, [pc, #48]	@ (8007050 <prvInitialiseTaskLists+0x6c>)
 800701e:	f7fe faad 	bl	800557c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007022:	480c      	ldr	r0, [pc, #48]	@ (8007054 <prvInitialiseTaskLists+0x70>)
 8007024:	f7fe faaa 	bl	800557c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007028:	480b      	ldr	r0, [pc, #44]	@ (8007058 <prvInitialiseTaskLists+0x74>)
 800702a:	f7fe faa7 	bl	800557c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800702e:	4b0b      	ldr	r3, [pc, #44]	@ (800705c <prvInitialiseTaskLists+0x78>)
 8007030:	4a05      	ldr	r2, [pc, #20]	@ (8007048 <prvInitialiseTaskLists+0x64>)
 8007032:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007034:	4b0a      	ldr	r3, [pc, #40]	@ (8007060 <prvInitialiseTaskLists+0x7c>)
 8007036:	4a05      	ldr	r2, [pc, #20]	@ (800704c <prvInitialiseTaskLists+0x68>)
 8007038:	601a      	str	r2, [r3, #0]
}
 800703a:	bf00      	nop
 800703c:	3708      	adds	r7, #8
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
 8007042:	bf00      	nop
 8007044:	200004b8 	.word	0x200004b8
 8007048:	20000544 	.word	0x20000544
 800704c:	20000558 	.word	0x20000558
 8007050:	20000574 	.word	0x20000574
 8007054:	20000588 	.word	0x20000588
 8007058:	200005a0 	.word	0x200005a0
 800705c:	2000056c 	.word	0x2000056c
 8007060:	20000570 	.word	0x20000570

08007064 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b082      	sub	sp, #8
 8007068:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800706a:	e019      	b.n	80070a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800706c:	f000 fddc 	bl	8007c28 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007070:	4b10      	ldr	r3, [pc, #64]	@ (80070b4 <prvCheckTasksWaitingTermination+0x50>)
 8007072:	68db      	ldr	r3, [r3, #12]
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	3304      	adds	r3, #4
 800707c:	4618      	mov	r0, r3
 800707e:	f7fe fb07 	bl	8005690 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007082:	4b0d      	ldr	r3, [pc, #52]	@ (80070b8 <prvCheckTasksWaitingTermination+0x54>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	3b01      	subs	r3, #1
 8007088:	4a0b      	ldr	r2, [pc, #44]	@ (80070b8 <prvCheckTasksWaitingTermination+0x54>)
 800708a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800708c:	4b0b      	ldr	r3, [pc, #44]	@ (80070bc <prvCheckTasksWaitingTermination+0x58>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	3b01      	subs	r3, #1
 8007092:	4a0a      	ldr	r2, [pc, #40]	@ (80070bc <prvCheckTasksWaitingTermination+0x58>)
 8007094:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007096:	f000 fdf9 	bl	8007c8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f000 f810 	bl	80070c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80070a0:	4b06      	ldr	r3, [pc, #24]	@ (80070bc <prvCheckTasksWaitingTermination+0x58>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d1e1      	bne.n	800706c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80070a8:	bf00      	nop
 80070aa:	bf00      	nop
 80070ac:	3708      	adds	r7, #8
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
 80070b2:	bf00      	nop
 80070b4:	20000588 	.word	0x20000588
 80070b8:	200005b4 	.word	0x200005b4
 80070bc:	2000059c 	.word	0x2000059c

080070c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	3358      	adds	r3, #88	@ 0x58
 80070cc:	4618      	mov	r0, r3
 80070ce:	f001 fb79 	bl	80087c4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d108      	bne.n	80070ee <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070e0:	4618      	mov	r0, r3
 80070e2:	f000 ff91 	bl	8008008 <vPortFree>
				vPortFree( pxTCB );
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 ff8e 	bl	8008008 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80070ec:	e019      	b.n	8007122 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d103      	bne.n	8007100 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f000 ff85 	bl	8008008 <vPortFree>
	}
 80070fe:	e010      	b.n	8007122 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 8007106:	2b02      	cmp	r3, #2
 8007108:	d00b      	beq.n	8007122 <prvDeleteTCB+0x62>
	__asm volatile
 800710a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800710e:	f383 8811 	msr	BASEPRI, r3
 8007112:	f3bf 8f6f 	isb	sy
 8007116:	f3bf 8f4f 	dsb	sy
 800711a:	60fb      	str	r3, [r7, #12]
}
 800711c:	bf00      	nop
 800711e:	bf00      	nop
 8007120:	e7fd      	b.n	800711e <prvDeleteTCB+0x5e>
	}
 8007122:	bf00      	nop
 8007124:	3710      	adds	r7, #16
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
	...

0800712c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800712c:	b480      	push	{r7}
 800712e:	b083      	sub	sp, #12
 8007130:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007132:	4b0c      	ldr	r3, [pc, #48]	@ (8007164 <prvResetNextTaskUnblockTime+0x38>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d104      	bne.n	8007146 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800713c:	4b0a      	ldr	r3, [pc, #40]	@ (8007168 <prvResetNextTaskUnblockTime+0x3c>)
 800713e:	f04f 32ff 	mov.w	r2, #4294967295
 8007142:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007144:	e008      	b.n	8007158 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007146:	4b07      	ldr	r3, [pc, #28]	@ (8007164 <prvResetNextTaskUnblockTime+0x38>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	4a04      	ldr	r2, [pc, #16]	@ (8007168 <prvResetNextTaskUnblockTime+0x3c>)
 8007156:	6013      	str	r3, [r2, #0]
}
 8007158:	bf00      	nop
 800715a:	370c      	adds	r7, #12
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr
 8007164:	2000056c 	.word	0x2000056c
 8007168:	200005d4 	.word	0x200005d4

0800716c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800716c:	b480      	push	{r7}
 800716e:	b083      	sub	sp, #12
 8007170:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007172:	4b0b      	ldr	r3, [pc, #44]	@ (80071a0 <xTaskGetSchedulerState+0x34>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d102      	bne.n	8007180 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800717a:	2301      	movs	r3, #1
 800717c:	607b      	str	r3, [r7, #4]
 800717e:	e008      	b.n	8007192 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007180:	4b08      	ldr	r3, [pc, #32]	@ (80071a4 <xTaskGetSchedulerState+0x38>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d102      	bne.n	800718e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007188:	2302      	movs	r3, #2
 800718a:	607b      	str	r3, [r7, #4]
 800718c:	e001      	b.n	8007192 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800718e:	2300      	movs	r3, #0
 8007190:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007192:	687b      	ldr	r3, [r7, #4]
	}
 8007194:	4618      	mov	r0, r3
 8007196:	370c      	adds	r7, #12
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr
 80071a0:	200005c0 	.word	0x200005c0
 80071a4:	200005dc 	.word	0x200005dc

080071a8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b084      	sub	sp, #16
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80071b4:	2300      	movs	r3, #0
 80071b6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d05e      	beq.n	800727c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071c2:	4b31      	ldr	r3, [pc, #196]	@ (8007288 <xTaskPriorityInherit+0xe0>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d24e      	bcs.n	800726a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	699b      	ldr	r3, [r3, #24]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	db06      	blt.n	80071e2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071d4:	4b2c      	ldr	r3, [pc, #176]	@ (8007288 <xTaskPriorityInherit+0xe0>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071da:	f1c3 0207 	rsb	r2, r3, #7
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	6959      	ldr	r1, [r3, #20]
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071ea:	4613      	mov	r3, r2
 80071ec:	009b      	lsls	r3, r3, #2
 80071ee:	4413      	add	r3, r2
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	4a26      	ldr	r2, [pc, #152]	@ (800728c <xTaskPriorityInherit+0xe4>)
 80071f4:	4413      	add	r3, r2
 80071f6:	4299      	cmp	r1, r3
 80071f8:	d12f      	bne.n	800725a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	3304      	adds	r3, #4
 80071fe:	4618      	mov	r0, r3
 8007200:	f7fe fa46 	bl	8005690 <uxListRemove>
 8007204:	4603      	mov	r3, r0
 8007206:	2b00      	cmp	r3, #0
 8007208:	d10a      	bne.n	8007220 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800720e:	2201      	movs	r2, #1
 8007210:	fa02 f303 	lsl.w	r3, r2, r3
 8007214:	43da      	mvns	r2, r3
 8007216:	4b1e      	ldr	r3, [pc, #120]	@ (8007290 <xTaskPriorityInherit+0xe8>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4013      	ands	r3, r2
 800721c:	4a1c      	ldr	r2, [pc, #112]	@ (8007290 <xTaskPriorityInherit+0xe8>)
 800721e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007220:	4b19      	ldr	r3, [pc, #100]	@ (8007288 <xTaskPriorityInherit+0xe0>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800722e:	2201      	movs	r2, #1
 8007230:	409a      	lsls	r2, r3
 8007232:	4b17      	ldr	r3, [pc, #92]	@ (8007290 <xTaskPriorityInherit+0xe8>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4313      	orrs	r3, r2
 8007238:	4a15      	ldr	r2, [pc, #84]	@ (8007290 <xTaskPriorityInherit+0xe8>)
 800723a:	6013      	str	r3, [r2, #0]
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007240:	4613      	mov	r3, r2
 8007242:	009b      	lsls	r3, r3, #2
 8007244:	4413      	add	r3, r2
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	4a10      	ldr	r2, [pc, #64]	@ (800728c <xTaskPriorityInherit+0xe4>)
 800724a:	441a      	add	r2, r3
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	3304      	adds	r3, #4
 8007250:	4619      	mov	r1, r3
 8007252:	4610      	mov	r0, r2
 8007254:	f7fe f9bf 	bl	80055d6 <vListInsertEnd>
 8007258:	e004      	b.n	8007264 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800725a:	4b0b      	ldr	r3, [pc, #44]	@ (8007288 <xTaskPriorityInherit+0xe0>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007264:	2301      	movs	r3, #1
 8007266:	60fb      	str	r3, [r7, #12]
 8007268:	e008      	b.n	800727c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800726e:	4b06      	ldr	r3, [pc, #24]	@ (8007288 <xTaskPriorityInherit+0xe0>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007274:	429a      	cmp	r2, r3
 8007276:	d201      	bcs.n	800727c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007278:	2301      	movs	r3, #1
 800727a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800727c:	68fb      	ldr	r3, [r7, #12]
	}
 800727e:	4618      	mov	r0, r3
 8007280:	3710      	adds	r7, #16
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}
 8007286:	bf00      	nop
 8007288:	200004b4 	.word	0x200004b4
 800728c:	200004b8 	.word	0x200004b8
 8007290:	200005bc 	.word	0x200005bc

08007294 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007294:	b580      	push	{r7, lr}
 8007296:	b086      	sub	sp, #24
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80072a0:	2300      	movs	r3, #0
 80072a2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d070      	beq.n	800738c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80072aa:	4b3b      	ldr	r3, [pc, #236]	@ (8007398 <xTaskPriorityDisinherit+0x104>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	693a      	ldr	r2, [r7, #16]
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d00b      	beq.n	80072cc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80072b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072b8:	f383 8811 	msr	BASEPRI, r3
 80072bc:	f3bf 8f6f 	isb	sy
 80072c0:	f3bf 8f4f 	dsb	sy
 80072c4:	60fb      	str	r3, [r7, #12]
}
 80072c6:	bf00      	nop
 80072c8:	bf00      	nop
 80072ca:	e7fd      	b.n	80072c8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d10b      	bne.n	80072ec <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80072d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072d8:	f383 8811 	msr	BASEPRI, r3
 80072dc:	f3bf 8f6f 	isb	sy
 80072e0:	f3bf 8f4f 	dsb	sy
 80072e4:	60bb      	str	r3, [r7, #8]
}
 80072e6:	bf00      	nop
 80072e8:	bf00      	nop
 80072ea:	e7fd      	b.n	80072e8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072f0:	1e5a      	subs	r2, r3, #1
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072fe:	429a      	cmp	r2, r3
 8007300:	d044      	beq.n	800738c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007306:	2b00      	cmp	r3, #0
 8007308:	d140      	bne.n	800738c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	3304      	adds	r3, #4
 800730e:	4618      	mov	r0, r3
 8007310:	f7fe f9be 	bl	8005690 <uxListRemove>
 8007314:	4603      	mov	r3, r0
 8007316:	2b00      	cmp	r3, #0
 8007318:	d115      	bne.n	8007346 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800731e:	491f      	ldr	r1, [pc, #124]	@ (800739c <xTaskPriorityDisinherit+0x108>)
 8007320:	4613      	mov	r3, r2
 8007322:	009b      	lsls	r3, r3, #2
 8007324:	4413      	add	r3, r2
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	440b      	add	r3, r1
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d10a      	bne.n	8007346 <xTaskPriorityDisinherit+0xb2>
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007334:	2201      	movs	r2, #1
 8007336:	fa02 f303 	lsl.w	r3, r2, r3
 800733a:	43da      	mvns	r2, r3
 800733c:	4b18      	ldr	r3, [pc, #96]	@ (80073a0 <xTaskPriorityDisinherit+0x10c>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4013      	ands	r3, r2
 8007342:	4a17      	ldr	r2, [pc, #92]	@ (80073a0 <xTaskPriorityDisinherit+0x10c>)
 8007344:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007352:	f1c3 0207 	rsb	r2, r3, #7
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800735e:	2201      	movs	r2, #1
 8007360:	409a      	lsls	r2, r3
 8007362:	4b0f      	ldr	r3, [pc, #60]	@ (80073a0 <xTaskPriorityDisinherit+0x10c>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4313      	orrs	r3, r2
 8007368:	4a0d      	ldr	r2, [pc, #52]	@ (80073a0 <xTaskPriorityDisinherit+0x10c>)
 800736a:	6013      	str	r3, [r2, #0]
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007370:	4613      	mov	r3, r2
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	4413      	add	r3, r2
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	4a08      	ldr	r2, [pc, #32]	@ (800739c <xTaskPriorityDisinherit+0x108>)
 800737a:	441a      	add	r2, r3
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	3304      	adds	r3, #4
 8007380:	4619      	mov	r1, r3
 8007382:	4610      	mov	r0, r2
 8007384:	f7fe f927 	bl	80055d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007388:	2301      	movs	r3, #1
 800738a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800738c:	697b      	ldr	r3, [r7, #20]
	}
 800738e:	4618      	mov	r0, r3
 8007390:	3718      	adds	r7, #24
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
 8007396:	bf00      	nop
 8007398:	200004b4 	.word	0x200004b4
 800739c:	200004b8 	.word	0x200004b8
 80073a0:	200005bc 	.word	0x200005bc

080073a4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b088      	sub	sp, #32
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80073b2:	2301      	movs	r3, #1
 80073b4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d079      	beq.n	80074b0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80073bc:	69bb      	ldr	r3, [r7, #24]
 80073be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d10b      	bne.n	80073dc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80073c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073c8:	f383 8811 	msr	BASEPRI, r3
 80073cc:	f3bf 8f6f 	isb	sy
 80073d0:	f3bf 8f4f 	dsb	sy
 80073d4:	60fb      	str	r3, [r7, #12]
}
 80073d6:	bf00      	nop
 80073d8:	bf00      	nop
 80073da:	e7fd      	b.n	80073d8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80073dc:	69bb      	ldr	r3, [r7, #24]
 80073de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073e0:	683a      	ldr	r2, [r7, #0]
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d902      	bls.n	80073ec <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	61fb      	str	r3, [r7, #28]
 80073ea:	e002      	b.n	80073f2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80073ec:	69bb      	ldr	r3, [r7, #24]
 80073ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073f0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80073f2:	69bb      	ldr	r3, [r7, #24]
 80073f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073f6:	69fa      	ldr	r2, [r7, #28]
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d059      	beq.n	80074b0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80073fc:	69bb      	ldr	r3, [r7, #24]
 80073fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007400:	697a      	ldr	r2, [r7, #20]
 8007402:	429a      	cmp	r2, r3
 8007404:	d154      	bne.n	80074b0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007406:	4b2c      	ldr	r3, [pc, #176]	@ (80074b8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	69ba      	ldr	r2, [r7, #24]
 800740c:	429a      	cmp	r2, r3
 800740e:	d10b      	bne.n	8007428 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8007410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007414:	f383 8811 	msr	BASEPRI, r3
 8007418:	f3bf 8f6f 	isb	sy
 800741c:	f3bf 8f4f 	dsb	sy
 8007420:	60bb      	str	r3, [r7, #8]
}
 8007422:	bf00      	nop
 8007424:	bf00      	nop
 8007426:	e7fd      	b.n	8007424 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007428:	69bb      	ldr	r3, [r7, #24]
 800742a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800742c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800742e:	69bb      	ldr	r3, [r7, #24]
 8007430:	69fa      	ldr	r2, [r7, #28]
 8007432:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007434:	69bb      	ldr	r3, [r7, #24]
 8007436:	699b      	ldr	r3, [r3, #24]
 8007438:	2b00      	cmp	r3, #0
 800743a:	db04      	blt.n	8007446 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800743c:	69fb      	ldr	r3, [r7, #28]
 800743e:	f1c3 0207 	rsb	r2, r3, #7
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007446:	69bb      	ldr	r3, [r7, #24]
 8007448:	6959      	ldr	r1, [r3, #20]
 800744a:	693a      	ldr	r2, [r7, #16]
 800744c:	4613      	mov	r3, r2
 800744e:	009b      	lsls	r3, r3, #2
 8007450:	4413      	add	r3, r2
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	4a19      	ldr	r2, [pc, #100]	@ (80074bc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007456:	4413      	add	r3, r2
 8007458:	4299      	cmp	r1, r3
 800745a:	d129      	bne.n	80074b0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800745c:	69bb      	ldr	r3, [r7, #24]
 800745e:	3304      	adds	r3, #4
 8007460:	4618      	mov	r0, r3
 8007462:	f7fe f915 	bl	8005690 <uxListRemove>
 8007466:	4603      	mov	r3, r0
 8007468:	2b00      	cmp	r3, #0
 800746a:	d10a      	bne.n	8007482 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800746c:	69bb      	ldr	r3, [r7, #24]
 800746e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007470:	2201      	movs	r2, #1
 8007472:	fa02 f303 	lsl.w	r3, r2, r3
 8007476:	43da      	mvns	r2, r3
 8007478:	4b11      	ldr	r3, [pc, #68]	@ (80074c0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4013      	ands	r3, r2
 800747e:	4a10      	ldr	r2, [pc, #64]	@ (80074c0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8007480:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007482:	69bb      	ldr	r3, [r7, #24]
 8007484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007486:	2201      	movs	r2, #1
 8007488:	409a      	lsls	r2, r3
 800748a:	4b0d      	ldr	r3, [pc, #52]	@ (80074c0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4313      	orrs	r3, r2
 8007490:	4a0b      	ldr	r2, [pc, #44]	@ (80074c0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8007492:	6013      	str	r3, [r2, #0]
 8007494:	69bb      	ldr	r3, [r7, #24]
 8007496:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007498:	4613      	mov	r3, r2
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	4413      	add	r3, r2
 800749e:	009b      	lsls	r3, r3, #2
 80074a0:	4a06      	ldr	r2, [pc, #24]	@ (80074bc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80074a2:	441a      	add	r2, r3
 80074a4:	69bb      	ldr	r3, [r7, #24]
 80074a6:	3304      	adds	r3, #4
 80074a8:	4619      	mov	r1, r3
 80074aa:	4610      	mov	r0, r2
 80074ac:	f7fe f893 	bl	80055d6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80074b0:	bf00      	nop
 80074b2:	3720      	adds	r7, #32
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}
 80074b8:	200004b4 	.word	0x200004b4
 80074bc:	200004b8 	.word	0x200004b8
 80074c0:	200005bc 	.word	0x200005bc

080074c4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80074c4:	b480      	push	{r7}
 80074c6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80074c8:	4b07      	ldr	r3, [pc, #28]	@ (80074e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d004      	beq.n	80074da <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80074d0:	4b05      	ldr	r3, [pc, #20]	@ (80074e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80074d6:	3201      	adds	r2, #1
 80074d8:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80074da:	4b03      	ldr	r3, [pc, #12]	@ (80074e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80074dc:	681b      	ldr	r3, [r3, #0]
	}
 80074de:	4618      	mov	r0, r3
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr
 80074e8:	200004b4 	.word	0x200004b4

080074ec <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b086      	sub	sp, #24
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	607a      	str	r2, [r7, #4]
 80074f8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80074fa:	f000 fb95 	bl	8007c28 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80074fe:	4b29      	ldr	r3, [pc, #164]	@ (80075a4 <xTaskNotifyWait+0xb8>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 8007506:	b2db      	uxtb	r3, r3
 8007508:	2b02      	cmp	r3, #2
 800750a:	d01c      	beq.n	8007546 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800750c:	4b25      	ldr	r3, [pc, #148]	@ (80075a4 <xTaskNotifyWait+0xb8>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 8007514:	68fa      	ldr	r2, [r7, #12]
 8007516:	43d2      	mvns	r2, r2
 8007518:	400a      	ands	r2, r1
 800751a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800751e:	4b21      	ldr	r3, [pc, #132]	@ (80075a4 <xTaskNotifyWait+0xb8>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	2201      	movs	r2, #1
 8007524:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8

				if( xTicksToWait > ( TickType_t ) 0 )
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d00b      	beq.n	8007546 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800752e:	2101      	movs	r1, #1
 8007530:	6838      	ldr	r0, [r7, #0]
 8007532:	f000 f9e3 	bl	80078fc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8007536:	4b1c      	ldr	r3, [pc, #112]	@ (80075a8 <xTaskNotifyWait+0xbc>)
 8007538:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800753c:	601a      	str	r2, [r3, #0]
 800753e:	f3bf 8f4f 	dsb	sy
 8007542:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007546:	f000 fba1 	bl	8007c8c <vPortExitCritical>

		taskENTER_CRITICAL();
 800754a:	f000 fb6d 	bl	8007c28 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d005      	beq.n	8007560 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8007554:	4b13      	ldr	r3, [pc, #76]	@ (80075a4 <xTaskNotifyWait+0xb8>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8007560:	4b10      	ldr	r3, [pc, #64]	@ (80075a4 <xTaskNotifyWait+0xb8>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 8007568:	b2db      	uxtb	r3, r3
 800756a:	2b02      	cmp	r3, #2
 800756c:	d002      	beq.n	8007574 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800756e:	2300      	movs	r3, #0
 8007570:	617b      	str	r3, [r7, #20]
 8007572:	e00a      	b.n	800758a <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8007574:	4b0b      	ldr	r3, [pc, #44]	@ (80075a4 <xTaskNotifyWait+0xb8>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 800757c:	68ba      	ldr	r2, [r7, #8]
 800757e:	43d2      	mvns	r2, r2
 8007580:	400a      	ands	r2, r1
 8007582:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
				xReturn = pdTRUE;
 8007586:	2301      	movs	r3, #1
 8007588:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800758a:	4b06      	ldr	r3, [pc, #24]	@ (80075a4 <xTaskNotifyWait+0xb8>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	2200      	movs	r2, #0
 8007590:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
		}
		taskEXIT_CRITICAL();
 8007594:	f000 fb7a 	bl	8007c8c <vPortExitCritical>

		return xReturn;
 8007598:	697b      	ldr	r3, [r7, #20]
	}
 800759a:	4618      	mov	r0, r3
 800759c:	3718      	adds	r7, #24
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
 80075a2:	bf00      	nop
 80075a4:	200004b4 	.word	0x200004b4
 80075a8:	e000ed04 	.word	0xe000ed04

080075ac <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b08a      	sub	sp, #40	@ 0x28
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	60b9      	str	r1, [r7, #8]
 80075b6:	603b      	str	r3, [r7, #0]
 80075b8:	4613      	mov	r3, r2
 80075ba:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80075bc:	2301      	movs	r3, #1
 80075be:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d10b      	bne.n	80075de <xTaskGenericNotify+0x32>
	__asm volatile
 80075c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075ca:	f383 8811 	msr	BASEPRI, r3
 80075ce:	f3bf 8f6f 	isb	sy
 80075d2:	f3bf 8f4f 	dsb	sy
 80075d6:	61bb      	str	r3, [r7, #24]
}
 80075d8:	bf00      	nop
 80075da:	bf00      	nop
 80075dc:	e7fd      	b.n	80075da <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80075e2:	f000 fb21 	bl	8007c28 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d004      	beq.n	80075f6 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80075ec:	6a3b      	ldr	r3, [r7, #32]
 80075ee:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80075f6:	6a3b      	ldr	r3, [r7, #32]
 80075f8:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 80075fc:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80075fe:	6a3b      	ldr	r3, [r7, #32]
 8007600:	2202      	movs	r2, #2
 8007602:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8

			switch( eAction )
 8007606:	79fb      	ldrb	r3, [r7, #7]
 8007608:	2b04      	cmp	r3, #4
 800760a:	d82e      	bhi.n	800766a <xTaskGenericNotify+0xbe>
 800760c:	a201      	add	r2, pc, #4	@ (adr r2, 8007614 <xTaskGenericNotify+0x68>)
 800760e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007612:	bf00      	nop
 8007614:	0800768f 	.word	0x0800768f
 8007618:	08007629 	.word	0x08007629
 800761c:	0800763b 	.word	0x0800763b
 8007620:	0800764b 	.word	0x0800764b
 8007624:	08007655 	.word	0x08007655
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007628:	6a3b      	ldr	r3, [r7, #32]
 800762a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	431a      	orrs	r2, r3
 8007632:	6a3b      	ldr	r3, [r7, #32]
 8007634:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
					break;
 8007638:	e02c      	b.n	8007694 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800763a:	6a3b      	ldr	r3, [r7, #32]
 800763c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007640:	1c5a      	adds	r2, r3, #1
 8007642:	6a3b      	ldr	r3, [r7, #32]
 8007644:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
					break;
 8007648:	e024      	b.n	8007694 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800764a:	6a3b      	ldr	r3, [r7, #32]
 800764c:	68ba      	ldr	r2, [r7, #8]
 800764e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
					break;
 8007652:	e01f      	b.n	8007694 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007654:	7ffb      	ldrb	r3, [r7, #31]
 8007656:	2b02      	cmp	r3, #2
 8007658:	d004      	beq.n	8007664 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800765a:	6a3b      	ldr	r3, [r7, #32]
 800765c:	68ba      	ldr	r2, [r7, #8]
 800765e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8007662:	e017      	b.n	8007694 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 8007664:	2300      	movs	r3, #0
 8007666:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8007668:	e014      	b.n	8007694 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800766a:	6a3b      	ldr	r3, [r7, #32]
 800766c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007674:	d00d      	beq.n	8007692 <xTaskGenericNotify+0xe6>
	__asm volatile
 8007676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800767a:	f383 8811 	msr	BASEPRI, r3
 800767e:	f3bf 8f6f 	isb	sy
 8007682:	f3bf 8f4f 	dsb	sy
 8007686:	617b      	str	r3, [r7, #20]
}
 8007688:	bf00      	nop
 800768a:	bf00      	nop
 800768c:	e7fd      	b.n	800768a <xTaskGenericNotify+0xde>
					break;
 800768e:	bf00      	nop
 8007690:	e000      	b.n	8007694 <xTaskGenericNotify+0xe8>

					break;
 8007692:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007694:	7ffb      	ldrb	r3, [r7, #31]
 8007696:	2b01      	cmp	r3, #1
 8007698:	d13a      	bne.n	8007710 <xTaskGenericNotify+0x164>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800769a:	6a3b      	ldr	r3, [r7, #32]
 800769c:	3304      	adds	r3, #4
 800769e:	4618      	mov	r0, r3
 80076a0:	f7fd fff6 	bl	8005690 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80076a4:	6a3b      	ldr	r3, [r7, #32]
 80076a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076a8:	2201      	movs	r2, #1
 80076aa:	409a      	lsls	r2, r3
 80076ac:	4b1c      	ldr	r3, [pc, #112]	@ (8007720 <xTaskGenericNotify+0x174>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4313      	orrs	r3, r2
 80076b2:	4a1b      	ldr	r2, [pc, #108]	@ (8007720 <xTaskGenericNotify+0x174>)
 80076b4:	6013      	str	r3, [r2, #0]
 80076b6:	6a3b      	ldr	r3, [r7, #32]
 80076b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076ba:	4613      	mov	r3, r2
 80076bc:	009b      	lsls	r3, r3, #2
 80076be:	4413      	add	r3, r2
 80076c0:	009b      	lsls	r3, r3, #2
 80076c2:	4a18      	ldr	r2, [pc, #96]	@ (8007724 <xTaskGenericNotify+0x178>)
 80076c4:	441a      	add	r2, r3
 80076c6:	6a3b      	ldr	r3, [r7, #32]
 80076c8:	3304      	adds	r3, #4
 80076ca:	4619      	mov	r1, r3
 80076cc:	4610      	mov	r0, r2
 80076ce:	f7fd ff82 	bl	80055d6 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80076d2:	6a3b      	ldr	r3, [r7, #32]
 80076d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d00b      	beq.n	80076f2 <xTaskGenericNotify+0x146>
	__asm volatile
 80076da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076de:	f383 8811 	msr	BASEPRI, r3
 80076e2:	f3bf 8f6f 	isb	sy
 80076e6:	f3bf 8f4f 	dsb	sy
 80076ea:	613b      	str	r3, [r7, #16]
}
 80076ec:	bf00      	nop
 80076ee:	bf00      	nop
 80076f0:	e7fd      	b.n	80076ee <xTaskGenericNotify+0x142>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80076f2:	6a3b      	ldr	r3, [r7, #32]
 80076f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076f6:	4b0c      	ldr	r3, [pc, #48]	@ (8007728 <xTaskGenericNotify+0x17c>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d907      	bls.n	8007710 <xTaskGenericNotify+0x164>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8007700:	4b0a      	ldr	r3, [pc, #40]	@ (800772c <xTaskGenericNotify+0x180>)
 8007702:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007706:	601a      	str	r2, [r3, #0]
 8007708:	f3bf 8f4f 	dsb	sy
 800770c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007710:	f000 fabc 	bl	8007c8c <vPortExitCritical>

		return xReturn;
 8007714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8007716:	4618      	mov	r0, r3
 8007718:	3728      	adds	r7, #40	@ 0x28
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
 800771e:	bf00      	nop
 8007720:	200005bc 	.word	0x200005bc
 8007724:	200004b8 	.word	0x200004b8
 8007728:	200004b4 	.word	0x200004b4
 800772c:	e000ed04 	.word	0xe000ed04

08007730 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007730:	b580      	push	{r7, lr}
 8007732:	b08e      	sub	sp, #56	@ 0x38
 8007734:	af00      	add	r7, sp, #0
 8007736:	60f8      	str	r0, [r7, #12]
 8007738:	60b9      	str	r1, [r7, #8]
 800773a:	603b      	str	r3, [r7, #0]
 800773c:	4613      	mov	r3, r2
 800773e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8007740:	2301      	movs	r3, #1
 8007742:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d10b      	bne.n	8007762 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 800774a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800774e:	f383 8811 	msr	BASEPRI, r3
 8007752:	f3bf 8f6f 	isb	sy
 8007756:	f3bf 8f4f 	dsb	sy
 800775a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800775c:	bf00      	nop
 800775e:	bf00      	nop
 8007760:	e7fd      	b.n	800775e <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007762:	f000 fb41 	bl	8007de8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 800776a:	f3ef 8211 	mrs	r2, BASEPRI
 800776e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007772:	f383 8811 	msr	BASEPRI, r3
 8007776:	f3bf 8f6f 	isb	sy
 800777a:	f3bf 8f4f 	dsb	sy
 800777e:	623a      	str	r2, [r7, #32]
 8007780:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8007782:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007784:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d004      	beq.n	8007796 <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800778c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800778e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007798:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 800779c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80077a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077a2:	2202      	movs	r2, #2
 80077a4:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8

			switch( eAction )
 80077a8:	79fb      	ldrb	r3, [r7, #7]
 80077aa:	2b04      	cmp	r3, #4
 80077ac:	d82e      	bhi.n	800780c <xTaskGenericNotifyFromISR+0xdc>
 80077ae:	a201      	add	r2, pc, #4	@ (adr r2, 80077b4 <xTaskGenericNotifyFromISR+0x84>)
 80077b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077b4:	08007831 	.word	0x08007831
 80077b8:	080077c9 	.word	0x080077c9
 80077bc:	080077db 	.word	0x080077db
 80077c0:	080077eb 	.word	0x080077eb
 80077c4:	080077f5 	.word	0x080077f5
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80077c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ca:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	431a      	orrs	r2, r3
 80077d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077d4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
					break;
 80077d8:	e02d      	b.n	8007836 <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80077da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80077e0:	1c5a      	adds	r2, r3, #1
 80077e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
					break;
 80077e8:	e025      	b.n	8007836 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80077ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ec:	68ba      	ldr	r2, [r7, #8]
 80077ee:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
					break;
 80077f2:	e020      	b.n	8007836 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80077f4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80077f8:	2b02      	cmp	r3, #2
 80077fa:	d004      	beq.n	8007806 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80077fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077fe:	68ba      	ldr	r2, [r7, #8]
 8007800:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8007804:	e017      	b.n	8007836 <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 8007806:	2300      	movs	r3, #0
 8007808:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 800780a:	e014      	b.n	8007836 <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800780c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800780e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007816:	d00d      	beq.n	8007834 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 8007818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800781c:	f383 8811 	msr	BASEPRI, r3
 8007820:	f3bf 8f6f 	isb	sy
 8007824:	f3bf 8f4f 	dsb	sy
 8007828:	61bb      	str	r3, [r7, #24]
}
 800782a:	bf00      	nop
 800782c:	bf00      	nop
 800782e:	e7fd      	b.n	800782c <xTaskGenericNotifyFromISR+0xfc>
					break;
 8007830:	bf00      	nop
 8007832:	e000      	b.n	8007836 <xTaskGenericNotifyFromISR+0x106>
					break;
 8007834:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007836:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800783a:	2b01      	cmp	r3, #1
 800783c:	d146      	bne.n	80078cc <xTaskGenericNotifyFromISR+0x19c>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800783e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007842:	2b00      	cmp	r3, #0
 8007844:	d00b      	beq.n	800785e <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 8007846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800784a:	f383 8811 	msr	BASEPRI, r3
 800784e:	f3bf 8f6f 	isb	sy
 8007852:	f3bf 8f4f 	dsb	sy
 8007856:	617b      	str	r3, [r7, #20]
}
 8007858:	bf00      	nop
 800785a:	bf00      	nop
 800785c:	e7fd      	b.n	800785a <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800785e:	4b21      	ldr	r3, [pc, #132]	@ (80078e4 <xTaskGenericNotifyFromISR+0x1b4>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d11c      	bne.n	80078a0 <xTaskGenericNotifyFromISR+0x170>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007868:	3304      	adds	r3, #4
 800786a:	4618      	mov	r0, r3
 800786c:	f7fd ff10 	bl	8005690 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007874:	2201      	movs	r2, #1
 8007876:	409a      	lsls	r2, r3
 8007878:	4b1b      	ldr	r3, [pc, #108]	@ (80078e8 <xTaskGenericNotifyFromISR+0x1b8>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4313      	orrs	r3, r2
 800787e:	4a1a      	ldr	r2, [pc, #104]	@ (80078e8 <xTaskGenericNotifyFromISR+0x1b8>)
 8007880:	6013      	str	r3, [r2, #0]
 8007882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007884:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007886:	4613      	mov	r3, r2
 8007888:	009b      	lsls	r3, r3, #2
 800788a:	4413      	add	r3, r2
 800788c:	009b      	lsls	r3, r3, #2
 800788e:	4a17      	ldr	r2, [pc, #92]	@ (80078ec <xTaskGenericNotifyFromISR+0x1bc>)
 8007890:	441a      	add	r2, r3
 8007892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007894:	3304      	adds	r3, #4
 8007896:	4619      	mov	r1, r3
 8007898:	4610      	mov	r0, r2
 800789a:	f7fd fe9c 	bl	80055d6 <vListInsertEnd>
 800789e:	e005      	b.n	80078ac <xTaskGenericNotifyFromISR+0x17c>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80078a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078a2:	3318      	adds	r3, #24
 80078a4:	4619      	mov	r1, r3
 80078a6:	4812      	ldr	r0, [pc, #72]	@ (80078f0 <xTaskGenericNotifyFromISR+0x1c0>)
 80078a8:	f7fd fe95 	bl	80055d6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80078ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078b0:	4b10      	ldr	r3, [pc, #64]	@ (80078f4 <xTaskGenericNotifyFromISR+0x1c4>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d908      	bls.n	80078cc <xTaskGenericNotifyFromISR+0x19c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80078ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d002      	beq.n	80078c6 <xTaskGenericNotifyFromISR+0x196>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80078c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078c2:	2201      	movs	r2, #1
 80078c4:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80078c6:	4b0c      	ldr	r3, [pc, #48]	@ (80078f8 <xTaskGenericNotifyFromISR+0x1c8>)
 80078c8:	2201      	movs	r2, #1
 80078ca:	601a      	str	r2, [r3, #0]
 80078cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078ce:	613b      	str	r3, [r7, #16]
	__asm volatile
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	f383 8811 	msr	BASEPRI, r3
}
 80078d6:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80078d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 80078da:	4618      	mov	r0, r3
 80078dc:	3738      	adds	r7, #56	@ 0x38
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}
 80078e2:	bf00      	nop
 80078e4:	200005dc 	.word	0x200005dc
 80078e8:	200005bc 	.word	0x200005bc
 80078ec:	200004b8 	.word	0x200004b8
 80078f0:	20000574 	.word	0x20000574
 80078f4:	200004b4 	.word	0x200004b4
 80078f8:	200005c8 	.word	0x200005c8

080078fc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b084      	sub	sp, #16
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007906:	4b29      	ldr	r3, [pc, #164]	@ (80079ac <prvAddCurrentTaskToDelayedList+0xb0>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800790c:	4b28      	ldr	r3, [pc, #160]	@ (80079b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	3304      	adds	r3, #4
 8007912:	4618      	mov	r0, r3
 8007914:	f7fd febc 	bl	8005690 <uxListRemove>
 8007918:	4603      	mov	r3, r0
 800791a:	2b00      	cmp	r3, #0
 800791c:	d10b      	bne.n	8007936 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800791e:	4b24      	ldr	r3, [pc, #144]	@ (80079b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007924:	2201      	movs	r2, #1
 8007926:	fa02 f303 	lsl.w	r3, r2, r3
 800792a:	43da      	mvns	r2, r3
 800792c:	4b21      	ldr	r3, [pc, #132]	@ (80079b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4013      	ands	r3, r2
 8007932:	4a20      	ldr	r2, [pc, #128]	@ (80079b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007934:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800793c:	d10a      	bne.n	8007954 <prvAddCurrentTaskToDelayedList+0x58>
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d007      	beq.n	8007954 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007944:	4b1a      	ldr	r3, [pc, #104]	@ (80079b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	3304      	adds	r3, #4
 800794a:	4619      	mov	r1, r3
 800794c:	481a      	ldr	r0, [pc, #104]	@ (80079b8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800794e:	f7fd fe42 	bl	80055d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007952:	e026      	b.n	80079a2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007954:	68fa      	ldr	r2, [r7, #12]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	4413      	add	r3, r2
 800795a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800795c:	4b14      	ldr	r3, [pc, #80]	@ (80079b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	68ba      	ldr	r2, [r7, #8]
 8007962:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007964:	68ba      	ldr	r2, [r7, #8]
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	429a      	cmp	r2, r3
 800796a:	d209      	bcs.n	8007980 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800796c:	4b13      	ldr	r3, [pc, #76]	@ (80079bc <prvAddCurrentTaskToDelayedList+0xc0>)
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	4b0f      	ldr	r3, [pc, #60]	@ (80079b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	3304      	adds	r3, #4
 8007976:	4619      	mov	r1, r3
 8007978:	4610      	mov	r0, r2
 800797a:	f7fd fe50 	bl	800561e <vListInsert>
}
 800797e:	e010      	b.n	80079a2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007980:	4b0f      	ldr	r3, [pc, #60]	@ (80079c0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007982:	681a      	ldr	r2, [r3, #0]
 8007984:	4b0a      	ldr	r3, [pc, #40]	@ (80079b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	3304      	adds	r3, #4
 800798a:	4619      	mov	r1, r3
 800798c:	4610      	mov	r0, r2
 800798e:	f7fd fe46 	bl	800561e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007992:	4b0c      	ldr	r3, [pc, #48]	@ (80079c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	68ba      	ldr	r2, [r7, #8]
 8007998:	429a      	cmp	r2, r3
 800799a:	d202      	bcs.n	80079a2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800799c:	4a09      	ldr	r2, [pc, #36]	@ (80079c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	6013      	str	r3, [r2, #0]
}
 80079a2:	bf00      	nop
 80079a4:	3710      	adds	r7, #16
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
 80079aa:	bf00      	nop
 80079ac:	200005b8 	.word	0x200005b8
 80079b0:	200004b4 	.word	0x200004b4
 80079b4:	200005bc 	.word	0x200005bc
 80079b8:	200005a0 	.word	0x200005a0
 80079bc:	20000570 	.word	0x20000570
 80079c0:	2000056c 	.word	0x2000056c
 80079c4:	200005d4 	.word	0x200005d4

080079c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80079c8:	b480      	push	{r7}
 80079ca:	b085      	sub	sp, #20
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	60b9      	str	r1, [r7, #8]
 80079d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	3b04      	subs	r3, #4
 80079d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80079e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	3b04      	subs	r3, #4
 80079e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	f023 0201 	bic.w	r2, r3, #1
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	3b04      	subs	r3, #4
 80079f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80079f8:	4a0c      	ldr	r2, [pc, #48]	@ (8007a2c <pxPortInitialiseStack+0x64>)
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	3b14      	subs	r3, #20
 8007a02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	3b04      	subs	r3, #4
 8007a0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f06f 0202 	mvn.w	r2, #2
 8007a16:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	3b20      	subs	r3, #32
 8007a1c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3714      	adds	r7, #20
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr
 8007a2c:	08007a31 	.word	0x08007a31

08007a30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007a30:	b480      	push	{r7}
 8007a32:	b085      	sub	sp, #20
 8007a34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007a36:	2300      	movs	r3, #0
 8007a38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007a3a:	4b13      	ldr	r3, [pc, #76]	@ (8007a88 <prvTaskExitError+0x58>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a42:	d00b      	beq.n	8007a5c <prvTaskExitError+0x2c>
	__asm volatile
 8007a44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a48:	f383 8811 	msr	BASEPRI, r3
 8007a4c:	f3bf 8f6f 	isb	sy
 8007a50:	f3bf 8f4f 	dsb	sy
 8007a54:	60fb      	str	r3, [r7, #12]
}
 8007a56:	bf00      	nop
 8007a58:	bf00      	nop
 8007a5a:	e7fd      	b.n	8007a58 <prvTaskExitError+0x28>
	__asm volatile
 8007a5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a60:	f383 8811 	msr	BASEPRI, r3
 8007a64:	f3bf 8f6f 	isb	sy
 8007a68:	f3bf 8f4f 	dsb	sy
 8007a6c:	60bb      	str	r3, [r7, #8]
}
 8007a6e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007a70:	bf00      	nop
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d0fc      	beq.n	8007a72 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007a78:	bf00      	nop
 8007a7a:	bf00      	nop
 8007a7c:	3714      	adds	r7, #20
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr
 8007a86:	bf00      	nop
 8007a88:	2000000c 	.word	0x2000000c
 8007a8c:	00000000 	.word	0x00000000

08007a90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007a90:	4b07      	ldr	r3, [pc, #28]	@ (8007ab0 <pxCurrentTCBConst2>)
 8007a92:	6819      	ldr	r1, [r3, #0]
 8007a94:	6808      	ldr	r0, [r1, #0]
 8007a96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a9a:	f380 8809 	msr	PSP, r0
 8007a9e:	f3bf 8f6f 	isb	sy
 8007aa2:	f04f 0000 	mov.w	r0, #0
 8007aa6:	f380 8811 	msr	BASEPRI, r0
 8007aaa:	4770      	bx	lr
 8007aac:	f3af 8000 	nop.w

08007ab0 <pxCurrentTCBConst2>:
 8007ab0:	200004b4 	.word	0x200004b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007ab4:	bf00      	nop
 8007ab6:	bf00      	nop

08007ab8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007ab8:	4808      	ldr	r0, [pc, #32]	@ (8007adc <prvPortStartFirstTask+0x24>)
 8007aba:	6800      	ldr	r0, [r0, #0]
 8007abc:	6800      	ldr	r0, [r0, #0]
 8007abe:	f380 8808 	msr	MSP, r0
 8007ac2:	f04f 0000 	mov.w	r0, #0
 8007ac6:	f380 8814 	msr	CONTROL, r0
 8007aca:	b662      	cpsie	i
 8007acc:	b661      	cpsie	f
 8007ace:	f3bf 8f4f 	dsb	sy
 8007ad2:	f3bf 8f6f 	isb	sy
 8007ad6:	df00      	svc	0
 8007ad8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007ada:	bf00      	nop
 8007adc:	e000ed08 	.word	0xe000ed08

08007ae0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b086      	sub	sp, #24
 8007ae4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007ae6:	4b47      	ldr	r3, [pc, #284]	@ (8007c04 <xPortStartScheduler+0x124>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a47      	ldr	r2, [pc, #284]	@ (8007c08 <xPortStartScheduler+0x128>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d10b      	bne.n	8007b08 <xPortStartScheduler+0x28>
	__asm volatile
 8007af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007af4:	f383 8811 	msr	BASEPRI, r3
 8007af8:	f3bf 8f6f 	isb	sy
 8007afc:	f3bf 8f4f 	dsb	sy
 8007b00:	613b      	str	r3, [r7, #16]
}
 8007b02:	bf00      	nop
 8007b04:	bf00      	nop
 8007b06:	e7fd      	b.n	8007b04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007b08:	4b3e      	ldr	r3, [pc, #248]	@ (8007c04 <xPortStartScheduler+0x124>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a3f      	ldr	r2, [pc, #252]	@ (8007c0c <xPortStartScheduler+0x12c>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d10b      	bne.n	8007b2a <xPortStartScheduler+0x4a>
	__asm volatile
 8007b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b16:	f383 8811 	msr	BASEPRI, r3
 8007b1a:	f3bf 8f6f 	isb	sy
 8007b1e:	f3bf 8f4f 	dsb	sy
 8007b22:	60fb      	str	r3, [r7, #12]
}
 8007b24:	bf00      	nop
 8007b26:	bf00      	nop
 8007b28:	e7fd      	b.n	8007b26 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007b2a:	4b39      	ldr	r3, [pc, #228]	@ (8007c10 <xPortStartScheduler+0x130>)
 8007b2c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	b2db      	uxtb	r3, r3
 8007b34:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	22ff      	movs	r2, #255	@ 0xff
 8007b3a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	781b      	ldrb	r3, [r3, #0]
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007b44:	78fb      	ldrb	r3, [r7, #3]
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007b4c:	b2da      	uxtb	r2, r3
 8007b4e:	4b31      	ldr	r3, [pc, #196]	@ (8007c14 <xPortStartScheduler+0x134>)
 8007b50:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007b52:	4b31      	ldr	r3, [pc, #196]	@ (8007c18 <xPortStartScheduler+0x138>)
 8007b54:	2207      	movs	r2, #7
 8007b56:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b58:	e009      	b.n	8007b6e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007b5a:	4b2f      	ldr	r3, [pc, #188]	@ (8007c18 <xPortStartScheduler+0x138>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	3b01      	subs	r3, #1
 8007b60:	4a2d      	ldr	r2, [pc, #180]	@ (8007c18 <xPortStartScheduler+0x138>)
 8007b62:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007b64:	78fb      	ldrb	r3, [r7, #3]
 8007b66:	b2db      	uxtb	r3, r3
 8007b68:	005b      	lsls	r3, r3, #1
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b6e:	78fb      	ldrb	r3, [r7, #3]
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b76:	2b80      	cmp	r3, #128	@ 0x80
 8007b78:	d0ef      	beq.n	8007b5a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007b7a:	4b27      	ldr	r3, [pc, #156]	@ (8007c18 <xPortStartScheduler+0x138>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f1c3 0307 	rsb	r3, r3, #7
 8007b82:	2b04      	cmp	r3, #4
 8007b84:	d00b      	beq.n	8007b9e <xPortStartScheduler+0xbe>
	__asm volatile
 8007b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b8a:	f383 8811 	msr	BASEPRI, r3
 8007b8e:	f3bf 8f6f 	isb	sy
 8007b92:	f3bf 8f4f 	dsb	sy
 8007b96:	60bb      	str	r3, [r7, #8]
}
 8007b98:	bf00      	nop
 8007b9a:	bf00      	nop
 8007b9c:	e7fd      	b.n	8007b9a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007b9e:	4b1e      	ldr	r3, [pc, #120]	@ (8007c18 <xPortStartScheduler+0x138>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	021b      	lsls	r3, r3, #8
 8007ba4:	4a1c      	ldr	r2, [pc, #112]	@ (8007c18 <xPortStartScheduler+0x138>)
 8007ba6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8007c18 <xPortStartScheduler+0x138>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007bb0:	4a19      	ldr	r2, [pc, #100]	@ (8007c18 <xPortStartScheduler+0x138>)
 8007bb2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	b2da      	uxtb	r2, r3
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007bbc:	4b17      	ldr	r3, [pc, #92]	@ (8007c1c <xPortStartScheduler+0x13c>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a16      	ldr	r2, [pc, #88]	@ (8007c1c <xPortStartScheduler+0x13c>)
 8007bc2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007bc6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007bc8:	4b14      	ldr	r3, [pc, #80]	@ (8007c1c <xPortStartScheduler+0x13c>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a13      	ldr	r2, [pc, #76]	@ (8007c1c <xPortStartScheduler+0x13c>)
 8007bce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007bd2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007bd4:	f000 f8da 	bl	8007d8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007bd8:	4b11      	ldr	r3, [pc, #68]	@ (8007c20 <xPortStartScheduler+0x140>)
 8007bda:	2200      	movs	r2, #0
 8007bdc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007bde:	f000 f8f9 	bl	8007dd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007be2:	4b10      	ldr	r3, [pc, #64]	@ (8007c24 <xPortStartScheduler+0x144>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a0f      	ldr	r2, [pc, #60]	@ (8007c24 <xPortStartScheduler+0x144>)
 8007be8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007bec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007bee:	f7ff ff63 	bl	8007ab8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007bf2:	f7ff f851 	bl	8006c98 <vTaskSwitchContext>
	prvTaskExitError();
 8007bf6:	f7ff ff1b 	bl	8007a30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007bfa:	2300      	movs	r3, #0
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3718      	adds	r7, #24
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}
 8007c04:	e000ed00 	.word	0xe000ed00
 8007c08:	410fc271 	.word	0x410fc271
 8007c0c:	410fc270 	.word	0x410fc270
 8007c10:	e000e400 	.word	0xe000e400
 8007c14:	200005e8 	.word	0x200005e8
 8007c18:	200005ec 	.word	0x200005ec
 8007c1c:	e000ed20 	.word	0xe000ed20
 8007c20:	2000000c 	.word	0x2000000c
 8007c24:	e000ef34 	.word	0xe000ef34

08007c28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b083      	sub	sp, #12
 8007c2c:	af00      	add	r7, sp, #0
	__asm volatile
 8007c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c32:	f383 8811 	msr	BASEPRI, r3
 8007c36:	f3bf 8f6f 	isb	sy
 8007c3a:	f3bf 8f4f 	dsb	sy
 8007c3e:	607b      	str	r3, [r7, #4]
}
 8007c40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007c42:	4b10      	ldr	r3, [pc, #64]	@ (8007c84 <vPortEnterCritical+0x5c>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	3301      	adds	r3, #1
 8007c48:	4a0e      	ldr	r2, [pc, #56]	@ (8007c84 <vPortEnterCritical+0x5c>)
 8007c4a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007c4c:	4b0d      	ldr	r3, [pc, #52]	@ (8007c84 <vPortEnterCritical+0x5c>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	d110      	bne.n	8007c76 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007c54:	4b0c      	ldr	r3, [pc, #48]	@ (8007c88 <vPortEnterCritical+0x60>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d00b      	beq.n	8007c76 <vPortEnterCritical+0x4e>
	__asm volatile
 8007c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c62:	f383 8811 	msr	BASEPRI, r3
 8007c66:	f3bf 8f6f 	isb	sy
 8007c6a:	f3bf 8f4f 	dsb	sy
 8007c6e:	603b      	str	r3, [r7, #0]
}
 8007c70:	bf00      	nop
 8007c72:	bf00      	nop
 8007c74:	e7fd      	b.n	8007c72 <vPortEnterCritical+0x4a>
	}
}
 8007c76:	bf00      	nop
 8007c78:	370c      	adds	r7, #12
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr
 8007c82:	bf00      	nop
 8007c84:	2000000c 	.word	0x2000000c
 8007c88:	e000ed04 	.word	0xe000ed04

08007c8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b083      	sub	sp, #12
 8007c90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007c92:	4b12      	ldr	r3, [pc, #72]	@ (8007cdc <vPortExitCritical+0x50>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d10b      	bne.n	8007cb2 <vPortExitCritical+0x26>
	__asm volatile
 8007c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c9e:	f383 8811 	msr	BASEPRI, r3
 8007ca2:	f3bf 8f6f 	isb	sy
 8007ca6:	f3bf 8f4f 	dsb	sy
 8007caa:	607b      	str	r3, [r7, #4]
}
 8007cac:	bf00      	nop
 8007cae:	bf00      	nop
 8007cb0:	e7fd      	b.n	8007cae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007cb2:	4b0a      	ldr	r3, [pc, #40]	@ (8007cdc <vPortExitCritical+0x50>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	3b01      	subs	r3, #1
 8007cb8:	4a08      	ldr	r2, [pc, #32]	@ (8007cdc <vPortExitCritical+0x50>)
 8007cba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007cbc:	4b07      	ldr	r3, [pc, #28]	@ (8007cdc <vPortExitCritical+0x50>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d105      	bne.n	8007cd0 <vPortExitCritical+0x44>
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	f383 8811 	msr	BASEPRI, r3
}
 8007cce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007cd0:	bf00      	nop
 8007cd2:	370c      	adds	r7, #12
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr
 8007cdc:	2000000c 	.word	0x2000000c

08007ce0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007ce0:	f3ef 8009 	mrs	r0, PSP
 8007ce4:	f3bf 8f6f 	isb	sy
 8007ce8:	4b15      	ldr	r3, [pc, #84]	@ (8007d40 <pxCurrentTCBConst>)
 8007cea:	681a      	ldr	r2, [r3, #0]
 8007cec:	f01e 0f10 	tst.w	lr, #16
 8007cf0:	bf08      	it	eq
 8007cf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007cf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cfa:	6010      	str	r0, [r2, #0]
 8007cfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007d00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007d04:	f380 8811 	msr	BASEPRI, r0
 8007d08:	f3bf 8f4f 	dsb	sy
 8007d0c:	f3bf 8f6f 	isb	sy
 8007d10:	f7fe ffc2 	bl	8006c98 <vTaskSwitchContext>
 8007d14:	f04f 0000 	mov.w	r0, #0
 8007d18:	f380 8811 	msr	BASEPRI, r0
 8007d1c:	bc09      	pop	{r0, r3}
 8007d1e:	6819      	ldr	r1, [r3, #0]
 8007d20:	6808      	ldr	r0, [r1, #0]
 8007d22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d26:	f01e 0f10 	tst.w	lr, #16
 8007d2a:	bf08      	it	eq
 8007d2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007d30:	f380 8809 	msr	PSP, r0
 8007d34:	f3bf 8f6f 	isb	sy
 8007d38:	4770      	bx	lr
 8007d3a:	bf00      	nop
 8007d3c:	f3af 8000 	nop.w

08007d40 <pxCurrentTCBConst>:
 8007d40:	200004b4 	.word	0x200004b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007d44:	bf00      	nop
 8007d46:	bf00      	nop

08007d48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b082      	sub	sp, #8
 8007d4c:	af00      	add	r7, sp, #0
	__asm volatile
 8007d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d52:	f383 8811 	msr	BASEPRI, r3
 8007d56:	f3bf 8f6f 	isb	sy
 8007d5a:	f3bf 8f4f 	dsb	sy
 8007d5e:	607b      	str	r3, [r7, #4]
}
 8007d60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007d62:	f7fe fedf 	bl	8006b24 <xTaskIncrementTick>
 8007d66:	4603      	mov	r3, r0
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d003      	beq.n	8007d74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007d6c:	4b06      	ldr	r3, [pc, #24]	@ (8007d88 <SysTick_Handler+0x40>)
 8007d6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d72:	601a      	str	r2, [r3, #0]
 8007d74:	2300      	movs	r3, #0
 8007d76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	f383 8811 	msr	BASEPRI, r3
}
 8007d7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007d80:	bf00      	nop
 8007d82:	3708      	adds	r7, #8
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}
 8007d88:	e000ed04 	.word	0xe000ed04

08007d8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007d90:	4b0b      	ldr	r3, [pc, #44]	@ (8007dc0 <vPortSetupTimerInterrupt+0x34>)
 8007d92:	2200      	movs	r2, #0
 8007d94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007d96:	4b0b      	ldr	r3, [pc, #44]	@ (8007dc4 <vPortSetupTimerInterrupt+0x38>)
 8007d98:	2200      	movs	r2, #0
 8007d9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8007dc8 <vPortSetupTimerInterrupt+0x3c>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a0a      	ldr	r2, [pc, #40]	@ (8007dcc <vPortSetupTimerInterrupt+0x40>)
 8007da2:	fba2 2303 	umull	r2, r3, r2, r3
 8007da6:	099b      	lsrs	r3, r3, #6
 8007da8:	4a09      	ldr	r2, [pc, #36]	@ (8007dd0 <vPortSetupTimerInterrupt+0x44>)
 8007daa:	3b01      	subs	r3, #1
 8007dac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007dae:	4b04      	ldr	r3, [pc, #16]	@ (8007dc0 <vPortSetupTimerInterrupt+0x34>)
 8007db0:	2207      	movs	r2, #7
 8007db2:	601a      	str	r2, [r3, #0]
}
 8007db4:	bf00      	nop
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr
 8007dbe:	bf00      	nop
 8007dc0:	e000e010 	.word	0xe000e010
 8007dc4:	e000e018 	.word	0xe000e018
 8007dc8:	20000000 	.word	0x20000000
 8007dcc:	10624dd3 	.word	0x10624dd3
 8007dd0:	e000e014 	.word	0xe000e014

08007dd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007dd4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007de4 <vPortEnableVFP+0x10>
 8007dd8:	6801      	ldr	r1, [r0, #0]
 8007dda:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007dde:	6001      	str	r1, [r0, #0]
 8007de0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007de2:	bf00      	nop
 8007de4:	e000ed88 	.word	0xe000ed88

08007de8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007de8:	b480      	push	{r7}
 8007dea:	b085      	sub	sp, #20
 8007dec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007dee:	f3ef 8305 	mrs	r3, IPSR
 8007df2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2b0f      	cmp	r3, #15
 8007df8:	d915      	bls.n	8007e26 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007dfa:	4a18      	ldr	r2, [pc, #96]	@ (8007e5c <vPortValidateInterruptPriority+0x74>)
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	4413      	add	r3, r2
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007e04:	4b16      	ldr	r3, [pc, #88]	@ (8007e60 <vPortValidateInterruptPriority+0x78>)
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	7afa      	ldrb	r2, [r7, #11]
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d20b      	bcs.n	8007e26 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e12:	f383 8811 	msr	BASEPRI, r3
 8007e16:	f3bf 8f6f 	isb	sy
 8007e1a:	f3bf 8f4f 	dsb	sy
 8007e1e:	607b      	str	r3, [r7, #4]
}
 8007e20:	bf00      	nop
 8007e22:	bf00      	nop
 8007e24:	e7fd      	b.n	8007e22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007e26:	4b0f      	ldr	r3, [pc, #60]	@ (8007e64 <vPortValidateInterruptPriority+0x7c>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007e2e:	4b0e      	ldr	r3, [pc, #56]	@ (8007e68 <vPortValidateInterruptPriority+0x80>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d90b      	bls.n	8007e4e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007e36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e3a:	f383 8811 	msr	BASEPRI, r3
 8007e3e:	f3bf 8f6f 	isb	sy
 8007e42:	f3bf 8f4f 	dsb	sy
 8007e46:	603b      	str	r3, [r7, #0]
}
 8007e48:	bf00      	nop
 8007e4a:	bf00      	nop
 8007e4c:	e7fd      	b.n	8007e4a <vPortValidateInterruptPriority+0x62>
	}
 8007e4e:	bf00      	nop
 8007e50:	3714      	adds	r7, #20
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr
 8007e5a:	bf00      	nop
 8007e5c:	e000e3f0 	.word	0xe000e3f0
 8007e60:	200005e8 	.word	0x200005e8
 8007e64:	e000ed0c 	.word	0xe000ed0c
 8007e68:	200005ec 	.word	0x200005ec

08007e6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b08a      	sub	sp, #40	@ 0x28
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007e74:	2300      	movs	r3, #0
 8007e76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007e78:	f7fe fd98 	bl	80069ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007e7c:	4b5c      	ldr	r3, [pc, #368]	@ (8007ff0 <pvPortMalloc+0x184>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d101      	bne.n	8007e88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007e84:	f000 f924 	bl	80080d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007e88:	4b5a      	ldr	r3, [pc, #360]	@ (8007ff4 <pvPortMalloc+0x188>)
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	4013      	ands	r3, r2
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	f040 8095 	bne.w	8007fc0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d01e      	beq.n	8007eda <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007e9c:	2208      	movs	r2, #8
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	4413      	add	r3, r2
 8007ea2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f003 0307 	and.w	r3, r3, #7
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d015      	beq.n	8007eda <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f023 0307 	bic.w	r3, r3, #7
 8007eb4:	3308      	adds	r3, #8
 8007eb6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f003 0307 	and.w	r3, r3, #7
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d00b      	beq.n	8007eda <pvPortMalloc+0x6e>
	__asm volatile
 8007ec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ec6:	f383 8811 	msr	BASEPRI, r3
 8007eca:	f3bf 8f6f 	isb	sy
 8007ece:	f3bf 8f4f 	dsb	sy
 8007ed2:	617b      	str	r3, [r7, #20]
}
 8007ed4:	bf00      	nop
 8007ed6:	bf00      	nop
 8007ed8:	e7fd      	b.n	8007ed6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d06f      	beq.n	8007fc0 <pvPortMalloc+0x154>
 8007ee0:	4b45      	ldr	r3, [pc, #276]	@ (8007ff8 <pvPortMalloc+0x18c>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	687a      	ldr	r2, [r7, #4]
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d86a      	bhi.n	8007fc0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007eea:	4b44      	ldr	r3, [pc, #272]	@ (8007ffc <pvPortMalloc+0x190>)
 8007eec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007eee:	4b43      	ldr	r3, [pc, #268]	@ (8007ffc <pvPortMalloc+0x190>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ef4:	e004      	b.n	8007f00 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ef8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	687a      	ldr	r2, [r7, #4]
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d903      	bls.n	8007f12 <pvPortMalloc+0xa6>
 8007f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d1f1      	bne.n	8007ef6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007f12:	4b37      	ldr	r3, [pc, #220]	@ (8007ff0 <pvPortMalloc+0x184>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f18:	429a      	cmp	r2, r3
 8007f1a:	d051      	beq.n	8007fc0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007f1c:	6a3b      	ldr	r3, [r7, #32]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	2208      	movs	r2, #8
 8007f22:	4413      	add	r3, r2
 8007f24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f28:	681a      	ldr	r2, [r3, #0]
 8007f2a:	6a3b      	ldr	r3, [r7, #32]
 8007f2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f30:	685a      	ldr	r2, [r3, #4]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	1ad2      	subs	r2, r2, r3
 8007f36:	2308      	movs	r3, #8
 8007f38:	005b      	lsls	r3, r3, #1
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	d920      	bls.n	8007f80 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007f3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	4413      	add	r3, r2
 8007f44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f46:	69bb      	ldr	r3, [r7, #24]
 8007f48:	f003 0307 	and.w	r3, r3, #7
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d00b      	beq.n	8007f68 <pvPortMalloc+0xfc>
	__asm volatile
 8007f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f54:	f383 8811 	msr	BASEPRI, r3
 8007f58:	f3bf 8f6f 	isb	sy
 8007f5c:	f3bf 8f4f 	dsb	sy
 8007f60:	613b      	str	r3, [r7, #16]
}
 8007f62:	bf00      	nop
 8007f64:	bf00      	nop
 8007f66:	e7fd      	b.n	8007f64 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f6a:	685a      	ldr	r2, [r3, #4]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	1ad2      	subs	r2, r2, r3
 8007f70:	69bb      	ldr	r3, [r7, #24]
 8007f72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f76:	687a      	ldr	r2, [r7, #4]
 8007f78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007f7a:	69b8      	ldr	r0, [r7, #24]
 8007f7c:	f000 f90a 	bl	8008194 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007f80:	4b1d      	ldr	r3, [pc, #116]	@ (8007ff8 <pvPortMalloc+0x18c>)
 8007f82:	681a      	ldr	r2, [r3, #0]
 8007f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	1ad3      	subs	r3, r2, r3
 8007f8a:	4a1b      	ldr	r2, [pc, #108]	@ (8007ff8 <pvPortMalloc+0x18c>)
 8007f8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007f8e:	4b1a      	ldr	r3, [pc, #104]	@ (8007ff8 <pvPortMalloc+0x18c>)
 8007f90:	681a      	ldr	r2, [r3, #0]
 8007f92:	4b1b      	ldr	r3, [pc, #108]	@ (8008000 <pvPortMalloc+0x194>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d203      	bcs.n	8007fa2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007f9a:	4b17      	ldr	r3, [pc, #92]	@ (8007ff8 <pvPortMalloc+0x18c>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a18      	ldr	r2, [pc, #96]	@ (8008000 <pvPortMalloc+0x194>)
 8007fa0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa4:	685a      	ldr	r2, [r3, #4]
 8007fa6:	4b13      	ldr	r3, [pc, #76]	@ (8007ff4 <pvPortMalloc+0x188>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	431a      	orrs	r2, r3
 8007fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007fb6:	4b13      	ldr	r3, [pc, #76]	@ (8008004 <pvPortMalloc+0x198>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	3301      	adds	r3, #1
 8007fbc:	4a11      	ldr	r2, [pc, #68]	@ (8008004 <pvPortMalloc+0x198>)
 8007fbe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007fc0:	f7fe fd02 	bl	80069c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007fc4:	69fb      	ldr	r3, [r7, #28]
 8007fc6:	f003 0307 	and.w	r3, r3, #7
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d00b      	beq.n	8007fe6 <pvPortMalloc+0x17a>
	__asm volatile
 8007fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fd2:	f383 8811 	msr	BASEPRI, r3
 8007fd6:	f3bf 8f6f 	isb	sy
 8007fda:	f3bf 8f4f 	dsb	sy
 8007fde:	60fb      	str	r3, [r7, #12]
}
 8007fe0:	bf00      	nop
 8007fe2:	bf00      	nop
 8007fe4:	e7fd      	b.n	8007fe2 <pvPortMalloc+0x176>
	return pvReturn;
 8007fe6:	69fb      	ldr	r3, [r7, #28]
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3728      	adds	r7, #40	@ 0x28
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}
 8007ff0:	20002d08 	.word	0x20002d08
 8007ff4:	20002d1c 	.word	0x20002d1c
 8007ff8:	20002d0c 	.word	0x20002d0c
 8007ffc:	20002d00 	.word	0x20002d00
 8008000:	20002d10 	.word	0x20002d10
 8008004:	20002d14 	.word	0x20002d14

08008008 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b086      	sub	sp, #24
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d04f      	beq.n	80080ba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800801a:	2308      	movs	r3, #8
 800801c:	425b      	negs	r3, r3
 800801e:	697a      	ldr	r2, [r7, #20]
 8008020:	4413      	add	r3, r2
 8008022:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	685a      	ldr	r2, [r3, #4]
 800802c:	4b25      	ldr	r3, [pc, #148]	@ (80080c4 <vPortFree+0xbc>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4013      	ands	r3, r2
 8008032:	2b00      	cmp	r3, #0
 8008034:	d10b      	bne.n	800804e <vPortFree+0x46>
	__asm volatile
 8008036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800803a:	f383 8811 	msr	BASEPRI, r3
 800803e:	f3bf 8f6f 	isb	sy
 8008042:	f3bf 8f4f 	dsb	sy
 8008046:	60fb      	str	r3, [r7, #12]
}
 8008048:	bf00      	nop
 800804a:	bf00      	nop
 800804c:	e7fd      	b.n	800804a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d00b      	beq.n	800806e <vPortFree+0x66>
	__asm volatile
 8008056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800805a:	f383 8811 	msr	BASEPRI, r3
 800805e:	f3bf 8f6f 	isb	sy
 8008062:	f3bf 8f4f 	dsb	sy
 8008066:	60bb      	str	r3, [r7, #8]
}
 8008068:	bf00      	nop
 800806a:	bf00      	nop
 800806c:	e7fd      	b.n	800806a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	685a      	ldr	r2, [r3, #4]
 8008072:	4b14      	ldr	r3, [pc, #80]	@ (80080c4 <vPortFree+0xbc>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4013      	ands	r3, r2
 8008078:	2b00      	cmp	r3, #0
 800807a:	d01e      	beq.n	80080ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d11a      	bne.n	80080ba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	685a      	ldr	r2, [r3, #4]
 8008088:	4b0e      	ldr	r3, [pc, #56]	@ (80080c4 <vPortFree+0xbc>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	43db      	mvns	r3, r3
 800808e:	401a      	ands	r2, r3
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008094:	f7fe fc8a 	bl	80069ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	685a      	ldr	r2, [r3, #4]
 800809c:	4b0a      	ldr	r3, [pc, #40]	@ (80080c8 <vPortFree+0xc0>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4413      	add	r3, r2
 80080a2:	4a09      	ldr	r2, [pc, #36]	@ (80080c8 <vPortFree+0xc0>)
 80080a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80080a6:	6938      	ldr	r0, [r7, #16]
 80080a8:	f000 f874 	bl	8008194 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80080ac:	4b07      	ldr	r3, [pc, #28]	@ (80080cc <vPortFree+0xc4>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	3301      	adds	r3, #1
 80080b2:	4a06      	ldr	r2, [pc, #24]	@ (80080cc <vPortFree+0xc4>)
 80080b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80080b6:	f7fe fc87 	bl	80069c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80080ba:	bf00      	nop
 80080bc:	3718      	adds	r7, #24
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
 80080c2:	bf00      	nop
 80080c4:	20002d1c 	.word	0x20002d1c
 80080c8:	20002d0c 	.word	0x20002d0c
 80080cc:	20002d18 	.word	0x20002d18

080080d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80080d0:	b480      	push	{r7}
 80080d2:	b085      	sub	sp, #20
 80080d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80080d6:	f242 7310 	movw	r3, #10000	@ 0x2710
 80080da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80080dc:	4b27      	ldr	r3, [pc, #156]	@ (800817c <prvHeapInit+0xac>)
 80080de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f003 0307 	and.w	r3, r3, #7
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d00c      	beq.n	8008104 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	3307      	adds	r3, #7
 80080ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f023 0307 	bic.w	r3, r3, #7
 80080f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80080f8:	68ba      	ldr	r2, [r7, #8]
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	1ad3      	subs	r3, r2, r3
 80080fe:	4a1f      	ldr	r2, [pc, #124]	@ (800817c <prvHeapInit+0xac>)
 8008100:	4413      	add	r3, r2
 8008102:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008108:	4a1d      	ldr	r2, [pc, #116]	@ (8008180 <prvHeapInit+0xb0>)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800810e:	4b1c      	ldr	r3, [pc, #112]	@ (8008180 <prvHeapInit+0xb0>)
 8008110:	2200      	movs	r2, #0
 8008112:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	68ba      	ldr	r2, [r7, #8]
 8008118:	4413      	add	r3, r2
 800811a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800811c:	2208      	movs	r2, #8
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	1a9b      	subs	r3, r3, r2
 8008122:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f023 0307 	bic.w	r3, r3, #7
 800812a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	4a15      	ldr	r2, [pc, #84]	@ (8008184 <prvHeapInit+0xb4>)
 8008130:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008132:	4b14      	ldr	r3, [pc, #80]	@ (8008184 <prvHeapInit+0xb4>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	2200      	movs	r2, #0
 8008138:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800813a:	4b12      	ldr	r3, [pc, #72]	@ (8008184 <prvHeapInit+0xb4>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	2200      	movs	r2, #0
 8008140:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	68fa      	ldr	r2, [r7, #12]
 800814a:	1ad2      	subs	r2, r2, r3
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008150:	4b0c      	ldr	r3, [pc, #48]	@ (8008184 <prvHeapInit+0xb4>)
 8008152:	681a      	ldr	r2, [r3, #0]
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	4a0a      	ldr	r2, [pc, #40]	@ (8008188 <prvHeapInit+0xb8>)
 800815e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	4a09      	ldr	r2, [pc, #36]	@ (800818c <prvHeapInit+0xbc>)
 8008166:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008168:	4b09      	ldr	r3, [pc, #36]	@ (8008190 <prvHeapInit+0xc0>)
 800816a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800816e:	601a      	str	r2, [r3, #0]
}
 8008170:	bf00      	nop
 8008172:	3714      	adds	r7, #20
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr
 800817c:	200005f0 	.word	0x200005f0
 8008180:	20002d00 	.word	0x20002d00
 8008184:	20002d08 	.word	0x20002d08
 8008188:	20002d10 	.word	0x20002d10
 800818c:	20002d0c 	.word	0x20002d0c
 8008190:	20002d1c 	.word	0x20002d1c

08008194 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008194:	b480      	push	{r7}
 8008196:	b085      	sub	sp, #20
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800819c:	4b28      	ldr	r3, [pc, #160]	@ (8008240 <prvInsertBlockIntoFreeList+0xac>)
 800819e:	60fb      	str	r3, [r7, #12]
 80081a0:	e002      	b.n	80081a8 <prvInsertBlockIntoFreeList+0x14>
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	60fb      	str	r3, [r7, #12]
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	687a      	ldr	r2, [r7, #4]
 80081ae:	429a      	cmp	r2, r3
 80081b0:	d8f7      	bhi.n	80081a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	68ba      	ldr	r2, [r7, #8]
 80081bc:	4413      	add	r3, r2
 80081be:	687a      	ldr	r2, [r7, #4]
 80081c0:	429a      	cmp	r2, r3
 80081c2:	d108      	bne.n	80081d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	685a      	ldr	r2, [r3, #4]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	441a      	add	r2, r3
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	685b      	ldr	r3, [r3, #4]
 80081de:	68ba      	ldr	r2, [r7, #8]
 80081e0:	441a      	add	r2, r3
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d118      	bne.n	800821c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681a      	ldr	r2, [r3, #0]
 80081ee:	4b15      	ldr	r3, [pc, #84]	@ (8008244 <prvInsertBlockIntoFreeList+0xb0>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d00d      	beq.n	8008212 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	685a      	ldr	r2, [r3, #4]
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	441a      	add	r2, r3
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	601a      	str	r2, [r3, #0]
 8008210:	e008      	b.n	8008224 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008212:	4b0c      	ldr	r3, [pc, #48]	@ (8008244 <prvInsertBlockIntoFreeList+0xb0>)
 8008214:	681a      	ldr	r2, [r3, #0]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	601a      	str	r2, [r3, #0]
 800821a:	e003      	b.n	8008224 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681a      	ldr	r2, [r3, #0]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008224:	68fa      	ldr	r2, [r7, #12]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	429a      	cmp	r2, r3
 800822a:	d002      	beq.n	8008232 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	687a      	ldr	r2, [r7, #4]
 8008230:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008232:	bf00      	nop
 8008234:	3714      	adds	r7, #20
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr
 800823e:	bf00      	nop
 8008240:	20002d00 	.word	0x20002d00
 8008244:	20002d08 	.word	0x20002d08

08008248 <vPortGetHeapStats>:
/*-----------------------------------------------------------*/

void vPortGetHeapStats( HeapStats_t *pxHeapStats )
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b086      	sub	sp, #24
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock;
size_t xBlocks = 0, xMaxSize = 0, xMinSize = portMAX_DELAY; /* portMAX_DELAY used as a portable way of getting the maximum value. */
 8008250:	2300      	movs	r3, #0
 8008252:	613b      	str	r3, [r7, #16]
 8008254:	2300      	movs	r3, #0
 8008256:	60fb      	str	r3, [r7, #12]
 8008258:	f04f 33ff 	mov.w	r3, #4294967295
 800825c:	60bb      	str	r3, [r7, #8]

	vTaskSuspendAll();
 800825e:	f7fe fba5 	bl	80069ac <vTaskSuspendAll>
	{
		pxBlock = xStart.pxNextFreeBlock;
 8008262:	4b22      	ldr	r3, [pc, #136]	@ (80082ec <vPortGetHeapStats+0xa4>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	617b      	str	r3, [r7, #20]

		/* pxBlock will be NULL if the heap has not been initialised.  The heap
		is initialised automatically when the first allocation is made. */
		if( pxBlock != NULL )
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d01a      	beq.n	80082a4 <vPortGetHeapStats+0x5c>
		{
			do
			{
				/* Increment the number of blocks and record the largest block seen
				so far. */
				xBlocks++;
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	3301      	adds	r3, #1
 8008272:	613b      	str	r3, [r7, #16]

				if( pxBlock->xBlockSize > xMaxSize )
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	68fa      	ldr	r2, [r7, #12]
 800827a:	429a      	cmp	r2, r3
 800827c:	d202      	bcs.n	8008284 <vPortGetHeapStats+0x3c>
				{
					xMaxSize = pxBlock->xBlockSize;
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	60fb      	str	r3, [r7, #12]
				}

				if( pxBlock->xBlockSize < xMinSize )
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	68ba      	ldr	r2, [r7, #8]
 800828a:	429a      	cmp	r2, r3
 800828c:	d902      	bls.n	8008294 <vPortGetHeapStats+0x4c>
				{
					xMinSize = pxBlock->xBlockSize;
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	60bb      	str	r3, [r7, #8]
				}

				/* Move to the next block in the chain until the last block is
				reached. */
				pxBlock = pxBlock->pxNextFreeBlock;
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	617b      	str	r3, [r7, #20]
			} while( pxBlock != pxEnd );
 800829a:	4b15      	ldr	r3, [pc, #84]	@ (80082f0 <vPortGetHeapStats+0xa8>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	697a      	ldr	r2, [r7, #20]
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d1e4      	bne.n	800826e <vPortGetHeapStats+0x26>
		}
	}
	xTaskResumeAll();
 80082a4:	f7fe fb90 	bl	80069c8 <xTaskResumeAll>

	pxHeapStats->xSizeOfLargestFreeBlockInBytes = xMaxSize;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	68fa      	ldr	r2, [r7, #12]
 80082ac:	605a      	str	r2, [r3, #4]
	pxHeapStats->xSizeOfSmallestFreeBlockInBytes = xMinSize;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	68ba      	ldr	r2, [r7, #8]
 80082b2:	609a      	str	r2, [r3, #8]
	pxHeapStats->xNumberOfFreeBlocks = xBlocks;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	693a      	ldr	r2, [r7, #16]
 80082b8:	60da      	str	r2, [r3, #12]

	taskENTER_CRITICAL();
 80082ba:	f7ff fcb5 	bl	8007c28 <vPortEnterCritical>
	{
		pxHeapStats->xAvailableHeapSpaceInBytes = xFreeBytesRemaining;
 80082be:	4b0d      	ldr	r3, [pc, #52]	@ (80082f4 <vPortGetHeapStats+0xac>)
 80082c0:	681a      	ldr	r2, [r3, #0]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	601a      	str	r2, [r3, #0]
		pxHeapStats->xNumberOfSuccessfulAllocations = xNumberOfSuccessfulAllocations;
 80082c6:	4b0c      	ldr	r3, [pc, #48]	@ (80082f8 <vPortGetHeapStats+0xb0>)
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	615a      	str	r2, [r3, #20]
		pxHeapStats->xNumberOfSuccessfulFrees = xNumberOfSuccessfulFrees;
 80082ce:	4b0b      	ldr	r3, [pc, #44]	@ (80082fc <vPortGetHeapStats+0xb4>)
 80082d0:	681a      	ldr	r2, [r3, #0]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	619a      	str	r2, [r3, #24]
		pxHeapStats->xMinimumEverFreeBytesRemaining = xMinimumEverFreeBytesRemaining;
 80082d6:	4b0a      	ldr	r3, [pc, #40]	@ (8008300 <vPortGetHeapStats+0xb8>)
 80082d8:	681a      	ldr	r2, [r3, #0]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	611a      	str	r2, [r3, #16]
	}
	taskEXIT_CRITICAL();
 80082de:	f7ff fcd5 	bl	8007c8c <vPortExitCritical>
}
 80082e2:	bf00      	nop
 80082e4:	3718      	adds	r7, #24
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}
 80082ea:	bf00      	nop
 80082ec:	20002d00 	.word	0x20002d00
 80082f0:	20002d08 	.word	0x20002d08
 80082f4:	20002d0c 	.word	0x20002d0c
 80082f8:	20002d14 	.word	0x20002d14
 80082fc:	20002d18 	.word	0x20002d18
 8008300:	20002d10 	.word	0x20002d10

08008304 <sbrk_aligned>:
 8008304:	b570      	push	{r4, r5, r6, lr}
 8008306:	4e0f      	ldr	r6, [pc, #60]	@ (8008344 <sbrk_aligned+0x40>)
 8008308:	460c      	mov	r4, r1
 800830a:	6831      	ldr	r1, [r6, #0]
 800830c:	4605      	mov	r5, r0
 800830e:	b911      	cbnz	r1, 8008316 <sbrk_aligned+0x12>
 8008310:	f000 fad2 	bl	80088b8 <_sbrk_r>
 8008314:	6030      	str	r0, [r6, #0]
 8008316:	4621      	mov	r1, r4
 8008318:	4628      	mov	r0, r5
 800831a:	f000 facd 	bl	80088b8 <_sbrk_r>
 800831e:	1c43      	adds	r3, r0, #1
 8008320:	d103      	bne.n	800832a <sbrk_aligned+0x26>
 8008322:	f04f 34ff 	mov.w	r4, #4294967295
 8008326:	4620      	mov	r0, r4
 8008328:	bd70      	pop	{r4, r5, r6, pc}
 800832a:	1cc4      	adds	r4, r0, #3
 800832c:	f024 0403 	bic.w	r4, r4, #3
 8008330:	42a0      	cmp	r0, r4
 8008332:	d0f8      	beq.n	8008326 <sbrk_aligned+0x22>
 8008334:	1a21      	subs	r1, r4, r0
 8008336:	4628      	mov	r0, r5
 8008338:	f000 fabe 	bl	80088b8 <_sbrk_r>
 800833c:	3001      	adds	r0, #1
 800833e:	d1f2      	bne.n	8008326 <sbrk_aligned+0x22>
 8008340:	e7ef      	b.n	8008322 <sbrk_aligned+0x1e>
 8008342:	bf00      	nop
 8008344:	20002d20 	.word	0x20002d20

08008348 <_malloc_r>:
 8008348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800834c:	1ccd      	adds	r5, r1, #3
 800834e:	f025 0503 	bic.w	r5, r5, #3
 8008352:	3508      	adds	r5, #8
 8008354:	2d0c      	cmp	r5, #12
 8008356:	bf38      	it	cc
 8008358:	250c      	movcc	r5, #12
 800835a:	2d00      	cmp	r5, #0
 800835c:	4606      	mov	r6, r0
 800835e:	db01      	blt.n	8008364 <_malloc_r+0x1c>
 8008360:	42a9      	cmp	r1, r5
 8008362:	d904      	bls.n	800836e <_malloc_r+0x26>
 8008364:	230c      	movs	r3, #12
 8008366:	6033      	str	r3, [r6, #0]
 8008368:	2000      	movs	r0, #0
 800836a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800836e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008444 <_malloc_r+0xfc>
 8008372:	f000 f869 	bl	8008448 <__malloc_lock>
 8008376:	f8d8 3000 	ldr.w	r3, [r8]
 800837a:	461c      	mov	r4, r3
 800837c:	bb44      	cbnz	r4, 80083d0 <_malloc_r+0x88>
 800837e:	4629      	mov	r1, r5
 8008380:	4630      	mov	r0, r6
 8008382:	f7ff ffbf 	bl	8008304 <sbrk_aligned>
 8008386:	1c43      	adds	r3, r0, #1
 8008388:	4604      	mov	r4, r0
 800838a:	d158      	bne.n	800843e <_malloc_r+0xf6>
 800838c:	f8d8 4000 	ldr.w	r4, [r8]
 8008390:	4627      	mov	r7, r4
 8008392:	2f00      	cmp	r7, #0
 8008394:	d143      	bne.n	800841e <_malloc_r+0xd6>
 8008396:	2c00      	cmp	r4, #0
 8008398:	d04b      	beq.n	8008432 <_malloc_r+0xea>
 800839a:	6823      	ldr	r3, [r4, #0]
 800839c:	4639      	mov	r1, r7
 800839e:	4630      	mov	r0, r6
 80083a0:	eb04 0903 	add.w	r9, r4, r3
 80083a4:	f000 fa88 	bl	80088b8 <_sbrk_r>
 80083a8:	4581      	cmp	r9, r0
 80083aa:	d142      	bne.n	8008432 <_malloc_r+0xea>
 80083ac:	6821      	ldr	r1, [r4, #0]
 80083ae:	1a6d      	subs	r5, r5, r1
 80083b0:	4629      	mov	r1, r5
 80083b2:	4630      	mov	r0, r6
 80083b4:	f7ff ffa6 	bl	8008304 <sbrk_aligned>
 80083b8:	3001      	adds	r0, #1
 80083ba:	d03a      	beq.n	8008432 <_malloc_r+0xea>
 80083bc:	6823      	ldr	r3, [r4, #0]
 80083be:	442b      	add	r3, r5
 80083c0:	6023      	str	r3, [r4, #0]
 80083c2:	f8d8 3000 	ldr.w	r3, [r8]
 80083c6:	685a      	ldr	r2, [r3, #4]
 80083c8:	bb62      	cbnz	r2, 8008424 <_malloc_r+0xdc>
 80083ca:	f8c8 7000 	str.w	r7, [r8]
 80083ce:	e00f      	b.n	80083f0 <_malloc_r+0xa8>
 80083d0:	6822      	ldr	r2, [r4, #0]
 80083d2:	1b52      	subs	r2, r2, r5
 80083d4:	d420      	bmi.n	8008418 <_malloc_r+0xd0>
 80083d6:	2a0b      	cmp	r2, #11
 80083d8:	d917      	bls.n	800840a <_malloc_r+0xc2>
 80083da:	1961      	adds	r1, r4, r5
 80083dc:	42a3      	cmp	r3, r4
 80083de:	6025      	str	r5, [r4, #0]
 80083e0:	bf18      	it	ne
 80083e2:	6059      	strne	r1, [r3, #4]
 80083e4:	6863      	ldr	r3, [r4, #4]
 80083e6:	bf08      	it	eq
 80083e8:	f8c8 1000 	streq.w	r1, [r8]
 80083ec:	5162      	str	r2, [r4, r5]
 80083ee:	604b      	str	r3, [r1, #4]
 80083f0:	4630      	mov	r0, r6
 80083f2:	f000 f82f 	bl	8008454 <__malloc_unlock>
 80083f6:	f104 000b 	add.w	r0, r4, #11
 80083fa:	1d23      	adds	r3, r4, #4
 80083fc:	f020 0007 	bic.w	r0, r0, #7
 8008400:	1ac2      	subs	r2, r0, r3
 8008402:	bf1c      	itt	ne
 8008404:	1a1b      	subne	r3, r3, r0
 8008406:	50a3      	strne	r3, [r4, r2]
 8008408:	e7af      	b.n	800836a <_malloc_r+0x22>
 800840a:	6862      	ldr	r2, [r4, #4]
 800840c:	42a3      	cmp	r3, r4
 800840e:	bf0c      	ite	eq
 8008410:	f8c8 2000 	streq.w	r2, [r8]
 8008414:	605a      	strne	r2, [r3, #4]
 8008416:	e7eb      	b.n	80083f0 <_malloc_r+0xa8>
 8008418:	4623      	mov	r3, r4
 800841a:	6864      	ldr	r4, [r4, #4]
 800841c:	e7ae      	b.n	800837c <_malloc_r+0x34>
 800841e:	463c      	mov	r4, r7
 8008420:	687f      	ldr	r7, [r7, #4]
 8008422:	e7b6      	b.n	8008392 <_malloc_r+0x4a>
 8008424:	461a      	mov	r2, r3
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	42a3      	cmp	r3, r4
 800842a:	d1fb      	bne.n	8008424 <_malloc_r+0xdc>
 800842c:	2300      	movs	r3, #0
 800842e:	6053      	str	r3, [r2, #4]
 8008430:	e7de      	b.n	80083f0 <_malloc_r+0xa8>
 8008432:	230c      	movs	r3, #12
 8008434:	6033      	str	r3, [r6, #0]
 8008436:	4630      	mov	r0, r6
 8008438:	f000 f80c 	bl	8008454 <__malloc_unlock>
 800843c:	e794      	b.n	8008368 <_malloc_r+0x20>
 800843e:	6005      	str	r5, [r0, #0]
 8008440:	e7d6      	b.n	80083f0 <_malloc_r+0xa8>
 8008442:	bf00      	nop
 8008444:	20002d24 	.word	0x20002d24

08008448 <__malloc_lock>:
 8008448:	4801      	ldr	r0, [pc, #4]	@ (8008450 <__malloc_lock+0x8>)
 800844a:	f000 ba82 	b.w	8008952 <__retarget_lock_acquire_recursive>
 800844e:	bf00      	nop
 8008450:	20002e68 	.word	0x20002e68

08008454 <__malloc_unlock>:
 8008454:	4801      	ldr	r0, [pc, #4]	@ (800845c <__malloc_unlock+0x8>)
 8008456:	f000 ba7d 	b.w	8008954 <__retarget_lock_release_recursive>
 800845a:	bf00      	nop
 800845c:	20002e68 	.word	0x20002e68

08008460 <_realloc_r>:
 8008460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008464:	4680      	mov	r8, r0
 8008466:	4615      	mov	r5, r2
 8008468:	460c      	mov	r4, r1
 800846a:	b921      	cbnz	r1, 8008476 <_realloc_r+0x16>
 800846c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008470:	4611      	mov	r1, r2
 8008472:	f7ff bf69 	b.w	8008348 <_malloc_r>
 8008476:	b92a      	cbnz	r2, 8008484 <_realloc_r+0x24>
 8008478:	f000 fa84 	bl	8008984 <_free_r>
 800847c:	2400      	movs	r4, #0
 800847e:	4620      	mov	r0, r4
 8008480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008484:	f000 fac8 	bl	8008a18 <_malloc_usable_size_r>
 8008488:	4285      	cmp	r5, r0
 800848a:	4606      	mov	r6, r0
 800848c:	d802      	bhi.n	8008494 <_realloc_r+0x34>
 800848e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008492:	d8f4      	bhi.n	800847e <_realloc_r+0x1e>
 8008494:	4629      	mov	r1, r5
 8008496:	4640      	mov	r0, r8
 8008498:	f7ff ff56 	bl	8008348 <_malloc_r>
 800849c:	4607      	mov	r7, r0
 800849e:	2800      	cmp	r0, #0
 80084a0:	d0ec      	beq.n	800847c <_realloc_r+0x1c>
 80084a2:	42b5      	cmp	r5, r6
 80084a4:	462a      	mov	r2, r5
 80084a6:	4621      	mov	r1, r4
 80084a8:	bf28      	it	cs
 80084aa:	4632      	movcs	r2, r6
 80084ac:	f000 fa5b 	bl	8008966 <memcpy>
 80084b0:	4621      	mov	r1, r4
 80084b2:	4640      	mov	r0, r8
 80084b4:	f000 fa66 	bl	8008984 <_free_r>
 80084b8:	463c      	mov	r4, r7
 80084ba:	e7e0      	b.n	800847e <_realloc_r+0x1e>

080084bc <std>:
 80084bc:	2300      	movs	r3, #0
 80084be:	b510      	push	{r4, lr}
 80084c0:	4604      	mov	r4, r0
 80084c2:	e9c0 3300 	strd	r3, r3, [r0]
 80084c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80084ca:	6083      	str	r3, [r0, #8]
 80084cc:	8181      	strh	r1, [r0, #12]
 80084ce:	6643      	str	r3, [r0, #100]	@ 0x64
 80084d0:	81c2      	strh	r2, [r0, #14]
 80084d2:	6183      	str	r3, [r0, #24]
 80084d4:	4619      	mov	r1, r3
 80084d6:	2208      	movs	r2, #8
 80084d8:	305c      	adds	r0, #92	@ 0x5c
 80084da:	f000 f95a 	bl	8008792 <memset>
 80084de:	4b0d      	ldr	r3, [pc, #52]	@ (8008514 <std+0x58>)
 80084e0:	6263      	str	r3, [r4, #36]	@ 0x24
 80084e2:	4b0d      	ldr	r3, [pc, #52]	@ (8008518 <std+0x5c>)
 80084e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80084e6:	4b0d      	ldr	r3, [pc, #52]	@ (800851c <std+0x60>)
 80084e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80084ea:	4b0d      	ldr	r3, [pc, #52]	@ (8008520 <std+0x64>)
 80084ec:	6323      	str	r3, [r4, #48]	@ 0x30
 80084ee:	4b0d      	ldr	r3, [pc, #52]	@ (8008524 <std+0x68>)
 80084f0:	6224      	str	r4, [r4, #32]
 80084f2:	429c      	cmp	r4, r3
 80084f4:	d006      	beq.n	8008504 <std+0x48>
 80084f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80084fa:	4294      	cmp	r4, r2
 80084fc:	d002      	beq.n	8008504 <std+0x48>
 80084fe:	33d0      	adds	r3, #208	@ 0xd0
 8008500:	429c      	cmp	r4, r3
 8008502:	d105      	bne.n	8008510 <std+0x54>
 8008504:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800850c:	f000 ba20 	b.w	8008950 <__retarget_lock_init_recursive>
 8008510:	bd10      	pop	{r4, pc}
 8008512:	bf00      	nop
 8008514:	0800870d 	.word	0x0800870d
 8008518:	0800872f 	.word	0x0800872f
 800851c:	08008767 	.word	0x08008767
 8008520:	0800878b 	.word	0x0800878b
 8008524:	20002d28 	.word	0x20002d28

08008528 <stdio_exit_handler>:
 8008528:	4a02      	ldr	r2, [pc, #8]	@ (8008534 <stdio_exit_handler+0xc>)
 800852a:	4903      	ldr	r1, [pc, #12]	@ (8008538 <stdio_exit_handler+0x10>)
 800852c:	4803      	ldr	r0, [pc, #12]	@ (800853c <stdio_exit_handler+0x14>)
 800852e:	f000 b869 	b.w	8008604 <_fwalk_sglue>
 8008532:	bf00      	nop
 8008534:	20000010 	.word	0x20000010
 8008538:	08009381 	.word	0x08009381
 800853c:	20000020 	.word	0x20000020

08008540 <cleanup_stdio>:
 8008540:	6841      	ldr	r1, [r0, #4]
 8008542:	4b0c      	ldr	r3, [pc, #48]	@ (8008574 <cleanup_stdio+0x34>)
 8008544:	4299      	cmp	r1, r3
 8008546:	b510      	push	{r4, lr}
 8008548:	4604      	mov	r4, r0
 800854a:	d001      	beq.n	8008550 <cleanup_stdio+0x10>
 800854c:	f000 ff18 	bl	8009380 <_fflush_r>
 8008550:	68a1      	ldr	r1, [r4, #8]
 8008552:	4b09      	ldr	r3, [pc, #36]	@ (8008578 <cleanup_stdio+0x38>)
 8008554:	4299      	cmp	r1, r3
 8008556:	d002      	beq.n	800855e <cleanup_stdio+0x1e>
 8008558:	4620      	mov	r0, r4
 800855a:	f000 ff11 	bl	8009380 <_fflush_r>
 800855e:	68e1      	ldr	r1, [r4, #12]
 8008560:	4b06      	ldr	r3, [pc, #24]	@ (800857c <cleanup_stdio+0x3c>)
 8008562:	4299      	cmp	r1, r3
 8008564:	d004      	beq.n	8008570 <cleanup_stdio+0x30>
 8008566:	4620      	mov	r0, r4
 8008568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800856c:	f000 bf08 	b.w	8009380 <_fflush_r>
 8008570:	bd10      	pop	{r4, pc}
 8008572:	bf00      	nop
 8008574:	20002d28 	.word	0x20002d28
 8008578:	20002d90 	.word	0x20002d90
 800857c:	20002df8 	.word	0x20002df8

08008580 <global_stdio_init.part.0>:
 8008580:	b510      	push	{r4, lr}
 8008582:	4b0b      	ldr	r3, [pc, #44]	@ (80085b0 <global_stdio_init.part.0+0x30>)
 8008584:	4c0b      	ldr	r4, [pc, #44]	@ (80085b4 <global_stdio_init.part.0+0x34>)
 8008586:	4a0c      	ldr	r2, [pc, #48]	@ (80085b8 <global_stdio_init.part.0+0x38>)
 8008588:	601a      	str	r2, [r3, #0]
 800858a:	4620      	mov	r0, r4
 800858c:	2200      	movs	r2, #0
 800858e:	2104      	movs	r1, #4
 8008590:	f7ff ff94 	bl	80084bc <std>
 8008594:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008598:	2201      	movs	r2, #1
 800859a:	2109      	movs	r1, #9
 800859c:	f7ff ff8e 	bl	80084bc <std>
 80085a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80085a4:	2202      	movs	r2, #2
 80085a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085aa:	2112      	movs	r1, #18
 80085ac:	f7ff bf86 	b.w	80084bc <std>
 80085b0:	20002e60 	.word	0x20002e60
 80085b4:	20002d28 	.word	0x20002d28
 80085b8:	08008529 	.word	0x08008529

080085bc <__sfp_lock_acquire>:
 80085bc:	4801      	ldr	r0, [pc, #4]	@ (80085c4 <__sfp_lock_acquire+0x8>)
 80085be:	f000 b9c8 	b.w	8008952 <__retarget_lock_acquire_recursive>
 80085c2:	bf00      	nop
 80085c4:	20002e69 	.word	0x20002e69

080085c8 <__sfp_lock_release>:
 80085c8:	4801      	ldr	r0, [pc, #4]	@ (80085d0 <__sfp_lock_release+0x8>)
 80085ca:	f000 b9c3 	b.w	8008954 <__retarget_lock_release_recursive>
 80085ce:	bf00      	nop
 80085d0:	20002e69 	.word	0x20002e69

080085d4 <__sinit>:
 80085d4:	b510      	push	{r4, lr}
 80085d6:	4604      	mov	r4, r0
 80085d8:	f7ff fff0 	bl	80085bc <__sfp_lock_acquire>
 80085dc:	6a23      	ldr	r3, [r4, #32]
 80085de:	b11b      	cbz	r3, 80085e8 <__sinit+0x14>
 80085e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085e4:	f7ff bff0 	b.w	80085c8 <__sfp_lock_release>
 80085e8:	4b04      	ldr	r3, [pc, #16]	@ (80085fc <__sinit+0x28>)
 80085ea:	6223      	str	r3, [r4, #32]
 80085ec:	4b04      	ldr	r3, [pc, #16]	@ (8008600 <__sinit+0x2c>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d1f5      	bne.n	80085e0 <__sinit+0xc>
 80085f4:	f7ff ffc4 	bl	8008580 <global_stdio_init.part.0>
 80085f8:	e7f2      	b.n	80085e0 <__sinit+0xc>
 80085fa:	bf00      	nop
 80085fc:	08008541 	.word	0x08008541
 8008600:	20002e60 	.word	0x20002e60

08008604 <_fwalk_sglue>:
 8008604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008608:	4607      	mov	r7, r0
 800860a:	4688      	mov	r8, r1
 800860c:	4614      	mov	r4, r2
 800860e:	2600      	movs	r6, #0
 8008610:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008614:	f1b9 0901 	subs.w	r9, r9, #1
 8008618:	d505      	bpl.n	8008626 <_fwalk_sglue+0x22>
 800861a:	6824      	ldr	r4, [r4, #0]
 800861c:	2c00      	cmp	r4, #0
 800861e:	d1f7      	bne.n	8008610 <_fwalk_sglue+0xc>
 8008620:	4630      	mov	r0, r6
 8008622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008626:	89ab      	ldrh	r3, [r5, #12]
 8008628:	2b01      	cmp	r3, #1
 800862a:	d907      	bls.n	800863c <_fwalk_sglue+0x38>
 800862c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008630:	3301      	adds	r3, #1
 8008632:	d003      	beq.n	800863c <_fwalk_sglue+0x38>
 8008634:	4629      	mov	r1, r5
 8008636:	4638      	mov	r0, r7
 8008638:	47c0      	blx	r8
 800863a:	4306      	orrs	r6, r0
 800863c:	3568      	adds	r5, #104	@ 0x68
 800863e:	e7e9      	b.n	8008614 <_fwalk_sglue+0x10>

08008640 <iprintf>:
 8008640:	b40f      	push	{r0, r1, r2, r3}
 8008642:	b507      	push	{r0, r1, r2, lr}
 8008644:	4906      	ldr	r1, [pc, #24]	@ (8008660 <iprintf+0x20>)
 8008646:	ab04      	add	r3, sp, #16
 8008648:	6808      	ldr	r0, [r1, #0]
 800864a:	f853 2b04 	ldr.w	r2, [r3], #4
 800864e:	6881      	ldr	r1, [r0, #8]
 8008650:	9301      	str	r3, [sp, #4]
 8008652:	f000 fb6b 	bl	8008d2c <_vfiprintf_r>
 8008656:	b003      	add	sp, #12
 8008658:	f85d eb04 	ldr.w	lr, [sp], #4
 800865c:	b004      	add	sp, #16
 800865e:	4770      	bx	lr
 8008660:	2000001c 	.word	0x2000001c

08008664 <sniprintf>:
 8008664:	b40c      	push	{r2, r3}
 8008666:	b530      	push	{r4, r5, lr}
 8008668:	4b17      	ldr	r3, [pc, #92]	@ (80086c8 <sniprintf+0x64>)
 800866a:	1e0c      	subs	r4, r1, #0
 800866c:	681d      	ldr	r5, [r3, #0]
 800866e:	b09d      	sub	sp, #116	@ 0x74
 8008670:	da08      	bge.n	8008684 <sniprintf+0x20>
 8008672:	238b      	movs	r3, #139	@ 0x8b
 8008674:	602b      	str	r3, [r5, #0]
 8008676:	f04f 30ff 	mov.w	r0, #4294967295
 800867a:	b01d      	add	sp, #116	@ 0x74
 800867c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008680:	b002      	add	sp, #8
 8008682:	4770      	bx	lr
 8008684:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008688:	f8ad 3014 	strh.w	r3, [sp, #20]
 800868c:	bf14      	ite	ne
 800868e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008692:	4623      	moveq	r3, r4
 8008694:	9304      	str	r3, [sp, #16]
 8008696:	9307      	str	r3, [sp, #28]
 8008698:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800869c:	9002      	str	r0, [sp, #8]
 800869e:	9006      	str	r0, [sp, #24]
 80086a0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80086a4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80086a6:	ab21      	add	r3, sp, #132	@ 0x84
 80086a8:	a902      	add	r1, sp, #8
 80086aa:	4628      	mov	r0, r5
 80086ac:	9301      	str	r3, [sp, #4]
 80086ae:	f000 fa17 	bl	8008ae0 <_svfiprintf_r>
 80086b2:	1c43      	adds	r3, r0, #1
 80086b4:	bfbc      	itt	lt
 80086b6:	238b      	movlt	r3, #139	@ 0x8b
 80086b8:	602b      	strlt	r3, [r5, #0]
 80086ba:	2c00      	cmp	r4, #0
 80086bc:	d0dd      	beq.n	800867a <sniprintf+0x16>
 80086be:	9b02      	ldr	r3, [sp, #8]
 80086c0:	2200      	movs	r2, #0
 80086c2:	701a      	strb	r2, [r3, #0]
 80086c4:	e7d9      	b.n	800867a <sniprintf+0x16>
 80086c6:	bf00      	nop
 80086c8:	2000001c 	.word	0x2000001c

080086cc <siprintf>:
 80086cc:	b40e      	push	{r1, r2, r3}
 80086ce:	b500      	push	{lr}
 80086d0:	b09c      	sub	sp, #112	@ 0x70
 80086d2:	ab1d      	add	r3, sp, #116	@ 0x74
 80086d4:	9002      	str	r0, [sp, #8]
 80086d6:	9006      	str	r0, [sp, #24]
 80086d8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80086dc:	4809      	ldr	r0, [pc, #36]	@ (8008704 <siprintf+0x38>)
 80086de:	9107      	str	r1, [sp, #28]
 80086e0:	9104      	str	r1, [sp, #16]
 80086e2:	4909      	ldr	r1, [pc, #36]	@ (8008708 <siprintf+0x3c>)
 80086e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80086e8:	9105      	str	r1, [sp, #20]
 80086ea:	6800      	ldr	r0, [r0, #0]
 80086ec:	9301      	str	r3, [sp, #4]
 80086ee:	a902      	add	r1, sp, #8
 80086f0:	f000 f9f6 	bl	8008ae0 <_svfiprintf_r>
 80086f4:	9b02      	ldr	r3, [sp, #8]
 80086f6:	2200      	movs	r2, #0
 80086f8:	701a      	strb	r2, [r3, #0]
 80086fa:	b01c      	add	sp, #112	@ 0x70
 80086fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008700:	b003      	add	sp, #12
 8008702:	4770      	bx	lr
 8008704:	2000001c 	.word	0x2000001c
 8008708:	ffff0208 	.word	0xffff0208

0800870c <__sread>:
 800870c:	b510      	push	{r4, lr}
 800870e:	460c      	mov	r4, r1
 8008710:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008714:	f000 f8be 	bl	8008894 <_read_r>
 8008718:	2800      	cmp	r0, #0
 800871a:	bfab      	itete	ge
 800871c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800871e:	89a3      	ldrhlt	r3, [r4, #12]
 8008720:	181b      	addge	r3, r3, r0
 8008722:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008726:	bfac      	ite	ge
 8008728:	6563      	strge	r3, [r4, #84]	@ 0x54
 800872a:	81a3      	strhlt	r3, [r4, #12]
 800872c:	bd10      	pop	{r4, pc}

0800872e <__swrite>:
 800872e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008732:	461f      	mov	r7, r3
 8008734:	898b      	ldrh	r3, [r1, #12]
 8008736:	05db      	lsls	r3, r3, #23
 8008738:	4605      	mov	r5, r0
 800873a:	460c      	mov	r4, r1
 800873c:	4616      	mov	r6, r2
 800873e:	d505      	bpl.n	800874c <__swrite+0x1e>
 8008740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008744:	2302      	movs	r3, #2
 8008746:	2200      	movs	r2, #0
 8008748:	f000 f892 	bl	8008870 <_lseek_r>
 800874c:	89a3      	ldrh	r3, [r4, #12]
 800874e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008752:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008756:	81a3      	strh	r3, [r4, #12]
 8008758:	4632      	mov	r2, r6
 800875a:	463b      	mov	r3, r7
 800875c:	4628      	mov	r0, r5
 800875e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008762:	f000 b8b9 	b.w	80088d8 <_write_r>

08008766 <__sseek>:
 8008766:	b510      	push	{r4, lr}
 8008768:	460c      	mov	r4, r1
 800876a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800876e:	f000 f87f 	bl	8008870 <_lseek_r>
 8008772:	1c43      	adds	r3, r0, #1
 8008774:	89a3      	ldrh	r3, [r4, #12]
 8008776:	bf15      	itete	ne
 8008778:	6560      	strne	r0, [r4, #84]	@ 0x54
 800877a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800877e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008782:	81a3      	strheq	r3, [r4, #12]
 8008784:	bf18      	it	ne
 8008786:	81a3      	strhne	r3, [r4, #12]
 8008788:	bd10      	pop	{r4, pc}

0800878a <__sclose>:
 800878a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800878e:	f000 b809 	b.w	80087a4 <_close_r>

08008792 <memset>:
 8008792:	4402      	add	r2, r0
 8008794:	4603      	mov	r3, r0
 8008796:	4293      	cmp	r3, r2
 8008798:	d100      	bne.n	800879c <memset+0xa>
 800879a:	4770      	bx	lr
 800879c:	f803 1b01 	strb.w	r1, [r3], #1
 80087a0:	e7f9      	b.n	8008796 <memset+0x4>
	...

080087a4 <_close_r>:
 80087a4:	b538      	push	{r3, r4, r5, lr}
 80087a6:	4d06      	ldr	r5, [pc, #24]	@ (80087c0 <_close_r+0x1c>)
 80087a8:	2300      	movs	r3, #0
 80087aa:	4604      	mov	r4, r0
 80087ac:	4608      	mov	r0, r1
 80087ae:	602b      	str	r3, [r5, #0]
 80087b0:	f7f8 ff91 	bl	80016d6 <_close>
 80087b4:	1c43      	adds	r3, r0, #1
 80087b6:	d102      	bne.n	80087be <_close_r+0x1a>
 80087b8:	682b      	ldr	r3, [r5, #0]
 80087ba:	b103      	cbz	r3, 80087be <_close_r+0x1a>
 80087bc:	6023      	str	r3, [r4, #0]
 80087be:	bd38      	pop	{r3, r4, r5, pc}
 80087c0:	20002e64 	.word	0x20002e64

080087c4 <_reclaim_reent>:
 80087c4:	4b29      	ldr	r3, [pc, #164]	@ (800886c <_reclaim_reent+0xa8>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4283      	cmp	r3, r0
 80087ca:	b570      	push	{r4, r5, r6, lr}
 80087cc:	4604      	mov	r4, r0
 80087ce:	d04b      	beq.n	8008868 <_reclaim_reent+0xa4>
 80087d0:	69c3      	ldr	r3, [r0, #28]
 80087d2:	b1ab      	cbz	r3, 8008800 <_reclaim_reent+0x3c>
 80087d4:	68db      	ldr	r3, [r3, #12]
 80087d6:	b16b      	cbz	r3, 80087f4 <_reclaim_reent+0x30>
 80087d8:	2500      	movs	r5, #0
 80087da:	69e3      	ldr	r3, [r4, #28]
 80087dc:	68db      	ldr	r3, [r3, #12]
 80087de:	5959      	ldr	r1, [r3, r5]
 80087e0:	2900      	cmp	r1, #0
 80087e2:	d13b      	bne.n	800885c <_reclaim_reent+0x98>
 80087e4:	3504      	adds	r5, #4
 80087e6:	2d80      	cmp	r5, #128	@ 0x80
 80087e8:	d1f7      	bne.n	80087da <_reclaim_reent+0x16>
 80087ea:	69e3      	ldr	r3, [r4, #28]
 80087ec:	4620      	mov	r0, r4
 80087ee:	68d9      	ldr	r1, [r3, #12]
 80087f0:	f000 f8c8 	bl	8008984 <_free_r>
 80087f4:	69e3      	ldr	r3, [r4, #28]
 80087f6:	6819      	ldr	r1, [r3, #0]
 80087f8:	b111      	cbz	r1, 8008800 <_reclaim_reent+0x3c>
 80087fa:	4620      	mov	r0, r4
 80087fc:	f000 f8c2 	bl	8008984 <_free_r>
 8008800:	6961      	ldr	r1, [r4, #20]
 8008802:	b111      	cbz	r1, 800880a <_reclaim_reent+0x46>
 8008804:	4620      	mov	r0, r4
 8008806:	f000 f8bd 	bl	8008984 <_free_r>
 800880a:	69e1      	ldr	r1, [r4, #28]
 800880c:	b111      	cbz	r1, 8008814 <_reclaim_reent+0x50>
 800880e:	4620      	mov	r0, r4
 8008810:	f000 f8b8 	bl	8008984 <_free_r>
 8008814:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008816:	b111      	cbz	r1, 800881e <_reclaim_reent+0x5a>
 8008818:	4620      	mov	r0, r4
 800881a:	f000 f8b3 	bl	8008984 <_free_r>
 800881e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008820:	b111      	cbz	r1, 8008828 <_reclaim_reent+0x64>
 8008822:	4620      	mov	r0, r4
 8008824:	f000 f8ae 	bl	8008984 <_free_r>
 8008828:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800882a:	b111      	cbz	r1, 8008832 <_reclaim_reent+0x6e>
 800882c:	4620      	mov	r0, r4
 800882e:	f000 f8a9 	bl	8008984 <_free_r>
 8008832:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008834:	b111      	cbz	r1, 800883c <_reclaim_reent+0x78>
 8008836:	4620      	mov	r0, r4
 8008838:	f000 f8a4 	bl	8008984 <_free_r>
 800883c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800883e:	b111      	cbz	r1, 8008846 <_reclaim_reent+0x82>
 8008840:	4620      	mov	r0, r4
 8008842:	f000 f89f 	bl	8008984 <_free_r>
 8008846:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008848:	b111      	cbz	r1, 8008850 <_reclaim_reent+0x8c>
 800884a:	4620      	mov	r0, r4
 800884c:	f000 f89a 	bl	8008984 <_free_r>
 8008850:	6a23      	ldr	r3, [r4, #32]
 8008852:	b14b      	cbz	r3, 8008868 <_reclaim_reent+0xa4>
 8008854:	4620      	mov	r0, r4
 8008856:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800885a:	4718      	bx	r3
 800885c:	680e      	ldr	r6, [r1, #0]
 800885e:	4620      	mov	r0, r4
 8008860:	f000 f890 	bl	8008984 <_free_r>
 8008864:	4631      	mov	r1, r6
 8008866:	e7bb      	b.n	80087e0 <_reclaim_reent+0x1c>
 8008868:	bd70      	pop	{r4, r5, r6, pc}
 800886a:	bf00      	nop
 800886c:	2000001c 	.word	0x2000001c

08008870 <_lseek_r>:
 8008870:	b538      	push	{r3, r4, r5, lr}
 8008872:	4d07      	ldr	r5, [pc, #28]	@ (8008890 <_lseek_r+0x20>)
 8008874:	4604      	mov	r4, r0
 8008876:	4608      	mov	r0, r1
 8008878:	4611      	mov	r1, r2
 800887a:	2200      	movs	r2, #0
 800887c:	602a      	str	r2, [r5, #0]
 800887e:	461a      	mov	r2, r3
 8008880:	f7f8 ff50 	bl	8001724 <_lseek>
 8008884:	1c43      	adds	r3, r0, #1
 8008886:	d102      	bne.n	800888e <_lseek_r+0x1e>
 8008888:	682b      	ldr	r3, [r5, #0]
 800888a:	b103      	cbz	r3, 800888e <_lseek_r+0x1e>
 800888c:	6023      	str	r3, [r4, #0]
 800888e:	bd38      	pop	{r3, r4, r5, pc}
 8008890:	20002e64 	.word	0x20002e64

08008894 <_read_r>:
 8008894:	b538      	push	{r3, r4, r5, lr}
 8008896:	4d07      	ldr	r5, [pc, #28]	@ (80088b4 <_read_r+0x20>)
 8008898:	4604      	mov	r4, r0
 800889a:	4608      	mov	r0, r1
 800889c:	4611      	mov	r1, r2
 800889e:	2200      	movs	r2, #0
 80088a0:	602a      	str	r2, [r5, #0]
 80088a2:	461a      	mov	r2, r3
 80088a4:	f7f8 fede 	bl	8001664 <_read>
 80088a8:	1c43      	adds	r3, r0, #1
 80088aa:	d102      	bne.n	80088b2 <_read_r+0x1e>
 80088ac:	682b      	ldr	r3, [r5, #0]
 80088ae:	b103      	cbz	r3, 80088b2 <_read_r+0x1e>
 80088b0:	6023      	str	r3, [r4, #0]
 80088b2:	bd38      	pop	{r3, r4, r5, pc}
 80088b4:	20002e64 	.word	0x20002e64

080088b8 <_sbrk_r>:
 80088b8:	b538      	push	{r3, r4, r5, lr}
 80088ba:	4d06      	ldr	r5, [pc, #24]	@ (80088d4 <_sbrk_r+0x1c>)
 80088bc:	2300      	movs	r3, #0
 80088be:	4604      	mov	r4, r0
 80088c0:	4608      	mov	r0, r1
 80088c2:	602b      	str	r3, [r5, #0]
 80088c4:	f7f8 ff3c 	bl	8001740 <_sbrk>
 80088c8:	1c43      	adds	r3, r0, #1
 80088ca:	d102      	bne.n	80088d2 <_sbrk_r+0x1a>
 80088cc:	682b      	ldr	r3, [r5, #0]
 80088ce:	b103      	cbz	r3, 80088d2 <_sbrk_r+0x1a>
 80088d0:	6023      	str	r3, [r4, #0]
 80088d2:	bd38      	pop	{r3, r4, r5, pc}
 80088d4:	20002e64 	.word	0x20002e64

080088d8 <_write_r>:
 80088d8:	b538      	push	{r3, r4, r5, lr}
 80088da:	4d07      	ldr	r5, [pc, #28]	@ (80088f8 <_write_r+0x20>)
 80088dc:	4604      	mov	r4, r0
 80088de:	4608      	mov	r0, r1
 80088e0:	4611      	mov	r1, r2
 80088e2:	2200      	movs	r2, #0
 80088e4:	602a      	str	r2, [r5, #0]
 80088e6:	461a      	mov	r2, r3
 80088e8:	f7f8 fed9 	bl	800169e <_write>
 80088ec:	1c43      	adds	r3, r0, #1
 80088ee:	d102      	bne.n	80088f6 <_write_r+0x1e>
 80088f0:	682b      	ldr	r3, [r5, #0]
 80088f2:	b103      	cbz	r3, 80088f6 <_write_r+0x1e>
 80088f4:	6023      	str	r3, [r4, #0]
 80088f6:	bd38      	pop	{r3, r4, r5, pc}
 80088f8:	20002e64 	.word	0x20002e64

080088fc <__errno>:
 80088fc:	4b01      	ldr	r3, [pc, #4]	@ (8008904 <__errno+0x8>)
 80088fe:	6818      	ldr	r0, [r3, #0]
 8008900:	4770      	bx	lr
 8008902:	bf00      	nop
 8008904:	2000001c 	.word	0x2000001c

08008908 <__libc_init_array>:
 8008908:	b570      	push	{r4, r5, r6, lr}
 800890a:	4d0d      	ldr	r5, [pc, #52]	@ (8008940 <__libc_init_array+0x38>)
 800890c:	4c0d      	ldr	r4, [pc, #52]	@ (8008944 <__libc_init_array+0x3c>)
 800890e:	1b64      	subs	r4, r4, r5
 8008910:	10a4      	asrs	r4, r4, #2
 8008912:	2600      	movs	r6, #0
 8008914:	42a6      	cmp	r6, r4
 8008916:	d109      	bne.n	800892c <__libc_init_array+0x24>
 8008918:	4d0b      	ldr	r5, [pc, #44]	@ (8008948 <__libc_init_array+0x40>)
 800891a:	4c0c      	ldr	r4, [pc, #48]	@ (800894c <__libc_init_array+0x44>)
 800891c:	f000 fe8a 	bl	8009634 <_init>
 8008920:	1b64      	subs	r4, r4, r5
 8008922:	10a4      	asrs	r4, r4, #2
 8008924:	2600      	movs	r6, #0
 8008926:	42a6      	cmp	r6, r4
 8008928:	d105      	bne.n	8008936 <__libc_init_array+0x2e>
 800892a:	bd70      	pop	{r4, r5, r6, pc}
 800892c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008930:	4798      	blx	r3
 8008932:	3601      	adds	r6, #1
 8008934:	e7ee      	b.n	8008914 <__libc_init_array+0xc>
 8008936:	f855 3b04 	ldr.w	r3, [r5], #4
 800893a:	4798      	blx	r3
 800893c:	3601      	adds	r6, #1
 800893e:	e7f2      	b.n	8008926 <__libc_init_array+0x1e>
 8008940:	08009a6c 	.word	0x08009a6c
 8008944:	08009a6c 	.word	0x08009a6c
 8008948:	08009a6c 	.word	0x08009a6c
 800894c:	08009a70 	.word	0x08009a70

08008950 <__retarget_lock_init_recursive>:
 8008950:	4770      	bx	lr

08008952 <__retarget_lock_acquire_recursive>:
 8008952:	4770      	bx	lr

08008954 <__retarget_lock_release_recursive>:
 8008954:	4770      	bx	lr

08008956 <strcpy>:
 8008956:	4603      	mov	r3, r0
 8008958:	f811 2b01 	ldrb.w	r2, [r1], #1
 800895c:	f803 2b01 	strb.w	r2, [r3], #1
 8008960:	2a00      	cmp	r2, #0
 8008962:	d1f9      	bne.n	8008958 <strcpy+0x2>
 8008964:	4770      	bx	lr

08008966 <memcpy>:
 8008966:	440a      	add	r2, r1
 8008968:	4291      	cmp	r1, r2
 800896a:	f100 33ff 	add.w	r3, r0, #4294967295
 800896e:	d100      	bne.n	8008972 <memcpy+0xc>
 8008970:	4770      	bx	lr
 8008972:	b510      	push	{r4, lr}
 8008974:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008978:	f803 4f01 	strb.w	r4, [r3, #1]!
 800897c:	4291      	cmp	r1, r2
 800897e:	d1f9      	bne.n	8008974 <memcpy+0xe>
 8008980:	bd10      	pop	{r4, pc}
	...

08008984 <_free_r>:
 8008984:	b538      	push	{r3, r4, r5, lr}
 8008986:	4605      	mov	r5, r0
 8008988:	2900      	cmp	r1, #0
 800898a:	d041      	beq.n	8008a10 <_free_r+0x8c>
 800898c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008990:	1f0c      	subs	r4, r1, #4
 8008992:	2b00      	cmp	r3, #0
 8008994:	bfb8      	it	lt
 8008996:	18e4      	addlt	r4, r4, r3
 8008998:	f7ff fd56 	bl	8008448 <__malloc_lock>
 800899c:	4a1d      	ldr	r2, [pc, #116]	@ (8008a14 <_free_r+0x90>)
 800899e:	6813      	ldr	r3, [r2, #0]
 80089a0:	b933      	cbnz	r3, 80089b0 <_free_r+0x2c>
 80089a2:	6063      	str	r3, [r4, #4]
 80089a4:	6014      	str	r4, [r2, #0]
 80089a6:	4628      	mov	r0, r5
 80089a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089ac:	f7ff bd52 	b.w	8008454 <__malloc_unlock>
 80089b0:	42a3      	cmp	r3, r4
 80089b2:	d908      	bls.n	80089c6 <_free_r+0x42>
 80089b4:	6820      	ldr	r0, [r4, #0]
 80089b6:	1821      	adds	r1, r4, r0
 80089b8:	428b      	cmp	r3, r1
 80089ba:	bf01      	itttt	eq
 80089bc:	6819      	ldreq	r1, [r3, #0]
 80089be:	685b      	ldreq	r3, [r3, #4]
 80089c0:	1809      	addeq	r1, r1, r0
 80089c2:	6021      	streq	r1, [r4, #0]
 80089c4:	e7ed      	b.n	80089a2 <_free_r+0x1e>
 80089c6:	461a      	mov	r2, r3
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	b10b      	cbz	r3, 80089d0 <_free_r+0x4c>
 80089cc:	42a3      	cmp	r3, r4
 80089ce:	d9fa      	bls.n	80089c6 <_free_r+0x42>
 80089d0:	6811      	ldr	r1, [r2, #0]
 80089d2:	1850      	adds	r0, r2, r1
 80089d4:	42a0      	cmp	r0, r4
 80089d6:	d10b      	bne.n	80089f0 <_free_r+0x6c>
 80089d8:	6820      	ldr	r0, [r4, #0]
 80089da:	4401      	add	r1, r0
 80089dc:	1850      	adds	r0, r2, r1
 80089de:	4283      	cmp	r3, r0
 80089e0:	6011      	str	r1, [r2, #0]
 80089e2:	d1e0      	bne.n	80089a6 <_free_r+0x22>
 80089e4:	6818      	ldr	r0, [r3, #0]
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	6053      	str	r3, [r2, #4]
 80089ea:	4408      	add	r0, r1
 80089ec:	6010      	str	r0, [r2, #0]
 80089ee:	e7da      	b.n	80089a6 <_free_r+0x22>
 80089f0:	d902      	bls.n	80089f8 <_free_r+0x74>
 80089f2:	230c      	movs	r3, #12
 80089f4:	602b      	str	r3, [r5, #0]
 80089f6:	e7d6      	b.n	80089a6 <_free_r+0x22>
 80089f8:	6820      	ldr	r0, [r4, #0]
 80089fa:	1821      	adds	r1, r4, r0
 80089fc:	428b      	cmp	r3, r1
 80089fe:	bf04      	itt	eq
 8008a00:	6819      	ldreq	r1, [r3, #0]
 8008a02:	685b      	ldreq	r3, [r3, #4]
 8008a04:	6063      	str	r3, [r4, #4]
 8008a06:	bf04      	itt	eq
 8008a08:	1809      	addeq	r1, r1, r0
 8008a0a:	6021      	streq	r1, [r4, #0]
 8008a0c:	6054      	str	r4, [r2, #4]
 8008a0e:	e7ca      	b.n	80089a6 <_free_r+0x22>
 8008a10:	bd38      	pop	{r3, r4, r5, pc}
 8008a12:	bf00      	nop
 8008a14:	20002d24 	.word	0x20002d24

08008a18 <_malloc_usable_size_r>:
 8008a18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a1c:	1f18      	subs	r0, r3, #4
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	bfbc      	itt	lt
 8008a22:	580b      	ldrlt	r3, [r1, r0]
 8008a24:	18c0      	addlt	r0, r0, r3
 8008a26:	4770      	bx	lr

08008a28 <__ssputs_r>:
 8008a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a2c:	688e      	ldr	r6, [r1, #8]
 8008a2e:	461f      	mov	r7, r3
 8008a30:	42be      	cmp	r6, r7
 8008a32:	680b      	ldr	r3, [r1, #0]
 8008a34:	4682      	mov	sl, r0
 8008a36:	460c      	mov	r4, r1
 8008a38:	4690      	mov	r8, r2
 8008a3a:	d82d      	bhi.n	8008a98 <__ssputs_r+0x70>
 8008a3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008a40:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008a44:	d026      	beq.n	8008a94 <__ssputs_r+0x6c>
 8008a46:	6965      	ldr	r5, [r4, #20]
 8008a48:	6909      	ldr	r1, [r1, #16]
 8008a4a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008a4e:	eba3 0901 	sub.w	r9, r3, r1
 8008a52:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008a56:	1c7b      	adds	r3, r7, #1
 8008a58:	444b      	add	r3, r9
 8008a5a:	106d      	asrs	r5, r5, #1
 8008a5c:	429d      	cmp	r5, r3
 8008a5e:	bf38      	it	cc
 8008a60:	461d      	movcc	r5, r3
 8008a62:	0553      	lsls	r3, r2, #21
 8008a64:	d527      	bpl.n	8008ab6 <__ssputs_r+0x8e>
 8008a66:	4629      	mov	r1, r5
 8008a68:	f7ff fc6e 	bl	8008348 <_malloc_r>
 8008a6c:	4606      	mov	r6, r0
 8008a6e:	b360      	cbz	r0, 8008aca <__ssputs_r+0xa2>
 8008a70:	6921      	ldr	r1, [r4, #16]
 8008a72:	464a      	mov	r2, r9
 8008a74:	f7ff ff77 	bl	8008966 <memcpy>
 8008a78:	89a3      	ldrh	r3, [r4, #12]
 8008a7a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008a7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a82:	81a3      	strh	r3, [r4, #12]
 8008a84:	6126      	str	r6, [r4, #16]
 8008a86:	6165      	str	r5, [r4, #20]
 8008a88:	444e      	add	r6, r9
 8008a8a:	eba5 0509 	sub.w	r5, r5, r9
 8008a8e:	6026      	str	r6, [r4, #0]
 8008a90:	60a5      	str	r5, [r4, #8]
 8008a92:	463e      	mov	r6, r7
 8008a94:	42be      	cmp	r6, r7
 8008a96:	d900      	bls.n	8008a9a <__ssputs_r+0x72>
 8008a98:	463e      	mov	r6, r7
 8008a9a:	6820      	ldr	r0, [r4, #0]
 8008a9c:	4632      	mov	r2, r6
 8008a9e:	4641      	mov	r1, r8
 8008aa0:	f000 fd2a 	bl	80094f8 <memmove>
 8008aa4:	68a3      	ldr	r3, [r4, #8]
 8008aa6:	1b9b      	subs	r3, r3, r6
 8008aa8:	60a3      	str	r3, [r4, #8]
 8008aaa:	6823      	ldr	r3, [r4, #0]
 8008aac:	4433      	add	r3, r6
 8008aae:	6023      	str	r3, [r4, #0]
 8008ab0:	2000      	movs	r0, #0
 8008ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ab6:	462a      	mov	r2, r5
 8008ab8:	f7ff fcd2 	bl	8008460 <_realloc_r>
 8008abc:	4606      	mov	r6, r0
 8008abe:	2800      	cmp	r0, #0
 8008ac0:	d1e0      	bne.n	8008a84 <__ssputs_r+0x5c>
 8008ac2:	6921      	ldr	r1, [r4, #16]
 8008ac4:	4650      	mov	r0, sl
 8008ac6:	f7ff ff5d 	bl	8008984 <_free_r>
 8008aca:	230c      	movs	r3, #12
 8008acc:	f8ca 3000 	str.w	r3, [sl]
 8008ad0:	89a3      	ldrh	r3, [r4, #12]
 8008ad2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ad6:	81a3      	strh	r3, [r4, #12]
 8008ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8008adc:	e7e9      	b.n	8008ab2 <__ssputs_r+0x8a>
	...

08008ae0 <_svfiprintf_r>:
 8008ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ae4:	4698      	mov	r8, r3
 8008ae6:	898b      	ldrh	r3, [r1, #12]
 8008ae8:	061b      	lsls	r3, r3, #24
 8008aea:	b09d      	sub	sp, #116	@ 0x74
 8008aec:	4607      	mov	r7, r0
 8008aee:	460d      	mov	r5, r1
 8008af0:	4614      	mov	r4, r2
 8008af2:	d510      	bpl.n	8008b16 <_svfiprintf_r+0x36>
 8008af4:	690b      	ldr	r3, [r1, #16]
 8008af6:	b973      	cbnz	r3, 8008b16 <_svfiprintf_r+0x36>
 8008af8:	2140      	movs	r1, #64	@ 0x40
 8008afa:	f7ff fc25 	bl	8008348 <_malloc_r>
 8008afe:	6028      	str	r0, [r5, #0]
 8008b00:	6128      	str	r0, [r5, #16]
 8008b02:	b930      	cbnz	r0, 8008b12 <_svfiprintf_r+0x32>
 8008b04:	230c      	movs	r3, #12
 8008b06:	603b      	str	r3, [r7, #0]
 8008b08:	f04f 30ff 	mov.w	r0, #4294967295
 8008b0c:	b01d      	add	sp, #116	@ 0x74
 8008b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b12:	2340      	movs	r3, #64	@ 0x40
 8008b14:	616b      	str	r3, [r5, #20]
 8008b16:	2300      	movs	r3, #0
 8008b18:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b1a:	2320      	movs	r3, #32
 8008b1c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008b20:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b24:	2330      	movs	r3, #48	@ 0x30
 8008b26:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008cc4 <_svfiprintf_r+0x1e4>
 8008b2a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008b2e:	f04f 0901 	mov.w	r9, #1
 8008b32:	4623      	mov	r3, r4
 8008b34:	469a      	mov	sl, r3
 8008b36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b3a:	b10a      	cbz	r2, 8008b40 <_svfiprintf_r+0x60>
 8008b3c:	2a25      	cmp	r2, #37	@ 0x25
 8008b3e:	d1f9      	bne.n	8008b34 <_svfiprintf_r+0x54>
 8008b40:	ebba 0b04 	subs.w	fp, sl, r4
 8008b44:	d00b      	beq.n	8008b5e <_svfiprintf_r+0x7e>
 8008b46:	465b      	mov	r3, fp
 8008b48:	4622      	mov	r2, r4
 8008b4a:	4629      	mov	r1, r5
 8008b4c:	4638      	mov	r0, r7
 8008b4e:	f7ff ff6b 	bl	8008a28 <__ssputs_r>
 8008b52:	3001      	adds	r0, #1
 8008b54:	f000 80a7 	beq.w	8008ca6 <_svfiprintf_r+0x1c6>
 8008b58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b5a:	445a      	add	r2, fp
 8008b5c:	9209      	str	r2, [sp, #36]	@ 0x24
 8008b5e:	f89a 3000 	ldrb.w	r3, [sl]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	f000 809f 	beq.w	8008ca6 <_svfiprintf_r+0x1c6>
 8008b68:	2300      	movs	r3, #0
 8008b6a:	f04f 32ff 	mov.w	r2, #4294967295
 8008b6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b72:	f10a 0a01 	add.w	sl, sl, #1
 8008b76:	9304      	str	r3, [sp, #16]
 8008b78:	9307      	str	r3, [sp, #28]
 8008b7a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008b7e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008b80:	4654      	mov	r4, sl
 8008b82:	2205      	movs	r2, #5
 8008b84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b88:	484e      	ldr	r0, [pc, #312]	@ (8008cc4 <_svfiprintf_r+0x1e4>)
 8008b8a:	f7f7 fb29 	bl	80001e0 <memchr>
 8008b8e:	9a04      	ldr	r2, [sp, #16]
 8008b90:	b9d8      	cbnz	r0, 8008bca <_svfiprintf_r+0xea>
 8008b92:	06d0      	lsls	r0, r2, #27
 8008b94:	bf44      	itt	mi
 8008b96:	2320      	movmi	r3, #32
 8008b98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b9c:	0711      	lsls	r1, r2, #28
 8008b9e:	bf44      	itt	mi
 8008ba0:	232b      	movmi	r3, #43	@ 0x2b
 8008ba2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ba6:	f89a 3000 	ldrb.w	r3, [sl]
 8008baa:	2b2a      	cmp	r3, #42	@ 0x2a
 8008bac:	d015      	beq.n	8008bda <_svfiprintf_r+0xfa>
 8008bae:	9a07      	ldr	r2, [sp, #28]
 8008bb0:	4654      	mov	r4, sl
 8008bb2:	2000      	movs	r0, #0
 8008bb4:	f04f 0c0a 	mov.w	ip, #10
 8008bb8:	4621      	mov	r1, r4
 8008bba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008bbe:	3b30      	subs	r3, #48	@ 0x30
 8008bc0:	2b09      	cmp	r3, #9
 8008bc2:	d94b      	bls.n	8008c5c <_svfiprintf_r+0x17c>
 8008bc4:	b1b0      	cbz	r0, 8008bf4 <_svfiprintf_r+0x114>
 8008bc6:	9207      	str	r2, [sp, #28]
 8008bc8:	e014      	b.n	8008bf4 <_svfiprintf_r+0x114>
 8008bca:	eba0 0308 	sub.w	r3, r0, r8
 8008bce:	fa09 f303 	lsl.w	r3, r9, r3
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	9304      	str	r3, [sp, #16]
 8008bd6:	46a2      	mov	sl, r4
 8008bd8:	e7d2      	b.n	8008b80 <_svfiprintf_r+0xa0>
 8008bda:	9b03      	ldr	r3, [sp, #12]
 8008bdc:	1d19      	adds	r1, r3, #4
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	9103      	str	r1, [sp, #12]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	bfbb      	ittet	lt
 8008be6:	425b      	neglt	r3, r3
 8008be8:	f042 0202 	orrlt.w	r2, r2, #2
 8008bec:	9307      	strge	r3, [sp, #28]
 8008bee:	9307      	strlt	r3, [sp, #28]
 8008bf0:	bfb8      	it	lt
 8008bf2:	9204      	strlt	r2, [sp, #16]
 8008bf4:	7823      	ldrb	r3, [r4, #0]
 8008bf6:	2b2e      	cmp	r3, #46	@ 0x2e
 8008bf8:	d10a      	bne.n	8008c10 <_svfiprintf_r+0x130>
 8008bfa:	7863      	ldrb	r3, [r4, #1]
 8008bfc:	2b2a      	cmp	r3, #42	@ 0x2a
 8008bfe:	d132      	bne.n	8008c66 <_svfiprintf_r+0x186>
 8008c00:	9b03      	ldr	r3, [sp, #12]
 8008c02:	1d1a      	adds	r2, r3, #4
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	9203      	str	r2, [sp, #12]
 8008c08:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008c0c:	3402      	adds	r4, #2
 8008c0e:	9305      	str	r3, [sp, #20]
 8008c10:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008cd4 <_svfiprintf_r+0x1f4>
 8008c14:	7821      	ldrb	r1, [r4, #0]
 8008c16:	2203      	movs	r2, #3
 8008c18:	4650      	mov	r0, sl
 8008c1a:	f7f7 fae1 	bl	80001e0 <memchr>
 8008c1e:	b138      	cbz	r0, 8008c30 <_svfiprintf_r+0x150>
 8008c20:	9b04      	ldr	r3, [sp, #16]
 8008c22:	eba0 000a 	sub.w	r0, r0, sl
 8008c26:	2240      	movs	r2, #64	@ 0x40
 8008c28:	4082      	lsls	r2, r0
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	3401      	adds	r4, #1
 8008c2e:	9304      	str	r3, [sp, #16]
 8008c30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c34:	4824      	ldr	r0, [pc, #144]	@ (8008cc8 <_svfiprintf_r+0x1e8>)
 8008c36:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008c3a:	2206      	movs	r2, #6
 8008c3c:	f7f7 fad0 	bl	80001e0 <memchr>
 8008c40:	2800      	cmp	r0, #0
 8008c42:	d036      	beq.n	8008cb2 <_svfiprintf_r+0x1d2>
 8008c44:	4b21      	ldr	r3, [pc, #132]	@ (8008ccc <_svfiprintf_r+0x1ec>)
 8008c46:	bb1b      	cbnz	r3, 8008c90 <_svfiprintf_r+0x1b0>
 8008c48:	9b03      	ldr	r3, [sp, #12]
 8008c4a:	3307      	adds	r3, #7
 8008c4c:	f023 0307 	bic.w	r3, r3, #7
 8008c50:	3308      	adds	r3, #8
 8008c52:	9303      	str	r3, [sp, #12]
 8008c54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c56:	4433      	add	r3, r6
 8008c58:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c5a:	e76a      	b.n	8008b32 <_svfiprintf_r+0x52>
 8008c5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c60:	460c      	mov	r4, r1
 8008c62:	2001      	movs	r0, #1
 8008c64:	e7a8      	b.n	8008bb8 <_svfiprintf_r+0xd8>
 8008c66:	2300      	movs	r3, #0
 8008c68:	3401      	adds	r4, #1
 8008c6a:	9305      	str	r3, [sp, #20]
 8008c6c:	4619      	mov	r1, r3
 8008c6e:	f04f 0c0a 	mov.w	ip, #10
 8008c72:	4620      	mov	r0, r4
 8008c74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c78:	3a30      	subs	r2, #48	@ 0x30
 8008c7a:	2a09      	cmp	r2, #9
 8008c7c:	d903      	bls.n	8008c86 <_svfiprintf_r+0x1a6>
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d0c6      	beq.n	8008c10 <_svfiprintf_r+0x130>
 8008c82:	9105      	str	r1, [sp, #20]
 8008c84:	e7c4      	b.n	8008c10 <_svfiprintf_r+0x130>
 8008c86:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c8a:	4604      	mov	r4, r0
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	e7f0      	b.n	8008c72 <_svfiprintf_r+0x192>
 8008c90:	ab03      	add	r3, sp, #12
 8008c92:	9300      	str	r3, [sp, #0]
 8008c94:	462a      	mov	r2, r5
 8008c96:	4b0e      	ldr	r3, [pc, #56]	@ (8008cd0 <_svfiprintf_r+0x1f0>)
 8008c98:	a904      	add	r1, sp, #16
 8008c9a:	4638      	mov	r0, r7
 8008c9c:	f3af 8000 	nop.w
 8008ca0:	1c42      	adds	r2, r0, #1
 8008ca2:	4606      	mov	r6, r0
 8008ca4:	d1d6      	bne.n	8008c54 <_svfiprintf_r+0x174>
 8008ca6:	89ab      	ldrh	r3, [r5, #12]
 8008ca8:	065b      	lsls	r3, r3, #25
 8008caa:	f53f af2d 	bmi.w	8008b08 <_svfiprintf_r+0x28>
 8008cae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008cb0:	e72c      	b.n	8008b0c <_svfiprintf_r+0x2c>
 8008cb2:	ab03      	add	r3, sp, #12
 8008cb4:	9300      	str	r3, [sp, #0]
 8008cb6:	462a      	mov	r2, r5
 8008cb8:	4b05      	ldr	r3, [pc, #20]	@ (8008cd0 <_svfiprintf_r+0x1f0>)
 8008cba:	a904      	add	r1, sp, #16
 8008cbc:	4638      	mov	r0, r7
 8008cbe:	f000 f9bb 	bl	8009038 <_printf_i>
 8008cc2:	e7ed      	b.n	8008ca0 <_svfiprintf_r+0x1c0>
 8008cc4:	08009a30 	.word	0x08009a30
 8008cc8:	08009a3a 	.word	0x08009a3a
 8008ccc:	00000000 	.word	0x00000000
 8008cd0:	08008a29 	.word	0x08008a29
 8008cd4:	08009a36 	.word	0x08009a36

08008cd8 <__sfputc_r>:
 8008cd8:	6893      	ldr	r3, [r2, #8]
 8008cda:	3b01      	subs	r3, #1
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	b410      	push	{r4}
 8008ce0:	6093      	str	r3, [r2, #8]
 8008ce2:	da08      	bge.n	8008cf6 <__sfputc_r+0x1e>
 8008ce4:	6994      	ldr	r4, [r2, #24]
 8008ce6:	42a3      	cmp	r3, r4
 8008ce8:	db01      	blt.n	8008cee <__sfputc_r+0x16>
 8008cea:	290a      	cmp	r1, #10
 8008cec:	d103      	bne.n	8008cf6 <__sfputc_r+0x1e>
 8008cee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cf2:	f000 bb6d 	b.w	80093d0 <__swbuf_r>
 8008cf6:	6813      	ldr	r3, [r2, #0]
 8008cf8:	1c58      	adds	r0, r3, #1
 8008cfa:	6010      	str	r0, [r2, #0]
 8008cfc:	7019      	strb	r1, [r3, #0]
 8008cfe:	4608      	mov	r0, r1
 8008d00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d04:	4770      	bx	lr

08008d06 <__sfputs_r>:
 8008d06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d08:	4606      	mov	r6, r0
 8008d0a:	460f      	mov	r7, r1
 8008d0c:	4614      	mov	r4, r2
 8008d0e:	18d5      	adds	r5, r2, r3
 8008d10:	42ac      	cmp	r4, r5
 8008d12:	d101      	bne.n	8008d18 <__sfputs_r+0x12>
 8008d14:	2000      	movs	r0, #0
 8008d16:	e007      	b.n	8008d28 <__sfputs_r+0x22>
 8008d18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d1c:	463a      	mov	r2, r7
 8008d1e:	4630      	mov	r0, r6
 8008d20:	f7ff ffda 	bl	8008cd8 <__sfputc_r>
 8008d24:	1c43      	adds	r3, r0, #1
 8008d26:	d1f3      	bne.n	8008d10 <__sfputs_r+0xa>
 8008d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008d2c <_vfiprintf_r>:
 8008d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d30:	460d      	mov	r5, r1
 8008d32:	b09d      	sub	sp, #116	@ 0x74
 8008d34:	4614      	mov	r4, r2
 8008d36:	4698      	mov	r8, r3
 8008d38:	4606      	mov	r6, r0
 8008d3a:	b118      	cbz	r0, 8008d44 <_vfiprintf_r+0x18>
 8008d3c:	6a03      	ldr	r3, [r0, #32]
 8008d3e:	b90b      	cbnz	r3, 8008d44 <_vfiprintf_r+0x18>
 8008d40:	f7ff fc48 	bl	80085d4 <__sinit>
 8008d44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d46:	07d9      	lsls	r1, r3, #31
 8008d48:	d405      	bmi.n	8008d56 <_vfiprintf_r+0x2a>
 8008d4a:	89ab      	ldrh	r3, [r5, #12]
 8008d4c:	059a      	lsls	r2, r3, #22
 8008d4e:	d402      	bmi.n	8008d56 <_vfiprintf_r+0x2a>
 8008d50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d52:	f7ff fdfe 	bl	8008952 <__retarget_lock_acquire_recursive>
 8008d56:	89ab      	ldrh	r3, [r5, #12]
 8008d58:	071b      	lsls	r3, r3, #28
 8008d5a:	d501      	bpl.n	8008d60 <_vfiprintf_r+0x34>
 8008d5c:	692b      	ldr	r3, [r5, #16]
 8008d5e:	b99b      	cbnz	r3, 8008d88 <_vfiprintf_r+0x5c>
 8008d60:	4629      	mov	r1, r5
 8008d62:	4630      	mov	r0, r6
 8008d64:	f000 fb72 	bl	800944c <__swsetup_r>
 8008d68:	b170      	cbz	r0, 8008d88 <_vfiprintf_r+0x5c>
 8008d6a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d6c:	07dc      	lsls	r4, r3, #31
 8008d6e:	d504      	bpl.n	8008d7a <_vfiprintf_r+0x4e>
 8008d70:	f04f 30ff 	mov.w	r0, #4294967295
 8008d74:	b01d      	add	sp, #116	@ 0x74
 8008d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d7a:	89ab      	ldrh	r3, [r5, #12]
 8008d7c:	0598      	lsls	r0, r3, #22
 8008d7e:	d4f7      	bmi.n	8008d70 <_vfiprintf_r+0x44>
 8008d80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d82:	f7ff fde7 	bl	8008954 <__retarget_lock_release_recursive>
 8008d86:	e7f3      	b.n	8008d70 <_vfiprintf_r+0x44>
 8008d88:	2300      	movs	r3, #0
 8008d8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d8c:	2320      	movs	r3, #32
 8008d8e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008d92:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d96:	2330      	movs	r3, #48	@ 0x30
 8008d98:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008f48 <_vfiprintf_r+0x21c>
 8008d9c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008da0:	f04f 0901 	mov.w	r9, #1
 8008da4:	4623      	mov	r3, r4
 8008da6:	469a      	mov	sl, r3
 8008da8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008dac:	b10a      	cbz	r2, 8008db2 <_vfiprintf_r+0x86>
 8008dae:	2a25      	cmp	r2, #37	@ 0x25
 8008db0:	d1f9      	bne.n	8008da6 <_vfiprintf_r+0x7a>
 8008db2:	ebba 0b04 	subs.w	fp, sl, r4
 8008db6:	d00b      	beq.n	8008dd0 <_vfiprintf_r+0xa4>
 8008db8:	465b      	mov	r3, fp
 8008dba:	4622      	mov	r2, r4
 8008dbc:	4629      	mov	r1, r5
 8008dbe:	4630      	mov	r0, r6
 8008dc0:	f7ff ffa1 	bl	8008d06 <__sfputs_r>
 8008dc4:	3001      	adds	r0, #1
 8008dc6:	f000 80a7 	beq.w	8008f18 <_vfiprintf_r+0x1ec>
 8008dca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008dcc:	445a      	add	r2, fp
 8008dce:	9209      	str	r2, [sp, #36]	@ 0x24
 8008dd0:	f89a 3000 	ldrb.w	r3, [sl]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	f000 809f 	beq.w	8008f18 <_vfiprintf_r+0x1ec>
 8008dda:	2300      	movs	r3, #0
 8008ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8008de0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008de4:	f10a 0a01 	add.w	sl, sl, #1
 8008de8:	9304      	str	r3, [sp, #16]
 8008dea:	9307      	str	r3, [sp, #28]
 8008dec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008df0:	931a      	str	r3, [sp, #104]	@ 0x68
 8008df2:	4654      	mov	r4, sl
 8008df4:	2205      	movs	r2, #5
 8008df6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dfa:	4853      	ldr	r0, [pc, #332]	@ (8008f48 <_vfiprintf_r+0x21c>)
 8008dfc:	f7f7 f9f0 	bl	80001e0 <memchr>
 8008e00:	9a04      	ldr	r2, [sp, #16]
 8008e02:	b9d8      	cbnz	r0, 8008e3c <_vfiprintf_r+0x110>
 8008e04:	06d1      	lsls	r1, r2, #27
 8008e06:	bf44      	itt	mi
 8008e08:	2320      	movmi	r3, #32
 8008e0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e0e:	0713      	lsls	r3, r2, #28
 8008e10:	bf44      	itt	mi
 8008e12:	232b      	movmi	r3, #43	@ 0x2b
 8008e14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e18:	f89a 3000 	ldrb.w	r3, [sl]
 8008e1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e1e:	d015      	beq.n	8008e4c <_vfiprintf_r+0x120>
 8008e20:	9a07      	ldr	r2, [sp, #28]
 8008e22:	4654      	mov	r4, sl
 8008e24:	2000      	movs	r0, #0
 8008e26:	f04f 0c0a 	mov.w	ip, #10
 8008e2a:	4621      	mov	r1, r4
 8008e2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e30:	3b30      	subs	r3, #48	@ 0x30
 8008e32:	2b09      	cmp	r3, #9
 8008e34:	d94b      	bls.n	8008ece <_vfiprintf_r+0x1a2>
 8008e36:	b1b0      	cbz	r0, 8008e66 <_vfiprintf_r+0x13a>
 8008e38:	9207      	str	r2, [sp, #28]
 8008e3a:	e014      	b.n	8008e66 <_vfiprintf_r+0x13a>
 8008e3c:	eba0 0308 	sub.w	r3, r0, r8
 8008e40:	fa09 f303 	lsl.w	r3, r9, r3
 8008e44:	4313      	orrs	r3, r2
 8008e46:	9304      	str	r3, [sp, #16]
 8008e48:	46a2      	mov	sl, r4
 8008e4a:	e7d2      	b.n	8008df2 <_vfiprintf_r+0xc6>
 8008e4c:	9b03      	ldr	r3, [sp, #12]
 8008e4e:	1d19      	adds	r1, r3, #4
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	9103      	str	r1, [sp, #12]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	bfbb      	ittet	lt
 8008e58:	425b      	neglt	r3, r3
 8008e5a:	f042 0202 	orrlt.w	r2, r2, #2
 8008e5e:	9307      	strge	r3, [sp, #28]
 8008e60:	9307      	strlt	r3, [sp, #28]
 8008e62:	bfb8      	it	lt
 8008e64:	9204      	strlt	r2, [sp, #16]
 8008e66:	7823      	ldrb	r3, [r4, #0]
 8008e68:	2b2e      	cmp	r3, #46	@ 0x2e
 8008e6a:	d10a      	bne.n	8008e82 <_vfiprintf_r+0x156>
 8008e6c:	7863      	ldrb	r3, [r4, #1]
 8008e6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e70:	d132      	bne.n	8008ed8 <_vfiprintf_r+0x1ac>
 8008e72:	9b03      	ldr	r3, [sp, #12]
 8008e74:	1d1a      	adds	r2, r3, #4
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	9203      	str	r2, [sp, #12]
 8008e7a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008e7e:	3402      	adds	r4, #2
 8008e80:	9305      	str	r3, [sp, #20]
 8008e82:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008f58 <_vfiprintf_r+0x22c>
 8008e86:	7821      	ldrb	r1, [r4, #0]
 8008e88:	2203      	movs	r2, #3
 8008e8a:	4650      	mov	r0, sl
 8008e8c:	f7f7 f9a8 	bl	80001e0 <memchr>
 8008e90:	b138      	cbz	r0, 8008ea2 <_vfiprintf_r+0x176>
 8008e92:	9b04      	ldr	r3, [sp, #16]
 8008e94:	eba0 000a 	sub.w	r0, r0, sl
 8008e98:	2240      	movs	r2, #64	@ 0x40
 8008e9a:	4082      	lsls	r2, r0
 8008e9c:	4313      	orrs	r3, r2
 8008e9e:	3401      	adds	r4, #1
 8008ea0:	9304      	str	r3, [sp, #16]
 8008ea2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ea6:	4829      	ldr	r0, [pc, #164]	@ (8008f4c <_vfiprintf_r+0x220>)
 8008ea8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008eac:	2206      	movs	r2, #6
 8008eae:	f7f7 f997 	bl	80001e0 <memchr>
 8008eb2:	2800      	cmp	r0, #0
 8008eb4:	d03f      	beq.n	8008f36 <_vfiprintf_r+0x20a>
 8008eb6:	4b26      	ldr	r3, [pc, #152]	@ (8008f50 <_vfiprintf_r+0x224>)
 8008eb8:	bb1b      	cbnz	r3, 8008f02 <_vfiprintf_r+0x1d6>
 8008eba:	9b03      	ldr	r3, [sp, #12]
 8008ebc:	3307      	adds	r3, #7
 8008ebe:	f023 0307 	bic.w	r3, r3, #7
 8008ec2:	3308      	adds	r3, #8
 8008ec4:	9303      	str	r3, [sp, #12]
 8008ec6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ec8:	443b      	add	r3, r7
 8008eca:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ecc:	e76a      	b.n	8008da4 <_vfiprintf_r+0x78>
 8008ece:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ed2:	460c      	mov	r4, r1
 8008ed4:	2001      	movs	r0, #1
 8008ed6:	e7a8      	b.n	8008e2a <_vfiprintf_r+0xfe>
 8008ed8:	2300      	movs	r3, #0
 8008eda:	3401      	adds	r4, #1
 8008edc:	9305      	str	r3, [sp, #20]
 8008ede:	4619      	mov	r1, r3
 8008ee0:	f04f 0c0a 	mov.w	ip, #10
 8008ee4:	4620      	mov	r0, r4
 8008ee6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008eea:	3a30      	subs	r2, #48	@ 0x30
 8008eec:	2a09      	cmp	r2, #9
 8008eee:	d903      	bls.n	8008ef8 <_vfiprintf_r+0x1cc>
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d0c6      	beq.n	8008e82 <_vfiprintf_r+0x156>
 8008ef4:	9105      	str	r1, [sp, #20]
 8008ef6:	e7c4      	b.n	8008e82 <_vfiprintf_r+0x156>
 8008ef8:	fb0c 2101 	mla	r1, ip, r1, r2
 8008efc:	4604      	mov	r4, r0
 8008efe:	2301      	movs	r3, #1
 8008f00:	e7f0      	b.n	8008ee4 <_vfiprintf_r+0x1b8>
 8008f02:	ab03      	add	r3, sp, #12
 8008f04:	9300      	str	r3, [sp, #0]
 8008f06:	462a      	mov	r2, r5
 8008f08:	4b12      	ldr	r3, [pc, #72]	@ (8008f54 <_vfiprintf_r+0x228>)
 8008f0a:	a904      	add	r1, sp, #16
 8008f0c:	4630      	mov	r0, r6
 8008f0e:	f3af 8000 	nop.w
 8008f12:	4607      	mov	r7, r0
 8008f14:	1c78      	adds	r0, r7, #1
 8008f16:	d1d6      	bne.n	8008ec6 <_vfiprintf_r+0x19a>
 8008f18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008f1a:	07d9      	lsls	r1, r3, #31
 8008f1c:	d405      	bmi.n	8008f2a <_vfiprintf_r+0x1fe>
 8008f1e:	89ab      	ldrh	r3, [r5, #12]
 8008f20:	059a      	lsls	r2, r3, #22
 8008f22:	d402      	bmi.n	8008f2a <_vfiprintf_r+0x1fe>
 8008f24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008f26:	f7ff fd15 	bl	8008954 <__retarget_lock_release_recursive>
 8008f2a:	89ab      	ldrh	r3, [r5, #12]
 8008f2c:	065b      	lsls	r3, r3, #25
 8008f2e:	f53f af1f 	bmi.w	8008d70 <_vfiprintf_r+0x44>
 8008f32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008f34:	e71e      	b.n	8008d74 <_vfiprintf_r+0x48>
 8008f36:	ab03      	add	r3, sp, #12
 8008f38:	9300      	str	r3, [sp, #0]
 8008f3a:	462a      	mov	r2, r5
 8008f3c:	4b05      	ldr	r3, [pc, #20]	@ (8008f54 <_vfiprintf_r+0x228>)
 8008f3e:	a904      	add	r1, sp, #16
 8008f40:	4630      	mov	r0, r6
 8008f42:	f000 f879 	bl	8009038 <_printf_i>
 8008f46:	e7e4      	b.n	8008f12 <_vfiprintf_r+0x1e6>
 8008f48:	08009a30 	.word	0x08009a30
 8008f4c:	08009a3a 	.word	0x08009a3a
 8008f50:	00000000 	.word	0x00000000
 8008f54:	08008d07 	.word	0x08008d07
 8008f58:	08009a36 	.word	0x08009a36

08008f5c <_printf_common>:
 8008f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f60:	4616      	mov	r6, r2
 8008f62:	4698      	mov	r8, r3
 8008f64:	688a      	ldr	r2, [r1, #8]
 8008f66:	690b      	ldr	r3, [r1, #16]
 8008f68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	bfb8      	it	lt
 8008f70:	4613      	movlt	r3, r2
 8008f72:	6033      	str	r3, [r6, #0]
 8008f74:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008f78:	4607      	mov	r7, r0
 8008f7a:	460c      	mov	r4, r1
 8008f7c:	b10a      	cbz	r2, 8008f82 <_printf_common+0x26>
 8008f7e:	3301      	adds	r3, #1
 8008f80:	6033      	str	r3, [r6, #0]
 8008f82:	6823      	ldr	r3, [r4, #0]
 8008f84:	0699      	lsls	r1, r3, #26
 8008f86:	bf42      	ittt	mi
 8008f88:	6833      	ldrmi	r3, [r6, #0]
 8008f8a:	3302      	addmi	r3, #2
 8008f8c:	6033      	strmi	r3, [r6, #0]
 8008f8e:	6825      	ldr	r5, [r4, #0]
 8008f90:	f015 0506 	ands.w	r5, r5, #6
 8008f94:	d106      	bne.n	8008fa4 <_printf_common+0x48>
 8008f96:	f104 0a19 	add.w	sl, r4, #25
 8008f9a:	68e3      	ldr	r3, [r4, #12]
 8008f9c:	6832      	ldr	r2, [r6, #0]
 8008f9e:	1a9b      	subs	r3, r3, r2
 8008fa0:	42ab      	cmp	r3, r5
 8008fa2:	dc26      	bgt.n	8008ff2 <_printf_common+0x96>
 8008fa4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008fa8:	6822      	ldr	r2, [r4, #0]
 8008faa:	3b00      	subs	r3, #0
 8008fac:	bf18      	it	ne
 8008fae:	2301      	movne	r3, #1
 8008fb0:	0692      	lsls	r2, r2, #26
 8008fb2:	d42b      	bmi.n	800900c <_printf_common+0xb0>
 8008fb4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008fb8:	4641      	mov	r1, r8
 8008fba:	4638      	mov	r0, r7
 8008fbc:	47c8      	blx	r9
 8008fbe:	3001      	adds	r0, #1
 8008fc0:	d01e      	beq.n	8009000 <_printf_common+0xa4>
 8008fc2:	6823      	ldr	r3, [r4, #0]
 8008fc4:	6922      	ldr	r2, [r4, #16]
 8008fc6:	f003 0306 	and.w	r3, r3, #6
 8008fca:	2b04      	cmp	r3, #4
 8008fcc:	bf02      	ittt	eq
 8008fce:	68e5      	ldreq	r5, [r4, #12]
 8008fd0:	6833      	ldreq	r3, [r6, #0]
 8008fd2:	1aed      	subeq	r5, r5, r3
 8008fd4:	68a3      	ldr	r3, [r4, #8]
 8008fd6:	bf0c      	ite	eq
 8008fd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008fdc:	2500      	movne	r5, #0
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	bfc4      	itt	gt
 8008fe2:	1a9b      	subgt	r3, r3, r2
 8008fe4:	18ed      	addgt	r5, r5, r3
 8008fe6:	2600      	movs	r6, #0
 8008fe8:	341a      	adds	r4, #26
 8008fea:	42b5      	cmp	r5, r6
 8008fec:	d11a      	bne.n	8009024 <_printf_common+0xc8>
 8008fee:	2000      	movs	r0, #0
 8008ff0:	e008      	b.n	8009004 <_printf_common+0xa8>
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	4652      	mov	r2, sl
 8008ff6:	4641      	mov	r1, r8
 8008ff8:	4638      	mov	r0, r7
 8008ffa:	47c8      	blx	r9
 8008ffc:	3001      	adds	r0, #1
 8008ffe:	d103      	bne.n	8009008 <_printf_common+0xac>
 8009000:	f04f 30ff 	mov.w	r0, #4294967295
 8009004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009008:	3501      	adds	r5, #1
 800900a:	e7c6      	b.n	8008f9a <_printf_common+0x3e>
 800900c:	18e1      	adds	r1, r4, r3
 800900e:	1c5a      	adds	r2, r3, #1
 8009010:	2030      	movs	r0, #48	@ 0x30
 8009012:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009016:	4422      	add	r2, r4
 8009018:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800901c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009020:	3302      	adds	r3, #2
 8009022:	e7c7      	b.n	8008fb4 <_printf_common+0x58>
 8009024:	2301      	movs	r3, #1
 8009026:	4622      	mov	r2, r4
 8009028:	4641      	mov	r1, r8
 800902a:	4638      	mov	r0, r7
 800902c:	47c8      	blx	r9
 800902e:	3001      	adds	r0, #1
 8009030:	d0e6      	beq.n	8009000 <_printf_common+0xa4>
 8009032:	3601      	adds	r6, #1
 8009034:	e7d9      	b.n	8008fea <_printf_common+0x8e>
	...

08009038 <_printf_i>:
 8009038:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800903c:	7e0f      	ldrb	r7, [r1, #24]
 800903e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009040:	2f78      	cmp	r7, #120	@ 0x78
 8009042:	4691      	mov	r9, r2
 8009044:	4680      	mov	r8, r0
 8009046:	460c      	mov	r4, r1
 8009048:	469a      	mov	sl, r3
 800904a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800904e:	d807      	bhi.n	8009060 <_printf_i+0x28>
 8009050:	2f62      	cmp	r7, #98	@ 0x62
 8009052:	d80a      	bhi.n	800906a <_printf_i+0x32>
 8009054:	2f00      	cmp	r7, #0
 8009056:	f000 80d2 	beq.w	80091fe <_printf_i+0x1c6>
 800905a:	2f58      	cmp	r7, #88	@ 0x58
 800905c:	f000 80b9 	beq.w	80091d2 <_printf_i+0x19a>
 8009060:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009064:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009068:	e03a      	b.n	80090e0 <_printf_i+0xa8>
 800906a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800906e:	2b15      	cmp	r3, #21
 8009070:	d8f6      	bhi.n	8009060 <_printf_i+0x28>
 8009072:	a101      	add	r1, pc, #4	@ (adr r1, 8009078 <_printf_i+0x40>)
 8009074:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009078:	080090d1 	.word	0x080090d1
 800907c:	080090e5 	.word	0x080090e5
 8009080:	08009061 	.word	0x08009061
 8009084:	08009061 	.word	0x08009061
 8009088:	08009061 	.word	0x08009061
 800908c:	08009061 	.word	0x08009061
 8009090:	080090e5 	.word	0x080090e5
 8009094:	08009061 	.word	0x08009061
 8009098:	08009061 	.word	0x08009061
 800909c:	08009061 	.word	0x08009061
 80090a0:	08009061 	.word	0x08009061
 80090a4:	080091e5 	.word	0x080091e5
 80090a8:	0800910f 	.word	0x0800910f
 80090ac:	0800919f 	.word	0x0800919f
 80090b0:	08009061 	.word	0x08009061
 80090b4:	08009061 	.word	0x08009061
 80090b8:	08009207 	.word	0x08009207
 80090bc:	08009061 	.word	0x08009061
 80090c0:	0800910f 	.word	0x0800910f
 80090c4:	08009061 	.word	0x08009061
 80090c8:	08009061 	.word	0x08009061
 80090cc:	080091a7 	.word	0x080091a7
 80090d0:	6833      	ldr	r3, [r6, #0]
 80090d2:	1d1a      	adds	r2, r3, #4
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	6032      	str	r2, [r6, #0]
 80090d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80090dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80090e0:	2301      	movs	r3, #1
 80090e2:	e09d      	b.n	8009220 <_printf_i+0x1e8>
 80090e4:	6833      	ldr	r3, [r6, #0]
 80090e6:	6820      	ldr	r0, [r4, #0]
 80090e8:	1d19      	adds	r1, r3, #4
 80090ea:	6031      	str	r1, [r6, #0]
 80090ec:	0606      	lsls	r6, r0, #24
 80090ee:	d501      	bpl.n	80090f4 <_printf_i+0xbc>
 80090f0:	681d      	ldr	r5, [r3, #0]
 80090f2:	e003      	b.n	80090fc <_printf_i+0xc4>
 80090f4:	0645      	lsls	r5, r0, #25
 80090f6:	d5fb      	bpl.n	80090f0 <_printf_i+0xb8>
 80090f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80090fc:	2d00      	cmp	r5, #0
 80090fe:	da03      	bge.n	8009108 <_printf_i+0xd0>
 8009100:	232d      	movs	r3, #45	@ 0x2d
 8009102:	426d      	negs	r5, r5
 8009104:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009108:	4859      	ldr	r0, [pc, #356]	@ (8009270 <_printf_i+0x238>)
 800910a:	230a      	movs	r3, #10
 800910c:	e011      	b.n	8009132 <_printf_i+0xfa>
 800910e:	6821      	ldr	r1, [r4, #0]
 8009110:	6833      	ldr	r3, [r6, #0]
 8009112:	0608      	lsls	r0, r1, #24
 8009114:	f853 5b04 	ldr.w	r5, [r3], #4
 8009118:	d402      	bmi.n	8009120 <_printf_i+0xe8>
 800911a:	0649      	lsls	r1, r1, #25
 800911c:	bf48      	it	mi
 800911e:	b2ad      	uxthmi	r5, r5
 8009120:	2f6f      	cmp	r7, #111	@ 0x6f
 8009122:	4853      	ldr	r0, [pc, #332]	@ (8009270 <_printf_i+0x238>)
 8009124:	6033      	str	r3, [r6, #0]
 8009126:	bf14      	ite	ne
 8009128:	230a      	movne	r3, #10
 800912a:	2308      	moveq	r3, #8
 800912c:	2100      	movs	r1, #0
 800912e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009132:	6866      	ldr	r6, [r4, #4]
 8009134:	60a6      	str	r6, [r4, #8]
 8009136:	2e00      	cmp	r6, #0
 8009138:	bfa2      	ittt	ge
 800913a:	6821      	ldrge	r1, [r4, #0]
 800913c:	f021 0104 	bicge.w	r1, r1, #4
 8009140:	6021      	strge	r1, [r4, #0]
 8009142:	b90d      	cbnz	r5, 8009148 <_printf_i+0x110>
 8009144:	2e00      	cmp	r6, #0
 8009146:	d04b      	beq.n	80091e0 <_printf_i+0x1a8>
 8009148:	4616      	mov	r6, r2
 800914a:	fbb5 f1f3 	udiv	r1, r5, r3
 800914e:	fb03 5711 	mls	r7, r3, r1, r5
 8009152:	5dc7      	ldrb	r7, [r0, r7]
 8009154:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009158:	462f      	mov	r7, r5
 800915a:	42bb      	cmp	r3, r7
 800915c:	460d      	mov	r5, r1
 800915e:	d9f4      	bls.n	800914a <_printf_i+0x112>
 8009160:	2b08      	cmp	r3, #8
 8009162:	d10b      	bne.n	800917c <_printf_i+0x144>
 8009164:	6823      	ldr	r3, [r4, #0]
 8009166:	07df      	lsls	r7, r3, #31
 8009168:	d508      	bpl.n	800917c <_printf_i+0x144>
 800916a:	6923      	ldr	r3, [r4, #16]
 800916c:	6861      	ldr	r1, [r4, #4]
 800916e:	4299      	cmp	r1, r3
 8009170:	bfde      	ittt	le
 8009172:	2330      	movle	r3, #48	@ 0x30
 8009174:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009178:	f106 36ff 	addle.w	r6, r6, #4294967295
 800917c:	1b92      	subs	r2, r2, r6
 800917e:	6122      	str	r2, [r4, #16]
 8009180:	f8cd a000 	str.w	sl, [sp]
 8009184:	464b      	mov	r3, r9
 8009186:	aa03      	add	r2, sp, #12
 8009188:	4621      	mov	r1, r4
 800918a:	4640      	mov	r0, r8
 800918c:	f7ff fee6 	bl	8008f5c <_printf_common>
 8009190:	3001      	adds	r0, #1
 8009192:	d14a      	bne.n	800922a <_printf_i+0x1f2>
 8009194:	f04f 30ff 	mov.w	r0, #4294967295
 8009198:	b004      	add	sp, #16
 800919a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800919e:	6823      	ldr	r3, [r4, #0]
 80091a0:	f043 0320 	orr.w	r3, r3, #32
 80091a4:	6023      	str	r3, [r4, #0]
 80091a6:	4833      	ldr	r0, [pc, #204]	@ (8009274 <_printf_i+0x23c>)
 80091a8:	2778      	movs	r7, #120	@ 0x78
 80091aa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80091ae:	6823      	ldr	r3, [r4, #0]
 80091b0:	6831      	ldr	r1, [r6, #0]
 80091b2:	061f      	lsls	r7, r3, #24
 80091b4:	f851 5b04 	ldr.w	r5, [r1], #4
 80091b8:	d402      	bmi.n	80091c0 <_printf_i+0x188>
 80091ba:	065f      	lsls	r7, r3, #25
 80091bc:	bf48      	it	mi
 80091be:	b2ad      	uxthmi	r5, r5
 80091c0:	6031      	str	r1, [r6, #0]
 80091c2:	07d9      	lsls	r1, r3, #31
 80091c4:	bf44      	itt	mi
 80091c6:	f043 0320 	orrmi.w	r3, r3, #32
 80091ca:	6023      	strmi	r3, [r4, #0]
 80091cc:	b11d      	cbz	r5, 80091d6 <_printf_i+0x19e>
 80091ce:	2310      	movs	r3, #16
 80091d0:	e7ac      	b.n	800912c <_printf_i+0xf4>
 80091d2:	4827      	ldr	r0, [pc, #156]	@ (8009270 <_printf_i+0x238>)
 80091d4:	e7e9      	b.n	80091aa <_printf_i+0x172>
 80091d6:	6823      	ldr	r3, [r4, #0]
 80091d8:	f023 0320 	bic.w	r3, r3, #32
 80091dc:	6023      	str	r3, [r4, #0]
 80091de:	e7f6      	b.n	80091ce <_printf_i+0x196>
 80091e0:	4616      	mov	r6, r2
 80091e2:	e7bd      	b.n	8009160 <_printf_i+0x128>
 80091e4:	6833      	ldr	r3, [r6, #0]
 80091e6:	6825      	ldr	r5, [r4, #0]
 80091e8:	6961      	ldr	r1, [r4, #20]
 80091ea:	1d18      	adds	r0, r3, #4
 80091ec:	6030      	str	r0, [r6, #0]
 80091ee:	062e      	lsls	r6, r5, #24
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	d501      	bpl.n	80091f8 <_printf_i+0x1c0>
 80091f4:	6019      	str	r1, [r3, #0]
 80091f6:	e002      	b.n	80091fe <_printf_i+0x1c6>
 80091f8:	0668      	lsls	r0, r5, #25
 80091fa:	d5fb      	bpl.n	80091f4 <_printf_i+0x1bc>
 80091fc:	8019      	strh	r1, [r3, #0]
 80091fe:	2300      	movs	r3, #0
 8009200:	6123      	str	r3, [r4, #16]
 8009202:	4616      	mov	r6, r2
 8009204:	e7bc      	b.n	8009180 <_printf_i+0x148>
 8009206:	6833      	ldr	r3, [r6, #0]
 8009208:	1d1a      	adds	r2, r3, #4
 800920a:	6032      	str	r2, [r6, #0]
 800920c:	681e      	ldr	r6, [r3, #0]
 800920e:	6862      	ldr	r2, [r4, #4]
 8009210:	2100      	movs	r1, #0
 8009212:	4630      	mov	r0, r6
 8009214:	f7f6 ffe4 	bl	80001e0 <memchr>
 8009218:	b108      	cbz	r0, 800921e <_printf_i+0x1e6>
 800921a:	1b80      	subs	r0, r0, r6
 800921c:	6060      	str	r0, [r4, #4]
 800921e:	6863      	ldr	r3, [r4, #4]
 8009220:	6123      	str	r3, [r4, #16]
 8009222:	2300      	movs	r3, #0
 8009224:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009228:	e7aa      	b.n	8009180 <_printf_i+0x148>
 800922a:	6923      	ldr	r3, [r4, #16]
 800922c:	4632      	mov	r2, r6
 800922e:	4649      	mov	r1, r9
 8009230:	4640      	mov	r0, r8
 8009232:	47d0      	blx	sl
 8009234:	3001      	adds	r0, #1
 8009236:	d0ad      	beq.n	8009194 <_printf_i+0x15c>
 8009238:	6823      	ldr	r3, [r4, #0]
 800923a:	079b      	lsls	r3, r3, #30
 800923c:	d413      	bmi.n	8009266 <_printf_i+0x22e>
 800923e:	68e0      	ldr	r0, [r4, #12]
 8009240:	9b03      	ldr	r3, [sp, #12]
 8009242:	4298      	cmp	r0, r3
 8009244:	bfb8      	it	lt
 8009246:	4618      	movlt	r0, r3
 8009248:	e7a6      	b.n	8009198 <_printf_i+0x160>
 800924a:	2301      	movs	r3, #1
 800924c:	4632      	mov	r2, r6
 800924e:	4649      	mov	r1, r9
 8009250:	4640      	mov	r0, r8
 8009252:	47d0      	blx	sl
 8009254:	3001      	adds	r0, #1
 8009256:	d09d      	beq.n	8009194 <_printf_i+0x15c>
 8009258:	3501      	adds	r5, #1
 800925a:	68e3      	ldr	r3, [r4, #12]
 800925c:	9903      	ldr	r1, [sp, #12]
 800925e:	1a5b      	subs	r3, r3, r1
 8009260:	42ab      	cmp	r3, r5
 8009262:	dcf2      	bgt.n	800924a <_printf_i+0x212>
 8009264:	e7eb      	b.n	800923e <_printf_i+0x206>
 8009266:	2500      	movs	r5, #0
 8009268:	f104 0619 	add.w	r6, r4, #25
 800926c:	e7f5      	b.n	800925a <_printf_i+0x222>
 800926e:	bf00      	nop
 8009270:	08009a41 	.word	0x08009a41
 8009274:	08009a52 	.word	0x08009a52

08009278 <__sflush_r>:
 8009278:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800927c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009280:	0716      	lsls	r6, r2, #28
 8009282:	4605      	mov	r5, r0
 8009284:	460c      	mov	r4, r1
 8009286:	d454      	bmi.n	8009332 <__sflush_r+0xba>
 8009288:	684b      	ldr	r3, [r1, #4]
 800928a:	2b00      	cmp	r3, #0
 800928c:	dc02      	bgt.n	8009294 <__sflush_r+0x1c>
 800928e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009290:	2b00      	cmp	r3, #0
 8009292:	dd48      	ble.n	8009326 <__sflush_r+0xae>
 8009294:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009296:	2e00      	cmp	r6, #0
 8009298:	d045      	beq.n	8009326 <__sflush_r+0xae>
 800929a:	2300      	movs	r3, #0
 800929c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80092a0:	682f      	ldr	r7, [r5, #0]
 80092a2:	6a21      	ldr	r1, [r4, #32]
 80092a4:	602b      	str	r3, [r5, #0]
 80092a6:	d030      	beq.n	800930a <__sflush_r+0x92>
 80092a8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80092aa:	89a3      	ldrh	r3, [r4, #12]
 80092ac:	0759      	lsls	r1, r3, #29
 80092ae:	d505      	bpl.n	80092bc <__sflush_r+0x44>
 80092b0:	6863      	ldr	r3, [r4, #4]
 80092b2:	1ad2      	subs	r2, r2, r3
 80092b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80092b6:	b10b      	cbz	r3, 80092bc <__sflush_r+0x44>
 80092b8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80092ba:	1ad2      	subs	r2, r2, r3
 80092bc:	2300      	movs	r3, #0
 80092be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80092c0:	6a21      	ldr	r1, [r4, #32]
 80092c2:	4628      	mov	r0, r5
 80092c4:	47b0      	blx	r6
 80092c6:	1c43      	adds	r3, r0, #1
 80092c8:	89a3      	ldrh	r3, [r4, #12]
 80092ca:	d106      	bne.n	80092da <__sflush_r+0x62>
 80092cc:	6829      	ldr	r1, [r5, #0]
 80092ce:	291d      	cmp	r1, #29
 80092d0:	d82b      	bhi.n	800932a <__sflush_r+0xb2>
 80092d2:	4a2a      	ldr	r2, [pc, #168]	@ (800937c <__sflush_r+0x104>)
 80092d4:	410a      	asrs	r2, r1
 80092d6:	07d6      	lsls	r6, r2, #31
 80092d8:	d427      	bmi.n	800932a <__sflush_r+0xb2>
 80092da:	2200      	movs	r2, #0
 80092dc:	6062      	str	r2, [r4, #4]
 80092de:	04d9      	lsls	r1, r3, #19
 80092e0:	6922      	ldr	r2, [r4, #16]
 80092e2:	6022      	str	r2, [r4, #0]
 80092e4:	d504      	bpl.n	80092f0 <__sflush_r+0x78>
 80092e6:	1c42      	adds	r2, r0, #1
 80092e8:	d101      	bne.n	80092ee <__sflush_r+0x76>
 80092ea:	682b      	ldr	r3, [r5, #0]
 80092ec:	b903      	cbnz	r3, 80092f0 <__sflush_r+0x78>
 80092ee:	6560      	str	r0, [r4, #84]	@ 0x54
 80092f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80092f2:	602f      	str	r7, [r5, #0]
 80092f4:	b1b9      	cbz	r1, 8009326 <__sflush_r+0xae>
 80092f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80092fa:	4299      	cmp	r1, r3
 80092fc:	d002      	beq.n	8009304 <__sflush_r+0x8c>
 80092fe:	4628      	mov	r0, r5
 8009300:	f7ff fb40 	bl	8008984 <_free_r>
 8009304:	2300      	movs	r3, #0
 8009306:	6363      	str	r3, [r4, #52]	@ 0x34
 8009308:	e00d      	b.n	8009326 <__sflush_r+0xae>
 800930a:	2301      	movs	r3, #1
 800930c:	4628      	mov	r0, r5
 800930e:	47b0      	blx	r6
 8009310:	4602      	mov	r2, r0
 8009312:	1c50      	adds	r0, r2, #1
 8009314:	d1c9      	bne.n	80092aa <__sflush_r+0x32>
 8009316:	682b      	ldr	r3, [r5, #0]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d0c6      	beq.n	80092aa <__sflush_r+0x32>
 800931c:	2b1d      	cmp	r3, #29
 800931e:	d001      	beq.n	8009324 <__sflush_r+0xac>
 8009320:	2b16      	cmp	r3, #22
 8009322:	d11e      	bne.n	8009362 <__sflush_r+0xea>
 8009324:	602f      	str	r7, [r5, #0]
 8009326:	2000      	movs	r0, #0
 8009328:	e022      	b.n	8009370 <__sflush_r+0xf8>
 800932a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800932e:	b21b      	sxth	r3, r3
 8009330:	e01b      	b.n	800936a <__sflush_r+0xf2>
 8009332:	690f      	ldr	r7, [r1, #16]
 8009334:	2f00      	cmp	r7, #0
 8009336:	d0f6      	beq.n	8009326 <__sflush_r+0xae>
 8009338:	0793      	lsls	r3, r2, #30
 800933a:	680e      	ldr	r6, [r1, #0]
 800933c:	bf08      	it	eq
 800933e:	694b      	ldreq	r3, [r1, #20]
 8009340:	600f      	str	r7, [r1, #0]
 8009342:	bf18      	it	ne
 8009344:	2300      	movne	r3, #0
 8009346:	eba6 0807 	sub.w	r8, r6, r7
 800934a:	608b      	str	r3, [r1, #8]
 800934c:	f1b8 0f00 	cmp.w	r8, #0
 8009350:	dde9      	ble.n	8009326 <__sflush_r+0xae>
 8009352:	6a21      	ldr	r1, [r4, #32]
 8009354:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009356:	4643      	mov	r3, r8
 8009358:	463a      	mov	r2, r7
 800935a:	4628      	mov	r0, r5
 800935c:	47b0      	blx	r6
 800935e:	2800      	cmp	r0, #0
 8009360:	dc08      	bgt.n	8009374 <__sflush_r+0xfc>
 8009362:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009366:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800936a:	81a3      	strh	r3, [r4, #12]
 800936c:	f04f 30ff 	mov.w	r0, #4294967295
 8009370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009374:	4407      	add	r7, r0
 8009376:	eba8 0800 	sub.w	r8, r8, r0
 800937a:	e7e7      	b.n	800934c <__sflush_r+0xd4>
 800937c:	dfbffffe 	.word	0xdfbffffe

08009380 <_fflush_r>:
 8009380:	b538      	push	{r3, r4, r5, lr}
 8009382:	690b      	ldr	r3, [r1, #16]
 8009384:	4605      	mov	r5, r0
 8009386:	460c      	mov	r4, r1
 8009388:	b913      	cbnz	r3, 8009390 <_fflush_r+0x10>
 800938a:	2500      	movs	r5, #0
 800938c:	4628      	mov	r0, r5
 800938e:	bd38      	pop	{r3, r4, r5, pc}
 8009390:	b118      	cbz	r0, 800939a <_fflush_r+0x1a>
 8009392:	6a03      	ldr	r3, [r0, #32]
 8009394:	b90b      	cbnz	r3, 800939a <_fflush_r+0x1a>
 8009396:	f7ff f91d 	bl	80085d4 <__sinit>
 800939a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d0f3      	beq.n	800938a <_fflush_r+0xa>
 80093a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80093a4:	07d0      	lsls	r0, r2, #31
 80093a6:	d404      	bmi.n	80093b2 <_fflush_r+0x32>
 80093a8:	0599      	lsls	r1, r3, #22
 80093aa:	d402      	bmi.n	80093b2 <_fflush_r+0x32>
 80093ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80093ae:	f7ff fad0 	bl	8008952 <__retarget_lock_acquire_recursive>
 80093b2:	4628      	mov	r0, r5
 80093b4:	4621      	mov	r1, r4
 80093b6:	f7ff ff5f 	bl	8009278 <__sflush_r>
 80093ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80093bc:	07da      	lsls	r2, r3, #31
 80093be:	4605      	mov	r5, r0
 80093c0:	d4e4      	bmi.n	800938c <_fflush_r+0xc>
 80093c2:	89a3      	ldrh	r3, [r4, #12]
 80093c4:	059b      	lsls	r3, r3, #22
 80093c6:	d4e1      	bmi.n	800938c <_fflush_r+0xc>
 80093c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80093ca:	f7ff fac3 	bl	8008954 <__retarget_lock_release_recursive>
 80093ce:	e7dd      	b.n	800938c <_fflush_r+0xc>

080093d0 <__swbuf_r>:
 80093d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093d2:	460e      	mov	r6, r1
 80093d4:	4614      	mov	r4, r2
 80093d6:	4605      	mov	r5, r0
 80093d8:	b118      	cbz	r0, 80093e2 <__swbuf_r+0x12>
 80093da:	6a03      	ldr	r3, [r0, #32]
 80093dc:	b90b      	cbnz	r3, 80093e2 <__swbuf_r+0x12>
 80093de:	f7ff f8f9 	bl	80085d4 <__sinit>
 80093e2:	69a3      	ldr	r3, [r4, #24]
 80093e4:	60a3      	str	r3, [r4, #8]
 80093e6:	89a3      	ldrh	r3, [r4, #12]
 80093e8:	071a      	lsls	r2, r3, #28
 80093ea:	d501      	bpl.n	80093f0 <__swbuf_r+0x20>
 80093ec:	6923      	ldr	r3, [r4, #16]
 80093ee:	b943      	cbnz	r3, 8009402 <__swbuf_r+0x32>
 80093f0:	4621      	mov	r1, r4
 80093f2:	4628      	mov	r0, r5
 80093f4:	f000 f82a 	bl	800944c <__swsetup_r>
 80093f8:	b118      	cbz	r0, 8009402 <__swbuf_r+0x32>
 80093fa:	f04f 37ff 	mov.w	r7, #4294967295
 80093fe:	4638      	mov	r0, r7
 8009400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009402:	6823      	ldr	r3, [r4, #0]
 8009404:	6922      	ldr	r2, [r4, #16]
 8009406:	1a98      	subs	r0, r3, r2
 8009408:	6963      	ldr	r3, [r4, #20]
 800940a:	b2f6      	uxtb	r6, r6
 800940c:	4283      	cmp	r3, r0
 800940e:	4637      	mov	r7, r6
 8009410:	dc05      	bgt.n	800941e <__swbuf_r+0x4e>
 8009412:	4621      	mov	r1, r4
 8009414:	4628      	mov	r0, r5
 8009416:	f7ff ffb3 	bl	8009380 <_fflush_r>
 800941a:	2800      	cmp	r0, #0
 800941c:	d1ed      	bne.n	80093fa <__swbuf_r+0x2a>
 800941e:	68a3      	ldr	r3, [r4, #8]
 8009420:	3b01      	subs	r3, #1
 8009422:	60a3      	str	r3, [r4, #8]
 8009424:	6823      	ldr	r3, [r4, #0]
 8009426:	1c5a      	adds	r2, r3, #1
 8009428:	6022      	str	r2, [r4, #0]
 800942a:	701e      	strb	r6, [r3, #0]
 800942c:	6962      	ldr	r2, [r4, #20]
 800942e:	1c43      	adds	r3, r0, #1
 8009430:	429a      	cmp	r2, r3
 8009432:	d004      	beq.n	800943e <__swbuf_r+0x6e>
 8009434:	89a3      	ldrh	r3, [r4, #12]
 8009436:	07db      	lsls	r3, r3, #31
 8009438:	d5e1      	bpl.n	80093fe <__swbuf_r+0x2e>
 800943a:	2e0a      	cmp	r6, #10
 800943c:	d1df      	bne.n	80093fe <__swbuf_r+0x2e>
 800943e:	4621      	mov	r1, r4
 8009440:	4628      	mov	r0, r5
 8009442:	f7ff ff9d 	bl	8009380 <_fflush_r>
 8009446:	2800      	cmp	r0, #0
 8009448:	d0d9      	beq.n	80093fe <__swbuf_r+0x2e>
 800944a:	e7d6      	b.n	80093fa <__swbuf_r+0x2a>

0800944c <__swsetup_r>:
 800944c:	b538      	push	{r3, r4, r5, lr}
 800944e:	4b29      	ldr	r3, [pc, #164]	@ (80094f4 <__swsetup_r+0xa8>)
 8009450:	4605      	mov	r5, r0
 8009452:	6818      	ldr	r0, [r3, #0]
 8009454:	460c      	mov	r4, r1
 8009456:	b118      	cbz	r0, 8009460 <__swsetup_r+0x14>
 8009458:	6a03      	ldr	r3, [r0, #32]
 800945a:	b90b      	cbnz	r3, 8009460 <__swsetup_r+0x14>
 800945c:	f7ff f8ba 	bl	80085d4 <__sinit>
 8009460:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009464:	0719      	lsls	r1, r3, #28
 8009466:	d422      	bmi.n	80094ae <__swsetup_r+0x62>
 8009468:	06da      	lsls	r2, r3, #27
 800946a:	d407      	bmi.n	800947c <__swsetup_r+0x30>
 800946c:	2209      	movs	r2, #9
 800946e:	602a      	str	r2, [r5, #0]
 8009470:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009474:	81a3      	strh	r3, [r4, #12]
 8009476:	f04f 30ff 	mov.w	r0, #4294967295
 800947a:	e033      	b.n	80094e4 <__swsetup_r+0x98>
 800947c:	0758      	lsls	r0, r3, #29
 800947e:	d512      	bpl.n	80094a6 <__swsetup_r+0x5a>
 8009480:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009482:	b141      	cbz	r1, 8009496 <__swsetup_r+0x4a>
 8009484:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009488:	4299      	cmp	r1, r3
 800948a:	d002      	beq.n	8009492 <__swsetup_r+0x46>
 800948c:	4628      	mov	r0, r5
 800948e:	f7ff fa79 	bl	8008984 <_free_r>
 8009492:	2300      	movs	r3, #0
 8009494:	6363      	str	r3, [r4, #52]	@ 0x34
 8009496:	89a3      	ldrh	r3, [r4, #12]
 8009498:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800949c:	81a3      	strh	r3, [r4, #12]
 800949e:	2300      	movs	r3, #0
 80094a0:	6063      	str	r3, [r4, #4]
 80094a2:	6923      	ldr	r3, [r4, #16]
 80094a4:	6023      	str	r3, [r4, #0]
 80094a6:	89a3      	ldrh	r3, [r4, #12]
 80094a8:	f043 0308 	orr.w	r3, r3, #8
 80094ac:	81a3      	strh	r3, [r4, #12]
 80094ae:	6923      	ldr	r3, [r4, #16]
 80094b0:	b94b      	cbnz	r3, 80094c6 <__swsetup_r+0x7a>
 80094b2:	89a3      	ldrh	r3, [r4, #12]
 80094b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80094b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80094bc:	d003      	beq.n	80094c6 <__swsetup_r+0x7a>
 80094be:	4621      	mov	r1, r4
 80094c0:	4628      	mov	r0, r5
 80094c2:	f000 f859 	bl	8009578 <__smakebuf_r>
 80094c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094ca:	f013 0201 	ands.w	r2, r3, #1
 80094ce:	d00a      	beq.n	80094e6 <__swsetup_r+0x9a>
 80094d0:	2200      	movs	r2, #0
 80094d2:	60a2      	str	r2, [r4, #8]
 80094d4:	6962      	ldr	r2, [r4, #20]
 80094d6:	4252      	negs	r2, r2
 80094d8:	61a2      	str	r2, [r4, #24]
 80094da:	6922      	ldr	r2, [r4, #16]
 80094dc:	b942      	cbnz	r2, 80094f0 <__swsetup_r+0xa4>
 80094de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80094e2:	d1c5      	bne.n	8009470 <__swsetup_r+0x24>
 80094e4:	bd38      	pop	{r3, r4, r5, pc}
 80094e6:	0799      	lsls	r1, r3, #30
 80094e8:	bf58      	it	pl
 80094ea:	6962      	ldrpl	r2, [r4, #20]
 80094ec:	60a2      	str	r2, [r4, #8]
 80094ee:	e7f4      	b.n	80094da <__swsetup_r+0x8e>
 80094f0:	2000      	movs	r0, #0
 80094f2:	e7f7      	b.n	80094e4 <__swsetup_r+0x98>
 80094f4:	2000001c 	.word	0x2000001c

080094f8 <memmove>:
 80094f8:	4288      	cmp	r0, r1
 80094fa:	b510      	push	{r4, lr}
 80094fc:	eb01 0402 	add.w	r4, r1, r2
 8009500:	d902      	bls.n	8009508 <memmove+0x10>
 8009502:	4284      	cmp	r4, r0
 8009504:	4623      	mov	r3, r4
 8009506:	d807      	bhi.n	8009518 <memmove+0x20>
 8009508:	1e43      	subs	r3, r0, #1
 800950a:	42a1      	cmp	r1, r4
 800950c:	d008      	beq.n	8009520 <memmove+0x28>
 800950e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009512:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009516:	e7f8      	b.n	800950a <memmove+0x12>
 8009518:	4402      	add	r2, r0
 800951a:	4601      	mov	r1, r0
 800951c:	428a      	cmp	r2, r1
 800951e:	d100      	bne.n	8009522 <memmove+0x2a>
 8009520:	bd10      	pop	{r4, pc}
 8009522:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009526:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800952a:	e7f7      	b.n	800951c <memmove+0x24>

0800952c <__swhatbuf_r>:
 800952c:	b570      	push	{r4, r5, r6, lr}
 800952e:	460c      	mov	r4, r1
 8009530:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009534:	2900      	cmp	r1, #0
 8009536:	b096      	sub	sp, #88	@ 0x58
 8009538:	4615      	mov	r5, r2
 800953a:	461e      	mov	r6, r3
 800953c:	da0d      	bge.n	800955a <__swhatbuf_r+0x2e>
 800953e:	89a3      	ldrh	r3, [r4, #12]
 8009540:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009544:	f04f 0100 	mov.w	r1, #0
 8009548:	bf14      	ite	ne
 800954a:	2340      	movne	r3, #64	@ 0x40
 800954c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009550:	2000      	movs	r0, #0
 8009552:	6031      	str	r1, [r6, #0]
 8009554:	602b      	str	r3, [r5, #0]
 8009556:	b016      	add	sp, #88	@ 0x58
 8009558:	bd70      	pop	{r4, r5, r6, pc}
 800955a:	466a      	mov	r2, sp
 800955c:	f000 f848 	bl	80095f0 <_fstat_r>
 8009560:	2800      	cmp	r0, #0
 8009562:	dbec      	blt.n	800953e <__swhatbuf_r+0x12>
 8009564:	9901      	ldr	r1, [sp, #4]
 8009566:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800956a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800956e:	4259      	negs	r1, r3
 8009570:	4159      	adcs	r1, r3
 8009572:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009576:	e7eb      	b.n	8009550 <__swhatbuf_r+0x24>

08009578 <__smakebuf_r>:
 8009578:	898b      	ldrh	r3, [r1, #12]
 800957a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800957c:	079d      	lsls	r5, r3, #30
 800957e:	4606      	mov	r6, r0
 8009580:	460c      	mov	r4, r1
 8009582:	d507      	bpl.n	8009594 <__smakebuf_r+0x1c>
 8009584:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009588:	6023      	str	r3, [r4, #0]
 800958a:	6123      	str	r3, [r4, #16]
 800958c:	2301      	movs	r3, #1
 800958e:	6163      	str	r3, [r4, #20]
 8009590:	b003      	add	sp, #12
 8009592:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009594:	ab01      	add	r3, sp, #4
 8009596:	466a      	mov	r2, sp
 8009598:	f7ff ffc8 	bl	800952c <__swhatbuf_r>
 800959c:	9f00      	ldr	r7, [sp, #0]
 800959e:	4605      	mov	r5, r0
 80095a0:	4639      	mov	r1, r7
 80095a2:	4630      	mov	r0, r6
 80095a4:	f7fe fed0 	bl	8008348 <_malloc_r>
 80095a8:	b948      	cbnz	r0, 80095be <__smakebuf_r+0x46>
 80095aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095ae:	059a      	lsls	r2, r3, #22
 80095b0:	d4ee      	bmi.n	8009590 <__smakebuf_r+0x18>
 80095b2:	f023 0303 	bic.w	r3, r3, #3
 80095b6:	f043 0302 	orr.w	r3, r3, #2
 80095ba:	81a3      	strh	r3, [r4, #12]
 80095bc:	e7e2      	b.n	8009584 <__smakebuf_r+0xc>
 80095be:	89a3      	ldrh	r3, [r4, #12]
 80095c0:	6020      	str	r0, [r4, #0]
 80095c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095c6:	81a3      	strh	r3, [r4, #12]
 80095c8:	9b01      	ldr	r3, [sp, #4]
 80095ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80095ce:	b15b      	cbz	r3, 80095e8 <__smakebuf_r+0x70>
 80095d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80095d4:	4630      	mov	r0, r6
 80095d6:	f000 f81d 	bl	8009614 <_isatty_r>
 80095da:	b128      	cbz	r0, 80095e8 <__smakebuf_r+0x70>
 80095dc:	89a3      	ldrh	r3, [r4, #12]
 80095de:	f023 0303 	bic.w	r3, r3, #3
 80095e2:	f043 0301 	orr.w	r3, r3, #1
 80095e6:	81a3      	strh	r3, [r4, #12]
 80095e8:	89a3      	ldrh	r3, [r4, #12]
 80095ea:	431d      	orrs	r5, r3
 80095ec:	81a5      	strh	r5, [r4, #12]
 80095ee:	e7cf      	b.n	8009590 <__smakebuf_r+0x18>

080095f0 <_fstat_r>:
 80095f0:	b538      	push	{r3, r4, r5, lr}
 80095f2:	4d07      	ldr	r5, [pc, #28]	@ (8009610 <_fstat_r+0x20>)
 80095f4:	2300      	movs	r3, #0
 80095f6:	4604      	mov	r4, r0
 80095f8:	4608      	mov	r0, r1
 80095fa:	4611      	mov	r1, r2
 80095fc:	602b      	str	r3, [r5, #0]
 80095fe:	f7f8 f876 	bl	80016ee <_fstat>
 8009602:	1c43      	adds	r3, r0, #1
 8009604:	d102      	bne.n	800960c <_fstat_r+0x1c>
 8009606:	682b      	ldr	r3, [r5, #0]
 8009608:	b103      	cbz	r3, 800960c <_fstat_r+0x1c>
 800960a:	6023      	str	r3, [r4, #0]
 800960c:	bd38      	pop	{r3, r4, r5, pc}
 800960e:	bf00      	nop
 8009610:	20002e64 	.word	0x20002e64

08009614 <_isatty_r>:
 8009614:	b538      	push	{r3, r4, r5, lr}
 8009616:	4d06      	ldr	r5, [pc, #24]	@ (8009630 <_isatty_r+0x1c>)
 8009618:	2300      	movs	r3, #0
 800961a:	4604      	mov	r4, r0
 800961c:	4608      	mov	r0, r1
 800961e:	602b      	str	r3, [r5, #0]
 8009620:	f7f8 f875 	bl	800170e <_isatty>
 8009624:	1c43      	adds	r3, r0, #1
 8009626:	d102      	bne.n	800962e <_isatty_r+0x1a>
 8009628:	682b      	ldr	r3, [r5, #0]
 800962a:	b103      	cbz	r3, 800962e <_isatty_r+0x1a>
 800962c:	6023      	str	r3, [r4, #0]
 800962e:	bd38      	pop	{r3, r4, r5, pc}
 8009630:	20002e64 	.word	0x20002e64

08009634 <_init>:
 8009634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009636:	bf00      	nop
 8009638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800963a:	bc08      	pop	{r3}
 800963c:	469e      	mov	lr, r3
 800963e:	4770      	bx	lr

08009640 <_fini>:
 8009640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009642:	bf00      	nop
 8009644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009646:	bc08      	pop	{r3}
 8009648:	469e      	mov	lr, r3
 800964a:	4770      	bx	lr
