
LoRA_TC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d8a8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e48  0800da38  0800da38  0000ea38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e880  0800e880  00010298  2**0
                  CONTENTS
  4 .ARM          00000008  0800e880  0800e880  0000f880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e888  0800e888  00010298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e888  0800e888  0000f888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e88c  0800e88c  0000f88c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000298  20000000  0800e890  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005538  20000298  0800eb28  00010298  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200057d0  0800eb28  000107d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010298  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020e73  00000000  00000000  000102c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005353  00000000  00000000  0003113b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a58  00000000  00000000  00036490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000143a  00000000  00000000  00037ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ef77  00000000  00000000  00039322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026f52  00000000  00000000  00068299  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00101db2  00000000  00000000  0008f1eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00190f9d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007df0  00000000  00000000  00190fe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00198dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000298 	.word	0x20000298
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800da20 	.word	0x0800da20

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000029c 	.word	0x2000029c
 80001cc:	0800da20 	.word	0x0800da20

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <initializeBuffer>:
void GNSSCom_Init(UART_HandleTypeDef* huart,UART_HandleTypeDef* huartDebug){
	hGNSSCom.huart = huart;
	hGNSSCom.huartDebug = huartDebug;
}

DynamicBuffer* initializeBuffer(size_t initialSize) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
	DynamicBuffer *bufferDynamic = pvPortMalloc(sizeof(DynamicBuffer));
 8000ea0:	2008      	movs	r0, #8
 8000ea2:	f009 fbdb 	bl	800a65c <pvPortMalloc>
 8000ea6:	60f8      	str	r0, [r7, #12]
	if (bufferDynamic == NULL) {
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d101      	bne.n	8000eb2 <initializeBuffer+0x1a>
		return NULL; // Échec de l'allocation mémoire
 8000eae:	2300      	movs	r3, #0
 8000eb0:	e012      	b.n	8000ed8 <initializeBuffer+0x40>
	}

	bufferDynamic->buffer = pvPortMalloc(initialSize);
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f009 fbd2 	bl	800a65c <pvPortMalloc>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	601a      	str	r2, [r3, #0]
	if (bufferDynamic->buffer == NULL) {
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d104      	bne.n	8000ed0 <initializeBuffer+0x38>
		vPortFree(bufferDynamic); // Libérer la mémoire allouée pour la structure
 8000ec6:	68f8      	ldr	r0, [r7, #12]
 8000ec8:	f009 fc96 	bl	800a7f8 <vPortFree>
		return NULL; // Échec de l'allocation mémoire
 8000ecc:	2300      	movs	r3, #0
 8000ece:	e003      	b.n	8000ed8 <initializeBuffer+0x40>
	}

	bufferDynamic->size = initialSize;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	605a      	str	r2, [r3, #4]
	return bufferDynamic;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3710      	adds	r7, #16
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <freeBuffer>:

void freeBuffer(DynamicBuffer *bufferDynamic) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
	vPortFree(bufferDynamic->buffer);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f009 fc83 	bl	800a7f8 <vPortFree>
	vPortFree(bufferDynamic);
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f009 fc80 	bl	800a7f8 <vPortFree>
}
 8000ef8:	bf00      	nop
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <GNSSCom_MessageAdapter>:

void GNSSCom_MessageAdapter(uint8_t* buffer,size_t* size, GenericMessage* genericMessage){
 8000f00:	b590      	push	{r4, r7, lr}
 8000f02:	b089      	sub	sp, #36	@ 0x24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
		if (buffer[0] == HEADER_UBX_1 &&
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	2bb5      	cmp	r3, #181	@ 0xb5
 8000f12:	d13b      	bne.n	8000f8c <GNSSCom_MessageAdapter+0x8c>
				buffer[1] == HEADER_UBX_2 ){
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	3301      	adds	r3, #1
 8000f18:	781b      	ldrb	r3, [r3, #0]
		if (buffer[0] == HEADER_UBX_1 &&
 8000f1a:	2b62      	cmp	r3, #98	@ 0x62
 8000f1c:	d136      	bne.n	8000f8c <GNSSCom_MessageAdapter+0x8c>
			genericMessage->typeMessage=UBX;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2202      	movs	r2, #2
 8000f22:	701a      	strb	r2, [r3, #0]
			genericMessage->Message.UBXMessage =(UBXMessage_parsed*) pvPortMalloc(sizeof(UBXMessage_parsed));
 8000f24:	2008      	movs	r0, #8
 8000f26:	f009 fb99 	bl	800a65c <pvPortMalloc>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	605a      	str	r2, [r3, #4]
			updateMemoryUsage();
 8000f30:	f001 ffb4 	bl	8002e9c <updateMemoryUsage>

			genericMessage->Message.UBXMessage->CLASS = buffer[2];
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	68fa      	ldr	r2, [r7, #12]
 8000f3a:	7892      	ldrb	r2, [r2, #2]
 8000f3c:	701a      	strb	r2, [r3, #0]
			genericMessage->Message.UBXMessage->ID = buffer[3];
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	68fa      	ldr	r2, [r7, #12]
 8000f44:	78d2      	ldrb	r2, [r2, #3]
 8000f46:	705a      	strb	r2, [r3, #1]
			genericMessage->Message.UBXMessage->len_payload= (buffer[5] << 8) |buffer[4];
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	3305      	adds	r3, #5
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	021b      	lsls	r3, r3, #8
 8000f50:	b21a      	sxth	r2, r3
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	3304      	adds	r3, #4
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	b21b      	sxth	r3, r3
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	b21a      	sxth	r2, r3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	b292      	uxth	r2, r2
 8000f64:	805a      	strh	r2, [r3, #2]
			genericMessage->Message.UBXMessage->brute = (DynamicBuffer*)pvPortMalloc(sizeof(DynamicBuffer));
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	685c      	ldr	r4, [r3, #4]
 8000f6a:	2008      	movs	r0, #8
 8000f6c:	f009 fb76 	bl	800a65c <pvPortMalloc>
 8000f70:	4603      	mov	r3, r0
 8000f72:	6063      	str	r3, [r4, #4]
			*(DynamicBuffer*) genericMessage->Message.UBXMessage->brute=(DynamicBuffer){.buffer = buffer,.size=*size};
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	68ba      	ldr	r2, [r7, #8]
 8000f7c:	6812      	ldr	r2, [r2, #0]
 8000f7e:	68f9      	ldr	r1, [r7, #12]
 8000f80:	6019      	str	r1, [r3, #0]
 8000f82:	605a      	str	r2, [r3, #4]
			updateMemoryUsage();
 8000f84:	f001 ff8a 	bl	8002e9c <updateMemoryUsage>
				buffer[1] == HEADER_UBX_2 ){
 8000f88:	bf00      	nop
		else if(buffer[0] == HEADER_NMEA) {
			NMEAMessage_parsed* NMEAMessage =(NMEAMessage_parsed*) pvPortMalloc(sizeof(NMEAMessage_parsed));
			genericMessage->typeMessage= NMEA;
			genericMessage->Message.NMEAMessage = NMEAMessage;
		}
}
 8000f8a:	e00d      	b.n	8000fa8 <GNSSCom_MessageAdapter+0xa8>
		else if(buffer[0] == HEADER_NMEA) {
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b24      	cmp	r3, #36	@ 0x24
 8000f92:	d109      	bne.n	8000fa8 <GNSSCom_MessageAdapter+0xa8>
			NMEAMessage_parsed* NMEAMessage =(NMEAMessage_parsed*) pvPortMalloc(sizeof(NMEAMessage_parsed));
 8000f94:	2004      	movs	r0, #4
 8000f96:	f009 fb61 	bl	800a65c <pvPortMalloc>
 8000f9a:	61f8      	str	r0, [r7, #28]
			genericMessage->typeMessage= NMEA;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	701a      	strb	r2, [r3, #0]
			genericMessage->Message.NMEAMessage = NMEAMessage;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	69fa      	ldr	r2, [r7, #28]
 8000fa6:	605a      	str	r2, [r3, #4]
}
 8000fa8:	bf00      	nop
 8000faa:	3724      	adds	r7, #36	@ 0x24
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd90      	pop	{r4, r7, pc}

08000fb0 <UBX_format>:
 *  Created on: May 28, 2024
 *      Author: romain.pace
 */
#include <GNSS/debug_formatter.h>

char* UBX_format(void* fieldToDebug, DataType type, char* (*funcSpe)(void*),...){
 8000fb0:	b40c      	push	{r2, r3}
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b08a      	sub	sp, #40	@ 0x28
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
 8000fba:	460b      	mov	r3, r1
 8000fbc:	70fb      	strb	r3, [r7, #3]
	switch (type) {
 8000fbe:	78fb      	ldrb	r3, [r7, #3]
 8000fc0:	2b09      	cmp	r3, #9
 8000fc2:	f200 8090 	bhi.w	80010e6 <UBX_format+0x136>
 8000fc6:	a201      	add	r2, pc, #4	@ (adr r2, 8000fcc <UBX_format+0x1c>)
 8000fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fcc:	08000ff5 	.word	0x08000ff5
 8000fd0:	0800101b 	.word	0x0800101b
 8000fd4:	08001081 	.word	0x08001081
 8000fd8:	080010eb 	.word	0x080010eb
 8000fdc:	0800103d 	.word	0x0800103d
 8000fe0:	080010a3 	.word	0x080010a3
 8000fe4:	080010eb 	.word	0x080010eb
 8000fe8:	0800105f 	.word	0x0800105f
 8000fec:	080010c5 	.word	0x080010c5
 8000ff0:	080010eb 	.word	0x080010eb
	case TYPE_BITFIELD:
	{
		uint8_t* fieldCasted = (uint8_t*)fieldToDebug;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	60fb      	str	r3, [r7, #12]
		if (funcSpe == NULL) return uint8ArrayToString(fieldCasted,1);
 8000ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d106      	bne.n	800100c <UBX_format+0x5c>
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	2101      	movs	r1, #1
 8001002:	4618      	mov	r0, r3
 8001004:	f000 fcaa 	bl	800195c <uint8ArrayToString>
 8001008:	4603      	mov	r3, r0
 800100a:	e070      	b.n	80010ee <UBX_format+0x13e>
		else return funcSpe(&fieldCasted);
 800100c:	f107 020c 	add.w	r2, r7, #12
 8001010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001012:	4610      	mov	r0, r2
 8001014:	4798      	blx	r3
 8001016:	4603      	mov	r3, r0
 8001018:	e069      	b.n	80010ee <UBX_format+0x13e>
	}
	case TYPE_U1:
	{
		U1* fieldCasted = (U1*)fieldToDebug;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	613b      	str	r3, [r7, #16]
		if (funcSpe == NULL) return uint8ArrayToString(fieldCasted->bytes,sizeof(fieldCasted->bytes));
 800101e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001020:	2b00      	cmp	r3, #0
 8001022:	d106      	bne.n	8001032 <UBX_format+0x82>
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	2101      	movs	r1, #1
 8001028:	4618      	mov	r0, r3
 800102a:	f000 fc97 	bl	800195c <uint8ArrayToString>
 800102e:	4603      	mov	r3, r0
 8001030:	e05d      	b.n	80010ee <UBX_format+0x13e>
		else return funcSpe(fieldCasted);
 8001032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001034:	6938      	ldr	r0, [r7, #16]
 8001036:	4798      	blx	r3
 8001038:	4603      	mov	r3, r0
 800103a:	e058      	b.n	80010ee <UBX_format+0x13e>
	}
	break;
	case TYPE_U2:
	{
		U2* fieldCasted = (U2*)fieldToDebug;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	61bb      	str	r3, [r7, #24]
		if (funcSpe == NULL) return uint8ArrayToString(fieldCasted->bytes,sizeof(fieldCasted->bytes));
 8001040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001042:	2b00      	cmp	r3, #0
 8001044:	d106      	bne.n	8001054 <UBX_format+0xa4>
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	2102      	movs	r1, #2
 800104a:	4618      	mov	r0, r3
 800104c:	f000 fc86 	bl	800195c <uint8ArrayToString>
 8001050:	4603      	mov	r3, r0
 8001052:	e04c      	b.n	80010ee <UBX_format+0x13e>
		else return funcSpe(fieldCasted);
 8001054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001056:	69b8      	ldr	r0, [r7, #24]
 8001058:	4798      	blx	r3
 800105a:	4603      	mov	r3, r0
 800105c:	e047      	b.n	80010ee <UBX_format+0x13e>
	}
	break;
	case TYPE_U4:
	{
		U4* fieldCasted = (U4*)fieldToDebug;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	623b      	str	r3, [r7, #32]
		if (funcSpe == NULL) return uint8ArrayToString(fieldCasted->bytes,sizeof(fieldCasted->bytes));
 8001062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001064:	2b00      	cmp	r3, #0
 8001066:	d106      	bne.n	8001076 <UBX_format+0xc6>
 8001068:	6a3b      	ldr	r3, [r7, #32]
 800106a:	2104      	movs	r1, #4
 800106c:	4618      	mov	r0, r3
 800106e:	f000 fc75 	bl	800195c <uint8ArrayToString>
 8001072:	4603      	mov	r3, r0
 8001074:	e03b      	b.n	80010ee <UBX_format+0x13e>
		else return funcSpe(fieldCasted);
 8001076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001078:	6a38      	ldr	r0, [r7, #32]
 800107a:	4798      	blx	r3
 800107c:	4603      	mov	r3, r0
 800107e:	e036      	b.n	80010ee <UBX_format+0x13e>
	}
	break;
	case TYPE_I1:
	{
		I1* fieldCasted = (I1*)fieldToDebug;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	617b      	str	r3, [r7, #20]
		if (funcSpe == NULL) return int8ArrayToString(fieldCasted->bytes,sizeof(fieldCasted->bytes));
 8001084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001086:	2b00      	cmp	r3, #0
 8001088:	d106      	bne.n	8001098 <UBX_format+0xe8>
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	2101      	movs	r1, #1
 800108e:	4618      	mov	r0, r3
 8001090:	f000 fcaa 	bl	80019e8 <int8ArrayToString>
 8001094:	4603      	mov	r3, r0
 8001096:	e02a      	b.n	80010ee <UBX_format+0x13e>
		else return funcSpe(fieldCasted);
 8001098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800109a:	6978      	ldr	r0, [r7, #20]
 800109c:	4798      	blx	r3
 800109e:	4603      	mov	r3, r0
 80010a0:	e025      	b.n	80010ee <UBX_format+0x13e>
	}
	break;
	case TYPE_I2:
	{
		I2* fieldCasted = (I2*)fieldToDebug;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	61fb      	str	r3, [r7, #28]
		if (funcSpe == NULL) return int8ArrayToString(fieldCasted->bytes,sizeof(fieldCasted->bytes));
 80010a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d106      	bne.n	80010ba <UBX_format+0x10a>
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	2102      	movs	r1, #2
 80010b0:	4618      	mov	r0, r3
 80010b2:	f000 fc99 	bl	80019e8 <int8ArrayToString>
 80010b6:	4603      	mov	r3, r0
 80010b8:	e019      	b.n	80010ee <UBX_format+0x13e>
		else return funcSpe(fieldCasted);
 80010ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010bc:	69f8      	ldr	r0, [r7, #28]
 80010be:	4798      	blx	r3
 80010c0:	4603      	mov	r3, r0
 80010c2:	e014      	b.n	80010ee <UBX_format+0x13e>
	}
	break;
	case TYPE_I4:
	{
		I4* fieldCasted = (I4*)fieldToDebug;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (funcSpe == NULL) return int8ArrayToString(fieldCasted->bytes,sizeof(fieldCasted->bytes));
 80010c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d106      	bne.n	80010dc <UBX_format+0x12c>
 80010ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d0:	2104      	movs	r1, #4
 80010d2:	4618      	mov	r0, r3
 80010d4:	f000 fc88 	bl	80019e8 <int8ArrayToString>
 80010d8:	4603      	mov	r3, r0
 80010da:	e008      	b.n	80010ee <UBX_format+0x13e>
		else return funcSpe(fieldCasted);
 80010dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010de:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80010e0:	4798      	blx	r3
 80010e2:	4603      	mov	r3, r0
 80010e4:	e003      	b.n	80010ee <UBX_format+0x13e>
	case TYPE_X4:
		break;


	default:
		return("Unknown type");
 80010e6:	4b05      	ldr	r3, [pc, #20]	@ (80010fc <UBX_format+0x14c>)
 80010e8:	e001      	b.n	80010ee <UBX_format+0x13e>
		break;
 80010ea:	bf00      	nop
		break;
	}
	return "Error";
 80010ec:	4b04      	ldr	r3, [pc, #16]	@ (8001100 <UBX_format+0x150>)
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3728      	adds	r7, #40	@ 0x28
 80010f2:	46bd      	mov	sp, r7
 80010f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010f8:	b002      	add	sp, #8
 80010fa:	4770      	bx	lr
 80010fc:	0800da38 	.word	0x0800da38
 8001100:	0800da48 	.word	0x0800da48

08001104 <get_GNSSID>:
 *  Created on: Jul 23, 2024
 *      Author: romain.pace
 */
#include <GNSS/debug_getter.h>

char* get_GNSSID(U1* gnssID) {
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
	char* str = (char*)pvPortMalloc(21 * sizeof(char));
 800110c:	2015      	movs	r0, #21
 800110e:	f009 faa5 	bl	800a65c <pvPortMalloc>
 8001112:	60f8      	str	r0, [r7, #12]
	if (str == NULL) Error_Handler();
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d101      	bne.n	800111e <get_GNSSID+0x1a>
 800111a:	f002 fc4f 	bl	80039bc <Error_Handler>
	switch (gnssID->bytes[0]) {
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	2b07      	cmp	r3, #7
 8001124:	d842      	bhi.n	80011ac <get_GNSSID+0xa8>
 8001126:	a201      	add	r2, pc, #4	@ (adr r2, 800112c <get_GNSSID+0x28>)
 8001128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800112c:	0800114d 	.word	0x0800114d
 8001130:	08001157 	.word	0x08001157
 8001134:	08001165 	.word	0x08001165
 8001138:	0800116f 	.word	0x0800116f
 800113c:	08001179 	.word	0x08001179
 8001140:	08001187 	.word	0x08001187
 8001144:	08001195 	.word	0x08001195
 8001148:	0800119f 	.word	0x0800119f
	case 0: {strcpy(str,"GPS");}break;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	4a1e      	ldr	r2, [pc, #120]	@ (80011c8 <get_GNSSID+0xc4>)
 8001150:	6810      	ldr	r0, [r2, #0]
 8001152:	6018      	str	r0, [r3, #0]
 8001154:	e032      	b.n	80011bc <get_GNSSID+0xb8>
	case 1: {strcpy(str,"SBAS");}break;
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	4a1c      	ldr	r2, [pc, #112]	@ (80011cc <get_GNSSID+0xc8>)
 800115a:	6810      	ldr	r0, [r2, #0]
 800115c:	6018      	str	r0, [r3, #0]
 800115e:	7912      	ldrb	r2, [r2, #4]
 8001160:	711a      	strb	r2, [r3, #4]
 8001162:	e02b      	b.n	80011bc <get_GNSSID+0xb8>
	case 2: {strcpy(str,"GAL");}break;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	4a1a      	ldr	r2, [pc, #104]	@ (80011d0 <get_GNSSID+0xcc>)
 8001168:	6810      	ldr	r0, [r2, #0]
 800116a:	6018      	str	r0, [r3, #0]
 800116c:	e026      	b.n	80011bc <get_GNSSID+0xb8>
	case 3: {strcpy(str,"BDS");}break;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	4a18      	ldr	r2, [pc, #96]	@ (80011d4 <get_GNSSID+0xd0>)
 8001172:	6810      	ldr	r0, [r2, #0]
 8001174:	6018      	str	r0, [r3, #0]
 8001176:	e021      	b.n	80011bc <get_GNSSID+0xb8>
	case 4: {strcpy(str,"IMES");}break;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	4a17      	ldr	r2, [pc, #92]	@ (80011d8 <get_GNSSID+0xd4>)
 800117c:	6810      	ldr	r0, [r2, #0]
 800117e:	6018      	str	r0, [r3, #0]
 8001180:	7912      	ldrb	r2, [r2, #4]
 8001182:	711a      	strb	r2, [r3, #4]
 8001184:	e01a      	b.n	80011bc <get_GNSSID+0xb8>
	case 5: {strcpy(str,"QZSS");}break;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	4a14      	ldr	r2, [pc, #80]	@ (80011dc <get_GNSSID+0xd8>)
 800118a:	6810      	ldr	r0, [r2, #0]
 800118c:	6018      	str	r0, [r3, #0]
 800118e:	7912      	ldrb	r2, [r2, #4]
 8001190:	711a      	strb	r2, [r3, #4]
 8001192:	e013      	b.n	80011bc <get_GNSSID+0xb8>
	case 6: {strcpy(str,"GLO");}break;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	4a12      	ldr	r2, [pc, #72]	@ (80011e0 <get_GNSSID+0xdc>)
 8001198:	6810      	ldr	r0, [r2, #0]
 800119a:	6018      	str	r0, [r3, #0]
 800119c:	e00e      	b.n	80011bc <get_GNSSID+0xb8>
	case 7: {strcpy(str,"NavIC");}break;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	4a10      	ldr	r2, [pc, #64]	@ (80011e4 <get_GNSSID+0xe0>)
 80011a2:	6810      	ldr	r0, [r2, #0]
 80011a4:	6018      	str	r0, [r3, #0]
 80011a6:	8892      	ldrh	r2, [r2, #4]
 80011a8:	809a      	strh	r2, [r3, #4]
 80011aa:	e007      	b.n	80011bc <get_GNSSID+0xb8>
	default:{strcpy(str,"Unknown");}break;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	490e      	ldr	r1, [pc, #56]	@ (80011e8 <get_GNSSID+0xe4>)
 80011b0:	461a      	mov	r2, r3
 80011b2:	460b      	mov	r3, r1
 80011b4:	cb03      	ldmia	r3!, {r0, r1}
 80011b6:	6010      	str	r0, [r2, #0]
 80011b8:	6051      	str	r1, [r2, #4]
 80011ba:	bf00      	nop
	}
	return str;
 80011bc:	68fb      	ldr	r3, [r7, #12]
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	0800da50 	.word	0x0800da50
 80011cc:	0800da54 	.word	0x0800da54
 80011d0:	0800da5c 	.word	0x0800da5c
 80011d4:	0800da60 	.word	0x0800da60
 80011d8:	0800da64 	.word	0x0800da64
 80011dc:	0800da6c 	.word	0x0800da6c
 80011e0:	0800da74 	.word	0x0800da74
 80011e4:	0800da78 	.word	0x0800da78
 80011e8:	0800da80 	.word	0x0800da80

080011ec <get_SVID>:
char* get_SVID(U1* svID) {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	char* str = (char*)pvPortMalloc(8* sizeof(char));
 80011f4:	2008      	movs	r0, #8
 80011f6:	f009 fa31 	bl	800a65c <pvPortMalloc>
 80011fa:	60f8      	str	r0, [r7, #12]
	if (str == NULL) Error_Handler();
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d101      	bne.n	8001206 <get_SVID+0x1a>
 8001202:	f002 fbdb 	bl	80039bc <Error_Handler>

	if (1 < svID->bytes[0] && svID->bytes[0] < 32) {
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d90b      	bls.n	8001226 <get_SVID+0x3a>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2b1f      	cmp	r3, #31
 8001214:	d807      	bhi.n	8001226 <get_SVID+0x3a>
		sprintf(str, "G%i", svID->bytes[0]);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	461a      	mov	r2, r3
 800121c:	494e      	ldr	r1, [pc, #312]	@ (8001358 <get_SVID+0x16c>)
 800121e:	68f8      	ldr	r0, [r7, #12]
 8001220:	f00a fa24 	bl	800b66c <siprintf>
 8001224:	e093      	b.n	800134e <get_SVID+0x162>
	} else if (120 < svID->bytes[0] && svID->bytes[0] < 158) {
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b78      	cmp	r3, #120	@ 0x78
 800122c:	d90b      	bls.n	8001246 <get_SVID+0x5a>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b9d      	cmp	r3, #157	@ 0x9d
 8001234:	d807      	bhi.n	8001246 <get_SVID+0x5a>
		sprintf(str, "S%i", svID->bytes[0]);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	461a      	mov	r2, r3
 800123c:	4947      	ldr	r1, [pc, #284]	@ (800135c <get_SVID+0x170>)
 800123e:	68f8      	ldr	r0, [r7, #12]
 8001240:	f00a fa14 	bl	800b66c <siprintf>
 8001244:	e083      	b.n	800134e <get_SVID+0x162>
	} else if (211 < svID->bytes[0] && svID->bytes[0] < 246) {
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	2bd3      	cmp	r3, #211	@ 0xd3
 800124c:	d90c      	bls.n	8001268 <get_SVID+0x7c>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	2bf5      	cmp	r3, #245	@ 0xf5
 8001254:	d808      	bhi.n	8001268 <get_SVID+0x7c>
		sprintf(str, "E%i", svID->bytes[0] - 210);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	3bd2      	subs	r3, #210	@ 0xd2
 800125c:	461a      	mov	r2, r3
 800125e:	4940      	ldr	r1, [pc, #256]	@ (8001360 <get_SVID+0x174>)
 8001260:	68f8      	ldr	r0, [r7, #12]
 8001262:	f00a fa03 	bl	800b66c <siprintf>
 8001266:	e072      	b.n	800134e <get_SVID+0x162>
	} else if (159 < svID->bytes[0] && svID->bytes[0] < 163) {
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b9f      	cmp	r3, #159	@ 0x9f
 800126e:	d90c      	bls.n	800128a <get_SVID+0x9e>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	2ba2      	cmp	r3, #162	@ 0xa2
 8001276:	d808      	bhi.n	800128a <get_SVID+0x9e>
		sprintf(str, "B%i", svID->bytes[0] - 158);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	3b9e      	subs	r3, #158	@ 0x9e
 800127e:	461a      	mov	r2, r3
 8001280:	4938      	ldr	r1, [pc, #224]	@ (8001364 <get_SVID+0x178>)
 8001282:	68f8      	ldr	r0, [r7, #12]
 8001284:	f00a f9f2 	bl	800b66c <siprintf>
 8001288:	e061      	b.n	800134e <get_SVID+0x162>
	} else if (33 < svID->bytes[0] && svID->bytes[0] < 64) {
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b21      	cmp	r3, #33	@ 0x21
 8001290:	d90c      	bls.n	80012ac <get_SVID+0xc0>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b3f      	cmp	r3, #63	@ 0x3f
 8001298:	d808      	bhi.n	80012ac <get_SVID+0xc0>
		sprintf(str, "B%i", svID->bytes[0] - 27);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	3b1b      	subs	r3, #27
 80012a0:	461a      	mov	r2, r3
 80012a2:	4930      	ldr	r1, [pc, #192]	@ (8001364 <get_SVID+0x178>)
 80012a4:	68f8      	ldr	r0, [r7, #12]
 80012a6:	f00a f9e1 	bl	800b66c <siprintf>
 80012aa:	e050      	b.n	800134e <get_SVID+0x162>
	} else if (173 < svID->bytes[0] && svID->bytes[0] < 182) {
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2bad      	cmp	r3, #173	@ 0xad
 80012b2:	d90c      	bls.n	80012ce <get_SVID+0xe2>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2bb5      	cmp	r3, #181	@ 0xb5
 80012ba:	d808      	bhi.n	80012ce <get_SVID+0xe2>
		sprintf(str, "I%i", svID->bytes[0] - 172);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	3bac      	subs	r3, #172	@ 0xac
 80012c2:	461a      	mov	r2, r3
 80012c4:	4928      	ldr	r1, [pc, #160]	@ (8001368 <get_SVID+0x17c>)
 80012c6:	68f8      	ldr	r0, [r7, #12]
 80012c8:	f00a f9d0 	bl	800b66c <siprintf>
 80012cc:	e03f      	b.n	800134e <get_SVID+0x162>
	} else if (193 < svID->bytes[0] && svID->bytes[0] < 202) {
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2bc1      	cmp	r3, #193	@ 0xc1
 80012d4:	d90c      	bls.n	80012f0 <get_SVID+0x104>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	2bc9      	cmp	r3, #201	@ 0xc9
 80012dc:	d808      	bhi.n	80012f0 <get_SVID+0x104>
		sprintf(str, "Q%i", svID->bytes[0] - 192);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	3bc0      	subs	r3, #192	@ 0xc0
 80012e4:	461a      	mov	r2, r3
 80012e6:	4921      	ldr	r1, [pc, #132]	@ (800136c <get_SVID+0x180>)
 80012e8:	68f8      	ldr	r0, [r7, #12]
 80012ea:	f00a f9bf 	bl	800b66c <siprintf>
 80012ee:	e02e      	b.n	800134e <get_SVID+0x162>
	} else if (65 < svID->bytes[0] && svID->bytes[0] < 96) {
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	2b41      	cmp	r3, #65	@ 0x41
 80012f6:	d90c      	bls.n	8001312 <get_SVID+0x126>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b5f      	cmp	r3, #95	@ 0x5f
 80012fe:	d808      	bhi.n	8001312 <get_SVID+0x126>
		sprintf(str, "R%i", svID->bytes[0] - 64);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	3b40      	subs	r3, #64	@ 0x40
 8001306:	461a      	mov	r2, r3
 8001308:	4919      	ldr	r1, [pc, #100]	@ (8001370 <get_SVID+0x184>)
 800130a:	68f8      	ldr	r0, [r7, #12]
 800130c:	f00a f9ae 	bl	800b66c <siprintf>
 8001310:	e01d      	b.n	800134e <get_SVID+0x162>
	} else if (svID->bytes[0] == 255) {
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	2bff      	cmp	r3, #255	@ 0xff
 8001318:	d104      	bne.n	8001324 <get_SVID+0x138>
		sprintf(str, "R?");
 800131a:	4916      	ldr	r1, [pc, #88]	@ (8001374 <get_SVID+0x188>)
 800131c:	68f8      	ldr	r0, [r7, #12]
 800131e:	f00a f9a5 	bl	800b66c <siprintf>
 8001322:	e014      	b.n	800134e <get_SVID+0x162>
	} else if (247 < svID->bytes[0] && svID->bytes[0] < 253) {
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2bf7      	cmp	r3, #247	@ 0xf7
 800132a:	d90c      	bls.n	8001346 <get_SVID+0x15a>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2bfc      	cmp	r3, #252	@ 0xfc
 8001332:	d808      	bhi.n	8001346 <get_SVID+0x15a>
		sprintf(str, "R%i", svID->bytes[0] - 246);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	3bf6      	subs	r3, #246	@ 0xf6
 800133a:	461a      	mov	r2, r3
 800133c:	490c      	ldr	r1, [pc, #48]	@ (8001370 <get_SVID+0x184>)
 800133e:	68f8      	ldr	r0, [r7, #12]
 8001340:	f00a f994 	bl	800b66c <siprintf>
 8001344:	e003      	b.n	800134e <get_SVID+0x162>
	} else {
		// Cas par défaut si aucune des conditions n'est remplie
		sprintf(str, "Unknown");
 8001346:	490c      	ldr	r1, [pc, #48]	@ (8001378 <get_SVID+0x18c>)
 8001348:	68f8      	ldr	r0, [r7, #12]
 800134a:	f00a f98f 	bl	800b66c <siprintf>
	}
	return str;
 800134e:	68fb      	ldr	r3, [r7, #12]
}
 8001350:	4618      	mov	r0, r3
 8001352:	3710      	adds	r7, #16
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	0800da88 	.word	0x0800da88
 800135c:	0800da8c 	.word	0x0800da8c
 8001360:	0800da90 	.word	0x0800da90
 8001364:	0800da94 	.word	0x0800da94
 8001368:	0800da98 	.word	0x0800da98
 800136c:	0800da9c 	.word	0x0800da9c
 8001370:	0800daa0 	.word	0x0800daa0
 8001374:	0800daa4 	.word	0x0800daa4
 8001378:	0800da80 	.word	0x0800da80
 800137c:	00000000 	.word	0x00000000

08001380 <get_PRES>:
char* get_PRES(I2* prRes){
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
	char* str = (char*)pvPortMalloc(21 * sizeof(char));
 8001388:	2015      	movs	r0, #21
 800138a:	f009 f967 	bl	800a65c <pvPortMalloc>
 800138e:	60f8      	str	r0, [r7, #12]
	if (str == NULL) Error_Handler();
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d101      	bne.n	800139a <get_PRES+0x1a>
 8001396:	f002 fb11 	bl	80039bc <Error_Handler>
	sprintf(str,"%.1f",prRes->bytes[0]*0.1);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f993 3000 	ldrsb.w	r3, [r3]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff f8bf 	bl	8000524 <__aeabi_i2d>
 80013a6:	a309      	add	r3, pc, #36	@ (adr r3, 80013cc <get_PRES+0x4c>)
 80013a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ac:	f7ff f924 	bl	80005f8 <__aeabi_dmul>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	4904      	ldr	r1, [pc, #16]	@ (80013c8 <get_PRES+0x48>)
 80013b6:	68f8      	ldr	r0, [r7, #12]
 80013b8:	f00a f958 	bl	800b66c <siprintf>
	return str;
 80013bc:	68fb      	ldr	r3, [r7, #12]
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	0800daa8 	.word	0x0800daa8
 80013cc:	9999999a 	.word	0x9999999a
 80013d0:	3fb99999 	.word	0x3fb99999

080013d4 <get_QUALTIYIND>:
char* get_QUALTIYIND(U1* qualityInd){
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
	char* str = (char*)pvPortMalloc(50 * sizeof(char));
 80013dc:	2032      	movs	r0, #50	@ 0x32
 80013de:	f009 f93d 	bl	800a65c <pvPortMalloc>
 80013e2:	60f8      	str	r0, [r7, #12]
	if (str == NULL) Error_Handler();
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d101      	bne.n	80013ee <get_QUALTIYIND+0x1a>
 80013ea:	f002 fae7 	bl	80039bc <Error_Handler>
	switch (qualityInd->bytes[0]){
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2b07      	cmp	r3, #7
 80013f4:	d84a      	bhi.n	800148c <get_QUALTIYIND+0xb8>
 80013f6:	a201      	add	r2, pc, #4	@ (adr r2, 80013fc <get_QUALTIYIND+0x28>)
 80013f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013fc:	0800141d 	.word	0x0800141d
 8001400:	0800142b 	.word	0x0800142b
 8001404:	08001439 	.word	0x08001439
 8001408:	08001447 	.word	0x08001447
 800140c:	08001455 	.word	0x08001455
 8001410:	08001463 	.word	0x08001463
 8001414:	08001471 	.word	0x08001471
 8001418:	0800147f 	.word	0x0800147f
	case 0: {sprintf(str,"%sNO SIGNAL%s",ANSI_COLOR_RED,ANSI_COLOR_RESET);}break;
 800141c:	4b22      	ldr	r3, [pc, #136]	@ (80014a8 <get_QUALTIYIND+0xd4>)
 800141e:	4a23      	ldr	r2, [pc, #140]	@ (80014ac <get_QUALTIYIND+0xd8>)
 8001420:	4923      	ldr	r1, [pc, #140]	@ (80014b0 <get_QUALTIYIND+0xdc>)
 8001422:	68f8      	ldr	r0, [r7, #12]
 8001424:	f00a f922 	bl	800b66c <siprintf>
 8001428:	e038      	b.n	800149c <get_QUALTIYIND+0xc8>
	case 1: {sprintf(str,"%sSEARCHING SIGNAL%s",ANSI_COLOR_MAGENTA,ANSI_COLOR_RESET);}break;
 800142a:	4b1f      	ldr	r3, [pc, #124]	@ (80014a8 <get_QUALTIYIND+0xd4>)
 800142c:	4a21      	ldr	r2, [pc, #132]	@ (80014b4 <get_QUALTIYIND+0xe0>)
 800142e:	4922      	ldr	r1, [pc, #136]	@ (80014b8 <get_QUALTIYIND+0xe4>)
 8001430:	68f8      	ldr	r0, [r7, #12]
 8001432:	f00a f91b 	bl	800b66c <siprintf>
 8001436:	e031      	b.n	800149c <get_QUALTIYIND+0xc8>
	case 2: {sprintf(str,"%sSIGNAL ACQUIRED%s",ANSI_COLOR_ORANGE,ANSI_COLOR_RESET);}break;
 8001438:	4b1b      	ldr	r3, [pc, #108]	@ (80014a8 <get_QUALTIYIND+0xd4>)
 800143a:	4a20      	ldr	r2, [pc, #128]	@ (80014bc <get_QUALTIYIND+0xe8>)
 800143c:	4920      	ldr	r1, [pc, #128]	@ (80014c0 <get_QUALTIYIND+0xec>)
 800143e:	68f8      	ldr	r0, [r7, #12]
 8001440:	f00a f914 	bl	800b66c <siprintf>
 8001444:	e02a      	b.n	800149c <get_QUALTIYIND+0xc8>
	case 3: {sprintf(str,"%sSIGNAL UNSUABLE%s",ANSI_COLOR_YELLOW,ANSI_COLOR_RESET);}break;
 8001446:	4b18      	ldr	r3, [pc, #96]	@ (80014a8 <get_QUALTIYIND+0xd4>)
 8001448:	4a1e      	ldr	r2, [pc, #120]	@ (80014c4 <get_QUALTIYIND+0xf0>)
 800144a:	491f      	ldr	r1, [pc, #124]	@ (80014c8 <get_QUALTIYIND+0xf4>)
 800144c:	68f8      	ldr	r0, [r7, #12]
 800144e:	f00a f90d 	bl	800b66c <siprintf>
 8001452:	e023      	b.n	800149c <get_QUALTIYIND+0xc8>
	case 4: {sprintf(str,"%sCODE LOCKED-TIME SYNC%s",ANSI_COLOR_GREEN,ANSI_COLOR_RESET);}break;
 8001454:	4b14      	ldr	r3, [pc, #80]	@ (80014a8 <get_QUALTIYIND+0xd4>)
 8001456:	4a1d      	ldr	r2, [pc, #116]	@ (80014cc <get_QUALTIYIND+0xf8>)
 8001458:	491d      	ldr	r1, [pc, #116]	@ (80014d0 <get_QUALTIYIND+0xfc>)
 800145a:	68f8      	ldr	r0, [r7, #12]
 800145c:	f00a f906 	bl	800b66c <siprintf>
 8001460:	e01c      	b.n	800149c <get_QUALTIYIND+0xc8>
	case 5: {sprintf(str,"%sCODExCARRIER LOCKED-TIME SYNC%s",ANSI_COLOR_GREEN,ANSI_COLOR_RESET);}break;
 8001462:	4b11      	ldr	r3, [pc, #68]	@ (80014a8 <get_QUALTIYIND+0xd4>)
 8001464:	4a19      	ldr	r2, [pc, #100]	@ (80014cc <get_QUALTIYIND+0xf8>)
 8001466:	491b      	ldr	r1, [pc, #108]	@ (80014d4 <get_QUALTIYIND+0x100>)
 8001468:	68f8      	ldr	r0, [r7, #12]
 800146a:	f00a f8ff 	bl	800b66c <siprintf>
 800146e:	e015      	b.n	800149c <get_QUALTIYIND+0xc8>
	case 6: {sprintf(str,"%sCODExCARRIER LOCKED-TIME SYNC%s",ANSI_COLOR_GREEN,ANSI_COLOR_RESET);}break;
 8001470:	4b0d      	ldr	r3, [pc, #52]	@ (80014a8 <get_QUALTIYIND+0xd4>)
 8001472:	4a16      	ldr	r2, [pc, #88]	@ (80014cc <get_QUALTIYIND+0xf8>)
 8001474:	4917      	ldr	r1, [pc, #92]	@ (80014d4 <get_QUALTIYIND+0x100>)
 8001476:	68f8      	ldr	r0, [r7, #12]
 8001478:	f00a f8f8 	bl	800b66c <siprintf>
 800147c:	e00e      	b.n	800149c <get_QUALTIYIND+0xc8>
	case 7: {sprintf(str,"%sCODExCARRIER LOCKED-TIME SYNC%s",ANSI_COLOR_GREEN,ANSI_COLOR_RESET);}break;
 800147e:	4b0a      	ldr	r3, [pc, #40]	@ (80014a8 <get_QUALTIYIND+0xd4>)
 8001480:	4a12      	ldr	r2, [pc, #72]	@ (80014cc <get_QUALTIYIND+0xf8>)
 8001482:	4914      	ldr	r1, [pc, #80]	@ (80014d4 <get_QUALTIYIND+0x100>)
 8001484:	68f8      	ldr	r0, [r7, #12]
 8001486:	f00a f8f1 	bl	800b66c <siprintf>
 800148a:	e007      	b.n	800149c <get_QUALTIYIND+0xc8>
	default:{strcpy(str,"Unknown");}break;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	4912      	ldr	r1, [pc, #72]	@ (80014d8 <get_QUALTIYIND+0x104>)
 8001490:	461a      	mov	r2, r3
 8001492:	460b      	mov	r3, r1
 8001494:	cb03      	ldmia	r3!, {r0, r1}
 8001496:	6010      	str	r0, [r2, #0]
 8001498:	6051      	str	r1, [r2, #4]
 800149a:	bf00      	nop
	}
	return str;
 800149c:	68fb      	ldr	r3, [r7, #12]
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	0800dab0 	.word	0x0800dab0
 80014ac:	0800dab8 	.word	0x0800dab8
 80014b0:	0800dac0 	.word	0x0800dac0
 80014b4:	0800dad0 	.word	0x0800dad0
 80014b8:	0800dad8 	.word	0x0800dad8
 80014bc:	0800daf0 	.word	0x0800daf0
 80014c0:	0800dafc 	.word	0x0800dafc
 80014c4:	0800db10 	.word	0x0800db10
 80014c8:	0800db18 	.word	0x0800db18
 80014cc:	0800db2c 	.word	0x0800db2c
 80014d0:	0800db34 	.word	0x0800db34
 80014d4:	0800db50 	.word	0x0800db50
 80014d8:	0800da80 	.word	0x0800da80

080014dc <get_CORRSOURCE>:
char* get_CORRSOURCE(U1* corrSource){
 80014dc:	b5b0      	push	{r4, r5, r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
	char* str = (char*)pvPortMalloc(30 * sizeof(char));
 80014e4:	201e      	movs	r0, #30
 80014e6:	f009 f8b9 	bl	800a65c <pvPortMalloc>
 80014ea:	60f8      	str	r0, [r7, #12]
	if (str == NULL) Error_Handler();
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d101      	bne.n	80014f6 <get_CORRSOURCE+0x1a>
 80014f2:	f002 fa63 	bl	80039bc <Error_Handler>
	switch (corrSource->bytes[0]){
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	2b08      	cmp	r3, #8
 80014fc:	f200 808d 	bhi.w	800161a <get_CORRSOURCE+0x13e>
 8001500:	a201      	add	r2, pc, #4	@ (adr r2, 8001508 <get_CORRSOURCE+0x2c>)
 8001502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001506:	bf00      	nop
 8001508:	0800152d 	.word	0x0800152d
 800150c:	08001543 	.word	0x08001543
 8001510:	0800155b 	.word	0x0800155b
 8001514:	08001579 	.word	0x08001579
 8001518:	08001591 	.word	0x08001591
 800151c:	080015ad 	.word	0x080015ad
 8001520:	080015c9 	.word	0x080015c9
 8001524:	080015e5 	.word	0x080015e5
 8001528:	08001603 	.word	0x08001603
	case 0: {strcpy(str,"NO CORRECTON");}break;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	4a41      	ldr	r2, [pc, #260]	@ (8001634 <get_CORRSOURCE+0x158>)
 8001530:	461c      	mov	r4, r3
 8001532:	4613      	mov	r3, r2
 8001534:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001536:	6020      	str	r0, [r4, #0]
 8001538:	6061      	str	r1, [r4, #4]
 800153a:	60a2      	str	r2, [r4, #8]
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	7323      	strb	r3, [r4, #12]
 8001540:	e073      	b.n	800162a <get_CORRSOURCE+0x14e>
	case 1: {strcpy(str,"SBAS corrections");}break;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	4a3c      	ldr	r2, [pc, #240]	@ (8001638 <get_CORRSOURCE+0x15c>)
 8001546:	461d      	mov	r5, r3
 8001548:	4614      	mov	r4, r2
 800154a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800154c:	6028      	str	r0, [r5, #0]
 800154e:	6069      	str	r1, [r5, #4]
 8001550:	60aa      	str	r2, [r5, #8]
 8001552:	60eb      	str	r3, [r5, #12]
 8001554:	7823      	ldrb	r3, [r4, #0]
 8001556:	742b      	strb	r3, [r5, #16]
 8001558:	e067      	b.n	800162a <get_CORRSOURCE+0x14e>
	case 2: {strcpy(str,"BeiDou corrections");}break;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	4a37      	ldr	r2, [pc, #220]	@ (800163c <get_CORRSOURCE+0x160>)
 800155e:	461d      	mov	r5, r3
 8001560:	4614      	mov	r4, r2
 8001562:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001564:	6028      	str	r0, [r5, #0]
 8001566:	6069      	str	r1, [r5, #4]
 8001568:	60aa      	str	r2, [r5, #8]
 800156a:	60eb      	str	r3, [r5, #12]
 800156c:	8823      	ldrh	r3, [r4, #0]
 800156e:	78a2      	ldrb	r2, [r4, #2]
 8001570:	822b      	strh	r3, [r5, #16]
 8001572:	4613      	mov	r3, r2
 8001574:	74ab      	strb	r3, [r5, #18]
 8001576:	e058      	b.n	800162a <get_CORRSOURCE+0x14e>
	case 3: {strcpy(str,"RTCM2 corrections");}break;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	4a31      	ldr	r2, [pc, #196]	@ (8001640 <get_CORRSOURCE+0x164>)
 800157c:	461d      	mov	r5, r3
 800157e:	4614      	mov	r4, r2
 8001580:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001582:	6028      	str	r0, [r5, #0]
 8001584:	6069      	str	r1, [r5, #4]
 8001586:	60aa      	str	r2, [r5, #8]
 8001588:	60eb      	str	r3, [r5, #12]
 800158a:	8823      	ldrh	r3, [r4, #0]
 800158c:	822b      	strh	r3, [r5, #16]
 800158e:	e04c      	b.n	800162a <get_CORRSOURCE+0x14e>
	case 4: {strcpy(str,"RTCM3 OSR corrections");}break;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	4a2c      	ldr	r2, [pc, #176]	@ (8001644 <get_CORRSOURCE+0x168>)
 8001594:	461d      	mov	r5, r3
 8001596:	4614      	mov	r4, r2
 8001598:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800159a:	6028      	str	r0, [r5, #0]
 800159c:	6069      	str	r1, [r5, #4]
 800159e:	60aa      	str	r2, [r5, #8]
 80015a0:	60eb      	str	r3, [r5, #12]
 80015a2:	6820      	ldr	r0, [r4, #0]
 80015a4:	6128      	str	r0, [r5, #16]
 80015a6:	88a3      	ldrh	r3, [r4, #4]
 80015a8:	82ab      	strh	r3, [r5, #20]
 80015aa:	e03e      	b.n	800162a <get_CORRSOURCE+0x14e>
	case 5: {strcpy(str,"RTCM3 SSR corrections");}break;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	4a26      	ldr	r2, [pc, #152]	@ (8001648 <get_CORRSOURCE+0x16c>)
 80015b0:	461d      	mov	r5, r3
 80015b2:	4614      	mov	r4, r2
 80015b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015b6:	6028      	str	r0, [r5, #0]
 80015b8:	6069      	str	r1, [r5, #4]
 80015ba:	60aa      	str	r2, [r5, #8]
 80015bc:	60eb      	str	r3, [r5, #12]
 80015be:	6820      	ldr	r0, [r4, #0]
 80015c0:	6128      	str	r0, [r5, #16]
 80015c2:	88a3      	ldrh	r3, [r4, #4]
 80015c4:	82ab      	strh	r3, [r5, #20]
 80015c6:	e030      	b.n	800162a <get_CORRSOURCE+0x14e>
	case 6: {strcpy(str,"QZSS SLAS corrections");}break;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	4a20      	ldr	r2, [pc, #128]	@ (800164c <get_CORRSOURCE+0x170>)
 80015cc:	461d      	mov	r5, r3
 80015ce:	4614      	mov	r4, r2
 80015d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015d2:	6028      	str	r0, [r5, #0]
 80015d4:	6069      	str	r1, [r5, #4]
 80015d6:	60aa      	str	r2, [r5, #8]
 80015d8:	60eb      	str	r3, [r5, #12]
 80015da:	6820      	ldr	r0, [r4, #0]
 80015dc:	6128      	str	r0, [r5, #16]
 80015de:	88a3      	ldrh	r3, [r4, #4]
 80015e0:	82ab      	strh	r3, [r5, #20]
 80015e2:	e022      	b.n	800162a <get_CORRSOURCE+0x14e>
	case 7: {strcpy(str,"SPARTN corrections");}break;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	4a1a      	ldr	r2, [pc, #104]	@ (8001650 <get_CORRSOURCE+0x174>)
 80015e8:	461d      	mov	r5, r3
 80015ea:	4614      	mov	r4, r2
 80015ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015ee:	6028      	str	r0, [r5, #0]
 80015f0:	6069      	str	r1, [r5, #4]
 80015f2:	60aa      	str	r2, [r5, #8]
 80015f4:	60eb      	str	r3, [r5, #12]
 80015f6:	8823      	ldrh	r3, [r4, #0]
 80015f8:	78a2      	ldrb	r2, [r4, #2]
 80015fa:	822b      	strh	r3, [r5, #16]
 80015fc:	4613      	mov	r3, r2
 80015fe:	74ab      	strb	r3, [r5, #18]
 8001600:	e013      	b.n	800162a <get_CORRSOURCE+0x14e>
	case 8: {strcpy(str,"CLAS corrections");}break;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	4a13      	ldr	r2, [pc, #76]	@ (8001654 <get_CORRSOURCE+0x178>)
 8001606:	461d      	mov	r5, r3
 8001608:	4614      	mov	r4, r2
 800160a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800160c:	6028      	str	r0, [r5, #0]
 800160e:	6069      	str	r1, [r5, #4]
 8001610:	60aa      	str	r2, [r5, #8]
 8001612:	60eb      	str	r3, [r5, #12]
 8001614:	7823      	ldrb	r3, [r4, #0]
 8001616:	742b      	strb	r3, [r5, #16]
 8001618:	e007      	b.n	800162a <get_CORRSOURCE+0x14e>
	default:{strcpy(str,"Unknown");}break;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	490e      	ldr	r1, [pc, #56]	@ (8001658 <get_CORRSOURCE+0x17c>)
 800161e:	461a      	mov	r2, r3
 8001620:	460b      	mov	r3, r1
 8001622:	cb03      	ldmia	r3!, {r0, r1}
 8001624:	6010      	str	r0, [r2, #0]
 8001626:	6051      	str	r1, [r2, #4]
 8001628:	bf00      	nop
	}
	return str;
 800162a:	68fb      	ldr	r3, [r7, #12]
}
 800162c:	4618      	mov	r0, r3
 800162e:	3710      	adds	r7, #16
 8001630:	46bd      	mov	sp, r7
 8001632:	bdb0      	pop	{r4, r5, r7, pc}
 8001634:	0800db74 	.word	0x0800db74
 8001638:	0800db84 	.word	0x0800db84
 800163c:	0800db98 	.word	0x0800db98
 8001640:	0800dbac 	.word	0x0800dbac
 8001644:	0800dbc0 	.word	0x0800dbc0
 8001648:	0800dbd8 	.word	0x0800dbd8
 800164c:	0800dbf0 	.word	0x0800dbf0
 8001650:	0800dc08 	.word	0x0800dc08
 8001654:	0800dc1c 	.word	0x0800dc1c
 8001658:	0800da80 	.word	0x0800da80

0800165c <get_IONOMODEL>:
char* get_IONOMODEL(U1* ionoModel){
 800165c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
	char* str = (char*)pvPortMalloc(52 * sizeof(char));
 8001664:	2034      	movs	r0, #52	@ 0x34
 8001666:	f008 fff9 	bl	800a65c <pvPortMalloc>
 800166a:	60f8      	str	r0, [r7, #12]
	if (str == NULL) Error_Handler();
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d101      	bne.n	8001676 <get_IONOMODEL+0x1a>
 8001672:	f002 f9a3 	bl	80039bc <Error_Handler>
	switch (ionoModel->bytes[0]){
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b08      	cmp	r3, #8
 800167c:	d860      	bhi.n	8001740 <get_IONOMODEL+0xe4>
 800167e:	a201      	add	r2, pc, #4	@ (adr r2, 8001684 <get_IONOMODEL+0x28>)
 8001680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001684:	080016a9 	.word	0x080016a9
 8001688:	080016bd 	.word	0x080016bd
 800168c:	080016d7 	.word	0x080016d7
 8001690:	080016ef 	.word	0x080016ef
 8001694:	08001741 	.word	0x08001741
 8001698:	08001741 	.word	0x08001741
 800169c:	08001741 	.word	0x08001741
 80016a0:	08001741 	.word	0x08001741
 80016a4:	08001713 	.word	0x08001713
	case 0: {strcpy(str,"NO MODEL");}break;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	492c      	ldr	r1, [pc, #176]	@ (800175c <get_IONOMODEL+0x100>)
 80016ac:	461a      	mov	r2, r3
 80016ae:	460b      	mov	r3, r1
 80016b0:	cb03      	ldmia	r3!, {r0, r1}
 80016b2:	6010      	str	r0, [r2, #0]
 80016b4:	6051      	str	r1, [r2, #4]
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	7213      	strb	r3, [r2, #8]
 80016ba:	e049      	b.n	8001750 <get_IONOMODEL+0xf4>
	case 1: {strcpy(str,"Klobuchar model(by GPS)");}break;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	4a28      	ldr	r2, [pc, #160]	@ (8001760 <get_IONOMODEL+0x104>)
 80016c0:	461d      	mov	r5, r3
 80016c2:	4614      	mov	r4, r2
 80016c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016c6:	6028      	str	r0, [r5, #0]
 80016c8:	6069      	str	r1, [r5, #4]
 80016ca:	60aa      	str	r2, [r5, #8]
 80016cc:	60eb      	str	r3, [r5, #12]
 80016ce:	cc03      	ldmia	r4!, {r0, r1}
 80016d0:	6128      	str	r0, [r5, #16]
 80016d2:	6169      	str	r1, [r5, #20]
 80016d4:	e03c      	b.n	8001750 <get_IONOMODEL+0xf4>
	case 2: {strcpy(str,"SBAS model");}break;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	4922      	ldr	r1, [pc, #136]	@ (8001764 <get_IONOMODEL+0x108>)
 80016da:	461a      	mov	r2, r3
 80016dc:	460b      	mov	r3, r1
 80016de:	cb03      	ldmia	r3!, {r0, r1}
 80016e0:	6010      	str	r0, [r2, #0]
 80016e2:	6051      	str	r1, [r2, #4]
 80016e4:	8819      	ldrh	r1, [r3, #0]
 80016e6:	789b      	ldrb	r3, [r3, #2]
 80016e8:	8111      	strh	r1, [r2, #8]
 80016ea:	7293      	strb	r3, [r2, #10]
 80016ec:	e030      	b.n	8001750 <get_IONOMODEL+0xf4>
	case 3: {strcpy(str,"Klobuchar model(by BeiDou)");}break;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	4a1d      	ldr	r2, [pc, #116]	@ (8001768 <get_IONOMODEL+0x10c>)
 80016f2:	461d      	mov	r5, r3
 80016f4:	4614      	mov	r4, r2
 80016f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016f8:	6028      	str	r0, [r5, #0]
 80016fa:	6069      	str	r1, [r5, #4]
 80016fc:	60aa      	str	r2, [r5, #8]
 80016fe:	60eb      	str	r3, [r5, #12]
 8001700:	cc03      	ldmia	r4!, {r0, r1}
 8001702:	6128      	str	r0, [r5, #16]
 8001704:	6169      	str	r1, [r5, #20]
 8001706:	8823      	ldrh	r3, [r4, #0]
 8001708:	78a2      	ldrb	r2, [r4, #2]
 800170a:	832b      	strh	r3, [r5, #24]
 800170c:	4613      	mov	r3, r2
 800170e:	76ab      	strb	r3, [r5, #26]
 8001710:	e01e      	b.n	8001750 <get_IONOMODEL+0xf4>
	case 8: {strcpy(str,"Iono delay(from derived dual frequency observation)");}break;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	4a15      	ldr	r2, [pc, #84]	@ (800176c <get_IONOMODEL+0x110>)
 8001716:	4614      	mov	r4, r2
 8001718:	469c      	mov	ip, r3
 800171a:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 800171e:	4665      	mov	r5, ip
 8001720:	4626      	mov	r6, r4
 8001722:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001724:	6028      	str	r0, [r5, #0]
 8001726:	6069      	str	r1, [r5, #4]
 8001728:	60aa      	str	r2, [r5, #8]
 800172a:	60eb      	str	r3, [r5, #12]
 800172c:	3410      	adds	r4, #16
 800172e:	f10c 0c10 	add.w	ip, ip, #16
 8001732:	4574      	cmp	r4, lr
 8001734:	d1f3      	bne.n	800171e <get_IONOMODEL+0xc2>
 8001736:	4663      	mov	r3, ip
 8001738:	4622      	mov	r2, r4
 800173a:	6810      	ldr	r0, [r2, #0]
 800173c:	6018      	str	r0, [r3, #0]
 800173e:	e007      	b.n	8001750 <get_IONOMODEL+0xf4>
	default:{strcpy(str,"Unknown");}break;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	490b      	ldr	r1, [pc, #44]	@ (8001770 <get_IONOMODEL+0x114>)
 8001744:	461a      	mov	r2, r3
 8001746:	460b      	mov	r3, r1
 8001748:	cb03      	ldmia	r3!, {r0, r1}
 800174a:	6010      	str	r0, [r2, #0]
 800174c:	6051      	str	r1, [r2, #4]
 800174e:	bf00      	nop
	}
	return str;
 8001750:	68fb      	ldr	r3, [r7, #12]
}
 8001752:	4618      	mov	r0, r3
 8001754:	3714      	adds	r7, #20
 8001756:	46bd      	mov	sp, r7
 8001758:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800175a:	bf00      	nop
 800175c:	0800dc30 	.word	0x0800dc30
 8001760:	0800dc3c 	.word	0x0800dc3c
 8001764:	0800dc54 	.word	0x0800dc54
 8001768:	0800dc60 	.word	0x0800dc60
 800176c:	0800dc7c 	.word	0x0800dc7c
 8001770:	0800da80 	.word	0x0800da80

08001774 <get_HEALTH>:
char* get_HEALTH(uint8_t* health){
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
	char* str = (char*)pvPortMalloc(30 * sizeof(char));
 800177c:	201e      	movs	r0, #30
 800177e:	f008 ff6d 	bl	800a65c <pvPortMalloc>
 8001782:	60f8      	str	r0, [r7, #12]
	if (str == NULL) Error_Handler();
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d101      	bne.n	800178e <get_HEALTH+0x1a>
 800178a:	f002 f917 	bl	80039bc <Error_Handler>
	switch (*health){
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	2b02      	cmp	r3, #2
 8001794:	d015      	beq.n	80017c2 <get_HEALTH+0x4e>
 8001796:	2b02      	cmp	r3, #2
 8001798:	dc1a      	bgt.n	80017d0 <get_HEALTH+0x5c>
 800179a:	2b00      	cmp	r3, #0
 800179c:	d002      	beq.n	80017a4 <get_HEALTH+0x30>
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d008      	beq.n	80017b4 <get_HEALTH+0x40>
 80017a2:	e015      	b.n	80017d0 <get_HEALTH+0x5c>
	case 0: {strcpy(str,"UNKNOMN");}break;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	4911      	ldr	r1, [pc, #68]	@ (80017ec <get_HEALTH+0x78>)
 80017a8:	461a      	mov	r2, r3
 80017aa:	460b      	mov	r3, r1
 80017ac:	cb03      	ldmia	r3!, {r0, r1}
 80017ae:	6010      	str	r0, [r2, #0]
 80017b0:	6051      	str	r1, [r2, #4]
 80017b2:	e015      	b.n	80017e0 <get_HEALTH+0x6c>
	case 1: {sprintf(str,"%sHEALTHY%s",ANSI_COLOR_GREEN,ANSI_COLOR_RESET);}break;
 80017b4:	4b0e      	ldr	r3, [pc, #56]	@ (80017f0 <get_HEALTH+0x7c>)
 80017b6:	4a0f      	ldr	r2, [pc, #60]	@ (80017f4 <get_HEALTH+0x80>)
 80017b8:	490f      	ldr	r1, [pc, #60]	@ (80017f8 <get_HEALTH+0x84>)
 80017ba:	68f8      	ldr	r0, [r7, #12]
 80017bc:	f009 ff56 	bl	800b66c <siprintf>
 80017c0:	e00e      	b.n	80017e0 <get_HEALTH+0x6c>
	case 2: {sprintf(str,"%sUNHEALTHY%s",ANSI_COLOR_RED,ANSI_COLOR_RESET);}break;
 80017c2:	4b0b      	ldr	r3, [pc, #44]	@ (80017f0 <get_HEALTH+0x7c>)
 80017c4:	4a0d      	ldr	r2, [pc, #52]	@ (80017fc <get_HEALTH+0x88>)
 80017c6:	490e      	ldr	r1, [pc, #56]	@ (8001800 <get_HEALTH+0x8c>)
 80017c8:	68f8      	ldr	r0, [r7, #12]
 80017ca:	f009 ff4f 	bl	800b66c <siprintf>
 80017ce:	e007      	b.n	80017e0 <get_HEALTH+0x6c>
	default:{strcpy(str,"Unknown");}break;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	490c      	ldr	r1, [pc, #48]	@ (8001804 <get_HEALTH+0x90>)
 80017d4:	461a      	mov	r2, r3
 80017d6:	460b      	mov	r3, r1
 80017d8:	cb03      	ldmia	r3!, {r0, r1}
 80017da:	6010      	str	r0, [r2, #0]
 80017dc:	6051      	str	r1, [r2, #4]
 80017de:	bf00      	nop
	}
	return str;
 80017e0:	68fb      	ldr	r3, [r7, #12]
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	0800dcb0 	.word	0x0800dcb0
 80017f0:	0800dab0 	.word	0x0800dab0
 80017f4:	0800db2c 	.word	0x0800db2c
 80017f8:	0800dcb8 	.word	0x0800dcb8
 80017fc:	0800dab8 	.word	0x0800dab8
 8001800:	0800dcc4 	.word	0x0800dcc4
 8001804:	0800da80 	.word	0x0800da80

08001808 <get_UTCSTANDARD>:
char* get_UTCSTANDARD(uint8_t* utcStandard){
 8001808:	b5b0      	push	{r4, r5, r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
	char* str = (char*)pvPortMalloc(30 * sizeof(char));
 8001810:	201e      	movs	r0, #30
 8001812:	f008 ff23 	bl	800a65c <pvPortMalloc>
 8001816:	60f8      	str	r0, [r7, #12]
	if (str == NULL) Error_Handler();
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d101      	bne.n	8001822 <get_UTCSTANDARD+0x1a>
 800181e:	f002 f8cd 	bl	80039bc <Error_Handler>
	switch (*utcStandard){
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	2b08      	cmp	r3, #8
 8001828:	d876      	bhi.n	8001918 <get_UTCSTANDARD+0x110>
 800182a:	a201      	add	r2, pc, #4	@ (adr r2, 8001830 <get_UTCSTANDARD+0x28>)
 800182c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001830:	08001855 	.word	0x08001855
 8001834:	08001873 	.word	0x08001873
 8001838:	08001891 	.word	0x08001891
 800183c:	080018a3 	.word	0x080018a3
 8001840:	080018b5 	.word	0x080018b5
 8001844:	080018c7 	.word	0x080018c7
 8001848:	080018e3 	.word	0x080018e3
 800184c:	080018f1 	.word	0x080018f1
 8001850:	08001907 	.word	0x08001907
	case 0: {strcpy(str,"Information not available");}break;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	4a37      	ldr	r2, [pc, #220]	@ (8001934 <get_UTCSTANDARD+0x12c>)
 8001858:	461d      	mov	r5, r3
 800185a:	4614      	mov	r4, r2
 800185c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800185e:	6028      	str	r0, [r5, #0]
 8001860:	6069      	str	r1, [r5, #4]
 8001862:	60aa      	str	r2, [r5, #8]
 8001864:	60eb      	str	r3, [r5, #12]
 8001866:	cc03      	ldmia	r4!, {r0, r1}
 8001868:	6128      	str	r0, [r5, #16]
 800186a:	6169      	str	r1, [r5, #20]
 800186c:	8823      	ldrh	r3, [r4, #0]
 800186e:	832b      	strh	r3, [r5, #24]
 8001870:	e05a      	b.n	8001928 <get_UTCSTANDARD+0x120>
	case 1: {strcpy(str,"(CRL),Tokyo, Japan");}break;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	4a30      	ldr	r2, [pc, #192]	@ (8001938 <get_UTCSTANDARD+0x130>)
 8001876:	461d      	mov	r5, r3
 8001878:	4614      	mov	r4, r2
 800187a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800187c:	6028      	str	r0, [r5, #0]
 800187e:	6069      	str	r1, [r5, #4]
 8001880:	60aa      	str	r2, [r5, #8]
 8001882:	60eb      	str	r3, [r5, #12]
 8001884:	8823      	ldrh	r3, [r4, #0]
 8001886:	78a2      	ldrb	r2, [r4, #2]
 8001888:	822b      	strh	r3, [r5, #16]
 800188a:	4613      	mov	r3, r2
 800188c:	74ab      	strb	r3, [r5, #18]
 800188e:	e04b      	b.n	8001928 <get_UTCSTANDARD+0x120>
	case 2: {strcpy(str,"(NIST)");}break;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	4a2a      	ldr	r2, [pc, #168]	@ (800193c <get_UTCSTANDARD+0x134>)
 8001894:	6810      	ldr	r0, [r2, #0]
 8001896:	6018      	str	r0, [r3, #0]
 8001898:	8891      	ldrh	r1, [r2, #4]
 800189a:	7992      	ldrb	r2, [r2, #6]
 800189c:	8099      	strh	r1, [r3, #4]
 800189e:	719a      	strb	r2, [r3, #6]
 80018a0:	e042      	b.n	8001928 <get_UTCSTANDARD+0x120>
	case 3:{strcpy(str,"(USNO)");}break;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	4a26      	ldr	r2, [pc, #152]	@ (8001940 <get_UTCSTANDARD+0x138>)
 80018a6:	6810      	ldr	r0, [r2, #0]
 80018a8:	6018      	str	r0, [r3, #0]
 80018aa:	8891      	ldrh	r1, [r2, #4]
 80018ac:	7992      	ldrb	r2, [r2, #6]
 80018ae:	8099      	strh	r1, [r3, #4]
 80018b0:	719a      	strb	r2, [r3, #6]
 80018b2:	e039      	b.n	8001928 <get_UTCSTANDARD+0x120>
	case 4:{strcpy(str,"(BIPM)");}break;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	4a23      	ldr	r2, [pc, #140]	@ (8001944 <get_UTCSTANDARD+0x13c>)
 80018b8:	6810      	ldr	r0, [r2, #0]
 80018ba:	6018      	str	r0, [r3, #0]
 80018bc:	8891      	ldrh	r1, [r2, #4]
 80018be:	7992      	ldrb	r2, [r2, #6]
 80018c0:	8099      	strh	r1, [r3, #4]
 80018c2:	719a      	strb	r2, [r3, #6]
 80018c4:	e030      	b.n	8001928 <get_UTCSTANDARD+0x120>
	case 5:{strcpy(str,"European laboratories");}break;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	4a1f      	ldr	r2, [pc, #124]	@ (8001948 <get_UTCSTANDARD+0x140>)
 80018ca:	461d      	mov	r5, r3
 80018cc:	4614      	mov	r4, r2
 80018ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018d0:	6028      	str	r0, [r5, #0]
 80018d2:	6069      	str	r1, [r5, #4]
 80018d4:	60aa      	str	r2, [r5, #8]
 80018d6:	60eb      	str	r3, [r5, #12]
 80018d8:	6820      	ldr	r0, [r4, #0]
 80018da:	6128      	str	r0, [r5, #16]
 80018dc:	88a3      	ldrh	r3, [r4, #4]
 80018de:	82ab      	strh	r3, [r5, #20]
 80018e0:	e022      	b.n	8001928 <get_UTCSTANDARD+0x120>
	case 6:{strcpy(str,"(SU)");}break;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	4a19      	ldr	r2, [pc, #100]	@ (800194c <get_UTCSTANDARD+0x144>)
 80018e6:	6810      	ldr	r0, [r2, #0]
 80018e8:	6018      	str	r0, [r3, #0]
 80018ea:	7912      	ldrb	r2, [r2, #4]
 80018ec:	711a      	strb	r2, [r3, #4]
 80018ee:	e01b      	b.n	8001928 <get_UTCSTANDARD+0x120>
	case 7:{strcpy(str,"(NTSC),China");}break;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	4a17      	ldr	r2, [pc, #92]	@ (8001950 <get_UTCSTANDARD+0x148>)
 80018f4:	461c      	mov	r4, r3
 80018f6:	4613      	mov	r3, r2
 80018f8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80018fa:	6020      	str	r0, [r4, #0]
 80018fc:	6061      	str	r1, [r4, #4]
 80018fe:	60a2      	str	r2, [r4, #8]
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	7323      	strb	r3, [r4, #12]
 8001904:	e010      	b.n	8001928 <get_UTCSTANDARD+0x120>
	case 8:{strcpy(str,"(NPLI)");}break;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	4a12      	ldr	r2, [pc, #72]	@ (8001954 <get_UTCSTANDARD+0x14c>)
 800190a:	6810      	ldr	r0, [r2, #0]
 800190c:	6018      	str	r0, [r3, #0]
 800190e:	8891      	ldrh	r1, [r2, #4]
 8001910:	7992      	ldrb	r2, [r2, #6]
 8001912:	8099      	strh	r1, [r3, #4]
 8001914:	719a      	strb	r2, [r3, #6]
 8001916:	e007      	b.n	8001928 <get_UTCSTANDARD+0x120>
	default :{strcpy(str,"Unknown");}break;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	490f      	ldr	r1, [pc, #60]	@ (8001958 <get_UTCSTANDARD+0x150>)
 800191c:	461a      	mov	r2, r3
 800191e:	460b      	mov	r3, r1
 8001920:	cb03      	ldmia	r3!, {r0, r1}
 8001922:	6010      	str	r0, [r2, #0]
 8001924:	6051      	str	r1, [r2, #4]
 8001926:	bf00      	nop
	}
	return str;
 8001928:	68fb      	ldr	r3, [r7, #12]
}
 800192a:	4618      	mov	r0, r3
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bdb0      	pop	{r4, r5, r7, pc}
 8001932:	bf00      	nop
 8001934:	0800dcd4 	.word	0x0800dcd4
 8001938:	0800dcf0 	.word	0x0800dcf0
 800193c:	0800dd04 	.word	0x0800dd04
 8001940:	0800dd0c 	.word	0x0800dd0c
 8001944:	0800dd14 	.word	0x0800dd14
 8001948:	0800dd1c 	.word	0x0800dd1c
 800194c:	0800dd34 	.word	0x0800dd34
 8001950:	0800dd3c 	.word	0x0800dd3c
 8001954:	0800dd4c 	.word	0x0800dd4c
 8001958:	0800da80 	.word	0x0800da80

0800195c <uint8ArrayToString>:
 *  Created on: Jul 23, 2024
 *      Author: romain.pace
 */
#include "GNSS/debug_utils.h"

char* uint8ArrayToString(uint8_t* array, size_t size) {
 800195c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001960:	b087      	sub	sp, #28
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
 8001966:	6039      	str	r1, [r7, #0]
	// Calculer la valeur totale en interprétant le tableau comme un entier
	uint64_t totalValue = 0;
 8001968:	f04f 0000 	mov.w	r0, #0
 800196c:	f04f 0100 	mov.w	r1, #0
 8001970:	e9c7 0104 	strd	r0, r1, [r7, #16]
	for (size_t i = 0; i < size; i++) {
 8001974:	2100      	movs	r1, #0
 8001976:	60f9      	str	r1, [r7, #12]
 8001978:	e022      	b.n	80019c0 <uint8ArrayToString+0x64>
		totalValue |= ((uint64_t)array[i]) << (i * 8);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	68f9      	ldr	r1, [r7, #12]
 800197e:	4401      	add	r1, r0
 8001980:	7809      	ldrb	r1, [r1, #0]
 8001982:	b2c9      	uxtb	r1, r1
 8001984:	2000      	movs	r0, #0
 8001986:	460c      	mov	r4, r1
 8001988:	4605      	mov	r5, r0
 800198a:	68f9      	ldr	r1, [r7, #12]
 800198c:	00c9      	lsls	r1, r1, #3
 800198e:	f1a1 0620 	sub.w	r6, r1, #32
 8001992:	f1c1 0020 	rsb	r0, r1, #32
 8001996:	fa05 f301 	lsl.w	r3, r5, r1
 800199a:	fa04 f606 	lsl.w	r6, r4, r6
 800199e:	4333      	orrs	r3, r6
 80019a0:	fa24 f000 	lsr.w	r0, r4, r0
 80019a4:	4303      	orrs	r3, r0
 80019a6:	fa04 f201 	lsl.w	r2, r4, r1
 80019aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019ae:	ea40 0802 	orr.w	r8, r0, r2
 80019b2:	ea41 0903 	orr.w	r9, r1, r3
 80019b6:	e9c7 8904 	strd	r8, r9, [r7, #16]
	for (size_t i = 0; i < size; i++) {
 80019ba:	68f9      	ldr	r1, [r7, #12]
 80019bc:	3101      	adds	r1, #1
 80019be:	60f9      	str	r1, [r7, #12]
 80019c0:	68f8      	ldr	r0, [r7, #12]
 80019c2:	6839      	ldr	r1, [r7, #0]
 80019c4:	4288      	cmp	r0, r1
 80019c6:	d3d8      	bcc.n	800197a <uint8ArrayToString+0x1e>
	}

	// Calculer la taille nécessaire pour stocker la représentation en chaîne de la valeur totale
	// La taille maximale en caractères pour un uint64_t en base 10 est 20, plus le null terminator
	char* str = pvPortMalloc(21);
 80019c8:	2015      	movs	r0, #21
 80019ca:	f008 fe47 	bl	800a65c <pvPortMalloc>
 80019ce:	60b8      	str	r0, [r7, #8]

	// Convertir la valeur totale en chaîne de caractères
	//snprintf(str, 21, "%llu", totalValue);
	itoa(totalValue, str, 10); // Base 10 pour les décimales
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	220a      	movs	r2, #10
 80019d4:	68b9      	ldr	r1, [r7, #8]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f009 f8a4 	bl	800ab24 <itoa>
	return str;
 80019dc:	68bb      	ldr	r3, [r7, #8]
}
 80019de:	4618      	mov	r0, r3
 80019e0:	371c      	adds	r7, #28
 80019e2:	46bd      	mov	sp, r7
 80019e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080019e8 <int8ArrayToString>:
char* int8ArrayToString(int8_t* array, size_t size){
 80019e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80019ec:	b087      	sub	sp, #28
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
 80019f2:	6039      	str	r1, [r7, #0]
	// Calculer la valeur totale en interprétant le tableau comme un entier
	uint64_t totalValue = 0;
 80019f4:	f04f 0000 	mov.w	r0, #0
 80019f8:	f04f 0100 	mov.w	r1, #0
 80019fc:	e9c7 0104 	strd	r0, r1, [r7, #16]
	for (size_t i = 0; i < size; i++) {
 8001a00:	2100      	movs	r1, #0
 8001a02:	60f9      	str	r1, [r7, #12]
 8001a04:	e023      	b.n	8001a4e <int8ArrayToString+0x66>
		totalValue |= ((uint64_t)array[i]) << (i * 8);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	68f9      	ldr	r1, [r7, #12]
 8001a0a:	4401      	add	r1, r0
 8001a0c:	f991 1000 	ldrsb.w	r1, [r1]
 8001a10:	b249      	sxtb	r1, r1
 8001a12:	17c8      	asrs	r0, r1, #31
 8001a14:	460c      	mov	r4, r1
 8001a16:	4605      	mov	r5, r0
 8001a18:	68f9      	ldr	r1, [r7, #12]
 8001a1a:	00c9      	lsls	r1, r1, #3
 8001a1c:	f1a1 0620 	sub.w	r6, r1, #32
 8001a20:	f1c1 0020 	rsb	r0, r1, #32
 8001a24:	fa05 f301 	lsl.w	r3, r5, r1
 8001a28:	fa04 f606 	lsl.w	r6, r4, r6
 8001a2c:	4333      	orrs	r3, r6
 8001a2e:	fa24 f000 	lsr.w	r0, r4, r0
 8001a32:	4303      	orrs	r3, r0
 8001a34:	fa04 f201 	lsl.w	r2, r4, r1
 8001a38:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a3c:	ea40 0802 	orr.w	r8, r0, r2
 8001a40:	ea41 0903 	orr.w	r9, r1, r3
 8001a44:	e9c7 8904 	strd	r8, r9, [r7, #16]
	for (size_t i = 0; i < size; i++) {
 8001a48:	68f9      	ldr	r1, [r7, #12]
 8001a4a:	3101      	adds	r1, #1
 8001a4c:	60f9      	str	r1, [r7, #12]
 8001a4e:	68f8      	ldr	r0, [r7, #12]
 8001a50:	6839      	ldr	r1, [r7, #0]
 8001a52:	4288      	cmp	r0, r1
 8001a54:	d3d7      	bcc.n	8001a06 <int8ArrayToString+0x1e>
	}

	// Calculer la taille nécessaire pour stocker la représentation en chaîne de la valeur totale
	// La taille maximale en caractères pour un uint64_t en base 10 est 20, plus le null terminator
	char* str = pvPortMalloc(21);
 8001a56:	2015      	movs	r0, #21
 8001a58:	f008 fe00 	bl	800a65c <pvPortMalloc>
 8001a5c:	60b8      	str	r0, [r7, #8]

	// Convertir la valeur totale en chaîne de caractères
	//snprintf(str, 21, "%llu", totalValue);
	itoa(totalValue, str, 10); // Base 10 pour les décimales
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	220a      	movs	r2, #10
 8001a62:	68b9      	ldr	r1, [r7, #8]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f009 f85d 	bl	800ab24 <itoa>
	return str;
 8001a6a:	68bb      	ldr	r3, [r7, #8]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	371c      	adds	r7, #28
 8001a70:	46bd      	mov	sp, r7
 8001a72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001a76 <formattedString>:


void formattedString(char* buffer, size_t* offset, int numArgs, bool freeMemory, bool isThereSpecFormat,  const char* format,...){
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b088      	sub	sp, #32
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	60f8      	str	r0, [r7, #12]
 8001a7e:	60b9      	str	r1, [r7, #8]
 8001a80:	607a      	str	r2, [r7, #4]
 8001a82:	70fb      	strb	r3, [r7, #3]
	va_list args;
	va_start(args, format);
 8001a84:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001a88:	617b      	str	r3, [r7, #20]
	*offset += vsnprintf(buffer + *offset, MAX_BUFFER_SIZE - *offset, format, args);
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	68fa      	ldr	r2, [r7, #12]
 8001a90:	18d0      	adds	r0, r2, r3
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f5c3 7100 	rsb	r1, r3, #512	@ 0x200
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a9e:	f009 fe73 	bl	800b788 <vsniprintf>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	441a      	add	r2, r3
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	601a      	str	r2, [r3, #0]
	va_end(args);

	if (freeMemory){
 8001aae:	78fb      	ldrb	r3, [r7, #3]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d023      	beq.n	8001afc <formattedString+0x86>
		va_start(args, format);
 8001ab4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001ab8:	617b      	str	r3, [r7, #20]
		for (int i = 0; i < numArgs; i++) {
 8001aba:	2300      	movs	r3, #0
 8001abc:	61fb      	str	r3, [r7, #28]
 8001abe:	e019      	b.n	8001af4 <formattedString+0x7e>
			void* arg = va_arg(args, void*);
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	1d1a      	adds	r2, r3, #4
 8001ac4:	617a      	str	r2, [r7, #20]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	61bb      	str	r3, [r7, #24]
			if (isThereSpecFormat){
 8001aca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d008      	beq.n	8001ae4 <formattedString+0x6e>
				if (i%2) vPortFree(arg); // SUPPRIME LE pvPortMalloc de uint8ArrayToString
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d006      	beq.n	8001aea <formattedString+0x74>
 8001adc:	69b8      	ldr	r0, [r7, #24]
 8001ade:	f008 fe8b 	bl	800a7f8 <vPortFree>
 8001ae2:	e002      	b.n	8001aea <formattedString+0x74>
			}
			else{
				vPortFree(arg);
 8001ae4:	69b8      	ldr	r0, [r7, #24]
 8001ae6:	f008 fe87 	bl	800a7f8 <vPortFree>
			}
			updateMemoryUsage();
 8001aea:	f001 f9d7 	bl	8002e9c <updateMemoryUsage>
		for (int i = 0; i < numArgs; i++) {
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	3301      	adds	r3, #1
 8001af2:	61fb      	str	r3, [r7, #28]
 8001af4:	69fa      	ldr	r2, [r7, #28]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	dbe1      	blt.n	8001ac0 <formattedString+0x4a>
		}
		va_end(args);
	}
}
 8001afc:	bf00      	nop
 8001afe:	3720      	adds	r7, #32
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <traductor>:
				(void(*)(void*)) cleaner_UBX_NAV_TIMEUTC
		}
		// Add other mappings for other message types if necessary
};

void traductor(UBXMessage_parsed* UBXMessage,ModuleConfig_t ModuleConfig) {
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b088      	sub	sp, #32
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	8039      	strh	r1, [r7, #0]
	// Function pointer and variables to hold the matched mapping's values
	void (*create_func)(UBXMessage_parsed*, void *) = NULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61bb      	str	r3, [r7, #24]
	void (*debug_func)(void *) = NULL;
 8001b12:	2300      	movs	r3, #0
 8001b14:	617b      	str	r3, [r7, #20]
	void (*cleaner_func)(void *) = NULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	613b      	str	r3, [r7, #16]
	void* structAssociate = NULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60fb      	str	r3, [r7, #12]

	// Loop through the message mappings to find a match
	for (int i = 0; i < sizeof(message_mappings) / sizeof(message_mappings[0]); i++) {
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61fb      	str	r3, [r7, #28]
 8001b22:	e051      	b.n	8001bc8 <traductor+0xc4>
		if (message_mappings[i].CLASS == UBXMessage->CLASS &&
 8001b24:	492c      	ldr	r1, [pc, #176]	@ (8001bd8 <traductor+0xd4>)
 8001b26:	69fa      	ldr	r2, [r7, #28]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4413      	add	r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	440b      	add	r3, r1
 8001b32:	781a      	ldrb	r2, [r3, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d142      	bne.n	8001bc2 <traductor+0xbe>
				message_mappings[i].ID == UBXMessage->ID) {
 8001b3c:	4926      	ldr	r1, [pc, #152]	@ (8001bd8 <traductor+0xd4>)
 8001b3e:	69fa      	ldr	r2, [r7, #28]
 8001b40:	4613      	mov	r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	4413      	add	r3, r2
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	440b      	add	r3, r1
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	781a      	ldrb	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	785b      	ldrb	r3, [r3, #1]
		if (message_mappings[i].CLASS == UBXMessage->CLASS &&
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d135      	bne.n	8001bc2 <traductor+0xbe>
			// Retrieve the corresponding get function and associated structure and variables
			create_func = message_mappings[i].create_func;
 8001b56:	4920      	ldr	r1, [pc, #128]	@ (8001bd8 <traductor+0xd4>)
 8001b58:	69fa      	ldr	r2, [r7, #28]
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	4413      	add	r3, r2
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	440b      	add	r3, r1
 8001b64:	3308      	adds	r3, #8
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	61bb      	str	r3, [r7, #24]
			debug_func = message_mappings[i].debug_func;
 8001b6a:	491b      	ldr	r1, [pc, #108]	@ (8001bd8 <traductor+0xd4>)
 8001b6c:	69fa      	ldr	r2, [r7, #28]
 8001b6e:	4613      	mov	r3, r2
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	4413      	add	r3, r2
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	440b      	add	r3, r1
 8001b78:	330c      	adds	r3, #12
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	617b      	str	r3, [r7, #20]
			cleaner_func = message_mappings[i].cleaner_func;
 8001b7e:	4916      	ldr	r1, [pc, #88]	@ (8001bd8 <traductor+0xd4>)
 8001b80:	69fa      	ldr	r2, [r7, #28]
 8001b82:	4613      	mov	r3, r2
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	4413      	add	r3, r2
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	440b      	add	r3, r1
 8001b8c:	3310      	adds	r3, #16
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	613b      	str	r3, [r7, #16]
			structAssociate = message_mappings[i].structAssociate; //Pour l'utilisation dans d'autres fonctions
 8001b92:	4911      	ldr	r1, [pc, #68]	@ (8001bd8 <traductor+0xd4>)
 8001b94:	69fa      	ldr	r2, [r7, #28]
 8001b96:	4613      	mov	r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	4413      	add	r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	440b      	add	r3, r1
 8001ba0:	3304      	adds	r3, #4
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	60fb      	str	r3, [r7, #12]
			create_func(UBXMessage,structAssociate); //pvPortMaloc de structAssociate->sig par ex
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	68f9      	ldr	r1, [r7, #12]
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	4798      	blx	r3
			if (ModuleConfig.doDebugging) debug_func(structAssociate);
 8001bae:	783b      	ldrb	r3, [r7, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d002      	beq.n	8001bba <traductor+0xb6>
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	68f8      	ldr	r0, [r7, #12]
 8001bb8:	4798      	blx	r3
			cleaner_func(structAssociate);
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	68f8      	ldr	r0, [r7, #12]
 8001bbe:	4798      	blx	r3
			break;
 8001bc0:	e006      	b.n	8001bd0 <traductor+0xcc>
	for (int i = 0; i < sizeof(message_mappings) / sizeof(message_mappings[0]); i++) {
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	61fb      	str	r3, [r7, #28]
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d9aa      	bls.n	8001b24 <traductor+0x20>
		}
	}
}
 8001bce:	bf00      	nop
 8001bd0:	bf00      	nop
 8001bd2:	3720      	adds	r7, #32
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20000000 	.word	0x20000000

08001bdc <debug_UBX_NAV_SIG>:
 *      Author: romain.pace
 */

#include "GNSS/UBX_NAV.h"

void debug_UBX_NAV_SIG(UBX_NAV_SIG *structAssociate){
 8001bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001be0:	f5ad 7d4e 	sub.w	sp, sp, #824	@ 0x338
 8001be4:	af24      	add	r7, sp, #144	@ 0x90
 8001be6:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001bea:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8001bee:	6018      	str	r0, [r3, #0]
	size_t offsetDebug = 0;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
	char bufferDebug[MAX_BUFFER_SIZE];

	const int MAX_COLUMNS = 18;
 8001bf6:	2312      	movs	r3, #18
 8001bf8:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
			"qualityInd","corrSource","ionoModel","health","prSmoothed","prUsed","crUsed",
			"doUsed","prCorrUsed","crCorrUsed","doCorrUsed"};
	static int sizeColumns[18]={6,6,4,5,5,5,
								 5,5,5,5,5,5,
								 5,5,5,5,5,5};
	logMemoryUsage("START - formattedString");
 8001bfc:	485e      	ldr	r0, [pc, #376]	@ (8001d78 <debug_UBX_NAV_SIG+0x19c>)
 8001bfe:	f001 f957 	bl	8002eb0 <logMemoryUsage>
	formattedString(bufferDebug, &offsetDebug, 3, true,false,
			"\r\n___debug_UBX_NAV_SIG__\r\n"
			"iTOW [ms]: %s\r\n"
			"Version: %s\r\n"
			"NumSigs: %s\r\n",
			uint8ArrayToString(structAssociate->iTOW.bytes,sizeof(structAssociate->iTOW.bytes)),
 8001c02:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001c06:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8001c0a:	681b      	ldr	r3, [r3, #0]
	formattedString(bufferDebug, &offsetDebug, 3, true,false,
 8001c0c:	2104      	movs	r1, #4
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff fea4 	bl	800195c <uint8ArrayToString>
 8001c14:	4604      	mov	r4, r0
			uint8ArrayToString(structAssociate->version.bytes,sizeof(structAssociate->version.bytes)),
 8001c16:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001c1a:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	3304      	adds	r3, #4
	formattedString(bufferDebug, &offsetDebug, 3, true,false,
 8001c22:	2101      	movs	r1, #1
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff fe99 	bl	800195c <uint8ArrayToString>
 8001c2a:	4605      	mov	r5, r0
			uint8ArrayToString(structAssociate->numSigs.bytes,sizeof(structAssociate->numSigs.bytes))
 8001c2c:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001c30:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	3305      	adds	r3, #5
	formattedString(bufferDebug, &offsetDebug, 3, true,false,
 8001c38:	2101      	movs	r1, #1
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff fe8e 	bl	800195c <uint8ArrayToString>
 8001c40:	4603      	mov	r3, r0
 8001c42:	f507 7124 	add.w	r1, r7, #656	@ 0x290
 8001c46:	f107 0090 	add.w	r0, r7, #144	@ 0x90
 8001c4a:	9304      	str	r3, [sp, #16]
 8001c4c:	9503      	str	r5, [sp, #12]
 8001c4e:	9402      	str	r4, [sp, #8]
 8001c50:	4b4a      	ldr	r3, [pc, #296]	@ (8001d7c <debug_UBX_NAV_SIG+0x1a0>)
 8001c52:	9301      	str	r3, [sp, #4]
 8001c54:	2300      	movs	r3, #0
 8001c56:	9300      	str	r3, [sp, #0]
 8001c58:	2301      	movs	r3, #1
 8001c5a:	2203      	movs	r2, #3
 8001c5c:	f7ff ff0b 	bl	8001a76 <formattedString>
	);
	logMemoryUsage("END - formattedString");
 8001c60:	4847      	ldr	r0, [pc, #284]	@ (8001d80 <debug_UBX_NAV_SIG+0x1a4>)
 8001c62:	f001 f925 	bl	8002eb0 <logMemoryUsage>

	formattedString(bufferDebug, &offsetDebug,1, false,false, SEPARATON);
 8001c66:	f507 7124 	add.w	r1, r7, #656	@ 0x290
 8001c6a:	f107 0090 	add.w	r0, r7, #144	@ 0x90
 8001c6e:	4b45      	ldr	r3, [pc, #276]	@ (8001d84 <debug_UBX_NAV_SIG+0x1a8>)
 8001c70:	9301      	str	r3, [sp, #4]
 8001c72:	2300      	movs	r3, #0
 8001c74:	9300      	str	r3, [sp, #0]
 8001c76:	2300      	movs	r3, #0
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f7ff fefc 	bl	8001a76 <formattedString>
	for (int i = 0; i < MAX_COLUMNS; ++i) {
 8001c7e:	2300      	movs	r3, #0
 8001c80:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
 8001c84:	e01c      	b.n	8001cc0 <debug_UBX_NAV_SIG+0xe4>
		formattedString(bufferDebug, &offsetDebug, 1, false,true,
 8001c86:	4a40      	ldr	r2, [pc, #256]	@ (8001d88 <debug_UBX_NAV_SIG+0x1ac>)
 8001c88:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 8001c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c90:	493e      	ldr	r1, [pc, #248]	@ (8001d8c <debug_UBX_NAV_SIG+0x1b0>)
 8001c92:	f8d7 22a4 	ldr.w	r2, [r7, #676]	@ 0x2a4
 8001c96:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001c9a:	f507 7124 	add.w	r1, r7, #656	@ 0x290
 8001c9e:	f107 0090 	add.w	r0, r7, #144	@ 0x90
 8001ca2:	9203      	str	r2, [sp, #12]
 8001ca4:	9302      	str	r3, [sp, #8]
 8001ca6:	4b3a      	ldr	r3, [pc, #232]	@ (8001d90 <debug_UBX_NAV_SIG+0x1b4>)
 8001ca8:	9301      	str	r3, [sp, #4]
 8001caa:	2301      	movs	r3, #1
 8001cac:	9300      	str	r3, [sp, #0]
 8001cae:	2300      	movs	r3, #0
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	f7ff fee0 	bl	8001a76 <formattedString>
	for (int i = 0; i < MAX_COLUMNS; ++i) {
 8001cb6:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 8001cba:	3301      	adds	r3, #1
 8001cbc:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
 8001cc0:	f8d7 22a4 	ldr.w	r2, [r7, #676]	@ 0x2a4
 8001cc4:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	dbdc      	blt.n	8001c86 <debug_UBX_NAV_SIG+0xaa>
				"| %-*s |",
				sizeColumns[i],
				columnNames[i]);
	}

	formattedString(bufferDebug, &offsetDebug, 1, false,false, SEPARATON);
 8001ccc:	f507 7124 	add.w	r1, r7, #656	@ 0x290
 8001cd0:	f107 0090 	add.w	r0, r7, #144	@ 0x90
 8001cd4:	4b2b      	ldr	r3, [pc, #172]	@ (8001d84 <debug_UBX_NAV_SIG+0x1a8>)
 8001cd6:	9301      	str	r3, [sp, #4]
 8001cd8:	2300      	movs	r3, #0
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	2300      	movs	r3, #0
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f7ff fec9 	bl	8001a76 <formattedString>

	UARTdebugQ_t UARTdebug; char *color = ANSI_COLOR_RESET;
 8001ce4:	4b2b      	ldr	r3, [pc, #172]	@ (8001d94 <debug_UBX_NAV_SIG+0x1b8>)
 8001ce6:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
	UARTdebug.message = pvPortMalloc(offsetDebug+1);
 8001cea:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001cee:	3301      	adds	r3, #1
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f008 fcb3 	bl	800a65c <pvPortMalloc>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001cfc:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8001d00:	601a      	str	r2, [r3, #0]
	UARTdebug.color = pvPortMalloc(strlen(color) + 1);
 8001d02:	f8d7 0298 	ldr.w	r0, [r7, #664]	@ 0x298
 8001d06:	f7fe fab3 	bl	8000270 <strlen>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f008 fca4 	bl	800a65c <pvPortMalloc>
 8001d14:	4602      	mov	r2, r0
 8001d16:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001d1a:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8001d1e:	605a      	str	r2, [r3, #4]
	updateMemoryUsage();
 8001d20:	f001 f8bc 	bl	8002e9c <updateMemoryUsage>
	strncpy(UARTdebug.message, bufferDebug, offsetDebug+1);
 8001d24:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001d28:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8001d2c:	6818      	ldr	r0, [r3, #0]
 8001d2e:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8001d32:	1c5a      	adds	r2, r3, #1
 8001d34:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001d38:	4619      	mov	r1, r3
 8001d3a:	f009 fd3b 	bl	800b7b4 <strncpy>
	strcpy(UARTdebug.color, color);
 8001d3e:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001d42:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f8d7 1298 	ldr.w	r1, [r7, #664]	@ 0x298
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f009 fe12 	bl	800b976 <strcpy>
	offsetDebug = 0 ;
 8001d52:	2300      	movs	r3, #0
 8001d54:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290

	xQueueSendToBack(UARTdebugHandle, &UARTdebug, osWaitForever);
 8001d58:	4b0f      	ldr	r3, [pc, #60]	@ (8001d98 <debug_UBX_NAV_SIG+0x1bc>)
 8001d5a:	6818      	ldr	r0, [r3, #0]
 8001d5c:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 8001d60:	2300      	movs	r3, #0
 8001d62:	f04f 32ff 	mov.w	r2, #4294967295
 8001d66:	f006 f9dd 	bl	8008124 <xQueueGenericSend>
	logMemoryUsage("START - formattedString");
 8001d6a:	4803      	ldr	r0, [pc, #12]	@ (8001d78 <debug_UBX_NAV_SIG+0x19c>)
 8001d6c:	f001 f8a0 	bl	8002eb0 <logMemoryUsage>

	for (int i = 0; i < structAssociate->numSigs.bytes[0]; i++) {
 8001d70:	2300      	movs	r3, #0
 8001d72:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
 8001d76:	e247      	b.n	8002208 <debug_UBX_NAV_SIG+0x62c>
 8001d78:	0800dd54 	.word	0x0800dd54
 8001d7c:	0800dd6c 	.word	0x0800dd6c
 8001d80:	0800ddb0 	.word	0x0800ddb0
 8001d84:	0800ddc8 	.word	0x0800ddc8
 8001d88:	20000028 	.word	0x20000028
 8001d8c:	20000070 	.word	0x20000070
 8001d90:	0800de0c 	.word	0x0800de0c
 8001d94:	0800de18 	.word	0x0800de18
 8001d98:	20000310 	.word	0x20000310
		formattedString(bufferDebug, &offsetDebug, 1, false,true,
 8001d9c:	4bc1      	ldr	r3, [pc, #772]	@ (80020a4 <debug_UBX_NAV_SIG+0x4c8>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f8d7 22a0 	ldr.w	r2, [r7, #672]	@ 0x2a0
 8001da4:	3201      	adds	r2, #1
 8001da6:	f507 7124 	add.w	r1, r7, #656	@ 0x290
 8001daa:	f107 0090 	add.w	r0, r7, #144	@ 0x90
 8001dae:	9203      	str	r2, [sp, #12]
 8001db0:	9302      	str	r3, [sp, #8]
 8001db2:	4bbd      	ldr	r3, [pc, #756]	@ (80020a8 <debug_UBX_NAV_SIG+0x4cc>)
 8001db4:	9301      	str	r3, [sp, #4]
 8001db6:	2301      	movs	r3, #1
 8001db8:	9300      	str	r3, [sp, #0]
 8001dba:	2300      	movs	r3, #0
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	f7ff fe5a 	bl	8001a76 <formattedString>
				"| %-*i |",sizeColumns[0],i+1);
		formattedString(bufferDebug, &offsetDebug, 2*(MAX_COLUMNS - 1),true,true,
 8001dc2:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8001dcc:	4bb5      	ldr	r3, [pc, #724]	@ (80020a4 <debug_UBX_NAV_SIG+0x4c8>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	67bb      	str	r3, [r7, #120]	@ 0x78
				"| %-*s || %-*s || %-*s || %-*s || %-*s || %-*s || %-*s |"
				"| %-*s || %-*s || %-*s || %-*s || %-*s || %-*s || %-*s || %-*s |"
				"| %-*s || %-*s |\n",
				sizeColumns[1],
				UBX_format(&(structAssociate->sig[i].gnssId),TYPE_U1,(char*(*)(void*))get_GNSSID),
 8001dd2:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001dd6:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	689a      	ldr	r2, [r3, #8]
 8001dde:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 8001de2:	011b      	lsls	r3, r3, #4
 8001de4:	4413      	add	r3, r2
		formattedString(bufferDebug, &offsetDebug, 2*(MAX_COLUMNS - 1),true,true,
 8001de6:	4ab1      	ldr	r2, [pc, #708]	@ (80020ac <debug_UBX_NAV_SIG+0x4d0>)
 8001de8:	2101      	movs	r1, #1
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff f8e0 	bl	8000fb0 <UBX_format>
 8001df0:	6778      	str	r0, [r7, #116]	@ 0x74
 8001df2:	4bac      	ldr	r3, [pc, #688]	@ (80020a4 <debug_UBX_NAV_SIG+0x4c8>)
 8001df4:	689a      	ldr	r2, [r3, #8]
 8001df6:	673a      	str	r2, [r7, #112]	@ 0x70
				sizeColumns[2],
				UBX_format(&(structAssociate->sig[i].svId),TYPE_U1,(char*(*)(void*))get_SVID),
 8001df8:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001dfc:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	689a      	ldr	r2, [r3, #8]
 8001e04:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 8001e08:	011b      	lsls	r3, r3, #4
 8001e0a:	4413      	add	r3, r2
 8001e0c:	3301      	adds	r3, #1
		formattedString(bufferDebug, &offsetDebug, 2*(MAX_COLUMNS - 1),true,true,
 8001e0e:	4aa8      	ldr	r2, [pc, #672]	@ (80020b0 <debug_UBX_NAV_SIG+0x4d4>)
 8001e10:	2101      	movs	r1, #1
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff f8cc 	bl	8000fb0 <UBX_format>
 8001e18:	66f8      	str	r0, [r7, #108]	@ 0x6c
 8001e1a:	4ba2      	ldr	r3, [pc, #648]	@ (80020a4 <debug_UBX_NAV_SIG+0x4c8>)
 8001e1c:	68d9      	ldr	r1, [r3, #12]
 8001e1e:	66b9      	str	r1, [r7, #104]	@ 0x68
				sizeColumns[3],
				UBX_format(&(structAssociate->sig[i].sigId),TYPE_U1,NULL),
 8001e20:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001e24:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	689a      	ldr	r2, [r3, #8]
 8001e2c:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 8001e30:	011b      	lsls	r3, r3, #4
 8001e32:	4413      	add	r3, r2
 8001e34:	3302      	adds	r3, #2
		formattedString(bufferDebug, &offsetDebug, 2*(MAX_COLUMNS - 1),true,true,
 8001e36:	2200      	movs	r2, #0
 8001e38:	2101      	movs	r1, #1
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7ff f8b8 	bl	8000fb0 <UBX_format>
 8001e40:	6678      	str	r0, [r7, #100]	@ 0x64
 8001e42:	4b98      	ldr	r3, [pc, #608]	@ (80020a4 <debug_UBX_NAV_SIG+0x4c8>)
 8001e44:	691d      	ldr	r5, [r3, #16]
 8001e46:	663d      	str	r5, [r7, #96]	@ 0x60
				sizeColumns[4],
				UBX_format(&(structAssociate->sig[i].freqId),TYPE_U1,NULL),
 8001e48:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001e4c:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 8001e58:	011b      	lsls	r3, r3, #4
 8001e5a:	4413      	add	r3, r2
 8001e5c:	3303      	adds	r3, #3
		formattedString(bufferDebug, &offsetDebug, 2*(MAX_COLUMNS - 1),true,true,
 8001e5e:	2200      	movs	r2, #0
 8001e60:	2101      	movs	r1, #1
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff f8a4 	bl	8000fb0 <UBX_format>
 8001e68:	65f8      	str	r0, [r7, #92]	@ 0x5c
 8001e6a:	4b8e      	ldr	r3, [pc, #568]	@ (80020a4 <debug_UBX_NAV_SIG+0x4c8>)
 8001e6c:	695e      	ldr	r6, [r3, #20]
 8001e6e:	65be      	str	r6, [r7, #88]	@ 0x58
				sizeColumns[5],
				UBX_format(&(structAssociate->sig[i].prRes),TYPE_I2,(char*(*)(void*))get_PRES),
 8001e70:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001e74:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	689a      	ldr	r2, [r3, #8]
 8001e7c:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 8001e80:	011b      	lsls	r3, r3, #4
 8001e82:	4413      	add	r3, r2
 8001e84:	3304      	adds	r3, #4
		formattedString(bufferDebug, &offsetDebug, 2*(MAX_COLUMNS - 1),true,true,
 8001e86:	4a8b      	ldr	r2, [pc, #556]	@ (80020b4 <debug_UBX_NAV_SIG+0x4d8>)
 8001e88:	2105      	movs	r1, #5
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7ff f890 	bl	8000fb0 <UBX_format>
 8001e90:	6578      	str	r0, [r7, #84]	@ 0x54
 8001e92:	4b84      	ldr	r3, [pc, #528]	@ (80020a4 <debug_UBX_NAV_SIG+0x4c8>)
 8001e94:	6999      	ldr	r1, [r3, #24]
 8001e96:	6539      	str	r1, [r7, #80]	@ 0x50
				sizeColumns[6],
				UBX_format(&(structAssociate->sig[i].cno ),TYPE_U1,NULL),
 8001e98:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001e9c:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	689a      	ldr	r2, [r3, #8]
 8001ea4:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 8001ea8:	011b      	lsls	r3, r3, #4
 8001eaa:	4413      	add	r3, r2
 8001eac:	3306      	adds	r3, #6
		formattedString(bufferDebug, &offsetDebug, 2*(MAX_COLUMNS - 1),true,true,
 8001eae:	2200      	movs	r2, #0
 8001eb0:	2101      	movs	r1, #1
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7ff f87c 	bl	8000fb0 <UBX_format>
 8001eb8:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8001eba:	4b7a      	ldr	r3, [pc, #488]	@ (80020a4 <debug_UBX_NAV_SIG+0x4c8>)
 8001ebc:	69db      	ldr	r3, [r3, #28]
 8001ebe:	64bb      	str	r3, [r7, #72]	@ 0x48
				sizeColumns[7],
				UBX_format(&(structAssociate->sig[i].qualityInd),TYPE_U1,(char*(*)(void*))get_QUALTIYIND),
 8001ec0:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001ec4:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 8001ed0:	011b      	lsls	r3, r3, #4
 8001ed2:	4413      	add	r3, r2
 8001ed4:	3307      	adds	r3, #7
		formattedString(bufferDebug, &offsetDebug, 2*(MAX_COLUMNS - 1),true,true,
 8001ed6:	4a78      	ldr	r2, [pc, #480]	@ (80020b8 <debug_UBX_NAV_SIG+0x4dc>)
 8001ed8:	2101      	movs	r1, #1
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7ff f868 	bl	8000fb0 <UBX_format>
 8001ee0:	6478      	str	r0, [r7, #68]	@ 0x44
 8001ee2:	4b70      	ldr	r3, [pc, #448]	@ (80020a4 <debug_UBX_NAV_SIG+0x4c8>)
 8001ee4:	6a1a      	ldr	r2, [r3, #32]
 8001ee6:	643a      	str	r2, [r7, #64]	@ 0x40
				sizeColumns[8],
				UBX_format(&(structAssociate->sig[i].corrSource),TYPE_U1,(char*(*)(void*))get_CORRSOURCE),
 8001ee8:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001eec:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	689a      	ldr	r2, [r3, #8]
 8001ef4:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 8001ef8:	011b      	lsls	r3, r3, #4
 8001efa:	4413      	add	r3, r2
 8001efc:	3308      	adds	r3, #8
		formattedString(bufferDebug, &offsetDebug, 2*(MAX_COLUMNS - 1),true,true,
 8001efe:	4a6f      	ldr	r2, [pc, #444]	@ (80020bc <debug_UBX_NAV_SIG+0x4e0>)
 8001f00:	2101      	movs	r1, #1
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff f854 	bl	8000fb0 <UBX_format>
 8001f08:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001f0a:	4b66      	ldr	r3, [pc, #408]	@ (80020a4 <debug_UBX_NAV_SIG+0x4c8>)
 8001f0c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001f0e:	63b9      	str	r1, [r7, #56]	@ 0x38
				sizeColumns[9],
				UBX_format(&(structAssociate->sig[i].ionoModel),TYPE_U1,(char*(*)(void*))get_IONOMODEL),
 8001f10:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001f14:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 8001f20:	011b      	lsls	r3, r3, #4
 8001f22:	4413      	add	r3, r2
 8001f24:	3309      	adds	r3, #9
		formattedString(bufferDebug, &offsetDebug, 2*(MAX_COLUMNS - 1),true,true,
 8001f26:	4a66      	ldr	r2, [pc, #408]	@ (80020c0 <debug_UBX_NAV_SIG+0x4e4>)
 8001f28:	2101      	movs	r1, #1
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff f840 	bl	8000fb0 <UBX_format>
 8001f30:	6378      	str	r0, [r7, #52]	@ 0x34
 8001f32:	4b5c      	ldr	r3, [pc, #368]	@ (80020a4 <debug_UBX_NAV_SIG+0x4c8>)
 8001f34:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 8001f36:	633d      	str	r5, [r7, #48]	@ 0x30

				sizeColumns[10],
				UBX_format(structAssociate->sig[i].sigFlags.health,TYPE_BITFIELD,(char*(*)(void*))get_HEALTH),
 8001f38:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001f3c:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	689a      	ldr	r2, [r3, #8]
 8001f44:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 8001f48:	011b      	lsls	r3, r3, #4
 8001f4a:	4413      	add	r3, r2
 8001f4c:	7a9b      	ldrb	r3, [r3, #10]
 8001f4e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8001f52:	b2db      	uxtb	r3, r3
		formattedString(bufferDebug, &offsetDebug, 2*(MAX_COLUMNS - 1),true,true,
 8001f54:	4a5b      	ldr	r2, [pc, #364]	@ (80020c4 <debug_UBX_NAV_SIG+0x4e8>)
 8001f56:	2100      	movs	r1, #0
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff f829 	bl	8000fb0 <UBX_format>
 8001f5e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8001f60:	4b50      	ldr	r3, [pc, #320]	@ (80020a4 <debug_UBX_NAV_SIG+0x4c8>)
 8001f62:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
 8001f64:	62be      	str	r6, [r7, #40]	@ 0x28
				sizeColumns[11],
				UBX_format(structAssociate->sig[i].sigFlags.prSmoothed,TYPE_BITFIELD,NULL),
 8001f66:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001f6a:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	689a      	ldr	r2, [r3, #8]
 8001f72:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 8001f76:	011b      	lsls	r3, r3, #4
 8001f78:	4413      	add	r3, r2
 8001f7a:	7a9b      	ldrb	r3, [r3, #10]
 8001f7c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001f80:	b2db      	uxtb	r3, r3
		formattedString(bufferDebug, &offsetDebug, 2*(MAX_COLUMNS - 1),true,true,
 8001f82:	2200      	movs	r2, #0
 8001f84:	2100      	movs	r1, #0
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff f812 	bl	8000fb0 <UBX_format>
 8001f8c:	6278      	str	r0, [r7, #36]	@ 0x24
 8001f8e:	4b45      	ldr	r3, [pc, #276]	@ (80020a4 <debug_UBX_NAV_SIG+0x4c8>)
 8001f90:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f92:	6239      	str	r1, [r7, #32]
				sizeColumns[12],
				UBX_format(structAssociate->sig[i].sigFlags.prUsed,TYPE_BITFIELD,NULL),
 8001f94:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001f98:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	689a      	ldr	r2, [r3, #8]
 8001fa0:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 8001fa4:	011b      	lsls	r3, r3, #4
 8001fa6:	4413      	add	r3, r2
 8001fa8:	7a9b      	ldrb	r3, [r3, #10]
 8001faa:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001fae:	b2db      	uxtb	r3, r3
		formattedString(bufferDebug, &offsetDebug, 2*(MAX_COLUMNS - 1),true,true,
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7fe fffb 	bl	8000fb0 <UBX_format>
 8001fba:	61f8      	str	r0, [r7, #28]
 8001fbc:	4b39      	ldr	r3, [pc, #228]	@ (80020a4 <debug_UBX_NAV_SIG+0x4c8>)
 8001fbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fc0:	61bb      	str	r3, [r7, #24]
				sizeColumns[13],
				UBX_format(structAssociate->sig[i].sigFlags.crUsed,TYPE_BITFIELD,NULL),
 8001fc2:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001fc6:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	689a      	ldr	r2, [r3, #8]
 8001fce:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 8001fd2:	011b      	lsls	r3, r3, #4
 8001fd4:	4413      	add	r3, r2
 8001fd6:	7a9b      	ldrb	r3, [r3, #10]
 8001fd8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001fdc:	b2db      	uxtb	r3, r3
		formattedString(bufferDebug, &offsetDebug, 2*(MAX_COLUMNS - 1),true,true,
 8001fde:	2200      	movs	r2, #0
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7fe ffe4 	bl	8000fb0 <UBX_format>
 8001fe8:	6178      	str	r0, [r7, #20]
 8001fea:	4b2e      	ldr	r3, [pc, #184]	@ (80020a4 <debug_UBX_NAV_SIG+0x4c8>)
 8001fec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001fee:	613a      	str	r2, [r7, #16]
				sizeColumns[14],
				UBX_format(structAssociate->sig[i].sigFlags.doUsed,TYPE_BITFIELD,NULL),
 8001ff0:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8001ff4:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	689a      	ldr	r2, [r3, #8]
 8001ffc:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 8002000:	011b      	lsls	r3, r3, #4
 8002002:	4413      	add	r3, r2
 8002004:	7a9b      	ldrb	r3, [r3, #10]
 8002006:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800200a:	b2db      	uxtb	r3, r3
		formattedString(bufferDebug, &offsetDebug, 2*(MAX_COLUMNS - 1),true,true,
 800200c:	2200      	movs	r2, #0
 800200e:	2100      	movs	r1, #0
 8002010:	4618      	mov	r0, r3
 8002012:	f7fe ffcd 	bl	8000fb0 <UBX_format>
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	4b22      	ldr	r3, [pc, #136]	@ (80020a4 <debug_UBX_NAV_SIG+0x4c8>)
 800201a:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800201c:	60b9      	str	r1, [r7, #8]
				sizeColumns[15],
				UBX_format(structAssociate->sig[i].sigFlags.prCorrUsed,TYPE_BITFIELD,NULL),
 800201e:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 8002022:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	689a      	ldr	r2, [r3, #8]
 800202a:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 800202e:	011b      	lsls	r3, r3, #4
 8002030:	4413      	add	r3, r2
 8002032:	7a9b      	ldrb	r3, [r3, #10]
 8002034:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002038:	b2db      	uxtb	r3, r3
		formattedString(bufferDebug, &offsetDebug, 2*(MAX_COLUMNS - 1),true,true,
 800203a:	2200      	movs	r2, #0
 800203c:	2100      	movs	r1, #0
 800203e:	4618      	mov	r0, r3
 8002040:	f7fe ffb6 	bl	8000fb0 <UBX_format>
 8002044:	6078      	str	r0, [r7, #4]
 8002046:	4b17      	ldr	r3, [pc, #92]	@ (80020a4 <debug_UBX_NAV_SIG+0x4c8>)
 8002048:	6c1e      	ldr	r6, [r3, #64]	@ 0x40
				sizeColumns[16],
				UBX_format(structAssociate->sig[i].sigFlags.crCorrUsed,TYPE_BITFIELD,NULL),
 800204a:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800204e:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	689a      	ldr	r2, [r3, #8]
 8002056:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 800205a:	011b      	lsls	r3, r3, #4
 800205c:	4413      	add	r3, r2
 800205e:	7a9b      	ldrb	r3, [r3, #10]
 8002060:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002064:	b2db      	uxtb	r3, r3
		formattedString(bufferDebug, &offsetDebug, 2*(MAX_COLUMNS - 1),true,true,
 8002066:	2200      	movs	r2, #0
 8002068:	2100      	movs	r1, #0
 800206a:	4618      	mov	r0, r3
 800206c:	f7fe ffa0 	bl	8000fb0 <UBX_format>
 8002070:	4605      	mov	r5, r0
 8002072:	4b0c      	ldr	r3, [pc, #48]	@ (80020a4 <debug_UBX_NAV_SIG+0x4c8>)
 8002074:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
				sizeColumns[17],
				UBX_format(structAssociate->sig[i].sigFlags.doCorrUsed,TYPE_BITFIELD,NULL)
 8002076:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800207a:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	689a      	ldr	r2, [r3, #8]
 8002082:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 8002086:	011b      	lsls	r3, r3, #4
 8002088:	4413      	add	r3, r2
 800208a:	7adb      	ldrb	r3, [r3, #11]
 800208c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002090:	b2db      	uxtb	r3, r3
		formattedString(bufferDebug, &offsetDebug, 2*(MAX_COLUMNS - 1),true,true,
 8002092:	2200      	movs	r2, #0
 8002094:	2100      	movs	r1, #0
 8002096:	4618      	mov	r0, r3
 8002098:	f7fe ff8a 	bl	8000fb0 <UBX_format>
 800209c:	4603      	mov	r3, r0
 800209e:	f507 7124 	add.w	r1, r7, #656	@ 0x290
 80020a2:	e011      	b.n	80020c8 <debug_UBX_NAV_SIG+0x4ec>
 80020a4:	20000028 	.word	0x20000028
 80020a8:	0800de20 	.word	0x0800de20
 80020ac:	08001105 	.word	0x08001105
 80020b0:	080011ed 	.word	0x080011ed
 80020b4:	08001381 	.word	0x08001381
 80020b8:	080013d5 	.word	0x080013d5
 80020bc:	080014dd 	.word	0x080014dd
 80020c0:	0800165d 	.word	0x0800165d
 80020c4:	08001775 	.word	0x08001775
 80020c8:	f107 0090 	add.w	r0, r7, #144	@ 0x90
 80020cc:	9323      	str	r3, [sp, #140]	@ 0x8c
 80020ce:	9422      	str	r4, [sp, #136]	@ 0x88
 80020d0:	9521      	str	r5, [sp, #132]	@ 0x84
 80020d2:	9620      	str	r6, [sp, #128]	@ 0x80
 80020d4:	687d      	ldr	r5, [r7, #4]
 80020d6:	951f      	str	r5, [sp, #124]	@ 0x7c
 80020d8:	68bc      	ldr	r4, [r7, #8]
 80020da:	941e      	str	r4, [sp, #120]	@ 0x78
 80020dc:	68fc      	ldr	r4, [r7, #12]
 80020de:	941d      	str	r4, [sp, #116]	@ 0x74
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	921c      	str	r2, [sp, #112]	@ 0x70
 80020e4:	697a      	ldr	r2, [r7, #20]
 80020e6:	921b      	str	r2, [sp, #108]	@ 0x6c
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	9319      	str	r3, [sp, #100]	@ 0x64
 80020f0:	6a3c      	ldr	r4, [r7, #32]
 80020f2:	9418      	str	r4, [sp, #96]	@ 0x60
 80020f4:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 80020f6:	9417      	str	r4, [sp, #92]	@ 0x5c
 80020f8:	6abe      	ldr	r6, [r7, #40]	@ 0x28
 80020fa:	9616      	str	r6, [sp, #88]	@ 0x58
 80020fc:	6afe      	ldr	r6, [r7, #44]	@ 0x2c
 80020fe:	9615      	str	r6, [sp, #84]	@ 0x54
 8002100:	6b3d      	ldr	r5, [r7, #48]	@ 0x30
 8002102:	9514      	str	r5, [sp, #80]	@ 0x50
 8002104:	6b7d      	ldr	r5, [r7, #52]	@ 0x34
 8002106:	9513      	str	r5, [sp, #76]	@ 0x4c
 8002108:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 800210a:	9412      	str	r4, [sp, #72]	@ 0x48
 800210c:	6bfc      	ldr	r4, [r7, #60]	@ 0x3c
 800210e:	9411      	str	r4, [sp, #68]	@ 0x44
 8002110:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002112:	9210      	str	r2, [sp, #64]	@ 0x40
 8002114:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002116:	920f      	str	r2, [sp, #60]	@ 0x3c
 8002118:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800211a:	930e      	str	r3, [sp, #56]	@ 0x38
 800211c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800211e:	930d      	str	r3, [sp, #52]	@ 0x34
 8002120:	6d3c      	ldr	r4, [r7, #80]	@ 0x50
 8002122:	940c      	str	r4, [sp, #48]	@ 0x30
 8002124:	6d7c      	ldr	r4, [r7, #84]	@ 0x54
 8002126:	940b      	str	r4, [sp, #44]	@ 0x2c
 8002128:	6dbe      	ldr	r6, [r7, #88]	@ 0x58
 800212a:	960a      	str	r6, [sp, #40]	@ 0x28
 800212c:	6dfe      	ldr	r6, [r7, #92]	@ 0x5c
 800212e:	9609      	str	r6, [sp, #36]	@ 0x24
 8002130:	6e3d      	ldr	r5, [r7, #96]	@ 0x60
 8002132:	9508      	str	r5, [sp, #32]
 8002134:	6e7d      	ldr	r5, [r7, #100]	@ 0x64
 8002136:	9507      	str	r5, [sp, #28]
 8002138:	6ebc      	ldr	r4, [r7, #104]	@ 0x68
 800213a:	9406      	str	r4, [sp, #24]
 800213c:	6efc      	ldr	r4, [r7, #108]	@ 0x6c
 800213e:	9405      	str	r4, [sp, #20]
 8002140:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002142:	9204      	str	r2, [sp, #16]
 8002144:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002146:	9203      	str	r2, [sp, #12]
 8002148:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800214a:	9302      	str	r3, [sp, #8]
 800214c:	4b38      	ldr	r3, [pc, #224]	@ (8002230 <debug_UBX_NAV_SIG+0x654>)
 800214e:	9301      	str	r3, [sp, #4]
 8002150:	2301      	movs	r3, #1
 8002152:	9300      	str	r3, [sp, #0]
 8002154:	2301      	movs	r3, #1
 8002156:	4642      	mov	r2, r8
 8002158:	f7ff fc8d 	bl	8001a76 <formattedString>
		);
		formattedString(bufferDebug, &offsetDebug, 1, false,false, SEPARATON);
 800215c:	f507 7124 	add.w	r1, r7, #656	@ 0x290
 8002160:	f107 0090 	add.w	r0, r7, #144	@ 0x90
 8002164:	4b33      	ldr	r3, [pc, #204]	@ (8002234 <debug_UBX_NAV_SIG+0x658>)
 8002166:	9301      	str	r3, [sp, #4]
 8002168:	2300      	movs	r3, #0
 800216a:	9300      	str	r3, [sp, #0]
 800216c:	2300      	movs	r3, #0
 800216e:	2201      	movs	r2, #1
 8002170:	f7ff fc81 	bl	8001a76 <formattedString>

		UARTdebugQ_t UARTdebug; char *color = ANSI_COLOR_RESET;
 8002174:	4b30      	ldr	r3, [pc, #192]	@ (8002238 <debug_UBX_NAV_SIG+0x65c>)
 8002176:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294

		UARTdebug.message = pvPortMalloc(offsetDebug+1);
 800217a:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 800217e:	3301      	adds	r3, #1
 8002180:	4618      	mov	r0, r3
 8002182:	f008 fa6b 	bl	800a65c <pvPortMalloc>
 8002186:	4602      	mov	r2, r0
 8002188:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800218c:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 8002190:	601a      	str	r2, [r3, #0]
		UARTdebug.color = pvPortMalloc(strlen(color) + 1);
 8002192:	f8d7 0294 	ldr.w	r0, [r7, #660]	@ 0x294
 8002196:	f7fe f86b 	bl	8000270 <strlen>
 800219a:	4603      	mov	r3, r0
 800219c:	3301      	adds	r3, #1
 800219e:	4618      	mov	r0, r3
 80021a0:	f008 fa5c 	bl	800a65c <pvPortMalloc>
 80021a4:	4602      	mov	r2, r0
 80021a6:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 80021aa:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 80021ae:	605a      	str	r2, [r3, #4]
		updateMemoryUsage();
 80021b0:	f000 fe74 	bl	8002e9c <updateMemoryUsage>
		strncpy(UARTdebug.message, bufferDebug, offsetDebug+1);
 80021b4:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 80021b8:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 80021bc:	6818      	ldr	r0, [r3, #0]
 80021be:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 80021c2:	1c5a      	adds	r2, r3, #1
 80021c4:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80021c8:	4619      	mov	r1, r3
 80021ca:	f009 faf3 	bl	800b7b4 <strncpy>
		strcpy(UARTdebug.color, color);
 80021ce:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 80021d2:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f8d7 1294 	ldr.w	r1, [r7, #660]	@ 0x294
 80021dc:	4618      	mov	r0, r3
 80021de:	f009 fbca 	bl	800b976 <strcpy>
		offsetDebug=0;
 80021e2:	2300      	movs	r3, #0
 80021e4:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290

		xQueueSendToBack(UARTdebugHandle, &UARTdebug, osWaitForever);
 80021e8:	4b14      	ldr	r3, [pc, #80]	@ (800223c <debug_UBX_NAV_SIG+0x660>)
 80021ea:	6818      	ldr	r0, [r3, #0]
 80021ec:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 80021f0:	2300      	movs	r3, #0
 80021f2:	f04f 32ff 	mov.w	r2, #4294967295
 80021f6:	f005 ff95 	bl	8008124 <xQueueGenericSend>
		updateMemoryUsage();
 80021fa:	f000 fe4f 	bl	8002e9c <updateMemoryUsage>
	for (int i = 0; i < structAssociate->numSigs.bytes[0]; i++) {
 80021fe:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 8002202:	3301      	adds	r3, #1
 8002204:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
 8002208:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800220c:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	795b      	ldrb	r3, [r3, #5]
 8002214:	461a      	mov	r2, r3
 8002216:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 800221a:	4293      	cmp	r3, r2
 800221c:	f6ff adbe 	blt.w	8001d9c <debug_UBX_NAV_SIG+0x1c0>
	}
}
 8002220:	bf00      	nop
 8002222:	bf00      	nop
 8002224:	f507 772a 	add.w	r7, r7, #680	@ 0x2a8
 8002228:	46bd      	mov	sp, r7
 800222a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800222e:	bf00      	nop
 8002230:	0800de2c 	.word	0x0800de2c
 8002234:	0800ddc8 	.word	0x0800ddc8
 8002238:	0800de18 	.word	0x0800de18
 800223c:	20000310 	.word	0x20000310

08002240 <cleaner_UBX_NAV_SIG>:

void cleaner_UBX_NAV_SIG(UBX_NAV_SIG *structAssociate) {
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
	vPortFree(structAssociate->sig);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	4618      	mov	r0, r3
 800224e:	f008 fad3 	bl	800a7f8 <vPortFree>
	updateMemoryUsage();
 8002252:	f000 fe23 	bl	8002e9c <updateMemoryUsage>
}
 8002256:	bf00      	nop
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
	...

08002260 <create_UBX_NAV_SIG>:
void create_UBX_NAV_SIG(UBXMessage_parsed* UBXMessage, UBX_NAV_SIG *structAssociate){
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
	size_t offset = 6; //B562...
 800226a:	2306      	movs	r3, #6
 800226c:	60fb      	str	r3, [r7, #12]
	logMemoryUsage("START - CREATION - UBX_NAV_SIG");
 800226e:	487a      	ldr	r0, [pc, #488]	@ (8002458 <create_UBX_NAV_SIG+0x1f8>)
 8002270:	f000 fe1e 	bl	8002eb0 <logMemoryUsage>
	memcpy(&(structAssociate->iTOW), UBXMessage->brute->buffer + offset, sizeof(structAssociate->iTOW));
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	6852      	ldr	r2, [r2, #4]
 800227a:	6811      	ldr	r1, [r2, #0]
 800227c:	68fa      	ldr	r2, [r7, #12]
 800227e:	440a      	add	r2, r1
 8002280:	6812      	ldr	r2, [r2, #0]
 8002282:	601a      	str	r2, [r3, #0]
	offset += sizeof(structAssociate->iTOW);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	3304      	adds	r3, #4
 8002288:	60fb      	str	r3, [r7, #12]

	memcpy(&(structAssociate->version), UBXMessage->brute->buffer + offset, sizeof(structAssociate->version));
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	3304      	adds	r3, #4
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	6852      	ldr	r2, [r2, #4]
 8002292:	6811      	ldr	r1, [r2, #0]
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	440a      	add	r2, r1
 8002298:	7812      	ldrb	r2, [r2, #0]
 800229a:	701a      	strb	r2, [r3, #0]
	offset += sizeof(structAssociate->version);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	3301      	adds	r3, #1
 80022a0:	60fb      	str	r3, [r7, #12]

	memcpy(&(structAssociate->numSigs), UBXMessage->brute->buffer + offset, sizeof(structAssociate->numSigs));
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	3305      	adds	r3, #5
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	6852      	ldr	r2, [r2, #4]
 80022aa:	6811      	ldr	r1, [r2, #0]
 80022ac:	68fa      	ldr	r2, [r7, #12]
 80022ae:	440a      	add	r2, r1
 80022b0:	7812      	ldrb	r2, [r2, #0]
 80022b2:	701a      	strb	r2, [r3, #0]
	offset += sizeof(structAssociate->numSigs);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	3301      	adds	r3, #1
 80022b8:	60fb      	str	r3, [r7, #12]

	offset += sizeof(structAssociate->reserved0);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	3302      	adds	r3, #2
 80022be:	60fb      	str	r3, [r7, #12]
	structAssociate->sig = (repeatedGroup_UBX_NAV_SIG*)pvPortMalloc(structAssociate->numSigs.bytes[0] * sizeof(repeatedGroup_UBX_NAV_SIG));
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	795b      	ldrb	r3, [r3, #5]
 80022c4:	011b      	lsls	r3, r3, #4
 80022c6:	4618      	mov	r0, r3
 80022c8:	f008 f9c8 	bl	800a65c <pvPortMalloc>
 80022cc:	4602      	mov	r2, r0
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	609a      	str	r2, [r3, #8]
	if (structAssociate->sig == NULL && structAssociate->numSigs.bytes[0]!=0 ) Error_Handler();
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d105      	bne.n	80022e6 <create_UBX_NAV_SIG+0x86>
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	795b      	ldrb	r3, [r3, #5]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <create_UBX_NAV_SIG+0x86>
 80022e2:	f001 fb6b 	bl	80039bc <Error_Handler>
	//updateMemoryUsage();
    for (int i = 0; i < structAssociate->numSigs.bytes[0]; i++) {
 80022e6:	2300      	movs	r3, #0
 80022e8:	60bb      	str	r3, [r7, #8]
 80022ea:	e0a7      	b.n	800243c <create_UBX_NAV_SIG+0x1dc>

		memcpy(&(structAssociate->sig[i].gnssId), UBXMessage->brute->buffer + offset, sizeof(structAssociate->sig[i].gnssId));
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	011b      	lsls	r3, r3, #4
 80022f4:	4413      	add	r3, r2
 80022f6:	4619      	mov	r1, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	4413      	add	r3, r2
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	700b      	strb	r3, [r1, #0]
		offset += sizeof(structAssociate->sig[i].gnssId);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	3301      	adds	r3, #1
 800230a:	60fb      	str	r3, [r7, #12]

		memcpy(&(structAssociate->sig[i].svId), UBXMessage->brute->buffer + offset, sizeof(structAssociate->sig[i].svId));
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	689a      	ldr	r2, [r3, #8]
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	011b      	lsls	r3, r3, #4
 8002314:	4413      	add	r3, r2
 8002316:	3301      	adds	r3, #1
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	6852      	ldr	r2, [r2, #4]
 800231c:	6811      	ldr	r1, [r2, #0]
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	440a      	add	r2, r1
 8002322:	7812      	ldrb	r2, [r2, #0]
 8002324:	701a      	strb	r2, [r3, #0]
		offset += sizeof(structAssociate->sig[i].svId);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	3301      	adds	r3, #1
 800232a:	60fb      	str	r3, [r7, #12]

		memcpy(&(structAssociate->sig[i].sigId), UBXMessage->brute->buffer + offset, sizeof(structAssociate->sig[i].sigId));
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	689a      	ldr	r2, [r3, #8]
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	011b      	lsls	r3, r3, #4
 8002334:	4413      	add	r3, r2
 8002336:	3302      	adds	r3, #2
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	6852      	ldr	r2, [r2, #4]
 800233c:	6811      	ldr	r1, [r2, #0]
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	440a      	add	r2, r1
 8002342:	7812      	ldrb	r2, [r2, #0]
 8002344:	701a      	strb	r2, [r3, #0]
		offset += sizeof(structAssociate->sig[i].sigId);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	3301      	adds	r3, #1
 800234a:	60fb      	str	r3, [r7, #12]

		memcpy(&(structAssociate->sig[i].freqId), UBXMessage->brute->buffer + offset, sizeof(structAssociate->sig[i].freqId));
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	011b      	lsls	r3, r3, #4
 8002354:	4413      	add	r3, r2
 8002356:	3303      	adds	r3, #3
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	6852      	ldr	r2, [r2, #4]
 800235c:	6811      	ldr	r1, [r2, #0]
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	440a      	add	r2, r1
 8002362:	7812      	ldrb	r2, [r2, #0]
 8002364:	701a      	strb	r2, [r3, #0]
		offset += sizeof(structAssociate->sig[i].freqId);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	3301      	adds	r3, #1
 800236a:	60fb      	str	r3, [r7, #12]

		memcpy(&(structAssociate->sig[i].prRes), UBXMessage->brute->buffer + offset, sizeof(structAssociate->sig[i].prRes));
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	689a      	ldr	r2, [r3, #8]
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	011b      	lsls	r3, r3, #4
 8002374:	4413      	add	r3, r2
 8002376:	3304      	adds	r3, #4
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	6852      	ldr	r2, [r2, #4]
 800237c:	6811      	ldr	r1, [r2, #0]
 800237e:	68fa      	ldr	r2, [r7, #12]
 8002380:	440a      	add	r2, r1
 8002382:	8812      	ldrh	r2, [r2, #0]
 8002384:	b292      	uxth	r2, r2
 8002386:	801a      	strh	r2, [r3, #0]
		offset += sizeof(structAssociate->sig[i].prRes);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	3302      	adds	r3, #2
 800238c:	60fb      	str	r3, [r7, #12]

		memcpy(&(structAssociate->sig[i].cno), UBXMessage->brute->buffer + offset, sizeof(structAssociate->sig[i].cno));
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	689a      	ldr	r2, [r3, #8]
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	011b      	lsls	r3, r3, #4
 8002396:	4413      	add	r3, r2
 8002398:	3306      	adds	r3, #6
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	6852      	ldr	r2, [r2, #4]
 800239e:	6811      	ldr	r1, [r2, #0]
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	440a      	add	r2, r1
 80023a4:	7812      	ldrb	r2, [r2, #0]
 80023a6:	701a      	strb	r2, [r3, #0]
		offset += sizeof(structAssociate->sig[i].cno);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	3301      	adds	r3, #1
 80023ac:	60fb      	str	r3, [r7, #12]

		memcpy(&(structAssociate->sig[i].qualityInd), UBXMessage->brute->buffer + offset, sizeof(structAssociate->sig[i].qualityInd));
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	689a      	ldr	r2, [r3, #8]
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	011b      	lsls	r3, r3, #4
 80023b6:	4413      	add	r3, r2
 80023b8:	3307      	adds	r3, #7
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	6852      	ldr	r2, [r2, #4]
 80023be:	6811      	ldr	r1, [r2, #0]
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	440a      	add	r2, r1
 80023c4:	7812      	ldrb	r2, [r2, #0]
 80023c6:	701a      	strb	r2, [r3, #0]
		offset += sizeof(structAssociate->sig[i].qualityInd);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	3301      	adds	r3, #1
 80023cc:	60fb      	str	r3, [r7, #12]

		memcpy(&(structAssociate->sig[i].corrSource), UBXMessage->brute->buffer + offset, sizeof(structAssociate->sig[i].corrSource));
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	689a      	ldr	r2, [r3, #8]
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	011b      	lsls	r3, r3, #4
 80023d6:	4413      	add	r3, r2
 80023d8:	3308      	adds	r3, #8
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	6852      	ldr	r2, [r2, #4]
 80023de:	6811      	ldr	r1, [r2, #0]
 80023e0:	68fa      	ldr	r2, [r7, #12]
 80023e2:	440a      	add	r2, r1
 80023e4:	7812      	ldrb	r2, [r2, #0]
 80023e6:	701a      	strb	r2, [r3, #0]
		offset += sizeof(structAssociate->sig[i].corrSource);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	3301      	adds	r3, #1
 80023ec:	60fb      	str	r3, [r7, #12]

		memcpy(&(structAssociate->sig[i].ionoModel), UBXMessage->brute->buffer + offset, sizeof(structAssociate->sig[i].ionoModel));
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	689a      	ldr	r2, [r3, #8]
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	011b      	lsls	r3, r3, #4
 80023f6:	4413      	add	r3, r2
 80023f8:	3309      	adds	r3, #9
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	6852      	ldr	r2, [r2, #4]
 80023fe:	6811      	ldr	r1, [r2, #0]
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	440a      	add	r2, r1
 8002404:	7812      	ldrb	r2, [r2, #0]
 8002406:	701a      	strb	r2, [r3, #0]
		offset += sizeof(structAssociate->sig[i].ionoModel);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	3301      	adds	r3, #1
 800240c:	60fb      	str	r3, [r7, #12]

		memcpy(&(structAssociate->sig[i].sigFlags), UBXMessage->brute->buffer + offset, sizeof(structAssociate->sig[i].sigFlags));
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	689a      	ldr	r2, [r3, #8]
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	011b      	lsls	r3, r3, #4
 8002416:	4413      	add	r3, r2
 8002418:	330a      	adds	r3, #10
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	6852      	ldr	r2, [r2, #4]
 800241e:	6811      	ldr	r1, [r2, #0]
 8002420:	68fa      	ldr	r2, [r7, #12]
 8002422:	440a      	add	r2, r1
 8002424:	8812      	ldrh	r2, [r2, #0]
 8002426:	b292      	uxth	r2, r2
 8002428:	801a      	strh	r2, [r3, #0]
		offset += sizeof(structAssociate->sig[i].sigFlags);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	3302      	adds	r3, #2
 800242e:	60fb      	str	r3, [r7, #12]

		offset += sizeof(structAssociate->sig[i].reserved1);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	3304      	adds	r3, #4
 8002434:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < structAssociate->numSigs.bytes[0]; i++) {
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	3301      	adds	r3, #1
 800243a:	60bb      	str	r3, [r7, #8]
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	795b      	ldrb	r3, [r3, #5]
 8002440:	461a      	mov	r2, r3
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	4293      	cmp	r3, r2
 8002446:	f6ff af51 	blt.w	80022ec <create_UBX_NAV_SIG+0x8c>
	}
    logMemoryUsage("END - CREATION - UBX_NAV_SIG");
 800244a:	4804      	ldr	r0, [pc, #16]	@ (800245c <create_UBX_NAV_SIG+0x1fc>)
 800244c:	f000 fd30 	bl	8002eb0 <logMemoryUsage>
}
 8002450:	bf00      	nop
 8002452:	3710      	adds	r7, #16
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	0800deb8 	.word	0x0800deb8
 800245c:	0800ded8 	.word	0x0800ded8

08002460 <debug_UBX_NAV_TIMEUTC>:
 *  Created on: Jul 24, 2024
 *      Author: romain.pace
 */
#include "GNSS/UBX_NAV.h"

void debug_UBX_NAV_TIMEUTC(UBX_NAV_TIMEUTC *structAssociate){
 8002460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002462:	f5ad 7d1f 	sub.w	sp, sp, #636	@ 0x27c
 8002466:	af10      	add	r7, sp, #64	@ 0x40
 8002468:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 800246c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8002470:	6018      	str	r0, [r3, #0]
	size_t offsetDebug = 0;
 8002472:	2300      	movs	r3, #0
 8002474:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
			"sec: %s\r\n"
			"validTOW: %s\r\n"
			"validWKN: %s\r\n"
			"validUTC: %s\r\n"
			"utcStandard: %s\r\n",
			UBX_format(&(structAssociate->iTOW),TYPE_U4,NULL),
 8002478:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 800247c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8002480:	681b      	ldr	r3, [r3, #0]
	formattedString(bufferDebug, &offsetDebug, 13, true,false,
 8002482:	2200      	movs	r2, #0
 8002484:	2107      	movs	r1, #7
 8002486:	4618      	mov	r0, r3
 8002488:	f7fe fd92 	bl	8000fb0 <UBX_format>
 800248c:	6238      	str	r0, [r7, #32]
			UBX_format(&(structAssociate->tAcc),TYPE_U4,NULL),
 800248e:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8002492:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	3304      	adds	r3, #4
	formattedString(bufferDebug, &offsetDebug, 13, true,false,
 800249a:	2200      	movs	r2, #0
 800249c:	2107      	movs	r1, #7
 800249e:	4618      	mov	r0, r3
 80024a0:	f7fe fd86 	bl	8000fb0 <UBX_format>
 80024a4:	61f8      	str	r0, [r7, #28]
			UBX_format(&(structAssociate->nano),TYPE_I4,NULL),
 80024a6:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 80024aa:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	3308      	adds	r3, #8
	formattedString(bufferDebug, &offsetDebug, 13, true,false,
 80024b2:	2200      	movs	r2, #0
 80024b4:	2108      	movs	r1, #8
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7fe fd7a 	bl	8000fb0 <UBX_format>
 80024bc:	61b8      	str	r0, [r7, #24]
			UBX_format(&(structAssociate->year),TYPE_U2,NULL),
 80024be:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 80024c2:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	330c      	adds	r3, #12
	formattedString(bufferDebug, &offsetDebug, 13, true,false,
 80024ca:	2200      	movs	r2, #0
 80024cc:	2104      	movs	r1, #4
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7fe fd6e 	bl	8000fb0 <UBX_format>
 80024d4:	6178      	str	r0, [r7, #20]
			UBX_format(&(structAssociate->month),TYPE_U1,NULL),
 80024d6:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 80024da:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	330e      	adds	r3, #14
	formattedString(bufferDebug, &offsetDebug, 13, true,false,
 80024e2:	2200      	movs	r2, #0
 80024e4:	2101      	movs	r1, #1
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7fe fd62 	bl	8000fb0 <UBX_format>
 80024ec:	6138      	str	r0, [r7, #16]
			UBX_format(&(structAssociate->day),TYPE_U1,NULL),
 80024ee:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 80024f2:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	330f      	adds	r3, #15
	formattedString(bufferDebug, &offsetDebug, 13, true,false,
 80024fa:	2200      	movs	r2, #0
 80024fc:	2101      	movs	r1, #1
 80024fe:	4618      	mov	r0, r3
 8002500:	f7fe fd56 	bl	8000fb0 <UBX_format>
 8002504:	60f8      	str	r0, [r7, #12]
			UBX_format(&(structAssociate->hour),TYPE_U1,NULL),
 8002506:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 800250a:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	3310      	adds	r3, #16
	formattedString(bufferDebug, &offsetDebug, 13, true,false,
 8002512:	2200      	movs	r2, #0
 8002514:	2101      	movs	r1, #1
 8002516:	4618      	mov	r0, r3
 8002518:	f7fe fd4a 	bl	8000fb0 <UBX_format>
 800251c:	60b8      	str	r0, [r7, #8]
			UBX_format(&(structAssociate->min),TYPE_U1,NULL),
 800251e:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8002522:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	3311      	adds	r3, #17
	formattedString(bufferDebug, &offsetDebug, 13, true,false,
 800252a:	2200      	movs	r2, #0
 800252c:	2101      	movs	r1, #1
 800252e:	4618      	mov	r0, r3
 8002530:	f7fe fd3e 	bl	8000fb0 <UBX_format>
 8002534:	6078      	str	r0, [r7, #4]
			UBX_format(&(structAssociate->sec),TYPE_U1,NULL),
 8002536:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 800253a:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	3312      	adds	r3, #18
	formattedString(bufferDebug, &offsetDebug, 13, true,false,
 8002542:	2200      	movs	r2, #0
 8002544:	2101      	movs	r1, #1
 8002546:	4618      	mov	r0, r3
 8002548:	f7fe fd32 	bl	8000fb0 <UBX_format>
 800254c:	6038      	str	r0, [r7, #0]

			UBX_format(structAssociate->valid.validTOW,TYPE_BITFIELD,NULL),
 800254e:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8002552:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	7cdb      	ldrb	r3, [r3, #19]
 800255a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800255e:	b2db      	uxtb	r3, r3
	formattedString(bufferDebug, &offsetDebug, 13, true,false,
 8002560:	2200      	movs	r2, #0
 8002562:	2100      	movs	r1, #0
 8002564:	4618      	mov	r0, r3
 8002566:	f7fe fd23 	bl	8000fb0 <UBX_format>
 800256a:	4606      	mov	r6, r0
			UBX_format(structAssociate->valid.validWKN,TYPE_BITFIELD,NULL),
 800256c:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8002570:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	7cdb      	ldrb	r3, [r3, #19]
 8002578:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800257c:	b2db      	uxtb	r3, r3
	formattedString(bufferDebug, &offsetDebug, 13, true,false,
 800257e:	2200      	movs	r2, #0
 8002580:	2100      	movs	r1, #0
 8002582:	4618      	mov	r0, r3
 8002584:	f7fe fd14 	bl	8000fb0 <UBX_format>
 8002588:	4605      	mov	r5, r0
			UBX_format(structAssociate->valid.validUTC,TYPE_BITFIELD,NULL),
 800258a:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 800258e:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	7cdb      	ldrb	r3, [r3, #19]
 8002596:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800259a:	b2db      	uxtb	r3, r3
	formattedString(bufferDebug, &offsetDebug, 13, true,false,
 800259c:	2200      	movs	r2, #0
 800259e:	2100      	movs	r1, #0
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7fe fd05 	bl	8000fb0 <UBX_format>
 80025a6:	4604      	mov	r4, r0
			UBX_format(structAssociate->valid.utcStandard,TYPE_BITFIELD,(char*(*)(void*))get_UTCSTANDARD)
 80025a8:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 80025ac:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	7cdb      	ldrb	r3, [r3, #19]
 80025b4:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 80025b8:	b2db      	uxtb	r3, r3
	formattedString(bufferDebug, &offsetDebug, 13, true,false,
 80025ba:	4a38      	ldr	r2, [pc, #224]	@ (800269c <debug_UBX_NAV_TIMEUTC+0x23c>)
 80025bc:	2100      	movs	r1, #0
 80025be:	4618      	mov	r0, r3
 80025c0:	f7fe fcf6 	bl	8000fb0 <UBX_format>
 80025c4:	4603      	mov	r3, r0
 80025c6:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 80025ca:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80025ce:	930e      	str	r3, [sp, #56]	@ 0x38
 80025d0:	940d      	str	r4, [sp, #52]	@ 0x34
 80025d2:	950c      	str	r5, [sp, #48]	@ 0x30
 80025d4:	960b      	str	r6, [sp, #44]	@ 0x2c
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	9308      	str	r3, [sp, #32]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	9307      	str	r3, [sp, #28]
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	9306      	str	r3, [sp, #24]
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	9305      	str	r3, [sp, #20]
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	9304      	str	r3, [sp, #16]
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	9303      	str	r3, [sp, #12]
 80025f6:	6a3b      	ldr	r3, [r7, #32]
 80025f8:	9302      	str	r3, [sp, #8]
 80025fa:	4b29      	ldr	r3, [pc, #164]	@ (80026a0 <debug_UBX_NAV_TIMEUTC+0x240>)
 80025fc:	9301      	str	r3, [sp, #4]
 80025fe:	2300      	movs	r3, #0
 8002600:	9300      	str	r3, [sp, #0]
 8002602:	2301      	movs	r3, #1
 8002604:	220d      	movs	r2, #13
 8002606:	f7ff fa36 	bl	8001a76 <formattedString>
	);
	UARTdebugQ_t UARTdebug; char *color = ANSI_COLOR_RESET;
 800260a:	4b26      	ldr	r3, [pc, #152]	@ (80026a4 <debug_UBX_NAV_TIMEUTC+0x244>)
 800260c:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
	UARTdebug.message = pvPortMalloc(offsetDebug+1);
 8002610:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8002614:	3301      	adds	r3, #1
 8002616:	4618      	mov	r0, r3
 8002618:	f008 f820 	bl	800a65c <pvPortMalloc>
 800261c:	4602      	mov	r2, r0
 800261e:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8002622:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8002626:	601a      	str	r2, [r3, #0]
	UARTdebug.color = pvPortMalloc(strlen(color) + 1);
 8002628:	f8d7 0234 	ldr.w	r0, [r7, #564]	@ 0x234
 800262c:	f7fd fe20 	bl	8000270 <strlen>
 8002630:	4603      	mov	r3, r0
 8002632:	3301      	adds	r3, #1
 8002634:	4618      	mov	r0, r3
 8002636:	f008 f811 	bl	800a65c <pvPortMalloc>
 800263a:	4602      	mov	r2, r0
 800263c:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8002640:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8002644:	605a      	str	r2, [r3, #4]
	updateMemoryUsage();
 8002646:	f000 fc29 	bl	8002e9c <updateMemoryUsage>
	strncpy(UARTdebug.message, bufferDebug, offsetDebug+1);
 800264a:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 800264e:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8002652:	6818      	ldr	r0, [r3, #0]
 8002654:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8002658:	1c5a      	adds	r2, r3, #1
 800265a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800265e:	4619      	mov	r1, r3
 8002660:	f009 f8a8 	bl	800b7b4 <strncpy>
	strcpy(UARTdebug.color, color);
 8002664:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8002668:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f8d7 1234 	ldr.w	r1, [r7, #564]	@ 0x234
 8002672:	4618      	mov	r0, r3
 8002674:	f009 f97f 	bl	800b976 <strcpy>
	offsetDebug = 0 ;
 8002678:	2300      	movs	r3, #0
 800267a:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230

	xQueueSendToBack(UARTdebugHandle, &UARTdebug, osWaitForever);
 800267e:	4b0a      	ldr	r3, [pc, #40]	@ (80026a8 <debug_UBX_NAV_TIMEUTC+0x248>)
 8002680:	6818      	ldr	r0, [r3, #0]
 8002682:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8002686:	2300      	movs	r3, #0
 8002688:	f04f 32ff 	mov.w	r2, #4294967295
 800268c:	f005 fd4a 	bl	8008124 <xQueueGenericSend>
}
 8002690:	bf00      	nop
 8002692:	f507 770f 	add.w	r7, r7, #572	@ 0x23c
 8002696:	46bd      	mov	sp, r7
 8002698:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800269a:	bf00      	nop
 800269c:	08001809 	.word	0x08001809
 80026a0:	0800dfa0 	.word	0x0800dfa0
 80026a4:	0800e054 	.word	0x0800e054
 80026a8:	20000310 	.word	0x20000310

080026ac <create_UBX_NAV_TIMEUTC>:

void create_UBX_NAV_TIMEUTC(UBXMessage_parsed* UBXMessage, UBX_NAV_TIMEUTC *structAssociate){
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
	size_t offset = 6; //B562...
 80026b6:	2306      	movs	r3, #6
 80026b8:	60fb      	str	r3, [r7, #12]
	logMemoryUsage("START - CREATION - UBX_NAV_SIG");
 80026ba:	483e      	ldr	r0, [pc, #248]	@ (80027b4 <create_UBX_NAV_TIMEUTC+0x108>)
 80026bc:	f000 fbf8 	bl	8002eb0 <logMemoryUsage>
	memcpy(&(structAssociate->iTOW), UBXMessage->brute->buffer + offset, sizeof(structAssociate->iTOW));
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	6852      	ldr	r2, [r2, #4]
 80026c6:	6811      	ldr	r1, [r2, #0]
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	440a      	add	r2, r1
 80026cc:	6812      	ldr	r2, [r2, #0]
 80026ce:	601a      	str	r2, [r3, #0]
	offset += sizeof(structAssociate->iTOW);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	3304      	adds	r3, #4
 80026d4:	60fb      	str	r3, [r7, #12]

	memcpy(&(structAssociate->tAcc), UBXMessage->brute->buffer + offset, sizeof(structAssociate->tAcc));
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	3304      	adds	r3, #4
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	6852      	ldr	r2, [r2, #4]
 80026de:	6811      	ldr	r1, [r2, #0]
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	440a      	add	r2, r1
 80026e4:	6812      	ldr	r2, [r2, #0]
 80026e6:	601a      	str	r2, [r3, #0]
	offset += sizeof(structAssociate->tAcc);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	3304      	adds	r3, #4
 80026ec:	60fb      	str	r3, [r7, #12]

	memcpy(&(structAssociate->nano), UBXMessage->brute->buffer + offset, sizeof(structAssociate->nano));
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	3308      	adds	r3, #8
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	6852      	ldr	r2, [r2, #4]
 80026f6:	6811      	ldr	r1, [r2, #0]
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	440a      	add	r2, r1
 80026fc:	6812      	ldr	r2, [r2, #0]
 80026fe:	601a      	str	r2, [r3, #0]
	offset += sizeof(structAssociate->nano);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	3304      	adds	r3, #4
 8002704:	60fb      	str	r3, [r7, #12]
	memcpy(&(structAssociate->year), UBXMessage->brute->buffer + offset, sizeof(structAssociate->year));
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	330c      	adds	r3, #12
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	6852      	ldr	r2, [r2, #4]
 800270e:	6811      	ldr	r1, [r2, #0]
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	440a      	add	r2, r1
 8002714:	8812      	ldrh	r2, [r2, #0]
 8002716:	b292      	uxth	r2, r2
 8002718:	801a      	strh	r2, [r3, #0]
	offset += sizeof(structAssociate->year);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	3302      	adds	r3, #2
 800271e:	60fb      	str	r3, [r7, #12]

	memcpy(&(structAssociate->month), UBXMessage->brute->buffer + offset, sizeof(structAssociate->month));
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	330e      	adds	r3, #14
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	6852      	ldr	r2, [r2, #4]
 8002728:	6811      	ldr	r1, [r2, #0]
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	440a      	add	r2, r1
 800272e:	7812      	ldrb	r2, [r2, #0]
 8002730:	701a      	strb	r2, [r3, #0]
	offset += sizeof(structAssociate->month);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	3301      	adds	r3, #1
 8002736:	60fb      	str	r3, [r7, #12]

	memcpy(&(structAssociate->day), UBXMessage->brute->buffer + offset, sizeof(structAssociate->day));
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	330f      	adds	r3, #15
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	6852      	ldr	r2, [r2, #4]
 8002740:	6811      	ldr	r1, [r2, #0]
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	440a      	add	r2, r1
 8002746:	7812      	ldrb	r2, [r2, #0]
 8002748:	701a      	strb	r2, [r3, #0]
	offset += sizeof(structAssociate->day);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	3301      	adds	r3, #1
 800274e:	60fb      	str	r3, [r7, #12]

	memcpy(&(structAssociate->hour), UBXMessage->brute->buffer + offset, sizeof(structAssociate->hour));
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	3310      	adds	r3, #16
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6852      	ldr	r2, [r2, #4]
 8002758:	6811      	ldr	r1, [r2, #0]
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	440a      	add	r2, r1
 800275e:	7812      	ldrb	r2, [r2, #0]
 8002760:	701a      	strb	r2, [r3, #0]
	offset += sizeof(structAssociate->hour);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	3301      	adds	r3, #1
 8002766:	60fb      	str	r3, [r7, #12]

	memcpy(&(structAssociate->min), UBXMessage->brute->buffer + offset, sizeof(structAssociate->min));
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	3311      	adds	r3, #17
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	6852      	ldr	r2, [r2, #4]
 8002770:	6811      	ldr	r1, [r2, #0]
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	440a      	add	r2, r1
 8002776:	7812      	ldrb	r2, [r2, #0]
 8002778:	701a      	strb	r2, [r3, #0]
	offset += sizeof(structAssociate->min);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	3301      	adds	r3, #1
 800277e:	60fb      	str	r3, [r7, #12]

	memcpy(&(structAssociate->sec), UBXMessage->brute->buffer + offset, sizeof(structAssociate->sec));
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	3312      	adds	r3, #18
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	6852      	ldr	r2, [r2, #4]
 8002788:	6811      	ldr	r1, [r2, #0]
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	440a      	add	r2, r1
 800278e:	7812      	ldrb	r2, [r2, #0]
 8002790:	701a      	strb	r2, [r3, #0]
	offset += sizeof(structAssociate->sec);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	3301      	adds	r3, #1
 8002796:	60fb      	str	r3, [r7, #12]

	memcpy(&(structAssociate->valid), UBXMessage->brute->buffer + offset, sizeof(structAssociate->valid));
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	3313      	adds	r3, #19
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	6852      	ldr	r2, [r2, #4]
 80027a0:	6811      	ldr	r1, [r2, #0]
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	440a      	add	r2, r1
 80027a6:	7812      	ldrb	r2, [r2, #0]
 80027a8:	701a      	strb	r2, [r3, #0]
}
 80027aa:	bf00      	nop
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	0800e05c 	.word	0x0800e05c

080027b8 <cleaner_UBX_NAV_TIMEUTC>:
void cleaner_UBX_NAV_TIMEUTC(UBX_NAV_TIMEUTC *structAssociate){
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
	//Nothing to clean
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <LORACom_Init>:
#include "LORA/RFM9x.h"
#include "shared.h"
LORACom_HandleTypeDef hLORACom;

void LORACom_Init(SPI_HandleTypeDef* hspi,UART_HandleTypeDef* huartDebug)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
	hLORACom.hspi = hspi;
 80027d6:	4a06      	ldr	r2, [pc, #24]	@ (80027f0 <LORACom_Init+0x24>)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6013      	str	r3, [r2, #0]
	hLORACom.huartDebug = huartDebug;
 80027dc:	4a04      	ldr	r2, [pc, #16]	@ (80027f0 <LORACom_Init+0x24>)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	6053      	str	r3, [r2, #4]
}
 80027e2:	bf00      	nop
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	200002d4 	.word	0x200002d4

080027f4 <RFM9x_Init>:
#include "task.h"
#include "main.h"
#include "cmsis_os.h"

void RFM9x_Init( void )
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
	// Assert Reset low on the RFM9x
	RF_TestSpi();
 80027fa:	f000 f9c9 	bl	8002b90 <RF_TestSpi>
	HAL_GPIO_WritePin(SPI2_RST_GPIO_Port, SPI2_RST_Pin, GPIO_PIN_RESET);
 80027fe:	2200      	movs	r2, #0
 8002800:	2140      	movs	r1, #64	@ 0x40
 8002802:	482b      	ldr	r0, [pc, #172]	@ (80028b0 <RFM9x_Init+0xbc>)
 8002804:	f001 ff02 	bl	800460c <HAL_GPIO_WritePin>
	vTaskDelay(10);
 8002808:	200a      	movs	r0, #10
 800280a:	f006 fc25 	bl	8009058 <vTaskDelay>
	HAL_GPIO_WritePin(SPI2_RST_GPIO_Port, SPI2_RST_Pin, GPIO_PIN_SET);
 800280e:	2201      	movs	r2, #1
 8002810:	2140      	movs	r1, #64	@ 0x40
 8002812:	4827      	ldr	r0, [pc, #156]	@ (80028b0 <RFM9x_Init+0xbc>)
 8002814:	f001 fefa 	bl	800460c <HAL_GPIO_WritePin>
	vTaskDelay(10);
 8002818:	200a      	movs	r0, #10
 800281a:	f006 fc1d 	bl	8009058 <vTaskDelay>
	RF_TestSpi();
 800281e:	f000 f9b7 	bl	8002b90 <RF_TestSpi>
	// Set sleep mode, so we can also set RFM9x mode:
	RFM9x_WriteReg(RFM9x_REG_01_OP_MODE, RFM9x_MODE_SLEEP | RFM9x_LONG_RANGE_MODE);
 8002822:	2180      	movs	r1, #128	@ 0x80
 8002824:	2001      	movs	r0, #1
 8002826:	f000 f977 	bl	8002b18 <RFM9x_WriteReg>

	// Wait for sleep mode to take over from say, CAD
	vTaskDelay(10);
 800282a:	200a      	movs	r0, #10
 800282c:	f006 fc14 	bl	8009058 <vTaskDelay>

	// Check we are in sleep mode, with RFM9x set
	if (RFM9x_ReadReg(RFM9x_REG_01_OP_MODE) != (RFM9x_MODE_SLEEP | RFM9x_LONG_RANGE_MODE))
 8002830:	2001      	movs	r0, #1
 8002832:	f000 f931 	bl	8002a98 <RFM9x_ReadReg>
	{
		//	TODO: Throw RFM9x init error
	}
	// Either Rx or Tx can use the entire 256 byte FIFO, but not at same time
	RFM9x_WriteReg(RFM9x_REG_0E_FIFO_TX_BASE_ADDR, 0x00);
 8002836:	2100      	movs	r1, #0
 8002838:	200e      	movs	r0, #14
 800283a:	f000 f96d 	bl	8002b18 <RFM9x_WriteReg>
	RFM9x_WriteReg(RFM9x_REG_0F_FIFO_RX_BASE_ADDR, 0x80);
 800283e:	2180      	movs	r1, #128	@ 0x80
 8002840:	200f      	movs	r0, #15
 8002842:	f000 f969 	bl	8002b18 <RFM9x_WriteReg>

	// BW = 7: 125 kHz
	// CodingRate = 1:  4/5 code rate
	// ImplicitHeaderModeOn = 1, Implicit Header mode
	RFM9x_WriteReg(RFM9x_REG_1D_MODEM_CONFIG1, 0x72);
 8002846:	2172      	movs	r1, #114	@ 0x72
 8002848:	201d      	movs	r0, #29
 800284a:	f000 f965 	bl	8002b18 <RFM9x_WriteReg>
	// SymbTimeout[9:8] = 0
	//RFM9x_WriteReg(RFM9x_REG_1E_MODEM_CONFIG2, 0x74);

	// LowDataRateOptimize = 1 : Enabled; mandated for when the symbol length exceeds 16ms
	// AgcAutoOn = 0 : LNA gain set by register LnaGain
	RFM9x_WriteReg(RFM9x_REG_26_MODEM_CONFIG3, 0x04);
 800284e:	2104      	movs	r1, #4
 8002850:	2026      	movs	r0, #38	@ 0x26
 8002852:	f000 f961 	bl	8002b18 <RFM9x_WriteReg>

	// Preamble Length = 16;
	RFM9x_WriteReg(RFM9x_REG_20_PREAMBLE_MSB, 0x00);
 8002856:	2100      	movs	r1, #0
 8002858:	2020      	movs	r0, #32
 800285a:	f000 f95d 	bl	8002b18 <RFM9x_WriteReg>
	RFM9x_WriteReg(RFM9x_REG_21_PREAMBLE_LSB, 0x10);
 800285e:	2110      	movs	r1, #16
 8002860:	2021      	movs	r0, #33	@ 0x21
 8002862:	f000 f959 	bl	8002b18 <RFM9x_WriteReg>
	//   FRF[23:0] = Freq / Fstep
	//   Fstep = Fxosc / 2^^19
	// where:
	//   Freq = 433 MHz
	//   Fxosc = 32 MHz
	uint32_t frf = (uint32_t) ( 433000000.0 / (32000000.0 / 524288.0) ) ;
 8002866:	4b13      	ldr	r3, [pc, #76]	@ (80028b4 <RFM9x_Init+0xc0>)
 8002868:	607b      	str	r3, [r7, #4]
	RFM9x_WriteReg(RFM9x_REG_06_FRF_MSB, (frf >> 16) & 0xff);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	0c1b      	lsrs	r3, r3, #16
 800286e:	b2db      	uxtb	r3, r3
 8002870:	4619      	mov	r1, r3
 8002872:	2006      	movs	r0, #6
 8002874:	f000 f950 	bl	8002b18 <RFM9x_WriteReg>
	RFM9x_WriteReg(RFM9x_REG_07_FRF_MID, (frf >> 8) & 0xff);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	0a1b      	lsrs	r3, r3, #8
 800287c:	b2db      	uxtb	r3, r3
 800287e:	4619      	mov	r1, r3
 8002880:	2007      	movs	r0, #7
 8002882:	f000 f949 	bl	8002b18 <RFM9x_WriteReg>
	RFM9x_WriteReg(RFM9x_REG_08_FRF_LSB, frf & 0xff);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	b2db      	uxtb	r3, r3
 800288a:	4619      	mov	r1, r3
 800288c:	2008      	movs	r0, #8
 800288e:	f000 f943 	bl	8002b18 <RFM9x_WriteReg>

	// PaDac = 4 : Disables the +20dBm option on PA_BOOST pin
	RFM9x_WriteReg(RFM9x_REG_4D_PA_DAC, 0x04);
 8002892:	2104      	movs	r1, #4
 8002894:	204d      	movs	r0, #77	@ 0x4d
 8002896:	f000 f93f 	bl	8002b18 <RFM9x_WriteReg>

	// PaSelect = 1 : PA_BOOST pin (instead of RFO pin).
	// MaxPower = 0 : Pmax=10.8+0.6*MaxPower [dBm]
	// Output Power = 8 : 10dBm from Pout=17-(15-OutputPower) if PaSelect = 1. RadioHead says this is 13 dBm, though
	//RFM9x_WriteReg(RFM9x_REG_09_PA_CONFIG, 0x88);
	RFM9x_WriteReg(RFM9x_REG_09_PA_CONFIG, 0xcf);
 800289a:	21cf      	movs	r1, #207	@ 0xcf
 800289c:	2009      	movs	r0, #9
 800289e:	f000 f93b 	bl	8002b18 <RFM9x_WriteReg>

	//On decide  a est par defaut en mode ECOUTE
	RFM9x_SetMode_Receive();
 80028a2:	f000 f8e9 	bl	8002a78 <RFM9x_SetMode_Receive>
}
 80028a6:	bf00      	nop
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	48000400 	.word	0x48000400
 80028b4:	006c4000 	.word	0x006c4000

080028b8 <RFM9x_Send>:


void RFM9x_Send(uint8_t* data, uint8_t len)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	460b      	mov	r3, r1
 80028c2:	70fb      	strb	r3, [r7, #3]
		if (!waitCAD()){
			return 0;  // Check channel activity
		}
	}*/
	// Position at the beginning of the FIFO
	RFM9x_WriteReg(RFM9x_REG_0D_FIFO_ADDR_PTR, 0);
 80028c4:	2100      	movs	r1, #0
 80028c6:	200d      	movs	r0, #13
 80028c8:	f000 f926 	bl	8002b18 <RFM9x_WriteReg>

	// The payload data
	for(int i=0; i < len; i++)
 80028cc:	2300      	movs	r3, #0
 80028ce:	60fb      	str	r3, [r7, #12]
 80028d0:	e00a      	b.n	80028e8 <RFM9x_Send+0x30>
	{
		RFM9x_WriteReg(RFM9x_REG_00_FIFO, data[i]);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	4413      	add	r3, r2
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	4619      	mov	r1, r3
 80028dc:	2000      	movs	r0, #0
 80028de:	f000 f91b 	bl	8002b18 <RFM9x_WriteReg>
	for(int i=0; i < len; i++)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	3301      	adds	r3, #1
 80028e6:	60fb      	str	r3, [r7, #12]
 80028e8:	78fb      	ldrb	r3, [r7, #3]
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	dbf0      	blt.n	80028d2 <RFM9x_Send+0x1a>
	}
	// The message length
	RFM9x_WriteReg(RFM9x_REG_22_PAYLOAD_LENGTH, len);
 80028f0:	78fb      	ldrb	r3, [r7, #3]
 80028f2:	4619      	mov	r1, r3
 80028f4:	2022      	movs	r0, #34	@ 0x22
 80028f6:	f000 f90f 	bl	8002b18 <RFM9x_WriteReg>

	// Start the transmitter
	RFM9x_WriteReg(RFM9x_REG_01_OP_MODE, RFM9x_MODE_TX);
 80028fa:	2103      	movs	r1, #3
 80028fc:	2001      	movs	r0, #1
 80028fe:	f000 f90b 	bl	8002b18 <RFM9x_WriteReg>
	vTaskDelay(5);
 8002902:	2005      	movs	r0, #5
 8002904:	f006 fba8 	bl	8009058 <vTaskDelay>
	// Interrupt on DIO0 for TxDone
	RFM9x_WriteReg(RFM9x_REG_40_DIO_MAPPING1, 0x40);
 8002908:	2140      	movs	r1, #64	@ 0x40
 800290a:	2040      	movs	r0, #64	@ 0x40
 800290c:	f000 f904 	bl	8002b18 <RFM9x_WriteReg>
	vTaskDelay(1);
 8002910:	2001      	movs	r0, #1
 8002912:	f006 fba1 	bl	8009058 <vTaskDelay>
	RFM9x_SetMode_Receive();
 8002916:	f000 f8af 	bl	8002a78 <RFM9x_SetMode_Receive>

}
 800291a:	bf00      	nop
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
	...

08002924 <RFM9x_Receive>:
			return 0;
		}
	}
	return 1;  // No activity detected
}*/
void RFM9x_Receive(LORA_MessageReception* LORA_Receive_Message){
 8002924:	b590      	push	{r4, r7, lr}
 8002926:	b087      	sub	sp, #28
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
	logMemoryUsage("START - RFM9x Reception");
 800292c:	4850      	ldr	r0, [pc, #320]	@ (8002a70 <RFM9x_Receive+0x14c>)
 800292e:	f000 fabf 	bl	8002eb0 <logMemoryUsage>

	// Number of bytes received
	uint8_t start = RFM9x_ReadReg(RFM9x_REG_10_FIFO_RX_CURRENT_ADDR);
 8002932:	2010      	movs	r0, #16
 8002934:	f000 f8b0 	bl	8002a98 <RFM9x_ReadReg>
 8002938:	4603      	mov	r3, r0
 800293a:	74fb      	strb	r3, [r7, #19]
	uint8_t len_RFM9x = RFM9x_ReadReg(RFM9x_REG_13_RX_NB_BYTES);
 800293c:	2013      	movs	r0, #19
 800293e:	f000 f8ab 	bl	8002a98 <RFM9x_ReadReg>
 8002942:	4603      	mov	r3, r0
 8002944:	74bb      	strb	r3, [r7, #18]

	if (len_RFM9x <= sizeof(LORA_HeaderforSend)){
 8002946:	7cbb      	ldrb	r3, [r7, #18]
 8002948:	2b04      	cmp	r3, #4
 800294a:	d809      	bhi.n	8002960 <RFM9x_Receive+0x3c>
		LORA_Receive_Message->RxNbrBytes=0;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	709a      	strb	r2, [r3, #2]
		RFM9x_WriteReg( RFM9x_REG_12_IRQ_FLAGS, 0xFF );
 8002952:	21ff      	movs	r1, #255	@ 0xff
 8002954:	2012      	movs	r0, #18
 8002956:	f000 f8df 	bl	8002b18 <RFM9x_WriteReg>
		RFM9x_SetMode_Receive();
 800295a:	f000 f88d 	bl	8002a78 <RFM9x_SetMode_Receive>
		return;
 800295e:	e083      	b.n	8002a68 <RFM9x_Receive+0x144>
	}
	// get the read data
	if (len_RFM9x > (RFM9x_FIFO_SIZE)) len_RFM9x = RFM9x_FIFO_SIZE; //Pas sure de lutilité

	RFM9x_WriteReg(RFM9x_REG_0D_FIFO_ADDR_PTR, start);
 8002960:	7cfb      	ldrb	r3, [r7, #19]
 8002962:	4619      	mov	r1, r3
 8002964:	200d      	movs	r0, #13
 8002966:	f000 f8d7 	bl	8002b18 <RFM9x_WriteReg>
	uint8_t* data = (uint8_t*)pvPortMalloc(len_RFM9x);
 800296a:	7cbb      	ldrb	r3, [r7, #18]
 800296c:	4618      	mov	r0, r3
 800296e:	f007 fe75 	bl	800a65c <pvPortMalloc>
 8002972:	60f8      	str	r0, [r7, #12]
	if (data == NULL) Error_Handler();
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d101      	bne.n	800297e <RFM9x_Receive+0x5a>
 800297a:	f001 f81f 	bl	80039bc <Error_Handler>

	for (int i = 0; i < len_RFM9x; i++)
 800297e:	2300      	movs	r3, #0
 8002980:	617b      	str	r3, [r7, #20]
 8002982:	e00a      	b.n	800299a <RFM9x_Receive+0x76>
	{
		data[i] = RFM9x_ReadReg(RFM9x_REG_00_FIFO);
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	18d4      	adds	r4, r2, r3
 800298a:	2000      	movs	r0, #0
 800298c:	f000 f884 	bl	8002a98 <RFM9x_ReadReg>
 8002990:	4603      	mov	r3, r0
 8002992:	7023      	strb	r3, [r4, #0]
	for (int i = 0; i < len_RFM9x; i++)
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	3301      	adds	r3, #1
 8002998:	617b      	str	r3, [r7, #20]
 800299a:	7cbb      	ldrb	r3, [r7, #18]
 800299c:	697a      	ldr	r2, [r7, #20]
 800299e:	429a      	cmp	r2, r3
 80029a0:	dbf0      	blt.n	8002984 <RFM9x_Receive+0x60>
	}
	LORA_Receive_Message->IRQFlags=RFM9x_ReadReg(RFM9x_REG_12_IRQ_FLAGS);
 80029a2:	2012      	movs	r0, #18
 80029a4:	f000 f878 	bl	8002a98 <RFM9x_ReadReg>
 80029a8:	4603      	mov	r3, r0
 80029aa:	461a      	mov	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	701a      	strb	r2, [r3, #0]
	LORA_Receive_Message->RxCurrAddr=start;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	7cfa      	ldrb	r2, [r7, #19]
 80029b4:	705a      	strb	r2, [r3, #1]
	LORA_Receive_Message->RxNbrBytes=len_RFM9x;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	7cba      	ldrb	r2, [r7, #18]
 80029ba:	709a      	strb	r2, [r3, #2]
	LORA_Receive_Message->SNR=RFM9x_ReadReg(RFM9x_REG_19_PKT_SNR_VALUE);
 80029bc:	2019      	movs	r0, #25
 80029be:	f000 f86b 	bl	8002a98 <RFM9x_ReadReg>
 80029c2:	4603      	mov	r3, r0
 80029c4:	461a      	mov	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	70da      	strb	r2, [r3, #3]
	LORA_Receive_Message->RSSI = RFM9x_ReadReg(RFM9x_REG_1A_PKT_RSSI_VALUE);
 80029ca:	201a      	movs	r0, #26
 80029cc:	f000 f864 	bl	8002a98 <RFM9x_ReadReg>
 80029d0:	4603      	mov	r3, r0
 80029d2:	461a      	mov	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	711a      	strb	r2, [r3, #4]

	////On copie  la valeur de data[i] a l'adresse recipient,sender...
	LORA_Receive_Message->header->recipient=data[0];
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	68fa      	ldr	r2, [r7, #12]
 80029de:	7812      	ldrb	r2, [r2, #0]
 80029e0:	701a      	strb	r2, [r3, #0]
	LORA_Receive_Message->header->sender=data[1];
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	7852      	ldrb	r2, [r2, #1]
 80029ea:	705a      	strb	r2, [r3, #1]
	LORA_Receive_Message->header->type=data[2];
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	7892      	ldrb	r2, [r2, #2]
 80029f4:	709a      	strb	r2, [r3, #2]
	LORA_Receive_Message->header->identifier=data[3];
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	78d2      	ldrb	r2, [r2, #3]
 80029fe:	70da      	strb	r2, [r3, #3]
	LORA_Receive_Message->header->nbOf_packet=data[4];
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	7912      	ldrb	r2, [r2, #4]
 8002a08:	711a      	strb	r2, [r3, #4]
	LORA_Receive_Message->header->num_packet=data[5];
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	7952      	ldrb	r2, [r2, #5]
 8002a12:	715a      	strb	r2, [r3, #5]
	LORA_Receive_Message->header->len_payload=data[6];
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	7992      	ldrb	r2, [r2, #6]
 8002a1c:	719a      	strb	r2, [r3, #6]
	//---------//
	LORA_Receive_Message->payload = (uint8_t*)pvPortMalloc(len_RFM9x - sizeof(LORA_HeaderforBaseliq));
 8002a1e:	7cbb      	ldrb	r3, [r7, #18]
 8002a20:	3b07      	subs	r3, #7
 8002a22:	4618      	mov	r0, r3
 8002a24:	f007 fe1a 	bl	800a65c <pvPortMalloc>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	60da      	str	r2, [r3, #12]
	if (LORA_Receive_Message->payload == NULL) Error_Handler();
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <RFM9x_Receive+0x116>
 8002a36:	f000 ffc1 	bl	80039bc <Error_Handler>

	memcpy(LORA_Receive_Message->payload, data + sizeof(LORA_HeaderforBaseliq), len_RFM9x - sizeof(LORA_HeaderforBaseliq));
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	68d8      	ldr	r0, [r3, #12]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	1dd9      	adds	r1, r3, #7
 8002a42:	7cbb      	ldrb	r3, [r7, #18]
 8002a44:	3b07      	subs	r3, #7
 8002a46:	461a      	mov	r2, r3
 8002a48:	f008 ff9d 	bl	800b986 <memcpy>
	updateMemoryUsage();
 8002a4c:	f000 fa26 	bl	8002e9c <updateMemoryUsage>
	vPortFree(data);
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f007 fed1 	bl	800a7f8 <vPortFree>
	// clear all the IRQ flags
	RFM9x_WriteReg(RFM9x_REG_12_IRQ_FLAGS, 0xFF);
 8002a56:	21ff      	movs	r1, #255	@ 0xff
 8002a58:	2012      	movs	r0, #18
 8002a5a:	f000 f85d 	bl	8002b18 <RFM9x_WriteReg>
	RFM9x_SetMode_Receive();
 8002a5e:	f000 f80b 	bl	8002a78 <RFM9x_SetMode_Receive>
	logMemoryUsage("END - RFM9x Reception");
 8002a62:	4804      	ldr	r0, [pc, #16]	@ (8002a74 <RFM9x_Receive+0x150>)
 8002a64:	f000 fa24 	bl	8002eb0 <logMemoryUsage>

}
 8002a68:	371c      	adds	r7, #28
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd90      	pop	{r4, r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	0800e07c 	.word	0x0800e07c
 8002a74:	0800e094 	.word	0x0800e094

08002a78 <RFM9x_SetMode_Receive>:
void RFM9x_SetMode_Receive(void){
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
	// Set sleep mode, so we can also set RFM9x mode:
	RFM9x_WriteReg(RFM9x_REG_01_OP_MODE, RFM9x_MODE_SLEEP | RFM9x_LONG_RANGE_MODE);
 8002a7c:	2180      	movs	r1, #128	@ 0x80
 8002a7e:	2001      	movs	r0, #1
 8002a80:	f000 f84a 	bl	8002b18 <RFM9x_WriteReg>
	// Configurer le mode réception continue
	RFM9x_WriteReg(RFM9x_REG_01_OP_MODE, RFM9x_MODE_RXCONTINUOUS);
 8002a84:	2105      	movs	r1, #5
 8002a86:	2001      	movs	r0, #1
 8002a88:	f000 f846 	bl	8002b18 <RFM9x_WriteReg>
	// Configurer l'interruption sur DIO0 pour RxDone
	RFM9x_WriteReg(RFM9x_REG_40_DIO_MAPPING1, 0x00); // Interrupt on RxDone
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	2040      	movs	r0, #64	@ 0x40
 8002a90:	f000 f842 	bl	8002b18 <RFM9x_WriteReg>
}
 8002a94:	bf00      	nop
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <RFM9x_ReadReg>:
	// set to clear all the IRQ bits
	RFM9x_WriteReg( RFM9x_REG_12_IRQ_FLAGS, 0xFF );
}

uint8_t RFM9x_ReadReg( uint8_t reg )
{
 8002a98:	b590      	push	{r4, r7, lr}
 8002a9a:	b089      	sub	sp, #36	@ 0x24
 8002a9c:	af02      	add	r7, sp, #8
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status;

	// clear reg msb for read
	reg &= 0x7f;
 8002aa2:	79fb      	ldrb	r3, [r7, #7]
 8002aa4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002aa8:	71fb      	strb	r3, [r7, #7]

	// buffers to transmit/receive
	uint8_t txData[] = {reg, 0x00};
 8002aaa:	79fb      	ldrb	r3, [r7, #7]
 8002aac:	743b      	strb	r3, [r7, #16]
 8002aae:	2300      	movs	r3, #0
 8002ab0:	747b      	strb	r3, [r7, #17]
	uint8_t rxData[] = {0x00, 0x00};
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	81bb      	strh	r3, [r7, #12]
	const uint16_t	size = sizeof(txData);
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	82bb      	strh	r3, [r7, #20]

	// default data value if error
	uint8_t data = 0x00;
 8002aba:	2300      	movs	r3, #0
 8002abc:	75fb      	strb	r3, [r7, #23]

	// Set nCS low (active)
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8002abe:	2200      	movs	r2, #0
 8002ac0:	2140      	movs	r1, #64	@ 0x40
 8002ac2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ac6:	f001 fda1 	bl	800460c <HAL_GPIO_WritePin>

	// write 8 bit reg and read 8 bit data
	status = HAL_SPI_TransmitReceive(hLORACom.hspi, txData, rxData, size, HAL_MAX_DELAY);
 8002aca:	4b11      	ldr	r3, [pc, #68]	@ (8002b10 <RFM9x_ReadReg+0x78>)
 8002acc:	6818      	ldr	r0, [r3, #0]
 8002ace:	8abb      	ldrh	r3, [r7, #20]
 8002ad0:	f107 020c 	add.w	r2, r7, #12
 8002ad4:	f107 0110 	add.w	r1, r7, #16
 8002ad8:	f04f 34ff 	mov.w	r4, #4294967295
 8002adc:	9400      	str	r4, [sp, #0]
 8002ade:	f003 fb55 	bl	800618c <HAL_SPI_TransmitReceive>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	74fb      	strb	r3, [r7, #19]

	if (status == HAL_OK)
 8002ae6:	7cfb      	ldrb	r3, [r7, #19]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d102      	bne.n	8002af2 <RFM9x_ReadReg+0x5a>
	{
		//second byte is the register value
		data = rxData[1];
 8002aec:	7b7b      	ldrb	r3, [r7, #13]
 8002aee:	75fb      	strb	r3, [r7, #23]
 8002af0:	e003      	b.n	8002afa <RFM9x_ReadReg+0x62>
	}
	else
	{
		print1("*HAL_ERROR*", 99);
 8002af2:	2163      	movs	r1, #99	@ 0x63
 8002af4:	4807      	ldr	r0, [pc, #28]	@ (8002b14 <RFM9x_ReadReg+0x7c>)
 8002af6:	f000 f883 	bl	8002c00 <print1>

	}

	// Set nCS high (inactive)
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8002afa:	2201      	movs	r2, #1
 8002afc:	2140      	movs	r1, #64	@ 0x40
 8002afe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b02:	f001 fd83 	bl	800460c <HAL_GPIO_WritePin>

	return data;
 8002b06:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	371c      	adds	r7, #28
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd90      	pop	{r4, r7, pc}
 8002b10:	200002d4 	.word	0x200002d4
 8002b14:	0800e0ac 	.word	0x0800e0ac

08002b18 <RFM9x_WriteReg>:

void RFM9x_WriteReg( uint8_t reg, uint8_t data )
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	4603      	mov	r3, r0
 8002b20:	460a      	mov	r2, r1
 8002b22:	71fb      	strb	r3, [r7, #7]
 8002b24:	4613      	mov	r3, r2
 8002b26:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef status;

	//print2("RFM9x WR", reg, data );

	//set the reg msb for write
	reg |= 0x80;
 8002b28:	79fb      	ldrb	r3, [r7, #7]
 8002b2a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002b2e:	71fb      	strb	r3, [r7, #7]

	// Transmit buffer
	uint8_t txData[2] = {reg, data};
 8002b30:	79fb      	ldrb	r3, [r7, #7]
 8002b32:	723b      	strb	r3, [r7, #8]
 8002b34:	79bb      	ldrb	r3, [r7, #6]
 8002b36:	727b      	strb	r3, [r7, #9]
	const uint16_t size = sizeof(txData);
 8002b38:	2302      	movs	r3, #2
 8002b3a:	81fb      	strh	r3, [r7, #14]


	// Set nCS low (active)
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	2140      	movs	r1, #64	@ 0x40
 8002b40:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b44:	f001 fd62 	bl	800460c <HAL_GPIO_WritePin>

	// write 8 bit reg and read 8 bit data
	status = HAL_SPI_Transmit(hLORACom.hspi, txData, size, HAL_MAX_DELAY);
 8002b48:	4b0f      	ldr	r3, [pc, #60]	@ (8002b88 <RFM9x_WriteReg+0x70>)
 8002b4a:	6818      	ldr	r0, [r3, #0]
 8002b4c:	89fa      	ldrh	r2, [r7, #14]
 8002b4e:	f107 0108 	add.w	r1, r7, #8
 8002b52:	f04f 33ff 	mov.w	r3, #4294967295
 8002b56:	f003 f9a4 	bl	8005ea2 <HAL_SPI_Transmit>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	737b      	strb	r3, [r7, #13]

	if (status != HAL_OK)
 8002b5e:	7b7b      	ldrb	r3, [r7, #13]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d007      	beq.n	8002b74 <RFM9x_WriteReg+0x5c>
	{
		HAL_UART_Transmit(hLORACom.huartDebug, (uint8_t *) &"*HAL_ERROR*\r\n", 13, HAL_MAX_DELAY);
 8002b64:	4b08      	ldr	r3, [pc, #32]	@ (8002b88 <RFM9x_WriteReg+0x70>)
 8002b66:	6858      	ldr	r0, [r3, #4]
 8002b68:	f04f 33ff 	mov.w	r3, #4294967295
 8002b6c:	220d      	movs	r2, #13
 8002b6e:	4907      	ldr	r1, [pc, #28]	@ (8002b8c <RFM9x_WriteReg+0x74>)
 8002b70:	f004 f994 	bl	8006e9c <HAL_UART_Transmit>
	}

	//HACK: Wait for SPI transfer to complete
	//HAL_Delay(1);
	// Set nCS high (inactive)
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8002b74:	2201      	movs	r2, #1
 8002b76:	2140      	movs	r1, #64	@ 0x40
 8002b78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b7c:	f001 fd46 	bl	800460c <HAL_GPIO_WritePin>
}
 8002b80:	bf00      	nop
 8002b82:	3710      	adds	r7, #16
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	200002d4 	.word	0x200002d4
 8002b8c:	0800e0b8 	.word	0x0800e0b8

08002b90 <RF_TestSpi>:

	return;
}
// Debug Routines
void RF_TestSpi( void )
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t v;
	print("\r\n----TEST----");
 8002b96:	4816      	ldr	r0, [pc, #88]	@ (8002bf0 <RF_TestSpi+0x60>)
 8002b98:	f000 f858 	bl	8002c4c <print>
	for(i=0; i<8; i++)
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	71fb      	strb	r3, [r7, #7]
 8002ba0:	e01b      	b.n	8002bda <RF_TestSpi+0x4a>
	{
		v = (1 << i);
 8002ba2:	79fb      	ldrb	r3, [r7, #7]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8002baa:	71bb      	strb	r3, [r7, #6]
		print1("Write", v);
 8002bac:	79bb      	ldrb	r3, [r7, #6]
 8002bae:	4619      	mov	r1, r3
 8002bb0:	4810      	ldr	r0, [pc, #64]	@ (8002bf4 <RF_TestSpi+0x64>)
 8002bb2:	f000 f825 	bl	8002c00 <print1>
		RFM9x_WriteReg(RFM9x_REG_40_DIO_MAPPING1, v);
 8002bb6:	79bb      	ldrb	r3, [r7, #6]
 8002bb8:	4619      	mov	r1, r3
 8002bba:	2040      	movs	r0, #64	@ 0x40
 8002bbc:	f7ff ffac 	bl	8002b18 <RFM9x_WriteReg>
		//Delay_ms(1);
		v =RFM9x_ReadReg(RFM9x_REG_40_DIO_MAPPING1);
 8002bc0:	2040      	movs	r0, #64	@ 0x40
 8002bc2:	f7ff ff69 	bl	8002a98 <RFM9x_ReadReg>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	71bb      	strb	r3, [r7, #6]
		print1("Read ", v);
 8002bca:	79bb      	ldrb	r3, [r7, #6]
 8002bcc:	4619      	mov	r1, r3
 8002bce:	480a      	ldr	r0, [pc, #40]	@ (8002bf8 <RF_TestSpi+0x68>)
 8002bd0:	f000 f816 	bl	8002c00 <print1>
	for(i=0; i<8; i++)
 8002bd4:	79fb      	ldrb	r3, [r7, #7]
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	71fb      	strb	r3, [r7, #7]
 8002bda:	79fb      	ldrb	r3, [r7, #7]
 8002bdc:	2b07      	cmp	r3, #7
 8002bde:	d9e0      	bls.n	8002ba2 <RF_TestSpi+0x12>
		//Delay_ms(1);
	}
	print("------------");
 8002be0:	4806      	ldr	r0, [pc, #24]	@ (8002bfc <RF_TestSpi+0x6c>)
 8002be2:	f000 f833 	bl	8002c4c <print>
	return;
 8002be6:	bf00      	nop
}
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	0800e0c8 	.word	0x0800e0c8
 8002bf4:	0800e0d8 	.word	0x0800e0d8
 8002bf8:	0800e0e0 	.word	0x0800e0e0
 8002bfc:	0800e0e8 	.word	0x0800e0e8

08002c00 <print1>:
void print1(const char *text, uint8_t x)
{	char msg[50];
 8002c00:	b590      	push	{r4, r7, lr}
 8002c02:	b091      	sub	sp, #68	@ 0x44
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	460b      	mov	r3, r1
 8002c0a:	70fb      	strb	r3, [r7, #3]
sprintf(msg, "%s 0x%02X\r\n", text, (int) x );
 8002c0c:	78fb      	ldrb	r3, [r7, #3]
 8002c0e:	f107 000c 	add.w	r0, r7, #12
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	490b      	ldr	r1, [pc, #44]	@ (8002c44 <print1+0x44>)
 8002c16:	f008 fd29 	bl	800b66c <siprintf>
HAL_UART_Transmit(hLORACom.huartDebug, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);
 8002c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8002c48 <print1+0x48>)
 8002c1c:	685c      	ldr	r4, [r3, #4]
 8002c1e:	f107 030c 	add.w	r3, r7, #12
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7fd fb24 	bl	8000270 <strlen>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	f107 010c 	add.w	r1, r7, #12
 8002c30:	f04f 33ff 	mov.w	r3, #4294967295
 8002c34:	4620      	mov	r0, r4
 8002c36:	f004 f931 	bl	8006e9c <HAL_UART_Transmit>
}
 8002c3a:	bf00      	nop
 8002c3c:	3744      	adds	r7, #68	@ 0x44
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd90      	pop	{r4, r7, pc}
 8002c42:	bf00      	nop
 8002c44:	0800e0f8 	.word	0x0800e0f8
 8002c48:	200002d4 	.word	0x200002d4

08002c4c <print>:
void print(const char *text)
{char msg[50];
 8002c4c:	b590      	push	{r4, r7, lr}
 8002c4e:	b091      	sub	sp, #68	@ 0x44
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
sprintf(msg, "%s\r\n", text );
 8002c54:	f107 030c 	add.w	r3, r7, #12
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	490c      	ldr	r1, [pc, #48]	@ (8002c8c <print+0x40>)
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f008 fd05 	bl	800b66c <siprintf>
HAL_UART_Transmit(hLORACom.huartDebug, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);
 8002c62:	4b0b      	ldr	r3, [pc, #44]	@ (8002c90 <print+0x44>)
 8002c64:	685c      	ldr	r4, [r3, #4]
 8002c66:	f107 030c 	add.w	r3, r7, #12
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7fd fb00 	bl	8000270 <strlen>
 8002c70:	4603      	mov	r3, r0
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	f107 010c 	add.w	r1, r7, #12
 8002c78:	f04f 33ff 	mov.w	r3, #4294967295
 8002c7c:	4620      	mov	r0, r4
 8002c7e:	f004 f90d 	bl	8006e9c <HAL_UART_Transmit>
}
 8002c82:	bf00      	nop
 8002c84:	3744      	adds	r7, #68	@ 0x44
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd90      	pop	{r4, r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	0800e104 	.word	0x0800e104
 8002c90:	200002d4 	.word	0x200002d4

08002c94 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002c9c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002ca0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8002ca4:	f003 0301 	and.w	r3, r3, #1
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d013      	beq.n	8002cd4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002cac:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002cb0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8002cb4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00b      	beq.n	8002cd4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002cbc:	e000      	b.n	8002cc0 <ITM_SendChar+0x2c>
    {
      __NOP();
 8002cbe:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002cc0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d0f9      	beq.n	8002cbe <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002cca:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	b2d2      	uxtb	r2, r2
 8002cd2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002cd4:	687b      	ldr	r3, [r7, #4]
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
	...

08002ce4 <debug>:
#include "shared.h"
HeapStats_t heapStats;
extern ModuleConfig_t ModuleConfig;
#define MAX_SIZE_BUFFER_DEBUG 5012
/************************ TASK ************************/
void debug(void){
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	f5ad 5d9d 	sub.w	sp, sp, #5024	@ 0x13a0
 8002cea:	b082      	sub	sp, #8
 8002cec:	af02      	add	r7, sp, #8
	ITM_Port32(31)=2222;
 8002cee:	4b28      	ldr	r3, [pc, #160]	@ (8002d90 <debug+0xac>)
 8002cf0:	f640 02ae 	movw	r2, #2222	@ 0x8ae
 8002cf4:	601a      	str	r2, [r3, #0]
	UARTdebugQ_t UARTdebug;
	char buffer[MAX_SIZE_BUFFER_DEBUG];

	xQueueReceive(UARTdebugHandle, &UARTdebug, osWaitForever);
 8002cf6:	4b27      	ldr	r3, [pc, #156]	@ (8002d94 <debug+0xb0>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f507 519c 	add.w	r1, r7, #4992	@ 0x1380
 8002cfe:	f101 0118 	add.w	r1, r1, #24
 8002d02:	f04f 32ff 	mov.w	r2, #4294967295
 8002d06:	4618      	mov	r0, r3
 8002d08:	f005 fb9e 	bl	8008448 <xQueueReceive>
	snprintf(buffer, sizeof(buffer),
 8002d0c:	f507 539c 	add.w	r3, r7, #4992	@ 0x1380
 8002d10:	f103 031c 	add.w	r3, r3, #28
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	f507 539c 	add.w	r3, r7, #4992	@ 0x1380
 8002d1a:	f103 0318 	add.w	r3, r3, #24
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f107 0020 	add.w	r0, r7, #32
 8002d24:	381c      	subs	r0, #28
 8002d26:	491c      	ldr	r1, [pc, #112]	@ (8002d98 <debug+0xb4>)
 8002d28:	9101      	str	r1, [sp, #4]
 8002d2a:	9300      	str	r3, [sp, #0]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	4a1b      	ldr	r2, [pc, #108]	@ (8002d9c <debug+0xb8>)
 8002d30:	f241 3194 	movw	r1, #5012	@ 0x1394
 8002d34:	f008 fc66 	bl	800b604 <sniprintf>
			"%s%s%s",
			UARTdebug.color, UARTdebug.message, ANSI_COLOR_RESET);
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer),HAL_MAX_DELAY); //Le IT ne met pas les messages dans le bon ordre
 8002d38:	f107 0320 	add.w	r3, r7, #32
 8002d3c:	3b1c      	subs	r3, #28
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7fd fa96 	bl	8000270 <strlen>
 8002d44:	4603      	mov	r3, r0
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	f107 0120 	add.w	r1, r7, #32
 8002d4c:	391c      	subs	r1, #28
 8002d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d52:	4813      	ldr	r0, [pc, #76]	@ (8002da0 <debug+0xbc>)
 8002d54:	f004 f8a2 	bl	8006e9c <HAL_UART_Transmit>
	vPortFree(UARTdebug.message);
 8002d58:	f507 539c 	add.w	r3, r7, #4992	@ 0x1380
 8002d5c:	f103 0318 	add.w	r3, r3, #24
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f007 fd48 	bl	800a7f8 <vPortFree>
	vPortFree(UARTdebug.color);
 8002d68:	f507 539c 	add.w	r3, r7, #4992	@ 0x1380
 8002d6c:	f103 031c 	add.w	r3, r3, #28
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f007 fd40 	bl	800a7f8 <vPortFree>
	updateMemoryUsage();
 8002d78:	f000 f890 	bl	8002e9c <updateMemoryUsage>
	ITM_Port32(31)=8888;
 8002d7c:	4b04      	ldr	r3, [pc, #16]	@ (8002d90 <debug+0xac>)
 8002d7e:	f242 22b8 	movw	r2, #8888	@ 0x22b8
 8002d82:	601a      	str	r2, [r3, #0]

}
 8002d84:	bf00      	nop
 8002d86:	f507 579d 	add.w	r7, r7, #5024	@ 0x13a0
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	e000007c 	.word	0xe000007c
 8002d94:	20000310 	.word	0x20000310
 8002d98:	0800e114 	.word	0x0800e114
 8002d9c:	0800e10c 	.word	0x0800e10c
 8002da0:	2000067c 	.word	0x2000067c

08002da4 <UART_Transmit_With_Color>:
/************************ ---- ************************/
/************************ FUNCTIONS ************************/
void UART_Transmit_With_Color(char *data, char *color) {
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
	UARTdebugQ_t UARTdebug;
    size_t dataSize = strlen(data);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f7fd fa5e 	bl	8000270 <strlen>
 8002db4:	6178      	str	r0, [r7, #20]
    if (ModuleConfig.doDebugging){
 8002db6:	4b1b      	ldr	r3, [pc, #108]	@ (8002e24 <UART_Transmit_With_Color+0x80>)
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d02d      	beq.n	8002e1a <UART_Transmit_With_Color+0x76>
	// Allouer de la mémoire pour le message et la couleur
	UARTdebug.message = pvPortMalloc(dataSize + 1);
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f007 fc4a 	bl	800a65c <pvPortMalloc>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	60fb      	str	r3, [r7, #12]
	UARTdebug.color = pvPortMalloc(strlen(color) + 1);
 8002dcc:	6838      	ldr	r0, [r7, #0]
 8002dce:	f7fd fa4f 	bl	8000270 <strlen>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f007 fc40 	bl	800a65c <pvPortMalloc>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	613b      	str	r3, [r7, #16]

	if (UARTdebug.message == NULL || UARTdebug.color == NULL) Error_Handler();
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d002      	beq.n	8002dec <UART_Transmit_With_Color+0x48>
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d101      	bne.n	8002df0 <UART_Transmit_With_Color+0x4c>
 8002dec:	f000 fde6 	bl	80039bc <Error_Handler>

	// Copier les données
	strcpy(UARTdebug.message, data);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6879      	ldr	r1, [r7, #4]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f008 fdbe 	bl	800b976 <strcpy>
	strcpy(UARTdebug.color, color);
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	6839      	ldr	r1, [r7, #0]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f008 fdb9 	bl	800b976 <strcpy>
	updateMemoryUsage();
 8002e04:	f000 f84a 	bl	8002e9c <updateMemoryUsage>
	xQueueSendToBack(UARTdebugHandle, &UARTdebug, osWaitForever);
 8002e08:	4b07      	ldr	r3, [pc, #28]	@ (8002e28 <UART_Transmit_With_Color+0x84>)
 8002e0a:	6818      	ldr	r0, [r3, #0]
 8002e0c:	f107 010c 	add.w	r1, r7, #12
 8002e10:	2300      	movs	r3, #0
 8002e12:	f04f 32ff 	mov.w	r2, #4294967295
 8002e16:	f005 f985 	bl	8008124 <xQueueGenericSend>
    }
}
 8002e1a:	bf00      	nop
 8002e1c:	3718      	adds	r7, #24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	200002f8 	.word	0x200002f8
 8002e28:	20000310 	.word	0x20000310

08002e2c <uint8_array_to_hex_string>:
void uint8_array_to_hex_string(char* hexString, uint8_t* array, size_t len) {
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
	for (size_t i = 0; i < len; i++) {	// Parcourir le tableau et convertir chaque octet en hexadécimal
 8002e38:	2300      	movs	r3, #0
 8002e3a:	617b      	str	r3, [r7, #20]
 8002e3c:	e00e      	b.n	8002e5c <uint8_array_to_hex_string+0x30>
		snprintf(hexString + (i * 2), 3, "%02X", array[i]);
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	18d0      	adds	r0, r2, r3
 8002e46:	68ba      	ldr	r2, [r7, #8]
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	4a0b      	ldr	r2, [pc, #44]	@ (8002e7c <uint8_array_to_hex_string+0x50>)
 8002e50:	2103      	movs	r1, #3
 8002e52:	f008 fbd7 	bl	800b604 <sniprintf>
	for (size_t i = 0; i < len; i++) {	// Parcourir le tableau et convertir chaque octet en hexadécimal
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	3301      	adds	r3, #1
 8002e5a:	617b      	str	r3, [r7, #20]
 8002e5c:	697a      	ldr	r2, [r7, #20]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d3ec      	bcc.n	8002e3e <uint8_array_to_hex_string+0x12>
	}
	hexString[len * 2+1] = '\0';	// Ajouter le caractère de fin de chaîne
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	3301      	adds	r3, #1
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	2200      	movs	r2, #0
 8002e70:	701a      	strb	r2, [r3, #0]
}
 8002e72:	bf00      	nop
 8002e74:	3718      	adds	r7, #24
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	0800e11c 	.word	0x0800e11c

08002e80 <__io_putchar>:

int __io_putchar(int ch) {
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7ff ff02 	bl	8002c94 <ITM_SendChar>
	return ch;
 8002e90:	687b      	ldr	r3, [r7, #4]
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
	...

08002e9c <updateMemoryUsage>:
void updateMemoryUsage(void) {
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0
	vPortGetHeapStats(&heapStats);
 8002ea0:	4802      	ldr	r0, [pc, #8]	@ (8002eac <updateMemoryUsage+0x10>)
 8002ea2:	f007 fdc9 	bl	800aa38 <vPortGetHeapStats>
}
 8002ea6:	bf00      	nop
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	200002dc 	.word	0x200002dc

08002eb0 <logMemoryUsage>:
void logMemoryUsage(char*phase) {
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
	// Obtenir les statistiques de la mémoire
	updateMemoryUsage();
 8002eb8:	f7ff fff0 	bl	8002e9c <updateMemoryUsage>
	 TickType_t systemTime = xTaskGetTickCount() * portTICK_PERIOD_MS;
 8002ebc:	f006 fa1a 	bl	80092f4 <xTaskGetTickCount>
 8002ec0:	60f8      	str	r0, [r7, #12]
	// Imprimer les statistiques de mémoire
	printf("\n-----%s-----\tTIME: %lu\n", phase,systemTime);
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	6879      	ldr	r1, [r7, #4]
 8002ec6:	4818      	ldr	r0, [pc, #96]	@ (8002f28 <logMemoryUsage+0x78>)
 8002ec8:	f008 fb8a 	bl	800b5e0 <iprintf>
	printf("Available Heap Space: %u bytes\n", (unsigned int)heapStats.xAvailableHeapSpaceInBytes);
 8002ecc:	4b17      	ldr	r3, [pc, #92]	@ (8002f2c <logMemoryUsage+0x7c>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	4817      	ldr	r0, [pc, #92]	@ (8002f30 <logMemoryUsage+0x80>)
 8002ed4:	f008 fb84 	bl	800b5e0 <iprintf>
	printf("Largest Free Block: %u bytes\n", (unsigned int)heapStats.xSizeOfLargestFreeBlockInBytes);
 8002ed8:	4b14      	ldr	r3, [pc, #80]	@ (8002f2c <logMemoryUsage+0x7c>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	4619      	mov	r1, r3
 8002ede:	4815      	ldr	r0, [pc, #84]	@ (8002f34 <logMemoryUsage+0x84>)
 8002ee0:	f008 fb7e 	bl	800b5e0 <iprintf>
	printf("Smallest Free Block: %u bytes\n", (unsigned int)heapStats.xSizeOfSmallestFreeBlockInBytes);
 8002ee4:	4b11      	ldr	r3, [pc, #68]	@ (8002f2c <logMemoryUsage+0x7c>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4813      	ldr	r0, [pc, #76]	@ (8002f38 <logMemoryUsage+0x88>)
 8002eec:	f008 fb78 	bl	800b5e0 <iprintf>
	printf("Number of Free Blocks: %u\n", (unsigned int)heapStats.xNumberOfFreeBlocks);
 8002ef0:	4b0e      	ldr	r3, [pc, #56]	@ (8002f2c <logMemoryUsage+0x7c>)
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	4811      	ldr	r0, [pc, #68]	@ (8002f3c <logMemoryUsage+0x8c>)
 8002ef8:	f008 fb72 	bl	800b5e0 <iprintf>
	printf("Minimum Ever Free Bytes Remaining: %u bytes\n", (unsigned int)heapStats.xMinimumEverFreeBytesRemaining);
 8002efc:	4b0b      	ldr	r3, [pc, #44]	@ (8002f2c <logMemoryUsage+0x7c>)
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	4619      	mov	r1, r3
 8002f02:	480f      	ldr	r0, [pc, #60]	@ (8002f40 <logMemoryUsage+0x90>)
 8002f04:	f008 fb6c 	bl	800b5e0 <iprintf>
	printf("Number of Successful Allocations: %u\n", (unsigned int)heapStats.xNumberOfSuccessfulAllocations);
 8002f08:	4b08      	ldr	r3, [pc, #32]	@ (8002f2c <logMemoryUsage+0x7c>)
 8002f0a:	695b      	ldr	r3, [r3, #20]
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	480d      	ldr	r0, [pc, #52]	@ (8002f44 <logMemoryUsage+0x94>)
 8002f10:	f008 fb66 	bl	800b5e0 <iprintf>
	printf("Number of Successful Frees: %u\n\n", (unsigned int)heapStats.xNumberOfSuccessfulFrees);
 8002f14:	4b05      	ldr	r3, [pc, #20]	@ (8002f2c <logMemoryUsage+0x7c>)
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	4619      	mov	r1, r3
 8002f1a:	480b      	ldr	r0, [pc, #44]	@ (8002f48 <logMemoryUsage+0x98>)
 8002f1c:	f008 fb60 	bl	800b5e0 <iprintf>
}
 8002f20:	bf00      	nop
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	0800e124 	.word	0x0800e124
 8002f2c:	200002dc 	.word	0x200002dc
 8002f30:	0800e140 	.word	0x0800e140
 8002f34:	0800e160 	.word	0x0800e160
 8002f38:	0800e180 	.word	0x0800e180
 8002f3c:	0800e1a0 	.word	0x0800e1a0
 8002f40:	0800e1bc 	.word	0x0800e1bc
 8002f44:	0800e1ec 	.word	0x0800e1ec
 8002f48:	0800e214 	.word	0x0800e214

08002f4c <receivedLora>:
 */

#include <RTOS_subfunctions/receiverLoRA.h>
extern ModuleConfig_t ModuleConfig;
/************************ TASK ************************/
void receivedLora(void){
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
	logMemoryUsage("START - LoRA Reception");
 8002f52:	482b      	ldr	r0, [pc, #172]	@ (8003000 <receivedLora+0xb4>)
 8002f54:	f7ff ffac 	bl	8002eb0 <logMemoryUsage>

	LORA_MessageReception* LORA_Receive_Message = (LORA_MessageReception*)pvPortMalloc(sizeof(LORA_MessageReception)); // On pointe vers une partie de la memoire HEAP protégée
 8002f58:	2010      	movs	r0, #16
 8002f5a:	f007 fb7f 	bl	800a65c <pvPortMalloc>
 8002f5e:	6078      	str	r0, [r7, #4]
	if (LORA_Receive_Message == NULL) Error_Handler();
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <receivedLora+0x1e>
 8002f66:	f000 fd29 	bl	80039bc <Error_Handler>
	LORA_Receive_Message->header = (LORA_HeaderforBaseliq*)pvPortMalloc(sizeof(LORA_HeaderforBaseliq));
 8002f6a:	2007      	movs	r0, #7
 8002f6c:	f007 fb76 	bl	800a65c <pvPortMalloc>
 8002f70:	4602      	mov	r2, r0
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	609a      	str	r2, [r3, #8]
	if (LORA_Receive_Message->header == NULL) Error_Handler();
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d101      	bne.n	8002f82 <receivedLora+0x36>
 8002f7e:	f000 fd1d 	bl	80039bc <Error_Handler>
	updateMemoryUsage();
 8002f82:	f7ff ff8b 	bl	8002e9c <updateMemoryUsage>

	RFM9x_Receive(LORA_Receive_Message); //PvPortMalloc LORA_Receive_Message->payload
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f7ff fccc 	bl	8002924 <RFM9x_Receive>

	if (!LORA_Receive_Message->RxNbrBytes){
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	789b      	ldrb	r3, [r3, #2]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d10a      	bne.n	8002faa <receivedLora+0x5e>
		// IF THE NOISE IS TRIGERRED
		vPortFree(LORA_Receive_Message->header);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f007 fc2d 	bl	800a7f8 <vPortFree>
		vPortFree(LORA_Receive_Message);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f007 fc2a 	bl	800a7f8 <vPortFree>
		updateMemoryUsage();
 8002fa4:	f7ff ff7a 	bl	8002e9c <updateMemoryUsage>
		return;
 8002fa8:	e027      	b.n	8002ffa <receivedLora+0xae>
	}

	else if (LORA_Receive_Message->header->recipient == MODULE_BROADCAST_ADDRESS
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	2bff      	cmp	r3, #255	@ 0xff
 8002fb2:	d004      	beq.n	8002fbe <receivedLora+0x72>
			||LORA_Receive_Message->header->recipient == MODULE_SOURCE_ADDRESS){
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	2bfe      	cmp	r3, #254	@ 0xfe
 8002fbc:	d107      	bne.n	8002fce <receivedLora+0x82>
		// IF THE IS ADDRESS TO THIS MODULE
		// ADRESS CAN BE MANAGED FROM THE inc/LoRA/LoraCom.h file
		UART_Transmit_With_Color("\n\r--- ADRESSED MESSAGE ---",ANSI_COLOR_GREEN);
 8002fbe:	4911      	ldr	r1, [pc, #68]	@ (8003004 <receivedLora+0xb8>)
 8002fc0:	4811      	ldr	r0, [pc, #68]	@ (8003008 <receivedLora+0xbc>)
 8002fc2:	f7ff feef 	bl	8002da4 <UART_Transmit_With_Color>
		messageLoRATreatment(LORA_Receive_Message);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 f824 	bl	8003014 <messageLoRATreatment>
 8002fcc:	e010      	b.n	8002ff0 <receivedLora+0xa4>
	}
	else{
		UART_Transmit_With_Color("\n\r--- INTERCEPTED MESSAGE ---",ANSI_COLOR_GREEN);
 8002fce:	490d      	ldr	r1, [pc, #52]	@ (8003004 <receivedLora+0xb8>)
 8002fd0:	480e      	ldr	r0, [pc, #56]	@ (800300c <receivedLora+0xc0>)
 8002fd2:	f7ff fee7 	bl	8002da4 <UART_Transmit_With_Color>
		vPortFree(LORA_Receive_Message->payload);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f007 fc0c 	bl	800a7f8 <vPortFree>
		vPortFree(LORA_Receive_Message->header);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f007 fc07 	bl	800a7f8 <vPortFree>
		vPortFree(LORA_Receive_Message);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f007 fc04 	bl	800a7f8 <vPortFree>
	}
	logMemoryUsage("END - LoRA Reception");
 8002ff0:	4807      	ldr	r0, [pc, #28]	@ (8003010 <receivedLora+0xc4>)
 8002ff2:	f7ff ff5d 	bl	8002eb0 <logMemoryUsage>
	RFM9x_SetMode_Receive();
 8002ff6:	f7ff fd3f 	bl	8002a78 <RFM9x_SetMode_Receive>

}
 8002ffa:	3708      	adds	r7, #8
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	0800e238 	.word	0x0800e238
 8003004:	0800e250 	.word	0x0800e250
 8003008:	0800e258 	.word	0x0800e258
 800300c:	0800e274 	.word	0x0800e274
 8003010:	0800e294 	.word	0x0800e294

08003014 <messageLoRATreatment>:
/************************ ---- ************************/
/************************ FUNCTIONS ************************/
void messageLoRATreatment(LORA_MessageReception* LORA_Receive_Message){
 8003014:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003018:	b089      	sub	sp, #36	@ 0x24
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
	//On réalise une synthèse des messages recues
	//ie concaténation dans l'ordre des payloads
	//pourquoi pas ajout des header de reception pour chaque messages ie [SNR,RSSI][][][]
	//Si non on ajoute à la queue LoRAinReception*/
	LoRAinReceptionQ_t LoRAinReceptionQ;
	LoRAinReceptionQ =(LoRAinReceptionQ_t){.LMR = LORA_Receive_Message};
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	60fb      	str	r3, [r7, #12]
	updateMemoryUsage();
 8003022:	f7ff ff3b 	bl	8002e9c <updateMemoryUsage>
	uint8_array_to_hex_string(hexString_LORA, LoRAinReceptionQ.LMR->payload, LoRAinReceptionQ.LMR->header->len_payload);
	UART_Transmit_With_Color("\r\n-->\t",ANSI_COLOR_RESET);
	UART_Transmit_With_Color(hexString_LORA,ANSI_COLOR_RESET);
	vPortFree(hexString_LORA);
*/
	xQueueSendToBack(LoRA_inReceptionHandle,&LoRAinReceptionQ,osWaitForever);
 8003026:	4b48      	ldr	r3, [pc, #288]	@ (8003148 <messageLoRATreatment+0x134>)
 8003028:	6818      	ldr	r0, [r3, #0]
 800302a:	f107 010c 	add.w	r1, r7, #12
 800302e:	2300      	movs	r3, #0
 8003030:	f04f 32ff 	mov.w	r2, #4294967295
 8003034:	f005 f876 	bl	8008124 <xQueueGenericSend>

	if (LORA_Receive_Message->header->num_packet == LORA_Receive_Message->header->nbOf_packet)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	795a      	ldrb	r2, [r3, #5]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	791b      	ldrb	r3, [r3, #4]
 8003044:	429a      	cmp	r2, r3
 8003046:	d17a      	bne.n	800313e <messageLoRATreatment+0x12a>
	{
 8003048:	466b      	mov	r3, sp
 800304a:	461e      	mov	r6, r3
		logMemoryUsage("START - Completed Reception");
 800304c:	483f      	ldr	r0, [pc, #252]	@ (800314c <messageLoRATreatment+0x138>)
 800304e:	f7ff ff2f 	bl	8002eb0 <logMemoryUsage>
		//Liste de tous les LoRAinReceptionQ_t validant le meme identifier
		LoRAinReceptionQ_t correspondingIdentifier[LORA_Receive_Message->header->nbOf_packet];
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	7919      	ldrb	r1, [r3, #4]
 8003058:	460b      	mov	r3, r1
 800305a:	3b01      	subs	r3, #1
 800305c:	61fb      	str	r3, [r7, #28]
 800305e:	b2cb      	uxtb	r3, r1
 8003060:	2200      	movs	r2, #0
 8003062:	4698      	mov	r8, r3
 8003064:	4691      	mov	r9, r2
 8003066:	f04f 0200 	mov.w	r2, #0
 800306a:	f04f 0300 	mov.w	r3, #0
 800306e:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8003072:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8003076:	ea4f 1248 	mov.w	r2, r8, lsl #5
 800307a:	b2cb      	uxtb	r3, r1
 800307c:	2200      	movs	r2, #0
 800307e:	461c      	mov	r4, r3
 8003080:	4615      	mov	r5, r2
 8003082:	f04f 0200 	mov.w	r2, #0
 8003086:	f04f 0300 	mov.w	r3, #0
 800308a:	016b      	lsls	r3, r5, #5
 800308c:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8003090:	0162      	lsls	r2, r4, #5
 8003092:	460b      	mov	r3, r1
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	3307      	adds	r3, #7
 8003098:	08db      	lsrs	r3, r3, #3
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	ebad 0d03 	sub.w	sp, sp, r3
 80030a0:	466b      	mov	r3, sp
 80030a2:	3303      	adds	r3, #3
 80030a4:	089b      	lsrs	r3, r3, #2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	61bb      	str	r3, [r7, #24]
		processQueueAndStoreIdentifiers(LoRA_inReceptionHandle,
 80030aa:	4b27      	ldr	r3, [pc, #156]	@ (8003148 <messageLoRATreatment+0x134>)
 80030ac:	6818      	ldr	r0, [r3, #0]
										LORA_Receive_Message->header->identifier,
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	689b      	ldr	r3, [r3, #8]
		processQueueAndStoreIdentifiers(LoRA_inReceptionHandle,
 80030b2:	78db      	ldrb	r3, [r3, #3]
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	4619      	mov	r1, r3
 80030b8:	f000 f8cd 	bl	8003256 <processQueueAndStoreIdentifiers>
										correspondingIdentifier);

		size_t total_length = 0;
 80030bc:	2300      	movs	r3, #0
 80030be:	60bb      	str	r3, [r7, #8]
		// synthesisPayload is pvPortMalloc
		uint8_t* synthesisPayload = concat_payloads(correspondingIdentifier,
								(uint8_t)LORA_Receive_Message->header->nbOf_packet,
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	791b      	ldrb	r3, [r3, #4]
		uint8_t* synthesisPayload = concat_payloads(correspondingIdentifier,
 80030c6:	f107 0208 	add.w	r2, r7, #8
 80030ca:	4619      	mov	r1, r3
 80030cc:	69b8      	ldr	r0, [r7, #24]
 80030ce:	f000 f843 	bl	8003158 <concat_payloads>
 80030d2:	6178      	str	r0, [r7, #20]
		UART_Transmit_With_Color(hexString_LORA, ANSI_COLOR_GREEN);
		vPortFree(hexString_LORA);*/

		//Objectif afficher le message en debug avec traductor.c
		//Il faut donc creer un UBXMessage_Parsed
		GenericMessage* genericMessage=(GenericMessage*) pvPortMalloc(sizeof(GenericMessage));
 80030d4:	2008      	movs	r0, #8
 80030d6:	f007 fac1 	bl	800a65c <pvPortMalloc>
 80030da:	6138      	str	r0, [r7, #16]
		GNSSCom_MessageAdapter(synthesisPayload,&total_length,genericMessage);// GNSSCom_MessageAdapter pvPortMalloc: genericMessage->Message.UBXMessage->brute & genericMessage->Message.UBXMessage
 80030dc:	f107 0308 	add.w	r3, r7, #8
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	4619      	mov	r1, r3
 80030e4:	6978      	ldr	r0, [r7, #20]
 80030e6:	f7fd ff0b 	bl	8000f00 <GNSSCom_MessageAdapter>
		updateMemoryUsage();
 80030ea:	f7ff fed7 	bl	8002e9c <updateMemoryUsage>
		if (genericMessage->typeMessage==UBX){
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d119      	bne.n	800312a <messageLoRATreatment+0x116>
			//traductor pvPortMalloc
			traductor(genericMessage->Message.UBXMessage, ModuleConfig);
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	6858      	ldr	r0, [r3, #4]
 80030fa:	4b15      	ldr	r3, [pc, #84]	@ (8003150 <messageLoRATreatment+0x13c>)
 80030fc:	781a      	ldrb	r2, [r3, #0]
 80030fe:	785b      	ldrb	r3, [r3, #1]
 8003100:	021b      	lsls	r3, r3, #8
 8003102:	431a      	orrs	r2, r3
 8003104:	2300      	movs	r3, #0
 8003106:	f362 030f 	bfi	r3, r2, #0, #16
 800310a:	4619      	mov	r1, r3
 800310c:	f7fe fcfa 	bl	8001b04 <traductor>

			//freeBuffer(genericMessage->Message.UBXMessage->brute);
			vPortFree(genericMessage->Message.UBXMessage->brute);
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	4618      	mov	r0, r3
 8003118:	f007 fb6e 	bl	800a7f8 <vPortFree>
			vPortFree(genericMessage->Message.UBXMessage);
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	4618      	mov	r0, r3
 8003122:	f007 fb69 	bl	800a7f8 <vPortFree>
			updateMemoryUsage();
 8003126:	f7ff feb9 	bl	8002e9c <updateMemoryUsage>
		}
		vPortFree(genericMessage);
 800312a:	6938      	ldr	r0, [r7, #16]
 800312c:	f007 fb64 	bl	800a7f8 <vPortFree>
		vPortFree(synthesisPayload);
 8003130:	6978      	ldr	r0, [r7, #20]
 8003132:	f007 fb61 	bl	800a7f8 <vPortFree>
		logMemoryUsage("END - Completed Reception");
 8003136:	4807      	ldr	r0, [pc, #28]	@ (8003154 <messageLoRATreatment+0x140>)
 8003138:	f7ff feba 	bl	8002eb0 <logMemoryUsage>
 800313c:	46b5      	mov	sp, r6
	}
}
 800313e:	bf00      	nop
 8003140:	3724      	adds	r7, #36	@ 0x24
 8003142:	46bd      	mov	sp, r7
 8003144:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003148:	20000314 	.word	0x20000314
 800314c:	0800e2ac 	.word	0x0800e2ac
 8003150:	200002f8 	.word	0x200002f8
 8003154:	0800e2c8 	.word	0x0800e2c8

08003158 <concat_payloads>:
        {&header3, payload3}
    };

    Output : should be  {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09}
 */
uint8_t* concat_payloads(LoRAinReceptionQ_t* structsToConcatenate, uint8_t nbOfstructsToConcatenate, size_t* total_length) {
 8003158:	b580      	push	{r7, lr}
 800315a:	b08a      	sub	sp, #40	@ 0x28
 800315c:	af00      	add	r7, sp, #0
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	460b      	mov	r3, r1
 8003162:	607a      	str	r2, [r7, #4]
 8003164:	72fb      	strb	r3, [r7, #11]
    *total_length = 0;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	601a      	str	r2, [r3, #0]
    size_t offset = 0;
 800316c:	2300      	movs	r3, #0
 800316e:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t* result = NULL;
 8003170:	2300      	movs	r3, #0
 8003172:	623b      	str	r3, [r7, #32]
    uint8_t* temp = NULL;
 8003174:	2300      	movs	r3, #0
 8003176:	61bb      	str	r3, [r7, #24]

    for (int i = 0; i < nbOfstructsToConcatenate; i++) {
 8003178:	2300      	movs	r3, #0
 800317a:	61fb      	str	r3, [r7, #28]
 800317c:	e062      	b.n	8003244 <concat_payloads+0xec>
        size_t new_total_length = *total_length + structsToConcatenate[i].LMR->header->len_payload;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	69fa      	ldr	r2, [r7, #28]
 8003184:	0092      	lsls	r2, r2, #2
 8003186:	68f9      	ldr	r1, [r7, #12]
 8003188:	440a      	add	r2, r1
 800318a:	6812      	ldr	r2, [r2, #0]
 800318c:	6892      	ldr	r2, [r2, #8]
 800318e:	7992      	ldrb	r2, [r2, #6]
 8003190:	4413      	add	r3, r2
 8003192:	617b      	str	r3, [r7, #20]

        // Allocate new memory block
        temp = (uint8_t*)pvPortMalloc(new_total_length);
 8003194:	6978      	ldr	r0, [r7, #20]
 8003196:	f007 fa61 	bl	800a65c <pvPortMalloc>
 800319a:	61b8      	str	r0, [r7, #24]
        if (temp == NULL) Error_Handler();
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <concat_payloads+0x4e>
 80031a2:	f000 fc0b 	bl	80039bc <Error_Handler>

        // Copy the existing data to the new block
        if (result != NULL) {
 80031a6:	6a3b      	ldr	r3, [r7, #32]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d009      	beq.n	80031c0 <concat_payloads+0x68>
            memcpy(temp, result, *total_length);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	461a      	mov	r2, r3
 80031b2:	6a39      	ldr	r1, [r7, #32]
 80031b4:	69b8      	ldr	r0, [r7, #24]
 80031b6:	f008 fbe6 	bl	800b986 <memcpy>
            vPortFree(result); // Free the old memory block
 80031ba:	6a38      	ldr	r0, [r7, #32]
 80031bc:	f007 fb1c 	bl	800a7f8 <vPortFree>
        }

        // Update the total length
        *total_length = new_total_length;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	697a      	ldr	r2, [r7, #20]
 80031c4:	601a      	str	r2, [r3, #0]
        result = temp; // Assign the new block to result
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	623b      	str	r3, [r7, #32]

        // Copy the new data into the new block
        memcpy(result + offset, structsToConcatenate[i].LMR->payload, structsToConcatenate[i].LMR->header->len_payload);
 80031ca:	6a3a      	ldr	r2, [r7, #32]
 80031cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ce:	18d0      	adds	r0, r2, r3
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	4413      	add	r3, r2
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68d9      	ldr	r1, [r3, #12]
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	4413      	add	r3, r2
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	799b      	ldrb	r3, [r3, #6]
 80031ea:	461a      	mov	r2, r3
 80031ec:	f008 fbcb 	bl	800b986 <memcpy>
        offset += (size_t)structsToConcatenate[i].LMR->header->len_payload;
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	4413      	add	r3, r2
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	799b      	ldrb	r3, [r3, #6]
 80031fe:	461a      	mov	r2, r3
 8003200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003202:	4413      	add	r3, r2
 8003204:	627b      	str	r3, [r7, #36]	@ 0x24

        // Free the individual payload memory
        vPortFree(structsToConcatenate[i].LMR->payload);
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	4413      	add	r3, r2
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	4618      	mov	r0, r3
 8003214:	f007 faf0 	bl	800a7f8 <vPortFree>
        vPortFree(structsToConcatenate[i].LMR->header);
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	68fa      	ldr	r2, [r7, #12]
 800321e:	4413      	add	r3, r2
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	4618      	mov	r0, r3
 8003226:	f007 fae7 	bl	800a7f8 <vPortFree>
        vPortFree(structsToConcatenate[i].LMR);
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	4413      	add	r3, r2
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4618      	mov	r0, r3
 8003236:	f007 fadf 	bl	800a7f8 <vPortFree>
        updateMemoryUsage();
 800323a:	f7ff fe2f 	bl	8002e9c <updateMemoryUsage>
    for (int i = 0; i < nbOfstructsToConcatenate; i++) {
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	3301      	adds	r3, #1
 8003242:	61fb      	str	r3, [r7, #28]
 8003244:	7afb      	ldrb	r3, [r7, #11]
 8003246:	69fa      	ldr	r2, [r7, #28]
 8003248:	429a      	cmp	r2, r3
 800324a:	db98      	blt.n	800317e <concat_payloads+0x26>
    }
    return result;
 800324c:	6a3b      	ldr	r3, [r7, #32]
}
 800324e:	4618      	mov	r0, r3
 8003250:	3728      	adds	r7, #40	@ 0x28
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <processQueueAndStoreIdentifiers>:


void processQueueAndStoreIdentifiers(osMessageQId xQueue, uint8_t identifierToFind ,LoRAinReceptionQ_t* correspondingIdentifiers){
 8003256:	b580      	push	{r7, lr}
 8003258:	b088      	sub	sp, #32
 800325a:	af00      	add	r7, sp, #0
 800325c:	60f8      	str	r0, [r7, #12]
 800325e:	460b      	mov	r3, r1
 8003260:	607a      	str	r2, [r7, #4]
 8003262:	72fb      	strb	r3, [r7, #11]
	LoRAinReceptionQ_t currentItem;
	UBaseType_t queueSize = uxQueueMessagesWaiting(xQueue);
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	f005 fb63 	bl	8008930 <uxQueueMessagesWaiting>
 800326a:	6178      	str	r0, [r7, #20]
	int count = 0;
 800326c:	2300      	movs	r3, #0
 800326e:	61fb      	str	r3, [r7, #28]

	for (BaseType_t index = 0; index < queueSize; index++){
 8003270:	2300      	movs	r3, #0
 8003272:	61bb      	str	r3, [r7, #24]
 8003274:	e027      	b.n	80032c6 <processQueueAndStoreIdentifiers+0x70>
		if (xQueueReceive(xQueue, &currentItem, 100) == pdPASS) {
 8003276:	f107 0310 	add.w	r3, r7, #16
 800327a:	2264      	movs	r2, #100	@ 0x64
 800327c:	4619      	mov	r1, r3
 800327e:	68f8      	ldr	r0, [r7, #12]
 8003280:	f005 f8e2 	bl	8008448 <xQueueReceive>
 8003284:	4603      	mov	r3, r0
 8003286:	2b01      	cmp	r3, #1
 8003288:	d11a      	bne.n	80032c0 <processQueueAndStoreIdentifiers+0x6a>
			if (isIdentifierMatching(&currentItem, identifierToFind)) {
 800328a:	7afa      	ldrb	r2, [r7, #11]
 800328c:	f107 0310 	add.w	r3, r7, #16
 8003290:	4611      	mov	r1, r2
 8003292:	4618      	mov	r0, r3
 8003294:	f000 f820 	bl	80032d8 <isIdentifierMatching>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d009      	beq.n	80032b2 <processQueueAndStoreIdentifiers+0x5c>
				correspondingIdentifiers[count]= currentItem;
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	4413      	add	r3, r2
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	601a      	str	r2, [r3, #0]
				count++;
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	3301      	adds	r3, #1
 80032ae:	61fb      	str	r3, [r7, #28]
 80032b0:	e006      	b.n	80032c0 <processQueueAndStoreIdentifiers+0x6a>
			}
			else {
				xQueueSendToFront(xQueue, &currentItem, 100);
 80032b2:	f107 0110 	add.w	r1, r7, #16
 80032b6:	2301      	movs	r3, #1
 80032b8:	2264      	movs	r2, #100	@ 0x64
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f004 ff32 	bl	8008124 <xQueueGenericSend>
	for (BaseType_t index = 0; index < queueSize; index++){
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	3301      	adds	r3, #1
 80032c4:	61bb      	str	r3, [r7, #24]
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	697a      	ldr	r2, [r7, #20]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d8d3      	bhi.n	8003276 <processQueueAndStoreIdentifiers+0x20>
			}
		}
	}
}
 80032ce:	bf00      	nop
 80032d0:	bf00      	nop
 80032d2:	3720      	adds	r7, #32
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <isIdentifierMatching>:

int isIdentifierMatching(LoRAinReceptionQ_t* item, uint8_t identifier){
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	460b      	mov	r3, r1
 80032e2:	70fb      	strb	r3, [r7, #3]
	return item->LMR->header->identifier == identifier;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	78db      	ldrb	r3, [r3, #3]
 80032ec:	78fa      	ldrb	r2, [r7, #3]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	bf0c      	ite	eq
 80032f2:	2301      	moveq	r3, #1
 80032f4:	2300      	movne	r3, #0
 80032f6:	b2db      	uxtb	r3, r3
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <senderLoRA>:
 */
#include "RTOS_subfunctions/senderLoRA.h"
#include "GNSS/debug_utils.h"

/************************ TASK ************************/
void senderLoRA(){
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
	LoRAtoSendQ_t LoRAtoSend;
	logMemoryUsage("START - Lora Sender");
 800330a:	4830      	ldr	r0, [pc, #192]	@ (80033cc <senderLoRA+0xc8>)
 800330c:	f7ff fdd0 	bl	8002eb0 <logMemoryUsage>

	/* RECEIVE FROM QUEUE : format :{Header, DynamicBuffer} */
	xQueueReceive(LoRA_toSendHandle, &LoRAtoSend, osWaitForever);
 8003310:	4b2f      	ldr	r3, [pc, #188]	@ (80033d0 <senderLoRA+0xcc>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4639      	mov	r1, r7
 8003316:	f04f 32ff 	mov.w	r2, #4294967295
 800331a:	4618      	mov	r0, r3
 800331c:	f005 f894 	bl	8008448 <xQueueReceive>

	UART_Transmit_With_Color("\n\r--- SEND MESSAGE ---",ANSI_COLOR_MAGENTA);
 8003320:	492c      	ldr	r1, [pc, #176]	@ (80033d4 <senderLoRA+0xd0>)
 8003322:	482d      	ldr	r0, [pc, #180]	@ (80033d8 <senderLoRA+0xd4>)
 8003324:	f7ff fd3e 	bl	8002da4 <UART_Transmit_With_Color>

	uint8_t* buffer = (uint8_t*)pvPortMalloc(LoRAtoSend.header->len_payload + sizeof(LORA_HeaderforSend));
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	78db      	ldrb	r3, [r3, #3]
 800332c:	3304      	adds	r3, #4
 800332e:	4618      	mov	r0, r3
 8003330:	f007 f994 	bl	800a65c <pvPortMalloc>
 8003334:	60f8      	str	r0, [r7, #12]
	if(buffer == NULL) Error_Handler();
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d101      	bne.n	8003340 <senderLoRA+0x3c>
 800333c:	f000 fb3e 	bl	80039bc <Error_Handler>
	updateMemoryUsage();
 8003340:	f7ff fdac 	bl	8002e9c <updateMemoryUsage>

	//On rempli la premiere partie du buffer
	buffer[0] = LoRAtoSend.header->recipient;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	781a      	ldrb	r2, [r3, #0]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	701a      	strb	r2, [r3, #0]
	buffer[1] = LoRAtoSend.header->sender;
 800334c:	683a      	ldr	r2, [r7, #0]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	3301      	adds	r3, #1
 8003352:	7852      	ldrb	r2, [r2, #1]
 8003354:	701a      	strb	r2, [r3, #0]
	buffer[2] = LoRAtoSend.header->type;
 8003356:	683a      	ldr	r2, [r7, #0]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	3302      	adds	r3, #2
 800335c:	7892      	ldrb	r2, [r2, #2]
 800335e:	701a      	strb	r2, [r3, #0]
	buffer[3] = LoRAtoSend.header->len_payload;
 8003360:	683a      	ldr	r2, [r7, #0]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	3303      	adds	r3, #3
 8003366:	78d2      	ldrb	r2, [r2, #3]
 8003368:	701a      	strb	r2, [r3, #0]

	memcpy(buffer + sizeof(LORA_HeaderforSend),
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	1d18      	adds	r0, r3, #4
			LoRAtoSend.payload->buffer ,
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6819      	ldr	r1, [r3, #0]
			LoRAtoSend.header->len_payload);
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	78db      	ldrb	r3, [r3, #3]
	memcpy(buffer + sizeof(LORA_HeaderforSend),
 8003376:	461a      	mov	r2, r3
 8003378:	f008 fb05 	bl	800b986 <memcpy>

	RFM9x_Send(buffer, LoRAtoSend.header->len_payload + sizeof(LORA_HeaderforSend));
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	78db      	ldrb	r3, [r3, #3]
 8003380:	3304      	adds	r3, #4
 8003382:	b2db      	uxtb	r3, r3
 8003384:	4619      	mov	r1, r3
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f7ff fa96 	bl	80028b8 <RFM9x_Send>
	char* hexString = (char*)pvPortMalloc(sizeof(LoRAtoSend.header->recipient));
 800338c:	2001      	movs	r0, #1
 800338e:	f007 f965 	bl	800a65c <pvPortMalloc>
 8003392:	60b8      	str	r0, [r7, #8]
	if (hexString == NULL) Error_Handler();
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d101      	bne.n	800339e <senderLoRA+0x9a>
 800339a:	f000 fb0f 	bl	80039bc <Error_Handler>
	uint8_array_to_hex_string(hexString,&LoRAtoSend.header->recipient,sizeof(LoRAtoSend.header->recipient));
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	2201      	movs	r2, #1
 80033a2:	4619      	mov	r1, r3
 80033a4:	68b8      	ldr	r0, [r7, #8]
 80033a6:	f7ff fd41 	bl	8002e2c <uint8_array_to_hex_string>

	UART_Transmit_With_Color(hexString,ANSI_COLOR_MAGENTA);
 80033aa:	490a      	ldr	r1, [pc, #40]	@ (80033d4 <senderLoRA+0xd0>)
 80033ac:	68b8      	ldr	r0, [r7, #8]
 80033ae:	f7ff fcf9 	bl	8002da4 <UART_Transmit_With_Color>

	vPortFree(hexString);
 80033b2:	68b8      	ldr	r0, [r7, #8]
 80033b4:	f007 fa20 	bl	800a7f8 <vPortFree>
	vPortFree(buffer);
 80033b8:	68f8      	ldr	r0, [r7, #12]
 80033ba:	f007 fa1d 	bl	800a7f8 <vPortFree>
	logMemoryUsage("END - Lora Sender");
 80033be:	4807      	ldr	r0, [pc, #28]	@ (80033dc <senderLoRA+0xd8>)
 80033c0:	f7ff fd76 	bl	8002eb0 <logMemoryUsage>
}
 80033c4:	bf00      	nop
 80033c6:	3710      	adds	r7, #16
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	0800e2e4 	.word	0x0800e2e4
 80033d0:	2000030c 	.word	0x2000030c
 80033d4:	0800e2f8 	.word	0x0800e2f8
 80033d8:	0800e300 	.word	0x0800e300
 80033dc:	0800e318 	.word	0x0800e318

080033e0 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0

}
 80033e4:	bf00      	nop
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr

080033ee <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 80033ee:	b480      	push	{r7}
 80033f0:	af00      	add	r7, sp, #0
	return 0;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
	...

08003400 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8003400:	b480      	push	{r7}
 8003402:	b085      	sub	sp, #20
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	4a07      	ldr	r2, [pc, #28]	@ (800342c <vApplicationGetIdleTaskMemory+0x2c>)
 8003410:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	4a06      	ldr	r2, [pc, #24]	@ (8003430 <vApplicationGetIdleTaskMemory+0x30>)
 8003416:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2280      	movs	r2, #128	@ 0x80
 800341c:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 800341e:	bf00      	nop
 8003420:	3714      	adds	r7, #20
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	2000031c 	.word	0x2000031c
 8003430:	200003c8 	.word	0x200003c8

08003434 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8003434:	b5b0      	push	{r4, r5, r7, lr}
 8003436:	b0aa      	sub	sp, #168	@ 0xa8
 8003438:	af00      	add	r7, sp, #0
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of xSem_LORAReceive_start */
  osSemaphoreDef(xSem_LORAReceive_start);
 800343a:	2300      	movs	r3, #0
 800343c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003440:	2300      	movs	r3, #0
 8003442:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  xSem_LORAReceive_startHandle = osSemaphoreCreate(osSemaphore(xSem_LORAReceive_start), 1);
 8003446:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800344a:	2101      	movs	r1, #1
 800344c:	4618      	mov	r0, r3
 800344e:	f004 fb91 	bl	8007b74 <osSemaphoreCreate>
 8003452:	4603      	mov	r3, r0
 8003454:	4a3e      	ldr	r2, [pc, #248]	@ (8003550 <MX_FREERTOS_Init+0x11c>)
 8003456:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of LoRA_toSend */
  osMessageQDef(LoRA_toSend, 4, LoRAtoSendQ_t);
 8003458:	4b3e      	ldr	r3, [pc, #248]	@ (8003554 <MX_FREERTOS_Init+0x120>)
 800345a:	f107 0490 	add.w	r4, r7, #144	@ 0x90
 800345e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003460:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  LoRA_toSendHandle = osMessageCreate(osMessageQ(LoRA_toSend), NULL);
 8003464:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8003468:	2100      	movs	r1, #0
 800346a:	4618      	mov	r0, r3
 800346c:	f004 fc38 	bl	8007ce0 <osMessageCreate>
 8003470:	4603      	mov	r3, r0
 8003472:	4a39      	ldr	r2, [pc, #228]	@ (8003558 <MX_FREERTOS_Init+0x124>)
 8003474:	6013      	str	r3, [r2, #0]

  /* definition and creation of UARTdebug */
  osMessageQDef(UARTdebug, 16, UARTdebugQ_t);
 8003476:	4b39      	ldr	r3, [pc, #228]	@ (800355c <MX_FREERTOS_Init+0x128>)
 8003478:	f107 0480 	add.w	r4, r7, #128	@ 0x80
 800347c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800347e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  UARTdebugHandle = osMessageCreate(osMessageQ(UARTdebug), NULL);
 8003482:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8003486:	2100      	movs	r1, #0
 8003488:	4618      	mov	r0, r3
 800348a:	f004 fc29 	bl	8007ce0 <osMessageCreate>
 800348e:	4603      	mov	r3, r0
 8003490:	4a33      	ldr	r2, [pc, #204]	@ (8003560 <MX_FREERTOS_Init+0x12c>)
 8003492:	6013      	str	r3, [r2, #0]

  /* definition and creation of LoRA_inReception */
  osMessageQDef(LoRA_inReception, 48, LoRAinReceptionQ_t);
 8003494:	4b33      	ldr	r3, [pc, #204]	@ (8003564 <MX_FREERTOS_Init+0x130>)
 8003496:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 800349a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800349c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  LoRA_inReceptionHandle = osMessageCreate(osMessageQ(LoRA_inReception), NULL);
 80034a0:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80034a4:	2100      	movs	r1, #0
 80034a6:	4618      	mov	r0, r3
 80034a8:	f004 fc1a 	bl	8007ce0 <osMessageCreate>
 80034ac:	4603      	mov	r3, r0
 80034ae:	4a2e      	ldr	r2, [pc, #184]	@ (8003568 <MX_FREERTOS_Init+0x134>)
 80034b0:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of StartInit */
  osThreadDef(StartInit, StartInitHandle_TASK, osPriorityRealtime, 0, 512);
 80034b2:	4b2e      	ldr	r3, [pc, #184]	@ (800356c <MX_FREERTOS_Init+0x138>)
 80034b4:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 80034b8:	461d      	mov	r5, r3
 80034ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80034c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  StartInitHandle = osThreadCreate(osThread(StartInit), NULL);
 80034c6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80034ca:	2100      	movs	r1, #0
 80034cc:	4618      	mov	r0, r3
 80034ce:	f004 fa6d 	bl	80079ac <osThreadCreate>
 80034d2:	4603      	mov	r3, r0
 80034d4:	4a26      	ldr	r2, [pc, #152]	@ (8003570 <MX_FREERTOS_Init+0x13c>)
 80034d6:	6013      	str	r3, [r2, #0]

  /* definition and creation of SenderLoRA */
  osThreadDef(SenderLoRA, SenderLoRA_TASK, osPriorityNormal, 0, 512);
 80034d8:	4b26      	ldr	r3, [pc, #152]	@ (8003574 <MX_FREERTOS_Init+0x140>)
 80034da:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 80034de:	461d      	mov	r5, r3
 80034e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80034e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SenderLoRAHandle = osThreadCreate(osThread(SenderLoRA), NULL);
 80034ec:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80034f0:	2100      	movs	r1, #0
 80034f2:	4618      	mov	r0, r3
 80034f4:	f004 fa5a 	bl	80079ac <osThreadCreate>
 80034f8:	4603      	mov	r3, r0
 80034fa:	4a1f      	ldr	r2, [pc, #124]	@ (8003578 <MX_FREERTOS_Init+0x144>)
 80034fc:	6013      	str	r3, [r2, #0]

  /* definition and creation of ReceiverLoRA */
  osThreadDef(ReceiverLoRA, ReceiverLoRA_TASK, osPriorityAboveNormal, 0, 2048);
 80034fe:	4b1f      	ldr	r3, [pc, #124]	@ (800357c <MX_FREERTOS_Init+0x148>)
 8003500:	f107 041c 	add.w	r4, r7, #28
 8003504:	461d      	mov	r5, r3
 8003506:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003508:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800350a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800350e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ReceiverLoRAHandle = osThreadCreate(osThread(ReceiverLoRA), NULL);
 8003512:	f107 031c 	add.w	r3, r7, #28
 8003516:	2100      	movs	r1, #0
 8003518:	4618      	mov	r0, r3
 800351a:	f004 fa47 	bl	80079ac <osThreadCreate>
 800351e:	4603      	mov	r3, r0
 8003520:	4a17      	ldr	r2, [pc, #92]	@ (8003580 <MX_FREERTOS_Init+0x14c>)
 8003522:	6013      	str	r3, [r2, #0]

  /* definition and creation of Debug */
  osThreadDef(Debug, Debug_TASK, osPriorityHigh, 0, 256);
 8003524:	4b17      	ldr	r3, [pc, #92]	@ (8003584 <MX_FREERTOS_Init+0x150>)
 8003526:	463c      	mov	r4, r7
 8003528:	461d      	mov	r5, r3
 800352a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800352c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800352e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003532:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DebugHandle = osThreadCreate(osThread(Debug), NULL);
 8003536:	463b      	mov	r3, r7
 8003538:	2100      	movs	r1, #0
 800353a:	4618      	mov	r0, r3
 800353c:	f004 fa36 	bl	80079ac <osThreadCreate>
 8003540:	4603      	mov	r3, r0
 8003542:	4a11      	ldr	r2, [pc, #68]	@ (8003588 <MX_FREERTOS_Init+0x154>)
 8003544:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8003546:	bf00      	nop
 8003548:	37a8      	adds	r7, #168	@ 0xa8
 800354a:	46bd      	mov	sp, r7
 800354c:	bdb0      	pop	{r4, r5, r7, pc}
 800354e:	bf00      	nop
 8003550:	20000318 	.word	0x20000318
 8003554:	0800e32c 	.word	0x0800e32c
 8003558:	2000030c 	.word	0x2000030c
 800355c:	0800e33c 	.word	0x0800e33c
 8003560:	20000310 	.word	0x20000310
 8003564:	0800e34c 	.word	0x0800e34c
 8003568:	20000314 	.word	0x20000314
 800356c:	0800e368 	.word	0x0800e368
 8003570:	200002fc 	.word	0x200002fc
 8003574:	0800e390 	.word	0x0800e390
 8003578:	20000300 	.word	0x20000300
 800357c:	0800e3bc 	.word	0x0800e3bc
 8003580:	20000304 	.word	0x20000304
 8003584:	0800e3e0 	.word	0x0800e3e0
 8003588:	20000308 	.word	0x20000308

0800358c <StartInitHandle_TASK>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartInitHandle_TASK */
void StartInitHandle_TASK(void const * argument)
{
 800358c:	b590      	push	{r4, r7, lr}
 800358e:	b08d      	sub	sp, #52	@ 0x34
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartInitHandle_TASK */
	/* Infinite loop */
	const char startMessage[] = "\r\nStarting...\r\n";
 8003594:	4b25      	ldr	r3, [pc, #148]	@ (800362c <StartInitHandle_TASK+0xa0>)
 8003596:	f107 041c 	add.w	r4, r7, #28
 800359a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800359c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	const char initDoneMessage[] = "\r\nInit Done\r\n\n";
 80035a0:	4b23      	ldr	r3, [pc, #140]	@ (8003630 <StartInitHandle_TASK+0xa4>)
 80035a2:	f107 040c 	add.w	r4, r7, #12
 80035a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035a8:	c407      	stmia	r4!, {r0, r1, r2}
 80035aa:	8023      	strh	r3, [r4, #0]
 80035ac:	3402      	adds	r4, #2
 80035ae:	0c1b      	lsrs	r3, r3, #16
 80035b0:	7023      	strb	r3, [r4, #0]

	HAL_UART_Transmit(&huart2, (uint8_t *)startMessage, sizeof(startMessage), 10);
 80035b2:	f107 011c 	add.w	r1, r7, #28
 80035b6:	230a      	movs	r3, #10
 80035b8:	2210      	movs	r2, #16
 80035ba:	481e      	ldr	r0, [pc, #120]	@ (8003634 <StartInitHandle_TASK+0xa8>)
 80035bc:	f003 fc6e 	bl	8006e9c <HAL_UART_Transmit>

	LORACom_Init(&hspi2,&huart2);
 80035c0:	491c      	ldr	r1, [pc, #112]	@ (8003634 <StartInitHandle_TASK+0xa8>)
 80035c2:	481d      	ldr	r0, [pc, #116]	@ (8003638 <StartInitHandle_TASK+0xac>)
 80035c4:	f7ff f902 	bl	80027cc <LORACom_Init>
	RFM9x_Init();
 80035c8:	f7ff f914 	bl	80027f4 <RFM9x_Init>

	vTaskDelay(1000);
 80035cc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80035d0:	f005 fd42 	bl	8009058 <vTaskDelay>

	HAL_UART_Transmit(&huart2, (uint8_t *)initDoneMessage, sizeof(initDoneMessage), 10);
 80035d4:	f107 010c 	add.w	r1, r7, #12
 80035d8:	230a      	movs	r3, #10
 80035da:	220f      	movs	r2, #15
 80035dc:	4815      	ldr	r0, [pc, #84]	@ (8003634 <StartInitHandle_TASK+0xa8>)
 80035de:	f003 fc5d 	bl	8006e9c <HAL_UART_Transmit>

	logMemoryUsage("INITILISATION");
 80035e2:	4816      	ldr	r0, [pc, #88]	@ (800363c <StartInitHandle_TASK+0xb0>)
 80035e4:	f7ff fc64 	bl	8002eb0 <logMemoryUsage>
	ModuleConfig = (ModuleConfig_t){
 80035e8:	4b15      	ldr	r3, [pc, #84]	@ (8003640 <StartInitHandle_TASK+0xb4>)
 80035ea:	2201      	movs	r2, #1
 80035ec:	701a      	strb	r2, [r3, #0]
 80035ee:	4b14      	ldr	r3, [pc, #80]	@ (8003640 <StartInitHandle_TASK+0xb4>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	705a      	strb	r2, [r3, #1]
		.doDebugging = true,
		.doLowEnergy = false
	};
	osSignalSet(ReceiverLoRAHandle, 0x01);
 80035f4:	4b13      	ldr	r3, [pc, #76]	@ (8003644 <StartInitHandle_TASK+0xb8>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2101      	movs	r1, #1
 80035fa:	4618      	mov	r0, r3
 80035fc:	f004 fa2e 	bl	8007a5c <osSignalSet>
	osSignalSet(SenderLoRAHandle, 0x01);
 8003600:	4b11      	ldr	r3, [pc, #68]	@ (8003648 <StartInitHandle_TASK+0xbc>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2101      	movs	r1, #1
 8003606:	4618      	mov	r0, r3
 8003608:	f004 fa28 	bl	8007a5c <osSignalSet>
	osStatus event = osThreadTerminate(StartInitHandle);
 800360c:	4b0f      	ldr	r3, [pc, #60]	@ (800364c <StartInitHandle_TASK+0xc0>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4618      	mov	r0, r3
 8003612:	f004 fa17 	bl	8007a44 <osThreadTerminate>
 8003616:	62f8      	str	r0, [r7, #44]	@ 0x2c
	if (event != osOK)Error_Handler();
 8003618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <StartInitHandle_TASK+0x96>
 800361e:	f000 f9cd 	bl	80039bc <Error_Handler>
  /* USER CODE END StartInitHandle_TASK */
}
 8003622:	bf00      	nop
 8003624:	3734      	adds	r7, #52	@ 0x34
 8003626:	46bd      	mov	sp, r7
 8003628:	bd90      	pop	{r4, r7, pc}
 800362a:	bf00      	nop
 800362c:	0800e40c 	.word	0x0800e40c
 8003630:	0800e41c 	.word	0x0800e41c
 8003634:	2000067c 	.word	0x2000067c
 8003638:	200005c8 	.word	0x200005c8
 800363c:	0800e3fc 	.word	0x0800e3fc
 8003640:	200002f8 	.word	0x200002f8
 8003644:	20000304 	.word	0x20000304
 8003648:	20000300 	.word	0x20000300
 800364c:	200002fc 	.word	0x200002fc

08003650 <SenderLoRA_TASK>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_SenderLoRA_TASK */
void SenderLoRA_TASK(void const * argument)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b08e      	sub	sp, #56	@ 0x38
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SenderLoRA_TASK */
	/* Infinite loop */
    uint32_t notificationValue;
	osEvent eventFromStart = osSignalWait(0x01, osWaitForever);
 8003658:	f107 0320 	add.w	r3, r7, #32
 800365c:	f04f 32ff 	mov.w	r2, #4294967295
 8003660:	2101      	movs	r1, #1
 8003662:	4618      	mov	r0, r3
 8003664:	f004 fa3a 	bl	8007adc <osSignalWait>
	if (eventFromStart.status == osEventSignal){
 8003668:	6a3b      	ldr	r3, [r7, #32]
 800366a:	2b08      	cmp	r3, #8
 800366c:	d14a      	bne.n	8003704 <SenderLoRA_TASK+0xb4>
		for(;;)
		{
			/*WAIT FOR A NOTIFY FROM ISR EXTI 8-9 */
			 xTaskNotifyWait(0x00, // Ne pas effacer de bits à l'entrée
 800366e:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8003672:	f04f 33ff 	mov.w	r3, #4294967295
 8003676:	f04f 31ff 	mov.w	r1, #4294967295
 800367a:	2000      	movs	r0, #0
 800367c:	f006 fb2e 	bl	8009cdc <xTaskNotifyWait>
			                        0xFFFFFFFF, // Effacer tous les bits à la sortie
			                        &notificationValue, // Stocker la valeur des bits notifiés
			                        portMAX_DELAY); // Attendre indéfiniment

			 /* BUILD OF THE MESSAGE TO SEND VIA LoRA - THIS PART MEANS TO DISSAPEAR FOR A SOFTWARE MESSAGE BUILD */
			logMemoryUsage("START - Lora Sender TASK");
 8003680:	4822      	ldr	r0, [pc, #136]	@ (800370c <SenderLoRA_TASK+0xbc>)
 8003682:	f7ff fc15 	bl	8002eb0 <logMemoryUsage>


			DynamicBuffer* payloadForPolling =(DynamicBuffer*)initializeBuffer(sizeof(poll_UBX_NAV_SIG));
 8003686:	2008      	movs	r0, #8
 8003688:	f7fd fc06 	bl	8000e98 <initializeBuffer>
 800368c:	6378      	str	r0, [r7, #52]	@ 0x34
			LORA_HeaderforSend* headerForPolling = (LORA_HeaderforSend*)pvPortMalloc(sizeof(LORA_HeaderforSend));
 800368e:	2004      	movs	r0, #4
 8003690:	f006 ffe4 	bl	800a65c <pvPortMalloc>
 8003694:	6338      	str	r0, [r7, #48]	@ 0x30
			if (headerForPolling == NULL) Error_Handler();
 8003696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003698:	2b00      	cmp	r3, #0
 800369a:	d101      	bne.n	80036a0 <SenderLoRA_TASK+0x50>
 800369c:	f000 f98e 	bl	80039bc <Error_Handler>
			memcpy(payloadForPolling->buffer, poll_UBX_NAV_SIG, payloadForPolling->size);
 80036a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036a2:	6818      	ldr	r0, [r3, #0]
 80036a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	461a      	mov	r2, r3
 80036aa:	4919      	ldr	r1, [pc, #100]	@ (8003710 <SenderLoRA_TASK+0xc0>)
 80036ac:	f008 f96b 	bl	800b986 <memcpy>
			updateMemoryUsage();
 80036b0:	f7ff fbf4 	bl	8002e9c <updateMemoryUsage>

			*headerForPolling = (LORA_HeaderforSend){
 80036b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036b6:	b2d9      	uxtb	r1, r3
				.recipient = notificationValue,
						.sender = MODULE_SOURCE_ADDRESS,
						.type = PACKET_TYPE_POLL,
						.len_payload = (uint8_t)payloadForPolling->size
 80036b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	b2da      	uxtb	r2, r3
			*headerForPolling = (LORA_HeaderforSend){
 80036be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036c0:	7019      	strb	r1, [r3, #0]
 80036c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036c4:	21fe      	movs	r1, #254	@ 0xfe
 80036c6:	7059      	strb	r1, [r3, #1]
 80036c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ca:	2103      	movs	r1, #3
 80036cc:	7099      	strb	r1, [r3, #2]
 80036ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036d0:	70da      	strb	r2, [r3, #3]
			};

			LoRAtoSendQ_t pollingStatutGNSS = (LoRAtoSendQ_t){
 80036d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036d4:	617b      	str	r3, [r7, #20]
 80036d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036d8:	61bb      	str	r3, [r7, #24]
				.header = headerForPolling,
						.payload = payloadForPolling
			};
			xQueueSendToBack(LoRA_toSendHandle,&pollingStatutGNSS,osWaitForever);
 80036da:	4b0e      	ldr	r3, [pc, #56]	@ (8003714 <SenderLoRA_TASK+0xc4>)
 80036dc:	6818      	ldr	r0, [r3, #0]
 80036de:	f107 0114 	add.w	r1, r7, #20
 80036e2:	2300      	movs	r3, #0
 80036e4:	f04f 32ff 	mov.w	r2, #4294967295
 80036e8:	f004 fd1c 	bl	8008124 <xQueueGenericSend>

			/* THIS PART IS ESSENTIAL */
			senderLoRA();
 80036ec:	f7ff fe0a 	bl	8003304 <senderLoRA>
			/* --------------------- */
			freeBuffer(payloadForPolling);
 80036f0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80036f2:	f7fd fbf5 	bl	8000ee0 <freeBuffer>
			vPortFree(headerForPolling);
 80036f6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80036f8:	f007 f87e 	bl	800a7f8 <vPortFree>
			logMemoryUsage("END - Lora Sender TASK");
 80036fc:	4806      	ldr	r0, [pc, #24]	@ (8003718 <SenderLoRA_TASK+0xc8>)
 80036fe:	f7ff fbd7 	bl	8002eb0 <logMemoryUsage>
		{
 8003702:	e7b4      	b.n	800366e <SenderLoRA_TASK+0x1e>
		}
	}
  /* USER CODE END SenderLoRA_TASK */
}
 8003704:	bf00      	nop
 8003706:	3738      	adds	r7, #56	@ 0x38
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	0800e42c 	.word	0x0800e42c
 8003710:	200000b8 	.word	0x200000b8
 8003714:	2000030c 	.word	0x2000030c
 8003718:	0800e448 	.word	0x0800e448

0800371c <ReceiverLoRA_TASK>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ReceiverLoRA_TASK */
void ReceiverLoRA_TASK(void const * argument)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b086      	sub	sp, #24
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ReceiverLoRA_TASK */
	/* Infinite loop */
	osEvent eventFromStart = osSignalWait(0x01, osWaitForever);
 8003724:	f107 030c 	add.w	r3, r7, #12
 8003728:	f04f 32ff 	mov.w	r2, #4294967295
 800372c:	2101      	movs	r1, #1
 800372e:	4618      	mov	r0, r3
 8003730:	f004 f9d4 	bl	8007adc <osSignalWait>
	if (eventFromStart.status == osEventSignal){
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2b08      	cmp	r3, #8
 8003738:	d112      	bne.n	8003760 <ReceiverLoRA_TASK+0x44>
		for(;;)
		{
			/* WAITING FOR THE SEMAPHORE FROM ISR */
			ITM_Port32(31)=1111;
 800373a:	4b0b      	ldr	r3, [pc, #44]	@ (8003768 <ReceiverLoRA_TASK+0x4c>)
 800373c:	f240 4257 	movw	r2, #1111	@ 0x457
 8003740:	601a      	str	r2, [r3, #0]
			osSemaphoreWait(xSem_LORAReceive_startHandle, osWaitForever);
 8003742:	4b0a      	ldr	r3, [pc, #40]	@ (800376c <ReceiverLoRA_TASK+0x50>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f04f 31ff 	mov.w	r1, #4294967295
 800374a:	4618      	mov	r0, r3
 800374c:	f004 fa44 	bl	8007bd8 <osSemaphoreWait>
			receivedLora();
 8003750:	f7ff fbfc 	bl	8002f4c <receivedLora>
			ITM_Port32(31)=9999;
 8003754:	4b04      	ldr	r3, [pc, #16]	@ (8003768 <ReceiverLoRA_TASK+0x4c>)
 8003756:	f242 720f 	movw	r2, #9999	@ 0x270f
 800375a:	601a      	str	r2, [r3, #0]
			ITM_Port32(31)=1111;
 800375c:	bf00      	nop
 800375e:	e7ec      	b.n	800373a <ReceiverLoRA_TASK+0x1e>
		}
	}
  /* USER CODE END ReceiverLoRA_TASK */
}
 8003760:	bf00      	nop
 8003762:	3718      	adds	r7, #24
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	e000007c 	.word	0xe000007c
 800376c:	20000318 	.word	0x20000318

08003770 <Debug_TASK>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Debug_TASK */
void Debug_TASK(void const * argument)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Debug_TASK */
	/* Infinite loop */
	for(;;)
	{
		debug();
 8003778:	f7ff fab4 	bl	8002ce4 <debug>
 800377c:	e7fc      	b.n	8003778 <Debug_TASK+0x8>
	...

08003780 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b08a      	sub	sp, #40	@ 0x28
 8003784:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003786:	f107 0314 	add.w	r3, r7, #20
 800378a:	2200      	movs	r2, #0
 800378c:	601a      	str	r2, [r3, #0]
 800378e:	605a      	str	r2, [r3, #4]
 8003790:	609a      	str	r2, [r3, #8]
 8003792:	60da      	str	r2, [r3, #12]
 8003794:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003796:	4b4b      	ldr	r3, [pc, #300]	@ (80038c4 <MX_GPIO_Init+0x144>)
 8003798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800379a:	4a4a      	ldr	r2, [pc, #296]	@ (80038c4 <MX_GPIO_Init+0x144>)
 800379c:	f043 0304 	orr.w	r3, r3, #4
 80037a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037a2:	4b48      	ldr	r3, [pc, #288]	@ (80038c4 <MX_GPIO_Init+0x144>)
 80037a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037a6:	f003 0304 	and.w	r3, r3, #4
 80037aa:	613b      	str	r3, [r7, #16]
 80037ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80037ae:	4b45      	ldr	r3, [pc, #276]	@ (80038c4 <MX_GPIO_Init+0x144>)
 80037b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037b2:	4a44      	ldr	r2, [pc, #272]	@ (80038c4 <MX_GPIO_Init+0x144>)
 80037b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037ba:	4b42      	ldr	r3, [pc, #264]	@ (80038c4 <MX_GPIO_Init+0x144>)
 80037bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037c2:	60fb      	str	r3, [r7, #12]
 80037c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80037c6:	4b3f      	ldr	r3, [pc, #252]	@ (80038c4 <MX_GPIO_Init+0x144>)
 80037c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037ca:	4a3e      	ldr	r2, [pc, #248]	@ (80038c4 <MX_GPIO_Init+0x144>)
 80037cc:	f043 0301 	orr.w	r3, r3, #1
 80037d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037d2:	4b3c      	ldr	r3, [pc, #240]	@ (80038c4 <MX_GPIO_Init+0x144>)
 80037d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	60bb      	str	r3, [r7, #8]
 80037dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80037de:	4b39      	ldr	r3, [pc, #228]	@ (80038c4 <MX_GPIO_Init+0x144>)
 80037e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037e2:	4a38      	ldr	r2, [pc, #224]	@ (80038c4 <MX_GPIO_Init+0x144>)
 80037e4:	f043 0302 	orr.w	r3, r3, #2
 80037e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037ea:	4b36      	ldr	r3, [pc, #216]	@ (80038c4 <MX_GPIO_Init+0x144>)
 80037ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	607b      	str	r3, [r7, #4]
 80037f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GREEN_LED_Pin|SPI2_CS_Pin, GPIO_PIN_RESET);
 80037f6:	2200      	movs	r2, #0
 80037f8:	2160      	movs	r1, #96	@ 0x60
 80037fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80037fe:	f000 ff05 	bl	800460c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_EN_GPIO_Port, SPI2_EN_Pin, GPIO_PIN_SET);
 8003802:	2201      	movs	r2, #1
 8003804:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003808:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800380c:	f000 fefe 	bl	800460c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_RST_GPIO_Port, SPI2_RST_Pin, GPIO_PIN_RESET);
 8003810:	2200      	movs	r2, #0
 8003812:	2140      	movs	r1, #64	@ 0x40
 8003814:	482c      	ldr	r0, [pc, #176]	@ (80038c8 <MX_GPIO_Init+0x148>)
 8003816:	f000 fef9 	bl	800460c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800381a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800381e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003820:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8003824:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003826:	2300      	movs	r3, #0
 8003828:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800382a:	f107 0314 	add.w	r3, r7, #20
 800382e:	4619      	mov	r1, r3
 8003830:	4826      	ldr	r0, [pc, #152]	@ (80038cc <MX_GPIO_Init+0x14c>)
 8003832:	f000 fd41 	bl	80042b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|SPI2_CS_Pin|SPI2_EN_Pin;
 8003836:	f44f 7318 	mov.w	r3, #608	@ 0x260
 800383a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800383c:	2301      	movs	r3, #1
 800383e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003840:	2300      	movs	r3, #0
 8003842:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003844:	2300      	movs	r3, #0
 8003846:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003848:	f107 0314 	add.w	r3, r7, #20
 800384c:	4619      	mov	r1, r3
 800384e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003852:	f000 fd31 	bl	80042b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_IRQ_Pin;
 8003856:	2380      	movs	r3, #128	@ 0x80
 8003858:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800385a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800385e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003860:	2302      	movs	r3, #2
 8003862:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI2_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003864:	f107 0314 	add.w	r3, r7, #20
 8003868:	4619      	mov	r1, r3
 800386a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800386e:	f000 fd23 	bl	80042b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_RST_Pin;
 8003872:	2340      	movs	r3, #64	@ 0x40
 8003874:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003876:	2301      	movs	r3, #1
 8003878:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800387a:	2300      	movs	r3, #0
 800387c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800387e:	2300      	movs	r3, #0
 8003880:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_RST_GPIO_Port, &GPIO_InitStruct);
 8003882:	f107 0314 	add.w	r3, r7, #20
 8003886:	4619      	mov	r1, r3
 8003888:	480f      	ldr	r0, [pc, #60]	@ (80038c8 <MX_GPIO_Init+0x148>)
 800388a:	f000 fd15 	bl	80042b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LoRA2_IRQ_Pin|LoRA1_IRQ_Pin;
 800388e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003892:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003894:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8003898:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800389a:	2302      	movs	r3, #2
 800389c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800389e:	f107 0314 	add.w	r3, r7, #20
 80038a2:	4619      	mov	r1, r3
 80038a4:	4808      	ldr	r0, [pc, #32]	@ (80038c8 <MX_GPIO_Init+0x148>)
 80038a6:	f000 fd07 	bl	80042b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80038aa:	2200      	movs	r2, #0
 80038ac:	2105      	movs	r1, #5
 80038ae:	2017      	movs	r0, #23
 80038b0:	f000 fcd8 	bl	8004264 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80038b4:	2017      	movs	r0, #23
 80038b6:	f000 fcf1 	bl	800429c <HAL_NVIC_EnableIRQ>

}
 80038ba:	bf00      	nop
 80038bc:	3728      	adds	r7, #40	@ 0x28
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	40021000 	.word	0x40021000
 80038c8:	48000400 	.word	0x48000400
 80038cc:	48000800 	.word	0x48000800

080038d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80038d4:	f000 fbce 	bl	8004074 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80038d8:	f000 f80c 	bl	80038f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80038dc:	f7ff ff50 	bl	8003780 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80038e0:	f000 fb12 	bl	8003f08 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80038e4:	f000 f876 	bl	80039d4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80038e8:	f7ff fda4 	bl	8003434 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80038ec:	f004 f857 	bl	800799e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80038f0:	bf00      	nop
 80038f2:	e7fd      	b.n	80038f0 <main+0x20>

080038f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b096      	sub	sp, #88	@ 0x58
 80038f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80038fa:	f107 0314 	add.w	r3, r7, #20
 80038fe:	2244      	movs	r2, #68	@ 0x44
 8003900:	2100      	movs	r1, #0
 8003902:	4618      	mov	r0, r3
 8003904:	f007 ff4e 	bl	800b7a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003908:	463b      	mov	r3, r7
 800390a:	2200      	movs	r2, #0
 800390c:	601a      	str	r2, [r3, #0]
 800390e:	605a      	str	r2, [r3, #4]
 8003910:	609a      	str	r2, [r3, #8]
 8003912:	60da      	str	r2, [r3, #12]
 8003914:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003916:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800391a:	f000 fedb 	bl	80046d4 <HAL_PWREx_ControlVoltageScaling>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d001      	beq.n	8003928 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8003924:	f000 f84a 	bl	80039bc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003928:	2302      	movs	r3, #2
 800392a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800392c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003930:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003932:	2310      	movs	r3, #16
 8003934:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003936:	2302      	movs	r3, #2
 8003938:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800393a:	2302      	movs	r3, #2
 800393c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800393e:	2301      	movs	r3, #1
 8003940:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8003942:	230a      	movs	r3, #10
 8003944:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003946:	2307      	movs	r3, #7
 8003948:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800394a:	2302      	movs	r3, #2
 800394c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800394e:	2302      	movs	r3, #2
 8003950:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003952:	f107 0314 	add.w	r3, r7, #20
 8003956:	4618      	mov	r0, r3
 8003958:	f000 ff12 	bl	8004780 <HAL_RCC_OscConfig>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8003962:	f000 f82b 	bl	80039bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003966:	230f      	movs	r3, #15
 8003968:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800396a:	2303      	movs	r3, #3
 800396c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800396e:	2300      	movs	r3, #0
 8003970:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003972:	2300      	movs	r3, #0
 8003974:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003976:	2300      	movs	r3, #0
 8003978:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800397a:	463b      	mov	r3, r7
 800397c:	2104      	movs	r1, #4
 800397e:	4618      	mov	r0, r3
 8003980:	f001 fada 	bl	8004f38 <HAL_RCC_ClockConfig>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800398a:	f000 f817 	bl	80039bc <Error_Handler>
  }
}
 800398e:	bf00      	nop
 8003990:	3758      	adds	r7, #88	@ 0x58
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
	...

08003998 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a04      	ldr	r2, [pc, #16]	@ (80039b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d101      	bne.n	80039ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80039aa:	f000 fb83 	bl	80040b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80039ae:	bf00      	nop
 80039b0:	3708      	adds	r7, #8
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	40012c00 	.word	0x40012c00

080039bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80039c0:	b672      	cpsid	i
}
 80039c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	logMemoryUsage("ERROR_HANDLER");
 80039c4:	4802      	ldr	r0, [pc, #8]	@ (80039d0 <Error_Handler+0x14>)
 80039c6:	f7ff fa73 	bl	8002eb0 <logMemoryUsage>
	while (1)
 80039ca:	bf00      	nop
 80039cc:	e7fd      	b.n	80039ca <Error_Handler+0xe>
 80039ce:	bf00      	nop
 80039d0:	0800e460 	.word	0x0800e460

080039d4 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80039d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003a48 <MX_SPI2_Init+0x74>)
 80039da:	4a1c      	ldr	r2, [pc, #112]	@ (8003a4c <MX_SPI2_Init+0x78>)
 80039dc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80039de:	4b1a      	ldr	r3, [pc, #104]	@ (8003a48 <MX_SPI2_Init+0x74>)
 80039e0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80039e4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80039e6:	4b18      	ldr	r3, [pc, #96]	@ (8003a48 <MX_SPI2_Init+0x74>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80039ec:	4b16      	ldr	r3, [pc, #88]	@ (8003a48 <MX_SPI2_Init+0x74>)
 80039ee:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80039f2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80039f4:	4b14      	ldr	r3, [pc, #80]	@ (8003a48 <MX_SPI2_Init+0x74>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80039fa:	4b13      	ldr	r3, [pc, #76]	@ (8003a48 <MX_SPI2_Init+0x74>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003a00:	4b11      	ldr	r3, [pc, #68]	@ (8003a48 <MX_SPI2_Init+0x74>)
 8003a02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a06:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003a08:	4b0f      	ldr	r3, [pc, #60]	@ (8003a48 <MX_SPI2_Init+0x74>)
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8003a48 <MX_SPI2_Init+0x74>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a14:	4b0c      	ldr	r3, [pc, #48]	@ (8003a48 <MX_SPI2_Init+0x74>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8003a48 <MX_SPI2_Init+0x74>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003a20:	4b09      	ldr	r3, [pc, #36]	@ (8003a48 <MX_SPI2_Init+0x74>)
 8003a22:	2207      	movs	r2, #7
 8003a24:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003a26:	4b08      	ldr	r3, [pc, #32]	@ (8003a48 <MX_SPI2_Init+0x74>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003a2c:	4b06      	ldr	r3, [pc, #24]	@ (8003a48 <MX_SPI2_Init+0x74>)
 8003a2e:	2208      	movs	r2, #8
 8003a30:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003a32:	4805      	ldr	r0, [pc, #20]	@ (8003a48 <MX_SPI2_Init+0x74>)
 8003a34:	f002 f992 	bl	8005d5c <HAL_SPI_Init>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d001      	beq.n	8003a42 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8003a3e:	f7ff ffbd 	bl	80039bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003a42:	bf00      	nop
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	200005c8 	.word	0x200005c8
 8003a4c:	40003800 	.word	0x40003800

08003a50 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b08a      	sub	sp, #40	@ 0x28
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a58:	f107 0314 	add.w	r3, r7, #20
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	601a      	str	r2, [r3, #0]
 8003a60:	605a      	str	r2, [r3, #4]
 8003a62:	609a      	str	r2, [r3, #8]
 8003a64:	60da      	str	r2, [r3, #12]
 8003a66:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a25      	ldr	r2, [pc, #148]	@ (8003b04 <HAL_SPI_MspInit+0xb4>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d144      	bne.n	8003afc <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003a72:	4b25      	ldr	r3, [pc, #148]	@ (8003b08 <HAL_SPI_MspInit+0xb8>)
 8003a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a76:	4a24      	ldr	r2, [pc, #144]	@ (8003b08 <HAL_SPI_MspInit+0xb8>)
 8003a78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a7e:	4b22      	ldr	r3, [pc, #136]	@ (8003b08 <HAL_SPI_MspInit+0xb8>)
 8003a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a86:	613b      	str	r3, [r7, #16]
 8003a88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a8a:	4b1f      	ldr	r3, [pc, #124]	@ (8003b08 <HAL_SPI_MspInit+0xb8>)
 8003a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a8e:	4a1e      	ldr	r2, [pc, #120]	@ (8003b08 <HAL_SPI_MspInit+0xb8>)
 8003a90:	f043 0304 	orr.w	r3, r3, #4
 8003a94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a96:	4b1c      	ldr	r3, [pc, #112]	@ (8003b08 <HAL_SPI_MspInit+0xb8>)
 8003a98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a9a:	f003 0304 	and.w	r3, r3, #4
 8003a9e:	60fb      	str	r3, [r7, #12]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aa2:	4b19      	ldr	r3, [pc, #100]	@ (8003b08 <HAL_SPI_MspInit+0xb8>)
 8003aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003aa6:	4a18      	ldr	r2, [pc, #96]	@ (8003b08 <HAL_SPI_MspInit+0xb8>)
 8003aa8:	f043 0302 	orr.w	r3, r3, #2
 8003aac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003aae:	4b16      	ldr	r3, [pc, #88]	@ (8003b08 <HAL_SPI_MspInit+0xb8>)
 8003ab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	60bb      	str	r3, [r7, #8]
 8003ab8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003aba:	230c      	movs	r3, #12
 8003abc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003abe:	2302      	movs	r3, #2
 8003ac0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003aca:	2305      	movs	r3, #5
 8003acc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ace:	f107 0314 	add.w	r3, r7, #20
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	480d      	ldr	r0, [pc, #52]	@ (8003b0c <HAL_SPI_MspInit+0xbc>)
 8003ad6:	f000 fbef 	bl	80042b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003ada:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003ade:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003aec:	2305      	movs	r3, #5
 8003aee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003af0:	f107 0314 	add.w	r3, r7, #20
 8003af4:	4619      	mov	r1, r3
 8003af6:	4806      	ldr	r0, [pc, #24]	@ (8003b10 <HAL_SPI_MspInit+0xc0>)
 8003af8:	f000 fbde 	bl	80042b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003afc:	bf00      	nop
 8003afe:	3728      	adds	r7, #40	@ 0x28
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	40003800 	.word	0x40003800
 8003b08:	40021000 	.word	0x40021000
 8003b0c:	48000800 	.word	0x48000800
 8003b10:	48000400 	.word	0x48000400

08003b14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b1a:	4b11      	ldr	r3, [pc, #68]	@ (8003b60 <HAL_MspInit+0x4c>)
 8003b1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b1e:	4a10      	ldr	r2, [pc, #64]	@ (8003b60 <HAL_MspInit+0x4c>)
 8003b20:	f043 0301 	orr.w	r3, r3, #1
 8003b24:	6613      	str	r3, [r2, #96]	@ 0x60
 8003b26:	4b0e      	ldr	r3, [pc, #56]	@ (8003b60 <HAL_MspInit+0x4c>)
 8003b28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	607b      	str	r3, [r7, #4]
 8003b30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b32:	4b0b      	ldr	r3, [pc, #44]	@ (8003b60 <HAL_MspInit+0x4c>)
 8003b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b36:	4a0a      	ldr	r2, [pc, #40]	@ (8003b60 <HAL_MspInit+0x4c>)
 8003b38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b3e:	4b08      	ldr	r3, [pc, #32]	@ (8003b60 <HAL_MspInit+0x4c>)
 8003b40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b46:	603b      	str	r3, [r7, #0]
 8003b48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	210f      	movs	r1, #15
 8003b4e:	f06f 0001 	mvn.w	r0, #1
 8003b52:	f000 fb87 	bl	8004264 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b56:	bf00      	nop
 8003b58:	3708      	adds	r7, #8
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	40021000 	.word	0x40021000

08003b64 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b08c      	sub	sp, #48	@ 0x30
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003b72:	4b2e      	ldr	r3, [pc, #184]	@ (8003c2c <HAL_InitTick+0xc8>)
 8003b74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b76:	4a2d      	ldr	r2, [pc, #180]	@ (8003c2c <HAL_InitTick+0xc8>)
 8003b78:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003b7c:	6613      	str	r3, [r2, #96]	@ 0x60
 8003b7e:	4b2b      	ldr	r3, [pc, #172]	@ (8003c2c <HAL_InitTick+0xc8>)
 8003b80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b86:	60bb      	str	r3, [r7, #8]
 8003b88:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003b8a:	f107 020c 	add.w	r2, r7, #12
 8003b8e:	f107 0310 	add.w	r3, r7, #16
 8003b92:	4611      	mov	r1, r2
 8003b94:	4618      	mov	r0, r3
 8003b96:	f001 fb93 	bl	80052c0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003b9a:	f001 fb7b 	bl	8005294 <HAL_RCC_GetPCLK2Freq>
 8003b9e:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ba2:	4a23      	ldr	r2, [pc, #140]	@ (8003c30 <HAL_InitTick+0xcc>)
 8003ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba8:	0c9b      	lsrs	r3, r3, #18
 8003baa:	3b01      	subs	r3, #1
 8003bac:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003bae:	4b21      	ldr	r3, [pc, #132]	@ (8003c34 <HAL_InitTick+0xd0>)
 8003bb0:	4a21      	ldr	r2, [pc, #132]	@ (8003c38 <HAL_InitTick+0xd4>)
 8003bb2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003bb4:	4b1f      	ldr	r3, [pc, #124]	@ (8003c34 <HAL_InitTick+0xd0>)
 8003bb6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003bba:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003bbc:	4a1d      	ldr	r2, [pc, #116]	@ (8003c34 <HAL_InitTick+0xd0>)
 8003bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc0:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003bc2:	4b1c      	ldr	r3, [pc, #112]	@ (8003c34 <HAL_InitTick+0xd0>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bc8:	4b1a      	ldr	r3, [pc, #104]	@ (8003c34 <HAL_InitTick+0xd0>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bce:	4b19      	ldr	r3, [pc, #100]	@ (8003c34 <HAL_InitTick+0xd0>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8003bd4:	4817      	ldr	r0, [pc, #92]	@ (8003c34 <HAL_InitTick+0xd0>)
 8003bd6:	f002 fe5f 	bl	8006898 <HAL_TIM_Base_Init>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8003be0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d11b      	bne.n	8003c20 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8003be8:	4812      	ldr	r0, [pc, #72]	@ (8003c34 <HAL_InitTick+0xd0>)
 8003bea:	f002 feb7 	bl	800695c <HAL_TIM_Base_Start_IT>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8003bf4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d111      	bne.n	8003c20 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003bfc:	2019      	movs	r0, #25
 8003bfe:	f000 fb4d 	bl	800429c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2b0f      	cmp	r3, #15
 8003c06:	d808      	bhi.n	8003c1a <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8003c08:	2200      	movs	r2, #0
 8003c0a:	6879      	ldr	r1, [r7, #4]
 8003c0c:	2019      	movs	r0, #25
 8003c0e:	f000 fb29 	bl	8004264 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003c12:	4a0a      	ldr	r2, [pc, #40]	@ (8003c3c <HAL_InitTick+0xd8>)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6013      	str	r3, [r2, #0]
 8003c18:	e002      	b.n	8003c20 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003c20:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3730      	adds	r7, #48	@ 0x30
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	40021000 	.word	0x40021000
 8003c30:	431bde83 	.word	0x431bde83
 8003c34:	2000062c 	.word	0x2000062c
 8003c38:	40012c00 	.word	0x40012c00
 8003c3c:	200000c4 	.word	0x200000c4

08003c40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c40:	b480      	push	{r7}
 8003c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8003c44:	bf00      	nop
 8003c46:	e7fd      	b.n	8003c44 <NMI_Handler+0x4>

08003c48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c4c:	bf00      	nop
 8003c4e:	e7fd      	b.n	8003c4c <HardFault_Handler+0x4>

08003c50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c50:	b480      	push	{r7}
 8003c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c54:	bf00      	nop
 8003c56:	e7fd      	b.n	8003c54 <MemManage_Handler+0x4>

08003c58 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c5c:	bf00      	nop
 8003c5e:	e7fd      	b.n	8003c5c <BusFault_Handler+0x4>

08003c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c60:	b480      	push	{r7}
 8003c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c64:	bf00      	nop
 8003c66:	e7fd      	b.n	8003c64 <UsageFault_Handler+0x4>

08003c68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c6c:	bf00      	nop
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
	...

08003c78 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(SPI2_IRQ_Pin) != RESET){
 8003c7e:	4b2d      	ldr	r3, [pc, #180]	@ (8003d34 <EXTI9_5_IRQHandler+0xbc>)
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d007      	beq.n	8003c9a <EXTI9_5_IRQHandler+0x22>
		osSemaphoreRelease(xSem_LORAReceive_startHandle);
 8003c8a:	4b2b      	ldr	r3, [pc, #172]	@ (8003d38 <EXTI9_5_IRQHandler+0xc0>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f003 fff0 	bl	8007c74 <osSemaphoreRelease>
		__HAL_GPIO_EXTI_CLEAR_FLAG(SPI2_IRQ_Pin);
 8003c94:	4b27      	ldr	r3, [pc, #156]	@ (8003d34 <EXTI9_5_IRQHandler+0xbc>)
 8003c96:	2280      	movs	r2, #128	@ 0x80
 8003c98:	615a      	str	r2, [r3, #20]
	}

	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	607b      	str	r3, [r7, #4]

	if (__HAL_GPIO_EXTI_GET_IT(LoRA1_IRQ_Pin) != RESET){
 8003c9e:	4b25      	ldr	r3, [pc, #148]	@ (8003d34 <EXTI9_5_IRQHandler+0xbc>)
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d011      	beq.n	8003cce <EXTI9_5_IRQHandler+0x56>
		HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin);
 8003caa:	2120      	movs	r1, #32
 8003cac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003cb0:	f000 fcc4 	bl	800463c <HAL_GPIO_TogglePin>
		xTaskNotifyFromISR(SenderLoRAHandle, (uint32_t)0x01, eSetValueWithOverwrite,&xHigherPriorityTaskWoken);
 8003cb4:	4b21      	ldr	r3, [pc, #132]	@ (8003d3c <EXTI9_5_IRQHandler+0xc4>)
 8003cb6:	6818      	ldr	r0, [r3, #0]
 8003cb8:	1d3b      	adds	r3, r7, #4
 8003cba:	9300      	str	r3, [sp, #0]
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	2203      	movs	r2, #3
 8003cc0:	2101      	movs	r1, #1
 8003cc2:	f006 f92d 	bl	8009f20 <xTaskGenericNotifyFromISR>
		__HAL_GPIO_EXTI_CLEAR_FLAG(LoRA1_IRQ_Pin);
 8003cc6:	4b1b      	ldr	r3, [pc, #108]	@ (8003d34 <EXTI9_5_IRQHandler+0xbc>)
 8003cc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ccc:	615a      	str	r2, [r3, #20]

	}
	if (__HAL_GPIO_EXTI_GET_IT(LoRA2_IRQ_Pin) != RESET){
 8003cce:	4b19      	ldr	r3, [pc, #100]	@ (8003d34 <EXTI9_5_IRQHandler+0xbc>)
 8003cd0:	695b      	ldr	r3, [r3, #20]
 8003cd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d011      	beq.n	8003cfe <EXTI9_5_IRQHandler+0x86>
		HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin);
 8003cda:	2120      	movs	r1, #32
 8003cdc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003ce0:	f000 fcac 	bl	800463c <HAL_GPIO_TogglePin>
		xTaskNotifyFromISR(SenderLoRAHandle, (uint32_t)0x02, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 8003ce4:	4b15      	ldr	r3, [pc, #84]	@ (8003d3c <EXTI9_5_IRQHandler+0xc4>)
 8003ce6:	6818      	ldr	r0, [r3, #0]
 8003ce8:	1d3b      	adds	r3, r7, #4
 8003cea:	9300      	str	r3, [sp, #0]
 8003cec:	2300      	movs	r3, #0
 8003cee:	2203      	movs	r2, #3
 8003cf0:	2102      	movs	r1, #2
 8003cf2:	f006 f915 	bl	8009f20 <xTaskGenericNotifyFromISR>
		__HAL_GPIO_EXTI_CLEAR_FLAG(LoRA2_IRQ_Pin);
 8003cf6:	4b0f      	ldr	r3, [pc, #60]	@ (8003d34 <EXTI9_5_IRQHandler+0xbc>)
 8003cf8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003cfc:	615a      	str	r2, [r3, #20]
	}

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPI2_IRQ_Pin);
 8003cfe:	2080      	movs	r0, #128	@ 0x80
 8003d00:	f000 fcb6 	bl	8004670 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LoRA2_IRQ_Pin);
 8003d04:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003d08:	f000 fcb2 	bl	8004670 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LoRA1_IRQ_Pin);
 8003d0c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003d10:	f000 fcae 	bl	8004670 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d007      	beq.n	8003d2a <EXTI9_5_IRQHandler+0xb2>
 8003d1a:	4b09      	ldr	r3, [pc, #36]	@ (8003d40 <EXTI9_5_IRQHandler+0xc8>)
 8003d1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d20:	601a      	str	r2, [r3, #0]
 8003d22:	f3bf 8f4f 	dsb	sy
 8003d26:	f3bf 8f6f 	isb	sy

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003d2a:	bf00      	nop
 8003d2c:	3708      	adds	r7, #8
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	40010400 	.word	0x40010400
 8003d38:	20000318 	.word	0x20000318
 8003d3c:	20000300 	.word	0x20000300
 8003d40:	e000ed04 	.word	0xe000ed04

08003d44 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003d48:	4802      	ldr	r0, [pc, #8]	@ (8003d54 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8003d4a:	f002 fe77 	bl	8006a3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003d4e:	bf00      	nop
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	2000062c 	.word	0x2000062c

08003d58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	af00      	add	r7, sp, #0
  return 1;
 8003d5c:	2301      	movs	r3, #1
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <_kill>:

int _kill(int pid, int sig)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003d72:	f007 fdd3 	bl	800b91c <__errno>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2216      	movs	r2, #22
 8003d7a:	601a      	str	r2, [r3, #0]
  return -1;
 8003d7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3708      	adds	r7, #8
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <_exit>:

void _exit (int status)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003d90:	f04f 31ff 	mov.w	r1, #4294967295
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f7ff ffe7 	bl	8003d68 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003d9a:	bf00      	nop
 8003d9c:	e7fd      	b.n	8003d9a <_exit+0x12>

08003d9e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003d9e:	b580      	push	{r7, lr}
 8003da0:	b086      	sub	sp, #24
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	60f8      	str	r0, [r7, #12]
 8003da6:	60b9      	str	r1, [r7, #8]
 8003da8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003daa:	2300      	movs	r3, #0
 8003dac:	617b      	str	r3, [r7, #20]
 8003dae:	e00a      	b.n	8003dc6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003db0:	f3af 8000 	nop.w
 8003db4:	4601      	mov	r1, r0
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	1c5a      	adds	r2, r3, #1
 8003dba:	60ba      	str	r2, [r7, #8]
 8003dbc:	b2ca      	uxtb	r2, r1
 8003dbe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	617b      	str	r3, [r7, #20]
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	dbf0      	blt.n	8003db0 <_read+0x12>
  }

  return len;
 8003dce:	687b      	ldr	r3, [r7, #4]
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3718      	adds	r7, #24
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003de4:	2300      	movs	r3, #0
 8003de6:	617b      	str	r3, [r7, #20]
 8003de8:	e009      	b.n	8003dfe <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	1c5a      	adds	r2, r3, #1
 8003dee:	60ba      	str	r2, [r7, #8]
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7ff f844 	bl	8002e80 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	617b      	str	r3, [r7, #20]
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	dbf1      	blt.n	8003dea <_write+0x12>
  }
  return len;
 8003e06:	687b      	ldr	r3, [r7, #4]
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3718      	adds	r7, #24
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <_close>:

int _close(int file)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003e18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003e38:	605a      	str	r2, [r3, #4]
  return 0;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <_isatty>:

int _isatty(int file)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003e50:	2301      	movs	r3, #1
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	370c      	adds	r7, #12
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr

08003e5e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003e5e:	b480      	push	{r7}
 8003e60:	b085      	sub	sp, #20
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	60f8      	str	r0, [r7, #12]
 8003e66:	60b9      	str	r1, [r7, #8]
 8003e68:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3714      	adds	r7, #20
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e80:	4a14      	ldr	r2, [pc, #80]	@ (8003ed4 <_sbrk+0x5c>)
 8003e82:	4b15      	ldr	r3, [pc, #84]	@ (8003ed8 <_sbrk+0x60>)
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e8c:	4b13      	ldr	r3, [pc, #76]	@ (8003edc <_sbrk+0x64>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d102      	bne.n	8003e9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e94:	4b11      	ldr	r3, [pc, #68]	@ (8003edc <_sbrk+0x64>)
 8003e96:	4a12      	ldr	r2, [pc, #72]	@ (8003ee0 <_sbrk+0x68>)
 8003e98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e9a:	4b10      	ldr	r3, [pc, #64]	@ (8003edc <_sbrk+0x64>)
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d207      	bcs.n	8003eb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ea8:	f007 fd38 	bl	800b91c <__errno>
 8003eac:	4603      	mov	r3, r0
 8003eae:	220c      	movs	r2, #12
 8003eb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8003eb6:	e009      	b.n	8003ecc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003eb8:	4b08      	ldr	r3, [pc, #32]	@ (8003edc <_sbrk+0x64>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ebe:	4b07      	ldr	r3, [pc, #28]	@ (8003edc <_sbrk+0x64>)
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	4a05      	ldr	r2, [pc, #20]	@ (8003edc <_sbrk+0x64>)
 8003ec8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003eca:	68fb      	ldr	r3, [r7, #12]
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3718      	adds	r7, #24
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	20018000 	.word	0x20018000
 8003ed8:	00000400 	.word	0x00000400
 8003edc:	20000678 	.word	0x20000678
 8003ee0:	200057d0 	.word	0x200057d0

08003ee4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003ee8:	4b06      	ldr	r3, [pc, #24]	@ (8003f04 <SystemInit+0x20>)
 8003eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eee:	4a05      	ldr	r2, [pc, #20]	@ (8003f04 <SystemInit+0x20>)
 8003ef0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003ef4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8003ef8:	bf00      	nop
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	e000ed00 	.word	0xe000ed00

08003f08 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003f0c:	4b14      	ldr	r3, [pc, #80]	@ (8003f60 <MX_USART2_UART_Init+0x58>)
 8003f0e:	4a15      	ldr	r2, [pc, #84]	@ (8003f64 <MX_USART2_UART_Init+0x5c>)
 8003f10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003f12:	4b13      	ldr	r3, [pc, #76]	@ (8003f60 <MX_USART2_UART_Init+0x58>)
 8003f14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003f18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003f1a:	4b11      	ldr	r3, [pc, #68]	@ (8003f60 <MX_USART2_UART_Init+0x58>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003f20:	4b0f      	ldr	r3, [pc, #60]	@ (8003f60 <MX_USART2_UART_Init+0x58>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003f26:	4b0e      	ldr	r3, [pc, #56]	@ (8003f60 <MX_USART2_UART_Init+0x58>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8003f60 <MX_USART2_UART_Init+0x58>)
 8003f2e:	220c      	movs	r2, #12
 8003f30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f32:	4b0b      	ldr	r3, [pc, #44]	@ (8003f60 <MX_USART2_UART_Init+0x58>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f38:	4b09      	ldr	r3, [pc, #36]	@ (8003f60 <MX_USART2_UART_Init+0x58>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003f3e:	4b08      	ldr	r3, [pc, #32]	@ (8003f60 <MX_USART2_UART_Init+0x58>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003f44:	4b06      	ldr	r3, [pc, #24]	@ (8003f60 <MX_USART2_UART_Init+0x58>)
 8003f46:	2200      	movs	r2, #0
 8003f48:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003f4a:	4805      	ldr	r0, [pc, #20]	@ (8003f60 <MX_USART2_UART_Init+0x58>)
 8003f4c:	f002 ff58 	bl	8006e00 <HAL_UART_Init>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003f56:	f7ff fd31 	bl	80039bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003f5a:	bf00      	nop
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	2000067c 	.word	0x2000067c
 8003f64:	40004400 	.word	0x40004400

08003f68 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b0ac      	sub	sp, #176	@ 0xb0
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f70:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003f74:	2200      	movs	r2, #0
 8003f76:	601a      	str	r2, [r3, #0]
 8003f78:	605a      	str	r2, [r3, #4]
 8003f7a:	609a      	str	r2, [r3, #8]
 8003f7c:	60da      	str	r2, [r3, #12]
 8003f7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003f80:	f107 0314 	add.w	r3, r7, #20
 8003f84:	2288      	movs	r2, #136	@ 0x88
 8003f86:	2100      	movs	r1, #0
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f007 fc0b 	bl	800b7a4 <memset>
  if(uartHandle->Instance==USART2)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a21      	ldr	r2, [pc, #132]	@ (8004018 <HAL_UART_MspInit+0xb0>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d13b      	bne.n	8004010 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003f98:	2302      	movs	r3, #2
 8003f9a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003fa0:	f107 0314 	add.w	r3, r7, #20
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f001 fa1d 	bl	80053e4 <HAL_RCCEx_PeriphCLKConfig>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d001      	beq.n	8003fb4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003fb0:	f7ff fd04 	bl	80039bc <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003fb4:	4b19      	ldr	r3, [pc, #100]	@ (800401c <HAL_UART_MspInit+0xb4>)
 8003fb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fb8:	4a18      	ldr	r2, [pc, #96]	@ (800401c <HAL_UART_MspInit+0xb4>)
 8003fba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fbe:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fc0:	4b16      	ldr	r3, [pc, #88]	@ (800401c <HAL_UART_MspInit+0xb4>)
 8003fc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fc8:	613b      	str	r3, [r7, #16]
 8003fca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fcc:	4b13      	ldr	r3, [pc, #76]	@ (800401c <HAL_UART_MspInit+0xb4>)
 8003fce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fd0:	4a12      	ldr	r2, [pc, #72]	@ (800401c <HAL_UART_MspInit+0xb4>)
 8003fd2:	f043 0301 	orr.w	r3, r3, #1
 8003fd6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003fd8:	4b10      	ldr	r3, [pc, #64]	@ (800401c <HAL_UART_MspInit+0xb4>)
 8003fda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fdc:	f003 0301 	and.w	r3, r3, #1
 8003fe0:	60fb      	str	r3, [r7, #12]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003fe4:	230c      	movs	r3, #12
 8003fe6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fea:	2302      	movs	r3, #2
 8003fec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003ffc:	2307      	movs	r3, #7
 8003ffe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004002:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004006:	4619      	mov	r1, r3
 8004008:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800400c:	f000 f954 	bl	80042b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004010:	bf00      	nop
 8004012:	37b0      	adds	r7, #176	@ 0xb0
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	40004400 	.word	0x40004400
 800401c:	40021000 	.word	0x40021000

08004020 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004020:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004058 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004024:	f7ff ff5e 	bl	8003ee4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004028:	480c      	ldr	r0, [pc, #48]	@ (800405c <LoopForever+0x6>)
  ldr r1, =_edata
 800402a:	490d      	ldr	r1, [pc, #52]	@ (8004060 <LoopForever+0xa>)
  ldr r2, =_sidata
 800402c:	4a0d      	ldr	r2, [pc, #52]	@ (8004064 <LoopForever+0xe>)
  movs r3, #0
 800402e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004030:	e002      	b.n	8004038 <LoopCopyDataInit>

08004032 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004032:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004034:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004036:	3304      	adds	r3, #4

08004038 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004038:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800403a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800403c:	d3f9      	bcc.n	8004032 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800403e:	4a0a      	ldr	r2, [pc, #40]	@ (8004068 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004040:	4c0a      	ldr	r4, [pc, #40]	@ (800406c <LoopForever+0x16>)
  movs r3, #0
 8004042:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004044:	e001      	b.n	800404a <LoopFillZerobss>

08004046 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004046:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004048:	3204      	adds	r2, #4

0800404a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800404a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800404c:	d3fb      	bcc.n	8004046 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800404e:	f007 fc6b 	bl	800b928 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004052:	f7ff fc3d 	bl	80038d0 <main>

08004056 <LoopForever>:

LoopForever:
    b LoopForever
 8004056:	e7fe      	b.n	8004056 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004058:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800405c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004060:	20000298 	.word	0x20000298
  ldr r2, =_sidata
 8004064:	0800e890 	.word	0x0800e890
  ldr r2, =_sbss
 8004068:	20000298 	.word	0x20000298
  ldr r4, =_ebss
 800406c:	200057d0 	.word	0x200057d0

08004070 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004070:	e7fe      	b.n	8004070 <ADC1_2_IRQHandler>
	...

08004074 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800407a:	2300      	movs	r3, #0
 800407c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800407e:	4b0c      	ldr	r3, [pc, #48]	@ (80040b0 <HAL_Init+0x3c>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a0b      	ldr	r2, [pc, #44]	@ (80040b0 <HAL_Init+0x3c>)
 8004084:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004088:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800408a:	2003      	movs	r0, #3
 800408c:	f000 f8df 	bl	800424e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004090:	200f      	movs	r0, #15
 8004092:	f7ff fd67 	bl	8003b64 <HAL_InitTick>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d002      	beq.n	80040a2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	71fb      	strb	r3, [r7, #7]
 80040a0:	e001      	b.n	80040a6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80040a2:	f7ff fd37 	bl	8003b14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80040a6:	79fb      	ldrb	r3, [r7, #7]
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3708      	adds	r7, #8
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	40022000 	.word	0x40022000

080040b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040b4:	b480      	push	{r7}
 80040b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80040b8:	4b06      	ldr	r3, [pc, #24]	@ (80040d4 <HAL_IncTick+0x20>)
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	461a      	mov	r2, r3
 80040be:	4b06      	ldr	r3, [pc, #24]	@ (80040d8 <HAL_IncTick+0x24>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4413      	add	r3, r2
 80040c4:	4a04      	ldr	r2, [pc, #16]	@ (80040d8 <HAL_IncTick+0x24>)
 80040c6:	6013      	str	r3, [r2, #0]
}
 80040c8:	bf00      	nop
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	200000c8 	.word	0x200000c8
 80040d8:	20000704 	.word	0x20000704

080040dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040dc:	b480      	push	{r7}
 80040de:	af00      	add	r7, sp, #0
  return uwTick;
 80040e0:	4b03      	ldr	r3, [pc, #12]	@ (80040f0 <HAL_GetTick+0x14>)
 80040e2:	681b      	ldr	r3, [r3, #0]
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	20000704 	.word	0x20000704

080040f4 <__NVIC_SetPriorityGrouping>:
{
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f003 0307 	and.w	r3, r3, #7
 8004102:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004104:	4b0c      	ldr	r3, [pc, #48]	@ (8004138 <__NVIC_SetPriorityGrouping+0x44>)
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800410a:	68ba      	ldr	r2, [r7, #8]
 800410c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004110:	4013      	ands	r3, r2
 8004112:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800411c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004120:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004124:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004126:	4a04      	ldr	r2, [pc, #16]	@ (8004138 <__NVIC_SetPriorityGrouping+0x44>)
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	60d3      	str	r3, [r2, #12]
}
 800412c:	bf00      	nop
 800412e:	3714      	adds	r7, #20
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr
 8004138:	e000ed00 	.word	0xe000ed00

0800413c <__NVIC_GetPriorityGrouping>:
{
 800413c:	b480      	push	{r7}
 800413e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004140:	4b04      	ldr	r3, [pc, #16]	@ (8004154 <__NVIC_GetPriorityGrouping+0x18>)
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	0a1b      	lsrs	r3, r3, #8
 8004146:	f003 0307 	and.w	r3, r3, #7
}
 800414a:	4618      	mov	r0, r3
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr
 8004154:	e000ed00 	.word	0xe000ed00

08004158 <__NVIC_EnableIRQ>:
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	4603      	mov	r3, r0
 8004160:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004166:	2b00      	cmp	r3, #0
 8004168:	db0b      	blt.n	8004182 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800416a:	79fb      	ldrb	r3, [r7, #7]
 800416c:	f003 021f 	and.w	r2, r3, #31
 8004170:	4907      	ldr	r1, [pc, #28]	@ (8004190 <__NVIC_EnableIRQ+0x38>)
 8004172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004176:	095b      	lsrs	r3, r3, #5
 8004178:	2001      	movs	r0, #1
 800417a:	fa00 f202 	lsl.w	r2, r0, r2
 800417e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004182:	bf00      	nop
 8004184:	370c      	adds	r7, #12
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	e000e100 	.word	0xe000e100

08004194 <__NVIC_SetPriority>:
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	4603      	mov	r3, r0
 800419c:	6039      	str	r1, [r7, #0]
 800419e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	db0a      	blt.n	80041be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	b2da      	uxtb	r2, r3
 80041ac:	490c      	ldr	r1, [pc, #48]	@ (80041e0 <__NVIC_SetPriority+0x4c>)
 80041ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041b2:	0112      	lsls	r2, r2, #4
 80041b4:	b2d2      	uxtb	r2, r2
 80041b6:	440b      	add	r3, r1
 80041b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80041bc:	e00a      	b.n	80041d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	b2da      	uxtb	r2, r3
 80041c2:	4908      	ldr	r1, [pc, #32]	@ (80041e4 <__NVIC_SetPriority+0x50>)
 80041c4:	79fb      	ldrb	r3, [r7, #7]
 80041c6:	f003 030f 	and.w	r3, r3, #15
 80041ca:	3b04      	subs	r3, #4
 80041cc:	0112      	lsls	r2, r2, #4
 80041ce:	b2d2      	uxtb	r2, r2
 80041d0:	440b      	add	r3, r1
 80041d2:	761a      	strb	r2, [r3, #24]
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr
 80041e0:	e000e100 	.word	0xe000e100
 80041e4:	e000ed00 	.word	0xe000ed00

080041e8 <NVIC_EncodePriority>:
{
 80041e8:	b480      	push	{r7}
 80041ea:	b089      	sub	sp, #36	@ 0x24
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f003 0307 	and.w	r3, r3, #7
 80041fa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	f1c3 0307 	rsb	r3, r3, #7
 8004202:	2b04      	cmp	r3, #4
 8004204:	bf28      	it	cs
 8004206:	2304      	movcs	r3, #4
 8004208:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	3304      	adds	r3, #4
 800420e:	2b06      	cmp	r3, #6
 8004210:	d902      	bls.n	8004218 <NVIC_EncodePriority+0x30>
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	3b03      	subs	r3, #3
 8004216:	e000      	b.n	800421a <NVIC_EncodePriority+0x32>
 8004218:	2300      	movs	r3, #0
 800421a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800421c:	f04f 32ff 	mov.w	r2, #4294967295
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	fa02 f303 	lsl.w	r3, r2, r3
 8004226:	43da      	mvns	r2, r3
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	401a      	ands	r2, r3
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004230:	f04f 31ff 	mov.w	r1, #4294967295
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	fa01 f303 	lsl.w	r3, r1, r3
 800423a:	43d9      	mvns	r1, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004240:	4313      	orrs	r3, r2
}
 8004242:	4618      	mov	r0, r3
 8004244:	3724      	adds	r7, #36	@ 0x24
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr

0800424e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800424e:	b580      	push	{r7, lr}
 8004250:	b082      	sub	sp, #8
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f7ff ff4c 	bl	80040f4 <__NVIC_SetPriorityGrouping>
}
 800425c:	bf00      	nop
 800425e:	3708      	adds	r7, #8
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b086      	sub	sp, #24
 8004268:	af00      	add	r7, sp, #0
 800426a:	4603      	mov	r3, r0
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
 8004270:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004272:	2300      	movs	r3, #0
 8004274:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004276:	f7ff ff61 	bl	800413c <__NVIC_GetPriorityGrouping>
 800427a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	68b9      	ldr	r1, [r7, #8]
 8004280:	6978      	ldr	r0, [r7, #20]
 8004282:	f7ff ffb1 	bl	80041e8 <NVIC_EncodePriority>
 8004286:	4602      	mov	r2, r0
 8004288:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800428c:	4611      	mov	r1, r2
 800428e:	4618      	mov	r0, r3
 8004290:	f7ff ff80 	bl	8004194 <__NVIC_SetPriority>
}
 8004294:	bf00      	nop
 8004296:	3718      	adds	r7, #24
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b082      	sub	sp, #8
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	4603      	mov	r3, r0
 80042a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7ff ff54 	bl	8004158 <__NVIC_EnableIRQ>
}
 80042b0:	bf00      	nop
 80042b2:	3708      	adds	r7, #8
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b087      	sub	sp, #28
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80042c2:	2300      	movs	r3, #0
 80042c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042c6:	e17f      	b.n	80045c8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	2101      	movs	r1, #1
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	fa01 f303 	lsl.w	r3, r1, r3
 80042d4:	4013      	ands	r3, r2
 80042d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	f000 8171 	beq.w	80045c2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	f003 0303 	and.w	r3, r3, #3
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d005      	beq.n	80042f8 <HAL_GPIO_Init+0x40>
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f003 0303 	and.w	r3, r3, #3
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d130      	bne.n	800435a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	005b      	lsls	r3, r3, #1
 8004302:	2203      	movs	r2, #3
 8004304:	fa02 f303 	lsl.w	r3, r2, r3
 8004308:	43db      	mvns	r3, r3
 800430a:	693a      	ldr	r2, [r7, #16]
 800430c:	4013      	ands	r3, r2
 800430e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	68da      	ldr	r2, [r3, #12]
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	005b      	lsls	r3, r3, #1
 8004318:	fa02 f303 	lsl.w	r3, r2, r3
 800431c:	693a      	ldr	r2, [r7, #16]
 800431e:	4313      	orrs	r3, r2
 8004320:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	693a      	ldr	r2, [r7, #16]
 8004326:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800432e:	2201      	movs	r2, #1
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	fa02 f303 	lsl.w	r3, r2, r3
 8004336:	43db      	mvns	r3, r3
 8004338:	693a      	ldr	r2, [r7, #16]
 800433a:	4013      	ands	r3, r2
 800433c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	091b      	lsrs	r3, r3, #4
 8004344:	f003 0201 	and.w	r2, r3, #1
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	fa02 f303 	lsl.w	r3, r2, r3
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	4313      	orrs	r3, r2
 8004352:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	693a      	ldr	r2, [r7, #16]
 8004358:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f003 0303 	and.w	r3, r3, #3
 8004362:	2b03      	cmp	r3, #3
 8004364:	d118      	bne.n	8004398 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800436a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800436c:	2201      	movs	r2, #1
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	fa02 f303 	lsl.w	r3, r2, r3
 8004374:	43db      	mvns	r3, r3
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	4013      	ands	r3, r2
 800437a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	08db      	lsrs	r3, r3, #3
 8004382:	f003 0201 	and.w	r2, r3, #1
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	fa02 f303 	lsl.w	r3, r2, r3
 800438c:	693a      	ldr	r2, [r7, #16]
 800438e:	4313      	orrs	r3, r2
 8004390:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	693a      	ldr	r2, [r7, #16]
 8004396:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f003 0303 	and.w	r3, r3, #3
 80043a0:	2b03      	cmp	r3, #3
 80043a2:	d017      	beq.n	80043d4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	005b      	lsls	r3, r3, #1
 80043ae:	2203      	movs	r2, #3
 80043b0:	fa02 f303 	lsl.w	r3, r2, r3
 80043b4:	43db      	mvns	r3, r3
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	4013      	ands	r3, r2
 80043ba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	689a      	ldr	r2, [r3, #8]
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	005b      	lsls	r3, r3, #1
 80043c4:	fa02 f303 	lsl.w	r3, r2, r3
 80043c8:	693a      	ldr	r2, [r7, #16]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	693a      	ldr	r2, [r7, #16]
 80043d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f003 0303 	and.w	r3, r3, #3
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d123      	bne.n	8004428 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	08da      	lsrs	r2, r3, #3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	3208      	adds	r2, #8
 80043e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f003 0307 	and.w	r3, r3, #7
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	220f      	movs	r2, #15
 80043f8:	fa02 f303 	lsl.w	r3, r2, r3
 80043fc:	43db      	mvns	r3, r3
 80043fe:	693a      	ldr	r2, [r7, #16]
 8004400:	4013      	ands	r3, r2
 8004402:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	691a      	ldr	r2, [r3, #16]
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	f003 0307 	and.w	r3, r3, #7
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	fa02 f303 	lsl.w	r3, r2, r3
 8004414:	693a      	ldr	r2, [r7, #16]
 8004416:	4313      	orrs	r3, r2
 8004418:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	08da      	lsrs	r2, r3, #3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	3208      	adds	r2, #8
 8004422:	6939      	ldr	r1, [r7, #16]
 8004424:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	005b      	lsls	r3, r3, #1
 8004432:	2203      	movs	r2, #3
 8004434:	fa02 f303 	lsl.w	r3, r2, r3
 8004438:	43db      	mvns	r3, r3
 800443a:	693a      	ldr	r2, [r7, #16]
 800443c:	4013      	ands	r3, r2
 800443e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f003 0203 	and.w	r2, r3, #3
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	005b      	lsls	r3, r3, #1
 800444c:	fa02 f303 	lsl.w	r3, r2, r3
 8004450:	693a      	ldr	r2, [r7, #16]
 8004452:	4313      	orrs	r3, r2
 8004454:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004464:	2b00      	cmp	r3, #0
 8004466:	f000 80ac 	beq.w	80045c2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800446a:	4b5f      	ldr	r3, [pc, #380]	@ (80045e8 <HAL_GPIO_Init+0x330>)
 800446c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800446e:	4a5e      	ldr	r2, [pc, #376]	@ (80045e8 <HAL_GPIO_Init+0x330>)
 8004470:	f043 0301 	orr.w	r3, r3, #1
 8004474:	6613      	str	r3, [r2, #96]	@ 0x60
 8004476:	4b5c      	ldr	r3, [pc, #368]	@ (80045e8 <HAL_GPIO_Init+0x330>)
 8004478:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800447a:	f003 0301 	and.w	r3, r3, #1
 800447e:	60bb      	str	r3, [r7, #8]
 8004480:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004482:	4a5a      	ldr	r2, [pc, #360]	@ (80045ec <HAL_GPIO_Init+0x334>)
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	089b      	lsrs	r3, r3, #2
 8004488:	3302      	adds	r3, #2
 800448a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800448e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	f003 0303 	and.w	r3, r3, #3
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	220f      	movs	r2, #15
 800449a:	fa02 f303 	lsl.w	r3, r2, r3
 800449e:	43db      	mvns	r3, r3
 80044a0:	693a      	ldr	r2, [r7, #16]
 80044a2:	4013      	ands	r3, r2
 80044a4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80044ac:	d025      	beq.n	80044fa <HAL_GPIO_Init+0x242>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a4f      	ldr	r2, [pc, #316]	@ (80045f0 <HAL_GPIO_Init+0x338>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d01f      	beq.n	80044f6 <HAL_GPIO_Init+0x23e>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a4e      	ldr	r2, [pc, #312]	@ (80045f4 <HAL_GPIO_Init+0x33c>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d019      	beq.n	80044f2 <HAL_GPIO_Init+0x23a>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a4d      	ldr	r2, [pc, #308]	@ (80045f8 <HAL_GPIO_Init+0x340>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d013      	beq.n	80044ee <HAL_GPIO_Init+0x236>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a4c      	ldr	r2, [pc, #304]	@ (80045fc <HAL_GPIO_Init+0x344>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d00d      	beq.n	80044ea <HAL_GPIO_Init+0x232>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a4b      	ldr	r2, [pc, #300]	@ (8004600 <HAL_GPIO_Init+0x348>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d007      	beq.n	80044e6 <HAL_GPIO_Init+0x22e>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a4a      	ldr	r2, [pc, #296]	@ (8004604 <HAL_GPIO_Init+0x34c>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d101      	bne.n	80044e2 <HAL_GPIO_Init+0x22a>
 80044de:	2306      	movs	r3, #6
 80044e0:	e00c      	b.n	80044fc <HAL_GPIO_Init+0x244>
 80044e2:	2307      	movs	r3, #7
 80044e4:	e00a      	b.n	80044fc <HAL_GPIO_Init+0x244>
 80044e6:	2305      	movs	r3, #5
 80044e8:	e008      	b.n	80044fc <HAL_GPIO_Init+0x244>
 80044ea:	2304      	movs	r3, #4
 80044ec:	e006      	b.n	80044fc <HAL_GPIO_Init+0x244>
 80044ee:	2303      	movs	r3, #3
 80044f0:	e004      	b.n	80044fc <HAL_GPIO_Init+0x244>
 80044f2:	2302      	movs	r3, #2
 80044f4:	e002      	b.n	80044fc <HAL_GPIO_Init+0x244>
 80044f6:	2301      	movs	r3, #1
 80044f8:	e000      	b.n	80044fc <HAL_GPIO_Init+0x244>
 80044fa:	2300      	movs	r3, #0
 80044fc:	697a      	ldr	r2, [r7, #20]
 80044fe:	f002 0203 	and.w	r2, r2, #3
 8004502:	0092      	lsls	r2, r2, #2
 8004504:	4093      	lsls	r3, r2
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	4313      	orrs	r3, r2
 800450a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800450c:	4937      	ldr	r1, [pc, #220]	@ (80045ec <HAL_GPIO_Init+0x334>)
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	089b      	lsrs	r3, r3, #2
 8004512:	3302      	adds	r3, #2
 8004514:	693a      	ldr	r2, [r7, #16]
 8004516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800451a:	4b3b      	ldr	r3, [pc, #236]	@ (8004608 <HAL_GPIO_Init+0x350>)
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	43db      	mvns	r3, r3
 8004524:	693a      	ldr	r2, [r7, #16]
 8004526:	4013      	ands	r3, r2
 8004528:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d003      	beq.n	800453e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004536:	693a      	ldr	r2, [r7, #16]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	4313      	orrs	r3, r2
 800453c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800453e:	4a32      	ldr	r2, [pc, #200]	@ (8004608 <HAL_GPIO_Init+0x350>)
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004544:	4b30      	ldr	r3, [pc, #192]	@ (8004608 <HAL_GPIO_Init+0x350>)
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	43db      	mvns	r3, r3
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	4013      	ands	r3, r2
 8004552:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d003      	beq.n	8004568 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004560:	693a      	ldr	r2, [r7, #16]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	4313      	orrs	r3, r2
 8004566:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004568:	4a27      	ldr	r2, [pc, #156]	@ (8004608 <HAL_GPIO_Init+0x350>)
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800456e:	4b26      	ldr	r3, [pc, #152]	@ (8004608 <HAL_GPIO_Init+0x350>)
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	43db      	mvns	r3, r3
 8004578:	693a      	ldr	r2, [r7, #16]
 800457a:	4013      	ands	r3, r2
 800457c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d003      	beq.n	8004592 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800458a:	693a      	ldr	r2, [r7, #16]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	4313      	orrs	r3, r2
 8004590:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004592:	4a1d      	ldr	r2, [pc, #116]	@ (8004608 <HAL_GPIO_Init+0x350>)
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004598:	4b1b      	ldr	r3, [pc, #108]	@ (8004608 <HAL_GPIO_Init+0x350>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	43db      	mvns	r3, r3
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	4013      	ands	r3, r2
 80045a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d003      	beq.n	80045bc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80045b4:	693a      	ldr	r2, [r7, #16]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80045bc:	4a12      	ldr	r2, [pc, #72]	@ (8004608 <HAL_GPIO_Init+0x350>)
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	3301      	adds	r3, #1
 80045c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	fa22 f303 	lsr.w	r3, r2, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f47f ae78 	bne.w	80042c8 <HAL_GPIO_Init+0x10>
  }
}
 80045d8:	bf00      	nop
 80045da:	bf00      	nop
 80045dc:	371c      	adds	r7, #28
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	40021000 	.word	0x40021000
 80045ec:	40010000 	.word	0x40010000
 80045f0:	48000400 	.word	0x48000400
 80045f4:	48000800 	.word	0x48000800
 80045f8:	48000c00 	.word	0x48000c00
 80045fc:	48001000 	.word	0x48001000
 8004600:	48001400 	.word	0x48001400
 8004604:	48001800 	.word	0x48001800
 8004608:	40010400 	.word	0x40010400

0800460c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	460b      	mov	r3, r1
 8004616:	807b      	strh	r3, [r7, #2]
 8004618:	4613      	mov	r3, r2
 800461a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800461c:	787b      	ldrb	r3, [r7, #1]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d003      	beq.n	800462a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004622:	887a      	ldrh	r2, [r7, #2]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004628:	e002      	b.n	8004630 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800462a:	887a      	ldrh	r2, [r7, #2]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004630:	bf00      	nop
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800463c:	b480      	push	{r7}
 800463e:	b085      	sub	sp, #20
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	460b      	mov	r3, r1
 8004646:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	695b      	ldr	r3, [r3, #20]
 800464c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800464e:	887a      	ldrh	r2, [r7, #2]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	4013      	ands	r3, r2
 8004654:	041a      	lsls	r2, r3, #16
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	43d9      	mvns	r1, r3
 800465a:	887b      	ldrh	r3, [r7, #2]
 800465c:	400b      	ands	r3, r1
 800465e:	431a      	orrs	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	619a      	str	r2, [r3, #24]
}
 8004664:	bf00      	nop
 8004666:	3714      	adds	r7, #20
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	4603      	mov	r3, r0
 8004678:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800467a:	4b08      	ldr	r3, [pc, #32]	@ (800469c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800467c:	695a      	ldr	r2, [r3, #20]
 800467e:	88fb      	ldrh	r3, [r7, #6]
 8004680:	4013      	ands	r3, r2
 8004682:	2b00      	cmp	r3, #0
 8004684:	d006      	beq.n	8004694 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004686:	4a05      	ldr	r2, [pc, #20]	@ (800469c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004688:	88fb      	ldrh	r3, [r7, #6]
 800468a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800468c:	88fb      	ldrh	r3, [r7, #6]
 800468e:	4618      	mov	r0, r3
 8004690:	f000 f806 	bl	80046a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004694:	bf00      	nop
 8004696:	3708      	adds	r7, #8
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	40010400 	.word	0x40010400

080046a0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	4603      	mov	r3, r0
 80046a8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80046aa:	bf00      	nop
 80046ac:	370c      	adds	r7, #12
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
	...

080046b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80046b8:	b480      	push	{r7}
 80046ba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80046bc:	4b04      	ldr	r3, [pc, #16]	@ (80046d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	40007000 	.word	0x40007000

080046d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b085      	sub	sp, #20
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046e2:	d130      	bne.n	8004746 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80046e4:	4b23      	ldr	r3, [pc, #140]	@ (8004774 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80046ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046f0:	d038      	beq.n	8004764 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80046f2:	4b20      	ldr	r3, [pc, #128]	@ (8004774 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80046fa:	4a1e      	ldr	r2, [pc, #120]	@ (8004774 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046fc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004700:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004702:	4b1d      	ldr	r3, [pc, #116]	@ (8004778 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2232      	movs	r2, #50	@ 0x32
 8004708:	fb02 f303 	mul.w	r3, r2, r3
 800470c:	4a1b      	ldr	r2, [pc, #108]	@ (800477c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800470e:	fba2 2303 	umull	r2, r3, r2, r3
 8004712:	0c9b      	lsrs	r3, r3, #18
 8004714:	3301      	adds	r3, #1
 8004716:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004718:	e002      	b.n	8004720 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	3b01      	subs	r3, #1
 800471e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004720:	4b14      	ldr	r3, [pc, #80]	@ (8004774 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004722:	695b      	ldr	r3, [r3, #20]
 8004724:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004728:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800472c:	d102      	bne.n	8004734 <HAL_PWREx_ControlVoltageScaling+0x60>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d1f2      	bne.n	800471a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004734:	4b0f      	ldr	r3, [pc, #60]	@ (8004774 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004736:	695b      	ldr	r3, [r3, #20]
 8004738:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800473c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004740:	d110      	bne.n	8004764 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e00f      	b.n	8004766 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004746:	4b0b      	ldr	r3, [pc, #44]	@ (8004774 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800474e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004752:	d007      	beq.n	8004764 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004754:	4b07      	ldr	r3, [pc, #28]	@ (8004774 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800475c:	4a05      	ldr	r2, [pc, #20]	@ (8004774 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800475e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004762:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3714      	adds	r7, #20
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	40007000 	.word	0x40007000
 8004778:	200000c0 	.word	0x200000c0
 800477c:	431bde83 	.word	0x431bde83

08004780 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b088      	sub	sp, #32
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d101      	bne.n	8004792 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e3ca      	b.n	8004f28 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004792:	4b97      	ldr	r3, [pc, #604]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f003 030c 	and.w	r3, r3, #12
 800479a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800479c:	4b94      	ldr	r3, [pc, #592]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	f003 0303 	and.w	r3, r3, #3
 80047a4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0310 	and.w	r3, r3, #16
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	f000 80e4 	beq.w	800497c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d007      	beq.n	80047ca <HAL_RCC_OscConfig+0x4a>
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	2b0c      	cmp	r3, #12
 80047be:	f040 808b 	bne.w	80048d8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	f040 8087 	bne.w	80048d8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80047ca:	4b89      	ldr	r3, [pc, #548]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d005      	beq.n	80047e2 <HAL_RCC_OscConfig+0x62>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	699b      	ldr	r3, [r3, #24]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d101      	bne.n	80047e2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e3a2      	b.n	8004f28 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a1a      	ldr	r2, [r3, #32]
 80047e6:	4b82      	ldr	r3, [pc, #520]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0308 	and.w	r3, r3, #8
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d004      	beq.n	80047fc <HAL_RCC_OscConfig+0x7c>
 80047f2:	4b7f      	ldr	r3, [pc, #508]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80047fa:	e005      	b.n	8004808 <HAL_RCC_OscConfig+0x88>
 80047fc:	4b7c      	ldr	r3, [pc, #496]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 80047fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004802:	091b      	lsrs	r3, r3, #4
 8004804:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004808:	4293      	cmp	r3, r2
 800480a:	d223      	bcs.n	8004854 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a1b      	ldr	r3, [r3, #32]
 8004810:	4618      	mov	r0, r3
 8004812:	f000 fd87 	bl	8005324 <RCC_SetFlashLatencyFromMSIRange>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d001      	beq.n	8004820 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e383      	b.n	8004f28 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004820:	4b73      	ldr	r3, [pc, #460]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a72      	ldr	r2, [pc, #456]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 8004826:	f043 0308 	orr.w	r3, r3, #8
 800482a:	6013      	str	r3, [r2, #0]
 800482c:	4b70      	ldr	r3, [pc, #448]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a1b      	ldr	r3, [r3, #32]
 8004838:	496d      	ldr	r1, [pc, #436]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 800483a:	4313      	orrs	r3, r2
 800483c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800483e:	4b6c      	ldr	r3, [pc, #432]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	69db      	ldr	r3, [r3, #28]
 800484a:	021b      	lsls	r3, r3, #8
 800484c:	4968      	ldr	r1, [pc, #416]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 800484e:	4313      	orrs	r3, r2
 8004850:	604b      	str	r3, [r1, #4]
 8004852:	e025      	b.n	80048a0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004854:	4b66      	ldr	r3, [pc, #408]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a65      	ldr	r2, [pc, #404]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 800485a:	f043 0308 	orr.w	r3, r3, #8
 800485e:	6013      	str	r3, [r2, #0]
 8004860:	4b63      	ldr	r3, [pc, #396]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a1b      	ldr	r3, [r3, #32]
 800486c:	4960      	ldr	r1, [pc, #384]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 800486e:	4313      	orrs	r3, r2
 8004870:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004872:	4b5f      	ldr	r3, [pc, #380]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	69db      	ldr	r3, [r3, #28]
 800487e:	021b      	lsls	r3, r3, #8
 8004880:	495b      	ldr	r1, [pc, #364]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 8004882:	4313      	orrs	r3, r2
 8004884:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d109      	bne.n	80048a0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a1b      	ldr	r3, [r3, #32]
 8004890:	4618      	mov	r0, r3
 8004892:	f000 fd47 	bl	8005324 <RCC_SetFlashLatencyFromMSIRange>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d001      	beq.n	80048a0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e343      	b.n	8004f28 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80048a0:	f000 fc4a 	bl	8005138 <HAL_RCC_GetSysClockFreq>
 80048a4:	4602      	mov	r2, r0
 80048a6:	4b52      	ldr	r3, [pc, #328]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	091b      	lsrs	r3, r3, #4
 80048ac:	f003 030f 	and.w	r3, r3, #15
 80048b0:	4950      	ldr	r1, [pc, #320]	@ (80049f4 <HAL_RCC_OscConfig+0x274>)
 80048b2:	5ccb      	ldrb	r3, [r1, r3]
 80048b4:	f003 031f 	and.w	r3, r3, #31
 80048b8:	fa22 f303 	lsr.w	r3, r2, r3
 80048bc:	4a4e      	ldr	r2, [pc, #312]	@ (80049f8 <HAL_RCC_OscConfig+0x278>)
 80048be:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80048c0:	4b4e      	ldr	r3, [pc, #312]	@ (80049fc <HAL_RCC_OscConfig+0x27c>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4618      	mov	r0, r3
 80048c6:	f7ff f94d 	bl	8003b64 <HAL_InitTick>
 80048ca:	4603      	mov	r3, r0
 80048cc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80048ce:	7bfb      	ldrb	r3, [r7, #15]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d052      	beq.n	800497a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80048d4:	7bfb      	ldrb	r3, [r7, #15]
 80048d6:	e327      	b.n	8004f28 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	699b      	ldr	r3, [r3, #24]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d032      	beq.n	8004946 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80048e0:	4b43      	ldr	r3, [pc, #268]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a42      	ldr	r2, [pc, #264]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 80048e6:	f043 0301 	orr.w	r3, r3, #1
 80048ea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80048ec:	f7ff fbf6 	bl	80040dc <HAL_GetTick>
 80048f0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048f2:	e008      	b.n	8004906 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80048f4:	f7ff fbf2 	bl	80040dc <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d901      	bls.n	8004906 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e310      	b.n	8004f28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004906:	4b3a      	ldr	r3, [pc, #232]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0302 	and.w	r3, r3, #2
 800490e:	2b00      	cmp	r3, #0
 8004910:	d0f0      	beq.n	80048f4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004912:	4b37      	ldr	r3, [pc, #220]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a36      	ldr	r2, [pc, #216]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 8004918:	f043 0308 	orr.w	r3, r3, #8
 800491c:	6013      	str	r3, [r2, #0]
 800491e:	4b34      	ldr	r3, [pc, #208]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a1b      	ldr	r3, [r3, #32]
 800492a:	4931      	ldr	r1, [pc, #196]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 800492c:	4313      	orrs	r3, r2
 800492e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004930:	4b2f      	ldr	r3, [pc, #188]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	69db      	ldr	r3, [r3, #28]
 800493c:	021b      	lsls	r3, r3, #8
 800493e:	492c      	ldr	r1, [pc, #176]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 8004940:	4313      	orrs	r3, r2
 8004942:	604b      	str	r3, [r1, #4]
 8004944:	e01a      	b.n	800497c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004946:	4b2a      	ldr	r3, [pc, #168]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a29      	ldr	r2, [pc, #164]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 800494c:	f023 0301 	bic.w	r3, r3, #1
 8004950:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004952:	f7ff fbc3 	bl	80040dc <HAL_GetTick>
 8004956:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004958:	e008      	b.n	800496c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800495a:	f7ff fbbf 	bl	80040dc <HAL_GetTick>
 800495e:	4602      	mov	r2, r0
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	2b02      	cmp	r3, #2
 8004966:	d901      	bls.n	800496c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e2dd      	b.n	8004f28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800496c:	4b20      	ldr	r3, [pc, #128]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0302 	and.w	r3, r3, #2
 8004974:	2b00      	cmp	r3, #0
 8004976:	d1f0      	bne.n	800495a <HAL_RCC_OscConfig+0x1da>
 8004978:	e000      	b.n	800497c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800497a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0301 	and.w	r3, r3, #1
 8004984:	2b00      	cmp	r3, #0
 8004986:	d074      	beq.n	8004a72 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	2b08      	cmp	r3, #8
 800498c:	d005      	beq.n	800499a <HAL_RCC_OscConfig+0x21a>
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	2b0c      	cmp	r3, #12
 8004992:	d10e      	bne.n	80049b2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	2b03      	cmp	r3, #3
 8004998:	d10b      	bne.n	80049b2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800499a:	4b15      	ldr	r3, [pc, #84]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d064      	beq.n	8004a70 <HAL_RCC_OscConfig+0x2f0>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d160      	bne.n	8004a70 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e2ba      	b.n	8004f28 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049ba:	d106      	bne.n	80049ca <HAL_RCC_OscConfig+0x24a>
 80049bc:	4b0c      	ldr	r3, [pc, #48]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a0b      	ldr	r2, [pc, #44]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 80049c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049c6:	6013      	str	r3, [r2, #0]
 80049c8:	e026      	b.n	8004a18 <HAL_RCC_OscConfig+0x298>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80049d2:	d115      	bne.n	8004a00 <HAL_RCC_OscConfig+0x280>
 80049d4:	4b06      	ldr	r3, [pc, #24]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a05      	ldr	r2, [pc, #20]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 80049da:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80049de:	6013      	str	r3, [r2, #0]
 80049e0:	4b03      	ldr	r3, [pc, #12]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a02      	ldr	r2, [pc, #8]	@ (80049f0 <HAL_RCC_OscConfig+0x270>)
 80049e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049ea:	6013      	str	r3, [r2, #0]
 80049ec:	e014      	b.n	8004a18 <HAL_RCC_OscConfig+0x298>
 80049ee:	bf00      	nop
 80049f0:	40021000 	.word	0x40021000
 80049f4:	0800e4a0 	.word	0x0800e4a0
 80049f8:	200000c0 	.word	0x200000c0
 80049fc:	200000c4 	.word	0x200000c4
 8004a00:	4ba0      	ldr	r3, [pc, #640]	@ (8004c84 <HAL_RCC_OscConfig+0x504>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a9f      	ldr	r2, [pc, #636]	@ (8004c84 <HAL_RCC_OscConfig+0x504>)
 8004a06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a0a:	6013      	str	r3, [r2, #0]
 8004a0c:	4b9d      	ldr	r3, [pc, #628]	@ (8004c84 <HAL_RCC_OscConfig+0x504>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a9c      	ldr	r2, [pc, #624]	@ (8004c84 <HAL_RCC_OscConfig+0x504>)
 8004a12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d013      	beq.n	8004a48 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a20:	f7ff fb5c 	bl	80040dc <HAL_GetTick>
 8004a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a26:	e008      	b.n	8004a3a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a28:	f7ff fb58 	bl	80040dc <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	2b64      	cmp	r3, #100	@ 0x64
 8004a34:	d901      	bls.n	8004a3a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e276      	b.n	8004f28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a3a:	4b92      	ldr	r3, [pc, #584]	@ (8004c84 <HAL_RCC_OscConfig+0x504>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d0f0      	beq.n	8004a28 <HAL_RCC_OscConfig+0x2a8>
 8004a46:	e014      	b.n	8004a72 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a48:	f7ff fb48 	bl	80040dc <HAL_GetTick>
 8004a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a4e:	e008      	b.n	8004a62 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a50:	f7ff fb44 	bl	80040dc <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	2b64      	cmp	r3, #100	@ 0x64
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e262      	b.n	8004f28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a62:	4b88      	ldr	r3, [pc, #544]	@ (8004c84 <HAL_RCC_OscConfig+0x504>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1f0      	bne.n	8004a50 <HAL_RCC_OscConfig+0x2d0>
 8004a6e:	e000      	b.n	8004a72 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0302 	and.w	r3, r3, #2
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d060      	beq.n	8004b40 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	2b04      	cmp	r3, #4
 8004a82:	d005      	beq.n	8004a90 <HAL_RCC_OscConfig+0x310>
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	2b0c      	cmp	r3, #12
 8004a88:	d119      	bne.n	8004abe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	d116      	bne.n	8004abe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a90:	4b7c      	ldr	r3, [pc, #496]	@ (8004c84 <HAL_RCC_OscConfig+0x504>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d005      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x328>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d101      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e23f      	b.n	8004f28 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aa8:	4b76      	ldr	r3, [pc, #472]	@ (8004c84 <HAL_RCC_OscConfig+0x504>)
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	061b      	lsls	r3, r3, #24
 8004ab6:	4973      	ldr	r1, [pc, #460]	@ (8004c84 <HAL_RCC_OscConfig+0x504>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004abc:	e040      	b.n	8004b40 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d023      	beq.n	8004b0e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ac6:	4b6f      	ldr	r3, [pc, #444]	@ (8004c84 <HAL_RCC_OscConfig+0x504>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a6e      	ldr	r2, [pc, #440]	@ (8004c84 <HAL_RCC_OscConfig+0x504>)
 8004acc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ad0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad2:	f7ff fb03 	bl	80040dc <HAL_GetTick>
 8004ad6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ad8:	e008      	b.n	8004aec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ada:	f7ff faff 	bl	80040dc <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d901      	bls.n	8004aec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e21d      	b.n	8004f28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004aec:	4b65      	ldr	r3, [pc, #404]	@ (8004c84 <HAL_RCC_OscConfig+0x504>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d0f0      	beq.n	8004ada <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004af8:	4b62      	ldr	r3, [pc, #392]	@ (8004c84 <HAL_RCC_OscConfig+0x504>)
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	061b      	lsls	r3, r3, #24
 8004b06:	495f      	ldr	r1, [pc, #380]	@ (8004c84 <HAL_RCC_OscConfig+0x504>)
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	604b      	str	r3, [r1, #4]
 8004b0c:	e018      	b.n	8004b40 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b0e:	4b5d      	ldr	r3, [pc, #372]	@ (8004c84 <HAL_RCC_OscConfig+0x504>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a5c      	ldr	r2, [pc, #368]	@ (8004c84 <HAL_RCC_OscConfig+0x504>)
 8004b14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b1a:	f7ff fadf 	bl	80040dc <HAL_GetTick>
 8004b1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b20:	e008      	b.n	8004b34 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b22:	f7ff fadb 	bl	80040dc <HAL_GetTick>
 8004b26:	4602      	mov	r2, r0
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d901      	bls.n	8004b34 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	e1f9      	b.n	8004f28 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b34:	4b53      	ldr	r3, [pc, #332]	@ (8004c84 <HAL_RCC_OscConfig+0x504>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d1f0      	bne.n	8004b22 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0308 	and.w	r3, r3, #8
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d03c      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	695b      	ldr	r3, [r3, #20]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d01c      	beq.n	8004b8e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b54:	4b4b      	ldr	r3, [pc, #300]	@ (8004c84 <HAL_RCC_OscConfig+0x504>)
 8004b56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b5a:	4a4a      	ldr	r2, [pc, #296]	@ (8004c84 <HAL_RCC_OscConfig+0x504>)
 8004b5c:	f043 0301 	orr.w	r3, r3, #1
 8004b60:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b64:	f7ff faba 	bl	80040dc <HAL_GetTick>
 8004b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b6a:	e008      	b.n	8004b7e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b6c:	f7ff fab6 	bl	80040dc <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d901      	bls.n	8004b7e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e1d4      	b.n	8004f28 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b7e:	4b41      	ldr	r3, [pc, #260]	@ (8004c84 <HAL_RCC_OscConfig+0x504>)
 8004b80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b84:	f003 0302 	and.w	r3, r3, #2
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d0ef      	beq.n	8004b6c <HAL_RCC_OscConfig+0x3ec>
 8004b8c:	e01b      	b.n	8004bc6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b8e:	4b3d      	ldr	r3, [pc, #244]	@ (8004c84 <HAL_RCC_OscConfig+0x504>)
 8004b90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b94:	4a3b      	ldr	r2, [pc, #236]	@ (8004c84 <HAL_RCC_OscConfig+0x504>)
 8004b96:	f023 0301 	bic.w	r3, r3, #1
 8004b9a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b9e:	f7ff fa9d 	bl	80040dc <HAL_GetTick>
 8004ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ba4:	e008      	b.n	8004bb8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ba6:	f7ff fa99 	bl	80040dc <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d901      	bls.n	8004bb8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e1b7      	b.n	8004f28 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004bb8:	4b32      	ldr	r3, [pc, #200]	@ (8004c84 <HAL_RCC_OscConfig+0x504>)
 8004bba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bbe:	f003 0302 	and.w	r3, r3, #2
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1ef      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0304 	and.w	r3, r3, #4
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	f000 80a6 	beq.w	8004d20 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004bd8:	4b2a      	ldr	r3, [pc, #168]	@ (8004c84 <HAL_RCC_OscConfig+0x504>)
 8004bda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d10d      	bne.n	8004c00 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004be4:	4b27      	ldr	r3, [pc, #156]	@ (8004c84 <HAL_RCC_OscConfig+0x504>)
 8004be6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004be8:	4a26      	ldr	r2, [pc, #152]	@ (8004c84 <HAL_RCC_OscConfig+0x504>)
 8004bea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bee:	6593      	str	r3, [r2, #88]	@ 0x58
 8004bf0:	4b24      	ldr	r3, [pc, #144]	@ (8004c84 <HAL_RCC_OscConfig+0x504>)
 8004bf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bf4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bf8:	60bb      	str	r3, [r7, #8]
 8004bfa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c00:	4b21      	ldr	r3, [pc, #132]	@ (8004c88 <HAL_RCC_OscConfig+0x508>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d118      	bne.n	8004c3e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c0c:	4b1e      	ldr	r3, [pc, #120]	@ (8004c88 <HAL_RCC_OscConfig+0x508>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a1d      	ldr	r2, [pc, #116]	@ (8004c88 <HAL_RCC_OscConfig+0x508>)
 8004c12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c16:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c18:	f7ff fa60 	bl	80040dc <HAL_GetTick>
 8004c1c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c1e:	e008      	b.n	8004c32 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c20:	f7ff fa5c 	bl	80040dc <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e17a      	b.n	8004f28 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c32:	4b15      	ldr	r3, [pc, #84]	@ (8004c88 <HAL_RCC_OscConfig+0x508>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d0f0      	beq.n	8004c20 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d108      	bne.n	8004c58 <HAL_RCC_OscConfig+0x4d8>
 8004c46:	4b0f      	ldr	r3, [pc, #60]	@ (8004c84 <HAL_RCC_OscConfig+0x504>)
 8004c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c4c:	4a0d      	ldr	r2, [pc, #52]	@ (8004c84 <HAL_RCC_OscConfig+0x504>)
 8004c4e:	f043 0301 	orr.w	r3, r3, #1
 8004c52:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c56:	e029      	b.n	8004cac <HAL_RCC_OscConfig+0x52c>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	2b05      	cmp	r3, #5
 8004c5e:	d115      	bne.n	8004c8c <HAL_RCC_OscConfig+0x50c>
 8004c60:	4b08      	ldr	r3, [pc, #32]	@ (8004c84 <HAL_RCC_OscConfig+0x504>)
 8004c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c66:	4a07      	ldr	r2, [pc, #28]	@ (8004c84 <HAL_RCC_OscConfig+0x504>)
 8004c68:	f043 0304 	orr.w	r3, r3, #4
 8004c6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c70:	4b04      	ldr	r3, [pc, #16]	@ (8004c84 <HAL_RCC_OscConfig+0x504>)
 8004c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c76:	4a03      	ldr	r2, [pc, #12]	@ (8004c84 <HAL_RCC_OscConfig+0x504>)
 8004c78:	f043 0301 	orr.w	r3, r3, #1
 8004c7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c80:	e014      	b.n	8004cac <HAL_RCC_OscConfig+0x52c>
 8004c82:	bf00      	nop
 8004c84:	40021000 	.word	0x40021000
 8004c88:	40007000 	.word	0x40007000
 8004c8c:	4b9c      	ldr	r3, [pc, #624]	@ (8004f00 <HAL_RCC_OscConfig+0x780>)
 8004c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c92:	4a9b      	ldr	r2, [pc, #620]	@ (8004f00 <HAL_RCC_OscConfig+0x780>)
 8004c94:	f023 0301 	bic.w	r3, r3, #1
 8004c98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c9c:	4b98      	ldr	r3, [pc, #608]	@ (8004f00 <HAL_RCC_OscConfig+0x780>)
 8004c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ca2:	4a97      	ldr	r2, [pc, #604]	@ (8004f00 <HAL_RCC_OscConfig+0x780>)
 8004ca4:	f023 0304 	bic.w	r3, r3, #4
 8004ca8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d016      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cb4:	f7ff fa12 	bl	80040dc <HAL_GetTick>
 8004cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cba:	e00a      	b.n	8004cd2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cbc:	f7ff fa0e 	bl	80040dc <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d901      	bls.n	8004cd2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e12a      	b.n	8004f28 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cd2:	4b8b      	ldr	r3, [pc, #556]	@ (8004f00 <HAL_RCC_OscConfig+0x780>)
 8004cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d0ed      	beq.n	8004cbc <HAL_RCC_OscConfig+0x53c>
 8004ce0:	e015      	b.n	8004d0e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ce2:	f7ff f9fb 	bl	80040dc <HAL_GetTick>
 8004ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ce8:	e00a      	b.n	8004d00 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cea:	f7ff f9f7 	bl	80040dc <HAL_GetTick>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d901      	bls.n	8004d00 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e113      	b.n	8004f28 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d00:	4b7f      	ldr	r3, [pc, #508]	@ (8004f00 <HAL_RCC_OscConfig+0x780>)
 8004d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d06:	f003 0302 	and.w	r3, r3, #2
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1ed      	bne.n	8004cea <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d0e:	7ffb      	ldrb	r3, [r7, #31]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d105      	bne.n	8004d20 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d14:	4b7a      	ldr	r3, [pc, #488]	@ (8004f00 <HAL_RCC_OscConfig+0x780>)
 8004d16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d18:	4a79      	ldr	r2, [pc, #484]	@ (8004f00 <HAL_RCC_OscConfig+0x780>)
 8004d1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d1e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	f000 80fe 	beq.w	8004f26 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	f040 80d0 	bne.w	8004ed4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004d34:	4b72      	ldr	r3, [pc, #456]	@ (8004f00 <HAL_RCC_OscConfig+0x780>)
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	f003 0203 	and.w	r2, r3, #3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d130      	bne.n	8004daa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d52:	3b01      	subs	r3, #1
 8004d54:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d127      	bne.n	8004daa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d64:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d11f      	bne.n	8004daa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004d74:	2a07      	cmp	r2, #7
 8004d76:	bf14      	ite	ne
 8004d78:	2201      	movne	r2, #1
 8004d7a:	2200      	moveq	r2, #0
 8004d7c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d113      	bne.n	8004daa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d8c:	085b      	lsrs	r3, r3, #1
 8004d8e:	3b01      	subs	r3, #1
 8004d90:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d109      	bne.n	8004daa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da0:	085b      	lsrs	r3, r3, #1
 8004da2:	3b01      	subs	r3, #1
 8004da4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d06e      	beq.n	8004e88 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	2b0c      	cmp	r3, #12
 8004dae:	d069      	beq.n	8004e84 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004db0:	4b53      	ldr	r3, [pc, #332]	@ (8004f00 <HAL_RCC_OscConfig+0x780>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d105      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004dbc:	4b50      	ldr	r3, [pc, #320]	@ (8004f00 <HAL_RCC_OscConfig+0x780>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d001      	beq.n	8004dcc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e0ad      	b.n	8004f28 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004dcc:	4b4c      	ldr	r3, [pc, #304]	@ (8004f00 <HAL_RCC_OscConfig+0x780>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a4b      	ldr	r2, [pc, #300]	@ (8004f00 <HAL_RCC_OscConfig+0x780>)
 8004dd2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004dd6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004dd8:	f7ff f980 	bl	80040dc <HAL_GetTick>
 8004ddc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dde:	e008      	b.n	8004df2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004de0:	f7ff f97c 	bl	80040dc <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d901      	bls.n	8004df2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e09a      	b.n	8004f28 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004df2:	4b43      	ldr	r3, [pc, #268]	@ (8004f00 <HAL_RCC_OscConfig+0x780>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1f0      	bne.n	8004de0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004dfe:	4b40      	ldr	r3, [pc, #256]	@ (8004f00 <HAL_RCC_OscConfig+0x780>)
 8004e00:	68da      	ldr	r2, [r3, #12]
 8004e02:	4b40      	ldr	r3, [pc, #256]	@ (8004f04 <HAL_RCC_OscConfig+0x784>)
 8004e04:	4013      	ands	r3, r2
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004e0e:	3a01      	subs	r2, #1
 8004e10:	0112      	lsls	r2, r2, #4
 8004e12:	4311      	orrs	r1, r2
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004e18:	0212      	lsls	r2, r2, #8
 8004e1a:	4311      	orrs	r1, r2
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004e20:	0852      	lsrs	r2, r2, #1
 8004e22:	3a01      	subs	r2, #1
 8004e24:	0552      	lsls	r2, r2, #21
 8004e26:	4311      	orrs	r1, r2
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004e2c:	0852      	lsrs	r2, r2, #1
 8004e2e:	3a01      	subs	r2, #1
 8004e30:	0652      	lsls	r2, r2, #25
 8004e32:	4311      	orrs	r1, r2
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004e38:	0912      	lsrs	r2, r2, #4
 8004e3a:	0452      	lsls	r2, r2, #17
 8004e3c:	430a      	orrs	r2, r1
 8004e3e:	4930      	ldr	r1, [pc, #192]	@ (8004f00 <HAL_RCC_OscConfig+0x780>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004e44:	4b2e      	ldr	r3, [pc, #184]	@ (8004f00 <HAL_RCC_OscConfig+0x780>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a2d      	ldr	r2, [pc, #180]	@ (8004f00 <HAL_RCC_OscConfig+0x780>)
 8004e4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e4e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e50:	4b2b      	ldr	r3, [pc, #172]	@ (8004f00 <HAL_RCC_OscConfig+0x780>)
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	4a2a      	ldr	r2, [pc, #168]	@ (8004f00 <HAL_RCC_OscConfig+0x780>)
 8004e56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e5a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004e5c:	f7ff f93e 	bl	80040dc <HAL_GetTick>
 8004e60:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e62:	e008      	b.n	8004e76 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e64:	f7ff f93a 	bl	80040dc <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d901      	bls.n	8004e76 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e058      	b.n	8004f28 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e76:	4b22      	ldr	r3, [pc, #136]	@ (8004f00 <HAL_RCC_OscConfig+0x780>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d0f0      	beq.n	8004e64 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e82:	e050      	b.n	8004f26 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e04f      	b.n	8004f28 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e88:	4b1d      	ldr	r3, [pc, #116]	@ (8004f00 <HAL_RCC_OscConfig+0x780>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d148      	bne.n	8004f26 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004e94:	4b1a      	ldr	r3, [pc, #104]	@ (8004f00 <HAL_RCC_OscConfig+0x780>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a19      	ldr	r2, [pc, #100]	@ (8004f00 <HAL_RCC_OscConfig+0x780>)
 8004e9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e9e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ea0:	4b17      	ldr	r3, [pc, #92]	@ (8004f00 <HAL_RCC_OscConfig+0x780>)
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	4a16      	ldr	r2, [pc, #88]	@ (8004f00 <HAL_RCC_OscConfig+0x780>)
 8004ea6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004eaa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004eac:	f7ff f916 	bl	80040dc <HAL_GetTick>
 8004eb0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004eb2:	e008      	b.n	8004ec6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eb4:	f7ff f912 	bl	80040dc <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d901      	bls.n	8004ec6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e030      	b.n	8004f28 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ec6:	4b0e      	ldr	r3, [pc, #56]	@ (8004f00 <HAL_RCC_OscConfig+0x780>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d0f0      	beq.n	8004eb4 <HAL_RCC_OscConfig+0x734>
 8004ed2:	e028      	b.n	8004f26 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	2b0c      	cmp	r3, #12
 8004ed8:	d023      	beq.n	8004f22 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eda:	4b09      	ldr	r3, [pc, #36]	@ (8004f00 <HAL_RCC_OscConfig+0x780>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a08      	ldr	r2, [pc, #32]	@ (8004f00 <HAL_RCC_OscConfig+0x780>)
 8004ee0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ee4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ee6:	f7ff f8f9 	bl	80040dc <HAL_GetTick>
 8004eea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004eec:	e00c      	b.n	8004f08 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eee:	f7ff f8f5 	bl	80040dc <HAL_GetTick>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d905      	bls.n	8004f08 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004efc:	2303      	movs	r3, #3
 8004efe:	e013      	b.n	8004f28 <HAL_RCC_OscConfig+0x7a8>
 8004f00:	40021000 	.word	0x40021000
 8004f04:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f08:	4b09      	ldr	r3, [pc, #36]	@ (8004f30 <HAL_RCC_OscConfig+0x7b0>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d1ec      	bne.n	8004eee <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004f14:	4b06      	ldr	r3, [pc, #24]	@ (8004f30 <HAL_RCC_OscConfig+0x7b0>)
 8004f16:	68da      	ldr	r2, [r3, #12]
 8004f18:	4905      	ldr	r1, [pc, #20]	@ (8004f30 <HAL_RCC_OscConfig+0x7b0>)
 8004f1a:	4b06      	ldr	r3, [pc, #24]	@ (8004f34 <HAL_RCC_OscConfig+0x7b4>)
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	60cb      	str	r3, [r1, #12]
 8004f20:	e001      	b.n	8004f26 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e000      	b.n	8004f28 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004f26:	2300      	movs	r3, #0
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3720      	adds	r7, #32
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	40021000 	.word	0x40021000
 8004f34:	feeefffc 	.word	0xfeeefffc

08004f38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d101      	bne.n	8004f4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e0e7      	b.n	800511c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f4c:	4b75      	ldr	r3, [pc, #468]	@ (8005124 <HAL_RCC_ClockConfig+0x1ec>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0307 	and.w	r3, r3, #7
 8004f54:	683a      	ldr	r2, [r7, #0]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d910      	bls.n	8004f7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f5a:	4b72      	ldr	r3, [pc, #456]	@ (8005124 <HAL_RCC_ClockConfig+0x1ec>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f023 0207 	bic.w	r2, r3, #7
 8004f62:	4970      	ldr	r1, [pc, #448]	@ (8005124 <HAL_RCC_ClockConfig+0x1ec>)
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f6a:	4b6e      	ldr	r3, [pc, #440]	@ (8005124 <HAL_RCC_ClockConfig+0x1ec>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0307 	and.w	r3, r3, #7
 8004f72:	683a      	ldr	r2, [r7, #0]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d001      	beq.n	8004f7c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e0cf      	b.n	800511c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0302 	and.w	r3, r3, #2
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d010      	beq.n	8004faa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	689a      	ldr	r2, [r3, #8]
 8004f8c:	4b66      	ldr	r3, [pc, #408]	@ (8005128 <HAL_RCC_ClockConfig+0x1f0>)
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d908      	bls.n	8004faa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f98:	4b63      	ldr	r3, [pc, #396]	@ (8005128 <HAL_RCC_ClockConfig+0x1f0>)
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	4960      	ldr	r1, [pc, #384]	@ (8005128 <HAL_RCC_ClockConfig+0x1f0>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0301 	and.w	r3, r3, #1
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d04c      	beq.n	8005050 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	2b03      	cmp	r3, #3
 8004fbc:	d107      	bne.n	8004fce <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fbe:	4b5a      	ldr	r3, [pc, #360]	@ (8005128 <HAL_RCC_ClockConfig+0x1f0>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d121      	bne.n	800500e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e0a6      	b.n	800511c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d107      	bne.n	8004fe6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fd6:	4b54      	ldr	r3, [pc, #336]	@ (8005128 <HAL_RCC_ClockConfig+0x1f0>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d115      	bne.n	800500e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e09a      	b.n	800511c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d107      	bne.n	8004ffe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004fee:	4b4e      	ldr	r3, [pc, #312]	@ (8005128 <HAL_RCC_ClockConfig+0x1f0>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0302 	and.w	r3, r3, #2
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d109      	bne.n	800500e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e08e      	b.n	800511c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ffe:	4b4a      	ldr	r3, [pc, #296]	@ (8005128 <HAL_RCC_ClockConfig+0x1f0>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005006:	2b00      	cmp	r3, #0
 8005008:	d101      	bne.n	800500e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e086      	b.n	800511c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800500e:	4b46      	ldr	r3, [pc, #280]	@ (8005128 <HAL_RCC_ClockConfig+0x1f0>)
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f023 0203 	bic.w	r2, r3, #3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	4943      	ldr	r1, [pc, #268]	@ (8005128 <HAL_RCC_ClockConfig+0x1f0>)
 800501c:	4313      	orrs	r3, r2
 800501e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005020:	f7ff f85c 	bl	80040dc <HAL_GetTick>
 8005024:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005026:	e00a      	b.n	800503e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005028:	f7ff f858 	bl	80040dc <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005036:	4293      	cmp	r3, r2
 8005038:	d901      	bls.n	800503e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e06e      	b.n	800511c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800503e:	4b3a      	ldr	r3, [pc, #232]	@ (8005128 <HAL_RCC_ClockConfig+0x1f0>)
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f003 020c 	and.w	r2, r3, #12
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	429a      	cmp	r2, r3
 800504e:	d1eb      	bne.n	8005028 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0302 	and.w	r3, r3, #2
 8005058:	2b00      	cmp	r3, #0
 800505a:	d010      	beq.n	800507e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	689a      	ldr	r2, [r3, #8]
 8005060:	4b31      	ldr	r3, [pc, #196]	@ (8005128 <HAL_RCC_ClockConfig+0x1f0>)
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005068:	429a      	cmp	r2, r3
 800506a:	d208      	bcs.n	800507e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800506c:	4b2e      	ldr	r3, [pc, #184]	@ (8005128 <HAL_RCC_ClockConfig+0x1f0>)
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	492b      	ldr	r1, [pc, #172]	@ (8005128 <HAL_RCC_ClockConfig+0x1f0>)
 800507a:	4313      	orrs	r3, r2
 800507c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800507e:	4b29      	ldr	r3, [pc, #164]	@ (8005124 <HAL_RCC_ClockConfig+0x1ec>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 0307 	and.w	r3, r3, #7
 8005086:	683a      	ldr	r2, [r7, #0]
 8005088:	429a      	cmp	r2, r3
 800508a:	d210      	bcs.n	80050ae <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800508c:	4b25      	ldr	r3, [pc, #148]	@ (8005124 <HAL_RCC_ClockConfig+0x1ec>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f023 0207 	bic.w	r2, r3, #7
 8005094:	4923      	ldr	r1, [pc, #140]	@ (8005124 <HAL_RCC_ClockConfig+0x1ec>)
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	4313      	orrs	r3, r2
 800509a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800509c:	4b21      	ldr	r3, [pc, #132]	@ (8005124 <HAL_RCC_ClockConfig+0x1ec>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0307 	and.w	r3, r3, #7
 80050a4:	683a      	ldr	r2, [r7, #0]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d001      	beq.n	80050ae <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e036      	b.n	800511c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0304 	and.w	r3, r3, #4
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d008      	beq.n	80050cc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050ba:	4b1b      	ldr	r3, [pc, #108]	@ (8005128 <HAL_RCC_ClockConfig+0x1f0>)
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	4918      	ldr	r1, [pc, #96]	@ (8005128 <HAL_RCC_ClockConfig+0x1f0>)
 80050c8:	4313      	orrs	r3, r2
 80050ca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0308 	and.w	r3, r3, #8
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d009      	beq.n	80050ec <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050d8:	4b13      	ldr	r3, [pc, #76]	@ (8005128 <HAL_RCC_ClockConfig+0x1f0>)
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	00db      	lsls	r3, r3, #3
 80050e6:	4910      	ldr	r1, [pc, #64]	@ (8005128 <HAL_RCC_ClockConfig+0x1f0>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80050ec:	f000 f824 	bl	8005138 <HAL_RCC_GetSysClockFreq>
 80050f0:	4602      	mov	r2, r0
 80050f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005128 <HAL_RCC_ClockConfig+0x1f0>)
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	091b      	lsrs	r3, r3, #4
 80050f8:	f003 030f 	and.w	r3, r3, #15
 80050fc:	490b      	ldr	r1, [pc, #44]	@ (800512c <HAL_RCC_ClockConfig+0x1f4>)
 80050fe:	5ccb      	ldrb	r3, [r1, r3]
 8005100:	f003 031f 	and.w	r3, r3, #31
 8005104:	fa22 f303 	lsr.w	r3, r2, r3
 8005108:	4a09      	ldr	r2, [pc, #36]	@ (8005130 <HAL_RCC_ClockConfig+0x1f8>)
 800510a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800510c:	4b09      	ldr	r3, [pc, #36]	@ (8005134 <HAL_RCC_ClockConfig+0x1fc>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4618      	mov	r0, r3
 8005112:	f7fe fd27 	bl	8003b64 <HAL_InitTick>
 8005116:	4603      	mov	r3, r0
 8005118:	72fb      	strb	r3, [r7, #11]

  return status;
 800511a:	7afb      	ldrb	r3, [r7, #11]
}
 800511c:	4618      	mov	r0, r3
 800511e:	3710      	adds	r7, #16
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}
 8005124:	40022000 	.word	0x40022000
 8005128:	40021000 	.word	0x40021000
 800512c:	0800e4a0 	.word	0x0800e4a0
 8005130:	200000c0 	.word	0x200000c0
 8005134:	200000c4 	.word	0x200000c4

08005138 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005138:	b480      	push	{r7}
 800513a:	b089      	sub	sp, #36	@ 0x24
 800513c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800513e:	2300      	movs	r3, #0
 8005140:	61fb      	str	r3, [r7, #28]
 8005142:	2300      	movs	r3, #0
 8005144:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005146:	4b3e      	ldr	r3, [pc, #248]	@ (8005240 <HAL_RCC_GetSysClockFreq+0x108>)
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f003 030c 	and.w	r3, r3, #12
 800514e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005150:	4b3b      	ldr	r3, [pc, #236]	@ (8005240 <HAL_RCC_GetSysClockFreq+0x108>)
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	f003 0303 	and.w	r3, r3, #3
 8005158:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d005      	beq.n	800516c <HAL_RCC_GetSysClockFreq+0x34>
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	2b0c      	cmp	r3, #12
 8005164:	d121      	bne.n	80051aa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2b01      	cmp	r3, #1
 800516a:	d11e      	bne.n	80051aa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800516c:	4b34      	ldr	r3, [pc, #208]	@ (8005240 <HAL_RCC_GetSysClockFreq+0x108>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 0308 	and.w	r3, r3, #8
 8005174:	2b00      	cmp	r3, #0
 8005176:	d107      	bne.n	8005188 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005178:	4b31      	ldr	r3, [pc, #196]	@ (8005240 <HAL_RCC_GetSysClockFreq+0x108>)
 800517a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800517e:	0a1b      	lsrs	r3, r3, #8
 8005180:	f003 030f 	and.w	r3, r3, #15
 8005184:	61fb      	str	r3, [r7, #28]
 8005186:	e005      	b.n	8005194 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005188:	4b2d      	ldr	r3, [pc, #180]	@ (8005240 <HAL_RCC_GetSysClockFreq+0x108>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	091b      	lsrs	r3, r3, #4
 800518e:	f003 030f 	and.w	r3, r3, #15
 8005192:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005194:	4a2b      	ldr	r2, [pc, #172]	@ (8005244 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800519c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d10d      	bne.n	80051c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80051a8:	e00a      	b.n	80051c0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	2b04      	cmp	r3, #4
 80051ae:	d102      	bne.n	80051b6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80051b0:	4b25      	ldr	r3, [pc, #148]	@ (8005248 <HAL_RCC_GetSysClockFreq+0x110>)
 80051b2:	61bb      	str	r3, [r7, #24]
 80051b4:	e004      	b.n	80051c0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	2b08      	cmp	r3, #8
 80051ba:	d101      	bne.n	80051c0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80051bc:	4b23      	ldr	r3, [pc, #140]	@ (800524c <HAL_RCC_GetSysClockFreq+0x114>)
 80051be:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	2b0c      	cmp	r3, #12
 80051c4:	d134      	bne.n	8005230 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80051c6:	4b1e      	ldr	r3, [pc, #120]	@ (8005240 <HAL_RCC_GetSysClockFreq+0x108>)
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	f003 0303 	and.w	r3, r3, #3
 80051ce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d003      	beq.n	80051de <HAL_RCC_GetSysClockFreq+0xa6>
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	2b03      	cmp	r3, #3
 80051da:	d003      	beq.n	80051e4 <HAL_RCC_GetSysClockFreq+0xac>
 80051dc:	e005      	b.n	80051ea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80051de:	4b1a      	ldr	r3, [pc, #104]	@ (8005248 <HAL_RCC_GetSysClockFreq+0x110>)
 80051e0:	617b      	str	r3, [r7, #20]
      break;
 80051e2:	e005      	b.n	80051f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80051e4:	4b19      	ldr	r3, [pc, #100]	@ (800524c <HAL_RCC_GetSysClockFreq+0x114>)
 80051e6:	617b      	str	r3, [r7, #20]
      break;
 80051e8:	e002      	b.n	80051f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	617b      	str	r3, [r7, #20]
      break;
 80051ee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80051f0:	4b13      	ldr	r3, [pc, #76]	@ (8005240 <HAL_RCC_GetSysClockFreq+0x108>)
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	091b      	lsrs	r3, r3, #4
 80051f6:	f003 0307 	and.w	r3, r3, #7
 80051fa:	3301      	adds	r3, #1
 80051fc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80051fe:	4b10      	ldr	r3, [pc, #64]	@ (8005240 <HAL_RCC_GetSysClockFreq+0x108>)
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	0a1b      	lsrs	r3, r3, #8
 8005204:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005208:	697a      	ldr	r2, [r7, #20]
 800520a:	fb03 f202 	mul.w	r2, r3, r2
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	fbb2 f3f3 	udiv	r3, r2, r3
 8005214:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005216:	4b0a      	ldr	r3, [pc, #40]	@ (8005240 <HAL_RCC_GetSysClockFreq+0x108>)
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	0e5b      	lsrs	r3, r3, #25
 800521c:	f003 0303 	and.w	r3, r3, #3
 8005220:	3301      	adds	r3, #1
 8005222:	005b      	lsls	r3, r3, #1
 8005224:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005226:	697a      	ldr	r2, [r7, #20]
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	fbb2 f3f3 	udiv	r3, r2, r3
 800522e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005230:	69bb      	ldr	r3, [r7, #24]
}
 8005232:	4618      	mov	r0, r3
 8005234:	3724      	adds	r7, #36	@ 0x24
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	40021000 	.word	0x40021000
 8005244:	0800e4b8 	.word	0x0800e4b8
 8005248:	00f42400 	.word	0x00f42400
 800524c:	007a1200 	.word	0x007a1200

08005250 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005250:	b480      	push	{r7}
 8005252:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005254:	4b03      	ldr	r3, [pc, #12]	@ (8005264 <HAL_RCC_GetHCLKFreq+0x14>)
 8005256:	681b      	ldr	r3, [r3, #0]
}
 8005258:	4618      	mov	r0, r3
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	200000c0 	.word	0x200000c0

08005268 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800526c:	f7ff fff0 	bl	8005250 <HAL_RCC_GetHCLKFreq>
 8005270:	4602      	mov	r2, r0
 8005272:	4b06      	ldr	r3, [pc, #24]	@ (800528c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	0a1b      	lsrs	r3, r3, #8
 8005278:	f003 0307 	and.w	r3, r3, #7
 800527c:	4904      	ldr	r1, [pc, #16]	@ (8005290 <HAL_RCC_GetPCLK1Freq+0x28>)
 800527e:	5ccb      	ldrb	r3, [r1, r3]
 8005280:	f003 031f 	and.w	r3, r3, #31
 8005284:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005288:	4618      	mov	r0, r3
 800528a:	bd80      	pop	{r7, pc}
 800528c:	40021000 	.word	0x40021000
 8005290:	0800e4b0 	.word	0x0800e4b0

08005294 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005298:	f7ff ffda 	bl	8005250 <HAL_RCC_GetHCLKFreq>
 800529c:	4602      	mov	r2, r0
 800529e:	4b06      	ldr	r3, [pc, #24]	@ (80052b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	0adb      	lsrs	r3, r3, #11
 80052a4:	f003 0307 	and.w	r3, r3, #7
 80052a8:	4904      	ldr	r1, [pc, #16]	@ (80052bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80052aa:	5ccb      	ldrb	r3, [r1, r3]
 80052ac:	f003 031f 	and.w	r3, r3, #31
 80052b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	40021000 	.word	0x40021000
 80052bc:	0800e4b0 	.word	0x0800e4b0

080052c0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	220f      	movs	r2, #15
 80052ce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80052d0:	4b12      	ldr	r3, [pc, #72]	@ (800531c <HAL_RCC_GetClockConfig+0x5c>)
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f003 0203 	and.w	r2, r3, #3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80052dc:	4b0f      	ldr	r3, [pc, #60]	@ (800531c <HAL_RCC_GetClockConfig+0x5c>)
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80052e8:	4b0c      	ldr	r3, [pc, #48]	@ (800531c <HAL_RCC_GetClockConfig+0x5c>)
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80052f4:	4b09      	ldr	r3, [pc, #36]	@ (800531c <HAL_RCC_GetClockConfig+0x5c>)
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	08db      	lsrs	r3, r3, #3
 80052fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005302:	4b07      	ldr	r3, [pc, #28]	@ (8005320 <HAL_RCC_GetClockConfig+0x60>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0207 	and.w	r2, r3, #7
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	601a      	str	r2, [r3, #0]
}
 800530e:	bf00      	nop
 8005310:	370c      	adds	r7, #12
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop
 800531c:	40021000 	.word	0x40021000
 8005320:	40022000 	.word	0x40022000

08005324 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b086      	sub	sp, #24
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800532c:	2300      	movs	r3, #0
 800532e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005330:	4b2a      	ldr	r3, [pc, #168]	@ (80053dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005332:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005334:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005338:	2b00      	cmp	r3, #0
 800533a:	d003      	beq.n	8005344 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800533c:	f7ff f9bc 	bl	80046b8 <HAL_PWREx_GetVoltageRange>
 8005340:	6178      	str	r0, [r7, #20]
 8005342:	e014      	b.n	800536e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005344:	4b25      	ldr	r3, [pc, #148]	@ (80053dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005346:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005348:	4a24      	ldr	r2, [pc, #144]	@ (80053dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800534a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800534e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005350:	4b22      	ldr	r3, [pc, #136]	@ (80053dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005352:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005354:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005358:	60fb      	str	r3, [r7, #12]
 800535a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800535c:	f7ff f9ac 	bl	80046b8 <HAL_PWREx_GetVoltageRange>
 8005360:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005362:	4b1e      	ldr	r3, [pc, #120]	@ (80053dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005366:	4a1d      	ldr	r2, [pc, #116]	@ (80053dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005368:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800536c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005374:	d10b      	bne.n	800538e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2b80      	cmp	r3, #128	@ 0x80
 800537a:	d919      	bls.n	80053b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2ba0      	cmp	r3, #160	@ 0xa0
 8005380:	d902      	bls.n	8005388 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005382:	2302      	movs	r3, #2
 8005384:	613b      	str	r3, [r7, #16]
 8005386:	e013      	b.n	80053b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005388:	2301      	movs	r3, #1
 800538a:	613b      	str	r3, [r7, #16]
 800538c:	e010      	b.n	80053b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2b80      	cmp	r3, #128	@ 0x80
 8005392:	d902      	bls.n	800539a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005394:	2303      	movs	r3, #3
 8005396:	613b      	str	r3, [r7, #16]
 8005398:	e00a      	b.n	80053b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2b80      	cmp	r3, #128	@ 0x80
 800539e:	d102      	bne.n	80053a6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80053a0:	2302      	movs	r3, #2
 80053a2:	613b      	str	r3, [r7, #16]
 80053a4:	e004      	b.n	80053b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2b70      	cmp	r3, #112	@ 0x70
 80053aa:	d101      	bne.n	80053b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80053ac:	2301      	movs	r3, #1
 80053ae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80053b0:	4b0b      	ldr	r3, [pc, #44]	@ (80053e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f023 0207 	bic.w	r2, r3, #7
 80053b8:	4909      	ldr	r1, [pc, #36]	@ (80053e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	4313      	orrs	r3, r2
 80053be:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80053c0:	4b07      	ldr	r3, [pc, #28]	@ (80053e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0307 	and.w	r3, r3, #7
 80053c8:	693a      	ldr	r2, [r7, #16]
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d001      	beq.n	80053d2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e000      	b.n	80053d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3718      	adds	r7, #24
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	40021000 	.word	0x40021000
 80053e0:	40022000 	.word	0x40022000

080053e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b086      	sub	sp, #24
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80053ec:	2300      	movs	r3, #0
 80053ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80053f0:	2300      	movs	r3, #0
 80053f2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d041      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005404:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005408:	d02a      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800540a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800540e:	d824      	bhi.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005410:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005414:	d008      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005416:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800541a:	d81e      	bhi.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00a      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005420:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005424:	d010      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005426:	e018      	b.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005428:	4b86      	ldr	r3, [pc, #536]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	4a85      	ldr	r2, [pc, #532]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800542e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005432:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005434:	e015      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	3304      	adds	r3, #4
 800543a:	2100      	movs	r1, #0
 800543c:	4618      	mov	r0, r3
 800543e:	f000 fabb 	bl	80059b8 <RCCEx_PLLSAI1_Config>
 8005442:	4603      	mov	r3, r0
 8005444:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005446:	e00c      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	3320      	adds	r3, #32
 800544c:	2100      	movs	r1, #0
 800544e:	4618      	mov	r0, r3
 8005450:	f000 fba6 	bl	8005ba0 <RCCEx_PLLSAI2_Config>
 8005454:	4603      	mov	r3, r0
 8005456:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005458:	e003      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	74fb      	strb	r3, [r7, #19]
      break;
 800545e:	e000      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005460:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005462:	7cfb      	ldrb	r3, [r7, #19]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d10b      	bne.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005468:	4b76      	ldr	r3, [pc, #472]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800546a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800546e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005476:	4973      	ldr	r1, [pc, #460]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005478:	4313      	orrs	r3, r2
 800547a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800547e:	e001      	b.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005480:	7cfb      	ldrb	r3, [r7, #19]
 8005482:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800548c:	2b00      	cmp	r3, #0
 800548e:	d041      	beq.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005494:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005498:	d02a      	beq.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800549a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800549e:	d824      	bhi.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x106>
 80054a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80054a4:	d008      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80054a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80054aa:	d81e      	bhi.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x106>
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00a      	beq.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80054b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80054b4:	d010      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80054b6:	e018      	b.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80054b8:	4b62      	ldr	r3, [pc, #392]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	4a61      	ldr	r2, [pc, #388]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054c2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80054c4:	e015      	b.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	3304      	adds	r3, #4
 80054ca:	2100      	movs	r1, #0
 80054cc:	4618      	mov	r0, r3
 80054ce:	f000 fa73 	bl	80059b8 <RCCEx_PLLSAI1_Config>
 80054d2:	4603      	mov	r3, r0
 80054d4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80054d6:	e00c      	b.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	3320      	adds	r3, #32
 80054dc:	2100      	movs	r1, #0
 80054de:	4618      	mov	r0, r3
 80054e0:	f000 fb5e 	bl	8005ba0 <RCCEx_PLLSAI2_Config>
 80054e4:	4603      	mov	r3, r0
 80054e6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80054e8:	e003      	b.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	74fb      	strb	r3, [r7, #19]
      break;
 80054ee:	e000      	b.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80054f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054f2:	7cfb      	ldrb	r3, [r7, #19]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d10b      	bne.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80054f8:	4b52      	ldr	r3, [pc, #328]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054fe:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005506:	494f      	ldr	r1, [pc, #316]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005508:	4313      	orrs	r3, r2
 800550a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800550e:	e001      	b.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005510:	7cfb      	ldrb	r3, [r7, #19]
 8005512:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800551c:	2b00      	cmp	r3, #0
 800551e:	f000 80a0 	beq.w	8005662 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005522:	2300      	movs	r3, #0
 8005524:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005526:	4b47      	ldr	r3, [pc, #284]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800552a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d101      	bne.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005532:	2301      	movs	r3, #1
 8005534:	e000      	b.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005536:	2300      	movs	r3, #0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00d      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800553c:	4b41      	ldr	r3, [pc, #260]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800553e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005540:	4a40      	ldr	r2, [pc, #256]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005542:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005546:	6593      	str	r3, [r2, #88]	@ 0x58
 8005548:	4b3e      	ldr	r3, [pc, #248]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800554a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800554c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005550:	60bb      	str	r3, [r7, #8]
 8005552:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005554:	2301      	movs	r3, #1
 8005556:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005558:	4b3b      	ldr	r3, [pc, #236]	@ (8005648 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a3a      	ldr	r2, [pc, #232]	@ (8005648 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800555e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005562:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005564:	f7fe fdba 	bl	80040dc <HAL_GetTick>
 8005568:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800556a:	e009      	b.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800556c:	f7fe fdb6 	bl	80040dc <HAL_GetTick>
 8005570:	4602      	mov	r2, r0
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	2b02      	cmp	r3, #2
 8005578:	d902      	bls.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	74fb      	strb	r3, [r7, #19]
        break;
 800557e:	e005      	b.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005580:	4b31      	ldr	r3, [pc, #196]	@ (8005648 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005588:	2b00      	cmp	r3, #0
 800558a:	d0ef      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800558c:	7cfb      	ldrb	r3, [r7, #19]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d15c      	bne.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005592:	4b2c      	ldr	r3, [pc, #176]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005594:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005598:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800559c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d01f      	beq.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055aa:	697a      	ldr	r2, [r7, #20]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d019      	beq.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80055b0:	4b24      	ldr	r3, [pc, #144]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80055bc:	4b21      	ldr	r3, [pc, #132]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055c2:	4a20      	ldr	r2, [pc, #128]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80055cc:	4b1d      	ldr	r3, [pc, #116]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055d2:	4a1c      	ldr	r2, [pc, #112]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80055dc:	4a19      	ldr	r2, [pc, #100]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	f003 0301 	and.w	r3, r3, #1
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d016      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ee:	f7fe fd75 	bl	80040dc <HAL_GetTick>
 80055f2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055f4:	e00b      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055f6:	f7fe fd71 	bl	80040dc <HAL_GetTick>
 80055fa:	4602      	mov	r2, r0
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	1ad3      	subs	r3, r2, r3
 8005600:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005604:	4293      	cmp	r3, r2
 8005606:	d902      	bls.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005608:	2303      	movs	r3, #3
 800560a:	74fb      	strb	r3, [r7, #19]
            break;
 800560c:	e006      	b.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800560e:	4b0d      	ldr	r3, [pc, #52]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005610:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005614:	f003 0302 	and.w	r3, r3, #2
 8005618:	2b00      	cmp	r3, #0
 800561a:	d0ec      	beq.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800561c:	7cfb      	ldrb	r3, [r7, #19]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d10c      	bne.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005622:	4b08      	ldr	r3, [pc, #32]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005624:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005628:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005632:	4904      	ldr	r1, [pc, #16]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005634:	4313      	orrs	r3, r2
 8005636:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800563a:	e009      	b.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800563c:	7cfb      	ldrb	r3, [r7, #19]
 800563e:	74bb      	strb	r3, [r7, #18]
 8005640:	e006      	b.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005642:	bf00      	nop
 8005644:	40021000 	.word	0x40021000
 8005648:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800564c:	7cfb      	ldrb	r3, [r7, #19]
 800564e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005650:	7c7b      	ldrb	r3, [r7, #17]
 8005652:	2b01      	cmp	r3, #1
 8005654:	d105      	bne.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005656:	4b9e      	ldr	r3, [pc, #632]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800565a:	4a9d      	ldr	r2, [pc, #628]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800565c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005660:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0301 	and.w	r3, r3, #1
 800566a:	2b00      	cmp	r3, #0
 800566c:	d00a      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800566e:	4b98      	ldr	r3, [pc, #608]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005670:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005674:	f023 0203 	bic.w	r2, r3, #3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800567c:	4994      	ldr	r1, [pc, #592]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800567e:	4313      	orrs	r3, r2
 8005680:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 0302 	and.w	r3, r3, #2
 800568c:	2b00      	cmp	r3, #0
 800568e:	d00a      	beq.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005690:	4b8f      	ldr	r3, [pc, #572]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005692:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005696:	f023 020c 	bic.w	r2, r3, #12
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800569e:	498c      	ldr	r1, [pc, #560]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056a0:	4313      	orrs	r3, r2
 80056a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0304 	and.w	r3, r3, #4
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d00a      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80056b2:	4b87      	ldr	r3, [pc, #540]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056b8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056c0:	4983      	ldr	r1, [pc, #524]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056c2:	4313      	orrs	r3, r2
 80056c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 0308 	and.w	r3, r3, #8
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d00a      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80056d4:	4b7e      	ldr	r3, [pc, #504]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056da:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056e2:	497b      	ldr	r1, [pc, #492]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056e4:	4313      	orrs	r3, r2
 80056e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0310 	and.w	r3, r3, #16
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d00a      	beq.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80056f6:	4b76      	ldr	r3, [pc, #472]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005704:	4972      	ldr	r1, [pc, #456]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005706:	4313      	orrs	r3, r2
 8005708:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 0320 	and.w	r3, r3, #32
 8005714:	2b00      	cmp	r3, #0
 8005716:	d00a      	beq.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005718:	4b6d      	ldr	r3, [pc, #436]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800571a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800571e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005726:	496a      	ldr	r1, [pc, #424]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005728:	4313      	orrs	r3, r2
 800572a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00a      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800573a:	4b65      	ldr	r3, [pc, #404]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800573c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005740:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005748:	4961      	ldr	r1, [pc, #388]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800574a:	4313      	orrs	r3, r2
 800574c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005758:	2b00      	cmp	r3, #0
 800575a:	d00a      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800575c:	4b5c      	ldr	r3, [pc, #368]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800575e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005762:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800576a:	4959      	ldr	r1, [pc, #356]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800576c:	4313      	orrs	r3, r2
 800576e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00a      	beq.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800577e:	4b54      	ldr	r3, [pc, #336]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005780:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005784:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800578c:	4950      	ldr	r1, [pc, #320]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800578e:	4313      	orrs	r3, r2
 8005790:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00a      	beq.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80057a0:	4b4b      	ldr	r3, [pc, #300]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057a6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057ae:	4948      	ldr	r1, [pc, #288]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057b0:	4313      	orrs	r3, r2
 80057b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00a      	beq.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80057c2:	4b43      	ldr	r3, [pc, #268]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057c8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057d0:	493f      	ldr	r1, [pc, #252]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057d2:	4313      	orrs	r3, r2
 80057d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d028      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80057e4:	4b3a      	ldr	r3, [pc, #232]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057ea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057f2:	4937      	ldr	r1, [pc, #220]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057f4:	4313      	orrs	r3, r2
 80057f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005802:	d106      	bne.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005804:	4b32      	ldr	r3, [pc, #200]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	4a31      	ldr	r2, [pc, #196]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800580a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800580e:	60d3      	str	r3, [r2, #12]
 8005810:	e011      	b.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005816:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800581a:	d10c      	bne.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	3304      	adds	r3, #4
 8005820:	2101      	movs	r1, #1
 8005822:	4618      	mov	r0, r3
 8005824:	f000 f8c8 	bl	80059b8 <RCCEx_PLLSAI1_Config>
 8005828:	4603      	mov	r3, r0
 800582a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800582c:	7cfb      	ldrb	r3, [r7, #19]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d001      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005832:	7cfb      	ldrb	r3, [r7, #19]
 8005834:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d028      	beq.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005842:	4b23      	ldr	r3, [pc, #140]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005844:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005848:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005850:	491f      	ldr	r1, [pc, #124]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005852:	4313      	orrs	r3, r2
 8005854:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800585c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005860:	d106      	bne.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005862:	4b1b      	ldr	r3, [pc, #108]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	4a1a      	ldr	r2, [pc, #104]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005868:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800586c:	60d3      	str	r3, [r2, #12]
 800586e:	e011      	b.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005874:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005878:	d10c      	bne.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	3304      	adds	r3, #4
 800587e:	2101      	movs	r1, #1
 8005880:	4618      	mov	r0, r3
 8005882:	f000 f899 	bl	80059b8 <RCCEx_PLLSAI1_Config>
 8005886:	4603      	mov	r3, r0
 8005888:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800588a:	7cfb      	ldrb	r3, [r7, #19]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d001      	beq.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005890:	7cfb      	ldrb	r3, [r7, #19]
 8005892:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800589c:	2b00      	cmp	r3, #0
 800589e:	d02b      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80058a0:	4b0b      	ldr	r3, [pc, #44]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058a6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058ae:	4908      	ldr	r1, [pc, #32]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058b0:	4313      	orrs	r3, r2
 80058b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80058be:	d109      	bne.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058c0:	4b03      	ldr	r3, [pc, #12]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	4a02      	ldr	r2, [pc, #8]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80058ca:	60d3      	str	r3, [r2, #12]
 80058cc:	e014      	b.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80058ce:	bf00      	nop
 80058d0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80058dc:	d10c      	bne.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	3304      	adds	r3, #4
 80058e2:	2101      	movs	r1, #1
 80058e4:	4618      	mov	r0, r3
 80058e6:	f000 f867 	bl	80059b8 <RCCEx_PLLSAI1_Config>
 80058ea:	4603      	mov	r3, r0
 80058ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80058ee:	7cfb      	ldrb	r3, [r7, #19]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d001      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80058f4:	7cfb      	ldrb	r3, [r7, #19]
 80058f6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005900:	2b00      	cmp	r3, #0
 8005902:	d02f      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005904:	4b2b      	ldr	r3, [pc, #172]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005906:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800590a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005912:	4928      	ldr	r1, [pc, #160]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005914:	4313      	orrs	r3, r2
 8005916:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800591e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005922:	d10d      	bne.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	3304      	adds	r3, #4
 8005928:	2102      	movs	r1, #2
 800592a:	4618      	mov	r0, r3
 800592c:	f000 f844 	bl	80059b8 <RCCEx_PLLSAI1_Config>
 8005930:	4603      	mov	r3, r0
 8005932:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005934:	7cfb      	ldrb	r3, [r7, #19]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d014      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800593a:	7cfb      	ldrb	r3, [r7, #19]
 800593c:	74bb      	strb	r3, [r7, #18]
 800593e:	e011      	b.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005944:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005948:	d10c      	bne.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	3320      	adds	r3, #32
 800594e:	2102      	movs	r1, #2
 8005950:	4618      	mov	r0, r3
 8005952:	f000 f925 	bl	8005ba0 <RCCEx_PLLSAI2_Config>
 8005956:	4603      	mov	r3, r0
 8005958:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800595a:	7cfb      	ldrb	r3, [r7, #19]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d001      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005960:	7cfb      	ldrb	r3, [r7, #19]
 8005962:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00a      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005970:	4b10      	ldr	r3, [pc, #64]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005972:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005976:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800597e:	490d      	ldr	r1, [pc, #52]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005980:	4313      	orrs	r3, r2
 8005982:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00b      	beq.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005992:	4b08      	ldr	r3, [pc, #32]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005994:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005998:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059a2:	4904      	ldr	r1, [pc, #16]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80059a4:	4313      	orrs	r3, r2
 80059a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80059aa:	7cbb      	ldrb	r3, [r7, #18]
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3718      	adds	r7, #24
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}
 80059b4:	40021000 	.word	0x40021000

080059b8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80059c2:	2300      	movs	r3, #0
 80059c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80059c6:	4b75      	ldr	r3, [pc, #468]	@ (8005b9c <RCCEx_PLLSAI1_Config+0x1e4>)
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	f003 0303 	and.w	r3, r3, #3
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d018      	beq.n	8005a04 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80059d2:	4b72      	ldr	r3, [pc, #456]	@ (8005b9c <RCCEx_PLLSAI1_Config+0x1e4>)
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	f003 0203 	and.w	r2, r3, #3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	429a      	cmp	r2, r3
 80059e0:	d10d      	bne.n	80059fe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
       ||
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d009      	beq.n	80059fe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80059ea:	4b6c      	ldr	r3, [pc, #432]	@ (8005b9c <RCCEx_PLLSAI1_Config+0x1e4>)
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	091b      	lsrs	r3, r3, #4
 80059f0:	f003 0307 	and.w	r3, r3, #7
 80059f4:	1c5a      	adds	r2, r3, #1
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	685b      	ldr	r3, [r3, #4]
       ||
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d047      	beq.n	8005a8e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	73fb      	strb	r3, [r7, #15]
 8005a02:	e044      	b.n	8005a8e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2b03      	cmp	r3, #3
 8005a0a:	d018      	beq.n	8005a3e <RCCEx_PLLSAI1_Config+0x86>
 8005a0c:	2b03      	cmp	r3, #3
 8005a0e:	d825      	bhi.n	8005a5c <RCCEx_PLLSAI1_Config+0xa4>
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d002      	beq.n	8005a1a <RCCEx_PLLSAI1_Config+0x62>
 8005a14:	2b02      	cmp	r3, #2
 8005a16:	d009      	beq.n	8005a2c <RCCEx_PLLSAI1_Config+0x74>
 8005a18:	e020      	b.n	8005a5c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005a1a:	4b60      	ldr	r3, [pc, #384]	@ (8005b9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 0302 	and.w	r3, r3, #2
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d11d      	bne.n	8005a62 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a2a:	e01a      	b.n	8005a62 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005a2c:	4b5b      	ldr	r3, [pc, #364]	@ (8005b9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d116      	bne.n	8005a66 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a3c:	e013      	b.n	8005a66 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005a3e:	4b57      	ldr	r3, [pc, #348]	@ (8005b9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d10f      	bne.n	8005a6a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005a4a:	4b54      	ldr	r3, [pc, #336]	@ (8005b9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d109      	bne.n	8005a6a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005a5a:	e006      	b.n	8005a6a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	73fb      	strb	r3, [r7, #15]
      break;
 8005a60:	e004      	b.n	8005a6c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005a62:	bf00      	nop
 8005a64:	e002      	b.n	8005a6c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005a66:	bf00      	nop
 8005a68:	e000      	b.n	8005a6c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005a6a:	bf00      	nop
    }

    if(status == HAL_OK)
 8005a6c:	7bfb      	ldrb	r3, [r7, #15]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d10d      	bne.n	8005a8e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005a72:	4b4a      	ldr	r3, [pc, #296]	@ (8005b9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6819      	ldr	r1, [r3, #0]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	3b01      	subs	r3, #1
 8005a84:	011b      	lsls	r3, r3, #4
 8005a86:	430b      	orrs	r3, r1
 8005a88:	4944      	ldr	r1, [pc, #272]	@ (8005b9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005a8e:	7bfb      	ldrb	r3, [r7, #15]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d17d      	bne.n	8005b90 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005a94:	4b41      	ldr	r3, [pc, #260]	@ (8005b9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a40      	ldr	r2, [pc, #256]	@ (8005b9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a9a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005a9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005aa0:	f7fe fb1c 	bl	80040dc <HAL_GetTick>
 8005aa4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005aa6:	e009      	b.n	8005abc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005aa8:	f7fe fb18 	bl	80040dc <HAL_GetTick>
 8005aac:	4602      	mov	r2, r0
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d902      	bls.n	8005abc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	73fb      	strb	r3, [r7, #15]
        break;
 8005aba:	e005      	b.n	8005ac8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005abc:	4b37      	ldr	r3, [pc, #220]	@ (8005b9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d1ef      	bne.n	8005aa8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005ac8:	7bfb      	ldrb	r3, [r7, #15]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d160      	bne.n	8005b90 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d111      	bne.n	8005af8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005ad4:	4b31      	ldr	r3, [pc, #196]	@ (8005b9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005adc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	6892      	ldr	r2, [r2, #8]
 8005ae4:	0211      	lsls	r1, r2, #8
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	68d2      	ldr	r2, [r2, #12]
 8005aea:	0912      	lsrs	r2, r2, #4
 8005aec:	0452      	lsls	r2, r2, #17
 8005aee:	430a      	orrs	r2, r1
 8005af0:	492a      	ldr	r1, [pc, #168]	@ (8005b9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005af2:	4313      	orrs	r3, r2
 8005af4:	610b      	str	r3, [r1, #16]
 8005af6:	e027      	b.n	8005b48 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d112      	bne.n	8005b24 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005afe:	4b27      	ldr	r3, [pc, #156]	@ (8005b9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005b06:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	6892      	ldr	r2, [r2, #8]
 8005b0e:	0211      	lsls	r1, r2, #8
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	6912      	ldr	r2, [r2, #16]
 8005b14:	0852      	lsrs	r2, r2, #1
 8005b16:	3a01      	subs	r2, #1
 8005b18:	0552      	lsls	r2, r2, #21
 8005b1a:	430a      	orrs	r2, r1
 8005b1c:	491f      	ldr	r1, [pc, #124]	@ (8005b9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	610b      	str	r3, [r1, #16]
 8005b22:	e011      	b.n	8005b48 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b24:	4b1d      	ldr	r3, [pc, #116]	@ (8005b9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b26:	691b      	ldr	r3, [r3, #16]
 8005b28:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005b2c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	6892      	ldr	r2, [r2, #8]
 8005b34:	0211      	lsls	r1, r2, #8
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	6952      	ldr	r2, [r2, #20]
 8005b3a:	0852      	lsrs	r2, r2, #1
 8005b3c:	3a01      	subs	r2, #1
 8005b3e:	0652      	lsls	r2, r2, #25
 8005b40:	430a      	orrs	r2, r1
 8005b42:	4916      	ldr	r1, [pc, #88]	@ (8005b9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b44:	4313      	orrs	r3, r2
 8005b46:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005b48:	4b14      	ldr	r3, [pc, #80]	@ (8005b9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a13      	ldr	r2, [pc, #76]	@ (8005b9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b4e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005b52:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b54:	f7fe fac2 	bl	80040dc <HAL_GetTick>
 8005b58:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005b5a:	e009      	b.n	8005b70 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b5c:	f7fe fabe 	bl	80040dc <HAL_GetTick>
 8005b60:	4602      	mov	r2, r0
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	d902      	bls.n	8005b70 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	73fb      	strb	r3, [r7, #15]
          break;
 8005b6e:	e005      	b.n	8005b7c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005b70:	4b0a      	ldr	r3, [pc, #40]	@ (8005b9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d0ef      	beq.n	8005b5c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005b7c:	7bfb      	ldrb	r3, [r7, #15]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d106      	bne.n	8005b90 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005b82:	4b06      	ldr	r3, [pc, #24]	@ (8005b9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b84:	691a      	ldr	r2, [r3, #16]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	699b      	ldr	r3, [r3, #24]
 8005b8a:	4904      	ldr	r1, [pc, #16]	@ (8005b9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3710      	adds	r7, #16
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	40021000 	.word	0x40021000

08005ba0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005baa:	2300      	movs	r3, #0
 8005bac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005bae:	4b6a      	ldr	r3, [pc, #424]	@ (8005d58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	f003 0303 	and.w	r3, r3, #3
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d018      	beq.n	8005bec <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005bba:	4b67      	ldr	r3, [pc, #412]	@ (8005d58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	f003 0203 	and.w	r2, r3, #3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d10d      	bne.n	8005be6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
       ||
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d009      	beq.n	8005be6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005bd2:	4b61      	ldr	r3, [pc, #388]	@ (8005d58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	091b      	lsrs	r3, r3, #4
 8005bd8:	f003 0307 	and.w	r3, r3, #7
 8005bdc:	1c5a      	adds	r2, r3, #1
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	685b      	ldr	r3, [r3, #4]
       ||
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d047      	beq.n	8005c76 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	73fb      	strb	r3, [r7, #15]
 8005bea:	e044      	b.n	8005c76 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2b03      	cmp	r3, #3
 8005bf2:	d018      	beq.n	8005c26 <RCCEx_PLLSAI2_Config+0x86>
 8005bf4:	2b03      	cmp	r3, #3
 8005bf6:	d825      	bhi.n	8005c44 <RCCEx_PLLSAI2_Config+0xa4>
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d002      	beq.n	8005c02 <RCCEx_PLLSAI2_Config+0x62>
 8005bfc:	2b02      	cmp	r3, #2
 8005bfe:	d009      	beq.n	8005c14 <RCCEx_PLLSAI2_Config+0x74>
 8005c00:	e020      	b.n	8005c44 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005c02:	4b55      	ldr	r3, [pc, #340]	@ (8005d58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 0302 	and.w	r3, r3, #2
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d11d      	bne.n	8005c4a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c12:	e01a      	b.n	8005c4a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005c14:	4b50      	ldr	r3, [pc, #320]	@ (8005d58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d116      	bne.n	8005c4e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c24:	e013      	b.n	8005c4e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005c26:	4b4c      	ldr	r3, [pc, #304]	@ (8005d58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d10f      	bne.n	8005c52 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005c32:	4b49      	ldr	r3, [pc, #292]	@ (8005d58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d109      	bne.n	8005c52 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005c42:	e006      	b.n	8005c52 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	73fb      	strb	r3, [r7, #15]
      break;
 8005c48:	e004      	b.n	8005c54 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005c4a:	bf00      	nop
 8005c4c:	e002      	b.n	8005c54 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005c4e:	bf00      	nop
 8005c50:	e000      	b.n	8005c54 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005c52:	bf00      	nop
    }

    if(status == HAL_OK)
 8005c54:	7bfb      	ldrb	r3, [r7, #15]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d10d      	bne.n	8005c76 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005c5a:	4b3f      	ldr	r3, [pc, #252]	@ (8005d58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6819      	ldr	r1, [r3, #0]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	011b      	lsls	r3, r3, #4
 8005c6e:	430b      	orrs	r3, r1
 8005c70:	4939      	ldr	r1, [pc, #228]	@ (8005d58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c72:	4313      	orrs	r3, r2
 8005c74:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005c76:	7bfb      	ldrb	r3, [r7, #15]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d167      	bne.n	8005d4c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005c7c:	4b36      	ldr	r3, [pc, #216]	@ (8005d58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a35      	ldr	r2, [pc, #212]	@ (8005d58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c88:	f7fe fa28 	bl	80040dc <HAL_GetTick>
 8005c8c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005c8e:	e009      	b.n	8005ca4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005c90:	f7fe fa24 	bl	80040dc <HAL_GetTick>
 8005c94:	4602      	mov	r2, r0
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	1ad3      	subs	r3, r2, r3
 8005c9a:	2b02      	cmp	r3, #2
 8005c9c:	d902      	bls.n	8005ca4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005c9e:	2303      	movs	r3, #3
 8005ca0:	73fb      	strb	r3, [r7, #15]
        break;
 8005ca2:	e005      	b.n	8005cb0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005ca4:	4b2c      	ldr	r3, [pc, #176]	@ (8005d58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d1ef      	bne.n	8005c90 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005cb0:	7bfb      	ldrb	r3, [r7, #15]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d14a      	bne.n	8005d4c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d111      	bne.n	8005ce0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005cbc:	4b26      	ldr	r3, [pc, #152]	@ (8005d58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cbe:	695b      	ldr	r3, [r3, #20]
 8005cc0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005cc4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	6892      	ldr	r2, [r2, #8]
 8005ccc:	0211      	lsls	r1, r2, #8
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	68d2      	ldr	r2, [r2, #12]
 8005cd2:	0912      	lsrs	r2, r2, #4
 8005cd4:	0452      	lsls	r2, r2, #17
 8005cd6:	430a      	orrs	r2, r1
 8005cd8:	491f      	ldr	r1, [pc, #124]	@ (8005d58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	614b      	str	r3, [r1, #20]
 8005cde:	e011      	b.n	8005d04 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005ce0:	4b1d      	ldr	r3, [pc, #116]	@ (8005d58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ce2:	695b      	ldr	r3, [r3, #20]
 8005ce4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005ce8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	6892      	ldr	r2, [r2, #8]
 8005cf0:	0211      	lsls	r1, r2, #8
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	6912      	ldr	r2, [r2, #16]
 8005cf6:	0852      	lsrs	r2, r2, #1
 8005cf8:	3a01      	subs	r2, #1
 8005cfa:	0652      	lsls	r2, r2, #25
 8005cfc:	430a      	orrs	r2, r1
 8005cfe:	4916      	ldr	r1, [pc, #88]	@ (8005d58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d00:	4313      	orrs	r3, r2
 8005d02:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005d04:	4b14      	ldr	r3, [pc, #80]	@ (8005d58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a13      	ldr	r2, [pc, #76]	@ (8005d58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d0e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d10:	f7fe f9e4 	bl	80040dc <HAL_GetTick>
 8005d14:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005d16:	e009      	b.n	8005d2c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005d18:	f7fe f9e0 	bl	80040dc <HAL_GetTick>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	1ad3      	subs	r3, r2, r3
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d902      	bls.n	8005d2c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005d26:	2303      	movs	r3, #3
 8005d28:	73fb      	strb	r3, [r7, #15]
          break;
 8005d2a:	e005      	b.n	8005d38 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8005d58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d0ef      	beq.n	8005d18 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005d38:	7bfb      	ldrb	r3, [r7, #15]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d106      	bne.n	8005d4c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005d3e:	4b06      	ldr	r3, [pc, #24]	@ (8005d58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d40:	695a      	ldr	r2, [r3, #20]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	695b      	ldr	r3, [r3, #20]
 8005d46:	4904      	ldr	r1, [pc, #16]	@ (8005d58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3710      	adds	r7, #16
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	40021000 	.word	0x40021000

08005d5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d101      	bne.n	8005d6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e095      	b.n	8005e9a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d108      	bne.n	8005d88 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d7e:	d009      	beq.n	8005d94 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	61da      	str	r2, [r3, #28]
 8005d86:	e005      	b.n	8005d94 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d106      	bne.n	8005db4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f7fd fe4e 	bl	8003a50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2202      	movs	r2, #2
 8005db8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005dca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005dd4:	d902      	bls.n	8005ddc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	60fb      	str	r3, [r7, #12]
 8005dda:	e002      	b.n	8005de2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005ddc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005de0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005dea:	d007      	beq.n	8005dfc <HAL_SPI_Init+0xa0>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005df4:	d002      	beq.n	8005dfc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005e0c:	431a      	orrs	r2, r3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	691b      	ldr	r3, [r3, #16]
 8005e12:	f003 0302 	and.w	r3, r3, #2
 8005e16:	431a      	orrs	r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	695b      	ldr	r3, [r3, #20]
 8005e1c:	f003 0301 	and.w	r3, r3, #1
 8005e20:	431a      	orrs	r2, r3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	699b      	ldr	r3, [r3, #24]
 8005e26:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e2a:	431a      	orrs	r2, r3
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	69db      	ldr	r3, [r3, #28]
 8005e30:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e34:	431a      	orrs	r2, r3
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6a1b      	ldr	r3, [r3, #32]
 8005e3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e3e:	ea42 0103 	orr.w	r1, r2, r3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e46:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	430a      	orrs	r2, r1
 8005e50:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	699b      	ldr	r3, [r3, #24]
 8005e56:	0c1b      	lsrs	r3, r3, #16
 8005e58:	f003 0204 	and.w	r2, r3, #4
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e60:	f003 0310 	and.w	r3, r3, #16
 8005e64:	431a      	orrs	r2, r3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e6a:	f003 0308 	and.w	r3, r3, #8
 8005e6e:	431a      	orrs	r2, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005e78:	ea42 0103 	orr.w	r1, r2, r3
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	430a      	orrs	r2, r1
 8005e88:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3710      	adds	r7, #16
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}

08005ea2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ea2:	b580      	push	{r7, lr}
 8005ea4:	b088      	sub	sp, #32
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	60f8      	str	r0, [r7, #12]
 8005eaa:	60b9      	str	r1, [r7, #8]
 8005eac:	603b      	str	r3, [r7, #0]
 8005eae:	4613      	mov	r3, r2
 8005eb0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d101      	bne.n	8005ec4 <HAL_SPI_Transmit+0x22>
 8005ec0:	2302      	movs	r3, #2
 8005ec2:	e15f      	b.n	8006184 <HAL_SPI_Transmit+0x2e2>
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ecc:	f7fe f906 	bl	80040dc <HAL_GetTick>
 8005ed0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005ed2:	88fb      	ldrh	r3, [r7, #6]
 8005ed4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d002      	beq.n	8005ee8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005ee2:	2302      	movs	r3, #2
 8005ee4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005ee6:	e148      	b.n	800617a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d002      	beq.n	8005ef4 <HAL_SPI_Transmit+0x52>
 8005eee:	88fb      	ldrh	r3, [r7, #6]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d102      	bne.n	8005efa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005ef8:	e13f      	b.n	800617a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2203      	movs	r2, #3
 8005efe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2200      	movs	r2, #0
 8005f06:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	68ba      	ldr	r2, [r7, #8]
 8005f0c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	88fa      	ldrh	r2, [r7, #6]
 8005f12:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	88fa      	ldrh	r2, [r7, #6]
 8005f18:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2200      	movs	r2, #0
 8005f24:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2200      	movs	r2, #0
 8005f34:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f44:	d10f      	bne.n	8005f66 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f54:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005f64:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f70:	2b40      	cmp	r3, #64	@ 0x40
 8005f72:	d007      	beq.n	8005f84 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f82:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005f8c:	d94f      	bls.n	800602e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d002      	beq.n	8005f9c <HAL_SPI_Transmit+0xfa>
 8005f96:	8afb      	ldrh	r3, [r7, #22]
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d142      	bne.n	8006022 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fa0:	881a      	ldrh	r2, [r3, #0]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fac:	1c9a      	adds	r2, r3, #2
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	3b01      	subs	r3, #1
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005fc0:	e02f      	b.n	8006022 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	f003 0302 	and.w	r3, r3, #2
 8005fcc:	2b02      	cmp	r3, #2
 8005fce:	d112      	bne.n	8005ff6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fd4:	881a      	ldrh	r2, [r3, #0]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fe0:	1c9a      	adds	r2, r3, #2
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	3b01      	subs	r3, #1
 8005fee:	b29a      	uxth	r2, r3
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005ff4:	e015      	b.n	8006022 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ff6:	f7fe f871 	bl	80040dc <HAL_GetTick>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	69bb      	ldr	r3, [r7, #24]
 8005ffe:	1ad3      	subs	r3, r2, r3
 8006000:	683a      	ldr	r2, [r7, #0]
 8006002:	429a      	cmp	r2, r3
 8006004:	d803      	bhi.n	800600e <HAL_SPI_Transmit+0x16c>
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800600c:	d102      	bne.n	8006014 <HAL_SPI_Transmit+0x172>
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d106      	bne.n	8006022 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8006014:	2303      	movs	r3, #3
 8006016:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006020:	e0ab      	b.n	800617a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006026:	b29b      	uxth	r3, r3
 8006028:	2b00      	cmp	r3, #0
 800602a:	d1ca      	bne.n	8005fc2 <HAL_SPI_Transmit+0x120>
 800602c:	e080      	b.n	8006130 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d002      	beq.n	800603c <HAL_SPI_Transmit+0x19a>
 8006036:	8afb      	ldrh	r3, [r7, #22]
 8006038:	2b01      	cmp	r3, #1
 800603a:	d174      	bne.n	8006126 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006040:	b29b      	uxth	r3, r3
 8006042:	2b01      	cmp	r3, #1
 8006044:	d912      	bls.n	800606c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800604a:	881a      	ldrh	r2, [r3, #0]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006056:	1c9a      	adds	r2, r3, #2
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006060:	b29b      	uxth	r3, r3
 8006062:	3b02      	subs	r3, #2
 8006064:	b29a      	uxth	r2, r3
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800606a:	e05c      	b.n	8006126 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	330c      	adds	r3, #12
 8006076:	7812      	ldrb	r2, [r2, #0]
 8006078:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800607e:	1c5a      	adds	r2, r3, #1
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006088:	b29b      	uxth	r3, r3
 800608a:	3b01      	subs	r3, #1
 800608c:	b29a      	uxth	r2, r3
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006092:	e048      	b.n	8006126 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	f003 0302 	and.w	r3, r3, #2
 800609e:	2b02      	cmp	r3, #2
 80060a0:	d12b      	bne.n	80060fa <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d912      	bls.n	80060d2 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060b0:	881a      	ldrh	r2, [r3, #0]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060bc:	1c9a      	adds	r2, r3, #2
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	3b02      	subs	r3, #2
 80060ca:	b29a      	uxth	r2, r3
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80060d0:	e029      	b.n	8006126 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	330c      	adds	r3, #12
 80060dc:	7812      	ldrb	r2, [r2, #0]
 80060de:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060e4:	1c5a      	adds	r2, r3, #1
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	3b01      	subs	r3, #1
 80060f2:	b29a      	uxth	r2, r3
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80060f8:	e015      	b.n	8006126 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060fa:	f7fd ffef 	bl	80040dc <HAL_GetTick>
 80060fe:	4602      	mov	r2, r0
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	683a      	ldr	r2, [r7, #0]
 8006106:	429a      	cmp	r2, r3
 8006108:	d803      	bhi.n	8006112 <HAL_SPI_Transmit+0x270>
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006110:	d102      	bne.n	8006118 <HAL_SPI_Transmit+0x276>
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d106      	bne.n	8006126 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8006118:	2303      	movs	r3, #3
 800611a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006124:	e029      	b.n	800617a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800612a:	b29b      	uxth	r3, r3
 800612c:	2b00      	cmp	r3, #0
 800612e:	d1b1      	bne.n	8006094 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006130:	69ba      	ldr	r2, [r7, #24]
 8006132:	6839      	ldr	r1, [r7, #0]
 8006134:	68f8      	ldr	r0, [r7, #12]
 8006136:	f000 fb69 	bl	800680c <SPI_EndRxTxTransaction>
 800613a:	4603      	mov	r3, r0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d002      	beq.n	8006146 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2220      	movs	r2, #32
 8006144:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d10a      	bne.n	8006164 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800614e:	2300      	movs	r3, #0
 8006150:	613b      	str	r3, [r7, #16]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	613b      	str	r3, [r7, #16]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	613b      	str	r3, [r7, #16]
 8006162:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006168:	2b00      	cmp	r3, #0
 800616a:	d002      	beq.n	8006172 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	77fb      	strb	r3, [r7, #31]
 8006170:	e003      	b.n	800617a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2201      	movs	r2, #1
 8006176:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2200      	movs	r2, #0
 800617e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8006182:	7ffb      	ldrb	r3, [r7, #31]
}
 8006184:	4618      	mov	r0, r3
 8006186:	3720      	adds	r7, #32
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b08a      	sub	sp, #40	@ 0x28
 8006190:	af00      	add	r7, sp, #0
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	607a      	str	r2, [r7, #4]
 8006198:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800619a:	2301      	movs	r3, #1
 800619c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800619e:	2300      	movs	r3, #0
 80061a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d101      	bne.n	80061b2 <HAL_SPI_TransmitReceive+0x26>
 80061ae:	2302      	movs	r3, #2
 80061b0:	e20a      	b.n	80065c8 <HAL_SPI_TransmitReceive+0x43c>
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2201      	movs	r2, #1
 80061b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061ba:	f7fd ff8f 	bl	80040dc <HAL_GetTick>
 80061be:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80061c6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80061ce:	887b      	ldrh	r3, [r7, #2]
 80061d0:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80061d2:	887b      	ldrh	r3, [r7, #2]
 80061d4:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80061d6:	7efb      	ldrb	r3, [r7, #27]
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d00e      	beq.n	80061fa <HAL_SPI_TransmitReceive+0x6e>
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80061e2:	d106      	bne.n	80061f2 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d102      	bne.n	80061f2 <HAL_SPI_TransmitReceive+0x66>
 80061ec:	7efb      	ldrb	r3, [r7, #27]
 80061ee:	2b04      	cmp	r3, #4
 80061f0:	d003      	beq.n	80061fa <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80061f2:	2302      	movs	r3, #2
 80061f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80061f8:	e1e0      	b.n	80065bc <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d005      	beq.n	800620c <HAL_SPI_TransmitReceive+0x80>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d002      	beq.n	800620c <HAL_SPI_TransmitReceive+0x80>
 8006206:	887b      	ldrh	r3, [r7, #2]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d103      	bne.n	8006214 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8006212:	e1d3      	b.n	80065bc <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800621a:	b2db      	uxtb	r3, r3
 800621c:	2b04      	cmp	r3, #4
 800621e:	d003      	beq.n	8006228 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2205      	movs	r2, #5
 8006224:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2200      	movs	r2, #0
 800622c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	887a      	ldrh	r2, [r7, #2]
 8006238:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	887a      	ldrh	r2, [r7, #2]
 8006240:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	68ba      	ldr	r2, [r7, #8]
 8006248:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	887a      	ldrh	r2, [r7, #2]
 800624e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	887a      	ldrh	r2, [r7, #2]
 8006254:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2200      	movs	r2, #0
 800625a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2200      	movs	r2, #0
 8006260:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800626a:	d802      	bhi.n	8006272 <HAL_SPI_TransmitReceive+0xe6>
 800626c:	8a3b      	ldrh	r3, [r7, #16]
 800626e:	2b01      	cmp	r3, #1
 8006270:	d908      	bls.n	8006284 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	685a      	ldr	r2, [r3, #4]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006280:	605a      	str	r2, [r3, #4]
 8006282:	e007      	b.n	8006294 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	685a      	ldr	r2, [r3, #4]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006292:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800629e:	2b40      	cmp	r3, #64	@ 0x40
 80062a0:	d007      	beq.n	80062b2 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80062b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	68db      	ldr	r3, [r3, #12]
 80062b6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80062ba:	f240 8081 	bls.w	80063c0 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d002      	beq.n	80062cc <HAL_SPI_TransmitReceive+0x140>
 80062c6:	8a7b      	ldrh	r3, [r7, #18]
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d16d      	bne.n	80063a8 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062d0:	881a      	ldrh	r2, [r3, #0]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062dc:	1c9a      	adds	r2, r3, #2
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	3b01      	subs	r3, #1
 80062ea:	b29a      	uxth	r2, r3
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062f0:	e05a      	b.n	80063a8 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	f003 0302 	and.w	r3, r3, #2
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	d11b      	bne.n	8006338 <HAL_SPI_TransmitReceive+0x1ac>
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006304:	b29b      	uxth	r3, r3
 8006306:	2b00      	cmp	r3, #0
 8006308:	d016      	beq.n	8006338 <HAL_SPI_TransmitReceive+0x1ac>
 800630a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800630c:	2b01      	cmp	r3, #1
 800630e:	d113      	bne.n	8006338 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006314:	881a      	ldrh	r2, [r3, #0]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006320:	1c9a      	adds	r2, r3, #2
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800632a:	b29b      	uxth	r3, r3
 800632c:	3b01      	subs	r3, #1
 800632e:	b29a      	uxth	r2, r3
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006334:	2300      	movs	r3, #0
 8006336:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	f003 0301 	and.w	r3, r3, #1
 8006342:	2b01      	cmp	r3, #1
 8006344:	d11c      	bne.n	8006380 <HAL_SPI_TransmitReceive+0x1f4>
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800634c:	b29b      	uxth	r3, r3
 800634e:	2b00      	cmp	r3, #0
 8006350:	d016      	beq.n	8006380 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68da      	ldr	r2, [r3, #12]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800635c:	b292      	uxth	r2, r2
 800635e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006364:	1c9a      	adds	r2, r3, #2
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006370:	b29b      	uxth	r3, r3
 8006372:	3b01      	subs	r3, #1
 8006374:	b29a      	uxth	r2, r3
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800637c:	2301      	movs	r3, #1
 800637e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006380:	f7fd feac 	bl	80040dc <HAL_GetTick>
 8006384:	4602      	mov	r2, r0
 8006386:	69fb      	ldr	r3, [r7, #28]
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800638c:	429a      	cmp	r2, r3
 800638e:	d80b      	bhi.n	80063a8 <HAL_SPI_TransmitReceive+0x21c>
 8006390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006396:	d007      	beq.n	80063a8 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8006398:	2303      	movs	r3, #3
 800639a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2201      	movs	r2, #1
 80063a2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80063a6:	e109      	b.n	80065bc <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d19f      	bne.n	80062f2 <HAL_SPI_TransmitReceive+0x166>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d199      	bne.n	80062f2 <HAL_SPI_TransmitReceive+0x166>
 80063be:	e0e3      	b.n	8006588 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d003      	beq.n	80063d0 <HAL_SPI_TransmitReceive+0x244>
 80063c8:	8a7b      	ldrh	r3, [r7, #18]
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	f040 80cf 	bne.w	800656e <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d912      	bls.n	8006400 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063de:	881a      	ldrh	r2, [r3, #0]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ea:	1c9a      	adds	r2, r3, #2
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	3b02      	subs	r3, #2
 80063f8:	b29a      	uxth	r2, r3
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80063fe:	e0b6      	b.n	800656e <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	330c      	adds	r3, #12
 800640a:	7812      	ldrb	r2, [r2, #0]
 800640c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006412:	1c5a      	adds	r2, r3, #1
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800641c:	b29b      	uxth	r3, r3
 800641e:	3b01      	subs	r3, #1
 8006420:	b29a      	uxth	r2, r3
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006426:	e0a2      	b.n	800656e <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	f003 0302 	and.w	r3, r3, #2
 8006432:	2b02      	cmp	r3, #2
 8006434:	d134      	bne.n	80064a0 <HAL_SPI_TransmitReceive+0x314>
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800643a:	b29b      	uxth	r3, r3
 800643c:	2b00      	cmp	r3, #0
 800643e:	d02f      	beq.n	80064a0 <HAL_SPI_TransmitReceive+0x314>
 8006440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006442:	2b01      	cmp	r3, #1
 8006444:	d12c      	bne.n	80064a0 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800644a:	b29b      	uxth	r3, r3
 800644c:	2b01      	cmp	r3, #1
 800644e:	d912      	bls.n	8006476 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006454:	881a      	ldrh	r2, [r3, #0]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006460:	1c9a      	adds	r2, r3, #2
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800646a:	b29b      	uxth	r3, r3
 800646c:	3b02      	subs	r3, #2
 800646e:	b29a      	uxth	r2, r3
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006474:	e012      	b.n	800649c <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	330c      	adds	r3, #12
 8006480:	7812      	ldrb	r2, [r2, #0]
 8006482:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006488:	1c5a      	adds	r2, r3, #1
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006492:	b29b      	uxth	r3, r3
 8006494:	3b01      	subs	r3, #1
 8006496:	b29a      	uxth	r2, r3
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800649c:	2300      	movs	r3, #0
 800649e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	f003 0301 	and.w	r3, r3, #1
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d148      	bne.n	8006540 <HAL_SPI_TransmitReceive+0x3b4>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d042      	beq.n	8006540 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d923      	bls.n	800650e <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	68da      	ldr	r2, [r3, #12]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064d0:	b292      	uxth	r2, r2
 80064d2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064d8:	1c9a      	adds	r2, r3, #2
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	3b02      	subs	r3, #2
 80064e8:	b29a      	uxth	r2, r3
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d81f      	bhi.n	800653c <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	685a      	ldr	r2, [r3, #4]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800650a:	605a      	str	r2, [r3, #4]
 800650c:	e016      	b.n	800653c <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f103 020c 	add.w	r2, r3, #12
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800651a:	7812      	ldrb	r2, [r2, #0]
 800651c:	b2d2      	uxtb	r2, r2
 800651e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006524:	1c5a      	adds	r2, r3, #1
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006530:	b29b      	uxth	r3, r3
 8006532:	3b01      	subs	r3, #1
 8006534:	b29a      	uxth	r2, r3
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800653c:	2301      	movs	r3, #1
 800653e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006540:	f7fd fdcc 	bl	80040dc <HAL_GetTick>
 8006544:	4602      	mov	r2, r0
 8006546:	69fb      	ldr	r3, [r7, #28]
 8006548:	1ad3      	subs	r3, r2, r3
 800654a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800654c:	429a      	cmp	r2, r3
 800654e:	d803      	bhi.n	8006558 <HAL_SPI_TransmitReceive+0x3cc>
 8006550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006556:	d102      	bne.n	800655e <HAL_SPI_TransmitReceive+0x3d2>
 8006558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800655a:	2b00      	cmp	r3, #0
 800655c:	d107      	bne.n	800656e <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800655e:	2303      	movs	r3, #3
 8006560:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2201      	movs	r2, #1
 8006568:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800656c:	e026      	b.n	80065bc <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006572:	b29b      	uxth	r3, r3
 8006574:	2b00      	cmp	r3, #0
 8006576:	f47f af57 	bne.w	8006428 <HAL_SPI_TransmitReceive+0x29c>
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006580:	b29b      	uxth	r3, r3
 8006582:	2b00      	cmp	r3, #0
 8006584:	f47f af50 	bne.w	8006428 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006588:	69fa      	ldr	r2, [r7, #28]
 800658a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800658c:	68f8      	ldr	r0, [r7, #12]
 800658e:	f000 f93d 	bl	800680c <SPI_EndRxTxTransaction>
 8006592:	4603      	mov	r3, r0
 8006594:	2b00      	cmp	r3, #0
 8006596:	d005      	beq.n	80065a4 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2220      	movs	r2, #32
 80065a2:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d003      	beq.n	80065b4 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80065ac:	2301      	movs	r3, #1
 80065ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065b2:	e003      	b.n	80065bc <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2201      	movs	r2, #1
 80065b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2200      	movs	r2, #0
 80065c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80065c4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3728      	adds	r7, #40	@ 0x28
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b088      	sub	sp, #32
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	603b      	str	r3, [r7, #0]
 80065dc:	4613      	mov	r3, r2
 80065de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80065e0:	f7fd fd7c 	bl	80040dc <HAL_GetTick>
 80065e4:	4602      	mov	r2, r0
 80065e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065e8:	1a9b      	subs	r3, r3, r2
 80065ea:	683a      	ldr	r2, [r7, #0]
 80065ec:	4413      	add	r3, r2
 80065ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80065f0:	f7fd fd74 	bl	80040dc <HAL_GetTick>
 80065f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80065f6:	4b39      	ldr	r3, [pc, #228]	@ (80066dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	015b      	lsls	r3, r3, #5
 80065fc:	0d1b      	lsrs	r3, r3, #20
 80065fe:	69fa      	ldr	r2, [r7, #28]
 8006600:	fb02 f303 	mul.w	r3, r2, r3
 8006604:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006606:	e054      	b.n	80066b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800660e:	d050      	beq.n	80066b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006610:	f7fd fd64 	bl	80040dc <HAL_GetTick>
 8006614:	4602      	mov	r2, r0
 8006616:	69bb      	ldr	r3, [r7, #24]
 8006618:	1ad3      	subs	r3, r2, r3
 800661a:	69fa      	ldr	r2, [r7, #28]
 800661c:	429a      	cmp	r2, r3
 800661e:	d902      	bls.n	8006626 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d13d      	bne.n	80066a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	685a      	ldr	r2, [r3, #4]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006634:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800663e:	d111      	bne.n	8006664 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006648:	d004      	beq.n	8006654 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006652:	d107      	bne.n	8006664 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006662:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006668:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800666c:	d10f      	bne.n	800668e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800667c:	601a      	str	r2, [r3, #0]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800668c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2201      	movs	r2, #1
 8006692:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2200      	movs	r2, #0
 800669a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800669e:	2303      	movs	r3, #3
 80066a0:	e017      	b.n	80066d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d101      	bne.n	80066ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80066a8:	2300      	movs	r3, #0
 80066aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	3b01      	subs	r3, #1
 80066b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	689a      	ldr	r2, [r3, #8]
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	4013      	ands	r3, r2
 80066bc:	68ba      	ldr	r2, [r7, #8]
 80066be:	429a      	cmp	r2, r3
 80066c0:	bf0c      	ite	eq
 80066c2:	2301      	moveq	r3, #1
 80066c4:	2300      	movne	r3, #0
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	461a      	mov	r2, r3
 80066ca:	79fb      	ldrb	r3, [r7, #7]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d19b      	bne.n	8006608 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3720      	adds	r7, #32
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	200000c0 	.word	0x200000c0

080066e0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b08a      	sub	sp, #40	@ 0x28
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	607a      	str	r2, [r7, #4]
 80066ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80066ee:	2300      	movs	r3, #0
 80066f0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80066f2:	f7fd fcf3 	bl	80040dc <HAL_GetTick>
 80066f6:	4602      	mov	r2, r0
 80066f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066fa:	1a9b      	subs	r3, r3, r2
 80066fc:	683a      	ldr	r2, [r7, #0]
 80066fe:	4413      	add	r3, r2
 8006700:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006702:	f7fd fceb 	bl	80040dc <HAL_GetTick>
 8006706:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	330c      	adds	r3, #12
 800670e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006710:	4b3d      	ldr	r3, [pc, #244]	@ (8006808 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	4613      	mov	r3, r2
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	4413      	add	r3, r2
 800671a:	00da      	lsls	r2, r3, #3
 800671c:	1ad3      	subs	r3, r2, r3
 800671e:	0d1b      	lsrs	r3, r3, #20
 8006720:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006722:	fb02 f303 	mul.w	r3, r2, r3
 8006726:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006728:	e060      	b.n	80067ec <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006730:	d107      	bne.n	8006742 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d104      	bne.n	8006742 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	b2db      	uxtb	r3, r3
 800673e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006740:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006748:	d050      	beq.n	80067ec <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800674a:	f7fd fcc7 	bl	80040dc <HAL_GetTick>
 800674e:	4602      	mov	r2, r0
 8006750:	6a3b      	ldr	r3, [r7, #32]
 8006752:	1ad3      	subs	r3, r2, r3
 8006754:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006756:	429a      	cmp	r2, r3
 8006758:	d902      	bls.n	8006760 <SPI_WaitFifoStateUntilTimeout+0x80>
 800675a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800675c:	2b00      	cmp	r3, #0
 800675e:	d13d      	bne.n	80067dc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	685a      	ldr	r2, [r3, #4]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800676e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006778:	d111      	bne.n	800679e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006782:	d004      	beq.n	800678e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800678c:	d107      	bne.n	800679e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800679c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067a6:	d10f      	bne.n	80067c8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80067b6:	601a      	str	r2, [r3, #0]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80067c6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2201      	movs	r2, #1
 80067cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80067d8:	2303      	movs	r3, #3
 80067da:	e010      	b.n	80067fe <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d101      	bne.n	80067e6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80067e2:	2300      	movs	r3, #0
 80067e4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80067e6:	69bb      	ldr	r3, [r7, #24]
 80067e8:	3b01      	subs	r3, #1
 80067ea:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	689a      	ldr	r2, [r3, #8]
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	4013      	ands	r3, r2
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d196      	bne.n	800672a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3728      	adds	r7, #40	@ 0x28
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	200000c0 	.word	0x200000c0

0800680c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b086      	sub	sp, #24
 8006810:	af02      	add	r7, sp, #8
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	9300      	str	r3, [sp, #0]
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	2200      	movs	r2, #0
 8006820:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006824:	68f8      	ldr	r0, [r7, #12]
 8006826:	f7ff ff5b 	bl	80066e0 <SPI_WaitFifoStateUntilTimeout>
 800682a:	4603      	mov	r3, r0
 800682c:	2b00      	cmp	r3, #0
 800682e:	d007      	beq.n	8006840 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006834:	f043 0220 	orr.w	r2, r3, #32
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800683c:	2303      	movs	r3, #3
 800683e:	e027      	b.n	8006890 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	9300      	str	r3, [sp, #0]
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	2200      	movs	r2, #0
 8006848:	2180      	movs	r1, #128	@ 0x80
 800684a:	68f8      	ldr	r0, [r7, #12]
 800684c:	f7ff fec0 	bl	80065d0 <SPI_WaitFlagStateUntilTimeout>
 8006850:	4603      	mov	r3, r0
 8006852:	2b00      	cmp	r3, #0
 8006854:	d007      	beq.n	8006866 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800685a:	f043 0220 	orr.w	r2, r3, #32
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006862:	2303      	movs	r3, #3
 8006864:	e014      	b.n	8006890 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	9300      	str	r3, [sp, #0]
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	2200      	movs	r2, #0
 800686e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006872:	68f8      	ldr	r0, [r7, #12]
 8006874:	f7ff ff34 	bl	80066e0 <SPI_WaitFifoStateUntilTimeout>
 8006878:	4603      	mov	r3, r0
 800687a:	2b00      	cmp	r3, #0
 800687c:	d007      	beq.n	800688e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006882:	f043 0220 	orr.w	r2, r3, #32
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800688a:	2303      	movs	r3, #3
 800688c:	e000      	b.n	8006890 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800688e:	2300      	movs	r3, #0
}
 8006890:	4618      	mov	r0, r3
 8006892:	3710      	adds	r7, #16
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}

08006898 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b082      	sub	sp, #8
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d101      	bne.n	80068aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	e049      	b.n	800693e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d106      	bne.n	80068c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 f841 	bl	8006946 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2202      	movs	r2, #2
 80068c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	3304      	adds	r3, #4
 80068d4:	4619      	mov	r1, r3
 80068d6:	4610      	mov	r0, r2
 80068d8:	f000 f9da 	bl	8006c90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2201      	movs	r2, #1
 8006908:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2201      	movs	r2, #1
 8006930:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800693c:	2300      	movs	r3, #0
}
 800693e:	4618      	mov	r0, r3
 8006940:	3708      	adds	r7, #8
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}

08006946 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006946:	b480      	push	{r7}
 8006948:	b083      	sub	sp, #12
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800694e:	bf00      	nop
 8006950:	370c      	adds	r7, #12
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr
	...

0800695c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800695c:	b480      	push	{r7}
 800695e:	b085      	sub	sp, #20
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800696a:	b2db      	uxtb	r3, r3
 800696c:	2b01      	cmp	r3, #1
 800696e:	d001      	beq.n	8006974 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	e04f      	b.n	8006a14 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2202      	movs	r2, #2
 8006978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	68da      	ldr	r2, [r3, #12]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f042 0201 	orr.w	r2, r2, #1
 800698a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a23      	ldr	r2, [pc, #140]	@ (8006a20 <HAL_TIM_Base_Start_IT+0xc4>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d01d      	beq.n	80069d2 <HAL_TIM_Base_Start_IT+0x76>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800699e:	d018      	beq.n	80069d2 <HAL_TIM_Base_Start_IT+0x76>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a1f      	ldr	r2, [pc, #124]	@ (8006a24 <HAL_TIM_Base_Start_IT+0xc8>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d013      	beq.n	80069d2 <HAL_TIM_Base_Start_IT+0x76>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a1e      	ldr	r2, [pc, #120]	@ (8006a28 <HAL_TIM_Base_Start_IT+0xcc>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d00e      	beq.n	80069d2 <HAL_TIM_Base_Start_IT+0x76>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a1c      	ldr	r2, [pc, #112]	@ (8006a2c <HAL_TIM_Base_Start_IT+0xd0>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d009      	beq.n	80069d2 <HAL_TIM_Base_Start_IT+0x76>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a1b      	ldr	r2, [pc, #108]	@ (8006a30 <HAL_TIM_Base_Start_IT+0xd4>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d004      	beq.n	80069d2 <HAL_TIM_Base_Start_IT+0x76>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a19      	ldr	r2, [pc, #100]	@ (8006a34 <HAL_TIM_Base_Start_IT+0xd8>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d115      	bne.n	80069fe <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	689a      	ldr	r2, [r3, #8]
 80069d8:	4b17      	ldr	r3, [pc, #92]	@ (8006a38 <HAL_TIM_Base_Start_IT+0xdc>)
 80069da:	4013      	ands	r3, r2
 80069dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2b06      	cmp	r3, #6
 80069e2:	d015      	beq.n	8006a10 <HAL_TIM_Base_Start_IT+0xb4>
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069ea:	d011      	beq.n	8006a10 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f042 0201 	orr.w	r2, r2, #1
 80069fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069fc:	e008      	b.n	8006a10 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f042 0201 	orr.w	r2, r2, #1
 8006a0c:	601a      	str	r2, [r3, #0]
 8006a0e:	e000      	b.n	8006a12 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a10:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a12:	2300      	movs	r3, #0
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3714      	adds	r7, #20
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr
 8006a20:	40012c00 	.word	0x40012c00
 8006a24:	40000400 	.word	0x40000400
 8006a28:	40000800 	.word	0x40000800
 8006a2c:	40000c00 	.word	0x40000c00
 8006a30:	40013400 	.word	0x40013400
 8006a34:	40014000 	.word	0x40014000
 8006a38:	00010007 	.word	0x00010007

08006a3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	68db      	ldr	r3, [r3, #12]
 8006a4a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	f003 0302 	and.w	r3, r3, #2
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d020      	beq.n	8006aa0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f003 0302 	and.w	r3, r3, #2
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d01b      	beq.n	8006aa0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f06f 0202 	mvn.w	r2, #2
 8006a70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2201      	movs	r2, #1
 8006a76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	699b      	ldr	r3, [r3, #24]
 8006a7e:	f003 0303 	and.w	r3, r3, #3
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d003      	beq.n	8006a8e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 f8e4 	bl	8006c54 <HAL_TIM_IC_CaptureCallback>
 8006a8c:	e005      	b.n	8006a9a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 f8d6 	bl	8006c40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 f8e7 	bl	8006c68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	f003 0304 	and.w	r3, r3, #4
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d020      	beq.n	8006aec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f003 0304 	and.w	r3, r3, #4
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d01b      	beq.n	8006aec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f06f 0204 	mvn.w	r2, #4
 8006abc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2202      	movs	r2, #2
 8006ac2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	699b      	ldr	r3, [r3, #24]
 8006aca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d003      	beq.n	8006ada <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 f8be 	bl	8006c54 <HAL_TIM_IC_CaptureCallback>
 8006ad8:	e005      	b.n	8006ae6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 f8b0 	bl	8006c40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f000 f8c1 	bl	8006c68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	f003 0308 	and.w	r3, r3, #8
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d020      	beq.n	8006b38 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f003 0308 	and.w	r3, r3, #8
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d01b      	beq.n	8006b38 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f06f 0208 	mvn.w	r2, #8
 8006b08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2204      	movs	r2, #4
 8006b0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	69db      	ldr	r3, [r3, #28]
 8006b16:	f003 0303 	and.w	r3, r3, #3
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d003      	beq.n	8006b26 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 f898 	bl	8006c54 <HAL_TIM_IC_CaptureCallback>
 8006b24:	e005      	b.n	8006b32 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 f88a 	bl	8006c40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 f89b 	bl	8006c68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2200      	movs	r2, #0
 8006b36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	f003 0310 	and.w	r3, r3, #16
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d020      	beq.n	8006b84 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f003 0310 	and.w	r3, r3, #16
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d01b      	beq.n	8006b84 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f06f 0210 	mvn.w	r2, #16
 8006b54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2208      	movs	r2, #8
 8006b5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	69db      	ldr	r3, [r3, #28]
 8006b62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d003      	beq.n	8006b72 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 f872 	bl	8006c54 <HAL_TIM_IC_CaptureCallback>
 8006b70:	e005      	b.n	8006b7e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 f864 	bl	8006c40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 f875 	bl	8006c68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	f003 0301 	and.w	r3, r3, #1
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d00c      	beq.n	8006ba8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f003 0301 	and.w	r3, r3, #1
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d007      	beq.n	8006ba8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f06f 0201 	mvn.w	r2, #1
 8006ba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f7fc fef8 	bl	8003998 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d00c      	beq.n	8006bcc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d007      	beq.n	8006bcc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006bc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 f906 	bl	8006dd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d00c      	beq.n	8006bf0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d007      	beq.n	8006bf0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 f8fe 	bl	8006dec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d00c      	beq.n	8006c14 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d007      	beq.n	8006c14 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 f834 	bl	8006c7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	f003 0320 	and.w	r3, r3, #32
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d00c      	beq.n	8006c38 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f003 0320 	and.w	r3, r3, #32
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d007      	beq.n	8006c38 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f06f 0220 	mvn.w	r2, #32
 8006c30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 f8c6 	bl	8006dc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c38:	bf00      	nop
 8006c3a:	3710      	adds	r7, #16
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c48:	bf00      	nop
 8006c4a:	370c      	adds	r7, #12
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c5c:	bf00      	nop
 8006c5e:	370c      	adds	r7, #12
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c70:	bf00      	nop
 8006c72:	370c      	adds	r7, #12
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c84:	bf00      	nop
 8006c86:	370c      	adds	r7, #12
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr

08006c90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b085      	sub	sp, #20
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4a40      	ldr	r2, [pc, #256]	@ (8006da4 <TIM_Base_SetConfig+0x114>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d013      	beq.n	8006cd0 <TIM_Base_SetConfig+0x40>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cae:	d00f      	beq.n	8006cd0 <TIM_Base_SetConfig+0x40>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a3d      	ldr	r2, [pc, #244]	@ (8006da8 <TIM_Base_SetConfig+0x118>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d00b      	beq.n	8006cd0 <TIM_Base_SetConfig+0x40>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	4a3c      	ldr	r2, [pc, #240]	@ (8006dac <TIM_Base_SetConfig+0x11c>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d007      	beq.n	8006cd0 <TIM_Base_SetConfig+0x40>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4a3b      	ldr	r2, [pc, #236]	@ (8006db0 <TIM_Base_SetConfig+0x120>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d003      	beq.n	8006cd0 <TIM_Base_SetConfig+0x40>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	4a3a      	ldr	r2, [pc, #232]	@ (8006db4 <TIM_Base_SetConfig+0x124>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d108      	bne.n	8006ce2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	68fa      	ldr	r2, [r7, #12]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4a2f      	ldr	r2, [pc, #188]	@ (8006da4 <TIM_Base_SetConfig+0x114>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d01f      	beq.n	8006d2a <TIM_Base_SetConfig+0x9a>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cf0:	d01b      	beq.n	8006d2a <TIM_Base_SetConfig+0x9a>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a2c      	ldr	r2, [pc, #176]	@ (8006da8 <TIM_Base_SetConfig+0x118>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d017      	beq.n	8006d2a <TIM_Base_SetConfig+0x9a>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a2b      	ldr	r2, [pc, #172]	@ (8006dac <TIM_Base_SetConfig+0x11c>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d013      	beq.n	8006d2a <TIM_Base_SetConfig+0x9a>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a2a      	ldr	r2, [pc, #168]	@ (8006db0 <TIM_Base_SetConfig+0x120>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d00f      	beq.n	8006d2a <TIM_Base_SetConfig+0x9a>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a29      	ldr	r2, [pc, #164]	@ (8006db4 <TIM_Base_SetConfig+0x124>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d00b      	beq.n	8006d2a <TIM_Base_SetConfig+0x9a>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4a28      	ldr	r2, [pc, #160]	@ (8006db8 <TIM_Base_SetConfig+0x128>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d007      	beq.n	8006d2a <TIM_Base_SetConfig+0x9a>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4a27      	ldr	r2, [pc, #156]	@ (8006dbc <TIM_Base_SetConfig+0x12c>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d003      	beq.n	8006d2a <TIM_Base_SetConfig+0x9a>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4a26      	ldr	r2, [pc, #152]	@ (8006dc0 <TIM_Base_SetConfig+0x130>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d108      	bne.n	8006d3c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	68db      	ldr	r3, [r3, #12]
 8006d36:	68fa      	ldr	r2, [r7, #12]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	695b      	ldr	r3, [r3, #20]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	68fa      	ldr	r2, [r7, #12]
 8006d4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	689a      	ldr	r2, [r3, #8]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4a10      	ldr	r2, [pc, #64]	@ (8006da4 <TIM_Base_SetConfig+0x114>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d00f      	beq.n	8006d88 <TIM_Base_SetConfig+0xf8>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4a12      	ldr	r2, [pc, #72]	@ (8006db4 <TIM_Base_SetConfig+0x124>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d00b      	beq.n	8006d88 <TIM_Base_SetConfig+0xf8>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a11      	ldr	r2, [pc, #68]	@ (8006db8 <TIM_Base_SetConfig+0x128>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d007      	beq.n	8006d88 <TIM_Base_SetConfig+0xf8>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4a10      	ldr	r2, [pc, #64]	@ (8006dbc <TIM_Base_SetConfig+0x12c>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d003      	beq.n	8006d88 <TIM_Base_SetConfig+0xf8>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	4a0f      	ldr	r2, [pc, #60]	@ (8006dc0 <TIM_Base_SetConfig+0x130>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d103      	bne.n	8006d90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	691a      	ldr	r2, [r3, #16]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2201      	movs	r2, #1
 8006d94:	615a      	str	r2, [r3, #20]
}
 8006d96:	bf00      	nop
 8006d98:	3714      	adds	r7, #20
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr
 8006da2:	bf00      	nop
 8006da4:	40012c00 	.word	0x40012c00
 8006da8:	40000400 	.word	0x40000400
 8006dac:	40000800 	.word	0x40000800
 8006db0:	40000c00 	.word	0x40000c00
 8006db4:	40013400 	.word	0x40013400
 8006db8:	40014000 	.word	0x40014000
 8006dbc:	40014400 	.word	0x40014400
 8006dc0:	40014800 	.word	0x40014800

08006dc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006dcc:	bf00      	nop
 8006dce:	370c      	adds	r7, #12
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006de0:	bf00      	nop
 8006de2:	370c      	adds	r7, #12
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr

08006dec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006df4:	bf00      	nop
 8006df6:	370c      	adds	r7, #12
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d101      	bne.n	8006e12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e040      	b.n	8006e94 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d106      	bne.n	8006e28 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f7fd f8a0 	bl	8003f68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2224      	movs	r2, #36	@ 0x24
 8006e2c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	681a      	ldr	r2, [r3, #0]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f022 0201 	bic.w	r2, r2, #1
 8006e3c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d002      	beq.n	8006e4c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 fb6a 	bl	8007520 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f000 f8af 	bl	8006fb0 <UART_SetConfig>
 8006e52:	4603      	mov	r3, r0
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d101      	bne.n	8006e5c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	e01b      	b.n	8006e94 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	685a      	ldr	r2, [r3, #4]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006e6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	689a      	ldr	r2, [r3, #8]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006e7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f042 0201 	orr.w	r2, r2, #1
 8006e8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 fbe9 	bl	8007664 <UART_CheckIdleState>
 8006e92:	4603      	mov	r3, r0
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3708      	adds	r7, #8
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b08a      	sub	sp, #40	@ 0x28
 8006ea0:	af02      	add	r7, sp, #8
 8006ea2:	60f8      	str	r0, [r7, #12]
 8006ea4:	60b9      	str	r1, [r7, #8]
 8006ea6:	603b      	str	r3, [r7, #0]
 8006ea8:	4613      	mov	r3, r2
 8006eaa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006eb0:	2b20      	cmp	r3, #32
 8006eb2:	d177      	bne.n	8006fa4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d002      	beq.n	8006ec0 <HAL_UART_Transmit+0x24>
 8006eba:	88fb      	ldrh	r3, [r7, #6]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d101      	bne.n	8006ec4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	e070      	b.n	8006fa6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2221      	movs	r2, #33	@ 0x21
 8006ed0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ed2:	f7fd f903 	bl	80040dc <HAL_GetTick>
 8006ed6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	88fa      	ldrh	r2, [r7, #6]
 8006edc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	88fa      	ldrh	r2, [r7, #6]
 8006ee4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ef0:	d108      	bne.n	8006f04 <HAL_UART_Transmit+0x68>
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	691b      	ldr	r3, [r3, #16]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d104      	bne.n	8006f04 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006efa:	2300      	movs	r3, #0
 8006efc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	61bb      	str	r3, [r7, #24]
 8006f02:	e003      	b.n	8006f0c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006f0c:	e02f      	b.n	8006f6e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	9300      	str	r3, [sp, #0]
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	2200      	movs	r2, #0
 8006f16:	2180      	movs	r1, #128	@ 0x80
 8006f18:	68f8      	ldr	r0, [r7, #12]
 8006f1a:	f000 fc4b 	bl	80077b4 <UART_WaitOnFlagUntilTimeout>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d004      	beq.n	8006f2e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2220      	movs	r2, #32
 8006f28:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006f2a:	2303      	movs	r3, #3
 8006f2c:	e03b      	b.n	8006fa6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006f2e:	69fb      	ldr	r3, [r7, #28]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d10b      	bne.n	8006f4c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f34:	69bb      	ldr	r3, [r7, #24]
 8006f36:	881a      	ldrh	r2, [r3, #0]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f40:	b292      	uxth	r2, r2
 8006f42:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006f44:	69bb      	ldr	r3, [r7, #24]
 8006f46:	3302      	adds	r3, #2
 8006f48:	61bb      	str	r3, [r7, #24]
 8006f4a:	e007      	b.n	8006f5c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	781a      	ldrb	r2, [r3, #0]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006f56:	69fb      	ldr	r3, [r7, #28]
 8006f58:	3301      	adds	r3, #1
 8006f5a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	3b01      	subs	r3, #1
 8006f66:	b29a      	uxth	r2, r3
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d1c9      	bne.n	8006f0e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	9300      	str	r3, [sp, #0]
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	2200      	movs	r2, #0
 8006f82:	2140      	movs	r1, #64	@ 0x40
 8006f84:	68f8      	ldr	r0, [r7, #12]
 8006f86:	f000 fc15 	bl	80077b4 <UART_WaitOnFlagUntilTimeout>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d004      	beq.n	8006f9a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2220      	movs	r2, #32
 8006f94:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006f96:	2303      	movs	r3, #3
 8006f98:	e005      	b.n	8006fa6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2220      	movs	r2, #32
 8006f9e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	e000      	b.n	8006fa6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006fa4:	2302      	movs	r3, #2
  }
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3720      	adds	r7, #32
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
	...

08006fb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fb4:	b08a      	sub	sp, #40	@ 0x28
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	689a      	ldr	r2, [r3, #8]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	691b      	ldr	r3, [r3, #16]
 8006fc8:	431a      	orrs	r2, r3
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	695b      	ldr	r3, [r3, #20]
 8006fce:	431a      	orrs	r2, r3
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	69db      	ldr	r3, [r3, #28]
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	4ba4      	ldr	r3, [pc, #656]	@ (8007270 <UART_SetConfig+0x2c0>)
 8006fe0:	4013      	ands	r3, r2
 8006fe2:	68fa      	ldr	r2, [r7, #12]
 8006fe4:	6812      	ldr	r2, [r2, #0]
 8006fe6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006fe8:	430b      	orrs	r3, r1
 8006fea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	68da      	ldr	r2, [r3, #12]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	430a      	orrs	r2, r1
 8007000:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	699b      	ldr	r3, [r3, #24]
 8007006:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a99      	ldr	r2, [pc, #612]	@ (8007274 <UART_SetConfig+0x2c4>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d004      	beq.n	800701c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	6a1b      	ldr	r3, [r3, #32]
 8007016:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007018:	4313      	orrs	r3, r2
 800701a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800702c:	430a      	orrs	r2, r1
 800702e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a90      	ldr	r2, [pc, #576]	@ (8007278 <UART_SetConfig+0x2c8>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d126      	bne.n	8007088 <UART_SetConfig+0xd8>
 800703a:	4b90      	ldr	r3, [pc, #576]	@ (800727c <UART_SetConfig+0x2cc>)
 800703c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007040:	f003 0303 	and.w	r3, r3, #3
 8007044:	2b03      	cmp	r3, #3
 8007046:	d81b      	bhi.n	8007080 <UART_SetConfig+0xd0>
 8007048:	a201      	add	r2, pc, #4	@ (adr r2, 8007050 <UART_SetConfig+0xa0>)
 800704a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800704e:	bf00      	nop
 8007050:	08007061 	.word	0x08007061
 8007054:	08007071 	.word	0x08007071
 8007058:	08007069 	.word	0x08007069
 800705c:	08007079 	.word	0x08007079
 8007060:	2301      	movs	r3, #1
 8007062:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007066:	e116      	b.n	8007296 <UART_SetConfig+0x2e6>
 8007068:	2302      	movs	r3, #2
 800706a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800706e:	e112      	b.n	8007296 <UART_SetConfig+0x2e6>
 8007070:	2304      	movs	r3, #4
 8007072:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007076:	e10e      	b.n	8007296 <UART_SetConfig+0x2e6>
 8007078:	2308      	movs	r3, #8
 800707a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800707e:	e10a      	b.n	8007296 <UART_SetConfig+0x2e6>
 8007080:	2310      	movs	r3, #16
 8007082:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007086:	e106      	b.n	8007296 <UART_SetConfig+0x2e6>
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a7c      	ldr	r2, [pc, #496]	@ (8007280 <UART_SetConfig+0x2d0>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d138      	bne.n	8007104 <UART_SetConfig+0x154>
 8007092:	4b7a      	ldr	r3, [pc, #488]	@ (800727c <UART_SetConfig+0x2cc>)
 8007094:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007098:	f003 030c 	and.w	r3, r3, #12
 800709c:	2b0c      	cmp	r3, #12
 800709e:	d82d      	bhi.n	80070fc <UART_SetConfig+0x14c>
 80070a0:	a201      	add	r2, pc, #4	@ (adr r2, 80070a8 <UART_SetConfig+0xf8>)
 80070a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070a6:	bf00      	nop
 80070a8:	080070dd 	.word	0x080070dd
 80070ac:	080070fd 	.word	0x080070fd
 80070b0:	080070fd 	.word	0x080070fd
 80070b4:	080070fd 	.word	0x080070fd
 80070b8:	080070ed 	.word	0x080070ed
 80070bc:	080070fd 	.word	0x080070fd
 80070c0:	080070fd 	.word	0x080070fd
 80070c4:	080070fd 	.word	0x080070fd
 80070c8:	080070e5 	.word	0x080070e5
 80070cc:	080070fd 	.word	0x080070fd
 80070d0:	080070fd 	.word	0x080070fd
 80070d4:	080070fd 	.word	0x080070fd
 80070d8:	080070f5 	.word	0x080070f5
 80070dc:	2300      	movs	r3, #0
 80070de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070e2:	e0d8      	b.n	8007296 <UART_SetConfig+0x2e6>
 80070e4:	2302      	movs	r3, #2
 80070e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070ea:	e0d4      	b.n	8007296 <UART_SetConfig+0x2e6>
 80070ec:	2304      	movs	r3, #4
 80070ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070f2:	e0d0      	b.n	8007296 <UART_SetConfig+0x2e6>
 80070f4:	2308      	movs	r3, #8
 80070f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070fa:	e0cc      	b.n	8007296 <UART_SetConfig+0x2e6>
 80070fc:	2310      	movs	r3, #16
 80070fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007102:	e0c8      	b.n	8007296 <UART_SetConfig+0x2e6>
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a5e      	ldr	r2, [pc, #376]	@ (8007284 <UART_SetConfig+0x2d4>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d125      	bne.n	800715a <UART_SetConfig+0x1aa>
 800710e:	4b5b      	ldr	r3, [pc, #364]	@ (800727c <UART_SetConfig+0x2cc>)
 8007110:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007114:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007118:	2b30      	cmp	r3, #48	@ 0x30
 800711a:	d016      	beq.n	800714a <UART_SetConfig+0x19a>
 800711c:	2b30      	cmp	r3, #48	@ 0x30
 800711e:	d818      	bhi.n	8007152 <UART_SetConfig+0x1a2>
 8007120:	2b20      	cmp	r3, #32
 8007122:	d00a      	beq.n	800713a <UART_SetConfig+0x18a>
 8007124:	2b20      	cmp	r3, #32
 8007126:	d814      	bhi.n	8007152 <UART_SetConfig+0x1a2>
 8007128:	2b00      	cmp	r3, #0
 800712a:	d002      	beq.n	8007132 <UART_SetConfig+0x182>
 800712c:	2b10      	cmp	r3, #16
 800712e:	d008      	beq.n	8007142 <UART_SetConfig+0x192>
 8007130:	e00f      	b.n	8007152 <UART_SetConfig+0x1a2>
 8007132:	2300      	movs	r3, #0
 8007134:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007138:	e0ad      	b.n	8007296 <UART_SetConfig+0x2e6>
 800713a:	2302      	movs	r3, #2
 800713c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007140:	e0a9      	b.n	8007296 <UART_SetConfig+0x2e6>
 8007142:	2304      	movs	r3, #4
 8007144:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007148:	e0a5      	b.n	8007296 <UART_SetConfig+0x2e6>
 800714a:	2308      	movs	r3, #8
 800714c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007150:	e0a1      	b.n	8007296 <UART_SetConfig+0x2e6>
 8007152:	2310      	movs	r3, #16
 8007154:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007158:	e09d      	b.n	8007296 <UART_SetConfig+0x2e6>
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a4a      	ldr	r2, [pc, #296]	@ (8007288 <UART_SetConfig+0x2d8>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d125      	bne.n	80071b0 <UART_SetConfig+0x200>
 8007164:	4b45      	ldr	r3, [pc, #276]	@ (800727c <UART_SetConfig+0x2cc>)
 8007166:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800716a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800716e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007170:	d016      	beq.n	80071a0 <UART_SetConfig+0x1f0>
 8007172:	2bc0      	cmp	r3, #192	@ 0xc0
 8007174:	d818      	bhi.n	80071a8 <UART_SetConfig+0x1f8>
 8007176:	2b80      	cmp	r3, #128	@ 0x80
 8007178:	d00a      	beq.n	8007190 <UART_SetConfig+0x1e0>
 800717a:	2b80      	cmp	r3, #128	@ 0x80
 800717c:	d814      	bhi.n	80071a8 <UART_SetConfig+0x1f8>
 800717e:	2b00      	cmp	r3, #0
 8007180:	d002      	beq.n	8007188 <UART_SetConfig+0x1d8>
 8007182:	2b40      	cmp	r3, #64	@ 0x40
 8007184:	d008      	beq.n	8007198 <UART_SetConfig+0x1e8>
 8007186:	e00f      	b.n	80071a8 <UART_SetConfig+0x1f8>
 8007188:	2300      	movs	r3, #0
 800718a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800718e:	e082      	b.n	8007296 <UART_SetConfig+0x2e6>
 8007190:	2302      	movs	r3, #2
 8007192:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007196:	e07e      	b.n	8007296 <UART_SetConfig+0x2e6>
 8007198:	2304      	movs	r3, #4
 800719a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800719e:	e07a      	b.n	8007296 <UART_SetConfig+0x2e6>
 80071a0:	2308      	movs	r3, #8
 80071a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071a6:	e076      	b.n	8007296 <UART_SetConfig+0x2e6>
 80071a8:	2310      	movs	r3, #16
 80071aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071ae:	e072      	b.n	8007296 <UART_SetConfig+0x2e6>
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a35      	ldr	r2, [pc, #212]	@ (800728c <UART_SetConfig+0x2dc>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d12a      	bne.n	8007210 <UART_SetConfig+0x260>
 80071ba:	4b30      	ldr	r3, [pc, #192]	@ (800727c <UART_SetConfig+0x2cc>)
 80071bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80071c8:	d01a      	beq.n	8007200 <UART_SetConfig+0x250>
 80071ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80071ce:	d81b      	bhi.n	8007208 <UART_SetConfig+0x258>
 80071d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071d4:	d00c      	beq.n	80071f0 <UART_SetConfig+0x240>
 80071d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071da:	d815      	bhi.n	8007208 <UART_SetConfig+0x258>
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d003      	beq.n	80071e8 <UART_SetConfig+0x238>
 80071e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071e4:	d008      	beq.n	80071f8 <UART_SetConfig+0x248>
 80071e6:	e00f      	b.n	8007208 <UART_SetConfig+0x258>
 80071e8:	2300      	movs	r3, #0
 80071ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071ee:	e052      	b.n	8007296 <UART_SetConfig+0x2e6>
 80071f0:	2302      	movs	r3, #2
 80071f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071f6:	e04e      	b.n	8007296 <UART_SetConfig+0x2e6>
 80071f8:	2304      	movs	r3, #4
 80071fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071fe:	e04a      	b.n	8007296 <UART_SetConfig+0x2e6>
 8007200:	2308      	movs	r3, #8
 8007202:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007206:	e046      	b.n	8007296 <UART_SetConfig+0x2e6>
 8007208:	2310      	movs	r3, #16
 800720a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800720e:	e042      	b.n	8007296 <UART_SetConfig+0x2e6>
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a17      	ldr	r2, [pc, #92]	@ (8007274 <UART_SetConfig+0x2c4>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d13a      	bne.n	8007290 <UART_SetConfig+0x2e0>
 800721a:	4b18      	ldr	r3, [pc, #96]	@ (800727c <UART_SetConfig+0x2cc>)
 800721c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007220:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007224:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007228:	d01a      	beq.n	8007260 <UART_SetConfig+0x2b0>
 800722a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800722e:	d81b      	bhi.n	8007268 <UART_SetConfig+0x2b8>
 8007230:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007234:	d00c      	beq.n	8007250 <UART_SetConfig+0x2a0>
 8007236:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800723a:	d815      	bhi.n	8007268 <UART_SetConfig+0x2b8>
 800723c:	2b00      	cmp	r3, #0
 800723e:	d003      	beq.n	8007248 <UART_SetConfig+0x298>
 8007240:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007244:	d008      	beq.n	8007258 <UART_SetConfig+0x2a8>
 8007246:	e00f      	b.n	8007268 <UART_SetConfig+0x2b8>
 8007248:	2300      	movs	r3, #0
 800724a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800724e:	e022      	b.n	8007296 <UART_SetConfig+0x2e6>
 8007250:	2302      	movs	r3, #2
 8007252:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007256:	e01e      	b.n	8007296 <UART_SetConfig+0x2e6>
 8007258:	2304      	movs	r3, #4
 800725a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800725e:	e01a      	b.n	8007296 <UART_SetConfig+0x2e6>
 8007260:	2308      	movs	r3, #8
 8007262:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007266:	e016      	b.n	8007296 <UART_SetConfig+0x2e6>
 8007268:	2310      	movs	r3, #16
 800726a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800726e:	e012      	b.n	8007296 <UART_SetConfig+0x2e6>
 8007270:	efff69f3 	.word	0xefff69f3
 8007274:	40008000 	.word	0x40008000
 8007278:	40013800 	.word	0x40013800
 800727c:	40021000 	.word	0x40021000
 8007280:	40004400 	.word	0x40004400
 8007284:	40004800 	.word	0x40004800
 8007288:	40004c00 	.word	0x40004c00
 800728c:	40005000 	.word	0x40005000
 8007290:	2310      	movs	r3, #16
 8007292:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a9f      	ldr	r2, [pc, #636]	@ (8007518 <UART_SetConfig+0x568>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d17a      	bne.n	8007396 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80072a0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80072a4:	2b08      	cmp	r3, #8
 80072a6:	d824      	bhi.n	80072f2 <UART_SetConfig+0x342>
 80072a8:	a201      	add	r2, pc, #4	@ (adr r2, 80072b0 <UART_SetConfig+0x300>)
 80072aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ae:	bf00      	nop
 80072b0:	080072d5 	.word	0x080072d5
 80072b4:	080072f3 	.word	0x080072f3
 80072b8:	080072dd 	.word	0x080072dd
 80072bc:	080072f3 	.word	0x080072f3
 80072c0:	080072e3 	.word	0x080072e3
 80072c4:	080072f3 	.word	0x080072f3
 80072c8:	080072f3 	.word	0x080072f3
 80072cc:	080072f3 	.word	0x080072f3
 80072d0:	080072eb 	.word	0x080072eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072d4:	f7fd ffc8 	bl	8005268 <HAL_RCC_GetPCLK1Freq>
 80072d8:	61f8      	str	r0, [r7, #28]
        break;
 80072da:	e010      	b.n	80072fe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072dc:	4b8f      	ldr	r3, [pc, #572]	@ (800751c <UART_SetConfig+0x56c>)
 80072de:	61fb      	str	r3, [r7, #28]
        break;
 80072e0:	e00d      	b.n	80072fe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072e2:	f7fd ff29 	bl	8005138 <HAL_RCC_GetSysClockFreq>
 80072e6:	61f8      	str	r0, [r7, #28]
        break;
 80072e8:	e009      	b.n	80072fe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072ee:	61fb      	str	r3, [r7, #28]
        break;
 80072f0:	e005      	b.n	80072fe <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80072f2:	2300      	movs	r3, #0
 80072f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80072fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80072fe:	69fb      	ldr	r3, [r7, #28]
 8007300:	2b00      	cmp	r3, #0
 8007302:	f000 80fb 	beq.w	80074fc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	685a      	ldr	r2, [r3, #4]
 800730a:	4613      	mov	r3, r2
 800730c:	005b      	lsls	r3, r3, #1
 800730e:	4413      	add	r3, r2
 8007310:	69fa      	ldr	r2, [r7, #28]
 8007312:	429a      	cmp	r2, r3
 8007314:	d305      	bcc.n	8007322 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800731c:	69fa      	ldr	r2, [r7, #28]
 800731e:	429a      	cmp	r2, r3
 8007320:	d903      	bls.n	800732a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007322:	2301      	movs	r3, #1
 8007324:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007328:	e0e8      	b.n	80074fc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800732a:	69fb      	ldr	r3, [r7, #28]
 800732c:	2200      	movs	r2, #0
 800732e:	461c      	mov	r4, r3
 8007330:	4615      	mov	r5, r2
 8007332:	f04f 0200 	mov.w	r2, #0
 8007336:	f04f 0300 	mov.w	r3, #0
 800733a:	022b      	lsls	r3, r5, #8
 800733c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007340:	0222      	lsls	r2, r4, #8
 8007342:	68f9      	ldr	r1, [r7, #12]
 8007344:	6849      	ldr	r1, [r1, #4]
 8007346:	0849      	lsrs	r1, r1, #1
 8007348:	2000      	movs	r0, #0
 800734a:	4688      	mov	r8, r1
 800734c:	4681      	mov	r9, r0
 800734e:	eb12 0a08 	adds.w	sl, r2, r8
 8007352:	eb43 0b09 	adc.w	fp, r3, r9
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	603b      	str	r3, [r7, #0]
 800735e:	607a      	str	r2, [r7, #4]
 8007360:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007364:	4650      	mov	r0, sl
 8007366:	4659      	mov	r1, fp
 8007368:	f7f9 fc1e 	bl	8000ba8 <__aeabi_uldivmod>
 800736c:	4602      	mov	r2, r0
 800736e:	460b      	mov	r3, r1
 8007370:	4613      	mov	r3, r2
 8007372:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007374:	69bb      	ldr	r3, [r7, #24]
 8007376:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800737a:	d308      	bcc.n	800738e <UART_SetConfig+0x3de>
 800737c:	69bb      	ldr	r3, [r7, #24]
 800737e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007382:	d204      	bcs.n	800738e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	69ba      	ldr	r2, [r7, #24]
 800738a:	60da      	str	r2, [r3, #12]
 800738c:	e0b6      	b.n	80074fc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007394:	e0b2      	b.n	80074fc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	69db      	ldr	r3, [r3, #28]
 800739a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800739e:	d15e      	bne.n	800745e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80073a0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80073a4:	2b08      	cmp	r3, #8
 80073a6:	d828      	bhi.n	80073fa <UART_SetConfig+0x44a>
 80073a8:	a201      	add	r2, pc, #4	@ (adr r2, 80073b0 <UART_SetConfig+0x400>)
 80073aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ae:	bf00      	nop
 80073b0:	080073d5 	.word	0x080073d5
 80073b4:	080073dd 	.word	0x080073dd
 80073b8:	080073e5 	.word	0x080073e5
 80073bc:	080073fb 	.word	0x080073fb
 80073c0:	080073eb 	.word	0x080073eb
 80073c4:	080073fb 	.word	0x080073fb
 80073c8:	080073fb 	.word	0x080073fb
 80073cc:	080073fb 	.word	0x080073fb
 80073d0:	080073f3 	.word	0x080073f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073d4:	f7fd ff48 	bl	8005268 <HAL_RCC_GetPCLK1Freq>
 80073d8:	61f8      	str	r0, [r7, #28]
        break;
 80073da:	e014      	b.n	8007406 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073dc:	f7fd ff5a 	bl	8005294 <HAL_RCC_GetPCLK2Freq>
 80073e0:	61f8      	str	r0, [r7, #28]
        break;
 80073e2:	e010      	b.n	8007406 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073e4:	4b4d      	ldr	r3, [pc, #308]	@ (800751c <UART_SetConfig+0x56c>)
 80073e6:	61fb      	str	r3, [r7, #28]
        break;
 80073e8:	e00d      	b.n	8007406 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073ea:	f7fd fea5 	bl	8005138 <HAL_RCC_GetSysClockFreq>
 80073ee:	61f8      	str	r0, [r7, #28]
        break;
 80073f0:	e009      	b.n	8007406 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80073f6:	61fb      	str	r3, [r7, #28]
        break;
 80073f8:	e005      	b.n	8007406 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80073fa:	2300      	movs	r3, #0
 80073fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80073fe:	2301      	movs	r3, #1
 8007400:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007404:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d077      	beq.n	80074fc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800740c:	69fb      	ldr	r3, [r7, #28]
 800740e:	005a      	lsls	r2, r3, #1
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	085b      	lsrs	r3, r3, #1
 8007416:	441a      	add	r2, r3
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007420:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007422:	69bb      	ldr	r3, [r7, #24]
 8007424:	2b0f      	cmp	r3, #15
 8007426:	d916      	bls.n	8007456 <UART_SetConfig+0x4a6>
 8007428:	69bb      	ldr	r3, [r7, #24]
 800742a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800742e:	d212      	bcs.n	8007456 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007430:	69bb      	ldr	r3, [r7, #24]
 8007432:	b29b      	uxth	r3, r3
 8007434:	f023 030f 	bic.w	r3, r3, #15
 8007438:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800743a:	69bb      	ldr	r3, [r7, #24]
 800743c:	085b      	lsrs	r3, r3, #1
 800743e:	b29b      	uxth	r3, r3
 8007440:	f003 0307 	and.w	r3, r3, #7
 8007444:	b29a      	uxth	r2, r3
 8007446:	8afb      	ldrh	r3, [r7, #22]
 8007448:	4313      	orrs	r3, r2
 800744a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	8afa      	ldrh	r2, [r7, #22]
 8007452:	60da      	str	r2, [r3, #12]
 8007454:	e052      	b.n	80074fc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800745c:	e04e      	b.n	80074fc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800745e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007462:	2b08      	cmp	r3, #8
 8007464:	d827      	bhi.n	80074b6 <UART_SetConfig+0x506>
 8007466:	a201      	add	r2, pc, #4	@ (adr r2, 800746c <UART_SetConfig+0x4bc>)
 8007468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800746c:	08007491 	.word	0x08007491
 8007470:	08007499 	.word	0x08007499
 8007474:	080074a1 	.word	0x080074a1
 8007478:	080074b7 	.word	0x080074b7
 800747c:	080074a7 	.word	0x080074a7
 8007480:	080074b7 	.word	0x080074b7
 8007484:	080074b7 	.word	0x080074b7
 8007488:	080074b7 	.word	0x080074b7
 800748c:	080074af 	.word	0x080074af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007490:	f7fd feea 	bl	8005268 <HAL_RCC_GetPCLK1Freq>
 8007494:	61f8      	str	r0, [r7, #28]
        break;
 8007496:	e014      	b.n	80074c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007498:	f7fd fefc 	bl	8005294 <HAL_RCC_GetPCLK2Freq>
 800749c:	61f8      	str	r0, [r7, #28]
        break;
 800749e:	e010      	b.n	80074c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074a0:	4b1e      	ldr	r3, [pc, #120]	@ (800751c <UART_SetConfig+0x56c>)
 80074a2:	61fb      	str	r3, [r7, #28]
        break;
 80074a4:	e00d      	b.n	80074c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074a6:	f7fd fe47 	bl	8005138 <HAL_RCC_GetSysClockFreq>
 80074aa:	61f8      	str	r0, [r7, #28]
        break;
 80074ac:	e009      	b.n	80074c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80074b2:	61fb      	str	r3, [r7, #28]
        break;
 80074b4:	e005      	b.n	80074c2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80074b6:	2300      	movs	r3, #0
 80074b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80074c0:	bf00      	nop
    }

    if (pclk != 0U)
 80074c2:	69fb      	ldr	r3, [r7, #28]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d019      	beq.n	80074fc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	085a      	lsrs	r2, r3, #1
 80074ce:	69fb      	ldr	r3, [r7, #28]
 80074d0:	441a      	add	r2, r3
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80074da:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074dc:	69bb      	ldr	r3, [r7, #24]
 80074de:	2b0f      	cmp	r3, #15
 80074e0:	d909      	bls.n	80074f6 <UART_SetConfig+0x546>
 80074e2:	69bb      	ldr	r3, [r7, #24]
 80074e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074e8:	d205      	bcs.n	80074f6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80074ea:	69bb      	ldr	r3, [r7, #24]
 80074ec:	b29a      	uxth	r2, r3
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	60da      	str	r2, [r3, #12]
 80074f4:	e002      	b.n	80074fc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2200      	movs	r2, #0
 8007500:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2200      	movs	r2, #0
 8007506:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007508:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800750c:	4618      	mov	r0, r3
 800750e:	3728      	adds	r7, #40	@ 0x28
 8007510:	46bd      	mov	sp, r7
 8007512:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007516:	bf00      	nop
 8007518:	40008000 	.word	0x40008000
 800751c:	00f42400 	.word	0x00f42400

08007520 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007520:	b480      	push	{r7}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800752c:	f003 0308 	and.w	r3, r3, #8
 8007530:	2b00      	cmp	r3, #0
 8007532:	d00a      	beq.n	800754a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	430a      	orrs	r2, r1
 8007548:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800754e:	f003 0301 	and.w	r3, r3, #1
 8007552:	2b00      	cmp	r3, #0
 8007554:	d00a      	beq.n	800756c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	430a      	orrs	r2, r1
 800756a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007570:	f003 0302 	and.w	r3, r3, #2
 8007574:	2b00      	cmp	r3, #0
 8007576:	d00a      	beq.n	800758e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	430a      	orrs	r2, r1
 800758c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007592:	f003 0304 	and.w	r3, r3, #4
 8007596:	2b00      	cmp	r3, #0
 8007598:	d00a      	beq.n	80075b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	430a      	orrs	r2, r1
 80075ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075b4:	f003 0310 	and.w	r3, r3, #16
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d00a      	beq.n	80075d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	689b      	ldr	r3, [r3, #8]
 80075c2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	430a      	orrs	r2, r1
 80075d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075d6:	f003 0320 	and.w	r3, r3, #32
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d00a      	beq.n	80075f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	430a      	orrs	r2, r1
 80075f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d01a      	beq.n	8007636 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	430a      	orrs	r2, r1
 8007614:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800761a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800761e:	d10a      	bne.n	8007636 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	430a      	orrs	r2, r1
 8007634:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800763a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800763e:	2b00      	cmp	r3, #0
 8007640:	d00a      	beq.n	8007658 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	430a      	orrs	r2, r1
 8007656:	605a      	str	r2, [r3, #4]
  }
}
 8007658:	bf00      	nop
 800765a:	370c      	adds	r7, #12
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr

08007664 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b098      	sub	sp, #96	@ 0x60
 8007668:	af02      	add	r7, sp, #8
 800766a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2200      	movs	r2, #0
 8007670:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007674:	f7fc fd32 	bl	80040dc <HAL_GetTick>
 8007678:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f003 0308 	and.w	r3, r3, #8
 8007684:	2b08      	cmp	r3, #8
 8007686:	d12e      	bne.n	80076e6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007688:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800768c:	9300      	str	r3, [sp, #0]
 800768e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007690:	2200      	movs	r2, #0
 8007692:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 f88c 	bl	80077b4 <UART_WaitOnFlagUntilTimeout>
 800769c:	4603      	mov	r3, r0
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d021      	beq.n	80076e6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076aa:	e853 3f00 	ldrex	r3, [r3]
 80076ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80076b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80076b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	461a      	mov	r2, r3
 80076be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80076c2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80076c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80076c8:	e841 2300 	strex	r3, r2, [r1]
 80076cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80076ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d1e6      	bne.n	80076a2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2220      	movs	r2, #32
 80076d8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2200      	movs	r2, #0
 80076de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076e2:	2303      	movs	r3, #3
 80076e4:	e062      	b.n	80077ac <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f003 0304 	and.w	r3, r3, #4
 80076f0:	2b04      	cmp	r3, #4
 80076f2:	d149      	bne.n	8007788 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80076f8:	9300      	str	r3, [sp, #0]
 80076fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076fc:	2200      	movs	r2, #0
 80076fe:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 f856 	bl	80077b4 <UART_WaitOnFlagUntilTimeout>
 8007708:	4603      	mov	r3, r0
 800770a:	2b00      	cmp	r3, #0
 800770c:	d03c      	beq.n	8007788 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007716:	e853 3f00 	ldrex	r3, [r3]
 800771a:	623b      	str	r3, [r7, #32]
   return(result);
 800771c:	6a3b      	ldr	r3, [r7, #32]
 800771e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007722:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	461a      	mov	r2, r3
 800772a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800772c:	633b      	str	r3, [r7, #48]	@ 0x30
 800772e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007730:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007732:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007734:	e841 2300 	strex	r3, r2, [r1]
 8007738:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800773a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800773c:	2b00      	cmp	r3, #0
 800773e:	d1e6      	bne.n	800770e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	3308      	adds	r3, #8
 8007746:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	e853 3f00 	ldrex	r3, [r3]
 800774e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f023 0301 	bic.w	r3, r3, #1
 8007756:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	3308      	adds	r3, #8
 800775e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007760:	61fa      	str	r2, [r7, #28]
 8007762:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007764:	69b9      	ldr	r1, [r7, #24]
 8007766:	69fa      	ldr	r2, [r7, #28]
 8007768:	e841 2300 	strex	r3, r2, [r1]
 800776c:	617b      	str	r3, [r7, #20]
   return(result);
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d1e5      	bne.n	8007740 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2220      	movs	r2, #32
 8007778:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007784:	2303      	movs	r3, #3
 8007786:	e011      	b.n	80077ac <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2220      	movs	r2, #32
 800778c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2220      	movs	r2, #32
 8007792:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2200      	movs	r2, #0
 800779a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2200      	movs	r2, #0
 80077a0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2200      	movs	r2, #0
 80077a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80077aa:	2300      	movs	r3, #0
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3758      	adds	r7, #88	@ 0x58
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b084      	sub	sp, #16
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	60f8      	str	r0, [r7, #12]
 80077bc:	60b9      	str	r1, [r7, #8]
 80077be:	603b      	str	r3, [r7, #0]
 80077c0:	4613      	mov	r3, r2
 80077c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077c4:	e049      	b.n	800785a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077c6:	69bb      	ldr	r3, [r7, #24]
 80077c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077cc:	d045      	beq.n	800785a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077ce:	f7fc fc85 	bl	80040dc <HAL_GetTick>
 80077d2:	4602      	mov	r2, r0
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	1ad3      	subs	r3, r2, r3
 80077d8:	69ba      	ldr	r2, [r7, #24]
 80077da:	429a      	cmp	r2, r3
 80077dc:	d302      	bcc.n	80077e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80077de:	69bb      	ldr	r3, [r7, #24]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d101      	bne.n	80077e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80077e4:	2303      	movs	r3, #3
 80077e6:	e048      	b.n	800787a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f003 0304 	and.w	r3, r3, #4
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d031      	beq.n	800785a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	69db      	ldr	r3, [r3, #28]
 80077fc:	f003 0308 	and.w	r3, r3, #8
 8007800:	2b08      	cmp	r3, #8
 8007802:	d110      	bne.n	8007826 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	2208      	movs	r2, #8
 800780a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800780c:	68f8      	ldr	r0, [r7, #12]
 800780e:	f000 f838 	bl	8007882 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2208      	movs	r2, #8
 8007816:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2200      	movs	r2, #0
 800781e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007822:	2301      	movs	r3, #1
 8007824:	e029      	b.n	800787a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	69db      	ldr	r3, [r3, #28]
 800782c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007830:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007834:	d111      	bne.n	800785a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800783e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007840:	68f8      	ldr	r0, [r7, #12]
 8007842:	f000 f81e 	bl	8007882 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2220      	movs	r2, #32
 800784a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2200      	movs	r2, #0
 8007852:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007856:	2303      	movs	r3, #3
 8007858:	e00f      	b.n	800787a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	69da      	ldr	r2, [r3, #28]
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	4013      	ands	r3, r2
 8007864:	68ba      	ldr	r2, [r7, #8]
 8007866:	429a      	cmp	r2, r3
 8007868:	bf0c      	ite	eq
 800786a:	2301      	moveq	r3, #1
 800786c:	2300      	movne	r3, #0
 800786e:	b2db      	uxtb	r3, r3
 8007870:	461a      	mov	r2, r3
 8007872:	79fb      	ldrb	r3, [r7, #7]
 8007874:	429a      	cmp	r2, r3
 8007876:	d0a6      	beq.n	80077c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007878:	2300      	movs	r3, #0
}
 800787a:	4618      	mov	r0, r3
 800787c:	3710      	adds	r7, #16
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}

08007882 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007882:	b480      	push	{r7}
 8007884:	b095      	sub	sp, #84	@ 0x54
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007892:	e853 3f00 	ldrex	r3, [r3]
 8007896:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800789a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800789e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	461a      	mov	r2, r3
 80078a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80078aa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80078ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80078b0:	e841 2300 	strex	r3, r2, [r1]
 80078b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80078b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d1e6      	bne.n	800788a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	3308      	adds	r3, #8
 80078c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c4:	6a3b      	ldr	r3, [r7, #32]
 80078c6:	e853 3f00 	ldrex	r3, [r3]
 80078ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80078cc:	69fb      	ldr	r3, [r7, #28]
 80078ce:	f023 0301 	bic.w	r3, r3, #1
 80078d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	3308      	adds	r3, #8
 80078da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80078dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80078de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80078e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80078e4:	e841 2300 	strex	r3, r2, [r1]
 80078e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80078ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d1e5      	bne.n	80078bc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d118      	bne.n	800792a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	e853 3f00 	ldrex	r3, [r3]
 8007904:	60bb      	str	r3, [r7, #8]
   return(result);
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	f023 0310 	bic.w	r3, r3, #16
 800790c:	647b      	str	r3, [r7, #68]	@ 0x44
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	461a      	mov	r2, r3
 8007914:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007916:	61bb      	str	r3, [r7, #24]
 8007918:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800791a:	6979      	ldr	r1, [r7, #20]
 800791c:	69ba      	ldr	r2, [r7, #24]
 800791e:	e841 2300 	strex	r3, r2, [r1]
 8007922:	613b      	str	r3, [r7, #16]
   return(result);
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d1e6      	bne.n	80078f8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2220      	movs	r2, #32
 800792e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2200      	movs	r2, #0
 800793c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800793e:	bf00      	nop
 8007940:	3754      	adds	r7, #84	@ 0x54
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr

0800794a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800794a:	b480      	push	{r7}
 800794c:	b085      	sub	sp, #20
 800794e:	af00      	add	r7, sp, #0
 8007950:	4603      	mov	r3, r0
 8007952:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007954:	2300      	movs	r3, #0
 8007956:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007958:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800795c:	2b84      	cmp	r3, #132	@ 0x84
 800795e:	d005      	beq.n	800796c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007960:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	4413      	add	r3, r2
 8007968:	3303      	adds	r3, #3
 800796a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800796c:	68fb      	ldr	r3, [r7, #12]
}
 800796e:	4618      	mov	r0, r3
 8007970:	3714      	adds	r7, #20
 8007972:	46bd      	mov	sp, r7
 8007974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007978:	4770      	bx	lr

0800797a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800797a:	b480      	push	{r7}
 800797c:	b083      	sub	sp, #12
 800797e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007980:	f3ef 8305 	mrs	r3, IPSR
 8007984:	607b      	str	r3, [r7, #4]
  return(result);
 8007986:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007988:	2b00      	cmp	r3, #0
 800798a:	bf14      	ite	ne
 800798c:	2301      	movne	r3, #1
 800798e:	2300      	moveq	r3, #0
 8007990:	b2db      	uxtb	r3, r3
}
 8007992:	4618      	mov	r0, r3
 8007994:	370c      	adds	r7, #12
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr

0800799e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800799e:	b580      	push	{r7, lr}
 80079a0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80079a2:	f001 fb8f 	bl	80090c4 <vTaskStartScheduler>
  
  return osOK;
 80079a6:	2300      	movs	r3, #0
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	bd80      	pop	{r7, pc}

080079ac <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80079ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079ae:	b089      	sub	sp, #36	@ 0x24
 80079b0:	af04      	add	r7, sp, #16
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	695b      	ldr	r3, [r3, #20]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d020      	beq.n	8007a00 <osThreadCreate+0x54>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	699b      	ldr	r3, [r3, #24]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d01c      	beq.n	8007a00 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	685c      	ldr	r4, [r3, #4]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	691e      	ldr	r6, [r3, #16]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80079d8:	4618      	mov	r0, r3
 80079da:	f7ff ffb6 	bl	800794a <makeFreeRtosPriority>
 80079de:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	695b      	ldr	r3, [r3, #20]
 80079e4:	687a      	ldr	r2, [r7, #4]
 80079e6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80079e8:	9202      	str	r2, [sp, #8]
 80079ea:	9301      	str	r3, [sp, #4]
 80079ec:	9100      	str	r1, [sp, #0]
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	4632      	mov	r2, r6
 80079f2:	4629      	mov	r1, r5
 80079f4:	4620      	mov	r0, r4
 80079f6:	f001 f8e2 	bl	8008bbe <xTaskCreateStatic>
 80079fa:	4603      	mov	r3, r0
 80079fc:	60fb      	str	r3, [r7, #12]
 80079fe:	e01c      	b.n	8007a3a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	685c      	ldr	r4, [r3, #4]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007a0c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007a14:	4618      	mov	r0, r3
 8007a16:	f7ff ff98 	bl	800794a <makeFreeRtosPriority>
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	f107 030c 	add.w	r3, r7, #12
 8007a20:	9301      	str	r3, [sp, #4]
 8007a22:	9200      	str	r2, [sp, #0]
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	4632      	mov	r2, r6
 8007a28:	4629      	mov	r1, r5
 8007a2a:	4620      	mov	r0, r4
 8007a2c:	f001 f927 	bl	8008c7e <xTaskCreate>
 8007a30:	4603      	mov	r3, r0
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d001      	beq.n	8007a3a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007a36:	2300      	movs	r3, #0
 8007a38:	e000      	b.n	8007a3c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3714      	adds	r7, #20
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007a44 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b082      	sub	sp, #8
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f001 fa73 	bl	8008f38 <vTaskDelete>
  return osOK;
 8007a52:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3708      	adds	r7, #8
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b086      	sub	sp, #24
 8007a60:	af02      	add	r7, sp, #8
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8007a66:	2300      	movs	r3, #0
 8007a68:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8007a6e:	f7ff ff84 	bl	800797a <inHandlerMode>
 8007a72:	4603      	mov	r3, r0
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d01c      	beq.n	8007ab2 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8007a78:	6839      	ldr	r1, [r7, #0]
 8007a7a:	f107 0208 	add.w	r2, r7, #8
 8007a7e:	f107 030c 	add.w	r3, r7, #12
 8007a82:	9300      	str	r3, [sp, #0]
 8007a84:	4613      	mov	r3, r2
 8007a86:	2201      	movs	r2, #1
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f002 fa49 	bl	8009f20 <xTaskGenericNotifyFromISR>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d002      	beq.n	8007a9a <osSignalSet+0x3e>
      return 0x80000000;
 8007a94:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007a98:	e019      	b.n	8007ace <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d015      	beq.n	8007acc <osSignalSet+0x70>
 8007aa0:	4b0d      	ldr	r3, [pc, #52]	@ (8007ad8 <osSignalSet+0x7c>)
 8007aa2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007aa6:	601a      	str	r2, [r3, #0]
 8007aa8:	f3bf 8f4f 	dsb	sy
 8007aac:	f3bf 8f6f 	isb	sy
 8007ab0:	e00c      	b.n	8007acc <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8007ab2:	6839      	ldr	r1, [r7, #0]
 8007ab4:	f107 0308 	add.w	r3, r7, #8
 8007ab8:	2201      	movs	r2, #1
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f002 f96e 	bl	8009d9c <xTaskGenericNotify>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d002      	beq.n	8007acc <osSignalSet+0x70>
    return 0x80000000;
 8007ac6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007aca:	e000      	b.n	8007ace <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8007acc:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3710      	adds	r7, #16
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop
 8007ad8:	e000ed04 	.word	0xe000ed04

08007adc <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8007adc:	b590      	push	{r4, r7, lr}
 8007ade:	b089      	sub	sp, #36	@ 0x24
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	60f8      	str	r0, [r7, #12]
 8007ae4:	60b9      	str	r1, [r7, #8]
 8007ae6:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8007ae8:	2300      	movs	r3, #0
 8007aea:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8007aec:	2300      	movs	r3, #0
 8007aee:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007af6:	d103      	bne.n	8007b00 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8007af8:	f04f 33ff 	mov.w	r3, #4294967295
 8007afc:	61fb      	str	r3, [r7, #28]
 8007afe:	e009      	b.n	8007b14 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d006      	beq.n	8007b14 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8007b0a:	69fb      	ldr	r3, [r7, #28]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d101      	bne.n	8007b14 <osSignalWait+0x38>
      ticks = 1;
 8007b10:	2301      	movs	r3, #1
 8007b12:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8007b14:	f7ff ff31 	bl	800797a <inHandlerMode>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d002      	beq.n	8007b24 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8007b1e:	2382      	movs	r3, #130	@ 0x82
 8007b20:	613b      	str	r3, [r7, #16]
 8007b22:	e01b      	b.n	8007b5c <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8007b24:	68b9      	ldr	r1, [r7, #8]
 8007b26:	f107 0310 	add.w	r3, r7, #16
 8007b2a:	1d1a      	adds	r2, r3, #4
 8007b2c:	69fb      	ldr	r3, [r7, #28]
 8007b2e:	2000      	movs	r0, #0
 8007b30:	f002 f8d4 	bl	8009cdc <xTaskNotifyWait>
 8007b34:	4603      	mov	r3, r0
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	d008      	beq.n	8007b4c <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 8007b3a:	69fb      	ldr	r3, [r7, #28]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d102      	bne.n	8007b46 <osSignalWait+0x6a>
 8007b40:	2300      	movs	r3, #0
 8007b42:	613b      	str	r3, [r7, #16]
 8007b44:	e00a      	b.n	8007b5c <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 8007b46:	2340      	movs	r3, #64	@ 0x40
 8007b48:	613b      	str	r3, [r7, #16]
 8007b4a:	e007      	b.n	8007b5c <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	da02      	bge.n	8007b58 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 8007b52:	2386      	movs	r3, #134	@ 0x86
 8007b54:	613b      	str	r3, [r7, #16]
 8007b56:	e001      	b.n	8007b5c <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8007b58:	2308      	movs	r3, #8
 8007b5a:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	461c      	mov	r4, r3
 8007b60:	f107 0310 	add.w	r3, r7, #16
 8007b64:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007b68:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8007b6c:	68f8      	ldr	r0, [r7, #12]
 8007b6e:	3724      	adds	r7, #36	@ 0x24
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd90      	pop	{r4, r7, pc}

08007b74 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b086      	sub	sp, #24
 8007b78:	af02      	add	r7, sp, #8
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d00f      	beq.n	8007ba6 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	d10a      	bne.n	8007ba2 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	2203      	movs	r2, #3
 8007b92:	9200      	str	r2, [sp, #0]
 8007b94:	2200      	movs	r2, #0
 8007b96:	2100      	movs	r1, #0
 8007b98:	2001      	movs	r0, #1
 8007b9a:	f000 f9e7 	bl	8007f6c <xQueueGenericCreateStatic>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	e016      	b.n	8007bd0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	e014      	b.n	8007bd0 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d110      	bne.n	8007bce <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8007bac:	2203      	movs	r2, #3
 8007bae:	2100      	movs	r1, #0
 8007bb0:	2001      	movs	r0, #1
 8007bb2:	f000 fa58 	bl	8008066 <xQueueGenericCreate>
 8007bb6:	60f8      	str	r0, [r7, #12]
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d005      	beq.n	8007bca <osSemaphoreCreate+0x56>
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	2100      	movs	r1, #0
 8007bc4:	68f8      	ldr	r0, [r7, #12]
 8007bc6:	f000 faad 	bl	8008124 <xQueueGenericSend>
      return sema;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	e000      	b.n	8007bd0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8007bce:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3710      	adds	r7, #16
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}

08007bd8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b084      	sub	sp, #16
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8007be2:	2300      	movs	r3, #0
 8007be4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d101      	bne.n	8007bf0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8007bec:	2380      	movs	r3, #128	@ 0x80
 8007bee:	e03a      	b.n	8007c66 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bfa:	d103      	bne.n	8007c04 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8007bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8007c00:	60fb      	str	r3, [r7, #12]
 8007c02:	e009      	b.n	8007c18 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d006      	beq.n	8007c18 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d101      	bne.n	8007c18 <osSemaphoreWait+0x40>
      ticks = 1;
 8007c14:	2301      	movs	r3, #1
 8007c16:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007c18:	f7ff feaf 	bl	800797a <inHandlerMode>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d017      	beq.n	8007c52 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8007c22:	f107 0308 	add.w	r3, r7, #8
 8007c26:	461a      	mov	r2, r3
 8007c28:	2100      	movs	r1, #0
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 fdfe 	bl	800882c <xQueueReceiveFromISR>
 8007c30:	4603      	mov	r3, r0
 8007c32:	2b01      	cmp	r3, #1
 8007c34:	d001      	beq.n	8007c3a <osSemaphoreWait+0x62>
      return osErrorOS;
 8007c36:	23ff      	movs	r3, #255	@ 0xff
 8007c38:	e015      	b.n	8007c66 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d011      	beq.n	8007c64 <osSemaphoreWait+0x8c>
 8007c40:	4b0b      	ldr	r3, [pc, #44]	@ (8007c70 <osSemaphoreWait+0x98>)
 8007c42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c46:	601a      	str	r2, [r3, #0]
 8007c48:	f3bf 8f4f 	dsb	sy
 8007c4c:	f3bf 8f6f 	isb	sy
 8007c50:	e008      	b.n	8007c64 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8007c52:	68f9      	ldr	r1, [r7, #12]
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f000 fcd9 	bl	800860c <xQueueSemaphoreTake>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d001      	beq.n	8007c64 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8007c60:	23ff      	movs	r3, #255	@ 0xff
 8007c62:	e000      	b.n	8007c66 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8007c64:	2300      	movs	r3, #0
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3710      	adds	r7, #16
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
 8007c6e:	bf00      	nop
 8007c70:	e000ed04 	.word	0xe000ed04

08007c74 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b084      	sub	sp, #16
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8007c80:	2300      	movs	r3, #0
 8007c82:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8007c84:	f7ff fe79 	bl	800797a <inHandlerMode>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d016      	beq.n	8007cbc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8007c8e:	f107 0308 	add.w	r3, r7, #8
 8007c92:	4619      	mov	r1, r3
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 fb47 	bl	8008328 <xQueueGiveFromISR>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	d001      	beq.n	8007ca4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8007ca0:	23ff      	movs	r3, #255	@ 0xff
 8007ca2:	e017      	b.n	8007cd4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d013      	beq.n	8007cd2 <osSemaphoreRelease+0x5e>
 8007caa:	4b0c      	ldr	r3, [pc, #48]	@ (8007cdc <osSemaphoreRelease+0x68>)
 8007cac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007cb0:	601a      	str	r2, [r3, #0]
 8007cb2:	f3bf 8f4f 	dsb	sy
 8007cb6:	f3bf 8f6f 	isb	sy
 8007cba:	e00a      	b.n	8007cd2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	2100      	movs	r1, #0
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 fa2e 	bl	8008124 <xQueueGenericSend>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d001      	beq.n	8007cd2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8007cce:	23ff      	movs	r3, #255	@ 0xff
 8007cd0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3710      	adds	r7, #16
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}
 8007cdc:	e000ed04 	.word	0xe000ed04

08007ce0 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8007ce0:	b590      	push	{r4, r7, lr}
 8007ce2:	b085      	sub	sp, #20
 8007ce4:	af02      	add	r7, sp, #8
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d011      	beq.n	8007d16 <osMessageCreate+0x36>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	68db      	ldr	r3, [r3, #12]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d00d      	beq.n	8007d16 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6818      	ldr	r0, [r3, #0]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6859      	ldr	r1, [r3, #4]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	689a      	ldr	r2, [r3, #8]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	68db      	ldr	r3, [r3, #12]
 8007d0a:	2400      	movs	r4, #0
 8007d0c:	9400      	str	r4, [sp, #0]
 8007d0e:	f000 f92d 	bl	8007f6c <xQueueGenericCreateStatic>
 8007d12:	4603      	mov	r3, r0
 8007d14:	e008      	b.n	8007d28 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6818      	ldr	r0, [r3, #0]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	4619      	mov	r1, r3
 8007d22:	f000 f9a0 	bl	8008066 <xQueueGenericCreate>
 8007d26:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	370c      	adds	r7, #12
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd90      	pop	{r4, r7, pc}

08007d30 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f103 0208 	add.w	r2, r3, #8
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f04f 32ff 	mov.w	r2, #4294967295
 8007d48:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f103 0208 	add.w	r2, r3, #8
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f103 0208 	add.w	r2, r3, #8
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2200      	movs	r2, #0
 8007d62:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007d64:	bf00      	nop
 8007d66:	370c      	adds	r7, #12
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr

08007d70 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007d70:	b480      	push	{r7}
 8007d72:	b083      	sub	sp, #12
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007d7e:	bf00      	nop
 8007d80:	370c      	adds	r7, #12
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr

08007d8a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007d8a:	b480      	push	{r7}
 8007d8c:	b085      	sub	sp, #20
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
 8007d92:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	68fa      	ldr	r2, [r7, #12]
 8007d9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	689a      	ldr	r2, [r3, #8]
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	683a      	ldr	r2, [r7, #0]
 8007dae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	683a      	ldr	r2, [r7, #0]
 8007db4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	1c5a      	adds	r2, r3, #1
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	601a      	str	r2, [r3, #0]
}
 8007dc6:	bf00      	nop
 8007dc8:	3714      	adds	r7, #20
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr

08007dd2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007dd2:	b480      	push	{r7}
 8007dd4:	b085      	sub	sp, #20
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
 8007dda:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007de8:	d103      	bne.n	8007df2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	691b      	ldr	r3, [r3, #16]
 8007dee:	60fb      	str	r3, [r7, #12]
 8007df0:	e00c      	b.n	8007e0c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	3308      	adds	r3, #8
 8007df6:	60fb      	str	r3, [r7, #12]
 8007df8:	e002      	b.n	8007e00 <vListInsert+0x2e>
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	60fb      	str	r3, [r7, #12]
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	68ba      	ldr	r2, [r7, #8]
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d2f6      	bcs.n	8007dfa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	685a      	ldr	r2, [r3, #4]
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	683a      	ldr	r2, [r7, #0]
 8007e1a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	68fa      	ldr	r2, [r7, #12]
 8007e20:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	683a      	ldr	r2, [r7, #0]
 8007e26:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	1c5a      	adds	r2, r3, #1
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	601a      	str	r2, [r3, #0]
}
 8007e38:	bf00      	nop
 8007e3a:	3714      	adds	r7, #20
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e42:	4770      	bx	lr

08007e44 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007e44:	b480      	push	{r7}
 8007e46:	b085      	sub	sp, #20
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	691b      	ldr	r3, [r3, #16]
 8007e50:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	6892      	ldr	r2, [r2, #8]
 8007e5a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	687a      	ldr	r2, [r7, #4]
 8007e62:	6852      	ldr	r2, [r2, #4]
 8007e64:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d103      	bne.n	8007e78 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	689a      	ldr	r2, [r3, #8]
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	1e5a      	subs	r2, r3, #1
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3714      	adds	r7, #20
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b084      	sub	sp, #16
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d10b      	bne.n	8007ec4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007eac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eb0:	f383 8811 	msr	BASEPRI, r3
 8007eb4:	f3bf 8f6f 	isb	sy
 8007eb8:	f3bf 8f4f 	dsb	sy
 8007ebc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007ebe:	bf00      	nop
 8007ec0:	bf00      	nop
 8007ec2:	e7fd      	b.n	8007ec0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007ec4:	f002 faa8 	bl	800a418 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ed0:	68f9      	ldr	r1, [r7, #12]
 8007ed2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007ed4:	fb01 f303 	mul.w	r3, r1, r3
 8007ed8:	441a      	add	r2, r3
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681a      	ldr	r2, [r3, #0]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681a      	ldr	r2, [r3, #0]
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ef4:	3b01      	subs	r3, #1
 8007ef6:	68f9      	ldr	r1, [r7, #12]
 8007ef8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007efa:	fb01 f303 	mul.w	r3, r1, r3
 8007efe:	441a      	add	r2, r3
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	22ff      	movs	r2, #255	@ 0xff
 8007f08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	22ff      	movs	r2, #255	@ 0xff
 8007f10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d114      	bne.n	8007f44 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	691b      	ldr	r3, [r3, #16]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d01a      	beq.n	8007f58 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	3310      	adds	r3, #16
 8007f26:	4618      	mov	r0, r3
 8007f28:	f001 fb52 	bl	80095d0 <xTaskRemoveFromEventList>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d012      	beq.n	8007f58 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007f32:	4b0d      	ldr	r3, [pc, #52]	@ (8007f68 <xQueueGenericReset+0xd0>)
 8007f34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f38:	601a      	str	r2, [r3, #0]
 8007f3a:	f3bf 8f4f 	dsb	sy
 8007f3e:	f3bf 8f6f 	isb	sy
 8007f42:	e009      	b.n	8007f58 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	3310      	adds	r3, #16
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f7ff fef1 	bl	8007d30 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	3324      	adds	r3, #36	@ 0x24
 8007f52:	4618      	mov	r0, r3
 8007f54:	f7ff feec 	bl	8007d30 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007f58:	f002 fa90 	bl	800a47c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007f5c:	2301      	movs	r3, #1
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3710      	adds	r7, #16
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}
 8007f66:	bf00      	nop
 8007f68:	e000ed04 	.word	0xe000ed04

08007f6c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b08e      	sub	sp, #56	@ 0x38
 8007f70:	af02      	add	r7, sp, #8
 8007f72:	60f8      	str	r0, [r7, #12]
 8007f74:	60b9      	str	r1, [r7, #8]
 8007f76:	607a      	str	r2, [r7, #4]
 8007f78:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d10b      	bne.n	8007f98 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f84:	f383 8811 	msr	BASEPRI, r3
 8007f88:	f3bf 8f6f 	isb	sy
 8007f8c:	f3bf 8f4f 	dsb	sy
 8007f90:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007f92:	bf00      	nop
 8007f94:	bf00      	nop
 8007f96:	e7fd      	b.n	8007f94 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d10b      	bne.n	8007fb6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fa2:	f383 8811 	msr	BASEPRI, r3
 8007fa6:	f3bf 8f6f 	isb	sy
 8007faa:	f3bf 8f4f 	dsb	sy
 8007fae:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007fb0:	bf00      	nop
 8007fb2:	bf00      	nop
 8007fb4:	e7fd      	b.n	8007fb2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d002      	beq.n	8007fc2 <xQueueGenericCreateStatic+0x56>
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d001      	beq.n	8007fc6 <xQueueGenericCreateStatic+0x5a>
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	e000      	b.n	8007fc8 <xQueueGenericCreateStatic+0x5c>
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d10b      	bne.n	8007fe4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007fcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fd0:	f383 8811 	msr	BASEPRI, r3
 8007fd4:	f3bf 8f6f 	isb	sy
 8007fd8:	f3bf 8f4f 	dsb	sy
 8007fdc:	623b      	str	r3, [r7, #32]
}
 8007fde:	bf00      	nop
 8007fe0:	bf00      	nop
 8007fe2:	e7fd      	b.n	8007fe0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d102      	bne.n	8007ff0 <xQueueGenericCreateStatic+0x84>
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d101      	bne.n	8007ff4 <xQueueGenericCreateStatic+0x88>
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	e000      	b.n	8007ff6 <xQueueGenericCreateStatic+0x8a>
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d10b      	bne.n	8008012 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ffe:	f383 8811 	msr	BASEPRI, r3
 8008002:	f3bf 8f6f 	isb	sy
 8008006:	f3bf 8f4f 	dsb	sy
 800800a:	61fb      	str	r3, [r7, #28]
}
 800800c:	bf00      	nop
 800800e:	bf00      	nop
 8008010:	e7fd      	b.n	800800e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008012:	2350      	movs	r3, #80	@ 0x50
 8008014:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	2b50      	cmp	r3, #80	@ 0x50
 800801a:	d00b      	beq.n	8008034 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800801c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008020:	f383 8811 	msr	BASEPRI, r3
 8008024:	f3bf 8f6f 	isb	sy
 8008028:	f3bf 8f4f 	dsb	sy
 800802c:	61bb      	str	r3, [r7, #24]
}
 800802e:	bf00      	nop
 8008030:	bf00      	nop
 8008032:	e7fd      	b.n	8008030 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008034:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800803a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800803c:	2b00      	cmp	r3, #0
 800803e:	d00d      	beq.n	800805c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008042:	2201      	movs	r2, #1
 8008044:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008048:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800804c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800804e:	9300      	str	r3, [sp, #0]
 8008050:	4613      	mov	r3, r2
 8008052:	687a      	ldr	r2, [r7, #4]
 8008054:	68b9      	ldr	r1, [r7, #8]
 8008056:	68f8      	ldr	r0, [r7, #12]
 8008058:	f000 f840 	bl	80080dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800805c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800805e:	4618      	mov	r0, r3
 8008060:	3730      	adds	r7, #48	@ 0x30
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}

08008066 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008066:	b580      	push	{r7, lr}
 8008068:	b08a      	sub	sp, #40	@ 0x28
 800806a:	af02      	add	r7, sp, #8
 800806c:	60f8      	str	r0, [r7, #12]
 800806e:	60b9      	str	r1, [r7, #8]
 8008070:	4613      	mov	r3, r2
 8008072:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d10b      	bne.n	8008092 <xQueueGenericCreate+0x2c>
	__asm volatile
 800807a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800807e:	f383 8811 	msr	BASEPRI, r3
 8008082:	f3bf 8f6f 	isb	sy
 8008086:	f3bf 8f4f 	dsb	sy
 800808a:	613b      	str	r3, [r7, #16]
}
 800808c:	bf00      	nop
 800808e:	bf00      	nop
 8008090:	e7fd      	b.n	800808e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	68ba      	ldr	r2, [r7, #8]
 8008096:	fb02 f303 	mul.w	r3, r2, r3
 800809a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800809c:	69fb      	ldr	r3, [r7, #28]
 800809e:	3350      	adds	r3, #80	@ 0x50
 80080a0:	4618      	mov	r0, r3
 80080a2:	f002 fadb 	bl	800a65c <pvPortMalloc>
 80080a6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80080a8:	69bb      	ldr	r3, [r7, #24]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d011      	beq.n	80080d2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80080ae:	69bb      	ldr	r3, [r7, #24]
 80080b0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	3350      	adds	r3, #80	@ 0x50
 80080b6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80080b8:	69bb      	ldr	r3, [r7, #24]
 80080ba:	2200      	movs	r2, #0
 80080bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80080c0:	79fa      	ldrb	r2, [r7, #7]
 80080c2:	69bb      	ldr	r3, [r7, #24]
 80080c4:	9300      	str	r3, [sp, #0]
 80080c6:	4613      	mov	r3, r2
 80080c8:	697a      	ldr	r2, [r7, #20]
 80080ca:	68b9      	ldr	r1, [r7, #8]
 80080cc:	68f8      	ldr	r0, [r7, #12]
 80080ce:	f000 f805 	bl	80080dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80080d2:	69bb      	ldr	r3, [r7, #24]
	}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3720      	adds	r7, #32
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}

080080dc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b084      	sub	sp, #16
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	60f8      	str	r0, [r7, #12]
 80080e4:	60b9      	str	r1, [r7, #8]
 80080e6:	607a      	str	r2, [r7, #4]
 80080e8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d103      	bne.n	80080f8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80080f0:	69bb      	ldr	r3, [r7, #24]
 80080f2:	69ba      	ldr	r2, [r7, #24]
 80080f4:	601a      	str	r2, [r3, #0]
 80080f6:	e002      	b.n	80080fe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80080f8:	69bb      	ldr	r3, [r7, #24]
 80080fa:	687a      	ldr	r2, [r7, #4]
 80080fc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80080fe:	69bb      	ldr	r3, [r7, #24]
 8008100:	68fa      	ldr	r2, [r7, #12]
 8008102:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008104:	69bb      	ldr	r3, [r7, #24]
 8008106:	68ba      	ldr	r2, [r7, #8]
 8008108:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800810a:	2101      	movs	r1, #1
 800810c:	69b8      	ldr	r0, [r7, #24]
 800810e:	f7ff fec3 	bl	8007e98 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008112:	69bb      	ldr	r3, [r7, #24]
 8008114:	78fa      	ldrb	r2, [r7, #3]
 8008116:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800811a:	bf00      	nop
 800811c:	3710      	adds	r7, #16
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}
	...

08008124 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b08e      	sub	sp, #56	@ 0x38
 8008128:	af00      	add	r7, sp, #0
 800812a:	60f8      	str	r0, [r7, #12]
 800812c:	60b9      	str	r1, [r7, #8]
 800812e:	607a      	str	r2, [r7, #4]
 8008130:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008132:	2300      	movs	r3, #0
 8008134:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800813a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800813c:	2b00      	cmp	r3, #0
 800813e:	d10b      	bne.n	8008158 <xQueueGenericSend+0x34>
	__asm volatile
 8008140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008144:	f383 8811 	msr	BASEPRI, r3
 8008148:	f3bf 8f6f 	isb	sy
 800814c:	f3bf 8f4f 	dsb	sy
 8008150:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008152:	bf00      	nop
 8008154:	bf00      	nop
 8008156:	e7fd      	b.n	8008154 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d103      	bne.n	8008166 <xQueueGenericSend+0x42>
 800815e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008162:	2b00      	cmp	r3, #0
 8008164:	d101      	bne.n	800816a <xQueueGenericSend+0x46>
 8008166:	2301      	movs	r3, #1
 8008168:	e000      	b.n	800816c <xQueueGenericSend+0x48>
 800816a:	2300      	movs	r3, #0
 800816c:	2b00      	cmp	r3, #0
 800816e:	d10b      	bne.n	8008188 <xQueueGenericSend+0x64>
	__asm volatile
 8008170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008174:	f383 8811 	msr	BASEPRI, r3
 8008178:	f3bf 8f6f 	isb	sy
 800817c:	f3bf 8f4f 	dsb	sy
 8008180:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008182:	bf00      	nop
 8008184:	bf00      	nop
 8008186:	e7fd      	b.n	8008184 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	2b02      	cmp	r3, #2
 800818c:	d103      	bne.n	8008196 <xQueueGenericSend+0x72>
 800818e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008190:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008192:	2b01      	cmp	r3, #1
 8008194:	d101      	bne.n	800819a <xQueueGenericSend+0x76>
 8008196:	2301      	movs	r3, #1
 8008198:	e000      	b.n	800819c <xQueueGenericSend+0x78>
 800819a:	2300      	movs	r3, #0
 800819c:	2b00      	cmp	r3, #0
 800819e:	d10b      	bne.n	80081b8 <xQueueGenericSend+0x94>
	__asm volatile
 80081a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081a4:	f383 8811 	msr	BASEPRI, r3
 80081a8:	f3bf 8f6f 	isb	sy
 80081ac:	f3bf 8f4f 	dsb	sy
 80081b0:	623b      	str	r3, [r7, #32]
}
 80081b2:	bf00      	nop
 80081b4:	bf00      	nop
 80081b6:	e7fd      	b.n	80081b4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80081b8:	f001 fbd0 	bl	800995c <xTaskGetSchedulerState>
 80081bc:	4603      	mov	r3, r0
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d102      	bne.n	80081c8 <xQueueGenericSend+0xa4>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d101      	bne.n	80081cc <xQueueGenericSend+0xa8>
 80081c8:	2301      	movs	r3, #1
 80081ca:	e000      	b.n	80081ce <xQueueGenericSend+0xaa>
 80081cc:	2300      	movs	r3, #0
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d10b      	bne.n	80081ea <xQueueGenericSend+0xc6>
	__asm volatile
 80081d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081d6:	f383 8811 	msr	BASEPRI, r3
 80081da:	f3bf 8f6f 	isb	sy
 80081de:	f3bf 8f4f 	dsb	sy
 80081e2:	61fb      	str	r3, [r7, #28]
}
 80081e4:	bf00      	nop
 80081e6:	bf00      	nop
 80081e8:	e7fd      	b.n	80081e6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80081ea:	f002 f915 	bl	800a418 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80081ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80081f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081f6:	429a      	cmp	r2, r3
 80081f8:	d302      	bcc.n	8008200 <xQueueGenericSend+0xdc>
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	2b02      	cmp	r3, #2
 80081fe:	d129      	bne.n	8008254 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008200:	683a      	ldr	r2, [r7, #0]
 8008202:	68b9      	ldr	r1, [r7, #8]
 8008204:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008206:	f000 fbca 	bl	800899e <prvCopyDataToQueue>
 800820a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800820c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800820e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008210:	2b00      	cmp	r3, #0
 8008212:	d010      	beq.n	8008236 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008216:	3324      	adds	r3, #36	@ 0x24
 8008218:	4618      	mov	r0, r3
 800821a:	f001 f9d9 	bl	80095d0 <xTaskRemoveFromEventList>
 800821e:	4603      	mov	r3, r0
 8008220:	2b00      	cmp	r3, #0
 8008222:	d013      	beq.n	800824c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008224:	4b3f      	ldr	r3, [pc, #252]	@ (8008324 <xQueueGenericSend+0x200>)
 8008226:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800822a:	601a      	str	r2, [r3, #0]
 800822c:	f3bf 8f4f 	dsb	sy
 8008230:	f3bf 8f6f 	isb	sy
 8008234:	e00a      	b.n	800824c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008238:	2b00      	cmp	r3, #0
 800823a:	d007      	beq.n	800824c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800823c:	4b39      	ldr	r3, [pc, #228]	@ (8008324 <xQueueGenericSend+0x200>)
 800823e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008242:	601a      	str	r2, [r3, #0]
 8008244:	f3bf 8f4f 	dsb	sy
 8008248:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800824c:	f002 f916 	bl	800a47c <vPortExitCritical>
				return pdPASS;
 8008250:	2301      	movs	r3, #1
 8008252:	e063      	b.n	800831c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d103      	bne.n	8008262 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800825a:	f002 f90f 	bl	800a47c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800825e:	2300      	movs	r3, #0
 8008260:	e05c      	b.n	800831c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008262:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008264:	2b00      	cmp	r3, #0
 8008266:	d106      	bne.n	8008276 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008268:	f107 0314 	add.w	r3, r7, #20
 800826c:	4618      	mov	r0, r3
 800826e:	f001 fa13 	bl	8009698 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008272:	2301      	movs	r3, #1
 8008274:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008276:	f002 f901 	bl	800a47c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800827a:	f000 ff8f 	bl	800919c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800827e:	f002 f8cb 	bl	800a418 <vPortEnterCritical>
 8008282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008284:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008288:	b25b      	sxtb	r3, r3
 800828a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800828e:	d103      	bne.n	8008298 <xQueueGenericSend+0x174>
 8008290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008292:	2200      	movs	r2, #0
 8008294:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800829a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800829e:	b25b      	sxtb	r3, r3
 80082a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082a4:	d103      	bne.n	80082ae <xQueueGenericSend+0x18a>
 80082a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082a8:	2200      	movs	r2, #0
 80082aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80082ae:	f002 f8e5 	bl	800a47c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80082b2:	1d3a      	adds	r2, r7, #4
 80082b4:	f107 0314 	add.w	r3, r7, #20
 80082b8:	4611      	mov	r1, r2
 80082ba:	4618      	mov	r0, r3
 80082bc:	f001 fa02 	bl	80096c4 <xTaskCheckForTimeOut>
 80082c0:	4603      	mov	r3, r0
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d124      	bne.n	8008310 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80082c6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80082c8:	f000 fc61 	bl	8008b8e <prvIsQueueFull>
 80082cc:	4603      	mov	r3, r0
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d018      	beq.n	8008304 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80082d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082d4:	3310      	adds	r3, #16
 80082d6:	687a      	ldr	r2, [r7, #4]
 80082d8:	4611      	mov	r1, r2
 80082da:	4618      	mov	r0, r3
 80082dc:	f001 f952 	bl	8009584 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80082e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80082e2:	f000 fbec 	bl	8008abe <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80082e6:	f000 ff67 	bl	80091b8 <xTaskResumeAll>
 80082ea:	4603      	mov	r3, r0
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	f47f af7c 	bne.w	80081ea <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80082f2:	4b0c      	ldr	r3, [pc, #48]	@ (8008324 <xQueueGenericSend+0x200>)
 80082f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082f8:	601a      	str	r2, [r3, #0]
 80082fa:	f3bf 8f4f 	dsb	sy
 80082fe:	f3bf 8f6f 	isb	sy
 8008302:	e772      	b.n	80081ea <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008304:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008306:	f000 fbda 	bl	8008abe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800830a:	f000 ff55 	bl	80091b8 <xTaskResumeAll>
 800830e:	e76c      	b.n	80081ea <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008310:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008312:	f000 fbd4 	bl	8008abe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008316:	f000 ff4f 	bl	80091b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800831a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800831c:	4618      	mov	r0, r3
 800831e:	3738      	adds	r7, #56	@ 0x38
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}
 8008324:	e000ed04 	.word	0xe000ed04

08008328 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b08e      	sub	sp, #56	@ 0x38
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008338:	2b00      	cmp	r3, #0
 800833a:	d10b      	bne.n	8008354 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800833c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008340:	f383 8811 	msr	BASEPRI, r3
 8008344:	f3bf 8f6f 	isb	sy
 8008348:	f3bf 8f4f 	dsb	sy
 800834c:	623b      	str	r3, [r7, #32]
}
 800834e:	bf00      	nop
 8008350:	bf00      	nop
 8008352:	e7fd      	b.n	8008350 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008358:	2b00      	cmp	r3, #0
 800835a:	d00b      	beq.n	8008374 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800835c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008360:	f383 8811 	msr	BASEPRI, r3
 8008364:	f3bf 8f6f 	isb	sy
 8008368:	f3bf 8f4f 	dsb	sy
 800836c:	61fb      	str	r3, [r7, #28]
}
 800836e:	bf00      	nop
 8008370:	bf00      	nop
 8008372:	e7fd      	b.n	8008370 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d103      	bne.n	8008384 <xQueueGiveFromISR+0x5c>
 800837c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800837e:	689b      	ldr	r3, [r3, #8]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d101      	bne.n	8008388 <xQueueGiveFromISR+0x60>
 8008384:	2301      	movs	r3, #1
 8008386:	e000      	b.n	800838a <xQueueGiveFromISR+0x62>
 8008388:	2300      	movs	r3, #0
 800838a:	2b00      	cmp	r3, #0
 800838c:	d10b      	bne.n	80083a6 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800838e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008392:	f383 8811 	msr	BASEPRI, r3
 8008396:	f3bf 8f6f 	isb	sy
 800839a:	f3bf 8f4f 	dsb	sy
 800839e:	61bb      	str	r3, [r7, #24]
}
 80083a0:	bf00      	nop
 80083a2:	bf00      	nop
 80083a4:	e7fd      	b.n	80083a2 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80083a6:	f002 f917 	bl	800a5d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80083aa:	f3ef 8211 	mrs	r2, BASEPRI
 80083ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083b2:	f383 8811 	msr	BASEPRI, r3
 80083b6:	f3bf 8f6f 	isb	sy
 80083ba:	f3bf 8f4f 	dsb	sy
 80083be:	617a      	str	r2, [r7, #20]
 80083c0:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80083c2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80083c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80083c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083ca:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80083cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d22b      	bcs.n	800842e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80083d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80083dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80083e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083e2:	1c5a      	adds	r2, r3, #1
 80083e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083e6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80083e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80083ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083f0:	d112      	bne.n	8008418 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80083f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d016      	beq.n	8008428 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80083fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083fc:	3324      	adds	r3, #36	@ 0x24
 80083fe:	4618      	mov	r0, r3
 8008400:	f001 f8e6 	bl	80095d0 <xTaskRemoveFromEventList>
 8008404:	4603      	mov	r3, r0
 8008406:	2b00      	cmp	r3, #0
 8008408:	d00e      	beq.n	8008428 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d00b      	beq.n	8008428 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	2201      	movs	r2, #1
 8008414:	601a      	str	r2, [r3, #0]
 8008416:	e007      	b.n	8008428 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008418:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800841c:	3301      	adds	r3, #1
 800841e:	b2db      	uxtb	r3, r3
 8008420:	b25a      	sxtb	r2, r3
 8008422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008424:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008428:	2301      	movs	r3, #1
 800842a:	637b      	str	r3, [r7, #52]	@ 0x34
 800842c:	e001      	b.n	8008432 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800842e:	2300      	movs	r3, #0
 8008430:	637b      	str	r3, [r7, #52]	@ 0x34
 8008432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008434:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800843c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800843e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008440:	4618      	mov	r0, r3
 8008442:	3738      	adds	r7, #56	@ 0x38
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}

08008448 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b08c      	sub	sp, #48	@ 0x30
 800844c:	af00      	add	r7, sp, #0
 800844e:	60f8      	str	r0, [r7, #12]
 8008450:	60b9      	str	r1, [r7, #8]
 8008452:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008454:	2300      	movs	r3, #0
 8008456:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800845c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800845e:	2b00      	cmp	r3, #0
 8008460:	d10b      	bne.n	800847a <xQueueReceive+0x32>
	__asm volatile
 8008462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008466:	f383 8811 	msr	BASEPRI, r3
 800846a:	f3bf 8f6f 	isb	sy
 800846e:	f3bf 8f4f 	dsb	sy
 8008472:	623b      	str	r3, [r7, #32]
}
 8008474:	bf00      	nop
 8008476:	bf00      	nop
 8008478:	e7fd      	b.n	8008476 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d103      	bne.n	8008488 <xQueueReceive+0x40>
 8008480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008484:	2b00      	cmp	r3, #0
 8008486:	d101      	bne.n	800848c <xQueueReceive+0x44>
 8008488:	2301      	movs	r3, #1
 800848a:	e000      	b.n	800848e <xQueueReceive+0x46>
 800848c:	2300      	movs	r3, #0
 800848e:	2b00      	cmp	r3, #0
 8008490:	d10b      	bne.n	80084aa <xQueueReceive+0x62>
	__asm volatile
 8008492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008496:	f383 8811 	msr	BASEPRI, r3
 800849a:	f3bf 8f6f 	isb	sy
 800849e:	f3bf 8f4f 	dsb	sy
 80084a2:	61fb      	str	r3, [r7, #28]
}
 80084a4:	bf00      	nop
 80084a6:	bf00      	nop
 80084a8:	e7fd      	b.n	80084a6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80084aa:	f001 fa57 	bl	800995c <xTaskGetSchedulerState>
 80084ae:	4603      	mov	r3, r0
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d102      	bne.n	80084ba <xQueueReceive+0x72>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d101      	bne.n	80084be <xQueueReceive+0x76>
 80084ba:	2301      	movs	r3, #1
 80084bc:	e000      	b.n	80084c0 <xQueueReceive+0x78>
 80084be:	2300      	movs	r3, #0
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d10b      	bne.n	80084dc <xQueueReceive+0x94>
	__asm volatile
 80084c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084c8:	f383 8811 	msr	BASEPRI, r3
 80084cc:	f3bf 8f6f 	isb	sy
 80084d0:	f3bf 8f4f 	dsb	sy
 80084d4:	61bb      	str	r3, [r7, #24]
}
 80084d6:	bf00      	nop
 80084d8:	bf00      	nop
 80084da:	e7fd      	b.n	80084d8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80084dc:	f001 ff9c 	bl	800a418 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80084e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084e4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80084e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d01f      	beq.n	800852c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80084ec:	68b9      	ldr	r1, [r7, #8]
 80084ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80084f0:	f000 fabf 	bl	8008a72 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80084f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084f6:	1e5a      	subs	r2, r3, #1
 80084f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084fa:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80084fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084fe:	691b      	ldr	r3, [r3, #16]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d00f      	beq.n	8008524 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008506:	3310      	adds	r3, #16
 8008508:	4618      	mov	r0, r3
 800850a:	f001 f861 	bl	80095d0 <xTaskRemoveFromEventList>
 800850e:	4603      	mov	r3, r0
 8008510:	2b00      	cmp	r3, #0
 8008512:	d007      	beq.n	8008524 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008514:	4b3c      	ldr	r3, [pc, #240]	@ (8008608 <xQueueReceive+0x1c0>)
 8008516:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800851a:	601a      	str	r2, [r3, #0]
 800851c:	f3bf 8f4f 	dsb	sy
 8008520:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008524:	f001 ffaa 	bl	800a47c <vPortExitCritical>
				return pdPASS;
 8008528:	2301      	movs	r3, #1
 800852a:	e069      	b.n	8008600 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d103      	bne.n	800853a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008532:	f001 ffa3 	bl	800a47c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008536:	2300      	movs	r3, #0
 8008538:	e062      	b.n	8008600 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800853a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800853c:	2b00      	cmp	r3, #0
 800853e:	d106      	bne.n	800854e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008540:	f107 0310 	add.w	r3, r7, #16
 8008544:	4618      	mov	r0, r3
 8008546:	f001 f8a7 	bl	8009698 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800854a:	2301      	movs	r3, #1
 800854c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800854e:	f001 ff95 	bl	800a47c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008552:	f000 fe23 	bl	800919c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008556:	f001 ff5f 	bl	800a418 <vPortEnterCritical>
 800855a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800855c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008560:	b25b      	sxtb	r3, r3
 8008562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008566:	d103      	bne.n	8008570 <xQueueReceive+0x128>
 8008568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800856a:	2200      	movs	r2, #0
 800856c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008572:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008576:	b25b      	sxtb	r3, r3
 8008578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800857c:	d103      	bne.n	8008586 <xQueueReceive+0x13e>
 800857e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008580:	2200      	movs	r2, #0
 8008582:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008586:	f001 ff79 	bl	800a47c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800858a:	1d3a      	adds	r2, r7, #4
 800858c:	f107 0310 	add.w	r3, r7, #16
 8008590:	4611      	mov	r1, r2
 8008592:	4618      	mov	r0, r3
 8008594:	f001 f896 	bl	80096c4 <xTaskCheckForTimeOut>
 8008598:	4603      	mov	r3, r0
 800859a:	2b00      	cmp	r3, #0
 800859c:	d123      	bne.n	80085e6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800859e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085a0:	f000 fadf 	bl	8008b62 <prvIsQueueEmpty>
 80085a4:	4603      	mov	r3, r0
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d017      	beq.n	80085da <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80085aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085ac:	3324      	adds	r3, #36	@ 0x24
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	4611      	mov	r1, r2
 80085b2:	4618      	mov	r0, r3
 80085b4:	f000 ffe6 	bl	8009584 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80085b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085ba:	f000 fa80 	bl	8008abe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80085be:	f000 fdfb 	bl	80091b8 <xTaskResumeAll>
 80085c2:	4603      	mov	r3, r0
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d189      	bne.n	80084dc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80085c8:	4b0f      	ldr	r3, [pc, #60]	@ (8008608 <xQueueReceive+0x1c0>)
 80085ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085ce:	601a      	str	r2, [r3, #0]
 80085d0:	f3bf 8f4f 	dsb	sy
 80085d4:	f3bf 8f6f 	isb	sy
 80085d8:	e780      	b.n	80084dc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80085da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085dc:	f000 fa6f 	bl	8008abe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80085e0:	f000 fdea 	bl	80091b8 <xTaskResumeAll>
 80085e4:	e77a      	b.n	80084dc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80085e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085e8:	f000 fa69 	bl	8008abe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80085ec:	f000 fde4 	bl	80091b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80085f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085f2:	f000 fab6 	bl	8008b62 <prvIsQueueEmpty>
 80085f6:	4603      	mov	r3, r0
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	f43f af6f 	beq.w	80084dc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80085fe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008600:	4618      	mov	r0, r3
 8008602:	3730      	adds	r7, #48	@ 0x30
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}
 8008608:	e000ed04 	.word	0xe000ed04

0800860c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b08e      	sub	sp, #56	@ 0x38
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008616:	2300      	movs	r3, #0
 8008618:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800861e:	2300      	movs	r3, #0
 8008620:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008624:	2b00      	cmp	r3, #0
 8008626:	d10b      	bne.n	8008640 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8008628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800862c:	f383 8811 	msr	BASEPRI, r3
 8008630:	f3bf 8f6f 	isb	sy
 8008634:	f3bf 8f4f 	dsb	sy
 8008638:	623b      	str	r3, [r7, #32]
}
 800863a:	bf00      	nop
 800863c:	bf00      	nop
 800863e:	e7fd      	b.n	800863c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008644:	2b00      	cmp	r3, #0
 8008646:	d00b      	beq.n	8008660 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8008648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800864c:	f383 8811 	msr	BASEPRI, r3
 8008650:	f3bf 8f6f 	isb	sy
 8008654:	f3bf 8f4f 	dsb	sy
 8008658:	61fb      	str	r3, [r7, #28]
}
 800865a:	bf00      	nop
 800865c:	bf00      	nop
 800865e:	e7fd      	b.n	800865c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008660:	f001 f97c 	bl	800995c <xTaskGetSchedulerState>
 8008664:	4603      	mov	r3, r0
 8008666:	2b00      	cmp	r3, #0
 8008668:	d102      	bne.n	8008670 <xQueueSemaphoreTake+0x64>
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d101      	bne.n	8008674 <xQueueSemaphoreTake+0x68>
 8008670:	2301      	movs	r3, #1
 8008672:	e000      	b.n	8008676 <xQueueSemaphoreTake+0x6a>
 8008674:	2300      	movs	r3, #0
 8008676:	2b00      	cmp	r3, #0
 8008678:	d10b      	bne.n	8008692 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800867a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800867e:	f383 8811 	msr	BASEPRI, r3
 8008682:	f3bf 8f6f 	isb	sy
 8008686:	f3bf 8f4f 	dsb	sy
 800868a:	61bb      	str	r3, [r7, #24]
}
 800868c:	bf00      	nop
 800868e:	bf00      	nop
 8008690:	e7fd      	b.n	800868e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008692:	f001 fec1 	bl	800a418 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800869a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800869c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d024      	beq.n	80086ec <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80086a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086a4:	1e5a      	subs	r2, r3, #1
 80086a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086a8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80086aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d104      	bne.n	80086bc <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80086b2:	f001 faff 	bl	8009cb4 <pvTaskIncrementMutexHeldCount>
 80086b6:	4602      	mov	r2, r0
 80086b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086ba:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80086bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086be:	691b      	ldr	r3, [r3, #16]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d00f      	beq.n	80086e4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80086c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086c6:	3310      	adds	r3, #16
 80086c8:	4618      	mov	r0, r3
 80086ca:	f000 ff81 	bl	80095d0 <xTaskRemoveFromEventList>
 80086ce:	4603      	mov	r3, r0
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d007      	beq.n	80086e4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80086d4:	4b54      	ldr	r3, [pc, #336]	@ (8008828 <xQueueSemaphoreTake+0x21c>)
 80086d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086da:	601a      	str	r2, [r3, #0]
 80086dc:	f3bf 8f4f 	dsb	sy
 80086e0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80086e4:	f001 feca 	bl	800a47c <vPortExitCritical>
				return pdPASS;
 80086e8:	2301      	movs	r3, #1
 80086ea:	e098      	b.n	800881e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d112      	bne.n	8008718 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80086f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d00b      	beq.n	8008710 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80086f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086fc:	f383 8811 	msr	BASEPRI, r3
 8008700:	f3bf 8f6f 	isb	sy
 8008704:	f3bf 8f4f 	dsb	sy
 8008708:	617b      	str	r3, [r7, #20]
}
 800870a:	bf00      	nop
 800870c:	bf00      	nop
 800870e:	e7fd      	b.n	800870c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008710:	f001 feb4 	bl	800a47c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008714:	2300      	movs	r3, #0
 8008716:	e082      	b.n	800881e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008718:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800871a:	2b00      	cmp	r3, #0
 800871c:	d106      	bne.n	800872c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800871e:	f107 030c 	add.w	r3, r7, #12
 8008722:	4618      	mov	r0, r3
 8008724:	f000 ffb8 	bl	8009698 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008728:	2301      	movs	r3, #1
 800872a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800872c:	f001 fea6 	bl	800a47c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008730:	f000 fd34 	bl	800919c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008734:	f001 fe70 	bl	800a418 <vPortEnterCritical>
 8008738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800873a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800873e:	b25b      	sxtb	r3, r3
 8008740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008744:	d103      	bne.n	800874e <xQueueSemaphoreTake+0x142>
 8008746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008748:	2200      	movs	r2, #0
 800874a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800874e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008750:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008754:	b25b      	sxtb	r3, r3
 8008756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800875a:	d103      	bne.n	8008764 <xQueueSemaphoreTake+0x158>
 800875c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800875e:	2200      	movs	r2, #0
 8008760:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008764:	f001 fe8a 	bl	800a47c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008768:	463a      	mov	r2, r7
 800876a:	f107 030c 	add.w	r3, r7, #12
 800876e:	4611      	mov	r1, r2
 8008770:	4618      	mov	r0, r3
 8008772:	f000 ffa7 	bl	80096c4 <xTaskCheckForTimeOut>
 8008776:	4603      	mov	r3, r0
 8008778:	2b00      	cmp	r3, #0
 800877a:	d132      	bne.n	80087e2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800877c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800877e:	f000 f9f0 	bl	8008b62 <prvIsQueueEmpty>
 8008782:	4603      	mov	r3, r0
 8008784:	2b00      	cmp	r3, #0
 8008786:	d026      	beq.n	80087d6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d109      	bne.n	80087a4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8008790:	f001 fe42 	bl	800a418 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008796:	689b      	ldr	r3, [r3, #8]
 8008798:	4618      	mov	r0, r3
 800879a:	f001 f8fd 	bl	8009998 <xTaskPriorityInherit>
 800879e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80087a0:	f001 fe6c 	bl	800a47c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80087a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087a6:	3324      	adds	r3, #36	@ 0x24
 80087a8:	683a      	ldr	r2, [r7, #0]
 80087aa:	4611      	mov	r1, r2
 80087ac:	4618      	mov	r0, r3
 80087ae:	f000 fee9 	bl	8009584 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80087b2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80087b4:	f000 f983 	bl	8008abe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80087b8:	f000 fcfe 	bl	80091b8 <xTaskResumeAll>
 80087bc:	4603      	mov	r3, r0
 80087be:	2b00      	cmp	r3, #0
 80087c0:	f47f af67 	bne.w	8008692 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80087c4:	4b18      	ldr	r3, [pc, #96]	@ (8008828 <xQueueSemaphoreTake+0x21c>)
 80087c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087ca:	601a      	str	r2, [r3, #0]
 80087cc:	f3bf 8f4f 	dsb	sy
 80087d0:	f3bf 8f6f 	isb	sy
 80087d4:	e75d      	b.n	8008692 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80087d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80087d8:	f000 f971 	bl	8008abe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80087dc:	f000 fcec 	bl	80091b8 <xTaskResumeAll>
 80087e0:	e757      	b.n	8008692 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80087e2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80087e4:	f000 f96b 	bl	8008abe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80087e8:	f000 fce6 	bl	80091b8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80087ec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80087ee:	f000 f9b8 	bl	8008b62 <prvIsQueueEmpty>
 80087f2:	4603      	mov	r3, r0
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	f43f af4c 	beq.w	8008692 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80087fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d00d      	beq.n	800881c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8008800:	f001 fe0a 	bl	800a418 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008804:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008806:	f000 f8b2 	bl	800896e <prvGetDisinheritPriorityAfterTimeout>
 800880a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800880c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800880e:	689b      	ldr	r3, [r3, #8]
 8008810:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008812:	4618      	mov	r0, r3
 8008814:	f001 f9be 	bl	8009b94 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008818:	f001 fe30 	bl	800a47c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800881c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800881e:	4618      	mov	r0, r3
 8008820:	3738      	adds	r7, #56	@ 0x38
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
 8008826:	bf00      	nop
 8008828:	e000ed04 	.word	0xe000ed04

0800882c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b08e      	sub	sp, #56	@ 0x38
 8008830:	af00      	add	r7, sp, #0
 8008832:	60f8      	str	r0, [r7, #12]
 8008834:	60b9      	str	r1, [r7, #8]
 8008836:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800883c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800883e:	2b00      	cmp	r3, #0
 8008840:	d10b      	bne.n	800885a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8008842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008846:	f383 8811 	msr	BASEPRI, r3
 800884a:	f3bf 8f6f 	isb	sy
 800884e:	f3bf 8f4f 	dsb	sy
 8008852:	623b      	str	r3, [r7, #32]
}
 8008854:	bf00      	nop
 8008856:	bf00      	nop
 8008858:	e7fd      	b.n	8008856 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d103      	bne.n	8008868 <xQueueReceiveFromISR+0x3c>
 8008860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008864:	2b00      	cmp	r3, #0
 8008866:	d101      	bne.n	800886c <xQueueReceiveFromISR+0x40>
 8008868:	2301      	movs	r3, #1
 800886a:	e000      	b.n	800886e <xQueueReceiveFromISR+0x42>
 800886c:	2300      	movs	r3, #0
 800886e:	2b00      	cmp	r3, #0
 8008870:	d10b      	bne.n	800888a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8008872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008876:	f383 8811 	msr	BASEPRI, r3
 800887a:	f3bf 8f6f 	isb	sy
 800887e:	f3bf 8f4f 	dsb	sy
 8008882:	61fb      	str	r3, [r7, #28]
}
 8008884:	bf00      	nop
 8008886:	bf00      	nop
 8008888:	e7fd      	b.n	8008886 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800888a:	f001 fea5 	bl	800a5d8 <vPortValidateInterruptPriority>
	__asm volatile
 800888e:	f3ef 8211 	mrs	r2, BASEPRI
 8008892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008896:	f383 8811 	msr	BASEPRI, r3
 800889a:	f3bf 8f6f 	isb	sy
 800889e:	f3bf 8f4f 	dsb	sy
 80088a2:	61ba      	str	r2, [r7, #24]
 80088a4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80088a6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80088a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80088aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088ae:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80088b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d02f      	beq.n	8008916 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80088b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80088bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80088c0:	68b9      	ldr	r1, [r7, #8]
 80088c2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80088c4:	f000 f8d5 	bl	8008a72 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80088c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088ca:	1e5a      	subs	r2, r3, #1
 80088cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ce:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80088d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80088d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088d8:	d112      	bne.n	8008900 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80088da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088dc:	691b      	ldr	r3, [r3, #16]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d016      	beq.n	8008910 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80088e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088e4:	3310      	adds	r3, #16
 80088e6:	4618      	mov	r0, r3
 80088e8:	f000 fe72 	bl	80095d0 <xTaskRemoveFromEventList>
 80088ec:	4603      	mov	r3, r0
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d00e      	beq.n	8008910 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d00b      	beq.n	8008910 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2201      	movs	r2, #1
 80088fc:	601a      	str	r2, [r3, #0]
 80088fe:	e007      	b.n	8008910 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008900:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008904:	3301      	adds	r3, #1
 8008906:	b2db      	uxtb	r3, r3
 8008908:	b25a      	sxtb	r2, r3
 800890a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800890c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8008910:	2301      	movs	r3, #1
 8008912:	637b      	str	r3, [r7, #52]	@ 0x34
 8008914:	e001      	b.n	800891a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8008916:	2300      	movs	r3, #0
 8008918:	637b      	str	r3, [r7, #52]	@ 0x34
 800891a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800891c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	f383 8811 	msr	BASEPRI, r3
}
 8008924:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008926:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008928:	4618      	mov	r0, r3
 800892a:	3738      	adds	r7, #56	@ 0x38
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b084      	sub	sp, #16
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d10b      	bne.n	8008956 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 800893e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008942:	f383 8811 	msr	BASEPRI, r3
 8008946:	f3bf 8f6f 	isb	sy
 800894a:	f3bf 8f4f 	dsb	sy
 800894e:	60bb      	str	r3, [r7, #8]
}
 8008950:	bf00      	nop
 8008952:	bf00      	nop
 8008954:	e7fd      	b.n	8008952 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8008956:	f001 fd5f 	bl	800a418 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800895e:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8008960:	f001 fd8c 	bl	800a47c <vPortExitCritical>

	return uxReturn;
 8008964:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008966:	4618      	mov	r0, r3
 8008968:	3710      	adds	r7, #16
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}

0800896e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800896e:	b480      	push	{r7}
 8008970:	b085      	sub	sp, #20
 8008972:	af00      	add	r7, sp, #0
 8008974:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800897a:	2b00      	cmp	r3, #0
 800897c:	d006      	beq.n	800898c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f1c3 0307 	rsb	r3, r3, #7
 8008988:	60fb      	str	r3, [r7, #12]
 800898a:	e001      	b.n	8008990 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800898c:	2300      	movs	r3, #0
 800898e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008990:	68fb      	ldr	r3, [r7, #12]
	}
 8008992:	4618      	mov	r0, r3
 8008994:	3714      	adds	r7, #20
 8008996:	46bd      	mov	sp, r7
 8008998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899c:	4770      	bx	lr

0800899e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800899e:	b580      	push	{r7, lr}
 80089a0:	b086      	sub	sp, #24
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	60f8      	str	r0, [r7, #12]
 80089a6:	60b9      	str	r1, [r7, #8]
 80089a8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80089aa:	2300      	movs	r3, #0
 80089ac:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089b2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d10d      	bne.n	80089d8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d14d      	bne.n	8008a60 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	689b      	ldr	r3, [r3, #8]
 80089c8:	4618      	mov	r0, r3
 80089ca:	f001 f85b 	bl	8009a84 <xTaskPriorityDisinherit>
 80089ce:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2200      	movs	r2, #0
 80089d4:	609a      	str	r2, [r3, #8]
 80089d6:	e043      	b.n	8008a60 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d119      	bne.n	8008a12 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	6858      	ldr	r0, [r3, #4]
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089e6:	461a      	mov	r2, r3
 80089e8:	68b9      	ldr	r1, [r7, #8]
 80089ea:	f002 ffcc 	bl	800b986 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	685a      	ldr	r2, [r3, #4]
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089f6:	441a      	add	r2, r3
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	685a      	ldr	r2, [r3, #4]
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	689b      	ldr	r3, [r3, #8]
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d32b      	bcc.n	8008a60 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681a      	ldr	r2, [r3, #0]
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	605a      	str	r2, [r3, #4]
 8008a10:	e026      	b.n	8008a60 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	68d8      	ldr	r0, [r3, #12]
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	68b9      	ldr	r1, [r7, #8]
 8008a1e:	f002 ffb2 	bl	800b986 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	68da      	ldr	r2, [r3, #12]
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a2a:	425b      	negs	r3, r3
 8008a2c:	441a      	add	r2, r3
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	68da      	ldr	r2, [r3, #12]
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	429a      	cmp	r2, r3
 8008a3c:	d207      	bcs.n	8008a4e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	689a      	ldr	r2, [r3, #8]
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a46:	425b      	negs	r3, r3
 8008a48:	441a      	add	r2, r3
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2b02      	cmp	r3, #2
 8008a52:	d105      	bne.n	8008a60 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d002      	beq.n	8008a60 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	3b01      	subs	r3, #1
 8008a5e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	1c5a      	adds	r2, r3, #1
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008a68:	697b      	ldr	r3, [r7, #20]
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3718      	adds	r7, #24
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}

08008a72 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008a72:	b580      	push	{r7, lr}
 8008a74:	b082      	sub	sp, #8
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	6078      	str	r0, [r7, #4]
 8008a7a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d018      	beq.n	8008ab6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	68da      	ldr	r2, [r3, #12]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a8c:	441a      	add	r2, r3
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	68da      	ldr	r2, [r3, #12]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	689b      	ldr	r3, [r3, #8]
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	d303      	bcc.n	8008aa6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681a      	ldr	r2, [r3, #0]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	68d9      	ldr	r1, [r3, #12]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008aae:	461a      	mov	r2, r3
 8008ab0:	6838      	ldr	r0, [r7, #0]
 8008ab2:	f002 ff68 	bl	800b986 <memcpy>
	}
}
 8008ab6:	bf00      	nop
 8008ab8:	3708      	adds	r7, #8
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}

08008abe <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008abe:	b580      	push	{r7, lr}
 8008ac0:	b084      	sub	sp, #16
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008ac6:	f001 fca7 	bl	800a418 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008ad0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008ad2:	e011      	b.n	8008af8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d012      	beq.n	8008b02 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	3324      	adds	r3, #36	@ 0x24
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f000 fd75 	bl	80095d0 <xTaskRemoveFromEventList>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d001      	beq.n	8008af0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008aec:	f000 fe4e 	bl	800978c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008af0:	7bfb      	ldrb	r3, [r7, #15]
 8008af2:	3b01      	subs	r3, #1
 8008af4:	b2db      	uxtb	r3, r3
 8008af6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008af8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	dce9      	bgt.n	8008ad4 <prvUnlockQueue+0x16>
 8008b00:	e000      	b.n	8008b04 <prvUnlockQueue+0x46>
					break;
 8008b02:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	22ff      	movs	r2, #255	@ 0xff
 8008b08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008b0c:	f001 fcb6 	bl	800a47c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008b10:	f001 fc82 	bl	800a418 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008b1a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008b1c:	e011      	b.n	8008b42 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	691b      	ldr	r3, [r3, #16]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d012      	beq.n	8008b4c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	3310      	adds	r3, #16
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f000 fd50 	bl	80095d0 <xTaskRemoveFromEventList>
 8008b30:	4603      	mov	r3, r0
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d001      	beq.n	8008b3a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008b36:	f000 fe29 	bl	800978c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008b3a:	7bbb      	ldrb	r3, [r7, #14]
 8008b3c:	3b01      	subs	r3, #1
 8008b3e:	b2db      	uxtb	r3, r3
 8008b40:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008b42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	dce9      	bgt.n	8008b1e <prvUnlockQueue+0x60>
 8008b4a:	e000      	b.n	8008b4e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008b4c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	22ff      	movs	r2, #255	@ 0xff
 8008b52:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008b56:	f001 fc91 	bl	800a47c <vPortExitCritical>
}
 8008b5a:	bf00      	nop
 8008b5c:	3710      	adds	r7, #16
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}

08008b62 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008b62:	b580      	push	{r7, lr}
 8008b64:	b084      	sub	sp, #16
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008b6a:	f001 fc55 	bl	800a418 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d102      	bne.n	8008b7c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008b76:	2301      	movs	r3, #1
 8008b78:	60fb      	str	r3, [r7, #12]
 8008b7a:	e001      	b.n	8008b80 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008b80:	f001 fc7c 	bl	800a47c <vPortExitCritical>

	return xReturn;
 8008b84:	68fb      	ldr	r3, [r7, #12]
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3710      	adds	r7, #16
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}

08008b8e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008b8e:	b580      	push	{r7, lr}
 8008b90:	b084      	sub	sp, #16
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008b96:	f001 fc3f 	bl	800a418 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ba2:	429a      	cmp	r2, r3
 8008ba4:	d102      	bne.n	8008bac <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	60fb      	str	r3, [r7, #12]
 8008baa:	e001      	b.n	8008bb0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008bac:	2300      	movs	r3, #0
 8008bae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008bb0:	f001 fc64 	bl	800a47c <vPortExitCritical>

	return xReturn;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3710      	adds	r7, #16
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}

08008bbe <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008bbe:	b580      	push	{r7, lr}
 8008bc0:	b08e      	sub	sp, #56	@ 0x38
 8008bc2:	af04      	add	r7, sp, #16
 8008bc4:	60f8      	str	r0, [r7, #12]
 8008bc6:	60b9      	str	r1, [r7, #8]
 8008bc8:	607a      	str	r2, [r7, #4]
 8008bca:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008bcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d10b      	bne.n	8008bea <xTaskCreateStatic+0x2c>
	__asm volatile
 8008bd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bd6:	f383 8811 	msr	BASEPRI, r3
 8008bda:	f3bf 8f6f 	isb	sy
 8008bde:	f3bf 8f4f 	dsb	sy
 8008be2:	623b      	str	r3, [r7, #32]
}
 8008be4:	bf00      	nop
 8008be6:	bf00      	nop
 8008be8:	e7fd      	b.n	8008be6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d10b      	bne.n	8008c08 <xTaskCreateStatic+0x4a>
	__asm volatile
 8008bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bf4:	f383 8811 	msr	BASEPRI, r3
 8008bf8:	f3bf 8f6f 	isb	sy
 8008bfc:	f3bf 8f4f 	dsb	sy
 8008c00:	61fb      	str	r3, [r7, #28]
}
 8008c02:	bf00      	nop
 8008c04:	bf00      	nop
 8008c06:	e7fd      	b.n	8008c04 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008c08:	23ac      	movs	r3, #172	@ 0xac
 8008c0a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	2bac      	cmp	r3, #172	@ 0xac
 8008c10:	d00b      	beq.n	8008c2a <xTaskCreateStatic+0x6c>
	__asm volatile
 8008c12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c16:	f383 8811 	msr	BASEPRI, r3
 8008c1a:	f3bf 8f6f 	isb	sy
 8008c1e:	f3bf 8f4f 	dsb	sy
 8008c22:	61bb      	str	r3, [r7, #24]
}
 8008c24:	bf00      	nop
 8008c26:	bf00      	nop
 8008c28:	e7fd      	b.n	8008c26 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008c2a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d01e      	beq.n	8008c70 <xTaskCreateStatic+0xb2>
 8008c32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d01b      	beq.n	8008c70 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c3a:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c3e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008c40:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c44:	2202      	movs	r2, #2
 8008c46:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	9303      	str	r3, [sp, #12]
 8008c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c50:	9302      	str	r3, [sp, #8]
 8008c52:	f107 0314 	add.w	r3, r7, #20
 8008c56:	9301      	str	r3, [sp, #4]
 8008c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c5a:	9300      	str	r3, [sp, #0]
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	687a      	ldr	r2, [r7, #4]
 8008c60:	68b9      	ldr	r1, [r7, #8]
 8008c62:	68f8      	ldr	r0, [r7, #12]
 8008c64:	f000 f850 	bl	8008d08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008c68:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008c6a:	f000 f8f7 	bl	8008e5c <prvAddNewTaskToReadyList>
 8008c6e:	e001      	b.n	8008c74 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008c70:	2300      	movs	r3, #0
 8008c72:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008c74:	697b      	ldr	r3, [r7, #20]
	}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3728      	adds	r7, #40	@ 0x28
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}

08008c7e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008c7e:	b580      	push	{r7, lr}
 8008c80:	b08c      	sub	sp, #48	@ 0x30
 8008c82:	af04      	add	r7, sp, #16
 8008c84:	60f8      	str	r0, [r7, #12]
 8008c86:	60b9      	str	r1, [r7, #8]
 8008c88:	603b      	str	r3, [r7, #0]
 8008c8a:	4613      	mov	r3, r2
 8008c8c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008c8e:	88fb      	ldrh	r3, [r7, #6]
 8008c90:	009b      	lsls	r3, r3, #2
 8008c92:	4618      	mov	r0, r3
 8008c94:	f001 fce2 	bl	800a65c <pvPortMalloc>
 8008c98:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d00e      	beq.n	8008cbe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008ca0:	20ac      	movs	r0, #172	@ 0xac
 8008ca2:	f001 fcdb 	bl	800a65c <pvPortMalloc>
 8008ca6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008ca8:	69fb      	ldr	r3, [r7, #28]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d003      	beq.n	8008cb6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008cae:	69fb      	ldr	r3, [r7, #28]
 8008cb0:	697a      	ldr	r2, [r7, #20]
 8008cb2:	631a      	str	r2, [r3, #48]	@ 0x30
 8008cb4:	e005      	b.n	8008cc2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008cb6:	6978      	ldr	r0, [r7, #20]
 8008cb8:	f001 fd9e 	bl	800a7f8 <vPortFree>
 8008cbc:	e001      	b.n	8008cc2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008cc2:	69fb      	ldr	r3, [r7, #28]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d017      	beq.n	8008cf8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008cc8:	69fb      	ldr	r3, [r7, #28]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008cd0:	88fa      	ldrh	r2, [r7, #6]
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	9303      	str	r3, [sp, #12]
 8008cd6:	69fb      	ldr	r3, [r7, #28]
 8008cd8:	9302      	str	r3, [sp, #8]
 8008cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cdc:	9301      	str	r3, [sp, #4]
 8008cde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ce0:	9300      	str	r3, [sp, #0]
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	68b9      	ldr	r1, [r7, #8]
 8008ce6:	68f8      	ldr	r0, [r7, #12]
 8008ce8:	f000 f80e 	bl	8008d08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008cec:	69f8      	ldr	r0, [r7, #28]
 8008cee:	f000 f8b5 	bl	8008e5c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	61bb      	str	r3, [r7, #24]
 8008cf6:	e002      	b.n	8008cfe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8008cfc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008cfe:	69bb      	ldr	r3, [r7, #24]
	}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3720      	adds	r7, #32
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}

08008d08 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b088      	sub	sp, #32
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	60f8      	str	r0, [r7, #12]
 8008d10:	60b9      	str	r1, [r7, #8]
 8008d12:	607a      	str	r2, [r7, #4]
 8008d14:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d18:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	009b      	lsls	r3, r3, #2
 8008d1e:	461a      	mov	r2, r3
 8008d20:	21a5      	movs	r1, #165	@ 0xa5
 8008d22:	f002 fd3f 	bl	800b7a4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008d30:	3b01      	subs	r3, #1
 8008d32:	009b      	lsls	r3, r3, #2
 8008d34:	4413      	add	r3, r2
 8008d36:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008d38:	69bb      	ldr	r3, [r7, #24]
 8008d3a:	f023 0307 	bic.w	r3, r3, #7
 8008d3e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008d40:	69bb      	ldr	r3, [r7, #24]
 8008d42:	f003 0307 	and.w	r3, r3, #7
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d00b      	beq.n	8008d62 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d4e:	f383 8811 	msr	BASEPRI, r3
 8008d52:	f3bf 8f6f 	isb	sy
 8008d56:	f3bf 8f4f 	dsb	sy
 8008d5a:	617b      	str	r3, [r7, #20]
}
 8008d5c:	bf00      	nop
 8008d5e:	bf00      	nop
 8008d60:	e7fd      	b.n	8008d5e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d01f      	beq.n	8008da8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d68:	2300      	movs	r3, #0
 8008d6a:	61fb      	str	r3, [r7, #28]
 8008d6c:	e012      	b.n	8008d94 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008d6e:	68ba      	ldr	r2, [r7, #8]
 8008d70:	69fb      	ldr	r3, [r7, #28]
 8008d72:	4413      	add	r3, r2
 8008d74:	7819      	ldrb	r1, [r3, #0]
 8008d76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d78:	69fb      	ldr	r3, [r7, #28]
 8008d7a:	4413      	add	r3, r2
 8008d7c:	3334      	adds	r3, #52	@ 0x34
 8008d7e:	460a      	mov	r2, r1
 8008d80:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008d82:	68ba      	ldr	r2, [r7, #8]
 8008d84:	69fb      	ldr	r3, [r7, #28]
 8008d86:	4413      	add	r3, r2
 8008d88:	781b      	ldrb	r3, [r3, #0]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d006      	beq.n	8008d9c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d8e:	69fb      	ldr	r3, [r7, #28]
 8008d90:	3301      	adds	r3, #1
 8008d92:	61fb      	str	r3, [r7, #28]
 8008d94:	69fb      	ldr	r3, [r7, #28]
 8008d96:	2b0f      	cmp	r3, #15
 8008d98:	d9e9      	bls.n	8008d6e <prvInitialiseNewTask+0x66>
 8008d9a:	e000      	b.n	8008d9e <prvInitialiseNewTask+0x96>
			{
				break;
 8008d9c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008da0:	2200      	movs	r2, #0
 8008da2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008da6:	e003      	b.n	8008db0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008daa:	2200      	movs	r2, #0
 8008dac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008db2:	2b06      	cmp	r3, #6
 8008db4:	d901      	bls.n	8008dba <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008db6:	2306      	movs	r3, #6
 8008db8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dbc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008dbe:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dc2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008dc4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dc8:	2200      	movs	r2, #0
 8008dca:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dce:	3304      	adds	r3, #4
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f7fe ffcd 	bl	8007d70 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dd8:	3318      	adds	r3, #24
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f7fe ffc8 	bl	8007d70 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008de2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008de4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008de8:	f1c3 0207 	rsb	r2, r3, #7
 8008dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dee:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008df2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008df4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8008df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008df8:	2200      	movs	r2, #0
 8008dfa:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dfe:	2200      	movs	r2, #0
 8008e00:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e06:	2200      	movs	r2, #0
 8008e08:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e0e:	3358      	adds	r3, #88	@ 0x58
 8008e10:	224c      	movs	r2, #76	@ 0x4c
 8008e12:	2100      	movs	r1, #0
 8008e14:	4618      	mov	r0, r3
 8008e16:	f002 fcc5 	bl	800b7a4 <memset>
 8008e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e1c:	4a0c      	ldr	r2, [pc, #48]	@ (8008e50 <prvInitialiseNewTask+0x148>)
 8008e1e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e22:	4a0c      	ldr	r2, [pc, #48]	@ (8008e54 <prvInitialiseNewTask+0x14c>)
 8008e24:	661a      	str	r2, [r3, #96]	@ 0x60
 8008e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e28:	4a0b      	ldr	r2, [pc, #44]	@ (8008e58 <prvInitialiseNewTask+0x150>)
 8008e2a:	665a      	str	r2, [r3, #100]	@ 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008e2c:	683a      	ldr	r2, [r7, #0]
 8008e2e:	68f9      	ldr	r1, [r7, #12]
 8008e30:	69b8      	ldr	r0, [r7, #24]
 8008e32:	f001 f9c1 	bl	800a1b8 <pxPortInitialiseStack>
 8008e36:	4602      	mov	r2, r0
 8008e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e3a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d002      	beq.n	8008e48 <prvInitialiseNewTask+0x140>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008e42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e46:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e48:	bf00      	nop
 8008e4a:	3720      	adds	r7, #32
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}
 8008e50:	20005684 	.word	0x20005684
 8008e54:	200056ec 	.word	0x200056ec
 8008e58:	20005754 	.word	0x20005754

08008e5c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b082      	sub	sp, #8
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008e64:	f001 fad8 	bl	800a418 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008e68:	4b2c      	ldr	r3, [pc, #176]	@ (8008f1c <prvAddNewTaskToReadyList+0xc0>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	3301      	adds	r3, #1
 8008e6e:	4a2b      	ldr	r2, [pc, #172]	@ (8008f1c <prvAddNewTaskToReadyList+0xc0>)
 8008e70:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008e72:	4b2b      	ldr	r3, [pc, #172]	@ (8008f20 <prvAddNewTaskToReadyList+0xc4>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d109      	bne.n	8008e8e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008e7a:	4a29      	ldr	r2, [pc, #164]	@ (8008f20 <prvAddNewTaskToReadyList+0xc4>)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008e80:	4b26      	ldr	r3, [pc, #152]	@ (8008f1c <prvAddNewTaskToReadyList+0xc0>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	2b01      	cmp	r3, #1
 8008e86:	d110      	bne.n	8008eaa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008e88:	f000 fca4 	bl	80097d4 <prvInitialiseTaskLists>
 8008e8c:	e00d      	b.n	8008eaa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008e8e:	4b25      	ldr	r3, [pc, #148]	@ (8008f24 <prvAddNewTaskToReadyList+0xc8>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d109      	bne.n	8008eaa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008e96:	4b22      	ldr	r3, [pc, #136]	@ (8008f20 <prvAddNewTaskToReadyList+0xc4>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	d802      	bhi.n	8008eaa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008ea4:	4a1e      	ldr	r2, [pc, #120]	@ (8008f20 <prvAddNewTaskToReadyList+0xc4>)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008eaa:	4b1f      	ldr	r3, [pc, #124]	@ (8008f28 <prvAddNewTaskToReadyList+0xcc>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	3301      	adds	r3, #1
 8008eb0:	4a1d      	ldr	r2, [pc, #116]	@ (8008f28 <prvAddNewTaskToReadyList+0xcc>)
 8008eb2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008eb4:	4b1c      	ldr	r3, [pc, #112]	@ (8008f28 <prvAddNewTaskToReadyList+0xcc>)
 8008eb6:	681a      	ldr	r2, [r3, #0]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ec0:	2201      	movs	r2, #1
 8008ec2:	409a      	lsls	r2, r3
 8008ec4:	4b19      	ldr	r3, [pc, #100]	@ (8008f2c <prvAddNewTaskToReadyList+0xd0>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	4a18      	ldr	r2, [pc, #96]	@ (8008f2c <prvAddNewTaskToReadyList+0xd0>)
 8008ecc:	6013      	str	r3, [r2, #0]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ed2:	4613      	mov	r3, r2
 8008ed4:	009b      	lsls	r3, r3, #2
 8008ed6:	4413      	add	r3, r2
 8008ed8:	009b      	lsls	r3, r3, #2
 8008eda:	4a15      	ldr	r2, [pc, #84]	@ (8008f30 <prvAddNewTaskToReadyList+0xd4>)
 8008edc:	441a      	add	r2, r3
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	3304      	adds	r3, #4
 8008ee2:	4619      	mov	r1, r3
 8008ee4:	4610      	mov	r0, r2
 8008ee6:	f7fe ff50 	bl	8007d8a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008eea:	f001 fac7 	bl	800a47c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008eee:	4b0d      	ldr	r3, [pc, #52]	@ (8008f24 <prvAddNewTaskToReadyList+0xc8>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d00e      	beq.n	8008f14 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008ef6:	4b0a      	ldr	r3, [pc, #40]	@ (8008f20 <prvAddNewTaskToReadyList+0xc4>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f00:	429a      	cmp	r2, r3
 8008f02:	d207      	bcs.n	8008f14 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008f04:	4b0b      	ldr	r3, [pc, #44]	@ (8008f34 <prvAddNewTaskToReadyList+0xd8>)
 8008f06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f0a:	601a      	str	r2, [r3, #0]
 8008f0c:	f3bf 8f4f 	dsb	sy
 8008f10:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f14:	bf00      	nop
 8008f16:	3708      	adds	r7, #8
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}
 8008f1c:	20000808 	.word	0x20000808
 8008f20:	20000708 	.word	0x20000708
 8008f24:	20000814 	.word	0x20000814
 8008f28:	20000824 	.word	0x20000824
 8008f2c:	20000810 	.word	0x20000810
 8008f30:	2000070c 	.word	0x2000070c
 8008f34:	e000ed04 	.word	0xe000ed04

08008f38 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b084      	sub	sp, #16
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8008f40:	f001 fa6a 	bl	800a418 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d102      	bne.n	8008f50 <vTaskDelete+0x18>
 8008f4a:	4b39      	ldr	r3, [pc, #228]	@ (8009030 <vTaskDelete+0xf8>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	e000      	b.n	8008f52 <vTaskDelete+0x1a>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	3304      	adds	r3, #4
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f7fe ff73 	bl	8007e44 <uxListRemove>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d115      	bne.n	8008f90 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f68:	4932      	ldr	r1, [pc, #200]	@ (8009034 <vTaskDelete+0xfc>)
 8008f6a:	4613      	mov	r3, r2
 8008f6c:	009b      	lsls	r3, r3, #2
 8008f6e:	4413      	add	r3, r2
 8008f70:	009b      	lsls	r3, r3, #2
 8008f72:	440b      	add	r3, r1
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d10a      	bne.n	8008f90 <vTaskDelete+0x58>
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f7e:	2201      	movs	r2, #1
 8008f80:	fa02 f303 	lsl.w	r3, r2, r3
 8008f84:	43da      	mvns	r2, r3
 8008f86:	4b2c      	ldr	r3, [pc, #176]	@ (8009038 <vTaskDelete+0x100>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4013      	ands	r3, r2
 8008f8c:	4a2a      	ldr	r2, [pc, #168]	@ (8009038 <vTaskDelete+0x100>)
 8008f8e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d004      	beq.n	8008fa2 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	3318      	adds	r3, #24
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f7fe ff51 	bl	8007e44 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8008fa2:	4b26      	ldr	r3, [pc, #152]	@ (800903c <vTaskDelete+0x104>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	3301      	adds	r3, #1
 8008fa8:	4a24      	ldr	r2, [pc, #144]	@ (800903c <vTaskDelete+0x104>)
 8008faa:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8008fac:	4b20      	ldr	r3, [pc, #128]	@ (8009030 <vTaskDelete+0xf8>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	68fa      	ldr	r2, [r7, #12]
 8008fb2:	429a      	cmp	r2, r3
 8008fb4:	d10b      	bne.n	8008fce <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	3304      	adds	r3, #4
 8008fba:	4619      	mov	r1, r3
 8008fbc:	4820      	ldr	r0, [pc, #128]	@ (8009040 <vTaskDelete+0x108>)
 8008fbe:	f7fe fee4 	bl	8007d8a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8008fc2:	4b20      	ldr	r3, [pc, #128]	@ (8009044 <vTaskDelete+0x10c>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	3301      	adds	r3, #1
 8008fc8:	4a1e      	ldr	r2, [pc, #120]	@ (8009044 <vTaskDelete+0x10c>)
 8008fca:	6013      	str	r3, [r2, #0]
 8008fcc:	e009      	b.n	8008fe2 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8008fce:	4b1e      	ldr	r3, [pc, #120]	@ (8009048 <vTaskDelete+0x110>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	3b01      	subs	r3, #1
 8008fd4:	4a1c      	ldr	r2, [pc, #112]	@ (8009048 <vTaskDelete+0x110>)
 8008fd6:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8008fd8:	68f8      	ldr	r0, [r7, #12]
 8008fda:	f000 fc69 	bl	80098b0 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8008fde:	f000 fc9d 	bl	800991c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8008fe2:	f001 fa4b 	bl	800a47c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8008fe6:	4b19      	ldr	r3, [pc, #100]	@ (800904c <vTaskDelete+0x114>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d01c      	beq.n	8009028 <vTaskDelete+0xf0>
		{
			if( pxTCB == pxCurrentTCB )
 8008fee:	4b10      	ldr	r3, [pc, #64]	@ (8009030 <vTaskDelete+0xf8>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	68fa      	ldr	r2, [r7, #12]
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	d117      	bne.n	8009028 <vTaskDelete+0xf0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8008ff8:	4b15      	ldr	r3, [pc, #84]	@ (8009050 <vTaskDelete+0x118>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d00b      	beq.n	8009018 <vTaskDelete+0xe0>
	__asm volatile
 8009000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009004:	f383 8811 	msr	BASEPRI, r3
 8009008:	f3bf 8f6f 	isb	sy
 800900c:	f3bf 8f4f 	dsb	sy
 8009010:	60bb      	str	r3, [r7, #8]
}
 8009012:	bf00      	nop
 8009014:	bf00      	nop
 8009016:	e7fd      	b.n	8009014 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8009018:	4b0e      	ldr	r3, [pc, #56]	@ (8009054 <vTaskDelete+0x11c>)
 800901a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800901e:	601a      	str	r2, [r3, #0]
 8009020:	f3bf 8f4f 	dsb	sy
 8009024:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009028:	bf00      	nop
 800902a:	3710      	adds	r7, #16
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}
 8009030:	20000708 	.word	0x20000708
 8009034:	2000070c 	.word	0x2000070c
 8009038:	20000810 	.word	0x20000810
 800903c:	20000824 	.word	0x20000824
 8009040:	200007dc 	.word	0x200007dc
 8009044:	200007f0 	.word	0x200007f0
 8009048:	20000808 	.word	0x20000808
 800904c:	20000814 	.word	0x20000814
 8009050:	20000830 	.word	0x20000830
 8009054:	e000ed04 	.word	0xe000ed04

08009058 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009058:	b580      	push	{r7, lr}
 800905a:	b084      	sub	sp, #16
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009060:	2300      	movs	r3, #0
 8009062:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d018      	beq.n	800909c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800906a:	4b14      	ldr	r3, [pc, #80]	@ (80090bc <vTaskDelay+0x64>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d00b      	beq.n	800908a <vTaskDelay+0x32>
	__asm volatile
 8009072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009076:	f383 8811 	msr	BASEPRI, r3
 800907a:	f3bf 8f6f 	isb	sy
 800907e:	f3bf 8f4f 	dsb	sy
 8009082:	60bb      	str	r3, [r7, #8]
}
 8009084:	bf00      	nop
 8009086:	bf00      	nop
 8009088:	e7fd      	b.n	8009086 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800908a:	f000 f887 	bl	800919c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800908e:	2100      	movs	r1, #0
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f001 f82b 	bl	800a0ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009096:	f000 f88f 	bl	80091b8 <xTaskResumeAll>
 800909a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d107      	bne.n	80090b2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80090a2:	4b07      	ldr	r3, [pc, #28]	@ (80090c0 <vTaskDelay+0x68>)
 80090a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090a8:	601a      	str	r2, [r3, #0]
 80090aa:	f3bf 8f4f 	dsb	sy
 80090ae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80090b2:	bf00      	nop
 80090b4:	3710      	adds	r7, #16
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop
 80090bc:	20000830 	.word	0x20000830
 80090c0:	e000ed04 	.word	0xe000ed04

080090c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b08a      	sub	sp, #40	@ 0x28
 80090c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80090ca:	2300      	movs	r3, #0
 80090cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80090ce:	2300      	movs	r3, #0
 80090d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80090d2:	463a      	mov	r2, r7
 80090d4:	1d39      	adds	r1, r7, #4
 80090d6:	f107 0308 	add.w	r3, r7, #8
 80090da:	4618      	mov	r0, r3
 80090dc:	f7fa f990 	bl	8003400 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80090e0:	6839      	ldr	r1, [r7, #0]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	68ba      	ldr	r2, [r7, #8]
 80090e6:	9202      	str	r2, [sp, #8]
 80090e8:	9301      	str	r3, [sp, #4]
 80090ea:	2300      	movs	r3, #0
 80090ec:	9300      	str	r3, [sp, #0]
 80090ee:	2300      	movs	r3, #0
 80090f0:	460a      	mov	r2, r1
 80090f2:	4922      	ldr	r1, [pc, #136]	@ (800917c <vTaskStartScheduler+0xb8>)
 80090f4:	4822      	ldr	r0, [pc, #136]	@ (8009180 <vTaskStartScheduler+0xbc>)
 80090f6:	f7ff fd62 	bl	8008bbe <xTaskCreateStatic>
 80090fa:	4603      	mov	r3, r0
 80090fc:	4a21      	ldr	r2, [pc, #132]	@ (8009184 <vTaskStartScheduler+0xc0>)
 80090fe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009100:	4b20      	ldr	r3, [pc, #128]	@ (8009184 <vTaskStartScheduler+0xc0>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d002      	beq.n	800910e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009108:	2301      	movs	r3, #1
 800910a:	617b      	str	r3, [r7, #20]
 800910c:	e001      	b.n	8009112 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800910e:	2300      	movs	r3, #0
 8009110:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	2b01      	cmp	r3, #1
 8009116:	d11d      	bne.n	8009154 <vTaskStartScheduler+0x90>
	__asm volatile
 8009118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800911c:	f383 8811 	msr	BASEPRI, r3
 8009120:	f3bf 8f6f 	isb	sy
 8009124:	f3bf 8f4f 	dsb	sy
 8009128:	613b      	str	r3, [r7, #16]
}
 800912a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800912c:	4b16      	ldr	r3, [pc, #88]	@ (8009188 <vTaskStartScheduler+0xc4>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	3358      	adds	r3, #88	@ 0x58
 8009132:	4a16      	ldr	r2, [pc, #88]	@ (800918c <vTaskStartScheduler+0xc8>)
 8009134:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009136:	4b16      	ldr	r3, [pc, #88]	@ (8009190 <vTaskStartScheduler+0xcc>)
 8009138:	f04f 32ff 	mov.w	r2, #4294967295
 800913c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800913e:	4b15      	ldr	r3, [pc, #84]	@ (8009194 <vTaskStartScheduler+0xd0>)
 8009140:	2201      	movs	r2, #1
 8009142:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009144:	4b14      	ldr	r3, [pc, #80]	@ (8009198 <vTaskStartScheduler+0xd4>)
 8009146:	2200      	movs	r2, #0
 8009148:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800914a:	f7fa f949 	bl	80033e0 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800914e:	f001 f8bf 	bl	800a2d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009152:	e00f      	b.n	8009174 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800915a:	d10b      	bne.n	8009174 <vTaskStartScheduler+0xb0>
	__asm volatile
 800915c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009160:	f383 8811 	msr	BASEPRI, r3
 8009164:	f3bf 8f6f 	isb	sy
 8009168:	f3bf 8f4f 	dsb	sy
 800916c:	60fb      	str	r3, [r7, #12]
}
 800916e:	bf00      	nop
 8009170:	bf00      	nop
 8009172:	e7fd      	b.n	8009170 <vTaskStartScheduler+0xac>
}
 8009174:	bf00      	nop
 8009176:	3718      	adds	r7, #24
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}
 800917c:	0800e470 	.word	0x0800e470
 8009180:	080097a5 	.word	0x080097a5
 8009184:	2000082c 	.word	0x2000082c
 8009188:	20000708 	.word	0x20000708
 800918c:	200000dc 	.word	0x200000dc
 8009190:	20000828 	.word	0x20000828
 8009194:	20000814 	.word	0x20000814
 8009198:	2000080c 	.word	0x2000080c

0800919c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800919c:	b480      	push	{r7}
 800919e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80091a0:	4b04      	ldr	r3, [pc, #16]	@ (80091b4 <vTaskSuspendAll+0x18>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	3301      	adds	r3, #1
 80091a6:	4a03      	ldr	r2, [pc, #12]	@ (80091b4 <vTaskSuspendAll+0x18>)
 80091a8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80091aa:	bf00      	nop
 80091ac:	46bd      	mov	sp, r7
 80091ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b2:	4770      	bx	lr
 80091b4:	20000830 	.word	0x20000830

080091b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b084      	sub	sp, #16
 80091bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80091be:	2300      	movs	r3, #0
 80091c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80091c2:	2300      	movs	r3, #0
 80091c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80091c6:	4b42      	ldr	r3, [pc, #264]	@ (80092d0 <xTaskResumeAll+0x118>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d10b      	bne.n	80091e6 <xTaskResumeAll+0x2e>
	__asm volatile
 80091ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091d2:	f383 8811 	msr	BASEPRI, r3
 80091d6:	f3bf 8f6f 	isb	sy
 80091da:	f3bf 8f4f 	dsb	sy
 80091de:	603b      	str	r3, [r7, #0]
}
 80091e0:	bf00      	nop
 80091e2:	bf00      	nop
 80091e4:	e7fd      	b.n	80091e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80091e6:	f001 f917 	bl	800a418 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80091ea:	4b39      	ldr	r3, [pc, #228]	@ (80092d0 <xTaskResumeAll+0x118>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	3b01      	subs	r3, #1
 80091f0:	4a37      	ldr	r2, [pc, #220]	@ (80092d0 <xTaskResumeAll+0x118>)
 80091f2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091f4:	4b36      	ldr	r3, [pc, #216]	@ (80092d0 <xTaskResumeAll+0x118>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d161      	bne.n	80092c0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80091fc:	4b35      	ldr	r3, [pc, #212]	@ (80092d4 <xTaskResumeAll+0x11c>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d05d      	beq.n	80092c0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009204:	e02e      	b.n	8009264 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009206:	4b34      	ldr	r3, [pc, #208]	@ (80092d8 <xTaskResumeAll+0x120>)
 8009208:	68db      	ldr	r3, [r3, #12]
 800920a:	68db      	ldr	r3, [r3, #12]
 800920c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	3318      	adds	r3, #24
 8009212:	4618      	mov	r0, r3
 8009214:	f7fe fe16 	bl	8007e44 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	3304      	adds	r3, #4
 800921c:	4618      	mov	r0, r3
 800921e:	f7fe fe11 	bl	8007e44 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009226:	2201      	movs	r2, #1
 8009228:	409a      	lsls	r2, r3
 800922a:	4b2c      	ldr	r3, [pc, #176]	@ (80092dc <xTaskResumeAll+0x124>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	4313      	orrs	r3, r2
 8009230:	4a2a      	ldr	r2, [pc, #168]	@ (80092dc <xTaskResumeAll+0x124>)
 8009232:	6013      	str	r3, [r2, #0]
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009238:	4613      	mov	r3, r2
 800923a:	009b      	lsls	r3, r3, #2
 800923c:	4413      	add	r3, r2
 800923e:	009b      	lsls	r3, r3, #2
 8009240:	4a27      	ldr	r2, [pc, #156]	@ (80092e0 <xTaskResumeAll+0x128>)
 8009242:	441a      	add	r2, r3
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	3304      	adds	r3, #4
 8009248:	4619      	mov	r1, r3
 800924a:	4610      	mov	r0, r2
 800924c:	f7fe fd9d 	bl	8007d8a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009254:	4b23      	ldr	r3, [pc, #140]	@ (80092e4 <xTaskResumeAll+0x12c>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800925a:	429a      	cmp	r2, r3
 800925c:	d302      	bcc.n	8009264 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800925e:	4b22      	ldr	r3, [pc, #136]	@ (80092e8 <xTaskResumeAll+0x130>)
 8009260:	2201      	movs	r2, #1
 8009262:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009264:	4b1c      	ldr	r3, [pc, #112]	@ (80092d8 <xTaskResumeAll+0x120>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d1cc      	bne.n	8009206 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d001      	beq.n	8009276 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009272:	f000 fb53 	bl	800991c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009276:	4b1d      	ldr	r3, [pc, #116]	@ (80092ec <xTaskResumeAll+0x134>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d010      	beq.n	80092a4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009282:	f000 f847 	bl	8009314 <xTaskIncrementTick>
 8009286:	4603      	mov	r3, r0
 8009288:	2b00      	cmp	r3, #0
 800928a:	d002      	beq.n	8009292 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800928c:	4b16      	ldr	r3, [pc, #88]	@ (80092e8 <xTaskResumeAll+0x130>)
 800928e:	2201      	movs	r2, #1
 8009290:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	3b01      	subs	r3, #1
 8009296:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d1f1      	bne.n	8009282 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800929e:	4b13      	ldr	r3, [pc, #76]	@ (80092ec <xTaskResumeAll+0x134>)
 80092a0:	2200      	movs	r2, #0
 80092a2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80092a4:	4b10      	ldr	r3, [pc, #64]	@ (80092e8 <xTaskResumeAll+0x130>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d009      	beq.n	80092c0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80092ac:	2301      	movs	r3, #1
 80092ae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80092b0:	4b0f      	ldr	r3, [pc, #60]	@ (80092f0 <xTaskResumeAll+0x138>)
 80092b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80092b6:	601a      	str	r2, [r3, #0]
 80092b8:	f3bf 8f4f 	dsb	sy
 80092bc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80092c0:	f001 f8dc 	bl	800a47c <vPortExitCritical>

	return xAlreadyYielded;
 80092c4:	68bb      	ldr	r3, [r7, #8]
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3710      	adds	r7, #16
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}
 80092ce:	bf00      	nop
 80092d0:	20000830 	.word	0x20000830
 80092d4:	20000808 	.word	0x20000808
 80092d8:	200007c8 	.word	0x200007c8
 80092dc:	20000810 	.word	0x20000810
 80092e0:	2000070c 	.word	0x2000070c
 80092e4:	20000708 	.word	0x20000708
 80092e8:	2000081c 	.word	0x2000081c
 80092ec:	20000818 	.word	0x20000818
 80092f0:	e000ed04 	.word	0xe000ed04

080092f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80092f4:	b480      	push	{r7}
 80092f6:	b083      	sub	sp, #12
 80092f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80092fa:	4b05      	ldr	r3, [pc, #20]	@ (8009310 <xTaskGetTickCount+0x1c>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009300:	687b      	ldr	r3, [r7, #4]
}
 8009302:	4618      	mov	r0, r3
 8009304:	370c      	adds	r7, #12
 8009306:	46bd      	mov	sp, r7
 8009308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930c:	4770      	bx	lr
 800930e:	bf00      	nop
 8009310:	2000080c 	.word	0x2000080c

08009314 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b086      	sub	sp, #24
 8009318:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800931a:	2300      	movs	r3, #0
 800931c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800931e:	4b4f      	ldr	r3, [pc, #316]	@ (800945c <xTaskIncrementTick+0x148>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	2b00      	cmp	r3, #0
 8009324:	f040 808f 	bne.w	8009446 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009328:	4b4d      	ldr	r3, [pc, #308]	@ (8009460 <xTaskIncrementTick+0x14c>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	3301      	adds	r3, #1
 800932e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009330:	4a4b      	ldr	r2, [pc, #300]	@ (8009460 <xTaskIncrementTick+0x14c>)
 8009332:	693b      	ldr	r3, [r7, #16]
 8009334:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d121      	bne.n	8009380 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800933c:	4b49      	ldr	r3, [pc, #292]	@ (8009464 <xTaskIncrementTick+0x150>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d00b      	beq.n	800935e <xTaskIncrementTick+0x4a>
	__asm volatile
 8009346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800934a:	f383 8811 	msr	BASEPRI, r3
 800934e:	f3bf 8f6f 	isb	sy
 8009352:	f3bf 8f4f 	dsb	sy
 8009356:	603b      	str	r3, [r7, #0]
}
 8009358:	bf00      	nop
 800935a:	bf00      	nop
 800935c:	e7fd      	b.n	800935a <xTaskIncrementTick+0x46>
 800935e:	4b41      	ldr	r3, [pc, #260]	@ (8009464 <xTaskIncrementTick+0x150>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	60fb      	str	r3, [r7, #12]
 8009364:	4b40      	ldr	r3, [pc, #256]	@ (8009468 <xTaskIncrementTick+0x154>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4a3e      	ldr	r2, [pc, #248]	@ (8009464 <xTaskIncrementTick+0x150>)
 800936a:	6013      	str	r3, [r2, #0]
 800936c:	4a3e      	ldr	r2, [pc, #248]	@ (8009468 <xTaskIncrementTick+0x154>)
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	6013      	str	r3, [r2, #0]
 8009372:	4b3e      	ldr	r3, [pc, #248]	@ (800946c <xTaskIncrementTick+0x158>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	3301      	adds	r3, #1
 8009378:	4a3c      	ldr	r2, [pc, #240]	@ (800946c <xTaskIncrementTick+0x158>)
 800937a:	6013      	str	r3, [r2, #0]
 800937c:	f000 face 	bl	800991c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009380:	4b3b      	ldr	r3, [pc, #236]	@ (8009470 <xTaskIncrementTick+0x15c>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	693a      	ldr	r2, [r7, #16]
 8009386:	429a      	cmp	r2, r3
 8009388:	d348      	bcc.n	800941c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800938a:	4b36      	ldr	r3, [pc, #216]	@ (8009464 <xTaskIncrementTick+0x150>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d104      	bne.n	800939e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009394:	4b36      	ldr	r3, [pc, #216]	@ (8009470 <xTaskIncrementTick+0x15c>)
 8009396:	f04f 32ff 	mov.w	r2, #4294967295
 800939a:	601a      	str	r2, [r3, #0]
					break;
 800939c:	e03e      	b.n	800941c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800939e:	4b31      	ldr	r3, [pc, #196]	@ (8009464 <xTaskIncrementTick+0x150>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	68db      	ldr	r3, [r3, #12]
 80093a4:	68db      	ldr	r3, [r3, #12]
 80093a6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	685b      	ldr	r3, [r3, #4]
 80093ac:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80093ae:	693a      	ldr	r2, [r7, #16]
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	429a      	cmp	r2, r3
 80093b4:	d203      	bcs.n	80093be <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80093b6:	4a2e      	ldr	r2, [pc, #184]	@ (8009470 <xTaskIncrementTick+0x15c>)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80093bc:	e02e      	b.n	800941c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	3304      	adds	r3, #4
 80093c2:	4618      	mov	r0, r3
 80093c4:	f7fe fd3e 	bl	8007e44 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d004      	beq.n	80093da <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	3318      	adds	r3, #24
 80093d4:	4618      	mov	r0, r3
 80093d6:	f7fe fd35 	bl	8007e44 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093de:	2201      	movs	r2, #1
 80093e0:	409a      	lsls	r2, r3
 80093e2:	4b24      	ldr	r3, [pc, #144]	@ (8009474 <xTaskIncrementTick+0x160>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4313      	orrs	r3, r2
 80093e8:	4a22      	ldr	r2, [pc, #136]	@ (8009474 <xTaskIncrementTick+0x160>)
 80093ea:	6013      	str	r3, [r2, #0]
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093f0:	4613      	mov	r3, r2
 80093f2:	009b      	lsls	r3, r3, #2
 80093f4:	4413      	add	r3, r2
 80093f6:	009b      	lsls	r3, r3, #2
 80093f8:	4a1f      	ldr	r2, [pc, #124]	@ (8009478 <xTaskIncrementTick+0x164>)
 80093fa:	441a      	add	r2, r3
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	3304      	adds	r3, #4
 8009400:	4619      	mov	r1, r3
 8009402:	4610      	mov	r0, r2
 8009404:	f7fe fcc1 	bl	8007d8a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800940c:	4b1b      	ldr	r3, [pc, #108]	@ (800947c <xTaskIncrementTick+0x168>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009412:	429a      	cmp	r2, r3
 8009414:	d3b9      	bcc.n	800938a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009416:	2301      	movs	r3, #1
 8009418:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800941a:	e7b6      	b.n	800938a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800941c:	4b17      	ldr	r3, [pc, #92]	@ (800947c <xTaskIncrementTick+0x168>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009422:	4915      	ldr	r1, [pc, #84]	@ (8009478 <xTaskIncrementTick+0x164>)
 8009424:	4613      	mov	r3, r2
 8009426:	009b      	lsls	r3, r3, #2
 8009428:	4413      	add	r3, r2
 800942a:	009b      	lsls	r3, r3, #2
 800942c:	440b      	add	r3, r1
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	2b01      	cmp	r3, #1
 8009432:	d901      	bls.n	8009438 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009434:	2301      	movs	r3, #1
 8009436:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009438:	4b11      	ldr	r3, [pc, #68]	@ (8009480 <xTaskIncrementTick+0x16c>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d007      	beq.n	8009450 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009440:	2301      	movs	r3, #1
 8009442:	617b      	str	r3, [r7, #20]
 8009444:	e004      	b.n	8009450 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009446:	4b0f      	ldr	r3, [pc, #60]	@ (8009484 <xTaskIncrementTick+0x170>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	3301      	adds	r3, #1
 800944c:	4a0d      	ldr	r2, [pc, #52]	@ (8009484 <xTaskIncrementTick+0x170>)
 800944e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009450:	697b      	ldr	r3, [r7, #20]
}
 8009452:	4618      	mov	r0, r3
 8009454:	3718      	adds	r7, #24
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}
 800945a:	bf00      	nop
 800945c:	20000830 	.word	0x20000830
 8009460:	2000080c 	.word	0x2000080c
 8009464:	200007c0 	.word	0x200007c0
 8009468:	200007c4 	.word	0x200007c4
 800946c:	20000820 	.word	0x20000820
 8009470:	20000828 	.word	0x20000828
 8009474:	20000810 	.word	0x20000810
 8009478:	2000070c 	.word	0x2000070c
 800947c:	20000708 	.word	0x20000708
 8009480:	2000081c 	.word	0x2000081c
 8009484:	20000818 	.word	0x20000818

08009488 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b086      	sub	sp, #24
 800948c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800948e:	4b35      	ldr	r3, [pc, #212]	@ (8009564 <vTaskSwitchContext+0xdc>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d003      	beq.n	800949e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009496:	4b34      	ldr	r3, [pc, #208]	@ (8009568 <vTaskSwitchContext+0xe0>)
 8009498:	2201      	movs	r2, #1
 800949a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800949c:	e05e      	b.n	800955c <vTaskSwitchContext+0xd4>
		xYieldPending = pdFALSE;
 800949e:	4b32      	ldr	r3, [pc, #200]	@ (8009568 <vTaskSwitchContext+0xe0>)
 80094a0:	2200      	movs	r2, #0
 80094a2:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80094a4:	f7f9 ffa3 	bl	80033ee <getRunTimeCounterValue>
 80094a8:	4603      	mov	r3, r0
 80094aa:	4a30      	ldr	r2, [pc, #192]	@ (800956c <vTaskSwitchContext+0xe4>)
 80094ac:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 80094ae:	4b2f      	ldr	r3, [pc, #188]	@ (800956c <vTaskSwitchContext+0xe4>)
 80094b0:	681a      	ldr	r2, [r3, #0]
 80094b2:	4b2f      	ldr	r3, [pc, #188]	@ (8009570 <vTaskSwitchContext+0xe8>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	429a      	cmp	r2, r3
 80094b8:	d909      	bls.n	80094ce <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80094ba:	4b2e      	ldr	r3, [pc, #184]	@ (8009574 <vTaskSwitchContext+0xec>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80094c0:	4a2a      	ldr	r2, [pc, #168]	@ (800956c <vTaskSwitchContext+0xe4>)
 80094c2:	6810      	ldr	r0, [r2, #0]
 80094c4:	4a2a      	ldr	r2, [pc, #168]	@ (8009570 <vTaskSwitchContext+0xe8>)
 80094c6:	6812      	ldr	r2, [r2, #0]
 80094c8:	1a82      	subs	r2, r0, r2
 80094ca:	440a      	add	r2, r1
 80094cc:	655a      	str	r2, [r3, #84]	@ 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 80094ce:	4b27      	ldr	r3, [pc, #156]	@ (800956c <vTaskSwitchContext+0xe4>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	4a27      	ldr	r2, [pc, #156]	@ (8009570 <vTaskSwitchContext+0xe8>)
 80094d4:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094d6:	4b28      	ldr	r3, [pc, #160]	@ (8009578 <vTaskSwitchContext+0xf0>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	fab3 f383 	clz	r3, r3
 80094e2:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80094e4:	7afb      	ldrb	r3, [r7, #11]
 80094e6:	f1c3 031f 	rsb	r3, r3, #31
 80094ea:	617b      	str	r3, [r7, #20]
 80094ec:	4923      	ldr	r1, [pc, #140]	@ (800957c <vTaskSwitchContext+0xf4>)
 80094ee:	697a      	ldr	r2, [r7, #20]
 80094f0:	4613      	mov	r3, r2
 80094f2:	009b      	lsls	r3, r3, #2
 80094f4:	4413      	add	r3, r2
 80094f6:	009b      	lsls	r3, r3, #2
 80094f8:	440b      	add	r3, r1
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d10b      	bne.n	8009518 <vTaskSwitchContext+0x90>
	__asm volatile
 8009500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009504:	f383 8811 	msr	BASEPRI, r3
 8009508:	f3bf 8f6f 	isb	sy
 800950c:	f3bf 8f4f 	dsb	sy
 8009510:	607b      	str	r3, [r7, #4]
}
 8009512:	bf00      	nop
 8009514:	bf00      	nop
 8009516:	e7fd      	b.n	8009514 <vTaskSwitchContext+0x8c>
 8009518:	697a      	ldr	r2, [r7, #20]
 800951a:	4613      	mov	r3, r2
 800951c:	009b      	lsls	r3, r3, #2
 800951e:	4413      	add	r3, r2
 8009520:	009b      	lsls	r3, r3, #2
 8009522:	4a16      	ldr	r2, [pc, #88]	@ (800957c <vTaskSwitchContext+0xf4>)
 8009524:	4413      	add	r3, r2
 8009526:	613b      	str	r3, [r7, #16]
 8009528:	693b      	ldr	r3, [r7, #16]
 800952a:	685b      	ldr	r3, [r3, #4]
 800952c:	685a      	ldr	r2, [r3, #4]
 800952e:	693b      	ldr	r3, [r7, #16]
 8009530:	605a      	str	r2, [r3, #4]
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	685a      	ldr	r2, [r3, #4]
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	3308      	adds	r3, #8
 800953a:	429a      	cmp	r2, r3
 800953c:	d104      	bne.n	8009548 <vTaskSwitchContext+0xc0>
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	685b      	ldr	r3, [r3, #4]
 8009542:	685a      	ldr	r2, [r3, #4]
 8009544:	693b      	ldr	r3, [r7, #16]
 8009546:	605a      	str	r2, [r3, #4]
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	685b      	ldr	r3, [r3, #4]
 800954c:	68db      	ldr	r3, [r3, #12]
 800954e:	4a09      	ldr	r2, [pc, #36]	@ (8009574 <vTaskSwitchContext+0xec>)
 8009550:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009552:	4b08      	ldr	r3, [pc, #32]	@ (8009574 <vTaskSwitchContext+0xec>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	3358      	adds	r3, #88	@ 0x58
 8009558:	4a09      	ldr	r2, [pc, #36]	@ (8009580 <vTaskSwitchContext+0xf8>)
 800955a:	6013      	str	r3, [r2, #0]
}
 800955c:	bf00      	nop
 800955e:	3718      	adds	r7, #24
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}
 8009564:	20000830 	.word	0x20000830
 8009568:	2000081c 	.word	0x2000081c
 800956c:	20000838 	.word	0x20000838
 8009570:	20000834 	.word	0x20000834
 8009574:	20000708 	.word	0x20000708
 8009578:	20000810 	.word	0x20000810
 800957c:	2000070c 	.word	0x2000070c
 8009580:	200000dc 	.word	0x200000dc

08009584 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b084      	sub	sp, #16
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d10b      	bne.n	80095ac <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009598:	f383 8811 	msr	BASEPRI, r3
 800959c:	f3bf 8f6f 	isb	sy
 80095a0:	f3bf 8f4f 	dsb	sy
 80095a4:	60fb      	str	r3, [r7, #12]
}
 80095a6:	bf00      	nop
 80095a8:	bf00      	nop
 80095aa:	e7fd      	b.n	80095a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80095ac:	4b07      	ldr	r3, [pc, #28]	@ (80095cc <vTaskPlaceOnEventList+0x48>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	3318      	adds	r3, #24
 80095b2:	4619      	mov	r1, r3
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f7fe fc0c 	bl	8007dd2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80095ba:	2101      	movs	r1, #1
 80095bc:	6838      	ldr	r0, [r7, #0]
 80095be:	f000 fd95 	bl	800a0ec <prvAddCurrentTaskToDelayedList>
}
 80095c2:	bf00      	nop
 80095c4:	3710      	adds	r7, #16
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}
 80095ca:	bf00      	nop
 80095cc:	20000708 	.word	0x20000708

080095d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b086      	sub	sp, #24
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	68db      	ldr	r3, [r3, #12]
 80095dc:	68db      	ldr	r3, [r3, #12]
 80095de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80095e0:	693b      	ldr	r3, [r7, #16]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d10b      	bne.n	80095fe <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80095e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095ea:	f383 8811 	msr	BASEPRI, r3
 80095ee:	f3bf 8f6f 	isb	sy
 80095f2:	f3bf 8f4f 	dsb	sy
 80095f6:	60fb      	str	r3, [r7, #12]
}
 80095f8:	bf00      	nop
 80095fa:	bf00      	nop
 80095fc:	e7fd      	b.n	80095fa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80095fe:	693b      	ldr	r3, [r7, #16]
 8009600:	3318      	adds	r3, #24
 8009602:	4618      	mov	r0, r3
 8009604:	f7fe fc1e 	bl	8007e44 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009608:	4b1d      	ldr	r3, [pc, #116]	@ (8009680 <xTaskRemoveFromEventList+0xb0>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d11c      	bne.n	800964a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	3304      	adds	r3, #4
 8009614:	4618      	mov	r0, r3
 8009616:	f7fe fc15 	bl	8007e44 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800961e:	2201      	movs	r2, #1
 8009620:	409a      	lsls	r2, r3
 8009622:	4b18      	ldr	r3, [pc, #96]	@ (8009684 <xTaskRemoveFromEventList+0xb4>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	4313      	orrs	r3, r2
 8009628:	4a16      	ldr	r2, [pc, #88]	@ (8009684 <xTaskRemoveFromEventList+0xb4>)
 800962a:	6013      	str	r3, [r2, #0]
 800962c:	693b      	ldr	r3, [r7, #16]
 800962e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009630:	4613      	mov	r3, r2
 8009632:	009b      	lsls	r3, r3, #2
 8009634:	4413      	add	r3, r2
 8009636:	009b      	lsls	r3, r3, #2
 8009638:	4a13      	ldr	r2, [pc, #76]	@ (8009688 <xTaskRemoveFromEventList+0xb8>)
 800963a:	441a      	add	r2, r3
 800963c:	693b      	ldr	r3, [r7, #16]
 800963e:	3304      	adds	r3, #4
 8009640:	4619      	mov	r1, r3
 8009642:	4610      	mov	r0, r2
 8009644:	f7fe fba1 	bl	8007d8a <vListInsertEnd>
 8009648:	e005      	b.n	8009656 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	3318      	adds	r3, #24
 800964e:	4619      	mov	r1, r3
 8009650:	480e      	ldr	r0, [pc, #56]	@ (800968c <xTaskRemoveFromEventList+0xbc>)
 8009652:	f7fe fb9a 	bl	8007d8a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800965a:	4b0d      	ldr	r3, [pc, #52]	@ (8009690 <xTaskRemoveFromEventList+0xc0>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009660:	429a      	cmp	r2, r3
 8009662:	d905      	bls.n	8009670 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009664:	2301      	movs	r3, #1
 8009666:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009668:	4b0a      	ldr	r3, [pc, #40]	@ (8009694 <xTaskRemoveFromEventList+0xc4>)
 800966a:	2201      	movs	r2, #1
 800966c:	601a      	str	r2, [r3, #0]
 800966e:	e001      	b.n	8009674 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009670:	2300      	movs	r3, #0
 8009672:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009674:	697b      	ldr	r3, [r7, #20]
}
 8009676:	4618      	mov	r0, r3
 8009678:	3718      	adds	r7, #24
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}
 800967e:	bf00      	nop
 8009680:	20000830 	.word	0x20000830
 8009684:	20000810 	.word	0x20000810
 8009688:	2000070c 	.word	0x2000070c
 800968c:	200007c8 	.word	0x200007c8
 8009690:	20000708 	.word	0x20000708
 8009694:	2000081c 	.word	0x2000081c

08009698 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009698:	b480      	push	{r7}
 800969a:	b083      	sub	sp, #12
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80096a0:	4b06      	ldr	r3, [pc, #24]	@ (80096bc <vTaskInternalSetTimeOutState+0x24>)
 80096a2:	681a      	ldr	r2, [r3, #0]
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80096a8:	4b05      	ldr	r3, [pc, #20]	@ (80096c0 <vTaskInternalSetTimeOutState+0x28>)
 80096aa:	681a      	ldr	r2, [r3, #0]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	605a      	str	r2, [r3, #4]
}
 80096b0:	bf00      	nop
 80096b2:	370c      	adds	r7, #12
 80096b4:	46bd      	mov	sp, r7
 80096b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ba:	4770      	bx	lr
 80096bc:	20000820 	.word	0x20000820
 80096c0:	2000080c 	.word	0x2000080c

080096c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b088      	sub	sp, #32
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
 80096cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d10b      	bne.n	80096ec <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80096d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096d8:	f383 8811 	msr	BASEPRI, r3
 80096dc:	f3bf 8f6f 	isb	sy
 80096e0:	f3bf 8f4f 	dsb	sy
 80096e4:	613b      	str	r3, [r7, #16]
}
 80096e6:	bf00      	nop
 80096e8:	bf00      	nop
 80096ea:	e7fd      	b.n	80096e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d10b      	bne.n	800970a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80096f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096f6:	f383 8811 	msr	BASEPRI, r3
 80096fa:	f3bf 8f6f 	isb	sy
 80096fe:	f3bf 8f4f 	dsb	sy
 8009702:	60fb      	str	r3, [r7, #12]
}
 8009704:	bf00      	nop
 8009706:	bf00      	nop
 8009708:	e7fd      	b.n	8009706 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800970a:	f000 fe85 	bl	800a418 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800970e:	4b1d      	ldr	r3, [pc, #116]	@ (8009784 <xTaskCheckForTimeOut+0xc0>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	685b      	ldr	r3, [r3, #4]
 8009718:	69ba      	ldr	r2, [r7, #24]
 800971a:	1ad3      	subs	r3, r2, r3
 800971c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009726:	d102      	bne.n	800972e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009728:	2300      	movs	r3, #0
 800972a:	61fb      	str	r3, [r7, #28]
 800972c:	e023      	b.n	8009776 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681a      	ldr	r2, [r3, #0]
 8009732:	4b15      	ldr	r3, [pc, #84]	@ (8009788 <xTaskCheckForTimeOut+0xc4>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	429a      	cmp	r2, r3
 8009738:	d007      	beq.n	800974a <xTaskCheckForTimeOut+0x86>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	685b      	ldr	r3, [r3, #4]
 800973e:	69ba      	ldr	r2, [r7, #24]
 8009740:	429a      	cmp	r2, r3
 8009742:	d302      	bcc.n	800974a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009744:	2301      	movs	r3, #1
 8009746:	61fb      	str	r3, [r7, #28]
 8009748:	e015      	b.n	8009776 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	697a      	ldr	r2, [r7, #20]
 8009750:	429a      	cmp	r2, r3
 8009752:	d20b      	bcs.n	800976c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	681a      	ldr	r2, [r3, #0]
 8009758:	697b      	ldr	r3, [r7, #20]
 800975a:	1ad2      	subs	r2, r2, r3
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f7ff ff99 	bl	8009698 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009766:	2300      	movs	r3, #0
 8009768:	61fb      	str	r3, [r7, #28]
 800976a:	e004      	b.n	8009776 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	2200      	movs	r2, #0
 8009770:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009772:	2301      	movs	r3, #1
 8009774:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009776:	f000 fe81 	bl	800a47c <vPortExitCritical>

	return xReturn;
 800977a:	69fb      	ldr	r3, [r7, #28]
}
 800977c:	4618      	mov	r0, r3
 800977e:	3720      	adds	r7, #32
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}
 8009784:	2000080c 	.word	0x2000080c
 8009788:	20000820 	.word	0x20000820

0800978c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800978c:	b480      	push	{r7}
 800978e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009790:	4b03      	ldr	r3, [pc, #12]	@ (80097a0 <vTaskMissedYield+0x14>)
 8009792:	2201      	movs	r2, #1
 8009794:	601a      	str	r2, [r3, #0]
}
 8009796:	bf00      	nop
 8009798:	46bd      	mov	sp, r7
 800979a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979e:	4770      	bx	lr
 80097a0:	2000081c 	.word	0x2000081c

080097a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b082      	sub	sp, #8
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80097ac:	f000 f852 	bl	8009854 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80097b0:	4b06      	ldr	r3, [pc, #24]	@ (80097cc <prvIdleTask+0x28>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	2b01      	cmp	r3, #1
 80097b6:	d9f9      	bls.n	80097ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80097b8:	4b05      	ldr	r3, [pc, #20]	@ (80097d0 <prvIdleTask+0x2c>)
 80097ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80097be:	601a      	str	r2, [r3, #0]
 80097c0:	f3bf 8f4f 	dsb	sy
 80097c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80097c8:	e7f0      	b.n	80097ac <prvIdleTask+0x8>
 80097ca:	bf00      	nop
 80097cc:	2000070c 	.word	0x2000070c
 80097d0:	e000ed04 	.word	0xe000ed04

080097d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b082      	sub	sp, #8
 80097d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80097da:	2300      	movs	r3, #0
 80097dc:	607b      	str	r3, [r7, #4]
 80097de:	e00c      	b.n	80097fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80097e0:	687a      	ldr	r2, [r7, #4]
 80097e2:	4613      	mov	r3, r2
 80097e4:	009b      	lsls	r3, r3, #2
 80097e6:	4413      	add	r3, r2
 80097e8:	009b      	lsls	r3, r3, #2
 80097ea:	4a12      	ldr	r2, [pc, #72]	@ (8009834 <prvInitialiseTaskLists+0x60>)
 80097ec:	4413      	add	r3, r2
 80097ee:	4618      	mov	r0, r3
 80097f0:	f7fe fa9e 	bl	8007d30 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	3301      	adds	r3, #1
 80097f8:	607b      	str	r3, [r7, #4]
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2b06      	cmp	r3, #6
 80097fe:	d9ef      	bls.n	80097e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009800:	480d      	ldr	r0, [pc, #52]	@ (8009838 <prvInitialiseTaskLists+0x64>)
 8009802:	f7fe fa95 	bl	8007d30 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009806:	480d      	ldr	r0, [pc, #52]	@ (800983c <prvInitialiseTaskLists+0x68>)
 8009808:	f7fe fa92 	bl	8007d30 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800980c:	480c      	ldr	r0, [pc, #48]	@ (8009840 <prvInitialiseTaskLists+0x6c>)
 800980e:	f7fe fa8f 	bl	8007d30 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009812:	480c      	ldr	r0, [pc, #48]	@ (8009844 <prvInitialiseTaskLists+0x70>)
 8009814:	f7fe fa8c 	bl	8007d30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009818:	480b      	ldr	r0, [pc, #44]	@ (8009848 <prvInitialiseTaskLists+0x74>)
 800981a:	f7fe fa89 	bl	8007d30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800981e:	4b0b      	ldr	r3, [pc, #44]	@ (800984c <prvInitialiseTaskLists+0x78>)
 8009820:	4a05      	ldr	r2, [pc, #20]	@ (8009838 <prvInitialiseTaskLists+0x64>)
 8009822:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009824:	4b0a      	ldr	r3, [pc, #40]	@ (8009850 <prvInitialiseTaskLists+0x7c>)
 8009826:	4a05      	ldr	r2, [pc, #20]	@ (800983c <prvInitialiseTaskLists+0x68>)
 8009828:	601a      	str	r2, [r3, #0]
}
 800982a:	bf00      	nop
 800982c:	3708      	adds	r7, #8
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}
 8009832:	bf00      	nop
 8009834:	2000070c 	.word	0x2000070c
 8009838:	20000798 	.word	0x20000798
 800983c:	200007ac 	.word	0x200007ac
 8009840:	200007c8 	.word	0x200007c8
 8009844:	200007dc 	.word	0x200007dc
 8009848:	200007f4 	.word	0x200007f4
 800984c:	200007c0 	.word	0x200007c0
 8009850:	200007c4 	.word	0x200007c4

08009854 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b082      	sub	sp, #8
 8009858:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800985a:	e019      	b.n	8009890 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800985c:	f000 fddc 	bl	800a418 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009860:	4b10      	ldr	r3, [pc, #64]	@ (80098a4 <prvCheckTasksWaitingTermination+0x50>)
 8009862:	68db      	ldr	r3, [r3, #12]
 8009864:	68db      	ldr	r3, [r3, #12]
 8009866:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	3304      	adds	r3, #4
 800986c:	4618      	mov	r0, r3
 800986e:	f7fe fae9 	bl	8007e44 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009872:	4b0d      	ldr	r3, [pc, #52]	@ (80098a8 <prvCheckTasksWaitingTermination+0x54>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	3b01      	subs	r3, #1
 8009878:	4a0b      	ldr	r2, [pc, #44]	@ (80098a8 <prvCheckTasksWaitingTermination+0x54>)
 800987a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800987c:	4b0b      	ldr	r3, [pc, #44]	@ (80098ac <prvCheckTasksWaitingTermination+0x58>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	3b01      	subs	r3, #1
 8009882:	4a0a      	ldr	r2, [pc, #40]	@ (80098ac <prvCheckTasksWaitingTermination+0x58>)
 8009884:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009886:	f000 fdf9 	bl	800a47c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f000 f810 	bl	80098b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009890:	4b06      	ldr	r3, [pc, #24]	@ (80098ac <prvCheckTasksWaitingTermination+0x58>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d1e1      	bne.n	800985c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009898:	bf00      	nop
 800989a:	bf00      	nop
 800989c:	3708      	adds	r7, #8
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}
 80098a2:	bf00      	nop
 80098a4:	200007dc 	.word	0x200007dc
 80098a8:	20000808 	.word	0x20000808
 80098ac:	200007f0 	.word	0x200007f0

080098b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b084      	sub	sp, #16
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	3358      	adds	r3, #88	@ 0x58
 80098bc:	4618      	mov	r0, r3
 80098be:	f001 ffa1 	bl	800b804 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d108      	bne.n	80098de <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098d0:	4618      	mov	r0, r3
 80098d2:	f000 ff91 	bl	800a7f8 <vPortFree>
				vPortFree( pxTCB );
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f000 ff8e 	bl	800a7f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80098dc:	e019      	b.n	8009912 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	d103      	bne.n	80098f0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f000 ff85 	bl	800a7f8 <vPortFree>
	}
 80098ee:	e010      	b.n	8009912 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 80098f6:	2b02      	cmp	r3, #2
 80098f8:	d00b      	beq.n	8009912 <prvDeleteTCB+0x62>
	__asm volatile
 80098fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098fe:	f383 8811 	msr	BASEPRI, r3
 8009902:	f3bf 8f6f 	isb	sy
 8009906:	f3bf 8f4f 	dsb	sy
 800990a:	60fb      	str	r3, [r7, #12]
}
 800990c:	bf00      	nop
 800990e:	bf00      	nop
 8009910:	e7fd      	b.n	800990e <prvDeleteTCB+0x5e>
	}
 8009912:	bf00      	nop
 8009914:	3710      	adds	r7, #16
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}
	...

0800991c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800991c:	b480      	push	{r7}
 800991e:	b083      	sub	sp, #12
 8009920:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009922:	4b0c      	ldr	r3, [pc, #48]	@ (8009954 <prvResetNextTaskUnblockTime+0x38>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d104      	bne.n	8009936 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800992c:	4b0a      	ldr	r3, [pc, #40]	@ (8009958 <prvResetNextTaskUnblockTime+0x3c>)
 800992e:	f04f 32ff 	mov.w	r2, #4294967295
 8009932:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009934:	e008      	b.n	8009948 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009936:	4b07      	ldr	r3, [pc, #28]	@ (8009954 <prvResetNextTaskUnblockTime+0x38>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	68db      	ldr	r3, [r3, #12]
 800993c:	68db      	ldr	r3, [r3, #12]
 800993e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	4a04      	ldr	r2, [pc, #16]	@ (8009958 <prvResetNextTaskUnblockTime+0x3c>)
 8009946:	6013      	str	r3, [r2, #0]
}
 8009948:	bf00      	nop
 800994a:	370c      	adds	r7, #12
 800994c:	46bd      	mov	sp, r7
 800994e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009952:	4770      	bx	lr
 8009954:	200007c0 	.word	0x200007c0
 8009958:	20000828 	.word	0x20000828

0800995c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800995c:	b480      	push	{r7}
 800995e:	b083      	sub	sp, #12
 8009960:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009962:	4b0b      	ldr	r3, [pc, #44]	@ (8009990 <xTaskGetSchedulerState+0x34>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d102      	bne.n	8009970 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800996a:	2301      	movs	r3, #1
 800996c:	607b      	str	r3, [r7, #4]
 800996e:	e008      	b.n	8009982 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009970:	4b08      	ldr	r3, [pc, #32]	@ (8009994 <xTaskGetSchedulerState+0x38>)
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d102      	bne.n	800997e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009978:	2302      	movs	r3, #2
 800997a:	607b      	str	r3, [r7, #4]
 800997c:	e001      	b.n	8009982 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800997e:	2300      	movs	r3, #0
 8009980:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009982:	687b      	ldr	r3, [r7, #4]
	}
 8009984:	4618      	mov	r0, r3
 8009986:	370c      	adds	r7, #12
 8009988:	46bd      	mov	sp, r7
 800998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998e:	4770      	bx	lr
 8009990:	20000814 	.word	0x20000814
 8009994:	20000830 	.word	0x20000830

08009998 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009998:	b580      	push	{r7, lr}
 800999a:	b084      	sub	sp, #16
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80099a4:	2300      	movs	r3, #0
 80099a6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d05e      	beq.n	8009a6c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099b2:	4b31      	ldr	r3, [pc, #196]	@ (8009a78 <xTaskPriorityInherit+0xe0>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099b8:	429a      	cmp	r2, r3
 80099ba:	d24e      	bcs.n	8009a5a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	699b      	ldr	r3, [r3, #24]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	db06      	blt.n	80099d2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099c4:	4b2c      	ldr	r3, [pc, #176]	@ (8009a78 <xTaskPriorityInherit+0xe0>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099ca:	f1c3 0207 	rsb	r2, r3, #7
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	6959      	ldr	r1, [r3, #20]
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099da:	4613      	mov	r3, r2
 80099dc:	009b      	lsls	r3, r3, #2
 80099de:	4413      	add	r3, r2
 80099e0:	009b      	lsls	r3, r3, #2
 80099e2:	4a26      	ldr	r2, [pc, #152]	@ (8009a7c <xTaskPriorityInherit+0xe4>)
 80099e4:	4413      	add	r3, r2
 80099e6:	4299      	cmp	r1, r3
 80099e8:	d12f      	bne.n	8009a4a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	3304      	adds	r3, #4
 80099ee:	4618      	mov	r0, r3
 80099f0:	f7fe fa28 	bl	8007e44 <uxListRemove>
 80099f4:	4603      	mov	r3, r0
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d10a      	bne.n	8009a10 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099fe:	2201      	movs	r2, #1
 8009a00:	fa02 f303 	lsl.w	r3, r2, r3
 8009a04:	43da      	mvns	r2, r3
 8009a06:	4b1e      	ldr	r3, [pc, #120]	@ (8009a80 <xTaskPriorityInherit+0xe8>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	4013      	ands	r3, r2
 8009a0c:	4a1c      	ldr	r2, [pc, #112]	@ (8009a80 <xTaskPriorityInherit+0xe8>)
 8009a0e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009a10:	4b19      	ldr	r3, [pc, #100]	@ (8009a78 <xTaskPriorityInherit+0xe0>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a1e:	2201      	movs	r2, #1
 8009a20:	409a      	lsls	r2, r3
 8009a22:	4b17      	ldr	r3, [pc, #92]	@ (8009a80 <xTaskPriorityInherit+0xe8>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	4313      	orrs	r3, r2
 8009a28:	4a15      	ldr	r2, [pc, #84]	@ (8009a80 <xTaskPriorityInherit+0xe8>)
 8009a2a:	6013      	str	r3, [r2, #0]
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a30:	4613      	mov	r3, r2
 8009a32:	009b      	lsls	r3, r3, #2
 8009a34:	4413      	add	r3, r2
 8009a36:	009b      	lsls	r3, r3, #2
 8009a38:	4a10      	ldr	r2, [pc, #64]	@ (8009a7c <xTaskPriorityInherit+0xe4>)
 8009a3a:	441a      	add	r2, r3
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	3304      	adds	r3, #4
 8009a40:	4619      	mov	r1, r3
 8009a42:	4610      	mov	r0, r2
 8009a44:	f7fe f9a1 	bl	8007d8a <vListInsertEnd>
 8009a48:	e004      	b.n	8009a54 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8009a78 <xTaskPriorityInherit+0xe0>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009a54:	2301      	movs	r3, #1
 8009a56:	60fb      	str	r3, [r7, #12]
 8009a58:	e008      	b.n	8009a6c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009a5e:	4b06      	ldr	r3, [pc, #24]	@ (8009a78 <xTaskPriorityInherit+0xe0>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a64:	429a      	cmp	r2, r3
 8009a66:	d201      	bcs.n	8009a6c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009a68:	2301      	movs	r3, #1
 8009a6a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
	}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3710      	adds	r7, #16
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}
 8009a76:	bf00      	nop
 8009a78:	20000708 	.word	0x20000708
 8009a7c:	2000070c 	.word	0x2000070c
 8009a80:	20000810 	.word	0x20000810

08009a84 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b086      	sub	sp, #24
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009a90:	2300      	movs	r3, #0
 8009a92:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d070      	beq.n	8009b7c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009a9a:	4b3b      	ldr	r3, [pc, #236]	@ (8009b88 <xTaskPriorityDisinherit+0x104>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	693a      	ldr	r2, [r7, #16]
 8009aa0:	429a      	cmp	r2, r3
 8009aa2:	d00b      	beq.n	8009abc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009aa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aa8:	f383 8811 	msr	BASEPRI, r3
 8009aac:	f3bf 8f6f 	isb	sy
 8009ab0:	f3bf 8f4f 	dsb	sy
 8009ab4:	60fb      	str	r3, [r7, #12]
}
 8009ab6:	bf00      	nop
 8009ab8:	bf00      	nop
 8009aba:	e7fd      	b.n	8009ab8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009abc:	693b      	ldr	r3, [r7, #16]
 8009abe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d10b      	bne.n	8009adc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009ac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ac8:	f383 8811 	msr	BASEPRI, r3
 8009acc:	f3bf 8f6f 	isb	sy
 8009ad0:	f3bf 8f4f 	dsb	sy
 8009ad4:	60bb      	str	r3, [r7, #8]
}
 8009ad6:	bf00      	nop
 8009ad8:	bf00      	nop
 8009ada:	e7fd      	b.n	8009ad8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ae0:	1e5a      	subs	r2, r3, #1
 8009ae2:	693b      	ldr	r3, [r7, #16]
 8009ae4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009aea:	693b      	ldr	r3, [r7, #16]
 8009aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009aee:	429a      	cmp	r2, r3
 8009af0:	d044      	beq.n	8009b7c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d140      	bne.n	8009b7c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009afa:	693b      	ldr	r3, [r7, #16]
 8009afc:	3304      	adds	r3, #4
 8009afe:	4618      	mov	r0, r3
 8009b00:	f7fe f9a0 	bl	8007e44 <uxListRemove>
 8009b04:	4603      	mov	r3, r0
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d115      	bne.n	8009b36 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009b0a:	693b      	ldr	r3, [r7, #16]
 8009b0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b0e:	491f      	ldr	r1, [pc, #124]	@ (8009b8c <xTaskPriorityDisinherit+0x108>)
 8009b10:	4613      	mov	r3, r2
 8009b12:	009b      	lsls	r3, r3, #2
 8009b14:	4413      	add	r3, r2
 8009b16:	009b      	lsls	r3, r3, #2
 8009b18:	440b      	add	r3, r1
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d10a      	bne.n	8009b36 <xTaskPriorityDisinherit+0xb2>
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b24:	2201      	movs	r2, #1
 8009b26:	fa02 f303 	lsl.w	r3, r2, r3
 8009b2a:	43da      	mvns	r2, r3
 8009b2c:	4b18      	ldr	r3, [pc, #96]	@ (8009b90 <xTaskPriorityDisinherit+0x10c>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4013      	ands	r3, r2
 8009b32:	4a17      	ldr	r2, [pc, #92]	@ (8009b90 <xTaskPriorityDisinherit+0x10c>)
 8009b34:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009b3a:	693b      	ldr	r3, [r7, #16]
 8009b3c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b42:	f1c3 0207 	rsb	r2, r3, #7
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009b4a:	693b      	ldr	r3, [r7, #16]
 8009b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b4e:	2201      	movs	r2, #1
 8009b50:	409a      	lsls	r2, r3
 8009b52:	4b0f      	ldr	r3, [pc, #60]	@ (8009b90 <xTaskPriorityDisinherit+0x10c>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	4313      	orrs	r3, r2
 8009b58:	4a0d      	ldr	r2, [pc, #52]	@ (8009b90 <xTaskPriorityDisinherit+0x10c>)
 8009b5a:	6013      	str	r3, [r2, #0]
 8009b5c:	693b      	ldr	r3, [r7, #16]
 8009b5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b60:	4613      	mov	r3, r2
 8009b62:	009b      	lsls	r3, r3, #2
 8009b64:	4413      	add	r3, r2
 8009b66:	009b      	lsls	r3, r3, #2
 8009b68:	4a08      	ldr	r2, [pc, #32]	@ (8009b8c <xTaskPriorityDisinherit+0x108>)
 8009b6a:	441a      	add	r2, r3
 8009b6c:	693b      	ldr	r3, [r7, #16]
 8009b6e:	3304      	adds	r3, #4
 8009b70:	4619      	mov	r1, r3
 8009b72:	4610      	mov	r0, r2
 8009b74:	f7fe f909 	bl	8007d8a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009b78:	2301      	movs	r3, #1
 8009b7a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009b7c:	697b      	ldr	r3, [r7, #20]
	}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3718      	adds	r7, #24
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}
 8009b86:	bf00      	nop
 8009b88:	20000708 	.word	0x20000708
 8009b8c:	2000070c 	.word	0x2000070c
 8009b90:	20000810 	.word	0x20000810

08009b94 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b088      	sub	sp, #32
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
 8009b9c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d079      	beq.n	8009ca0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009bac:	69bb      	ldr	r3, [r7, #24]
 8009bae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d10b      	bne.n	8009bcc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8009bb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bb8:	f383 8811 	msr	BASEPRI, r3
 8009bbc:	f3bf 8f6f 	isb	sy
 8009bc0:	f3bf 8f4f 	dsb	sy
 8009bc4:	60fb      	str	r3, [r7, #12]
}
 8009bc6:	bf00      	nop
 8009bc8:	bf00      	nop
 8009bca:	e7fd      	b.n	8009bc8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009bcc:	69bb      	ldr	r3, [r7, #24]
 8009bce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009bd0:	683a      	ldr	r2, [r7, #0]
 8009bd2:	429a      	cmp	r2, r3
 8009bd4:	d902      	bls.n	8009bdc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	61fb      	str	r3, [r7, #28]
 8009bda:	e002      	b.n	8009be2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009bdc:	69bb      	ldr	r3, [r7, #24]
 8009bde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009be0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009be2:	69bb      	ldr	r3, [r7, #24]
 8009be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009be6:	69fa      	ldr	r2, [r7, #28]
 8009be8:	429a      	cmp	r2, r3
 8009bea:	d059      	beq.n	8009ca0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009bec:	69bb      	ldr	r3, [r7, #24]
 8009bee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009bf0:	697a      	ldr	r2, [r7, #20]
 8009bf2:	429a      	cmp	r2, r3
 8009bf4:	d154      	bne.n	8009ca0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009bf6:	4b2c      	ldr	r3, [pc, #176]	@ (8009ca8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	69ba      	ldr	r2, [r7, #24]
 8009bfc:	429a      	cmp	r2, r3
 8009bfe:	d10b      	bne.n	8009c18 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8009c00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c04:	f383 8811 	msr	BASEPRI, r3
 8009c08:	f3bf 8f6f 	isb	sy
 8009c0c:	f3bf 8f4f 	dsb	sy
 8009c10:	60bb      	str	r3, [r7, #8]
}
 8009c12:	bf00      	nop
 8009c14:	bf00      	nop
 8009c16:	e7fd      	b.n	8009c14 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009c18:	69bb      	ldr	r3, [r7, #24]
 8009c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c1c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009c1e:	69bb      	ldr	r3, [r7, #24]
 8009c20:	69fa      	ldr	r2, [r7, #28]
 8009c22:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009c24:	69bb      	ldr	r3, [r7, #24]
 8009c26:	699b      	ldr	r3, [r3, #24]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	db04      	blt.n	8009c36 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c2c:	69fb      	ldr	r3, [r7, #28]
 8009c2e:	f1c3 0207 	rsb	r2, r3, #7
 8009c32:	69bb      	ldr	r3, [r7, #24]
 8009c34:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009c36:	69bb      	ldr	r3, [r7, #24]
 8009c38:	6959      	ldr	r1, [r3, #20]
 8009c3a:	693a      	ldr	r2, [r7, #16]
 8009c3c:	4613      	mov	r3, r2
 8009c3e:	009b      	lsls	r3, r3, #2
 8009c40:	4413      	add	r3, r2
 8009c42:	009b      	lsls	r3, r3, #2
 8009c44:	4a19      	ldr	r2, [pc, #100]	@ (8009cac <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009c46:	4413      	add	r3, r2
 8009c48:	4299      	cmp	r1, r3
 8009c4a:	d129      	bne.n	8009ca0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c4c:	69bb      	ldr	r3, [r7, #24]
 8009c4e:	3304      	adds	r3, #4
 8009c50:	4618      	mov	r0, r3
 8009c52:	f7fe f8f7 	bl	8007e44 <uxListRemove>
 8009c56:	4603      	mov	r3, r0
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d10a      	bne.n	8009c72 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8009c5c:	69bb      	ldr	r3, [r7, #24]
 8009c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c60:	2201      	movs	r2, #1
 8009c62:	fa02 f303 	lsl.w	r3, r2, r3
 8009c66:	43da      	mvns	r2, r3
 8009c68:	4b11      	ldr	r3, [pc, #68]	@ (8009cb0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	4013      	ands	r3, r2
 8009c6e:	4a10      	ldr	r2, [pc, #64]	@ (8009cb0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8009c70:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009c72:	69bb      	ldr	r3, [r7, #24]
 8009c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c76:	2201      	movs	r2, #1
 8009c78:	409a      	lsls	r2, r3
 8009c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8009cb0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	4a0b      	ldr	r2, [pc, #44]	@ (8009cb0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8009c82:	6013      	str	r3, [r2, #0]
 8009c84:	69bb      	ldr	r3, [r7, #24]
 8009c86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c88:	4613      	mov	r3, r2
 8009c8a:	009b      	lsls	r3, r3, #2
 8009c8c:	4413      	add	r3, r2
 8009c8e:	009b      	lsls	r3, r3, #2
 8009c90:	4a06      	ldr	r2, [pc, #24]	@ (8009cac <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009c92:	441a      	add	r2, r3
 8009c94:	69bb      	ldr	r3, [r7, #24]
 8009c96:	3304      	adds	r3, #4
 8009c98:	4619      	mov	r1, r3
 8009c9a:	4610      	mov	r0, r2
 8009c9c:	f7fe f875 	bl	8007d8a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009ca0:	bf00      	nop
 8009ca2:	3720      	adds	r7, #32
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}
 8009ca8:	20000708 	.word	0x20000708
 8009cac:	2000070c 	.word	0x2000070c
 8009cb0:	20000810 	.word	0x20000810

08009cb4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009cb4:	b480      	push	{r7}
 8009cb6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009cb8:	4b07      	ldr	r3, [pc, #28]	@ (8009cd8 <pvTaskIncrementMutexHeldCount+0x24>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d004      	beq.n	8009cca <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009cc0:	4b05      	ldr	r3, [pc, #20]	@ (8009cd8 <pvTaskIncrementMutexHeldCount+0x24>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009cc6:	3201      	adds	r2, #1
 8009cc8:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8009cca:	4b03      	ldr	r3, [pc, #12]	@ (8009cd8 <pvTaskIncrementMutexHeldCount+0x24>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
	}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd6:	4770      	bx	lr
 8009cd8:	20000708 	.word	0x20000708

08009cdc <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b086      	sub	sp, #24
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	60f8      	str	r0, [r7, #12]
 8009ce4:	60b9      	str	r1, [r7, #8]
 8009ce6:	607a      	str	r2, [r7, #4]
 8009ce8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8009cea:	f000 fb95 	bl	800a418 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009cee:	4b29      	ldr	r3, [pc, #164]	@ (8009d94 <xTaskNotifyWait+0xb8>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 8009cf6:	b2db      	uxtb	r3, r3
 8009cf8:	2b02      	cmp	r3, #2
 8009cfa:	d01c      	beq.n	8009d36 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8009cfc:	4b25      	ldr	r3, [pc, #148]	@ (8009d94 <xTaskNotifyWait+0xb8>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 8009d04:	68fa      	ldr	r2, [r7, #12]
 8009d06:	43d2      	mvns	r2, r2
 8009d08:	400a      	ands	r2, r1
 8009d0a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8009d0e:	4b21      	ldr	r3, [pc, #132]	@ (8009d94 <xTaskNotifyWait+0xb8>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	2201      	movs	r2, #1
 8009d14:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8

				if( xTicksToWait > ( TickType_t ) 0 )
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d00b      	beq.n	8009d36 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009d1e:	2101      	movs	r1, #1
 8009d20:	6838      	ldr	r0, [r7, #0]
 8009d22:	f000 f9e3 	bl	800a0ec <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8009d26:	4b1c      	ldr	r3, [pc, #112]	@ (8009d98 <xTaskNotifyWait+0xbc>)
 8009d28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d2c:	601a      	str	r2, [r3, #0]
 8009d2e:	f3bf 8f4f 	dsb	sy
 8009d32:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009d36:	f000 fba1 	bl	800a47c <vPortExitCritical>

		taskENTER_CRITICAL();
 8009d3a:	f000 fb6d 	bl	800a418 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d005      	beq.n	8009d50 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8009d44:	4b13      	ldr	r3, [pc, #76]	@ (8009d94 <xTaskNotifyWait+0xb8>)
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009d50:	4b10      	ldr	r3, [pc, #64]	@ (8009d94 <xTaskNotifyWait+0xb8>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 8009d58:	b2db      	uxtb	r3, r3
 8009d5a:	2b02      	cmp	r3, #2
 8009d5c:	d002      	beq.n	8009d64 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	617b      	str	r3, [r7, #20]
 8009d62:	e00a      	b.n	8009d7a <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8009d64:	4b0b      	ldr	r3, [pc, #44]	@ (8009d94 <xTaskNotifyWait+0xb8>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 8009d6c:	68ba      	ldr	r2, [r7, #8]
 8009d6e:	43d2      	mvns	r2, r2
 8009d70:	400a      	ands	r2, r1
 8009d72:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
				xReturn = pdTRUE;
 8009d76:	2301      	movs	r3, #1
 8009d78:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009d7a:	4b06      	ldr	r3, [pc, #24]	@ (8009d94 <xTaskNotifyWait+0xb8>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
		}
		taskEXIT_CRITICAL();
 8009d84:	f000 fb7a 	bl	800a47c <vPortExitCritical>

		return xReturn;
 8009d88:	697b      	ldr	r3, [r7, #20]
	}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3718      	adds	r7, #24
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}
 8009d92:	bf00      	nop
 8009d94:	20000708 	.word	0x20000708
 8009d98:	e000ed04 	.word	0xe000ed04

08009d9c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b08a      	sub	sp, #40	@ 0x28
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	60f8      	str	r0, [r7, #12]
 8009da4:	60b9      	str	r1, [r7, #8]
 8009da6:	603b      	str	r3, [r7, #0]
 8009da8:	4613      	mov	r3, r2
 8009daa:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8009dac:	2301      	movs	r3, #1
 8009dae:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d10b      	bne.n	8009dce <xTaskGenericNotify+0x32>
	__asm volatile
 8009db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dba:	f383 8811 	msr	BASEPRI, r3
 8009dbe:	f3bf 8f6f 	isb	sy
 8009dc2:	f3bf 8f4f 	dsb	sy
 8009dc6:	61bb      	str	r3, [r7, #24]
}
 8009dc8:	bf00      	nop
 8009dca:	bf00      	nop
 8009dcc:	e7fd      	b.n	8009dca <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8009dd2:	f000 fb21 	bl	800a418 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d004      	beq.n	8009de6 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009ddc:	6a3b      	ldr	r3, [r7, #32]
 8009dde:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009de6:	6a3b      	ldr	r3, [r7, #32]
 8009de8:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 8009dec:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009dee:	6a3b      	ldr	r3, [r7, #32]
 8009df0:	2202      	movs	r2, #2
 8009df2:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8

			switch( eAction )
 8009df6:	79fb      	ldrb	r3, [r7, #7]
 8009df8:	2b04      	cmp	r3, #4
 8009dfa:	d82e      	bhi.n	8009e5a <xTaskGenericNotify+0xbe>
 8009dfc:	a201      	add	r2, pc, #4	@ (adr r2, 8009e04 <xTaskGenericNotify+0x68>)
 8009dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e02:	bf00      	nop
 8009e04:	08009e7f 	.word	0x08009e7f
 8009e08:	08009e19 	.word	0x08009e19
 8009e0c:	08009e2b 	.word	0x08009e2b
 8009e10:	08009e3b 	.word	0x08009e3b
 8009e14:	08009e45 	.word	0x08009e45
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009e18:	6a3b      	ldr	r3, [r7, #32]
 8009e1a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	431a      	orrs	r2, r3
 8009e22:	6a3b      	ldr	r3, [r7, #32]
 8009e24:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
					break;
 8009e28:	e02c      	b.n	8009e84 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8009e2a:	6a3b      	ldr	r3, [r7, #32]
 8009e2c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009e30:	1c5a      	adds	r2, r3, #1
 8009e32:	6a3b      	ldr	r3, [r7, #32]
 8009e34:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
					break;
 8009e38:	e024      	b.n	8009e84 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8009e3a:	6a3b      	ldr	r3, [r7, #32]
 8009e3c:	68ba      	ldr	r2, [r7, #8]
 8009e3e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
					break;
 8009e42:	e01f      	b.n	8009e84 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009e44:	7ffb      	ldrb	r3, [r7, #31]
 8009e46:	2b02      	cmp	r3, #2
 8009e48:	d004      	beq.n	8009e54 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009e4a:	6a3b      	ldr	r3, [r7, #32]
 8009e4c:	68ba      	ldr	r2, [r7, #8]
 8009e4e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8009e52:	e017      	b.n	8009e84 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 8009e54:	2300      	movs	r3, #0
 8009e56:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8009e58:	e014      	b.n	8009e84 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8009e5a:	6a3b      	ldr	r3, [r7, #32]
 8009e5c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e64:	d00d      	beq.n	8009e82 <xTaskGenericNotify+0xe6>
	__asm volatile
 8009e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e6a:	f383 8811 	msr	BASEPRI, r3
 8009e6e:	f3bf 8f6f 	isb	sy
 8009e72:	f3bf 8f4f 	dsb	sy
 8009e76:	617b      	str	r3, [r7, #20]
}
 8009e78:	bf00      	nop
 8009e7a:	bf00      	nop
 8009e7c:	e7fd      	b.n	8009e7a <xTaskGenericNotify+0xde>
					break;
 8009e7e:	bf00      	nop
 8009e80:	e000      	b.n	8009e84 <xTaskGenericNotify+0xe8>

					break;
 8009e82:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009e84:	7ffb      	ldrb	r3, [r7, #31]
 8009e86:	2b01      	cmp	r3, #1
 8009e88:	d13a      	bne.n	8009f00 <xTaskGenericNotify+0x164>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e8a:	6a3b      	ldr	r3, [r7, #32]
 8009e8c:	3304      	adds	r3, #4
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f7fd ffd8 	bl	8007e44 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8009e94:	6a3b      	ldr	r3, [r7, #32]
 8009e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e98:	2201      	movs	r2, #1
 8009e9a:	409a      	lsls	r2, r3
 8009e9c:	4b1c      	ldr	r3, [pc, #112]	@ (8009f10 <xTaskGenericNotify+0x174>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	4313      	orrs	r3, r2
 8009ea2:	4a1b      	ldr	r2, [pc, #108]	@ (8009f10 <xTaskGenericNotify+0x174>)
 8009ea4:	6013      	str	r3, [r2, #0]
 8009ea6:	6a3b      	ldr	r3, [r7, #32]
 8009ea8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009eaa:	4613      	mov	r3, r2
 8009eac:	009b      	lsls	r3, r3, #2
 8009eae:	4413      	add	r3, r2
 8009eb0:	009b      	lsls	r3, r3, #2
 8009eb2:	4a18      	ldr	r2, [pc, #96]	@ (8009f14 <xTaskGenericNotify+0x178>)
 8009eb4:	441a      	add	r2, r3
 8009eb6:	6a3b      	ldr	r3, [r7, #32]
 8009eb8:	3304      	adds	r3, #4
 8009eba:	4619      	mov	r1, r3
 8009ebc:	4610      	mov	r0, r2
 8009ebe:	f7fd ff64 	bl	8007d8a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009ec2:	6a3b      	ldr	r3, [r7, #32]
 8009ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d00b      	beq.n	8009ee2 <xTaskGenericNotify+0x146>
	__asm volatile
 8009eca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ece:	f383 8811 	msr	BASEPRI, r3
 8009ed2:	f3bf 8f6f 	isb	sy
 8009ed6:	f3bf 8f4f 	dsb	sy
 8009eda:	613b      	str	r3, [r7, #16]
}
 8009edc:	bf00      	nop
 8009ede:	bf00      	nop
 8009ee0:	e7fd      	b.n	8009ede <xTaskGenericNotify+0x142>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009ee2:	6a3b      	ldr	r3, [r7, #32]
 8009ee4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ee6:	4b0c      	ldr	r3, [pc, #48]	@ (8009f18 <xTaskGenericNotify+0x17c>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009eec:	429a      	cmp	r2, r3
 8009eee:	d907      	bls.n	8009f00 <xTaskGenericNotify+0x164>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8009ef0:	4b0a      	ldr	r3, [pc, #40]	@ (8009f1c <xTaskGenericNotify+0x180>)
 8009ef2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ef6:	601a      	str	r2, [r3, #0]
 8009ef8:	f3bf 8f4f 	dsb	sy
 8009efc:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009f00:	f000 fabc 	bl	800a47c <vPortExitCritical>

		return xReturn;
 8009f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8009f06:	4618      	mov	r0, r3
 8009f08:	3728      	adds	r7, #40	@ 0x28
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}
 8009f0e:	bf00      	nop
 8009f10:	20000810 	.word	0x20000810
 8009f14:	2000070c 	.word	0x2000070c
 8009f18:	20000708 	.word	0x20000708
 8009f1c:	e000ed04 	.word	0xe000ed04

08009f20 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b08e      	sub	sp, #56	@ 0x38
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	60f8      	str	r0, [r7, #12]
 8009f28:	60b9      	str	r1, [r7, #8]
 8009f2a:	603b      	str	r3, [r7, #0]
 8009f2c:	4613      	mov	r3, r2
 8009f2e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8009f30:	2301      	movs	r3, #1
 8009f32:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d10b      	bne.n	8009f52 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 8009f3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f3e:	f383 8811 	msr	BASEPRI, r3
 8009f42:	f3bf 8f6f 	isb	sy
 8009f46:	f3bf 8f4f 	dsb	sy
 8009f4a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009f4c:	bf00      	nop
 8009f4e:	bf00      	nop
 8009f50:	e7fd      	b.n	8009f4e <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009f52:	f000 fb41 	bl	800a5d8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8009f5a:	f3ef 8211 	mrs	r2, BASEPRI
 8009f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f62:	f383 8811 	msr	BASEPRI, r3
 8009f66:	f3bf 8f6f 	isb	sy
 8009f6a:	f3bf 8f4f 	dsb	sy
 8009f6e:	623a      	str	r2, [r7, #32]
 8009f70:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8009f72:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d004      	beq.n	8009f86 <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f7e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f88:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 8009f8c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f92:	2202      	movs	r2, #2
 8009f94:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8

			switch( eAction )
 8009f98:	79fb      	ldrb	r3, [r7, #7]
 8009f9a:	2b04      	cmp	r3, #4
 8009f9c:	d82e      	bhi.n	8009ffc <xTaskGenericNotifyFromISR+0xdc>
 8009f9e:	a201      	add	r2, pc, #4	@ (adr r2, 8009fa4 <xTaskGenericNotifyFromISR+0x84>)
 8009fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fa4:	0800a021 	.word	0x0800a021
 8009fa8:	08009fb9 	.word	0x08009fb9
 8009fac:	08009fcb 	.word	0x08009fcb
 8009fb0:	08009fdb 	.word	0x08009fdb
 8009fb4:	08009fe5 	.word	0x08009fe5
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fba:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	431a      	orrs	r2, r3
 8009fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fc4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
					break;
 8009fc8:	e02d      	b.n	800a026 <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8009fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fcc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009fd0:	1c5a      	adds	r2, r3, #1
 8009fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fd4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
					break;
 8009fd8:	e025      	b.n	800a026 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8009fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fdc:	68ba      	ldr	r2, [r7, #8]
 8009fde:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
					break;
 8009fe2:	e020      	b.n	800a026 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009fe4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009fe8:	2b02      	cmp	r3, #2
 8009fea:	d004      	beq.n	8009ff6 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fee:	68ba      	ldr	r2, [r7, #8]
 8009ff0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8009ff4:	e017      	b.n	800a026 <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8009ffa:	e014      	b.n	800a026 <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8009ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ffe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a002:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a006:	d00d      	beq.n	800a024 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 800a008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a00c:	f383 8811 	msr	BASEPRI, r3
 800a010:	f3bf 8f6f 	isb	sy
 800a014:	f3bf 8f4f 	dsb	sy
 800a018:	61bb      	str	r3, [r7, #24]
}
 800a01a:	bf00      	nop
 800a01c:	bf00      	nop
 800a01e:	e7fd      	b.n	800a01c <xTaskGenericNotifyFromISR+0xfc>
					break;
 800a020:	bf00      	nop
 800a022:	e000      	b.n	800a026 <xTaskGenericNotifyFromISR+0x106>
					break;
 800a024:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a026:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a02a:	2b01      	cmp	r3, #1
 800a02c:	d146      	bne.n	800a0bc <xTaskGenericNotifyFromISR+0x19c>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a02e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a032:	2b00      	cmp	r3, #0
 800a034:	d00b      	beq.n	800a04e <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 800a036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a03a:	f383 8811 	msr	BASEPRI, r3
 800a03e:	f3bf 8f6f 	isb	sy
 800a042:	f3bf 8f4f 	dsb	sy
 800a046:	617b      	str	r3, [r7, #20]
}
 800a048:	bf00      	nop
 800a04a:	bf00      	nop
 800a04c:	e7fd      	b.n	800a04a <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a04e:	4b21      	ldr	r3, [pc, #132]	@ (800a0d4 <xTaskGenericNotifyFromISR+0x1b4>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d11c      	bne.n	800a090 <xTaskGenericNotifyFromISR+0x170>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a058:	3304      	adds	r3, #4
 800a05a:	4618      	mov	r0, r3
 800a05c:	f7fd fef2 	bl	8007e44 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a064:	2201      	movs	r2, #1
 800a066:	409a      	lsls	r2, r3
 800a068:	4b1b      	ldr	r3, [pc, #108]	@ (800a0d8 <xTaskGenericNotifyFromISR+0x1b8>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	4313      	orrs	r3, r2
 800a06e:	4a1a      	ldr	r2, [pc, #104]	@ (800a0d8 <xTaskGenericNotifyFromISR+0x1b8>)
 800a070:	6013      	str	r3, [r2, #0]
 800a072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a074:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a076:	4613      	mov	r3, r2
 800a078:	009b      	lsls	r3, r3, #2
 800a07a:	4413      	add	r3, r2
 800a07c:	009b      	lsls	r3, r3, #2
 800a07e:	4a17      	ldr	r2, [pc, #92]	@ (800a0dc <xTaskGenericNotifyFromISR+0x1bc>)
 800a080:	441a      	add	r2, r3
 800a082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a084:	3304      	adds	r3, #4
 800a086:	4619      	mov	r1, r3
 800a088:	4610      	mov	r0, r2
 800a08a:	f7fd fe7e 	bl	8007d8a <vListInsertEnd>
 800a08e:	e005      	b.n	800a09c <xTaskGenericNotifyFromISR+0x17c>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800a090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a092:	3318      	adds	r3, #24
 800a094:	4619      	mov	r1, r3
 800a096:	4812      	ldr	r0, [pc, #72]	@ (800a0e0 <xTaskGenericNotifyFromISR+0x1c0>)
 800a098:	f7fd fe77 	bl	8007d8a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a09c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a09e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0a0:	4b10      	ldr	r3, [pc, #64]	@ (800a0e4 <xTaskGenericNotifyFromISR+0x1c4>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	d908      	bls.n	800a0bc <xTaskGenericNotifyFromISR+0x19c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800a0aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d002      	beq.n	800a0b6 <xTaskGenericNotifyFromISR+0x196>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800a0b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800a0b6:	4b0c      	ldr	r3, [pc, #48]	@ (800a0e8 <xTaskGenericNotifyFromISR+0x1c8>)
 800a0b8:	2201      	movs	r2, #1
 800a0ba:	601a      	str	r2, [r3, #0]
 800a0bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0be:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a0c0:	693b      	ldr	r3, [r7, #16]
 800a0c2:	f383 8811 	msr	BASEPRI, r3
}
 800a0c6:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800a0c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	3738      	adds	r7, #56	@ 0x38
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}
 800a0d2:	bf00      	nop
 800a0d4:	20000830 	.word	0x20000830
 800a0d8:	20000810 	.word	0x20000810
 800a0dc:	2000070c 	.word	0x2000070c
 800a0e0:	200007c8 	.word	0x200007c8
 800a0e4:	20000708 	.word	0x20000708
 800a0e8:	2000081c 	.word	0x2000081c

0800a0ec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b084      	sub	sp, #16
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
 800a0f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a0f6:	4b29      	ldr	r3, [pc, #164]	@ (800a19c <prvAddCurrentTaskToDelayedList+0xb0>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a0fc:	4b28      	ldr	r3, [pc, #160]	@ (800a1a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	3304      	adds	r3, #4
 800a102:	4618      	mov	r0, r3
 800a104:	f7fd fe9e 	bl	8007e44 <uxListRemove>
 800a108:	4603      	mov	r3, r0
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d10b      	bne.n	800a126 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a10e:	4b24      	ldr	r3, [pc, #144]	@ (800a1a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a114:	2201      	movs	r2, #1
 800a116:	fa02 f303 	lsl.w	r3, r2, r3
 800a11a:	43da      	mvns	r2, r3
 800a11c:	4b21      	ldr	r3, [pc, #132]	@ (800a1a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	4013      	ands	r3, r2
 800a122:	4a20      	ldr	r2, [pc, #128]	@ (800a1a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a124:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a12c:	d10a      	bne.n	800a144 <prvAddCurrentTaskToDelayedList+0x58>
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d007      	beq.n	800a144 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a134:	4b1a      	ldr	r3, [pc, #104]	@ (800a1a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	3304      	adds	r3, #4
 800a13a:	4619      	mov	r1, r3
 800a13c:	481a      	ldr	r0, [pc, #104]	@ (800a1a8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a13e:	f7fd fe24 	bl	8007d8a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a142:	e026      	b.n	800a192 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a144:	68fa      	ldr	r2, [r7, #12]
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	4413      	add	r3, r2
 800a14a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a14c:	4b14      	ldr	r3, [pc, #80]	@ (800a1a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	68ba      	ldr	r2, [r7, #8]
 800a152:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a154:	68ba      	ldr	r2, [r7, #8]
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	429a      	cmp	r2, r3
 800a15a:	d209      	bcs.n	800a170 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a15c:	4b13      	ldr	r3, [pc, #76]	@ (800a1ac <prvAddCurrentTaskToDelayedList+0xc0>)
 800a15e:	681a      	ldr	r2, [r3, #0]
 800a160:	4b0f      	ldr	r3, [pc, #60]	@ (800a1a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	3304      	adds	r3, #4
 800a166:	4619      	mov	r1, r3
 800a168:	4610      	mov	r0, r2
 800a16a:	f7fd fe32 	bl	8007dd2 <vListInsert>
}
 800a16e:	e010      	b.n	800a192 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a170:	4b0f      	ldr	r3, [pc, #60]	@ (800a1b0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a172:	681a      	ldr	r2, [r3, #0]
 800a174:	4b0a      	ldr	r3, [pc, #40]	@ (800a1a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	3304      	adds	r3, #4
 800a17a:	4619      	mov	r1, r3
 800a17c:	4610      	mov	r0, r2
 800a17e:	f7fd fe28 	bl	8007dd2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a182:	4b0c      	ldr	r3, [pc, #48]	@ (800a1b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	68ba      	ldr	r2, [r7, #8]
 800a188:	429a      	cmp	r2, r3
 800a18a:	d202      	bcs.n	800a192 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a18c:	4a09      	ldr	r2, [pc, #36]	@ (800a1b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	6013      	str	r3, [r2, #0]
}
 800a192:	bf00      	nop
 800a194:	3710      	adds	r7, #16
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}
 800a19a:	bf00      	nop
 800a19c:	2000080c 	.word	0x2000080c
 800a1a0:	20000708 	.word	0x20000708
 800a1a4:	20000810 	.word	0x20000810
 800a1a8:	200007f4 	.word	0x200007f4
 800a1ac:	200007c4 	.word	0x200007c4
 800a1b0:	200007c0 	.word	0x200007c0
 800a1b4:	20000828 	.word	0x20000828

0800a1b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b085      	sub	sp, #20
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	60f8      	str	r0, [r7, #12]
 800a1c0:	60b9      	str	r1, [r7, #8]
 800a1c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	3b04      	subs	r3, #4
 800a1c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a1d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	3b04      	subs	r3, #4
 800a1d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	f023 0201 	bic.w	r2, r3, #1
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	3b04      	subs	r3, #4
 800a1e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a1e8:	4a0c      	ldr	r2, [pc, #48]	@ (800a21c <pxPortInitialiseStack+0x64>)
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	3b14      	subs	r3, #20
 800a1f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a1f4:	687a      	ldr	r2, [r7, #4]
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	3b04      	subs	r3, #4
 800a1fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	f06f 0202 	mvn.w	r2, #2
 800a206:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	3b20      	subs	r3, #32
 800a20c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a20e:	68fb      	ldr	r3, [r7, #12]
}
 800a210:	4618      	mov	r0, r3
 800a212:	3714      	adds	r7, #20
 800a214:	46bd      	mov	sp, r7
 800a216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21a:	4770      	bx	lr
 800a21c:	0800a221 	.word	0x0800a221

0800a220 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a220:	b480      	push	{r7}
 800a222:	b085      	sub	sp, #20
 800a224:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a226:	2300      	movs	r3, #0
 800a228:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a22a:	4b13      	ldr	r3, [pc, #76]	@ (800a278 <prvTaskExitError+0x58>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a232:	d00b      	beq.n	800a24c <prvTaskExitError+0x2c>
	__asm volatile
 800a234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a238:	f383 8811 	msr	BASEPRI, r3
 800a23c:	f3bf 8f6f 	isb	sy
 800a240:	f3bf 8f4f 	dsb	sy
 800a244:	60fb      	str	r3, [r7, #12]
}
 800a246:	bf00      	nop
 800a248:	bf00      	nop
 800a24a:	e7fd      	b.n	800a248 <prvTaskExitError+0x28>
	__asm volatile
 800a24c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a250:	f383 8811 	msr	BASEPRI, r3
 800a254:	f3bf 8f6f 	isb	sy
 800a258:	f3bf 8f4f 	dsb	sy
 800a25c:	60bb      	str	r3, [r7, #8]
}
 800a25e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a260:	bf00      	nop
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d0fc      	beq.n	800a262 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a268:	bf00      	nop
 800a26a:	bf00      	nop
 800a26c:	3714      	adds	r7, #20
 800a26e:	46bd      	mov	sp, r7
 800a270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a274:	4770      	bx	lr
 800a276:	bf00      	nop
 800a278:	200000cc 	.word	0x200000cc
 800a27c:	00000000 	.word	0x00000000

0800a280 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a280:	4b07      	ldr	r3, [pc, #28]	@ (800a2a0 <pxCurrentTCBConst2>)
 800a282:	6819      	ldr	r1, [r3, #0]
 800a284:	6808      	ldr	r0, [r1, #0]
 800a286:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a28a:	f380 8809 	msr	PSP, r0
 800a28e:	f3bf 8f6f 	isb	sy
 800a292:	f04f 0000 	mov.w	r0, #0
 800a296:	f380 8811 	msr	BASEPRI, r0
 800a29a:	4770      	bx	lr
 800a29c:	f3af 8000 	nop.w

0800a2a0 <pxCurrentTCBConst2>:
 800a2a0:	20000708 	.word	0x20000708
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a2a4:	bf00      	nop
 800a2a6:	bf00      	nop

0800a2a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a2a8:	4808      	ldr	r0, [pc, #32]	@ (800a2cc <prvPortStartFirstTask+0x24>)
 800a2aa:	6800      	ldr	r0, [r0, #0]
 800a2ac:	6800      	ldr	r0, [r0, #0]
 800a2ae:	f380 8808 	msr	MSP, r0
 800a2b2:	f04f 0000 	mov.w	r0, #0
 800a2b6:	f380 8814 	msr	CONTROL, r0
 800a2ba:	b662      	cpsie	i
 800a2bc:	b661      	cpsie	f
 800a2be:	f3bf 8f4f 	dsb	sy
 800a2c2:	f3bf 8f6f 	isb	sy
 800a2c6:	df00      	svc	0
 800a2c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a2ca:	bf00      	nop
 800a2cc:	e000ed08 	.word	0xe000ed08

0800a2d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b086      	sub	sp, #24
 800a2d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a2d6:	4b47      	ldr	r3, [pc, #284]	@ (800a3f4 <xPortStartScheduler+0x124>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	4a47      	ldr	r2, [pc, #284]	@ (800a3f8 <xPortStartScheduler+0x128>)
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d10b      	bne.n	800a2f8 <xPortStartScheduler+0x28>
	__asm volatile
 800a2e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2e4:	f383 8811 	msr	BASEPRI, r3
 800a2e8:	f3bf 8f6f 	isb	sy
 800a2ec:	f3bf 8f4f 	dsb	sy
 800a2f0:	613b      	str	r3, [r7, #16]
}
 800a2f2:	bf00      	nop
 800a2f4:	bf00      	nop
 800a2f6:	e7fd      	b.n	800a2f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a2f8:	4b3e      	ldr	r3, [pc, #248]	@ (800a3f4 <xPortStartScheduler+0x124>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	4a3f      	ldr	r2, [pc, #252]	@ (800a3fc <xPortStartScheduler+0x12c>)
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d10b      	bne.n	800a31a <xPortStartScheduler+0x4a>
	__asm volatile
 800a302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a306:	f383 8811 	msr	BASEPRI, r3
 800a30a:	f3bf 8f6f 	isb	sy
 800a30e:	f3bf 8f4f 	dsb	sy
 800a312:	60fb      	str	r3, [r7, #12]
}
 800a314:	bf00      	nop
 800a316:	bf00      	nop
 800a318:	e7fd      	b.n	800a316 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a31a:	4b39      	ldr	r3, [pc, #228]	@ (800a400 <xPortStartScheduler+0x130>)
 800a31c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	781b      	ldrb	r3, [r3, #0]
 800a322:	b2db      	uxtb	r3, r3
 800a324:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a326:	697b      	ldr	r3, [r7, #20]
 800a328:	22ff      	movs	r2, #255	@ 0xff
 800a32a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a32c:	697b      	ldr	r3, [r7, #20]
 800a32e:	781b      	ldrb	r3, [r3, #0]
 800a330:	b2db      	uxtb	r3, r3
 800a332:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a334:	78fb      	ldrb	r3, [r7, #3]
 800a336:	b2db      	uxtb	r3, r3
 800a338:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a33c:	b2da      	uxtb	r2, r3
 800a33e:	4b31      	ldr	r3, [pc, #196]	@ (800a404 <xPortStartScheduler+0x134>)
 800a340:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a342:	4b31      	ldr	r3, [pc, #196]	@ (800a408 <xPortStartScheduler+0x138>)
 800a344:	2207      	movs	r2, #7
 800a346:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a348:	e009      	b.n	800a35e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a34a:	4b2f      	ldr	r3, [pc, #188]	@ (800a408 <xPortStartScheduler+0x138>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	3b01      	subs	r3, #1
 800a350:	4a2d      	ldr	r2, [pc, #180]	@ (800a408 <xPortStartScheduler+0x138>)
 800a352:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a354:	78fb      	ldrb	r3, [r7, #3]
 800a356:	b2db      	uxtb	r3, r3
 800a358:	005b      	lsls	r3, r3, #1
 800a35a:	b2db      	uxtb	r3, r3
 800a35c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a35e:	78fb      	ldrb	r3, [r7, #3]
 800a360:	b2db      	uxtb	r3, r3
 800a362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a366:	2b80      	cmp	r3, #128	@ 0x80
 800a368:	d0ef      	beq.n	800a34a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a36a:	4b27      	ldr	r3, [pc, #156]	@ (800a408 <xPortStartScheduler+0x138>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f1c3 0307 	rsb	r3, r3, #7
 800a372:	2b04      	cmp	r3, #4
 800a374:	d00b      	beq.n	800a38e <xPortStartScheduler+0xbe>
	__asm volatile
 800a376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a37a:	f383 8811 	msr	BASEPRI, r3
 800a37e:	f3bf 8f6f 	isb	sy
 800a382:	f3bf 8f4f 	dsb	sy
 800a386:	60bb      	str	r3, [r7, #8]
}
 800a388:	bf00      	nop
 800a38a:	bf00      	nop
 800a38c:	e7fd      	b.n	800a38a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a38e:	4b1e      	ldr	r3, [pc, #120]	@ (800a408 <xPortStartScheduler+0x138>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	021b      	lsls	r3, r3, #8
 800a394:	4a1c      	ldr	r2, [pc, #112]	@ (800a408 <xPortStartScheduler+0x138>)
 800a396:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a398:	4b1b      	ldr	r3, [pc, #108]	@ (800a408 <xPortStartScheduler+0x138>)
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a3a0:	4a19      	ldr	r2, [pc, #100]	@ (800a408 <xPortStartScheduler+0x138>)
 800a3a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	b2da      	uxtb	r2, r3
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a3ac:	4b17      	ldr	r3, [pc, #92]	@ (800a40c <xPortStartScheduler+0x13c>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	4a16      	ldr	r2, [pc, #88]	@ (800a40c <xPortStartScheduler+0x13c>)
 800a3b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a3b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a3b8:	4b14      	ldr	r3, [pc, #80]	@ (800a40c <xPortStartScheduler+0x13c>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	4a13      	ldr	r2, [pc, #76]	@ (800a40c <xPortStartScheduler+0x13c>)
 800a3be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a3c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a3c4:	f000 f8da 	bl	800a57c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a3c8:	4b11      	ldr	r3, [pc, #68]	@ (800a410 <xPortStartScheduler+0x140>)
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a3ce:	f000 f8f9 	bl	800a5c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a3d2:	4b10      	ldr	r3, [pc, #64]	@ (800a414 <xPortStartScheduler+0x144>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	4a0f      	ldr	r2, [pc, #60]	@ (800a414 <xPortStartScheduler+0x144>)
 800a3d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a3dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a3de:	f7ff ff63 	bl	800a2a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a3e2:	f7ff f851 	bl	8009488 <vTaskSwitchContext>
	prvTaskExitError();
 800a3e6:	f7ff ff1b 	bl	800a220 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a3ea:	2300      	movs	r3, #0
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	3718      	adds	r7, #24
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}
 800a3f4:	e000ed00 	.word	0xe000ed00
 800a3f8:	410fc271 	.word	0x410fc271
 800a3fc:	410fc270 	.word	0x410fc270
 800a400:	e000e400 	.word	0xe000e400
 800a404:	2000083c 	.word	0x2000083c
 800a408:	20000840 	.word	0x20000840
 800a40c:	e000ed20 	.word	0xe000ed20
 800a410:	200000cc 	.word	0x200000cc
 800a414:	e000ef34 	.word	0xe000ef34

0800a418 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a418:	b480      	push	{r7}
 800a41a:	b083      	sub	sp, #12
 800a41c:	af00      	add	r7, sp, #0
	__asm volatile
 800a41e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a422:	f383 8811 	msr	BASEPRI, r3
 800a426:	f3bf 8f6f 	isb	sy
 800a42a:	f3bf 8f4f 	dsb	sy
 800a42e:	607b      	str	r3, [r7, #4]
}
 800a430:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a432:	4b10      	ldr	r3, [pc, #64]	@ (800a474 <vPortEnterCritical+0x5c>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	3301      	adds	r3, #1
 800a438:	4a0e      	ldr	r2, [pc, #56]	@ (800a474 <vPortEnterCritical+0x5c>)
 800a43a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a43c:	4b0d      	ldr	r3, [pc, #52]	@ (800a474 <vPortEnterCritical+0x5c>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	2b01      	cmp	r3, #1
 800a442:	d110      	bne.n	800a466 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a444:	4b0c      	ldr	r3, [pc, #48]	@ (800a478 <vPortEnterCritical+0x60>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	b2db      	uxtb	r3, r3
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d00b      	beq.n	800a466 <vPortEnterCritical+0x4e>
	__asm volatile
 800a44e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a452:	f383 8811 	msr	BASEPRI, r3
 800a456:	f3bf 8f6f 	isb	sy
 800a45a:	f3bf 8f4f 	dsb	sy
 800a45e:	603b      	str	r3, [r7, #0]
}
 800a460:	bf00      	nop
 800a462:	bf00      	nop
 800a464:	e7fd      	b.n	800a462 <vPortEnterCritical+0x4a>
	}
}
 800a466:	bf00      	nop
 800a468:	370c      	adds	r7, #12
 800a46a:	46bd      	mov	sp, r7
 800a46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a470:	4770      	bx	lr
 800a472:	bf00      	nop
 800a474:	200000cc 	.word	0x200000cc
 800a478:	e000ed04 	.word	0xe000ed04

0800a47c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a47c:	b480      	push	{r7}
 800a47e:	b083      	sub	sp, #12
 800a480:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a482:	4b12      	ldr	r3, [pc, #72]	@ (800a4cc <vPortExitCritical+0x50>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d10b      	bne.n	800a4a2 <vPortExitCritical+0x26>
	__asm volatile
 800a48a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a48e:	f383 8811 	msr	BASEPRI, r3
 800a492:	f3bf 8f6f 	isb	sy
 800a496:	f3bf 8f4f 	dsb	sy
 800a49a:	607b      	str	r3, [r7, #4]
}
 800a49c:	bf00      	nop
 800a49e:	bf00      	nop
 800a4a0:	e7fd      	b.n	800a49e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a4a2:	4b0a      	ldr	r3, [pc, #40]	@ (800a4cc <vPortExitCritical+0x50>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	3b01      	subs	r3, #1
 800a4a8:	4a08      	ldr	r2, [pc, #32]	@ (800a4cc <vPortExitCritical+0x50>)
 800a4aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a4ac:	4b07      	ldr	r3, [pc, #28]	@ (800a4cc <vPortExitCritical+0x50>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d105      	bne.n	800a4c0 <vPortExitCritical+0x44>
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	f383 8811 	msr	BASEPRI, r3
}
 800a4be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a4c0:	bf00      	nop
 800a4c2:	370c      	adds	r7, #12
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ca:	4770      	bx	lr
 800a4cc:	200000cc 	.word	0x200000cc

0800a4d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a4d0:	f3ef 8009 	mrs	r0, PSP
 800a4d4:	f3bf 8f6f 	isb	sy
 800a4d8:	4b15      	ldr	r3, [pc, #84]	@ (800a530 <pxCurrentTCBConst>)
 800a4da:	681a      	ldr	r2, [r3, #0]
 800a4dc:	f01e 0f10 	tst.w	lr, #16
 800a4e0:	bf08      	it	eq
 800a4e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a4e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4ea:	6010      	str	r0, [r2, #0]
 800a4ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a4f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a4f4:	f380 8811 	msr	BASEPRI, r0
 800a4f8:	f3bf 8f4f 	dsb	sy
 800a4fc:	f3bf 8f6f 	isb	sy
 800a500:	f7fe ffc2 	bl	8009488 <vTaskSwitchContext>
 800a504:	f04f 0000 	mov.w	r0, #0
 800a508:	f380 8811 	msr	BASEPRI, r0
 800a50c:	bc09      	pop	{r0, r3}
 800a50e:	6819      	ldr	r1, [r3, #0]
 800a510:	6808      	ldr	r0, [r1, #0]
 800a512:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a516:	f01e 0f10 	tst.w	lr, #16
 800a51a:	bf08      	it	eq
 800a51c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a520:	f380 8809 	msr	PSP, r0
 800a524:	f3bf 8f6f 	isb	sy
 800a528:	4770      	bx	lr
 800a52a:	bf00      	nop
 800a52c:	f3af 8000 	nop.w

0800a530 <pxCurrentTCBConst>:
 800a530:	20000708 	.word	0x20000708
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a534:	bf00      	nop
 800a536:	bf00      	nop

0800a538 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b082      	sub	sp, #8
 800a53c:	af00      	add	r7, sp, #0
	__asm volatile
 800a53e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a542:	f383 8811 	msr	BASEPRI, r3
 800a546:	f3bf 8f6f 	isb	sy
 800a54a:	f3bf 8f4f 	dsb	sy
 800a54e:	607b      	str	r3, [r7, #4]
}
 800a550:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a552:	f7fe fedf 	bl	8009314 <xTaskIncrementTick>
 800a556:	4603      	mov	r3, r0
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d003      	beq.n	800a564 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a55c:	4b06      	ldr	r3, [pc, #24]	@ (800a578 <SysTick_Handler+0x40>)
 800a55e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a562:	601a      	str	r2, [r3, #0]
 800a564:	2300      	movs	r3, #0
 800a566:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	f383 8811 	msr	BASEPRI, r3
}
 800a56e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a570:	bf00      	nop
 800a572:	3708      	adds	r7, #8
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}
 800a578:	e000ed04 	.word	0xe000ed04

0800a57c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a57c:	b480      	push	{r7}
 800a57e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a580:	4b0b      	ldr	r3, [pc, #44]	@ (800a5b0 <vPortSetupTimerInterrupt+0x34>)
 800a582:	2200      	movs	r2, #0
 800a584:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a586:	4b0b      	ldr	r3, [pc, #44]	@ (800a5b4 <vPortSetupTimerInterrupt+0x38>)
 800a588:	2200      	movs	r2, #0
 800a58a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a58c:	4b0a      	ldr	r3, [pc, #40]	@ (800a5b8 <vPortSetupTimerInterrupt+0x3c>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	4a0a      	ldr	r2, [pc, #40]	@ (800a5bc <vPortSetupTimerInterrupt+0x40>)
 800a592:	fba2 2303 	umull	r2, r3, r2, r3
 800a596:	099b      	lsrs	r3, r3, #6
 800a598:	4a09      	ldr	r2, [pc, #36]	@ (800a5c0 <vPortSetupTimerInterrupt+0x44>)
 800a59a:	3b01      	subs	r3, #1
 800a59c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a59e:	4b04      	ldr	r3, [pc, #16]	@ (800a5b0 <vPortSetupTimerInterrupt+0x34>)
 800a5a0:	2207      	movs	r2, #7
 800a5a2:	601a      	str	r2, [r3, #0]
}
 800a5a4:	bf00      	nop
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ac:	4770      	bx	lr
 800a5ae:	bf00      	nop
 800a5b0:	e000e010 	.word	0xe000e010
 800a5b4:	e000e018 	.word	0xe000e018
 800a5b8:	200000c0 	.word	0x200000c0
 800a5bc:	10624dd3 	.word	0x10624dd3
 800a5c0:	e000e014 	.word	0xe000e014

0800a5c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a5c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a5d4 <vPortEnableVFP+0x10>
 800a5c8:	6801      	ldr	r1, [r0, #0]
 800a5ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a5ce:	6001      	str	r1, [r0, #0]
 800a5d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a5d2:	bf00      	nop
 800a5d4:	e000ed88 	.word	0xe000ed88

0800a5d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a5d8:	b480      	push	{r7}
 800a5da:	b085      	sub	sp, #20
 800a5dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a5de:	f3ef 8305 	mrs	r3, IPSR
 800a5e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	2b0f      	cmp	r3, #15
 800a5e8:	d915      	bls.n	800a616 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a5ea:	4a18      	ldr	r2, [pc, #96]	@ (800a64c <vPortValidateInterruptPriority+0x74>)
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	4413      	add	r3, r2
 800a5f0:	781b      	ldrb	r3, [r3, #0]
 800a5f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a5f4:	4b16      	ldr	r3, [pc, #88]	@ (800a650 <vPortValidateInterruptPriority+0x78>)
 800a5f6:	781b      	ldrb	r3, [r3, #0]
 800a5f8:	7afa      	ldrb	r2, [r7, #11]
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	d20b      	bcs.n	800a616 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a5fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a602:	f383 8811 	msr	BASEPRI, r3
 800a606:	f3bf 8f6f 	isb	sy
 800a60a:	f3bf 8f4f 	dsb	sy
 800a60e:	607b      	str	r3, [r7, #4]
}
 800a610:	bf00      	nop
 800a612:	bf00      	nop
 800a614:	e7fd      	b.n	800a612 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a616:	4b0f      	ldr	r3, [pc, #60]	@ (800a654 <vPortValidateInterruptPriority+0x7c>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a61e:	4b0e      	ldr	r3, [pc, #56]	@ (800a658 <vPortValidateInterruptPriority+0x80>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	429a      	cmp	r2, r3
 800a624:	d90b      	bls.n	800a63e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a62a:	f383 8811 	msr	BASEPRI, r3
 800a62e:	f3bf 8f6f 	isb	sy
 800a632:	f3bf 8f4f 	dsb	sy
 800a636:	603b      	str	r3, [r7, #0]
}
 800a638:	bf00      	nop
 800a63a:	bf00      	nop
 800a63c:	e7fd      	b.n	800a63a <vPortValidateInterruptPriority+0x62>
	}
 800a63e:	bf00      	nop
 800a640:	3714      	adds	r7, #20
 800a642:	46bd      	mov	sp, r7
 800a644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a648:	4770      	bx	lr
 800a64a:	bf00      	nop
 800a64c:	e000e3f0 	.word	0xe000e3f0
 800a650:	2000083c 	.word	0x2000083c
 800a654:	e000ed0c 	.word	0xe000ed0c
 800a658:	20000840 	.word	0x20000840

0800a65c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b08a      	sub	sp, #40	@ 0x28
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a664:	2300      	movs	r3, #0
 800a666:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a668:	f7fe fd98 	bl	800919c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a66c:	4b5c      	ldr	r3, [pc, #368]	@ (800a7e0 <pvPortMalloc+0x184>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d101      	bne.n	800a678 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a674:	f000 f924 	bl	800a8c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a678:	4b5a      	ldr	r3, [pc, #360]	@ (800a7e4 <pvPortMalloc+0x188>)
 800a67a:	681a      	ldr	r2, [r3, #0]
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	4013      	ands	r3, r2
 800a680:	2b00      	cmp	r3, #0
 800a682:	f040 8095 	bne.w	800a7b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d01e      	beq.n	800a6ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a68c:	2208      	movs	r2, #8
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	4413      	add	r3, r2
 800a692:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	f003 0307 	and.w	r3, r3, #7
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d015      	beq.n	800a6ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f023 0307 	bic.w	r3, r3, #7
 800a6a4:	3308      	adds	r3, #8
 800a6a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f003 0307 	and.w	r3, r3, #7
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d00b      	beq.n	800a6ca <pvPortMalloc+0x6e>
	__asm volatile
 800a6b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6b6:	f383 8811 	msr	BASEPRI, r3
 800a6ba:	f3bf 8f6f 	isb	sy
 800a6be:	f3bf 8f4f 	dsb	sy
 800a6c2:	617b      	str	r3, [r7, #20]
}
 800a6c4:	bf00      	nop
 800a6c6:	bf00      	nop
 800a6c8:	e7fd      	b.n	800a6c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d06f      	beq.n	800a7b0 <pvPortMalloc+0x154>
 800a6d0:	4b45      	ldr	r3, [pc, #276]	@ (800a7e8 <pvPortMalloc+0x18c>)
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	687a      	ldr	r2, [r7, #4]
 800a6d6:	429a      	cmp	r2, r3
 800a6d8:	d86a      	bhi.n	800a7b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a6da:	4b44      	ldr	r3, [pc, #272]	@ (800a7ec <pvPortMalloc+0x190>)
 800a6dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a6de:	4b43      	ldr	r3, [pc, #268]	@ (800a7ec <pvPortMalloc+0x190>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a6e4:	e004      	b.n	800a6f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a6e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a6ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a6f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6f2:	685b      	ldr	r3, [r3, #4]
 800a6f4:	687a      	ldr	r2, [r7, #4]
 800a6f6:	429a      	cmp	r2, r3
 800a6f8:	d903      	bls.n	800a702 <pvPortMalloc+0xa6>
 800a6fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d1f1      	bne.n	800a6e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a702:	4b37      	ldr	r3, [pc, #220]	@ (800a7e0 <pvPortMalloc+0x184>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a708:	429a      	cmp	r2, r3
 800a70a:	d051      	beq.n	800a7b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a70c:	6a3b      	ldr	r3, [r7, #32]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	2208      	movs	r2, #8
 800a712:	4413      	add	r3, r2
 800a714:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a718:	681a      	ldr	r2, [r3, #0]
 800a71a:	6a3b      	ldr	r3, [r7, #32]
 800a71c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a71e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a720:	685a      	ldr	r2, [r3, #4]
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	1ad2      	subs	r2, r2, r3
 800a726:	2308      	movs	r3, #8
 800a728:	005b      	lsls	r3, r3, #1
 800a72a:	429a      	cmp	r2, r3
 800a72c:	d920      	bls.n	800a770 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a72e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	4413      	add	r3, r2
 800a734:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a736:	69bb      	ldr	r3, [r7, #24]
 800a738:	f003 0307 	and.w	r3, r3, #7
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d00b      	beq.n	800a758 <pvPortMalloc+0xfc>
	__asm volatile
 800a740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a744:	f383 8811 	msr	BASEPRI, r3
 800a748:	f3bf 8f6f 	isb	sy
 800a74c:	f3bf 8f4f 	dsb	sy
 800a750:	613b      	str	r3, [r7, #16]
}
 800a752:	bf00      	nop
 800a754:	bf00      	nop
 800a756:	e7fd      	b.n	800a754 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a75a:	685a      	ldr	r2, [r3, #4]
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	1ad2      	subs	r2, r2, r3
 800a760:	69bb      	ldr	r3, [r7, #24]
 800a762:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a766:	687a      	ldr	r2, [r7, #4]
 800a768:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a76a:	69b8      	ldr	r0, [r7, #24]
 800a76c:	f000 f90a 	bl	800a984 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a770:	4b1d      	ldr	r3, [pc, #116]	@ (800a7e8 <pvPortMalloc+0x18c>)
 800a772:	681a      	ldr	r2, [r3, #0]
 800a774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a776:	685b      	ldr	r3, [r3, #4]
 800a778:	1ad3      	subs	r3, r2, r3
 800a77a:	4a1b      	ldr	r2, [pc, #108]	@ (800a7e8 <pvPortMalloc+0x18c>)
 800a77c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a77e:	4b1a      	ldr	r3, [pc, #104]	@ (800a7e8 <pvPortMalloc+0x18c>)
 800a780:	681a      	ldr	r2, [r3, #0]
 800a782:	4b1b      	ldr	r3, [pc, #108]	@ (800a7f0 <pvPortMalloc+0x194>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	429a      	cmp	r2, r3
 800a788:	d203      	bcs.n	800a792 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a78a:	4b17      	ldr	r3, [pc, #92]	@ (800a7e8 <pvPortMalloc+0x18c>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	4a18      	ldr	r2, [pc, #96]	@ (800a7f0 <pvPortMalloc+0x194>)
 800a790:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a794:	685a      	ldr	r2, [r3, #4]
 800a796:	4b13      	ldr	r3, [pc, #76]	@ (800a7e4 <pvPortMalloc+0x188>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	431a      	orrs	r2, r3
 800a79c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a79e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a7a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a7a6:	4b13      	ldr	r3, [pc, #76]	@ (800a7f4 <pvPortMalloc+0x198>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	3301      	adds	r3, #1
 800a7ac:	4a11      	ldr	r2, [pc, #68]	@ (800a7f4 <pvPortMalloc+0x198>)
 800a7ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a7b0:	f7fe fd02 	bl	80091b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a7b4:	69fb      	ldr	r3, [r7, #28]
 800a7b6:	f003 0307 	and.w	r3, r3, #7
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d00b      	beq.n	800a7d6 <pvPortMalloc+0x17a>
	__asm volatile
 800a7be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7c2:	f383 8811 	msr	BASEPRI, r3
 800a7c6:	f3bf 8f6f 	isb	sy
 800a7ca:	f3bf 8f4f 	dsb	sy
 800a7ce:	60fb      	str	r3, [r7, #12]
}
 800a7d0:	bf00      	nop
 800a7d2:	bf00      	nop
 800a7d4:	e7fd      	b.n	800a7d2 <pvPortMalloc+0x176>
	return pvReturn;
 800a7d6:	69fb      	ldr	r3, [r7, #28]
}
 800a7d8:	4618      	mov	r0, r3
 800a7da:	3728      	adds	r7, #40	@ 0x28
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd80      	pop	{r7, pc}
 800a7e0:	2000566c 	.word	0x2000566c
 800a7e4:	20005680 	.word	0x20005680
 800a7e8:	20005670 	.word	0x20005670
 800a7ec:	20005664 	.word	0x20005664
 800a7f0:	20005674 	.word	0x20005674
 800a7f4:	20005678 	.word	0x20005678

0800a7f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b086      	sub	sp, #24
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d04f      	beq.n	800a8aa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a80a:	2308      	movs	r3, #8
 800a80c:	425b      	negs	r3, r3
 800a80e:	697a      	ldr	r2, [r7, #20]
 800a810:	4413      	add	r3, r2
 800a812:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a814:	697b      	ldr	r3, [r7, #20]
 800a816:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a818:	693b      	ldr	r3, [r7, #16]
 800a81a:	685a      	ldr	r2, [r3, #4]
 800a81c:	4b25      	ldr	r3, [pc, #148]	@ (800a8b4 <vPortFree+0xbc>)
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	4013      	ands	r3, r2
 800a822:	2b00      	cmp	r3, #0
 800a824:	d10b      	bne.n	800a83e <vPortFree+0x46>
	__asm volatile
 800a826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a82a:	f383 8811 	msr	BASEPRI, r3
 800a82e:	f3bf 8f6f 	isb	sy
 800a832:	f3bf 8f4f 	dsb	sy
 800a836:	60fb      	str	r3, [r7, #12]
}
 800a838:	bf00      	nop
 800a83a:	bf00      	nop
 800a83c:	e7fd      	b.n	800a83a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a83e:	693b      	ldr	r3, [r7, #16]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d00b      	beq.n	800a85e <vPortFree+0x66>
	__asm volatile
 800a846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a84a:	f383 8811 	msr	BASEPRI, r3
 800a84e:	f3bf 8f6f 	isb	sy
 800a852:	f3bf 8f4f 	dsb	sy
 800a856:	60bb      	str	r3, [r7, #8]
}
 800a858:	bf00      	nop
 800a85a:	bf00      	nop
 800a85c:	e7fd      	b.n	800a85a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a85e:	693b      	ldr	r3, [r7, #16]
 800a860:	685a      	ldr	r2, [r3, #4]
 800a862:	4b14      	ldr	r3, [pc, #80]	@ (800a8b4 <vPortFree+0xbc>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	4013      	ands	r3, r2
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d01e      	beq.n	800a8aa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a86c:	693b      	ldr	r3, [r7, #16]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d11a      	bne.n	800a8aa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a874:	693b      	ldr	r3, [r7, #16]
 800a876:	685a      	ldr	r2, [r3, #4]
 800a878:	4b0e      	ldr	r3, [pc, #56]	@ (800a8b4 <vPortFree+0xbc>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	43db      	mvns	r3, r3
 800a87e:	401a      	ands	r2, r3
 800a880:	693b      	ldr	r3, [r7, #16]
 800a882:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a884:	f7fe fc8a 	bl	800919c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a888:	693b      	ldr	r3, [r7, #16]
 800a88a:	685a      	ldr	r2, [r3, #4]
 800a88c:	4b0a      	ldr	r3, [pc, #40]	@ (800a8b8 <vPortFree+0xc0>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	4413      	add	r3, r2
 800a892:	4a09      	ldr	r2, [pc, #36]	@ (800a8b8 <vPortFree+0xc0>)
 800a894:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a896:	6938      	ldr	r0, [r7, #16]
 800a898:	f000 f874 	bl	800a984 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a89c:	4b07      	ldr	r3, [pc, #28]	@ (800a8bc <vPortFree+0xc4>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	3301      	adds	r3, #1
 800a8a2:	4a06      	ldr	r2, [pc, #24]	@ (800a8bc <vPortFree+0xc4>)
 800a8a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a8a6:	f7fe fc87 	bl	80091b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a8aa:	bf00      	nop
 800a8ac:	3718      	adds	r7, #24
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}
 800a8b2:	bf00      	nop
 800a8b4:	20005680 	.word	0x20005680
 800a8b8:	20005670 	.word	0x20005670
 800a8bc:	2000567c 	.word	0x2000567c

0800a8c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b085      	sub	sp, #20
 800a8c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a8c6:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800a8ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a8cc:	4b27      	ldr	r3, [pc, #156]	@ (800a96c <prvHeapInit+0xac>)
 800a8ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	f003 0307 	and.w	r3, r3, #7
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d00c      	beq.n	800a8f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	3307      	adds	r3, #7
 800a8de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	f023 0307 	bic.w	r3, r3, #7
 800a8e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a8e8:	68ba      	ldr	r2, [r7, #8]
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	1ad3      	subs	r3, r2, r3
 800a8ee:	4a1f      	ldr	r2, [pc, #124]	@ (800a96c <prvHeapInit+0xac>)
 800a8f0:	4413      	add	r3, r2
 800a8f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a8f8:	4a1d      	ldr	r2, [pc, #116]	@ (800a970 <prvHeapInit+0xb0>)
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a8fe:	4b1c      	ldr	r3, [pc, #112]	@ (800a970 <prvHeapInit+0xb0>)
 800a900:	2200      	movs	r2, #0
 800a902:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	68ba      	ldr	r2, [r7, #8]
 800a908:	4413      	add	r3, r2
 800a90a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a90c:	2208      	movs	r2, #8
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	1a9b      	subs	r3, r3, r2
 800a912:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	f023 0307 	bic.w	r3, r3, #7
 800a91a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	4a15      	ldr	r2, [pc, #84]	@ (800a974 <prvHeapInit+0xb4>)
 800a920:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a922:	4b14      	ldr	r3, [pc, #80]	@ (800a974 <prvHeapInit+0xb4>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	2200      	movs	r2, #0
 800a928:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a92a:	4b12      	ldr	r3, [pc, #72]	@ (800a974 <prvHeapInit+0xb4>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	2200      	movs	r2, #0
 800a930:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	68fa      	ldr	r2, [r7, #12]
 800a93a:	1ad2      	subs	r2, r2, r3
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a940:	4b0c      	ldr	r3, [pc, #48]	@ (800a974 <prvHeapInit+0xb4>)
 800a942:	681a      	ldr	r2, [r3, #0]
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	685b      	ldr	r3, [r3, #4]
 800a94c:	4a0a      	ldr	r2, [pc, #40]	@ (800a978 <prvHeapInit+0xb8>)
 800a94e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	685b      	ldr	r3, [r3, #4]
 800a954:	4a09      	ldr	r2, [pc, #36]	@ (800a97c <prvHeapInit+0xbc>)
 800a956:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a958:	4b09      	ldr	r3, [pc, #36]	@ (800a980 <prvHeapInit+0xc0>)
 800a95a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a95e:	601a      	str	r2, [r3, #0]
}
 800a960:	bf00      	nop
 800a962:	3714      	adds	r7, #20
 800a964:	46bd      	mov	sp, r7
 800a966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96a:	4770      	bx	lr
 800a96c:	20000844 	.word	0x20000844
 800a970:	20005664 	.word	0x20005664
 800a974:	2000566c 	.word	0x2000566c
 800a978:	20005674 	.word	0x20005674
 800a97c:	20005670 	.word	0x20005670
 800a980:	20005680 	.word	0x20005680

0800a984 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a984:	b480      	push	{r7}
 800a986:	b085      	sub	sp, #20
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a98c:	4b28      	ldr	r3, [pc, #160]	@ (800aa30 <prvInsertBlockIntoFreeList+0xac>)
 800a98e:	60fb      	str	r3, [r7, #12]
 800a990:	e002      	b.n	800a998 <prvInsertBlockIntoFreeList+0x14>
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	60fb      	str	r3, [r7, #12]
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	687a      	ldr	r2, [r7, #4]
 800a99e:	429a      	cmp	r2, r3
 800a9a0:	d8f7      	bhi.n	800a992 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	685b      	ldr	r3, [r3, #4]
 800a9aa:	68ba      	ldr	r2, [r7, #8]
 800a9ac:	4413      	add	r3, r2
 800a9ae:	687a      	ldr	r2, [r7, #4]
 800a9b0:	429a      	cmp	r2, r3
 800a9b2:	d108      	bne.n	800a9c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	685a      	ldr	r2, [r3, #4]
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	685b      	ldr	r3, [r3, #4]
 800a9bc:	441a      	add	r2, r3
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	685b      	ldr	r3, [r3, #4]
 800a9ce:	68ba      	ldr	r2, [r7, #8]
 800a9d0:	441a      	add	r2, r3
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	d118      	bne.n	800aa0c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	681a      	ldr	r2, [r3, #0]
 800a9de:	4b15      	ldr	r3, [pc, #84]	@ (800aa34 <prvInsertBlockIntoFreeList+0xb0>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	429a      	cmp	r2, r3
 800a9e4:	d00d      	beq.n	800aa02 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	685a      	ldr	r2, [r3, #4]
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	685b      	ldr	r3, [r3, #4]
 800a9f0:	441a      	add	r2, r3
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	681a      	ldr	r2, [r3, #0]
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	601a      	str	r2, [r3, #0]
 800aa00:	e008      	b.n	800aa14 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aa02:	4b0c      	ldr	r3, [pc, #48]	@ (800aa34 <prvInsertBlockIntoFreeList+0xb0>)
 800aa04:	681a      	ldr	r2, [r3, #0]
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	601a      	str	r2, [r3, #0]
 800aa0a:	e003      	b.n	800aa14 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	681a      	ldr	r2, [r3, #0]
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800aa14:	68fa      	ldr	r2, [r7, #12]
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	429a      	cmp	r2, r3
 800aa1a:	d002      	beq.n	800aa22 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	687a      	ldr	r2, [r7, #4]
 800aa20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa22:	bf00      	nop
 800aa24:	3714      	adds	r7, #20
 800aa26:	46bd      	mov	sp, r7
 800aa28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2c:	4770      	bx	lr
 800aa2e:	bf00      	nop
 800aa30:	20005664 	.word	0x20005664
 800aa34:	2000566c 	.word	0x2000566c

0800aa38 <vPortGetHeapStats>:
/*-----------------------------------------------------------*/

void vPortGetHeapStats( HeapStats_t *pxHeapStats )
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b086      	sub	sp, #24
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock;
size_t xBlocks = 0, xMaxSize = 0, xMinSize = portMAX_DELAY; /* portMAX_DELAY used as a portable way of getting the maximum value. */
 800aa40:	2300      	movs	r3, #0
 800aa42:	613b      	str	r3, [r7, #16]
 800aa44:	2300      	movs	r3, #0
 800aa46:	60fb      	str	r3, [r7, #12]
 800aa48:	f04f 33ff 	mov.w	r3, #4294967295
 800aa4c:	60bb      	str	r3, [r7, #8]

	vTaskSuspendAll();
 800aa4e:	f7fe fba5 	bl	800919c <vTaskSuspendAll>
	{
		pxBlock = xStart.pxNextFreeBlock;
 800aa52:	4b22      	ldr	r3, [pc, #136]	@ (800aadc <vPortGetHeapStats+0xa4>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	617b      	str	r3, [r7, #20]

		/* pxBlock will be NULL if the heap has not been initialised.  The heap
		is initialised automatically when the first allocation is made. */
		if( pxBlock != NULL )
 800aa58:	697b      	ldr	r3, [r7, #20]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d01a      	beq.n	800aa94 <vPortGetHeapStats+0x5c>
		{
			do
			{
				/* Increment the number of blocks and record the largest block seen
				so far. */
				xBlocks++;
 800aa5e:	693b      	ldr	r3, [r7, #16]
 800aa60:	3301      	adds	r3, #1
 800aa62:	613b      	str	r3, [r7, #16]

				if( pxBlock->xBlockSize > xMaxSize )
 800aa64:	697b      	ldr	r3, [r7, #20]
 800aa66:	685b      	ldr	r3, [r3, #4]
 800aa68:	68fa      	ldr	r2, [r7, #12]
 800aa6a:	429a      	cmp	r2, r3
 800aa6c:	d202      	bcs.n	800aa74 <vPortGetHeapStats+0x3c>
				{
					xMaxSize = pxBlock->xBlockSize;
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	685b      	ldr	r3, [r3, #4]
 800aa72:	60fb      	str	r3, [r7, #12]
				}

				if( pxBlock->xBlockSize < xMinSize )
 800aa74:	697b      	ldr	r3, [r7, #20]
 800aa76:	685b      	ldr	r3, [r3, #4]
 800aa78:	68ba      	ldr	r2, [r7, #8]
 800aa7a:	429a      	cmp	r2, r3
 800aa7c:	d902      	bls.n	800aa84 <vPortGetHeapStats+0x4c>
				{
					xMinSize = pxBlock->xBlockSize;
 800aa7e:	697b      	ldr	r3, [r7, #20]
 800aa80:	685b      	ldr	r3, [r3, #4]
 800aa82:	60bb      	str	r3, [r7, #8]
				}

				/* Move to the next block in the chain until the last block is
				reached. */
				pxBlock = pxBlock->pxNextFreeBlock;
 800aa84:	697b      	ldr	r3, [r7, #20]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	617b      	str	r3, [r7, #20]
			} while( pxBlock != pxEnd );
 800aa8a:	4b15      	ldr	r3, [pc, #84]	@ (800aae0 <vPortGetHeapStats+0xa8>)
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	697a      	ldr	r2, [r7, #20]
 800aa90:	429a      	cmp	r2, r3
 800aa92:	d1e4      	bne.n	800aa5e <vPortGetHeapStats+0x26>
		}
	}
	xTaskResumeAll();
 800aa94:	f7fe fb90 	bl	80091b8 <xTaskResumeAll>

	pxHeapStats->xSizeOfLargestFreeBlockInBytes = xMaxSize;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	68fa      	ldr	r2, [r7, #12]
 800aa9c:	605a      	str	r2, [r3, #4]
	pxHeapStats->xSizeOfSmallestFreeBlockInBytes = xMinSize;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	68ba      	ldr	r2, [r7, #8]
 800aaa2:	609a      	str	r2, [r3, #8]
	pxHeapStats->xNumberOfFreeBlocks = xBlocks;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	693a      	ldr	r2, [r7, #16]
 800aaa8:	60da      	str	r2, [r3, #12]

	taskENTER_CRITICAL();
 800aaaa:	f7ff fcb5 	bl	800a418 <vPortEnterCritical>
	{
		pxHeapStats->xAvailableHeapSpaceInBytes = xFreeBytesRemaining;
 800aaae:	4b0d      	ldr	r3, [pc, #52]	@ (800aae4 <vPortGetHeapStats+0xac>)
 800aab0:	681a      	ldr	r2, [r3, #0]
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	601a      	str	r2, [r3, #0]
		pxHeapStats->xNumberOfSuccessfulAllocations = xNumberOfSuccessfulAllocations;
 800aab6:	4b0c      	ldr	r3, [pc, #48]	@ (800aae8 <vPortGetHeapStats+0xb0>)
 800aab8:	681a      	ldr	r2, [r3, #0]
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	615a      	str	r2, [r3, #20]
		pxHeapStats->xNumberOfSuccessfulFrees = xNumberOfSuccessfulFrees;
 800aabe:	4b0b      	ldr	r3, [pc, #44]	@ (800aaec <vPortGetHeapStats+0xb4>)
 800aac0:	681a      	ldr	r2, [r3, #0]
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	619a      	str	r2, [r3, #24]
		pxHeapStats->xMinimumEverFreeBytesRemaining = xMinimumEverFreeBytesRemaining;
 800aac6:	4b0a      	ldr	r3, [pc, #40]	@ (800aaf0 <vPortGetHeapStats+0xb8>)
 800aac8:	681a      	ldr	r2, [r3, #0]
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	611a      	str	r2, [r3, #16]
	}
	taskEXIT_CRITICAL();
 800aace:	f7ff fcd5 	bl	800a47c <vPortExitCritical>
}
 800aad2:	bf00      	nop
 800aad4:	3718      	adds	r7, #24
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}
 800aada:	bf00      	nop
 800aadc:	20005664 	.word	0x20005664
 800aae0:	2000566c 	.word	0x2000566c
 800aae4:	20005670 	.word	0x20005670
 800aae8:	20005678 	.word	0x20005678
 800aaec:	2000567c 	.word	0x2000567c
 800aaf0:	20005674 	.word	0x20005674

0800aaf4 <__itoa>:
 800aaf4:	1e93      	subs	r3, r2, #2
 800aaf6:	2b22      	cmp	r3, #34	@ 0x22
 800aaf8:	b510      	push	{r4, lr}
 800aafa:	460c      	mov	r4, r1
 800aafc:	d904      	bls.n	800ab08 <__itoa+0x14>
 800aafe:	2300      	movs	r3, #0
 800ab00:	700b      	strb	r3, [r1, #0]
 800ab02:	461c      	mov	r4, r3
 800ab04:	4620      	mov	r0, r4
 800ab06:	bd10      	pop	{r4, pc}
 800ab08:	2a0a      	cmp	r2, #10
 800ab0a:	d109      	bne.n	800ab20 <__itoa+0x2c>
 800ab0c:	2800      	cmp	r0, #0
 800ab0e:	da07      	bge.n	800ab20 <__itoa+0x2c>
 800ab10:	232d      	movs	r3, #45	@ 0x2d
 800ab12:	700b      	strb	r3, [r1, #0]
 800ab14:	4240      	negs	r0, r0
 800ab16:	2101      	movs	r1, #1
 800ab18:	4421      	add	r1, r4
 800ab1a:	f000 f805 	bl	800ab28 <__utoa>
 800ab1e:	e7f1      	b.n	800ab04 <__itoa+0x10>
 800ab20:	2100      	movs	r1, #0
 800ab22:	e7f9      	b.n	800ab18 <__itoa+0x24>

0800ab24 <itoa>:
 800ab24:	f7ff bfe6 	b.w	800aaf4 <__itoa>

0800ab28 <__utoa>:
 800ab28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab2a:	4c1f      	ldr	r4, [pc, #124]	@ (800aba8 <__utoa+0x80>)
 800ab2c:	b08b      	sub	sp, #44	@ 0x2c
 800ab2e:	4605      	mov	r5, r0
 800ab30:	460b      	mov	r3, r1
 800ab32:	466e      	mov	r6, sp
 800ab34:	f104 0c20 	add.w	ip, r4, #32
 800ab38:	6820      	ldr	r0, [r4, #0]
 800ab3a:	6861      	ldr	r1, [r4, #4]
 800ab3c:	4637      	mov	r7, r6
 800ab3e:	c703      	stmia	r7!, {r0, r1}
 800ab40:	3408      	adds	r4, #8
 800ab42:	4564      	cmp	r4, ip
 800ab44:	463e      	mov	r6, r7
 800ab46:	d1f7      	bne.n	800ab38 <__utoa+0x10>
 800ab48:	7921      	ldrb	r1, [r4, #4]
 800ab4a:	7139      	strb	r1, [r7, #4]
 800ab4c:	1e91      	subs	r1, r2, #2
 800ab4e:	6820      	ldr	r0, [r4, #0]
 800ab50:	6038      	str	r0, [r7, #0]
 800ab52:	2922      	cmp	r1, #34	@ 0x22
 800ab54:	f04f 0100 	mov.w	r1, #0
 800ab58:	d904      	bls.n	800ab64 <__utoa+0x3c>
 800ab5a:	7019      	strb	r1, [r3, #0]
 800ab5c:	460b      	mov	r3, r1
 800ab5e:	4618      	mov	r0, r3
 800ab60:	b00b      	add	sp, #44	@ 0x2c
 800ab62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab64:	1e58      	subs	r0, r3, #1
 800ab66:	4684      	mov	ip, r0
 800ab68:	fbb5 f7f2 	udiv	r7, r5, r2
 800ab6c:	fb02 5617 	mls	r6, r2, r7, r5
 800ab70:	3628      	adds	r6, #40	@ 0x28
 800ab72:	446e      	add	r6, sp
 800ab74:	460c      	mov	r4, r1
 800ab76:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800ab7a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800ab7e:	462e      	mov	r6, r5
 800ab80:	42b2      	cmp	r2, r6
 800ab82:	f101 0101 	add.w	r1, r1, #1
 800ab86:	463d      	mov	r5, r7
 800ab88:	d9ee      	bls.n	800ab68 <__utoa+0x40>
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	545a      	strb	r2, [r3, r1]
 800ab8e:	1919      	adds	r1, r3, r4
 800ab90:	1aa5      	subs	r5, r4, r2
 800ab92:	42aa      	cmp	r2, r5
 800ab94:	dae3      	bge.n	800ab5e <__utoa+0x36>
 800ab96:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800ab9a:	780e      	ldrb	r6, [r1, #0]
 800ab9c:	7006      	strb	r6, [r0, #0]
 800ab9e:	3201      	adds	r2, #1
 800aba0:	f801 5901 	strb.w	r5, [r1], #-1
 800aba4:	e7f4      	b.n	800ab90 <__utoa+0x68>
 800aba6:	bf00      	nop
 800aba8:	0800e4e8 	.word	0x0800e4e8

0800abac <__cvt>:
 800abac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800abb0:	ec57 6b10 	vmov	r6, r7, d0
 800abb4:	2f00      	cmp	r7, #0
 800abb6:	460c      	mov	r4, r1
 800abb8:	4619      	mov	r1, r3
 800abba:	463b      	mov	r3, r7
 800abbc:	bfbb      	ittet	lt
 800abbe:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800abc2:	461f      	movlt	r7, r3
 800abc4:	2300      	movge	r3, #0
 800abc6:	232d      	movlt	r3, #45	@ 0x2d
 800abc8:	700b      	strb	r3, [r1, #0]
 800abca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800abcc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800abd0:	4691      	mov	r9, r2
 800abd2:	f023 0820 	bic.w	r8, r3, #32
 800abd6:	bfbc      	itt	lt
 800abd8:	4632      	movlt	r2, r6
 800abda:	4616      	movlt	r6, r2
 800abdc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800abe0:	d005      	beq.n	800abee <__cvt+0x42>
 800abe2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800abe6:	d100      	bne.n	800abea <__cvt+0x3e>
 800abe8:	3401      	adds	r4, #1
 800abea:	2102      	movs	r1, #2
 800abec:	e000      	b.n	800abf0 <__cvt+0x44>
 800abee:	2103      	movs	r1, #3
 800abf0:	ab03      	add	r3, sp, #12
 800abf2:	9301      	str	r3, [sp, #4]
 800abf4:	ab02      	add	r3, sp, #8
 800abf6:	9300      	str	r3, [sp, #0]
 800abf8:	ec47 6b10 	vmov	d0, r6, r7
 800abfc:	4653      	mov	r3, sl
 800abfe:	4622      	mov	r2, r4
 800ac00:	f000 ff5a 	bl	800bab8 <_dtoa_r>
 800ac04:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ac08:	4605      	mov	r5, r0
 800ac0a:	d119      	bne.n	800ac40 <__cvt+0x94>
 800ac0c:	f019 0f01 	tst.w	r9, #1
 800ac10:	d00e      	beq.n	800ac30 <__cvt+0x84>
 800ac12:	eb00 0904 	add.w	r9, r0, r4
 800ac16:	2200      	movs	r2, #0
 800ac18:	2300      	movs	r3, #0
 800ac1a:	4630      	mov	r0, r6
 800ac1c:	4639      	mov	r1, r7
 800ac1e:	f7f5 ff53 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac22:	b108      	cbz	r0, 800ac28 <__cvt+0x7c>
 800ac24:	f8cd 900c 	str.w	r9, [sp, #12]
 800ac28:	2230      	movs	r2, #48	@ 0x30
 800ac2a:	9b03      	ldr	r3, [sp, #12]
 800ac2c:	454b      	cmp	r3, r9
 800ac2e:	d31e      	bcc.n	800ac6e <__cvt+0xc2>
 800ac30:	9b03      	ldr	r3, [sp, #12]
 800ac32:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ac34:	1b5b      	subs	r3, r3, r5
 800ac36:	4628      	mov	r0, r5
 800ac38:	6013      	str	r3, [r2, #0]
 800ac3a:	b004      	add	sp, #16
 800ac3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac40:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ac44:	eb00 0904 	add.w	r9, r0, r4
 800ac48:	d1e5      	bne.n	800ac16 <__cvt+0x6a>
 800ac4a:	7803      	ldrb	r3, [r0, #0]
 800ac4c:	2b30      	cmp	r3, #48	@ 0x30
 800ac4e:	d10a      	bne.n	800ac66 <__cvt+0xba>
 800ac50:	2200      	movs	r2, #0
 800ac52:	2300      	movs	r3, #0
 800ac54:	4630      	mov	r0, r6
 800ac56:	4639      	mov	r1, r7
 800ac58:	f7f5 ff36 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac5c:	b918      	cbnz	r0, 800ac66 <__cvt+0xba>
 800ac5e:	f1c4 0401 	rsb	r4, r4, #1
 800ac62:	f8ca 4000 	str.w	r4, [sl]
 800ac66:	f8da 3000 	ldr.w	r3, [sl]
 800ac6a:	4499      	add	r9, r3
 800ac6c:	e7d3      	b.n	800ac16 <__cvt+0x6a>
 800ac6e:	1c59      	adds	r1, r3, #1
 800ac70:	9103      	str	r1, [sp, #12]
 800ac72:	701a      	strb	r2, [r3, #0]
 800ac74:	e7d9      	b.n	800ac2a <__cvt+0x7e>

0800ac76 <__exponent>:
 800ac76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac78:	2900      	cmp	r1, #0
 800ac7a:	bfba      	itte	lt
 800ac7c:	4249      	neglt	r1, r1
 800ac7e:	232d      	movlt	r3, #45	@ 0x2d
 800ac80:	232b      	movge	r3, #43	@ 0x2b
 800ac82:	2909      	cmp	r1, #9
 800ac84:	7002      	strb	r2, [r0, #0]
 800ac86:	7043      	strb	r3, [r0, #1]
 800ac88:	dd29      	ble.n	800acde <__exponent+0x68>
 800ac8a:	f10d 0307 	add.w	r3, sp, #7
 800ac8e:	461d      	mov	r5, r3
 800ac90:	270a      	movs	r7, #10
 800ac92:	461a      	mov	r2, r3
 800ac94:	fbb1 f6f7 	udiv	r6, r1, r7
 800ac98:	fb07 1416 	mls	r4, r7, r6, r1
 800ac9c:	3430      	adds	r4, #48	@ 0x30
 800ac9e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800aca2:	460c      	mov	r4, r1
 800aca4:	2c63      	cmp	r4, #99	@ 0x63
 800aca6:	f103 33ff 	add.w	r3, r3, #4294967295
 800acaa:	4631      	mov	r1, r6
 800acac:	dcf1      	bgt.n	800ac92 <__exponent+0x1c>
 800acae:	3130      	adds	r1, #48	@ 0x30
 800acb0:	1e94      	subs	r4, r2, #2
 800acb2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800acb6:	1c41      	adds	r1, r0, #1
 800acb8:	4623      	mov	r3, r4
 800acba:	42ab      	cmp	r3, r5
 800acbc:	d30a      	bcc.n	800acd4 <__exponent+0x5e>
 800acbe:	f10d 0309 	add.w	r3, sp, #9
 800acc2:	1a9b      	subs	r3, r3, r2
 800acc4:	42ac      	cmp	r4, r5
 800acc6:	bf88      	it	hi
 800acc8:	2300      	movhi	r3, #0
 800acca:	3302      	adds	r3, #2
 800accc:	4403      	add	r3, r0
 800acce:	1a18      	subs	r0, r3, r0
 800acd0:	b003      	add	sp, #12
 800acd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acd4:	f813 6b01 	ldrb.w	r6, [r3], #1
 800acd8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800acdc:	e7ed      	b.n	800acba <__exponent+0x44>
 800acde:	2330      	movs	r3, #48	@ 0x30
 800ace0:	3130      	adds	r1, #48	@ 0x30
 800ace2:	7083      	strb	r3, [r0, #2]
 800ace4:	70c1      	strb	r1, [r0, #3]
 800ace6:	1d03      	adds	r3, r0, #4
 800ace8:	e7f1      	b.n	800acce <__exponent+0x58>
	...

0800acec <_printf_float>:
 800acec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acf0:	b08d      	sub	sp, #52	@ 0x34
 800acf2:	460c      	mov	r4, r1
 800acf4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800acf8:	4616      	mov	r6, r2
 800acfa:	461f      	mov	r7, r3
 800acfc:	4605      	mov	r5, r0
 800acfe:	f000 fd6d 	bl	800b7dc <_localeconv_r>
 800ad02:	6803      	ldr	r3, [r0, #0]
 800ad04:	9304      	str	r3, [sp, #16]
 800ad06:	4618      	mov	r0, r3
 800ad08:	f7f5 fab2 	bl	8000270 <strlen>
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ad10:	f8d8 3000 	ldr.w	r3, [r8]
 800ad14:	9005      	str	r0, [sp, #20]
 800ad16:	3307      	adds	r3, #7
 800ad18:	f023 0307 	bic.w	r3, r3, #7
 800ad1c:	f103 0208 	add.w	r2, r3, #8
 800ad20:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ad24:	f8d4 b000 	ldr.w	fp, [r4]
 800ad28:	f8c8 2000 	str.w	r2, [r8]
 800ad2c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ad30:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ad34:	9307      	str	r3, [sp, #28]
 800ad36:	f8cd 8018 	str.w	r8, [sp, #24]
 800ad3a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ad3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ad42:	4b9c      	ldr	r3, [pc, #624]	@ (800afb4 <_printf_float+0x2c8>)
 800ad44:	f04f 32ff 	mov.w	r2, #4294967295
 800ad48:	f7f5 fef0 	bl	8000b2c <__aeabi_dcmpun>
 800ad4c:	bb70      	cbnz	r0, 800adac <_printf_float+0xc0>
 800ad4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ad52:	4b98      	ldr	r3, [pc, #608]	@ (800afb4 <_printf_float+0x2c8>)
 800ad54:	f04f 32ff 	mov.w	r2, #4294967295
 800ad58:	f7f5 feca 	bl	8000af0 <__aeabi_dcmple>
 800ad5c:	bb30      	cbnz	r0, 800adac <_printf_float+0xc0>
 800ad5e:	2200      	movs	r2, #0
 800ad60:	2300      	movs	r3, #0
 800ad62:	4640      	mov	r0, r8
 800ad64:	4649      	mov	r1, r9
 800ad66:	f7f5 feb9 	bl	8000adc <__aeabi_dcmplt>
 800ad6a:	b110      	cbz	r0, 800ad72 <_printf_float+0x86>
 800ad6c:	232d      	movs	r3, #45	@ 0x2d
 800ad6e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ad72:	4a91      	ldr	r2, [pc, #580]	@ (800afb8 <_printf_float+0x2cc>)
 800ad74:	4b91      	ldr	r3, [pc, #580]	@ (800afbc <_printf_float+0x2d0>)
 800ad76:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ad7a:	bf94      	ite	ls
 800ad7c:	4690      	movls	r8, r2
 800ad7e:	4698      	movhi	r8, r3
 800ad80:	2303      	movs	r3, #3
 800ad82:	6123      	str	r3, [r4, #16]
 800ad84:	f02b 0304 	bic.w	r3, fp, #4
 800ad88:	6023      	str	r3, [r4, #0]
 800ad8a:	f04f 0900 	mov.w	r9, #0
 800ad8e:	9700      	str	r7, [sp, #0]
 800ad90:	4633      	mov	r3, r6
 800ad92:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ad94:	4621      	mov	r1, r4
 800ad96:	4628      	mov	r0, r5
 800ad98:	f000 f9d2 	bl	800b140 <_printf_common>
 800ad9c:	3001      	adds	r0, #1
 800ad9e:	f040 808d 	bne.w	800aebc <_printf_float+0x1d0>
 800ada2:	f04f 30ff 	mov.w	r0, #4294967295
 800ada6:	b00d      	add	sp, #52	@ 0x34
 800ada8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adac:	4642      	mov	r2, r8
 800adae:	464b      	mov	r3, r9
 800adb0:	4640      	mov	r0, r8
 800adb2:	4649      	mov	r1, r9
 800adb4:	f7f5 feba 	bl	8000b2c <__aeabi_dcmpun>
 800adb8:	b140      	cbz	r0, 800adcc <_printf_float+0xe0>
 800adba:	464b      	mov	r3, r9
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	bfbc      	itt	lt
 800adc0:	232d      	movlt	r3, #45	@ 0x2d
 800adc2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800adc6:	4a7e      	ldr	r2, [pc, #504]	@ (800afc0 <_printf_float+0x2d4>)
 800adc8:	4b7e      	ldr	r3, [pc, #504]	@ (800afc4 <_printf_float+0x2d8>)
 800adca:	e7d4      	b.n	800ad76 <_printf_float+0x8a>
 800adcc:	6863      	ldr	r3, [r4, #4]
 800adce:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800add2:	9206      	str	r2, [sp, #24]
 800add4:	1c5a      	adds	r2, r3, #1
 800add6:	d13b      	bne.n	800ae50 <_printf_float+0x164>
 800add8:	2306      	movs	r3, #6
 800adda:	6063      	str	r3, [r4, #4]
 800addc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ade0:	2300      	movs	r3, #0
 800ade2:	6022      	str	r2, [r4, #0]
 800ade4:	9303      	str	r3, [sp, #12]
 800ade6:	ab0a      	add	r3, sp, #40	@ 0x28
 800ade8:	e9cd a301 	strd	sl, r3, [sp, #4]
 800adec:	ab09      	add	r3, sp, #36	@ 0x24
 800adee:	9300      	str	r3, [sp, #0]
 800adf0:	6861      	ldr	r1, [r4, #4]
 800adf2:	ec49 8b10 	vmov	d0, r8, r9
 800adf6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800adfa:	4628      	mov	r0, r5
 800adfc:	f7ff fed6 	bl	800abac <__cvt>
 800ae00:	9b06      	ldr	r3, [sp, #24]
 800ae02:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ae04:	2b47      	cmp	r3, #71	@ 0x47
 800ae06:	4680      	mov	r8, r0
 800ae08:	d129      	bne.n	800ae5e <_printf_float+0x172>
 800ae0a:	1cc8      	adds	r0, r1, #3
 800ae0c:	db02      	blt.n	800ae14 <_printf_float+0x128>
 800ae0e:	6863      	ldr	r3, [r4, #4]
 800ae10:	4299      	cmp	r1, r3
 800ae12:	dd41      	ble.n	800ae98 <_printf_float+0x1ac>
 800ae14:	f1aa 0a02 	sub.w	sl, sl, #2
 800ae18:	fa5f fa8a 	uxtb.w	sl, sl
 800ae1c:	3901      	subs	r1, #1
 800ae1e:	4652      	mov	r2, sl
 800ae20:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ae24:	9109      	str	r1, [sp, #36]	@ 0x24
 800ae26:	f7ff ff26 	bl	800ac76 <__exponent>
 800ae2a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ae2c:	1813      	adds	r3, r2, r0
 800ae2e:	2a01      	cmp	r2, #1
 800ae30:	4681      	mov	r9, r0
 800ae32:	6123      	str	r3, [r4, #16]
 800ae34:	dc02      	bgt.n	800ae3c <_printf_float+0x150>
 800ae36:	6822      	ldr	r2, [r4, #0]
 800ae38:	07d2      	lsls	r2, r2, #31
 800ae3a:	d501      	bpl.n	800ae40 <_printf_float+0x154>
 800ae3c:	3301      	adds	r3, #1
 800ae3e:	6123      	str	r3, [r4, #16]
 800ae40:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d0a2      	beq.n	800ad8e <_printf_float+0xa2>
 800ae48:	232d      	movs	r3, #45	@ 0x2d
 800ae4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae4e:	e79e      	b.n	800ad8e <_printf_float+0xa2>
 800ae50:	9a06      	ldr	r2, [sp, #24]
 800ae52:	2a47      	cmp	r2, #71	@ 0x47
 800ae54:	d1c2      	bne.n	800addc <_printf_float+0xf0>
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d1c0      	bne.n	800addc <_printf_float+0xf0>
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	e7bd      	b.n	800adda <_printf_float+0xee>
 800ae5e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ae62:	d9db      	bls.n	800ae1c <_printf_float+0x130>
 800ae64:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ae68:	d118      	bne.n	800ae9c <_printf_float+0x1b0>
 800ae6a:	2900      	cmp	r1, #0
 800ae6c:	6863      	ldr	r3, [r4, #4]
 800ae6e:	dd0b      	ble.n	800ae88 <_printf_float+0x19c>
 800ae70:	6121      	str	r1, [r4, #16]
 800ae72:	b913      	cbnz	r3, 800ae7a <_printf_float+0x18e>
 800ae74:	6822      	ldr	r2, [r4, #0]
 800ae76:	07d0      	lsls	r0, r2, #31
 800ae78:	d502      	bpl.n	800ae80 <_printf_float+0x194>
 800ae7a:	3301      	adds	r3, #1
 800ae7c:	440b      	add	r3, r1
 800ae7e:	6123      	str	r3, [r4, #16]
 800ae80:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ae82:	f04f 0900 	mov.w	r9, #0
 800ae86:	e7db      	b.n	800ae40 <_printf_float+0x154>
 800ae88:	b913      	cbnz	r3, 800ae90 <_printf_float+0x1a4>
 800ae8a:	6822      	ldr	r2, [r4, #0]
 800ae8c:	07d2      	lsls	r2, r2, #31
 800ae8e:	d501      	bpl.n	800ae94 <_printf_float+0x1a8>
 800ae90:	3302      	adds	r3, #2
 800ae92:	e7f4      	b.n	800ae7e <_printf_float+0x192>
 800ae94:	2301      	movs	r3, #1
 800ae96:	e7f2      	b.n	800ae7e <_printf_float+0x192>
 800ae98:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ae9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae9e:	4299      	cmp	r1, r3
 800aea0:	db05      	blt.n	800aeae <_printf_float+0x1c2>
 800aea2:	6823      	ldr	r3, [r4, #0]
 800aea4:	6121      	str	r1, [r4, #16]
 800aea6:	07d8      	lsls	r0, r3, #31
 800aea8:	d5ea      	bpl.n	800ae80 <_printf_float+0x194>
 800aeaa:	1c4b      	adds	r3, r1, #1
 800aeac:	e7e7      	b.n	800ae7e <_printf_float+0x192>
 800aeae:	2900      	cmp	r1, #0
 800aeb0:	bfd4      	ite	le
 800aeb2:	f1c1 0202 	rsble	r2, r1, #2
 800aeb6:	2201      	movgt	r2, #1
 800aeb8:	4413      	add	r3, r2
 800aeba:	e7e0      	b.n	800ae7e <_printf_float+0x192>
 800aebc:	6823      	ldr	r3, [r4, #0]
 800aebe:	055a      	lsls	r2, r3, #21
 800aec0:	d407      	bmi.n	800aed2 <_printf_float+0x1e6>
 800aec2:	6923      	ldr	r3, [r4, #16]
 800aec4:	4642      	mov	r2, r8
 800aec6:	4631      	mov	r1, r6
 800aec8:	4628      	mov	r0, r5
 800aeca:	47b8      	blx	r7
 800aecc:	3001      	adds	r0, #1
 800aece:	d12b      	bne.n	800af28 <_printf_float+0x23c>
 800aed0:	e767      	b.n	800ada2 <_printf_float+0xb6>
 800aed2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800aed6:	f240 80dd 	bls.w	800b094 <_printf_float+0x3a8>
 800aeda:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800aede:	2200      	movs	r2, #0
 800aee0:	2300      	movs	r3, #0
 800aee2:	f7f5 fdf1 	bl	8000ac8 <__aeabi_dcmpeq>
 800aee6:	2800      	cmp	r0, #0
 800aee8:	d033      	beq.n	800af52 <_printf_float+0x266>
 800aeea:	4a37      	ldr	r2, [pc, #220]	@ (800afc8 <_printf_float+0x2dc>)
 800aeec:	2301      	movs	r3, #1
 800aeee:	4631      	mov	r1, r6
 800aef0:	4628      	mov	r0, r5
 800aef2:	47b8      	blx	r7
 800aef4:	3001      	adds	r0, #1
 800aef6:	f43f af54 	beq.w	800ada2 <_printf_float+0xb6>
 800aefa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800aefe:	4543      	cmp	r3, r8
 800af00:	db02      	blt.n	800af08 <_printf_float+0x21c>
 800af02:	6823      	ldr	r3, [r4, #0]
 800af04:	07d8      	lsls	r0, r3, #31
 800af06:	d50f      	bpl.n	800af28 <_printf_float+0x23c>
 800af08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af0c:	4631      	mov	r1, r6
 800af0e:	4628      	mov	r0, r5
 800af10:	47b8      	blx	r7
 800af12:	3001      	adds	r0, #1
 800af14:	f43f af45 	beq.w	800ada2 <_printf_float+0xb6>
 800af18:	f04f 0900 	mov.w	r9, #0
 800af1c:	f108 38ff 	add.w	r8, r8, #4294967295
 800af20:	f104 0a1a 	add.w	sl, r4, #26
 800af24:	45c8      	cmp	r8, r9
 800af26:	dc09      	bgt.n	800af3c <_printf_float+0x250>
 800af28:	6823      	ldr	r3, [r4, #0]
 800af2a:	079b      	lsls	r3, r3, #30
 800af2c:	f100 8103 	bmi.w	800b136 <_printf_float+0x44a>
 800af30:	68e0      	ldr	r0, [r4, #12]
 800af32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af34:	4298      	cmp	r0, r3
 800af36:	bfb8      	it	lt
 800af38:	4618      	movlt	r0, r3
 800af3a:	e734      	b.n	800ada6 <_printf_float+0xba>
 800af3c:	2301      	movs	r3, #1
 800af3e:	4652      	mov	r2, sl
 800af40:	4631      	mov	r1, r6
 800af42:	4628      	mov	r0, r5
 800af44:	47b8      	blx	r7
 800af46:	3001      	adds	r0, #1
 800af48:	f43f af2b 	beq.w	800ada2 <_printf_float+0xb6>
 800af4c:	f109 0901 	add.w	r9, r9, #1
 800af50:	e7e8      	b.n	800af24 <_printf_float+0x238>
 800af52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af54:	2b00      	cmp	r3, #0
 800af56:	dc39      	bgt.n	800afcc <_printf_float+0x2e0>
 800af58:	4a1b      	ldr	r2, [pc, #108]	@ (800afc8 <_printf_float+0x2dc>)
 800af5a:	2301      	movs	r3, #1
 800af5c:	4631      	mov	r1, r6
 800af5e:	4628      	mov	r0, r5
 800af60:	47b8      	blx	r7
 800af62:	3001      	adds	r0, #1
 800af64:	f43f af1d 	beq.w	800ada2 <_printf_float+0xb6>
 800af68:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800af6c:	ea59 0303 	orrs.w	r3, r9, r3
 800af70:	d102      	bne.n	800af78 <_printf_float+0x28c>
 800af72:	6823      	ldr	r3, [r4, #0]
 800af74:	07d9      	lsls	r1, r3, #31
 800af76:	d5d7      	bpl.n	800af28 <_printf_float+0x23c>
 800af78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af7c:	4631      	mov	r1, r6
 800af7e:	4628      	mov	r0, r5
 800af80:	47b8      	blx	r7
 800af82:	3001      	adds	r0, #1
 800af84:	f43f af0d 	beq.w	800ada2 <_printf_float+0xb6>
 800af88:	f04f 0a00 	mov.w	sl, #0
 800af8c:	f104 0b1a 	add.w	fp, r4, #26
 800af90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af92:	425b      	negs	r3, r3
 800af94:	4553      	cmp	r3, sl
 800af96:	dc01      	bgt.n	800af9c <_printf_float+0x2b0>
 800af98:	464b      	mov	r3, r9
 800af9a:	e793      	b.n	800aec4 <_printf_float+0x1d8>
 800af9c:	2301      	movs	r3, #1
 800af9e:	465a      	mov	r2, fp
 800afa0:	4631      	mov	r1, r6
 800afa2:	4628      	mov	r0, r5
 800afa4:	47b8      	blx	r7
 800afa6:	3001      	adds	r0, #1
 800afa8:	f43f aefb 	beq.w	800ada2 <_printf_float+0xb6>
 800afac:	f10a 0a01 	add.w	sl, sl, #1
 800afb0:	e7ee      	b.n	800af90 <_printf_float+0x2a4>
 800afb2:	bf00      	nop
 800afb4:	7fefffff 	.word	0x7fefffff
 800afb8:	0800e50d 	.word	0x0800e50d
 800afbc:	0800e511 	.word	0x0800e511
 800afc0:	0800e515 	.word	0x0800e515
 800afc4:	0800e519 	.word	0x0800e519
 800afc8:	0800e51d 	.word	0x0800e51d
 800afcc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800afce:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800afd2:	4553      	cmp	r3, sl
 800afd4:	bfa8      	it	ge
 800afd6:	4653      	movge	r3, sl
 800afd8:	2b00      	cmp	r3, #0
 800afda:	4699      	mov	r9, r3
 800afdc:	dc36      	bgt.n	800b04c <_printf_float+0x360>
 800afde:	f04f 0b00 	mov.w	fp, #0
 800afe2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800afe6:	f104 021a 	add.w	r2, r4, #26
 800afea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800afec:	9306      	str	r3, [sp, #24]
 800afee:	eba3 0309 	sub.w	r3, r3, r9
 800aff2:	455b      	cmp	r3, fp
 800aff4:	dc31      	bgt.n	800b05a <_printf_float+0x36e>
 800aff6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aff8:	459a      	cmp	sl, r3
 800affa:	dc3a      	bgt.n	800b072 <_printf_float+0x386>
 800affc:	6823      	ldr	r3, [r4, #0]
 800affe:	07da      	lsls	r2, r3, #31
 800b000:	d437      	bmi.n	800b072 <_printf_float+0x386>
 800b002:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b004:	ebaa 0903 	sub.w	r9, sl, r3
 800b008:	9b06      	ldr	r3, [sp, #24]
 800b00a:	ebaa 0303 	sub.w	r3, sl, r3
 800b00e:	4599      	cmp	r9, r3
 800b010:	bfa8      	it	ge
 800b012:	4699      	movge	r9, r3
 800b014:	f1b9 0f00 	cmp.w	r9, #0
 800b018:	dc33      	bgt.n	800b082 <_printf_float+0x396>
 800b01a:	f04f 0800 	mov.w	r8, #0
 800b01e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b022:	f104 0b1a 	add.w	fp, r4, #26
 800b026:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b028:	ebaa 0303 	sub.w	r3, sl, r3
 800b02c:	eba3 0309 	sub.w	r3, r3, r9
 800b030:	4543      	cmp	r3, r8
 800b032:	f77f af79 	ble.w	800af28 <_printf_float+0x23c>
 800b036:	2301      	movs	r3, #1
 800b038:	465a      	mov	r2, fp
 800b03a:	4631      	mov	r1, r6
 800b03c:	4628      	mov	r0, r5
 800b03e:	47b8      	blx	r7
 800b040:	3001      	adds	r0, #1
 800b042:	f43f aeae 	beq.w	800ada2 <_printf_float+0xb6>
 800b046:	f108 0801 	add.w	r8, r8, #1
 800b04a:	e7ec      	b.n	800b026 <_printf_float+0x33a>
 800b04c:	4642      	mov	r2, r8
 800b04e:	4631      	mov	r1, r6
 800b050:	4628      	mov	r0, r5
 800b052:	47b8      	blx	r7
 800b054:	3001      	adds	r0, #1
 800b056:	d1c2      	bne.n	800afde <_printf_float+0x2f2>
 800b058:	e6a3      	b.n	800ada2 <_printf_float+0xb6>
 800b05a:	2301      	movs	r3, #1
 800b05c:	4631      	mov	r1, r6
 800b05e:	4628      	mov	r0, r5
 800b060:	9206      	str	r2, [sp, #24]
 800b062:	47b8      	blx	r7
 800b064:	3001      	adds	r0, #1
 800b066:	f43f ae9c 	beq.w	800ada2 <_printf_float+0xb6>
 800b06a:	9a06      	ldr	r2, [sp, #24]
 800b06c:	f10b 0b01 	add.w	fp, fp, #1
 800b070:	e7bb      	b.n	800afea <_printf_float+0x2fe>
 800b072:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b076:	4631      	mov	r1, r6
 800b078:	4628      	mov	r0, r5
 800b07a:	47b8      	blx	r7
 800b07c:	3001      	adds	r0, #1
 800b07e:	d1c0      	bne.n	800b002 <_printf_float+0x316>
 800b080:	e68f      	b.n	800ada2 <_printf_float+0xb6>
 800b082:	9a06      	ldr	r2, [sp, #24]
 800b084:	464b      	mov	r3, r9
 800b086:	4442      	add	r2, r8
 800b088:	4631      	mov	r1, r6
 800b08a:	4628      	mov	r0, r5
 800b08c:	47b8      	blx	r7
 800b08e:	3001      	adds	r0, #1
 800b090:	d1c3      	bne.n	800b01a <_printf_float+0x32e>
 800b092:	e686      	b.n	800ada2 <_printf_float+0xb6>
 800b094:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b098:	f1ba 0f01 	cmp.w	sl, #1
 800b09c:	dc01      	bgt.n	800b0a2 <_printf_float+0x3b6>
 800b09e:	07db      	lsls	r3, r3, #31
 800b0a0:	d536      	bpl.n	800b110 <_printf_float+0x424>
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	4642      	mov	r2, r8
 800b0a6:	4631      	mov	r1, r6
 800b0a8:	4628      	mov	r0, r5
 800b0aa:	47b8      	blx	r7
 800b0ac:	3001      	adds	r0, #1
 800b0ae:	f43f ae78 	beq.w	800ada2 <_printf_float+0xb6>
 800b0b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b0b6:	4631      	mov	r1, r6
 800b0b8:	4628      	mov	r0, r5
 800b0ba:	47b8      	blx	r7
 800b0bc:	3001      	adds	r0, #1
 800b0be:	f43f ae70 	beq.w	800ada2 <_printf_float+0xb6>
 800b0c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b0ce:	f7f5 fcfb 	bl	8000ac8 <__aeabi_dcmpeq>
 800b0d2:	b9c0      	cbnz	r0, 800b106 <_printf_float+0x41a>
 800b0d4:	4653      	mov	r3, sl
 800b0d6:	f108 0201 	add.w	r2, r8, #1
 800b0da:	4631      	mov	r1, r6
 800b0dc:	4628      	mov	r0, r5
 800b0de:	47b8      	blx	r7
 800b0e0:	3001      	adds	r0, #1
 800b0e2:	d10c      	bne.n	800b0fe <_printf_float+0x412>
 800b0e4:	e65d      	b.n	800ada2 <_printf_float+0xb6>
 800b0e6:	2301      	movs	r3, #1
 800b0e8:	465a      	mov	r2, fp
 800b0ea:	4631      	mov	r1, r6
 800b0ec:	4628      	mov	r0, r5
 800b0ee:	47b8      	blx	r7
 800b0f0:	3001      	adds	r0, #1
 800b0f2:	f43f ae56 	beq.w	800ada2 <_printf_float+0xb6>
 800b0f6:	f108 0801 	add.w	r8, r8, #1
 800b0fa:	45d0      	cmp	r8, sl
 800b0fc:	dbf3      	blt.n	800b0e6 <_printf_float+0x3fa>
 800b0fe:	464b      	mov	r3, r9
 800b100:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b104:	e6df      	b.n	800aec6 <_printf_float+0x1da>
 800b106:	f04f 0800 	mov.w	r8, #0
 800b10a:	f104 0b1a 	add.w	fp, r4, #26
 800b10e:	e7f4      	b.n	800b0fa <_printf_float+0x40e>
 800b110:	2301      	movs	r3, #1
 800b112:	4642      	mov	r2, r8
 800b114:	e7e1      	b.n	800b0da <_printf_float+0x3ee>
 800b116:	2301      	movs	r3, #1
 800b118:	464a      	mov	r2, r9
 800b11a:	4631      	mov	r1, r6
 800b11c:	4628      	mov	r0, r5
 800b11e:	47b8      	blx	r7
 800b120:	3001      	adds	r0, #1
 800b122:	f43f ae3e 	beq.w	800ada2 <_printf_float+0xb6>
 800b126:	f108 0801 	add.w	r8, r8, #1
 800b12a:	68e3      	ldr	r3, [r4, #12]
 800b12c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b12e:	1a5b      	subs	r3, r3, r1
 800b130:	4543      	cmp	r3, r8
 800b132:	dcf0      	bgt.n	800b116 <_printf_float+0x42a>
 800b134:	e6fc      	b.n	800af30 <_printf_float+0x244>
 800b136:	f04f 0800 	mov.w	r8, #0
 800b13a:	f104 0919 	add.w	r9, r4, #25
 800b13e:	e7f4      	b.n	800b12a <_printf_float+0x43e>

0800b140 <_printf_common>:
 800b140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b144:	4616      	mov	r6, r2
 800b146:	4698      	mov	r8, r3
 800b148:	688a      	ldr	r2, [r1, #8]
 800b14a:	690b      	ldr	r3, [r1, #16]
 800b14c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b150:	4293      	cmp	r3, r2
 800b152:	bfb8      	it	lt
 800b154:	4613      	movlt	r3, r2
 800b156:	6033      	str	r3, [r6, #0]
 800b158:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b15c:	4607      	mov	r7, r0
 800b15e:	460c      	mov	r4, r1
 800b160:	b10a      	cbz	r2, 800b166 <_printf_common+0x26>
 800b162:	3301      	adds	r3, #1
 800b164:	6033      	str	r3, [r6, #0]
 800b166:	6823      	ldr	r3, [r4, #0]
 800b168:	0699      	lsls	r1, r3, #26
 800b16a:	bf42      	ittt	mi
 800b16c:	6833      	ldrmi	r3, [r6, #0]
 800b16e:	3302      	addmi	r3, #2
 800b170:	6033      	strmi	r3, [r6, #0]
 800b172:	6825      	ldr	r5, [r4, #0]
 800b174:	f015 0506 	ands.w	r5, r5, #6
 800b178:	d106      	bne.n	800b188 <_printf_common+0x48>
 800b17a:	f104 0a19 	add.w	sl, r4, #25
 800b17e:	68e3      	ldr	r3, [r4, #12]
 800b180:	6832      	ldr	r2, [r6, #0]
 800b182:	1a9b      	subs	r3, r3, r2
 800b184:	42ab      	cmp	r3, r5
 800b186:	dc26      	bgt.n	800b1d6 <_printf_common+0x96>
 800b188:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b18c:	6822      	ldr	r2, [r4, #0]
 800b18e:	3b00      	subs	r3, #0
 800b190:	bf18      	it	ne
 800b192:	2301      	movne	r3, #1
 800b194:	0692      	lsls	r2, r2, #26
 800b196:	d42b      	bmi.n	800b1f0 <_printf_common+0xb0>
 800b198:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b19c:	4641      	mov	r1, r8
 800b19e:	4638      	mov	r0, r7
 800b1a0:	47c8      	blx	r9
 800b1a2:	3001      	adds	r0, #1
 800b1a4:	d01e      	beq.n	800b1e4 <_printf_common+0xa4>
 800b1a6:	6823      	ldr	r3, [r4, #0]
 800b1a8:	6922      	ldr	r2, [r4, #16]
 800b1aa:	f003 0306 	and.w	r3, r3, #6
 800b1ae:	2b04      	cmp	r3, #4
 800b1b0:	bf02      	ittt	eq
 800b1b2:	68e5      	ldreq	r5, [r4, #12]
 800b1b4:	6833      	ldreq	r3, [r6, #0]
 800b1b6:	1aed      	subeq	r5, r5, r3
 800b1b8:	68a3      	ldr	r3, [r4, #8]
 800b1ba:	bf0c      	ite	eq
 800b1bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b1c0:	2500      	movne	r5, #0
 800b1c2:	4293      	cmp	r3, r2
 800b1c4:	bfc4      	itt	gt
 800b1c6:	1a9b      	subgt	r3, r3, r2
 800b1c8:	18ed      	addgt	r5, r5, r3
 800b1ca:	2600      	movs	r6, #0
 800b1cc:	341a      	adds	r4, #26
 800b1ce:	42b5      	cmp	r5, r6
 800b1d0:	d11a      	bne.n	800b208 <_printf_common+0xc8>
 800b1d2:	2000      	movs	r0, #0
 800b1d4:	e008      	b.n	800b1e8 <_printf_common+0xa8>
 800b1d6:	2301      	movs	r3, #1
 800b1d8:	4652      	mov	r2, sl
 800b1da:	4641      	mov	r1, r8
 800b1dc:	4638      	mov	r0, r7
 800b1de:	47c8      	blx	r9
 800b1e0:	3001      	adds	r0, #1
 800b1e2:	d103      	bne.n	800b1ec <_printf_common+0xac>
 800b1e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b1e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1ec:	3501      	adds	r5, #1
 800b1ee:	e7c6      	b.n	800b17e <_printf_common+0x3e>
 800b1f0:	18e1      	adds	r1, r4, r3
 800b1f2:	1c5a      	adds	r2, r3, #1
 800b1f4:	2030      	movs	r0, #48	@ 0x30
 800b1f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b1fa:	4422      	add	r2, r4
 800b1fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b200:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b204:	3302      	adds	r3, #2
 800b206:	e7c7      	b.n	800b198 <_printf_common+0x58>
 800b208:	2301      	movs	r3, #1
 800b20a:	4622      	mov	r2, r4
 800b20c:	4641      	mov	r1, r8
 800b20e:	4638      	mov	r0, r7
 800b210:	47c8      	blx	r9
 800b212:	3001      	adds	r0, #1
 800b214:	d0e6      	beq.n	800b1e4 <_printf_common+0xa4>
 800b216:	3601      	adds	r6, #1
 800b218:	e7d9      	b.n	800b1ce <_printf_common+0x8e>
	...

0800b21c <_printf_i>:
 800b21c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b220:	7e0f      	ldrb	r7, [r1, #24]
 800b222:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b224:	2f78      	cmp	r7, #120	@ 0x78
 800b226:	4691      	mov	r9, r2
 800b228:	4680      	mov	r8, r0
 800b22a:	460c      	mov	r4, r1
 800b22c:	469a      	mov	sl, r3
 800b22e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b232:	d807      	bhi.n	800b244 <_printf_i+0x28>
 800b234:	2f62      	cmp	r7, #98	@ 0x62
 800b236:	d80a      	bhi.n	800b24e <_printf_i+0x32>
 800b238:	2f00      	cmp	r7, #0
 800b23a:	f000 80d2 	beq.w	800b3e2 <_printf_i+0x1c6>
 800b23e:	2f58      	cmp	r7, #88	@ 0x58
 800b240:	f000 80b9 	beq.w	800b3b6 <_printf_i+0x19a>
 800b244:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b248:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b24c:	e03a      	b.n	800b2c4 <_printf_i+0xa8>
 800b24e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b252:	2b15      	cmp	r3, #21
 800b254:	d8f6      	bhi.n	800b244 <_printf_i+0x28>
 800b256:	a101      	add	r1, pc, #4	@ (adr r1, 800b25c <_printf_i+0x40>)
 800b258:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b25c:	0800b2b5 	.word	0x0800b2b5
 800b260:	0800b2c9 	.word	0x0800b2c9
 800b264:	0800b245 	.word	0x0800b245
 800b268:	0800b245 	.word	0x0800b245
 800b26c:	0800b245 	.word	0x0800b245
 800b270:	0800b245 	.word	0x0800b245
 800b274:	0800b2c9 	.word	0x0800b2c9
 800b278:	0800b245 	.word	0x0800b245
 800b27c:	0800b245 	.word	0x0800b245
 800b280:	0800b245 	.word	0x0800b245
 800b284:	0800b245 	.word	0x0800b245
 800b288:	0800b3c9 	.word	0x0800b3c9
 800b28c:	0800b2f3 	.word	0x0800b2f3
 800b290:	0800b383 	.word	0x0800b383
 800b294:	0800b245 	.word	0x0800b245
 800b298:	0800b245 	.word	0x0800b245
 800b29c:	0800b3eb 	.word	0x0800b3eb
 800b2a0:	0800b245 	.word	0x0800b245
 800b2a4:	0800b2f3 	.word	0x0800b2f3
 800b2a8:	0800b245 	.word	0x0800b245
 800b2ac:	0800b245 	.word	0x0800b245
 800b2b0:	0800b38b 	.word	0x0800b38b
 800b2b4:	6833      	ldr	r3, [r6, #0]
 800b2b6:	1d1a      	adds	r2, r3, #4
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	6032      	str	r2, [r6, #0]
 800b2bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b2c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b2c4:	2301      	movs	r3, #1
 800b2c6:	e09d      	b.n	800b404 <_printf_i+0x1e8>
 800b2c8:	6833      	ldr	r3, [r6, #0]
 800b2ca:	6820      	ldr	r0, [r4, #0]
 800b2cc:	1d19      	adds	r1, r3, #4
 800b2ce:	6031      	str	r1, [r6, #0]
 800b2d0:	0606      	lsls	r6, r0, #24
 800b2d2:	d501      	bpl.n	800b2d8 <_printf_i+0xbc>
 800b2d4:	681d      	ldr	r5, [r3, #0]
 800b2d6:	e003      	b.n	800b2e0 <_printf_i+0xc4>
 800b2d8:	0645      	lsls	r5, r0, #25
 800b2da:	d5fb      	bpl.n	800b2d4 <_printf_i+0xb8>
 800b2dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b2e0:	2d00      	cmp	r5, #0
 800b2e2:	da03      	bge.n	800b2ec <_printf_i+0xd0>
 800b2e4:	232d      	movs	r3, #45	@ 0x2d
 800b2e6:	426d      	negs	r5, r5
 800b2e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b2ec:	4859      	ldr	r0, [pc, #356]	@ (800b454 <_printf_i+0x238>)
 800b2ee:	230a      	movs	r3, #10
 800b2f0:	e011      	b.n	800b316 <_printf_i+0xfa>
 800b2f2:	6821      	ldr	r1, [r4, #0]
 800b2f4:	6833      	ldr	r3, [r6, #0]
 800b2f6:	0608      	lsls	r0, r1, #24
 800b2f8:	f853 5b04 	ldr.w	r5, [r3], #4
 800b2fc:	d402      	bmi.n	800b304 <_printf_i+0xe8>
 800b2fe:	0649      	lsls	r1, r1, #25
 800b300:	bf48      	it	mi
 800b302:	b2ad      	uxthmi	r5, r5
 800b304:	2f6f      	cmp	r7, #111	@ 0x6f
 800b306:	4853      	ldr	r0, [pc, #332]	@ (800b454 <_printf_i+0x238>)
 800b308:	6033      	str	r3, [r6, #0]
 800b30a:	bf14      	ite	ne
 800b30c:	230a      	movne	r3, #10
 800b30e:	2308      	moveq	r3, #8
 800b310:	2100      	movs	r1, #0
 800b312:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b316:	6866      	ldr	r6, [r4, #4]
 800b318:	60a6      	str	r6, [r4, #8]
 800b31a:	2e00      	cmp	r6, #0
 800b31c:	bfa2      	ittt	ge
 800b31e:	6821      	ldrge	r1, [r4, #0]
 800b320:	f021 0104 	bicge.w	r1, r1, #4
 800b324:	6021      	strge	r1, [r4, #0]
 800b326:	b90d      	cbnz	r5, 800b32c <_printf_i+0x110>
 800b328:	2e00      	cmp	r6, #0
 800b32a:	d04b      	beq.n	800b3c4 <_printf_i+0x1a8>
 800b32c:	4616      	mov	r6, r2
 800b32e:	fbb5 f1f3 	udiv	r1, r5, r3
 800b332:	fb03 5711 	mls	r7, r3, r1, r5
 800b336:	5dc7      	ldrb	r7, [r0, r7]
 800b338:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b33c:	462f      	mov	r7, r5
 800b33e:	42bb      	cmp	r3, r7
 800b340:	460d      	mov	r5, r1
 800b342:	d9f4      	bls.n	800b32e <_printf_i+0x112>
 800b344:	2b08      	cmp	r3, #8
 800b346:	d10b      	bne.n	800b360 <_printf_i+0x144>
 800b348:	6823      	ldr	r3, [r4, #0]
 800b34a:	07df      	lsls	r7, r3, #31
 800b34c:	d508      	bpl.n	800b360 <_printf_i+0x144>
 800b34e:	6923      	ldr	r3, [r4, #16]
 800b350:	6861      	ldr	r1, [r4, #4]
 800b352:	4299      	cmp	r1, r3
 800b354:	bfde      	ittt	le
 800b356:	2330      	movle	r3, #48	@ 0x30
 800b358:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b35c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b360:	1b92      	subs	r2, r2, r6
 800b362:	6122      	str	r2, [r4, #16]
 800b364:	f8cd a000 	str.w	sl, [sp]
 800b368:	464b      	mov	r3, r9
 800b36a:	aa03      	add	r2, sp, #12
 800b36c:	4621      	mov	r1, r4
 800b36e:	4640      	mov	r0, r8
 800b370:	f7ff fee6 	bl	800b140 <_printf_common>
 800b374:	3001      	adds	r0, #1
 800b376:	d14a      	bne.n	800b40e <_printf_i+0x1f2>
 800b378:	f04f 30ff 	mov.w	r0, #4294967295
 800b37c:	b004      	add	sp, #16
 800b37e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b382:	6823      	ldr	r3, [r4, #0]
 800b384:	f043 0320 	orr.w	r3, r3, #32
 800b388:	6023      	str	r3, [r4, #0]
 800b38a:	4833      	ldr	r0, [pc, #204]	@ (800b458 <_printf_i+0x23c>)
 800b38c:	2778      	movs	r7, #120	@ 0x78
 800b38e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b392:	6823      	ldr	r3, [r4, #0]
 800b394:	6831      	ldr	r1, [r6, #0]
 800b396:	061f      	lsls	r7, r3, #24
 800b398:	f851 5b04 	ldr.w	r5, [r1], #4
 800b39c:	d402      	bmi.n	800b3a4 <_printf_i+0x188>
 800b39e:	065f      	lsls	r7, r3, #25
 800b3a0:	bf48      	it	mi
 800b3a2:	b2ad      	uxthmi	r5, r5
 800b3a4:	6031      	str	r1, [r6, #0]
 800b3a6:	07d9      	lsls	r1, r3, #31
 800b3a8:	bf44      	itt	mi
 800b3aa:	f043 0320 	orrmi.w	r3, r3, #32
 800b3ae:	6023      	strmi	r3, [r4, #0]
 800b3b0:	b11d      	cbz	r5, 800b3ba <_printf_i+0x19e>
 800b3b2:	2310      	movs	r3, #16
 800b3b4:	e7ac      	b.n	800b310 <_printf_i+0xf4>
 800b3b6:	4827      	ldr	r0, [pc, #156]	@ (800b454 <_printf_i+0x238>)
 800b3b8:	e7e9      	b.n	800b38e <_printf_i+0x172>
 800b3ba:	6823      	ldr	r3, [r4, #0]
 800b3bc:	f023 0320 	bic.w	r3, r3, #32
 800b3c0:	6023      	str	r3, [r4, #0]
 800b3c2:	e7f6      	b.n	800b3b2 <_printf_i+0x196>
 800b3c4:	4616      	mov	r6, r2
 800b3c6:	e7bd      	b.n	800b344 <_printf_i+0x128>
 800b3c8:	6833      	ldr	r3, [r6, #0]
 800b3ca:	6825      	ldr	r5, [r4, #0]
 800b3cc:	6961      	ldr	r1, [r4, #20]
 800b3ce:	1d18      	adds	r0, r3, #4
 800b3d0:	6030      	str	r0, [r6, #0]
 800b3d2:	062e      	lsls	r6, r5, #24
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	d501      	bpl.n	800b3dc <_printf_i+0x1c0>
 800b3d8:	6019      	str	r1, [r3, #0]
 800b3da:	e002      	b.n	800b3e2 <_printf_i+0x1c6>
 800b3dc:	0668      	lsls	r0, r5, #25
 800b3de:	d5fb      	bpl.n	800b3d8 <_printf_i+0x1bc>
 800b3e0:	8019      	strh	r1, [r3, #0]
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	6123      	str	r3, [r4, #16]
 800b3e6:	4616      	mov	r6, r2
 800b3e8:	e7bc      	b.n	800b364 <_printf_i+0x148>
 800b3ea:	6833      	ldr	r3, [r6, #0]
 800b3ec:	1d1a      	adds	r2, r3, #4
 800b3ee:	6032      	str	r2, [r6, #0]
 800b3f0:	681e      	ldr	r6, [r3, #0]
 800b3f2:	6862      	ldr	r2, [r4, #4]
 800b3f4:	2100      	movs	r1, #0
 800b3f6:	4630      	mov	r0, r6
 800b3f8:	f7f4 feea 	bl	80001d0 <memchr>
 800b3fc:	b108      	cbz	r0, 800b402 <_printf_i+0x1e6>
 800b3fe:	1b80      	subs	r0, r0, r6
 800b400:	6060      	str	r0, [r4, #4]
 800b402:	6863      	ldr	r3, [r4, #4]
 800b404:	6123      	str	r3, [r4, #16]
 800b406:	2300      	movs	r3, #0
 800b408:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b40c:	e7aa      	b.n	800b364 <_printf_i+0x148>
 800b40e:	6923      	ldr	r3, [r4, #16]
 800b410:	4632      	mov	r2, r6
 800b412:	4649      	mov	r1, r9
 800b414:	4640      	mov	r0, r8
 800b416:	47d0      	blx	sl
 800b418:	3001      	adds	r0, #1
 800b41a:	d0ad      	beq.n	800b378 <_printf_i+0x15c>
 800b41c:	6823      	ldr	r3, [r4, #0]
 800b41e:	079b      	lsls	r3, r3, #30
 800b420:	d413      	bmi.n	800b44a <_printf_i+0x22e>
 800b422:	68e0      	ldr	r0, [r4, #12]
 800b424:	9b03      	ldr	r3, [sp, #12]
 800b426:	4298      	cmp	r0, r3
 800b428:	bfb8      	it	lt
 800b42a:	4618      	movlt	r0, r3
 800b42c:	e7a6      	b.n	800b37c <_printf_i+0x160>
 800b42e:	2301      	movs	r3, #1
 800b430:	4632      	mov	r2, r6
 800b432:	4649      	mov	r1, r9
 800b434:	4640      	mov	r0, r8
 800b436:	47d0      	blx	sl
 800b438:	3001      	adds	r0, #1
 800b43a:	d09d      	beq.n	800b378 <_printf_i+0x15c>
 800b43c:	3501      	adds	r5, #1
 800b43e:	68e3      	ldr	r3, [r4, #12]
 800b440:	9903      	ldr	r1, [sp, #12]
 800b442:	1a5b      	subs	r3, r3, r1
 800b444:	42ab      	cmp	r3, r5
 800b446:	dcf2      	bgt.n	800b42e <_printf_i+0x212>
 800b448:	e7eb      	b.n	800b422 <_printf_i+0x206>
 800b44a:	2500      	movs	r5, #0
 800b44c:	f104 0619 	add.w	r6, r4, #25
 800b450:	e7f5      	b.n	800b43e <_printf_i+0x222>
 800b452:	bf00      	nop
 800b454:	0800e51f 	.word	0x0800e51f
 800b458:	0800e530 	.word	0x0800e530

0800b45c <std>:
 800b45c:	2300      	movs	r3, #0
 800b45e:	b510      	push	{r4, lr}
 800b460:	4604      	mov	r4, r0
 800b462:	e9c0 3300 	strd	r3, r3, [r0]
 800b466:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b46a:	6083      	str	r3, [r0, #8]
 800b46c:	8181      	strh	r1, [r0, #12]
 800b46e:	6643      	str	r3, [r0, #100]	@ 0x64
 800b470:	81c2      	strh	r2, [r0, #14]
 800b472:	6183      	str	r3, [r0, #24]
 800b474:	4619      	mov	r1, r3
 800b476:	2208      	movs	r2, #8
 800b478:	305c      	adds	r0, #92	@ 0x5c
 800b47a:	f000 f993 	bl	800b7a4 <memset>
 800b47e:	4b0d      	ldr	r3, [pc, #52]	@ (800b4b4 <std+0x58>)
 800b480:	6263      	str	r3, [r4, #36]	@ 0x24
 800b482:	4b0d      	ldr	r3, [pc, #52]	@ (800b4b8 <std+0x5c>)
 800b484:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b486:	4b0d      	ldr	r3, [pc, #52]	@ (800b4bc <std+0x60>)
 800b488:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b48a:	4b0d      	ldr	r3, [pc, #52]	@ (800b4c0 <std+0x64>)
 800b48c:	6323      	str	r3, [r4, #48]	@ 0x30
 800b48e:	4b0d      	ldr	r3, [pc, #52]	@ (800b4c4 <std+0x68>)
 800b490:	6224      	str	r4, [r4, #32]
 800b492:	429c      	cmp	r4, r3
 800b494:	d006      	beq.n	800b4a4 <std+0x48>
 800b496:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b49a:	4294      	cmp	r4, r2
 800b49c:	d002      	beq.n	800b4a4 <std+0x48>
 800b49e:	33d0      	adds	r3, #208	@ 0xd0
 800b4a0:	429c      	cmp	r4, r3
 800b4a2:	d105      	bne.n	800b4b0 <std+0x54>
 800b4a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b4a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4ac:	f000 ba60 	b.w	800b970 <__retarget_lock_init_recursive>
 800b4b0:	bd10      	pop	{r4, pc}
 800b4b2:	bf00      	nop
 800b4b4:	0800b6ad 	.word	0x0800b6ad
 800b4b8:	0800b6cf 	.word	0x0800b6cf
 800b4bc:	0800b707 	.word	0x0800b707
 800b4c0:	0800b72b 	.word	0x0800b72b
 800b4c4:	20005684 	.word	0x20005684

0800b4c8 <stdio_exit_handler>:
 800b4c8:	4a02      	ldr	r2, [pc, #8]	@ (800b4d4 <stdio_exit_handler+0xc>)
 800b4ca:	4903      	ldr	r1, [pc, #12]	@ (800b4d8 <stdio_exit_handler+0x10>)
 800b4cc:	4803      	ldr	r0, [pc, #12]	@ (800b4dc <stdio_exit_handler+0x14>)
 800b4ce:	f000 b869 	b.w	800b5a4 <_fwalk_sglue>
 800b4d2:	bf00      	nop
 800b4d4:	200000d0 	.word	0x200000d0
 800b4d8:	0800d581 	.word	0x0800d581
 800b4dc:	200000e0 	.word	0x200000e0

0800b4e0 <cleanup_stdio>:
 800b4e0:	6841      	ldr	r1, [r0, #4]
 800b4e2:	4b0c      	ldr	r3, [pc, #48]	@ (800b514 <cleanup_stdio+0x34>)
 800b4e4:	4299      	cmp	r1, r3
 800b4e6:	b510      	push	{r4, lr}
 800b4e8:	4604      	mov	r4, r0
 800b4ea:	d001      	beq.n	800b4f0 <cleanup_stdio+0x10>
 800b4ec:	f002 f848 	bl	800d580 <_fflush_r>
 800b4f0:	68a1      	ldr	r1, [r4, #8]
 800b4f2:	4b09      	ldr	r3, [pc, #36]	@ (800b518 <cleanup_stdio+0x38>)
 800b4f4:	4299      	cmp	r1, r3
 800b4f6:	d002      	beq.n	800b4fe <cleanup_stdio+0x1e>
 800b4f8:	4620      	mov	r0, r4
 800b4fa:	f002 f841 	bl	800d580 <_fflush_r>
 800b4fe:	68e1      	ldr	r1, [r4, #12]
 800b500:	4b06      	ldr	r3, [pc, #24]	@ (800b51c <cleanup_stdio+0x3c>)
 800b502:	4299      	cmp	r1, r3
 800b504:	d004      	beq.n	800b510 <cleanup_stdio+0x30>
 800b506:	4620      	mov	r0, r4
 800b508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b50c:	f002 b838 	b.w	800d580 <_fflush_r>
 800b510:	bd10      	pop	{r4, pc}
 800b512:	bf00      	nop
 800b514:	20005684 	.word	0x20005684
 800b518:	200056ec 	.word	0x200056ec
 800b51c:	20005754 	.word	0x20005754

0800b520 <global_stdio_init.part.0>:
 800b520:	b510      	push	{r4, lr}
 800b522:	4b0b      	ldr	r3, [pc, #44]	@ (800b550 <global_stdio_init.part.0+0x30>)
 800b524:	4c0b      	ldr	r4, [pc, #44]	@ (800b554 <global_stdio_init.part.0+0x34>)
 800b526:	4a0c      	ldr	r2, [pc, #48]	@ (800b558 <global_stdio_init.part.0+0x38>)
 800b528:	601a      	str	r2, [r3, #0]
 800b52a:	4620      	mov	r0, r4
 800b52c:	2200      	movs	r2, #0
 800b52e:	2104      	movs	r1, #4
 800b530:	f7ff ff94 	bl	800b45c <std>
 800b534:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b538:	2201      	movs	r2, #1
 800b53a:	2109      	movs	r1, #9
 800b53c:	f7ff ff8e 	bl	800b45c <std>
 800b540:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b544:	2202      	movs	r2, #2
 800b546:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b54a:	2112      	movs	r1, #18
 800b54c:	f7ff bf86 	b.w	800b45c <std>
 800b550:	200057bc 	.word	0x200057bc
 800b554:	20005684 	.word	0x20005684
 800b558:	0800b4c9 	.word	0x0800b4c9

0800b55c <__sfp_lock_acquire>:
 800b55c:	4801      	ldr	r0, [pc, #4]	@ (800b564 <__sfp_lock_acquire+0x8>)
 800b55e:	f000 ba08 	b.w	800b972 <__retarget_lock_acquire_recursive>
 800b562:	bf00      	nop
 800b564:	200057c5 	.word	0x200057c5

0800b568 <__sfp_lock_release>:
 800b568:	4801      	ldr	r0, [pc, #4]	@ (800b570 <__sfp_lock_release+0x8>)
 800b56a:	f000 ba03 	b.w	800b974 <__retarget_lock_release_recursive>
 800b56e:	bf00      	nop
 800b570:	200057c5 	.word	0x200057c5

0800b574 <__sinit>:
 800b574:	b510      	push	{r4, lr}
 800b576:	4604      	mov	r4, r0
 800b578:	f7ff fff0 	bl	800b55c <__sfp_lock_acquire>
 800b57c:	6a23      	ldr	r3, [r4, #32]
 800b57e:	b11b      	cbz	r3, 800b588 <__sinit+0x14>
 800b580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b584:	f7ff bff0 	b.w	800b568 <__sfp_lock_release>
 800b588:	4b04      	ldr	r3, [pc, #16]	@ (800b59c <__sinit+0x28>)
 800b58a:	6223      	str	r3, [r4, #32]
 800b58c:	4b04      	ldr	r3, [pc, #16]	@ (800b5a0 <__sinit+0x2c>)
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d1f5      	bne.n	800b580 <__sinit+0xc>
 800b594:	f7ff ffc4 	bl	800b520 <global_stdio_init.part.0>
 800b598:	e7f2      	b.n	800b580 <__sinit+0xc>
 800b59a:	bf00      	nop
 800b59c:	0800b4e1 	.word	0x0800b4e1
 800b5a0:	200057bc 	.word	0x200057bc

0800b5a4 <_fwalk_sglue>:
 800b5a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5a8:	4607      	mov	r7, r0
 800b5aa:	4688      	mov	r8, r1
 800b5ac:	4614      	mov	r4, r2
 800b5ae:	2600      	movs	r6, #0
 800b5b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b5b4:	f1b9 0901 	subs.w	r9, r9, #1
 800b5b8:	d505      	bpl.n	800b5c6 <_fwalk_sglue+0x22>
 800b5ba:	6824      	ldr	r4, [r4, #0]
 800b5bc:	2c00      	cmp	r4, #0
 800b5be:	d1f7      	bne.n	800b5b0 <_fwalk_sglue+0xc>
 800b5c0:	4630      	mov	r0, r6
 800b5c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5c6:	89ab      	ldrh	r3, [r5, #12]
 800b5c8:	2b01      	cmp	r3, #1
 800b5ca:	d907      	bls.n	800b5dc <_fwalk_sglue+0x38>
 800b5cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b5d0:	3301      	adds	r3, #1
 800b5d2:	d003      	beq.n	800b5dc <_fwalk_sglue+0x38>
 800b5d4:	4629      	mov	r1, r5
 800b5d6:	4638      	mov	r0, r7
 800b5d8:	47c0      	blx	r8
 800b5da:	4306      	orrs	r6, r0
 800b5dc:	3568      	adds	r5, #104	@ 0x68
 800b5de:	e7e9      	b.n	800b5b4 <_fwalk_sglue+0x10>

0800b5e0 <iprintf>:
 800b5e0:	b40f      	push	{r0, r1, r2, r3}
 800b5e2:	b507      	push	{r0, r1, r2, lr}
 800b5e4:	4906      	ldr	r1, [pc, #24]	@ (800b600 <iprintf+0x20>)
 800b5e6:	ab04      	add	r3, sp, #16
 800b5e8:	6808      	ldr	r0, [r1, #0]
 800b5ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5ee:	6881      	ldr	r1, [r0, #8]
 800b5f0:	9301      	str	r3, [sp, #4]
 800b5f2:	f001 fe29 	bl	800d248 <_vfiprintf_r>
 800b5f6:	b003      	add	sp, #12
 800b5f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b5fc:	b004      	add	sp, #16
 800b5fe:	4770      	bx	lr
 800b600:	200000dc 	.word	0x200000dc

0800b604 <sniprintf>:
 800b604:	b40c      	push	{r2, r3}
 800b606:	b530      	push	{r4, r5, lr}
 800b608:	4b17      	ldr	r3, [pc, #92]	@ (800b668 <sniprintf+0x64>)
 800b60a:	1e0c      	subs	r4, r1, #0
 800b60c:	681d      	ldr	r5, [r3, #0]
 800b60e:	b09d      	sub	sp, #116	@ 0x74
 800b610:	da08      	bge.n	800b624 <sniprintf+0x20>
 800b612:	238b      	movs	r3, #139	@ 0x8b
 800b614:	602b      	str	r3, [r5, #0]
 800b616:	f04f 30ff 	mov.w	r0, #4294967295
 800b61a:	b01d      	add	sp, #116	@ 0x74
 800b61c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b620:	b002      	add	sp, #8
 800b622:	4770      	bx	lr
 800b624:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b628:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b62c:	bf14      	ite	ne
 800b62e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b632:	4623      	moveq	r3, r4
 800b634:	9304      	str	r3, [sp, #16]
 800b636:	9307      	str	r3, [sp, #28]
 800b638:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b63c:	9002      	str	r0, [sp, #8]
 800b63e:	9006      	str	r0, [sp, #24]
 800b640:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b644:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b646:	ab21      	add	r3, sp, #132	@ 0x84
 800b648:	a902      	add	r1, sp, #8
 800b64a:	4628      	mov	r0, r5
 800b64c:	9301      	str	r3, [sp, #4]
 800b64e:	f001 fcd5 	bl	800cffc <_svfiprintf_r>
 800b652:	1c43      	adds	r3, r0, #1
 800b654:	bfbc      	itt	lt
 800b656:	238b      	movlt	r3, #139	@ 0x8b
 800b658:	602b      	strlt	r3, [r5, #0]
 800b65a:	2c00      	cmp	r4, #0
 800b65c:	d0dd      	beq.n	800b61a <sniprintf+0x16>
 800b65e:	9b02      	ldr	r3, [sp, #8]
 800b660:	2200      	movs	r2, #0
 800b662:	701a      	strb	r2, [r3, #0]
 800b664:	e7d9      	b.n	800b61a <sniprintf+0x16>
 800b666:	bf00      	nop
 800b668:	200000dc 	.word	0x200000dc

0800b66c <siprintf>:
 800b66c:	b40e      	push	{r1, r2, r3}
 800b66e:	b500      	push	{lr}
 800b670:	b09c      	sub	sp, #112	@ 0x70
 800b672:	ab1d      	add	r3, sp, #116	@ 0x74
 800b674:	9002      	str	r0, [sp, #8]
 800b676:	9006      	str	r0, [sp, #24]
 800b678:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b67c:	4809      	ldr	r0, [pc, #36]	@ (800b6a4 <siprintf+0x38>)
 800b67e:	9107      	str	r1, [sp, #28]
 800b680:	9104      	str	r1, [sp, #16]
 800b682:	4909      	ldr	r1, [pc, #36]	@ (800b6a8 <siprintf+0x3c>)
 800b684:	f853 2b04 	ldr.w	r2, [r3], #4
 800b688:	9105      	str	r1, [sp, #20]
 800b68a:	6800      	ldr	r0, [r0, #0]
 800b68c:	9301      	str	r3, [sp, #4]
 800b68e:	a902      	add	r1, sp, #8
 800b690:	f001 fcb4 	bl	800cffc <_svfiprintf_r>
 800b694:	9b02      	ldr	r3, [sp, #8]
 800b696:	2200      	movs	r2, #0
 800b698:	701a      	strb	r2, [r3, #0]
 800b69a:	b01c      	add	sp, #112	@ 0x70
 800b69c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b6a0:	b003      	add	sp, #12
 800b6a2:	4770      	bx	lr
 800b6a4:	200000dc 	.word	0x200000dc
 800b6a8:	ffff0208 	.word	0xffff0208

0800b6ac <__sread>:
 800b6ac:	b510      	push	{r4, lr}
 800b6ae:	460c      	mov	r4, r1
 800b6b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6b4:	f000 f90e 	bl	800b8d4 <_read_r>
 800b6b8:	2800      	cmp	r0, #0
 800b6ba:	bfab      	itete	ge
 800b6bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b6be:	89a3      	ldrhlt	r3, [r4, #12]
 800b6c0:	181b      	addge	r3, r3, r0
 800b6c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b6c6:	bfac      	ite	ge
 800b6c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b6ca:	81a3      	strhlt	r3, [r4, #12]
 800b6cc:	bd10      	pop	{r4, pc}

0800b6ce <__swrite>:
 800b6ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6d2:	461f      	mov	r7, r3
 800b6d4:	898b      	ldrh	r3, [r1, #12]
 800b6d6:	05db      	lsls	r3, r3, #23
 800b6d8:	4605      	mov	r5, r0
 800b6da:	460c      	mov	r4, r1
 800b6dc:	4616      	mov	r6, r2
 800b6de:	d505      	bpl.n	800b6ec <__swrite+0x1e>
 800b6e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6e4:	2302      	movs	r3, #2
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	f000 f8e2 	bl	800b8b0 <_lseek_r>
 800b6ec:	89a3      	ldrh	r3, [r4, #12]
 800b6ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b6f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b6f6:	81a3      	strh	r3, [r4, #12]
 800b6f8:	4632      	mov	r2, r6
 800b6fa:	463b      	mov	r3, r7
 800b6fc:	4628      	mov	r0, r5
 800b6fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b702:	f000 b8f9 	b.w	800b8f8 <_write_r>

0800b706 <__sseek>:
 800b706:	b510      	push	{r4, lr}
 800b708:	460c      	mov	r4, r1
 800b70a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b70e:	f000 f8cf 	bl	800b8b0 <_lseek_r>
 800b712:	1c43      	adds	r3, r0, #1
 800b714:	89a3      	ldrh	r3, [r4, #12]
 800b716:	bf15      	itete	ne
 800b718:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b71a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b71e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b722:	81a3      	strheq	r3, [r4, #12]
 800b724:	bf18      	it	ne
 800b726:	81a3      	strhne	r3, [r4, #12]
 800b728:	bd10      	pop	{r4, pc}

0800b72a <__sclose>:
 800b72a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b72e:	f000 b859 	b.w	800b7e4 <_close_r>

0800b732 <_vsniprintf_r>:
 800b732:	b530      	push	{r4, r5, lr}
 800b734:	4614      	mov	r4, r2
 800b736:	2c00      	cmp	r4, #0
 800b738:	b09b      	sub	sp, #108	@ 0x6c
 800b73a:	4605      	mov	r5, r0
 800b73c:	461a      	mov	r2, r3
 800b73e:	da05      	bge.n	800b74c <_vsniprintf_r+0x1a>
 800b740:	238b      	movs	r3, #139	@ 0x8b
 800b742:	6003      	str	r3, [r0, #0]
 800b744:	f04f 30ff 	mov.w	r0, #4294967295
 800b748:	b01b      	add	sp, #108	@ 0x6c
 800b74a:	bd30      	pop	{r4, r5, pc}
 800b74c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b750:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b754:	bf14      	ite	ne
 800b756:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b75a:	4623      	moveq	r3, r4
 800b75c:	9302      	str	r3, [sp, #8]
 800b75e:	9305      	str	r3, [sp, #20]
 800b760:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b764:	9100      	str	r1, [sp, #0]
 800b766:	9104      	str	r1, [sp, #16]
 800b768:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b76c:	4669      	mov	r1, sp
 800b76e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800b770:	f001 fc44 	bl	800cffc <_svfiprintf_r>
 800b774:	1c43      	adds	r3, r0, #1
 800b776:	bfbc      	itt	lt
 800b778:	238b      	movlt	r3, #139	@ 0x8b
 800b77a:	602b      	strlt	r3, [r5, #0]
 800b77c:	2c00      	cmp	r4, #0
 800b77e:	d0e3      	beq.n	800b748 <_vsniprintf_r+0x16>
 800b780:	9b00      	ldr	r3, [sp, #0]
 800b782:	2200      	movs	r2, #0
 800b784:	701a      	strb	r2, [r3, #0]
 800b786:	e7df      	b.n	800b748 <_vsniprintf_r+0x16>

0800b788 <vsniprintf>:
 800b788:	b507      	push	{r0, r1, r2, lr}
 800b78a:	9300      	str	r3, [sp, #0]
 800b78c:	4613      	mov	r3, r2
 800b78e:	460a      	mov	r2, r1
 800b790:	4601      	mov	r1, r0
 800b792:	4803      	ldr	r0, [pc, #12]	@ (800b7a0 <vsniprintf+0x18>)
 800b794:	6800      	ldr	r0, [r0, #0]
 800b796:	f7ff ffcc 	bl	800b732 <_vsniprintf_r>
 800b79a:	b003      	add	sp, #12
 800b79c:	f85d fb04 	ldr.w	pc, [sp], #4
 800b7a0:	200000dc 	.word	0x200000dc

0800b7a4 <memset>:
 800b7a4:	4402      	add	r2, r0
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	4293      	cmp	r3, r2
 800b7aa:	d100      	bne.n	800b7ae <memset+0xa>
 800b7ac:	4770      	bx	lr
 800b7ae:	f803 1b01 	strb.w	r1, [r3], #1
 800b7b2:	e7f9      	b.n	800b7a8 <memset+0x4>

0800b7b4 <strncpy>:
 800b7b4:	b510      	push	{r4, lr}
 800b7b6:	3901      	subs	r1, #1
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	b132      	cbz	r2, 800b7ca <strncpy+0x16>
 800b7bc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b7c0:	f803 4b01 	strb.w	r4, [r3], #1
 800b7c4:	3a01      	subs	r2, #1
 800b7c6:	2c00      	cmp	r4, #0
 800b7c8:	d1f7      	bne.n	800b7ba <strncpy+0x6>
 800b7ca:	441a      	add	r2, r3
 800b7cc:	2100      	movs	r1, #0
 800b7ce:	4293      	cmp	r3, r2
 800b7d0:	d100      	bne.n	800b7d4 <strncpy+0x20>
 800b7d2:	bd10      	pop	{r4, pc}
 800b7d4:	f803 1b01 	strb.w	r1, [r3], #1
 800b7d8:	e7f9      	b.n	800b7ce <strncpy+0x1a>
	...

0800b7dc <_localeconv_r>:
 800b7dc:	4800      	ldr	r0, [pc, #0]	@ (800b7e0 <_localeconv_r+0x4>)
 800b7de:	4770      	bx	lr
 800b7e0:	2000021c 	.word	0x2000021c

0800b7e4 <_close_r>:
 800b7e4:	b538      	push	{r3, r4, r5, lr}
 800b7e6:	4d06      	ldr	r5, [pc, #24]	@ (800b800 <_close_r+0x1c>)
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	4604      	mov	r4, r0
 800b7ec:	4608      	mov	r0, r1
 800b7ee:	602b      	str	r3, [r5, #0]
 800b7f0:	f7f8 fb0e 	bl	8003e10 <_close>
 800b7f4:	1c43      	adds	r3, r0, #1
 800b7f6:	d102      	bne.n	800b7fe <_close_r+0x1a>
 800b7f8:	682b      	ldr	r3, [r5, #0]
 800b7fa:	b103      	cbz	r3, 800b7fe <_close_r+0x1a>
 800b7fc:	6023      	str	r3, [r4, #0]
 800b7fe:	bd38      	pop	{r3, r4, r5, pc}
 800b800:	200057c0 	.word	0x200057c0

0800b804 <_reclaim_reent>:
 800b804:	4b29      	ldr	r3, [pc, #164]	@ (800b8ac <_reclaim_reent+0xa8>)
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	4283      	cmp	r3, r0
 800b80a:	b570      	push	{r4, r5, r6, lr}
 800b80c:	4604      	mov	r4, r0
 800b80e:	d04b      	beq.n	800b8a8 <_reclaim_reent+0xa4>
 800b810:	69c3      	ldr	r3, [r0, #28]
 800b812:	b1ab      	cbz	r3, 800b840 <_reclaim_reent+0x3c>
 800b814:	68db      	ldr	r3, [r3, #12]
 800b816:	b16b      	cbz	r3, 800b834 <_reclaim_reent+0x30>
 800b818:	2500      	movs	r5, #0
 800b81a:	69e3      	ldr	r3, [r4, #28]
 800b81c:	68db      	ldr	r3, [r3, #12]
 800b81e:	5959      	ldr	r1, [r3, r5]
 800b820:	2900      	cmp	r1, #0
 800b822:	d13b      	bne.n	800b89c <_reclaim_reent+0x98>
 800b824:	3504      	adds	r5, #4
 800b826:	2d80      	cmp	r5, #128	@ 0x80
 800b828:	d1f7      	bne.n	800b81a <_reclaim_reent+0x16>
 800b82a:	69e3      	ldr	r3, [r4, #28]
 800b82c:	4620      	mov	r0, r4
 800b82e:	68d9      	ldr	r1, [r3, #12]
 800b830:	f000 ff06 	bl	800c640 <_free_r>
 800b834:	69e3      	ldr	r3, [r4, #28]
 800b836:	6819      	ldr	r1, [r3, #0]
 800b838:	b111      	cbz	r1, 800b840 <_reclaim_reent+0x3c>
 800b83a:	4620      	mov	r0, r4
 800b83c:	f000 ff00 	bl	800c640 <_free_r>
 800b840:	6961      	ldr	r1, [r4, #20]
 800b842:	b111      	cbz	r1, 800b84a <_reclaim_reent+0x46>
 800b844:	4620      	mov	r0, r4
 800b846:	f000 fefb 	bl	800c640 <_free_r>
 800b84a:	69e1      	ldr	r1, [r4, #28]
 800b84c:	b111      	cbz	r1, 800b854 <_reclaim_reent+0x50>
 800b84e:	4620      	mov	r0, r4
 800b850:	f000 fef6 	bl	800c640 <_free_r>
 800b854:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b856:	b111      	cbz	r1, 800b85e <_reclaim_reent+0x5a>
 800b858:	4620      	mov	r0, r4
 800b85a:	f000 fef1 	bl	800c640 <_free_r>
 800b85e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b860:	b111      	cbz	r1, 800b868 <_reclaim_reent+0x64>
 800b862:	4620      	mov	r0, r4
 800b864:	f000 feec 	bl	800c640 <_free_r>
 800b868:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800b86a:	b111      	cbz	r1, 800b872 <_reclaim_reent+0x6e>
 800b86c:	4620      	mov	r0, r4
 800b86e:	f000 fee7 	bl	800c640 <_free_r>
 800b872:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b874:	b111      	cbz	r1, 800b87c <_reclaim_reent+0x78>
 800b876:	4620      	mov	r0, r4
 800b878:	f000 fee2 	bl	800c640 <_free_r>
 800b87c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800b87e:	b111      	cbz	r1, 800b886 <_reclaim_reent+0x82>
 800b880:	4620      	mov	r0, r4
 800b882:	f000 fedd 	bl	800c640 <_free_r>
 800b886:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b888:	b111      	cbz	r1, 800b890 <_reclaim_reent+0x8c>
 800b88a:	4620      	mov	r0, r4
 800b88c:	f000 fed8 	bl	800c640 <_free_r>
 800b890:	6a23      	ldr	r3, [r4, #32]
 800b892:	b14b      	cbz	r3, 800b8a8 <_reclaim_reent+0xa4>
 800b894:	4620      	mov	r0, r4
 800b896:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b89a:	4718      	bx	r3
 800b89c:	680e      	ldr	r6, [r1, #0]
 800b89e:	4620      	mov	r0, r4
 800b8a0:	f000 fece 	bl	800c640 <_free_r>
 800b8a4:	4631      	mov	r1, r6
 800b8a6:	e7bb      	b.n	800b820 <_reclaim_reent+0x1c>
 800b8a8:	bd70      	pop	{r4, r5, r6, pc}
 800b8aa:	bf00      	nop
 800b8ac:	200000dc 	.word	0x200000dc

0800b8b0 <_lseek_r>:
 800b8b0:	b538      	push	{r3, r4, r5, lr}
 800b8b2:	4d07      	ldr	r5, [pc, #28]	@ (800b8d0 <_lseek_r+0x20>)
 800b8b4:	4604      	mov	r4, r0
 800b8b6:	4608      	mov	r0, r1
 800b8b8:	4611      	mov	r1, r2
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	602a      	str	r2, [r5, #0]
 800b8be:	461a      	mov	r2, r3
 800b8c0:	f7f8 facd 	bl	8003e5e <_lseek>
 800b8c4:	1c43      	adds	r3, r0, #1
 800b8c6:	d102      	bne.n	800b8ce <_lseek_r+0x1e>
 800b8c8:	682b      	ldr	r3, [r5, #0]
 800b8ca:	b103      	cbz	r3, 800b8ce <_lseek_r+0x1e>
 800b8cc:	6023      	str	r3, [r4, #0]
 800b8ce:	bd38      	pop	{r3, r4, r5, pc}
 800b8d0:	200057c0 	.word	0x200057c0

0800b8d4 <_read_r>:
 800b8d4:	b538      	push	{r3, r4, r5, lr}
 800b8d6:	4d07      	ldr	r5, [pc, #28]	@ (800b8f4 <_read_r+0x20>)
 800b8d8:	4604      	mov	r4, r0
 800b8da:	4608      	mov	r0, r1
 800b8dc:	4611      	mov	r1, r2
 800b8de:	2200      	movs	r2, #0
 800b8e0:	602a      	str	r2, [r5, #0]
 800b8e2:	461a      	mov	r2, r3
 800b8e4:	f7f8 fa5b 	bl	8003d9e <_read>
 800b8e8:	1c43      	adds	r3, r0, #1
 800b8ea:	d102      	bne.n	800b8f2 <_read_r+0x1e>
 800b8ec:	682b      	ldr	r3, [r5, #0]
 800b8ee:	b103      	cbz	r3, 800b8f2 <_read_r+0x1e>
 800b8f0:	6023      	str	r3, [r4, #0]
 800b8f2:	bd38      	pop	{r3, r4, r5, pc}
 800b8f4:	200057c0 	.word	0x200057c0

0800b8f8 <_write_r>:
 800b8f8:	b538      	push	{r3, r4, r5, lr}
 800b8fa:	4d07      	ldr	r5, [pc, #28]	@ (800b918 <_write_r+0x20>)
 800b8fc:	4604      	mov	r4, r0
 800b8fe:	4608      	mov	r0, r1
 800b900:	4611      	mov	r1, r2
 800b902:	2200      	movs	r2, #0
 800b904:	602a      	str	r2, [r5, #0]
 800b906:	461a      	mov	r2, r3
 800b908:	f7f8 fa66 	bl	8003dd8 <_write>
 800b90c:	1c43      	adds	r3, r0, #1
 800b90e:	d102      	bne.n	800b916 <_write_r+0x1e>
 800b910:	682b      	ldr	r3, [r5, #0]
 800b912:	b103      	cbz	r3, 800b916 <_write_r+0x1e>
 800b914:	6023      	str	r3, [r4, #0]
 800b916:	bd38      	pop	{r3, r4, r5, pc}
 800b918:	200057c0 	.word	0x200057c0

0800b91c <__errno>:
 800b91c:	4b01      	ldr	r3, [pc, #4]	@ (800b924 <__errno+0x8>)
 800b91e:	6818      	ldr	r0, [r3, #0]
 800b920:	4770      	bx	lr
 800b922:	bf00      	nop
 800b924:	200000dc 	.word	0x200000dc

0800b928 <__libc_init_array>:
 800b928:	b570      	push	{r4, r5, r6, lr}
 800b92a:	4d0d      	ldr	r5, [pc, #52]	@ (800b960 <__libc_init_array+0x38>)
 800b92c:	4c0d      	ldr	r4, [pc, #52]	@ (800b964 <__libc_init_array+0x3c>)
 800b92e:	1b64      	subs	r4, r4, r5
 800b930:	10a4      	asrs	r4, r4, #2
 800b932:	2600      	movs	r6, #0
 800b934:	42a6      	cmp	r6, r4
 800b936:	d109      	bne.n	800b94c <__libc_init_array+0x24>
 800b938:	4d0b      	ldr	r5, [pc, #44]	@ (800b968 <__libc_init_array+0x40>)
 800b93a:	4c0c      	ldr	r4, [pc, #48]	@ (800b96c <__libc_init_array+0x44>)
 800b93c:	f002 f870 	bl	800da20 <_init>
 800b940:	1b64      	subs	r4, r4, r5
 800b942:	10a4      	asrs	r4, r4, #2
 800b944:	2600      	movs	r6, #0
 800b946:	42a6      	cmp	r6, r4
 800b948:	d105      	bne.n	800b956 <__libc_init_array+0x2e>
 800b94a:	bd70      	pop	{r4, r5, r6, pc}
 800b94c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b950:	4798      	blx	r3
 800b952:	3601      	adds	r6, #1
 800b954:	e7ee      	b.n	800b934 <__libc_init_array+0xc>
 800b956:	f855 3b04 	ldr.w	r3, [r5], #4
 800b95a:	4798      	blx	r3
 800b95c:	3601      	adds	r6, #1
 800b95e:	e7f2      	b.n	800b946 <__libc_init_array+0x1e>
 800b960:	0800e888 	.word	0x0800e888
 800b964:	0800e888 	.word	0x0800e888
 800b968:	0800e888 	.word	0x0800e888
 800b96c:	0800e88c 	.word	0x0800e88c

0800b970 <__retarget_lock_init_recursive>:
 800b970:	4770      	bx	lr

0800b972 <__retarget_lock_acquire_recursive>:
 800b972:	4770      	bx	lr

0800b974 <__retarget_lock_release_recursive>:
 800b974:	4770      	bx	lr

0800b976 <strcpy>:
 800b976:	4603      	mov	r3, r0
 800b978:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b97c:	f803 2b01 	strb.w	r2, [r3], #1
 800b980:	2a00      	cmp	r2, #0
 800b982:	d1f9      	bne.n	800b978 <strcpy+0x2>
 800b984:	4770      	bx	lr

0800b986 <memcpy>:
 800b986:	440a      	add	r2, r1
 800b988:	4291      	cmp	r1, r2
 800b98a:	f100 33ff 	add.w	r3, r0, #4294967295
 800b98e:	d100      	bne.n	800b992 <memcpy+0xc>
 800b990:	4770      	bx	lr
 800b992:	b510      	push	{r4, lr}
 800b994:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b998:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b99c:	4291      	cmp	r1, r2
 800b99e:	d1f9      	bne.n	800b994 <memcpy+0xe>
 800b9a0:	bd10      	pop	{r4, pc}

0800b9a2 <quorem>:
 800b9a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9a6:	6903      	ldr	r3, [r0, #16]
 800b9a8:	690c      	ldr	r4, [r1, #16]
 800b9aa:	42a3      	cmp	r3, r4
 800b9ac:	4607      	mov	r7, r0
 800b9ae:	db7e      	blt.n	800baae <quorem+0x10c>
 800b9b0:	3c01      	subs	r4, #1
 800b9b2:	f101 0814 	add.w	r8, r1, #20
 800b9b6:	00a3      	lsls	r3, r4, #2
 800b9b8:	f100 0514 	add.w	r5, r0, #20
 800b9bc:	9300      	str	r3, [sp, #0]
 800b9be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b9c2:	9301      	str	r3, [sp, #4]
 800b9c4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b9c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b9cc:	3301      	adds	r3, #1
 800b9ce:	429a      	cmp	r2, r3
 800b9d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b9d4:	fbb2 f6f3 	udiv	r6, r2, r3
 800b9d8:	d32e      	bcc.n	800ba38 <quorem+0x96>
 800b9da:	f04f 0a00 	mov.w	sl, #0
 800b9de:	46c4      	mov	ip, r8
 800b9e0:	46ae      	mov	lr, r5
 800b9e2:	46d3      	mov	fp, sl
 800b9e4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b9e8:	b298      	uxth	r0, r3
 800b9ea:	fb06 a000 	mla	r0, r6, r0, sl
 800b9ee:	0c02      	lsrs	r2, r0, #16
 800b9f0:	0c1b      	lsrs	r3, r3, #16
 800b9f2:	fb06 2303 	mla	r3, r6, r3, r2
 800b9f6:	f8de 2000 	ldr.w	r2, [lr]
 800b9fa:	b280      	uxth	r0, r0
 800b9fc:	b292      	uxth	r2, r2
 800b9fe:	1a12      	subs	r2, r2, r0
 800ba00:	445a      	add	r2, fp
 800ba02:	f8de 0000 	ldr.w	r0, [lr]
 800ba06:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ba0a:	b29b      	uxth	r3, r3
 800ba0c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ba10:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ba14:	b292      	uxth	r2, r2
 800ba16:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ba1a:	45e1      	cmp	r9, ip
 800ba1c:	f84e 2b04 	str.w	r2, [lr], #4
 800ba20:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ba24:	d2de      	bcs.n	800b9e4 <quorem+0x42>
 800ba26:	9b00      	ldr	r3, [sp, #0]
 800ba28:	58eb      	ldr	r3, [r5, r3]
 800ba2a:	b92b      	cbnz	r3, 800ba38 <quorem+0x96>
 800ba2c:	9b01      	ldr	r3, [sp, #4]
 800ba2e:	3b04      	subs	r3, #4
 800ba30:	429d      	cmp	r5, r3
 800ba32:	461a      	mov	r2, r3
 800ba34:	d32f      	bcc.n	800ba96 <quorem+0xf4>
 800ba36:	613c      	str	r4, [r7, #16]
 800ba38:	4638      	mov	r0, r7
 800ba3a:	f001 f97b 	bl	800cd34 <__mcmp>
 800ba3e:	2800      	cmp	r0, #0
 800ba40:	db25      	blt.n	800ba8e <quorem+0xec>
 800ba42:	4629      	mov	r1, r5
 800ba44:	2000      	movs	r0, #0
 800ba46:	f858 2b04 	ldr.w	r2, [r8], #4
 800ba4a:	f8d1 c000 	ldr.w	ip, [r1]
 800ba4e:	fa1f fe82 	uxth.w	lr, r2
 800ba52:	fa1f f38c 	uxth.w	r3, ip
 800ba56:	eba3 030e 	sub.w	r3, r3, lr
 800ba5a:	4403      	add	r3, r0
 800ba5c:	0c12      	lsrs	r2, r2, #16
 800ba5e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ba62:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ba66:	b29b      	uxth	r3, r3
 800ba68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ba6c:	45c1      	cmp	r9, r8
 800ba6e:	f841 3b04 	str.w	r3, [r1], #4
 800ba72:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ba76:	d2e6      	bcs.n	800ba46 <quorem+0xa4>
 800ba78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ba7c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ba80:	b922      	cbnz	r2, 800ba8c <quorem+0xea>
 800ba82:	3b04      	subs	r3, #4
 800ba84:	429d      	cmp	r5, r3
 800ba86:	461a      	mov	r2, r3
 800ba88:	d30b      	bcc.n	800baa2 <quorem+0x100>
 800ba8a:	613c      	str	r4, [r7, #16]
 800ba8c:	3601      	adds	r6, #1
 800ba8e:	4630      	mov	r0, r6
 800ba90:	b003      	add	sp, #12
 800ba92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba96:	6812      	ldr	r2, [r2, #0]
 800ba98:	3b04      	subs	r3, #4
 800ba9a:	2a00      	cmp	r2, #0
 800ba9c:	d1cb      	bne.n	800ba36 <quorem+0x94>
 800ba9e:	3c01      	subs	r4, #1
 800baa0:	e7c6      	b.n	800ba30 <quorem+0x8e>
 800baa2:	6812      	ldr	r2, [r2, #0]
 800baa4:	3b04      	subs	r3, #4
 800baa6:	2a00      	cmp	r2, #0
 800baa8:	d1ef      	bne.n	800ba8a <quorem+0xe8>
 800baaa:	3c01      	subs	r4, #1
 800baac:	e7ea      	b.n	800ba84 <quorem+0xe2>
 800baae:	2000      	movs	r0, #0
 800bab0:	e7ee      	b.n	800ba90 <quorem+0xee>
 800bab2:	0000      	movs	r0, r0
 800bab4:	0000      	movs	r0, r0
	...

0800bab8 <_dtoa_r>:
 800bab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800babc:	69c7      	ldr	r7, [r0, #28]
 800babe:	b099      	sub	sp, #100	@ 0x64
 800bac0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bac4:	ec55 4b10 	vmov	r4, r5, d0
 800bac8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800baca:	9109      	str	r1, [sp, #36]	@ 0x24
 800bacc:	4683      	mov	fp, r0
 800bace:	920e      	str	r2, [sp, #56]	@ 0x38
 800bad0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bad2:	b97f      	cbnz	r7, 800baf4 <_dtoa_r+0x3c>
 800bad4:	2010      	movs	r0, #16
 800bad6:	f000 fdfd 	bl	800c6d4 <malloc>
 800bada:	4602      	mov	r2, r0
 800badc:	f8cb 001c 	str.w	r0, [fp, #28]
 800bae0:	b920      	cbnz	r0, 800baec <_dtoa_r+0x34>
 800bae2:	4ba7      	ldr	r3, [pc, #668]	@ (800bd80 <_dtoa_r+0x2c8>)
 800bae4:	21ef      	movs	r1, #239	@ 0xef
 800bae6:	48a7      	ldr	r0, [pc, #668]	@ (800bd84 <_dtoa_r+0x2cc>)
 800bae8:	f001 fe30 	bl	800d74c <__assert_func>
 800baec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800baf0:	6007      	str	r7, [r0, #0]
 800baf2:	60c7      	str	r7, [r0, #12]
 800baf4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800baf8:	6819      	ldr	r1, [r3, #0]
 800bafa:	b159      	cbz	r1, 800bb14 <_dtoa_r+0x5c>
 800bafc:	685a      	ldr	r2, [r3, #4]
 800bafe:	604a      	str	r2, [r1, #4]
 800bb00:	2301      	movs	r3, #1
 800bb02:	4093      	lsls	r3, r2
 800bb04:	608b      	str	r3, [r1, #8]
 800bb06:	4658      	mov	r0, fp
 800bb08:	f000 feda 	bl	800c8c0 <_Bfree>
 800bb0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bb10:	2200      	movs	r2, #0
 800bb12:	601a      	str	r2, [r3, #0]
 800bb14:	1e2b      	subs	r3, r5, #0
 800bb16:	bfb9      	ittee	lt
 800bb18:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bb1c:	9303      	strlt	r3, [sp, #12]
 800bb1e:	2300      	movge	r3, #0
 800bb20:	6033      	strge	r3, [r6, #0]
 800bb22:	9f03      	ldr	r7, [sp, #12]
 800bb24:	4b98      	ldr	r3, [pc, #608]	@ (800bd88 <_dtoa_r+0x2d0>)
 800bb26:	bfbc      	itt	lt
 800bb28:	2201      	movlt	r2, #1
 800bb2a:	6032      	strlt	r2, [r6, #0]
 800bb2c:	43bb      	bics	r3, r7
 800bb2e:	d112      	bne.n	800bb56 <_dtoa_r+0x9e>
 800bb30:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bb32:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bb36:	6013      	str	r3, [r2, #0]
 800bb38:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bb3c:	4323      	orrs	r3, r4
 800bb3e:	f000 854d 	beq.w	800c5dc <_dtoa_r+0xb24>
 800bb42:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bb44:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800bd9c <_dtoa_r+0x2e4>
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	f000 854f 	beq.w	800c5ec <_dtoa_r+0xb34>
 800bb4e:	f10a 0303 	add.w	r3, sl, #3
 800bb52:	f000 bd49 	b.w	800c5e8 <_dtoa_r+0xb30>
 800bb56:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	ec51 0b17 	vmov	r0, r1, d7
 800bb60:	2300      	movs	r3, #0
 800bb62:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800bb66:	f7f4 ffaf 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb6a:	4680      	mov	r8, r0
 800bb6c:	b158      	cbz	r0, 800bb86 <_dtoa_r+0xce>
 800bb6e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bb70:	2301      	movs	r3, #1
 800bb72:	6013      	str	r3, [r2, #0]
 800bb74:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bb76:	b113      	cbz	r3, 800bb7e <_dtoa_r+0xc6>
 800bb78:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bb7a:	4b84      	ldr	r3, [pc, #528]	@ (800bd8c <_dtoa_r+0x2d4>)
 800bb7c:	6013      	str	r3, [r2, #0]
 800bb7e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800bda0 <_dtoa_r+0x2e8>
 800bb82:	f000 bd33 	b.w	800c5ec <_dtoa_r+0xb34>
 800bb86:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800bb8a:	aa16      	add	r2, sp, #88	@ 0x58
 800bb8c:	a917      	add	r1, sp, #92	@ 0x5c
 800bb8e:	4658      	mov	r0, fp
 800bb90:	f001 f980 	bl	800ce94 <__d2b>
 800bb94:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800bb98:	4681      	mov	r9, r0
 800bb9a:	2e00      	cmp	r6, #0
 800bb9c:	d077      	beq.n	800bc8e <_dtoa_r+0x1d6>
 800bb9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bba0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800bba4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bba8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bbac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bbb0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bbb4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bbb8:	4619      	mov	r1, r3
 800bbba:	2200      	movs	r2, #0
 800bbbc:	4b74      	ldr	r3, [pc, #464]	@ (800bd90 <_dtoa_r+0x2d8>)
 800bbbe:	f7f4 fb63 	bl	8000288 <__aeabi_dsub>
 800bbc2:	a369      	add	r3, pc, #420	@ (adr r3, 800bd68 <_dtoa_r+0x2b0>)
 800bbc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc8:	f7f4 fd16 	bl	80005f8 <__aeabi_dmul>
 800bbcc:	a368      	add	r3, pc, #416	@ (adr r3, 800bd70 <_dtoa_r+0x2b8>)
 800bbce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd2:	f7f4 fb5b 	bl	800028c <__adddf3>
 800bbd6:	4604      	mov	r4, r0
 800bbd8:	4630      	mov	r0, r6
 800bbda:	460d      	mov	r5, r1
 800bbdc:	f7f4 fca2 	bl	8000524 <__aeabi_i2d>
 800bbe0:	a365      	add	r3, pc, #404	@ (adr r3, 800bd78 <_dtoa_r+0x2c0>)
 800bbe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe6:	f7f4 fd07 	bl	80005f8 <__aeabi_dmul>
 800bbea:	4602      	mov	r2, r0
 800bbec:	460b      	mov	r3, r1
 800bbee:	4620      	mov	r0, r4
 800bbf0:	4629      	mov	r1, r5
 800bbf2:	f7f4 fb4b 	bl	800028c <__adddf3>
 800bbf6:	4604      	mov	r4, r0
 800bbf8:	460d      	mov	r5, r1
 800bbfa:	f7f4 ffad 	bl	8000b58 <__aeabi_d2iz>
 800bbfe:	2200      	movs	r2, #0
 800bc00:	4607      	mov	r7, r0
 800bc02:	2300      	movs	r3, #0
 800bc04:	4620      	mov	r0, r4
 800bc06:	4629      	mov	r1, r5
 800bc08:	f7f4 ff68 	bl	8000adc <__aeabi_dcmplt>
 800bc0c:	b140      	cbz	r0, 800bc20 <_dtoa_r+0x168>
 800bc0e:	4638      	mov	r0, r7
 800bc10:	f7f4 fc88 	bl	8000524 <__aeabi_i2d>
 800bc14:	4622      	mov	r2, r4
 800bc16:	462b      	mov	r3, r5
 800bc18:	f7f4 ff56 	bl	8000ac8 <__aeabi_dcmpeq>
 800bc1c:	b900      	cbnz	r0, 800bc20 <_dtoa_r+0x168>
 800bc1e:	3f01      	subs	r7, #1
 800bc20:	2f16      	cmp	r7, #22
 800bc22:	d851      	bhi.n	800bcc8 <_dtoa_r+0x210>
 800bc24:	4b5b      	ldr	r3, [pc, #364]	@ (800bd94 <_dtoa_r+0x2dc>)
 800bc26:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bc2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bc32:	f7f4 ff53 	bl	8000adc <__aeabi_dcmplt>
 800bc36:	2800      	cmp	r0, #0
 800bc38:	d048      	beq.n	800bccc <_dtoa_r+0x214>
 800bc3a:	3f01      	subs	r7, #1
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	9312      	str	r3, [sp, #72]	@ 0x48
 800bc40:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bc42:	1b9b      	subs	r3, r3, r6
 800bc44:	1e5a      	subs	r2, r3, #1
 800bc46:	bf44      	itt	mi
 800bc48:	f1c3 0801 	rsbmi	r8, r3, #1
 800bc4c:	2300      	movmi	r3, #0
 800bc4e:	9208      	str	r2, [sp, #32]
 800bc50:	bf54      	ite	pl
 800bc52:	f04f 0800 	movpl.w	r8, #0
 800bc56:	9308      	strmi	r3, [sp, #32]
 800bc58:	2f00      	cmp	r7, #0
 800bc5a:	db39      	blt.n	800bcd0 <_dtoa_r+0x218>
 800bc5c:	9b08      	ldr	r3, [sp, #32]
 800bc5e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800bc60:	443b      	add	r3, r7
 800bc62:	9308      	str	r3, [sp, #32]
 800bc64:	2300      	movs	r3, #0
 800bc66:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc6a:	2b09      	cmp	r3, #9
 800bc6c:	d864      	bhi.n	800bd38 <_dtoa_r+0x280>
 800bc6e:	2b05      	cmp	r3, #5
 800bc70:	bfc4      	itt	gt
 800bc72:	3b04      	subgt	r3, #4
 800bc74:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800bc76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc78:	f1a3 0302 	sub.w	r3, r3, #2
 800bc7c:	bfcc      	ite	gt
 800bc7e:	2400      	movgt	r4, #0
 800bc80:	2401      	movle	r4, #1
 800bc82:	2b03      	cmp	r3, #3
 800bc84:	d863      	bhi.n	800bd4e <_dtoa_r+0x296>
 800bc86:	e8df f003 	tbb	[pc, r3]
 800bc8a:	372a      	.short	0x372a
 800bc8c:	5535      	.short	0x5535
 800bc8e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800bc92:	441e      	add	r6, r3
 800bc94:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800bc98:	2b20      	cmp	r3, #32
 800bc9a:	bfc1      	itttt	gt
 800bc9c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800bca0:	409f      	lslgt	r7, r3
 800bca2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800bca6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800bcaa:	bfd6      	itet	le
 800bcac:	f1c3 0320 	rsble	r3, r3, #32
 800bcb0:	ea47 0003 	orrgt.w	r0, r7, r3
 800bcb4:	fa04 f003 	lslle.w	r0, r4, r3
 800bcb8:	f7f4 fc24 	bl	8000504 <__aeabi_ui2d>
 800bcbc:	2201      	movs	r2, #1
 800bcbe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800bcc2:	3e01      	subs	r6, #1
 800bcc4:	9214      	str	r2, [sp, #80]	@ 0x50
 800bcc6:	e777      	b.n	800bbb8 <_dtoa_r+0x100>
 800bcc8:	2301      	movs	r3, #1
 800bcca:	e7b8      	b.n	800bc3e <_dtoa_r+0x186>
 800bccc:	9012      	str	r0, [sp, #72]	@ 0x48
 800bcce:	e7b7      	b.n	800bc40 <_dtoa_r+0x188>
 800bcd0:	427b      	negs	r3, r7
 800bcd2:	930a      	str	r3, [sp, #40]	@ 0x28
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	eba8 0807 	sub.w	r8, r8, r7
 800bcda:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bcdc:	e7c4      	b.n	800bc68 <_dtoa_r+0x1b0>
 800bcde:	2300      	movs	r3, #0
 800bce0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bce2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	dc35      	bgt.n	800bd54 <_dtoa_r+0x29c>
 800bce8:	2301      	movs	r3, #1
 800bcea:	9300      	str	r3, [sp, #0]
 800bcec:	9307      	str	r3, [sp, #28]
 800bcee:	461a      	mov	r2, r3
 800bcf0:	920e      	str	r2, [sp, #56]	@ 0x38
 800bcf2:	e00b      	b.n	800bd0c <_dtoa_r+0x254>
 800bcf4:	2301      	movs	r3, #1
 800bcf6:	e7f3      	b.n	800bce0 <_dtoa_r+0x228>
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bcfc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bcfe:	18fb      	adds	r3, r7, r3
 800bd00:	9300      	str	r3, [sp, #0]
 800bd02:	3301      	adds	r3, #1
 800bd04:	2b01      	cmp	r3, #1
 800bd06:	9307      	str	r3, [sp, #28]
 800bd08:	bfb8      	it	lt
 800bd0a:	2301      	movlt	r3, #1
 800bd0c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800bd10:	2100      	movs	r1, #0
 800bd12:	2204      	movs	r2, #4
 800bd14:	f102 0514 	add.w	r5, r2, #20
 800bd18:	429d      	cmp	r5, r3
 800bd1a:	d91f      	bls.n	800bd5c <_dtoa_r+0x2a4>
 800bd1c:	6041      	str	r1, [r0, #4]
 800bd1e:	4658      	mov	r0, fp
 800bd20:	f000 fd8e 	bl	800c840 <_Balloc>
 800bd24:	4682      	mov	sl, r0
 800bd26:	2800      	cmp	r0, #0
 800bd28:	d13c      	bne.n	800bda4 <_dtoa_r+0x2ec>
 800bd2a:	4b1b      	ldr	r3, [pc, #108]	@ (800bd98 <_dtoa_r+0x2e0>)
 800bd2c:	4602      	mov	r2, r0
 800bd2e:	f240 11af 	movw	r1, #431	@ 0x1af
 800bd32:	e6d8      	b.n	800bae6 <_dtoa_r+0x2e>
 800bd34:	2301      	movs	r3, #1
 800bd36:	e7e0      	b.n	800bcfa <_dtoa_r+0x242>
 800bd38:	2401      	movs	r4, #1
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd3e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bd40:	f04f 33ff 	mov.w	r3, #4294967295
 800bd44:	9300      	str	r3, [sp, #0]
 800bd46:	9307      	str	r3, [sp, #28]
 800bd48:	2200      	movs	r2, #0
 800bd4a:	2312      	movs	r3, #18
 800bd4c:	e7d0      	b.n	800bcf0 <_dtoa_r+0x238>
 800bd4e:	2301      	movs	r3, #1
 800bd50:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bd52:	e7f5      	b.n	800bd40 <_dtoa_r+0x288>
 800bd54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd56:	9300      	str	r3, [sp, #0]
 800bd58:	9307      	str	r3, [sp, #28]
 800bd5a:	e7d7      	b.n	800bd0c <_dtoa_r+0x254>
 800bd5c:	3101      	adds	r1, #1
 800bd5e:	0052      	lsls	r2, r2, #1
 800bd60:	e7d8      	b.n	800bd14 <_dtoa_r+0x25c>
 800bd62:	bf00      	nop
 800bd64:	f3af 8000 	nop.w
 800bd68:	636f4361 	.word	0x636f4361
 800bd6c:	3fd287a7 	.word	0x3fd287a7
 800bd70:	8b60c8b3 	.word	0x8b60c8b3
 800bd74:	3fc68a28 	.word	0x3fc68a28
 800bd78:	509f79fb 	.word	0x509f79fb
 800bd7c:	3fd34413 	.word	0x3fd34413
 800bd80:	0800e54e 	.word	0x0800e54e
 800bd84:	0800e565 	.word	0x0800e565
 800bd88:	7ff00000 	.word	0x7ff00000
 800bd8c:	0800e51e 	.word	0x0800e51e
 800bd90:	3ff80000 	.word	0x3ff80000
 800bd94:	0800e660 	.word	0x0800e660
 800bd98:	0800e5bd 	.word	0x0800e5bd
 800bd9c:	0800e54a 	.word	0x0800e54a
 800bda0:	0800e51d 	.word	0x0800e51d
 800bda4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bda8:	6018      	str	r0, [r3, #0]
 800bdaa:	9b07      	ldr	r3, [sp, #28]
 800bdac:	2b0e      	cmp	r3, #14
 800bdae:	f200 80a4 	bhi.w	800befa <_dtoa_r+0x442>
 800bdb2:	2c00      	cmp	r4, #0
 800bdb4:	f000 80a1 	beq.w	800befa <_dtoa_r+0x442>
 800bdb8:	2f00      	cmp	r7, #0
 800bdba:	dd33      	ble.n	800be24 <_dtoa_r+0x36c>
 800bdbc:	4bad      	ldr	r3, [pc, #692]	@ (800c074 <_dtoa_r+0x5bc>)
 800bdbe:	f007 020f 	and.w	r2, r7, #15
 800bdc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bdc6:	ed93 7b00 	vldr	d7, [r3]
 800bdca:	05f8      	lsls	r0, r7, #23
 800bdcc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bdd0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bdd4:	d516      	bpl.n	800be04 <_dtoa_r+0x34c>
 800bdd6:	4ba8      	ldr	r3, [pc, #672]	@ (800c078 <_dtoa_r+0x5c0>)
 800bdd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bddc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bde0:	f7f4 fd34 	bl	800084c <__aeabi_ddiv>
 800bde4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bde8:	f004 040f 	and.w	r4, r4, #15
 800bdec:	2603      	movs	r6, #3
 800bdee:	4da2      	ldr	r5, [pc, #648]	@ (800c078 <_dtoa_r+0x5c0>)
 800bdf0:	b954      	cbnz	r4, 800be08 <_dtoa_r+0x350>
 800bdf2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bdf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdfa:	f7f4 fd27 	bl	800084c <__aeabi_ddiv>
 800bdfe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be02:	e028      	b.n	800be56 <_dtoa_r+0x39e>
 800be04:	2602      	movs	r6, #2
 800be06:	e7f2      	b.n	800bdee <_dtoa_r+0x336>
 800be08:	07e1      	lsls	r1, r4, #31
 800be0a:	d508      	bpl.n	800be1e <_dtoa_r+0x366>
 800be0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be10:	e9d5 2300 	ldrd	r2, r3, [r5]
 800be14:	f7f4 fbf0 	bl	80005f8 <__aeabi_dmul>
 800be18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800be1c:	3601      	adds	r6, #1
 800be1e:	1064      	asrs	r4, r4, #1
 800be20:	3508      	adds	r5, #8
 800be22:	e7e5      	b.n	800bdf0 <_dtoa_r+0x338>
 800be24:	f000 80d2 	beq.w	800bfcc <_dtoa_r+0x514>
 800be28:	427c      	negs	r4, r7
 800be2a:	4b92      	ldr	r3, [pc, #584]	@ (800c074 <_dtoa_r+0x5bc>)
 800be2c:	4d92      	ldr	r5, [pc, #584]	@ (800c078 <_dtoa_r+0x5c0>)
 800be2e:	f004 020f 	and.w	r2, r4, #15
 800be32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800be36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be3a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800be3e:	f7f4 fbdb 	bl	80005f8 <__aeabi_dmul>
 800be42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be46:	1124      	asrs	r4, r4, #4
 800be48:	2300      	movs	r3, #0
 800be4a:	2602      	movs	r6, #2
 800be4c:	2c00      	cmp	r4, #0
 800be4e:	f040 80b2 	bne.w	800bfb6 <_dtoa_r+0x4fe>
 800be52:	2b00      	cmp	r3, #0
 800be54:	d1d3      	bne.n	800bdfe <_dtoa_r+0x346>
 800be56:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800be58:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	f000 80b7 	beq.w	800bfd0 <_dtoa_r+0x518>
 800be62:	4b86      	ldr	r3, [pc, #536]	@ (800c07c <_dtoa_r+0x5c4>)
 800be64:	2200      	movs	r2, #0
 800be66:	4620      	mov	r0, r4
 800be68:	4629      	mov	r1, r5
 800be6a:	f7f4 fe37 	bl	8000adc <__aeabi_dcmplt>
 800be6e:	2800      	cmp	r0, #0
 800be70:	f000 80ae 	beq.w	800bfd0 <_dtoa_r+0x518>
 800be74:	9b07      	ldr	r3, [sp, #28]
 800be76:	2b00      	cmp	r3, #0
 800be78:	f000 80aa 	beq.w	800bfd0 <_dtoa_r+0x518>
 800be7c:	9b00      	ldr	r3, [sp, #0]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	dd37      	ble.n	800bef2 <_dtoa_r+0x43a>
 800be82:	1e7b      	subs	r3, r7, #1
 800be84:	9304      	str	r3, [sp, #16]
 800be86:	4620      	mov	r0, r4
 800be88:	4b7d      	ldr	r3, [pc, #500]	@ (800c080 <_dtoa_r+0x5c8>)
 800be8a:	2200      	movs	r2, #0
 800be8c:	4629      	mov	r1, r5
 800be8e:	f7f4 fbb3 	bl	80005f8 <__aeabi_dmul>
 800be92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be96:	9c00      	ldr	r4, [sp, #0]
 800be98:	3601      	adds	r6, #1
 800be9a:	4630      	mov	r0, r6
 800be9c:	f7f4 fb42 	bl	8000524 <__aeabi_i2d>
 800bea0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bea4:	f7f4 fba8 	bl	80005f8 <__aeabi_dmul>
 800bea8:	4b76      	ldr	r3, [pc, #472]	@ (800c084 <_dtoa_r+0x5cc>)
 800beaa:	2200      	movs	r2, #0
 800beac:	f7f4 f9ee 	bl	800028c <__adddf3>
 800beb0:	4605      	mov	r5, r0
 800beb2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800beb6:	2c00      	cmp	r4, #0
 800beb8:	f040 808d 	bne.w	800bfd6 <_dtoa_r+0x51e>
 800bebc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bec0:	4b71      	ldr	r3, [pc, #452]	@ (800c088 <_dtoa_r+0x5d0>)
 800bec2:	2200      	movs	r2, #0
 800bec4:	f7f4 f9e0 	bl	8000288 <__aeabi_dsub>
 800bec8:	4602      	mov	r2, r0
 800beca:	460b      	mov	r3, r1
 800becc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bed0:	462a      	mov	r2, r5
 800bed2:	4633      	mov	r3, r6
 800bed4:	f7f4 fe20 	bl	8000b18 <__aeabi_dcmpgt>
 800bed8:	2800      	cmp	r0, #0
 800beda:	f040 828b 	bne.w	800c3f4 <_dtoa_r+0x93c>
 800bede:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bee2:	462a      	mov	r2, r5
 800bee4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bee8:	f7f4 fdf8 	bl	8000adc <__aeabi_dcmplt>
 800beec:	2800      	cmp	r0, #0
 800beee:	f040 8128 	bne.w	800c142 <_dtoa_r+0x68a>
 800bef2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800bef6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800befa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800befc:	2b00      	cmp	r3, #0
 800befe:	f2c0 815a 	blt.w	800c1b6 <_dtoa_r+0x6fe>
 800bf02:	2f0e      	cmp	r7, #14
 800bf04:	f300 8157 	bgt.w	800c1b6 <_dtoa_r+0x6fe>
 800bf08:	4b5a      	ldr	r3, [pc, #360]	@ (800c074 <_dtoa_r+0x5bc>)
 800bf0a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bf0e:	ed93 7b00 	vldr	d7, [r3]
 800bf12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	ed8d 7b00 	vstr	d7, [sp]
 800bf1a:	da03      	bge.n	800bf24 <_dtoa_r+0x46c>
 800bf1c:	9b07      	ldr	r3, [sp, #28]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	f340 8101 	ble.w	800c126 <_dtoa_r+0x66e>
 800bf24:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bf28:	4656      	mov	r6, sl
 800bf2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf2e:	4620      	mov	r0, r4
 800bf30:	4629      	mov	r1, r5
 800bf32:	f7f4 fc8b 	bl	800084c <__aeabi_ddiv>
 800bf36:	f7f4 fe0f 	bl	8000b58 <__aeabi_d2iz>
 800bf3a:	4680      	mov	r8, r0
 800bf3c:	f7f4 faf2 	bl	8000524 <__aeabi_i2d>
 800bf40:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf44:	f7f4 fb58 	bl	80005f8 <__aeabi_dmul>
 800bf48:	4602      	mov	r2, r0
 800bf4a:	460b      	mov	r3, r1
 800bf4c:	4620      	mov	r0, r4
 800bf4e:	4629      	mov	r1, r5
 800bf50:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bf54:	f7f4 f998 	bl	8000288 <__aeabi_dsub>
 800bf58:	f806 4b01 	strb.w	r4, [r6], #1
 800bf5c:	9d07      	ldr	r5, [sp, #28]
 800bf5e:	eba6 040a 	sub.w	r4, r6, sl
 800bf62:	42a5      	cmp	r5, r4
 800bf64:	4602      	mov	r2, r0
 800bf66:	460b      	mov	r3, r1
 800bf68:	f040 8117 	bne.w	800c19a <_dtoa_r+0x6e2>
 800bf6c:	f7f4 f98e 	bl	800028c <__adddf3>
 800bf70:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf74:	4604      	mov	r4, r0
 800bf76:	460d      	mov	r5, r1
 800bf78:	f7f4 fdce 	bl	8000b18 <__aeabi_dcmpgt>
 800bf7c:	2800      	cmp	r0, #0
 800bf7e:	f040 80f9 	bne.w	800c174 <_dtoa_r+0x6bc>
 800bf82:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf86:	4620      	mov	r0, r4
 800bf88:	4629      	mov	r1, r5
 800bf8a:	f7f4 fd9d 	bl	8000ac8 <__aeabi_dcmpeq>
 800bf8e:	b118      	cbz	r0, 800bf98 <_dtoa_r+0x4e0>
 800bf90:	f018 0f01 	tst.w	r8, #1
 800bf94:	f040 80ee 	bne.w	800c174 <_dtoa_r+0x6bc>
 800bf98:	4649      	mov	r1, r9
 800bf9a:	4658      	mov	r0, fp
 800bf9c:	f000 fc90 	bl	800c8c0 <_Bfree>
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	7033      	strb	r3, [r6, #0]
 800bfa4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bfa6:	3701      	adds	r7, #1
 800bfa8:	601f      	str	r7, [r3, #0]
 800bfaa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	f000 831d 	beq.w	800c5ec <_dtoa_r+0xb34>
 800bfb2:	601e      	str	r6, [r3, #0]
 800bfb4:	e31a      	b.n	800c5ec <_dtoa_r+0xb34>
 800bfb6:	07e2      	lsls	r2, r4, #31
 800bfb8:	d505      	bpl.n	800bfc6 <_dtoa_r+0x50e>
 800bfba:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bfbe:	f7f4 fb1b 	bl	80005f8 <__aeabi_dmul>
 800bfc2:	3601      	adds	r6, #1
 800bfc4:	2301      	movs	r3, #1
 800bfc6:	1064      	asrs	r4, r4, #1
 800bfc8:	3508      	adds	r5, #8
 800bfca:	e73f      	b.n	800be4c <_dtoa_r+0x394>
 800bfcc:	2602      	movs	r6, #2
 800bfce:	e742      	b.n	800be56 <_dtoa_r+0x39e>
 800bfd0:	9c07      	ldr	r4, [sp, #28]
 800bfd2:	9704      	str	r7, [sp, #16]
 800bfd4:	e761      	b.n	800be9a <_dtoa_r+0x3e2>
 800bfd6:	4b27      	ldr	r3, [pc, #156]	@ (800c074 <_dtoa_r+0x5bc>)
 800bfd8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bfda:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bfde:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bfe2:	4454      	add	r4, sl
 800bfe4:	2900      	cmp	r1, #0
 800bfe6:	d053      	beq.n	800c090 <_dtoa_r+0x5d8>
 800bfe8:	4928      	ldr	r1, [pc, #160]	@ (800c08c <_dtoa_r+0x5d4>)
 800bfea:	2000      	movs	r0, #0
 800bfec:	f7f4 fc2e 	bl	800084c <__aeabi_ddiv>
 800bff0:	4633      	mov	r3, r6
 800bff2:	462a      	mov	r2, r5
 800bff4:	f7f4 f948 	bl	8000288 <__aeabi_dsub>
 800bff8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bffc:	4656      	mov	r6, sl
 800bffe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c002:	f7f4 fda9 	bl	8000b58 <__aeabi_d2iz>
 800c006:	4605      	mov	r5, r0
 800c008:	f7f4 fa8c 	bl	8000524 <__aeabi_i2d>
 800c00c:	4602      	mov	r2, r0
 800c00e:	460b      	mov	r3, r1
 800c010:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c014:	f7f4 f938 	bl	8000288 <__aeabi_dsub>
 800c018:	3530      	adds	r5, #48	@ 0x30
 800c01a:	4602      	mov	r2, r0
 800c01c:	460b      	mov	r3, r1
 800c01e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c022:	f806 5b01 	strb.w	r5, [r6], #1
 800c026:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c02a:	f7f4 fd57 	bl	8000adc <__aeabi_dcmplt>
 800c02e:	2800      	cmp	r0, #0
 800c030:	d171      	bne.n	800c116 <_dtoa_r+0x65e>
 800c032:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c036:	4911      	ldr	r1, [pc, #68]	@ (800c07c <_dtoa_r+0x5c4>)
 800c038:	2000      	movs	r0, #0
 800c03a:	f7f4 f925 	bl	8000288 <__aeabi_dsub>
 800c03e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c042:	f7f4 fd4b 	bl	8000adc <__aeabi_dcmplt>
 800c046:	2800      	cmp	r0, #0
 800c048:	f040 8095 	bne.w	800c176 <_dtoa_r+0x6be>
 800c04c:	42a6      	cmp	r6, r4
 800c04e:	f43f af50 	beq.w	800bef2 <_dtoa_r+0x43a>
 800c052:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c056:	4b0a      	ldr	r3, [pc, #40]	@ (800c080 <_dtoa_r+0x5c8>)
 800c058:	2200      	movs	r2, #0
 800c05a:	f7f4 facd 	bl	80005f8 <__aeabi_dmul>
 800c05e:	4b08      	ldr	r3, [pc, #32]	@ (800c080 <_dtoa_r+0x5c8>)
 800c060:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c064:	2200      	movs	r2, #0
 800c066:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c06a:	f7f4 fac5 	bl	80005f8 <__aeabi_dmul>
 800c06e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c072:	e7c4      	b.n	800bffe <_dtoa_r+0x546>
 800c074:	0800e660 	.word	0x0800e660
 800c078:	0800e638 	.word	0x0800e638
 800c07c:	3ff00000 	.word	0x3ff00000
 800c080:	40240000 	.word	0x40240000
 800c084:	401c0000 	.word	0x401c0000
 800c088:	40140000 	.word	0x40140000
 800c08c:	3fe00000 	.word	0x3fe00000
 800c090:	4631      	mov	r1, r6
 800c092:	4628      	mov	r0, r5
 800c094:	f7f4 fab0 	bl	80005f8 <__aeabi_dmul>
 800c098:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c09c:	9415      	str	r4, [sp, #84]	@ 0x54
 800c09e:	4656      	mov	r6, sl
 800c0a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0a4:	f7f4 fd58 	bl	8000b58 <__aeabi_d2iz>
 800c0a8:	4605      	mov	r5, r0
 800c0aa:	f7f4 fa3b 	bl	8000524 <__aeabi_i2d>
 800c0ae:	4602      	mov	r2, r0
 800c0b0:	460b      	mov	r3, r1
 800c0b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0b6:	f7f4 f8e7 	bl	8000288 <__aeabi_dsub>
 800c0ba:	3530      	adds	r5, #48	@ 0x30
 800c0bc:	f806 5b01 	strb.w	r5, [r6], #1
 800c0c0:	4602      	mov	r2, r0
 800c0c2:	460b      	mov	r3, r1
 800c0c4:	42a6      	cmp	r6, r4
 800c0c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c0ca:	f04f 0200 	mov.w	r2, #0
 800c0ce:	d124      	bne.n	800c11a <_dtoa_r+0x662>
 800c0d0:	4bac      	ldr	r3, [pc, #688]	@ (800c384 <_dtoa_r+0x8cc>)
 800c0d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c0d6:	f7f4 f8d9 	bl	800028c <__adddf3>
 800c0da:	4602      	mov	r2, r0
 800c0dc:	460b      	mov	r3, r1
 800c0de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0e2:	f7f4 fd19 	bl	8000b18 <__aeabi_dcmpgt>
 800c0e6:	2800      	cmp	r0, #0
 800c0e8:	d145      	bne.n	800c176 <_dtoa_r+0x6be>
 800c0ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c0ee:	49a5      	ldr	r1, [pc, #660]	@ (800c384 <_dtoa_r+0x8cc>)
 800c0f0:	2000      	movs	r0, #0
 800c0f2:	f7f4 f8c9 	bl	8000288 <__aeabi_dsub>
 800c0f6:	4602      	mov	r2, r0
 800c0f8:	460b      	mov	r3, r1
 800c0fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0fe:	f7f4 fced 	bl	8000adc <__aeabi_dcmplt>
 800c102:	2800      	cmp	r0, #0
 800c104:	f43f aef5 	beq.w	800bef2 <_dtoa_r+0x43a>
 800c108:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c10a:	1e73      	subs	r3, r6, #1
 800c10c:	9315      	str	r3, [sp, #84]	@ 0x54
 800c10e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c112:	2b30      	cmp	r3, #48	@ 0x30
 800c114:	d0f8      	beq.n	800c108 <_dtoa_r+0x650>
 800c116:	9f04      	ldr	r7, [sp, #16]
 800c118:	e73e      	b.n	800bf98 <_dtoa_r+0x4e0>
 800c11a:	4b9b      	ldr	r3, [pc, #620]	@ (800c388 <_dtoa_r+0x8d0>)
 800c11c:	f7f4 fa6c 	bl	80005f8 <__aeabi_dmul>
 800c120:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c124:	e7bc      	b.n	800c0a0 <_dtoa_r+0x5e8>
 800c126:	d10c      	bne.n	800c142 <_dtoa_r+0x68a>
 800c128:	4b98      	ldr	r3, [pc, #608]	@ (800c38c <_dtoa_r+0x8d4>)
 800c12a:	2200      	movs	r2, #0
 800c12c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c130:	f7f4 fa62 	bl	80005f8 <__aeabi_dmul>
 800c134:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c138:	f7f4 fce4 	bl	8000b04 <__aeabi_dcmpge>
 800c13c:	2800      	cmp	r0, #0
 800c13e:	f000 8157 	beq.w	800c3f0 <_dtoa_r+0x938>
 800c142:	2400      	movs	r4, #0
 800c144:	4625      	mov	r5, r4
 800c146:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c148:	43db      	mvns	r3, r3
 800c14a:	9304      	str	r3, [sp, #16]
 800c14c:	4656      	mov	r6, sl
 800c14e:	2700      	movs	r7, #0
 800c150:	4621      	mov	r1, r4
 800c152:	4658      	mov	r0, fp
 800c154:	f000 fbb4 	bl	800c8c0 <_Bfree>
 800c158:	2d00      	cmp	r5, #0
 800c15a:	d0dc      	beq.n	800c116 <_dtoa_r+0x65e>
 800c15c:	b12f      	cbz	r7, 800c16a <_dtoa_r+0x6b2>
 800c15e:	42af      	cmp	r7, r5
 800c160:	d003      	beq.n	800c16a <_dtoa_r+0x6b2>
 800c162:	4639      	mov	r1, r7
 800c164:	4658      	mov	r0, fp
 800c166:	f000 fbab 	bl	800c8c0 <_Bfree>
 800c16a:	4629      	mov	r1, r5
 800c16c:	4658      	mov	r0, fp
 800c16e:	f000 fba7 	bl	800c8c0 <_Bfree>
 800c172:	e7d0      	b.n	800c116 <_dtoa_r+0x65e>
 800c174:	9704      	str	r7, [sp, #16]
 800c176:	4633      	mov	r3, r6
 800c178:	461e      	mov	r6, r3
 800c17a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c17e:	2a39      	cmp	r2, #57	@ 0x39
 800c180:	d107      	bne.n	800c192 <_dtoa_r+0x6da>
 800c182:	459a      	cmp	sl, r3
 800c184:	d1f8      	bne.n	800c178 <_dtoa_r+0x6c0>
 800c186:	9a04      	ldr	r2, [sp, #16]
 800c188:	3201      	adds	r2, #1
 800c18a:	9204      	str	r2, [sp, #16]
 800c18c:	2230      	movs	r2, #48	@ 0x30
 800c18e:	f88a 2000 	strb.w	r2, [sl]
 800c192:	781a      	ldrb	r2, [r3, #0]
 800c194:	3201      	adds	r2, #1
 800c196:	701a      	strb	r2, [r3, #0]
 800c198:	e7bd      	b.n	800c116 <_dtoa_r+0x65e>
 800c19a:	4b7b      	ldr	r3, [pc, #492]	@ (800c388 <_dtoa_r+0x8d0>)
 800c19c:	2200      	movs	r2, #0
 800c19e:	f7f4 fa2b 	bl	80005f8 <__aeabi_dmul>
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	4604      	mov	r4, r0
 800c1a8:	460d      	mov	r5, r1
 800c1aa:	f7f4 fc8d 	bl	8000ac8 <__aeabi_dcmpeq>
 800c1ae:	2800      	cmp	r0, #0
 800c1b0:	f43f aebb 	beq.w	800bf2a <_dtoa_r+0x472>
 800c1b4:	e6f0      	b.n	800bf98 <_dtoa_r+0x4e0>
 800c1b6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c1b8:	2a00      	cmp	r2, #0
 800c1ba:	f000 80db 	beq.w	800c374 <_dtoa_r+0x8bc>
 800c1be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c1c0:	2a01      	cmp	r2, #1
 800c1c2:	f300 80bf 	bgt.w	800c344 <_dtoa_r+0x88c>
 800c1c6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c1c8:	2a00      	cmp	r2, #0
 800c1ca:	f000 80b7 	beq.w	800c33c <_dtoa_r+0x884>
 800c1ce:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c1d2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c1d4:	4646      	mov	r6, r8
 800c1d6:	9a08      	ldr	r2, [sp, #32]
 800c1d8:	2101      	movs	r1, #1
 800c1da:	441a      	add	r2, r3
 800c1dc:	4658      	mov	r0, fp
 800c1de:	4498      	add	r8, r3
 800c1e0:	9208      	str	r2, [sp, #32]
 800c1e2:	f000 fc21 	bl	800ca28 <__i2b>
 800c1e6:	4605      	mov	r5, r0
 800c1e8:	b15e      	cbz	r6, 800c202 <_dtoa_r+0x74a>
 800c1ea:	9b08      	ldr	r3, [sp, #32]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	dd08      	ble.n	800c202 <_dtoa_r+0x74a>
 800c1f0:	42b3      	cmp	r3, r6
 800c1f2:	9a08      	ldr	r2, [sp, #32]
 800c1f4:	bfa8      	it	ge
 800c1f6:	4633      	movge	r3, r6
 800c1f8:	eba8 0803 	sub.w	r8, r8, r3
 800c1fc:	1af6      	subs	r6, r6, r3
 800c1fe:	1ad3      	subs	r3, r2, r3
 800c200:	9308      	str	r3, [sp, #32]
 800c202:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c204:	b1f3      	cbz	r3, 800c244 <_dtoa_r+0x78c>
 800c206:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c208:	2b00      	cmp	r3, #0
 800c20a:	f000 80b7 	beq.w	800c37c <_dtoa_r+0x8c4>
 800c20e:	b18c      	cbz	r4, 800c234 <_dtoa_r+0x77c>
 800c210:	4629      	mov	r1, r5
 800c212:	4622      	mov	r2, r4
 800c214:	4658      	mov	r0, fp
 800c216:	f000 fcc7 	bl	800cba8 <__pow5mult>
 800c21a:	464a      	mov	r2, r9
 800c21c:	4601      	mov	r1, r0
 800c21e:	4605      	mov	r5, r0
 800c220:	4658      	mov	r0, fp
 800c222:	f000 fc17 	bl	800ca54 <__multiply>
 800c226:	4649      	mov	r1, r9
 800c228:	9004      	str	r0, [sp, #16]
 800c22a:	4658      	mov	r0, fp
 800c22c:	f000 fb48 	bl	800c8c0 <_Bfree>
 800c230:	9b04      	ldr	r3, [sp, #16]
 800c232:	4699      	mov	r9, r3
 800c234:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c236:	1b1a      	subs	r2, r3, r4
 800c238:	d004      	beq.n	800c244 <_dtoa_r+0x78c>
 800c23a:	4649      	mov	r1, r9
 800c23c:	4658      	mov	r0, fp
 800c23e:	f000 fcb3 	bl	800cba8 <__pow5mult>
 800c242:	4681      	mov	r9, r0
 800c244:	2101      	movs	r1, #1
 800c246:	4658      	mov	r0, fp
 800c248:	f000 fbee 	bl	800ca28 <__i2b>
 800c24c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c24e:	4604      	mov	r4, r0
 800c250:	2b00      	cmp	r3, #0
 800c252:	f000 81cf 	beq.w	800c5f4 <_dtoa_r+0xb3c>
 800c256:	461a      	mov	r2, r3
 800c258:	4601      	mov	r1, r0
 800c25a:	4658      	mov	r0, fp
 800c25c:	f000 fca4 	bl	800cba8 <__pow5mult>
 800c260:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c262:	2b01      	cmp	r3, #1
 800c264:	4604      	mov	r4, r0
 800c266:	f300 8095 	bgt.w	800c394 <_dtoa_r+0x8dc>
 800c26a:	9b02      	ldr	r3, [sp, #8]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	f040 8087 	bne.w	800c380 <_dtoa_r+0x8c8>
 800c272:	9b03      	ldr	r3, [sp, #12]
 800c274:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c278:	2b00      	cmp	r3, #0
 800c27a:	f040 8089 	bne.w	800c390 <_dtoa_r+0x8d8>
 800c27e:	9b03      	ldr	r3, [sp, #12]
 800c280:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c284:	0d1b      	lsrs	r3, r3, #20
 800c286:	051b      	lsls	r3, r3, #20
 800c288:	b12b      	cbz	r3, 800c296 <_dtoa_r+0x7de>
 800c28a:	9b08      	ldr	r3, [sp, #32]
 800c28c:	3301      	adds	r3, #1
 800c28e:	9308      	str	r3, [sp, #32]
 800c290:	f108 0801 	add.w	r8, r8, #1
 800c294:	2301      	movs	r3, #1
 800c296:	930a      	str	r3, [sp, #40]	@ 0x28
 800c298:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	f000 81b0 	beq.w	800c600 <_dtoa_r+0xb48>
 800c2a0:	6923      	ldr	r3, [r4, #16]
 800c2a2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c2a6:	6918      	ldr	r0, [r3, #16]
 800c2a8:	f000 fb72 	bl	800c990 <__hi0bits>
 800c2ac:	f1c0 0020 	rsb	r0, r0, #32
 800c2b0:	9b08      	ldr	r3, [sp, #32]
 800c2b2:	4418      	add	r0, r3
 800c2b4:	f010 001f 	ands.w	r0, r0, #31
 800c2b8:	d077      	beq.n	800c3aa <_dtoa_r+0x8f2>
 800c2ba:	f1c0 0320 	rsb	r3, r0, #32
 800c2be:	2b04      	cmp	r3, #4
 800c2c0:	dd6b      	ble.n	800c39a <_dtoa_r+0x8e2>
 800c2c2:	9b08      	ldr	r3, [sp, #32]
 800c2c4:	f1c0 001c 	rsb	r0, r0, #28
 800c2c8:	4403      	add	r3, r0
 800c2ca:	4480      	add	r8, r0
 800c2cc:	4406      	add	r6, r0
 800c2ce:	9308      	str	r3, [sp, #32]
 800c2d0:	f1b8 0f00 	cmp.w	r8, #0
 800c2d4:	dd05      	ble.n	800c2e2 <_dtoa_r+0x82a>
 800c2d6:	4649      	mov	r1, r9
 800c2d8:	4642      	mov	r2, r8
 800c2da:	4658      	mov	r0, fp
 800c2dc:	f000 fcbe 	bl	800cc5c <__lshift>
 800c2e0:	4681      	mov	r9, r0
 800c2e2:	9b08      	ldr	r3, [sp, #32]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	dd05      	ble.n	800c2f4 <_dtoa_r+0x83c>
 800c2e8:	4621      	mov	r1, r4
 800c2ea:	461a      	mov	r2, r3
 800c2ec:	4658      	mov	r0, fp
 800c2ee:	f000 fcb5 	bl	800cc5c <__lshift>
 800c2f2:	4604      	mov	r4, r0
 800c2f4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d059      	beq.n	800c3ae <_dtoa_r+0x8f6>
 800c2fa:	4621      	mov	r1, r4
 800c2fc:	4648      	mov	r0, r9
 800c2fe:	f000 fd19 	bl	800cd34 <__mcmp>
 800c302:	2800      	cmp	r0, #0
 800c304:	da53      	bge.n	800c3ae <_dtoa_r+0x8f6>
 800c306:	1e7b      	subs	r3, r7, #1
 800c308:	9304      	str	r3, [sp, #16]
 800c30a:	4649      	mov	r1, r9
 800c30c:	2300      	movs	r3, #0
 800c30e:	220a      	movs	r2, #10
 800c310:	4658      	mov	r0, fp
 800c312:	f000 faf7 	bl	800c904 <__multadd>
 800c316:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c318:	4681      	mov	r9, r0
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	f000 8172 	beq.w	800c604 <_dtoa_r+0xb4c>
 800c320:	2300      	movs	r3, #0
 800c322:	4629      	mov	r1, r5
 800c324:	220a      	movs	r2, #10
 800c326:	4658      	mov	r0, fp
 800c328:	f000 faec 	bl	800c904 <__multadd>
 800c32c:	9b00      	ldr	r3, [sp, #0]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	4605      	mov	r5, r0
 800c332:	dc67      	bgt.n	800c404 <_dtoa_r+0x94c>
 800c334:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c336:	2b02      	cmp	r3, #2
 800c338:	dc41      	bgt.n	800c3be <_dtoa_r+0x906>
 800c33a:	e063      	b.n	800c404 <_dtoa_r+0x94c>
 800c33c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c33e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c342:	e746      	b.n	800c1d2 <_dtoa_r+0x71a>
 800c344:	9b07      	ldr	r3, [sp, #28]
 800c346:	1e5c      	subs	r4, r3, #1
 800c348:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c34a:	42a3      	cmp	r3, r4
 800c34c:	bfbf      	itttt	lt
 800c34e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c350:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c352:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c354:	1ae3      	sublt	r3, r4, r3
 800c356:	bfb4      	ite	lt
 800c358:	18d2      	addlt	r2, r2, r3
 800c35a:	1b1c      	subge	r4, r3, r4
 800c35c:	9b07      	ldr	r3, [sp, #28]
 800c35e:	bfbc      	itt	lt
 800c360:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c362:	2400      	movlt	r4, #0
 800c364:	2b00      	cmp	r3, #0
 800c366:	bfb5      	itete	lt
 800c368:	eba8 0603 	sublt.w	r6, r8, r3
 800c36c:	9b07      	ldrge	r3, [sp, #28]
 800c36e:	2300      	movlt	r3, #0
 800c370:	4646      	movge	r6, r8
 800c372:	e730      	b.n	800c1d6 <_dtoa_r+0x71e>
 800c374:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c376:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c378:	4646      	mov	r6, r8
 800c37a:	e735      	b.n	800c1e8 <_dtoa_r+0x730>
 800c37c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c37e:	e75c      	b.n	800c23a <_dtoa_r+0x782>
 800c380:	2300      	movs	r3, #0
 800c382:	e788      	b.n	800c296 <_dtoa_r+0x7de>
 800c384:	3fe00000 	.word	0x3fe00000
 800c388:	40240000 	.word	0x40240000
 800c38c:	40140000 	.word	0x40140000
 800c390:	9b02      	ldr	r3, [sp, #8]
 800c392:	e780      	b.n	800c296 <_dtoa_r+0x7de>
 800c394:	2300      	movs	r3, #0
 800c396:	930a      	str	r3, [sp, #40]	@ 0x28
 800c398:	e782      	b.n	800c2a0 <_dtoa_r+0x7e8>
 800c39a:	d099      	beq.n	800c2d0 <_dtoa_r+0x818>
 800c39c:	9a08      	ldr	r2, [sp, #32]
 800c39e:	331c      	adds	r3, #28
 800c3a0:	441a      	add	r2, r3
 800c3a2:	4498      	add	r8, r3
 800c3a4:	441e      	add	r6, r3
 800c3a6:	9208      	str	r2, [sp, #32]
 800c3a8:	e792      	b.n	800c2d0 <_dtoa_r+0x818>
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	e7f6      	b.n	800c39c <_dtoa_r+0x8e4>
 800c3ae:	9b07      	ldr	r3, [sp, #28]
 800c3b0:	9704      	str	r7, [sp, #16]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	dc20      	bgt.n	800c3f8 <_dtoa_r+0x940>
 800c3b6:	9300      	str	r3, [sp, #0]
 800c3b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3ba:	2b02      	cmp	r3, #2
 800c3bc:	dd1e      	ble.n	800c3fc <_dtoa_r+0x944>
 800c3be:	9b00      	ldr	r3, [sp, #0]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	f47f aec0 	bne.w	800c146 <_dtoa_r+0x68e>
 800c3c6:	4621      	mov	r1, r4
 800c3c8:	2205      	movs	r2, #5
 800c3ca:	4658      	mov	r0, fp
 800c3cc:	f000 fa9a 	bl	800c904 <__multadd>
 800c3d0:	4601      	mov	r1, r0
 800c3d2:	4604      	mov	r4, r0
 800c3d4:	4648      	mov	r0, r9
 800c3d6:	f000 fcad 	bl	800cd34 <__mcmp>
 800c3da:	2800      	cmp	r0, #0
 800c3dc:	f77f aeb3 	ble.w	800c146 <_dtoa_r+0x68e>
 800c3e0:	4656      	mov	r6, sl
 800c3e2:	2331      	movs	r3, #49	@ 0x31
 800c3e4:	f806 3b01 	strb.w	r3, [r6], #1
 800c3e8:	9b04      	ldr	r3, [sp, #16]
 800c3ea:	3301      	adds	r3, #1
 800c3ec:	9304      	str	r3, [sp, #16]
 800c3ee:	e6ae      	b.n	800c14e <_dtoa_r+0x696>
 800c3f0:	9c07      	ldr	r4, [sp, #28]
 800c3f2:	9704      	str	r7, [sp, #16]
 800c3f4:	4625      	mov	r5, r4
 800c3f6:	e7f3      	b.n	800c3e0 <_dtoa_r+0x928>
 800c3f8:	9b07      	ldr	r3, [sp, #28]
 800c3fa:	9300      	str	r3, [sp, #0]
 800c3fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	f000 8104 	beq.w	800c60c <_dtoa_r+0xb54>
 800c404:	2e00      	cmp	r6, #0
 800c406:	dd05      	ble.n	800c414 <_dtoa_r+0x95c>
 800c408:	4629      	mov	r1, r5
 800c40a:	4632      	mov	r2, r6
 800c40c:	4658      	mov	r0, fp
 800c40e:	f000 fc25 	bl	800cc5c <__lshift>
 800c412:	4605      	mov	r5, r0
 800c414:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c416:	2b00      	cmp	r3, #0
 800c418:	d05a      	beq.n	800c4d0 <_dtoa_r+0xa18>
 800c41a:	6869      	ldr	r1, [r5, #4]
 800c41c:	4658      	mov	r0, fp
 800c41e:	f000 fa0f 	bl	800c840 <_Balloc>
 800c422:	4606      	mov	r6, r0
 800c424:	b928      	cbnz	r0, 800c432 <_dtoa_r+0x97a>
 800c426:	4b84      	ldr	r3, [pc, #528]	@ (800c638 <_dtoa_r+0xb80>)
 800c428:	4602      	mov	r2, r0
 800c42a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c42e:	f7ff bb5a 	b.w	800bae6 <_dtoa_r+0x2e>
 800c432:	692a      	ldr	r2, [r5, #16]
 800c434:	3202      	adds	r2, #2
 800c436:	0092      	lsls	r2, r2, #2
 800c438:	f105 010c 	add.w	r1, r5, #12
 800c43c:	300c      	adds	r0, #12
 800c43e:	f7ff faa2 	bl	800b986 <memcpy>
 800c442:	2201      	movs	r2, #1
 800c444:	4631      	mov	r1, r6
 800c446:	4658      	mov	r0, fp
 800c448:	f000 fc08 	bl	800cc5c <__lshift>
 800c44c:	f10a 0301 	add.w	r3, sl, #1
 800c450:	9307      	str	r3, [sp, #28]
 800c452:	9b00      	ldr	r3, [sp, #0]
 800c454:	4453      	add	r3, sl
 800c456:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c458:	9b02      	ldr	r3, [sp, #8]
 800c45a:	f003 0301 	and.w	r3, r3, #1
 800c45e:	462f      	mov	r7, r5
 800c460:	930a      	str	r3, [sp, #40]	@ 0x28
 800c462:	4605      	mov	r5, r0
 800c464:	9b07      	ldr	r3, [sp, #28]
 800c466:	4621      	mov	r1, r4
 800c468:	3b01      	subs	r3, #1
 800c46a:	4648      	mov	r0, r9
 800c46c:	9300      	str	r3, [sp, #0]
 800c46e:	f7ff fa98 	bl	800b9a2 <quorem>
 800c472:	4639      	mov	r1, r7
 800c474:	9002      	str	r0, [sp, #8]
 800c476:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c47a:	4648      	mov	r0, r9
 800c47c:	f000 fc5a 	bl	800cd34 <__mcmp>
 800c480:	462a      	mov	r2, r5
 800c482:	9008      	str	r0, [sp, #32]
 800c484:	4621      	mov	r1, r4
 800c486:	4658      	mov	r0, fp
 800c488:	f000 fc70 	bl	800cd6c <__mdiff>
 800c48c:	68c2      	ldr	r2, [r0, #12]
 800c48e:	4606      	mov	r6, r0
 800c490:	bb02      	cbnz	r2, 800c4d4 <_dtoa_r+0xa1c>
 800c492:	4601      	mov	r1, r0
 800c494:	4648      	mov	r0, r9
 800c496:	f000 fc4d 	bl	800cd34 <__mcmp>
 800c49a:	4602      	mov	r2, r0
 800c49c:	4631      	mov	r1, r6
 800c49e:	4658      	mov	r0, fp
 800c4a0:	920e      	str	r2, [sp, #56]	@ 0x38
 800c4a2:	f000 fa0d 	bl	800c8c0 <_Bfree>
 800c4a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c4aa:	9e07      	ldr	r6, [sp, #28]
 800c4ac:	ea43 0102 	orr.w	r1, r3, r2
 800c4b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c4b2:	4319      	orrs	r1, r3
 800c4b4:	d110      	bne.n	800c4d8 <_dtoa_r+0xa20>
 800c4b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c4ba:	d029      	beq.n	800c510 <_dtoa_r+0xa58>
 800c4bc:	9b08      	ldr	r3, [sp, #32]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	dd02      	ble.n	800c4c8 <_dtoa_r+0xa10>
 800c4c2:	9b02      	ldr	r3, [sp, #8]
 800c4c4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c4c8:	9b00      	ldr	r3, [sp, #0]
 800c4ca:	f883 8000 	strb.w	r8, [r3]
 800c4ce:	e63f      	b.n	800c150 <_dtoa_r+0x698>
 800c4d0:	4628      	mov	r0, r5
 800c4d2:	e7bb      	b.n	800c44c <_dtoa_r+0x994>
 800c4d4:	2201      	movs	r2, #1
 800c4d6:	e7e1      	b.n	800c49c <_dtoa_r+0x9e4>
 800c4d8:	9b08      	ldr	r3, [sp, #32]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	db04      	blt.n	800c4e8 <_dtoa_r+0xa30>
 800c4de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c4e0:	430b      	orrs	r3, r1
 800c4e2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c4e4:	430b      	orrs	r3, r1
 800c4e6:	d120      	bne.n	800c52a <_dtoa_r+0xa72>
 800c4e8:	2a00      	cmp	r2, #0
 800c4ea:	dded      	ble.n	800c4c8 <_dtoa_r+0xa10>
 800c4ec:	4649      	mov	r1, r9
 800c4ee:	2201      	movs	r2, #1
 800c4f0:	4658      	mov	r0, fp
 800c4f2:	f000 fbb3 	bl	800cc5c <__lshift>
 800c4f6:	4621      	mov	r1, r4
 800c4f8:	4681      	mov	r9, r0
 800c4fa:	f000 fc1b 	bl	800cd34 <__mcmp>
 800c4fe:	2800      	cmp	r0, #0
 800c500:	dc03      	bgt.n	800c50a <_dtoa_r+0xa52>
 800c502:	d1e1      	bne.n	800c4c8 <_dtoa_r+0xa10>
 800c504:	f018 0f01 	tst.w	r8, #1
 800c508:	d0de      	beq.n	800c4c8 <_dtoa_r+0xa10>
 800c50a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c50e:	d1d8      	bne.n	800c4c2 <_dtoa_r+0xa0a>
 800c510:	9a00      	ldr	r2, [sp, #0]
 800c512:	2339      	movs	r3, #57	@ 0x39
 800c514:	7013      	strb	r3, [r2, #0]
 800c516:	4633      	mov	r3, r6
 800c518:	461e      	mov	r6, r3
 800c51a:	3b01      	subs	r3, #1
 800c51c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c520:	2a39      	cmp	r2, #57	@ 0x39
 800c522:	d052      	beq.n	800c5ca <_dtoa_r+0xb12>
 800c524:	3201      	adds	r2, #1
 800c526:	701a      	strb	r2, [r3, #0]
 800c528:	e612      	b.n	800c150 <_dtoa_r+0x698>
 800c52a:	2a00      	cmp	r2, #0
 800c52c:	dd07      	ble.n	800c53e <_dtoa_r+0xa86>
 800c52e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c532:	d0ed      	beq.n	800c510 <_dtoa_r+0xa58>
 800c534:	9a00      	ldr	r2, [sp, #0]
 800c536:	f108 0301 	add.w	r3, r8, #1
 800c53a:	7013      	strb	r3, [r2, #0]
 800c53c:	e608      	b.n	800c150 <_dtoa_r+0x698>
 800c53e:	9b07      	ldr	r3, [sp, #28]
 800c540:	9a07      	ldr	r2, [sp, #28]
 800c542:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c546:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c548:	4293      	cmp	r3, r2
 800c54a:	d028      	beq.n	800c59e <_dtoa_r+0xae6>
 800c54c:	4649      	mov	r1, r9
 800c54e:	2300      	movs	r3, #0
 800c550:	220a      	movs	r2, #10
 800c552:	4658      	mov	r0, fp
 800c554:	f000 f9d6 	bl	800c904 <__multadd>
 800c558:	42af      	cmp	r7, r5
 800c55a:	4681      	mov	r9, r0
 800c55c:	f04f 0300 	mov.w	r3, #0
 800c560:	f04f 020a 	mov.w	r2, #10
 800c564:	4639      	mov	r1, r7
 800c566:	4658      	mov	r0, fp
 800c568:	d107      	bne.n	800c57a <_dtoa_r+0xac2>
 800c56a:	f000 f9cb 	bl	800c904 <__multadd>
 800c56e:	4607      	mov	r7, r0
 800c570:	4605      	mov	r5, r0
 800c572:	9b07      	ldr	r3, [sp, #28]
 800c574:	3301      	adds	r3, #1
 800c576:	9307      	str	r3, [sp, #28]
 800c578:	e774      	b.n	800c464 <_dtoa_r+0x9ac>
 800c57a:	f000 f9c3 	bl	800c904 <__multadd>
 800c57e:	4629      	mov	r1, r5
 800c580:	4607      	mov	r7, r0
 800c582:	2300      	movs	r3, #0
 800c584:	220a      	movs	r2, #10
 800c586:	4658      	mov	r0, fp
 800c588:	f000 f9bc 	bl	800c904 <__multadd>
 800c58c:	4605      	mov	r5, r0
 800c58e:	e7f0      	b.n	800c572 <_dtoa_r+0xaba>
 800c590:	9b00      	ldr	r3, [sp, #0]
 800c592:	2b00      	cmp	r3, #0
 800c594:	bfcc      	ite	gt
 800c596:	461e      	movgt	r6, r3
 800c598:	2601      	movle	r6, #1
 800c59a:	4456      	add	r6, sl
 800c59c:	2700      	movs	r7, #0
 800c59e:	4649      	mov	r1, r9
 800c5a0:	2201      	movs	r2, #1
 800c5a2:	4658      	mov	r0, fp
 800c5a4:	f000 fb5a 	bl	800cc5c <__lshift>
 800c5a8:	4621      	mov	r1, r4
 800c5aa:	4681      	mov	r9, r0
 800c5ac:	f000 fbc2 	bl	800cd34 <__mcmp>
 800c5b0:	2800      	cmp	r0, #0
 800c5b2:	dcb0      	bgt.n	800c516 <_dtoa_r+0xa5e>
 800c5b4:	d102      	bne.n	800c5bc <_dtoa_r+0xb04>
 800c5b6:	f018 0f01 	tst.w	r8, #1
 800c5ba:	d1ac      	bne.n	800c516 <_dtoa_r+0xa5e>
 800c5bc:	4633      	mov	r3, r6
 800c5be:	461e      	mov	r6, r3
 800c5c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c5c4:	2a30      	cmp	r2, #48	@ 0x30
 800c5c6:	d0fa      	beq.n	800c5be <_dtoa_r+0xb06>
 800c5c8:	e5c2      	b.n	800c150 <_dtoa_r+0x698>
 800c5ca:	459a      	cmp	sl, r3
 800c5cc:	d1a4      	bne.n	800c518 <_dtoa_r+0xa60>
 800c5ce:	9b04      	ldr	r3, [sp, #16]
 800c5d0:	3301      	adds	r3, #1
 800c5d2:	9304      	str	r3, [sp, #16]
 800c5d4:	2331      	movs	r3, #49	@ 0x31
 800c5d6:	f88a 3000 	strb.w	r3, [sl]
 800c5da:	e5b9      	b.n	800c150 <_dtoa_r+0x698>
 800c5dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c5de:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c63c <_dtoa_r+0xb84>
 800c5e2:	b11b      	cbz	r3, 800c5ec <_dtoa_r+0xb34>
 800c5e4:	f10a 0308 	add.w	r3, sl, #8
 800c5e8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c5ea:	6013      	str	r3, [r2, #0]
 800c5ec:	4650      	mov	r0, sl
 800c5ee:	b019      	add	sp, #100	@ 0x64
 800c5f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5f6:	2b01      	cmp	r3, #1
 800c5f8:	f77f ae37 	ble.w	800c26a <_dtoa_r+0x7b2>
 800c5fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c5fe:	930a      	str	r3, [sp, #40]	@ 0x28
 800c600:	2001      	movs	r0, #1
 800c602:	e655      	b.n	800c2b0 <_dtoa_r+0x7f8>
 800c604:	9b00      	ldr	r3, [sp, #0]
 800c606:	2b00      	cmp	r3, #0
 800c608:	f77f aed6 	ble.w	800c3b8 <_dtoa_r+0x900>
 800c60c:	4656      	mov	r6, sl
 800c60e:	4621      	mov	r1, r4
 800c610:	4648      	mov	r0, r9
 800c612:	f7ff f9c6 	bl	800b9a2 <quorem>
 800c616:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c61a:	f806 8b01 	strb.w	r8, [r6], #1
 800c61e:	9b00      	ldr	r3, [sp, #0]
 800c620:	eba6 020a 	sub.w	r2, r6, sl
 800c624:	4293      	cmp	r3, r2
 800c626:	ddb3      	ble.n	800c590 <_dtoa_r+0xad8>
 800c628:	4649      	mov	r1, r9
 800c62a:	2300      	movs	r3, #0
 800c62c:	220a      	movs	r2, #10
 800c62e:	4658      	mov	r0, fp
 800c630:	f000 f968 	bl	800c904 <__multadd>
 800c634:	4681      	mov	r9, r0
 800c636:	e7ea      	b.n	800c60e <_dtoa_r+0xb56>
 800c638:	0800e5bd 	.word	0x0800e5bd
 800c63c:	0800e541 	.word	0x0800e541

0800c640 <_free_r>:
 800c640:	b538      	push	{r3, r4, r5, lr}
 800c642:	4605      	mov	r5, r0
 800c644:	2900      	cmp	r1, #0
 800c646:	d041      	beq.n	800c6cc <_free_r+0x8c>
 800c648:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c64c:	1f0c      	subs	r4, r1, #4
 800c64e:	2b00      	cmp	r3, #0
 800c650:	bfb8      	it	lt
 800c652:	18e4      	addlt	r4, r4, r3
 800c654:	f000 f8e8 	bl	800c828 <__malloc_lock>
 800c658:	4a1d      	ldr	r2, [pc, #116]	@ (800c6d0 <_free_r+0x90>)
 800c65a:	6813      	ldr	r3, [r2, #0]
 800c65c:	b933      	cbnz	r3, 800c66c <_free_r+0x2c>
 800c65e:	6063      	str	r3, [r4, #4]
 800c660:	6014      	str	r4, [r2, #0]
 800c662:	4628      	mov	r0, r5
 800c664:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c668:	f000 b8e4 	b.w	800c834 <__malloc_unlock>
 800c66c:	42a3      	cmp	r3, r4
 800c66e:	d908      	bls.n	800c682 <_free_r+0x42>
 800c670:	6820      	ldr	r0, [r4, #0]
 800c672:	1821      	adds	r1, r4, r0
 800c674:	428b      	cmp	r3, r1
 800c676:	bf01      	itttt	eq
 800c678:	6819      	ldreq	r1, [r3, #0]
 800c67a:	685b      	ldreq	r3, [r3, #4]
 800c67c:	1809      	addeq	r1, r1, r0
 800c67e:	6021      	streq	r1, [r4, #0]
 800c680:	e7ed      	b.n	800c65e <_free_r+0x1e>
 800c682:	461a      	mov	r2, r3
 800c684:	685b      	ldr	r3, [r3, #4]
 800c686:	b10b      	cbz	r3, 800c68c <_free_r+0x4c>
 800c688:	42a3      	cmp	r3, r4
 800c68a:	d9fa      	bls.n	800c682 <_free_r+0x42>
 800c68c:	6811      	ldr	r1, [r2, #0]
 800c68e:	1850      	adds	r0, r2, r1
 800c690:	42a0      	cmp	r0, r4
 800c692:	d10b      	bne.n	800c6ac <_free_r+0x6c>
 800c694:	6820      	ldr	r0, [r4, #0]
 800c696:	4401      	add	r1, r0
 800c698:	1850      	adds	r0, r2, r1
 800c69a:	4283      	cmp	r3, r0
 800c69c:	6011      	str	r1, [r2, #0]
 800c69e:	d1e0      	bne.n	800c662 <_free_r+0x22>
 800c6a0:	6818      	ldr	r0, [r3, #0]
 800c6a2:	685b      	ldr	r3, [r3, #4]
 800c6a4:	6053      	str	r3, [r2, #4]
 800c6a6:	4408      	add	r0, r1
 800c6a8:	6010      	str	r0, [r2, #0]
 800c6aa:	e7da      	b.n	800c662 <_free_r+0x22>
 800c6ac:	d902      	bls.n	800c6b4 <_free_r+0x74>
 800c6ae:	230c      	movs	r3, #12
 800c6b0:	602b      	str	r3, [r5, #0]
 800c6b2:	e7d6      	b.n	800c662 <_free_r+0x22>
 800c6b4:	6820      	ldr	r0, [r4, #0]
 800c6b6:	1821      	adds	r1, r4, r0
 800c6b8:	428b      	cmp	r3, r1
 800c6ba:	bf04      	itt	eq
 800c6bc:	6819      	ldreq	r1, [r3, #0]
 800c6be:	685b      	ldreq	r3, [r3, #4]
 800c6c0:	6063      	str	r3, [r4, #4]
 800c6c2:	bf04      	itt	eq
 800c6c4:	1809      	addeq	r1, r1, r0
 800c6c6:	6021      	streq	r1, [r4, #0]
 800c6c8:	6054      	str	r4, [r2, #4]
 800c6ca:	e7ca      	b.n	800c662 <_free_r+0x22>
 800c6cc:	bd38      	pop	{r3, r4, r5, pc}
 800c6ce:	bf00      	nop
 800c6d0:	200057cc 	.word	0x200057cc

0800c6d4 <malloc>:
 800c6d4:	4b02      	ldr	r3, [pc, #8]	@ (800c6e0 <malloc+0xc>)
 800c6d6:	4601      	mov	r1, r0
 800c6d8:	6818      	ldr	r0, [r3, #0]
 800c6da:	f000 b825 	b.w	800c728 <_malloc_r>
 800c6de:	bf00      	nop
 800c6e0:	200000dc 	.word	0x200000dc

0800c6e4 <sbrk_aligned>:
 800c6e4:	b570      	push	{r4, r5, r6, lr}
 800c6e6:	4e0f      	ldr	r6, [pc, #60]	@ (800c724 <sbrk_aligned+0x40>)
 800c6e8:	460c      	mov	r4, r1
 800c6ea:	6831      	ldr	r1, [r6, #0]
 800c6ec:	4605      	mov	r5, r0
 800c6ee:	b911      	cbnz	r1, 800c6f6 <sbrk_aligned+0x12>
 800c6f0:	f001 f81c 	bl	800d72c <_sbrk_r>
 800c6f4:	6030      	str	r0, [r6, #0]
 800c6f6:	4621      	mov	r1, r4
 800c6f8:	4628      	mov	r0, r5
 800c6fa:	f001 f817 	bl	800d72c <_sbrk_r>
 800c6fe:	1c43      	adds	r3, r0, #1
 800c700:	d103      	bne.n	800c70a <sbrk_aligned+0x26>
 800c702:	f04f 34ff 	mov.w	r4, #4294967295
 800c706:	4620      	mov	r0, r4
 800c708:	bd70      	pop	{r4, r5, r6, pc}
 800c70a:	1cc4      	adds	r4, r0, #3
 800c70c:	f024 0403 	bic.w	r4, r4, #3
 800c710:	42a0      	cmp	r0, r4
 800c712:	d0f8      	beq.n	800c706 <sbrk_aligned+0x22>
 800c714:	1a21      	subs	r1, r4, r0
 800c716:	4628      	mov	r0, r5
 800c718:	f001 f808 	bl	800d72c <_sbrk_r>
 800c71c:	3001      	adds	r0, #1
 800c71e:	d1f2      	bne.n	800c706 <sbrk_aligned+0x22>
 800c720:	e7ef      	b.n	800c702 <sbrk_aligned+0x1e>
 800c722:	bf00      	nop
 800c724:	200057c8 	.word	0x200057c8

0800c728 <_malloc_r>:
 800c728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c72c:	1ccd      	adds	r5, r1, #3
 800c72e:	f025 0503 	bic.w	r5, r5, #3
 800c732:	3508      	adds	r5, #8
 800c734:	2d0c      	cmp	r5, #12
 800c736:	bf38      	it	cc
 800c738:	250c      	movcc	r5, #12
 800c73a:	2d00      	cmp	r5, #0
 800c73c:	4606      	mov	r6, r0
 800c73e:	db01      	blt.n	800c744 <_malloc_r+0x1c>
 800c740:	42a9      	cmp	r1, r5
 800c742:	d904      	bls.n	800c74e <_malloc_r+0x26>
 800c744:	230c      	movs	r3, #12
 800c746:	6033      	str	r3, [r6, #0]
 800c748:	2000      	movs	r0, #0
 800c74a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c74e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c824 <_malloc_r+0xfc>
 800c752:	f000 f869 	bl	800c828 <__malloc_lock>
 800c756:	f8d8 3000 	ldr.w	r3, [r8]
 800c75a:	461c      	mov	r4, r3
 800c75c:	bb44      	cbnz	r4, 800c7b0 <_malloc_r+0x88>
 800c75e:	4629      	mov	r1, r5
 800c760:	4630      	mov	r0, r6
 800c762:	f7ff ffbf 	bl	800c6e4 <sbrk_aligned>
 800c766:	1c43      	adds	r3, r0, #1
 800c768:	4604      	mov	r4, r0
 800c76a:	d158      	bne.n	800c81e <_malloc_r+0xf6>
 800c76c:	f8d8 4000 	ldr.w	r4, [r8]
 800c770:	4627      	mov	r7, r4
 800c772:	2f00      	cmp	r7, #0
 800c774:	d143      	bne.n	800c7fe <_malloc_r+0xd6>
 800c776:	2c00      	cmp	r4, #0
 800c778:	d04b      	beq.n	800c812 <_malloc_r+0xea>
 800c77a:	6823      	ldr	r3, [r4, #0]
 800c77c:	4639      	mov	r1, r7
 800c77e:	4630      	mov	r0, r6
 800c780:	eb04 0903 	add.w	r9, r4, r3
 800c784:	f000 ffd2 	bl	800d72c <_sbrk_r>
 800c788:	4581      	cmp	r9, r0
 800c78a:	d142      	bne.n	800c812 <_malloc_r+0xea>
 800c78c:	6821      	ldr	r1, [r4, #0]
 800c78e:	1a6d      	subs	r5, r5, r1
 800c790:	4629      	mov	r1, r5
 800c792:	4630      	mov	r0, r6
 800c794:	f7ff ffa6 	bl	800c6e4 <sbrk_aligned>
 800c798:	3001      	adds	r0, #1
 800c79a:	d03a      	beq.n	800c812 <_malloc_r+0xea>
 800c79c:	6823      	ldr	r3, [r4, #0]
 800c79e:	442b      	add	r3, r5
 800c7a0:	6023      	str	r3, [r4, #0]
 800c7a2:	f8d8 3000 	ldr.w	r3, [r8]
 800c7a6:	685a      	ldr	r2, [r3, #4]
 800c7a8:	bb62      	cbnz	r2, 800c804 <_malloc_r+0xdc>
 800c7aa:	f8c8 7000 	str.w	r7, [r8]
 800c7ae:	e00f      	b.n	800c7d0 <_malloc_r+0xa8>
 800c7b0:	6822      	ldr	r2, [r4, #0]
 800c7b2:	1b52      	subs	r2, r2, r5
 800c7b4:	d420      	bmi.n	800c7f8 <_malloc_r+0xd0>
 800c7b6:	2a0b      	cmp	r2, #11
 800c7b8:	d917      	bls.n	800c7ea <_malloc_r+0xc2>
 800c7ba:	1961      	adds	r1, r4, r5
 800c7bc:	42a3      	cmp	r3, r4
 800c7be:	6025      	str	r5, [r4, #0]
 800c7c0:	bf18      	it	ne
 800c7c2:	6059      	strne	r1, [r3, #4]
 800c7c4:	6863      	ldr	r3, [r4, #4]
 800c7c6:	bf08      	it	eq
 800c7c8:	f8c8 1000 	streq.w	r1, [r8]
 800c7cc:	5162      	str	r2, [r4, r5]
 800c7ce:	604b      	str	r3, [r1, #4]
 800c7d0:	4630      	mov	r0, r6
 800c7d2:	f000 f82f 	bl	800c834 <__malloc_unlock>
 800c7d6:	f104 000b 	add.w	r0, r4, #11
 800c7da:	1d23      	adds	r3, r4, #4
 800c7dc:	f020 0007 	bic.w	r0, r0, #7
 800c7e0:	1ac2      	subs	r2, r0, r3
 800c7e2:	bf1c      	itt	ne
 800c7e4:	1a1b      	subne	r3, r3, r0
 800c7e6:	50a3      	strne	r3, [r4, r2]
 800c7e8:	e7af      	b.n	800c74a <_malloc_r+0x22>
 800c7ea:	6862      	ldr	r2, [r4, #4]
 800c7ec:	42a3      	cmp	r3, r4
 800c7ee:	bf0c      	ite	eq
 800c7f0:	f8c8 2000 	streq.w	r2, [r8]
 800c7f4:	605a      	strne	r2, [r3, #4]
 800c7f6:	e7eb      	b.n	800c7d0 <_malloc_r+0xa8>
 800c7f8:	4623      	mov	r3, r4
 800c7fa:	6864      	ldr	r4, [r4, #4]
 800c7fc:	e7ae      	b.n	800c75c <_malloc_r+0x34>
 800c7fe:	463c      	mov	r4, r7
 800c800:	687f      	ldr	r7, [r7, #4]
 800c802:	e7b6      	b.n	800c772 <_malloc_r+0x4a>
 800c804:	461a      	mov	r2, r3
 800c806:	685b      	ldr	r3, [r3, #4]
 800c808:	42a3      	cmp	r3, r4
 800c80a:	d1fb      	bne.n	800c804 <_malloc_r+0xdc>
 800c80c:	2300      	movs	r3, #0
 800c80e:	6053      	str	r3, [r2, #4]
 800c810:	e7de      	b.n	800c7d0 <_malloc_r+0xa8>
 800c812:	230c      	movs	r3, #12
 800c814:	6033      	str	r3, [r6, #0]
 800c816:	4630      	mov	r0, r6
 800c818:	f000 f80c 	bl	800c834 <__malloc_unlock>
 800c81c:	e794      	b.n	800c748 <_malloc_r+0x20>
 800c81e:	6005      	str	r5, [r0, #0]
 800c820:	e7d6      	b.n	800c7d0 <_malloc_r+0xa8>
 800c822:	bf00      	nop
 800c824:	200057cc 	.word	0x200057cc

0800c828 <__malloc_lock>:
 800c828:	4801      	ldr	r0, [pc, #4]	@ (800c830 <__malloc_lock+0x8>)
 800c82a:	f7ff b8a2 	b.w	800b972 <__retarget_lock_acquire_recursive>
 800c82e:	bf00      	nop
 800c830:	200057c4 	.word	0x200057c4

0800c834 <__malloc_unlock>:
 800c834:	4801      	ldr	r0, [pc, #4]	@ (800c83c <__malloc_unlock+0x8>)
 800c836:	f7ff b89d 	b.w	800b974 <__retarget_lock_release_recursive>
 800c83a:	bf00      	nop
 800c83c:	200057c4 	.word	0x200057c4

0800c840 <_Balloc>:
 800c840:	b570      	push	{r4, r5, r6, lr}
 800c842:	69c6      	ldr	r6, [r0, #28]
 800c844:	4604      	mov	r4, r0
 800c846:	460d      	mov	r5, r1
 800c848:	b976      	cbnz	r6, 800c868 <_Balloc+0x28>
 800c84a:	2010      	movs	r0, #16
 800c84c:	f7ff ff42 	bl	800c6d4 <malloc>
 800c850:	4602      	mov	r2, r0
 800c852:	61e0      	str	r0, [r4, #28]
 800c854:	b920      	cbnz	r0, 800c860 <_Balloc+0x20>
 800c856:	4b18      	ldr	r3, [pc, #96]	@ (800c8b8 <_Balloc+0x78>)
 800c858:	4818      	ldr	r0, [pc, #96]	@ (800c8bc <_Balloc+0x7c>)
 800c85a:	216b      	movs	r1, #107	@ 0x6b
 800c85c:	f000 ff76 	bl	800d74c <__assert_func>
 800c860:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c864:	6006      	str	r6, [r0, #0]
 800c866:	60c6      	str	r6, [r0, #12]
 800c868:	69e6      	ldr	r6, [r4, #28]
 800c86a:	68f3      	ldr	r3, [r6, #12]
 800c86c:	b183      	cbz	r3, 800c890 <_Balloc+0x50>
 800c86e:	69e3      	ldr	r3, [r4, #28]
 800c870:	68db      	ldr	r3, [r3, #12]
 800c872:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c876:	b9b8      	cbnz	r0, 800c8a8 <_Balloc+0x68>
 800c878:	2101      	movs	r1, #1
 800c87a:	fa01 f605 	lsl.w	r6, r1, r5
 800c87e:	1d72      	adds	r2, r6, #5
 800c880:	0092      	lsls	r2, r2, #2
 800c882:	4620      	mov	r0, r4
 800c884:	f000 ff80 	bl	800d788 <_calloc_r>
 800c888:	b160      	cbz	r0, 800c8a4 <_Balloc+0x64>
 800c88a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c88e:	e00e      	b.n	800c8ae <_Balloc+0x6e>
 800c890:	2221      	movs	r2, #33	@ 0x21
 800c892:	2104      	movs	r1, #4
 800c894:	4620      	mov	r0, r4
 800c896:	f000 ff77 	bl	800d788 <_calloc_r>
 800c89a:	69e3      	ldr	r3, [r4, #28]
 800c89c:	60f0      	str	r0, [r6, #12]
 800c89e:	68db      	ldr	r3, [r3, #12]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d1e4      	bne.n	800c86e <_Balloc+0x2e>
 800c8a4:	2000      	movs	r0, #0
 800c8a6:	bd70      	pop	{r4, r5, r6, pc}
 800c8a8:	6802      	ldr	r2, [r0, #0]
 800c8aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c8b4:	e7f7      	b.n	800c8a6 <_Balloc+0x66>
 800c8b6:	bf00      	nop
 800c8b8:	0800e54e 	.word	0x0800e54e
 800c8bc:	0800e5ce 	.word	0x0800e5ce

0800c8c0 <_Bfree>:
 800c8c0:	b570      	push	{r4, r5, r6, lr}
 800c8c2:	69c6      	ldr	r6, [r0, #28]
 800c8c4:	4605      	mov	r5, r0
 800c8c6:	460c      	mov	r4, r1
 800c8c8:	b976      	cbnz	r6, 800c8e8 <_Bfree+0x28>
 800c8ca:	2010      	movs	r0, #16
 800c8cc:	f7ff ff02 	bl	800c6d4 <malloc>
 800c8d0:	4602      	mov	r2, r0
 800c8d2:	61e8      	str	r0, [r5, #28]
 800c8d4:	b920      	cbnz	r0, 800c8e0 <_Bfree+0x20>
 800c8d6:	4b09      	ldr	r3, [pc, #36]	@ (800c8fc <_Bfree+0x3c>)
 800c8d8:	4809      	ldr	r0, [pc, #36]	@ (800c900 <_Bfree+0x40>)
 800c8da:	218f      	movs	r1, #143	@ 0x8f
 800c8dc:	f000 ff36 	bl	800d74c <__assert_func>
 800c8e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c8e4:	6006      	str	r6, [r0, #0]
 800c8e6:	60c6      	str	r6, [r0, #12]
 800c8e8:	b13c      	cbz	r4, 800c8fa <_Bfree+0x3a>
 800c8ea:	69eb      	ldr	r3, [r5, #28]
 800c8ec:	6862      	ldr	r2, [r4, #4]
 800c8ee:	68db      	ldr	r3, [r3, #12]
 800c8f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c8f4:	6021      	str	r1, [r4, #0]
 800c8f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c8fa:	bd70      	pop	{r4, r5, r6, pc}
 800c8fc:	0800e54e 	.word	0x0800e54e
 800c900:	0800e5ce 	.word	0x0800e5ce

0800c904 <__multadd>:
 800c904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c908:	690d      	ldr	r5, [r1, #16]
 800c90a:	4607      	mov	r7, r0
 800c90c:	460c      	mov	r4, r1
 800c90e:	461e      	mov	r6, r3
 800c910:	f101 0c14 	add.w	ip, r1, #20
 800c914:	2000      	movs	r0, #0
 800c916:	f8dc 3000 	ldr.w	r3, [ip]
 800c91a:	b299      	uxth	r1, r3
 800c91c:	fb02 6101 	mla	r1, r2, r1, r6
 800c920:	0c1e      	lsrs	r6, r3, #16
 800c922:	0c0b      	lsrs	r3, r1, #16
 800c924:	fb02 3306 	mla	r3, r2, r6, r3
 800c928:	b289      	uxth	r1, r1
 800c92a:	3001      	adds	r0, #1
 800c92c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c930:	4285      	cmp	r5, r0
 800c932:	f84c 1b04 	str.w	r1, [ip], #4
 800c936:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c93a:	dcec      	bgt.n	800c916 <__multadd+0x12>
 800c93c:	b30e      	cbz	r6, 800c982 <__multadd+0x7e>
 800c93e:	68a3      	ldr	r3, [r4, #8]
 800c940:	42ab      	cmp	r3, r5
 800c942:	dc19      	bgt.n	800c978 <__multadd+0x74>
 800c944:	6861      	ldr	r1, [r4, #4]
 800c946:	4638      	mov	r0, r7
 800c948:	3101      	adds	r1, #1
 800c94a:	f7ff ff79 	bl	800c840 <_Balloc>
 800c94e:	4680      	mov	r8, r0
 800c950:	b928      	cbnz	r0, 800c95e <__multadd+0x5a>
 800c952:	4602      	mov	r2, r0
 800c954:	4b0c      	ldr	r3, [pc, #48]	@ (800c988 <__multadd+0x84>)
 800c956:	480d      	ldr	r0, [pc, #52]	@ (800c98c <__multadd+0x88>)
 800c958:	21ba      	movs	r1, #186	@ 0xba
 800c95a:	f000 fef7 	bl	800d74c <__assert_func>
 800c95e:	6922      	ldr	r2, [r4, #16]
 800c960:	3202      	adds	r2, #2
 800c962:	f104 010c 	add.w	r1, r4, #12
 800c966:	0092      	lsls	r2, r2, #2
 800c968:	300c      	adds	r0, #12
 800c96a:	f7ff f80c 	bl	800b986 <memcpy>
 800c96e:	4621      	mov	r1, r4
 800c970:	4638      	mov	r0, r7
 800c972:	f7ff ffa5 	bl	800c8c0 <_Bfree>
 800c976:	4644      	mov	r4, r8
 800c978:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c97c:	3501      	adds	r5, #1
 800c97e:	615e      	str	r6, [r3, #20]
 800c980:	6125      	str	r5, [r4, #16]
 800c982:	4620      	mov	r0, r4
 800c984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c988:	0800e5bd 	.word	0x0800e5bd
 800c98c:	0800e5ce 	.word	0x0800e5ce

0800c990 <__hi0bits>:
 800c990:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c994:	4603      	mov	r3, r0
 800c996:	bf36      	itet	cc
 800c998:	0403      	lslcc	r3, r0, #16
 800c99a:	2000      	movcs	r0, #0
 800c99c:	2010      	movcc	r0, #16
 800c99e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c9a2:	bf3c      	itt	cc
 800c9a4:	021b      	lslcc	r3, r3, #8
 800c9a6:	3008      	addcc	r0, #8
 800c9a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c9ac:	bf3c      	itt	cc
 800c9ae:	011b      	lslcc	r3, r3, #4
 800c9b0:	3004      	addcc	r0, #4
 800c9b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c9b6:	bf3c      	itt	cc
 800c9b8:	009b      	lslcc	r3, r3, #2
 800c9ba:	3002      	addcc	r0, #2
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	db05      	blt.n	800c9cc <__hi0bits+0x3c>
 800c9c0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c9c4:	f100 0001 	add.w	r0, r0, #1
 800c9c8:	bf08      	it	eq
 800c9ca:	2020      	moveq	r0, #32
 800c9cc:	4770      	bx	lr

0800c9ce <__lo0bits>:
 800c9ce:	6803      	ldr	r3, [r0, #0]
 800c9d0:	4602      	mov	r2, r0
 800c9d2:	f013 0007 	ands.w	r0, r3, #7
 800c9d6:	d00b      	beq.n	800c9f0 <__lo0bits+0x22>
 800c9d8:	07d9      	lsls	r1, r3, #31
 800c9da:	d421      	bmi.n	800ca20 <__lo0bits+0x52>
 800c9dc:	0798      	lsls	r0, r3, #30
 800c9de:	bf49      	itett	mi
 800c9e0:	085b      	lsrmi	r3, r3, #1
 800c9e2:	089b      	lsrpl	r3, r3, #2
 800c9e4:	2001      	movmi	r0, #1
 800c9e6:	6013      	strmi	r3, [r2, #0]
 800c9e8:	bf5c      	itt	pl
 800c9ea:	6013      	strpl	r3, [r2, #0]
 800c9ec:	2002      	movpl	r0, #2
 800c9ee:	4770      	bx	lr
 800c9f0:	b299      	uxth	r1, r3
 800c9f2:	b909      	cbnz	r1, 800c9f8 <__lo0bits+0x2a>
 800c9f4:	0c1b      	lsrs	r3, r3, #16
 800c9f6:	2010      	movs	r0, #16
 800c9f8:	b2d9      	uxtb	r1, r3
 800c9fa:	b909      	cbnz	r1, 800ca00 <__lo0bits+0x32>
 800c9fc:	3008      	adds	r0, #8
 800c9fe:	0a1b      	lsrs	r3, r3, #8
 800ca00:	0719      	lsls	r1, r3, #28
 800ca02:	bf04      	itt	eq
 800ca04:	091b      	lsreq	r3, r3, #4
 800ca06:	3004      	addeq	r0, #4
 800ca08:	0799      	lsls	r1, r3, #30
 800ca0a:	bf04      	itt	eq
 800ca0c:	089b      	lsreq	r3, r3, #2
 800ca0e:	3002      	addeq	r0, #2
 800ca10:	07d9      	lsls	r1, r3, #31
 800ca12:	d403      	bmi.n	800ca1c <__lo0bits+0x4e>
 800ca14:	085b      	lsrs	r3, r3, #1
 800ca16:	f100 0001 	add.w	r0, r0, #1
 800ca1a:	d003      	beq.n	800ca24 <__lo0bits+0x56>
 800ca1c:	6013      	str	r3, [r2, #0]
 800ca1e:	4770      	bx	lr
 800ca20:	2000      	movs	r0, #0
 800ca22:	4770      	bx	lr
 800ca24:	2020      	movs	r0, #32
 800ca26:	4770      	bx	lr

0800ca28 <__i2b>:
 800ca28:	b510      	push	{r4, lr}
 800ca2a:	460c      	mov	r4, r1
 800ca2c:	2101      	movs	r1, #1
 800ca2e:	f7ff ff07 	bl	800c840 <_Balloc>
 800ca32:	4602      	mov	r2, r0
 800ca34:	b928      	cbnz	r0, 800ca42 <__i2b+0x1a>
 800ca36:	4b05      	ldr	r3, [pc, #20]	@ (800ca4c <__i2b+0x24>)
 800ca38:	4805      	ldr	r0, [pc, #20]	@ (800ca50 <__i2b+0x28>)
 800ca3a:	f240 1145 	movw	r1, #325	@ 0x145
 800ca3e:	f000 fe85 	bl	800d74c <__assert_func>
 800ca42:	2301      	movs	r3, #1
 800ca44:	6144      	str	r4, [r0, #20]
 800ca46:	6103      	str	r3, [r0, #16]
 800ca48:	bd10      	pop	{r4, pc}
 800ca4a:	bf00      	nop
 800ca4c:	0800e5bd 	.word	0x0800e5bd
 800ca50:	0800e5ce 	.word	0x0800e5ce

0800ca54 <__multiply>:
 800ca54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca58:	4614      	mov	r4, r2
 800ca5a:	690a      	ldr	r2, [r1, #16]
 800ca5c:	6923      	ldr	r3, [r4, #16]
 800ca5e:	429a      	cmp	r2, r3
 800ca60:	bfa8      	it	ge
 800ca62:	4623      	movge	r3, r4
 800ca64:	460f      	mov	r7, r1
 800ca66:	bfa4      	itt	ge
 800ca68:	460c      	movge	r4, r1
 800ca6a:	461f      	movge	r7, r3
 800ca6c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ca70:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ca74:	68a3      	ldr	r3, [r4, #8]
 800ca76:	6861      	ldr	r1, [r4, #4]
 800ca78:	eb0a 0609 	add.w	r6, sl, r9
 800ca7c:	42b3      	cmp	r3, r6
 800ca7e:	b085      	sub	sp, #20
 800ca80:	bfb8      	it	lt
 800ca82:	3101      	addlt	r1, #1
 800ca84:	f7ff fedc 	bl	800c840 <_Balloc>
 800ca88:	b930      	cbnz	r0, 800ca98 <__multiply+0x44>
 800ca8a:	4602      	mov	r2, r0
 800ca8c:	4b44      	ldr	r3, [pc, #272]	@ (800cba0 <__multiply+0x14c>)
 800ca8e:	4845      	ldr	r0, [pc, #276]	@ (800cba4 <__multiply+0x150>)
 800ca90:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ca94:	f000 fe5a 	bl	800d74c <__assert_func>
 800ca98:	f100 0514 	add.w	r5, r0, #20
 800ca9c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800caa0:	462b      	mov	r3, r5
 800caa2:	2200      	movs	r2, #0
 800caa4:	4543      	cmp	r3, r8
 800caa6:	d321      	bcc.n	800caec <__multiply+0x98>
 800caa8:	f107 0114 	add.w	r1, r7, #20
 800caac:	f104 0214 	add.w	r2, r4, #20
 800cab0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800cab4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800cab8:	9302      	str	r3, [sp, #8]
 800caba:	1b13      	subs	r3, r2, r4
 800cabc:	3b15      	subs	r3, #21
 800cabe:	f023 0303 	bic.w	r3, r3, #3
 800cac2:	3304      	adds	r3, #4
 800cac4:	f104 0715 	add.w	r7, r4, #21
 800cac8:	42ba      	cmp	r2, r7
 800caca:	bf38      	it	cc
 800cacc:	2304      	movcc	r3, #4
 800cace:	9301      	str	r3, [sp, #4]
 800cad0:	9b02      	ldr	r3, [sp, #8]
 800cad2:	9103      	str	r1, [sp, #12]
 800cad4:	428b      	cmp	r3, r1
 800cad6:	d80c      	bhi.n	800caf2 <__multiply+0x9e>
 800cad8:	2e00      	cmp	r6, #0
 800cada:	dd03      	ble.n	800cae4 <__multiply+0x90>
 800cadc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d05b      	beq.n	800cb9c <__multiply+0x148>
 800cae4:	6106      	str	r6, [r0, #16]
 800cae6:	b005      	add	sp, #20
 800cae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caec:	f843 2b04 	str.w	r2, [r3], #4
 800caf0:	e7d8      	b.n	800caa4 <__multiply+0x50>
 800caf2:	f8b1 a000 	ldrh.w	sl, [r1]
 800caf6:	f1ba 0f00 	cmp.w	sl, #0
 800cafa:	d024      	beq.n	800cb46 <__multiply+0xf2>
 800cafc:	f104 0e14 	add.w	lr, r4, #20
 800cb00:	46a9      	mov	r9, r5
 800cb02:	f04f 0c00 	mov.w	ip, #0
 800cb06:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cb0a:	f8d9 3000 	ldr.w	r3, [r9]
 800cb0e:	fa1f fb87 	uxth.w	fp, r7
 800cb12:	b29b      	uxth	r3, r3
 800cb14:	fb0a 330b 	mla	r3, sl, fp, r3
 800cb18:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800cb1c:	f8d9 7000 	ldr.w	r7, [r9]
 800cb20:	4463      	add	r3, ip
 800cb22:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cb26:	fb0a c70b 	mla	r7, sl, fp, ip
 800cb2a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800cb2e:	b29b      	uxth	r3, r3
 800cb30:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cb34:	4572      	cmp	r2, lr
 800cb36:	f849 3b04 	str.w	r3, [r9], #4
 800cb3a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cb3e:	d8e2      	bhi.n	800cb06 <__multiply+0xb2>
 800cb40:	9b01      	ldr	r3, [sp, #4]
 800cb42:	f845 c003 	str.w	ip, [r5, r3]
 800cb46:	9b03      	ldr	r3, [sp, #12]
 800cb48:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cb4c:	3104      	adds	r1, #4
 800cb4e:	f1b9 0f00 	cmp.w	r9, #0
 800cb52:	d021      	beq.n	800cb98 <__multiply+0x144>
 800cb54:	682b      	ldr	r3, [r5, #0]
 800cb56:	f104 0c14 	add.w	ip, r4, #20
 800cb5a:	46ae      	mov	lr, r5
 800cb5c:	f04f 0a00 	mov.w	sl, #0
 800cb60:	f8bc b000 	ldrh.w	fp, [ip]
 800cb64:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800cb68:	fb09 770b 	mla	r7, r9, fp, r7
 800cb6c:	4457      	add	r7, sl
 800cb6e:	b29b      	uxth	r3, r3
 800cb70:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cb74:	f84e 3b04 	str.w	r3, [lr], #4
 800cb78:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cb7c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cb80:	f8be 3000 	ldrh.w	r3, [lr]
 800cb84:	fb09 330a 	mla	r3, r9, sl, r3
 800cb88:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800cb8c:	4562      	cmp	r2, ip
 800cb8e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cb92:	d8e5      	bhi.n	800cb60 <__multiply+0x10c>
 800cb94:	9f01      	ldr	r7, [sp, #4]
 800cb96:	51eb      	str	r3, [r5, r7]
 800cb98:	3504      	adds	r5, #4
 800cb9a:	e799      	b.n	800cad0 <__multiply+0x7c>
 800cb9c:	3e01      	subs	r6, #1
 800cb9e:	e79b      	b.n	800cad8 <__multiply+0x84>
 800cba0:	0800e5bd 	.word	0x0800e5bd
 800cba4:	0800e5ce 	.word	0x0800e5ce

0800cba8 <__pow5mult>:
 800cba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbac:	4615      	mov	r5, r2
 800cbae:	f012 0203 	ands.w	r2, r2, #3
 800cbb2:	4607      	mov	r7, r0
 800cbb4:	460e      	mov	r6, r1
 800cbb6:	d007      	beq.n	800cbc8 <__pow5mult+0x20>
 800cbb8:	4c25      	ldr	r4, [pc, #148]	@ (800cc50 <__pow5mult+0xa8>)
 800cbba:	3a01      	subs	r2, #1
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cbc2:	f7ff fe9f 	bl	800c904 <__multadd>
 800cbc6:	4606      	mov	r6, r0
 800cbc8:	10ad      	asrs	r5, r5, #2
 800cbca:	d03d      	beq.n	800cc48 <__pow5mult+0xa0>
 800cbcc:	69fc      	ldr	r4, [r7, #28]
 800cbce:	b97c      	cbnz	r4, 800cbf0 <__pow5mult+0x48>
 800cbd0:	2010      	movs	r0, #16
 800cbd2:	f7ff fd7f 	bl	800c6d4 <malloc>
 800cbd6:	4602      	mov	r2, r0
 800cbd8:	61f8      	str	r0, [r7, #28]
 800cbda:	b928      	cbnz	r0, 800cbe8 <__pow5mult+0x40>
 800cbdc:	4b1d      	ldr	r3, [pc, #116]	@ (800cc54 <__pow5mult+0xac>)
 800cbde:	481e      	ldr	r0, [pc, #120]	@ (800cc58 <__pow5mult+0xb0>)
 800cbe0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cbe4:	f000 fdb2 	bl	800d74c <__assert_func>
 800cbe8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cbec:	6004      	str	r4, [r0, #0]
 800cbee:	60c4      	str	r4, [r0, #12]
 800cbf0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cbf4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cbf8:	b94c      	cbnz	r4, 800cc0e <__pow5mult+0x66>
 800cbfa:	f240 2171 	movw	r1, #625	@ 0x271
 800cbfe:	4638      	mov	r0, r7
 800cc00:	f7ff ff12 	bl	800ca28 <__i2b>
 800cc04:	2300      	movs	r3, #0
 800cc06:	f8c8 0008 	str.w	r0, [r8, #8]
 800cc0a:	4604      	mov	r4, r0
 800cc0c:	6003      	str	r3, [r0, #0]
 800cc0e:	f04f 0900 	mov.w	r9, #0
 800cc12:	07eb      	lsls	r3, r5, #31
 800cc14:	d50a      	bpl.n	800cc2c <__pow5mult+0x84>
 800cc16:	4631      	mov	r1, r6
 800cc18:	4622      	mov	r2, r4
 800cc1a:	4638      	mov	r0, r7
 800cc1c:	f7ff ff1a 	bl	800ca54 <__multiply>
 800cc20:	4631      	mov	r1, r6
 800cc22:	4680      	mov	r8, r0
 800cc24:	4638      	mov	r0, r7
 800cc26:	f7ff fe4b 	bl	800c8c0 <_Bfree>
 800cc2a:	4646      	mov	r6, r8
 800cc2c:	106d      	asrs	r5, r5, #1
 800cc2e:	d00b      	beq.n	800cc48 <__pow5mult+0xa0>
 800cc30:	6820      	ldr	r0, [r4, #0]
 800cc32:	b938      	cbnz	r0, 800cc44 <__pow5mult+0x9c>
 800cc34:	4622      	mov	r2, r4
 800cc36:	4621      	mov	r1, r4
 800cc38:	4638      	mov	r0, r7
 800cc3a:	f7ff ff0b 	bl	800ca54 <__multiply>
 800cc3e:	6020      	str	r0, [r4, #0]
 800cc40:	f8c0 9000 	str.w	r9, [r0]
 800cc44:	4604      	mov	r4, r0
 800cc46:	e7e4      	b.n	800cc12 <__pow5mult+0x6a>
 800cc48:	4630      	mov	r0, r6
 800cc4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc4e:	bf00      	nop
 800cc50:	0800e628 	.word	0x0800e628
 800cc54:	0800e54e 	.word	0x0800e54e
 800cc58:	0800e5ce 	.word	0x0800e5ce

0800cc5c <__lshift>:
 800cc5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc60:	460c      	mov	r4, r1
 800cc62:	6849      	ldr	r1, [r1, #4]
 800cc64:	6923      	ldr	r3, [r4, #16]
 800cc66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cc6a:	68a3      	ldr	r3, [r4, #8]
 800cc6c:	4607      	mov	r7, r0
 800cc6e:	4691      	mov	r9, r2
 800cc70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cc74:	f108 0601 	add.w	r6, r8, #1
 800cc78:	42b3      	cmp	r3, r6
 800cc7a:	db0b      	blt.n	800cc94 <__lshift+0x38>
 800cc7c:	4638      	mov	r0, r7
 800cc7e:	f7ff fddf 	bl	800c840 <_Balloc>
 800cc82:	4605      	mov	r5, r0
 800cc84:	b948      	cbnz	r0, 800cc9a <__lshift+0x3e>
 800cc86:	4602      	mov	r2, r0
 800cc88:	4b28      	ldr	r3, [pc, #160]	@ (800cd2c <__lshift+0xd0>)
 800cc8a:	4829      	ldr	r0, [pc, #164]	@ (800cd30 <__lshift+0xd4>)
 800cc8c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cc90:	f000 fd5c 	bl	800d74c <__assert_func>
 800cc94:	3101      	adds	r1, #1
 800cc96:	005b      	lsls	r3, r3, #1
 800cc98:	e7ee      	b.n	800cc78 <__lshift+0x1c>
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	f100 0114 	add.w	r1, r0, #20
 800cca0:	f100 0210 	add.w	r2, r0, #16
 800cca4:	4618      	mov	r0, r3
 800cca6:	4553      	cmp	r3, sl
 800cca8:	db33      	blt.n	800cd12 <__lshift+0xb6>
 800ccaa:	6920      	ldr	r0, [r4, #16]
 800ccac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ccb0:	f104 0314 	add.w	r3, r4, #20
 800ccb4:	f019 091f 	ands.w	r9, r9, #31
 800ccb8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ccbc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ccc0:	d02b      	beq.n	800cd1a <__lshift+0xbe>
 800ccc2:	f1c9 0e20 	rsb	lr, r9, #32
 800ccc6:	468a      	mov	sl, r1
 800ccc8:	2200      	movs	r2, #0
 800ccca:	6818      	ldr	r0, [r3, #0]
 800cccc:	fa00 f009 	lsl.w	r0, r0, r9
 800ccd0:	4310      	orrs	r0, r2
 800ccd2:	f84a 0b04 	str.w	r0, [sl], #4
 800ccd6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ccda:	459c      	cmp	ip, r3
 800ccdc:	fa22 f20e 	lsr.w	r2, r2, lr
 800cce0:	d8f3      	bhi.n	800ccca <__lshift+0x6e>
 800cce2:	ebac 0304 	sub.w	r3, ip, r4
 800cce6:	3b15      	subs	r3, #21
 800cce8:	f023 0303 	bic.w	r3, r3, #3
 800ccec:	3304      	adds	r3, #4
 800ccee:	f104 0015 	add.w	r0, r4, #21
 800ccf2:	4584      	cmp	ip, r0
 800ccf4:	bf38      	it	cc
 800ccf6:	2304      	movcc	r3, #4
 800ccf8:	50ca      	str	r2, [r1, r3]
 800ccfa:	b10a      	cbz	r2, 800cd00 <__lshift+0xa4>
 800ccfc:	f108 0602 	add.w	r6, r8, #2
 800cd00:	3e01      	subs	r6, #1
 800cd02:	4638      	mov	r0, r7
 800cd04:	612e      	str	r6, [r5, #16]
 800cd06:	4621      	mov	r1, r4
 800cd08:	f7ff fdda 	bl	800c8c0 <_Bfree>
 800cd0c:	4628      	mov	r0, r5
 800cd0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd12:	f842 0f04 	str.w	r0, [r2, #4]!
 800cd16:	3301      	adds	r3, #1
 800cd18:	e7c5      	b.n	800cca6 <__lshift+0x4a>
 800cd1a:	3904      	subs	r1, #4
 800cd1c:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd20:	f841 2f04 	str.w	r2, [r1, #4]!
 800cd24:	459c      	cmp	ip, r3
 800cd26:	d8f9      	bhi.n	800cd1c <__lshift+0xc0>
 800cd28:	e7ea      	b.n	800cd00 <__lshift+0xa4>
 800cd2a:	bf00      	nop
 800cd2c:	0800e5bd 	.word	0x0800e5bd
 800cd30:	0800e5ce 	.word	0x0800e5ce

0800cd34 <__mcmp>:
 800cd34:	690a      	ldr	r2, [r1, #16]
 800cd36:	4603      	mov	r3, r0
 800cd38:	6900      	ldr	r0, [r0, #16]
 800cd3a:	1a80      	subs	r0, r0, r2
 800cd3c:	b530      	push	{r4, r5, lr}
 800cd3e:	d10e      	bne.n	800cd5e <__mcmp+0x2a>
 800cd40:	3314      	adds	r3, #20
 800cd42:	3114      	adds	r1, #20
 800cd44:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cd48:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cd4c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cd50:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cd54:	4295      	cmp	r5, r2
 800cd56:	d003      	beq.n	800cd60 <__mcmp+0x2c>
 800cd58:	d205      	bcs.n	800cd66 <__mcmp+0x32>
 800cd5a:	f04f 30ff 	mov.w	r0, #4294967295
 800cd5e:	bd30      	pop	{r4, r5, pc}
 800cd60:	42a3      	cmp	r3, r4
 800cd62:	d3f3      	bcc.n	800cd4c <__mcmp+0x18>
 800cd64:	e7fb      	b.n	800cd5e <__mcmp+0x2a>
 800cd66:	2001      	movs	r0, #1
 800cd68:	e7f9      	b.n	800cd5e <__mcmp+0x2a>
	...

0800cd6c <__mdiff>:
 800cd6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd70:	4689      	mov	r9, r1
 800cd72:	4606      	mov	r6, r0
 800cd74:	4611      	mov	r1, r2
 800cd76:	4648      	mov	r0, r9
 800cd78:	4614      	mov	r4, r2
 800cd7a:	f7ff ffdb 	bl	800cd34 <__mcmp>
 800cd7e:	1e05      	subs	r5, r0, #0
 800cd80:	d112      	bne.n	800cda8 <__mdiff+0x3c>
 800cd82:	4629      	mov	r1, r5
 800cd84:	4630      	mov	r0, r6
 800cd86:	f7ff fd5b 	bl	800c840 <_Balloc>
 800cd8a:	4602      	mov	r2, r0
 800cd8c:	b928      	cbnz	r0, 800cd9a <__mdiff+0x2e>
 800cd8e:	4b3f      	ldr	r3, [pc, #252]	@ (800ce8c <__mdiff+0x120>)
 800cd90:	f240 2137 	movw	r1, #567	@ 0x237
 800cd94:	483e      	ldr	r0, [pc, #248]	@ (800ce90 <__mdiff+0x124>)
 800cd96:	f000 fcd9 	bl	800d74c <__assert_func>
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cda0:	4610      	mov	r0, r2
 800cda2:	b003      	add	sp, #12
 800cda4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cda8:	bfbc      	itt	lt
 800cdaa:	464b      	movlt	r3, r9
 800cdac:	46a1      	movlt	r9, r4
 800cdae:	4630      	mov	r0, r6
 800cdb0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cdb4:	bfba      	itte	lt
 800cdb6:	461c      	movlt	r4, r3
 800cdb8:	2501      	movlt	r5, #1
 800cdba:	2500      	movge	r5, #0
 800cdbc:	f7ff fd40 	bl	800c840 <_Balloc>
 800cdc0:	4602      	mov	r2, r0
 800cdc2:	b918      	cbnz	r0, 800cdcc <__mdiff+0x60>
 800cdc4:	4b31      	ldr	r3, [pc, #196]	@ (800ce8c <__mdiff+0x120>)
 800cdc6:	f240 2145 	movw	r1, #581	@ 0x245
 800cdca:	e7e3      	b.n	800cd94 <__mdiff+0x28>
 800cdcc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cdd0:	6926      	ldr	r6, [r4, #16]
 800cdd2:	60c5      	str	r5, [r0, #12]
 800cdd4:	f109 0310 	add.w	r3, r9, #16
 800cdd8:	f109 0514 	add.w	r5, r9, #20
 800cddc:	f104 0e14 	add.w	lr, r4, #20
 800cde0:	f100 0b14 	add.w	fp, r0, #20
 800cde4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cde8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cdec:	9301      	str	r3, [sp, #4]
 800cdee:	46d9      	mov	r9, fp
 800cdf0:	f04f 0c00 	mov.w	ip, #0
 800cdf4:	9b01      	ldr	r3, [sp, #4]
 800cdf6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cdfa:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cdfe:	9301      	str	r3, [sp, #4]
 800ce00:	fa1f f38a 	uxth.w	r3, sl
 800ce04:	4619      	mov	r1, r3
 800ce06:	b283      	uxth	r3, r0
 800ce08:	1acb      	subs	r3, r1, r3
 800ce0a:	0c00      	lsrs	r0, r0, #16
 800ce0c:	4463      	add	r3, ip
 800ce0e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ce12:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ce16:	b29b      	uxth	r3, r3
 800ce18:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ce1c:	4576      	cmp	r6, lr
 800ce1e:	f849 3b04 	str.w	r3, [r9], #4
 800ce22:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ce26:	d8e5      	bhi.n	800cdf4 <__mdiff+0x88>
 800ce28:	1b33      	subs	r3, r6, r4
 800ce2a:	3b15      	subs	r3, #21
 800ce2c:	f023 0303 	bic.w	r3, r3, #3
 800ce30:	3415      	adds	r4, #21
 800ce32:	3304      	adds	r3, #4
 800ce34:	42a6      	cmp	r6, r4
 800ce36:	bf38      	it	cc
 800ce38:	2304      	movcc	r3, #4
 800ce3a:	441d      	add	r5, r3
 800ce3c:	445b      	add	r3, fp
 800ce3e:	461e      	mov	r6, r3
 800ce40:	462c      	mov	r4, r5
 800ce42:	4544      	cmp	r4, r8
 800ce44:	d30e      	bcc.n	800ce64 <__mdiff+0xf8>
 800ce46:	f108 0103 	add.w	r1, r8, #3
 800ce4a:	1b49      	subs	r1, r1, r5
 800ce4c:	f021 0103 	bic.w	r1, r1, #3
 800ce50:	3d03      	subs	r5, #3
 800ce52:	45a8      	cmp	r8, r5
 800ce54:	bf38      	it	cc
 800ce56:	2100      	movcc	r1, #0
 800ce58:	440b      	add	r3, r1
 800ce5a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ce5e:	b191      	cbz	r1, 800ce86 <__mdiff+0x11a>
 800ce60:	6117      	str	r7, [r2, #16]
 800ce62:	e79d      	b.n	800cda0 <__mdiff+0x34>
 800ce64:	f854 1b04 	ldr.w	r1, [r4], #4
 800ce68:	46e6      	mov	lr, ip
 800ce6a:	0c08      	lsrs	r0, r1, #16
 800ce6c:	fa1c fc81 	uxtah	ip, ip, r1
 800ce70:	4471      	add	r1, lr
 800ce72:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ce76:	b289      	uxth	r1, r1
 800ce78:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ce7c:	f846 1b04 	str.w	r1, [r6], #4
 800ce80:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ce84:	e7dd      	b.n	800ce42 <__mdiff+0xd6>
 800ce86:	3f01      	subs	r7, #1
 800ce88:	e7e7      	b.n	800ce5a <__mdiff+0xee>
 800ce8a:	bf00      	nop
 800ce8c:	0800e5bd 	.word	0x0800e5bd
 800ce90:	0800e5ce 	.word	0x0800e5ce

0800ce94 <__d2b>:
 800ce94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ce98:	460f      	mov	r7, r1
 800ce9a:	2101      	movs	r1, #1
 800ce9c:	ec59 8b10 	vmov	r8, r9, d0
 800cea0:	4616      	mov	r6, r2
 800cea2:	f7ff fccd 	bl	800c840 <_Balloc>
 800cea6:	4604      	mov	r4, r0
 800cea8:	b930      	cbnz	r0, 800ceb8 <__d2b+0x24>
 800ceaa:	4602      	mov	r2, r0
 800ceac:	4b23      	ldr	r3, [pc, #140]	@ (800cf3c <__d2b+0xa8>)
 800ceae:	4824      	ldr	r0, [pc, #144]	@ (800cf40 <__d2b+0xac>)
 800ceb0:	f240 310f 	movw	r1, #783	@ 0x30f
 800ceb4:	f000 fc4a 	bl	800d74c <__assert_func>
 800ceb8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cebc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cec0:	b10d      	cbz	r5, 800cec6 <__d2b+0x32>
 800cec2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cec6:	9301      	str	r3, [sp, #4]
 800cec8:	f1b8 0300 	subs.w	r3, r8, #0
 800cecc:	d023      	beq.n	800cf16 <__d2b+0x82>
 800cece:	4668      	mov	r0, sp
 800ced0:	9300      	str	r3, [sp, #0]
 800ced2:	f7ff fd7c 	bl	800c9ce <__lo0bits>
 800ced6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ceda:	b1d0      	cbz	r0, 800cf12 <__d2b+0x7e>
 800cedc:	f1c0 0320 	rsb	r3, r0, #32
 800cee0:	fa02 f303 	lsl.w	r3, r2, r3
 800cee4:	430b      	orrs	r3, r1
 800cee6:	40c2      	lsrs	r2, r0
 800cee8:	6163      	str	r3, [r4, #20]
 800ceea:	9201      	str	r2, [sp, #4]
 800ceec:	9b01      	ldr	r3, [sp, #4]
 800ceee:	61a3      	str	r3, [r4, #24]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	bf0c      	ite	eq
 800cef4:	2201      	moveq	r2, #1
 800cef6:	2202      	movne	r2, #2
 800cef8:	6122      	str	r2, [r4, #16]
 800cefa:	b1a5      	cbz	r5, 800cf26 <__d2b+0x92>
 800cefc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800cf00:	4405      	add	r5, r0
 800cf02:	603d      	str	r5, [r7, #0]
 800cf04:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cf08:	6030      	str	r0, [r6, #0]
 800cf0a:	4620      	mov	r0, r4
 800cf0c:	b003      	add	sp, #12
 800cf0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf12:	6161      	str	r1, [r4, #20]
 800cf14:	e7ea      	b.n	800ceec <__d2b+0x58>
 800cf16:	a801      	add	r0, sp, #4
 800cf18:	f7ff fd59 	bl	800c9ce <__lo0bits>
 800cf1c:	9b01      	ldr	r3, [sp, #4]
 800cf1e:	6163      	str	r3, [r4, #20]
 800cf20:	3020      	adds	r0, #32
 800cf22:	2201      	movs	r2, #1
 800cf24:	e7e8      	b.n	800cef8 <__d2b+0x64>
 800cf26:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cf2a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cf2e:	6038      	str	r0, [r7, #0]
 800cf30:	6918      	ldr	r0, [r3, #16]
 800cf32:	f7ff fd2d 	bl	800c990 <__hi0bits>
 800cf36:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cf3a:	e7e5      	b.n	800cf08 <__d2b+0x74>
 800cf3c:	0800e5bd 	.word	0x0800e5bd
 800cf40:	0800e5ce 	.word	0x0800e5ce

0800cf44 <__ssputs_r>:
 800cf44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf48:	688e      	ldr	r6, [r1, #8]
 800cf4a:	461f      	mov	r7, r3
 800cf4c:	42be      	cmp	r6, r7
 800cf4e:	680b      	ldr	r3, [r1, #0]
 800cf50:	4682      	mov	sl, r0
 800cf52:	460c      	mov	r4, r1
 800cf54:	4690      	mov	r8, r2
 800cf56:	d82d      	bhi.n	800cfb4 <__ssputs_r+0x70>
 800cf58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cf5c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cf60:	d026      	beq.n	800cfb0 <__ssputs_r+0x6c>
 800cf62:	6965      	ldr	r5, [r4, #20]
 800cf64:	6909      	ldr	r1, [r1, #16]
 800cf66:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cf6a:	eba3 0901 	sub.w	r9, r3, r1
 800cf6e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cf72:	1c7b      	adds	r3, r7, #1
 800cf74:	444b      	add	r3, r9
 800cf76:	106d      	asrs	r5, r5, #1
 800cf78:	429d      	cmp	r5, r3
 800cf7a:	bf38      	it	cc
 800cf7c:	461d      	movcc	r5, r3
 800cf7e:	0553      	lsls	r3, r2, #21
 800cf80:	d527      	bpl.n	800cfd2 <__ssputs_r+0x8e>
 800cf82:	4629      	mov	r1, r5
 800cf84:	f7ff fbd0 	bl	800c728 <_malloc_r>
 800cf88:	4606      	mov	r6, r0
 800cf8a:	b360      	cbz	r0, 800cfe6 <__ssputs_r+0xa2>
 800cf8c:	6921      	ldr	r1, [r4, #16]
 800cf8e:	464a      	mov	r2, r9
 800cf90:	f7fe fcf9 	bl	800b986 <memcpy>
 800cf94:	89a3      	ldrh	r3, [r4, #12]
 800cf96:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cf9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf9e:	81a3      	strh	r3, [r4, #12]
 800cfa0:	6126      	str	r6, [r4, #16]
 800cfa2:	6165      	str	r5, [r4, #20]
 800cfa4:	444e      	add	r6, r9
 800cfa6:	eba5 0509 	sub.w	r5, r5, r9
 800cfaa:	6026      	str	r6, [r4, #0]
 800cfac:	60a5      	str	r5, [r4, #8]
 800cfae:	463e      	mov	r6, r7
 800cfb0:	42be      	cmp	r6, r7
 800cfb2:	d900      	bls.n	800cfb6 <__ssputs_r+0x72>
 800cfb4:	463e      	mov	r6, r7
 800cfb6:	6820      	ldr	r0, [r4, #0]
 800cfb8:	4632      	mov	r2, r6
 800cfba:	4641      	mov	r1, r8
 800cfbc:	f000 fb9c 	bl	800d6f8 <memmove>
 800cfc0:	68a3      	ldr	r3, [r4, #8]
 800cfc2:	1b9b      	subs	r3, r3, r6
 800cfc4:	60a3      	str	r3, [r4, #8]
 800cfc6:	6823      	ldr	r3, [r4, #0]
 800cfc8:	4433      	add	r3, r6
 800cfca:	6023      	str	r3, [r4, #0]
 800cfcc:	2000      	movs	r0, #0
 800cfce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfd2:	462a      	mov	r2, r5
 800cfd4:	f000 fbfe 	bl	800d7d4 <_realloc_r>
 800cfd8:	4606      	mov	r6, r0
 800cfda:	2800      	cmp	r0, #0
 800cfdc:	d1e0      	bne.n	800cfa0 <__ssputs_r+0x5c>
 800cfde:	6921      	ldr	r1, [r4, #16]
 800cfe0:	4650      	mov	r0, sl
 800cfe2:	f7ff fb2d 	bl	800c640 <_free_r>
 800cfe6:	230c      	movs	r3, #12
 800cfe8:	f8ca 3000 	str.w	r3, [sl]
 800cfec:	89a3      	ldrh	r3, [r4, #12]
 800cfee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cff2:	81a3      	strh	r3, [r4, #12]
 800cff4:	f04f 30ff 	mov.w	r0, #4294967295
 800cff8:	e7e9      	b.n	800cfce <__ssputs_r+0x8a>
	...

0800cffc <_svfiprintf_r>:
 800cffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d000:	4698      	mov	r8, r3
 800d002:	898b      	ldrh	r3, [r1, #12]
 800d004:	061b      	lsls	r3, r3, #24
 800d006:	b09d      	sub	sp, #116	@ 0x74
 800d008:	4607      	mov	r7, r0
 800d00a:	460d      	mov	r5, r1
 800d00c:	4614      	mov	r4, r2
 800d00e:	d510      	bpl.n	800d032 <_svfiprintf_r+0x36>
 800d010:	690b      	ldr	r3, [r1, #16]
 800d012:	b973      	cbnz	r3, 800d032 <_svfiprintf_r+0x36>
 800d014:	2140      	movs	r1, #64	@ 0x40
 800d016:	f7ff fb87 	bl	800c728 <_malloc_r>
 800d01a:	6028      	str	r0, [r5, #0]
 800d01c:	6128      	str	r0, [r5, #16]
 800d01e:	b930      	cbnz	r0, 800d02e <_svfiprintf_r+0x32>
 800d020:	230c      	movs	r3, #12
 800d022:	603b      	str	r3, [r7, #0]
 800d024:	f04f 30ff 	mov.w	r0, #4294967295
 800d028:	b01d      	add	sp, #116	@ 0x74
 800d02a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d02e:	2340      	movs	r3, #64	@ 0x40
 800d030:	616b      	str	r3, [r5, #20]
 800d032:	2300      	movs	r3, #0
 800d034:	9309      	str	r3, [sp, #36]	@ 0x24
 800d036:	2320      	movs	r3, #32
 800d038:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d03c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d040:	2330      	movs	r3, #48	@ 0x30
 800d042:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d1e0 <_svfiprintf_r+0x1e4>
 800d046:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d04a:	f04f 0901 	mov.w	r9, #1
 800d04e:	4623      	mov	r3, r4
 800d050:	469a      	mov	sl, r3
 800d052:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d056:	b10a      	cbz	r2, 800d05c <_svfiprintf_r+0x60>
 800d058:	2a25      	cmp	r2, #37	@ 0x25
 800d05a:	d1f9      	bne.n	800d050 <_svfiprintf_r+0x54>
 800d05c:	ebba 0b04 	subs.w	fp, sl, r4
 800d060:	d00b      	beq.n	800d07a <_svfiprintf_r+0x7e>
 800d062:	465b      	mov	r3, fp
 800d064:	4622      	mov	r2, r4
 800d066:	4629      	mov	r1, r5
 800d068:	4638      	mov	r0, r7
 800d06a:	f7ff ff6b 	bl	800cf44 <__ssputs_r>
 800d06e:	3001      	adds	r0, #1
 800d070:	f000 80a7 	beq.w	800d1c2 <_svfiprintf_r+0x1c6>
 800d074:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d076:	445a      	add	r2, fp
 800d078:	9209      	str	r2, [sp, #36]	@ 0x24
 800d07a:	f89a 3000 	ldrb.w	r3, [sl]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	f000 809f 	beq.w	800d1c2 <_svfiprintf_r+0x1c6>
 800d084:	2300      	movs	r3, #0
 800d086:	f04f 32ff 	mov.w	r2, #4294967295
 800d08a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d08e:	f10a 0a01 	add.w	sl, sl, #1
 800d092:	9304      	str	r3, [sp, #16]
 800d094:	9307      	str	r3, [sp, #28]
 800d096:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d09a:	931a      	str	r3, [sp, #104]	@ 0x68
 800d09c:	4654      	mov	r4, sl
 800d09e:	2205      	movs	r2, #5
 800d0a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0a4:	484e      	ldr	r0, [pc, #312]	@ (800d1e0 <_svfiprintf_r+0x1e4>)
 800d0a6:	f7f3 f893 	bl	80001d0 <memchr>
 800d0aa:	9a04      	ldr	r2, [sp, #16]
 800d0ac:	b9d8      	cbnz	r0, 800d0e6 <_svfiprintf_r+0xea>
 800d0ae:	06d0      	lsls	r0, r2, #27
 800d0b0:	bf44      	itt	mi
 800d0b2:	2320      	movmi	r3, #32
 800d0b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d0b8:	0711      	lsls	r1, r2, #28
 800d0ba:	bf44      	itt	mi
 800d0bc:	232b      	movmi	r3, #43	@ 0x2b
 800d0be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d0c2:	f89a 3000 	ldrb.w	r3, [sl]
 800d0c6:	2b2a      	cmp	r3, #42	@ 0x2a
 800d0c8:	d015      	beq.n	800d0f6 <_svfiprintf_r+0xfa>
 800d0ca:	9a07      	ldr	r2, [sp, #28]
 800d0cc:	4654      	mov	r4, sl
 800d0ce:	2000      	movs	r0, #0
 800d0d0:	f04f 0c0a 	mov.w	ip, #10
 800d0d4:	4621      	mov	r1, r4
 800d0d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d0da:	3b30      	subs	r3, #48	@ 0x30
 800d0dc:	2b09      	cmp	r3, #9
 800d0de:	d94b      	bls.n	800d178 <_svfiprintf_r+0x17c>
 800d0e0:	b1b0      	cbz	r0, 800d110 <_svfiprintf_r+0x114>
 800d0e2:	9207      	str	r2, [sp, #28]
 800d0e4:	e014      	b.n	800d110 <_svfiprintf_r+0x114>
 800d0e6:	eba0 0308 	sub.w	r3, r0, r8
 800d0ea:	fa09 f303 	lsl.w	r3, r9, r3
 800d0ee:	4313      	orrs	r3, r2
 800d0f0:	9304      	str	r3, [sp, #16]
 800d0f2:	46a2      	mov	sl, r4
 800d0f4:	e7d2      	b.n	800d09c <_svfiprintf_r+0xa0>
 800d0f6:	9b03      	ldr	r3, [sp, #12]
 800d0f8:	1d19      	adds	r1, r3, #4
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	9103      	str	r1, [sp, #12]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	bfbb      	ittet	lt
 800d102:	425b      	neglt	r3, r3
 800d104:	f042 0202 	orrlt.w	r2, r2, #2
 800d108:	9307      	strge	r3, [sp, #28]
 800d10a:	9307      	strlt	r3, [sp, #28]
 800d10c:	bfb8      	it	lt
 800d10e:	9204      	strlt	r2, [sp, #16]
 800d110:	7823      	ldrb	r3, [r4, #0]
 800d112:	2b2e      	cmp	r3, #46	@ 0x2e
 800d114:	d10a      	bne.n	800d12c <_svfiprintf_r+0x130>
 800d116:	7863      	ldrb	r3, [r4, #1]
 800d118:	2b2a      	cmp	r3, #42	@ 0x2a
 800d11a:	d132      	bne.n	800d182 <_svfiprintf_r+0x186>
 800d11c:	9b03      	ldr	r3, [sp, #12]
 800d11e:	1d1a      	adds	r2, r3, #4
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	9203      	str	r2, [sp, #12]
 800d124:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d128:	3402      	adds	r4, #2
 800d12a:	9305      	str	r3, [sp, #20]
 800d12c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d1f0 <_svfiprintf_r+0x1f4>
 800d130:	7821      	ldrb	r1, [r4, #0]
 800d132:	2203      	movs	r2, #3
 800d134:	4650      	mov	r0, sl
 800d136:	f7f3 f84b 	bl	80001d0 <memchr>
 800d13a:	b138      	cbz	r0, 800d14c <_svfiprintf_r+0x150>
 800d13c:	9b04      	ldr	r3, [sp, #16]
 800d13e:	eba0 000a 	sub.w	r0, r0, sl
 800d142:	2240      	movs	r2, #64	@ 0x40
 800d144:	4082      	lsls	r2, r0
 800d146:	4313      	orrs	r3, r2
 800d148:	3401      	adds	r4, #1
 800d14a:	9304      	str	r3, [sp, #16]
 800d14c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d150:	4824      	ldr	r0, [pc, #144]	@ (800d1e4 <_svfiprintf_r+0x1e8>)
 800d152:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d156:	2206      	movs	r2, #6
 800d158:	f7f3 f83a 	bl	80001d0 <memchr>
 800d15c:	2800      	cmp	r0, #0
 800d15e:	d036      	beq.n	800d1ce <_svfiprintf_r+0x1d2>
 800d160:	4b21      	ldr	r3, [pc, #132]	@ (800d1e8 <_svfiprintf_r+0x1ec>)
 800d162:	bb1b      	cbnz	r3, 800d1ac <_svfiprintf_r+0x1b0>
 800d164:	9b03      	ldr	r3, [sp, #12]
 800d166:	3307      	adds	r3, #7
 800d168:	f023 0307 	bic.w	r3, r3, #7
 800d16c:	3308      	adds	r3, #8
 800d16e:	9303      	str	r3, [sp, #12]
 800d170:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d172:	4433      	add	r3, r6
 800d174:	9309      	str	r3, [sp, #36]	@ 0x24
 800d176:	e76a      	b.n	800d04e <_svfiprintf_r+0x52>
 800d178:	fb0c 3202 	mla	r2, ip, r2, r3
 800d17c:	460c      	mov	r4, r1
 800d17e:	2001      	movs	r0, #1
 800d180:	e7a8      	b.n	800d0d4 <_svfiprintf_r+0xd8>
 800d182:	2300      	movs	r3, #0
 800d184:	3401      	adds	r4, #1
 800d186:	9305      	str	r3, [sp, #20]
 800d188:	4619      	mov	r1, r3
 800d18a:	f04f 0c0a 	mov.w	ip, #10
 800d18e:	4620      	mov	r0, r4
 800d190:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d194:	3a30      	subs	r2, #48	@ 0x30
 800d196:	2a09      	cmp	r2, #9
 800d198:	d903      	bls.n	800d1a2 <_svfiprintf_r+0x1a6>
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d0c6      	beq.n	800d12c <_svfiprintf_r+0x130>
 800d19e:	9105      	str	r1, [sp, #20]
 800d1a0:	e7c4      	b.n	800d12c <_svfiprintf_r+0x130>
 800d1a2:	fb0c 2101 	mla	r1, ip, r1, r2
 800d1a6:	4604      	mov	r4, r0
 800d1a8:	2301      	movs	r3, #1
 800d1aa:	e7f0      	b.n	800d18e <_svfiprintf_r+0x192>
 800d1ac:	ab03      	add	r3, sp, #12
 800d1ae:	9300      	str	r3, [sp, #0]
 800d1b0:	462a      	mov	r2, r5
 800d1b2:	4b0e      	ldr	r3, [pc, #56]	@ (800d1ec <_svfiprintf_r+0x1f0>)
 800d1b4:	a904      	add	r1, sp, #16
 800d1b6:	4638      	mov	r0, r7
 800d1b8:	f7fd fd98 	bl	800acec <_printf_float>
 800d1bc:	1c42      	adds	r2, r0, #1
 800d1be:	4606      	mov	r6, r0
 800d1c0:	d1d6      	bne.n	800d170 <_svfiprintf_r+0x174>
 800d1c2:	89ab      	ldrh	r3, [r5, #12]
 800d1c4:	065b      	lsls	r3, r3, #25
 800d1c6:	f53f af2d 	bmi.w	800d024 <_svfiprintf_r+0x28>
 800d1ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d1cc:	e72c      	b.n	800d028 <_svfiprintf_r+0x2c>
 800d1ce:	ab03      	add	r3, sp, #12
 800d1d0:	9300      	str	r3, [sp, #0]
 800d1d2:	462a      	mov	r2, r5
 800d1d4:	4b05      	ldr	r3, [pc, #20]	@ (800d1ec <_svfiprintf_r+0x1f0>)
 800d1d6:	a904      	add	r1, sp, #16
 800d1d8:	4638      	mov	r0, r7
 800d1da:	f7fe f81f 	bl	800b21c <_printf_i>
 800d1de:	e7ed      	b.n	800d1bc <_svfiprintf_r+0x1c0>
 800d1e0:	0800e728 	.word	0x0800e728
 800d1e4:	0800e732 	.word	0x0800e732
 800d1e8:	0800aced 	.word	0x0800aced
 800d1ec:	0800cf45 	.word	0x0800cf45
 800d1f0:	0800e72e 	.word	0x0800e72e

0800d1f4 <__sfputc_r>:
 800d1f4:	6893      	ldr	r3, [r2, #8]
 800d1f6:	3b01      	subs	r3, #1
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	b410      	push	{r4}
 800d1fc:	6093      	str	r3, [r2, #8]
 800d1fe:	da08      	bge.n	800d212 <__sfputc_r+0x1e>
 800d200:	6994      	ldr	r4, [r2, #24]
 800d202:	42a3      	cmp	r3, r4
 800d204:	db01      	blt.n	800d20a <__sfputc_r+0x16>
 800d206:	290a      	cmp	r1, #10
 800d208:	d103      	bne.n	800d212 <__sfputc_r+0x1e>
 800d20a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d20e:	f000 b9df 	b.w	800d5d0 <__swbuf_r>
 800d212:	6813      	ldr	r3, [r2, #0]
 800d214:	1c58      	adds	r0, r3, #1
 800d216:	6010      	str	r0, [r2, #0]
 800d218:	7019      	strb	r1, [r3, #0]
 800d21a:	4608      	mov	r0, r1
 800d21c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d220:	4770      	bx	lr

0800d222 <__sfputs_r>:
 800d222:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d224:	4606      	mov	r6, r0
 800d226:	460f      	mov	r7, r1
 800d228:	4614      	mov	r4, r2
 800d22a:	18d5      	adds	r5, r2, r3
 800d22c:	42ac      	cmp	r4, r5
 800d22e:	d101      	bne.n	800d234 <__sfputs_r+0x12>
 800d230:	2000      	movs	r0, #0
 800d232:	e007      	b.n	800d244 <__sfputs_r+0x22>
 800d234:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d238:	463a      	mov	r2, r7
 800d23a:	4630      	mov	r0, r6
 800d23c:	f7ff ffda 	bl	800d1f4 <__sfputc_r>
 800d240:	1c43      	adds	r3, r0, #1
 800d242:	d1f3      	bne.n	800d22c <__sfputs_r+0xa>
 800d244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d248 <_vfiprintf_r>:
 800d248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d24c:	460d      	mov	r5, r1
 800d24e:	b09d      	sub	sp, #116	@ 0x74
 800d250:	4614      	mov	r4, r2
 800d252:	4698      	mov	r8, r3
 800d254:	4606      	mov	r6, r0
 800d256:	b118      	cbz	r0, 800d260 <_vfiprintf_r+0x18>
 800d258:	6a03      	ldr	r3, [r0, #32]
 800d25a:	b90b      	cbnz	r3, 800d260 <_vfiprintf_r+0x18>
 800d25c:	f7fe f98a 	bl	800b574 <__sinit>
 800d260:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d262:	07d9      	lsls	r1, r3, #31
 800d264:	d405      	bmi.n	800d272 <_vfiprintf_r+0x2a>
 800d266:	89ab      	ldrh	r3, [r5, #12]
 800d268:	059a      	lsls	r2, r3, #22
 800d26a:	d402      	bmi.n	800d272 <_vfiprintf_r+0x2a>
 800d26c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d26e:	f7fe fb80 	bl	800b972 <__retarget_lock_acquire_recursive>
 800d272:	89ab      	ldrh	r3, [r5, #12]
 800d274:	071b      	lsls	r3, r3, #28
 800d276:	d501      	bpl.n	800d27c <_vfiprintf_r+0x34>
 800d278:	692b      	ldr	r3, [r5, #16]
 800d27a:	b99b      	cbnz	r3, 800d2a4 <_vfiprintf_r+0x5c>
 800d27c:	4629      	mov	r1, r5
 800d27e:	4630      	mov	r0, r6
 800d280:	f000 f9e4 	bl	800d64c <__swsetup_r>
 800d284:	b170      	cbz	r0, 800d2a4 <_vfiprintf_r+0x5c>
 800d286:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d288:	07dc      	lsls	r4, r3, #31
 800d28a:	d504      	bpl.n	800d296 <_vfiprintf_r+0x4e>
 800d28c:	f04f 30ff 	mov.w	r0, #4294967295
 800d290:	b01d      	add	sp, #116	@ 0x74
 800d292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d296:	89ab      	ldrh	r3, [r5, #12]
 800d298:	0598      	lsls	r0, r3, #22
 800d29a:	d4f7      	bmi.n	800d28c <_vfiprintf_r+0x44>
 800d29c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d29e:	f7fe fb69 	bl	800b974 <__retarget_lock_release_recursive>
 800d2a2:	e7f3      	b.n	800d28c <_vfiprintf_r+0x44>
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	9309      	str	r3, [sp, #36]	@ 0x24
 800d2a8:	2320      	movs	r3, #32
 800d2aa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d2ae:	f8cd 800c 	str.w	r8, [sp, #12]
 800d2b2:	2330      	movs	r3, #48	@ 0x30
 800d2b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d464 <_vfiprintf_r+0x21c>
 800d2b8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d2bc:	f04f 0901 	mov.w	r9, #1
 800d2c0:	4623      	mov	r3, r4
 800d2c2:	469a      	mov	sl, r3
 800d2c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2c8:	b10a      	cbz	r2, 800d2ce <_vfiprintf_r+0x86>
 800d2ca:	2a25      	cmp	r2, #37	@ 0x25
 800d2cc:	d1f9      	bne.n	800d2c2 <_vfiprintf_r+0x7a>
 800d2ce:	ebba 0b04 	subs.w	fp, sl, r4
 800d2d2:	d00b      	beq.n	800d2ec <_vfiprintf_r+0xa4>
 800d2d4:	465b      	mov	r3, fp
 800d2d6:	4622      	mov	r2, r4
 800d2d8:	4629      	mov	r1, r5
 800d2da:	4630      	mov	r0, r6
 800d2dc:	f7ff ffa1 	bl	800d222 <__sfputs_r>
 800d2e0:	3001      	adds	r0, #1
 800d2e2:	f000 80a7 	beq.w	800d434 <_vfiprintf_r+0x1ec>
 800d2e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d2e8:	445a      	add	r2, fp
 800d2ea:	9209      	str	r2, [sp, #36]	@ 0x24
 800d2ec:	f89a 3000 	ldrb.w	r3, [sl]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	f000 809f 	beq.w	800d434 <_vfiprintf_r+0x1ec>
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	f04f 32ff 	mov.w	r2, #4294967295
 800d2fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d300:	f10a 0a01 	add.w	sl, sl, #1
 800d304:	9304      	str	r3, [sp, #16]
 800d306:	9307      	str	r3, [sp, #28]
 800d308:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d30c:	931a      	str	r3, [sp, #104]	@ 0x68
 800d30e:	4654      	mov	r4, sl
 800d310:	2205      	movs	r2, #5
 800d312:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d316:	4853      	ldr	r0, [pc, #332]	@ (800d464 <_vfiprintf_r+0x21c>)
 800d318:	f7f2 ff5a 	bl	80001d0 <memchr>
 800d31c:	9a04      	ldr	r2, [sp, #16]
 800d31e:	b9d8      	cbnz	r0, 800d358 <_vfiprintf_r+0x110>
 800d320:	06d1      	lsls	r1, r2, #27
 800d322:	bf44      	itt	mi
 800d324:	2320      	movmi	r3, #32
 800d326:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d32a:	0713      	lsls	r3, r2, #28
 800d32c:	bf44      	itt	mi
 800d32e:	232b      	movmi	r3, #43	@ 0x2b
 800d330:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d334:	f89a 3000 	ldrb.w	r3, [sl]
 800d338:	2b2a      	cmp	r3, #42	@ 0x2a
 800d33a:	d015      	beq.n	800d368 <_vfiprintf_r+0x120>
 800d33c:	9a07      	ldr	r2, [sp, #28]
 800d33e:	4654      	mov	r4, sl
 800d340:	2000      	movs	r0, #0
 800d342:	f04f 0c0a 	mov.w	ip, #10
 800d346:	4621      	mov	r1, r4
 800d348:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d34c:	3b30      	subs	r3, #48	@ 0x30
 800d34e:	2b09      	cmp	r3, #9
 800d350:	d94b      	bls.n	800d3ea <_vfiprintf_r+0x1a2>
 800d352:	b1b0      	cbz	r0, 800d382 <_vfiprintf_r+0x13a>
 800d354:	9207      	str	r2, [sp, #28]
 800d356:	e014      	b.n	800d382 <_vfiprintf_r+0x13a>
 800d358:	eba0 0308 	sub.w	r3, r0, r8
 800d35c:	fa09 f303 	lsl.w	r3, r9, r3
 800d360:	4313      	orrs	r3, r2
 800d362:	9304      	str	r3, [sp, #16]
 800d364:	46a2      	mov	sl, r4
 800d366:	e7d2      	b.n	800d30e <_vfiprintf_r+0xc6>
 800d368:	9b03      	ldr	r3, [sp, #12]
 800d36a:	1d19      	adds	r1, r3, #4
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	9103      	str	r1, [sp, #12]
 800d370:	2b00      	cmp	r3, #0
 800d372:	bfbb      	ittet	lt
 800d374:	425b      	neglt	r3, r3
 800d376:	f042 0202 	orrlt.w	r2, r2, #2
 800d37a:	9307      	strge	r3, [sp, #28]
 800d37c:	9307      	strlt	r3, [sp, #28]
 800d37e:	bfb8      	it	lt
 800d380:	9204      	strlt	r2, [sp, #16]
 800d382:	7823      	ldrb	r3, [r4, #0]
 800d384:	2b2e      	cmp	r3, #46	@ 0x2e
 800d386:	d10a      	bne.n	800d39e <_vfiprintf_r+0x156>
 800d388:	7863      	ldrb	r3, [r4, #1]
 800d38a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d38c:	d132      	bne.n	800d3f4 <_vfiprintf_r+0x1ac>
 800d38e:	9b03      	ldr	r3, [sp, #12]
 800d390:	1d1a      	adds	r2, r3, #4
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	9203      	str	r2, [sp, #12]
 800d396:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d39a:	3402      	adds	r4, #2
 800d39c:	9305      	str	r3, [sp, #20]
 800d39e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d474 <_vfiprintf_r+0x22c>
 800d3a2:	7821      	ldrb	r1, [r4, #0]
 800d3a4:	2203      	movs	r2, #3
 800d3a6:	4650      	mov	r0, sl
 800d3a8:	f7f2 ff12 	bl	80001d0 <memchr>
 800d3ac:	b138      	cbz	r0, 800d3be <_vfiprintf_r+0x176>
 800d3ae:	9b04      	ldr	r3, [sp, #16]
 800d3b0:	eba0 000a 	sub.w	r0, r0, sl
 800d3b4:	2240      	movs	r2, #64	@ 0x40
 800d3b6:	4082      	lsls	r2, r0
 800d3b8:	4313      	orrs	r3, r2
 800d3ba:	3401      	adds	r4, #1
 800d3bc:	9304      	str	r3, [sp, #16]
 800d3be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3c2:	4829      	ldr	r0, [pc, #164]	@ (800d468 <_vfiprintf_r+0x220>)
 800d3c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d3c8:	2206      	movs	r2, #6
 800d3ca:	f7f2 ff01 	bl	80001d0 <memchr>
 800d3ce:	2800      	cmp	r0, #0
 800d3d0:	d03f      	beq.n	800d452 <_vfiprintf_r+0x20a>
 800d3d2:	4b26      	ldr	r3, [pc, #152]	@ (800d46c <_vfiprintf_r+0x224>)
 800d3d4:	bb1b      	cbnz	r3, 800d41e <_vfiprintf_r+0x1d6>
 800d3d6:	9b03      	ldr	r3, [sp, #12]
 800d3d8:	3307      	adds	r3, #7
 800d3da:	f023 0307 	bic.w	r3, r3, #7
 800d3de:	3308      	adds	r3, #8
 800d3e0:	9303      	str	r3, [sp, #12]
 800d3e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3e4:	443b      	add	r3, r7
 800d3e6:	9309      	str	r3, [sp, #36]	@ 0x24
 800d3e8:	e76a      	b.n	800d2c0 <_vfiprintf_r+0x78>
 800d3ea:	fb0c 3202 	mla	r2, ip, r2, r3
 800d3ee:	460c      	mov	r4, r1
 800d3f0:	2001      	movs	r0, #1
 800d3f2:	e7a8      	b.n	800d346 <_vfiprintf_r+0xfe>
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	3401      	adds	r4, #1
 800d3f8:	9305      	str	r3, [sp, #20]
 800d3fa:	4619      	mov	r1, r3
 800d3fc:	f04f 0c0a 	mov.w	ip, #10
 800d400:	4620      	mov	r0, r4
 800d402:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d406:	3a30      	subs	r2, #48	@ 0x30
 800d408:	2a09      	cmp	r2, #9
 800d40a:	d903      	bls.n	800d414 <_vfiprintf_r+0x1cc>
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d0c6      	beq.n	800d39e <_vfiprintf_r+0x156>
 800d410:	9105      	str	r1, [sp, #20]
 800d412:	e7c4      	b.n	800d39e <_vfiprintf_r+0x156>
 800d414:	fb0c 2101 	mla	r1, ip, r1, r2
 800d418:	4604      	mov	r4, r0
 800d41a:	2301      	movs	r3, #1
 800d41c:	e7f0      	b.n	800d400 <_vfiprintf_r+0x1b8>
 800d41e:	ab03      	add	r3, sp, #12
 800d420:	9300      	str	r3, [sp, #0]
 800d422:	462a      	mov	r2, r5
 800d424:	4b12      	ldr	r3, [pc, #72]	@ (800d470 <_vfiprintf_r+0x228>)
 800d426:	a904      	add	r1, sp, #16
 800d428:	4630      	mov	r0, r6
 800d42a:	f7fd fc5f 	bl	800acec <_printf_float>
 800d42e:	4607      	mov	r7, r0
 800d430:	1c78      	adds	r0, r7, #1
 800d432:	d1d6      	bne.n	800d3e2 <_vfiprintf_r+0x19a>
 800d434:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d436:	07d9      	lsls	r1, r3, #31
 800d438:	d405      	bmi.n	800d446 <_vfiprintf_r+0x1fe>
 800d43a:	89ab      	ldrh	r3, [r5, #12]
 800d43c:	059a      	lsls	r2, r3, #22
 800d43e:	d402      	bmi.n	800d446 <_vfiprintf_r+0x1fe>
 800d440:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d442:	f7fe fa97 	bl	800b974 <__retarget_lock_release_recursive>
 800d446:	89ab      	ldrh	r3, [r5, #12]
 800d448:	065b      	lsls	r3, r3, #25
 800d44a:	f53f af1f 	bmi.w	800d28c <_vfiprintf_r+0x44>
 800d44e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d450:	e71e      	b.n	800d290 <_vfiprintf_r+0x48>
 800d452:	ab03      	add	r3, sp, #12
 800d454:	9300      	str	r3, [sp, #0]
 800d456:	462a      	mov	r2, r5
 800d458:	4b05      	ldr	r3, [pc, #20]	@ (800d470 <_vfiprintf_r+0x228>)
 800d45a:	a904      	add	r1, sp, #16
 800d45c:	4630      	mov	r0, r6
 800d45e:	f7fd fedd 	bl	800b21c <_printf_i>
 800d462:	e7e4      	b.n	800d42e <_vfiprintf_r+0x1e6>
 800d464:	0800e728 	.word	0x0800e728
 800d468:	0800e732 	.word	0x0800e732
 800d46c:	0800aced 	.word	0x0800aced
 800d470:	0800d223 	.word	0x0800d223
 800d474:	0800e72e 	.word	0x0800e72e

0800d478 <__sflush_r>:
 800d478:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d47c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d480:	0716      	lsls	r6, r2, #28
 800d482:	4605      	mov	r5, r0
 800d484:	460c      	mov	r4, r1
 800d486:	d454      	bmi.n	800d532 <__sflush_r+0xba>
 800d488:	684b      	ldr	r3, [r1, #4]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	dc02      	bgt.n	800d494 <__sflush_r+0x1c>
 800d48e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d490:	2b00      	cmp	r3, #0
 800d492:	dd48      	ble.n	800d526 <__sflush_r+0xae>
 800d494:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d496:	2e00      	cmp	r6, #0
 800d498:	d045      	beq.n	800d526 <__sflush_r+0xae>
 800d49a:	2300      	movs	r3, #0
 800d49c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d4a0:	682f      	ldr	r7, [r5, #0]
 800d4a2:	6a21      	ldr	r1, [r4, #32]
 800d4a4:	602b      	str	r3, [r5, #0]
 800d4a6:	d030      	beq.n	800d50a <__sflush_r+0x92>
 800d4a8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d4aa:	89a3      	ldrh	r3, [r4, #12]
 800d4ac:	0759      	lsls	r1, r3, #29
 800d4ae:	d505      	bpl.n	800d4bc <__sflush_r+0x44>
 800d4b0:	6863      	ldr	r3, [r4, #4]
 800d4b2:	1ad2      	subs	r2, r2, r3
 800d4b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d4b6:	b10b      	cbz	r3, 800d4bc <__sflush_r+0x44>
 800d4b8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d4ba:	1ad2      	subs	r2, r2, r3
 800d4bc:	2300      	movs	r3, #0
 800d4be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d4c0:	6a21      	ldr	r1, [r4, #32]
 800d4c2:	4628      	mov	r0, r5
 800d4c4:	47b0      	blx	r6
 800d4c6:	1c43      	adds	r3, r0, #1
 800d4c8:	89a3      	ldrh	r3, [r4, #12]
 800d4ca:	d106      	bne.n	800d4da <__sflush_r+0x62>
 800d4cc:	6829      	ldr	r1, [r5, #0]
 800d4ce:	291d      	cmp	r1, #29
 800d4d0:	d82b      	bhi.n	800d52a <__sflush_r+0xb2>
 800d4d2:	4a2a      	ldr	r2, [pc, #168]	@ (800d57c <__sflush_r+0x104>)
 800d4d4:	410a      	asrs	r2, r1
 800d4d6:	07d6      	lsls	r6, r2, #31
 800d4d8:	d427      	bmi.n	800d52a <__sflush_r+0xb2>
 800d4da:	2200      	movs	r2, #0
 800d4dc:	6062      	str	r2, [r4, #4]
 800d4de:	04d9      	lsls	r1, r3, #19
 800d4e0:	6922      	ldr	r2, [r4, #16]
 800d4e2:	6022      	str	r2, [r4, #0]
 800d4e4:	d504      	bpl.n	800d4f0 <__sflush_r+0x78>
 800d4e6:	1c42      	adds	r2, r0, #1
 800d4e8:	d101      	bne.n	800d4ee <__sflush_r+0x76>
 800d4ea:	682b      	ldr	r3, [r5, #0]
 800d4ec:	b903      	cbnz	r3, 800d4f0 <__sflush_r+0x78>
 800d4ee:	6560      	str	r0, [r4, #84]	@ 0x54
 800d4f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d4f2:	602f      	str	r7, [r5, #0]
 800d4f4:	b1b9      	cbz	r1, 800d526 <__sflush_r+0xae>
 800d4f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d4fa:	4299      	cmp	r1, r3
 800d4fc:	d002      	beq.n	800d504 <__sflush_r+0x8c>
 800d4fe:	4628      	mov	r0, r5
 800d500:	f7ff f89e 	bl	800c640 <_free_r>
 800d504:	2300      	movs	r3, #0
 800d506:	6363      	str	r3, [r4, #52]	@ 0x34
 800d508:	e00d      	b.n	800d526 <__sflush_r+0xae>
 800d50a:	2301      	movs	r3, #1
 800d50c:	4628      	mov	r0, r5
 800d50e:	47b0      	blx	r6
 800d510:	4602      	mov	r2, r0
 800d512:	1c50      	adds	r0, r2, #1
 800d514:	d1c9      	bne.n	800d4aa <__sflush_r+0x32>
 800d516:	682b      	ldr	r3, [r5, #0]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d0c6      	beq.n	800d4aa <__sflush_r+0x32>
 800d51c:	2b1d      	cmp	r3, #29
 800d51e:	d001      	beq.n	800d524 <__sflush_r+0xac>
 800d520:	2b16      	cmp	r3, #22
 800d522:	d11e      	bne.n	800d562 <__sflush_r+0xea>
 800d524:	602f      	str	r7, [r5, #0]
 800d526:	2000      	movs	r0, #0
 800d528:	e022      	b.n	800d570 <__sflush_r+0xf8>
 800d52a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d52e:	b21b      	sxth	r3, r3
 800d530:	e01b      	b.n	800d56a <__sflush_r+0xf2>
 800d532:	690f      	ldr	r7, [r1, #16]
 800d534:	2f00      	cmp	r7, #0
 800d536:	d0f6      	beq.n	800d526 <__sflush_r+0xae>
 800d538:	0793      	lsls	r3, r2, #30
 800d53a:	680e      	ldr	r6, [r1, #0]
 800d53c:	bf08      	it	eq
 800d53e:	694b      	ldreq	r3, [r1, #20]
 800d540:	600f      	str	r7, [r1, #0]
 800d542:	bf18      	it	ne
 800d544:	2300      	movne	r3, #0
 800d546:	eba6 0807 	sub.w	r8, r6, r7
 800d54a:	608b      	str	r3, [r1, #8]
 800d54c:	f1b8 0f00 	cmp.w	r8, #0
 800d550:	dde9      	ble.n	800d526 <__sflush_r+0xae>
 800d552:	6a21      	ldr	r1, [r4, #32]
 800d554:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d556:	4643      	mov	r3, r8
 800d558:	463a      	mov	r2, r7
 800d55a:	4628      	mov	r0, r5
 800d55c:	47b0      	blx	r6
 800d55e:	2800      	cmp	r0, #0
 800d560:	dc08      	bgt.n	800d574 <__sflush_r+0xfc>
 800d562:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d566:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d56a:	81a3      	strh	r3, [r4, #12]
 800d56c:	f04f 30ff 	mov.w	r0, #4294967295
 800d570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d574:	4407      	add	r7, r0
 800d576:	eba8 0800 	sub.w	r8, r8, r0
 800d57a:	e7e7      	b.n	800d54c <__sflush_r+0xd4>
 800d57c:	dfbffffe 	.word	0xdfbffffe

0800d580 <_fflush_r>:
 800d580:	b538      	push	{r3, r4, r5, lr}
 800d582:	690b      	ldr	r3, [r1, #16]
 800d584:	4605      	mov	r5, r0
 800d586:	460c      	mov	r4, r1
 800d588:	b913      	cbnz	r3, 800d590 <_fflush_r+0x10>
 800d58a:	2500      	movs	r5, #0
 800d58c:	4628      	mov	r0, r5
 800d58e:	bd38      	pop	{r3, r4, r5, pc}
 800d590:	b118      	cbz	r0, 800d59a <_fflush_r+0x1a>
 800d592:	6a03      	ldr	r3, [r0, #32]
 800d594:	b90b      	cbnz	r3, 800d59a <_fflush_r+0x1a>
 800d596:	f7fd ffed 	bl	800b574 <__sinit>
 800d59a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d0f3      	beq.n	800d58a <_fflush_r+0xa>
 800d5a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d5a4:	07d0      	lsls	r0, r2, #31
 800d5a6:	d404      	bmi.n	800d5b2 <_fflush_r+0x32>
 800d5a8:	0599      	lsls	r1, r3, #22
 800d5aa:	d402      	bmi.n	800d5b2 <_fflush_r+0x32>
 800d5ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d5ae:	f7fe f9e0 	bl	800b972 <__retarget_lock_acquire_recursive>
 800d5b2:	4628      	mov	r0, r5
 800d5b4:	4621      	mov	r1, r4
 800d5b6:	f7ff ff5f 	bl	800d478 <__sflush_r>
 800d5ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d5bc:	07da      	lsls	r2, r3, #31
 800d5be:	4605      	mov	r5, r0
 800d5c0:	d4e4      	bmi.n	800d58c <_fflush_r+0xc>
 800d5c2:	89a3      	ldrh	r3, [r4, #12]
 800d5c4:	059b      	lsls	r3, r3, #22
 800d5c6:	d4e1      	bmi.n	800d58c <_fflush_r+0xc>
 800d5c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d5ca:	f7fe f9d3 	bl	800b974 <__retarget_lock_release_recursive>
 800d5ce:	e7dd      	b.n	800d58c <_fflush_r+0xc>

0800d5d0 <__swbuf_r>:
 800d5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5d2:	460e      	mov	r6, r1
 800d5d4:	4614      	mov	r4, r2
 800d5d6:	4605      	mov	r5, r0
 800d5d8:	b118      	cbz	r0, 800d5e2 <__swbuf_r+0x12>
 800d5da:	6a03      	ldr	r3, [r0, #32]
 800d5dc:	b90b      	cbnz	r3, 800d5e2 <__swbuf_r+0x12>
 800d5de:	f7fd ffc9 	bl	800b574 <__sinit>
 800d5e2:	69a3      	ldr	r3, [r4, #24]
 800d5e4:	60a3      	str	r3, [r4, #8]
 800d5e6:	89a3      	ldrh	r3, [r4, #12]
 800d5e8:	071a      	lsls	r2, r3, #28
 800d5ea:	d501      	bpl.n	800d5f0 <__swbuf_r+0x20>
 800d5ec:	6923      	ldr	r3, [r4, #16]
 800d5ee:	b943      	cbnz	r3, 800d602 <__swbuf_r+0x32>
 800d5f0:	4621      	mov	r1, r4
 800d5f2:	4628      	mov	r0, r5
 800d5f4:	f000 f82a 	bl	800d64c <__swsetup_r>
 800d5f8:	b118      	cbz	r0, 800d602 <__swbuf_r+0x32>
 800d5fa:	f04f 37ff 	mov.w	r7, #4294967295
 800d5fe:	4638      	mov	r0, r7
 800d600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d602:	6823      	ldr	r3, [r4, #0]
 800d604:	6922      	ldr	r2, [r4, #16]
 800d606:	1a98      	subs	r0, r3, r2
 800d608:	6963      	ldr	r3, [r4, #20]
 800d60a:	b2f6      	uxtb	r6, r6
 800d60c:	4283      	cmp	r3, r0
 800d60e:	4637      	mov	r7, r6
 800d610:	dc05      	bgt.n	800d61e <__swbuf_r+0x4e>
 800d612:	4621      	mov	r1, r4
 800d614:	4628      	mov	r0, r5
 800d616:	f7ff ffb3 	bl	800d580 <_fflush_r>
 800d61a:	2800      	cmp	r0, #0
 800d61c:	d1ed      	bne.n	800d5fa <__swbuf_r+0x2a>
 800d61e:	68a3      	ldr	r3, [r4, #8]
 800d620:	3b01      	subs	r3, #1
 800d622:	60a3      	str	r3, [r4, #8]
 800d624:	6823      	ldr	r3, [r4, #0]
 800d626:	1c5a      	adds	r2, r3, #1
 800d628:	6022      	str	r2, [r4, #0]
 800d62a:	701e      	strb	r6, [r3, #0]
 800d62c:	6962      	ldr	r2, [r4, #20]
 800d62e:	1c43      	adds	r3, r0, #1
 800d630:	429a      	cmp	r2, r3
 800d632:	d004      	beq.n	800d63e <__swbuf_r+0x6e>
 800d634:	89a3      	ldrh	r3, [r4, #12]
 800d636:	07db      	lsls	r3, r3, #31
 800d638:	d5e1      	bpl.n	800d5fe <__swbuf_r+0x2e>
 800d63a:	2e0a      	cmp	r6, #10
 800d63c:	d1df      	bne.n	800d5fe <__swbuf_r+0x2e>
 800d63e:	4621      	mov	r1, r4
 800d640:	4628      	mov	r0, r5
 800d642:	f7ff ff9d 	bl	800d580 <_fflush_r>
 800d646:	2800      	cmp	r0, #0
 800d648:	d0d9      	beq.n	800d5fe <__swbuf_r+0x2e>
 800d64a:	e7d6      	b.n	800d5fa <__swbuf_r+0x2a>

0800d64c <__swsetup_r>:
 800d64c:	b538      	push	{r3, r4, r5, lr}
 800d64e:	4b29      	ldr	r3, [pc, #164]	@ (800d6f4 <__swsetup_r+0xa8>)
 800d650:	4605      	mov	r5, r0
 800d652:	6818      	ldr	r0, [r3, #0]
 800d654:	460c      	mov	r4, r1
 800d656:	b118      	cbz	r0, 800d660 <__swsetup_r+0x14>
 800d658:	6a03      	ldr	r3, [r0, #32]
 800d65a:	b90b      	cbnz	r3, 800d660 <__swsetup_r+0x14>
 800d65c:	f7fd ff8a 	bl	800b574 <__sinit>
 800d660:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d664:	0719      	lsls	r1, r3, #28
 800d666:	d422      	bmi.n	800d6ae <__swsetup_r+0x62>
 800d668:	06da      	lsls	r2, r3, #27
 800d66a:	d407      	bmi.n	800d67c <__swsetup_r+0x30>
 800d66c:	2209      	movs	r2, #9
 800d66e:	602a      	str	r2, [r5, #0]
 800d670:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d674:	81a3      	strh	r3, [r4, #12]
 800d676:	f04f 30ff 	mov.w	r0, #4294967295
 800d67a:	e033      	b.n	800d6e4 <__swsetup_r+0x98>
 800d67c:	0758      	lsls	r0, r3, #29
 800d67e:	d512      	bpl.n	800d6a6 <__swsetup_r+0x5a>
 800d680:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d682:	b141      	cbz	r1, 800d696 <__swsetup_r+0x4a>
 800d684:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d688:	4299      	cmp	r1, r3
 800d68a:	d002      	beq.n	800d692 <__swsetup_r+0x46>
 800d68c:	4628      	mov	r0, r5
 800d68e:	f7fe ffd7 	bl	800c640 <_free_r>
 800d692:	2300      	movs	r3, #0
 800d694:	6363      	str	r3, [r4, #52]	@ 0x34
 800d696:	89a3      	ldrh	r3, [r4, #12]
 800d698:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d69c:	81a3      	strh	r3, [r4, #12]
 800d69e:	2300      	movs	r3, #0
 800d6a0:	6063      	str	r3, [r4, #4]
 800d6a2:	6923      	ldr	r3, [r4, #16]
 800d6a4:	6023      	str	r3, [r4, #0]
 800d6a6:	89a3      	ldrh	r3, [r4, #12]
 800d6a8:	f043 0308 	orr.w	r3, r3, #8
 800d6ac:	81a3      	strh	r3, [r4, #12]
 800d6ae:	6923      	ldr	r3, [r4, #16]
 800d6b0:	b94b      	cbnz	r3, 800d6c6 <__swsetup_r+0x7a>
 800d6b2:	89a3      	ldrh	r3, [r4, #12]
 800d6b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d6b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d6bc:	d003      	beq.n	800d6c6 <__swsetup_r+0x7a>
 800d6be:	4621      	mov	r1, r4
 800d6c0:	4628      	mov	r0, r5
 800d6c2:	f000 f8fb 	bl	800d8bc <__smakebuf_r>
 800d6c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6ca:	f013 0201 	ands.w	r2, r3, #1
 800d6ce:	d00a      	beq.n	800d6e6 <__swsetup_r+0x9a>
 800d6d0:	2200      	movs	r2, #0
 800d6d2:	60a2      	str	r2, [r4, #8]
 800d6d4:	6962      	ldr	r2, [r4, #20]
 800d6d6:	4252      	negs	r2, r2
 800d6d8:	61a2      	str	r2, [r4, #24]
 800d6da:	6922      	ldr	r2, [r4, #16]
 800d6dc:	b942      	cbnz	r2, 800d6f0 <__swsetup_r+0xa4>
 800d6de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d6e2:	d1c5      	bne.n	800d670 <__swsetup_r+0x24>
 800d6e4:	bd38      	pop	{r3, r4, r5, pc}
 800d6e6:	0799      	lsls	r1, r3, #30
 800d6e8:	bf58      	it	pl
 800d6ea:	6962      	ldrpl	r2, [r4, #20]
 800d6ec:	60a2      	str	r2, [r4, #8]
 800d6ee:	e7f4      	b.n	800d6da <__swsetup_r+0x8e>
 800d6f0:	2000      	movs	r0, #0
 800d6f2:	e7f7      	b.n	800d6e4 <__swsetup_r+0x98>
 800d6f4:	200000dc 	.word	0x200000dc

0800d6f8 <memmove>:
 800d6f8:	4288      	cmp	r0, r1
 800d6fa:	b510      	push	{r4, lr}
 800d6fc:	eb01 0402 	add.w	r4, r1, r2
 800d700:	d902      	bls.n	800d708 <memmove+0x10>
 800d702:	4284      	cmp	r4, r0
 800d704:	4623      	mov	r3, r4
 800d706:	d807      	bhi.n	800d718 <memmove+0x20>
 800d708:	1e43      	subs	r3, r0, #1
 800d70a:	42a1      	cmp	r1, r4
 800d70c:	d008      	beq.n	800d720 <memmove+0x28>
 800d70e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d712:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d716:	e7f8      	b.n	800d70a <memmove+0x12>
 800d718:	4402      	add	r2, r0
 800d71a:	4601      	mov	r1, r0
 800d71c:	428a      	cmp	r2, r1
 800d71e:	d100      	bne.n	800d722 <memmove+0x2a>
 800d720:	bd10      	pop	{r4, pc}
 800d722:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d726:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d72a:	e7f7      	b.n	800d71c <memmove+0x24>

0800d72c <_sbrk_r>:
 800d72c:	b538      	push	{r3, r4, r5, lr}
 800d72e:	4d06      	ldr	r5, [pc, #24]	@ (800d748 <_sbrk_r+0x1c>)
 800d730:	2300      	movs	r3, #0
 800d732:	4604      	mov	r4, r0
 800d734:	4608      	mov	r0, r1
 800d736:	602b      	str	r3, [r5, #0]
 800d738:	f7f6 fb9e 	bl	8003e78 <_sbrk>
 800d73c:	1c43      	adds	r3, r0, #1
 800d73e:	d102      	bne.n	800d746 <_sbrk_r+0x1a>
 800d740:	682b      	ldr	r3, [r5, #0]
 800d742:	b103      	cbz	r3, 800d746 <_sbrk_r+0x1a>
 800d744:	6023      	str	r3, [r4, #0]
 800d746:	bd38      	pop	{r3, r4, r5, pc}
 800d748:	200057c0 	.word	0x200057c0

0800d74c <__assert_func>:
 800d74c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d74e:	4614      	mov	r4, r2
 800d750:	461a      	mov	r2, r3
 800d752:	4b09      	ldr	r3, [pc, #36]	@ (800d778 <__assert_func+0x2c>)
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	4605      	mov	r5, r0
 800d758:	68d8      	ldr	r0, [r3, #12]
 800d75a:	b954      	cbnz	r4, 800d772 <__assert_func+0x26>
 800d75c:	4b07      	ldr	r3, [pc, #28]	@ (800d77c <__assert_func+0x30>)
 800d75e:	461c      	mov	r4, r3
 800d760:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d764:	9100      	str	r1, [sp, #0]
 800d766:	462b      	mov	r3, r5
 800d768:	4905      	ldr	r1, [pc, #20]	@ (800d780 <__assert_func+0x34>)
 800d76a:	f000 f86f 	bl	800d84c <fiprintf>
 800d76e:	f000 f903 	bl	800d978 <abort>
 800d772:	4b04      	ldr	r3, [pc, #16]	@ (800d784 <__assert_func+0x38>)
 800d774:	e7f4      	b.n	800d760 <__assert_func+0x14>
 800d776:	bf00      	nop
 800d778:	200000dc 	.word	0x200000dc
 800d77c:	0800e77e 	.word	0x0800e77e
 800d780:	0800e750 	.word	0x0800e750
 800d784:	0800e743 	.word	0x0800e743

0800d788 <_calloc_r>:
 800d788:	b570      	push	{r4, r5, r6, lr}
 800d78a:	fba1 5402 	umull	r5, r4, r1, r2
 800d78e:	b93c      	cbnz	r4, 800d7a0 <_calloc_r+0x18>
 800d790:	4629      	mov	r1, r5
 800d792:	f7fe ffc9 	bl	800c728 <_malloc_r>
 800d796:	4606      	mov	r6, r0
 800d798:	b928      	cbnz	r0, 800d7a6 <_calloc_r+0x1e>
 800d79a:	2600      	movs	r6, #0
 800d79c:	4630      	mov	r0, r6
 800d79e:	bd70      	pop	{r4, r5, r6, pc}
 800d7a0:	220c      	movs	r2, #12
 800d7a2:	6002      	str	r2, [r0, #0]
 800d7a4:	e7f9      	b.n	800d79a <_calloc_r+0x12>
 800d7a6:	462a      	mov	r2, r5
 800d7a8:	4621      	mov	r1, r4
 800d7aa:	f7fd fffb 	bl	800b7a4 <memset>
 800d7ae:	e7f5      	b.n	800d79c <_calloc_r+0x14>

0800d7b0 <__ascii_mbtowc>:
 800d7b0:	b082      	sub	sp, #8
 800d7b2:	b901      	cbnz	r1, 800d7b6 <__ascii_mbtowc+0x6>
 800d7b4:	a901      	add	r1, sp, #4
 800d7b6:	b142      	cbz	r2, 800d7ca <__ascii_mbtowc+0x1a>
 800d7b8:	b14b      	cbz	r3, 800d7ce <__ascii_mbtowc+0x1e>
 800d7ba:	7813      	ldrb	r3, [r2, #0]
 800d7bc:	600b      	str	r3, [r1, #0]
 800d7be:	7812      	ldrb	r2, [r2, #0]
 800d7c0:	1e10      	subs	r0, r2, #0
 800d7c2:	bf18      	it	ne
 800d7c4:	2001      	movne	r0, #1
 800d7c6:	b002      	add	sp, #8
 800d7c8:	4770      	bx	lr
 800d7ca:	4610      	mov	r0, r2
 800d7cc:	e7fb      	b.n	800d7c6 <__ascii_mbtowc+0x16>
 800d7ce:	f06f 0001 	mvn.w	r0, #1
 800d7d2:	e7f8      	b.n	800d7c6 <__ascii_mbtowc+0x16>

0800d7d4 <_realloc_r>:
 800d7d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7d8:	4680      	mov	r8, r0
 800d7da:	4615      	mov	r5, r2
 800d7dc:	460c      	mov	r4, r1
 800d7de:	b921      	cbnz	r1, 800d7ea <_realloc_r+0x16>
 800d7e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d7e4:	4611      	mov	r1, r2
 800d7e6:	f7fe bf9f 	b.w	800c728 <_malloc_r>
 800d7ea:	b92a      	cbnz	r2, 800d7f8 <_realloc_r+0x24>
 800d7ec:	f7fe ff28 	bl	800c640 <_free_r>
 800d7f0:	2400      	movs	r4, #0
 800d7f2:	4620      	mov	r0, r4
 800d7f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7f8:	f000 f8c5 	bl	800d986 <_malloc_usable_size_r>
 800d7fc:	4285      	cmp	r5, r0
 800d7fe:	4606      	mov	r6, r0
 800d800:	d802      	bhi.n	800d808 <_realloc_r+0x34>
 800d802:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d806:	d8f4      	bhi.n	800d7f2 <_realloc_r+0x1e>
 800d808:	4629      	mov	r1, r5
 800d80a:	4640      	mov	r0, r8
 800d80c:	f7fe ff8c 	bl	800c728 <_malloc_r>
 800d810:	4607      	mov	r7, r0
 800d812:	2800      	cmp	r0, #0
 800d814:	d0ec      	beq.n	800d7f0 <_realloc_r+0x1c>
 800d816:	42b5      	cmp	r5, r6
 800d818:	462a      	mov	r2, r5
 800d81a:	4621      	mov	r1, r4
 800d81c:	bf28      	it	cs
 800d81e:	4632      	movcs	r2, r6
 800d820:	f7fe f8b1 	bl	800b986 <memcpy>
 800d824:	4621      	mov	r1, r4
 800d826:	4640      	mov	r0, r8
 800d828:	f7fe ff0a 	bl	800c640 <_free_r>
 800d82c:	463c      	mov	r4, r7
 800d82e:	e7e0      	b.n	800d7f2 <_realloc_r+0x1e>

0800d830 <__ascii_wctomb>:
 800d830:	4603      	mov	r3, r0
 800d832:	4608      	mov	r0, r1
 800d834:	b141      	cbz	r1, 800d848 <__ascii_wctomb+0x18>
 800d836:	2aff      	cmp	r2, #255	@ 0xff
 800d838:	d904      	bls.n	800d844 <__ascii_wctomb+0x14>
 800d83a:	228a      	movs	r2, #138	@ 0x8a
 800d83c:	601a      	str	r2, [r3, #0]
 800d83e:	f04f 30ff 	mov.w	r0, #4294967295
 800d842:	4770      	bx	lr
 800d844:	700a      	strb	r2, [r1, #0]
 800d846:	2001      	movs	r0, #1
 800d848:	4770      	bx	lr
	...

0800d84c <fiprintf>:
 800d84c:	b40e      	push	{r1, r2, r3}
 800d84e:	b503      	push	{r0, r1, lr}
 800d850:	4601      	mov	r1, r0
 800d852:	ab03      	add	r3, sp, #12
 800d854:	4805      	ldr	r0, [pc, #20]	@ (800d86c <fiprintf+0x20>)
 800d856:	f853 2b04 	ldr.w	r2, [r3], #4
 800d85a:	6800      	ldr	r0, [r0, #0]
 800d85c:	9301      	str	r3, [sp, #4]
 800d85e:	f7ff fcf3 	bl	800d248 <_vfiprintf_r>
 800d862:	b002      	add	sp, #8
 800d864:	f85d eb04 	ldr.w	lr, [sp], #4
 800d868:	b003      	add	sp, #12
 800d86a:	4770      	bx	lr
 800d86c:	200000dc 	.word	0x200000dc

0800d870 <__swhatbuf_r>:
 800d870:	b570      	push	{r4, r5, r6, lr}
 800d872:	460c      	mov	r4, r1
 800d874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d878:	2900      	cmp	r1, #0
 800d87a:	b096      	sub	sp, #88	@ 0x58
 800d87c:	4615      	mov	r5, r2
 800d87e:	461e      	mov	r6, r3
 800d880:	da0d      	bge.n	800d89e <__swhatbuf_r+0x2e>
 800d882:	89a3      	ldrh	r3, [r4, #12]
 800d884:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d888:	f04f 0100 	mov.w	r1, #0
 800d88c:	bf14      	ite	ne
 800d88e:	2340      	movne	r3, #64	@ 0x40
 800d890:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d894:	2000      	movs	r0, #0
 800d896:	6031      	str	r1, [r6, #0]
 800d898:	602b      	str	r3, [r5, #0]
 800d89a:	b016      	add	sp, #88	@ 0x58
 800d89c:	bd70      	pop	{r4, r5, r6, pc}
 800d89e:	466a      	mov	r2, sp
 800d8a0:	f000 f848 	bl	800d934 <_fstat_r>
 800d8a4:	2800      	cmp	r0, #0
 800d8a6:	dbec      	blt.n	800d882 <__swhatbuf_r+0x12>
 800d8a8:	9901      	ldr	r1, [sp, #4]
 800d8aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d8ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d8b2:	4259      	negs	r1, r3
 800d8b4:	4159      	adcs	r1, r3
 800d8b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d8ba:	e7eb      	b.n	800d894 <__swhatbuf_r+0x24>

0800d8bc <__smakebuf_r>:
 800d8bc:	898b      	ldrh	r3, [r1, #12]
 800d8be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d8c0:	079d      	lsls	r5, r3, #30
 800d8c2:	4606      	mov	r6, r0
 800d8c4:	460c      	mov	r4, r1
 800d8c6:	d507      	bpl.n	800d8d8 <__smakebuf_r+0x1c>
 800d8c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d8cc:	6023      	str	r3, [r4, #0]
 800d8ce:	6123      	str	r3, [r4, #16]
 800d8d0:	2301      	movs	r3, #1
 800d8d2:	6163      	str	r3, [r4, #20]
 800d8d4:	b003      	add	sp, #12
 800d8d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d8d8:	ab01      	add	r3, sp, #4
 800d8da:	466a      	mov	r2, sp
 800d8dc:	f7ff ffc8 	bl	800d870 <__swhatbuf_r>
 800d8e0:	9f00      	ldr	r7, [sp, #0]
 800d8e2:	4605      	mov	r5, r0
 800d8e4:	4639      	mov	r1, r7
 800d8e6:	4630      	mov	r0, r6
 800d8e8:	f7fe ff1e 	bl	800c728 <_malloc_r>
 800d8ec:	b948      	cbnz	r0, 800d902 <__smakebuf_r+0x46>
 800d8ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8f2:	059a      	lsls	r2, r3, #22
 800d8f4:	d4ee      	bmi.n	800d8d4 <__smakebuf_r+0x18>
 800d8f6:	f023 0303 	bic.w	r3, r3, #3
 800d8fa:	f043 0302 	orr.w	r3, r3, #2
 800d8fe:	81a3      	strh	r3, [r4, #12]
 800d900:	e7e2      	b.n	800d8c8 <__smakebuf_r+0xc>
 800d902:	89a3      	ldrh	r3, [r4, #12]
 800d904:	6020      	str	r0, [r4, #0]
 800d906:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d90a:	81a3      	strh	r3, [r4, #12]
 800d90c:	9b01      	ldr	r3, [sp, #4]
 800d90e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d912:	b15b      	cbz	r3, 800d92c <__smakebuf_r+0x70>
 800d914:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d918:	4630      	mov	r0, r6
 800d91a:	f000 f81d 	bl	800d958 <_isatty_r>
 800d91e:	b128      	cbz	r0, 800d92c <__smakebuf_r+0x70>
 800d920:	89a3      	ldrh	r3, [r4, #12]
 800d922:	f023 0303 	bic.w	r3, r3, #3
 800d926:	f043 0301 	orr.w	r3, r3, #1
 800d92a:	81a3      	strh	r3, [r4, #12]
 800d92c:	89a3      	ldrh	r3, [r4, #12]
 800d92e:	431d      	orrs	r5, r3
 800d930:	81a5      	strh	r5, [r4, #12]
 800d932:	e7cf      	b.n	800d8d4 <__smakebuf_r+0x18>

0800d934 <_fstat_r>:
 800d934:	b538      	push	{r3, r4, r5, lr}
 800d936:	4d07      	ldr	r5, [pc, #28]	@ (800d954 <_fstat_r+0x20>)
 800d938:	2300      	movs	r3, #0
 800d93a:	4604      	mov	r4, r0
 800d93c:	4608      	mov	r0, r1
 800d93e:	4611      	mov	r1, r2
 800d940:	602b      	str	r3, [r5, #0]
 800d942:	f7f6 fa71 	bl	8003e28 <_fstat>
 800d946:	1c43      	adds	r3, r0, #1
 800d948:	d102      	bne.n	800d950 <_fstat_r+0x1c>
 800d94a:	682b      	ldr	r3, [r5, #0]
 800d94c:	b103      	cbz	r3, 800d950 <_fstat_r+0x1c>
 800d94e:	6023      	str	r3, [r4, #0]
 800d950:	bd38      	pop	{r3, r4, r5, pc}
 800d952:	bf00      	nop
 800d954:	200057c0 	.word	0x200057c0

0800d958 <_isatty_r>:
 800d958:	b538      	push	{r3, r4, r5, lr}
 800d95a:	4d06      	ldr	r5, [pc, #24]	@ (800d974 <_isatty_r+0x1c>)
 800d95c:	2300      	movs	r3, #0
 800d95e:	4604      	mov	r4, r0
 800d960:	4608      	mov	r0, r1
 800d962:	602b      	str	r3, [r5, #0]
 800d964:	f7f6 fa70 	bl	8003e48 <_isatty>
 800d968:	1c43      	adds	r3, r0, #1
 800d96a:	d102      	bne.n	800d972 <_isatty_r+0x1a>
 800d96c:	682b      	ldr	r3, [r5, #0]
 800d96e:	b103      	cbz	r3, 800d972 <_isatty_r+0x1a>
 800d970:	6023      	str	r3, [r4, #0]
 800d972:	bd38      	pop	{r3, r4, r5, pc}
 800d974:	200057c0 	.word	0x200057c0

0800d978 <abort>:
 800d978:	b508      	push	{r3, lr}
 800d97a:	2006      	movs	r0, #6
 800d97c:	f000 f834 	bl	800d9e8 <raise>
 800d980:	2001      	movs	r0, #1
 800d982:	f7f6 fa01 	bl	8003d88 <_exit>

0800d986 <_malloc_usable_size_r>:
 800d986:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d98a:	1f18      	subs	r0, r3, #4
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	bfbc      	itt	lt
 800d990:	580b      	ldrlt	r3, [r1, r0]
 800d992:	18c0      	addlt	r0, r0, r3
 800d994:	4770      	bx	lr

0800d996 <_raise_r>:
 800d996:	291f      	cmp	r1, #31
 800d998:	b538      	push	{r3, r4, r5, lr}
 800d99a:	4605      	mov	r5, r0
 800d99c:	460c      	mov	r4, r1
 800d99e:	d904      	bls.n	800d9aa <_raise_r+0x14>
 800d9a0:	2316      	movs	r3, #22
 800d9a2:	6003      	str	r3, [r0, #0]
 800d9a4:	f04f 30ff 	mov.w	r0, #4294967295
 800d9a8:	bd38      	pop	{r3, r4, r5, pc}
 800d9aa:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d9ac:	b112      	cbz	r2, 800d9b4 <_raise_r+0x1e>
 800d9ae:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d9b2:	b94b      	cbnz	r3, 800d9c8 <_raise_r+0x32>
 800d9b4:	4628      	mov	r0, r5
 800d9b6:	f000 f831 	bl	800da1c <_getpid_r>
 800d9ba:	4622      	mov	r2, r4
 800d9bc:	4601      	mov	r1, r0
 800d9be:	4628      	mov	r0, r5
 800d9c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d9c4:	f000 b818 	b.w	800d9f8 <_kill_r>
 800d9c8:	2b01      	cmp	r3, #1
 800d9ca:	d00a      	beq.n	800d9e2 <_raise_r+0x4c>
 800d9cc:	1c59      	adds	r1, r3, #1
 800d9ce:	d103      	bne.n	800d9d8 <_raise_r+0x42>
 800d9d0:	2316      	movs	r3, #22
 800d9d2:	6003      	str	r3, [r0, #0]
 800d9d4:	2001      	movs	r0, #1
 800d9d6:	e7e7      	b.n	800d9a8 <_raise_r+0x12>
 800d9d8:	2100      	movs	r1, #0
 800d9da:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d9de:	4620      	mov	r0, r4
 800d9e0:	4798      	blx	r3
 800d9e2:	2000      	movs	r0, #0
 800d9e4:	e7e0      	b.n	800d9a8 <_raise_r+0x12>
	...

0800d9e8 <raise>:
 800d9e8:	4b02      	ldr	r3, [pc, #8]	@ (800d9f4 <raise+0xc>)
 800d9ea:	4601      	mov	r1, r0
 800d9ec:	6818      	ldr	r0, [r3, #0]
 800d9ee:	f7ff bfd2 	b.w	800d996 <_raise_r>
 800d9f2:	bf00      	nop
 800d9f4:	200000dc 	.word	0x200000dc

0800d9f8 <_kill_r>:
 800d9f8:	b538      	push	{r3, r4, r5, lr}
 800d9fa:	4d07      	ldr	r5, [pc, #28]	@ (800da18 <_kill_r+0x20>)
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	4604      	mov	r4, r0
 800da00:	4608      	mov	r0, r1
 800da02:	4611      	mov	r1, r2
 800da04:	602b      	str	r3, [r5, #0]
 800da06:	f7f6 f9af 	bl	8003d68 <_kill>
 800da0a:	1c43      	adds	r3, r0, #1
 800da0c:	d102      	bne.n	800da14 <_kill_r+0x1c>
 800da0e:	682b      	ldr	r3, [r5, #0]
 800da10:	b103      	cbz	r3, 800da14 <_kill_r+0x1c>
 800da12:	6023      	str	r3, [r4, #0]
 800da14:	bd38      	pop	{r3, r4, r5, pc}
 800da16:	bf00      	nop
 800da18:	200057c0 	.word	0x200057c0

0800da1c <_getpid_r>:
 800da1c:	f7f6 b99c 	b.w	8003d58 <_getpid>

0800da20 <_init>:
 800da20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da22:	bf00      	nop
 800da24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da26:	bc08      	pop	{r3}
 800da28:	469e      	mov	lr, r3
 800da2a:	4770      	bx	lr

0800da2c <_fini>:
 800da2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da2e:	bf00      	nop
 800da30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da32:	bc08      	pop	{r3}
 800da34:	469e      	mov	lr, r3
 800da36:	4770      	bx	lr
