
LORA_TestBench.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c7c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08004e0c  08004e0c  00005e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800504c  0800504c  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  0800504c  0800504c  0000604c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005054  08005054  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005054  08005054  00006054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005058  08005058  00006058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800505c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000328  2000005c  080050b8  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000384  080050b8  00007384  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000faf7  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000272e  00000000  00000000  00016b83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c28  00000000  00000000  000192b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000093d  00000000  00000000  00019ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003a14  00000000  00000000  0001a81d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001117d  00000000  00000000  0001e231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c349c  00000000  00000000  0002f3ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f284a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035e0  00000000  00000000  000f2890  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000f5e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004df4 	.word	0x08004df4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08004df4 	.word	0x08004df4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <LORACom_Init>:
#include "LORA/RFM9x.h"
#include "shared.h"
LORACom_HandleTypeDef hLORACom;

void LORACom_Init(SPI_HandleTypeDef* hspi,UART_HandleTypeDef* huartDebug)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]
	hLORACom.hspi = hspi;
 800057a:	4a06      	ldr	r2, [pc, #24]	@ (8000594 <LORACom_Init+0x24>)
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	6013      	str	r3, [r2, #0]
	hLORACom.huartDebug = huartDebug;
 8000580:	4a04      	ldr	r2, [pc, #16]	@ (8000594 <LORACom_Init+0x24>)
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	6053      	str	r3, [r2, #4]
}
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	20000078 	.word	0x20000078

08000598 <LORA_Send>:

void LORA_Send(Header* header, uint8_t* payload){
 8000598:	b580      	push	{r7, lr}
 800059a:	b0c2      	sub	sp, #264	@ 0x108
 800059c:	af00      	add	r7, sp, #0
 800059e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80005a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80005a6:	6018      	str	r0, [r3, #0]
 80005a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80005ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80005b0:	6019      	str	r1, [r3, #0]
    uint8_t buffer[RFM9x_FIFO_SIZE];

    // Ajouter l'en-tête
    buffer[0] = header->recipient;
 80005b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80005b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	781a      	ldrb	r2, [r3, #0]
 80005be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80005c2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80005c6:	701a      	strb	r2, [r3, #0]
    buffer[1] = header->sender;
 80005c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80005cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	785a      	ldrb	r2, [r3, #1]
 80005d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80005d8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80005dc:	705a      	strb	r2, [r3, #1]
    buffer[2] = header->type;
 80005de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80005e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	789a      	ldrb	r2, [r3, #2]
 80005ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80005ee:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80005f2:	709a      	strb	r2, [r3, #2]
    buffer[3] = header->len_payload;
 80005f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80005f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	78da      	ldrb	r2, [r3, #3]
 8000600:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000604:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000608:	70da      	strb	r2, [r3, #3]

    // Ajouter la charge utile
    memcpy(buffer + 4 , payload, header->len_payload);
 800060a:	f107 0308 	add.w	r3, r7, #8
 800060e:	3304      	adds	r3, #4
 8000610:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8000614:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000618:	6812      	ldr	r2, [r2, #0]
 800061a:	78d2      	ldrb	r2, [r2, #3]
 800061c:	4610      	mov	r0, r2
 800061e:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8000622:	f5a2 7184 	sub.w	r1, r2, #264	@ 0x108
 8000626:	4602      	mov	r2, r0
 8000628:	6809      	ldr	r1, [r1, #0]
 800062a:	4618      	mov	r0, r3
 800062c:	f004 f882 	bl	8004734 <memcpy>
    RFM9x_Send(buffer, header->len_payload + 4);
 8000630:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000634:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	78db      	ldrb	r3, [r3, #3]
 800063c:	3304      	adds	r3, #4
 800063e:	b2da      	uxtb	r2, r3
 8000640:	f107 0308 	add.w	r3, r7, #8
 8000644:	4611      	mov	r1, r2
 8000646:	4618      	mov	r0, r3
 8000648:	f000 f91e 	bl	8000888 <RFM9x_Send>
    RFM9x_SetMode_Receive();
 800064c:	f000 fa74 	bl	8000b38 <RFM9x_SetMode_Receive>
}
 8000650:	bf00      	nop
 8000652:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
	...

0800065c <LORA_debug>:


void LORA_debug(char* flag, uint8_t* value)
{
 800065c:	b590      	push	{r4, r7, lr}
 800065e:	b0b7      	sub	sp, #220	@ 0xdc
 8000660:	af02      	add	r7, sp, #8
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	6039      	str	r1, [r7, #0]
	char message[200];
	if (value != NULL){
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d009      	beq.n	8000680 <LORA_debug+0x24>
		snprintf(message, sizeof(message),"%s: %s\r\n",flag,value);
 800066c:	f107 0008 	add.w	r0, r7, #8
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	9300      	str	r3, [sp, #0]
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	4a10      	ldr	r2, [pc, #64]	@ (80006b8 <LORA_debug+0x5c>)
 8000678:	21c8      	movs	r1, #200	@ 0xc8
 800067a:	f003 ffc3 	bl	8004604 <sniprintf>
 800067e:	e006      	b.n	800068e <LORA_debug+0x32>
	}
	else {
		snprintf(message,sizeof(message), "%s\r\n",flag);
 8000680:	f107 0008 	add.w	r0, r7, #8
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	4a0d      	ldr	r2, [pc, #52]	@ (80006bc <LORA_debug+0x60>)
 8000688:	21c8      	movs	r1, #200	@ 0xc8
 800068a:	f003 ffbb 	bl	8004604 <sniprintf>
	}
    HAL_UART_Transmit(hLORACom.huartDebug, (uint8_t*)message, strlen(message),HAL_MAX_DELAY);
 800068e:	4b0c      	ldr	r3, [pc, #48]	@ (80006c0 <LORA_debug+0x64>)
 8000690:	685c      	ldr	r4, [r3, #4]
 8000692:	f107 0308 	add.w	r3, r7, #8
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff fd9a 	bl	80001d0 <strlen>
 800069c:	4603      	mov	r3, r0
 800069e:	b29a      	uxth	r2, r3
 80006a0:	f107 0108 	add.w	r1, r7, #8
 80006a4:	f04f 33ff 	mov.w	r3, #4294967295
 80006a8:	4620      	mov	r0, r4
 80006aa:	f003 f9eb 	bl	8003a84 <HAL_UART_Transmit>
}
 80006ae:	bf00      	nop
 80006b0:	37d4      	adds	r7, #212	@ 0xd4
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd90      	pop	{r4, r7, pc}
 80006b6:	bf00      	nop
 80006b8:	08004e0c 	.word	0x08004e0c
 80006bc:	08004e18 	.word	0x08004e18
 80006c0:	20000078 	.word	0x20000078

080006c4 <LORA_debug_hexa>:
void LORA_debug_hexa(char* flag, uint8_t* value, uint8_t len)
{	char* message = (char*)malloc(sizeof(flag));
 80006c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006c8:	b08a      	sub	sp, #40	@ 0x28
 80006ca:	af02      	add	r7, sp, #8
 80006cc:	60f8      	str	r0, [r7, #12]
 80006ce:	60b9      	str	r1, [r7, #8]
 80006d0:	4613      	mov	r3, r2
 80006d2:	71fb      	strb	r3, [r7, #7]
 80006d4:	466b      	mov	r3, sp
 80006d6:	469a      	mov	sl, r3
 80006d8:	2004      	movs	r0, #4
 80006da:	f003 fe9f 	bl	800441c <malloc>
 80006de:	4603      	mov	r3, r0
 80006e0:	61fb      	str	r3, [r7, #28]
    char hexString[len*2+1]; // Buffer to hold the hex string (2 characters per byte)
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	005b      	lsls	r3, r3, #1
 80006e6:	1c5e      	adds	r6, r3, #1
 80006e8:	1e73      	subs	r3, r6, #1
 80006ea:	617b      	str	r3, [r7, #20]
 80006ec:	4632      	mov	r2, r6
 80006ee:	2300      	movs	r3, #0
 80006f0:	4690      	mov	r8, r2
 80006f2:	4699      	mov	r9, r3
 80006f4:	f04f 0200 	mov.w	r2, #0
 80006f8:	f04f 0300 	mov.w	r3, #0
 80006fc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000700:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000704:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000708:	4632      	mov	r2, r6
 800070a:	2300      	movs	r3, #0
 800070c:	4614      	mov	r4, r2
 800070e:	461d      	mov	r5, r3
 8000710:	f04f 0200 	mov.w	r2, #0
 8000714:	f04f 0300 	mov.w	r3, #0
 8000718:	00eb      	lsls	r3, r5, #3
 800071a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800071e:	00e2      	lsls	r2, r4, #3
 8000720:	4633      	mov	r3, r6
 8000722:	3307      	adds	r3, #7
 8000724:	08db      	lsrs	r3, r3, #3
 8000726:	00db      	lsls	r3, r3, #3
 8000728:	ebad 0d03 	sub.w	sp, sp, r3
 800072c:	ab02      	add	r3, sp, #8
 800072e:	3300      	adds	r3, #0
 8000730:	613b      	str	r3, [r7, #16]
	if (value != NULL){
 8000732:	68bb      	ldr	r3, [r7, #8]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d02b      	beq.n	8000790 <LORA_debug_hexa+0xcc>
		for (int i = 0; i < len; i++) {
 8000738:	2300      	movs	r3, #0
 800073a:	61bb      	str	r3, [r7, #24]
 800073c:	e012      	b.n	8000764 <LORA_debug_hexa+0xa0>
		            snprintf(hexString + (i * 2), sizeof(hexString) - (i * 2), "%02X", value[i]);
 800073e:	69bb      	ldr	r3, [r7, #24]
 8000740:	005b      	lsls	r3, r3, #1
 8000742:	461a      	mov	r2, r3
 8000744:	693b      	ldr	r3, [r7, #16]
 8000746:	1898      	adds	r0, r3, r2
 8000748:	4632      	mov	r2, r6
 800074a:	69bb      	ldr	r3, [r7, #24]
 800074c:	005b      	lsls	r3, r3, #1
 800074e:	1ad1      	subs	r1, r2, r3
 8000750:	69bb      	ldr	r3, [r7, #24]
 8000752:	68ba      	ldr	r2, [r7, #8]
 8000754:	4413      	add	r3, r2
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	4a1b      	ldr	r2, [pc, #108]	@ (80007c8 <LORA_debug_hexa+0x104>)
 800075a:	f003 ff53 	bl	8004604 <sniprintf>
		for (int i = 0; i < len; i++) {
 800075e:	69bb      	ldr	r3, [r7, #24]
 8000760:	3301      	adds	r3, #1
 8000762:	61bb      	str	r3, [r7, #24]
 8000764:	79fb      	ldrb	r3, [r7, #7]
 8000766:	69ba      	ldr	r2, [r7, #24]
 8000768:	429a      	cmp	r2, r3
 800076a:	dbe8      	blt.n	800073e <LORA_debug_hexa+0x7a>
		        }
		message= realloc(message,sizeof(hexString)+sizeof(flag)+10);
 800076c:	4633      	mov	r3, r6
 800076e:	330e      	adds	r3, #14
 8000770:	4619      	mov	r1, r3
 8000772:	69f8      	ldr	r0, [r7, #28]
 8000774:	f003 ff10 	bl	8004598 <realloc>
 8000778:	61f8      	str	r0, [r7, #28]
		snprintf(message, sizeof(hexString)+sizeof(flag)+10,"%s: %s\r\n",flag,hexString);
 800077a:	4633      	mov	r3, r6
 800077c:	f103 010e 	add.w	r1, r3, #14
 8000780:	693b      	ldr	r3, [r7, #16]
 8000782:	9300      	str	r3, [sp, #0]
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	4a11      	ldr	r2, [pc, #68]	@ (80007cc <LORA_debug_hexa+0x108>)
 8000788:	69f8      	ldr	r0, [r7, #28]
 800078a:	f003 ff3b 	bl	8004604 <sniprintf>
 800078e:	e005      	b.n	800079c <LORA_debug_hexa+0xd8>
	}
	else {

		snprintf(message,sizeof(flag), "%s\r\n",flag);
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	4a0f      	ldr	r2, [pc, #60]	@ (80007d0 <LORA_debug_hexa+0x10c>)
 8000794:	2104      	movs	r1, #4
 8000796:	69f8      	ldr	r0, [r7, #28]
 8000798:	f003 ff34 	bl	8004604 <sniprintf>
	}
    HAL_UART_Transmit(hLORACom.huartDebug, (uint8_t*)message, strlen(message),HAL_MAX_DELAY);
 800079c:	4b0d      	ldr	r3, [pc, #52]	@ (80007d4 <LORA_debug_hexa+0x110>)
 800079e:	685c      	ldr	r4, [r3, #4]
 80007a0:	69f8      	ldr	r0, [r7, #28]
 80007a2:	f7ff fd15 	bl	80001d0 <strlen>
 80007a6:	4603      	mov	r3, r0
 80007a8:	b29a      	uxth	r2, r3
 80007aa:	f04f 33ff 	mov.w	r3, #4294967295
 80007ae:	69f9      	ldr	r1, [r7, #28]
 80007b0:	4620      	mov	r0, r4
 80007b2:	f003 f967 	bl	8003a84 <HAL_UART_Transmit>
    free(message);
 80007b6:	69f8      	ldr	r0, [r7, #28]
 80007b8:	f003 fe38 	bl	800442c <free>
 80007bc:	46d5      	mov	sp, sl
}
 80007be:	bf00      	nop
 80007c0:	3720      	adds	r7, #32
 80007c2:	46bd      	mov	sp, r7
 80007c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007c8:	08004e20 	.word	0x08004e20
 80007cc:	08004e0c 	.word	0x08004e0c
 80007d0:	08004e18 	.word	0x08004e18
 80007d4:	20000078 	.word	0x20000078

080007d8 <RFM9x_Init>:
/* Private function prototypes -----------------------------------------------*/
/* User code -----------------------------------------------------------------*/


void RFM9x_Init( void )
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
	// Assert Reset low on the RFM9x
	RF_TestSpi();
 80007de:	f000 fa53 	bl	8000c88 <RF_TestSpi>
	HAL_GPIO_WritePin(SPI1_RST_GPIO_Port, SPI1_RST_Pin, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2101      	movs	r1, #1
 80007e6:	4826      	ldr	r0, [pc, #152]	@ (8000880 <RFM9x_Init+0xa8>)
 80007e8:	f001 f980 	bl	8001aec <HAL_GPIO_WritePin>
	//Delay_ms(10);
	HAL_GPIO_WritePin(SPI1_RST_GPIO_Port, SPI1_RST_Pin, GPIO_PIN_SET);
 80007ec:	2201      	movs	r2, #1
 80007ee:	2101      	movs	r1, #1
 80007f0:	4823      	ldr	r0, [pc, #140]	@ (8000880 <RFM9x_Init+0xa8>)
 80007f2:	f001 f97b 	bl	8001aec <HAL_GPIO_WritePin>
	//Delay_ms(10);
	RF_TestSpi();
 80007f6:	f000 fa47 	bl	8000c88 <RF_TestSpi>
	// Set sleep mode, so we can also set RFM9x mode:
	RFM9x_WriteReg(RFM9x_REG_01_OP_MODE, RFM9x_MODE_SLEEP | RFM9x_LONG_RANGE_MODE);
 80007fa:	2180      	movs	r1, #128	@ 0x80
 80007fc:	2001      	movs	r0, #1
 80007fe:	f000 f9f3 	bl	8000be8 <RFM9x_WriteReg>

	// Wait for sleep mode to take over from say, CAD
	//HDelay_ms(10);

	// Check we are in sleep mode, with RFM9x set
	if (RFM9x_ReadReg(RFM9x_REG_01_OP_MODE) != (RFM9x_MODE_SLEEP | RFM9x_LONG_RANGE_MODE))
 8000802:	2001      	movs	r0, #1
 8000804:	f000 f9b0 	bl	8000b68 <RFM9x_ReadReg>
	{
		//	TODO: Throw RFM9x init error
	}
	// Either Rx or Tx can use the entire 256 byte FIFO, but not at same time
	RFM9x_WriteReg(RFM9x_REG_0E_FIFO_TX_BASE_ADDR, 0x00);
 8000808:	2100      	movs	r1, #0
 800080a:	200e      	movs	r0, #14
 800080c:	f000 f9ec 	bl	8000be8 <RFM9x_WriteReg>
	RFM9x_WriteReg(RFM9x_REG_0F_FIFO_RX_BASE_ADDR, 0x80);
 8000810:	2180      	movs	r1, #128	@ 0x80
 8000812:	200f      	movs	r0, #15
 8000814:	f000 f9e8 	bl	8000be8 <RFM9x_WriteReg>

	// BW = 7: 125 kHz
	// CodingRate = 1:  4/5 code rate
	// ImplicitHeaderModeOn = 1, Implicit Header mode
	RFM9x_WriteReg(RFM9x_REG_1D_MODEM_CONFIG1, 0x72);
 8000818:	2172      	movs	r1, #114	@ 0x72
 800081a:	201d      	movs	r0, #29
 800081c:	f000 f9e4 	bl	8000be8 <RFM9x_WriteReg>
	// SymbTimeout[9:8] = 0
	//RFM9x_WriteReg(RFM9x_REG_1E_MODEM_CONFIG2, 0x74);

	// LowDataRateOptimize = 1 : Enabled; mandated for when the symbol length exceeds 16ms
	// AgcAutoOn = 0 : LNA gain set by register LnaGain
	RFM9x_WriteReg(RFM9x_REG_26_MODEM_CONFIG3, 0x04);
 8000820:	2104      	movs	r1, #4
 8000822:	2026      	movs	r0, #38	@ 0x26
 8000824:	f000 f9e0 	bl	8000be8 <RFM9x_WriteReg>

	// Preamble Length = 16;
	RFM9x_WriteReg(RFM9x_REG_20_PREAMBLE_MSB, 0x00);
 8000828:	2100      	movs	r1, #0
 800082a:	2020      	movs	r0, #32
 800082c:	f000 f9dc 	bl	8000be8 <RFM9x_WriteReg>
	RFM9x_WriteReg(RFM9x_REG_21_PREAMBLE_LSB, 0x10);
 8000830:	2110      	movs	r1, #16
 8000832:	2021      	movs	r0, #33	@ 0x21
 8000834:	f000 f9d8 	bl	8000be8 <RFM9x_WriteReg>
	//   FRF[23:0] = Freq / Fstep
	//   Fstep = Fxosc / 2^^19
	// where:
	//   Freq = 433 MHz
	//   Fxosc = 32 MHz
	uint32_t frf = (uint32_t) ( 433000000.0 / (32000000.0 / 524288.0) ) ;
 8000838:	4b12      	ldr	r3, [pc, #72]	@ (8000884 <RFM9x_Init+0xac>)
 800083a:	607b      	str	r3, [r7, #4]
	RFM9x_WriteReg(RFM9x_REG_06_FRF_MSB, (frf >> 16) & 0xff);
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	0c1b      	lsrs	r3, r3, #16
 8000840:	b2db      	uxtb	r3, r3
 8000842:	4619      	mov	r1, r3
 8000844:	2006      	movs	r0, #6
 8000846:	f000 f9cf 	bl	8000be8 <RFM9x_WriteReg>
	RFM9x_WriteReg(RFM9x_REG_07_FRF_MID, (frf >> 8) & 0xff);
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	0a1b      	lsrs	r3, r3, #8
 800084e:	b2db      	uxtb	r3, r3
 8000850:	4619      	mov	r1, r3
 8000852:	2007      	movs	r0, #7
 8000854:	f000 f9c8 	bl	8000be8 <RFM9x_WriteReg>
	RFM9x_WriteReg(RFM9x_REG_08_FRF_LSB, frf & 0xff);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	b2db      	uxtb	r3, r3
 800085c:	4619      	mov	r1, r3
 800085e:	2008      	movs	r0, #8
 8000860:	f000 f9c2 	bl	8000be8 <RFM9x_WriteReg>

	// PaDac = 4 : Disables the +20dBm option on PA_BOOST pin
	RFM9x_WriteReg(RFM9x_REG_4D_PA_DAC, 0x04);
 8000864:	2104      	movs	r1, #4
 8000866:	204d      	movs	r0, #77	@ 0x4d
 8000868:	f000 f9be 	bl	8000be8 <RFM9x_WriteReg>

	// PaSelect = 1 : PA_BOOST pin (instead of RFO pin).
	// MaxPower = 0 : Pmax=10.8+0.6*MaxPower [dBm]
	// Output Power = 8 : 10dBm from Pout=17-(15-OutputPower) if PaSelect = 1. RadioHead says this is 13 dBm, though
	//RFM9x_WriteReg(RFM9x_REG_09_PA_CONFIG, 0x88);
	RFM9x_WriteReg(RFM9x_REG_09_PA_CONFIG, 0xcf);
 800086c:	21cf      	movs	r1, #207	@ 0xcf
 800086e:	2009      	movs	r0, #9
 8000870:	f000 f9ba 	bl	8000be8 <RFM9x_WriteReg>

	//On decide que le Lora est par defaut en mode ECOUTE
	RFM9x_SetMode_Receive();
 8000874:	f000 f960 	bl	8000b38 <RFM9x_SetMode_Receive>
}
 8000878:	bf00      	nop
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	48000400 	.word	0x48000400
 8000884:	006c4000 	.word	0x006c4000

08000888 <RFM9x_Send>:


void RFM9x_Send(uint8_t* data, uint8_t len)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
 8000890:	460b      	mov	r3, r1
 8000892:	70fb      	strb	r3, [r7, #3]
		if (!waitCAD()){
			return 0;  // Check channel activity
		}
	}*/
	// Position at the beginning of the FIFO
	RFM9x_WriteReg(RFM9x_REG_0D_FIFO_ADDR_PTR, 0);
 8000894:	2100      	movs	r1, #0
 8000896:	200d      	movs	r0, #13
 8000898:	f000 f9a6 	bl	8000be8 <RFM9x_WriteReg>

	// The payload data
	for(int i=0; i < len; i++)
 800089c:	2300      	movs	r3, #0
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	e00a      	b.n	80008b8 <RFM9x_Send+0x30>
	{
		RFM9x_WriteReg(RFM9x_REG_00_FIFO, data[i]);
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	687a      	ldr	r2, [r7, #4]
 80008a6:	4413      	add	r3, r2
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	4619      	mov	r1, r3
 80008ac:	2000      	movs	r0, #0
 80008ae:	f000 f99b 	bl	8000be8 <RFM9x_WriteReg>
	for(int i=0; i < len; i++)
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	3301      	adds	r3, #1
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	78fb      	ldrb	r3, [r7, #3]
 80008ba:	68fa      	ldr	r2, [r7, #12]
 80008bc:	429a      	cmp	r2, r3
 80008be:	dbf0      	blt.n	80008a2 <RFM9x_Send+0x1a>
	}
	// The message length
	RFM9x_WriteReg(RFM9x_REG_22_PAYLOAD_LENGTH, len);
 80008c0:	78fb      	ldrb	r3, [r7, #3]
 80008c2:	4619      	mov	r1, r3
 80008c4:	2022      	movs	r0, #34	@ 0x22
 80008c6:	f000 f98f 	bl	8000be8 <RFM9x_WriteReg>

	// Start the transmitter
	RFM9x_WriteReg(RFM9x_REG_01_OP_MODE, RFM9x_MODE_TX);
 80008ca:	2103      	movs	r1, #3
 80008cc:	2001      	movs	r0, #1
 80008ce:	f000 f98b 	bl	8000be8 <RFM9x_WriteReg>

	// Interrupt on DIO0 for TxDone
	RFM9x_WriteReg(RFM9x_REG_40_DIO_MAPPING1, 0x40);
 80008d2:	2140      	movs	r1, #64	@ 0x40
 80008d4:	2040      	movs	r0, #64	@ 0x40
 80008d6:	f000 f987 	bl	8000be8 <RFM9x_WriteReg>

	//LORA_debug_hexa("\r\nRFM9x SEND", (uint8_t*)data,len);
}
 80008da:	bf00      	nop
 80008dc:	3710      	adds	r7, #16
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
	...

080008e4 <RFM9x_Receive>:
			return 0;
		}
	}
	return 1;  // No activity detected
}*/
void RFM9x_Receive(LORA_Message* LORA_Receive_Message){
 80008e4:	b590      	push	{r4, r7, lr}
 80008e6:	b093      	sub	sp, #76	@ 0x4c
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
	// Number of bytes received
	uint8_t start = RFM9x_ReadReg(RFM9x_REG_10_FIFO_RX_CURRENT_ADDR);
 80008ec:	2010      	movs	r0, #16
 80008ee:	f000 f93b 	bl	8000b68 <RFM9x_ReadReg>
 80008f2:	4603      	mov	r3, r0
 80008f4:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	uint8_t len = RFM9x_ReadReg(RFM9x_REG_13_RX_NB_BYTES);
 80008f8:	2013      	movs	r0, #19
 80008fa:	f000 f935 	bl	8000b68 <RFM9x_ReadReg>
 80008fe:	4603      	mov	r3, r0
 8000900:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42

	RFM9x_SetMode_Receive();
 8000904:	f000 f918 	bl	8000b38 <RFM9x_SetMode_Receive>
	if (len<4){
 8000908:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 800090c:	2b03      	cmp	r3, #3
 800090e:	d807      	bhi.n	8000920 <RFM9x_Receive+0x3c>
		LORA_Receive_Message->RxNbrBytes=0;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2200      	movs	r2, #0
 8000914:	709a      	strb	r2, [r3, #2]
		RFM9x_WriteReg( RFM9x_REG_12_IRQ_FLAGS, 0xFF );
 8000916:	21ff      	movs	r1, #255	@ 0xff
 8000918:	2012      	movs	r0, #18
 800091a:	f000 f965 	bl	8000be8 <RFM9x_WriteReg>
 800091e:	e0fa      	b.n	8000b16 <RFM9x_Receive+0x232>
		return;
	}
	// get the read data
	if (len > (RFM9x_FIFO_SIZE)) len = RFM9x_FIFO_SIZE;

	RFM9x_WriteReg(RFM9x_REG_0D_FIFO_ADDR_PTR, start);
 8000920:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8000924:	4619      	mov	r1, r3
 8000926:	200d      	movs	r0, #13
 8000928:	f000 f95e 	bl	8000be8 <RFM9x_WriteReg>
	uint8_t *data = (uint8_t*)malloc(RFM9x_FIFO_SIZE * sizeof(uint8_t));
 800092c:	20ff      	movs	r0, #255	@ 0xff
 800092e:	f003 fd75 	bl	800441c <malloc>
 8000932:	4603      	mov	r3, r0
 8000934:	63fb      	str	r3, [r7, #60]	@ 0x3c
	for (int i = 0; i < len; i++)
 8000936:	2300      	movs	r3, #0
 8000938:	647b      	str	r3, [r7, #68]	@ 0x44
 800093a:	e00a      	b.n	8000952 <RFM9x_Receive+0x6e>
	{
		data[i] = RFM9x_ReadReg(RFM9x_REG_00_FIFO);
 800093c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800093e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000940:	18d4      	adds	r4, r2, r3
 8000942:	2000      	movs	r0, #0
 8000944:	f000 f910 	bl	8000b68 <RFM9x_ReadReg>
 8000948:	4603      	mov	r3, r0
 800094a:	7023      	strb	r3, [r4, #0]
	for (int i = 0; i < len; i++)
 800094c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800094e:	3301      	adds	r3, #1
 8000950:	647b      	str	r3, [r7, #68]	@ 0x44
 8000952:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8000956:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000958:	429a      	cmp	r2, r3
 800095a:	dbef      	blt.n	800093c <RFM9x_Receive+0x58>
	}
	LORA_Receive_Message->IRQFlags=RFM9x_ReadReg(RFM9x_REG_12_IRQ_FLAGS);
 800095c:	2012      	movs	r0, #18
 800095e:	f000 f903 	bl	8000b68 <RFM9x_ReadReg>
 8000962:	4603      	mov	r3, r0
 8000964:	461a      	mov	r2, r3
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	701a      	strb	r2, [r3, #0]
	LORA_Receive_Message->RxCurrAddr=start;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8000970:	705a      	strb	r2, [r3, #1]
	LORA_Receive_Message->RxNbrBytes=len;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 8000978:	709a      	strb	r2, [r3, #2]
	LORA_Receive_Message->SNR=RFM9x_ReadReg(RFM9x_REG_19_PKT_SNR_VALUE);
 800097a:	2019      	movs	r0, #25
 800097c:	f000 f8f4 	bl	8000b68 <RFM9x_ReadReg>
 8000980:	4603      	mov	r3, r0
 8000982:	461a      	mov	r2, r3
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	70da      	strb	r2, [r3, #3]
	LORA_Receive_Message->RSSI = RFM9x_ReadReg(RFM9x_REG_1A_PKT_RSSI_VALUE);
 8000988:	201a      	movs	r0, #26
 800098a:	f000 f8ed 	bl	8000b68 <RFM9x_ReadReg>
 800098e:	4603      	mov	r3, r0
 8000990:	461a      	mov	r2, r3
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	711a      	strb	r2, [r3, #4]

	LORA_Receive_Message->header = (Header*)malloc(sizeof(Header));
 8000996:	2004      	movs	r0, #4
 8000998:	f003 fd40 	bl	800441c <malloc>
 800099c:	4603      	mov	r3, r0
 800099e:	461a      	mov	r2, r3
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	609a      	str	r2, [r3, #8]
	LORA_Receive_Message->header->recipient=data[0];
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	689b      	ldr	r3, [r3, #8]
 80009a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80009aa:	7812      	ldrb	r2, [r2, #0]
 80009ac:	701a      	strb	r2, [r3, #0]
	LORA_Receive_Message->header->sender=data[1];
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	689b      	ldr	r3, [r3, #8]
 80009b2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80009b4:	7852      	ldrb	r2, [r2, #1]
 80009b6:	705a      	strb	r2, [r3, #1]
	LORA_Receive_Message->header->type=data[2];
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	689b      	ldr	r3, [r3, #8]
 80009bc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80009be:	7892      	ldrb	r2, [r2, #2]
 80009c0:	709a      	strb	r2, [r3, #2]
	LORA_Receive_Message->header->len_payload=data[3];
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	689b      	ldr	r3, [r3, #8]
 80009c6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80009c8:	78d2      	ldrb	r2, [r2, #3]
 80009ca:	70da      	strb	r2, [r3, #3]

	LORA_Receive_Message->payload = (uint8_t*)malloc(sizeof(uint8_t)*(len-sizeof(Header)));
 80009cc:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 80009d0:	3b04      	subs	r3, #4
 80009d2:	4618      	mov	r0, r3
 80009d4:	f003 fd22 	bl	800441c <malloc>
 80009d8:	4603      	mov	r3, r0
 80009da:	461a      	mov	r2, r3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	60da      	str	r2, [r3, #12]
	memcpy(LORA_Receive_Message->payload, data+sizeof(Header), len-sizeof(Header));
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	68d8      	ldr	r0, [r3, #12]
 80009e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80009e6:	1d19      	adds	r1, r3, #4
 80009e8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 80009ec:	3b04      	subs	r3, #4
 80009ee:	461a      	mov	r2, r3
 80009f0:	f003 fea0 	bl	8004734 <memcpy>

	// Messages de débogage détaillés
	char debug_msg[50];
	sprintf(debug_msg, "\r\nRxCurAddr :  0x%02X\r\n", start);
 80009f4:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 80009f8:	f107 0308 	add.w	r3, r7, #8
 80009fc:	4947      	ldr	r1, [pc, #284]	@ (8000b1c <RFM9x_Receive+0x238>)
 80009fe:	4618      	mov	r0, r3
 8000a00:	f003 fe34 	bl	800466c <siprintf>
	HAL_UART_Transmit(hLORACom.huartDebug, (uint8_t*)debug_msg, strlen(debug_msg), HAL_MAX_DELAY);
 8000a04:	4b46      	ldr	r3, [pc, #280]	@ (8000b20 <RFM9x_Receive+0x23c>)
 8000a06:	685c      	ldr	r4, [r3, #4]
 8000a08:	f107 0308 	add.w	r3, r7, #8
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff fbdf 	bl	80001d0 <strlen>
 8000a12:	4603      	mov	r3, r0
 8000a14:	b29a      	uxth	r2, r3
 8000a16:	f107 0108 	add.w	r1, r7, #8
 8000a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a1e:	4620      	mov	r0, r4
 8000a20:	f003 f830 	bl	8003a84 <HAL_UART_Transmit>

	sprintf(debug_msg, "Received Recipient: 0x%02X\r\n", LORA_Receive_Message->header->recipient);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	689b      	ldr	r3, [r3, #8]
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	f107 0308 	add.w	r3, r7, #8
 8000a30:	493c      	ldr	r1, [pc, #240]	@ (8000b24 <RFM9x_Receive+0x240>)
 8000a32:	4618      	mov	r0, r3
 8000a34:	f003 fe1a 	bl	800466c <siprintf>
	HAL_UART_Transmit(hLORACom.huartDebug, (uint8_t*)debug_msg, strlen(debug_msg), HAL_MAX_DELAY);
 8000a38:	4b39      	ldr	r3, [pc, #228]	@ (8000b20 <RFM9x_Receive+0x23c>)
 8000a3a:	685c      	ldr	r4, [r3, #4]
 8000a3c:	f107 0308 	add.w	r3, r7, #8
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff fbc5 	bl	80001d0 <strlen>
 8000a46:	4603      	mov	r3, r0
 8000a48:	b29a      	uxth	r2, r3
 8000a4a:	f107 0108 	add.w	r1, r7, #8
 8000a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a52:	4620      	mov	r0, r4
 8000a54:	f003 f816 	bl	8003a84 <HAL_UART_Transmit>

	sprintf(debug_msg, "Received Sender: 0x%02X\r\n", LORA_Receive_Message->header->sender);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	689b      	ldr	r3, [r3, #8]
 8000a5c:	785b      	ldrb	r3, [r3, #1]
 8000a5e:	461a      	mov	r2, r3
 8000a60:	f107 0308 	add.w	r3, r7, #8
 8000a64:	4930      	ldr	r1, [pc, #192]	@ (8000b28 <RFM9x_Receive+0x244>)
 8000a66:	4618      	mov	r0, r3
 8000a68:	f003 fe00 	bl	800466c <siprintf>
	HAL_UART_Transmit(hLORACom.huartDebug, (uint8_t*)debug_msg, strlen(debug_msg), HAL_MAX_DELAY);
 8000a6c:	4b2c      	ldr	r3, [pc, #176]	@ (8000b20 <RFM9x_Receive+0x23c>)
 8000a6e:	685c      	ldr	r4, [r3, #4]
 8000a70:	f107 0308 	add.w	r3, r7, #8
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff fbab 	bl	80001d0 <strlen>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	b29a      	uxth	r2, r3
 8000a7e:	f107 0108 	add.w	r1, r7, #8
 8000a82:	f04f 33ff 	mov.w	r3, #4294967295
 8000a86:	4620      	mov	r0, r4
 8000a88:	f002 fffc 	bl	8003a84 <HAL_UART_Transmit>

	sprintf(debug_msg, "Received Type: 0x%02X\r\n", LORA_Receive_Message->header->type);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	789b      	ldrb	r3, [r3, #2]
 8000a92:	461a      	mov	r2, r3
 8000a94:	f107 0308 	add.w	r3, r7, #8
 8000a98:	4924      	ldr	r1, [pc, #144]	@ (8000b2c <RFM9x_Receive+0x248>)
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f003 fde6 	bl	800466c <siprintf>
	HAL_UART_Transmit(hLORACom.huartDebug, (uint8_t*)debug_msg, strlen(debug_msg), HAL_MAX_DELAY);
 8000aa0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b20 <RFM9x_Receive+0x23c>)
 8000aa2:	685c      	ldr	r4, [r3, #4]
 8000aa4:	f107 0308 	add.w	r3, r7, #8
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff fb91 	bl	80001d0 <strlen>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	b29a      	uxth	r2, r3
 8000ab2:	f107 0108 	add.w	r1, r7, #8
 8000ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aba:	4620      	mov	r0, r4
 8000abc:	f002 ffe2 	bl	8003a84 <HAL_UART_Transmit>

	sprintf(debug_msg, "Received Payload Length: %d\r\n", LORA_Receive_Message->header->len_payload);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	689b      	ldr	r3, [r3, #8]
 8000ac4:	78db      	ldrb	r3, [r3, #3]
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	f107 0308 	add.w	r3, r7, #8
 8000acc:	4918      	ldr	r1, [pc, #96]	@ (8000b30 <RFM9x_Receive+0x24c>)
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f003 fdcc 	bl	800466c <siprintf>
	HAL_UART_Transmit(hLORACom.huartDebug, (uint8_t*)debug_msg, strlen(debug_msg), HAL_MAX_DELAY);
 8000ad4:	4b12      	ldr	r3, [pc, #72]	@ (8000b20 <RFM9x_Receive+0x23c>)
 8000ad6:	685c      	ldr	r4, [r3, #4]
 8000ad8:	f107 0308 	add.w	r3, r7, #8
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff fb77 	bl	80001d0 <strlen>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	b29a      	uxth	r2, r3
 8000ae6:	f107 0108 	add.w	r1, r7, #8
 8000aea:	f04f 33ff 	mov.w	r3, #4294967295
 8000aee:	4620      	mov	r0, r4
 8000af0:	f002 ffc8 	bl	8003a84 <HAL_UART_Transmit>
	LORA_debug_hexa("UBX_Hexa", LORA_Receive_Message->payload, len-sizeof(Header));
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	68d9      	ldr	r1, [r3, #12]
 8000af8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8000afc:	3b04      	subs	r3, #4
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	461a      	mov	r2, r3
 8000b02:	480c      	ldr	r0, [pc, #48]	@ (8000b34 <RFM9x_Receive+0x250>)
 8000b04:	f7ff fdde 	bl	80006c4 <LORA_debug_hexa>

	free(data);
 8000b08:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8000b0a:	f003 fc8f 	bl	800442c <free>

	// clear all the IRQ flags
	RFM9x_WriteReg( RFM9x_REG_12_IRQ_FLAGS, 0xFF );
 8000b0e:	21ff      	movs	r1, #255	@ 0xff
 8000b10:	2012      	movs	r0, #18
 8000b12:	f000 f869 	bl	8000be8 <RFM9x_WriteReg>
}
 8000b16:	374c      	adds	r7, #76	@ 0x4c
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd90      	pop	{r4, r7, pc}
 8000b1c:	08004e34 	.word	0x08004e34
 8000b20:	20000078 	.word	0x20000078
 8000b24:	08004e4c 	.word	0x08004e4c
 8000b28:	08004e6c 	.word	0x08004e6c
 8000b2c:	08004e88 	.word	0x08004e88
 8000b30:	08004ea0 	.word	0x08004ea0
 8000b34:	08004ec0 	.word	0x08004ec0

08000b38 <RFM9x_SetMode_Receive>:
void RFM9x_SetMode_Receive(void){
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
	// Set sleep mode, so we can also set RFM9x mode:
	RFM9x_WriteReg(RFM9x_REG_01_OP_MODE, RFM9x_MODE_SLEEP | RFM9x_LONG_RANGE_MODE);
 8000b3c:	2180      	movs	r1, #128	@ 0x80
 8000b3e:	2001      	movs	r0, #1
 8000b40:	f000 f852 	bl	8000be8 <RFM9x_WriteReg>
	// Configurer le mode réception continue
	RFM9x_WriteReg(RFM9x_REG_01_OP_MODE, RFM9x_MODE_RXCONTINUOUS);
 8000b44:	2105      	movs	r1, #5
 8000b46:	2001      	movs	r0, #1
 8000b48:	f000 f84e 	bl	8000be8 <RFM9x_WriteReg>
	// Configurer l'interruption sur DIO0 pour RxDone
	RFM9x_WriteReg(RFM9x_REG_40_DIO_MAPPING1, 0x00); // Interrupt on RxDone
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	2040      	movs	r0, #64	@ 0x40
 8000b50:	f000 f84a 	bl	8000be8 <RFM9x_WriteReg>
}
 8000b54:	bf00      	nop
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <RFM9x_ClearInt>:
	uint8_t mode = RFM9x_ReadReg( RFM9x_REG_01_OP_MODE );
	return mode & 0x07;
}

void RFM9x_ClearInt( void )
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
	// set to clear all the IRQ bits
	RFM9x_WriteReg( RFM9x_REG_12_IRQ_FLAGS, 0xFF );
 8000b5c:	21ff      	movs	r1, #255	@ 0xff
 8000b5e:	2012      	movs	r0, #18
 8000b60:	f000 f842 	bl	8000be8 <RFM9x_WriteReg>
}
 8000b64:	bf00      	nop
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <RFM9x_ReadReg>:

uint8_t RFM9x_ReadReg( uint8_t reg )
{
 8000b68:	b590      	push	{r4, r7, lr}
 8000b6a:	b089      	sub	sp, #36	@ 0x24
 8000b6c:	af02      	add	r7, sp, #8
 8000b6e:	4603      	mov	r3, r0
 8000b70:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status;

	// clear reg msb for read
	reg &= 0x7f;
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000b78:	71fb      	strb	r3, [r7, #7]

	// buffers to transmit/receive
	uint8_t txData[] = {reg, 0x00};
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	743b      	strb	r3, [r7, #16]
 8000b7e:	2300      	movs	r3, #0
 8000b80:	747b      	strb	r3, [r7, #17]
	uint8_t rxData[] = {0x00, 0x00};
 8000b82:	2300      	movs	r3, #0
 8000b84:	81bb      	strh	r3, [r7, #12]
	const uint16_t	size = sizeof(txData);
 8000b86:	2302      	movs	r3, #2
 8000b88:	82bb      	strh	r3, [r7, #20]

	// default data value if error
	uint8_t data = 0x00;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	75fb      	strb	r3, [r7, #23]

	// Set nCS low (active)
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2180      	movs	r1, #128	@ 0x80
 8000b92:	4812      	ldr	r0, [pc, #72]	@ (8000bdc <RFM9x_ReadReg+0x74>)
 8000b94:	f000 ffaa 	bl	8001aec <HAL_GPIO_WritePin>

	// write 8 bit reg and read 8 bit data
	status = HAL_SPI_TransmitReceive(hLORACom.hspi, txData, rxData, size, HAL_MAX_DELAY);
 8000b98:	4b11      	ldr	r3, [pc, #68]	@ (8000be0 <RFM9x_ReadReg+0x78>)
 8000b9a:	6818      	ldr	r0, [r3, #0]
 8000b9c:	8abb      	ldrh	r3, [r7, #20]
 8000b9e:	f107 020c 	add.w	r2, r7, #12
 8000ba2:	f107 0110 	add.w	r1, r7, #16
 8000ba6:	f04f 34ff 	mov.w	r4, #4294967295
 8000baa:	9400      	str	r4, [sp, #0]
 8000bac:	f002 fb96 	bl	80032dc <HAL_SPI_TransmitReceive>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	74fb      	strb	r3, [r7, #19]

	if (status == HAL_OK)
 8000bb4:	7cfb      	ldrb	r3, [r7, #19]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d102      	bne.n	8000bc0 <RFM9x_ReadReg+0x58>
	{
		//second byte is the register value
		data = rxData[1];
 8000bba:	7b7b      	ldrb	r3, [r7, #13]
 8000bbc:	75fb      	strb	r3, [r7, #23]
 8000bbe:	e003      	b.n	8000bc8 <RFM9x_ReadReg+0x60>
	}
	else
	{
		LORA_debug("*HAL_ERROR*", NULL);
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	4808      	ldr	r0, [pc, #32]	@ (8000be4 <RFM9x_ReadReg+0x7c>)
 8000bc4:	f7ff fd4a 	bl	800065c <LORA_debug>

	}

	// Set nCS high (inactive)
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000bc8:	2201      	movs	r2, #1
 8000bca:	2180      	movs	r1, #128	@ 0x80
 8000bcc:	4803      	ldr	r0, [pc, #12]	@ (8000bdc <RFM9x_ReadReg+0x74>)
 8000bce:	f000 ff8d 	bl	8001aec <HAL_GPIO_WritePin>

	return data;
 8000bd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	371c      	adds	r7, #28
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd90      	pop	{r4, r7, pc}
 8000bdc:	48000400 	.word	0x48000400
 8000be0:	20000078 	.word	0x20000078
 8000be4:	08004ecc 	.word	0x08004ecc

08000be8 <RFM9x_WriteReg>:

void RFM9x_WriteReg( uint8_t reg, uint8_t data )
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	460a      	mov	r2, r1
 8000bf2:	71fb      	strb	r3, [r7, #7]
 8000bf4:	4613      	mov	r3, r2
 8000bf6:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef status;

	//print2("RFM9x WR", reg, data );

	//set the reg msb for write
	reg |= 0x80;
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000bfe:	71fb      	strb	r3, [r7, #7]

	// Transmit buffer
	uint8_t txData[2] = {reg, data};
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	723b      	strb	r3, [r7, #8]
 8000c04:	79bb      	ldrb	r3, [r7, #6]
 8000c06:	727b      	strb	r3, [r7, #9]
	const uint16_t size = sizeof(txData);
 8000c08:	2302      	movs	r3, #2
 8000c0a:	81fb      	strh	r3, [r7, #14]


	// Set nCS low (active)
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	2180      	movs	r1, #128	@ 0x80
 8000c10:	4810      	ldr	r0, [pc, #64]	@ (8000c54 <RFM9x_WriteReg+0x6c>)
 8000c12:	f000 ff6b 	bl	8001aec <HAL_GPIO_WritePin>

	// write 8 bit reg and read 8 bit data
	status = HAL_SPI_Transmit(hLORACom.hspi, txData, size, HAL_MAX_DELAY);
 8000c16:	4b10      	ldr	r3, [pc, #64]	@ (8000c58 <RFM9x_WriteReg+0x70>)
 8000c18:	6818      	ldr	r0, [r3, #0]
 8000c1a:	89fa      	ldrh	r2, [r7, #14]
 8000c1c:	f107 0108 	add.w	r1, r7, #8
 8000c20:	f04f 33ff 	mov.w	r3, #4294967295
 8000c24:	f002 f9e5 	bl	8002ff2 <HAL_SPI_Transmit>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	737b      	strb	r3, [r7, #13]

	if (status != HAL_OK)
 8000c2c:	7b7b      	ldrb	r3, [r7, #13]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d007      	beq.n	8000c42 <RFM9x_WriteReg+0x5a>
	{
		HAL_UART_Transmit(hLORACom.huartDebug, (uint8_t *) &"*HAL_ERROR*\r\n", 13, HAL_MAX_DELAY);
 8000c32:	4b09      	ldr	r3, [pc, #36]	@ (8000c58 <RFM9x_WriteReg+0x70>)
 8000c34:	6858      	ldr	r0, [r3, #4]
 8000c36:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3a:	220d      	movs	r2, #13
 8000c3c:	4907      	ldr	r1, [pc, #28]	@ (8000c5c <RFM9x_WriteReg+0x74>)
 8000c3e:	f002 ff21 	bl	8003a84 <HAL_UART_Transmit>
	}

	//HACK: Wait for SPI transfer to complete
	//HAL_Delay(1);
	// Set nCS high (inactive)
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000c42:	2201      	movs	r2, #1
 8000c44:	2180      	movs	r1, #128	@ 0x80
 8000c46:	4803      	ldr	r0, [pc, #12]	@ (8000c54 <RFM9x_WriteReg+0x6c>)
 8000c48:	f000 ff50 	bl	8001aec <HAL_GPIO_WritePin>
}
 8000c4c:	bf00      	nop
 8000c4e:	3710      	adds	r7, #16
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	48000400 	.word	0x48000400
 8000c58:	20000078 	.word	0x20000078
 8000c5c:	08004ed8 	.word	0x08004ed8

08000c60 <Delay_ms>:

void Delay_ms( uint32_t delay_ms )
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
	/**
	 * This should correctly handle SysTic roll-overs.
	 * See:
	 *   https://stackoverflow.com/questions/61443/rollover-safe-timer-tick-comparisons
	 */
	uint32_t start_time_ms = HAL_GetTick();
 8000c68:	f000 fcb8 	bl	80015dc <HAL_GetTick>
 8000c6c:	60f8      	str	r0, [r7, #12]
	while ( (HAL_GetTick() - start_time_ms) < delay_ms)
 8000c6e:	bf00      	nop
 8000c70:	f000 fcb4 	bl	80015dc <HAL_GetTick>
 8000c74:	4602      	mov	r2, r0
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d8f7      	bhi.n	8000c70 <Delay_ms+0x10>
	{
		// spin wait
	}

	return;
 8000c80:	bf00      	nop
}
 8000c82:	3710      	adds	r7, #16
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <RF_TestSpi>:
// Debug Routines
void RF_TestSpi( void )
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t v;
	print("\r\n----TEST----");
 8000c8e:	4816      	ldr	r0, [pc, #88]	@ (8000ce8 <RF_TestSpi+0x60>)
 8000c90:	f000 f858 	bl	8000d44 <print>
	for(i=0; i<8; i++)
 8000c94:	2300      	movs	r3, #0
 8000c96:	71fb      	strb	r3, [r7, #7]
 8000c98:	e01b      	b.n	8000cd2 <RF_TestSpi+0x4a>
	{
		v = (1 << i);
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	71bb      	strb	r3, [r7, #6]
		print1("Write", v);
 8000ca4:	79bb      	ldrb	r3, [r7, #6]
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4810      	ldr	r0, [pc, #64]	@ (8000cec <RF_TestSpi+0x64>)
 8000caa:	f000 f825 	bl	8000cf8 <print1>
		RFM9x_WriteReg(RFM9x_REG_40_DIO_MAPPING1, v);
 8000cae:	79bb      	ldrb	r3, [r7, #6]
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	2040      	movs	r0, #64	@ 0x40
 8000cb4:	f7ff ff98 	bl	8000be8 <RFM9x_WriteReg>
		//Delay_ms(1);
		v =RFM9x_ReadReg(RFM9x_REG_40_DIO_MAPPING1);
 8000cb8:	2040      	movs	r0, #64	@ 0x40
 8000cba:	f7ff ff55 	bl	8000b68 <RFM9x_ReadReg>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	71bb      	strb	r3, [r7, #6]
		print1("Read ", v);
 8000cc2:	79bb      	ldrb	r3, [r7, #6]
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	480a      	ldr	r0, [pc, #40]	@ (8000cf0 <RF_TestSpi+0x68>)
 8000cc8:	f000 f816 	bl	8000cf8 <print1>
	for(i=0; i<8; i++)
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	3301      	adds	r3, #1
 8000cd0:	71fb      	strb	r3, [r7, #7]
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	2b07      	cmp	r3, #7
 8000cd6:	d9e0      	bls.n	8000c9a <RF_TestSpi+0x12>
		//Delay_ms(1);
	}
	print("------------");
 8000cd8:	4806      	ldr	r0, [pc, #24]	@ (8000cf4 <RF_TestSpi+0x6c>)
 8000cda:	f000 f833 	bl	8000d44 <print>
	return;
 8000cde:	bf00      	nop
}
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	08004ee8 	.word	0x08004ee8
 8000cec:	08004ef8 	.word	0x08004ef8
 8000cf0:	08004f00 	.word	0x08004f00
 8000cf4:	08004f08 	.word	0x08004f08

08000cf8 <print1>:
void print1(const char *text, uint8_t x)
{	char msg[50];
 8000cf8:	b590      	push	{r4, r7, lr}
 8000cfa:	b091      	sub	sp, #68	@ 0x44
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
 8000d00:	460b      	mov	r3, r1
 8000d02:	70fb      	strb	r3, [r7, #3]
sprintf(msg, "%s 0x%02X\r\n", text, (int) x );
 8000d04:	78fb      	ldrb	r3, [r7, #3]
 8000d06:	f107 000c 	add.w	r0, r7, #12
 8000d0a:	687a      	ldr	r2, [r7, #4]
 8000d0c:	490b      	ldr	r1, [pc, #44]	@ (8000d3c <print1+0x44>)
 8000d0e:	f003 fcad 	bl	800466c <siprintf>
HAL_UART_Transmit(hLORACom.huartDebug, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);
 8000d12:	4b0b      	ldr	r3, [pc, #44]	@ (8000d40 <print1+0x48>)
 8000d14:	685c      	ldr	r4, [r3, #4]
 8000d16:	f107 030c 	add.w	r3, r7, #12
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff fa58 	bl	80001d0 <strlen>
 8000d20:	4603      	mov	r3, r0
 8000d22:	b29a      	uxth	r2, r3
 8000d24:	f107 010c 	add.w	r1, r7, #12
 8000d28:	f04f 33ff 	mov.w	r3, #4294967295
 8000d2c:	4620      	mov	r0, r4
 8000d2e:	f002 fea9 	bl	8003a84 <HAL_UART_Transmit>
}
 8000d32:	bf00      	nop
 8000d34:	3744      	adds	r7, #68	@ 0x44
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd90      	pop	{r4, r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	08004f18 	.word	0x08004f18
 8000d40:	20000078 	.word	0x20000078

08000d44 <print>:
void print(const char *text)
{char msg[50];
 8000d44:	b590      	push	{r4, r7, lr}
 8000d46:	b091      	sub	sp, #68	@ 0x44
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
sprintf(msg, "%s\r\n", text );
 8000d4c:	f107 030c 	add.w	r3, r7, #12
 8000d50:	687a      	ldr	r2, [r7, #4]
 8000d52:	490c      	ldr	r1, [pc, #48]	@ (8000d84 <print+0x40>)
 8000d54:	4618      	mov	r0, r3
 8000d56:	f003 fc89 	bl	800466c <siprintf>
HAL_UART_Transmit(hLORACom.huartDebug, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);
 8000d5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d88 <print+0x44>)
 8000d5c:	685c      	ldr	r4, [r3, #4]
 8000d5e:	f107 030c 	add.w	r3, r7, #12
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff fa34 	bl	80001d0 <strlen>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	b29a      	uxth	r2, r3
 8000d6c:	f107 010c 	add.w	r1, r7, #12
 8000d70:	f04f 33ff 	mov.w	r3, #4294967295
 8000d74:	4620      	mov	r0, r4
 8000d76:	f002 fe85 	bl	8003a84 <HAL_UART_Transmit>
}
 8000d7a:	bf00      	nop
 8000d7c:	3744      	adds	r7, #68	@ 0x44
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd90      	pop	{r4, r7, pc}
 8000d82:	bf00      	nop
 8000d84:	08004f24 	.word	0x08004f24
 8000d88:	20000078 	.word	0x20000078

08000d8c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b088      	sub	sp, #32
 8000d90:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d92:	f107 030c 	add.w	r3, r7, #12
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
 8000d9e:	60da      	str	r2, [r3, #12]
 8000da0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da2:	4b32      	ldr	r3, [pc, #200]	@ (8000e6c <MX_GPIO_Init+0xe0>)
 8000da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000da6:	4a31      	ldr	r2, [pc, #196]	@ (8000e6c <MX_GPIO_Init+0xe0>)
 8000da8:	f043 0304 	orr.w	r3, r3, #4
 8000dac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dae:	4b2f      	ldr	r3, [pc, #188]	@ (8000e6c <MX_GPIO_Init+0xe0>)
 8000db0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000db2:	f003 0304 	and.w	r3, r3, #4
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dba:	4b2c      	ldr	r3, [pc, #176]	@ (8000e6c <MX_GPIO_Init+0xe0>)
 8000dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dbe:	4a2b      	ldr	r2, [pc, #172]	@ (8000e6c <MX_GPIO_Init+0xe0>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dc6:	4b29      	ldr	r3, [pc, #164]	@ (8000e6c <MX_GPIO_Init+0xe0>)
 8000dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd2:	4b26      	ldr	r3, [pc, #152]	@ (8000e6c <MX_GPIO_Init+0xe0>)
 8000dd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dd6:	4a25      	ldr	r2, [pc, #148]	@ (8000e6c <MX_GPIO_Init+0xe0>)
 8000dd8:	f043 0302 	orr.w	r3, r3, #2
 8000ddc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dde:	4b23      	ldr	r3, [pc, #140]	@ (8000e6c <MX_GPIO_Init+0xe0>)
 8000de0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000de2:	f003 0302 	and.w	r3, r3, #2
 8000de6:	603b      	str	r3, [r7, #0]
 8000de8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_EN_GPIO_Port, SPI1_EN_Pin, GPIO_PIN_SET);
 8000dea:	2201      	movs	r2, #1
 8000dec:	2110      	movs	r1, #16
 8000dee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000df2:	f000 fe7b 	bl	8001aec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_RST_Pin|LD3_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 8000df6:	2200      	movs	r2, #0
 8000df8:	2189      	movs	r1, #137	@ 0x89
 8000dfa:	481d      	ldr	r0, [pc, #116]	@ (8000e70 <MX_GPIO_Init+0xe4>)
 8000dfc:	f000 fe76 	bl	8001aec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_EN_Pin;
 8000e00:	2310      	movs	r3, #16
 8000e02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e04:	2301      	movs	r3, #1
 8000e06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_EN_GPIO_Port, &GPIO_InitStruct);
 8000e10:	f107 030c 	add.w	r3, r7, #12
 8000e14:	4619      	mov	r1, r3
 8000e16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e1a:	f000 fcfd 	bl	8001818 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SPI1_RST_Pin|LD3_Pin|SPI1_CS_Pin;
 8000e1e:	2389      	movs	r3, #137	@ 0x89
 8000e20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e22:	2301      	movs	r3, #1
 8000e24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2e:	f107 030c 	add.w	r3, r7, #12
 8000e32:	4619      	mov	r1, r3
 8000e34:	480e      	ldr	r0, [pc, #56]	@ (8000e70 <MX_GPIO_Init+0xe4>)
 8000e36:	f000 fcef 	bl	8001818 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_IRQ_Pin;
 8000e3a:	2340      	movs	r3, #64	@ 0x40
 8000e3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000e3e:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000e42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SPI1_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000e48:	f107 030c 	add.w	r3, r7, #12
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4808      	ldr	r0, [pc, #32]	@ (8000e70 <MX_GPIO_Init+0xe4>)
 8000e50:	f000 fce2 	bl	8001818 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000e54:	2200      	movs	r2, #0
 8000e56:	2100      	movs	r1, #0
 8000e58:	2017      	movs	r0, #23
 8000e5a:	f000 fca6 	bl	80017aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e5e:	2017      	movs	r0, #23
 8000e60:	f000 fcbf 	bl	80017e2 <HAL_NVIC_EnableIRQ>

}
 8000e64:	bf00      	nop
 8000e66:	3720      	adds	r7, #32
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	48000400 	.word	0x48000400

08000e74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e74:	b590      	push	{r4, r7, lr}
 8000e76:	b09b      	sub	sp, #108	@ 0x6c
 8000e78:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e7a:	f000 fb46 	bl	800150a <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e7e:	f000 f8ad 	bl	8000fdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e82:	f7ff ff83 	bl	8000d8c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e86:	f000 fa7d 	bl	8001384 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000e8a:	f000 f90f 	bl	80010ac <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	const char startMessage[] = "\r\nStarting...\r\n";
 8000e8e:	4b49      	ldr	r3, [pc, #292]	@ (8000fb4 <main+0x140>)
 8000e90:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8000e94:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e96:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	const char initDoneMessage[] = "\r\nInit Done\r\n\n";
 8000e9a:	4b47      	ldr	r3, [pc, #284]	@ (8000fb8 <main+0x144>)
 8000e9c:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 8000ea0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ea2:	c407      	stmia	r4!, {r0, r1, r2}
 8000ea4:	8023      	strh	r3, [r4, #0]
 8000ea6:	3402      	adds	r4, #2
 8000ea8:	0c1b      	lsrs	r3, r3, #16
 8000eaa:	7023      	strb	r3, [r4, #0]

	HAL_UART_Transmit(&huart2, (uint8_t *)startMessage, sizeof(startMessage), 10);
 8000eac:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 8000eb0:	230a      	movs	r3, #10
 8000eb2:	2210      	movs	r2, #16
 8000eb4:	4841      	ldr	r0, [pc, #260]	@ (8000fbc <main+0x148>)
 8000eb6:	f002 fde5 	bl	8003a84 <HAL_UART_Transmit>
	LORACom_Init(&hspi1,&huart2);
 8000eba:	4940      	ldr	r1, [pc, #256]	@ (8000fbc <main+0x148>)
 8000ebc:	4840      	ldr	r0, [pc, #256]	@ (8000fc0 <main+0x14c>)
 8000ebe:	f7ff fb57 	bl	8000570 <LORACom_Init>
	RFM9x_Init();
 8000ec2:	f7ff fc89 	bl	80007d8 <RFM9x_Init>
	HAL_UART_Transmit(&huart2, (uint8_t *)initDoneMessage, sizeof(initDoneMessage), 10);
 8000ec6:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8000eca:	230a      	movs	r3, #10
 8000ecc:	220f      	movs	r2, #15
 8000ece:	483b      	ldr	r0, [pc, #236]	@ (8000fbc <main+0x148>)
 8000ed0:	f002 fdd8 	bl	8003a84 <HAL_UART_Transmit>

	uint8_t PollStatutGNSS[] ={0xb5, 0x62, 0x01, 0x43, 0x00, 0x00, 0x44, 0xcd};
 8000ed4:	4a3b      	ldr	r2, [pc, #236]	@ (8000fc4 <main+0x150>)
 8000ed6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000eda:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ede:	e883 0003 	stmia.w	r3, {r0, r1}
			Header * header = (Header*)malloc(sizeof(Header));
 8000ee2:	2004      	movs	r0, #4
 8000ee4:	f003 fa9a 	bl	800441c <malloc>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	667b      	str	r3, [r7, #100]	@ 0x64
			*header = (Header){
 8000eec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000eee:	4a36      	ldr	r2, [pc, #216]	@ (8000fc8 <main+0x154>)
 8000ef0:	6810      	ldr	r0, [r2, #0]
 8000ef2:	6018      	str	r0, [r3, #0]
					.recipient = 0x01,
					.sender = MODULE_SOURCE_ADDRESS,
					.type = PACKET_TYPE_POLL,
					.len_payload = sizeof(PollStatutGNSS)
			};
		    RFM9x_SetMode_Receive();
 8000ef4:	f7ff fe20 	bl	8000b38 <RFM9x_SetMode_Receive>
	{

			// Messages de débogage détaillés
			    char debug_msg[50];

			    sprintf(debug_msg, "Recipient: 0x%02X\r\n", header->recipient);
 8000ef8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	461a      	mov	r2, r3
 8000efe:	1d3b      	adds	r3, r7, #4
 8000f00:	4932      	ldr	r1, [pc, #200]	@ (8000fcc <main+0x158>)
 8000f02:	4618      	mov	r0, r3
 8000f04:	f003 fbb2 	bl	800466c <siprintf>
			    HAL_UART_Transmit(&huart2, (uint8_t*)debug_msg, strlen(debug_msg), HAL_MAX_DELAY);
 8000f08:	1d3b      	adds	r3, r7, #4
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff f960 	bl	80001d0 <strlen>
 8000f10:	4603      	mov	r3, r0
 8000f12:	b29a      	uxth	r2, r3
 8000f14:	1d39      	adds	r1, r7, #4
 8000f16:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1a:	4828      	ldr	r0, [pc, #160]	@ (8000fbc <main+0x148>)
 8000f1c:	f002 fdb2 	bl	8003a84 <HAL_UART_Transmit>

			    sprintf(debug_msg, "Sender: 0x%02X\r\n", header->sender);
 8000f20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000f22:	785b      	ldrb	r3, [r3, #1]
 8000f24:	461a      	mov	r2, r3
 8000f26:	1d3b      	adds	r3, r7, #4
 8000f28:	4929      	ldr	r1, [pc, #164]	@ (8000fd0 <main+0x15c>)
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f003 fb9e 	bl	800466c <siprintf>
			    HAL_UART_Transmit(&huart2, (uint8_t*)debug_msg, strlen(debug_msg), HAL_MAX_DELAY);
 8000f30:	1d3b      	adds	r3, r7, #4
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff f94c 	bl	80001d0 <strlen>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	1d39      	adds	r1, r7, #4
 8000f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f42:	481e      	ldr	r0, [pc, #120]	@ (8000fbc <main+0x148>)
 8000f44:	f002 fd9e 	bl	8003a84 <HAL_UART_Transmit>

			    sprintf(debug_msg, "Type: 0x%02X\r\n", header->type);
 8000f48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000f4a:	789b      	ldrb	r3, [r3, #2]
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	4920      	ldr	r1, [pc, #128]	@ (8000fd4 <main+0x160>)
 8000f52:	4618      	mov	r0, r3
 8000f54:	f003 fb8a 	bl	800466c <siprintf>
			    HAL_UART_Transmit(&huart2, (uint8_t*)debug_msg, strlen(debug_msg), HAL_MAX_DELAY);
 8000f58:	1d3b      	adds	r3, r7, #4
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff f938 	bl	80001d0 <strlen>
 8000f60:	4603      	mov	r3, r0
 8000f62:	b29a      	uxth	r2, r3
 8000f64:	1d39      	adds	r1, r7, #4
 8000f66:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6a:	4814      	ldr	r0, [pc, #80]	@ (8000fbc <main+0x148>)
 8000f6c:	f002 fd8a 	bl	8003a84 <HAL_UART_Transmit>

			    sprintf(debug_msg, "Payload Length: %d\r\n", header->len_payload);
 8000f70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000f72:	78db      	ldrb	r3, [r3, #3]
 8000f74:	461a      	mov	r2, r3
 8000f76:	1d3b      	adds	r3, r7, #4
 8000f78:	4917      	ldr	r1, [pc, #92]	@ (8000fd8 <main+0x164>)
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f003 fb76 	bl	800466c <siprintf>
			    HAL_UART_Transmit(&huart2, (uint8_t*)debug_msg, strlen(debug_msg), HAL_MAX_DELAY);
 8000f80:	1d3b      	adds	r3, r7, #4
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff f924 	bl	80001d0 <strlen>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	b29a      	uxth	r2, r3
 8000f8c:	1d39      	adds	r1, r7, #4
 8000f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f92:	480a      	ldr	r0, [pc, #40]	@ (8000fbc <main+0x148>)
 8000f94:	f002 fd76 	bl	8003a84 <HAL_UART_Transmit>
			LORA_Send(header, PollStatutGNSS);
 8000f98:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8000fa0:	f7ff fafa 	bl	8000598 <LORA_Send>
			Delay_ms(1000);
 8000fa4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fa8:	f7ff fe5a 	bl	8000c60 <Delay_ms>

			RFM9x_ClearInt();
 8000fac:	f7ff fdd4 	bl	8000b58 <RFM9x_ClearInt>
	{
 8000fb0:	bf00      	nop
 8000fb2:	e7a1      	b.n	8000ef8 <main+0x84>
 8000fb4:	08004f7c 	.word	0x08004f7c
 8000fb8:	08004f8c 	.word	0x08004f8c
 8000fbc:	200001b0 	.word	0x200001b0
 8000fc0:	20000148 	.word	0x20000148
 8000fc4:	08004f9c 	.word	0x08004f9c
 8000fc8:	08004fa4 	.word	0x08004fa4
 8000fcc:	08004f2c 	.word	0x08004f2c
 8000fd0:	08004f40 	.word	0x08004f40
 8000fd4:	08004f54 	.word	0x08004f54
 8000fd8:	08004f64 	.word	0x08004f64

08000fdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b096      	sub	sp, #88	@ 0x58
 8000fe0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fe2:	f107 0314 	add.w	r3, r7, #20
 8000fe6:	2244      	movs	r2, #68	@ 0x44
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f003 fb5e 	bl	80046ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff0:	463b      	mov	r3, r7
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
 8000ffa:	60da      	str	r2, [r3, #12]
 8000ffc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ffe:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001002:	f000 fdcd 	bl	8001ba0 <HAL_PWREx_ControlVoltageScaling>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800100c:	f000 f848 	bl	80010a0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001010:	f000 fda8 	bl	8001b64 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001014:	4b21      	ldr	r3, [pc, #132]	@ (800109c <SystemClock_Config+0xc0>)
 8001016:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800101a:	4a20      	ldr	r2, [pc, #128]	@ (800109c <SystemClock_Config+0xc0>)
 800101c:	f023 0318 	bic.w	r3, r3, #24
 8001020:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001024:	2314      	movs	r3, #20
 8001026:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001028:	2301      	movs	r3, #1
 800102a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800102c:	2301      	movs	r3, #1
 800102e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001034:	2360      	movs	r3, #96	@ 0x60
 8001036:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001038:	2302      	movs	r3, #2
 800103a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800103c:	2301      	movs	r3, #1
 800103e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001040:	2301      	movs	r3, #1
 8001042:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001044:	2328      	movs	r3, #40	@ 0x28
 8001046:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001048:	2307      	movs	r3, #7
 800104a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800104c:	2302      	movs	r3, #2
 800104e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001050:	2302      	movs	r3, #2
 8001052:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	4618      	mov	r0, r3
 800105a:	f000 fdf7 	bl	8001c4c <HAL_RCC_OscConfig>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001064:	f000 f81c 	bl	80010a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001068:	230f      	movs	r3, #15
 800106a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800106c:	2303      	movs	r3, #3
 800106e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001070:	2300      	movs	r3, #0
 8001072:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001074:	2300      	movs	r3, #0
 8001076:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001078:	2300      	movs	r3, #0
 800107a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800107c:	463b      	mov	r3, r7
 800107e:	2104      	movs	r1, #4
 8001080:	4618      	mov	r0, r3
 8001082:	f001 f9f7 	bl	8002474 <HAL_RCC_ClockConfig>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800108c:	f000 f808 	bl	80010a0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001090:	f001 fe0a 	bl	8002ca8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001094:	bf00      	nop
 8001096:	3758      	adds	r7, #88	@ 0x58
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40021000 	.word	0x40021000

080010a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010a4:	b672      	cpsid	i
}
 80010a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80010a8:	bf00      	nop
 80010aa:	e7fd      	b.n	80010a8 <Error_Handler+0x8>

080010ac <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80010b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001120 <MX_SPI1_Init+0x74>)
 80010b2:	4a1c      	ldr	r2, [pc, #112]	@ (8001124 <MX_SPI1_Init+0x78>)
 80010b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001120 <MX_SPI1_Init+0x74>)
 80010b8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80010bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010be:	4b18      	ldr	r3, [pc, #96]	@ (8001120 <MX_SPI1_Init+0x74>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010c4:	4b16      	ldr	r3, [pc, #88]	@ (8001120 <MX_SPI1_Init+0x74>)
 80010c6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80010ca:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010cc:	4b14      	ldr	r3, [pc, #80]	@ (8001120 <MX_SPI1_Init+0x74>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010d2:	4b13      	ldr	r3, [pc, #76]	@ (8001120 <MX_SPI1_Init+0x74>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010d8:	4b11      	ldr	r3, [pc, #68]	@ (8001120 <MX_SPI1_Init+0x74>)
 80010da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010de:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80010e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001120 <MX_SPI1_Init+0x74>)
 80010e2:	2220      	movs	r2, #32
 80010e4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001120 <MX_SPI1_Init+0x74>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001120 <MX_SPI1_Init+0x74>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001120 <MX_SPI1_Init+0x74>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80010f8:	4b09      	ldr	r3, [pc, #36]	@ (8001120 <MX_SPI1_Init+0x74>)
 80010fa:	2207      	movs	r2, #7
 80010fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80010fe:	4b08      	ldr	r3, [pc, #32]	@ (8001120 <MX_SPI1_Init+0x74>)
 8001100:	2200      	movs	r2, #0
 8001102:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001104:	4b06      	ldr	r3, [pc, #24]	@ (8001120 <MX_SPI1_Init+0x74>)
 8001106:	2208      	movs	r2, #8
 8001108:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800110a:	4805      	ldr	r0, [pc, #20]	@ (8001120 <MX_SPI1_Init+0x74>)
 800110c:	f001 fece 	bl	8002eac <HAL_SPI_Init>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001116:	f7ff ffc3 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000148 	.word	0x20000148
 8001124:	40013000 	.word	0x40013000

08001128 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b08a      	sub	sp, #40	@ 0x28
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
 800113e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a25      	ldr	r2, [pc, #148]	@ (80011dc <HAL_SPI_MspInit+0xb4>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d144      	bne.n	80011d4 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800114a:	4b25      	ldr	r3, [pc, #148]	@ (80011e0 <HAL_SPI_MspInit+0xb8>)
 800114c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800114e:	4a24      	ldr	r2, [pc, #144]	@ (80011e0 <HAL_SPI_MspInit+0xb8>)
 8001150:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001154:	6613      	str	r3, [r2, #96]	@ 0x60
 8001156:	4b22      	ldr	r3, [pc, #136]	@ (80011e0 <HAL_SPI_MspInit+0xb8>)
 8001158:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800115a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800115e:	613b      	str	r3, [r7, #16]
 8001160:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001162:	4b1f      	ldr	r3, [pc, #124]	@ (80011e0 <HAL_SPI_MspInit+0xb8>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001166:	4a1e      	ldr	r2, [pc, #120]	@ (80011e0 <HAL_SPI_MspInit+0xb8>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800116e:	4b1c      	ldr	r3, [pc, #112]	@ (80011e0 <HAL_SPI_MspInit+0xb8>)
 8001170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800117a:	4b19      	ldr	r3, [pc, #100]	@ (80011e0 <HAL_SPI_MspInit+0xb8>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800117e:	4a18      	ldr	r2, [pc, #96]	@ (80011e0 <HAL_SPI_MspInit+0xb8>)
 8001180:	f043 0302 	orr.w	r3, r3, #2
 8001184:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001186:	4b16      	ldr	r3, [pc, #88]	@ (80011e0 <HAL_SPI_MspInit+0xb8>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 8001192:	2382      	movs	r3, #130	@ 0x82
 8001194:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001196:	2302      	movs	r3, #2
 8001198:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800119e:	2303      	movs	r3, #3
 80011a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011a2:	2305      	movs	r3, #5
 80011a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a6:	f107 0314 	add.w	r3, r7, #20
 80011aa:	4619      	mov	r1, r3
 80011ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011b0:	f000 fb32 	bl	8001818 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80011b4:	2310      	movs	r3, #16
 80011b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b8:	2302      	movs	r3, #2
 80011ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c0:	2303      	movs	r3, #3
 80011c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011c4:	2305      	movs	r3, #5
 80011c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c8:	f107 0314 	add.w	r3, r7, #20
 80011cc:	4619      	mov	r1, r3
 80011ce:	4805      	ldr	r0, [pc, #20]	@ (80011e4 <HAL_SPI_MspInit+0xbc>)
 80011d0:	f000 fb22 	bl	8001818 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80011d4:	bf00      	nop
 80011d6:	3728      	adds	r7, #40	@ 0x28
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40013000 	.word	0x40013000
 80011e0:	40021000 	.word	0x40021000
 80011e4:	48000400 	.word	0x48000400

080011e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ee:	4b0f      	ldr	r3, [pc, #60]	@ (800122c <HAL_MspInit+0x44>)
 80011f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011f2:	4a0e      	ldr	r2, [pc, #56]	@ (800122c <HAL_MspInit+0x44>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80011fa:	4b0c      	ldr	r3, [pc, #48]	@ (800122c <HAL_MspInit+0x44>)
 80011fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001206:	4b09      	ldr	r3, [pc, #36]	@ (800122c <HAL_MspInit+0x44>)
 8001208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800120a:	4a08      	ldr	r2, [pc, #32]	@ (800122c <HAL_MspInit+0x44>)
 800120c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001210:	6593      	str	r3, [r2, #88]	@ 0x58
 8001212:	4b06      	ldr	r3, [pc, #24]	@ (800122c <HAL_MspInit+0x44>)
 8001214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001216:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800121a:	603b      	str	r3, [r7, #0]
 800121c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	40021000 	.word	0x40021000

08001230 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8001234:	bf00      	nop
 8001236:	e7fd      	b.n	8001234 <NMI_Handler+0x4>

08001238 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 800123c:	bf00      	nop
 800123e:	e7fd      	b.n	800123c <HardFault_Handler+0x4>

08001240 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1)
 8001244:	bf00      	nop
 8001246:	e7fd      	b.n	8001244 <MemManage_Handler+0x4>

08001248 <BusFault_Handler>:

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1)
 800124c:	bf00      	nop
 800124e:	e7fd      	b.n	800124c <BusFault_Handler+0x4>

08001250 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1)
 8001254:	bf00      	nop
 8001256:	e7fd      	b.n	8001254 <UsageFault_Handler+0x4>

08001258 <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8001286:	f000 f995 	bl	80015b4 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
	...

08001290 <EXTI9_5_IRQHandler>:

/**
 * @brief This function handles EXTI line[9:5] interrupts.
 */
void EXTI9_5_IRQHandler(void)
{
 8001290:	b590      	push	{r4, r7, lr}
 8001292:	b08f      	sub	sp, #60	@ 0x3c
 8001294:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(SPI1_IRQ_Pin) != RESET){
 8001296:	4b14      	ldr	r3, [pc, #80]	@ (80012e8 <EXTI9_5_IRQHandler+0x58>)
 8001298:	695b      	ldr	r3, [r3, #20]
 800129a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d01a      	beq.n	80012d8 <EXTI9_5_IRQHandler+0x48>
		char debug_msg[50];
		sprintf(debug_msg, "\r\n---MESSAGE RECEIVED --FROM-- LORA\r\n");
 80012a2:	463b      	mov	r3, r7
 80012a4:	4911      	ldr	r1, [pc, #68]	@ (80012ec <EXTI9_5_IRQHandler+0x5c>)
 80012a6:	4618      	mov	r0, r3
 80012a8:	f003 f9e0 	bl	800466c <siprintf>
		HAL_UART_Transmit(hLORACom.huartDebug, (uint8_t*)debug_msg, strlen(debug_msg), HAL_MAX_DELAY);
 80012ac:	4b10      	ldr	r3, [pc, #64]	@ (80012f0 <EXTI9_5_IRQHandler+0x60>)
 80012ae:	685c      	ldr	r4, [r3, #4]
 80012b0:	463b      	mov	r3, r7
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7fe ff8c 	bl	80001d0 <strlen>
 80012b8:	4603      	mov	r3, r0
 80012ba:	b29a      	uxth	r2, r3
 80012bc:	4639      	mov	r1, r7
 80012be:	f04f 33ff 	mov.w	r3, #4294967295
 80012c2:	4620      	mov	r0, r4
 80012c4:	f002 fbde 	bl	8003a84 <HAL_UART_Transmit>

		LORA_Message* LORA_Received=(LORA_Message*)malloc(sizeof(LORA_Message));
 80012c8:	2010      	movs	r0, #16
 80012ca:	f003 f8a7 	bl	800441c <malloc>
 80012ce:	4603      	mov	r3, r0
 80012d0:	637b      	str	r3, [r7, #52]	@ 0x34
		RFM9x_Receive(LORA_Received);
 80012d2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80012d4:	f7ff fb06 	bl	80008e4 <RFM9x_Receive>


	}
	/* USER CODE END EXTI9_5_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(SPI1_IRQ_Pin);
 80012d8:	2040      	movs	r0, #64	@ 0x40
 80012da:	f000 fc1f 	bl	8001b1c <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI9_5_IRQn 1 */

	/* USER CODE END EXTI9_5_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	373c      	adds	r7, #60	@ 0x3c
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd90      	pop	{r4, r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40010400 	.word	0x40010400
 80012ec:	08004fa8 	.word	0x08004fa8
 80012f0:	20000078 	.word	0x20000078

080012f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012fc:	4a14      	ldr	r2, [pc, #80]	@ (8001350 <_sbrk+0x5c>)
 80012fe:	4b15      	ldr	r3, [pc, #84]	@ (8001354 <_sbrk+0x60>)
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001308:	4b13      	ldr	r3, [pc, #76]	@ (8001358 <_sbrk+0x64>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d102      	bne.n	8001316 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001310:	4b11      	ldr	r3, [pc, #68]	@ (8001358 <_sbrk+0x64>)
 8001312:	4a12      	ldr	r2, [pc, #72]	@ (800135c <_sbrk+0x68>)
 8001314:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001316:	4b10      	ldr	r3, [pc, #64]	@ (8001358 <_sbrk+0x64>)
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4413      	add	r3, r2
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	429a      	cmp	r2, r3
 8001322:	d207      	bcs.n	8001334 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001324:	f003 f9da 	bl	80046dc <__errno>
 8001328:	4603      	mov	r3, r0
 800132a:	220c      	movs	r2, #12
 800132c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800132e:	f04f 33ff 	mov.w	r3, #4294967295
 8001332:	e009      	b.n	8001348 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001334:	4b08      	ldr	r3, [pc, #32]	@ (8001358 <_sbrk+0x64>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800133a:	4b07      	ldr	r3, [pc, #28]	@ (8001358 <_sbrk+0x64>)
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4413      	add	r3, r2
 8001342:	4a05      	ldr	r2, [pc, #20]	@ (8001358 <_sbrk+0x64>)
 8001344:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001346:	68fb      	ldr	r3, [r7, #12]
}
 8001348:	4618      	mov	r0, r3
 800134a:	3718      	adds	r7, #24
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20010000 	.word	0x20010000
 8001354:	00000400 	.word	0x00000400
 8001358:	200001ac 	.word	0x200001ac
 800135c:	20000388 	.word	0x20000388

08001360 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001364:	4b06      	ldr	r3, [pc, #24]	@ (8001380 <SystemInit+0x20>)
 8001366:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800136a:	4a05      	ldr	r2, [pc, #20]	@ (8001380 <SystemInit+0x20>)
 800136c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001370:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001388:	4b14      	ldr	r3, [pc, #80]	@ (80013dc <MX_USART2_UART_Init+0x58>)
 800138a:	4a15      	ldr	r2, [pc, #84]	@ (80013e0 <MX_USART2_UART_Init+0x5c>)
 800138c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800138e:	4b13      	ldr	r3, [pc, #76]	@ (80013dc <MX_USART2_UART_Init+0x58>)
 8001390:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001394:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001396:	4b11      	ldr	r3, [pc, #68]	@ (80013dc <MX_USART2_UART_Init+0x58>)
 8001398:	2200      	movs	r2, #0
 800139a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800139c:	4b0f      	ldr	r3, [pc, #60]	@ (80013dc <MX_USART2_UART_Init+0x58>)
 800139e:	2200      	movs	r2, #0
 80013a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013a2:	4b0e      	ldr	r3, [pc, #56]	@ (80013dc <MX_USART2_UART_Init+0x58>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013a8:	4b0c      	ldr	r3, [pc, #48]	@ (80013dc <MX_USART2_UART_Init+0x58>)
 80013aa:	220c      	movs	r2, #12
 80013ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ae:	4b0b      	ldr	r3, [pc, #44]	@ (80013dc <MX_USART2_UART_Init+0x58>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013b4:	4b09      	ldr	r3, [pc, #36]	@ (80013dc <MX_USART2_UART_Init+0x58>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013ba:	4b08      	ldr	r3, [pc, #32]	@ (80013dc <MX_USART2_UART_Init+0x58>)
 80013bc:	2200      	movs	r2, #0
 80013be:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013c0:	4b06      	ldr	r3, [pc, #24]	@ (80013dc <MX_USART2_UART_Init+0x58>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013c6:	4805      	ldr	r0, [pc, #20]	@ (80013dc <MX_USART2_UART_Init+0x58>)
 80013c8:	f002 fb0e 	bl	80039e8 <HAL_UART_Init>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80013d2:	f7ff fe65 	bl	80010a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	200001b0 	.word	0x200001b0
 80013e0:	40004400 	.word	0x40004400

080013e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b09e      	sub	sp, #120	@ 0x78
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ec:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013fc:	f107 0310 	add.w	r3, r7, #16
 8001400:	2254      	movs	r2, #84	@ 0x54
 8001402:	2100      	movs	r1, #0
 8001404:	4618      	mov	r0, r3
 8001406:	f003 f951 	bl	80046ac <memset>
  if(uartHandle->Instance==USART2)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a28      	ldr	r2, [pc, #160]	@ (80014b0 <HAL_UART_MspInit+0xcc>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d148      	bne.n	80014a6 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001414:	2302      	movs	r3, #2
 8001416:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001418:	2300      	movs	r3, #0
 800141a:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800141c:	f107 0310 	add.w	r3, r7, #16
 8001420:	4618      	mov	r0, r3
 8001422:	f001 fa4b 	bl	80028bc <HAL_RCCEx_PeriphCLKConfig>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800142c:	f7ff fe38 	bl	80010a0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001430:	4b20      	ldr	r3, [pc, #128]	@ (80014b4 <HAL_UART_MspInit+0xd0>)
 8001432:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001434:	4a1f      	ldr	r2, [pc, #124]	@ (80014b4 <HAL_UART_MspInit+0xd0>)
 8001436:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800143a:	6593      	str	r3, [r2, #88]	@ 0x58
 800143c:	4b1d      	ldr	r3, [pc, #116]	@ (80014b4 <HAL_UART_MspInit+0xd0>)
 800143e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001440:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001448:	4b1a      	ldr	r3, [pc, #104]	@ (80014b4 <HAL_UART_MspInit+0xd0>)
 800144a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800144c:	4a19      	ldr	r2, [pc, #100]	@ (80014b4 <HAL_UART_MspInit+0xd0>)
 800144e:	f043 0301 	orr.w	r3, r3, #1
 8001452:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001454:	4b17      	ldr	r3, [pc, #92]	@ (80014b4 <HAL_UART_MspInit+0xd0>)
 8001456:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001458:	f003 0301 	and.w	r3, r3, #1
 800145c:	60bb      	str	r3, [r7, #8]
 800145e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001460:	2304      	movs	r3, #4
 8001462:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001464:	2302      	movs	r3, #2
 8001466:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146c:	2303      	movs	r3, #3
 800146e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001470:	2307      	movs	r3, #7
 8001472:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001474:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001478:	4619      	mov	r1, r3
 800147a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800147e:	f000 f9cb 	bl	8001818 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001482:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001486:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001488:	2302      	movs	r3, #2
 800148a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001490:	2303      	movs	r3, #3
 8001492:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001494:	2303      	movs	r3, #3
 8001496:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001498:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800149c:	4619      	mov	r1, r3
 800149e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014a2:	f000 f9b9 	bl	8001818 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80014a6:	bf00      	nop
 80014a8:	3778      	adds	r7, #120	@ 0x78
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40004400 	.word	0x40004400
 80014b4:	40021000 	.word	0x40021000

080014b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014bc:	f7ff ff50 	bl	8001360 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014c0:	480c      	ldr	r0, [pc, #48]	@ (80014f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80014c2:	490d      	ldr	r1, [pc, #52]	@ (80014f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014c4:	4a0d      	ldr	r2, [pc, #52]	@ (80014fc <LoopForever+0xe>)
  movs r3, #0
 80014c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014c8:	e002      	b.n	80014d0 <LoopCopyDataInit>

080014ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ce:	3304      	adds	r3, #4

080014d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014d4:	d3f9      	bcc.n	80014ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001500 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014d8:	4c0a      	ldr	r4, [pc, #40]	@ (8001504 <LoopForever+0x16>)
  movs r3, #0
 80014da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014dc:	e001      	b.n	80014e2 <LoopFillZerobss>

080014de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014e0:	3204      	adds	r2, #4

080014e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014e4:	d3fb      	bcc.n	80014de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014e6:	f003 f8ff 	bl	80046e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014ea:	f7ff fcc3 	bl	8000e74 <main>

080014ee <LoopForever>:

LoopForever:
    b LoopForever
 80014ee:	e7fe      	b.n	80014ee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014f0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80014f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014f8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80014fc:	0800505c 	.word	0x0800505c
  ldr r2, =_sbss
 8001500:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001504:	20000384 	.word	0x20000384

08001508 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001508:	e7fe      	b.n	8001508 <ADC1_IRQHandler>

0800150a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b082      	sub	sp, #8
 800150e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001510:	2300      	movs	r3, #0
 8001512:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001514:	2003      	movs	r0, #3
 8001516:	f000 f93d 	bl	8001794 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800151a:	2000      	movs	r0, #0
 800151c:	f000 f80e 	bl	800153c <HAL_InitTick>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d002      	beq.n	800152c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	71fb      	strb	r3, [r7, #7]
 800152a:	e001      	b.n	8001530 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800152c:	f7ff fe5c 	bl	80011e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001530:	79fb      	ldrb	r3, [r7, #7]
}
 8001532:	4618      	mov	r0, r3
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001544:	2300      	movs	r3, #0
 8001546:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001548:	4b17      	ldr	r3, [pc, #92]	@ (80015a8 <HAL_InitTick+0x6c>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d023      	beq.n	8001598 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001550:	4b16      	ldr	r3, [pc, #88]	@ (80015ac <HAL_InitTick+0x70>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4b14      	ldr	r3, [pc, #80]	@ (80015a8 <HAL_InitTick+0x6c>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	4619      	mov	r1, r3
 800155a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800155e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001562:	fbb2 f3f3 	udiv	r3, r2, r3
 8001566:	4618      	mov	r0, r3
 8001568:	f000 f949 	bl	80017fe <HAL_SYSTICK_Config>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d10f      	bne.n	8001592 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2b0f      	cmp	r3, #15
 8001576:	d809      	bhi.n	800158c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001578:	2200      	movs	r2, #0
 800157a:	6879      	ldr	r1, [r7, #4]
 800157c:	f04f 30ff 	mov.w	r0, #4294967295
 8001580:	f000 f913 	bl	80017aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001584:	4a0a      	ldr	r2, [pc, #40]	@ (80015b0 <HAL_InitTick+0x74>)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6013      	str	r3, [r2, #0]
 800158a:	e007      	b.n	800159c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	73fb      	strb	r3, [r7, #15]
 8001590:	e004      	b.n	800159c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	73fb      	strb	r3, [r7, #15]
 8001596:	e001      	b.n	800159c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800159c:	7bfb      	ldrb	r3, [r7, #15]
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000008 	.word	0x20000008
 80015ac:	20000000 	.word	0x20000000
 80015b0:	20000004 	.word	0x20000004

080015b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015b8:	4b06      	ldr	r3, [pc, #24]	@ (80015d4 <HAL_IncTick+0x20>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	461a      	mov	r2, r3
 80015be:	4b06      	ldr	r3, [pc, #24]	@ (80015d8 <HAL_IncTick+0x24>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4413      	add	r3, r2
 80015c4:	4a04      	ldr	r2, [pc, #16]	@ (80015d8 <HAL_IncTick+0x24>)
 80015c6:	6013      	str	r3, [r2, #0]
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	20000008 	.word	0x20000008
 80015d8:	20000238 	.word	0x20000238

080015dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  return uwTick;
 80015e0:	4b03      	ldr	r3, [pc, #12]	@ (80015f0 <HAL_GetTick+0x14>)
 80015e2:	681b      	ldr	r3, [r3, #0]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	20000238 	.word	0x20000238

080015f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f003 0307 	and.w	r3, r3, #7
 8001602:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001604:	4b0c      	ldr	r3, [pc, #48]	@ (8001638 <__NVIC_SetPriorityGrouping+0x44>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800160a:	68ba      	ldr	r2, [r7, #8]
 800160c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001610:	4013      	ands	r3, r2
 8001612:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800161c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001620:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001624:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001626:	4a04      	ldr	r2, [pc, #16]	@ (8001638 <__NVIC_SetPriorityGrouping+0x44>)
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	60d3      	str	r3, [r2, #12]
}
 800162c:	bf00      	nop
 800162e:	3714      	adds	r7, #20
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	e000ed00 	.word	0xe000ed00

0800163c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001640:	4b04      	ldr	r3, [pc, #16]	@ (8001654 <__NVIC_GetPriorityGrouping+0x18>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	0a1b      	lsrs	r3, r3, #8
 8001646:	f003 0307 	and.w	r3, r3, #7
}
 800164a:	4618      	mov	r0, r3
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	e000ed00 	.word	0xe000ed00

08001658 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001666:	2b00      	cmp	r3, #0
 8001668:	db0b      	blt.n	8001682 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	f003 021f 	and.w	r2, r3, #31
 8001670:	4907      	ldr	r1, [pc, #28]	@ (8001690 <__NVIC_EnableIRQ+0x38>)
 8001672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001676:	095b      	lsrs	r3, r3, #5
 8001678:	2001      	movs	r0, #1
 800167a:	fa00 f202 	lsl.w	r2, r0, r2
 800167e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	e000e100 	.word	0xe000e100

08001694 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	6039      	str	r1, [r7, #0]
 800169e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	db0a      	blt.n	80016be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	b2da      	uxtb	r2, r3
 80016ac:	490c      	ldr	r1, [pc, #48]	@ (80016e0 <__NVIC_SetPriority+0x4c>)
 80016ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b2:	0112      	lsls	r2, r2, #4
 80016b4:	b2d2      	uxtb	r2, r2
 80016b6:	440b      	add	r3, r1
 80016b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016bc:	e00a      	b.n	80016d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	b2da      	uxtb	r2, r3
 80016c2:	4908      	ldr	r1, [pc, #32]	@ (80016e4 <__NVIC_SetPriority+0x50>)
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	f003 030f 	and.w	r3, r3, #15
 80016ca:	3b04      	subs	r3, #4
 80016cc:	0112      	lsls	r2, r2, #4
 80016ce:	b2d2      	uxtb	r2, r2
 80016d0:	440b      	add	r3, r1
 80016d2:	761a      	strb	r2, [r3, #24]
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	e000e100 	.word	0xe000e100
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b089      	sub	sp, #36	@ 0x24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	f1c3 0307 	rsb	r3, r3, #7
 8001702:	2b04      	cmp	r3, #4
 8001704:	bf28      	it	cs
 8001706:	2304      	movcs	r3, #4
 8001708:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	3304      	adds	r3, #4
 800170e:	2b06      	cmp	r3, #6
 8001710:	d902      	bls.n	8001718 <NVIC_EncodePriority+0x30>
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	3b03      	subs	r3, #3
 8001716:	e000      	b.n	800171a <NVIC_EncodePriority+0x32>
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800171c:	f04f 32ff 	mov.w	r2, #4294967295
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	43da      	mvns	r2, r3
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	401a      	ands	r2, r3
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001730:	f04f 31ff 	mov.w	r1, #4294967295
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	fa01 f303 	lsl.w	r3, r1, r3
 800173a:	43d9      	mvns	r1, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001740:	4313      	orrs	r3, r2
         );
}
 8001742:	4618      	mov	r0, r3
 8001744:	3724      	adds	r7, #36	@ 0x24
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
	...

08001750 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	3b01      	subs	r3, #1
 800175c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001760:	d301      	bcc.n	8001766 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001762:	2301      	movs	r3, #1
 8001764:	e00f      	b.n	8001786 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001766:	4a0a      	ldr	r2, [pc, #40]	@ (8001790 <SysTick_Config+0x40>)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	3b01      	subs	r3, #1
 800176c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800176e:	210f      	movs	r1, #15
 8001770:	f04f 30ff 	mov.w	r0, #4294967295
 8001774:	f7ff ff8e 	bl	8001694 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001778:	4b05      	ldr	r3, [pc, #20]	@ (8001790 <SysTick_Config+0x40>)
 800177a:	2200      	movs	r2, #0
 800177c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800177e:	4b04      	ldr	r3, [pc, #16]	@ (8001790 <SysTick_Config+0x40>)
 8001780:	2207      	movs	r2, #7
 8001782:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	e000e010 	.word	0xe000e010

08001794 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f7ff ff29 	bl	80015f4 <__NVIC_SetPriorityGrouping>
}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b086      	sub	sp, #24
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	4603      	mov	r3, r0
 80017b2:	60b9      	str	r1, [r7, #8]
 80017b4:	607a      	str	r2, [r7, #4]
 80017b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017bc:	f7ff ff3e 	bl	800163c <__NVIC_GetPriorityGrouping>
 80017c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	68b9      	ldr	r1, [r7, #8]
 80017c6:	6978      	ldr	r0, [r7, #20]
 80017c8:	f7ff ff8e 	bl	80016e8 <NVIC_EncodePriority>
 80017cc:	4602      	mov	r2, r0
 80017ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017d2:	4611      	mov	r1, r2
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff ff5d 	bl	8001694 <__NVIC_SetPriority>
}
 80017da:	bf00      	nop
 80017dc:	3718      	adds	r7, #24
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b082      	sub	sp, #8
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	4603      	mov	r3, r0
 80017ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff ff31 	bl	8001658 <__NVIC_EnableIRQ>
}
 80017f6:	bf00      	nop
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b082      	sub	sp, #8
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f7ff ffa2 	bl	8001750 <SysTick_Config>
 800180c:	4603      	mov	r3, r0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
	...

08001818 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001818:	b480      	push	{r7}
 800181a:	b087      	sub	sp, #28
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001822:	2300      	movs	r3, #0
 8001824:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001826:	e148      	b.n	8001aba <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	2101      	movs	r1, #1
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	fa01 f303 	lsl.w	r3, r1, r3
 8001834:	4013      	ands	r3, r2
 8001836:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2b00      	cmp	r3, #0
 800183c:	f000 813a 	beq.w	8001ab4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f003 0303 	and.w	r3, r3, #3
 8001848:	2b01      	cmp	r3, #1
 800184a:	d005      	beq.n	8001858 <HAL_GPIO_Init+0x40>
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f003 0303 	and.w	r3, r3, #3
 8001854:	2b02      	cmp	r3, #2
 8001856:	d130      	bne.n	80018ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	2203      	movs	r2, #3
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	4013      	ands	r3, r2
 800186e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	68da      	ldr	r2, [r3, #12]
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	4313      	orrs	r3, r2
 8001880:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800188e:	2201      	movs	r2, #1
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	43db      	mvns	r3, r3
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	4013      	ands	r3, r2
 800189c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	091b      	lsrs	r3, r3, #4
 80018a4:	f003 0201 	and.w	r2, r3, #1
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f003 0303 	and.w	r3, r3, #3
 80018c2:	2b03      	cmp	r3, #3
 80018c4:	d017      	beq.n	80018f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	2203      	movs	r2, #3
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	43db      	mvns	r3, r3
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	4013      	ands	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	689a      	ldr	r2, [r3, #8]
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f003 0303 	and.w	r3, r3, #3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d123      	bne.n	800194a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	08da      	lsrs	r2, r3, #3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	3208      	adds	r2, #8
 800190a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800190e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	f003 0307 	and.w	r3, r3, #7
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	220f      	movs	r2, #15
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	43db      	mvns	r3, r3
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	4013      	ands	r3, r2
 8001924:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	691a      	ldr	r2, [r3, #16]
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	f003 0307 	and.w	r3, r3, #7
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	fa02 f303 	lsl.w	r3, r2, r3
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	4313      	orrs	r3, r2
 800193a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	08da      	lsrs	r2, r3, #3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	3208      	adds	r2, #8
 8001944:	6939      	ldr	r1, [r7, #16]
 8001946:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	2203      	movs	r2, #3
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	43db      	mvns	r3, r3
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	4013      	ands	r3, r2
 8001960:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f003 0203 	and.w	r2, r3, #3
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	4313      	orrs	r3, r2
 8001976:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001986:	2b00      	cmp	r3, #0
 8001988:	f000 8094 	beq.w	8001ab4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800198c:	4b52      	ldr	r3, [pc, #328]	@ (8001ad8 <HAL_GPIO_Init+0x2c0>)
 800198e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001990:	4a51      	ldr	r2, [pc, #324]	@ (8001ad8 <HAL_GPIO_Init+0x2c0>)
 8001992:	f043 0301 	orr.w	r3, r3, #1
 8001996:	6613      	str	r3, [r2, #96]	@ 0x60
 8001998:	4b4f      	ldr	r3, [pc, #316]	@ (8001ad8 <HAL_GPIO_Init+0x2c0>)
 800199a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800199c:	f003 0301 	and.w	r3, r3, #1
 80019a0:	60bb      	str	r3, [r7, #8]
 80019a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019a4:	4a4d      	ldr	r2, [pc, #308]	@ (8001adc <HAL_GPIO_Init+0x2c4>)
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	089b      	lsrs	r3, r3, #2
 80019aa:	3302      	adds	r3, #2
 80019ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	f003 0303 	and.w	r3, r3, #3
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	220f      	movs	r2, #15
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	43db      	mvns	r3, r3
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	4013      	ands	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80019ce:	d00d      	beq.n	80019ec <HAL_GPIO_Init+0x1d4>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4a43      	ldr	r2, [pc, #268]	@ (8001ae0 <HAL_GPIO_Init+0x2c8>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d007      	beq.n	80019e8 <HAL_GPIO_Init+0x1d0>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4a42      	ldr	r2, [pc, #264]	@ (8001ae4 <HAL_GPIO_Init+0x2cc>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d101      	bne.n	80019e4 <HAL_GPIO_Init+0x1cc>
 80019e0:	2302      	movs	r3, #2
 80019e2:	e004      	b.n	80019ee <HAL_GPIO_Init+0x1d6>
 80019e4:	2307      	movs	r3, #7
 80019e6:	e002      	b.n	80019ee <HAL_GPIO_Init+0x1d6>
 80019e8:	2301      	movs	r3, #1
 80019ea:	e000      	b.n	80019ee <HAL_GPIO_Init+0x1d6>
 80019ec:	2300      	movs	r3, #0
 80019ee:	697a      	ldr	r2, [r7, #20]
 80019f0:	f002 0203 	and.w	r2, r2, #3
 80019f4:	0092      	lsls	r2, r2, #2
 80019f6:	4093      	lsls	r3, r2
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019fe:	4937      	ldr	r1, [pc, #220]	@ (8001adc <HAL_GPIO_Init+0x2c4>)
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	089b      	lsrs	r3, r3, #2
 8001a04:	3302      	adds	r3, #2
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a0c:	4b36      	ldr	r3, [pc, #216]	@ (8001ae8 <HAL_GPIO_Init+0x2d0>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	43db      	mvns	r3, r3
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d003      	beq.n	8001a30 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a30:	4a2d      	ldr	r2, [pc, #180]	@ (8001ae8 <HAL_GPIO_Init+0x2d0>)
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a36:	4b2c      	ldr	r3, [pc, #176]	@ (8001ae8 <HAL_GPIO_Init+0x2d0>)
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	4013      	ands	r3, r2
 8001a44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d003      	beq.n	8001a5a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a5a:	4a23      	ldr	r2, [pc, #140]	@ (8001ae8 <HAL_GPIO_Init+0x2d0>)
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001a60:	4b21      	ldr	r3, [pc, #132]	@ (8001ae8 <HAL_GPIO_Init+0x2d0>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d003      	beq.n	8001a84 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a84:	4a18      	ldr	r2, [pc, #96]	@ (8001ae8 <HAL_GPIO_Init+0x2d0>)
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001a8a:	4b17      	ldr	r3, [pc, #92]	@ (8001ae8 <HAL_GPIO_Init+0x2d0>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	43db      	mvns	r3, r3
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	4013      	ands	r3, r2
 8001a98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d003      	beq.n	8001aae <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001aae:	4a0e      	ldr	r2, [pc, #56]	@ (8001ae8 <HAL_GPIO_Init+0x2d0>)
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	f47f aeaf 	bne.w	8001828 <HAL_GPIO_Init+0x10>
  }
}
 8001aca:	bf00      	nop
 8001acc:	bf00      	nop
 8001ace:	371c      	adds	r7, #28
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	40010000 	.word	0x40010000
 8001ae0:	48000400 	.word	0x48000400
 8001ae4:	48000800 	.word	0x48000800
 8001ae8:	40010400 	.word	0x40010400

08001aec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	460b      	mov	r3, r1
 8001af6:	807b      	strh	r3, [r7, #2]
 8001af8:	4613      	mov	r3, r2
 8001afa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001afc:	787b      	ldrb	r3, [r7, #1]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d003      	beq.n	8001b0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b02:	887a      	ldrh	r2, [r7, #2]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b08:	e002      	b.n	8001b10 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b0a:	887a      	ldrh	r2, [r7, #2]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b26:	4b08      	ldr	r3, [pc, #32]	@ (8001b48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b28:	695a      	ldr	r2, [r3, #20]
 8001b2a:	88fb      	ldrh	r3, [r7, #6]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d006      	beq.n	8001b40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b32:	4a05      	ldr	r2, [pc, #20]	@ (8001b48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b34:	88fb      	ldrh	r3, [r7, #6]
 8001b36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b38:	88fb      	ldrh	r3, [r7, #6]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f000 f806 	bl	8001b4c <HAL_GPIO_EXTI_Callback>
  }
}
 8001b40:	bf00      	nop
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40010400 	.word	0x40010400

08001b4c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b56:	bf00      	nop
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
	...

08001b64 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b68:	4b05      	ldr	r3, [pc, #20]	@ (8001b80 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a04      	ldr	r2, [pc, #16]	@ (8001b80 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001b6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b72:	6013      	str	r3, [r2, #0]
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	40007000 	.word	0x40007000

08001b84 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001b88:	4b04      	ldr	r3, [pc, #16]	@ (8001b9c <HAL_PWREx_GetVoltageRange+0x18>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	40007000 	.word	0x40007000

08001ba0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001bae:	d130      	bne.n	8001c12 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bb0:	4b23      	ldr	r3, [pc, #140]	@ (8001c40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001bb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001bbc:	d038      	beq.n	8001c30 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bbe:	4b20      	ldr	r3, [pc, #128]	@ (8001c40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001bc6:	4a1e      	ldr	r2, [pc, #120]	@ (8001c40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bc8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bcc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001bce:	4b1d      	ldr	r3, [pc, #116]	@ (8001c44 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2232      	movs	r2, #50	@ 0x32
 8001bd4:	fb02 f303 	mul.w	r3, r2, r3
 8001bd8:	4a1b      	ldr	r2, [pc, #108]	@ (8001c48 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001bda:	fba2 2303 	umull	r2, r3, r2, r3
 8001bde:	0c9b      	lsrs	r3, r3, #18
 8001be0:	3301      	adds	r3, #1
 8001be2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001be4:	e002      	b.n	8001bec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	3b01      	subs	r3, #1
 8001bea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bec:	4b14      	ldr	r3, [pc, #80]	@ (8001c40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bee:	695b      	ldr	r3, [r3, #20]
 8001bf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bf4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bf8:	d102      	bne.n	8001c00 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1f2      	bne.n	8001be6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c00:	4b0f      	ldr	r3, [pc, #60]	@ (8001c40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c02:	695b      	ldr	r3, [r3, #20]
 8001c04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c0c:	d110      	bne.n	8001c30 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e00f      	b.n	8001c32 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c12:	4b0b      	ldr	r3, [pc, #44]	@ (8001c40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001c1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c1e:	d007      	beq.n	8001c30 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c20:	4b07      	ldr	r3, [pc, #28]	@ (8001c40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c28:	4a05      	ldr	r2, [pc, #20]	@ (8001c40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c2a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c2e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3714      	adds	r7, #20
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	40007000 	.word	0x40007000
 8001c44:	20000000 	.word	0x20000000
 8001c48:	431bde83 	.word	0x431bde83

08001c4c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b088      	sub	sp, #32
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d102      	bne.n	8001c60 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	f000 bc02 	b.w	8002464 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c60:	4b96      	ldr	r3, [pc, #600]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f003 030c 	and.w	r3, r3, #12
 8001c68:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c6a:	4b94      	ldr	r3, [pc, #592]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	f003 0303 	and.w	r3, r3, #3
 8001c72:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0310 	and.w	r3, r3, #16
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f000 80e4 	beq.w	8001e4a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d007      	beq.n	8001c98 <HAL_RCC_OscConfig+0x4c>
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	2b0c      	cmp	r3, #12
 8001c8c:	f040 808b 	bne.w	8001da6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	f040 8087 	bne.w	8001da6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c98:	4b88      	ldr	r3, [pc, #544]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d005      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x64>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d101      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e3d9      	b.n	8002464 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a1a      	ldr	r2, [r3, #32]
 8001cb4:	4b81      	ldr	r3, [pc, #516]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0308 	and.w	r3, r3, #8
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d004      	beq.n	8001cca <HAL_RCC_OscConfig+0x7e>
 8001cc0:	4b7e      	ldr	r3, [pc, #504]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001cc8:	e005      	b.n	8001cd6 <HAL_RCC_OscConfig+0x8a>
 8001cca:	4b7c      	ldr	r3, [pc, #496]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001ccc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cd0:	091b      	lsrs	r3, r3, #4
 8001cd2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d223      	bcs.n	8001d22 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a1b      	ldr	r3, [r3, #32]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f000 fd8c 	bl	80027fc <RCC_SetFlashLatencyFromMSIRange>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e3ba      	b.n	8002464 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cee:	4b73      	ldr	r3, [pc, #460]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a72      	ldr	r2, [pc, #456]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001cf4:	f043 0308 	orr.w	r3, r3, #8
 8001cf8:	6013      	str	r3, [r2, #0]
 8001cfa:	4b70      	ldr	r3, [pc, #448]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a1b      	ldr	r3, [r3, #32]
 8001d06:	496d      	ldr	r1, [pc, #436]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d0c:	4b6b      	ldr	r3, [pc, #428]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	69db      	ldr	r3, [r3, #28]
 8001d18:	021b      	lsls	r3, r3, #8
 8001d1a:	4968      	ldr	r1, [pc, #416]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	604b      	str	r3, [r1, #4]
 8001d20:	e025      	b.n	8001d6e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d22:	4b66      	ldr	r3, [pc, #408]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a65      	ldr	r2, [pc, #404]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001d28:	f043 0308 	orr.w	r3, r3, #8
 8001d2c:	6013      	str	r3, [r2, #0]
 8001d2e:	4b63      	ldr	r3, [pc, #396]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a1b      	ldr	r3, [r3, #32]
 8001d3a:	4960      	ldr	r1, [pc, #384]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d40:	4b5e      	ldr	r3, [pc, #376]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	69db      	ldr	r3, [r3, #28]
 8001d4c:	021b      	lsls	r3, r3, #8
 8001d4e:	495b      	ldr	r1, [pc, #364]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001d50:	4313      	orrs	r3, r2
 8001d52:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d109      	bne.n	8001d6e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a1b      	ldr	r3, [r3, #32]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f000 fd4c 	bl	80027fc <RCC_SetFlashLatencyFromMSIRange>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e37a      	b.n	8002464 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d6e:	f000 fc81 	bl	8002674 <HAL_RCC_GetSysClockFreq>
 8001d72:	4602      	mov	r2, r0
 8001d74:	4b51      	ldr	r3, [pc, #324]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	091b      	lsrs	r3, r3, #4
 8001d7a:	f003 030f 	and.w	r3, r3, #15
 8001d7e:	4950      	ldr	r1, [pc, #320]	@ (8001ec0 <HAL_RCC_OscConfig+0x274>)
 8001d80:	5ccb      	ldrb	r3, [r1, r3]
 8001d82:	f003 031f 	and.w	r3, r3, #31
 8001d86:	fa22 f303 	lsr.w	r3, r2, r3
 8001d8a:	4a4e      	ldr	r2, [pc, #312]	@ (8001ec4 <HAL_RCC_OscConfig+0x278>)
 8001d8c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d8e:	4b4e      	ldr	r3, [pc, #312]	@ (8001ec8 <HAL_RCC_OscConfig+0x27c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7ff fbd2 	bl	800153c <HAL_InitTick>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001d9c:	7bfb      	ldrb	r3, [r7, #15]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d052      	beq.n	8001e48 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001da2:	7bfb      	ldrb	r3, [r7, #15]
 8001da4:	e35e      	b.n	8002464 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d032      	beq.n	8001e14 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001dae:	4b43      	ldr	r3, [pc, #268]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a42      	ldr	r2, [pc, #264]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001db4:	f043 0301 	orr.w	r3, r3, #1
 8001db8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001dba:	f7ff fc0f 	bl	80015dc <HAL_GetTick>
 8001dbe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dc0:	e008      	b.n	8001dd4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dc2:	f7ff fc0b 	bl	80015dc <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e347      	b.n	8002464 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dd4:	4b39      	ldr	r3, [pc, #228]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d0f0      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001de0:	4b36      	ldr	r3, [pc, #216]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a35      	ldr	r2, [pc, #212]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001de6:	f043 0308 	orr.w	r3, r3, #8
 8001dea:	6013      	str	r3, [r2, #0]
 8001dec:	4b33      	ldr	r3, [pc, #204]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a1b      	ldr	r3, [r3, #32]
 8001df8:	4930      	ldr	r1, [pc, #192]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dfe:	4b2f      	ldr	r3, [pc, #188]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	021b      	lsls	r3, r3, #8
 8001e0c:	492b      	ldr	r1, [pc, #172]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	604b      	str	r3, [r1, #4]
 8001e12:	e01a      	b.n	8001e4a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e14:	4b29      	ldr	r3, [pc, #164]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a28      	ldr	r2, [pc, #160]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001e1a:	f023 0301 	bic.w	r3, r3, #1
 8001e1e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e20:	f7ff fbdc 	bl	80015dc <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e28:	f7ff fbd8 	bl	80015dc <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e314      	b.n	8002464 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e3a:	4b20      	ldr	r3, [pc, #128]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1f0      	bne.n	8001e28 <HAL_RCC_OscConfig+0x1dc>
 8001e46:	e000      	b.n	8001e4a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e48:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d073      	beq.n	8001f3e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	2b08      	cmp	r3, #8
 8001e5a:	d005      	beq.n	8001e68 <HAL_RCC_OscConfig+0x21c>
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	2b0c      	cmp	r3, #12
 8001e60:	d10e      	bne.n	8001e80 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	2b03      	cmp	r3, #3
 8001e66:	d10b      	bne.n	8001e80 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e68:	4b14      	ldr	r3, [pc, #80]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d063      	beq.n	8001f3c <HAL_RCC_OscConfig+0x2f0>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d15f      	bne.n	8001f3c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e2f1      	b.n	8002464 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e88:	d106      	bne.n	8001e98 <HAL_RCC_OscConfig+0x24c>
 8001e8a:	4b0c      	ldr	r3, [pc, #48]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a0b      	ldr	r2, [pc, #44]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001e90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e94:	6013      	str	r3, [r2, #0]
 8001e96:	e025      	b.n	8001ee4 <HAL_RCC_OscConfig+0x298>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ea0:	d114      	bne.n	8001ecc <HAL_RCC_OscConfig+0x280>
 8001ea2:	4b06      	ldr	r3, [pc, #24]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a05      	ldr	r2, [pc, #20]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001ea8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001eac:	6013      	str	r3, [r2, #0]
 8001eae:	4b03      	ldr	r3, [pc, #12]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a02      	ldr	r2, [pc, #8]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001eb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eb8:	6013      	str	r3, [r2, #0]
 8001eba:	e013      	b.n	8001ee4 <HAL_RCC_OscConfig+0x298>
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	08004fd0 	.word	0x08004fd0
 8001ec4:	20000000 	.word	0x20000000
 8001ec8:	20000004 	.word	0x20000004
 8001ecc:	4ba0      	ldr	r3, [pc, #640]	@ (8002150 <HAL_RCC_OscConfig+0x504>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a9f      	ldr	r2, [pc, #636]	@ (8002150 <HAL_RCC_OscConfig+0x504>)
 8001ed2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ed6:	6013      	str	r3, [r2, #0]
 8001ed8:	4b9d      	ldr	r3, [pc, #628]	@ (8002150 <HAL_RCC_OscConfig+0x504>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a9c      	ldr	r2, [pc, #624]	@ (8002150 <HAL_RCC_OscConfig+0x504>)
 8001ede:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ee2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d013      	beq.n	8001f14 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eec:	f7ff fb76 	bl	80015dc <HAL_GetTick>
 8001ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ef4:	f7ff fb72 	bl	80015dc <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b64      	cmp	r3, #100	@ 0x64
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e2ae      	b.n	8002464 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f06:	4b92      	ldr	r3, [pc, #584]	@ (8002150 <HAL_RCC_OscConfig+0x504>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d0f0      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x2a8>
 8001f12:	e014      	b.n	8001f3e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f14:	f7ff fb62 	bl	80015dc <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f1c:	f7ff fb5e 	bl	80015dc <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b64      	cmp	r3, #100	@ 0x64
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e29a      	b.n	8002464 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f2e:	4b88      	ldr	r3, [pc, #544]	@ (8002150 <HAL_RCC_OscConfig+0x504>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1f0      	bne.n	8001f1c <HAL_RCC_OscConfig+0x2d0>
 8001f3a:	e000      	b.n	8001f3e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d060      	beq.n	800200c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	2b04      	cmp	r3, #4
 8001f4e:	d005      	beq.n	8001f5c <HAL_RCC_OscConfig+0x310>
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	2b0c      	cmp	r3, #12
 8001f54:	d119      	bne.n	8001f8a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d116      	bne.n	8001f8a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f5c:	4b7c      	ldr	r3, [pc, #496]	@ (8002150 <HAL_RCC_OscConfig+0x504>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d005      	beq.n	8001f74 <HAL_RCC_OscConfig+0x328>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d101      	bne.n	8001f74 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e277      	b.n	8002464 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f74:	4b76      	ldr	r3, [pc, #472]	@ (8002150 <HAL_RCC_OscConfig+0x504>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	691b      	ldr	r3, [r3, #16]
 8001f80:	061b      	lsls	r3, r3, #24
 8001f82:	4973      	ldr	r1, [pc, #460]	@ (8002150 <HAL_RCC_OscConfig+0x504>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f88:	e040      	b.n	800200c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d023      	beq.n	8001fda <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f92:	4b6f      	ldr	r3, [pc, #444]	@ (8002150 <HAL_RCC_OscConfig+0x504>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a6e      	ldr	r2, [pc, #440]	@ (8002150 <HAL_RCC_OscConfig+0x504>)
 8001f98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9e:	f7ff fb1d 	bl	80015dc <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fa6:	f7ff fb19 	bl	80015dc <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e255      	b.n	8002464 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fb8:	4b65      	ldr	r3, [pc, #404]	@ (8002150 <HAL_RCC_OscConfig+0x504>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d0f0      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc4:	4b62      	ldr	r3, [pc, #392]	@ (8002150 <HAL_RCC_OscConfig+0x504>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	061b      	lsls	r3, r3, #24
 8001fd2:	495f      	ldr	r1, [pc, #380]	@ (8002150 <HAL_RCC_OscConfig+0x504>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	604b      	str	r3, [r1, #4]
 8001fd8:	e018      	b.n	800200c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fda:	4b5d      	ldr	r3, [pc, #372]	@ (8002150 <HAL_RCC_OscConfig+0x504>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a5c      	ldr	r2, [pc, #368]	@ (8002150 <HAL_RCC_OscConfig+0x504>)
 8001fe0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001fe4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe6:	f7ff faf9 	bl	80015dc <HAL_GetTick>
 8001fea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fec:	e008      	b.n	8002000 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fee:	f7ff faf5 	bl	80015dc <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e231      	b.n	8002464 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002000:	4b53      	ldr	r3, [pc, #332]	@ (8002150 <HAL_RCC_OscConfig+0x504>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1f0      	bne.n	8001fee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0308 	and.w	r3, r3, #8
 8002014:	2b00      	cmp	r3, #0
 8002016:	d03c      	beq.n	8002092 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	695b      	ldr	r3, [r3, #20]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d01c      	beq.n	800205a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002020:	4b4b      	ldr	r3, [pc, #300]	@ (8002150 <HAL_RCC_OscConfig+0x504>)
 8002022:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002026:	4a4a      	ldr	r2, [pc, #296]	@ (8002150 <HAL_RCC_OscConfig+0x504>)
 8002028:	f043 0301 	orr.w	r3, r3, #1
 800202c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002030:	f7ff fad4 	bl	80015dc <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002038:	f7ff fad0 	bl	80015dc <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e20c      	b.n	8002464 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800204a:	4b41      	ldr	r3, [pc, #260]	@ (8002150 <HAL_RCC_OscConfig+0x504>)
 800204c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d0ef      	beq.n	8002038 <HAL_RCC_OscConfig+0x3ec>
 8002058:	e01b      	b.n	8002092 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800205a:	4b3d      	ldr	r3, [pc, #244]	@ (8002150 <HAL_RCC_OscConfig+0x504>)
 800205c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002060:	4a3b      	ldr	r2, [pc, #236]	@ (8002150 <HAL_RCC_OscConfig+0x504>)
 8002062:	f023 0301 	bic.w	r3, r3, #1
 8002066:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800206a:	f7ff fab7 	bl	80015dc <HAL_GetTick>
 800206e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002070:	e008      	b.n	8002084 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002072:	f7ff fab3 	bl	80015dc <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e1ef      	b.n	8002464 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002084:	4b32      	ldr	r3, [pc, #200]	@ (8002150 <HAL_RCC_OscConfig+0x504>)
 8002086:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1ef      	bne.n	8002072 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0304 	and.w	r3, r3, #4
 800209a:	2b00      	cmp	r3, #0
 800209c:	f000 80a6 	beq.w	80021ec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020a0:	2300      	movs	r3, #0
 80020a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80020a4:	4b2a      	ldr	r3, [pc, #168]	@ (8002150 <HAL_RCC_OscConfig+0x504>)
 80020a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d10d      	bne.n	80020cc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020b0:	4b27      	ldr	r3, [pc, #156]	@ (8002150 <HAL_RCC_OscConfig+0x504>)
 80020b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020b4:	4a26      	ldr	r2, [pc, #152]	@ (8002150 <HAL_RCC_OscConfig+0x504>)
 80020b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80020bc:	4b24      	ldr	r3, [pc, #144]	@ (8002150 <HAL_RCC_OscConfig+0x504>)
 80020be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020c4:	60bb      	str	r3, [r7, #8]
 80020c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020c8:	2301      	movs	r3, #1
 80020ca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020cc:	4b21      	ldr	r3, [pc, #132]	@ (8002154 <HAL_RCC_OscConfig+0x508>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d118      	bne.n	800210a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020d8:	4b1e      	ldr	r3, [pc, #120]	@ (8002154 <HAL_RCC_OscConfig+0x508>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a1d      	ldr	r2, [pc, #116]	@ (8002154 <HAL_RCC_OscConfig+0x508>)
 80020de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020e4:	f7ff fa7a 	bl	80015dc <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ec:	f7ff fa76 	bl	80015dc <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e1b2      	b.n	8002464 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020fe:	4b15      	ldr	r3, [pc, #84]	@ (8002154 <HAL_RCC_OscConfig+0x508>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002106:	2b00      	cmp	r3, #0
 8002108:	d0f0      	beq.n	80020ec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d108      	bne.n	8002124 <HAL_RCC_OscConfig+0x4d8>
 8002112:	4b0f      	ldr	r3, [pc, #60]	@ (8002150 <HAL_RCC_OscConfig+0x504>)
 8002114:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002118:	4a0d      	ldr	r2, [pc, #52]	@ (8002150 <HAL_RCC_OscConfig+0x504>)
 800211a:	f043 0301 	orr.w	r3, r3, #1
 800211e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002122:	e029      	b.n	8002178 <HAL_RCC_OscConfig+0x52c>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	2b05      	cmp	r3, #5
 800212a:	d115      	bne.n	8002158 <HAL_RCC_OscConfig+0x50c>
 800212c:	4b08      	ldr	r3, [pc, #32]	@ (8002150 <HAL_RCC_OscConfig+0x504>)
 800212e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002132:	4a07      	ldr	r2, [pc, #28]	@ (8002150 <HAL_RCC_OscConfig+0x504>)
 8002134:	f043 0304 	orr.w	r3, r3, #4
 8002138:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800213c:	4b04      	ldr	r3, [pc, #16]	@ (8002150 <HAL_RCC_OscConfig+0x504>)
 800213e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002142:	4a03      	ldr	r2, [pc, #12]	@ (8002150 <HAL_RCC_OscConfig+0x504>)
 8002144:	f043 0301 	orr.w	r3, r3, #1
 8002148:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800214c:	e014      	b.n	8002178 <HAL_RCC_OscConfig+0x52c>
 800214e:	bf00      	nop
 8002150:	40021000 	.word	0x40021000
 8002154:	40007000 	.word	0x40007000
 8002158:	4b9a      	ldr	r3, [pc, #616]	@ (80023c4 <HAL_RCC_OscConfig+0x778>)
 800215a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800215e:	4a99      	ldr	r2, [pc, #612]	@ (80023c4 <HAL_RCC_OscConfig+0x778>)
 8002160:	f023 0301 	bic.w	r3, r3, #1
 8002164:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002168:	4b96      	ldr	r3, [pc, #600]	@ (80023c4 <HAL_RCC_OscConfig+0x778>)
 800216a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800216e:	4a95      	ldr	r2, [pc, #596]	@ (80023c4 <HAL_RCC_OscConfig+0x778>)
 8002170:	f023 0304 	bic.w	r3, r3, #4
 8002174:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d016      	beq.n	80021ae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002180:	f7ff fa2c 	bl	80015dc <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002186:	e00a      	b.n	800219e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002188:	f7ff fa28 	bl	80015dc <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002196:	4293      	cmp	r3, r2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e162      	b.n	8002464 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800219e:	4b89      	ldr	r3, [pc, #548]	@ (80023c4 <HAL_RCC_OscConfig+0x778>)
 80021a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d0ed      	beq.n	8002188 <HAL_RCC_OscConfig+0x53c>
 80021ac:	e015      	b.n	80021da <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ae:	f7ff fa15 	bl	80015dc <HAL_GetTick>
 80021b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021b4:	e00a      	b.n	80021cc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021b6:	f7ff fa11 	bl	80015dc <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e14b      	b.n	8002464 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021cc:	4b7d      	ldr	r3, [pc, #500]	@ (80023c4 <HAL_RCC_OscConfig+0x778>)
 80021ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1ed      	bne.n	80021b6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021da:	7ffb      	ldrb	r3, [r7, #31]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d105      	bne.n	80021ec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021e0:	4b78      	ldr	r3, [pc, #480]	@ (80023c4 <HAL_RCC_OscConfig+0x778>)
 80021e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021e4:	4a77      	ldr	r2, [pc, #476]	@ (80023c4 <HAL_RCC_OscConfig+0x778>)
 80021e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021ea:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0320 	and.w	r3, r3, #32
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d03c      	beq.n	8002272 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d01c      	beq.n	800223a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002200:	4b70      	ldr	r3, [pc, #448]	@ (80023c4 <HAL_RCC_OscConfig+0x778>)
 8002202:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002206:	4a6f      	ldr	r2, [pc, #444]	@ (80023c4 <HAL_RCC_OscConfig+0x778>)
 8002208:	f043 0301 	orr.w	r3, r3, #1
 800220c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002210:	f7ff f9e4 	bl	80015dc <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002218:	f7ff f9e0 	bl	80015dc <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e11c      	b.n	8002464 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800222a:	4b66      	ldr	r3, [pc, #408]	@ (80023c4 <HAL_RCC_OscConfig+0x778>)
 800222c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d0ef      	beq.n	8002218 <HAL_RCC_OscConfig+0x5cc>
 8002238:	e01b      	b.n	8002272 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800223a:	4b62      	ldr	r3, [pc, #392]	@ (80023c4 <HAL_RCC_OscConfig+0x778>)
 800223c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002240:	4a60      	ldr	r2, [pc, #384]	@ (80023c4 <HAL_RCC_OscConfig+0x778>)
 8002242:	f023 0301 	bic.w	r3, r3, #1
 8002246:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800224a:	f7ff f9c7 	bl	80015dc <HAL_GetTick>
 800224e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002250:	e008      	b.n	8002264 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002252:	f7ff f9c3 	bl	80015dc <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d901      	bls.n	8002264 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e0ff      	b.n	8002464 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002264:	4b57      	ldr	r3, [pc, #348]	@ (80023c4 <HAL_RCC_OscConfig+0x778>)
 8002266:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1ef      	bne.n	8002252 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002276:	2b00      	cmp	r3, #0
 8002278:	f000 80f3 	beq.w	8002462 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002280:	2b02      	cmp	r3, #2
 8002282:	f040 80c9 	bne.w	8002418 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002286:	4b4f      	ldr	r3, [pc, #316]	@ (80023c4 <HAL_RCC_OscConfig+0x778>)
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	f003 0203 	and.w	r2, r3, #3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002296:	429a      	cmp	r2, r3
 8002298:	d12c      	bne.n	80022f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a4:	3b01      	subs	r3, #1
 80022a6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d123      	bne.n	80022f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022b6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d11b      	bne.n	80022f4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022c6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d113      	bne.n	80022f4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022d6:	085b      	lsrs	r3, r3, #1
 80022d8:	3b01      	subs	r3, #1
 80022da:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022dc:	429a      	cmp	r2, r3
 80022de:	d109      	bne.n	80022f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ea:	085b      	lsrs	r3, r3, #1
 80022ec:	3b01      	subs	r3, #1
 80022ee:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d06b      	beq.n	80023cc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	2b0c      	cmp	r3, #12
 80022f8:	d062      	beq.n	80023c0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80022fa:	4b32      	ldr	r3, [pc, #200]	@ (80023c4 <HAL_RCC_OscConfig+0x778>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e0ac      	b.n	8002464 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800230a:	4b2e      	ldr	r3, [pc, #184]	@ (80023c4 <HAL_RCC_OscConfig+0x778>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a2d      	ldr	r2, [pc, #180]	@ (80023c4 <HAL_RCC_OscConfig+0x778>)
 8002310:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002314:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002316:	f7ff f961 	bl	80015dc <HAL_GetTick>
 800231a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800231c:	e008      	b.n	8002330 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800231e:	f7ff f95d 	bl	80015dc <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e099      	b.n	8002464 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002330:	4b24      	ldr	r3, [pc, #144]	@ (80023c4 <HAL_RCC_OscConfig+0x778>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d1f0      	bne.n	800231e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800233c:	4b21      	ldr	r3, [pc, #132]	@ (80023c4 <HAL_RCC_OscConfig+0x778>)
 800233e:	68da      	ldr	r2, [r3, #12]
 8002340:	4b21      	ldr	r3, [pc, #132]	@ (80023c8 <HAL_RCC_OscConfig+0x77c>)
 8002342:	4013      	ands	r3, r2
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800234c:	3a01      	subs	r2, #1
 800234e:	0112      	lsls	r2, r2, #4
 8002350:	4311      	orrs	r1, r2
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002356:	0212      	lsls	r2, r2, #8
 8002358:	4311      	orrs	r1, r2
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800235e:	0852      	lsrs	r2, r2, #1
 8002360:	3a01      	subs	r2, #1
 8002362:	0552      	lsls	r2, r2, #21
 8002364:	4311      	orrs	r1, r2
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800236a:	0852      	lsrs	r2, r2, #1
 800236c:	3a01      	subs	r2, #1
 800236e:	0652      	lsls	r2, r2, #25
 8002370:	4311      	orrs	r1, r2
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002376:	06d2      	lsls	r2, r2, #27
 8002378:	430a      	orrs	r2, r1
 800237a:	4912      	ldr	r1, [pc, #72]	@ (80023c4 <HAL_RCC_OscConfig+0x778>)
 800237c:	4313      	orrs	r3, r2
 800237e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002380:	4b10      	ldr	r3, [pc, #64]	@ (80023c4 <HAL_RCC_OscConfig+0x778>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a0f      	ldr	r2, [pc, #60]	@ (80023c4 <HAL_RCC_OscConfig+0x778>)
 8002386:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800238a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800238c:	4b0d      	ldr	r3, [pc, #52]	@ (80023c4 <HAL_RCC_OscConfig+0x778>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	4a0c      	ldr	r2, [pc, #48]	@ (80023c4 <HAL_RCC_OscConfig+0x778>)
 8002392:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002396:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002398:	f7ff f920 	bl	80015dc <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023a0:	f7ff f91c 	bl	80015dc <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e058      	b.n	8002464 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023b2:	4b04      	ldr	r3, [pc, #16]	@ (80023c4 <HAL_RCC_OscConfig+0x778>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d0f0      	beq.n	80023a0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023be:	e050      	b.n	8002462 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e04f      	b.n	8002464 <HAL_RCC_OscConfig+0x818>
 80023c4:	40021000 	.word	0x40021000
 80023c8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023cc:	4b27      	ldr	r3, [pc, #156]	@ (800246c <HAL_RCC_OscConfig+0x820>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d144      	bne.n	8002462 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80023d8:	4b24      	ldr	r3, [pc, #144]	@ (800246c <HAL_RCC_OscConfig+0x820>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a23      	ldr	r2, [pc, #140]	@ (800246c <HAL_RCC_OscConfig+0x820>)
 80023de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023e2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023e4:	4b21      	ldr	r3, [pc, #132]	@ (800246c <HAL_RCC_OscConfig+0x820>)
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	4a20      	ldr	r2, [pc, #128]	@ (800246c <HAL_RCC_OscConfig+0x820>)
 80023ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023ee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80023f0:	f7ff f8f4 	bl	80015dc <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023f8:	f7ff f8f0 	bl	80015dc <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b02      	cmp	r3, #2
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e02c      	b.n	8002464 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800240a:	4b18      	ldr	r3, [pc, #96]	@ (800246c <HAL_RCC_OscConfig+0x820>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0f0      	beq.n	80023f8 <HAL_RCC_OscConfig+0x7ac>
 8002416:	e024      	b.n	8002462 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	2b0c      	cmp	r3, #12
 800241c:	d01f      	beq.n	800245e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800241e:	4b13      	ldr	r3, [pc, #76]	@ (800246c <HAL_RCC_OscConfig+0x820>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a12      	ldr	r2, [pc, #72]	@ (800246c <HAL_RCC_OscConfig+0x820>)
 8002424:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002428:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800242a:	f7ff f8d7 	bl	80015dc <HAL_GetTick>
 800242e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002430:	e008      	b.n	8002444 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002432:	f7ff f8d3 	bl	80015dc <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b02      	cmp	r3, #2
 800243e:	d901      	bls.n	8002444 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e00f      	b.n	8002464 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002444:	4b09      	ldr	r3, [pc, #36]	@ (800246c <HAL_RCC_OscConfig+0x820>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d1f0      	bne.n	8002432 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002450:	4b06      	ldr	r3, [pc, #24]	@ (800246c <HAL_RCC_OscConfig+0x820>)
 8002452:	68da      	ldr	r2, [r3, #12]
 8002454:	4905      	ldr	r1, [pc, #20]	@ (800246c <HAL_RCC_OscConfig+0x820>)
 8002456:	4b06      	ldr	r3, [pc, #24]	@ (8002470 <HAL_RCC_OscConfig+0x824>)
 8002458:	4013      	ands	r3, r2
 800245a:	60cb      	str	r3, [r1, #12]
 800245c:	e001      	b.n	8002462 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e000      	b.n	8002464 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	3720      	adds	r7, #32
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	40021000 	.word	0x40021000
 8002470:	feeefffc 	.word	0xfeeefffc

08002474 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d101      	bne.n	8002488 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e0e7      	b.n	8002658 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002488:	4b75      	ldr	r3, [pc, #468]	@ (8002660 <HAL_RCC_ClockConfig+0x1ec>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0307 	and.w	r3, r3, #7
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	429a      	cmp	r2, r3
 8002494:	d910      	bls.n	80024b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002496:	4b72      	ldr	r3, [pc, #456]	@ (8002660 <HAL_RCC_ClockConfig+0x1ec>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f023 0207 	bic.w	r2, r3, #7
 800249e:	4970      	ldr	r1, [pc, #448]	@ (8002660 <HAL_RCC_ClockConfig+0x1ec>)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024a6:	4b6e      	ldr	r3, [pc, #440]	@ (8002660 <HAL_RCC_ClockConfig+0x1ec>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0307 	and.w	r3, r3, #7
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d001      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e0cf      	b.n	8002658 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d010      	beq.n	80024e6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689a      	ldr	r2, [r3, #8]
 80024c8:	4b66      	ldr	r3, [pc, #408]	@ (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d908      	bls.n	80024e6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024d4:	4b63      	ldr	r3, [pc, #396]	@ (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	4960      	ldr	r1, [pc, #384]	@ (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d04c      	beq.n	800258c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	2b03      	cmp	r3, #3
 80024f8:	d107      	bne.n	800250a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024fa:	4b5a      	ldr	r3, [pc, #360]	@ (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d121      	bne.n	800254a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e0a6      	b.n	8002658 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2b02      	cmp	r3, #2
 8002510:	d107      	bne.n	8002522 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002512:	4b54      	ldr	r3, [pc, #336]	@ (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d115      	bne.n	800254a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e09a      	b.n	8002658 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d107      	bne.n	800253a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800252a:	4b4e      	ldr	r3, [pc, #312]	@ (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d109      	bne.n	800254a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e08e      	b.n	8002658 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800253a:	4b4a      	ldr	r3, [pc, #296]	@ (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e086      	b.n	8002658 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800254a:	4b46      	ldr	r3, [pc, #280]	@ (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f023 0203 	bic.w	r2, r3, #3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	4943      	ldr	r1, [pc, #268]	@ (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 8002558:	4313      	orrs	r3, r2
 800255a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800255c:	f7ff f83e 	bl	80015dc <HAL_GetTick>
 8002560:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002562:	e00a      	b.n	800257a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002564:	f7ff f83a 	bl	80015dc <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002572:	4293      	cmp	r3, r2
 8002574:	d901      	bls.n	800257a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e06e      	b.n	8002658 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800257a:	4b3a      	ldr	r3, [pc, #232]	@ (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f003 020c 	and.w	r2, r3, #12
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	429a      	cmp	r2, r3
 800258a:	d1eb      	bne.n	8002564 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d010      	beq.n	80025ba <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	4b31      	ldr	r3, [pc, #196]	@ (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d208      	bcs.n	80025ba <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025a8:	4b2e      	ldr	r3, [pc, #184]	@ (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	492b      	ldr	r1, [pc, #172]	@ (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025ba:	4b29      	ldr	r3, [pc, #164]	@ (8002660 <HAL_RCC_ClockConfig+0x1ec>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0307 	and.w	r3, r3, #7
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d210      	bcs.n	80025ea <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025c8:	4b25      	ldr	r3, [pc, #148]	@ (8002660 <HAL_RCC_ClockConfig+0x1ec>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f023 0207 	bic.w	r2, r3, #7
 80025d0:	4923      	ldr	r1, [pc, #140]	@ (8002660 <HAL_RCC_ClockConfig+0x1ec>)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025d8:	4b21      	ldr	r3, [pc, #132]	@ (8002660 <HAL_RCC_ClockConfig+0x1ec>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d001      	beq.n	80025ea <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e036      	b.n	8002658 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0304 	and.w	r3, r3, #4
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d008      	beq.n	8002608 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	4918      	ldr	r1, [pc, #96]	@ (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 8002604:	4313      	orrs	r3, r2
 8002606:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0308 	and.w	r3, r3, #8
 8002610:	2b00      	cmp	r3, #0
 8002612:	d009      	beq.n	8002628 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002614:	4b13      	ldr	r3, [pc, #76]	@ (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	4910      	ldr	r1, [pc, #64]	@ (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 8002624:	4313      	orrs	r3, r2
 8002626:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002628:	f000 f824 	bl	8002674 <HAL_RCC_GetSysClockFreq>
 800262c:	4602      	mov	r2, r0
 800262e:	4b0d      	ldr	r3, [pc, #52]	@ (8002664 <HAL_RCC_ClockConfig+0x1f0>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	091b      	lsrs	r3, r3, #4
 8002634:	f003 030f 	and.w	r3, r3, #15
 8002638:	490b      	ldr	r1, [pc, #44]	@ (8002668 <HAL_RCC_ClockConfig+0x1f4>)
 800263a:	5ccb      	ldrb	r3, [r1, r3]
 800263c:	f003 031f 	and.w	r3, r3, #31
 8002640:	fa22 f303 	lsr.w	r3, r2, r3
 8002644:	4a09      	ldr	r2, [pc, #36]	@ (800266c <HAL_RCC_ClockConfig+0x1f8>)
 8002646:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002648:	4b09      	ldr	r3, [pc, #36]	@ (8002670 <HAL_RCC_ClockConfig+0x1fc>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4618      	mov	r0, r3
 800264e:	f7fe ff75 	bl	800153c <HAL_InitTick>
 8002652:	4603      	mov	r3, r0
 8002654:	72fb      	strb	r3, [r7, #11]

  return status;
 8002656:	7afb      	ldrb	r3, [r7, #11]
}
 8002658:	4618      	mov	r0, r3
 800265a:	3710      	adds	r7, #16
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40022000 	.word	0x40022000
 8002664:	40021000 	.word	0x40021000
 8002668:	08004fd0 	.word	0x08004fd0
 800266c:	20000000 	.word	0x20000000
 8002670:	20000004 	.word	0x20000004

08002674 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002674:	b480      	push	{r7}
 8002676:	b089      	sub	sp, #36	@ 0x24
 8002678:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800267a:	2300      	movs	r3, #0
 800267c:	61fb      	str	r3, [r7, #28]
 800267e:	2300      	movs	r3, #0
 8002680:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002682:	4b3e      	ldr	r3, [pc, #248]	@ (800277c <HAL_RCC_GetSysClockFreq+0x108>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f003 030c 	and.w	r3, r3, #12
 800268a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800268c:	4b3b      	ldr	r3, [pc, #236]	@ (800277c <HAL_RCC_GetSysClockFreq+0x108>)
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	f003 0303 	and.w	r3, r3, #3
 8002694:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d005      	beq.n	80026a8 <HAL_RCC_GetSysClockFreq+0x34>
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	2b0c      	cmp	r3, #12
 80026a0:	d121      	bne.n	80026e6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d11e      	bne.n	80026e6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80026a8:	4b34      	ldr	r3, [pc, #208]	@ (800277c <HAL_RCC_GetSysClockFreq+0x108>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0308 	and.w	r3, r3, #8
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d107      	bne.n	80026c4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80026b4:	4b31      	ldr	r3, [pc, #196]	@ (800277c <HAL_RCC_GetSysClockFreq+0x108>)
 80026b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026ba:	0a1b      	lsrs	r3, r3, #8
 80026bc:	f003 030f 	and.w	r3, r3, #15
 80026c0:	61fb      	str	r3, [r7, #28]
 80026c2:	e005      	b.n	80026d0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80026c4:	4b2d      	ldr	r3, [pc, #180]	@ (800277c <HAL_RCC_GetSysClockFreq+0x108>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	091b      	lsrs	r3, r3, #4
 80026ca:	f003 030f 	and.w	r3, r3, #15
 80026ce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80026d0:	4a2b      	ldr	r2, [pc, #172]	@ (8002780 <HAL_RCC_GetSysClockFreq+0x10c>)
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026d8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10d      	bne.n	80026fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026e4:	e00a      	b.n	80026fc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	2b04      	cmp	r3, #4
 80026ea:	d102      	bne.n	80026f2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80026ec:	4b25      	ldr	r3, [pc, #148]	@ (8002784 <HAL_RCC_GetSysClockFreq+0x110>)
 80026ee:	61bb      	str	r3, [r7, #24]
 80026f0:	e004      	b.n	80026fc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	2b08      	cmp	r3, #8
 80026f6:	d101      	bne.n	80026fc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80026f8:	4b23      	ldr	r3, [pc, #140]	@ (8002788 <HAL_RCC_GetSysClockFreq+0x114>)
 80026fa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	2b0c      	cmp	r3, #12
 8002700:	d134      	bne.n	800276c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002702:	4b1e      	ldr	r3, [pc, #120]	@ (800277c <HAL_RCC_GetSysClockFreq+0x108>)
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	2b02      	cmp	r3, #2
 8002710:	d003      	beq.n	800271a <HAL_RCC_GetSysClockFreq+0xa6>
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	2b03      	cmp	r3, #3
 8002716:	d003      	beq.n	8002720 <HAL_RCC_GetSysClockFreq+0xac>
 8002718:	e005      	b.n	8002726 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800271a:	4b1a      	ldr	r3, [pc, #104]	@ (8002784 <HAL_RCC_GetSysClockFreq+0x110>)
 800271c:	617b      	str	r3, [r7, #20]
      break;
 800271e:	e005      	b.n	800272c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002720:	4b19      	ldr	r3, [pc, #100]	@ (8002788 <HAL_RCC_GetSysClockFreq+0x114>)
 8002722:	617b      	str	r3, [r7, #20]
      break;
 8002724:	e002      	b.n	800272c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	617b      	str	r3, [r7, #20]
      break;
 800272a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800272c:	4b13      	ldr	r3, [pc, #76]	@ (800277c <HAL_RCC_GetSysClockFreq+0x108>)
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	091b      	lsrs	r3, r3, #4
 8002732:	f003 0307 	and.w	r3, r3, #7
 8002736:	3301      	adds	r3, #1
 8002738:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800273a:	4b10      	ldr	r3, [pc, #64]	@ (800277c <HAL_RCC_GetSysClockFreq+0x108>)
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	0a1b      	lsrs	r3, r3, #8
 8002740:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002744:	697a      	ldr	r2, [r7, #20]
 8002746:	fb03 f202 	mul.w	r2, r3, r2
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002750:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002752:	4b0a      	ldr	r3, [pc, #40]	@ (800277c <HAL_RCC_GetSysClockFreq+0x108>)
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	0e5b      	lsrs	r3, r3, #25
 8002758:	f003 0303 	and.w	r3, r3, #3
 800275c:	3301      	adds	r3, #1
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002762:	697a      	ldr	r2, [r7, #20]
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	fbb2 f3f3 	udiv	r3, r2, r3
 800276a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800276c:	69bb      	ldr	r3, [r7, #24]
}
 800276e:	4618      	mov	r0, r3
 8002770:	3724      	adds	r7, #36	@ 0x24
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	40021000 	.word	0x40021000
 8002780:	08004fe8 	.word	0x08004fe8
 8002784:	00f42400 	.word	0x00f42400
 8002788:	007a1200 	.word	0x007a1200

0800278c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002790:	4b03      	ldr	r3, [pc, #12]	@ (80027a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002792:	681b      	ldr	r3, [r3, #0]
}
 8002794:	4618      	mov	r0, r3
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	20000000 	.word	0x20000000

080027a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80027a8:	f7ff fff0 	bl	800278c <HAL_RCC_GetHCLKFreq>
 80027ac:	4602      	mov	r2, r0
 80027ae:	4b06      	ldr	r3, [pc, #24]	@ (80027c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	0a1b      	lsrs	r3, r3, #8
 80027b4:	f003 0307 	and.w	r3, r3, #7
 80027b8:	4904      	ldr	r1, [pc, #16]	@ (80027cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80027ba:	5ccb      	ldrb	r3, [r1, r3]
 80027bc:	f003 031f 	and.w	r3, r3, #31
 80027c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	40021000 	.word	0x40021000
 80027cc:	08004fe0 	.word	0x08004fe0

080027d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80027d4:	f7ff ffda 	bl	800278c <HAL_RCC_GetHCLKFreq>
 80027d8:	4602      	mov	r2, r0
 80027da:	4b06      	ldr	r3, [pc, #24]	@ (80027f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	0adb      	lsrs	r3, r3, #11
 80027e0:	f003 0307 	and.w	r3, r3, #7
 80027e4:	4904      	ldr	r1, [pc, #16]	@ (80027f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80027e6:	5ccb      	ldrb	r3, [r1, r3]
 80027e8:	f003 031f 	and.w	r3, r3, #31
 80027ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	40021000 	.word	0x40021000
 80027f8:	08004fe0 	.word	0x08004fe0

080027fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b086      	sub	sp, #24
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002804:	2300      	movs	r3, #0
 8002806:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002808:	4b2a      	ldr	r3, [pc, #168]	@ (80028b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800280a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800280c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d003      	beq.n	800281c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002814:	f7ff f9b6 	bl	8001b84 <HAL_PWREx_GetVoltageRange>
 8002818:	6178      	str	r0, [r7, #20]
 800281a:	e014      	b.n	8002846 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800281c:	4b25      	ldr	r3, [pc, #148]	@ (80028b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800281e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002820:	4a24      	ldr	r2, [pc, #144]	@ (80028b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002822:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002826:	6593      	str	r3, [r2, #88]	@ 0x58
 8002828:	4b22      	ldr	r3, [pc, #136]	@ (80028b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800282a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800282c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002834:	f7ff f9a6 	bl	8001b84 <HAL_PWREx_GetVoltageRange>
 8002838:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800283a:	4b1e      	ldr	r3, [pc, #120]	@ (80028b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800283c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800283e:	4a1d      	ldr	r2, [pc, #116]	@ (80028b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002840:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002844:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800284c:	d10b      	bne.n	8002866 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2b80      	cmp	r3, #128	@ 0x80
 8002852:	d919      	bls.n	8002888 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2ba0      	cmp	r3, #160	@ 0xa0
 8002858:	d902      	bls.n	8002860 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800285a:	2302      	movs	r3, #2
 800285c:	613b      	str	r3, [r7, #16]
 800285e:	e013      	b.n	8002888 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002860:	2301      	movs	r3, #1
 8002862:	613b      	str	r3, [r7, #16]
 8002864:	e010      	b.n	8002888 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2b80      	cmp	r3, #128	@ 0x80
 800286a:	d902      	bls.n	8002872 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800286c:	2303      	movs	r3, #3
 800286e:	613b      	str	r3, [r7, #16]
 8002870:	e00a      	b.n	8002888 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b80      	cmp	r3, #128	@ 0x80
 8002876:	d102      	bne.n	800287e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002878:	2302      	movs	r3, #2
 800287a:	613b      	str	r3, [r7, #16]
 800287c:	e004      	b.n	8002888 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2b70      	cmp	r3, #112	@ 0x70
 8002882:	d101      	bne.n	8002888 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002884:	2301      	movs	r3, #1
 8002886:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002888:	4b0b      	ldr	r3, [pc, #44]	@ (80028b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f023 0207 	bic.w	r2, r3, #7
 8002890:	4909      	ldr	r1, [pc, #36]	@ (80028b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	4313      	orrs	r3, r2
 8002896:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002898:	4b07      	ldr	r3, [pc, #28]	@ (80028b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d001      	beq.n	80028aa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e000      	b.n	80028ac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3718      	adds	r7, #24
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40021000 	.word	0x40021000
 80028b8:	40022000 	.word	0x40022000

080028bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028c4:	2300      	movs	r3, #0
 80028c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028c8:	2300      	movs	r3, #0
 80028ca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d031      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028dc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80028e0:	d01a      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80028e2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80028e6:	d814      	bhi.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d009      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80028ec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80028f0:	d10f      	bne.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80028f2:	4b5d      	ldr	r3, [pc, #372]	@ (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	4a5c      	ldr	r2, [pc, #368]	@ (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028fc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028fe:	e00c      	b.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	3304      	adds	r3, #4
 8002904:	2100      	movs	r1, #0
 8002906:	4618      	mov	r0, r3
 8002908:	f000 f9de 	bl	8002cc8 <RCCEx_PLLSAI1_Config>
 800290c:	4603      	mov	r3, r0
 800290e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002910:	e003      	b.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	74fb      	strb	r3, [r7, #19]
      break;
 8002916:	e000      	b.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002918:	bf00      	nop
    }

    if(ret == HAL_OK)
 800291a:	7cfb      	ldrb	r3, [r7, #19]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d10b      	bne.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002920:	4b51      	ldr	r3, [pc, #324]	@ (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002926:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800292e:	494e      	ldr	r1, [pc, #312]	@ (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002930:	4313      	orrs	r3, r2
 8002932:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002936:	e001      	b.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002938:	7cfb      	ldrb	r3, [r7, #19]
 800293a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002944:	2b00      	cmp	r3, #0
 8002946:	f000 809e 	beq.w	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800294a:	2300      	movs	r3, #0
 800294c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800294e:	4b46      	ldr	r3, [pc, #280]	@ (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002952:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800295a:	2301      	movs	r3, #1
 800295c:	e000      	b.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800295e:	2300      	movs	r3, #0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00d      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002964:	4b40      	ldr	r3, [pc, #256]	@ (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002966:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002968:	4a3f      	ldr	r2, [pc, #252]	@ (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800296a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800296e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002970:	4b3d      	ldr	r3, [pc, #244]	@ (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002972:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002974:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002978:	60bb      	str	r3, [r7, #8]
 800297a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800297c:	2301      	movs	r3, #1
 800297e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002980:	4b3a      	ldr	r3, [pc, #232]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a39      	ldr	r2, [pc, #228]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002986:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800298a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800298c:	f7fe fe26 	bl	80015dc <HAL_GetTick>
 8002990:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002992:	e009      	b.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002994:	f7fe fe22 	bl	80015dc <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d902      	bls.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	74fb      	strb	r3, [r7, #19]
        break;
 80029a6:	e005      	b.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80029a8:	4b30      	ldr	r3, [pc, #192]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d0ef      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80029b4:	7cfb      	ldrb	r3, [r7, #19]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d15a      	bne.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80029ba:	4b2b      	ldr	r3, [pc, #172]	@ (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029c4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d01e      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029d0:	697a      	ldr	r2, [r7, #20]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d019      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80029d6:	4b24      	ldr	r3, [pc, #144]	@ (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029e0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029e2:	4b21      	ldr	r3, [pc, #132]	@ (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029e8:	4a1f      	ldr	r2, [pc, #124]	@ (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029f2:	4b1d      	ldr	r3, [pc, #116]	@ (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029f8:	4a1b      	ldr	r2, [pc, #108]	@ (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a02:	4a19      	ldr	r2, [pc, #100]	@ (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d016      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a14:	f7fe fde2 	bl	80015dc <HAL_GetTick>
 8002a18:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a1a:	e00b      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a1c:	f7fe fdde 	bl	80015dc <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d902      	bls.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	74fb      	strb	r3, [r7, #19]
            break;
 8002a32:	e006      	b.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a34:	4b0c      	ldr	r3, [pc, #48]	@ (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d0ec      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002a42:	7cfb      	ldrb	r3, [r7, #19]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d10b      	bne.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a48:	4b07      	ldr	r3, [pc, #28]	@ (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a4e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a56:	4904      	ldr	r1, [pc, #16]	@ (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002a5e:	e009      	b.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a60:	7cfb      	ldrb	r3, [r7, #19]
 8002a62:	74bb      	strb	r3, [r7, #18]
 8002a64:	e006      	b.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002a66:	bf00      	nop
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a70:	7cfb      	ldrb	r3, [r7, #19]
 8002a72:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a74:	7c7b      	ldrb	r3, [r7, #17]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d105      	bne.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a7a:	4b8a      	ldr	r3, [pc, #552]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a7e:	4a89      	ldr	r2, [pc, #548]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a84:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00a      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a92:	4b84      	ldr	r3, [pc, #528]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a98:	f023 0203 	bic.w	r2, r3, #3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	4980      	ldr	r1, [pc, #512]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d00a      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ab4:	4b7b      	ldr	r3, [pc, #492]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aba:	f023 020c 	bic.w	r2, r3, #12
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac2:	4978      	ldr	r1, [pc, #480]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0320 	and.w	r3, r3, #32
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d00a      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ad6:	4b73      	ldr	r3, [pc, #460]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002adc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ae4:	496f      	ldr	r1, [pc, #444]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d00a      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002af8:	4b6a      	ldr	r3, [pc, #424]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002afe:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b06:	4967      	ldr	r1, [pc, #412]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00a      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b1a:	4b62      	ldr	r3, [pc, #392]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b20:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b28:	495e      	ldr	r1, [pc, #376]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00a      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b3c:	4b59      	ldr	r3, [pc, #356]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b42:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b4a:	4956      	ldr	r1, [pc, #344]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00a      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b5e:	4b51      	ldr	r3, [pc, #324]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b64:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b6c:	494d      	ldr	r1, [pc, #308]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d028      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b80:	4b48      	ldr	r3, [pc, #288]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b86:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8e:	4945      	ldr	r1, [pc, #276]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b9e:	d106      	bne.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ba0:	4b40      	ldr	r3, [pc, #256]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	4a3f      	ldr	r2, [pc, #252]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ba6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002baa:	60d3      	str	r3, [r2, #12]
 8002bac:	e011      	b.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002bb6:	d10c      	bne.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	3304      	adds	r3, #4
 8002bbc:	2101      	movs	r1, #1
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f000 f882 	bl	8002cc8 <RCCEx_PLLSAI1_Config>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002bc8:	7cfb      	ldrb	r3, [r7, #19]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002bce:	7cfb      	ldrb	r3, [r7, #19]
 8002bd0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d028      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002bde:	4b31      	ldr	r3, [pc, #196]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002be4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bec:	492d      	ldr	r1, [pc, #180]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bf8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002bfc:	d106      	bne.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bfe:	4b29      	ldr	r3, [pc, #164]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	4a28      	ldr	r2, [pc, #160]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c04:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c08:	60d3      	str	r3, [r2, #12]
 8002c0a:	e011      	b.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c10:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002c14:	d10c      	bne.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	3304      	adds	r3, #4
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f000 f853 	bl	8002cc8 <RCCEx_PLLSAI1_Config>
 8002c22:	4603      	mov	r3, r0
 8002c24:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c26:	7cfb      	ldrb	r3, [r7, #19]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002c2c:	7cfb      	ldrb	r3, [r7, #19]
 8002c2e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d01c      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c3c:	4b19      	ldr	r3, [pc, #100]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c42:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c4a:	4916      	ldr	r1, [pc, #88]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c5a:	d10c      	bne.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	3304      	adds	r3, #4
 8002c60:	2102      	movs	r1, #2
 8002c62:	4618      	mov	r0, r3
 8002c64:	f000 f830 	bl	8002cc8 <RCCEx_PLLSAI1_Config>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c6c:	7cfb      	ldrb	r3, [r7, #19]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002c72:	7cfb      	ldrb	r3, [r7, #19]
 8002c74:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00a      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002c82:	4b08      	ldr	r3, [pc, #32]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c88:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c90:	4904      	ldr	r1, [pc, #16]	@ (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002c98:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3718      	adds	r7, #24
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	40021000 	.word	0x40021000

08002ca8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002cac:	4b05      	ldr	r3, [pc, #20]	@ (8002cc4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a04      	ldr	r2, [pc, #16]	@ (8002cc4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002cb2:	f043 0304 	orr.w	r3, r3, #4
 8002cb6:	6013      	str	r3, [r2, #0]
}
 8002cb8:	bf00      	nop
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	40021000 	.word	0x40021000

08002cc8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002cd6:	4b74      	ldr	r3, [pc, #464]	@ (8002ea8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	f003 0303 	and.w	r3, r3, #3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d018      	beq.n	8002d14 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002ce2:	4b71      	ldr	r3, [pc, #452]	@ (8002ea8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	f003 0203 	and.w	r2, r3, #3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d10d      	bne.n	8002d0e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
       ||
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d009      	beq.n	8002d0e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002cfa:	4b6b      	ldr	r3, [pc, #428]	@ (8002ea8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	091b      	lsrs	r3, r3, #4
 8002d00:	f003 0307 	and.w	r3, r3, #7
 8002d04:	1c5a      	adds	r2, r3, #1
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
       ||
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d047      	beq.n	8002d9e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	73fb      	strb	r3, [r7, #15]
 8002d12:	e044      	b.n	8002d9e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2b03      	cmp	r3, #3
 8002d1a:	d018      	beq.n	8002d4e <RCCEx_PLLSAI1_Config+0x86>
 8002d1c:	2b03      	cmp	r3, #3
 8002d1e:	d825      	bhi.n	8002d6c <RCCEx_PLLSAI1_Config+0xa4>
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d002      	beq.n	8002d2a <RCCEx_PLLSAI1_Config+0x62>
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d009      	beq.n	8002d3c <RCCEx_PLLSAI1_Config+0x74>
 8002d28:	e020      	b.n	8002d6c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d2a:	4b5f      	ldr	r3, [pc, #380]	@ (8002ea8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d11d      	bne.n	8002d72 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d3a:	e01a      	b.n	8002d72 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d3c:	4b5a      	ldr	r3, [pc, #360]	@ (8002ea8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d116      	bne.n	8002d76 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d4c:	e013      	b.n	8002d76 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d4e:	4b56      	ldr	r3, [pc, #344]	@ (8002ea8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d10f      	bne.n	8002d7a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d5a:	4b53      	ldr	r3, [pc, #332]	@ (8002ea8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d109      	bne.n	8002d7a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d6a:	e006      	b.n	8002d7a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d70:	e004      	b.n	8002d7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d72:	bf00      	nop
 8002d74:	e002      	b.n	8002d7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d76:	bf00      	nop
 8002d78:	e000      	b.n	8002d7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d7a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d7c:	7bfb      	ldrb	r3, [r7, #15]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d10d      	bne.n	8002d9e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d82:	4b49      	ldr	r3, [pc, #292]	@ (8002ea8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6819      	ldr	r1, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	3b01      	subs	r3, #1
 8002d94:	011b      	lsls	r3, r3, #4
 8002d96:	430b      	orrs	r3, r1
 8002d98:	4943      	ldr	r1, [pc, #268]	@ (8002ea8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d9e:	7bfb      	ldrb	r3, [r7, #15]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d17c      	bne.n	8002e9e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002da4:	4b40      	ldr	r3, [pc, #256]	@ (8002ea8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a3f      	ldr	r2, [pc, #252]	@ (8002ea8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002daa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002dae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002db0:	f7fe fc14 	bl	80015dc <HAL_GetTick>
 8002db4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002db6:	e009      	b.n	8002dcc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002db8:	f7fe fc10 	bl	80015dc <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d902      	bls.n	8002dcc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	73fb      	strb	r3, [r7, #15]
        break;
 8002dca:	e005      	b.n	8002dd8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002dcc:	4b36      	ldr	r3, [pc, #216]	@ (8002ea8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1ef      	bne.n	8002db8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002dd8:	7bfb      	ldrb	r3, [r7, #15]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d15f      	bne.n	8002e9e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d110      	bne.n	8002e06 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002de4:	4b30      	ldr	r3, [pc, #192]	@ (8002ea8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002de6:	691b      	ldr	r3, [r3, #16]
 8002de8:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002dec:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	6892      	ldr	r2, [r2, #8]
 8002df4:	0211      	lsls	r1, r2, #8
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	68d2      	ldr	r2, [r2, #12]
 8002dfa:	06d2      	lsls	r2, r2, #27
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	492a      	ldr	r1, [pc, #168]	@ (8002ea8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	610b      	str	r3, [r1, #16]
 8002e04:	e027      	b.n	8002e56 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d112      	bne.n	8002e32 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e0c:	4b26      	ldr	r3, [pc, #152]	@ (8002ea8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002e14:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	6892      	ldr	r2, [r2, #8]
 8002e1c:	0211      	lsls	r1, r2, #8
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	6912      	ldr	r2, [r2, #16]
 8002e22:	0852      	lsrs	r2, r2, #1
 8002e24:	3a01      	subs	r2, #1
 8002e26:	0552      	lsls	r2, r2, #21
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	491f      	ldr	r1, [pc, #124]	@ (8002ea8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	610b      	str	r3, [r1, #16]
 8002e30:	e011      	b.n	8002e56 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e32:	4b1d      	ldr	r3, [pc, #116]	@ (8002ea8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002e3a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	6892      	ldr	r2, [r2, #8]
 8002e42:	0211      	lsls	r1, r2, #8
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	6952      	ldr	r2, [r2, #20]
 8002e48:	0852      	lsrs	r2, r2, #1
 8002e4a:	3a01      	subs	r2, #1
 8002e4c:	0652      	lsls	r2, r2, #25
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	4915      	ldr	r1, [pc, #84]	@ (8002ea8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002e56:	4b14      	ldr	r3, [pc, #80]	@ (8002ea8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a13      	ldr	r2, [pc, #76]	@ (8002ea8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e5c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002e60:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e62:	f7fe fbbb 	bl	80015dc <HAL_GetTick>
 8002e66:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e68:	e009      	b.n	8002e7e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e6a:	f7fe fbb7 	bl	80015dc <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d902      	bls.n	8002e7e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	73fb      	strb	r3, [r7, #15]
          break;
 8002e7c:	e005      	b.n	8002e8a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e7e:	4b0a      	ldr	r3, [pc, #40]	@ (8002ea8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d0ef      	beq.n	8002e6a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002e8a:	7bfb      	ldrb	r3, [r7, #15]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d106      	bne.n	8002e9e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002e90:	4b05      	ldr	r3, [pc, #20]	@ (8002ea8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e92:	691a      	ldr	r2, [r3, #16]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	4903      	ldr	r1, [pc, #12]	@ (8002ea8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3710      	adds	r7, #16
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	40021000 	.word	0x40021000

08002eac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e095      	b.n	8002fea <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d108      	bne.n	8002ed8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ece:	d009      	beq.n	8002ee4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	61da      	str	r2, [r3, #28]
 8002ed6:	e005      	b.n	8002ee4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d106      	bne.n	8002f04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f7fe f912 	bl	8001128 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2202      	movs	r2, #2
 8002f08:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f1a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002f24:	d902      	bls.n	8002f2c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002f26:	2300      	movs	r3, #0
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	e002      	b.n	8002f32 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002f2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f30:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002f3a:	d007      	beq.n	8002f4c <HAL_SPI_Init+0xa0>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002f44:	d002      	beq.n	8002f4c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002f5c:	431a      	orrs	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	431a      	orrs	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	695b      	ldr	r3, [r3, #20]
 8002f6c:	f003 0301 	and.w	r3, r3, #1
 8002f70:	431a      	orrs	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	69db      	ldr	r3, [r3, #28]
 8002f80:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f84:	431a      	orrs	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f8e:	ea42 0103 	orr.w	r1, r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f96:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	0c1b      	lsrs	r3, r3, #16
 8002fa8:	f003 0204 	and.w	r2, r3, #4
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb0:	f003 0310 	and.w	r3, r3, #16
 8002fb4:	431a      	orrs	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fba:	f003 0308 	and.w	r3, r3, #8
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002fc8:	ea42 0103 	orr.w	r1, r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b088      	sub	sp, #32
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	60f8      	str	r0, [r7, #12]
 8002ffa:	60b9      	str	r1, [r7, #8]
 8002ffc:	603b      	str	r3, [r7, #0]
 8002ffe:	4613      	mov	r3, r2
 8003000:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003002:	2300      	movs	r3, #0
 8003004:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800300c:	2b01      	cmp	r3, #1
 800300e:	d101      	bne.n	8003014 <HAL_SPI_Transmit+0x22>
 8003010:	2302      	movs	r3, #2
 8003012:	e15f      	b.n	80032d4 <HAL_SPI_Transmit+0x2e2>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800301c:	f7fe fade 	bl	80015dc <HAL_GetTick>
 8003020:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003022:	88fb      	ldrh	r3, [r7, #6]
 8003024:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b01      	cmp	r3, #1
 8003030:	d002      	beq.n	8003038 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003032:	2302      	movs	r3, #2
 8003034:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003036:	e148      	b.n	80032ca <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d002      	beq.n	8003044 <HAL_SPI_Transmit+0x52>
 800303e:	88fb      	ldrh	r3, [r7, #6]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d102      	bne.n	800304a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003048:	e13f      	b.n	80032ca <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2203      	movs	r2, #3
 800304e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	68ba      	ldr	r2, [r7, #8]
 800305c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	88fa      	ldrh	r2, [r7, #6]
 8003062:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	88fa      	ldrh	r2, [r7, #6]
 8003068:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003094:	d10f      	bne.n	80030b6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80030a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80030b4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030c0:	2b40      	cmp	r3, #64	@ 0x40
 80030c2:	d007      	beq.n	80030d4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80030d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80030dc:	d94f      	bls.n	800317e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d002      	beq.n	80030ec <HAL_SPI_Transmit+0xfa>
 80030e6:	8afb      	ldrh	r3, [r7, #22]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d142      	bne.n	8003172 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030f0:	881a      	ldrh	r2, [r3, #0]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030fc:	1c9a      	adds	r2, r3, #2
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003106:	b29b      	uxth	r3, r3
 8003108:	3b01      	subs	r3, #1
 800310a:	b29a      	uxth	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003110:	e02f      	b.n	8003172 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f003 0302 	and.w	r3, r3, #2
 800311c:	2b02      	cmp	r3, #2
 800311e:	d112      	bne.n	8003146 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003124:	881a      	ldrh	r2, [r3, #0]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003130:	1c9a      	adds	r2, r3, #2
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800313a:	b29b      	uxth	r3, r3
 800313c:	3b01      	subs	r3, #1
 800313e:	b29a      	uxth	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003144:	e015      	b.n	8003172 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003146:	f7fe fa49 	bl	80015dc <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	683a      	ldr	r2, [r7, #0]
 8003152:	429a      	cmp	r2, r3
 8003154:	d803      	bhi.n	800315e <HAL_SPI_Transmit+0x16c>
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800315c:	d102      	bne.n	8003164 <HAL_SPI_Transmit+0x172>
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d106      	bne.n	8003172 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003170:	e0ab      	b.n	80032ca <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003176:	b29b      	uxth	r3, r3
 8003178:	2b00      	cmp	r3, #0
 800317a:	d1ca      	bne.n	8003112 <HAL_SPI_Transmit+0x120>
 800317c:	e080      	b.n	8003280 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d002      	beq.n	800318c <HAL_SPI_Transmit+0x19a>
 8003186:	8afb      	ldrh	r3, [r7, #22]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d174      	bne.n	8003276 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003190:	b29b      	uxth	r3, r3
 8003192:	2b01      	cmp	r3, #1
 8003194:	d912      	bls.n	80031bc <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800319a:	881a      	ldrh	r2, [r3, #0]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031a6:	1c9a      	adds	r2, r3, #2
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	3b02      	subs	r3, #2
 80031b4:	b29a      	uxth	r2, r3
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80031ba:	e05c      	b.n	8003276 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	330c      	adds	r3, #12
 80031c6:	7812      	ldrb	r2, [r2, #0]
 80031c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031ce:	1c5a      	adds	r2, r3, #1
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031d8:	b29b      	uxth	r3, r3
 80031da:	3b01      	subs	r3, #1
 80031dc:	b29a      	uxth	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80031e2:	e048      	b.n	8003276 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d12b      	bne.n	800324a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d912      	bls.n	8003222 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003200:	881a      	ldrh	r2, [r3, #0]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800320c:	1c9a      	adds	r2, r3, #2
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003216:	b29b      	uxth	r3, r3
 8003218:	3b02      	subs	r3, #2
 800321a:	b29a      	uxth	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003220:	e029      	b.n	8003276 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	330c      	adds	r3, #12
 800322c:	7812      	ldrb	r2, [r2, #0]
 800322e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003234:	1c5a      	adds	r2, r3, #1
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800323e:	b29b      	uxth	r3, r3
 8003240:	3b01      	subs	r3, #1
 8003242:	b29a      	uxth	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003248:	e015      	b.n	8003276 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800324a:	f7fe f9c7 	bl	80015dc <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	683a      	ldr	r2, [r7, #0]
 8003256:	429a      	cmp	r2, r3
 8003258:	d803      	bhi.n	8003262 <HAL_SPI_Transmit+0x270>
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003260:	d102      	bne.n	8003268 <HAL_SPI_Transmit+0x276>
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d106      	bne.n	8003276 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003274:	e029      	b.n	80032ca <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800327a:	b29b      	uxth	r3, r3
 800327c:	2b00      	cmp	r3, #0
 800327e:	d1b1      	bne.n	80031e4 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	6839      	ldr	r1, [r7, #0]
 8003284:	68f8      	ldr	r0, [r7, #12]
 8003286:	f000 fb69 	bl	800395c <SPI_EndRxTxTransaction>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d002      	beq.n	8003296 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2220      	movs	r2, #32
 8003294:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d10a      	bne.n	80032b4 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800329e:	2300      	movs	r3, #0
 80032a0:	613b      	str	r3, [r7, #16]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	613b      	str	r3, [r7, #16]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	613b      	str	r3, [r7, #16]
 80032b2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d002      	beq.n	80032c2 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	77fb      	strb	r3, [r7, #31]
 80032c0:	e003      	b.n	80032ca <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80032d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3720      	adds	r7, #32
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b08a      	sub	sp, #40	@ 0x28
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
 80032e8:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80032ea:	2301      	movs	r3, #1
 80032ec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80032ee:	2300      	movs	r3, #0
 80032f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d101      	bne.n	8003302 <HAL_SPI_TransmitReceive+0x26>
 80032fe:	2302      	movs	r3, #2
 8003300:	e20a      	b.n	8003718 <HAL_SPI_TransmitReceive+0x43c>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2201      	movs	r2, #1
 8003306:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800330a:	f7fe f967 	bl	80015dc <HAL_GetTick>
 800330e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003316:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800331e:	887b      	ldrh	r3, [r7, #2]
 8003320:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003322:	887b      	ldrh	r3, [r7, #2]
 8003324:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003326:	7efb      	ldrb	r3, [r7, #27]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d00e      	beq.n	800334a <HAL_SPI_TransmitReceive+0x6e>
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003332:	d106      	bne.n	8003342 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d102      	bne.n	8003342 <HAL_SPI_TransmitReceive+0x66>
 800333c:	7efb      	ldrb	r3, [r7, #27]
 800333e:	2b04      	cmp	r3, #4
 8003340:	d003      	beq.n	800334a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003342:	2302      	movs	r3, #2
 8003344:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003348:	e1e0      	b.n	800370c <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d005      	beq.n	800335c <HAL_SPI_TransmitReceive+0x80>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d002      	beq.n	800335c <HAL_SPI_TransmitReceive+0x80>
 8003356:	887b      	ldrh	r3, [r7, #2]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d103      	bne.n	8003364 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003362:	e1d3      	b.n	800370c <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800336a:	b2db      	uxtb	r3, r3
 800336c:	2b04      	cmp	r3, #4
 800336e:	d003      	beq.n	8003378 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2205      	movs	r2, #5
 8003374:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	887a      	ldrh	r2, [r7, #2]
 8003388:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	887a      	ldrh	r2, [r7, #2]
 8003390:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	68ba      	ldr	r2, [r7, #8]
 8003398:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	887a      	ldrh	r2, [r7, #2]
 800339e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	887a      	ldrh	r2, [r7, #2]
 80033a4:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80033ba:	d802      	bhi.n	80033c2 <HAL_SPI_TransmitReceive+0xe6>
 80033bc:	8a3b      	ldrh	r3, [r7, #16]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d908      	bls.n	80033d4 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	685a      	ldr	r2, [r3, #4]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80033d0:	605a      	str	r2, [r3, #4]
 80033d2:	e007      	b.n	80033e4 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	685a      	ldr	r2, [r3, #4]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80033e2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033ee:	2b40      	cmp	r3, #64	@ 0x40
 80033f0:	d007      	beq.n	8003402 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003400:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800340a:	f240 8081 	bls.w	8003510 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d002      	beq.n	800341c <HAL_SPI_TransmitReceive+0x140>
 8003416:	8a7b      	ldrh	r3, [r7, #18]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d16d      	bne.n	80034f8 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003420:	881a      	ldrh	r2, [r3, #0]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800342c:	1c9a      	adds	r2, r3, #2
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003436:	b29b      	uxth	r3, r3
 8003438:	3b01      	subs	r3, #1
 800343a:	b29a      	uxth	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003440:	e05a      	b.n	80034f8 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b02      	cmp	r3, #2
 800344e:	d11b      	bne.n	8003488 <HAL_SPI_TransmitReceive+0x1ac>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003454:	b29b      	uxth	r3, r3
 8003456:	2b00      	cmp	r3, #0
 8003458:	d016      	beq.n	8003488 <HAL_SPI_TransmitReceive+0x1ac>
 800345a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800345c:	2b01      	cmp	r3, #1
 800345e:	d113      	bne.n	8003488 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003464:	881a      	ldrh	r2, [r3, #0]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003470:	1c9a      	adds	r2, r3, #2
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800347a:	b29b      	uxth	r3, r3
 800347c:	3b01      	subs	r3, #1
 800347e:	b29a      	uxth	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003484:	2300      	movs	r3, #0
 8003486:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b01      	cmp	r3, #1
 8003494:	d11c      	bne.n	80034d0 <HAL_SPI_TransmitReceive+0x1f4>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800349c:	b29b      	uxth	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d016      	beq.n	80034d0 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68da      	ldr	r2, [r3, #12]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ac:	b292      	uxth	r2, r2
 80034ae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b4:	1c9a      	adds	r2, r3, #2
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	3b01      	subs	r3, #1
 80034c4:	b29a      	uxth	r2, r3
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80034cc:	2301      	movs	r3, #1
 80034ce:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80034d0:	f7fe f884 	bl	80015dc <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034dc:	429a      	cmp	r2, r3
 80034de:	d80b      	bhi.n	80034f8 <HAL_SPI_TransmitReceive+0x21c>
 80034e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e6:	d007      	beq.n	80034f8 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2201      	movs	r2, #1
 80034f2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80034f6:	e109      	b.n	800370c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d19f      	bne.n	8003442 <HAL_SPI_TransmitReceive+0x166>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003508:	b29b      	uxth	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	d199      	bne.n	8003442 <HAL_SPI_TransmitReceive+0x166>
 800350e:	e0e3      	b.n	80036d8 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d003      	beq.n	8003520 <HAL_SPI_TransmitReceive+0x244>
 8003518:	8a7b      	ldrh	r3, [r7, #18]
 800351a:	2b01      	cmp	r3, #1
 800351c:	f040 80cf 	bne.w	80036be <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003524:	b29b      	uxth	r3, r3
 8003526:	2b01      	cmp	r3, #1
 8003528:	d912      	bls.n	8003550 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800352e:	881a      	ldrh	r2, [r3, #0]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800353a:	1c9a      	adds	r2, r3, #2
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003544:	b29b      	uxth	r3, r3
 8003546:	3b02      	subs	r3, #2
 8003548:	b29a      	uxth	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800354e:	e0b6      	b.n	80036be <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	330c      	adds	r3, #12
 800355a:	7812      	ldrb	r2, [r2, #0]
 800355c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003562:	1c5a      	adds	r2, r3, #1
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800356c:	b29b      	uxth	r3, r3
 800356e:	3b01      	subs	r3, #1
 8003570:	b29a      	uxth	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003576:	e0a2      	b.n	80036be <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b02      	cmp	r3, #2
 8003584:	d134      	bne.n	80035f0 <HAL_SPI_TransmitReceive+0x314>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800358a:	b29b      	uxth	r3, r3
 800358c:	2b00      	cmp	r3, #0
 800358e:	d02f      	beq.n	80035f0 <HAL_SPI_TransmitReceive+0x314>
 8003590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003592:	2b01      	cmp	r3, #1
 8003594:	d12c      	bne.n	80035f0 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800359a:	b29b      	uxth	r3, r3
 800359c:	2b01      	cmp	r3, #1
 800359e:	d912      	bls.n	80035c6 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035a4:	881a      	ldrh	r2, [r3, #0]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035b0:	1c9a      	adds	r2, r3, #2
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	3b02      	subs	r3, #2
 80035be:	b29a      	uxth	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80035c4:	e012      	b.n	80035ec <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	330c      	adds	r3, #12
 80035d0:	7812      	ldrb	r2, [r2, #0]
 80035d2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035d8:	1c5a      	adds	r2, r3, #1
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	3b01      	subs	r3, #1
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80035ec:	2300      	movs	r3, #0
 80035ee:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d148      	bne.n	8003690 <HAL_SPI_TransmitReceive+0x3b4>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003604:	b29b      	uxth	r3, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d042      	beq.n	8003690 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003610:	b29b      	uxth	r3, r3
 8003612:	2b01      	cmp	r3, #1
 8003614:	d923      	bls.n	800365e <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68da      	ldr	r2, [r3, #12]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003620:	b292      	uxth	r2, r2
 8003622:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003628:	1c9a      	adds	r2, r3, #2
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003634:	b29b      	uxth	r3, r3
 8003636:	3b02      	subs	r3, #2
 8003638:	b29a      	uxth	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003646:	b29b      	uxth	r3, r3
 8003648:	2b01      	cmp	r3, #1
 800364a:	d81f      	bhi.n	800368c <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	685a      	ldr	r2, [r3, #4]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800365a:	605a      	str	r2, [r3, #4]
 800365c:	e016      	b.n	800368c <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f103 020c 	add.w	r2, r3, #12
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800366a:	7812      	ldrb	r2, [r2, #0]
 800366c:	b2d2      	uxtb	r2, r2
 800366e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003674:	1c5a      	adds	r2, r3, #1
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003680:	b29b      	uxth	r3, r3
 8003682:	3b01      	subs	r3, #1
 8003684:	b29a      	uxth	r2, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800368c:	2301      	movs	r3, #1
 800368e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003690:	f7fd ffa4 	bl	80015dc <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800369c:	429a      	cmp	r2, r3
 800369e:	d803      	bhi.n	80036a8 <HAL_SPI_TransmitReceive+0x3cc>
 80036a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a6:	d102      	bne.n	80036ae <HAL_SPI_TransmitReceive+0x3d2>
 80036a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d107      	bne.n	80036be <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80036bc:	e026      	b.n	800370c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	f47f af57 	bne.w	8003578 <HAL_SPI_TransmitReceive+0x29c>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	f47f af50 	bne.w	8003578 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036d8:	69fa      	ldr	r2, [r7, #28]
 80036da:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	f000 f93d 	bl	800395c <SPI_EndRxTxTransaction>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d005      	beq.n	80036f4 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2220      	movs	r2, #32
 80036f2:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d003      	beq.n	8003704 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003702:	e003      	b.n	800370c <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003714:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8003718:	4618      	mov	r0, r3
 800371a:	3728      	adds	r7, #40	@ 0x28
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b088      	sub	sp, #32
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	603b      	str	r3, [r7, #0]
 800372c:	4613      	mov	r3, r2
 800372e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003730:	f7fd ff54 	bl	80015dc <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003738:	1a9b      	subs	r3, r3, r2
 800373a:	683a      	ldr	r2, [r7, #0]
 800373c:	4413      	add	r3, r2
 800373e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003740:	f7fd ff4c 	bl	80015dc <HAL_GetTick>
 8003744:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003746:	4b39      	ldr	r3, [pc, #228]	@ (800382c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	015b      	lsls	r3, r3, #5
 800374c:	0d1b      	lsrs	r3, r3, #20
 800374e:	69fa      	ldr	r2, [r7, #28]
 8003750:	fb02 f303 	mul.w	r3, r2, r3
 8003754:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003756:	e054      	b.n	8003802 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800375e:	d050      	beq.n	8003802 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003760:	f7fd ff3c 	bl	80015dc <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	69fa      	ldr	r2, [r7, #28]
 800376c:	429a      	cmp	r2, r3
 800376e:	d902      	bls.n	8003776 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d13d      	bne.n	80037f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	685a      	ldr	r2, [r3, #4]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003784:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800378e:	d111      	bne.n	80037b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003798:	d004      	beq.n	80037a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037a2:	d107      	bne.n	80037b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037bc:	d10f      	bne.n	80037de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80037cc:	601a      	str	r2, [r3, #0]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80037dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e017      	b.n	8003822 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d101      	bne.n	80037fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80037f8:	2300      	movs	r3, #0
 80037fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	3b01      	subs	r3, #1
 8003800:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	689a      	ldr	r2, [r3, #8]
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	4013      	ands	r3, r2
 800380c:	68ba      	ldr	r2, [r7, #8]
 800380e:	429a      	cmp	r2, r3
 8003810:	bf0c      	ite	eq
 8003812:	2301      	moveq	r3, #1
 8003814:	2300      	movne	r3, #0
 8003816:	b2db      	uxtb	r3, r3
 8003818:	461a      	mov	r2, r3
 800381a:	79fb      	ldrb	r3, [r7, #7]
 800381c:	429a      	cmp	r2, r3
 800381e:	d19b      	bne.n	8003758 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3720      	adds	r7, #32
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	20000000 	.word	0x20000000

08003830 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b08a      	sub	sp, #40	@ 0x28
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
 800383c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800383e:	2300      	movs	r3, #0
 8003840:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003842:	f7fd fecb 	bl	80015dc <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800384a:	1a9b      	subs	r3, r3, r2
 800384c:	683a      	ldr	r2, [r7, #0]
 800384e:	4413      	add	r3, r2
 8003850:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003852:	f7fd fec3 	bl	80015dc <HAL_GetTick>
 8003856:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	330c      	adds	r3, #12
 800385e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003860:	4b3d      	ldr	r3, [pc, #244]	@ (8003958 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	4613      	mov	r3, r2
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	4413      	add	r3, r2
 800386a:	00da      	lsls	r2, r3, #3
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	0d1b      	lsrs	r3, r3, #20
 8003870:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003872:	fb02 f303 	mul.w	r3, r2, r3
 8003876:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003878:	e060      	b.n	800393c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003880:	d107      	bne.n	8003892 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d104      	bne.n	8003892 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	b2db      	uxtb	r3, r3
 800388e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003890:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003898:	d050      	beq.n	800393c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800389a:	f7fd fe9f 	bl	80015dc <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	6a3b      	ldr	r3, [r7, #32]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d902      	bls.n	80038b0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80038aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d13d      	bne.n	800392c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	685a      	ldr	r2, [r3, #4]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80038be:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80038c8:	d111      	bne.n	80038ee <SPI_WaitFifoStateUntilTimeout+0xbe>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038d2:	d004      	beq.n	80038de <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038dc:	d107      	bne.n	80038ee <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038ec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038f6:	d10f      	bne.n	8003918 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003906:	601a      	str	r2, [r3, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003916:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e010      	b.n	800394e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d101      	bne.n	8003936 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003932:	2300      	movs	r3, #0
 8003934:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	3b01      	subs	r3, #1
 800393a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	689a      	ldr	r2, [r3, #8]
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	4013      	ands	r3, r2
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	429a      	cmp	r2, r3
 800394a:	d196      	bne.n	800387a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3728      	adds	r7, #40	@ 0x28
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	20000000 	.word	0x20000000

0800395c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b086      	sub	sp, #24
 8003960:	af02      	add	r7, sp, #8
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	9300      	str	r3, [sp, #0]
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	2200      	movs	r2, #0
 8003970:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003974:	68f8      	ldr	r0, [r7, #12]
 8003976:	f7ff ff5b 	bl	8003830 <SPI_WaitFifoStateUntilTimeout>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d007      	beq.n	8003990 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003984:	f043 0220 	orr.w	r2, r3, #32
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e027      	b.n	80039e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	9300      	str	r3, [sp, #0]
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	2200      	movs	r2, #0
 8003998:	2180      	movs	r1, #128	@ 0x80
 800399a:	68f8      	ldr	r0, [r7, #12]
 800399c:	f7ff fec0 	bl	8003720 <SPI_WaitFlagStateUntilTimeout>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d007      	beq.n	80039b6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039aa:	f043 0220 	orr.w	r2, r3, #32
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e014      	b.n	80039e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	9300      	str	r3, [sp, #0]
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	2200      	movs	r2, #0
 80039be:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f7ff ff34 	bl	8003830 <SPI_WaitFifoStateUntilTimeout>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d007      	beq.n	80039de <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039d2:	f043 0220 	orr.w	r2, r3, #32
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e000      	b.n	80039e0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3710      	adds	r7, #16
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e040      	b.n	8003a7c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d106      	bne.n	8003a10 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f7fd fcea 	bl	80013e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2224      	movs	r2, #36	@ 0x24
 8003a14:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 0201 	bic.w	r2, r2, #1
 8003a24:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d002      	beq.n	8003a34 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 fade 	bl	8003ff0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f000 f8af 	bl	8003b98 <UART_SetConfig>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d101      	bne.n	8003a44 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e01b      	b.n	8003a7c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	685a      	ldr	r2, [r3, #4]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	689a      	ldr	r2, [r3, #8]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f042 0201 	orr.w	r2, r2, #1
 8003a72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f000 fb5d 	bl	8004134 <UART_CheckIdleState>
 8003a7a:	4603      	mov	r3, r0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3708      	adds	r7, #8
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b08a      	sub	sp, #40	@ 0x28
 8003a88:	af02      	add	r7, sp, #8
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	603b      	str	r3, [r7, #0]
 8003a90:	4613      	mov	r3, r2
 8003a92:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a98:	2b20      	cmp	r3, #32
 8003a9a:	d177      	bne.n	8003b8c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d002      	beq.n	8003aa8 <HAL_UART_Transmit+0x24>
 8003aa2:	88fb      	ldrh	r3, [r7, #6]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d101      	bne.n	8003aac <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e070      	b.n	8003b8e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2221      	movs	r2, #33	@ 0x21
 8003ab8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003aba:	f7fd fd8f 	bl	80015dc <HAL_GetTick>
 8003abe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	88fa      	ldrh	r2, [r7, #6]
 8003ac4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	88fa      	ldrh	r2, [r7, #6]
 8003acc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ad8:	d108      	bne.n	8003aec <HAL_UART_Transmit+0x68>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d104      	bne.n	8003aec <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	61bb      	str	r3, [r7, #24]
 8003aea:	e003      	b.n	8003af4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003af0:	2300      	movs	r3, #0
 8003af2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003af4:	e02f      	b.n	8003b56 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	9300      	str	r3, [sp, #0]
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	2200      	movs	r2, #0
 8003afe:	2180      	movs	r1, #128	@ 0x80
 8003b00:	68f8      	ldr	r0, [r7, #12]
 8003b02:	f000 fbbf 	bl	8004284 <UART_WaitOnFlagUntilTimeout>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d004      	beq.n	8003b16 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2220      	movs	r2, #32
 8003b10:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e03b      	b.n	8003b8e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d10b      	bne.n	8003b34 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	881a      	ldrh	r2, [r3, #0]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b28:	b292      	uxth	r2, r2
 8003b2a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	3302      	adds	r3, #2
 8003b30:	61bb      	str	r3, [r7, #24]
 8003b32:	e007      	b.n	8003b44 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	781a      	ldrb	r2, [r3, #0]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	3301      	adds	r3, #1
 8003b42:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1c9      	bne.n	8003af6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	2140      	movs	r1, #64	@ 0x40
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f000 fb89 	bl	8004284 <UART_WaitOnFlagUntilTimeout>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d004      	beq.n	8003b82 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2220      	movs	r2, #32
 8003b7c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e005      	b.n	8003b8e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2220      	movs	r2, #32
 8003b86:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	e000      	b.n	8003b8e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003b8c:	2302      	movs	r3, #2
  }
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3720      	adds	r7, #32
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
	...

08003b98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b9c:	b08a      	sub	sp, #40	@ 0x28
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	689a      	ldr	r2, [r3, #8]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	431a      	orrs	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	431a      	orrs	r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	69db      	ldr	r3, [r3, #28]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	4bb4      	ldr	r3, [pc, #720]	@ (8003e98 <UART_SetConfig+0x300>)
 8003bc8:	4013      	ands	r3, r2
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	6812      	ldr	r2, [r2, #0]
 8003bce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003bd0:	430b      	orrs	r3, r1
 8003bd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	68da      	ldr	r2, [r3, #12]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	430a      	orrs	r2, r1
 8003be8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4aa9      	ldr	r2, [pc, #676]	@ (8003e9c <UART_SetConfig+0x304>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d004      	beq.n	8003c04 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c00:	4313      	orrs	r3, r2
 8003c02:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c14:	430a      	orrs	r2, r1
 8003c16:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4aa0      	ldr	r2, [pc, #640]	@ (8003ea0 <UART_SetConfig+0x308>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d126      	bne.n	8003c70 <UART_SetConfig+0xd8>
 8003c22:	4ba0      	ldr	r3, [pc, #640]	@ (8003ea4 <UART_SetConfig+0x30c>)
 8003c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c28:	f003 0303 	and.w	r3, r3, #3
 8003c2c:	2b03      	cmp	r3, #3
 8003c2e:	d81b      	bhi.n	8003c68 <UART_SetConfig+0xd0>
 8003c30:	a201      	add	r2, pc, #4	@ (adr r2, 8003c38 <UART_SetConfig+0xa0>)
 8003c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c36:	bf00      	nop
 8003c38:	08003c49 	.word	0x08003c49
 8003c3c:	08003c59 	.word	0x08003c59
 8003c40:	08003c51 	.word	0x08003c51
 8003c44:	08003c61 	.word	0x08003c61
 8003c48:	2301      	movs	r3, #1
 8003c4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c4e:	e080      	b.n	8003d52 <UART_SetConfig+0x1ba>
 8003c50:	2302      	movs	r3, #2
 8003c52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c56:	e07c      	b.n	8003d52 <UART_SetConfig+0x1ba>
 8003c58:	2304      	movs	r3, #4
 8003c5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c5e:	e078      	b.n	8003d52 <UART_SetConfig+0x1ba>
 8003c60:	2308      	movs	r3, #8
 8003c62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c66:	e074      	b.n	8003d52 <UART_SetConfig+0x1ba>
 8003c68:	2310      	movs	r3, #16
 8003c6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c6e:	e070      	b.n	8003d52 <UART_SetConfig+0x1ba>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a8c      	ldr	r2, [pc, #560]	@ (8003ea8 <UART_SetConfig+0x310>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d138      	bne.n	8003cec <UART_SetConfig+0x154>
 8003c7a:	4b8a      	ldr	r3, [pc, #552]	@ (8003ea4 <UART_SetConfig+0x30c>)
 8003c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c80:	f003 030c 	and.w	r3, r3, #12
 8003c84:	2b0c      	cmp	r3, #12
 8003c86:	d82d      	bhi.n	8003ce4 <UART_SetConfig+0x14c>
 8003c88:	a201      	add	r2, pc, #4	@ (adr r2, 8003c90 <UART_SetConfig+0xf8>)
 8003c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c8e:	bf00      	nop
 8003c90:	08003cc5 	.word	0x08003cc5
 8003c94:	08003ce5 	.word	0x08003ce5
 8003c98:	08003ce5 	.word	0x08003ce5
 8003c9c:	08003ce5 	.word	0x08003ce5
 8003ca0:	08003cd5 	.word	0x08003cd5
 8003ca4:	08003ce5 	.word	0x08003ce5
 8003ca8:	08003ce5 	.word	0x08003ce5
 8003cac:	08003ce5 	.word	0x08003ce5
 8003cb0:	08003ccd 	.word	0x08003ccd
 8003cb4:	08003ce5 	.word	0x08003ce5
 8003cb8:	08003ce5 	.word	0x08003ce5
 8003cbc:	08003ce5 	.word	0x08003ce5
 8003cc0:	08003cdd 	.word	0x08003cdd
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cca:	e042      	b.n	8003d52 <UART_SetConfig+0x1ba>
 8003ccc:	2302      	movs	r3, #2
 8003cce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cd2:	e03e      	b.n	8003d52 <UART_SetConfig+0x1ba>
 8003cd4:	2304      	movs	r3, #4
 8003cd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cda:	e03a      	b.n	8003d52 <UART_SetConfig+0x1ba>
 8003cdc:	2308      	movs	r3, #8
 8003cde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ce2:	e036      	b.n	8003d52 <UART_SetConfig+0x1ba>
 8003ce4:	2310      	movs	r3, #16
 8003ce6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cea:	e032      	b.n	8003d52 <UART_SetConfig+0x1ba>
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a6a      	ldr	r2, [pc, #424]	@ (8003e9c <UART_SetConfig+0x304>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d12a      	bne.n	8003d4c <UART_SetConfig+0x1b4>
 8003cf6:	4b6b      	ldr	r3, [pc, #428]	@ (8003ea4 <UART_SetConfig+0x30c>)
 8003cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cfc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003d00:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d04:	d01a      	beq.n	8003d3c <UART_SetConfig+0x1a4>
 8003d06:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d0a:	d81b      	bhi.n	8003d44 <UART_SetConfig+0x1ac>
 8003d0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d10:	d00c      	beq.n	8003d2c <UART_SetConfig+0x194>
 8003d12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d16:	d815      	bhi.n	8003d44 <UART_SetConfig+0x1ac>
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d003      	beq.n	8003d24 <UART_SetConfig+0x18c>
 8003d1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d20:	d008      	beq.n	8003d34 <UART_SetConfig+0x19c>
 8003d22:	e00f      	b.n	8003d44 <UART_SetConfig+0x1ac>
 8003d24:	2300      	movs	r3, #0
 8003d26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d2a:	e012      	b.n	8003d52 <UART_SetConfig+0x1ba>
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d32:	e00e      	b.n	8003d52 <UART_SetConfig+0x1ba>
 8003d34:	2304      	movs	r3, #4
 8003d36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d3a:	e00a      	b.n	8003d52 <UART_SetConfig+0x1ba>
 8003d3c:	2308      	movs	r3, #8
 8003d3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d42:	e006      	b.n	8003d52 <UART_SetConfig+0x1ba>
 8003d44:	2310      	movs	r3, #16
 8003d46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d4a:	e002      	b.n	8003d52 <UART_SetConfig+0x1ba>
 8003d4c:	2310      	movs	r3, #16
 8003d4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a51      	ldr	r2, [pc, #324]	@ (8003e9c <UART_SetConfig+0x304>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d17a      	bne.n	8003e52 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003d5c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003d60:	2b08      	cmp	r3, #8
 8003d62:	d824      	bhi.n	8003dae <UART_SetConfig+0x216>
 8003d64:	a201      	add	r2, pc, #4	@ (adr r2, 8003d6c <UART_SetConfig+0x1d4>)
 8003d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6a:	bf00      	nop
 8003d6c:	08003d91 	.word	0x08003d91
 8003d70:	08003daf 	.word	0x08003daf
 8003d74:	08003d99 	.word	0x08003d99
 8003d78:	08003daf 	.word	0x08003daf
 8003d7c:	08003d9f 	.word	0x08003d9f
 8003d80:	08003daf 	.word	0x08003daf
 8003d84:	08003daf 	.word	0x08003daf
 8003d88:	08003daf 	.word	0x08003daf
 8003d8c:	08003da7 	.word	0x08003da7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d90:	f7fe fd08 	bl	80027a4 <HAL_RCC_GetPCLK1Freq>
 8003d94:	61f8      	str	r0, [r7, #28]
        break;
 8003d96:	e010      	b.n	8003dba <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d98:	4b44      	ldr	r3, [pc, #272]	@ (8003eac <UART_SetConfig+0x314>)
 8003d9a:	61fb      	str	r3, [r7, #28]
        break;
 8003d9c:	e00d      	b.n	8003dba <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d9e:	f7fe fc69 	bl	8002674 <HAL_RCC_GetSysClockFreq>
 8003da2:	61f8      	str	r0, [r7, #28]
        break;
 8003da4:	e009      	b.n	8003dba <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003da6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003daa:	61fb      	str	r3, [r7, #28]
        break;
 8003dac:	e005      	b.n	8003dba <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8003dae:	2300      	movs	r3, #0
 8003db0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003db8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f000 8107 	beq.w	8003fd0 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	685a      	ldr	r2, [r3, #4]
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	005b      	lsls	r3, r3, #1
 8003dca:	4413      	add	r3, r2
 8003dcc:	69fa      	ldr	r2, [r7, #28]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d305      	bcc.n	8003dde <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003dd8:	69fa      	ldr	r2, [r7, #28]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d903      	bls.n	8003de6 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003de4:	e0f4      	b.n	8003fd0 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	2200      	movs	r2, #0
 8003dea:	461c      	mov	r4, r3
 8003dec:	4615      	mov	r5, r2
 8003dee:	f04f 0200 	mov.w	r2, #0
 8003df2:	f04f 0300 	mov.w	r3, #0
 8003df6:	022b      	lsls	r3, r5, #8
 8003df8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003dfc:	0222      	lsls	r2, r4, #8
 8003dfe:	68f9      	ldr	r1, [r7, #12]
 8003e00:	6849      	ldr	r1, [r1, #4]
 8003e02:	0849      	lsrs	r1, r1, #1
 8003e04:	2000      	movs	r0, #0
 8003e06:	4688      	mov	r8, r1
 8003e08:	4681      	mov	r9, r0
 8003e0a:	eb12 0a08 	adds.w	sl, r2, r8
 8003e0e:	eb43 0b09 	adc.w	fp, r3, r9
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	603b      	str	r3, [r7, #0]
 8003e1a:	607a      	str	r2, [r7, #4]
 8003e1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e20:	4650      	mov	r0, sl
 8003e22:	4659      	mov	r1, fp
 8003e24:	f7fc fa2c 	bl	8000280 <__aeabi_uldivmod>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	460b      	mov	r3, r1
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e36:	d308      	bcc.n	8003e4a <UART_SetConfig+0x2b2>
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e3e:	d204      	bcs.n	8003e4a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	69ba      	ldr	r2, [r7, #24]
 8003e46:	60da      	str	r2, [r3, #12]
 8003e48:	e0c2      	b.n	8003fd0 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003e50:	e0be      	b.n	8003fd0 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	69db      	ldr	r3, [r3, #28]
 8003e56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e5a:	d16a      	bne.n	8003f32 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003e5c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003e60:	2b08      	cmp	r3, #8
 8003e62:	d834      	bhi.n	8003ece <UART_SetConfig+0x336>
 8003e64:	a201      	add	r2, pc, #4	@ (adr r2, 8003e6c <UART_SetConfig+0x2d4>)
 8003e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e6a:	bf00      	nop
 8003e6c:	08003e91 	.word	0x08003e91
 8003e70:	08003eb1 	.word	0x08003eb1
 8003e74:	08003eb9 	.word	0x08003eb9
 8003e78:	08003ecf 	.word	0x08003ecf
 8003e7c:	08003ebf 	.word	0x08003ebf
 8003e80:	08003ecf 	.word	0x08003ecf
 8003e84:	08003ecf 	.word	0x08003ecf
 8003e88:	08003ecf 	.word	0x08003ecf
 8003e8c:	08003ec7 	.word	0x08003ec7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e90:	f7fe fc88 	bl	80027a4 <HAL_RCC_GetPCLK1Freq>
 8003e94:	61f8      	str	r0, [r7, #28]
        break;
 8003e96:	e020      	b.n	8003eda <UART_SetConfig+0x342>
 8003e98:	efff69f3 	.word	0xefff69f3
 8003e9c:	40008000 	.word	0x40008000
 8003ea0:	40013800 	.word	0x40013800
 8003ea4:	40021000 	.word	0x40021000
 8003ea8:	40004400 	.word	0x40004400
 8003eac:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003eb0:	f7fe fc8e 	bl	80027d0 <HAL_RCC_GetPCLK2Freq>
 8003eb4:	61f8      	str	r0, [r7, #28]
        break;
 8003eb6:	e010      	b.n	8003eda <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003eb8:	4b4c      	ldr	r3, [pc, #304]	@ (8003fec <UART_SetConfig+0x454>)
 8003eba:	61fb      	str	r3, [r7, #28]
        break;
 8003ebc:	e00d      	b.n	8003eda <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ebe:	f7fe fbd9 	bl	8002674 <HAL_RCC_GetSysClockFreq>
 8003ec2:	61f8      	str	r0, [r7, #28]
        break;
 8003ec4:	e009      	b.n	8003eda <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ec6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003eca:	61fb      	str	r3, [r7, #28]
        break;
 8003ecc:	e005      	b.n	8003eda <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003ed8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d077      	beq.n	8003fd0 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	005a      	lsls	r2, r3, #1
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	085b      	lsrs	r3, r3, #1
 8003eea:	441a      	add	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ef4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	2b0f      	cmp	r3, #15
 8003efa:	d916      	bls.n	8003f2a <UART_SetConfig+0x392>
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f02:	d212      	bcs.n	8003f2a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	f023 030f 	bic.w	r3, r3, #15
 8003f0c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	085b      	lsrs	r3, r3, #1
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	f003 0307 	and.w	r3, r3, #7
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	8afb      	ldrh	r3, [r7, #22]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	8afa      	ldrh	r2, [r7, #22]
 8003f26:	60da      	str	r2, [r3, #12]
 8003f28:	e052      	b.n	8003fd0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003f30:	e04e      	b.n	8003fd0 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f32:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003f36:	2b08      	cmp	r3, #8
 8003f38:	d827      	bhi.n	8003f8a <UART_SetConfig+0x3f2>
 8003f3a:	a201      	add	r2, pc, #4	@ (adr r2, 8003f40 <UART_SetConfig+0x3a8>)
 8003f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f40:	08003f65 	.word	0x08003f65
 8003f44:	08003f6d 	.word	0x08003f6d
 8003f48:	08003f75 	.word	0x08003f75
 8003f4c:	08003f8b 	.word	0x08003f8b
 8003f50:	08003f7b 	.word	0x08003f7b
 8003f54:	08003f8b 	.word	0x08003f8b
 8003f58:	08003f8b 	.word	0x08003f8b
 8003f5c:	08003f8b 	.word	0x08003f8b
 8003f60:	08003f83 	.word	0x08003f83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f64:	f7fe fc1e 	bl	80027a4 <HAL_RCC_GetPCLK1Freq>
 8003f68:	61f8      	str	r0, [r7, #28]
        break;
 8003f6a:	e014      	b.n	8003f96 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f6c:	f7fe fc30 	bl	80027d0 <HAL_RCC_GetPCLK2Freq>
 8003f70:	61f8      	str	r0, [r7, #28]
        break;
 8003f72:	e010      	b.n	8003f96 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f74:	4b1d      	ldr	r3, [pc, #116]	@ (8003fec <UART_SetConfig+0x454>)
 8003f76:	61fb      	str	r3, [r7, #28]
        break;
 8003f78:	e00d      	b.n	8003f96 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f7a:	f7fe fb7b 	bl	8002674 <HAL_RCC_GetSysClockFreq>
 8003f7e:	61f8      	str	r0, [r7, #28]
        break;
 8003f80:	e009      	b.n	8003f96 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f86:	61fb      	str	r3, [r7, #28]
        break;
 8003f88:	e005      	b.n	8003f96 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003f94:	bf00      	nop
    }

    if (pclk != 0U)
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d019      	beq.n	8003fd0 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	085a      	lsrs	r2, r3, #1
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	441a      	add	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fae:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	2b0f      	cmp	r3, #15
 8003fb4:	d909      	bls.n	8003fca <UART_SetConfig+0x432>
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fbc:	d205      	bcs.n	8003fca <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	60da      	str	r2, [r3, #12]
 8003fc8:	e002      	b.n	8003fd0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003fdc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3728      	adds	r7, #40	@ 0x28
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fea:	bf00      	nop
 8003fec:	00f42400 	.word	0x00f42400

08003ff0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ffc:	f003 0308 	and.w	r3, r3, #8
 8004000:	2b00      	cmp	r3, #0
 8004002:	d00a      	beq.n	800401a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	430a      	orrs	r2, r1
 8004018:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401e:	f003 0301 	and.w	r3, r3, #1
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00a      	beq.n	800403c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	430a      	orrs	r2, r1
 800403a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004040:	f003 0302 	and.w	r3, r3, #2
 8004044:	2b00      	cmp	r3, #0
 8004046:	d00a      	beq.n	800405e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	430a      	orrs	r2, r1
 800405c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004062:	f003 0304 	and.w	r3, r3, #4
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00a      	beq.n	8004080 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	430a      	orrs	r2, r1
 800407e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004084:	f003 0310 	and.w	r3, r3, #16
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00a      	beq.n	80040a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	430a      	orrs	r2, r1
 80040a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a6:	f003 0320 	and.w	r3, r3, #32
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00a      	beq.n	80040c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	430a      	orrs	r2, r1
 80040c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d01a      	beq.n	8004106 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	430a      	orrs	r2, r1
 80040e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040ee:	d10a      	bne.n	8004106 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	430a      	orrs	r2, r1
 8004104:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800410a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00a      	beq.n	8004128 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	430a      	orrs	r2, r1
 8004126:	605a      	str	r2, [r3, #4]
  }
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b098      	sub	sp, #96	@ 0x60
 8004138:	af02      	add	r7, sp, #8
 800413a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004144:	f7fd fa4a 	bl	80015dc <HAL_GetTick>
 8004148:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0308 	and.w	r3, r3, #8
 8004154:	2b08      	cmp	r3, #8
 8004156:	d12e      	bne.n	80041b6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004158:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800415c:	9300      	str	r3, [sp, #0]
 800415e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004160:	2200      	movs	r2, #0
 8004162:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 f88c 	bl	8004284 <UART_WaitOnFlagUntilTimeout>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d021      	beq.n	80041b6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800417a:	e853 3f00 	ldrex	r3, [r3]
 800417e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004180:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004182:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004186:	653b      	str	r3, [r7, #80]	@ 0x50
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	461a      	mov	r2, r3
 800418e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004190:	647b      	str	r3, [r7, #68]	@ 0x44
 8004192:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004194:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004196:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004198:	e841 2300 	strex	r3, r2, [r1]
 800419c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800419e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1e6      	bne.n	8004172 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2220      	movs	r2, #32
 80041a8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e062      	b.n	800427c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0304 	and.w	r3, r3, #4
 80041c0:	2b04      	cmp	r3, #4
 80041c2:	d149      	bne.n	8004258 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80041c8:	9300      	str	r3, [sp, #0]
 80041ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041cc:	2200      	movs	r2, #0
 80041ce:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f000 f856 	bl	8004284 <UART_WaitOnFlagUntilTimeout>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d03c      	beq.n	8004258 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e6:	e853 3f00 	ldrex	r3, [r3]
 80041ea:	623b      	str	r3, [r7, #32]
   return(result);
 80041ec:	6a3b      	ldr	r3, [r7, #32]
 80041ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	461a      	mov	r2, r3
 80041fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80041fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004200:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004202:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004204:	e841 2300 	strex	r3, r2, [r1]
 8004208:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800420a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800420c:	2b00      	cmp	r3, #0
 800420e:	d1e6      	bne.n	80041de <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	3308      	adds	r3, #8
 8004216:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	e853 3f00 	ldrex	r3, [r3]
 800421e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f023 0301 	bic.w	r3, r3, #1
 8004226:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	3308      	adds	r3, #8
 800422e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004230:	61fa      	str	r2, [r7, #28]
 8004232:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004234:	69b9      	ldr	r1, [r7, #24]
 8004236:	69fa      	ldr	r2, [r7, #28]
 8004238:	e841 2300 	strex	r3, r2, [r1]
 800423c:	617b      	str	r3, [r7, #20]
   return(result);
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1e5      	bne.n	8004210 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2220      	movs	r2, #32
 8004248:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e011      	b.n	800427c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2220      	movs	r2, #32
 800425c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2220      	movs	r2, #32
 8004262:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	3758      	adds	r7, #88	@ 0x58
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	603b      	str	r3, [r7, #0]
 8004290:	4613      	mov	r3, r2
 8004292:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004294:	e049      	b.n	800432a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800429c:	d045      	beq.n	800432a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800429e:	f7fd f99d 	bl	80015dc <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	69ba      	ldr	r2, [r7, #24]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d302      	bcc.n	80042b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d101      	bne.n	80042b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e048      	b.n	800434a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0304 	and.w	r3, r3, #4
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d031      	beq.n	800432a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	69db      	ldr	r3, [r3, #28]
 80042cc:	f003 0308 	and.w	r3, r3, #8
 80042d0:	2b08      	cmp	r3, #8
 80042d2:	d110      	bne.n	80042f6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2208      	movs	r2, #8
 80042da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042dc:	68f8      	ldr	r0, [r7, #12]
 80042de:	f000 f838 	bl	8004352 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2208      	movs	r2, #8
 80042e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e029      	b.n	800434a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	69db      	ldr	r3, [r3, #28]
 80042fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004300:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004304:	d111      	bne.n	800432a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800430e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004310:	68f8      	ldr	r0, [r7, #12]
 8004312:	f000 f81e 	bl	8004352 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2220      	movs	r2, #32
 800431a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e00f      	b.n	800434a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	69da      	ldr	r2, [r3, #28]
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	4013      	ands	r3, r2
 8004334:	68ba      	ldr	r2, [r7, #8]
 8004336:	429a      	cmp	r2, r3
 8004338:	bf0c      	ite	eq
 800433a:	2301      	moveq	r3, #1
 800433c:	2300      	movne	r3, #0
 800433e:	b2db      	uxtb	r3, r3
 8004340:	461a      	mov	r2, r3
 8004342:	79fb      	ldrb	r3, [r7, #7]
 8004344:	429a      	cmp	r2, r3
 8004346:	d0a6      	beq.n	8004296 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3710      	adds	r7, #16
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004352:	b480      	push	{r7}
 8004354:	b095      	sub	sp, #84	@ 0x54
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004360:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004362:	e853 3f00 	ldrex	r3, [r3]
 8004366:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800436a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800436e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	461a      	mov	r2, r3
 8004376:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004378:	643b      	str	r3, [r7, #64]	@ 0x40
 800437a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800437e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004380:	e841 2300 	strex	r3, r2, [r1]
 8004384:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1e6      	bne.n	800435a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	3308      	adds	r3, #8
 8004392:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004394:	6a3b      	ldr	r3, [r7, #32]
 8004396:	e853 3f00 	ldrex	r3, [r3]
 800439a:	61fb      	str	r3, [r7, #28]
   return(result);
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	f023 0301 	bic.w	r3, r3, #1
 80043a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	3308      	adds	r3, #8
 80043aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80043ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80043ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043b4:	e841 2300 	strex	r3, r2, [r1]
 80043b8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80043ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d1e5      	bne.n	800438c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d118      	bne.n	80043fa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	e853 3f00 	ldrex	r3, [r3]
 80043d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	f023 0310 	bic.w	r3, r3, #16
 80043dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	461a      	mov	r2, r3
 80043e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043e6:	61bb      	str	r3, [r7, #24]
 80043e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ea:	6979      	ldr	r1, [r7, #20]
 80043ec:	69ba      	ldr	r2, [r7, #24]
 80043ee:	e841 2300 	strex	r3, r2, [r1]
 80043f2:	613b      	str	r3, [r7, #16]
   return(result);
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d1e6      	bne.n	80043c8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2220      	movs	r2, #32
 80043fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800440e:	bf00      	nop
 8004410:	3754      	adds	r7, #84	@ 0x54
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
	...

0800441c <malloc>:
 800441c:	4b02      	ldr	r3, [pc, #8]	@ (8004428 <malloc+0xc>)
 800441e:	4601      	mov	r1, r0
 8004420:	6818      	ldr	r0, [r3, #0]
 8004422:	f000 b82d 	b.w	8004480 <_malloc_r>
 8004426:	bf00      	nop
 8004428:	2000000c 	.word	0x2000000c

0800442c <free>:
 800442c:	4b02      	ldr	r3, [pc, #8]	@ (8004438 <free+0xc>)
 800442e:	4601      	mov	r1, r0
 8004430:	6818      	ldr	r0, [r3, #0]
 8004432:	f000 b98d 	b.w	8004750 <_free_r>
 8004436:	bf00      	nop
 8004438:	2000000c 	.word	0x2000000c

0800443c <sbrk_aligned>:
 800443c:	b570      	push	{r4, r5, r6, lr}
 800443e:	4e0f      	ldr	r6, [pc, #60]	@ (800447c <sbrk_aligned+0x40>)
 8004440:	460c      	mov	r4, r1
 8004442:	6831      	ldr	r1, [r6, #0]
 8004444:	4605      	mov	r5, r0
 8004446:	b911      	cbnz	r1, 800444e <sbrk_aligned+0x12>
 8004448:	f000 f938 	bl	80046bc <_sbrk_r>
 800444c:	6030      	str	r0, [r6, #0]
 800444e:	4621      	mov	r1, r4
 8004450:	4628      	mov	r0, r5
 8004452:	f000 f933 	bl	80046bc <_sbrk_r>
 8004456:	1c43      	adds	r3, r0, #1
 8004458:	d103      	bne.n	8004462 <sbrk_aligned+0x26>
 800445a:	f04f 34ff 	mov.w	r4, #4294967295
 800445e:	4620      	mov	r0, r4
 8004460:	bd70      	pop	{r4, r5, r6, pc}
 8004462:	1cc4      	adds	r4, r0, #3
 8004464:	f024 0403 	bic.w	r4, r4, #3
 8004468:	42a0      	cmp	r0, r4
 800446a:	d0f8      	beq.n	800445e <sbrk_aligned+0x22>
 800446c:	1a21      	subs	r1, r4, r0
 800446e:	4628      	mov	r0, r5
 8004470:	f000 f924 	bl	80046bc <_sbrk_r>
 8004474:	3001      	adds	r0, #1
 8004476:	d1f2      	bne.n	800445e <sbrk_aligned+0x22>
 8004478:	e7ef      	b.n	800445a <sbrk_aligned+0x1e>
 800447a:	bf00      	nop
 800447c:	2000023c 	.word	0x2000023c

08004480 <_malloc_r>:
 8004480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004484:	1ccd      	adds	r5, r1, #3
 8004486:	f025 0503 	bic.w	r5, r5, #3
 800448a:	3508      	adds	r5, #8
 800448c:	2d0c      	cmp	r5, #12
 800448e:	bf38      	it	cc
 8004490:	250c      	movcc	r5, #12
 8004492:	2d00      	cmp	r5, #0
 8004494:	4606      	mov	r6, r0
 8004496:	db01      	blt.n	800449c <_malloc_r+0x1c>
 8004498:	42a9      	cmp	r1, r5
 800449a:	d904      	bls.n	80044a6 <_malloc_r+0x26>
 800449c:	230c      	movs	r3, #12
 800449e:	6033      	str	r3, [r6, #0]
 80044a0:	2000      	movs	r0, #0
 80044a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800457c <_malloc_r+0xfc>
 80044aa:	f000 f869 	bl	8004580 <__malloc_lock>
 80044ae:	f8d8 3000 	ldr.w	r3, [r8]
 80044b2:	461c      	mov	r4, r3
 80044b4:	bb44      	cbnz	r4, 8004508 <_malloc_r+0x88>
 80044b6:	4629      	mov	r1, r5
 80044b8:	4630      	mov	r0, r6
 80044ba:	f7ff ffbf 	bl	800443c <sbrk_aligned>
 80044be:	1c43      	adds	r3, r0, #1
 80044c0:	4604      	mov	r4, r0
 80044c2:	d158      	bne.n	8004576 <_malloc_r+0xf6>
 80044c4:	f8d8 4000 	ldr.w	r4, [r8]
 80044c8:	4627      	mov	r7, r4
 80044ca:	2f00      	cmp	r7, #0
 80044cc:	d143      	bne.n	8004556 <_malloc_r+0xd6>
 80044ce:	2c00      	cmp	r4, #0
 80044d0:	d04b      	beq.n	800456a <_malloc_r+0xea>
 80044d2:	6823      	ldr	r3, [r4, #0]
 80044d4:	4639      	mov	r1, r7
 80044d6:	4630      	mov	r0, r6
 80044d8:	eb04 0903 	add.w	r9, r4, r3
 80044dc:	f000 f8ee 	bl	80046bc <_sbrk_r>
 80044e0:	4581      	cmp	r9, r0
 80044e2:	d142      	bne.n	800456a <_malloc_r+0xea>
 80044e4:	6821      	ldr	r1, [r4, #0]
 80044e6:	1a6d      	subs	r5, r5, r1
 80044e8:	4629      	mov	r1, r5
 80044ea:	4630      	mov	r0, r6
 80044ec:	f7ff ffa6 	bl	800443c <sbrk_aligned>
 80044f0:	3001      	adds	r0, #1
 80044f2:	d03a      	beq.n	800456a <_malloc_r+0xea>
 80044f4:	6823      	ldr	r3, [r4, #0]
 80044f6:	442b      	add	r3, r5
 80044f8:	6023      	str	r3, [r4, #0]
 80044fa:	f8d8 3000 	ldr.w	r3, [r8]
 80044fe:	685a      	ldr	r2, [r3, #4]
 8004500:	bb62      	cbnz	r2, 800455c <_malloc_r+0xdc>
 8004502:	f8c8 7000 	str.w	r7, [r8]
 8004506:	e00f      	b.n	8004528 <_malloc_r+0xa8>
 8004508:	6822      	ldr	r2, [r4, #0]
 800450a:	1b52      	subs	r2, r2, r5
 800450c:	d420      	bmi.n	8004550 <_malloc_r+0xd0>
 800450e:	2a0b      	cmp	r2, #11
 8004510:	d917      	bls.n	8004542 <_malloc_r+0xc2>
 8004512:	1961      	adds	r1, r4, r5
 8004514:	42a3      	cmp	r3, r4
 8004516:	6025      	str	r5, [r4, #0]
 8004518:	bf18      	it	ne
 800451a:	6059      	strne	r1, [r3, #4]
 800451c:	6863      	ldr	r3, [r4, #4]
 800451e:	bf08      	it	eq
 8004520:	f8c8 1000 	streq.w	r1, [r8]
 8004524:	5162      	str	r2, [r4, r5]
 8004526:	604b      	str	r3, [r1, #4]
 8004528:	4630      	mov	r0, r6
 800452a:	f000 f82f 	bl	800458c <__malloc_unlock>
 800452e:	f104 000b 	add.w	r0, r4, #11
 8004532:	1d23      	adds	r3, r4, #4
 8004534:	f020 0007 	bic.w	r0, r0, #7
 8004538:	1ac2      	subs	r2, r0, r3
 800453a:	bf1c      	itt	ne
 800453c:	1a1b      	subne	r3, r3, r0
 800453e:	50a3      	strne	r3, [r4, r2]
 8004540:	e7af      	b.n	80044a2 <_malloc_r+0x22>
 8004542:	6862      	ldr	r2, [r4, #4]
 8004544:	42a3      	cmp	r3, r4
 8004546:	bf0c      	ite	eq
 8004548:	f8c8 2000 	streq.w	r2, [r8]
 800454c:	605a      	strne	r2, [r3, #4]
 800454e:	e7eb      	b.n	8004528 <_malloc_r+0xa8>
 8004550:	4623      	mov	r3, r4
 8004552:	6864      	ldr	r4, [r4, #4]
 8004554:	e7ae      	b.n	80044b4 <_malloc_r+0x34>
 8004556:	463c      	mov	r4, r7
 8004558:	687f      	ldr	r7, [r7, #4]
 800455a:	e7b6      	b.n	80044ca <_malloc_r+0x4a>
 800455c:	461a      	mov	r2, r3
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	42a3      	cmp	r3, r4
 8004562:	d1fb      	bne.n	800455c <_malloc_r+0xdc>
 8004564:	2300      	movs	r3, #0
 8004566:	6053      	str	r3, [r2, #4]
 8004568:	e7de      	b.n	8004528 <_malloc_r+0xa8>
 800456a:	230c      	movs	r3, #12
 800456c:	6033      	str	r3, [r6, #0]
 800456e:	4630      	mov	r0, r6
 8004570:	f000 f80c 	bl	800458c <__malloc_unlock>
 8004574:	e794      	b.n	80044a0 <_malloc_r+0x20>
 8004576:	6005      	str	r5, [r0, #0]
 8004578:	e7d6      	b.n	8004528 <_malloc_r+0xa8>
 800457a:	bf00      	nop
 800457c:	20000240 	.word	0x20000240

08004580 <__malloc_lock>:
 8004580:	4801      	ldr	r0, [pc, #4]	@ (8004588 <__malloc_lock+0x8>)
 8004582:	f000 b8d5 	b.w	8004730 <__retarget_lock_acquire_recursive>
 8004586:	bf00      	nop
 8004588:	20000380 	.word	0x20000380

0800458c <__malloc_unlock>:
 800458c:	4801      	ldr	r0, [pc, #4]	@ (8004594 <__malloc_unlock+0x8>)
 800458e:	f000 b8d0 	b.w	8004732 <__retarget_lock_release_recursive>
 8004592:	bf00      	nop
 8004594:	20000380 	.word	0x20000380

08004598 <realloc>:
 8004598:	4b02      	ldr	r3, [pc, #8]	@ (80045a4 <realloc+0xc>)
 800459a:	460a      	mov	r2, r1
 800459c:	4601      	mov	r1, r0
 800459e:	6818      	ldr	r0, [r3, #0]
 80045a0:	f000 b802 	b.w	80045a8 <_realloc_r>
 80045a4:	2000000c 	.word	0x2000000c

080045a8 <_realloc_r>:
 80045a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045ac:	4680      	mov	r8, r0
 80045ae:	4615      	mov	r5, r2
 80045b0:	460c      	mov	r4, r1
 80045b2:	b921      	cbnz	r1, 80045be <_realloc_r+0x16>
 80045b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045b8:	4611      	mov	r1, r2
 80045ba:	f7ff bf61 	b.w	8004480 <_malloc_r>
 80045be:	b92a      	cbnz	r2, 80045cc <_realloc_r+0x24>
 80045c0:	f000 f8c6 	bl	8004750 <_free_r>
 80045c4:	2400      	movs	r4, #0
 80045c6:	4620      	mov	r0, r4
 80045c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045cc:	f000 f90a 	bl	80047e4 <_malloc_usable_size_r>
 80045d0:	4285      	cmp	r5, r0
 80045d2:	4606      	mov	r6, r0
 80045d4:	d802      	bhi.n	80045dc <_realloc_r+0x34>
 80045d6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80045da:	d8f4      	bhi.n	80045c6 <_realloc_r+0x1e>
 80045dc:	4629      	mov	r1, r5
 80045de:	4640      	mov	r0, r8
 80045e0:	f7ff ff4e 	bl	8004480 <_malloc_r>
 80045e4:	4607      	mov	r7, r0
 80045e6:	2800      	cmp	r0, #0
 80045e8:	d0ec      	beq.n	80045c4 <_realloc_r+0x1c>
 80045ea:	42b5      	cmp	r5, r6
 80045ec:	462a      	mov	r2, r5
 80045ee:	4621      	mov	r1, r4
 80045f0:	bf28      	it	cs
 80045f2:	4632      	movcs	r2, r6
 80045f4:	f000 f89e 	bl	8004734 <memcpy>
 80045f8:	4621      	mov	r1, r4
 80045fa:	4640      	mov	r0, r8
 80045fc:	f000 f8a8 	bl	8004750 <_free_r>
 8004600:	463c      	mov	r4, r7
 8004602:	e7e0      	b.n	80045c6 <_realloc_r+0x1e>

08004604 <sniprintf>:
 8004604:	b40c      	push	{r2, r3}
 8004606:	b530      	push	{r4, r5, lr}
 8004608:	4b17      	ldr	r3, [pc, #92]	@ (8004668 <sniprintf+0x64>)
 800460a:	1e0c      	subs	r4, r1, #0
 800460c:	681d      	ldr	r5, [r3, #0]
 800460e:	b09d      	sub	sp, #116	@ 0x74
 8004610:	da08      	bge.n	8004624 <sniprintf+0x20>
 8004612:	238b      	movs	r3, #139	@ 0x8b
 8004614:	602b      	str	r3, [r5, #0]
 8004616:	f04f 30ff 	mov.w	r0, #4294967295
 800461a:	b01d      	add	sp, #116	@ 0x74
 800461c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004620:	b002      	add	sp, #8
 8004622:	4770      	bx	lr
 8004624:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004628:	f8ad 3014 	strh.w	r3, [sp, #20]
 800462c:	bf14      	ite	ne
 800462e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004632:	4623      	moveq	r3, r4
 8004634:	9304      	str	r3, [sp, #16]
 8004636:	9307      	str	r3, [sp, #28]
 8004638:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800463c:	9002      	str	r0, [sp, #8]
 800463e:	9006      	str	r0, [sp, #24]
 8004640:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004644:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004646:	ab21      	add	r3, sp, #132	@ 0x84
 8004648:	a902      	add	r1, sp, #8
 800464a:	4628      	mov	r0, r5
 800464c:	9301      	str	r3, [sp, #4]
 800464e:	f000 f92d 	bl	80048ac <_svfiprintf_r>
 8004652:	1c43      	adds	r3, r0, #1
 8004654:	bfbc      	itt	lt
 8004656:	238b      	movlt	r3, #139	@ 0x8b
 8004658:	602b      	strlt	r3, [r5, #0]
 800465a:	2c00      	cmp	r4, #0
 800465c:	d0dd      	beq.n	800461a <sniprintf+0x16>
 800465e:	9b02      	ldr	r3, [sp, #8]
 8004660:	2200      	movs	r2, #0
 8004662:	701a      	strb	r2, [r3, #0]
 8004664:	e7d9      	b.n	800461a <sniprintf+0x16>
 8004666:	bf00      	nop
 8004668:	2000000c 	.word	0x2000000c

0800466c <siprintf>:
 800466c:	b40e      	push	{r1, r2, r3}
 800466e:	b500      	push	{lr}
 8004670:	b09c      	sub	sp, #112	@ 0x70
 8004672:	ab1d      	add	r3, sp, #116	@ 0x74
 8004674:	9002      	str	r0, [sp, #8]
 8004676:	9006      	str	r0, [sp, #24]
 8004678:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800467c:	4809      	ldr	r0, [pc, #36]	@ (80046a4 <siprintf+0x38>)
 800467e:	9107      	str	r1, [sp, #28]
 8004680:	9104      	str	r1, [sp, #16]
 8004682:	4909      	ldr	r1, [pc, #36]	@ (80046a8 <siprintf+0x3c>)
 8004684:	f853 2b04 	ldr.w	r2, [r3], #4
 8004688:	9105      	str	r1, [sp, #20]
 800468a:	6800      	ldr	r0, [r0, #0]
 800468c:	9301      	str	r3, [sp, #4]
 800468e:	a902      	add	r1, sp, #8
 8004690:	f000 f90c 	bl	80048ac <_svfiprintf_r>
 8004694:	9b02      	ldr	r3, [sp, #8]
 8004696:	2200      	movs	r2, #0
 8004698:	701a      	strb	r2, [r3, #0]
 800469a:	b01c      	add	sp, #112	@ 0x70
 800469c:	f85d eb04 	ldr.w	lr, [sp], #4
 80046a0:	b003      	add	sp, #12
 80046a2:	4770      	bx	lr
 80046a4:	2000000c 	.word	0x2000000c
 80046a8:	ffff0208 	.word	0xffff0208

080046ac <memset>:
 80046ac:	4402      	add	r2, r0
 80046ae:	4603      	mov	r3, r0
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d100      	bne.n	80046b6 <memset+0xa>
 80046b4:	4770      	bx	lr
 80046b6:	f803 1b01 	strb.w	r1, [r3], #1
 80046ba:	e7f9      	b.n	80046b0 <memset+0x4>

080046bc <_sbrk_r>:
 80046bc:	b538      	push	{r3, r4, r5, lr}
 80046be:	4d06      	ldr	r5, [pc, #24]	@ (80046d8 <_sbrk_r+0x1c>)
 80046c0:	2300      	movs	r3, #0
 80046c2:	4604      	mov	r4, r0
 80046c4:	4608      	mov	r0, r1
 80046c6:	602b      	str	r3, [r5, #0]
 80046c8:	f7fc fe14 	bl	80012f4 <_sbrk>
 80046cc:	1c43      	adds	r3, r0, #1
 80046ce:	d102      	bne.n	80046d6 <_sbrk_r+0x1a>
 80046d0:	682b      	ldr	r3, [r5, #0]
 80046d2:	b103      	cbz	r3, 80046d6 <_sbrk_r+0x1a>
 80046d4:	6023      	str	r3, [r4, #0]
 80046d6:	bd38      	pop	{r3, r4, r5, pc}
 80046d8:	2000037c 	.word	0x2000037c

080046dc <__errno>:
 80046dc:	4b01      	ldr	r3, [pc, #4]	@ (80046e4 <__errno+0x8>)
 80046de:	6818      	ldr	r0, [r3, #0]
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	2000000c 	.word	0x2000000c

080046e8 <__libc_init_array>:
 80046e8:	b570      	push	{r4, r5, r6, lr}
 80046ea:	4d0d      	ldr	r5, [pc, #52]	@ (8004720 <__libc_init_array+0x38>)
 80046ec:	4c0d      	ldr	r4, [pc, #52]	@ (8004724 <__libc_init_array+0x3c>)
 80046ee:	1b64      	subs	r4, r4, r5
 80046f0:	10a4      	asrs	r4, r4, #2
 80046f2:	2600      	movs	r6, #0
 80046f4:	42a6      	cmp	r6, r4
 80046f6:	d109      	bne.n	800470c <__libc_init_array+0x24>
 80046f8:	4d0b      	ldr	r5, [pc, #44]	@ (8004728 <__libc_init_array+0x40>)
 80046fa:	4c0c      	ldr	r4, [pc, #48]	@ (800472c <__libc_init_array+0x44>)
 80046fc:	f000 fb7a 	bl	8004df4 <_init>
 8004700:	1b64      	subs	r4, r4, r5
 8004702:	10a4      	asrs	r4, r4, #2
 8004704:	2600      	movs	r6, #0
 8004706:	42a6      	cmp	r6, r4
 8004708:	d105      	bne.n	8004716 <__libc_init_array+0x2e>
 800470a:	bd70      	pop	{r4, r5, r6, pc}
 800470c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004710:	4798      	blx	r3
 8004712:	3601      	adds	r6, #1
 8004714:	e7ee      	b.n	80046f4 <__libc_init_array+0xc>
 8004716:	f855 3b04 	ldr.w	r3, [r5], #4
 800471a:	4798      	blx	r3
 800471c:	3601      	adds	r6, #1
 800471e:	e7f2      	b.n	8004706 <__libc_init_array+0x1e>
 8004720:	08005054 	.word	0x08005054
 8004724:	08005054 	.word	0x08005054
 8004728:	08005054 	.word	0x08005054
 800472c:	08005058 	.word	0x08005058

08004730 <__retarget_lock_acquire_recursive>:
 8004730:	4770      	bx	lr

08004732 <__retarget_lock_release_recursive>:
 8004732:	4770      	bx	lr

08004734 <memcpy>:
 8004734:	440a      	add	r2, r1
 8004736:	4291      	cmp	r1, r2
 8004738:	f100 33ff 	add.w	r3, r0, #4294967295
 800473c:	d100      	bne.n	8004740 <memcpy+0xc>
 800473e:	4770      	bx	lr
 8004740:	b510      	push	{r4, lr}
 8004742:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004746:	f803 4f01 	strb.w	r4, [r3, #1]!
 800474a:	4291      	cmp	r1, r2
 800474c:	d1f9      	bne.n	8004742 <memcpy+0xe>
 800474e:	bd10      	pop	{r4, pc}

08004750 <_free_r>:
 8004750:	b538      	push	{r3, r4, r5, lr}
 8004752:	4605      	mov	r5, r0
 8004754:	2900      	cmp	r1, #0
 8004756:	d041      	beq.n	80047dc <_free_r+0x8c>
 8004758:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800475c:	1f0c      	subs	r4, r1, #4
 800475e:	2b00      	cmp	r3, #0
 8004760:	bfb8      	it	lt
 8004762:	18e4      	addlt	r4, r4, r3
 8004764:	f7ff ff0c 	bl	8004580 <__malloc_lock>
 8004768:	4a1d      	ldr	r2, [pc, #116]	@ (80047e0 <_free_r+0x90>)
 800476a:	6813      	ldr	r3, [r2, #0]
 800476c:	b933      	cbnz	r3, 800477c <_free_r+0x2c>
 800476e:	6063      	str	r3, [r4, #4]
 8004770:	6014      	str	r4, [r2, #0]
 8004772:	4628      	mov	r0, r5
 8004774:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004778:	f7ff bf08 	b.w	800458c <__malloc_unlock>
 800477c:	42a3      	cmp	r3, r4
 800477e:	d908      	bls.n	8004792 <_free_r+0x42>
 8004780:	6820      	ldr	r0, [r4, #0]
 8004782:	1821      	adds	r1, r4, r0
 8004784:	428b      	cmp	r3, r1
 8004786:	bf01      	itttt	eq
 8004788:	6819      	ldreq	r1, [r3, #0]
 800478a:	685b      	ldreq	r3, [r3, #4]
 800478c:	1809      	addeq	r1, r1, r0
 800478e:	6021      	streq	r1, [r4, #0]
 8004790:	e7ed      	b.n	800476e <_free_r+0x1e>
 8004792:	461a      	mov	r2, r3
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	b10b      	cbz	r3, 800479c <_free_r+0x4c>
 8004798:	42a3      	cmp	r3, r4
 800479a:	d9fa      	bls.n	8004792 <_free_r+0x42>
 800479c:	6811      	ldr	r1, [r2, #0]
 800479e:	1850      	adds	r0, r2, r1
 80047a0:	42a0      	cmp	r0, r4
 80047a2:	d10b      	bne.n	80047bc <_free_r+0x6c>
 80047a4:	6820      	ldr	r0, [r4, #0]
 80047a6:	4401      	add	r1, r0
 80047a8:	1850      	adds	r0, r2, r1
 80047aa:	4283      	cmp	r3, r0
 80047ac:	6011      	str	r1, [r2, #0]
 80047ae:	d1e0      	bne.n	8004772 <_free_r+0x22>
 80047b0:	6818      	ldr	r0, [r3, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	6053      	str	r3, [r2, #4]
 80047b6:	4408      	add	r0, r1
 80047b8:	6010      	str	r0, [r2, #0]
 80047ba:	e7da      	b.n	8004772 <_free_r+0x22>
 80047bc:	d902      	bls.n	80047c4 <_free_r+0x74>
 80047be:	230c      	movs	r3, #12
 80047c0:	602b      	str	r3, [r5, #0]
 80047c2:	e7d6      	b.n	8004772 <_free_r+0x22>
 80047c4:	6820      	ldr	r0, [r4, #0]
 80047c6:	1821      	adds	r1, r4, r0
 80047c8:	428b      	cmp	r3, r1
 80047ca:	bf04      	itt	eq
 80047cc:	6819      	ldreq	r1, [r3, #0]
 80047ce:	685b      	ldreq	r3, [r3, #4]
 80047d0:	6063      	str	r3, [r4, #4]
 80047d2:	bf04      	itt	eq
 80047d4:	1809      	addeq	r1, r1, r0
 80047d6:	6021      	streq	r1, [r4, #0]
 80047d8:	6054      	str	r4, [r2, #4]
 80047da:	e7ca      	b.n	8004772 <_free_r+0x22>
 80047dc:	bd38      	pop	{r3, r4, r5, pc}
 80047de:	bf00      	nop
 80047e0:	20000240 	.word	0x20000240

080047e4 <_malloc_usable_size_r>:
 80047e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047e8:	1f18      	subs	r0, r3, #4
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	bfbc      	itt	lt
 80047ee:	580b      	ldrlt	r3, [r1, r0]
 80047f0:	18c0      	addlt	r0, r0, r3
 80047f2:	4770      	bx	lr

080047f4 <__ssputs_r>:
 80047f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047f8:	688e      	ldr	r6, [r1, #8]
 80047fa:	461f      	mov	r7, r3
 80047fc:	42be      	cmp	r6, r7
 80047fe:	680b      	ldr	r3, [r1, #0]
 8004800:	4682      	mov	sl, r0
 8004802:	460c      	mov	r4, r1
 8004804:	4690      	mov	r8, r2
 8004806:	d82d      	bhi.n	8004864 <__ssputs_r+0x70>
 8004808:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800480c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004810:	d026      	beq.n	8004860 <__ssputs_r+0x6c>
 8004812:	6965      	ldr	r5, [r4, #20]
 8004814:	6909      	ldr	r1, [r1, #16]
 8004816:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800481a:	eba3 0901 	sub.w	r9, r3, r1
 800481e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004822:	1c7b      	adds	r3, r7, #1
 8004824:	444b      	add	r3, r9
 8004826:	106d      	asrs	r5, r5, #1
 8004828:	429d      	cmp	r5, r3
 800482a:	bf38      	it	cc
 800482c:	461d      	movcc	r5, r3
 800482e:	0553      	lsls	r3, r2, #21
 8004830:	d527      	bpl.n	8004882 <__ssputs_r+0x8e>
 8004832:	4629      	mov	r1, r5
 8004834:	f7ff fe24 	bl	8004480 <_malloc_r>
 8004838:	4606      	mov	r6, r0
 800483a:	b360      	cbz	r0, 8004896 <__ssputs_r+0xa2>
 800483c:	6921      	ldr	r1, [r4, #16]
 800483e:	464a      	mov	r2, r9
 8004840:	f7ff ff78 	bl	8004734 <memcpy>
 8004844:	89a3      	ldrh	r3, [r4, #12]
 8004846:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800484a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800484e:	81a3      	strh	r3, [r4, #12]
 8004850:	6126      	str	r6, [r4, #16]
 8004852:	6165      	str	r5, [r4, #20]
 8004854:	444e      	add	r6, r9
 8004856:	eba5 0509 	sub.w	r5, r5, r9
 800485a:	6026      	str	r6, [r4, #0]
 800485c:	60a5      	str	r5, [r4, #8]
 800485e:	463e      	mov	r6, r7
 8004860:	42be      	cmp	r6, r7
 8004862:	d900      	bls.n	8004866 <__ssputs_r+0x72>
 8004864:	463e      	mov	r6, r7
 8004866:	6820      	ldr	r0, [r4, #0]
 8004868:	4632      	mov	r2, r6
 800486a:	4641      	mov	r1, r8
 800486c:	f000 faa8 	bl	8004dc0 <memmove>
 8004870:	68a3      	ldr	r3, [r4, #8]
 8004872:	1b9b      	subs	r3, r3, r6
 8004874:	60a3      	str	r3, [r4, #8]
 8004876:	6823      	ldr	r3, [r4, #0]
 8004878:	4433      	add	r3, r6
 800487a:	6023      	str	r3, [r4, #0]
 800487c:	2000      	movs	r0, #0
 800487e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004882:	462a      	mov	r2, r5
 8004884:	f7ff fe90 	bl	80045a8 <_realloc_r>
 8004888:	4606      	mov	r6, r0
 800488a:	2800      	cmp	r0, #0
 800488c:	d1e0      	bne.n	8004850 <__ssputs_r+0x5c>
 800488e:	6921      	ldr	r1, [r4, #16]
 8004890:	4650      	mov	r0, sl
 8004892:	f7ff ff5d 	bl	8004750 <_free_r>
 8004896:	230c      	movs	r3, #12
 8004898:	f8ca 3000 	str.w	r3, [sl]
 800489c:	89a3      	ldrh	r3, [r4, #12]
 800489e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048a2:	81a3      	strh	r3, [r4, #12]
 80048a4:	f04f 30ff 	mov.w	r0, #4294967295
 80048a8:	e7e9      	b.n	800487e <__ssputs_r+0x8a>
	...

080048ac <_svfiprintf_r>:
 80048ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048b0:	4698      	mov	r8, r3
 80048b2:	898b      	ldrh	r3, [r1, #12]
 80048b4:	061b      	lsls	r3, r3, #24
 80048b6:	b09d      	sub	sp, #116	@ 0x74
 80048b8:	4607      	mov	r7, r0
 80048ba:	460d      	mov	r5, r1
 80048bc:	4614      	mov	r4, r2
 80048be:	d510      	bpl.n	80048e2 <_svfiprintf_r+0x36>
 80048c0:	690b      	ldr	r3, [r1, #16]
 80048c2:	b973      	cbnz	r3, 80048e2 <_svfiprintf_r+0x36>
 80048c4:	2140      	movs	r1, #64	@ 0x40
 80048c6:	f7ff fddb 	bl	8004480 <_malloc_r>
 80048ca:	6028      	str	r0, [r5, #0]
 80048cc:	6128      	str	r0, [r5, #16]
 80048ce:	b930      	cbnz	r0, 80048de <_svfiprintf_r+0x32>
 80048d0:	230c      	movs	r3, #12
 80048d2:	603b      	str	r3, [r7, #0]
 80048d4:	f04f 30ff 	mov.w	r0, #4294967295
 80048d8:	b01d      	add	sp, #116	@ 0x74
 80048da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048de:	2340      	movs	r3, #64	@ 0x40
 80048e0:	616b      	str	r3, [r5, #20]
 80048e2:	2300      	movs	r3, #0
 80048e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80048e6:	2320      	movs	r3, #32
 80048e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80048ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80048f0:	2330      	movs	r3, #48	@ 0x30
 80048f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004a90 <_svfiprintf_r+0x1e4>
 80048f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80048fa:	f04f 0901 	mov.w	r9, #1
 80048fe:	4623      	mov	r3, r4
 8004900:	469a      	mov	sl, r3
 8004902:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004906:	b10a      	cbz	r2, 800490c <_svfiprintf_r+0x60>
 8004908:	2a25      	cmp	r2, #37	@ 0x25
 800490a:	d1f9      	bne.n	8004900 <_svfiprintf_r+0x54>
 800490c:	ebba 0b04 	subs.w	fp, sl, r4
 8004910:	d00b      	beq.n	800492a <_svfiprintf_r+0x7e>
 8004912:	465b      	mov	r3, fp
 8004914:	4622      	mov	r2, r4
 8004916:	4629      	mov	r1, r5
 8004918:	4638      	mov	r0, r7
 800491a:	f7ff ff6b 	bl	80047f4 <__ssputs_r>
 800491e:	3001      	adds	r0, #1
 8004920:	f000 80a7 	beq.w	8004a72 <_svfiprintf_r+0x1c6>
 8004924:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004926:	445a      	add	r2, fp
 8004928:	9209      	str	r2, [sp, #36]	@ 0x24
 800492a:	f89a 3000 	ldrb.w	r3, [sl]
 800492e:	2b00      	cmp	r3, #0
 8004930:	f000 809f 	beq.w	8004a72 <_svfiprintf_r+0x1c6>
 8004934:	2300      	movs	r3, #0
 8004936:	f04f 32ff 	mov.w	r2, #4294967295
 800493a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800493e:	f10a 0a01 	add.w	sl, sl, #1
 8004942:	9304      	str	r3, [sp, #16]
 8004944:	9307      	str	r3, [sp, #28]
 8004946:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800494a:	931a      	str	r3, [sp, #104]	@ 0x68
 800494c:	4654      	mov	r4, sl
 800494e:	2205      	movs	r2, #5
 8004950:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004954:	484e      	ldr	r0, [pc, #312]	@ (8004a90 <_svfiprintf_r+0x1e4>)
 8004956:	f7fb fc43 	bl	80001e0 <memchr>
 800495a:	9a04      	ldr	r2, [sp, #16]
 800495c:	b9d8      	cbnz	r0, 8004996 <_svfiprintf_r+0xea>
 800495e:	06d0      	lsls	r0, r2, #27
 8004960:	bf44      	itt	mi
 8004962:	2320      	movmi	r3, #32
 8004964:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004968:	0711      	lsls	r1, r2, #28
 800496a:	bf44      	itt	mi
 800496c:	232b      	movmi	r3, #43	@ 0x2b
 800496e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004972:	f89a 3000 	ldrb.w	r3, [sl]
 8004976:	2b2a      	cmp	r3, #42	@ 0x2a
 8004978:	d015      	beq.n	80049a6 <_svfiprintf_r+0xfa>
 800497a:	9a07      	ldr	r2, [sp, #28]
 800497c:	4654      	mov	r4, sl
 800497e:	2000      	movs	r0, #0
 8004980:	f04f 0c0a 	mov.w	ip, #10
 8004984:	4621      	mov	r1, r4
 8004986:	f811 3b01 	ldrb.w	r3, [r1], #1
 800498a:	3b30      	subs	r3, #48	@ 0x30
 800498c:	2b09      	cmp	r3, #9
 800498e:	d94b      	bls.n	8004a28 <_svfiprintf_r+0x17c>
 8004990:	b1b0      	cbz	r0, 80049c0 <_svfiprintf_r+0x114>
 8004992:	9207      	str	r2, [sp, #28]
 8004994:	e014      	b.n	80049c0 <_svfiprintf_r+0x114>
 8004996:	eba0 0308 	sub.w	r3, r0, r8
 800499a:	fa09 f303 	lsl.w	r3, r9, r3
 800499e:	4313      	orrs	r3, r2
 80049a0:	9304      	str	r3, [sp, #16]
 80049a2:	46a2      	mov	sl, r4
 80049a4:	e7d2      	b.n	800494c <_svfiprintf_r+0xa0>
 80049a6:	9b03      	ldr	r3, [sp, #12]
 80049a8:	1d19      	adds	r1, r3, #4
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	9103      	str	r1, [sp, #12]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	bfbb      	ittet	lt
 80049b2:	425b      	neglt	r3, r3
 80049b4:	f042 0202 	orrlt.w	r2, r2, #2
 80049b8:	9307      	strge	r3, [sp, #28]
 80049ba:	9307      	strlt	r3, [sp, #28]
 80049bc:	bfb8      	it	lt
 80049be:	9204      	strlt	r2, [sp, #16]
 80049c0:	7823      	ldrb	r3, [r4, #0]
 80049c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80049c4:	d10a      	bne.n	80049dc <_svfiprintf_r+0x130>
 80049c6:	7863      	ldrb	r3, [r4, #1]
 80049c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80049ca:	d132      	bne.n	8004a32 <_svfiprintf_r+0x186>
 80049cc:	9b03      	ldr	r3, [sp, #12]
 80049ce:	1d1a      	adds	r2, r3, #4
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	9203      	str	r2, [sp, #12]
 80049d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80049d8:	3402      	adds	r4, #2
 80049da:	9305      	str	r3, [sp, #20]
 80049dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004aa0 <_svfiprintf_r+0x1f4>
 80049e0:	7821      	ldrb	r1, [r4, #0]
 80049e2:	2203      	movs	r2, #3
 80049e4:	4650      	mov	r0, sl
 80049e6:	f7fb fbfb 	bl	80001e0 <memchr>
 80049ea:	b138      	cbz	r0, 80049fc <_svfiprintf_r+0x150>
 80049ec:	9b04      	ldr	r3, [sp, #16]
 80049ee:	eba0 000a 	sub.w	r0, r0, sl
 80049f2:	2240      	movs	r2, #64	@ 0x40
 80049f4:	4082      	lsls	r2, r0
 80049f6:	4313      	orrs	r3, r2
 80049f8:	3401      	adds	r4, #1
 80049fa:	9304      	str	r3, [sp, #16]
 80049fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a00:	4824      	ldr	r0, [pc, #144]	@ (8004a94 <_svfiprintf_r+0x1e8>)
 8004a02:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004a06:	2206      	movs	r2, #6
 8004a08:	f7fb fbea 	bl	80001e0 <memchr>
 8004a0c:	2800      	cmp	r0, #0
 8004a0e:	d036      	beq.n	8004a7e <_svfiprintf_r+0x1d2>
 8004a10:	4b21      	ldr	r3, [pc, #132]	@ (8004a98 <_svfiprintf_r+0x1ec>)
 8004a12:	bb1b      	cbnz	r3, 8004a5c <_svfiprintf_r+0x1b0>
 8004a14:	9b03      	ldr	r3, [sp, #12]
 8004a16:	3307      	adds	r3, #7
 8004a18:	f023 0307 	bic.w	r3, r3, #7
 8004a1c:	3308      	adds	r3, #8
 8004a1e:	9303      	str	r3, [sp, #12]
 8004a20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a22:	4433      	add	r3, r6
 8004a24:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a26:	e76a      	b.n	80048fe <_svfiprintf_r+0x52>
 8004a28:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a2c:	460c      	mov	r4, r1
 8004a2e:	2001      	movs	r0, #1
 8004a30:	e7a8      	b.n	8004984 <_svfiprintf_r+0xd8>
 8004a32:	2300      	movs	r3, #0
 8004a34:	3401      	adds	r4, #1
 8004a36:	9305      	str	r3, [sp, #20]
 8004a38:	4619      	mov	r1, r3
 8004a3a:	f04f 0c0a 	mov.w	ip, #10
 8004a3e:	4620      	mov	r0, r4
 8004a40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a44:	3a30      	subs	r2, #48	@ 0x30
 8004a46:	2a09      	cmp	r2, #9
 8004a48:	d903      	bls.n	8004a52 <_svfiprintf_r+0x1a6>
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d0c6      	beq.n	80049dc <_svfiprintf_r+0x130>
 8004a4e:	9105      	str	r1, [sp, #20]
 8004a50:	e7c4      	b.n	80049dc <_svfiprintf_r+0x130>
 8004a52:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a56:	4604      	mov	r4, r0
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e7f0      	b.n	8004a3e <_svfiprintf_r+0x192>
 8004a5c:	ab03      	add	r3, sp, #12
 8004a5e:	9300      	str	r3, [sp, #0]
 8004a60:	462a      	mov	r2, r5
 8004a62:	4b0e      	ldr	r3, [pc, #56]	@ (8004a9c <_svfiprintf_r+0x1f0>)
 8004a64:	a904      	add	r1, sp, #16
 8004a66:	4638      	mov	r0, r7
 8004a68:	f3af 8000 	nop.w
 8004a6c:	1c42      	adds	r2, r0, #1
 8004a6e:	4606      	mov	r6, r0
 8004a70:	d1d6      	bne.n	8004a20 <_svfiprintf_r+0x174>
 8004a72:	89ab      	ldrh	r3, [r5, #12]
 8004a74:	065b      	lsls	r3, r3, #25
 8004a76:	f53f af2d 	bmi.w	80048d4 <_svfiprintf_r+0x28>
 8004a7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004a7c:	e72c      	b.n	80048d8 <_svfiprintf_r+0x2c>
 8004a7e:	ab03      	add	r3, sp, #12
 8004a80:	9300      	str	r3, [sp, #0]
 8004a82:	462a      	mov	r2, r5
 8004a84:	4b05      	ldr	r3, [pc, #20]	@ (8004a9c <_svfiprintf_r+0x1f0>)
 8004a86:	a904      	add	r1, sp, #16
 8004a88:	4638      	mov	r0, r7
 8004a8a:	f000 f879 	bl	8004b80 <_printf_i>
 8004a8e:	e7ed      	b.n	8004a6c <_svfiprintf_r+0x1c0>
 8004a90:	08005018 	.word	0x08005018
 8004a94:	08005022 	.word	0x08005022
 8004a98:	00000000 	.word	0x00000000
 8004a9c:	080047f5 	.word	0x080047f5
 8004aa0:	0800501e 	.word	0x0800501e

08004aa4 <_printf_common>:
 8004aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004aa8:	4616      	mov	r6, r2
 8004aaa:	4698      	mov	r8, r3
 8004aac:	688a      	ldr	r2, [r1, #8]
 8004aae:	690b      	ldr	r3, [r1, #16]
 8004ab0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	bfb8      	it	lt
 8004ab8:	4613      	movlt	r3, r2
 8004aba:	6033      	str	r3, [r6, #0]
 8004abc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004ac0:	4607      	mov	r7, r0
 8004ac2:	460c      	mov	r4, r1
 8004ac4:	b10a      	cbz	r2, 8004aca <_printf_common+0x26>
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	6033      	str	r3, [r6, #0]
 8004aca:	6823      	ldr	r3, [r4, #0]
 8004acc:	0699      	lsls	r1, r3, #26
 8004ace:	bf42      	ittt	mi
 8004ad0:	6833      	ldrmi	r3, [r6, #0]
 8004ad2:	3302      	addmi	r3, #2
 8004ad4:	6033      	strmi	r3, [r6, #0]
 8004ad6:	6825      	ldr	r5, [r4, #0]
 8004ad8:	f015 0506 	ands.w	r5, r5, #6
 8004adc:	d106      	bne.n	8004aec <_printf_common+0x48>
 8004ade:	f104 0a19 	add.w	sl, r4, #25
 8004ae2:	68e3      	ldr	r3, [r4, #12]
 8004ae4:	6832      	ldr	r2, [r6, #0]
 8004ae6:	1a9b      	subs	r3, r3, r2
 8004ae8:	42ab      	cmp	r3, r5
 8004aea:	dc26      	bgt.n	8004b3a <_printf_common+0x96>
 8004aec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004af0:	6822      	ldr	r2, [r4, #0]
 8004af2:	3b00      	subs	r3, #0
 8004af4:	bf18      	it	ne
 8004af6:	2301      	movne	r3, #1
 8004af8:	0692      	lsls	r2, r2, #26
 8004afa:	d42b      	bmi.n	8004b54 <_printf_common+0xb0>
 8004afc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004b00:	4641      	mov	r1, r8
 8004b02:	4638      	mov	r0, r7
 8004b04:	47c8      	blx	r9
 8004b06:	3001      	adds	r0, #1
 8004b08:	d01e      	beq.n	8004b48 <_printf_common+0xa4>
 8004b0a:	6823      	ldr	r3, [r4, #0]
 8004b0c:	6922      	ldr	r2, [r4, #16]
 8004b0e:	f003 0306 	and.w	r3, r3, #6
 8004b12:	2b04      	cmp	r3, #4
 8004b14:	bf02      	ittt	eq
 8004b16:	68e5      	ldreq	r5, [r4, #12]
 8004b18:	6833      	ldreq	r3, [r6, #0]
 8004b1a:	1aed      	subeq	r5, r5, r3
 8004b1c:	68a3      	ldr	r3, [r4, #8]
 8004b1e:	bf0c      	ite	eq
 8004b20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b24:	2500      	movne	r5, #0
 8004b26:	4293      	cmp	r3, r2
 8004b28:	bfc4      	itt	gt
 8004b2a:	1a9b      	subgt	r3, r3, r2
 8004b2c:	18ed      	addgt	r5, r5, r3
 8004b2e:	2600      	movs	r6, #0
 8004b30:	341a      	adds	r4, #26
 8004b32:	42b5      	cmp	r5, r6
 8004b34:	d11a      	bne.n	8004b6c <_printf_common+0xc8>
 8004b36:	2000      	movs	r0, #0
 8004b38:	e008      	b.n	8004b4c <_printf_common+0xa8>
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	4652      	mov	r2, sl
 8004b3e:	4641      	mov	r1, r8
 8004b40:	4638      	mov	r0, r7
 8004b42:	47c8      	blx	r9
 8004b44:	3001      	adds	r0, #1
 8004b46:	d103      	bne.n	8004b50 <_printf_common+0xac>
 8004b48:	f04f 30ff 	mov.w	r0, #4294967295
 8004b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b50:	3501      	adds	r5, #1
 8004b52:	e7c6      	b.n	8004ae2 <_printf_common+0x3e>
 8004b54:	18e1      	adds	r1, r4, r3
 8004b56:	1c5a      	adds	r2, r3, #1
 8004b58:	2030      	movs	r0, #48	@ 0x30
 8004b5a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004b5e:	4422      	add	r2, r4
 8004b60:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004b64:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004b68:	3302      	adds	r3, #2
 8004b6a:	e7c7      	b.n	8004afc <_printf_common+0x58>
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	4622      	mov	r2, r4
 8004b70:	4641      	mov	r1, r8
 8004b72:	4638      	mov	r0, r7
 8004b74:	47c8      	blx	r9
 8004b76:	3001      	adds	r0, #1
 8004b78:	d0e6      	beq.n	8004b48 <_printf_common+0xa4>
 8004b7a:	3601      	adds	r6, #1
 8004b7c:	e7d9      	b.n	8004b32 <_printf_common+0x8e>
	...

08004b80 <_printf_i>:
 8004b80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b84:	7e0f      	ldrb	r7, [r1, #24]
 8004b86:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004b88:	2f78      	cmp	r7, #120	@ 0x78
 8004b8a:	4691      	mov	r9, r2
 8004b8c:	4680      	mov	r8, r0
 8004b8e:	460c      	mov	r4, r1
 8004b90:	469a      	mov	sl, r3
 8004b92:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004b96:	d807      	bhi.n	8004ba8 <_printf_i+0x28>
 8004b98:	2f62      	cmp	r7, #98	@ 0x62
 8004b9a:	d80a      	bhi.n	8004bb2 <_printf_i+0x32>
 8004b9c:	2f00      	cmp	r7, #0
 8004b9e:	f000 80d2 	beq.w	8004d46 <_printf_i+0x1c6>
 8004ba2:	2f58      	cmp	r7, #88	@ 0x58
 8004ba4:	f000 80b9 	beq.w	8004d1a <_printf_i+0x19a>
 8004ba8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004bac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004bb0:	e03a      	b.n	8004c28 <_printf_i+0xa8>
 8004bb2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004bb6:	2b15      	cmp	r3, #21
 8004bb8:	d8f6      	bhi.n	8004ba8 <_printf_i+0x28>
 8004bba:	a101      	add	r1, pc, #4	@ (adr r1, 8004bc0 <_printf_i+0x40>)
 8004bbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004bc0:	08004c19 	.word	0x08004c19
 8004bc4:	08004c2d 	.word	0x08004c2d
 8004bc8:	08004ba9 	.word	0x08004ba9
 8004bcc:	08004ba9 	.word	0x08004ba9
 8004bd0:	08004ba9 	.word	0x08004ba9
 8004bd4:	08004ba9 	.word	0x08004ba9
 8004bd8:	08004c2d 	.word	0x08004c2d
 8004bdc:	08004ba9 	.word	0x08004ba9
 8004be0:	08004ba9 	.word	0x08004ba9
 8004be4:	08004ba9 	.word	0x08004ba9
 8004be8:	08004ba9 	.word	0x08004ba9
 8004bec:	08004d2d 	.word	0x08004d2d
 8004bf0:	08004c57 	.word	0x08004c57
 8004bf4:	08004ce7 	.word	0x08004ce7
 8004bf8:	08004ba9 	.word	0x08004ba9
 8004bfc:	08004ba9 	.word	0x08004ba9
 8004c00:	08004d4f 	.word	0x08004d4f
 8004c04:	08004ba9 	.word	0x08004ba9
 8004c08:	08004c57 	.word	0x08004c57
 8004c0c:	08004ba9 	.word	0x08004ba9
 8004c10:	08004ba9 	.word	0x08004ba9
 8004c14:	08004cef 	.word	0x08004cef
 8004c18:	6833      	ldr	r3, [r6, #0]
 8004c1a:	1d1a      	adds	r2, r3, #4
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	6032      	str	r2, [r6, #0]
 8004c20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c24:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e09d      	b.n	8004d68 <_printf_i+0x1e8>
 8004c2c:	6833      	ldr	r3, [r6, #0]
 8004c2e:	6820      	ldr	r0, [r4, #0]
 8004c30:	1d19      	adds	r1, r3, #4
 8004c32:	6031      	str	r1, [r6, #0]
 8004c34:	0606      	lsls	r6, r0, #24
 8004c36:	d501      	bpl.n	8004c3c <_printf_i+0xbc>
 8004c38:	681d      	ldr	r5, [r3, #0]
 8004c3a:	e003      	b.n	8004c44 <_printf_i+0xc4>
 8004c3c:	0645      	lsls	r5, r0, #25
 8004c3e:	d5fb      	bpl.n	8004c38 <_printf_i+0xb8>
 8004c40:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004c44:	2d00      	cmp	r5, #0
 8004c46:	da03      	bge.n	8004c50 <_printf_i+0xd0>
 8004c48:	232d      	movs	r3, #45	@ 0x2d
 8004c4a:	426d      	negs	r5, r5
 8004c4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c50:	4859      	ldr	r0, [pc, #356]	@ (8004db8 <_printf_i+0x238>)
 8004c52:	230a      	movs	r3, #10
 8004c54:	e011      	b.n	8004c7a <_printf_i+0xfa>
 8004c56:	6821      	ldr	r1, [r4, #0]
 8004c58:	6833      	ldr	r3, [r6, #0]
 8004c5a:	0608      	lsls	r0, r1, #24
 8004c5c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004c60:	d402      	bmi.n	8004c68 <_printf_i+0xe8>
 8004c62:	0649      	lsls	r1, r1, #25
 8004c64:	bf48      	it	mi
 8004c66:	b2ad      	uxthmi	r5, r5
 8004c68:	2f6f      	cmp	r7, #111	@ 0x6f
 8004c6a:	4853      	ldr	r0, [pc, #332]	@ (8004db8 <_printf_i+0x238>)
 8004c6c:	6033      	str	r3, [r6, #0]
 8004c6e:	bf14      	ite	ne
 8004c70:	230a      	movne	r3, #10
 8004c72:	2308      	moveq	r3, #8
 8004c74:	2100      	movs	r1, #0
 8004c76:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004c7a:	6866      	ldr	r6, [r4, #4]
 8004c7c:	60a6      	str	r6, [r4, #8]
 8004c7e:	2e00      	cmp	r6, #0
 8004c80:	bfa2      	ittt	ge
 8004c82:	6821      	ldrge	r1, [r4, #0]
 8004c84:	f021 0104 	bicge.w	r1, r1, #4
 8004c88:	6021      	strge	r1, [r4, #0]
 8004c8a:	b90d      	cbnz	r5, 8004c90 <_printf_i+0x110>
 8004c8c:	2e00      	cmp	r6, #0
 8004c8e:	d04b      	beq.n	8004d28 <_printf_i+0x1a8>
 8004c90:	4616      	mov	r6, r2
 8004c92:	fbb5 f1f3 	udiv	r1, r5, r3
 8004c96:	fb03 5711 	mls	r7, r3, r1, r5
 8004c9a:	5dc7      	ldrb	r7, [r0, r7]
 8004c9c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004ca0:	462f      	mov	r7, r5
 8004ca2:	42bb      	cmp	r3, r7
 8004ca4:	460d      	mov	r5, r1
 8004ca6:	d9f4      	bls.n	8004c92 <_printf_i+0x112>
 8004ca8:	2b08      	cmp	r3, #8
 8004caa:	d10b      	bne.n	8004cc4 <_printf_i+0x144>
 8004cac:	6823      	ldr	r3, [r4, #0]
 8004cae:	07df      	lsls	r7, r3, #31
 8004cb0:	d508      	bpl.n	8004cc4 <_printf_i+0x144>
 8004cb2:	6923      	ldr	r3, [r4, #16]
 8004cb4:	6861      	ldr	r1, [r4, #4]
 8004cb6:	4299      	cmp	r1, r3
 8004cb8:	bfde      	ittt	le
 8004cba:	2330      	movle	r3, #48	@ 0x30
 8004cbc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004cc0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004cc4:	1b92      	subs	r2, r2, r6
 8004cc6:	6122      	str	r2, [r4, #16]
 8004cc8:	f8cd a000 	str.w	sl, [sp]
 8004ccc:	464b      	mov	r3, r9
 8004cce:	aa03      	add	r2, sp, #12
 8004cd0:	4621      	mov	r1, r4
 8004cd2:	4640      	mov	r0, r8
 8004cd4:	f7ff fee6 	bl	8004aa4 <_printf_common>
 8004cd8:	3001      	adds	r0, #1
 8004cda:	d14a      	bne.n	8004d72 <_printf_i+0x1f2>
 8004cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ce0:	b004      	add	sp, #16
 8004ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ce6:	6823      	ldr	r3, [r4, #0]
 8004ce8:	f043 0320 	orr.w	r3, r3, #32
 8004cec:	6023      	str	r3, [r4, #0]
 8004cee:	4833      	ldr	r0, [pc, #204]	@ (8004dbc <_printf_i+0x23c>)
 8004cf0:	2778      	movs	r7, #120	@ 0x78
 8004cf2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004cf6:	6823      	ldr	r3, [r4, #0]
 8004cf8:	6831      	ldr	r1, [r6, #0]
 8004cfa:	061f      	lsls	r7, r3, #24
 8004cfc:	f851 5b04 	ldr.w	r5, [r1], #4
 8004d00:	d402      	bmi.n	8004d08 <_printf_i+0x188>
 8004d02:	065f      	lsls	r7, r3, #25
 8004d04:	bf48      	it	mi
 8004d06:	b2ad      	uxthmi	r5, r5
 8004d08:	6031      	str	r1, [r6, #0]
 8004d0a:	07d9      	lsls	r1, r3, #31
 8004d0c:	bf44      	itt	mi
 8004d0e:	f043 0320 	orrmi.w	r3, r3, #32
 8004d12:	6023      	strmi	r3, [r4, #0]
 8004d14:	b11d      	cbz	r5, 8004d1e <_printf_i+0x19e>
 8004d16:	2310      	movs	r3, #16
 8004d18:	e7ac      	b.n	8004c74 <_printf_i+0xf4>
 8004d1a:	4827      	ldr	r0, [pc, #156]	@ (8004db8 <_printf_i+0x238>)
 8004d1c:	e7e9      	b.n	8004cf2 <_printf_i+0x172>
 8004d1e:	6823      	ldr	r3, [r4, #0]
 8004d20:	f023 0320 	bic.w	r3, r3, #32
 8004d24:	6023      	str	r3, [r4, #0]
 8004d26:	e7f6      	b.n	8004d16 <_printf_i+0x196>
 8004d28:	4616      	mov	r6, r2
 8004d2a:	e7bd      	b.n	8004ca8 <_printf_i+0x128>
 8004d2c:	6833      	ldr	r3, [r6, #0]
 8004d2e:	6825      	ldr	r5, [r4, #0]
 8004d30:	6961      	ldr	r1, [r4, #20]
 8004d32:	1d18      	adds	r0, r3, #4
 8004d34:	6030      	str	r0, [r6, #0]
 8004d36:	062e      	lsls	r6, r5, #24
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	d501      	bpl.n	8004d40 <_printf_i+0x1c0>
 8004d3c:	6019      	str	r1, [r3, #0]
 8004d3e:	e002      	b.n	8004d46 <_printf_i+0x1c6>
 8004d40:	0668      	lsls	r0, r5, #25
 8004d42:	d5fb      	bpl.n	8004d3c <_printf_i+0x1bc>
 8004d44:	8019      	strh	r1, [r3, #0]
 8004d46:	2300      	movs	r3, #0
 8004d48:	6123      	str	r3, [r4, #16]
 8004d4a:	4616      	mov	r6, r2
 8004d4c:	e7bc      	b.n	8004cc8 <_printf_i+0x148>
 8004d4e:	6833      	ldr	r3, [r6, #0]
 8004d50:	1d1a      	adds	r2, r3, #4
 8004d52:	6032      	str	r2, [r6, #0]
 8004d54:	681e      	ldr	r6, [r3, #0]
 8004d56:	6862      	ldr	r2, [r4, #4]
 8004d58:	2100      	movs	r1, #0
 8004d5a:	4630      	mov	r0, r6
 8004d5c:	f7fb fa40 	bl	80001e0 <memchr>
 8004d60:	b108      	cbz	r0, 8004d66 <_printf_i+0x1e6>
 8004d62:	1b80      	subs	r0, r0, r6
 8004d64:	6060      	str	r0, [r4, #4]
 8004d66:	6863      	ldr	r3, [r4, #4]
 8004d68:	6123      	str	r3, [r4, #16]
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d70:	e7aa      	b.n	8004cc8 <_printf_i+0x148>
 8004d72:	6923      	ldr	r3, [r4, #16]
 8004d74:	4632      	mov	r2, r6
 8004d76:	4649      	mov	r1, r9
 8004d78:	4640      	mov	r0, r8
 8004d7a:	47d0      	blx	sl
 8004d7c:	3001      	adds	r0, #1
 8004d7e:	d0ad      	beq.n	8004cdc <_printf_i+0x15c>
 8004d80:	6823      	ldr	r3, [r4, #0]
 8004d82:	079b      	lsls	r3, r3, #30
 8004d84:	d413      	bmi.n	8004dae <_printf_i+0x22e>
 8004d86:	68e0      	ldr	r0, [r4, #12]
 8004d88:	9b03      	ldr	r3, [sp, #12]
 8004d8a:	4298      	cmp	r0, r3
 8004d8c:	bfb8      	it	lt
 8004d8e:	4618      	movlt	r0, r3
 8004d90:	e7a6      	b.n	8004ce0 <_printf_i+0x160>
 8004d92:	2301      	movs	r3, #1
 8004d94:	4632      	mov	r2, r6
 8004d96:	4649      	mov	r1, r9
 8004d98:	4640      	mov	r0, r8
 8004d9a:	47d0      	blx	sl
 8004d9c:	3001      	adds	r0, #1
 8004d9e:	d09d      	beq.n	8004cdc <_printf_i+0x15c>
 8004da0:	3501      	adds	r5, #1
 8004da2:	68e3      	ldr	r3, [r4, #12]
 8004da4:	9903      	ldr	r1, [sp, #12]
 8004da6:	1a5b      	subs	r3, r3, r1
 8004da8:	42ab      	cmp	r3, r5
 8004daa:	dcf2      	bgt.n	8004d92 <_printf_i+0x212>
 8004dac:	e7eb      	b.n	8004d86 <_printf_i+0x206>
 8004dae:	2500      	movs	r5, #0
 8004db0:	f104 0619 	add.w	r6, r4, #25
 8004db4:	e7f5      	b.n	8004da2 <_printf_i+0x222>
 8004db6:	bf00      	nop
 8004db8:	08005029 	.word	0x08005029
 8004dbc:	0800503a 	.word	0x0800503a

08004dc0 <memmove>:
 8004dc0:	4288      	cmp	r0, r1
 8004dc2:	b510      	push	{r4, lr}
 8004dc4:	eb01 0402 	add.w	r4, r1, r2
 8004dc8:	d902      	bls.n	8004dd0 <memmove+0x10>
 8004dca:	4284      	cmp	r4, r0
 8004dcc:	4623      	mov	r3, r4
 8004dce:	d807      	bhi.n	8004de0 <memmove+0x20>
 8004dd0:	1e43      	subs	r3, r0, #1
 8004dd2:	42a1      	cmp	r1, r4
 8004dd4:	d008      	beq.n	8004de8 <memmove+0x28>
 8004dd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004dda:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004dde:	e7f8      	b.n	8004dd2 <memmove+0x12>
 8004de0:	4402      	add	r2, r0
 8004de2:	4601      	mov	r1, r0
 8004de4:	428a      	cmp	r2, r1
 8004de6:	d100      	bne.n	8004dea <memmove+0x2a>
 8004de8:	bd10      	pop	{r4, pc}
 8004dea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004dee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004df2:	e7f7      	b.n	8004de4 <memmove+0x24>

08004df4 <_init>:
 8004df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004df6:	bf00      	nop
 8004df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dfa:	bc08      	pop	{r3}
 8004dfc:	469e      	mov	lr, r3
 8004dfe:	4770      	bx	lr

08004e00 <_fini>:
 8004e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e02:	bf00      	nop
 8004e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e06:	bc08      	pop	{r3}
 8004e08:	469e      	mov	lr, r3
 8004e0a:	4770      	bx	lr
