
BASELIQ_100.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009524  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000548  080096d8  080096d8  0000a6d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c20  08009c20  0000b334  2**0
                  CONTENTS
  4 .ARM          00000008  08009c20  08009c20  0000ac20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c28  08009c28  0000b334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c28  08009c28  0000ac28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c2c  08009c2c  0000ac2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000334  20000000  08009c30  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d04  20000334  08009f64  0000b334  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001038  08009f64  0000c038  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b334  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016ccb  00000000  00000000  0000b364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a26  00000000  00000000  0002202f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001220  00000000  00000000  00025a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dbf  00000000  00000000  00026c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d0ff  00000000  00000000  00027a37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a0a3  00000000  00000000  00054b36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000feab6  00000000  00000000  0006ebd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016d68f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b60  00000000  00000000  0016d6d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00173234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000334 	.word	0x20000334
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080096bc 	.word	0x080096bc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000338 	.word	0x20000338
 80001ec:	080096bc 	.word	0x080096bc

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b96a 	b.w	8000eb4 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	460c      	mov	r4, r1
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d14e      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c04:	4694      	mov	ip, r2
 8000c06:	458c      	cmp	ip, r1
 8000c08:	4686      	mov	lr, r0
 8000c0a:	fab2 f282 	clz	r2, r2
 8000c0e:	d962      	bls.n	8000cd6 <__udivmoddi4+0xde>
 8000c10:	b14a      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c12:	f1c2 0320 	rsb	r3, r2, #32
 8000c16:	4091      	lsls	r1, r2
 8000c18:	fa20 f303 	lsr.w	r3, r0, r3
 8000c1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c20:	4319      	orrs	r1, r3
 8000c22:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c2a:	fa1f f68c 	uxth.w	r6, ip
 8000c2e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c36:	fb07 1114 	mls	r1, r7, r4, r1
 8000c3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3e:	fb04 f106 	mul.w	r1, r4, r6
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c4e:	f080 8112 	bcs.w	8000e76 <__udivmoddi4+0x27e>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 810f 	bls.w	8000e76 <__udivmoddi4+0x27e>
 8000c58:	3c02      	subs	r4, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a59      	subs	r1, r3, r1
 8000c5e:	fa1f f38e 	uxth.w	r3, lr
 8000c62:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c66:	fb07 1110 	mls	r1, r7, r0, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb00 f606 	mul.w	r6, r0, r6
 8000c72:	429e      	cmp	r6, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x94>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c7e:	f080 80fc 	bcs.w	8000e7a <__udivmoddi4+0x282>
 8000c82:	429e      	cmp	r6, r3
 8000c84:	f240 80f9 	bls.w	8000e7a <__udivmoddi4+0x282>
 8000c88:	4463      	add	r3, ip
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	1b9b      	subs	r3, r3, r6
 8000c8e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c92:	2100      	movs	r1, #0
 8000c94:	b11d      	cbz	r5, 8000c9e <__udivmoddi4+0xa6>
 8000c96:	40d3      	lsrs	r3, r2
 8000c98:	2200      	movs	r2, #0
 8000c9a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d905      	bls.n	8000cb2 <__udivmoddi4+0xba>
 8000ca6:	b10d      	cbz	r5, 8000cac <__udivmoddi4+0xb4>
 8000ca8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cac:	2100      	movs	r1, #0
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e7f5      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000cb2:	fab3 f183 	clz	r1, r3
 8000cb6:	2900      	cmp	r1, #0
 8000cb8:	d146      	bne.n	8000d48 <__udivmoddi4+0x150>
 8000cba:	42a3      	cmp	r3, r4
 8000cbc:	d302      	bcc.n	8000cc4 <__udivmoddi4+0xcc>
 8000cbe:	4290      	cmp	r0, r2
 8000cc0:	f0c0 80f0 	bcc.w	8000ea4 <__udivmoddi4+0x2ac>
 8000cc4:	1a86      	subs	r6, r0, r2
 8000cc6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cca:	2001      	movs	r0, #1
 8000ccc:	2d00      	cmp	r5, #0
 8000cce:	d0e6      	beq.n	8000c9e <__udivmoddi4+0xa6>
 8000cd0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cd4:	e7e3      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	f040 8090 	bne.w	8000dfc <__udivmoddi4+0x204>
 8000cdc:	eba1 040c 	sub.w	r4, r1, ip
 8000ce0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce4:	fa1f f78c 	uxth.w	r7, ip
 8000ce8:	2101      	movs	r1, #1
 8000cea:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cf6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cfa:	fb07 f006 	mul.w	r0, r7, r6
 8000cfe:	4298      	cmp	r0, r3
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x11c>
 8000d02:	eb1c 0303 	adds.w	r3, ip, r3
 8000d06:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x11a>
 8000d0c:	4298      	cmp	r0, r3
 8000d0e:	f200 80cd 	bhi.w	8000eac <__udivmoddi4+0x2b4>
 8000d12:	4626      	mov	r6, r4
 8000d14:	1a1c      	subs	r4, r3, r0
 8000d16:	fa1f f38e 	uxth.w	r3, lr
 8000d1a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d1e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d26:	fb00 f707 	mul.w	r7, r0, r7
 8000d2a:	429f      	cmp	r7, r3
 8000d2c:	d908      	bls.n	8000d40 <__udivmoddi4+0x148>
 8000d2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d32:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d36:	d202      	bcs.n	8000d3e <__udivmoddi4+0x146>
 8000d38:	429f      	cmp	r7, r3
 8000d3a:	f200 80b0 	bhi.w	8000e9e <__udivmoddi4+0x2a6>
 8000d3e:	4620      	mov	r0, r4
 8000d40:	1bdb      	subs	r3, r3, r7
 8000d42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d46:	e7a5      	b.n	8000c94 <__udivmoddi4+0x9c>
 8000d48:	f1c1 0620 	rsb	r6, r1, #32
 8000d4c:	408b      	lsls	r3, r1
 8000d4e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d52:	431f      	orrs	r7, r3
 8000d54:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d58:	fa04 f301 	lsl.w	r3, r4, r1
 8000d5c:	ea43 030c 	orr.w	r3, r3, ip
 8000d60:	40f4      	lsrs	r4, r6
 8000d62:	fa00 f801 	lsl.w	r8, r0, r1
 8000d66:	0c38      	lsrs	r0, r7, #16
 8000d68:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d6c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d70:	fa1f fc87 	uxth.w	ip, r7
 8000d74:	fb00 441e 	mls	r4, r0, lr, r4
 8000d78:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d7c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d80:	45a1      	cmp	r9, r4
 8000d82:	fa02 f201 	lsl.w	r2, r2, r1
 8000d86:	d90a      	bls.n	8000d9e <__udivmoddi4+0x1a6>
 8000d88:	193c      	adds	r4, r7, r4
 8000d8a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d8e:	f080 8084 	bcs.w	8000e9a <__udivmoddi4+0x2a2>
 8000d92:	45a1      	cmp	r9, r4
 8000d94:	f240 8081 	bls.w	8000e9a <__udivmoddi4+0x2a2>
 8000d98:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d9c:	443c      	add	r4, r7
 8000d9e:	eba4 0409 	sub.w	r4, r4, r9
 8000da2:	fa1f f983 	uxth.w	r9, r3
 8000da6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000daa:	fb00 4413 	mls	r4, r0, r3, r4
 8000dae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000db2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000db6:	45a4      	cmp	ip, r4
 8000db8:	d907      	bls.n	8000dca <__udivmoddi4+0x1d2>
 8000dba:	193c      	adds	r4, r7, r4
 8000dbc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dc0:	d267      	bcs.n	8000e92 <__udivmoddi4+0x29a>
 8000dc2:	45a4      	cmp	ip, r4
 8000dc4:	d965      	bls.n	8000e92 <__udivmoddi4+0x29a>
 8000dc6:	3b02      	subs	r3, #2
 8000dc8:	443c      	add	r4, r7
 8000dca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dce:	fba0 9302 	umull	r9, r3, r0, r2
 8000dd2:	eba4 040c 	sub.w	r4, r4, ip
 8000dd6:	429c      	cmp	r4, r3
 8000dd8:	46ce      	mov	lr, r9
 8000dda:	469c      	mov	ip, r3
 8000ddc:	d351      	bcc.n	8000e82 <__udivmoddi4+0x28a>
 8000dde:	d04e      	beq.n	8000e7e <__udivmoddi4+0x286>
 8000de0:	b155      	cbz	r5, 8000df8 <__udivmoddi4+0x200>
 8000de2:	ebb8 030e 	subs.w	r3, r8, lr
 8000de6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dea:	fa04 f606 	lsl.w	r6, r4, r6
 8000dee:	40cb      	lsrs	r3, r1
 8000df0:	431e      	orrs	r6, r3
 8000df2:	40cc      	lsrs	r4, r1
 8000df4:	e9c5 6400 	strd	r6, r4, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	e750      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000dfc:	f1c2 0320 	rsb	r3, r2, #32
 8000e00:	fa20 f103 	lsr.w	r1, r0, r3
 8000e04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e08:	fa24 f303 	lsr.w	r3, r4, r3
 8000e0c:	4094      	lsls	r4, r2
 8000e0e:	430c      	orrs	r4, r1
 8000e10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e18:	fa1f f78c 	uxth.w	r7, ip
 8000e1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e20:	fb08 3110 	mls	r1, r8, r0, r3
 8000e24:	0c23      	lsrs	r3, r4, #16
 8000e26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e2a:	fb00 f107 	mul.w	r1, r0, r7
 8000e2e:	4299      	cmp	r1, r3
 8000e30:	d908      	bls.n	8000e44 <__udivmoddi4+0x24c>
 8000e32:	eb1c 0303 	adds.w	r3, ip, r3
 8000e36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e3a:	d22c      	bcs.n	8000e96 <__udivmoddi4+0x29e>
 8000e3c:	4299      	cmp	r1, r3
 8000e3e:	d92a      	bls.n	8000e96 <__udivmoddi4+0x29e>
 8000e40:	3802      	subs	r0, #2
 8000e42:	4463      	add	r3, ip
 8000e44:	1a5b      	subs	r3, r3, r1
 8000e46:	b2a4      	uxth	r4, r4
 8000e48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e54:	fb01 f307 	mul.w	r3, r1, r7
 8000e58:	42a3      	cmp	r3, r4
 8000e5a:	d908      	bls.n	8000e6e <__udivmoddi4+0x276>
 8000e5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e64:	d213      	bcs.n	8000e8e <__udivmoddi4+0x296>
 8000e66:	42a3      	cmp	r3, r4
 8000e68:	d911      	bls.n	8000e8e <__udivmoddi4+0x296>
 8000e6a:	3902      	subs	r1, #2
 8000e6c:	4464      	add	r4, ip
 8000e6e:	1ae4      	subs	r4, r4, r3
 8000e70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e74:	e739      	b.n	8000cea <__udivmoddi4+0xf2>
 8000e76:	4604      	mov	r4, r0
 8000e78:	e6f0      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	e706      	b.n	8000c8c <__udivmoddi4+0x94>
 8000e7e:	45c8      	cmp	r8, r9
 8000e80:	d2ae      	bcs.n	8000de0 <__udivmoddi4+0x1e8>
 8000e82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e8a:	3801      	subs	r0, #1
 8000e8c:	e7a8      	b.n	8000de0 <__udivmoddi4+0x1e8>
 8000e8e:	4631      	mov	r1, r6
 8000e90:	e7ed      	b.n	8000e6e <__udivmoddi4+0x276>
 8000e92:	4603      	mov	r3, r0
 8000e94:	e799      	b.n	8000dca <__udivmoddi4+0x1d2>
 8000e96:	4630      	mov	r0, r6
 8000e98:	e7d4      	b.n	8000e44 <__udivmoddi4+0x24c>
 8000e9a:	46d6      	mov	lr, sl
 8000e9c:	e77f      	b.n	8000d9e <__udivmoddi4+0x1a6>
 8000e9e:	4463      	add	r3, ip
 8000ea0:	3802      	subs	r0, #2
 8000ea2:	e74d      	b.n	8000d40 <__udivmoddi4+0x148>
 8000ea4:	4606      	mov	r6, r0
 8000ea6:	4623      	mov	r3, r4
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	e70f      	b.n	8000ccc <__udivmoddi4+0xd4>
 8000eac:	3e02      	subs	r6, #2
 8000eae:	4463      	add	r3, ip
 8000eb0:	e730      	b.n	8000d14 <__udivmoddi4+0x11c>
 8000eb2:	bf00      	nop

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <GNSSCom_Init>:

GNSSCom_HandleTypeDef hGNSSCom;
OutputType type = ASCII;
OutputProtocol protocol = NMEA;

void GNSSCom_Init(UART_HandleTypeDef* huart,UART_HandleTypeDef* huartDebug){
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]
	hGNSSCom.huart = huart;
 8000ec2:	4a11      	ldr	r2, [pc, #68]	@ (8000f08 <GNSSCom_Init+0x50>)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6013      	str	r3, [r2, #0]
	hGNSSCom.huartDebug = huartDebug;
 8000ec8:	4a0f      	ldr	r2, [pc, #60]	@ (8000f08 <GNSSCom_Init+0x50>)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	6053      	str	r3, [r2, #4]

	hGNSSCom.Rx = initializeBuffer(UART_RX_BUFFER_SIZE);
 8000ece:	20c8      	movs	r0, #200	@ 0xc8
 8000ed0:	f000 f820 	bl	8000f14 <initializeBuffer>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	4a0c      	ldr	r2, [pc, #48]	@ (8000f08 <GNSSCom_Init+0x50>)
 8000ed8:	6093      	str	r3, [r2, #8]
	memset(hGNSSCom.TxBuffer, 0, UART_TX_BUFFER_SIZE);
 8000eda:	22c8      	movs	r2, #200	@ 0xc8
 8000edc:	2100      	movs	r1, #0
 8000ede:	480b      	ldr	r0, [pc, #44]	@ (8000f0c <GNSSCom_Init+0x54>)
 8000ee0:	f006 fbf3 	bl	80076ca <memset>
	memset(hGNSSCom.DebugBuffer, 0, UART_DEBUG_BUFFER_SIZE);
 8000ee4:	22c8      	movs	r2, #200	@ 0xc8
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	4809      	ldr	r0, [pc, #36]	@ (8000f10 <GNSSCom_Init+0x58>)
 8000eea:	f006 fbee 	bl	80076ca <memset>

	GNSSCom_UartActivate(&hGNSSCom);
 8000eee:	4806      	ldr	r0, [pc, #24]	@ (8000f08 <GNSSCom_Init+0x50>)
 8000ef0:	f000 f84f 	bl	8000f92 <GNSSCom_UartActivate>
	HAL_Delay(5000); //En theorie il suffit d attendre la reception du premier msg UART pour envoyer
 8000ef4:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000ef8:	f001 fcb0 	bl	800285c <HAL_Delay>
	GNSSCom_Send_SetVal();
 8000efc:	f000 f85e 	bl	8000fbc <GNSSCom_Send_SetVal>
}
 8000f00:	bf00      	nop
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20000350 	.word	0x20000350
 8000f0c:	2000035c 	.word	0x2000035c
 8000f10:	20000424 	.word	0x20000424

08000f14 <initializeBuffer>:
DynamicBuffer* initializeBuffer(size_t initialSize) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
    DynamicBuffer *bufferDynamic = malloc(sizeof(DynamicBuffer));
 8000f1c:	2008      	movs	r0, #8
 8000f1e:	f005 fd2f 	bl	8006980 <malloc>
 8000f22:	4603      	mov	r3, r0
 8000f24:	60fb      	str	r3, [r7, #12]
    if (bufferDynamic == NULL) {
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d101      	bne.n	8000f30 <initializeBuffer+0x1c>
        return NULL; // Échec de l'allocation mémoire
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	e013      	b.n	8000f58 <initializeBuffer+0x44>
    }

    bufferDynamic->buffer = malloc(initialSize);
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f005 fd25 	bl	8006980 <malloc>
 8000f36:	4603      	mov	r3, r0
 8000f38:	461a      	mov	r2, r3
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	601a      	str	r2, [r3, #0]
    if (bufferDynamic->buffer == NULL) {
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d104      	bne.n	8000f50 <initializeBuffer+0x3c>
        free(bufferDynamic); // Libérer la mémoire allouée pour la structure
 8000f46:	68f8      	ldr	r0, [r7, #12]
 8000f48:	f005 fd22 	bl	8006990 <free>
        return NULL; // Échec de l'allocation mémoire
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	e003      	b.n	8000f58 <initializeBuffer+0x44>
    }

    bufferDynamic->size = initialSize;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	605a      	str	r2, [r3, #4]
    return bufferDynamic;
 8000f56:	68fb      	ldr	r3, [r7, #12]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3710      	adds	r7, #16
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <resizeBuffer>:
void resizeBuffer(DynamicBuffer *bufferDynamic, size_t newSize) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
    uint8_t *newData = realloc(bufferDynamic->buffer, newSize);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	6839      	ldr	r1, [r7, #0]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f005 fdc3 	bl	8006afc <realloc>
 8000f76:	60f8      	str	r0, [r7, #12]
    if (newData != NULL) {
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d005      	beq.n	8000f8a <resizeBuffer+0x2a>
    	bufferDynamic->buffer = newData;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	68fa      	ldr	r2, [r7, #12]
 8000f82:	601a      	str	r2, [r3, #0]
    	    bufferDynamic->size = newSize;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	683a      	ldr	r2, [r7, #0]
 8000f88:	605a      	str	r2, [r3, #4]
    }
}
 8000f8a:	bf00      	nop
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <GNSSCom_UartActivate>:
void freeBuffer(DynamicBuffer *bufferDynamic) {
    free(bufferDynamic->buffer);
    free(bufferDynamic);
}
void GNSSCom_UartActivate(GNSSCom_HandleTypeDef* hGNSS){
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b082      	sub	sp, #8
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(hGNSS->huart, hGNSS->Rx->buffer, hGNSS->Rx->size);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6818      	ldr	r0, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	6819      	ldr	r1, [r3, #0]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	689b      	ldr	r3, [r3, #8]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	461a      	mov	r2, r3
 8000fae:	f003 ff55 	bl	8004e5c <HAL_UART_Receive_IT>
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <GNSSCom_Send_SetVal>:
void GNSSCom_Send_SetVal(void){
 8000fbc:	b5b0      	push	{r4, r5, r7, lr}
 8000fbe:	b098      	sub	sp, #96	@ 0x60
 8000fc0:	af00      	add	r7, sp, #0
//,
	CommandnSize commands[] = {
 8000fc2:	4b2b      	ldr	r3, [pc, #172]	@ (8001070 <GNSSCom_Send_SetVal+0xb4>)
 8000fc4:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8000fc8:	461d      	mov	r5, r3
 8000fca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fd2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000fd6:	e884 0003 	stmia.w	r4, {r0, r1}
		//{commandSetTP_atNVTRate,sizeof(commandSetTP_atNVTRate)},
	    {commandMeasureRate, sizeof(commandMeasureRate)}
	};
	char message[50];

	for (int i = 0; i < sizeof(commands) / sizeof(commands[0]); ++i) {
 8000fda:	2300      	movs	r3, #0
 8000fdc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000fde:	e03e      	b.n	800105e <GNSSCom_Send_SetVal+0xa2>
	    // Transmit debug message
	    sprintf(message, "\r\t\t\n...Message%d...\r\n", i + 1);
 8000fe0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000fe2:	1c5a      	adds	r2, r3, #1
 8000fe4:	463b      	mov	r3, r7
 8000fe6:	4923      	ldr	r1, [pc, #140]	@ (8001074 <GNSSCom_Send_SetVal+0xb8>)
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f006 fb0b 	bl	8007604 <siprintf>
	    HAL_UART_Transmit(hGNSSCom.huartDebug, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8000fee:	4b22      	ldr	r3, [pc, #136]	@ (8001078 <GNSSCom_Send_SetVal+0xbc>)
 8000ff0:	685c      	ldr	r4, [r3, #4]
 8000ff2:	463b      	mov	r3, r7
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff f94b 	bl	8000290 <strlen>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	b29a      	uxth	r2, r3
 8000ffe:	4639      	mov	r1, r7
 8001000:	f04f 33ff 	mov.w	r3, #4294967295
 8001004:	4620      	mov	r0, r4
 8001006:	f003 fea0 	bl	8004d4a <HAL_UART_Transmit>

	    // Transmit command
	    HAL_UART_Transmit(hGNSSCom.huart, commands[i].command, commands[i].size, HAL_MAX_DELAY);
 800100a:	4b1b      	ldr	r3, [pc, #108]	@ (8001078 <GNSSCom_Send_SetVal+0xbc>)
 800100c:	6818      	ldr	r0, [r3, #0]
 800100e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001010:	00db      	lsls	r3, r3, #3
 8001012:	3360      	adds	r3, #96	@ 0x60
 8001014:	443b      	add	r3, r7
 8001016:	f853 1c2c 	ldr.w	r1, [r3, #-44]
 800101a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800101c:	00db      	lsls	r3, r3, #3
 800101e:	3360      	adds	r3, #96	@ 0x60
 8001020:	443b      	add	r3, r7
 8001022:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8001026:	b29a      	uxth	r2, r3
 8001028:	f04f 33ff 	mov.w	r3, #4294967295
 800102c:	f003 fe8d 	bl	8004d4a <HAL_UART_Transmit>

	    // Receive debug
	    memcpy(hGNSSCom.Rx->buffer, commands[i].command, commands[i].size);
 8001030:	4b11      	ldr	r3, [pc, #68]	@ (8001078 <GNSSCom_Send_SetVal+0xbc>)
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	6818      	ldr	r0, [r3, #0]
 8001036:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001038:	00db      	lsls	r3, r3, #3
 800103a:	3360      	adds	r3, #96	@ 0x60
 800103c:	443b      	add	r3, r7
 800103e:	f853 1c2c 	ldr.w	r1, [r3, #-44]
 8001042:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001044:	00db      	lsls	r3, r3, #3
 8001046:	3360      	adds	r3, #96	@ 0x60
 8001048:	443b      	add	r3, r7
 800104a:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800104e:	461a      	mov	r2, r3
 8001050:	f006 fbdd 	bl	800780e <memcpy>
	    GNSSCom_ReceiveDebug();
 8001054:	f000 f812 	bl	800107c <GNSSCom_ReceiveDebug>
	for (int i = 0; i < sizeof(commands) / sizeof(commands[0]); ++i) {
 8001058:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800105a:	3301      	adds	r3, #1
 800105c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800105e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001060:	2b04      	cmp	r3, #4
 8001062:	d9bd      	bls.n	8000fe0 <GNSSCom_Send_SetVal+0x24>
	}
}
 8001064:	bf00      	nop
 8001066:	bf00      	nop
 8001068:	3760      	adds	r7, #96	@ 0x60
 800106a:	46bd      	mov	sp, r7
 800106c:	bdb0      	pop	{r4, r5, r7, pc}
 800106e:	bf00      	nop
 8001070:	080096f0 	.word	0x080096f0
 8001074:	080096d8 	.word	0x080096d8
 8001078:	20000350 	.word	0x20000350

0800107c <GNSSCom_ReceiveDebug>:
void GNSSCom_ReceiveDebug(){
 800107c:	b590      	push	{r4, r7, lr}
 800107e:	b0b7      	sub	sp, #220	@ 0xdc
 8001080:	af00      	add	r7, sp, #0
	// Initialiser la chaîne de sortie à une chaîne vide
	char output_string[UART_DEBUG_BUFFER_SIZE];
	int isUBX = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
	for (int i = 0; i < hGNSSCom.Rx->size; i++) {
 8001088:	2300      	movs	r3, #0
 800108a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800108e:	e10b      	b.n	80012a8 <GNSSCom_ReceiveDebug+0x22c>

		if (hGNSSCom.Rx->buffer[i] == HEADER_UBX_1 &&
 8001090:	4b98      	ldr	r3, [pc, #608]	@ (80012f4 <GNSSCom_ReceiveDebug+0x278>)
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800109a:	4413      	add	r3, r2
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	2bb5      	cmp	r3, #181	@ 0xb5
 80010a0:	d166      	bne.n	8001170 <GNSSCom_ReceiveDebug+0xf4>
			hGNSSCom.Rx->buffer[i +1] == HEADER_UBX_2 ){
 80010a2:	4b94      	ldr	r3, [pc, #592]	@ (80012f4 <GNSSCom_ReceiveDebug+0x278>)
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80010ac:	3301      	adds	r3, #1
 80010ae:	4413      	add	r3, r2
 80010b0:	781b      	ldrb	r3, [r3, #0]
		if (hGNSSCom.Rx->buffer[i] == HEADER_UBX_1 &&
 80010b2:	2b62      	cmp	r3, #98	@ 0x62
 80010b4:	d15c      	bne.n	8001170 <GNSSCom_ReceiveDebug+0xf4>
				//On est sur un message UBX
				isUBX=1;
 80010b6:	2301      	movs	r3, #1
 80010b8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

				UBXMessage_parsed* UbxMessage =(UBXMessage_parsed*) malloc(sizeof(UBXMessage_parsed)) ;
 80010bc:	f44f 70ca 	mov.w	r0, #404	@ 0x194
 80010c0:	f005 fc5e 	bl	8006980 <malloc>
 80010c4:	4603      	mov	r3, r0
 80010c6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
				UbxMessage->msgClass = hGNSSCom.Rx->buffer[i + 2];
 80010ca:	4b8a      	ldr	r3, [pc, #552]	@ (80012f4 <GNSSCom_ReceiveDebug+0x278>)
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80010d4:	3302      	adds	r3, #2
 80010d6:	4413      	add	r3, r2
 80010d8:	781a      	ldrb	r2, [r3, #0]
 80010da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80010de:	701a      	strb	r2, [r3, #0]
				UbxMessage->msgID = hGNSSCom.Rx->buffer[i + 3];
 80010e0:	4b84      	ldr	r3, [pc, #528]	@ (80012f4 <GNSSCom_ReceiveDebug+0x278>)
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80010ea:	3303      	adds	r3, #3
 80010ec:	4413      	add	r3, r2
 80010ee:	781a      	ldrb	r2, [r3, #0]
 80010f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80010f4:	705a      	strb	r2, [r3, #1]
				UbxMessage->len = (hGNSSCom.Rx->buffer[i+5] << 8) |hGNSSCom.Rx->buffer[i+4];
 80010f6:	4b7f      	ldr	r3, [pc, #508]	@ (80012f4 <GNSSCom_ReceiveDebug+0x278>)
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001100:	3305      	adds	r3, #5
 8001102:	4413      	add	r3, r2
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	021b      	lsls	r3, r3, #8
 8001108:	b21a      	sxth	r2, r3
 800110a:	4b7a      	ldr	r3, [pc, #488]	@ (80012f4 <GNSSCom_ReceiveDebug+0x278>)
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	6819      	ldr	r1, [r3, #0]
 8001110:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001114:	3304      	adds	r3, #4
 8001116:	440b      	add	r3, r1
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	b21b      	sxth	r3, r3
 800111c:	4313      	orrs	r3, r2
 800111e:	b21b      	sxth	r3, r3
 8001120:	b29a      	uxth	r2, r3
 8001122:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001126:	805a      	strh	r2, [r3, #2]
				memcpy(UbxMessage->load, hGNSSCom.Rx->buffer + i + 6, UbxMessage->len);
 8001128:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800112c:	1d18      	adds	r0, r3, #4
 800112e:	4b71      	ldr	r3, [pc, #452]	@ (80012f4 <GNSSCom_ReceiveDebug+0x278>)
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001138:	3306      	adds	r3, #6
 800113a:	18d1      	adds	r1, r2, r3
 800113c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001140:	885b      	ldrh	r3, [r3, #2]
 8001142:	461a      	mov	r2, r3
 8001144:	f006 fb63 	bl	800780e <memcpy>

				create_message_debug(UbxMessage);
 8001148:	f8d7 00cc 	ldr.w	r0, [r7, #204]	@ 0xcc
 800114c:	f000 f8e4 	bl	8001318 <create_message_debug>

				HAL_UART_Transmit(hGNSSCom.huartDebug, (uint8_t*) UbxMessage->bufferDebug, sizeof(UbxMessage->bufferDebug),HAL_MAX_DELAY);
 8001150:	4b68      	ldr	r3, [pc, #416]	@ (80012f4 <GNSSCom_ReceiveDebug+0x278>)
 8001152:	6858      	ldr	r0, [r3, #4]
 8001154:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001158:	f103 01cc 	add.w	r1, r3, #204	@ 0xcc
 800115c:	f04f 33ff 	mov.w	r3, #4294967295
 8001160:	22c8      	movs	r2, #200	@ 0xc8
 8001162:	f003 fdf2 	bl	8004d4a <HAL_UART_Transmit>
				free(UbxMessage);
 8001166:	f8d7 00cc 	ldr.w	r0, [r7, #204]	@ 0xcc
 800116a:	f005 fc11 	bl	8006990 <free>
			hGNSSCom.Rx->buffer[i +1] == HEADER_UBX_2 ){
 800116e:	e096      	b.n	800129e <GNSSCom_ReceiveDebug+0x222>
		}

		else if (!isUBX){
 8001170:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001174:	2b00      	cmp	r3, #0
 8001176:	f040 8092 	bne.w	800129e <GNSSCom_ReceiveDebug+0x222>
		switch (hGNSSCom.Rx->buffer[i]) {
 800117a:	4b5e      	ldr	r3, [pc, #376]	@ (80012f4 <GNSSCom_ReceiveDebug+0x278>)
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001184:	4413      	add	r3, r2
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b0a      	cmp	r3, #10
 800118a:	d002      	beq.n	8001192 <GNSSCom_ReceiveDebug+0x116>
 800118c:	2b0d      	cmp	r3, #13
 800118e:	d00e      	beq.n	80011ae <GNSSCom_ReceiveDebug+0x132>
 8001190:	e01b      	b.n	80011ca <GNSSCom_ReceiveDebug+0x14e>
		case '\n': // Nouvelle ligne détectée
			strcat(output_string, "\n"); // Ajout d'un saut de ligne à la chaîne de sortie
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff f87b 	bl	8000290 <strlen>
 800119a:	4603      	mov	r3, r0
 800119c:	461a      	mov	r2, r3
 800119e:	1d3b      	adds	r3, r7, #4
 80011a0:	4413      	add	r3, r2
 80011a2:	4955      	ldr	r1, [pc, #340]	@ (80012f8 <GNSSCom_ReceiveDebug+0x27c>)
 80011a4:	461a      	mov	r2, r3
 80011a6:	460b      	mov	r3, r1
 80011a8:	881b      	ldrh	r3, [r3, #0]
 80011aa:	8013      	strh	r3, [r2, #0]
			break;
 80011ac:	e077      	b.n	800129e <GNSSCom_ReceiveDebug+0x222>
		case '\r': // Retour de chariot détecté
			strcat(output_string, "\r");
 80011ae:	1d3b      	adds	r3, r7, #4
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff f86d 	bl	8000290 <strlen>
 80011b6:	4603      	mov	r3, r0
 80011b8:	461a      	mov	r2, r3
 80011ba:	1d3b      	adds	r3, r7, #4
 80011bc:	4413      	add	r3, r2
 80011be:	494f      	ldr	r1, [pc, #316]	@ (80012fc <GNSSCom_ReceiveDebug+0x280>)
 80011c0:	461a      	mov	r2, r3
 80011c2:	460b      	mov	r3, r1
 80011c4:	881b      	ldrh	r3, [r3, #0]
 80011c6:	8013      	strh	r3, [r2, #0]
			break;
 80011c8:	e069      	b.n	800129e <GNSSCom_ReceiveDebug+0x222>
		default:
			switch (type) {
 80011ca:	4b4d      	ldr	r3, [pc, #308]	@ (8001300 <GNSSCom_ReceiveDebug+0x284>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d02c      	beq.n	800122c <GNSSCom_ReceiveDebug+0x1b0>
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	dc5a      	bgt.n	800128c <GNSSCom_ReceiveDebug+0x210>
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d002      	beq.n	80011e0 <GNSSCom_ReceiveDebug+0x164>
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d013      	beq.n	8001206 <GNSSCom_ReceiveDebug+0x18a>
 80011de:	e055      	b.n	800128c <GNSSCom_ReceiveDebug+0x210>
			case RAW:
				snprintf(output_string + i, sizeof(output_string) - i, "%d", hGNSSCom.Rx->buffer[i]);
 80011e0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80011e4:	1d3a      	adds	r2, r7, #4
 80011e6:	18d0      	adds	r0, r2, r3
 80011e8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80011ec:	f1c3 01c8 	rsb	r1, r3, #200	@ 0xc8
 80011f0:	4b40      	ldr	r3, [pc, #256]	@ (80012f4 <GNSSCom_ReceiveDebug+0x278>)
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80011fa:	4413      	add	r3, r2
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	4a41      	ldr	r2, [pc, #260]	@ (8001304 <GNSSCom_ReceiveDebug+0x288>)
 8001200:	f006 f9cc 	bl	800759c <sniprintf>
				break;
 8001204:	e042      	b.n	800128c <GNSSCom_ReceiveDebug+0x210>

			case HEX:
				snprintf(output_string +i, sizeof(output_string) - i, "%02X", hGNSSCom.Rx->buffer[i]);
 8001206:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800120a:	1d3a      	adds	r2, r7, #4
 800120c:	18d0      	adds	r0, r2, r3
 800120e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001212:	f1c3 01c8 	rsb	r1, r3, #200	@ 0xc8
 8001216:	4b37      	ldr	r3, [pc, #220]	@ (80012f4 <GNSSCom_ReceiveDebug+0x278>)
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001220:	4413      	add	r3, r2
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	4a38      	ldr	r2, [pc, #224]	@ (8001308 <GNSSCom_ReceiveDebug+0x28c>)
 8001226:	f006 f9b9 	bl	800759c <sniprintf>
				break;
 800122a:	e02f      	b.n	800128c <GNSSCom_ReceiveDebug+0x210>

			case ASCII:
				snprintf(output_string +i, sizeof(output_string) - i, "%c",
 800122c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001230:	1d3a      	adds	r2, r7, #4
 8001232:	18d0      	adds	r0, r2, r3
 8001234:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001238:	f1c3 01c8 	rsb	r1, r3, #200	@ 0xc8
						((hGNSSCom.Rx->buffer[i] >= 32 && hGNSSCom.Rx->buffer[i] <= 126)||hGNSSCom.Rx->buffer[i] >= 192) ? hGNSSCom.Rx->buffer[i] : '.');
 800123c:	4b2d      	ldr	r3, [pc, #180]	@ (80012f4 <GNSSCom_ReceiveDebug+0x278>)
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001246:	4413      	add	r3, r2
 8001248:	781b      	ldrb	r3, [r3, #0]
				snprintf(output_string +i, sizeof(output_string) - i, "%c",
 800124a:	2b1f      	cmp	r3, #31
 800124c:	d908      	bls.n	8001260 <GNSSCom_ReceiveDebug+0x1e4>
						((hGNSSCom.Rx->buffer[i] >= 32 && hGNSSCom.Rx->buffer[i] <= 126)||hGNSSCom.Rx->buffer[i] >= 192) ? hGNSSCom.Rx->buffer[i] : '.');
 800124e:	4b29      	ldr	r3, [pc, #164]	@ (80012f4 <GNSSCom_ReceiveDebug+0x278>)
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001258:	4413      	add	r3, r2
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b7e      	cmp	r3, #126	@ 0x7e
 800125e:	d908      	bls.n	8001272 <GNSSCom_ReceiveDebug+0x1f6>
 8001260:	4b24      	ldr	r3, [pc, #144]	@ (80012f4 <GNSSCom_ReceiveDebug+0x278>)
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800126a:	4413      	add	r3, r2
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	2bbf      	cmp	r3, #191	@ 0xbf
 8001270:	d907      	bls.n	8001282 <GNSSCom_ReceiveDebug+0x206>
 8001272:	4b20      	ldr	r3, [pc, #128]	@ (80012f4 <GNSSCom_ReceiveDebug+0x278>)
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800127c:	4413      	add	r3, r2
 800127e:	781b      	ldrb	r3, [r3, #0]
				snprintf(output_string +i, sizeof(output_string) - i, "%c",
 8001280:	e000      	b.n	8001284 <GNSSCom_ReceiveDebug+0x208>
 8001282:	232e      	movs	r3, #46	@ 0x2e
 8001284:	4a21      	ldr	r2, [pc, #132]	@ (800130c <GNSSCom_ReceiveDebug+0x290>)
 8001286:	f006 f989 	bl	800759c <sniprintf>
				break;
 800128a:	bf00      	nop
			}
			strncat(output_string, " ", sizeof(output_string) - i - 1);
 800128c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001290:	f1c3 02c7 	rsb	r2, r3, #199	@ 0xc7
 8001294:	1d3b      	adds	r3, r7, #4
 8001296:	491e      	ldr	r1, [pc, #120]	@ (8001310 <GNSSCom_ReceiveDebug+0x294>)
 8001298:	4618      	mov	r0, r3
 800129a:	f006 fa1e 	bl	80076da <strncat>
	for (int i = 0; i < hGNSSCom.Rx->size; i++) {
 800129e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80012a2:	3301      	adds	r3, #1
 80012a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80012a8:	4b12      	ldr	r3, [pc, #72]	@ (80012f4 <GNSSCom_ReceiveDebug+0x278>)
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	685a      	ldr	r2, [r3, #4]
 80012ae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80012b2:	429a      	cmp	r2, r3
 80012b4:	f63f aeec 	bhi.w	8001090 <GNSSCom_ReceiveDebug+0x14>

		}
	}
	}
	if (!isUBX){
 80012b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d115      	bne.n	80012ec <GNSSCom_ReceiveDebug+0x270>
	HAL_UART_Transmit(hGNSSCom.huartDebug, (uint8_t*)output_string, strlen(output_string),HAL_MAX_DELAY);
 80012c0:	4b0c      	ldr	r3, [pc, #48]	@ (80012f4 <GNSSCom_ReceiveDebug+0x278>)
 80012c2:	685c      	ldr	r4, [r3, #4]
 80012c4:	1d3b      	adds	r3, r7, #4
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7fe ffe2 	bl	8000290 <strlen>
 80012cc:	4603      	mov	r3, r0
 80012ce:	b29a      	uxth	r2, r3
 80012d0:	1d39      	adds	r1, r7, #4
 80012d2:	f04f 33ff 	mov.w	r3, #4294967295
 80012d6:	4620      	mov	r0, r4
 80012d8:	f003 fd37 	bl	8004d4a <HAL_UART_Transmit>
	HAL_UART_Transmit(hGNSSCom.huartDebug, (uint8_t*)"\r\n", 4,HAL_MAX_DELAY);
 80012dc:	4b05      	ldr	r3, [pc, #20]	@ (80012f4 <GNSSCom_ReceiveDebug+0x278>)
 80012de:	6858      	ldr	r0, [r3, #4]
 80012e0:	f04f 33ff 	mov.w	r3, #4294967295
 80012e4:	2204      	movs	r2, #4
 80012e6:	490b      	ldr	r1, [pc, #44]	@ (8001314 <GNSSCom_ReceiveDebug+0x298>)
 80012e8:	f003 fd2f 	bl	8004d4a <HAL_UART_Transmit>
	}
}
 80012ec:	bf00      	nop
 80012ee:	37dc      	adds	r7, #220	@ 0xdc
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd90      	pop	{r4, r7, pc}
 80012f4:	20000350 	.word	0x20000350
 80012f8:	08009718 	.word	0x08009718
 80012fc:	0800971c 	.word	0x0800971c
 8001300:	2000013b 	.word	0x2000013b
 8001304:	08009720 	.word	0x08009720
 8001308:	08009724 	.word	0x08009724
 800130c:	0800972c 	.word	0x0800972c
 8001310:	08009730 	.word	0x08009730
 8001314:	08009734 	.word	0x08009734

08001318 <create_message_debug>:
	{0x06, 0x01,(void (*)(UBXMessage_parsed *, void *)) debug_PollMessage, &UBX_CFG_MSG_instance},
    // Add other mappings for other message types if necessary
};


void create_message_debug(UBXMessage_parsed* UBXMessage) {
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
    // Function pointer and variables to hold the matched mapping's values
    void (*get_func)(UBXMessage_parsed*, void *) = NULL;
 8001320:	2300      	movs	r3, #0
 8001322:	613b      	str	r3, [r7, #16]
    void* structAssociate = NULL;
 8001324:	2300      	movs	r3, #0
 8001326:	60fb      	str	r3, [r7, #12]

    // Loop through the message mappings to find a match
    for (int i = 0; i < sizeof(message_mappings) / sizeof(message_mappings[0]); i++) {
 8001328:	2300      	movs	r3, #0
 800132a:	617b      	str	r3, [r7, #20]
 800132c:	e03d      	b.n	80013aa <create_message_debug+0x92>
        if (message_mappings[i].msgClass == UBXMessage->msgClass &&
 800132e:	4923      	ldr	r1, [pc, #140]	@ (80013bc <create_message_debug+0xa4>)
 8001330:	697a      	ldr	r2, [r7, #20]
 8001332:	4613      	mov	r3, r2
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	4413      	add	r3, r2
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	440b      	add	r3, r1
 800133c:	781a      	ldrb	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	429a      	cmp	r2, r3
 8001344:	d12e      	bne.n	80013a4 <create_message_debug+0x8c>
            message_mappings[i].msgID == UBXMessage->msgID) {
 8001346:	491d      	ldr	r1, [pc, #116]	@ (80013bc <create_message_debug+0xa4>)
 8001348:	697a      	ldr	r2, [r7, #20]
 800134a:	4613      	mov	r3, r2
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	4413      	add	r3, r2
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	440b      	add	r3, r1
 8001354:	3301      	adds	r3, #1
 8001356:	781a      	ldrb	r2, [r3, #0]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	785b      	ldrb	r3, [r3, #1]
        if (message_mappings[i].msgClass == UBXMessage->msgClass &&
 800135c:	429a      	cmp	r2, r3
 800135e:	d121      	bne.n	80013a4 <create_message_debug+0x8c>
            // Retrieve the corresponding get function and associated structure and variables
            get_func = message_mappings[i].get_func;
 8001360:	4916      	ldr	r1, [pc, #88]	@ (80013bc <create_message_debug+0xa4>)
 8001362:	697a      	ldr	r2, [r7, #20]
 8001364:	4613      	mov	r3, r2
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	4413      	add	r3, r2
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	440b      	add	r3, r1
 800136e:	3304      	adds	r3, #4
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	613b      	str	r3, [r7, #16]
            structAssociate = message_mappings[i].structAssociate; //Pour l'utilosation dans d'autres fonctions, perhaps
 8001374:	4911      	ldr	r1, [pc, #68]	@ (80013bc <create_message_debug+0xa4>)
 8001376:	697a      	ldr	r2, [r7, #20]
 8001378:	4613      	mov	r3, r2
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	4413      	add	r3, r2
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	440b      	add	r3, r1
 8001382:	3308      	adds	r3, #8
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	60fb      	str	r3, [r7, #12]
            get_func(UBXMessage,structAssociate);
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	68f9      	ldr	r1, [r7, #12]
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	4798      	blx	r3

            //On adapte la taille du buffer pour les prochains messages
            resizeBuffer(hGNSSCom.Rx,UBXMessage->len + 8);
 8001390:	4b0b      	ldr	r3, [pc, #44]	@ (80013c0 <create_message_debug+0xa8>)
 8001392:	689a      	ldr	r2, [r3, #8]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	885b      	ldrh	r3, [r3, #2]
 8001398:	3308      	adds	r3, #8
 800139a:	4619      	mov	r1, r3
 800139c:	4610      	mov	r0, r2
 800139e:	f7ff fddf 	bl	8000f60 <resizeBuffer>
            break;
 80013a2:	e006      	b.n	80013b2 <create_message_debug+0x9a>
    for (int i = 0; i < sizeof(message_mappings) / sizeof(message_mappings[0]); i++) {
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	3301      	adds	r3, #1
 80013a8:	617b      	str	r3, [r7, #20]
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d9be      	bls.n	800132e <create_message_debug+0x16>
        }

    }
}
 80013b0:	bf00      	nop
 80013b2:	bf00      	nop
 80013b4:	3718      	adds	r7, #24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	2000013c 	.word	0x2000013c
 80013c0:	20000350 	.word	0x20000350

080013c4 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b08a      	sub	sp, #40	@ 0x28
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80013ca:	1d3b      	adds	r3, r7, #4
 80013cc:	2224      	movs	r2, #36	@ 0x24
 80013ce:	2100      	movs	r1, #0
 80013d0:	4618      	mov	r0, r3
 80013d2:	f006 f97a 	bl	80076ca <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80013d6:	4b17      	ldr	r3, [pc, #92]	@ (8001434 <MX_DAC1_Init+0x70>)
 80013d8:	4a17      	ldr	r2, [pc, #92]	@ (8001438 <MX_DAC1_Init+0x74>)
 80013da:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80013dc:	4815      	ldr	r0, [pc, #84]	@ (8001434 <MX_DAC1_Init+0x70>)
 80013de:	f001 fb72 	bl	8002ac6 <HAL_DAC_Init>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80013e8:	f000 f9e5 	bl	80017b6 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80013ec:	2300      	movs	r3, #0
 80013ee:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80013f0:	2300      	movs	r3, #0
 80013f2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80013f4:	2300      	movs	r3, #0
 80013f6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80013f8:	2300      	movs	r3, #0
 80013fa:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	2200      	movs	r2, #0
 8001404:	4619      	mov	r1, r3
 8001406:	480b      	ldr	r0, [pc, #44]	@ (8001434 <MX_DAC1_Init+0x70>)
 8001408:	f001 fb7f 	bl	8002b0a <HAL_DAC_ConfigChannel>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001412:	f000 f9d0 	bl	80017b6 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001416:	1d3b      	adds	r3, r7, #4
 8001418:	2210      	movs	r2, #16
 800141a:	4619      	mov	r1, r3
 800141c:	4805      	ldr	r0, [pc, #20]	@ (8001434 <MX_DAC1_Init+0x70>)
 800141e:	f001 fb74 	bl	8002b0a <HAL_DAC_ConfigChannel>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8001428:	f000 f9c5 	bl	80017b6 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800142c:	bf00      	nop
 800142e:	3728      	adds	r7, #40	@ 0x28
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	200005d0 	.word	0x200005d0
 8001438:	40007400 	.word	0x40007400

0800143c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08a      	sub	sp, #40	@ 0x28
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a15      	ldr	r2, [pc, #84]	@ (80014b0 <HAL_DAC_MspInit+0x74>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d124      	bne.n	80014a8 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800145e:	4b15      	ldr	r3, [pc, #84]	@ (80014b4 <HAL_DAC_MspInit+0x78>)
 8001460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001462:	4a14      	ldr	r2, [pc, #80]	@ (80014b4 <HAL_DAC_MspInit+0x78>)
 8001464:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001468:	6593      	str	r3, [r2, #88]	@ 0x58
 800146a:	4b12      	ldr	r3, [pc, #72]	@ (80014b4 <HAL_DAC_MspInit+0x78>)
 800146c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800146e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001472:	613b      	str	r3, [r7, #16]
 8001474:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001476:	4b0f      	ldr	r3, [pc, #60]	@ (80014b4 <HAL_DAC_MspInit+0x78>)
 8001478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800147a:	4a0e      	ldr	r2, [pc, #56]	@ (80014b4 <HAL_DAC_MspInit+0x78>)
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001482:	4b0c      	ldr	r3, [pc, #48]	@ (80014b4 <HAL_DAC_MspInit+0x78>)
 8001484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = STM_DAC_TRIG_Pin|STM_DAC_CS_Pin;
 800148e:	2330      	movs	r3, #48	@ 0x30
 8001490:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001492:	2303      	movs	r3, #3
 8001494:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149a:	f107 0314 	add.w	r3, r7, #20
 800149e:	4619      	mov	r1, r3
 80014a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014a4:	f001 fcd8 	bl	8002e58 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 80014a8:	bf00      	nop
 80014aa:	3728      	adds	r7, #40	@ 0x28
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40007400 	.word	0x40007400
 80014b4:	40021000 	.word	0x40021000

080014b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08c      	sub	sp, #48	@ 0x30
 80014bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014be:	f107 031c 	add.w	r3, r7, #28
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	609a      	str	r2, [r3, #8]
 80014ca:	60da      	str	r2, [r3, #12]
 80014cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014ce:	4b63      	ldr	r3, [pc, #396]	@ (800165c <MX_GPIO_Init+0x1a4>)
 80014d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d2:	4a62      	ldr	r2, [pc, #392]	@ (800165c <MX_GPIO_Init+0x1a4>)
 80014d4:	f043 0310 	orr.w	r3, r3, #16
 80014d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014da:	4b60      	ldr	r3, [pc, #384]	@ (800165c <MX_GPIO_Init+0x1a4>)
 80014dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014de:	f003 0310 	and.w	r3, r3, #16
 80014e2:	61bb      	str	r3, [r7, #24]
 80014e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e6:	4b5d      	ldr	r3, [pc, #372]	@ (800165c <MX_GPIO_Init+0x1a4>)
 80014e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ea:	4a5c      	ldr	r2, [pc, #368]	@ (800165c <MX_GPIO_Init+0x1a4>)
 80014ec:	f043 0304 	orr.w	r3, r3, #4
 80014f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014f2:	4b5a      	ldr	r3, [pc, #360]	@ (800165c <MX_GPIO_Init+0x1a4>)
 80014f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f6:	f003 0304 	and.w	r3, r3, #4
 80014fa:	617b      	str	r3, [r7, #20]
 80014fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014fe:	4b57      	ldr	r3, [pc, #348]	@ (800165c <MX_GPIO_Init+0x1a4>)
 8001500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001502:	4a56      	ldr	r2, [pc, #344]	@ (800165c <MX_GPIO_Init+0x1a4>)
 8001504:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001508:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800150a:	4b54      	ldr	r3, [pc, #336]	@ (800165c <MX_GPIO_Init+0x1a4>)
 800150c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800150e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001512:	613b      	str	r3, [r7, #16]
 8001514:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001516:	4b51      	ldr	r3, [pc, #324]	@ (800165c <MX_GPIO_Init+0x1a4>)
 8001518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800151a:	4a50      	ldr	r2, [pc, #320]	@ (800165c <MX_GPIO_Init+0x1a4>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001522:	4b4e      	ldr	r3, [pc, #312]	@ (800165c <MX_GPIO_Init+0x1a4>)
 8001524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800152e:	4b4b      	ldr	r3, [pc, #300]	@ (800165c <MX_GPIO_Init+0x1a4>)
 8001530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001532:	4a4a      	ldr	r2, [pc, #296]	@ (800165c <MX_GPIO_Init+0x1a4>)
 8001534:	f043 0302 	orr.w	r3, r3, #2
 8001538:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800153a:	4b48      	ldr	r3, [pc, #288]	@ (800165c <MX_GPIO_Init+0x1a4>)
 800153c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	60bb      	str	r3, [r7, #8]
 8001544:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001546:	4b45      	ldr	r3, [pc, #276]	@ (800165c <MX_GPIO_Init+0x1a4>)
 8001548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800154a:	4a44      	ldr	r2, [pc, #272]	@ (800165c <MX_GPIO_Init+0x1a4>)
 800154c:	f043 0308 	orr.w	r3, r3, #8
 8001550:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001552:	4b42      	ldr	r3, [pc, #264]	@ (800165c <MX_GPIO_Init+0x1a4>)
 8001554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001556:	f003 0308 	and.w	r3, r3, #8
 800155a:	607b      	str	r3, [r7, #4]
 800155c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, PROC_M2_Pin|PROC_RESET_FPGA_Pin|UI_LED_R_Pin|UI_LED_G_Pin
 800155e:	2200      	movs	r2, #0
 8001560:	f240 11bf 	movw	r1, #447	@ 0x1bf
 8001564:	483e      	ldr	r0, [pc, #248]	@ (8001660 <MX_GPIO_Init+0x1a8>)
 8001566:	f001 fe09 	bl	800317c <HAL_GPIO_WritePin>
                          |RFM_EN_Pin|RFM_RST_Pin|PROC_M0_Pin|PROC_M1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UI_LED_B_GPIO_Port, UI_LED_B_Pin, GPIO_PIN_RESET);
 800156a:	2200      	movs	r2, #0
 800156c:	2102      	movs	r1, #2
 800156e:	483d      	ldr	r0, [pc, #244]	@ (8001664 <MX_GPIO_Init+0x1ac>)
 8001570:	f001 fe04 	bl	800317c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CLK_64M_EN_Pin|STM_ACQ_TRIG_SRC0_Pin|STM_ACQ_TRIG_SRC1_Pin, GPIO_PIN_RESET);
 8001574:	2200      	movs	r2, #0
 8001576:	f44f 4144 	mov.w	r1, #50176	@ 0xc400
 800157a:	483b      	ldr	r0, [pc, #236]	@ (8001668 <MX_GPIO_Init+0x1b0>)
 800157c:	f001 fdfe 	bl	800317c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ACQ_POW_EN_Pin|GPS_RESET_Pin, GPIO_PIN_SET);
 8001580:	2201      	movs	r2, #1
 8001582:	f44f 6108 	mov.w	r1, #2176	@ 0x880
 8001586:	4838      	ldr	r0, [pc, #224]	@ (8001668 <MX_GPIO_Init+0x1b0>)
 8001588:	f001 fdf8 	bl	800317c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = PROC_M2_Pin|PROC_RESET_FPGA_Pin|UI_LED_R_Pin|UI_LED_G_Pin
 800158c:	f240 13bf 	movw	r3, #447	@ 0x1bf
 8001590:	61fb      	str	r3, [r7, #28]
                          |RFM_EN_Pin|RFM_RST_Pin|PROC_M0_Pin|PROC_M1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001592:	2301      	movs	r3, #1
 8001594:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159a:	2300      	movs	r3, #0
 800159c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800159e:	f107 031c 	add.w	r3, r7, #28
 80015a2:	4619      	mov	r1, r3
 80015a4:	482e      	ldr	r0, [pc, #184]	@ (8001660 <MX_GPIO_Init+0x1a8>)
 80015a6:	f001 fc57 	bl	8002e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UI_WakeUp_Pin;
 80015aa:	2340      	movs	r3, #64	@ 0x40
 80015ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015ae:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80015b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(UI_WakeUp_GPIO_Port, &GPIO_InitStruct);
 80015b8:	f107 031c 	add.w	r3, r7, #28
 80015bc:	4619      	mov	r1, r3
 80015be:	4828      	ldr	r0, [pc, #160]	@ (8001660 <MX_GPIO_Init+0x1a8>)
 80015c0:	f001 fc4a 	bl	8002e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPS_PROC_TIME_INT_Pin|PROC_FPGA_BUSY_Pin|SD_DETECT_INT_Pin;
 80015c4:	f242 03a0 	movw	r3, #8352	@ 0x20a0
 80015c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015ca:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80015ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015d4:	f107 031c 	add.w	r3, r7, #28
 80015d8:	4619      	mov	r1, r3
 80015da:	4824      	ldr	r0, [pc, #144]	@ (800166c <MX_GPIO_Init+0x1b4>)
 80015dc:	f001 fc3c 	bl	8002e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_VBUS_DETECT_WU_Pin|UI_ARM_Pin;
 80015e0:	2305      	movs	r3, #5
 80015e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015e4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80015e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ee:	f107 031c 	add.w	r3, r7, #28
 80015f2:	4619      	mov	r1, r3
 80015f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015f8:	f001 fc2e 	bl	8002e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UI_LED_B_Pin;
 80015fc:	2302      	movs	r3, #2
 80015fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001600:	2301      	movs	r3, #1
 8001602:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	2300      	movs	r3, #0
 8001606:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001608:	2300      	movs	r3, #0
 800160a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(UI_LED_B_GPIO_Port, &GPIO_InitStruct);
 800160c:	f107 031c 	add.w	r3, r7, #28
 8001610:	4619      	mov	r1, r3
 8001612:	4814      	ldr	r0, [pc, #80]	@ (8001664 <MX_GPIO_Init+0x1ac>)
 8001614:	f001 fc20 	bl	8002e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = CLK_64M_EN_Pin|ACQ_POW_EN_Pin|STM_ACQ_TRIG_SRC0_Pin|STM_ACQ_TRIG_SRC1_Pin
 8001618:	f64c 4380 	movw	r3, #52352	@ 0xcc80
 800161c:	61fb      	str	r3, [r7, #28]
                          |GPS_RESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800161e:	2301      	movs	r3, #1
 8001620:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001626:	2300      	movs	r3, #0
 8001628:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800162a:	f107 031c 	add.w	r3, r7, #28
 800162e:	4619      	mov	r1, r3
 8001630:	480d      	ldr	r0, [pc, #52]	@ (8001668 <MX_GPIO_Init+0x1b0>)
 8001632:	f001 fc11 	bl	8002e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RFM_IRQ_Pin;
 8001636:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800163a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800163c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001640:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(RFM_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001646:	f107 031c 	add.w	r3, r7, #28
 800164a:	4619      	mov	r1, r3
 800164c:	4805      	ldr	r0, [pc, #20]	@ (8001664 <MX_GPIO_Init+0x1ac>)
 800164e:	f001 fc03 	bl	8002e58 <HAL_GPIO_Init>

}
 8001652:	bf00      	nop
 8001654:	3730      	adds	r7, #48	@ 0x30
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40021000 	.word	0x40021000
 8001660:	48001000 	.word	0x48001000
 8001664:	48000400 	.word	0x48000400
 8001668:	48000c00 	.word	0x48000c00
 800166c:	48000800 	.word	0x48000800

08001670 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001670:	b590      	push	{r4, r7, lr}
 8001672:	b089      	sub	sp, #36	@ 0x24
 8001674:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001676:	f001 f87c 	bl	8002772 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800167a:	f000 f84d 	bl	8001718 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800167e:	f7ff ff1b 	bl	80014b8 <MX_GPIO_Init>
  MX_DAC1_Init();
 8001682:	f7ff fe9f 	bl	80013c4 <MX_DAC1_Init>
  MX_SPI1_Init();
 8001686:	f000 f89d 	bl	80017c4 <MX_SPI1_Init>
  MX_SPI2_Init();
 800168a:	f000 f8d9 	bl	8001840 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800168e:	f000 fd87 	bl	80021a0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001692:	f000 fdb9 	bl	8002208 <MX_USART2_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001696:	f000 ff79 	bl	800258c <MX_USB_OTG_FS_PCD_Init>
  MX_USART3_UART_Init();
 800169a:	f000 fde5 	bl	8002268 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4,GPIO_PIN_SET);
 800169e:	2201      	movs	r2, #1
 80016a0:	2110      	movs	r1, #16
 80016a2:	4818      	ldr	r0, [pc, #96]	@ (8001704 <main+0x94>)
 80016a4:	f001 fd6a 	bl	800317c <HAL_GPIO_WritePin>

	const char startMessage[] = "\r\nStarting...\r\n";
 80016a8:	4b17      	ldr	r3, [pc, #92]	@ (8001708 <main+0x98>)
 80016aa:	f107 0410 	add.w	r4, r7, #16
 80016ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	const char initDoneMessage[] = "\r\nInit Done\r\n\n";
 80016b4:	4b15      	ldr	r3, [pc, #84]	@ (800170c <main+0x9c>)
 80016b6:	463c      	mov	r4, r7
 80016b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016ba:	c407      	stmia	r4!, {r0, r1, r2}
 80016bc:	8023      	strh	r3, [r4, #0]
 80016be:	3402      	adds	r4, #2
 80016c0:	0c1b      	lsrs	r3, r3, #16
 80016c2:	7023      	strb	r3, [r4, #0]

	HAL_UART_Transmit(&huart1, (uint8_t *)startMessage, sizeof(startMessage), 10);
 80016c4:	f107 0110 	add.w	r1, r7, #16
 80016c8:	230a      	movs	r3, #10
 80016ca:	2210      	movs	r2, #16
 80016cc:	4810      	ldr	r0, [pc, #64]	@ (8001710 <main+0xa0>)
 80016ce:	f003 fb3c 	bl	8004d4a <HAL_UART_Transmit>
	GNSSCom_Init(&huart3,&huart1);
 80016d2:	490f      	ldr	r1, [pc, #60]	@ (8001710 <main+0xa0>)
 80016d4:	480f      	ldr	r0, [pc, #60]	@ (8001714 <main+0xa4>)
 80016d6:	f7ff fbef 	bl	8000eb8 <GNSSCom_Init>
	HAL_UART_Transmit(&huart1, (uint8_t *)initDoneMessage, sizeof(initDoneMessage), 10);
 80016da:	4639      	mov	r1, r7
 80016dc:	230a      	movs	r3, #10
 80016de:	220f      	movs	r2, #15
 80016e0:	480b      	ldr	r0, [pc, #44]	@ (8001710 <main+0xa0>)
 80016e2:	f003 fb32 	bl	8004d4a <HAL_UART_Transmit>


	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_5);
 80016e6:	2110      	movs	r1, #16
 80016e8:	4806      	ldr	r0, [pc, #24]	@ (8001704 <main+0x94>)
 80016ea:	f001 fd5f 	bl	80031ac <HAL_GPIO_TogglePin>
 80016ee:	2120      	movs	r1, #32
 80016f0:	4804      	ldr	r0, [pc, #16]	@ (8001704 <main+0x94>)
 80016f2:	f001 fd5b 	bl	80031ac <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 80016f6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016fa:	f001 f8af 	bl	800285c <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80016fe:	bf00      	nop
 8001700:	e7fd      	b.n	80016fe <main+0x8e>
 8001702:	bf00      	nop
 8001704:	48001000 	.word	0x48001000
 8001708:	08009738 	.word	0x08009738
 800170c:	08009748 	.word	0x08009748
 8001710:	20000844 	.word	0x20000844
 8001714:	20000954 	.word	0x20000954

08001718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b096      	sub	sp, #88	@ 0x58
 800171c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800171e:	f107 0314 	add.w	r3, r7, #20
 8001722:	2244      	movs	r2, #68	@ 0x44
 8001724:	2100      	movs	r1, #0
 8001726:	4618      	mov	r0, r3
 8001728:	f005 ffcf 	bl	80076ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800172c:	463b      	mov	r3, r7
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	605a      	str	r2, [r3, #4]
 8001734:	609a      	str	r2, [r3, #8]
 8001736:	60da      	str	r2, [r3, #12]
 8001738:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800173a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800173e:	f001 fea5 	bl	800348c <HAL_PWREx_ControlVoltageScaling>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001748:	f000 f835 	bl	80017b6 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800174c:	2301      	movs	r3, #1
 800174e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001750:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001754:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001756:	2302      	movs	r3, #2
 8001758:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800175a:	2303      	movs	r3, #3
 800175c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 800175e:	2302      	movs	r3, #2
 8001760:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001762:	230a      	movs	r3, #10
 8001764:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001766:	2302      	movs	r3, #2
 8001768:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800176a:	2302      	movs	r3, #2
 800176c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800176e:	2302      	movs	r3, #2
 8001770:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001772:	f107 0314 	add.w	r3, r7, #20
 8001776:	4618      	mov	r0, r3
 8001778:	f001 feee 	bl	8003558 <HAL_RCC_OscConfig>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001782:	f000 f818 	bl	80017b6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001786:	230f      	movs	r3, #15
 8001788:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800178a:	2303      	movs	r3, #3
 800178c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800178e:	2300      	movs	r3, #0
 8001790:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001792:	2300      	movs	r3, #0
 8001794:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001796:	2300      	movs	r3, #0
 8001798:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800179a:	463b      	mov	r3, r7
 800179c:	2104      	movs	r1, #4
 800179e:	4618      	mov	r0, r3
 80017a0:	f002 faf4 	bl	8003d8c <HAL_RCC_ClockConfig>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <SystemClock_Config+0x96>
  {
    Error_Handler();
 80017aa:	f000 f804 	bl	80017b6 <Error_Handler>
  }
}
 80017ae:	bf00      	nop
 80017b0:	3758      	adds	r7, #88	@ 0x58
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017ba:	b672      	cpsid	i
}
 80017bc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80017be:	bf00      	nop
 80017c0:	e7fd      	b.n	80017be <Error_Handler+0x8>
	...

080017c4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80017c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001838 <MX_SPI1_Init+0x74>)
 80017ca:	4a1c      	ldr	r2, [pc, #112]	@ (800183c <MX_SPI1_Init+0x78>)
 80017cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001838 <MX_SPI1_Init+0x74>)
 80017d0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80017d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017d6:	4b18      	ldr	r3, [pc, #96]	@ (8001838 <MX_SPI1_Init+0x74>)
 80017d8:	2200      	movs	r2, #0
 80017da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80017dc:	4b16      	ldr	r3, [pc, #88]	@ (8001838 <MX_SPI1_Init+0x74>)
 80017de:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80017e2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017e4:	4b14      	ldr	r3, [pc, #80]	@ (8001838 <MX_SPI1_Init+0x74>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017ea:	4b13      	ldr	r3, [pc, #76]	@ (8001838 <MX_SPI1_Init+0x74>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80017f0:	4b11      	ldr	r3, [pc, #68]	@ (8001838 <MX_SPI1_Init+0x74>)
 80017f2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80017f6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001838 <MX_SPI1_Init+0x74>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001838 <MX_SPI1_Init+0x74>)
 8001800:	2200      	movs	r2, #0
 8001802:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001804:	4b0c      	ldr	r3, [pc, #48]	@ (8001838 <MX_SPI1_Init+0x74>)
 8001806:	2200      	movs	r2, #0
 8001808:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800180a:	4b0b      	ldr	r3, [pc, #44]	@ (8001838 <MX_SPI1_Init+0x74>)
 800180c:	2200      	movs	r2, #0
 800180e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001810:	4b09      	ldr	r3, [pc, #36]	@ (8001838 <MX_SPI1_Init+0x74>)
 8001812:	2207      	movs	r2, #7
 8001814:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001816:	4b08      	ldr	r3, [pc, #32]	@ (8001838 <MX_SPI1_Init+0x74>)
 8001818:	2200      	movs	r2, #0
 800181a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800181c:	4b06      	ldr	r3, [pc, #24]	@ (8001838 <MX_SPI1_Init+0x74>)
 800181e:	2208      	movs	r2, #8
 8001820:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001822:	4805      	ldr	r0, [pc, #20]	@ (8001838 <MX_SPI1_Init+0x74>)
 8001824:	f003 f9a0 	bl	8004b68 <HAL_SPI_Init>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800182e:	f7ff ffc2 	bl	80017b6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	200005e4 	.word	0x200005e4
 800183c:	40013000 	.word	0x40013000

08001840 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001844:	4b1b      	ldr	r3, [pc, #108]	@ (80018b4 <MX_SPI2_Init+0x74>)
 8001846:	4a1c      	ldr	r2, [pc, #112]	@ (80018b8 <MX_SPI2_Init+0x78>)
 8001848:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800184a:	4b1a      	ldr	r3, [pc, #104]	@ (80018b4 <MX_SPI2_Init+0x74>)
 800184c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001850:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001852:	4b18      	ldr	r3, [pc, #96]	@ (80018b4 <MX_SPI2_Init+0x74>)
 8001854:	2200      	movs	r2, #0
 8001856:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001858:	4b16      	ldr	r3, [pc, #88]	@ (80018b4 <MX_SPI2_Init+0x74>)
 800185a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800185e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001860:	4b14      	ldr	r3, [pc, #80]	@ (80018b4 <MX_SPI2_Init+0x74>)
 8001862:	2200      	movs	r2, #0
 8001864:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001866:	4b13      	ldr	r3, [pc, #76]	@ (80018b4 <MX_SPI2_Init+0x74>)
 8001868:	2200      	movs	r2, #0
 800186a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800186c:	4b11      	ldr	r3, [pc, #68]	@ (80018b4 <MX_SPI2_Init+0x74>)
 800186e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001872:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001874:	4b0f      	ldr	r3, [pc, #60]	@ (80018b4 <MX_SPI2_Init+0x74>)
 8001876:	2200      	movs	r2, #0
 8001878:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800187a:	4b0e      	ldr	r3, [pc, #56]	@ (80018b4 <MX_SPI2_Init+0x74>)
 800187c:	2200      	movs	r2, #0
 800187e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001880:	4b0c      	ldr	r3, [pc, #48]	@ (80018b4 <MX_SPI2_Init+0x74>)
 8001882:	2200      	movs	r2, #0
 8001884:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001886:	4b0b      	ldr	r3, [pc, #44]	@ (80018b4 <MX_SPI2_Init+0x74>)
 8001888:	2200      	movs	r2, #0
 800188a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 800188c:	4b09      	ldr	r3, [pc, #36]	@ (80018b4 <MX_SPI2_Init+0x74>)
 800188e:	2207      	movs	r2, #7
 8001890:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001892:	4b08      	ldr	r3, [pc, #32]	@ (80018b4 <MX_SPI2_Init+0x74>)
 8001894:	2200      	movs	r2, #0
 8001896:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001898:	4b06      	ldr	r3, [pc, #24]	@ (80018b4 <MX_SPI2_Init+0x74>)
 800189a:	2208      	movs	r2, #8
 800189c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800189e:	4805      	ldr	r0, [pc, #20]	@ (80018b4 <MX_SPI2_Init+0x74>)
 80018a0:	f003 f962 	bl	8004b68 <HAL_SPI_Init>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80018aa:	f7ff ff84 	bl	80017b6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20000648 	.word	0x20000648
 80018b8:	40003800 	.word	0x40003800

080018bc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b08c      	sub	sp, #48	@ 0x30
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c4:	f107 031c 	add.w	r3, r7, #28
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]
 80018d2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a2e      	ldr	r2, [pc, #184]	@ (8001994 <HAL_SPI_MspInit+0xd8>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d129      	bne.n	8001932 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018de:	4b2e      	ldr	r3, [pc, #184]	@ (8001998 <HAL_SPI_MspInit+0xdc>)
 80018e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018e2:	4a2d      	ldr	r2, [pc, #180]	@ (8001998 <HAL_SPI_MspInit+0xdc>)
 80018e4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80018e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80018ea:	4b2b      	ldr	r3, [pc, #172]	@ (8001998 <HAL_SPI_MspInit+0xdc>)
 80018ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018f2:	61bb      	str	r3, [r7, #24]
 80018f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018f6:	4b28      	ldr	r3, [pc, #160]	@ (8001998 <HAL_SPI_MspInit+0xdc>)
 80018f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018fa:	4a27      	ldr	r2, [pc, #156]	@ (8001998 <HAL_SPI_MspInit+0xdc>)
 80018fc:	f043 0310 	orr.w	r3, r3, #16
 8001900:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001902:	4b25      	ldr	r3, [pc, #148]	@ (8001998 <HAL_SPI_MspInit+0xdc>)
 8001904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001906:	f003 0310 	and.w	r3, r3, #16
 800190a:	617b      	str	r3, [r7, #20]
 800190c:	697b      	ldr	r3, [r7, #20]
    PE12     ------> SPI1_NSS
    PE13     ------> SPI1_SCK
    PE14     ------> SPI1_MISO
    PE15     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = PROC_nCS_Pin|PROC_SCLK_Pin|PROC_MISO_Pin|PROC_MOSI_Pin;
 800190e:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001914:	2302      	movs	r3, #2
 8001916:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001918:	2300      	movs	r3, #0
 800191a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800191c:	2303      	movs	r3, #3
 800191e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001920:	2305      	movs	r3, #5
 8001922:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001924:	f107 031c 	add.w	r3, r7, #28
 8001928:	4619      	mov	r1, r3
 800192a:	481c      	ldr	r0, [pc, #112]	@ (800199c <HAL_SPI_MspInit+0xe0>)
 800192c:	f001 fa94 	bl	8002e58 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001930:	e02c      	b.n	800198c <HAL_SPI_MspInit+0xd0>
  else if(spiHandle->Instance==SPI2)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a1a      	ldr	r2, [pc, #104]	@ (80019a0 <HAL_SPI_MspInit+0xe4>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d127      	bne.n	800198c <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800193c:	4b16      	ldr	r3, [pc, #88]	@ (8001998 <HAL_SPI_MspInit+0xdc>)
 800193e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001940:	4a15      	ldr	r2, [pc, #84]	@ (8001998 <HAL_SPI_MspInit+0xdc>)
 8001942:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001946:	6593      	str	r3, [r2, #88]	@ 0x58
 8001948:	4b13      	ldr	r3, [pc, #76]	@ (8001998 <HAL_SPI_MspInit+0xdc>)
 800194a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800194c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001950:	613b      	str	r3, [r7, #16]
 8001952:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001954:	4b10      	ldr	r3, [pc, #64]	@ (8001998 <HAL_SPI_MspInit+0xdc>)
 8001956:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001958:	4a0f      	ldr	r2, [pc, #60]	@ (8001998 <HAL_SPI_MspInit+0xdc>)
 800195a:	f043 0308 	orr.w	r3, r3, #8
 800195e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001960:	4b0d      	ldr	r3, [pc, #52]	@ (8001998 <HAL_SPI_MspInit+0xdc>)
 8001962:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001964:	f003 0308 	and.w	r3, r3, #8
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RFM_SPI_nCS_Pin|RFM_SPI_SCK_Pin|RFM_SPI_MISO_Pin|RFM_SPI_MOSI_Pin;
 800196c:	231b      	movs	r3, #27
 800196e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001970:	2302      	movs	r3, #2
 8001972:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001974:	2300      	movs	r3, #0
 8001976:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001978:	2303      	movs	r3, #3
 800197a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800197c:	2305      	movs	r3, #5
 800197e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001980:	f107 031c 	add.w	r3, r7, #28
 8001984:	4619      	mov	r1, r3
 8001986:	4807      	ldr	r0, [pc, #28]	@ (80019a4 <HAL_SPI_MspInit+0xe8>)
 8001988:	f001 fa66 	bl	8002e58 <HAL_GPIO_Init>
}
 800198c:	bf00      	nop
 800198e:	3730      	adds	r7, #48	@ 0x30
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40013000 	.word	0x40013000
 8001998:	40021000 	.word	0x40021000
 800199c:	48001000 	.word	0x48001000
 80019a0:	40003800 	.word	0x40003800
 80019a4:	48000c00 	.word	0x48000c00

080019a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ae:	4b0f      	ldr	r3, [pc, #60]	@ (80019ec <HAL_MspInit+0x44>)
 80019b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019b2:	4a0e      	ldr	r2, [pc, #56]	@ (80019ec <HAL_MspInit+0x44>)
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80019ba:	4b0c      	ldr	r3, [pc, #48]	@ (80019ec <HAL_MspInit+0x44>)
 80019bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	607b      	str	r3, [r7, #4]
 80019c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019c6:	4b09      	ldr	r3, [pc, #36]	@ (80019ec <HAL_MspInit+0x44>)
 80019c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ca:	4a08      	ldr	r2, [pc, #32]	@ (80019ec <HAL_MspInit+0x44>)
 80019cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80019d2:	4b06      	ldr	r3, [pc, #24]	@ (80019ec <HAL_MspInit+0x44>)
 80019d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019da:	603b      	str	r3, [r7, #0]
 80019dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019de:	bf00      	nop
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	40021000 	.word	0x40021000

080019f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019f4:	bf00      	nop
 80019f6:	e7fd      	b.n	80019f4 <NMI_Handler+0x4>

080019f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019fc:	bf00      	nop
 80019fe:	e7fd      	b.n	80019fc <HardFault_Handler+0x4>

08001a00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a04:	bf00      	nop
 8001a06:	e7fd      	b.n	8001a04 <MemManage_Handler+0x4>

08001a08 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a0c:	bf00      	nop
 8001a0e:	e7fd      	b.n	8001a0c <BusFault_Handler+0x4>

08001a10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a14:	bf00      	nop
 8001a16:	e7fd      	b.n	8001a14 <UsageFault_Handler+0x4>

08001a18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a1c:	bf00      	nop
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a26:	b480      	push	{r7}
 8001a28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a38:	bf00      	nop
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a46:	f000 fee9 	bl	800281c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	bd80      	pop	{r7, pc}
	...

08001a50 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a54:	4802      	ldr	r0, [pc, #8]	@ (8001a60 <USART1_IRQHandler+0x10>)
 8001a56:	f003 fa4d 	bl	8004ef4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	20000844 	.word	0x20000844

08001a64 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a68:	4802      	ldr	r0, [pc, #8]	@ (8001a74 <USART2_IRQHandler+0x10>)
 8001a6a:	f003 fa43 	bl	8004ef4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	200008cc 	.word	0x200008cc

08001a78 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001a7c:	4802      	ldr	r0, [pc, #8]	@ (8001a88 <USART3_IRQHandler+0x10>)
 8001a7e:	f003 fa39 	bl	8004ef4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	20000954 	.word	0x20000954

08001a8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  return 1;
 8001a90:	2301      	movs	r3, #1
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <_kill>:

int _kill(int pid, int sig)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001aa6:	f005 fe85 	bl	80077b4 <__errno>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2216      	movs	r2, #22
 8001aae:	601a      	str	r2, [r3, #0]
  return -1;
 8001ab0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <_exit>:

void _exit (int status)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f7ff ffe7 	bl	8001a9c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ace:	bf00      	nop
 8001ad0:	e7fd      	b.n	8001ace <_exit+0x12>

08001ad2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b086      	sub	sp, #24
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	60f8      	str	r0, [r7, #12]
 8001ada:	60b9      	str	r1, [r7, #8]
 8001adc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ade:	2300      	movs	r3, #0
 8001ae0:	617b      	str	r3, [r7, #20]
 8001ae2:	e00a      	b.n	8001afa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ae4:	f3af 8000 	nop.w
 8001ae8:	4601      	mov	r1, r0
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	1c5a      	adds	r2, r3, #1
 8001aee:	60ba      	str	r2, [r7, #8]
 8001af0:	b2ca      	uxtb	r2, r1
 8001af2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	3301      	adds	r3, #1
 8001af8:	617b      	str	r3, [r7, #20]
 8001afa:	697a      	ldr	r2, [r7, #20]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	dbf0      	blt.n	8001ae4 <_read+0x12>
  }

  return len;
 8001b02:	687b      	ldr	r3, [r7, #4]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3718      	adds	r7, #24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]
 8001b1c:	e009      	b.n	8001b32 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	1c5a      	adds	r2, r3, #1
 8001b22:	60ba      	str	r2, [r7, #8]
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	617b      	str	r3, [r7, #20]
 8001b32:	697a      	ldr	r2, [r7, #20]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	dbf1      	blt.n	8001b1e <_write+0x12>
  }
  return len;
 8001b3a:	687b      	ldr	r3, [r7, #4]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3718      	adds	r7, #24
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <_close>:

int _close(int file)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b6c:	605a      	str	r2, [r3, #4]
  return 0;
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <_isatty>:

int _isatty(int file)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b84:	2301      	movs	r3, #1
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b92:	b480      	push	{r7}
 8001b94:	b085      	sub	sp, #20
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	60f8      	str	r0, [r7, #12]
 8001b9a:	60b9      	str	r1, [r7, #8]
 8001b9c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b9e:	2300      	movs	r3, #0
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3714      	adds	r7, #20
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bb4:	4a14      	ldr	r2, [pc, #80]	@ (8001c08 <_sbrk+0x5c>)
 8001bb6:	4b15      	ldr	r3, [pc, #84]	@ (8001c0c <_sbrk+0x60>)
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bc0:	4b13      	ldr	r3, [pc, #76]	@ (8001c10 <_sbrk+0x64>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d102      	bne.n	8001bce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bc8:	4b11      	ldr	r3, [pc, #68]	@ (8001c10 <_sbrk+0x64>)
 8001bca:	4a12      	ldr	r2, [pc, #72]	@ (8001c14 <_sbrk+0x68>)
 8001bcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bce:	4b10      	ldr	r3, [pc, #64]	@ (8001c10 <_sbrk+0x64>)
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d207      	bcs.n	8001bec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bdc:	f005 fdea 	bl	80077b4 <__errno>
 8001be0:	4603      	mov	r3, r0
 8001be2:	220c      	movs	r2, #12
 8001be4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001be6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bea:	e009      	b.n	8001c00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bec:	4b08      	ldr	r3, [pc, #32]	@ (8001c10 <_sbrk+0x64>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bf2:	4b07      	ldr	r3, [pc, #28]	@ (8001c10 <_sbrk+0x64>)
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	4a05      	ldr	r2, [pc, #20]	@ (8001c10 <_sbrk+0x64>)
 8001bfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3718      	adds	r7, #24
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	20050000 	.word	0x20050000
 8001c0c:	00000400 	.word	0x00000400
 8001c10:	200006ac 	.word	0x200006ac
 8001c14:	20001038 	.word	0x20001038

08001c18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001c1c:	4b06      	ldr	r3, [pc, #24]	@ (8001c38 <SystemInit+0x20>)
 8001c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c22:	4a05      	ldr	r2, [pc, #20]	@ (8001c38 <SystemInit+0x20>)
 8001c24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001c2c:	bf00      	nop
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	e000ed00 	.word	0xe000ed00

08001c3c <debug_UBX_NAV_TIMEUTC>:
 */

#include "traductor.h"


void debug_UBX_NAV_TIMEUTC(UBXMessage_parsed* UBXMessage,UBX_NAV_TIMEUTC *structAssociate){
 8001c3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c40:	b093      	sub	sp, #76	@ 0x4c
 8001c42:	af08      	add	r7, sp, #32
 8001c44:	61f8      	str	r0, [r7, #28]
 8001c46:	61b9      	str	r1, [r7, #24]
	size_t offset = 0;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	627b      	str	r3, [r7, #36]	@ 0x24
	ITM_Port32(31)=21;
 8001c4c:	4b71      	ldr	r3, [pc, #452]	@ (8001e14 <debug_UBX_NAV_TIMEUTC+0x1d8>)
 8001c4e:	2215      	movs	r2, #21
 8001c50:	601a      	str	r2, [r3, #0]
	memcpy(&(structAssociate->iTOW), UBXMessage->load + offset, sizeof(structAssociate->iTOW));
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	69fa      	ldr	r2, [r7, #28]
 8001c56:	1d11      	adds	r1, r2, #4
 8001c58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c5a:	440a      	add	r2, r1
 8001c5c:	6812      	ldr	r2, [r2, #0]
 8001c5e:	601a      	str	r2, [r3, #0]
	offset += sizeof(structAssociate->iTOW);
 8001c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c62:	3304      	adds	r3, #4
 8001c64:	627b      	str	r3, [r7, #36]	@ 0x24

	memcpy(&(structAssociate->tAcc), UBXMessage->load + offset, sizeof(structAssociate->tAcc));
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	3304      	adds	r3, #4
 8001c6a:	69fa      	ldr	r2, [r7, #28]
 8001c6c:	1d11      	adds	r1, r2, #4
 8001c6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c70:	440a      	add	r2, r1
 8001c72:	6812      	ldr	r2, [r2, #0]
 8001c74:	601a      	str	r2, [r3, #0]
	offset += sizeof(structAssociate->tAcc);
 8001c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c78:	3304      	adds	r3, #4
 8001c7a:	627b      	str	r3, [r7, #36]	@ 0x24

	memcpy(&(structAssociate->nano), UBXMessage->load + offset, sizeof(structAssociate->nano));
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	3308      	adds	r3, #8
 8001c80:	69fa      	ldr	r2, [r7, #28]
 8001c82:	1d11      	adds	r1, r2, #4
 8001c84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c86:	440a      	add	r2, r1
 8001c88:	6812      	ldr	r2, [r2, #0]
 8001c8a:	601a      	str	r2, [r3, #0]
	offset += sizeof(structAssociate->nano);
 8001c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c8e:	3304      	adds	r3, #4
 8001c90:	627b      	str	r3, [r7, #36]	@ 0x24

	memcpy(&(structAssociate->year), UBXMessage->load + offset, sizeof(structAssociate->year));
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	330c      	adds	r3, #12
 8001c96:	69fa      	ldr	r2, [r7, #28]
 8001c98:	1d11      	adds	r1, r2, #4
 8001c9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c9c:	440a      	add	r2, r1
 8001c9e:	8812      	ldrh	r2, [r2, #0]
 8001ca0:	b292      	uxth	r2, r2
 8001ca2:	801a      	strh	r2, [r3, #0]
	offset += sizeof(structAssociate->year);
 8001ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca6:	3302      	adds	r3, #2
 8001ca8:	627b      	str	r3, [r7, #36]	@ 0x24

	memcpy(&(structAssociate->month), UBXMessage->load + offset, sizeof(structAssociate->month));
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	330e      	adds	r3, #14
 8001cae:	69fa      	ldr	r2, [r7, #28]
 8001cb0:	1d11      	adds	r1, r2, #4
 8001cb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cb4:	440a      	add	r2, r1
 8001cb6:	7812      	ldrb	r2, [r2, #0]
 8001cb8:	701a      	strb	r2, [r3, #0]
	offset += sizeof(structAssociate->month);
 8001cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	627b      	str	r3, [r7, #36]	@ 0x24

	memcpy(&(structAssociate->day), UBXMessage->load + offset, sizeof(structAssociate->day));
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	330f      	adds	r3, #15
 8001cc4:	69fa      	ldr	r2, [r7, #28]
 8001cc6:	1d11      	adds	r1, r2, #4
 8001cc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cca:	440a      	add	r2, r1
 8001ccc:	7812      	ldrb	r2, [r2, #0]
 8001cce:	701a      	strb	r2, [r3, #0]
	offset += sizeof(structAssociate->day);
 8001cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	627b      	str	r3, [r7, #36]	@ 0x24

	memcpy(&(structAssociate->hour), UBXMessage->load + offset, sizeof(structAssociate->hour));
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	3310      	adds	r3, #16
 8001cda:	69fa      	ldr	r2, [r7, #28]
 8001cdc:	1d11      	adds	r1, r2, #4
 8001cde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ce0:	440a      	add	r2, r1
 8001ce2:	7812      	ldrb	r2, [r2, #0]
 8001ce4:	701a      	strb	r2, [r3, #0]
	offset += sizeof(structAssociate->hour);
 8001ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce8:	3301      	adds	r3, #1
 8001cea:	627b      	str	r3, [r7, #36]	@ 0x24

	memcpy(&(structAssociate->min), UBXMessage->load + offset, sizeof(structAssociate->min));
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	3311      	adds	r3, #17
 8001cf0:	69fa      	ldr	r2, [r7, #28]
 8001cf2:	1d11      	adds	r1, r2, #4
 8001cf4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cf6:	440a      	add	r2, r1
 8001cf8:	7812      	ldrb	r2, [r2, #0]
 8001cfa:	701a      	strb	r2, [r3, #0]
	offset += sizeof(structAssociate->min);
 8001cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cfe:	3301      	adds	r3, #1
 8001d00:	627b      	str	r3, [r7, #36]	@ 0x24

	memcpy(&(structAssociate->sec), UBXMessage->load + offset, sizeof(structAssociate->sec));
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	3312      	adds	r3, #18
 8001d06:	69fa      	ldr	r2, [r7, #28]
 8001d08:	1d11      	adds	r1, r2, #4
 8001d0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d0c:	440a      	add	r2, r1
 8001d0e:	7812      	ldrb	r2, [r2, #0]
 8001d10:	701a      	strb	r2, [r3, #0]
	offset += sizeof(structAssociate->sec);
 8001d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d14:	3301      	adds	r3, #1
 8001d16:	627b      	str	r3, [r7, #36]	@ 0x24

	memcpy(&(structAssociate->valid), UBXMessage->load + offset, sizeof(structAssociate->valid));
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	3313      	adds	r3, #19
 8001d1c:	69fa      	ldr	r2, [r7, #28]
 8001d1e:	1d11      	adds	r1, r2, #4
 8001d20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d22:	440a      	add	r2, r1
 8001d24:	7812      	ldrb	r2, [r2, #0]
 8001d26:	701a      	strb	r2, [r3, #0]
	offset += sizeof(structAssociate->valid);
 8001d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	627b      	str	r3, [r7, #36]	@ 0x24

	int len =sprintf(UBXMessage->bufferDebug,
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	f103 05cc 	add.w	r5, r3, #204	@ 0xcc
			"iTOW [ms]: %u\r\n"
			"tAcc [ns]: %u\r\n"
			"Date [YYYY-MM-DD]: %u-%u-%u\r\n"
			"Time [HH:MM:SS]: %u:%u:%u - %u [ns]\r\n"
			"valid: %u\r\n",
			bytes_to_endian(structAssociate->iTOW,sizeof(structAssociate->iTOW),'l'),
 8001d34:	69bb      	ldr	r3, [r7, #24]
	int len =sprintf(UBXMessage->bufferDebug,
 8001d36:	226c      	movs	r2, #108	@ 0x6c
 8001d38:	2104      	movs	r1, #4
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f000 f91a 	bl	8001f74 <bytes_to_endian>
 8001d40:	4680      	mov	r8, r0
			bytes_to_endian(structAssociate->tAcc,sizeof(structAssociate->tAcc),'l'),
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	3304      	adds	r3, #4
	int len =sprintf(UBXMessage->bufferDebug,
 8001d46:	226c      	movs	r2, #108	@ 0x6c
 8001d48:	2104      	movs	r1, #4
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f000 f912 	bl	8001f74 <bytes_to_endian>
 8001d50:	4681      	mov	r9, r0
			bytes_to_endian(structAssociate->year,sizeof(structAssociate->year),'l'),
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	330c      	adds	r3, #12
	int len =sprintf(UBXMessage->bufferDebug,
 8001d56:	226c      	movs	r2, #108	@ 0x6c
 8001d58:	2102      	movs	r1, #2
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f000 f90a 	bl	8001f74 <bytes_to_endian>
 8001d60:	4606      	mov	r6, r0
			bytes_to_endian(structAssociate->month,sizeof(structAssociate->month),'l'),
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	330e      	adds	r3, #14
	int len =sprintf(UBXMessage->bufferDebug,
 8001d66:	226c      	movs	r2, #108	@ 0x6c
 8001d68:	2101      	movs	r1, #1
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f000 f902 	bl	8001f74 <bytes_to_endian>
 8001d70:	6178      	str	r0, [r7, #20]
			bytes_to_endian(structAssociate->day,sizeof(structAssociate->day),'l'),
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	330f      	adds	r3, #15
	int len =sprintf(UBXMessage->bufferDebug,
 8001d76:	226c      	movs	r2, #108	@ 0x6c
 8001d78:	2101      	movs	r1, #1
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f000 f8fa 	bl	8001f74 <bytes_to_endian>
 8001d80:	6138      	str	r0, [r7, #16]
			bytes_to_endian(structAssociate->hour,sizeof(structAssociate->hour),'l'),
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	3310      	adds	r3, #16
	int len =sprintf(UBXMessage->bufferDebug,
 8001d86:	226c      	movs	r2, #108	@ 0x6c
 8001d88:	2101      	movs	r1, #1
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f000 f8f2 	bl	8001f74 <bytes_to_endian>
 8001d90:	60f8      	str	r0, [r7, #12]
			bytes_to_endian(structAssociate->min,sizeof(structAssociate->min),'l'),
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	3311      	adds	r3, #17
	int len =sprintf(UBXMessage->bufferDebug,
 8001d96:	226c      	movs	r2, #108	@ 0x6c
 8001d98:	2101      	movs	r1, #1
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f000 f8ea 	bl	8001f74 <bytes_to_endian>
 8001da0:	60b8      	str	r0, [r7, #8]
			bytes_to_endian(structAssociate->sec,sizeof(structAssociate->sec),'l'),
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	3312      	adds	r3, #18
	int len =sprintf(UBXMessage->bufferDebug,
 8001da6:	226c      	movs	r2, #108	@ 0x6c
 8001da8:	2101      	movs	r1, #1
 8001daa:	4618      	mov	r0, r3
 8001dac:	f000 f8e2 	bl	8001f74 <bytes_to_endian>
 8001db0:	6078      	str	r0, [r7, #4]
			bytes_to_endian(structAssociate->nano,sizeof(structAssociate->nano),'l'),
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	3308      	adds	r3, #8
	int len =sprintf(UBXMessage->bufferDebug,
 8001db6:	226c      	movs	r2, #108	@ 0x6c
 8001db8:	2104      	movs	r1, #4
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f000 f8da 	bl	8001f74 <bytes_to_endian>
 8001dc0:	4604      	mov	r4, r0
			bytes_to_endian(structAssociate->valid,sizeof(structAssociate->valid),'l')
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	3313      	adds	r3, #19
	int len =sprintf(UBXMessage->bufferDebug,
 8001dc6:	226c      	movs	r2, #108	@ 0x6c
 8001dc8:	2101      	movs	r1, #1
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f000 f8d2 	bl	8001f74 <bytes_to_endian>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	9307      	str	r3, [sp, #28]
 8001dd4:	9406      	str	r4, [sp, #24]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	9305      	str	r3, [sp, #20]
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	9304      	str	r3, [sp, #16]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	9303      	str	r3, [sp, #12]
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	9302      	str	r3, [sp, #8]
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	9301      	str	r3, [sp, #4]
 8001dea:	9600      	str	r6, [sp, #0]
 8001dec:	464b      	mov	r3, r9
 8001dee:	4642      	mov	r2, r8
 8001df0:	4909      	ldr	r1, [pc, #36]	@ (8001e18 <debug_UBX_NAV_TIMEUTC+0x1dc>)
 8001df2:	4628      	mov	r0, r5
 8001df4:	f005 fc06 	bl	8007604 <siprintf>
 8001df8:	6238      	str	r0, [r7, #32]
	);

	fill_unuse_memory(UBXMessage,len);
 8001dfa:	6a39      	ldr	r1, [r7, #32]
 8001dfc:	69f8      	ldr	r0, [r7, #28]
 8001dfe:	f000 f98c 	bl	800211a <fill_unuse_memory>
	ITM_Port32(31)=20;
 8001e02:	4b04      	ldr	r3, [pc, #16]	@ (8001e14 <debug_UBX_NAV_TIMEUTC+0x1d8>)
 8001e04:	2214      	movs	r2, #20
 8001e06:	601a      	str	r2, [r3, #0]
}
 8001e08:	bf00      	nop
 8001e0a:	372c      	adds	r7, #44	@ 0x2c
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001e12:	bf00      	nop
 8001e14:	e000007c 	.word	0xe000007c
 8001e18:	08009758 	.word	0x08009758

08001e1c <debug_SetVal>:

void debug_SetVal(UBXMessage_parsed* UBXMessage,UBX_CFG_SETVAL* structAssociate){
 8001e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e1e:	b087      	sub	sp, #28
 8001e20:	af02      	add	r7, sp, #8
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]

	size_t offset = 0;
 8001e26:	2300      	movs	r3, #0
 8001e28:	60fb      	str	r3, [r7, #12]

	memcpy(&(structAssociate->version), UBXMessage->load + offset, sizeof(structAssociate->version));
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	1d11      	adds	r1, r2, #4
 8001e30:	68fa      	ldr	r2, [r7, #12]
 8001e32:	440a      	add	r2, r1
 8001e34:	7812      	ldrb	r2, [r2, #0]
 8001e36:	701a      	strb	r2, [r3, #0]
	offset += sizeof((structAssociate->version));
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	60fb      	str	r3, [r7, #12]

	memcpy(&(structAssociate->layers), UBXMessage->load + offset, sizeof(structAssociate->layers));
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	3301      	adds	r3, #1
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	1d11      	adds	r1, r2, #4
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	440a      	add	r2, r1
 8001e4a:	7812      	ldrb	r2, [r2, #0]
 8001e4c:	701a      	strb	r2, [r3, #0]
	offset += sizeof((structAssociate->layers));
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	3301      	adds	r3, #1
 8001e52:	60fb      	str	r3, [r7, #12]

	offset += sizeof((structAssociate->reserved));
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	3302      	adds	r3, #2
 8001e58:	60fb      	str	r3, [r7, #12]

	memcpy(&(structAssociate->cfgData), UBXMessage->load + offset, sizeof(structAssociate->cfgData));
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	1d18      	adds	r0, r3, #4
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	1d1a      	adds	r2, r3, #4
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	4413      	add	r3, r2
 8001e66:	22c8      	movs	r2, #200	@ 0xc8
 8001e68:	4619      	mov	r1, r3
 8001e6a:	f005 fcd0 	bl	800780e <memcpy>
	offset += sizeof((structAssociate->cfgData));
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	33c8      	adds	r3, #200	@ 0xc8
 8001e72:	60fb      	str	r3, [r7, #12]
	//Diviser ici en flag
	//

	int len = sprintf(UBXMessage->bufferDebug,
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f103 04cc 	add.w	r4, r3, #204	@ 0xcc
			"\r\n__debug_SetVal___\r\n"
			"version: %u\r\n"
			"layers: %u\r\n"
			"KeyId|Value: %s\r\n",
			bytes_to_endian(structAssociate->version,sizeof(structAssociate->version),'b'),
 8001e7a:	683b      	ldr	r3, [r7, #0]
	int len = sprintf(UBXMessage->bufferDebug,
 8001e7c:	2262      	movs	r2, #98	@ 0x62
 8001e7e:	2101      	movs	r1, #1
 8001e80:	4618      	mov	r0, r3
 8001e82:	f000 f877 	bl	8001f74 <bytes_to_endian>
 8001e86:	4605      	mov	r5, r0
			bytes_to_endian(structAssociate->layers,sizeof(structAssociate->layers),'l'),
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	3301      	adds	r3, #1
	int len = sprintf(UBXMessage->bufferDebug,
 8001e8c:	226c      	movs	r2, #108	@ 0x6c
 8001e8e:	2101      	movs	r1, #1
 8001e90:	4618      	mov	r0, r3
 8001e92:	f000 f86f 	bl	8001f74 <bytes_to_endian>
 8001e96:	4606      	mov	r6, r0
			array_to_hex_string(structAssociate->cfgData,sizeof(structAssociate->cfgData))
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	3304      	adds	r3, #4
	int len = sprintf(UBXMessage->bufferDebug,
 8001e9c:	21c8      	movs	r1, #200	@ 0xc8
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f000 f954 	bl	800214c <array_to_hex_string>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	9300      	str	r3, [sp, #0]
 8001ea8:	4633      	mov	r3, r6
 8001eaa:	462a      	mov	r2, r5
 8001eac:	4906      	ldr	r1, [pc, #24]	@ (8001ec8 <debug_SetVal+0xac>)
 8001eae:	4620      	mov	r0, r4
 8001eb0:	f005 fba8 	bl	8007604 <siprintf>
 8001eb4:	60b8      	str	r0, [r7, #8]
	);
	fill_unuse_memory(UBXMessage,len);
 8001eb6:	68b9      	ldr	r1, [r7, #8]
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f000 f92e 	bl	800211a <fill_unuse_memory>
}
 8001ebe:	bf00      	nop
 8001ec0:	3714      	adds	r7, #20
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	080097e4 	.word	0x080097e4

08001ecc <debug_PollMessage>:
void debug_PollMessage(UBXMessage_parsed* UBXMessage,UBX_CFG_MSG* structAssociate){
 8001ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ece:	b087      	sub	sp, #28
 8001ed0:	af02      	add	r7, sp, #8
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
	size_t offset = 0;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60fb      	str	r3, [r7, #12]

		memcpy(&(structAssociate->msgClass), UBXMessage->load + offset, sizeof(structAssociate->msgClass));
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	1d11      	adds	r1, r2, #4
 8001ee0:	68fa      	ldr	r2, [r7, #12]
 8001ee2:	440a      	add	r2, r1
 8001ee4:	7812      	ldrb	r2, [r2, #0]
 8001ee6:	701a      	strb	r2, [r3, #0]
		offset += sizeof((structAssociate->msgClass));
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	3301      	adds	r3, #1
 8001eec:	60fb      	str	r3, [r7, #12]

		memcpy(&(structAssociate->msgID), UBXMessage->load + offset, sizeof(structAssociate->msgID));
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	1d11      	adds	r1, r2, #4
 8001ef6:	68fa      	ldr	r2, [r7, #12]
 8001ef8:	440a      	add	r2, r1
 8001efa:	7812      	ldrb	r2, [r2, #0]
 8001efc:	701a      	strb	r2, [r3, #0]
		offset += sizeof((structAssociate->msgID));
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	3301      	adds	r3, #1
 8001f02:	60fb      	str	r3, [r7, #12]

		memcpy(&(structAssociate->rate), UBXMessage->load + offset, sizeof(structAssociate->rate));
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	3302      	adds	r3, #2
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	1d11      	adds	r1, r2, #4
 8001f0c:	68fa      	ldr	r2, [r7, #12]
 8001f0e:	440a      	add	r2, r1
 8001f10:	7812      	ldrb	r2, [r2, #0]
 8001f12:	701a      	strb	r2, [r3, #0]
		offset += sizeof((structAssociate->rate));
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	3301      	adds	r3, #1
 8001f18:	60fb      	str	r3, [r7, #12]

		int len = sprintf(UBXMessage->bufferDebug,
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f103 04cc 	add.w	r4, r3, #204	@ 0xcc
				"\r\n__debug_PollMsg___\r\n"
				"msgClass: %u\r\n"
				"msgID: %u\r\n"
				"rate :%u\r\n",
				bytes_to_endian(structAssociate->msgClass,sizeof(structAssociate->msgClass),'l'),
 8001f20:	683b      	ldr	r3, [r7, #0]
		int len = sprintf(UBXMessage->bufferDebug,
 8001f22:	226c      	movs	r2, #108	@ 0x6c
 8001f24:	2101      	movs	r1, #1
 8001f26:	4618      	mov	r0, r3
 8001f28:	f000 f824 	bl	8001f74 <bytes_to_endian>
 8001f2c:	4605      	mov	r5, r0
				bytes_to_endian(structAssociate->msgID,sizeof(structAssociate->msgID),'l'),
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	3301      	adds	r3, #1
		int len = sprintf(UBXMessage->bufferDebug,
 8001f32:	226c      	movs	r2, #108	@ 0x6c
 8001f34:	2101      	movs	r1, #1
 8001f36:	4618      	mov	r0, r3
 8001f38:	f000 f81c 	bl	8001f74 <bytes_to_endian>
 8001f3c:	4606      	mov	r6, r0
				bytes_to_endian(structAssociate->rate,sizeof(structAssociate->rate),'l')
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	3302      	adds	r3, #2
		int len = sprintf(UBXMessage->bufferDebug,
 8001f42:	226c      	movs	r2, #108	@ 0x6c
 8001f44:	2101      	movs	r1, #1
 8001f46:	4618      	mov	r0, r3
 8001f48:	f000 f814 	bl	8001f74 <bytes_to_endian>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	9300      	str	r3, [sp, #0]
 8001f50:	4633      	mov	r3, r6
 8001f52:	462a      	mov	r2, r5
 8001f54:	4906      	ldr	r1, [pc, #24]	@ (8001f70 <debug_PollMessage+0xa4>)
 8001f56:	4620      	mov	r0, r4
 8001f58:	f005 fb54 	bl	8007604 <siprintf>
 8001f5c:	60b8      	str	r0, [r7, #8]
		);
		fill_unuse_memory(UBXMessage,len);
 8001f5e:	68b9      	ldr	r1, [r7, #8]
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f000 f8da 	bl	800211a <fill_unuse_memory>

}
 8001f66:	bf00      	nop
 8001f68:	3714      	adds	r7, #20
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	08009824 	.word	0x08009824

08001f74 <bytes_to_endian>:
unsigned int bytes_to_endian(uint8_t attr[], size_t length, char type_endian) {
 8001f74:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001f78:	b097      	sub	sp, #92	@ 0x5c
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001f7e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001f80:	4613      	mov	r3, r2
 8001f82:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint64_t result = 0;
 8001f86:	f04f 0200 	mov.w	r2, #0
 8001f8a:	f04f 0300 	mov.w	r3, #0
 8001f8e:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	if (type_endian == 'l') { // little-endian
 8001f92:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001f96:	2b6c      	cmp	r3, #108	@ 0x6c
 8001f98:	d136      	bne.n	8002008 <bytes_to_endian+0x94>
		for (size_t i = 0; i < length; ++i) {
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001f9e:	e02e      	b.n	8001ffe <bytes_to_endian+0x8a>
			result |= ((uint64_t)attr[i]) << (i * 8);
 8001fa0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001fa2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001fa4:	4413      	add	r3, r2
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2200      	movs	r2, #0
 8001fac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001fae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001fb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	f1a3 0120 	sub.w	r1, r3, #32
 8001fb8:	f1c3 0220 	rsb	r2, r3, #32
 8001fbc:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8001fc0:	4628      	mov	r0, r5
 8001fc2:	fa00 fb03 	lsl.w	fp, r0, r3
 8001fc6:	4620      	mov	r0, r4
 8001fc8:	fa00 f101 	lsl.w	r1, r0, r1
 8001fcc:	ea4b 0b01 	orr.w	fp, fp, r1
 8001fd0:	4621      	mov	r1, r4
 8001fd2:	fa21 f202 	lsr.w	r2, r1, r2
 8001fd6:	ea4b 0b02 	orr.w	fp, fp, r2
 8001fda:	4622      	mov	r2, r4
 8001fdc:	fa02 fa03 	lsl.w	sl, r2, r3
 8001fe0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001fe4:	ea42 010a 	orr.w	r1, r2, sl
 8001fe8:	6139      	str	r1, [r7, #16]
 8001fea:	ea43 030b 	orr.w	r3, r3, fp
 8001fee:	617b      	str	r3, [r7, #20]
 8001ff0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001ff4:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
		for (size_t i = 0; i < length; ++i) {
 8001ff8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ffe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002002:	429a      	cmp	r2, r3
 8002004:	d3cc      	bcc.n	8001fa0 <bytes_to_endian+0x2c>
 8002006:	e081      	b.n	800210c <bytes_to_endian+0x198>
		}
	} else if (type_endian == 'b') { // big-endian
 8002008:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800200c:	2b62      	cmp	r3, #98	@ 0x62
 800200e:	d138      	bne.n	8002082 <bytes_to_endian+0x10e>
		for (size_t i = 0; i < length; ++i) {
 8002010:	2300      	movs	r3, #0
 8002012:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002014:	e030      	b.n	8002078 <bytes_to_endian+0x104>
			result |= ((uint64_t)attr[i]) << ((sizeof(uint64_t) - i - 1) * 8);
 8002016:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002018:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800201a:	4413      	add	r3, r2
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	b2db      	uxtb	r3, r3
 8002020:	2200      	movs	r2, #0
 8002022:	623b      	str	r3, [r7, #32]
 8002024:	627a      	str	r2, [r7, #36]	@ 0x24
 8002026:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002028:	f1c3 0307 	rsb	r3, r3, #7
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	f1a3 0120 	sub.w	r1, r3, #32
 8002032:	f1c3 0220 	rsb	r2, r3, #32
 8002036:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800203a:	4628      	mov	r0, r5
 800203c:	fa00 f903 	lsl.w	r9, r0, r3
 8002040:	4620      	mov	r0, r4
 8002042:	fa00 f101 	lsl.w	r1, r0, r1
 8002046:	ea49 0901 	orr.w	r9, r9, r1
 800204a:	4621      	mov	r1, r4
 800204c:	fa21 f202 	lsr.w	r2, r1, r2
 8002050:	ea49 0902 	orr.w	r9, r9, r2
 8002054:	4622      	mov	r2, r4
 8002056:	fa02 f803 	lsl.w	r8, r2, r3
 800205a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800205e:	ea42 0108 	orr.w	r1, r2, r8
 8002062:	60b9      	str	r1, [r7, #8]
 8002064:	ea43 0309 	orr.w	r3, r3, r9
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800206e:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
		for (size_t i = 0; i < length; ++i) {
 8002072:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002074:	3301      	adds	r3, #1
 8002076:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002078:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800207a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800207c:	429a      	cmp	r2, r3
 800207e:	d3ca      	bcc.n	8002016 <bytes_to_endian+0xa2>
 8002080:	e044      	b.n	800210c <bytes_to_endian+0x198>
		}
	}
	else if (type_endian == '2'){ //little-endiand 2's complements
 8002082:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002086:	2b32      	cmp	r3, #50	@ 0x32
 8002088:	d140      	bne.n	800210c <bytes_to_endian+0x198>
		if (attr[length - 1] & 0x80) { // Check if the most significant bit (MSB) is 1 (indicating negative number)
 800208a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800208c:	3b01      	subs	r3, #1
 800208e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002090:	4413      	add	r3, r2
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	b25b      	sxtb	r3, r3
 8002096:	2b00      	cmp	r3, #0
 8002098:	da05      	bge.n	80020a6 <bytes_to_endian+0x132>
			result = -1; // Initialize result to all 1s for negative number
 800209a:	f04f 32ff 	mov.w	r2, #4294967295
 800209e:	f04f 33ff 	mov.w	r3, #4294967295
 80020a2:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
		}
		for (size_t i = 0; i < length; ++i) {
 80020a6:	2300      	movs	r3, #0
 80020a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80020aa:	e02b      	b.n	8002104 <bytes_to_endian+0x190>
			result |= ((uint64_t)attr[i]) << (i * 8);
 80020ac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80020ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020b0:	4413      	add	r3, r2
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2200      	movs	r2, #0
 80020b8:	61bb      	str	r3, [r7, #24]
 80020ba:	61fa      	str	r2, [r7, #28]
 80020bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	f1a3 0120 	sub.w	r1, r3, #32
 80020c4:	f1c3 0220 	rsb	r2, r3, #32
 80020c8:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80020cc:	4648      	mov	r0, r9
 80020ce:	fa00 f503 	lsl.w	r5, r0, r3
 80020d2:	4640      	mov	r0, r8
 80020d4:	fa00 f101 	lsl.w	r1, r0, r1
 80020d8:	430d      	orrs	r5, r1
 80020da:	4641      	mov	r1, r8
 80020dc:	fa21 f202 	lsr.w	r2, r1, r2
 80020e0:	4315      	orrs	r5, r2
 80020e2:	4642      	mov	r2, r8
 80020e4:	fa02 f403 	lsl.w	r4, r2, r3
 80020e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80020ec:	ea42 0104 	orr.w	r1, r2, r4
 80020f0:	6039      	str	r1, [r7, #0]
 80020f2:	432b      	orrs	r3, r5
 80020f4:	607b      	str	r3, [r7, #4]
 80020f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80020fa:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
		for (size_t i = 0; i < length; ++i) {
 80020fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002100:	3301      	adds	r3, #1
 8002102:	647b      	str	r3, [r7, #68]	@ 0x44
 8002104:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002108:	429a      	cmp	r2, r3
 800210a:	d3cf      	bcc.n	80020ac <bytes_to_endian+0x138>
		}
	}
	return result;
 800210c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 800210e:	4618      	mov	r0, r3
 8002110:	375c      	adds	r7, #92	@ 0x5c
 8002112:	46bd      	mov	sp, r7
 8002114:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002118:	4770      	bx	lr

0800211a <fill_unuse_memory>:
void fill_unuse_memory(UBXMessage_parsed* UBXMessage,int len_use){
 800211a:	b580      	push	{r7, lr}
 800211c:	b082      	sub	sp, #8
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
 8002122:	6039      	str	r1, [r7, #0]
	if (len_use < sizeof(UBXMessage->bufferDebug)) {
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	2bc7      	cmp	r3, #199	@ 0xc7
 8002128:	d80b      	bhi.n	8002142 <fill_unuse_memory+0x28>
		memset(UBXMessage->bufferDebug + len_use, '/', sizeof(UBXMessage->bufferDebug) - len_use);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f103 02cc 	add.w	r2, r3, #204	@ 0xcc
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	18d0      	adds	r0, r2, r3
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 800213a:	461a      	mov	r2, r3
 800213c:	212f      	movs	r1, #47	@ 0x2f
 800213e:	f005 fac4 	bl	80076ca <memset>
	}
}
 8002142:	bf00      	nop
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
	...

0800214c <array_to_hex_string>:
char* array_to_hex_string(const uint8_t* array, size_t length) {
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
	// Taille maximale pour le buffer
	static char hex_string[UART_RX_BUFFER_SIZE * 2 + 1];
	for (size_t i = 0; i < length; ++i) {
 8002156:	2300      	movs	r3, #0
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	e00e      	b.n	800217a <array_to_hex_string+0x2e>
		sprintf(hex_string + (i * 2), "%02x", array[i]);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	4a0d      	ldr	r2, [pc, #52]	@ (8002198 <array_to_hex_string+0x4c>)
 8002162:	1898      	adds	r0, r3, r2
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	4413      	add	r3, r2
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	461a      	mov	r2, r3
 800216e:	490b      	ldr	r1, [pc, #44]	@ (800219c <array_to_hex_string+0x50>)
 8002170:	f005 fa48 	bl	8007604 <siprintf>
	for (size_t i = 0; i < length; ++i) {
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	3301      	adds	r3, #1
 8002178:	60fb      	str	r3, [r7, #12]
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	429a      	cmp	r2, r3
 8002180:	d3ec      	bcc.n	800215c <array_to_hex_string+0x10>
	}
	hex_string[length * 2] = '\0';
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	4a04      	ldr	r2, [pc, #16]	@ (8002198 <array_to_hex_string+0x4c>)
 8002188:	2100      	movs	r1, #0
 800218a:	54d1      	strb	r1, [r2, r3]
	return hex_string;
 800218c:	4b02      	ldr	r3, [pc, #8]	@ (8002198 <array_to_hex_string+0x4c>)
}
 800218e:	4618      	mov	r0, r3
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	200006b0 	.word	0x200006b0
 800219c:	08009860 	.word	0x08009860

080021a0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80021a4:	4b16      	ldr	r3, [pc, #88]	@ (8002200 <MX_USART1_UART_Init+0x60>)
 80021a6:	4a17      	ldr	r2, [pc, #92]	@ (8002204 <MX_USART1_UART_Init+0x64>)
 80021a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80021aa:	4b15      	ldr	r3, [pc, #84]	@ (8002200 <MX_USART1_UART_Init+0x60>)
 80021ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80021b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021b2:	4b13      	ldr	r3, [pc, #76]	@ (8002200 <MX_USART1_UART_Init+0x60>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021b8:	4b11      	ldr	r3, [pc, #68]	@ (8002200 <MX_USART1_UART_Init+0x60>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021be:	4b10      	ldr	r3, [pc, #64]	@ (8002200 <MX_USART1_UART_Init+0x60>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002200 <MX_USART1_UART_Init+0x60>)
 80021c6:	220c      	movs	r2, #12
 80021c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002200 <MX_USART1_UART_Init+0x60>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002200 <MX_USART1_UART_Init+0x60>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002200 <MX_USART1_UART_Init+0x60>)
 80021d8:	2200      	movs	r2, #0
 80021da:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 80021dc:	4b08      	ldr	r3, [pc, #32]	@ (8002200 <MX_USART1_UART_Init+0x60>)
 80021de:	2208      	movs	r2, #8
 80021e0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80021e2:	4b07      	ldr	r3, [pc, #28]	@ (8002200 <MX_USART1_UART_Init+0x60>)
 80021e4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80021e8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021ea:	4805      	ldr	r0, [pc, #20]	@ (8002200 <MX_USART1_UART_Init+0x60>)
 80021ec:	f002 fd5f 	bl	8004cae <HAL_UART_Init>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80021f6:	f7ff fade 	bl	80017b6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80021fa:	bf00      	nop
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	20000844 	.word	0x20000844
 8002204:	40013800 	.word	0x40013800

08002208 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800220c:	4b14      	ldr	r3, [pc, #80]	@ (8002260 <MX_USART2_UART_Init+0x58>)
 800220e:	4a15      	ldr	r2, [pc, #84]	@ (8002264 <MX_USART2_UART_Init+0x5c>)
 8002210:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002212:	4b13      	ldr	r3, [pc, #76]	@ (8002260 <MX_USART2_UART_Init+0x58>)
 8002214:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002218:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800221a:	4b11      	ldr	r3, [pc, #68]	@ (8002260 <MX_USART2_UART_Init+0x58>)
 800221c:	2200      	movs	r2, #0
 800221e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002220:	4b0f      	ldr	r3, [pc, #60]	@ (8002260 <MX_USART2_UART_Init+0x58>)
 8002222:	2200      	movs	r2, #0
 8002224:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002226:	4b0e      	ldr	r3, [pc, #56]	@ (8002260 <MX_USART2_UART_Init+0x58>)
 8002228:	2200      	movs	r2, #0
 800222a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800222c:	4b0c      	ldr	r3, [pc, #48]	@ (8002260 <MX_USART2_UART_Init+0x58>)
 800222e:	220c      	movs	r2, #12
 8002230:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002232:	4b0b      	ldr	r3, [pc, #44]	@ (8002260 <MX_USART2_UART_Init+0x58>)
 8002234:	2200      	movs	r2, #0
 8002236:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002238:	4b09      	ldr	r3, [pc, #36]	@ (8002260 <MX_USART2_UART_Init+0x58>)
 800223a:	2200      	movs	r2, #0
 800223c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800223e:	4b08      	ldr	r3, [pc, #32]	@ (8002260 <MX_USART2_UART_Init+0x58>)
 8002240:	2200      	movs	r2, #0
 8002242:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002244:	4b06      	ldr	r3, [pc, #24]	@ (8002260 <MX_USART2_UART_Init+0x58>)
 8002246:	2200      	movs	r2, #0
 8002248:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800224a:	4805      	ldr	r0, [pc, #20]	@ (8002260 <MX_USART2_UART_Init+0x58>)
 800224c:	f002 fd2f 	bl	8004cae <HAL_UART_Init>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002256:	f7ff faae 	bl	80017b6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800225a:	bf00      	nop
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	200008cc 	.word	0x200008cc
 8002264:	40004400 	.word	0x40004400

08002268 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800226c:	4b14      	ldr	r3, [pc, #80]	@ (80022c0 <MX_USART3_UART_Init+0x58>)
 800226e:	4a15      	ldr	r2, [pc, #84]	@ (80022c4 <MX_USART3_UART_Init+0x5c>)
 8002270:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8002272:	4b13      	ldr	r3, [pc, #76]	@ (80022c0 <MX_USART3_UART_Init+0x58>)
 8002274:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8002278:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800227a:	4b11      	ldr	r3, [pc, #68]	@ (80022c0 <MX_USART3_UART_Init+0x58>)
 800227c:	2200      	movs	r2, #0
 800227e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002280:	4b0f      	ldr	r3, [pc, #60]	@ (80022c0 <MX_USART3_UART_Init+0x58>)
 8002282:	2200      	movs	r2, #0
 8002284:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002286:	4b0e      	ldr	r3, [pc, #56]	@ (80022c0 <MX_USART3_UART_Init+0x58>)
 8002288:	2200      	movs	r2, #0
 800228a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800228c:	4b0c      	ldr	r3, [pc, #48]	@ (80022c0 <MX_USART3_UART_Init+0x58>)
 800228e:	220c      	movs	r2, #12
 8002290:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002292:	4b0b      	ldr	r3, [pc, #44]	@ (80022c0 <MX_USART3_UART_Init+0x58>)
 8002294:	2200      	movs	r2, #0
 8002296:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002298:	4b09      	ldr	r3, [pc, #36]	@ (80022c0 <MX_USART3_UART_Init+0x58>)
 800229a:	2200      	movs	r2, #0
 800229c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800229e:	4b08      	ldr	r3, [pc, #32]	@ (80022c0 <MX_USART3_UART_Init+0x58>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022a4:	4b06      	ldr	r3, [pc, #24]	@ (80022c0 <MX_USART3_UART_Init+0x58>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80022aa:	4805      	ldr	r0, [pc, #20]	@ (80022c0 <MX_USART3_UART_Init+0x58>)
 80022ac:	f002 fcff 	bl	8004cae <HAL_UART_Init>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80022b6:	f7ff fa7e 	bl	80017b6 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80022ba:	bf00      	nop
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	20000954 	.word	0x20000954
 80022c4:	40004800 	.word	0x40004800

080022c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b0b2      	sub	sp, #200	@ 0xc8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d0:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	605a      	str	r2, [r3, #4]
 80022da:	609a      	str	r2, [r3, #8]
 80022dc:	60da      	str	r2, [r3, #12]
 80022de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022e0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80022e4:	228c      	movs	r2, #140	@ 0x8c
 80022e6:	2100      	movs	r1, #0
 80022e8:	4618      	mov	r0, r3
 80022ea:	f005 f9ee 	bl	80076ca <memset>
  if(uartHandle->Instance==USART1)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a80      	ldr	r2, [pc, #512]	@ (80024f4 <HAL_UART_MspInit+0x22c>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d166      	bne.n	80023c6 <HAL_UART_MspInit+0xfe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80022f8:	2301      	movs	r3, #1
 80022fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80022fc:	2300      	movs	r3, #0
 80022fe:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002300:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002304:	4618      	mov	r0, r3
 8002306:	f001 ff65 	bl	80041d4 <HAL_RCCEx_PeriphCLKConfig>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002310:	f7ff fa51 	bl	80017b6 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002314:	4b78      	ldr	r3, [pc, #480]	@ (80024f8 <HAL_UART_MspInit+0x230>)
 8002316:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002318:	4a77      	ldr	r2, [pc, #476]	@ (80024f8 <HAL_UART_MspInit+0x230>)
 800231a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800231e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002320:	4b75      	ldr	r3, [pc, #468]	@ (80024f8 <HAL_UART_MspInit+0x230>)
 8002322:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002324:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002328:	627b      	str	r3, [r7, #36]	@ 0x24
 800232a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800232c:	4b72      	ldr	r3, [pc, #456]	@ (80024f8 <HAL_UART_MspInit+0x230>)
 800232e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002330:	4a71      	ldr	r2, [pc, #452]	@ (80024f8 <HAL_UART_MspInit+0x230>)
 8002332:	f043 0301 	orr.w	r3, r3, #1
 8002336:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002338:	4b6f      	ldr	r3, [pc, #444]	@ (80024f8 <HAL_UART_MspInit+0x230>)
 800233a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800233c:	f003 0301 	and.w	r3, r3, #1
 8002340:	623b      	str	r3, [r7, #32]
 8002342:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002344:	4b6c      	ldr	r3, [pc, #432]	@ (80024f8 <HAL_UART_MspInit+0x230>)
 8002346:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002348:	4a6b      	ldr	r2, [pc, #428]	@ (80024f8 <HAL_UART_MspInit+0x230>)
 800234a:	f043 0302 	orr.w	r3, r3, #2
 800234e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002350:	4b69      	ldr	r3, [pc, #420]	@ (80024f8 <HAL_UART_MspInit+0x230>)
 8002352:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	61fb      	str	r3, [r7, #28]
 800235a:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STM_VCP_RX_Pin;
 800235c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002360:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002364:	2302      	movs	r3, #2
 8002366:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236a:	2300      	movs	r3, #0
 800236c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002370:	2303      	movs	r3, #3
 8002372:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002376:	2307      	movs	r3, #7
 8002378:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(STM_VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800237c:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002380:	4619      	mov	r1, r3
 8002382:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002386:	f000 fd67 	bl	8002e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STM_VCP_TX_Pin;
 800238a:	2340      	movs	r3, #64	@ 0x40
 800238c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002390:	2302      	movs	r3, #2
 8002392:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002396:	2300      	movs	r3, #0
 8002398:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800239c:	2303      	movs	r3, #3
 800239e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023a2:	2307      	movs	r3, #7
 80023a4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(STM_VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80023a8:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80023ac:	4619      	mov	r1, r3
 80023ae:	4853      	ldr	r0, [pc, #332]	@ (80024fc <HAL_UART_MspInit+0x234>)
 80023b0:	f000 fd52 	bl	8002e58 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80023b4:	2200      	movs	r2, #0
 80023b6:	2100      	movs	r1, #0
 80023b8:	2025      	movs	r0, #37	@ 0x25
 80023ba:	f000 fb4e 	bl	8002a5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80023be:	2025      	movs	r0, #37	@ 0x25
 80023c0:	f000 fb67 	bl	8002a92 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80023c4:	e091      	b.n	80024ea <HAL_UART_MspInit+0x222>
  else if(uartHandle->Instance==USART2)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a4d      	ldr	r2, [pc, #308]	@ (8002500 <HAL_UART_MspInit+0x238>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d143      	bne.n	8002458 <HAL_UART_MspInit+0x190>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80023d0:	2302      	movs	r3, #2
 80023d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80023d4:	2300      	movs	r3, #0
 80023d6:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023d8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80023dc:	4618      	mov	r0, r3
 80023de:	f001 fef9 	bl	80041d4 <HAL_RCCEx_PeriphCLKConfig>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <HAL_UART_MspInit+0x124>
      Error_Handler();
 80023e8:	f7ff f9e5 	bl	80017b6 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80023ec:	4b42      	ldr	r3, [pc, #264]	@ (80024f8 <HAL_UART_MspInit+0x230>)
 80023ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023f0:	4a41      	ldr	r2, [pc, #260]	@ (80024f8 <HAL_UART_MspInit+0x230>)
 80023f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80023f8:	4b3f      	ldr	r3, [pc, #252]	@ (80024f8 <HAL_UART_MspInit+0x230>)
 80023fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002400:	61bb      	str	r3, [r7, #24]
 8002402:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002404:	4b3c      	ldr	r3, [pc, #240]	@ (80024f8 <HAL_UART_MspInit+0x230>)
 8002406:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002408:	4a3b      	ldr	r2, [pc, #236]	@ (80024f8 <HAL_UART_MspInit+0x230>)
 800240a:	f043 0308 	orr.w	r3, r3, #8
 800240e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002410:	4b39      	ldr	r3, [pc, #228]	@ (80024f8 <HAL_UART_MspInit+0x230>)
 8002412:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002414:	f003 0308 	and.w	r3, r3, #8
 8002418:	617b      	str	r3, [r7, #20]
 800241a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPS_RTCM3_RX_STM_TX_Pin|GPS_RTCM3_TX_STM_RX_Pin;
 800241c:	2360      	movs	r3, #96	@ 0x60
 800241e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002422:	2302      	movs	r3, #2
 8002424:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002428:	2300      	movs	r3, #0
 800242a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800242e:	2303      	movs	r3, #3
 8002430:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002434:	2307      	movs	r3, #7
 8002436:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800243a:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800243e:	4619      	mov	r1, r3
 8002440:	4830      	ldr	r0, [pc, #192]	@ (8002504 <HAL_UART_MspInit+0x23c>)
 8002442:	f000 fd09 	bl	8002e58 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002446:	2200      	movs	r2, #0
 8002448:	2100      	movs	r1, #0
 800244a:	2026      	movs	r0, #38	@ 0x26
 800244c:	f000 fb05 	bl	8002a5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002450:	2026      	movs	r0, #38	@ 0x26
 8002452:	f000 fb1e 	bl	8002a92 <HAL_NVIC_EnableIRQ>
}
 8002456:	e048      	b.n	80024ea <HAL_UART_MspInit+0x222>
  else if(uartHandle->Instance==USART3)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a2a      	ldr	r2, [pc, #168]	@ (8002508 <HAL_UART_MspInit+0x240>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d143      	bne.n	80024ea <HAL_UART_MspInit+0x222>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002462:	2304      	movs	r3, #4
 8002464:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002466:	2300      	movs	r3, #0
 8002468:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800246a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800246e:	4618      	mov	r0, r3
 8002470:	f001 feb0 	bl	80041d4 <HAL_RCCEx_PeriphCLKConfig>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <HAL_UART_MspInit+0x1b6>
      Error_Handler();
 800247a:	f7ff f99c 	bl	80017b6 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800247e:	4b1e      	ldr	r3, [pc, #120]	@ (80024f8 <HAL_UART_MspInit+0x230>)
 8002480:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002482:	4a1d      	ldr	r2, [pc, #116]	@ (80024f8 <HAL_UART_MspInit+0x230>)
 8002484:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002488:	6593      	str	r3, [r2, #88]	@ 0x58
 800248a:	4b1b      	ldr	r3, [pc, #108]	@ (80024f8 <HAL_UART_MspInit+0x230>)
 800248c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800248e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002492:	613b      	str	r3, [r7, #16]
 8002494:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002496:	4b18      	ldr	r3, [pc, #96]	@ (80024f8 <HAL_UART_MspInit+0x230>)
 8002498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800249a:	4a17      	ldr	r2, [pc, #92]	@ (80024f8 <HAL_UART_MspInit+0x230>)
 800249c:	f043 0308 	orr.w	r3, r3, #8
 80024a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024a2:	4b15      	ldr	r3, [pc, #84]	@ (80024f8 <HAL_UART_MspInit+0x230>)
 80024a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024a6:	f003 0308 	and.w	r3, r3, #8
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPS_TX_STM_Pin|GPSR_RX_STM_Pin;
 80024ae:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80024b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b6:	2302      	movs	r3, #2
 80024b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024bc:	2300      	movs	r3, #0
 80024be:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024c2:	2303      	movs	r3, #3
 80024c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80024c8:	2307      	movs	r3, #7
 80024ca:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024ce:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80024d2:	4619      	mov	r1, r3
 80024d4:	480b      	ldr	r0, [pc, #44]	@ (8002504 <HAL_UART_MspInit+0x23c>)
 80024d6:	f000 fcbf 	bl	8002e58 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80024da:	2200      	movs	r2, #0
 80024dc:	2100      	movs	r1, #0
 80024de:	2027      	movs	r0, #39	@ 0x27
 80024e0:	f000 fabb 	bl	8002a5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80024e4:	2027      	movs	r0, #39	@ 0x27
 80024e6:	f000 fad4 	bl	8002a92 <HAL_NVIC_EnableIRQ>
}
 80024ea:	bf00      	nop
 80024ec:	37c8      	adds	r7, #200	@ 0xc8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40013800 	.word	0x40013800
 80024f8:	40021000 	.word	0x40021000
 80024fc:	48000400 	.word	0x48000400
 8002500:	40004400 	.word	0x40004400
 8002504:	48000c00 	.word	0x48000c00
 8002508:	40004800 	.word	0x40004800

0800250c <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
	 if (hGNSSCom.huart->Instance == huart3.Instance)
 8002514:	4b0a      	ldr	r3, [pc, #40]	@ (8002540 <HAL_UART_RxCpltCallback+0x34>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	4b0a      	ldr	r3, [pc, #40]	@ (8002544 <HAL_UART_RxCpltCallback+0x38>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	429a      	cmp	r2, r3
 8002520:	d10a      	bne.n	8002538 <HAL_UART_RxCpltCallback+0x2c>
	{
		 ITM_Port32(30)=01;
 8002522:	4b09      	ldr	r3, [pc, #36]	@ (8002548 <HAL_UART_RxCpltCallback+0x3c>)
 8002524:	2201      	movs	r2, #1
 8002526:	601a      	str	r2, [r3, #0]
		 GNSSCom_ReceiveDebug();
 8002528:	f7fe fda8 	bl	800107c <GNSSCom_ReceiveDebug>
		 GNSSCom_UartActivate(&hGNSSCom);
 800252c:	4804      	ldr	r0, [pc, #16]	@ (8002540 <HAL_UART_RxCpltCallback+0x34>)
 800252e:	f7fe fd30 	bl	8000f92 <GNSSCom_UartActivate>
		 ITM_Port32(30)=00;
 8002532:	4b05      	ldr	r3, [pc, #20]	@ (8002548 <HAL_UART_RxCpltCallback+0x3c>)
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]
	}
}
 8002538:	bf00      	nop
 800253a:	3708      	adds	r7, #8
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	20000350 	.word	0x20000350
 8002544:	20000954 	.word	0x20000954
 8002548:	e0000078 	.word	0xe0000078

0800254c <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
    if (hGNSSCom.huart->Instance == huart3.Instance) {
 8002554:	4b0b      	ldr	r3, [pc, #44]	@ (8002584 <HAL_UART_ErrorCallback+0x38>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	4b0b      	ldr	r3, [pc, #44]	@ (8002588 <HAL_UART_ErrorCallback+0x3c>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	429a      	cmp	r2, r3
 8002560:	d10b      	bne.n	800257a <HAL_UART_ErrorCallback+0x2e>
    	HAL_UART_Receive_IT(hGNSSCom.huart, hGNSSCom.Rx->buffer, hGNSSCom.Rx->size); // Relancer la réception
 8002562:	4b08      	ldr	r3, [pc, #32]	@ (8002584 <HAL_UART_ErrorCallback+0x38>)
 8002564:	6818      	ldr	r0, [r3, #0]
 8002566:	4b07      	ldr	r3, [pc, #28]	@ (8002584 <HAL_UART_ErrorCallback+0x38>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	6819      	ldr	r1, [r3, #0]
 800256c:	4b05      	ldr	r3, [pc, #20]	@ (8002584 <HAL_UART_ErrorCallback+0x38>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	b29b      	uxth	r3, r3
 8002574:	461a      	mov	r2, r3
 8002576:	f002 fc71 	bl	8004e5c <HAL_UART_Receive_IT>
    }

}
 800257a:	bf00      	nop
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	20000350 	.word	0x20000350
 8002588:	20000954 	.word	0x20000954

0800258c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002590:	4b14      	ldr	r3, [pc, #80]	@ (80025e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002592:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002596:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002598:	4b12      	ldr	r3, [pc, #72]	@ (80025e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800259a:	2206      	movs	r2, #6
 800259c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800259e:	4b11      	ldr	r3, [pc, #68]	@ (80025e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80025a0:	2202      	movs	r2, #2
 80025a2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80025a4:	4b0f      	ldr	r3, [pc, #60]	@ (80025e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80025a6:	2202      	movs	r2, #2
 80025a8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80025aa:	4b0e      	ldr	r3, [pc, #56]	@ (80025e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80025b0:	4b0c      	ldr	r3, [pc, #48]	@ (80025e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80025b6:	4b0b      	ldr	r3, [pc, #44]	@ (80025e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80025bc:	4b09      	ldr	r3, [pc, #36]	@ (80025e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80025be:	2201      	movs	r2, #1
 80025c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80025c2:	4b08      	ldr	r3, [pc, #32]	@ (80025e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80025c8:	4b06      	ldr	r3, [pc, #24]	@ (80025e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80025ca:	2201      	movs	r2, #1
 80025cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80025ce:	4805      	ldr	r0, [pc, #20]	@ (80025e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80025d0:	f000 fe06 	bl	80031e0 <HAL_PCD_Init>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80025da:	f7ff f8ec 	bl	80017b6 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80025de:	bf00      	nop
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	200009dc 	.word	0x200009dc

080025e8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b0ae      	sub	sp, #184	@ 0xb8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	605a      	str	r2, [r3, #4]
 80025fa:	609a      	str	r2, [r3, #8]
 80025fc:	60da      	str	r2, [r3, #12]
 80025fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002600:	f107 0318 	add.w	r3, r7, #24
 8002604:	228c      	movs	r2, #140	@ 0x8c
 8002606:	2100      	movs	r1, #0
 8002608:	4618      	mov	r0, r3
 800260a:	f005 f85e 	bl	80076ca <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002616:	d17c      	bne.n	8002712 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002618:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800261c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800261e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002622:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8002626:	2303      	movs	r3, #3
 8002628:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 800262a:	2302      	movs	r3, #2
 800262c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 800262e:	230c      	movs	r3, #12
 8002630:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8002632:	2302      	movs	r3, #2
 8002634:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 8002636:	2304      	movs	r3, #4
 8002638:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800263a:	2302      	movs	r3, #2
 800263c:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800263e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002642:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002644:	f107 0318 	add.w	r3, r7, #24
 8002648:	4618      	mov	r0, r3
 800264a:	f001 fdc3 	bl	80041d4 <HAL_RCCEx_PeriphCLKConfig>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8002654:	f7ff f8af 	bl	80017b6 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002658:	4b30      	ldr	r3, [pc, #192]	@ (800271c <HAL_PCD_MspInit+0x134>)
 800265a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800265c:	4a2f      	ldr	r2, [pc, #188]	@ (800271c <HAL_PCD_MspInit+0x134>)
 800265e:	f043 0301 	orr.w	r3, r3, #1
 8002662:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002664:	4b2d      	ldr	r3, [pc, #180]	@ (800271c <HAL_PCD_MspInit+0x134>)
 8002666:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	617b      	str	r3, [r7, #20]
 800266e:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_VBUS_DETECT_Pin;
 8002670:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002674:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002678:	2300      	movs	r3, #0
 800267a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267e:	2300      	movs	r3, #0
 8002680:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_DETECT_GPIO_Port, &GPIO_InitStruct);
 8002684:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002688:	4619      	mov	r1, r3
 800268a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800268e:	f000 fbe3 	bl	8002e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_D_N_Pin|USB_D_P_Pin;
 8002692:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002696:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800269a:	2302      	movs	r3, #2
 800269c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a0:	2300      	movs	r3, #0
 80026a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a6:	2303      	movs	r3, #3
 80026a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80026ac:	230a      	movs	r3, #10
 80026ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80026b6:	4619      	mov	r1, r3
 80026b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026bc:	f000 fbcc 	bl	8002e58 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80026c0:	4b16      	ldr	r3, [pc, #88]	@ (800271c <HAL_PCD_MspInit+0x134>)
 80026c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026c4:	4a15      	ldr	r2, [pc, #84]	@ (800271c <HAL_PCD_MspInit+0x134>)
 80026c6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80026ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026cc:	4b13      	ldr	r3, [pc, #76]	@ (800271c <HAL_PCD_MspInit+0x134>)
 80026ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026d4:	613b      	str	r3, [r7, #16]
 80026d6:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026d8:	4b10      	ldr	r3, [pc, #64]	@ (800271c <HAL_PCD_MspInit+0x134>)
 80026da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d114      	bne.n	800270e <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026e4:	4b0d      	ldr	r3, [pc, #52]	@ (800271c <HAL_PCD_MspInit+0x134>)
 80026e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026e8:	4a0c      	ldr	r2, [pc, #48]	@ (800271c <HAL_PCD_MspInit+0x134>)
 80026ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80026f0:	4b0a      	ldr	r3, [pc, #40]	@ (800271c <HAL_PCD_MspInit+0x134>)
 80026f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 80026fc:	f000 ff1c 	bl	8003538 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002700:	4b06      	ldr	r3, [pc, #24]	@ (800271c <HAL_PCD_MspInit+0x134>)
 8002702:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002704:	4a05      	ldr	r2, [pc, #20]	@ (800271c <HAL_PCD_MspInit+0x134>)
 8002706:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800270a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800270c:	e001      	b.n	8002712 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 800270e:	f000 ff13 	bl	8003538 <HAL_PWREx_EnableVddUSB>
}
 8002712:	bf00      	nop
 8002714:	37b8      	adds	r7, #184	@ 0xb8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	40021000 	.word	0x40021000

08002720 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002720:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002758 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002724:	f7ff fa78 	bl	8001c18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002728:	480c      	ldr	r0, [pc, #48]	@ (800275c <LoopForever+0x6>)
  ldr r1, =_edata
 800272a:	490d      	ldr	r1, [pc, #52]	@ (8002760 <LoopForever+0xa>)
  ldr r2, =_sidata
 800272c:	4a0d      	ldr	r2, [pc, #52]	@ (8002764 <LoopForever+0xe>)
  movs r3, #0
 800272e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002730:	e002      	b.n	8002738 <LoopCopyDataInit>

08002732 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002732:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002734:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002736:	3304      	adds	r3, #4

08002738 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002738:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800273a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800273c:	d3f9      	bcc.n	8002732 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800273e:	4a0a      	ldr	r2, [pc, #40]	@ (8002768 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002740:	4c0a      	ldr	r4, [pc, #40]	@ (800276c <LoopForever+0x16>)
  movs r3, #0
 8002742:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002744:	e001      	b.n	800274a <LoopFillZerobss>

08002746 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002746:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002748:	3204      	adds	r2, #4

0800274a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800274a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800274c:	d3fb      	bcc.n	8002746 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800274e:	f005 f837 	bl	80077c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002752:	f7fe ff8d 	bl	8001670 <main>

08002756 <LoopForever>:

LoopForever:
    b LoopForever
 8002756:	e7fe      	b.n	8002756 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002758:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800275c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002760:	20000334 	.word	0x20000334
  ldr r2, =_sidata
 8002764:	08009c30 	.word	0x08009c30
  ldr r2, =_sbss
 8002768:	20000334 	.word	0x20000334
  ldr r4, =_ebss
 800276c:	20001038 	.word	0x20001038

08002770 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002770:	e7fe      	b.n	8002770 <ADC1_2_IRQHandler>

08002772 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b082      	sub	sp, #8
 8002776:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002778:	2300      	movs	r3, #0
 800277a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800277c:	2003      	movs	r0, #3
 800277e:	f000 f961 	bl	8002a44 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002782:	200f      	movs	r0, #15
 8002784:	f000 f80e 	bl	80027a4 <HAL_InitTick>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d002      	beq.n	8002794 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	71fb      	strb	r3, [r7, #7]
 8002792:	e001      	b.n	8002798 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002794:	f7ff f908 	bl	80019a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002798:	79fb      	ldrb	r3, [r7, #7]
}
 800279a:	4618      	mov	r0, r3
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
	...

080027a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80027ac:	2300      	movs	r3, #0
 80027ae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80027b0:	4b17      	ldr	r3, [pc, #92]	@ (8002810 <HAL_InitTick+0x6c>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d023      	beq.n	8002800 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80027b8:	4b16      	ldr	r3, [pc, #88]	@ (8002814 <HAL_InitTick+0x70>)
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	4b14      	ldr	r3, [pc, #80]	@ (8002810 <HAL_InitTick+0x6c>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	4619      	mov	r1, r3
 80027c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80027ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ce:	4618      	mov	r0, r3
 80027d0:	f000 f96d 	bl	8002aae <HAL_SYSTICK_Config>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d10f      	bne.n	80027fa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2b0f      	cmp	r3, #15
 80027de:	d809      	bhi.n	80027f4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027e0:	2200      	movs	r2, #0
 80027e2:	6879      	ldr	r1, [r7, #4]
 80027e4:	f04f 30ff 	mov.w	r0, #4294967295
 80027e8:	f000 f937 	bl	8002a5a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027ec:	4a0a      	ldr	r2, [pc, #40]	@ (8002818 <HAL_InitTick+0x74>)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6013      	str	r3, [r2, #0]
 80027f2:	e007      	b.n	8002804 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	73fb      	strb	r3, [r7, #15]
 80027f8:	e004      	b.n	8002804 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	73fb      	strb	r3, [r7, #15]
 80027fe:	e001      	b.n	8002804 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002804:	7bfb      	ldrb	r3, [r7, #15]
}
 8002806:	4618      	mov	r0, r3
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	20000168 	.word	0x20000168
 8002814:	20000160 	.word	0x20000160
 8002818:	20000164 	.word	0x20000164

0800281c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002820:	4b06      	ldr	r3, [pc, #24]	@ (800283c <HAL_IncTick+0x20>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	461a      	mov	r2, r3
 8002826:	4b06      	ldr	r3, [pc, #24]	@ (8002840 <HAL_IncTick+0x24>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4413      	add	r3, r2
 800282c:	4a04      	ldr	r2, [pc, #16]	@ (8002840 <HAL_IncTick+0x24>)
 800282e:	6013      	str	r3, [r2, #0]
}
 8002830:	bf00      	nop
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	20000168 	.word	0x20000168
 8002840:	20000ee8 	.word	0x20000ee8

08002844 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  return uwTick;
 8002848:	4b03      	ldr	r3, [pc, #12]	@ (8002858 <HAL_GetTick+0x14>)
 800284a:	681b      	ldr	r3, [r3, #0]
}
 800284c:	4618      	mov	r0, r3
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	20000ee8 	.word	0x20000ee8

0800285c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002864:	f7ff ffee 	bl	8002844 <HAL_GetTick>
 8002868:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002874:	d005      	beq.n	8002882 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002876:	4b0a      	ldr	r3, [pc, #40]	@ (80028a0 <HAL_Delay+0x44>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	461a      	mov	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	4413      	add	r3, r2
 8002880:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002882:	bf00      	nop
 8002884:	f7ff ffde 	bl	8002844 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	429a      	cmp	r2, r3
 8002892:	d8f7      	bhi.n	8002884 <HAL_Delay+0x28>
  {
  }
}
 8002894:	bf00      	nop
 8002896:	bf00      	nop
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	20000168 	.word	0x20000168

080028a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f003 0307 	and.w	r3, r3, #7
 80028b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028b4:	4b0c      	ldr	r3, [pc, #48]	@ (80028e8 <__NVIC_SetPriorityGrouping+0x44>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ba:	68ba      	ldr	r2, [r7, #8]
 80028bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028c0:	4013      	ands	r3, r2
 80028c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80028d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028d6:	4a04      	ldr	r2, [pc, #16]	@ (80028e8 <__NVIC_SetPriorityGrouping+0x44>)
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	60d3      	str	r3, [r2, #12]
}
 80028dc:	bf00      	nop
 80028de:	3714      	adds	r7, #20
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	e000ed00 	.word	0xe000ed00

080028ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028f0:	4b04      	ldr	r3, [pc, #16]	@ (8002904 <__NVIC_GetPriorityGrouping+0x18>)
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	0a1b      	lsrs	r3, r3, #8
 80028f6:	f003 0307 	and.w	r3, r3, #7
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr
 8002904:	e000ed00 	.word	0xe000ed00

08002908 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	4603      	mov	r3, r0
 8002910:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002916:	2b00      	cmp	r3, #0
 8002918:	db0b      	blt.n	8002932 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800291a:	79fb      	ldrb	r3, [r7, #7]
 800291c:	f003 021f 	and.w	r2, r3, #31
 8002920:	4907      	ldr	r1, [pc, #28]	@ (8002940 <__NVIC_EnableIRQ+0x38>)
 8002922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002926:	095b      	lsrs	r3, r3, #5
 8002928:	2001      	movs	r0, #1
 800292a:	fa00 f202 	lsl.w	r2, r0, r2
 800292e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	e000e100 	.word	0xe000e100

08002944 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	4603      	mov	r3, r0
 800294c:	6039      	str	r1, [r7, #0]
 800294e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002954:	2b00      	cmp	r3, #0
 8002956:	db0a      	blt.n	800296e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	b2da      	uxtb	r2, r3
 800295c:	490c      	ldr	r1, [pc, #48]	@ (8002990 <__NVIC_SetPriority+0x4c>)
 800295e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002962:	0112      	lsls	r2, r2, #4
 8002964:	b2d2      	uxtb	r2, r2
 8002966:	440b      	add	r3, r1
 8002968:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800296c:	e00a      	b.n	8002984 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	b2da      	uxtb	r2, r3
 8002972:	4908      	ldr	r1, [pc, #32]	@ (8002994 <__NVIC_SetPriority+0x50>)
 8002974:	79fb      	ldrb	r3, [r7, #7]
 8002976:	f003 030f 	and.w	r3, r3, #15
 800297a:	3b04      	subs	r3, #4
 800297c:	0112      	lsls	r2, r2, #4
 800297e:	b2d2      	uxtb	r2, r2
 8002980:	440b      	add	r3, r1
 8002982:	761a      	strb	r2, [r3, #24]
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr
 8002990:	e000e100 	.word	0xe000e100
 8002994:	e000ed00 	.word	0xe000ed00

08002998 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002998:	b480      	push	{r7}
 800299a:	b089      	sub	sp, #36	@ 0x24
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f003 0307 	and.w	r3, r3, #7
 80029aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	f1c3 0307 	rsb	r3, r3, #7
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	bf28      	it	cs
 80029b6:	2304      	movcs	r3, #4
 80029b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	3304      	adds	r3, #4
 80029be:	2b06      	cmp	r3, #6
 80029c0:	d902      	bls.n	80029c8 <NVIC_EncodePriority+0x30>
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	3b03      	subs	r3, #3
 80029c6:	e000      	b.n	80029ca <NVIC_EncodePriority+0x32>
 80029c8:	2300      	movs	r3, #0
 80029ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029cc:	f04f 32ff 	mov.w	r2, #4294967295
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	fa02 f303 	lsl.w	r3, r2, r3
 80029d6:	43da      	mvns	r2, r3
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	401a      	ands	r2, r3
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029e0:	f04f 31ff 	mov.w	r1, #4294967295
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	fa01 f303 	lsl.w	r3, r1, r3
 80029ea:	43d9      	mvns	r1, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f0:	4313      	orrs	r3, r2
         );
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3724      	adds	r7, #36	@ 0x24
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
	...

08002a00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a10:	d301      	bcc.n	8002a16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a12:	2301      	movs	r3, #1
 8002a14:	e00f      	b.n	8002a36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a16:	4a0a      	ldr	r2, [pc, #40]	@ (8002a40 <SysTick_Config+0x40>)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a1e:	210f      	movs	r1, #15
 8002a20:	f04f 30ff 	mov.w	r0, #4294967295
 8002a24:	f7ff ff8e 	bl	8002944 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a28:	4b05      	ldr	r3, [pc, #20]	@ (8002a40 <SysTick_Config+0x40>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a2e:	4b04      	ldr	r3, [pc, #16]	@ (8002a40 <SysTick_Config+0x40>)
 8002a30:	2207      	movs	r2, #7
 8002a32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	e000e010 	.word	0xe000e010

08002a44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f7ff ff29 	bl	80028a4 <__NVIC_SetPriorityGrouping>
}
 8002a52:	bf00      	nop
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b086      	sub	sp, #24
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	4603      	mov	r3, r0
 8002a62:	60b9      	str	r1, [r7, #8]
 8002a64:	607a      	str	r2, [r7, #4]
 8002a66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a6c:	f7ff ff3e 	bl	80028ec <__NVIC_GetPriorityGrouping>
 8002a70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	68b9      	ldr	r1, [r7, #8]
 8002a76:	6978      	ldr	r0, [r7, #20]
 8002a78:	f7ff ff8e 	bl	8002998 <NVIC_EncodePriority>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a82:	4611      	mov	r1, r2
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7ff ff5d 	bl	8002944 <__NVIC_SetPriority>
}
 8002a8a:	bf00      	nop
 8002a8c:	3718      	adds	r7, #24
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b082      	sub	sp, #8
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	4603      	mov	r3, r0
 8002a9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff ff31 	bl	8002908 <__NVIC_EnableIRQ>
}
 8002aa6:	bf00      	nop
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b082      	sub	sp, #8
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f7ff ffa2 	bl	8002a00 <SysTick_Config>
 8002abc:	4603      	mov	r3, r0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b082      	sub	sp, #8
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d101      	bne.n	8002ad8 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e014      	b.n	8002b02 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	791b      	ldrb	r3, [r3, #4]
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d105      	bne.n	8002aee <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f7fe fca7 	bl	800143c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2202      	movs	r2, #2
 8002af2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2201      	movs	r2, #1
 8002afe:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b088      	sub	sp, #32
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	60f8      	str	r0, [r7, #12]
 8002b12:	60b9      	str	r1, [r7, #8]
 8002b14:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002b16:	2300      	movs	r3, #0
 8002b18:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	795b      	ldrb	r3, [r3, #5]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d101      	bne.n	8002b26 <HAL_DAC_ConfigChannel+0x1c>
 8002b22:	2302      	movs	r3, #2
 8002b24:	e114      	b.n	8002d50 <HAL_DAC_ConfigChannel+0x246>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2202      	movs	r2, #2
 8002b30:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2b04      	cmp	r3, #4
 8002b38:	f040 8081 	bne.w	8002c3e <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002b3c:	f7ff fe82 	bl	8002844 <HAL_GetTick>
 8002b40:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d140      	bne.n	8002bca <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002b48:	e018      	b.n	8002b7c <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002b4a:	f7ff fe7b 	bl	8002844 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d911      	bls.n	8002b7c <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b5e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00a      	beq.n	8002b7c <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	f043 0208 	orr.w	r2, r3, #8
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2203      	movs	r2, #3
 8002b76:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e0e9      	b.n	8002d50 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b82:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1df      	bne.n	8002b4a <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8002b8a:	2001      	movs	r0, #1
 8002b8c:	f7ff fe66 	bl	800285c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68ba      	ldr	r2, [r7, #8]
 8002b96:	6992      	ldr	r2, [r2, #24]
 8002b98:	641a      	str	r2, [r3, #64]	@ 0x40
 8002b9a:	e023      	b.n	8002be4 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002b9c:	f7ff fe52 	bl	8002844 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d90f      	bls.n	8002bca <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	da0a      	bge.n	8002bca <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	f043 0208 	orr.w	r2, r3, #8
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2203      	movs	r2, #3
 8002bc4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e0c2      	b.n	8002d50 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	dbe3      	blt.n	8002b9c <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8002bd4:	2001      	movs	r0, #1
 8002bd6:	f7ff fe41 	bl	800285c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	68ba      	ldr	r2, [r7, #8]
 8002be0:	6992      	ldr	r2, [r2, #24]
 8002be2:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f003 0310 	and.w	r3, r3, #16
 8002bf0:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8002bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf8:	43db      	mvns	r3, r3
 8002bfa:	ea02 0103 	and.w	r1, r2, r3
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	69da      	ldr	r2, [r3, #28]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f003 0310 	and.w	r3, r3, #16
 8002c08:	409a      	lsls	r2, r3
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f003 0310 	and.w	r3, r3, #16
 8002c1e:	21ff      	movs	r1, #255	@ 0xff
 8002c20:	fa01 f303 	lsl.w	r3, r1, r3
 8002c24:	43db      	mvns	r3, r3
 8002c26:	ea02 0103 	and.w	r1, r2, r3
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	6a1a      	ldr	r2, [r3, #32]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f003 0310 	and.w	r3, r3, #16
 8002c34:	409a      	lsls	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d11d      	bne.n	8002c82 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c4c:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f003 0310 	and.w	r3, r3, #16
 8002c54:	221f      	movs	r2, #31
 8002c56:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5a:	43db      	mvns	r3, r3
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	4013      	ands	r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f003 0310 	and.w	r3, r3, #16
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c88:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f003 0310 	and.w	r3, r3, #16
 8002c90:	2207      	movs	r2, #7
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	43db      	mvns	r3, r3
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	431a      	orrs	r2, r3
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f003 0310 	and.w	r3, r3, #16
 8002cb6:	697a      	ldr	r2, [r7, #20]
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	6819      	ldr	r1, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f003 0310 	and.w	r3, r3, #16
 8002cd6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002cda:	fa02 f303 	lsl.w	r3, r2, r3
 8002cde:	43da      	mvns	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	400a      	ands	r2, r1
 8002ce6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f003 0310 	and.w	r3, r3, #16
 8002cf6:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8002cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfe:	43db      	mvns	r3, r3
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	4013      	ands	r3, r2
 8002d04:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f003 0310 	and.w	r3, r3, #16
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	6819      	ldr	r1, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f003 0310 	and.w	r3, r3, #16
 8002d32:	22c0      	movs	r2, #192	@ 0xc0
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	43da      	mvns	r2, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	400a      	ands	r2, r1
 8002d40:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2201      	movs	r2, #1
 8002d46:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3720      	adds	r7, #32
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b085      	sub	sp, #20
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d60:	2300      	movs	r3, #0
 8002d62:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d008      	beq.n	8002d82 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2204      	movs	r2, #4
 8002d74:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e022      	b.n	8002dc8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f022 020e 	bic.w	r2, r2, #14
 8002d90:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f022 0201 	bic.w	r2, r2, #1
 8002da0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002da6:	f003 021c 	and.w	r2, r3, #28
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dae:	2101      	movs	r1, #1
 8002db0:	fa01 f202 	lsl.w	r2, r1, r2
 8002db4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002dc6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3714      	adds	r7, #20
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d005      	beq.n	8002df8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2204      	movs	r2, #4
 8002df0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	73fb      	strb	r3, [r7, #15]
 8002df6:	e029      	b.n	8002e4c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f022 020e 	bic.w	r2, r2, #14
 8002e06:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f022 0201 	bic.w	r2, r2, #1
 8002e16:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e1c:	f003 021c 	and.w	r2, r3, #28
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e24:	2101      	movs	r1, #1
 8002e26:	fa01 f202 	lsl.w	r2, r1, r2
 8002e2a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d003      	beq.n	8002e4c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	4798      	blx	r3
    }
  }
  return status;
 8002e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
	...

08002e58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b087      	sub	sp, #28
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e62:	2300      	movs	r3, #0
 8002e64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e66:	e166      	b.n	8003136 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	2101      	movs	r1, #1
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	fa01 f303 	lsl.w	r3, r1, r3
 8002e74:	4013      	ands	r3, r2
 8002e76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f000 8158 	beq.w	8003130 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f003 0303 	and.w	r3, r3, #3
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d005      	beq.n	8002e98 <HAL_GPIO_Init+0x40>
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f003 0303 	and.w	r3, r3, #3
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d130      	bne.n	8002efa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	2203      	movs	r2, #3
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	693a      	ldr	r2, [r7, #16]
 8002eac:	4013      	ands	r3, r2
 8002eae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	68da      	ldr	r2, [r3, #12]
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	005b      	lsls	r3, r3, #1
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	693a      	ldr	r2, [r7, #16]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	693a      	ldr	r2, [r7, #16]
 8002ec6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ece:	2201      	movs	r2, #1
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed6:	43db      	mvns	r3, r3
 8002ed8:	693a      	ldr	r2, [r7, #16]
 8002eda:	4013      	ands	r3, r2
 8002edc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	091b      	lsrs	r3, r3, #4
 8002ee4:	f003 0201 	and.w	r2, r3, #1
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	fa02 f303 	lsl.w	r3, r2, r3
 8002eee:	693a      	ldr	r2, [r7, #16]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f003 0303 	and.w	r3, r3, #3
 8002f02:	2b03      	cmp	r3, #3
 8002f04:	d017      	beq.n	8002f36 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	2203      	movs	r2, #3
 8002f12:	fa02 f303 	lsl.w	r3, r2, r3
 8002f16:	43db      	mvns	r3, r3
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	689a      	ldr	r2, [r3, #8]
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2a:	693a      	ldr	r2, [r7, #16]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f003 0303 	and.w	r3, r3, #3
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d123      	bne.n	8002f8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	08da      	lsrs	r2, r3, #3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	3208      	adds	r2, #8
 8002f4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	220f      	movs	r2, #15
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	43db      	mvns	r3, r3
 8002f60:	693a      	ldr	r2, [r7, #16]
 8002f62:	4013      	ands	r3, r2
 8002f64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	691a      	ldr	r2, [r3, #16]
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	f003 0307 	and.w	r3, r3, #7
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	fa02 f303 	lsl.w	r3, r2, r3
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	08da      	lsrs	r2, r3, #3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	3208      	adds	r2, #8
 8002f84:	6939      	ldr	r1, [r7, #16]
 8002f86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	2203      	movs	r2, #3
 8002f96:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9a:	43db      	mvns	r3, r3
 8002f9c:	693a      	ldr	r2, [r7, #16]
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f003 0203 	and.w	r2, r3, #3
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb2:	693a      	ldr	r2, [r7, #16]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f000 80b2 	beq.w	8003130 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fcc:	4b61      	ldr	r3, [pc, #388]	@ (8003154 <HAL_GPIO_Init+0x2fc>)
 8002fce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fd0:	4a60      	ldr	r2, [pc, #384]	@ (8003154 <HAL_GPIO_Init+0x2fc>)
 8002fd2:	f043 0301 	orr.w	r3, r3, #1
 8002fd6:	6613      	str	r3, [r2, #96]	@ 0x60
 8002fd8:	4b5e      	ldr	r3, [pc, #376]	@ (8003154 <HAL_GPIO_Init+0x2fc>)
 8002fda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fdc:	f003 0301 	and.w	r3, r3, #1
 8002fe0:	60bb      	str	r3, [r7, #8]
 8002fe2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002fe4:	4a5c      	ldr	r2, [pc, #368]	@ (8003158 <HAL_GPIO_Init+0x300>)
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	089b      	lsrs	r3, r3, #2
 8002fea:	3302      	adds	r3, #2
 8002fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	f003 0303 	and.w	r3, r3, #3
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	220f      	movs	r2, #15
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	43db      	mvns	r3, r3
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	4013      	ands	r3, r2
 8003006:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800300e:	d02b      	beq.n	8003068 <HAL_GPIO_Init+0x210>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a52      	ldr	r2, [pc, #328]	@ (800315c <HAL_GPIO_Init+0x304>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d025      	beq.n	8003064 <HAL_GPIO_Init+0x20c>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a51      	ldr	r2, [pc, #324]	@ (8003160 <HAL_GPIO_Init+0x308>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d01f      	beq.n	8003060 <HAL_GPIO_Init+0x208>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a50      	ldr	r2, [pc, #320]	@ (8003164 <HAL_GPIO_Init+0x30c>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d019      	beq.n	800305c <HAL_GPIO_Init+0x204>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a4f      	ldr	r2, [pc, #316]	@ (8003168 <HAL_GPIO_Init+0x310>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d013      	beq.n	8003058 <HAL_GPIO_Init+0x200>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a4e      	ldr	r2, [pc, #312]	@ (800316c <HAL_GPIO_Init+0x314>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d00d      	beq.n	8003054 <HAL_GPIO_Init+0x1fc>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a4d      	ldr	r2, [pc, #308]	@ (8003170 <HAL_GPIO_Init+0x318>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d007      	beq.n	8003050 <HAL_GPIO_Init+0x1f8>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a4c      	ldr	r2, [pc, #304]	@ (8003174 <HAL_GPIO_Init+0x31c>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d101      	bne.n	800304c <HAL_GPIO_Init+0x1f4>
 8003048:	2307      	movs	r3, #7
 800304a:	e00e      	b.n	800306a <HAL_GPIO_Init+0x212>
 800304c:	2308      	movs	r3, #8
 800304e:	e00c      	b.n	800306a <HAL_GPIO_Init+0x212>
 8003050:	2306      	movs	r3, #6
 8003052:	e00a      	b.n	800306a <HAL_GPIO_Init+0x212>
 8003054:	2305      	movs	r3, #5
 8003056:	e008      	b.n	800306a <HAL_GPIO_Init+0x212>
 8003058:	2304      	movs	r3, #4
 800305a:	e006      	b.n	800306a <HAL_GPIO_Init+0x212>
 800305c:	2303      	movs	r3, #3
 800305e:	e004      	b.n	800306a <HAL_GPIO_Init+0x212>
 8003060:	2302      	movs	r3, #2
 8003062:	e002      	b.n	800306a <HAL_GPIO_Init+0x212>
 8003064:	2301      	movs	r3, #1
 8003066:	e000      	b.n	800306a <HAL_GPIO_Init+0x212>
 8003068:	2300      	movs	r3, #0
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	f002 0203 	and.w	r2, r2, #3
 8003070:	0092      	lsls	r2, r2, #2
 8003072:	4093      	lsls	r3, r2
 8003074:	693a      	ldr	r2, [r7, #16]
 8003076:	4313      	orrs	r3, r2
 8003078:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800307a:	4937      	ldr	r1, [pc, #220]	@ (8003158 <HAL_GPIO_Init+0x300>)
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	089b      	lsrs	r3, r3, #2
 8003080:	3302      	adds	r3, #2
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003088:	4b3b      	ldr	r3, [pc, #236]	@ (8003178 <HAL_GPIO_Init+0x320>)
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	43db      	mvns	r3, r3
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	4013      	ands	r3, r2
 8003096:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d003      	beq.n	80030ac <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80030ac:	4a32      	ldr	r2, [pc, #200]	@ (8003178 <HAL_GPIO_Init+0x320>)
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80030b2:	4b31      	ldr	r3, [pc, #196]	@ (8003178 <HAL_GPIO_Init+0x320>)
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	43db      	mvns	r3, r3
 80030bc:	693a      	ldr	r2, [r7, #16]
 80030be:	4013      	ands	r3, r2
 80030c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d003      	beq.n	80030d6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80030d6:	4a28      	ldr	r2, [pc, #160]	@ (8003178 <HAL_GPIO_Init+0x320>)
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80030dc:	4b26      	ldr	r3, [pc, #152]	@ (8003178 <HAL_GPIO_Init+0x320>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	43db      	mvns	r3, r3
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	4013      	ands	r3, r2
 80030ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d003      	beq.n	8003100 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80030f8:	693a      	ldr	r2, [r7, #16]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003100:	4a1d      	ldr	r2, [pc, #116]	@ (8003178 <HAL_GPIO_Init+0x320>)
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003106:	4b1c      	ldr	r3, [pc, #112]	@ (8003178 <HAL_GPIO_Init+0x320>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	43db      	mvns	r3, r3
 8003110:	693a      	ldr	r2, [r7, #16]
 8003112:	4013      	ands	r3, r2
 8003114:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d003      	beq.n	800312a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003122:	693a      	ldr	r2, [r7, #16]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	4313      	orrs	r3, r2
 8003128:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800312a:	4a13      	ldr	r2, [pc, #76]	@ (8003178 <HAL_GPIO_Init+0x320>)
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	3301      	adds	r3, #1
 8003134:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	fa22 f303 	lsr.w	r3, r2, r3
 8003140:	2b00      	cmp	r3, #0
 8003142:	f47f ae91 	bne.w	8002e68 <HAL_GPIO_Init+0x10>
  }
}
 8003146:	bf00      	nop
 8003148:	bf00      	nop
 800314a:	371c      	adds	r7, #28
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr
 8003154:	40021000 	.word	0x40021000
 8003158:	40010000 	.word	0x40010000
 800315c:	48000400 	.word	0x48000400
 8003160:	48000800 	.word	0x48000800
 8003164:	48000c00 	.word	0x48000c00
 8003168:	48001000 	.word	0x48001000
 800316c:	48001400 	.word	0x48001400
 8003170:	48001800 	.word	0x48001800
 8003174:	48001c00 	.word	0x48001c00
 8003178:	40010400 	.word	0x40010400

0800317c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	460b      	mov	r3, r1
 8003186:	807b      	strh	r3, [r7, #2]
 8003188:	4613      	mov	r3, r2
 800318a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800318c:	787b      	ldrb	r3, [r7, #1]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d003      	beq.n	800319a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003192:	887a      	ldrh	r2, [r7, #2]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003198:	e002      	b.n	80031a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800319a:	887a      	ldrh	r2, [r7, #2]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	460b      	mov	r3, r1
 80031b6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	695b      	ldr	r3, [r3, #20]
 80031bc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80031be:	887a      	ldrh	r2, [r7, #2]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	4013      	ands	r3, r2
 80031c4:	041a      	lsls	r2, r3, #16
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	43d9      	mvns	r1, r3
 80031ca:	887b      	ldrh	r3, [r7, #2]
 80031cc:	400b      	ands	r3, r1
 80031ce:	431a      	orrs	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	619a      	str	r2, [r3, #24]
}
 80031d4:	bf00      	nop
 80031d6:	3714      	adds	r7, #20
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80031e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031e2:	b08f      	sub	sp, #60	@ 0x3c
 80031e4:	af0a      	add	r7, sp, #40	@ 0x28
 80031e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e116      	b.n	8003420 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	2b00      	cmp	r3, #0
 8003202:	d106      	bne.n	8003212 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f7ff f9eb 	bl	80025e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2203      	movs	r2, #3
 8003216:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800321e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003222:	2b00      	cmp	r3, #0
 8003224:	d102      	bne.n	800322c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4618      	mov	r0, r3
 8003232:	f003 f925 	bl	8006480 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	603b      	str	r3, [r7, #0]
 800323c:	687e      	ldr	r6, [r7, #4]
 800323e:	466d      	mov	r5, sp
 8003240:	f106 0410 	add.w	r4, r6, #16
 8003244:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003246:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003248:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800324a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800324c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003250:	e885 0003 	stmia.w	r5, {r0, r1}
 8003254:	1d33      	adds	r3, r6, #4
 8003256:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003258:	6838      	ldr	r0, [r7, #0]
 800325a:	f003 f8e5 	bl	8006428 <USB_CoreInit>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d005      	beq.n	8003270 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2202      	movs	r2, #2
 8003268:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e0d7      	b.n	8003420 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2100      	movs	r1, #0
 8003276:	4618      	mov	r0, r3
 8003278:	f003 f913 	bl	80064a2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800327c:	2300      	movs	r3, #0
 800327e:	73fb      	strb	r3, [r7, #15]
 8003280:	e04a      	b.n	8003318 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003282:	7bfa      	ldrb	r2, [r7, #15]
 8003284:	6879      	ldr	r1, [r7, #4]
 8003286:	4613      	mov	r3, r2
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	4413      	add	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	440b      	add	r3, r1
 8003290:	333d      	adds	r3, #61	@ 0x3d
 8003292:	2201      	movs	r2, #1
 8003294:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003296:	7bfa      	ldrb	r2, [r7, #15]
 8003298:	6879      	ldr	r1, [r7, #4]
 800329a:	4613      	mov	r3, r2
 800329c:	00db      	lsls	r3, r3, #3
 800329e:	4413      	add	r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	440b      	add	r3, r1
 80032a4:	333c      	adds	r3, #60	@ 0x3c
 80032a6:	7bfa      	ldrb	r2, [r7, #15]
 80032a8:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80032aa:	7bfa      	ldrb	r2, [r7, #15]
 80032ac:	7bfb      	ldrb	r3, [r7, #15]
 80032ae:	b298      	uxth	r0, r3
 80032b0:	6879      	ldr	r1, [r7, #4]
 80032b2:	4613      	mov	r3, r2
 80032b4:	00db      	lsls	r3, r3, #3
 80032b6:	4413      	add	r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	440b      	add	r3, r1
 80032bc:	3356      	adds	r3, #86	@ 0x56
 80032be:	4602      	mov	r2, r0
 80032c0:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80032c2:	7bfa      	ldrb	r2, [r7, #15]
 80032c4:	6879      	ldr	r1, [r7, #4]
 80032c6:	4613      	mov	r3, r2
 80032c8:	00db      	lsls	r3, r3, #3
 80032ca:	4413      	add	r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	440b      	add	r3, r1
 80032d0:	3340      	adds	r3, #64	@ 0x40
 80032d2:	2200      	movs	r2, #0
 80032d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80032d6:	7bfa      	ldrb	r2, [r7, #15]
 80032d8:	6879      	ldr	r1, [r7, #4]
 80032da:	4613      	mov	r3, r2
 80032dc:	00db      	lsls	r3, r3, #3
 80032de:	4413      	add	r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	440b      	add	r3, r1
 80032e4:	3344      	adds	r3, #68	@ 0x44
 80032e6:	2200      	movs	r2, #0
 80032e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80032ea:	7bfa      	ldrb	r2, [r7, #15]
 80032ec:	6879      	ldr	r1, [r7, #4]
 80032ee:	4613      	mov	r3, r2
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	4413      	add	r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	440b      	add	r3, r1
 80032f8:	3348      	adds	r3, #72	@ 0x48
 80032fa:	2200      	movs	r2, #0
 80032fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80032fe:	7bfa      	ldrb	r2, [r7, #15]
 8003300:	6879      	ldr	r1, [r7, #4]
 8003302:	4613      	mov	r3, r2
 8003304:	00db      	lsls	r3, r3, #3
 8003306:	4413      	add	r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	440b      	add	r3, r1
 800330c:	334c      	adds	r3, #76	@ 0x4c
 800330e:	2200      	movs	r2, #0
 8003310:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003312:	7bfb      	ldrb	r3, [r7, #15]
 8003314:	3301      	adds	r3, #1
 8003316:	73fb      	strb	r3, [r7, #15]
 8003318:	7bfa      	ldrb	r2, [r7, #15]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	429a      	cmp	r2, r3
 8003320:	d3af      	bcc.n	8003282 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003322:	2300      	movs	r3, #0
 8003324:	73fb      	strb	r3, [r7, #15]
 8003326:	e044      	b.n	80033b2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003328:	7bfa      	ldrb	r2, [r7, #15]
 800332a:	6879      	ldr	r1, [r7, #4]
 800332c:	4613      	mov	r3, r2
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	4413      	add	r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	440b      	add	r3, r1
 8003336:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 800333a:	2200      	movs	r2, #0
 800333c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800333e:	7bfa      	ldrb	r2, [r7, #15]
 8003340:	6879      	ldr	r1, [r7, #4]
 8003342:	4613      	mov	r3, r2
 8003344:	00db      	lsls	r3, r3, #3
 8003346:	4413      	add	r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	440b      	add	r3, r1
 800334c:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8003350:	7bfa      	ldrb	r2, [r7, #15]
 8003352:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003354:	7bfa      	ldrb	r2, [r7, #15]
 8003356:	6879      	ldr	r1, [r7, #4]
 8003358:	4613      	mov	r3, r2
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	4413      	add	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	440b      	add	r3, r1
 8003362:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8003366:	2200      	movs	r2, #0
 8003368:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800336a:	7bfa      	ldrb	r2, [r7, #15]
 800336c:	6879      	ldr	r1, [r7, #4]
 800336e:	4613      	mov	r3, r2
 8003370:	00db      	lsls	r3, r3, #3
 8003372:	4413      	add	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	440b      	add	r3, r1
 8003378:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 800337c:	2200      	movs	r2, #0
 800337e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003380:	7bfa      	ldrb	r2, [r7, #15]
 8003382:	6879      	ldr	r1, [r7, #4]
 8003384:	4613      	mov	r3, r2
 8003386:	00db      	lsls	r3, r3, #3
 8003388:	4413      	add	r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	440b      	add	r3, r1
 800338e:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8003392:	2200      	movs	r2, #0
 8003394:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003396:	7bfa      	ldrb	r2, [r7, #15]
 8003398:	6879      	ldr	r1, [r7, #4]
 800339a:	4613      	mov	r3, r2
 800339c:	00db      	lsls	r3, r3, #3
 800339e:	4413      	add	r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	440b      	add	r3, r1
 80033a4:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 80033a8:	2200      	movs	r2, #0
 80033aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033ac:	7bfb      	ldrb	r3, [r7, #15]
 80033ae:	3301      	adds	r3, #1
 80033b0:	73fb      	strb	r3, [r7, #15]
 80033b2:	7bfa      	ldrb	r2, [r7, #15]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d3b5      	bcc.n	8003328 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	603b      	str	r3, [r7, #0]
 80033c2:	687e      	ldr	r6, [r7, #4]
 80033c4:	466d      	mov	r5, sp
 80033c6:	f106 0410 	add.w	r4, r6, #16
 80033ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80033d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80033da:	1d33      	adds	r3, r6, #4
 80033dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033de:	6838      	ldr	r0, [r7, #0]
 80033e0:	f003 f8ac 	bl	800653c <USB_DevInit>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d005      	beq.n	80033f6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2202      	movs	r2, #2
 80033ee:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e014      	b.n	8003420 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2201      	movs	r2, #1
 8003402:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340a:	2b01      	cmp	r3, #1
 800340c:	d102      	bne.n	8003414 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 f80a 	bl	8003428 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4618      	mov	r0, r3
 800341a:	f003 fa4e 	bl	80068ba <USB_DevDisconnect>

  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3714      	adds	r7, #20
 8003424:	46bd      	mov	sp, r7
 8003426:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003428 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003456:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800345a:	f043 0303 	orr.w	r3, r3, #3
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	3714      	adds	r7, #20
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003474:	4b04      	ldr	r3, [pc, #16]	@ (8003488 <HAL_PWREx_GetVoltageRange+0x18>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800347c:	4618      	mov	r0, r3
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	40007000 	.word	0x40007000

0800348c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800349a:	d130      	bne.n	80034fe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800349c:	4b23      	ldr	r3, [pc, #140]	@ (800352c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80034a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034a8:	d038      	beq.n	800351c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80034aa:	4b20      	ldr	r3, [pc, #128]	@ (800352c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80034b2:	4a1e      	ldr	r2, [pc, #120]	@ (800352c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034b4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80034b8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80034ba:	4b1d      	ldr	r3, [pc, #116]	@ (8003530 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2232      	movs	r2, #50	@ 0x32
 80034c0:	fb02 f303 	mul.w	r3, r2, r3
 80034c4:	4a1b      	ldr	r2, [pc, #108]	@ (8003534 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80034c6:	fba2 2303 	umull	r2, r3, r2, r3
 80034ca:	0c9b      	lsrs	r3, r3, #18
 80034cc:	3301      	adds	r3, #1
 80034ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034d0:	e002      	b.n	80034d8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	3b01      	subs	r3, #1
 80034d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034d8:	4b14      	ldr	r3, [pc, #80]	@ (800352c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034e4:	d102      	bne.n	80034ec <HAL_PWREx_ControlVoltageScaling+0x60>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d1f2      	bne.n	80034d2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034ec:	4b0f      	ldr	r3, [pc, #60]	@ (800352c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034ee:	695b      	ldr	r3, [r3, #20]
 80034f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034f8:	d110      	bne.n	800351c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e00f      	b.n	800351e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80034fe:	4b0b      	ldr	r3, [pc, #44]	@ (800352c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003506:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800350a:	d007      	beq.n	800351c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800350c:	4b07      	ldr	r3, [pc, #28]	@ (800352c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003514:	4a05      	ldr	r2, [pc, #20]	@ (800352c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003516:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800351a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3714      	adds	r7, #20
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	40007000 	.word	0x40007000
 8003530:	20000160 	.word	0x20000160
 8003534:	431bde83 	.word	0x431bde83

08003538 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003538:	b480      	push	{r7}
 800353a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800353c:	4b05      	ldr	r3, [pc, #20]	@ (8003554 <HAL_PWREx_EnableVddUSB+0x1c>)
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	4a04      	ldr	r2, [pc, #16]	@ (8003554 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003542:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003546:	6053      	str	r3, [r2, #4]
}
 8003548:	bf00      	nop
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	40007000 	.word	0x40007000

08003558 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b088      	sub	sp, #32
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d102      	bne.n	800356c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	f000 bc08 	b.w	8003d7c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800356c:	4b96      	ldr	r3, [pc, #600]	@ (80037c8 <HAL_RCC_OscConfig+0x270>)
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f003 030c 	and.w	r3, r3, #12
 8003574:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003576:	4b94      	ldr	r3, [pc, #592]	@ (80037c8 <HAL_RCC_OscConfig+0x270>)
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	f003 0303 	and.w	r3, r3, #3
 800357e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0310 	and.w	r3, r3, #16
 8003588:	2b00      	cmp	r3, #0
 800358a:	f000 80e4 	beq.w	8003756 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d007      	beq.n	80035a4 <HAL_RCC_OscConfig+0x4c>
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	2b0c      	cmp	r3, #12
 8003598:	f040 808b 	bne.w	80036b2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	f040 8087 	bne.w	80036b2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035a4:	4b88      	ldr	r3, [pc, #544]	@ (80037c8 <HAL_RCC_OscConfig+0x270>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0302 	and.w	r3, r3, #2
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d005      	beq.n	80035bc <HAL_RCC_OscConfig+0x64>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d101      	bne.n	80035bc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e3df      	b.n	8003d7c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a1a      	ldr	r2, [r3, #32]
 80035c0:	4b81      	ldr	r3, [pc, #516]	@ (80037c8 <HAL_RCC_OscConfig+0x270>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0308 	and.w	r3, r3, #8
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d004      	beq.n	80035d6 <HAL_RCC_OscConfig+0x7e>
 80035cc:	4b7e      	ldr	r3, [pc, #504]	@ (80037c8 <HAL_RCC_OscConfig+0x270>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035d4:	e005      	b.n	80035e2 <HAL_RCC_OscConfig+0x8a>
 80035d6:	4b7c      	ldr	r3, [pc, #496]	@ (80037c8 <HAL_RCC_OscConfig+0x270>)
 80035d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035dc:	091b      	lsrs	r3, r3, #4
 80035de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d223      	bcs.n	800362e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f000 fd92 	bl	8004114 <RCC_SetFlashLatencyFromMSIRange>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d001      	beq.n	80035fa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e3c0      	b.n	8003d7c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035fa:	4b73      	ldr	r3, [pc, #460]	@ (80037c8 <HAL_RCC_OscConfig+0x270>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a72      	ldr	r2, [pc, #456]	@ (80037c8 <HAL_RCC_OscConfig+0x270>)
 8003600:	f043 0308 	orr.w	r3, r3, #8
 8003604:	6013      	str	r3, [r2, #0]
 8003606:	4b70      	ldr	r3, [pc, #448]	@ (80037c8 <HAL_RCC_OscConfig+0x270>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	496d      	ldr	r1, [pc, #436]	@ (80037c8 <HAL_RCC_OscConfig+0x270>)
 8003614:	4313      	orrs	r3, r2
 8003616:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003618:	4b6b      	ldr	r3, [pc, #428]	@ (80037c8 <HAL_RCC_OscConfig+0x270>)
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	69db      	ldr	r3, [r3, #28]
 8003624:	021b      	lsls	r3, r3, #8
 8003626:	4968      	ldr	r1, [pc, #416]	@ (80037c8 <HAL_RCC_OscConfig+0x270>)
 8003628:	4313      	orrs	r3, r2
 800362a:	604b      	str	r3, [r1, #4]
 800362c:	e025      	b.n	800367a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800362e:	4b66      	ldr	r3, [pc, #408]	@ (80037c8 <HAL_RCC_OscConfig+0x270>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a65      	ldr	r2, [pc, #404]	@ (80037c8 <HAL_RCC_OscConfig+0x270>)
 8003634:	f043 0308 	orr.w	r3, r3, #8
 8003638:	6013      	str	r3, [r2, #0]
 800363a:	4b63      	ldr	r3, [pc, #396]	@ (80037c8 <HAL_RCC_OscConfig+0x270>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a1b      	ldr	r3, [r3, #32]
 8003646:	4960      	ldr	r1, [pc, #384]	@ (80037c8 <HAL_RCC_OscConfig+0x270>)
 8003648:	4313      	orrs	r3, r2
 800364a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800364c:	4b5e      	ldr	r3, [pc, #376]	@ (80037c8 <HAL_RCC_OscConfig+0x270>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	69db      	ldr	r3, [r3, #28]
 8003658:	021b      	lsls	r3, r3, #8
 800365a:	495b      	ldr	r1, [pc, #364]	@ (80037c8 <HAL_RCC_OscConfig+0x270>)
 800365c:	4313      	orrs	r3, r2
 800365e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d109      	bne.n	800367a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a1b      	ldr	r3, [r3, #32]
 800366a:	4618      	mov	r0, r3
 800366c:	f000 fd52 	bl	8004114 <RCC_SetFlashLatencyFromMSIRange>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e380      	b.n	8003d7c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800367a:	f000 fc87 	bl	8003f8c <HAL_RCC_GetSysClockFreq>
 800367e:	4602      	mov	r2, r0
 8003680:	4b51      	ldr	r3, [pc, #324]	@ (80037c8 <HAL_RCC_OscConfig+0x270>)
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	091b      	lsrs	r3, r3, #4
 8003686:	f003 030f 	and.w	r3, r3, #15
 800368a:	4950      	ldr	r1, [pc, #320]	@ (80037cc <HAL_RCC_OscConfig+0x274>)
 800368c:	5ccb      	ldrb	r3, [r1, r3]
 800368e:	f003 031f 	and.w	r3, r3, #31
 8003692:	fa22 f303 	lsr.w	r3, r2, r3
 8003696:	4a4e      	ldr	r2, [pc, #312]	@ (80037d0 <HAL_RCC_OscConfig+0x278>)
 8003698:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800369a:	4b4e      	ldr	r3, [pc, #312]	@ (80037d4 <HAL_RCC_OscConfig+0x27c>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4618      	mov	r0, r3
 80036a0:	f7ff f880 	bl	80027a4 <HAL_InitTick>
 80036a4:	4603      	mov	r3, r0
 80036a6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80036a8:	7bfb      	ldrb	r3, [r7, #15]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d052      	beq.n	8003754 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80036ae:	7bfb      	ldrb	r3, [r7, #15]
 80036b0:	e364      	b.n	8003d7c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d032      	beq.n	8003720 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80036ba:	4b43      	ldr	r3, [pc, #268]	@ (80037c8 <HAL_RCC_OscConfig+0x270>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a42      	ldr	r2, [pc, #264]	@ (80037c8 <HAL_RCC_OscConfig+0x270>)
 80036c0:	f043 0301 	orr.w	r3, r3, #1
 80036c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80036c6:	f7ff f8bd 	bl	8002844 <HAL_GetTick>
 80036ca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036cc:	e008      	b.n	80036e0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036ce:	f7ff f8b9 	bl	8002844 <HAL_GetTick>
 80036d2:	4602      	mov	r2, r0
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d901      	bls.n	80036e0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e34d      	b.n	8003d7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036e0:	4b39      	ldr	r3, [pc, #228]	@ (80037c8 <HAL_RCC_OscConfig+0x270>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d0f0      	beq.n	80036ce <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036ec:	4b36      	ldr	r3, [pc, #216]	@ (80037c8 <HAL_RCC_OscConfig+0x270>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a35      	ldr	r2, [pc, #212]	@ (80037c8 <HAL_RCC_OscConfig+0x270>)
 80036f2:	f043 0308 	orr.w	r3, r3, #8
 80036f6:	6013      	str	r3, [r2, #0]
 80036f8:	4b33      	ldr	r3, [pc, #204]	@ (80037c8 <HAL_RCC_OscConfig+0x270>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a1b      	ldr	r3, [r3, #32]
 8003704:	4930      	ldr	r1, [pc, #192]	@ (80037c8 <HAL_RCC_OscConfig+0x270>)
 8003706:	4313      	orrs	r3, r2
 8003708:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800370a:	4b2f      	ldr	r3, [pc, #188]	@ (80037c8 <HAL_RCC_OscConfig+0x270>)
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	69db      	ldr	r3, [r3, #28]
 8003716:	021b      	lsls	r3, r3, #8
 8003718:	492b      	ldr	r1, [pc, #172]	@ (80037c8 <HAL_RCC_OscConfig+0x270>)
 800371a:	4313      	orrs	r3, r2
 800371c:	604b      	str	r3, [r1, #4]
 800371e:	e01a      	b.n	8003756 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003720:	4b29      	ldr	r3, [pc, #164]	@ (80037c8 <HAL_RCC_OscConfig+0x270>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a28      	ldr	r2, [pc, #160]	@ (80037c8 <HAL_RCC_OscConfig+0x270>)
 8003726:	f023 0301 	bic.w	r3, r3, #1
 800372a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800372c:	f7ff f88a 	bl	8002844 <HAL_GetTick>
 8003730:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003732:	e008      	b.n	8003746 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003734:	f7ff f886 	bl	8002844 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e31a      	b.n	8003d7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003746:	4b20      	ldr	r3, [pc, #128]	@ (80037c8 <HAL_RCC_OscConfig+0x270>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1f0      	bne.n	8003734 <HAL_RCC_OscConfig+0x1dc>
 8003752:	e000      	b.n	8003756 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003754:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	2b00      	cmp	r3, #0
 8003760:	d073      	beq.n	800384a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	2b08      	cmp	r3, #8
 8003766:	d005      	beq.n	8003774 <HAL_RCC_OscConfig+0x21c>
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	2b0c      	cmp	r3, #12
 800376c:	d10e      	bne.n	800378c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	2b03      	cmp	r3, #3
 8003772:	d10b      	bne.n	800378c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003774:	4b14      	ldr	r3, [pc, #80]	@ (80037c8 <HAL_RCC_OscConfig+0x270>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d063      	beq.n	8003848 <HAL_RCC_OscConfig+0x2f0>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d15f      	bne.n	8003848 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e2f7      	b.n	8003d7c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003794:	d106      	bne.n	80037a4 <HAL_RCC_OscConfig+0x24c>
 8003796:	4b0c      	ldr	r3, [pc, #48]	@ (80037c8 <HAL_RCC_OscConfig+0x270>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a0b      	ldr	r2, [pc, #44]	@ (80037c8 <HAL_RCC_OscConfig+0x270>)
 800379c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037a0:	6013      	str	r3, [r2, #0]
 80037a2:	e025      	b.n	80037f0 <HAL_RCC_OscConfig+0x298>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037ac:	d114      	bne.n	80037d8 <HAL_RCC_OscConfig+0x280>
 80037ae:	4b06      	ldr	r3, [pc, #24]	@ (80037c8 <HAL_RCC_OscConfig+0x270>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a05      	ldr	r2, [pc, #20]	@ (80037c8 <HAL_RCC_OscConfig+0x270>)
 80037b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037b8:	6013      	str	r3, [r2, #0]
 80037ba:	4b03      	ldr	r3, [pc, #12]	@ (80037c8 <HAL_RCC_OscConfig+0x270>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a02      	ldr	r2, [pc, #8]	@ (80037c8 <HAL_RCC_OscConfig+0x270>)
 80037c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037c4:	6013      	str	r3, [r2, #0]
 80037c6:	e013      	b.n	80037f0 <HAL_RCC_OscConfig+0x298>
 80037c8:	40021000 	.word	0x40021000
 80037cc:	08009868 	.word	0x08009868
 80037d0:	20000160 	.word	0x20000160
 80037d4:	20000164 	.word	0x20000164
 80037d8:	4ba0      	ldr	r3, [pc, #640]	@ (8003a5c <HAL_RCC_OscConfig+0x504>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a9f      	ldr	r2, [pc, #636]	@ (8003a5c <HAL_RCC_OscConfig+0x504>)
 80037de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037e2:	6013      	str	r3, [r2, #0]
 80037e4:	4b9d      	ldr	r3, [pc, #628]	@ (8003a5c <HAL_RCC_OscConfig+0x504>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a9c      	ldr	r2, [pc, #624]	@ (8003a5c <HAL_RCC_OscConfig+0x504>)
 80037ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d013      	beq.n	8003820 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f8:	f7ff f824 	bl	8002844 <HAL_GetTick>
 80037fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037fe:	e008      	b.n	8003812 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003800:	f7ff f820 	bl	8002844 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	2b64      	cmp	r3, #100	@ 0x64
 800380c:	d901      	bls.n	8003812 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e2b4      	b.n	8003d7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003812:	4b92      	ldr	r3, [pc, #584]	@ (8003a5c <HAL_RCC_OscConfig+0x504>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d0f0      	beq.n	8003800 <HAL_RCC_OscConfig+0x2a8>
 800381e:	e014      	b.n	800384a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003820:	f7ff f810 	bl	8002844 <HAL_GetTick>
 8003824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003826:	e008      	b.n	800383a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003828:	f7ff f80c 	bl	8002844 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b64      	cmp	r3, #100	@ 0x64
 8003834:	d901      	bls.n	800383a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e2a0      	b.n	8003d7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800383a:	4b88      	ldr	r3, [pc, #544]	@ (8003a5c <HAL_RCC_OscConfig+0x504>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1f0      	bne.n	8003828 <HAL_RCC_OscConfig+0x2d0>
 8003846:	e000      	b.n	800384a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003848:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d060      	beq.n	8003918 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	2b04      	cmp	r3, #4
 800385a:	d005      	beq.n	8003868 <HAL_RCC_OscConfig+0x310>
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	2b0c      	cmp	r3, #12
 8003860:	d119      	bne.n	8003896 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	2b02      	cmp	r3, #2
 8003866:	d116      	bne.n	8003896 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003868:	4b7c      	ldr	r3, [pc, #496]	@ (8003a5c <HAL_RCC_OscConfig+0x504>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003870:	2b00      	cmp	r3, #0
 8003872:	d005      	beq.n	8003880 <HAL_RCC_OscConfig+0x328>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d101      	bne.n	8003880 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e27d      	b.n	8003d7c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003880:	4b76      	ldr	r3, [pc, #472]	@ (8003a5c <HAL_RCC_OscConfig+0x504>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	061b      	lsls	r3, r3, #24
 800388e:	4973      	ldr	r1, [pc, #460]	@ (8003a5c <HAL_RCC_OscConfig+0x504>)
 8003890:	4313      	orrs	r3, r2
 8003892:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003894:	e040      	b.n	8003918 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d023      	beq.n	80038e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800389e:	4b6f      	ldr	r3, [pc, #444]	@ (8003a5c <HAL_RCC_OscConfig+0x504>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a6e      	ldr	r2, [pc, #440]	@ (8003a5c <HAL_RCC_OscConfig+0x504>)
 80038a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038aa:	f7fe ffcb 	bl	8002844 <HAL_GetTick>
 80038ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038b0:	e008      	b.n	80038c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038b2:	f7fe ffc7 	bl	8002844 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d901      	bls.n	80038c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e25b      	b.n	8003d7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038c4:	4b65      	ldr	r3, [pc, #404]	@ (8003a5c <HAL_RCC_OscConfig+0x504>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d0f0      	beq.n	80038b2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038d0:	4b62      	ldr	r3, [pc, #392]	@ (8003a5c <HAL_RCC_OscConfig+0x504>)
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	061b      	lsls	r3, r3, #24
 80038de:	495f      	ldr	r1, [pc, #380]	@ (8003a5c <HAL_RCC_OscConfig+0x504>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	604b      	str	r3, [r1, #4]
 80038e4:	e018      	b.n	8003918 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038e6:	4b5d      	ldr	r3, [pc, #372]	@ (8003a5c <HAL_RCC_OscConfig+0x504>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a5c      	ldr	r2, [pc, #368]	@ (8003a5c <HAL_RCC_OscConfig+0x504>)
 80038ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f2:	f7fe ffa7 	bl	8002844 <HAL_GetTick>
 80038f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038f8:	e008      	b.n	800390c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038fa:	f7fe ffa3 	bl	8002844 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	2b02      	cmp	r3, #2
 8003906:	d901      	bls.n	800390c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e237      	b.n	8003d7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800390c:	4b53      	ldr	r3, [pc, #332]	@ (8003a5c <HAL_RCC_OscConfig+0x504>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1f0      	bne.n	80038fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0308 	and.w	r3, r3, #8
 8003920:	2b00      	cmp	r3, #0
 8003922:	d03c      	beq.n	800399e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	695b      	ldr	r3, [r3, #20]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d01c      	beq.n	8003966 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800392c:	4b4b      	ldr	r3, [pc, #300]	@ (8003a5c <HAL_RCC_OscConfig+0x504>)
 800392e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003932:	4a4a      	ldr	r2, [pc, #296]	@ (8003a5c <HAL_RCC_OscConfig+0x504>)
 8003934:	f043 0301 	orr.w	r3, r3, #1
 8003938:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800393c:	f7fe ff82 	bl	8002844 <HAL_GetTick>
 8003940:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003942:	e008      	b.n	8003956 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003944:	f7fe ff7e 	bl	8002844 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b02      	cmp	r3, #2
 8003950:	d901      	bls.n	8003956 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e212      	b.n	8003d7c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003956:	4b41      	ldr	r3, [pc, #260]	@ (8003a5c <HAL_RCC_OscConfig+0x504>)
 8003958:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d0ef      	beq.n	8003944 <HAL_RCC_OscConfig+0x3ec>
 8003964:	e01b      	b.n	800399e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003966:	4b3d      	ldr	r3, [pc, #244]	@ (8003a5c <HAL_RCC_OscConfig+0x504>)
 8003968:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800396c:	4a3b      	ldr	r2, [pc, #236]	@ (8003a5c <HAL_RCC_OscConfig+0x504>)
 800396e:	f023 0301 	bic.w	r3, r3, #1
 8003972:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003976:	f7fe ff65 	bl	8002844 <HAL_GetTick>
 800397a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800397c:	e008      	b.n	8003990 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800397e:	f7fe ff61 	bl	8002844 <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	2b02      	cmp	r3, #2
 800398a:	d901      	bls.n	8003990 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e1f5      	b.n	8003d7c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003990:	4b32      	ldr	r3, [pc, #200]	@ (8003a5c <HAL_RCC_OscConfig+0x504>)
 8003992:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d1ef      	bne.n	800397e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0304 	and.w	r3, r3, #4
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	f000 80a6 	beq.w	8003af8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039ac:	2300      	movs	r3, #0
 80039ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80039b0:	4b2a      	ldr	r3, [pc, #168]	@ (8003a5c <HAL_RCC_OscConfig+0x504>)
 80039b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d10d      	bne.n	80039d8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039bc:	4b27      	ldr	r3, [pc, #156]	@ (8003a5c <HAL_RCC_OscConfig+0x504>)
 80039be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039c0:	4a26      	ldr	r2, [pc, #152]	@ (8003a5c <HAL_RCC_OscConfig+0x504>)
 80039c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80039c8:	4b24      	ldr	r3, [pc, #144]	@ (8003a5c <HAL_RCC_OscConfig+0x504>)
 80039ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039d0:	60bb      	str	r3, [r7, #8]
 80039d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039d4:	2301      	movs	r3, #1
 80039d6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039d8:	4b21      	ldr	r3, [pc, #132]	@ (8003a60 <HAL_RCC_OscConfig+0x508>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d118      	bne.n	8003a16 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039e4:	4b1e      	ldr	r3, [pc, #120]	@ (8003a60 <HAL_RCC_OscConfig+0x508>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a1d      	ldr	r2, [pc, #116]	@ (8003a60 <HAL_RCC_OscConfig+0x508>)
 80039ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039f0:	f7fe ff28 	bl	8002844 <HAL_GetTick>
 80039f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039f6:	e008      	b.n	8003a0a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039f8:	f7fe ff24 	bl	8002844 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e1b8      	b.n	8003d7c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a0a:	4b15      	ldr	r3, [pc, #84]	@ (8003a60 <HAL_RCC_OscConfig+0x508>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d0f0      	beq.n	80039f8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d108      	bne.n	8003a30 <HAL_RCC_OscConfig+0x4d8>
 8003a1e:	4b0f      	ldr	r3, [pc, #60]	@ (8003a5c <HAL_RCC_OscConfig+0x504>)
 8003a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a24:	4a0d      	ldr	r2, [pc, #52]	@ (8003a5c <HAL_RCC_OscConfig+0x504>)
 8003a26:	f043 0301 	orr.w	r3, r3, #1
 8003a2a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a2e:	e029      	b.n	8003a84 <HAL_RCC_OscConfig+0x52c>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	2b05      	cmp	r3, #5
 8003a36:	d115      	bne.n	8003a64 <HAL_RCC_OscConfig+0x50c>
 8003a38:	4b08      	ldr	r3, [pc, #32]	@ (8003a5c <HAL_RCC_OscConfig+0x504>)
 8003a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a3e:	4a07      	ldr	r2, [pc, #28]	@ (8003a5c <HAL_RCC_OscConfig+0x504>)
 8003a40:	f043 0304 	orr.w	r3, r3, #4
 8003a44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a48:	4b04      	ldr	r3, [pc, #16]	@ (8003a5c <HAL_RCC_OscConfig+0x504>)
 8003a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a4e:	4a03      	ldr	r2, [pc, #12]	@ (8003a5c <HAL_RCC_OscConfig+0x504>)
 8003a50:	f043 0301 	orr.w	r3, r3, #1
 8003a54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a58:	e014      	b.n	8003a84 <HAL_RCC_OscConfig+0x52c>
 8003a5a:	bf00      	nop
 8003a5c:	40021000 	.word	0x40021000
 8003a60:	40007000 	.word	0x40007000
 8003a64:	4b9d      	ldr	r3, [pc, #628]	@ (8003cdc <HAL_RCC_OscConfig+0x784>)
 8003a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a6a:	4a9c      	ldr	r2, [pc, #624]	@ (8003cdc <HAL_RCC_OscConfig+0x784>)
 8003a6c:	f023 0301 	bic.w	r3, r3, #1
 8003a70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a74:	4b99      	ldr	r3, [pc, #612]	@ (8003cdc <HAL_RCC_OscConfig+0x784>)
 8003a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a7a:	4a98      	ldr	r2, [pc, #608]	@ (8003cdc <HAL_RCC_OscConfig+0x784>)
 8003a7c:	f023 0304 	bic.w	r3, r3, #4
 8003a80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d016      	beq.n	8003aba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a8c:	f7fe feda 	bl	8002844 <HAL_GetTick>
 8003a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a92:	e00a      	b.n	8003aaa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a94:	f7fe fed6 	bl	8002844 <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e168      	b.n	8003d7c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003aaa:	4b8c      	ldr	r3, [pc, #560]	@ (8003cdc <HAL_RCC_OscConfig+0x784>)
 8003aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ab0:	f003 0302 	and.w	r3, r3, #2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d0ed      	beq.n	8003a94 <HAL_RCC_OscConfig+0x53c>
 8003ab8:	e015      	b.n	8003ae6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aba:	f7fe fec3 	bl	8002844 <HAL_GetTick>
 8003abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ac0:	e00a      	b.n	8003ad8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ac2:	f7fe febf 	bl	8002844 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d901      	bls.n	8003ad8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e151      	b.n	8003d7c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ad8:	4b80      	ldr	r3, [pc, #512]	@ (8003cdc <HAL_RCC_OscConfig+0x784>)
 8003ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1ed      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ae6:	7ffb      	ldrb	r3, [r7, #31]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d105      	bne.n	8003af8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aec:	4b7b      	ldr	r3, [pc, #492]	@ (8003cdc <HAL_RCC_OscConfig+0x784>)
 8003aee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003af0:	4a7a      	ldr	r2, [pc, #488]	@ (8003cdc <HAL_RCC_OscConfig+0x784>)
 8003af2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003af6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0320 	and.w	r3, r3, #32
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d03c      	beq.n	8003b7e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d01c      	beq.n	8003b46 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b0c:	4b73      	ldr	r3, [pc, #460]	@ (8003cdc <HAL_RCC_OscConfig+0x784>)
 8003b0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b12:	4a72      	ldr	r2, [pc, #456]	@ (8003cdc <HAL_RCC_OscConfig+0x784>)
 8003b14:	f043 0301 	orr.w	r3, r3, #1
 8003b18:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b1c:	f7fe fe92 	bl	8002844 <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b22:	e008      	b.n	8003b36 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b24:	f7fe fe8e 	bl	8002844 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e122      	b.n	8003d7c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b36:	4b69      	ldr	r3, [pc, #420]	@ (8003cdc <HAL_RCC_OscConfig+0x784>)
 8003b38:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d0ef      	beq.n	8003b24 <HAL_RCC_OscConfig+0x5cc>
 8003b44:	e01b      	b.n	8003b7e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b46:	4b65      	ldr	r3, [pc, #404]	@ (8003cdc <HAL_RCC_OscConfig+0x784>)
 8003b48:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b4c:	4a63      	ldr	r2, [pc, #396]	@ (8003cdc <HAL_RCC_OscConfig+0x784>)
 8003b4e:	f023 0301 	bic.w	r3, r3, #1
 8003b52:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b56:	f7fe fe75 	bl	8002844 <HAL_GetTick>
 8003b5a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b5c:	e008      	b.n	8003b70 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b5e:	f7fe fe71 	bl	8002844 <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d901      	bls.n	8003b70 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e105      	b.n	8003d7c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b70:	4b5a      	ldr	r3, [pc, #360]	@ (8003cdc <HAL_RCC_OscConfig+0x784>)
 8003b72:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1ef      	bne.n	8003b5e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	f000 80f9 	beq.w	8003d7a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	f040 80cf 	bne.w	8003d30 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003b92:	4b52      	ldr	r3, [pc, #328]	@ (8003cdc <HAL_RCC_OscConfig+0x784>)
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	f003 0203 	and.w	r2, r3, #3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d12c      	bne.n	8003c00 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d123      	bne.n	8003c00 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bc2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d11b      	bne.n	8003c00 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bd2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d113      	bne.n	8003c00 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003be2:	085b      	lsrs	r3, r3, #1
 8003be4:	3b01      	subs	r3, #1
 8003be6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d109      	bne.n	8003c00 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf6:	085b      	lsrs	r3, r3, #1
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d071      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	2b0c      	cmp	r3, #12
 8003c04:	d068      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003c06:	4b35      	ldr	r3, [pc, #212]	@ (8003cdc <HAL_RCC_OscConfig+0x784>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d105      	bne.n	8003c1e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003c12:	4b32      	ldr	r3, [pc, #200]	@ (8003cdc <HAL_RCC_OscConfig+0x784>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e0ac      	b.n	8003d7c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003c22:	4b2e      	ldr	r3, [pc, #184]	@ (8003cdc <HAL_RCC_OscConfig+0x784>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a2d      	ldr	r2, [pc, #180]	@ (8003cdc <HAL_RCC_OscConfig+0x784>)
 8003c28:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c2c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c2e:	f7fe fe09 	bl	8002844 <HAL_GetTick>
 8003c32:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c34:	e008      	b.n	8003c48 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c36:	f7fe fe05 	bl	8002844 <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d901      	bls.n	8003c48 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e099      	b.n	8003d7c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c48:	4b24      	ldr	r3, [pc, #144]	@ (8003cdc <HAL_RCC_OscConfig+0x784>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d1f0      	bne.n	8003c36 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c54:	4b21      	ldr	r3, [pc, #132]	@ (8003cdc <HAL_RCC_OscConfig+0x784>)
 8003c56:	68da      	ldr	r2, [r3, #12]
 8003c58:	4b21      	ldr	r3, [pc, #132]	@ (8003ce0 <HAL_RCC_OscConfig+0x788>)
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003c64:	3a01      	subs	r2, #1
 8003c66:	0112      	lsls	r2, r2, #4
 8003c68:	4311      	orrs	r1, r2
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003c6e:	0212      	lsls	r2, r2, #8
 8003c70:	4311      	orrs	r1, r2
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003c76:	0852      	lsrs	r2, r2, #1
 8003c78:	3a01      	subs	r2, #1
 8003c7a:	0552      	lsls	r2, r2, #21
 8003c7c:	4311      	orrs	r1, r2
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003c82:	0852      	lsrs	r2, r2, #1
 8003c84:	3a01      	subs	r2, #1
 8003c86:	0652      	lsls	r2, r2, #25
 8003c88:	4311      	orrs	r1, r2
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003c8e:	06d2      	lsls	r2, r2, #27
 8003c90:	430a      	orrs	r2, r1
 8003c92:	4912      	ldr	r1, [pc, #72]	@ (8003cdc <HAL_RCC_OscConfig+0x784>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003c98:	4b10      	ldr	r3, [pc, #64]	@ (8003cdc <HAL_RCC_OscConfig+0x784>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a0f      	ldr	r2, [pc, #60]	@ (8003cdc <HAL_RCC_OscConfig+0x784>)
 8003c9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ca2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ca4:	4b0d      	ldr	r3, [pc, #52]	@ (8003cdc <HAL_RCC_OscConfig+0x784>)
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	4a0c      	ldr	r2, [pc, #48]	@ (8003cdc <HAL_RCC_OscConfig+0x784>)
 8003caa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003cae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003cb0:	f7fe fdc8 	bl	8002844 <HAL_GetTick>
 8003cb4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cb6:	e008      	b.n	8003cca <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cb8:	f7fe fdc4 	bl	8002844 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e058      	b.n	8003d7c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cca:	4b04      	ldr	r3, [pc, #16]	@ (8003cdc <HAL_RCC_OscConfig+0x784>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d0f0      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003cd6:	e050      	b.n	8003d7a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e04f      	b.n	8003d7c <HAL_RCC_OscConfig+0x824>
 8003cdc:	40021000 	.word	0x40021000
 8003ce0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ce4:	4b27      	ldr	r3, [pc, #156]	@ (8003d84 <HAL_RCC_OscConfig+0x82c>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d144      	bne.n	8003d7a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003cf0:	4b24      	ldr	r3, [pc, #144]	@ (8003d84 <HAL_RCC_OscConfig+0x82c>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a23      	ldr	r2, [pc, #140]	@ (8003d84 <HAL_RCC_OscConfig+0x82c>)
 8003cf6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003cfa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003cfc:	4b21      	ldr	r3, [pc, #132]	@ (8003d84 <HAL_RCC_OscConfig+0x82c>)
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	4a20      	ldr	r2, [pc, #128]	@ (8003d84 <HAL_RCC_OscConfig+0x82c>)
 8003d02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d06:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d08:	f7fe fd9c 	bl	8002844 <HAL_GetTick>
 8003d0c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d0e:	e008      	b.n	8003d22 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d10:	f7fe fd98 	bl	8002844 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e02c      	b.n	8003d7c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d22:	4b18      	ldr	r3, [pc, #96]	@ (8003d84 <HAL_RCC_OscConfig+0x82c>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d0f0      	beq.n	8003d10 <HAL_RCC_OscConfig+0x7b8>
 8003d2e:	e024      	b.n	8003d7a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	2b0c      	cmp	r3, #12
 8003d34:	d01f      	beq.n	8003d76 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d36:	4b13      	ldr	r3, [pc, #76]	@ (8003d84 <HAL_RCC_OscConfig+0x82c>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a12      	ldr	r2, [pc, #72]	@ (8003d84 <HAL_RCC_OscConfig+0x82c>)
 8003d3c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d42:	f7fe fd7f 	bl	8002844 <HAL_GetTick>
 8003d46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d48:	e008      	b.n	8003d5c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d4a:	f7fe fd7b 	bl	8002844 <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d901      	bls.n	8003d5c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e00f      	b.n	8003d7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d5c:	4b09      	ldr	r3, [pc, #36]	@ (8003d84 <HAL_RCC_OscConfig+0x82c>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1f0      	bne.n	8003d4a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003d68:	4b06      	ldr	r3, [pc, #24]	@ (8003d84 <HAL_RCC_OscConfig+0x82c>)
 8003d6a:	68da      	ldr	r2, [r3, #12]
 8003d6c:	4905      	ldr	r1, [pc, #20]	@ (8003d84 <HAL_RCC_OscConfig+0x82c>)
 8003d6e:	4b06      	ldr	r3, [pc, #24]	@ (8003d88 <HAL_RCC_OscConfig+0x830>)
 8003d70:	4013      	ands	r3, r2
 8003d72:	60cb      	str	r3, [r1, #12]
 8003d74:	e001      	b.n	8003d7a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e000      	b.n	8003d7c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3720      	adds	r7, #32
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	40021000 	.word	0x40021000
 8003d88:	feeefffc 	.word	0xfeeefffc

08003d8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d101      	bne.n	8003da0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e0e7      	b.n	8003f70 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003da0:	4b75      	ldr	r3, [pc, #468]	@ (8003f78 <HAL_RCC_ClockConfig+0x1ec>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0307 	and.w	r3, r3, #7
 8003da8:	683a      	ldr	r2, [r7, #0]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d910      	bls.n	8003dd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dae:	4b72      	ldr	r3, [pc, #456]	@ (8003f78 <HAL_RCC_ClockConfig+0x1ec>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f023 0207 	bic.w	r2, r3, #7
 8003db6:	4970      	ldr	r1, [pc, #448]	@ (8003f78 <HAL_RCC_ClockConfig+0x1ec>)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dbe:	4b6e      	ldr	r3, [pc, #440]	@ (8003f78 <HAL_RCC_ClockConfig+0x1ec>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0307 	and.w	r3, r3, #7
 8003dc6:	683a      	ldr	r2, [r7, #0]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d001      	beq.n	8003dd0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e0cf      	b.n	8003f70 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d010      	beq.n	8003dfe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	689a      	ldr	r2, [r3, #8]
 8003de0:	4b66      	ldr	r3, [pc, #408]	@ (8003f7c <HAL_RCC_ClockConfig+0x1f0>)
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d908      	bls.n	8003dfe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dec:	4b63      	ldr	r3, [pc, #396]	@ (8003f7c <HAL_RCC_ClockConfig+0x1f0>)
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	4960      	ldr	r1, [pc, #384]	@ (8003f7c <HAL_RCC_ClockConfig+0x1f0>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d04c      	beq.n	8003ea4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	2b03      	cmp	r3, #3
 8003e10:	d107      	bne.n	8003e22 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e12:	4b5a      	ldr	r3, [pc, #360]	@ (8003f7c <HAL_RCC_ClockConfig+0x1f0>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d121      	bne.n	8003e62 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e0a6      	b.n	8003f70 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d107      	bne.n	8003e3a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e2a:	4b54      	ldr	r3, [pc, #336]	@ (8003f7c <HAL_RCC_ClockConfig+0x1f0>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d115      	bne.n	8003e62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e09a      	b.n	8003f70 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d107      	bne.n	8003e52 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e42:	4b4e      	ldr	r3, [pc, #312]	@ (8003f7c <HAL_RCC_ClockConfig+0x1f0>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d109      	bne.n	8003e62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e08e      	b.n	8003f70 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e52:	4b4a      	ldr	r3, [pc, #296]	@ (8003f7c <HAL_RCC_ClockConfig+0x1f0>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e086      	b.n	8003f70 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e62:	4b46      	ldr	r3, [pc, #280]	@ (8003f7c <HAL_RCC_ClockConfig+0x1f0>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f023 0203 	bic.w	r2, r3, #3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	4943      	ldr	r1, [pc, #268]	@ (8003f7c <HAL_RCC_ClockConfig+0x1f0>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e74:	f7fe fce6 	bl	8002844 <HAL_GetTick>
 8003e78:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e7a:	e00a      	b.n	8003e92 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e7c:	f7fe fce2 	bl	8002844 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e06e      	b.n	8003f70 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e92:	4b3a      	ldr	r3, [pc, #232]	@ (8003f7c <HAL_RCC_ClockConfig+0x1f0>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f003 020c 	and.w	r2, r3, #12
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d1eb      	bne.n	8003e7c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d010      	beq.n	8003ed2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	689a      	ldr	r2, [r3, #8]
 8003eb4:	4b31      	ldr	r3, [pc, #196]	@ (8003f7c <HAL_RCC_ClockConfig+0x1f0>)
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d208      	bcs.n	8003ed2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ec0:	4b2e      	ldr	r3, [pc, #184]	@ (8003f7c <HAL_RCC_ClockConfig+0x1f0>)
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	492b      	ldr	r1, [pc, #172]	@ (8003f7c <HAL_RCC_ClockConfig+0x1f0>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ed2:	4b29      	ldr	r3, [pc, #164]	@ (8003f78 <HAL_RCC_ClockConfig+0x1ec>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0307 	and.w	r3, r3, #7
 8003eda:	683a      	ldr	r2, [r7, #0]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d210      	bcs.n	8003f02 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ee0:	4b25      	ldr	r3, [pc, #148]	@ (8003f78 <HAL_RCC_ClockConfig+0x1ec>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f023 0207 	bic.w	r2, r3, #7
 8003ee8:	4923      	ldr	r1, [pc, #140]	@ (8003f78 <HAL_RCC_ClockConfig+0x1ec>)
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ef0:	4b21      	ldr	r3, [pc, #132]	@ (8003f78 <HAL_RCC_ClockConfig+0x1ec>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0307 	and.w	r3, r3, #7
 8003ef8:	683a      	ldr	r2, [r7, #0]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d001      	beq.n	8003f02 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e036      	b.n	8003f70 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0304 	and.w	r3, r3, #4
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d008      	beq.n	8003f20 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f0e:	4b1b      	ldr	r3, [pc, #108]	@ (8003f7c <HAL_RCC_ClockConfig+0x1f0>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	4918      	ldr	r1, [pc, #96]	@ (8003f7c <HAL_RCC_ClockConfig+0x1f0>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0308 	and.w	r3, r3, #8
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d009      	beq.n	8003f40 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f2c:	4b13      	ldr	r3, [pc, #76]	@ (8003f7c <HAL_RCC_ClockConfig+0x1f0>)
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	00db      	lsls	r3, r3, #3
 8003f3a:	4910      	ldr	r1, [pc, #64]	@ (8003f7c <HAL_RCC_ClockConfig+0x1f0>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f40:	f000 f824 	bl	8003f8c <HAL_RCC_GetSysClockFreq>
 8003f44:	4602      	mov	r2, r0
 8003f46:	4b0d      	ldr	r3, [pc, #52]	@ (8003f7c <HAL_RCC_ClockConfig+0x1f0>)
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	091b      	lsrs	r3, r3, #4
 8003f4c:	f003 030f 	and.w	r3, r3, #15
 8003f50:	490b      	ldr	r1, [pc, #44]	@ (8003f80 <HAL_RCC_ClockConfig+0x1f4>)
 8003f52:	5ccb      	ldrb	r3, [r1, r3]
 8003f54:	f003 031f 	and.w	r3, r3, #31
 8003f58:	fa22 f303 	lsr.w	r3, r2, r3
 8003f5c:	4a09      	ldr	r2, [pc, #36]	@ (8003f84 <HAL_RCC_ClockConfig+0x1f8>)
 8003f5e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003f60:	4b09      	ldr	r3, [pc, #36]	@ (8003f88 <HAL_RCC_ClockConfig+0x1fc>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4618      	mov	r0, r3
 8003f66:	f7fe fc1d 	bl	80027a4 <HAL_InitTick>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	72fb      	strb	r3, [r7, #11]

  return status;
 8003f6e:	7afb      	ldrb	r3, [r7, #11]
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3710      	adds	r7, #16
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	40022000 	.word	0x40022000
 8003f7c:	40021000 	.word	0x40021000
 8003f80:	08009868 	.word	0x08009868
 8003f84:	20000160 	.word	0x20000160
 8003f88:	20000164 	.word	0x20000164

08003f8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b089      	sub	sp, #36	@ 0x24
 8003f90:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003f92:	2300      	movs	r3, #0
 8003f94:	61fb      	str	r3, [r7, #28]
 8003f96:	2300      	movs	r3, #0
 8003f98:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f9a:	4b3e      	ldr	r3, [pc, #248]	@ (8004094 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f003 030c 	and.w	r3, r3, #12
 8003fa2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fa4:	4b3b      	ldr	r3, [pc, #236]	@ (8004094 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	f003 0303 	and.w	r3, r3, #3
 8003fac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d005      	beq.n	8003fc0 <HAL_RCC_GetSysClockFreq+0x34>
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	2b0c      	cmp	r3, #12
 8003fb8:	d121      	bne.n	8003ffe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d11e      	bne.n	8003ffe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003fc0:	4b34      	ldr	r3, [pc, #208]	@ (8004094 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0308 	and.w	r3, r3, #8
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d107      	bne.n	8003fdc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003fcc:	4b31      	ldr	r3, [pc, #196]	@ (8004094 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fd2:	0a1b      	lsrs	r3, r3, #8
 8003fd4:	f003 030f 	and.w	r3, r3, #15
 8003fd8:	61fb      	str	r3, [r7, #28]
 8003fda:	e005      	b.n	8003fe8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003fdc:	4b2d      	ldr	r3, [pc, #180]	@ (8004094 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	091b      	lsrs	r3, r3, #4
 8003fe2:	f003 030f 	and.w	r3, r3, #15
 8003fe6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003fe8:	4a2b      	ldr	r2, [pc, #172]	@ (8004098 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ff0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d10d      	bne.n	8004014 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ffc:	e00a      	b.n	8004014 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	2b04      	cmp	r3, #4
 8004002:	d102      	bne.n	800400a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004004:	4b25      	ldr	r3, [pc, #148]	@ (800409c <HAL_RCC_GetSysClockFreq+0x110>)
 8004006:	61bb      	str	r3, [r7, #24]
 8004008:	e004      	b.n	8004014 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	2b08      	cmp	r3, #8
 800400e:	d101      	bne.n	8004014 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004010:	4b23      	ldr	r3, [pc, #140]	@ (80040a0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004012:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	2b0c      	cmp	r3, #12
 8004018:	d134      	bne.n	8004084 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800401a:	4b1e      	ldr	r3, [pc, #120]	@ (8004094 <HAL_RCC_GetSysClockFreq+0x108>)
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	f003 0303 	and.w	r3, r3, #3
 8004022:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	2b02      	cmp	r3, #2
 8004028:	d003      	beq.n	8004032 <HAL_RCC_GetSysClockFreq+0xa6>
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	2b03      	cmp	r3, #3
 800402e:	d003      	beq.n	8004038 <HAL_RCC_GetSysClockFreq+0xac>
 8004030:	e005      	b.n	800403e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004032:	4b1a      	ldr	r3, [pc, #104]	@ (800409c <HAL_RCC_GetSysClockFreq+0x110>)
 8004034:	617b      	str	r3, [r7, #20]
      break;
 8004036:	e005      	b.n	8004044 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004038:	4b19      	ldr	r3, [pc, #100]	@ (80040a0 <HAL_RCC_GetSysClockFreq+0x114>)
 800403a:	617b      	str	r3, [r7, #20]
      break;
 800403c:	e002      	b.n	8004044 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	617b      	str	r3, [r7, #20]
      break;
 8004042:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004044:	4b13      	ldr	r3, [pc, #76]	@ (8004094 <HAL_RCC_GetSysClockFreq+0x108>)
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	091b      	lsrs	r3, r3, #4
 800404a:	f003 0307 	and.w	r3, r3, #7
 800404e:	3301      	adds	r3, #1
 8004050:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004052:	4b10      	ldr	r3, [pc, #64]	@ (8004094 <HAL_RCC_GetSysClockFreq+0x108>)
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	0a1b      	lsrs	r3, r3, #8
 8004058:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800405c:	697a      	ldr	r2, [r7, #20]
 800405e:	fb03 f202 	mul.w	r2, r3, r2
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	fbb2 f3f3 	udiv	r3, r2, r3
 8004068:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800406a:	4b0a      	ldr	r3, [pc, #40]	@ (8004094 <HAL_RCC_GetSysClockFreq+0x108>)
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	0e5b      	lsrs	r3, r3, #25
 8004070:	f003 0303 	and.w	r3, r3, #3
 8004074:	3301      	adds	r3, #1
 8004076:	005b      	lsls	r3, r3, #1
 8004078:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004082:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004084:	69bb      	ldr	r3, [r7, #24]
}
 8004086:	4618      	mov	r0, r3
 8004088:	3724      	adds	r7, #36	@ 0x24
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	40021000 	.word	0x40021000
 8004098:	08009880 	.word	0x08009880
 800409c:	00f42400 	.word	0x00f42400
 80040a0:	01e84800 	.word	0x01e84800

080040a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040a4:	b480      	push	{r7}
 80040a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040a8:	4b03      	ldr	r3, [pc, #12]	@ (80040b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80040aa:	681b      	ldr	r3, [r3, #0]
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	20000160 	.word	0x20000160

080040bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80040c0:	f7ff fff0 	bl	80040a4 <HAL_RCC_GetHCLKFreq>
 80040c4:	4602      	mov	r2, r0
 80040c6:	4b06      	ldr	r3, [pc, #24]	@ (80040e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	0a1b      	lsrs	r3, r3, #8
 80040cc:	f003 0307 	and.w	r3, r3, #7
 80040d0:	4904      	ldr	r1, [pc, #16]	@ (80040e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80040d2:	5ccb      	ldrb	r3, [r1, r3]
 80040d4:	f003 031f 	and.w	r3, r3, #31
 80040d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040dc:	4618      	mov	r0, r3
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	40021000 	.word	0x40021000
 80040e4:	08009878 	.word	0x08009878

080040e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80040ec:	f7ff ffda 	bl	80040a4 <HAL_RCC_GetHCLKFreq>
 80040f0:	4602      	mov	r2, r0
 80040f2:	4b06      	ldr	r3, [pc, #24]	@ (800410c <HAL_RCC_GetPCLK2Freq+0x24>)
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	0adb      	lsrs	r3, r3, #11
 80040f8:	f003 0307 	and.w	r3, r3, #7
 80040fc:	4904      	ldr	r1, [pc, #16]	@ (8004110 <HAL_RCC_GetPCLK2Freq+0x28>)
 80040fe:	5ccb      	ldrb	r3, [r1, r3]
 8004100:	f003 031f 	and.w	r3, r3, #31
 8004104:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004108:	4618      	mov	r0, r3
 800410a:	bd80      	pop	{r7, pc}
 800410c:	40021000 	.word	0x40021000
 8004110:	08009878 	.word	0x08009878

08004114 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b086      	sub	sp, #24
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800411c:	2300      	movs	r3, #0
 800411e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004120:	4b2a      	ldr	r3, [pc, #168]	@ (80041cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004122:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004124:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d003      	beq.n	8004134 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800412c:	f7ff f9a0 	bl	8003470 <HAL_PWREx_GetVoltageRange>
 8004130:	6178      	str	r0, [r7, #20]
 8004132:	e014      	b.n	800415e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004134:	4b25      	ldr	r3, [pc, #148]	@ (80041cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004136:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004138:	4a24      	ldr	r2, [pc, #144]	@ (80041cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800413a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800413e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004140:	4b22      	ldr	r3, [pc, #136]	@ (80041cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004142:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004144:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004148:	60fb      	str	r3, [r7, #12]
 800414a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800414c:	f7ff f990 	bl	8003470 <HAL_PWREx_GetVoltageRange>
 8004150:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004152:	4b1e      	ldr	r3, [pc, #120]	@ (80041cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004154:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004156:	4a1d      	ldr	r2, [pc, #116]	@ (80041cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004158:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800415c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004164:	d10b      	bne.n	800417e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2b80      	cmp	r3, #128	@ 0x80
 800416a:	d919      	bls.n	80041a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2ba0      	cmp	r3, #160	@ 0xa0
 8004170:	d902      	bls.n	8004178 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004172:	2302      	movs	r3, #2
 8004174:	613b      	str	r3, [r7, #16]
 8004176:	e013      	b.n	80041a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004178:	2301      	movs	r3, #1
 800417a:	613b      	str	r3, [r7, #16]
 800417c:	e010      	b.n	80041a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2b80      	cmp	r3, #128	@ 0x80
 8004182:	d902      	bls.n	800418a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004184:	2303      	movs	r3, #3
 8004186:	613b      	str	r3, [r7, #16]
 8004188:	e00a      	b.n	80041a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2b80      	cmp	r3, #128	@ 0x80
 800418e:	d102      	bne.n	8004196 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004190:	2302      	movs	r3, #2
 8004192:	613b      	str	r3, [r7, #16]
 8004194:	e004      	b.n	80041a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2b70      	cmp	r3, #112	@ 0x70
 800419a:	d101      	bne.n	80041a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800419c:	2301      	movs	r3, #1
 800419e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80041a0:	4b0b      	ldr	r3, [pc, #44]	@ (80041d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f023 0207 	bic.w	r2, r3, #7
 80041a8:	4909      	ldr	r1, [pc, #36]	@ (80041d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80041b0:	4b07      	ldr	r3, [pc, #28]	@ (80041d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0307 	and.w	r3, r3, #7
 80041b8:	693a      	ldr	r2, [r7, #16]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d001      	beq.n	80041c2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e000      	b.n	80041c4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3718      	adds	r7, #24
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	40021000 	.word	0x40021000
 80041d0:	40022000 	.word	0x40022000

080041d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b086      	sub	sp, #24
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80041dc:	2300      	movs	r3, #0
 80041de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80041e0:	2300      	movs	r3, #0
 80041e2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d041      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80041f4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80041f8:	d02a      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80041fa:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80041fe:	d824      	bhi.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004200:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004204:	d008      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004206:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800420a:	d81e      	bhi.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800420c:	2b00      	cmp	r3, #0
 800420e:	d00a      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004210:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004214:	d010      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004216:	e018      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004218:	4b86      	ldr	r3, [pc, #536]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	4a85      	ldr	r2, [pc, #532]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800421e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004222:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004224:	e015      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	3304      	adds	r3, #4
 800422a:	2100      	movs	r1, #0
 800422c:	4618      	mov	r0, r3
 800422e:	f000 facd 	bl	80047cc <RCCEx_PLLSAI1_Config>
 8004232:	4603      	mov	r3, r0
 8004234:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004236:	e00c      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	3320      	adds	r3, #32
 800423c:	2100      	movs	r1, #0
 800423e:	4618      	mov	r0, r3
 8004240:	f000 fbb6 	bl	80049b0 <RCCEx_PLLSAI2_Config>
 8004244:	4603      	mov	r3, r0
 8004246:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004248:	e003      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	74fb      	strb	r3, [r7, #19]
      break;
 800424e:	e000      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004250:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004252:	7cfb      	ldrb	r3, [r7, #19]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d10b      	bne.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004258:	4b76      	ldr	r3, [pc, #472]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800425a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800425e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004266:	4973      	ldr	r1, [pc, #460]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004268:	4313      	orrs	r3, r2
 800426a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800426e:	e001      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004270:	7cfb      	ldrb	r3, [r7, #19]
 8004272:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d041      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004284:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004288:	d02a      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800428a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800428e:	d824      	bhi.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004290:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004294:	d008      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004296:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800429a:	d81e      	bhi.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x106>
 800429c:	2b00      	cmp	r3, #0
 800429e:	d00a      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80042a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80042a4:	d010      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80042a6:	e018      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80042a8:	4b62      	ldr	r3, [pc, #392]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	4a61      	ldr	r2, [pc, #388]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042b2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80042b4:	e015      	b.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	3304      	adds	r3, #4
 80042ba:	2100      	movs	r1, #0
 80042bc:	4618      	mov	r0, r3
 80042be:	f000 fa85 	bl	80047cc <RCCEx_PLLSAI1_Config>
 80042c2:	4603      	mov	r3, r0
 80042c4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80042c6:	e00c      	b.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	3320      	adds	r3, #32
 80042cc:	2100      	movs	r1, #0
 80042ce:	4618      	mov	r0, r3
 80042d0:	f000 fb6e 	bl	80049b0 <RCCEx_PLLSAI2_Config>
 80042d4:	4603      	mov	r3, r0
 80042d6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80042d8:	e003      	b.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	74fb      	strb	r3, [r7, #19]
      break;
 80042de:	e000      	b.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80042e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042e2:	7cfb      	ldrb	r3, [r7, #19]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d10b      	bne.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80042e8:	4b52      	ldr	r3, [pc, #328]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042ee:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042f6:	494f      	ldr	r1, [pc, #316]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80042fe:	e001      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004300:	7cfb      	ldrb	r3, [r7, #19]
 8004302:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800430c:	2b00      	cmp	r3, #0
 800430e:	f000 80a0 	beq.w	8004452 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004312:	2300      	movs	r3, #0
 8004314:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004316:	4b47      	ldr	r3, [pc, #284]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004318:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800431a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d101      	bne.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004322:	2301      	movs	r3, #1
 8004324:	e000      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004326:	2300      	movs	r3, #0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00d      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800432c:	4b41      	ldr	r3, [pc, #260]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800432e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004330:	4a40      	ldr	r2, [pc, #256]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004332:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004336:	6593      	str	r3, [r2, #88]	@ 0x58
 8004338:	4b3e      	ldr	r3, [pc, #248]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800433a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800433c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004340:	60bb      	str	r3, [r7, #8]
 8004342:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004344:	2301      	movs	r3, #1
 8004346:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004348:	4b3b      	ldr	r3, [pc, #236]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a3a      	ldr	r2, [pc, #232]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800434e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004352:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004354:	f7fe fa76 	bl	8002844 <HAL_GetTick>
 8004358:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800435a:	e009      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800435c:	f7fe fa72 	bl	8002844 <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	2b02      	cmp	r3, #2
 8004368:	d902      	bls.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	74fb      	strb	r3, [r7, #19]
        break;
 800436e:	e005      	b.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004370:	4b31      	ldr	r3, [pc, #196]	@ (8004438 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004378:	2b00      	cmp	r3, #0
 800437a:	d0ef      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800437c:	7cfb      	ldrb	r3, [r7, #19]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d15c      	bne.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004382:	4b2c      	ldr	r3, [pc, #176]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004384:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004388:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800438c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d01f      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800439a:	697a      	ldr	r2, [r7, #20]
 800439c:	429a      	cmp	r2, r3
 800439e:	d019      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80043a0:	4b24      	ldr	r3, [pc, #144]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043aa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80043ac:	4b21      	ldr	r3, [pc, #132]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043b2:	4a20      	ldr	r2, [pc, #128]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80043bc:	4b1d      	ldr	r3, [pc, #116]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043c2:	4a1c      	ldr	r2, [pc, #112]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80043cc:	4a19      	ldr	r2, [pc, #100]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	f003 0301 	and.w	r3, r3, #1
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d016      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043de:	f7fe fa31 	bl	8002844 <HAL_GetTick>
 80043e2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043e4:	e00b      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043e6:	f7fe fa2d 	bl	8002844 <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d902      	bls.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	74fb      	strb	r3, [r7, #19]
            break;
 80043fc:	e006      	b.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004400:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004404:	f003 0302 	and.w	r3, r3, #2
 8004408:	2b00      	cmp	r3, #0
 800440a:	d0ec      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800440c:	7cfb      	ldrb	r3, [r7, #19]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d10c      	bne.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004412:	4b08      	ldr	r3, [pc, #32]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004414:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004418:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004422:	4904      	ldr	r1, [pc, #16]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004424:	4313      	orrs	r3, r2
 8004426:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800442a:	e009      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800442c:	7cfb      	ldrb	r3, [r7, #19]
 800442e:	74bb      	strb	r3, [r7, #18]
 8004430:	e006      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004432:	bf00      	nop
 8004434:	40021000 	.word	0x40021000
 8004438:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800443c:	7cfb      	ldrb	r3, [r7, #19]
 800443e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004440:	7c7b      	ldrb	r3, [r7, #17]
 8004442:	2b01      	cmp	r3, #1
 8004444:	d105      	bne.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004446:	4ba6      	ldr	r3, [pc, #664]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004448:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800444a:	4aa5      	ldr	r2, [pc, #660]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800444c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004450:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0301 	and.w	r3, r3, #1
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00a      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800445e:	4ba0      	ldr	r3, [pc, #640]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004460:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004464:	f023 0203 	bic.w	r2, r3, #3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800446c:	499c      	ldr	r1, [pc, #624]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800446e:	4313      	orrs	r3, r2
 8004470:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0302 	and.w	r3, r3, #2
 800447c:	2b00      	cmp	r3, #0
 800447e:	d00a      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004480:	4b97      	ldr	r3, [pc, #604]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004482:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004486:	f023 020c 	bic.w	r2, r3, #12
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800448e:	4994      	ldr	r1, [pc, #592]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004490:	4313      	orrs	r3, r2
 8004492:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0304 	and.w	r3, r3, #4
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00a      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80044a2:	4b8f      	ldr	r3, [pc, #572]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80044a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044a8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b0:	498b      	ldr	r1, [pc, #556]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0308 	and.w	r3, r3, #8
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d00a      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80044c4:	4b86      	ldr	r3, [pc, #536]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80044c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ca:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044d2:	4983      	ldr	r1, [pc, #524]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80044d4:	4313      	orrs	r3, r2
 80044d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0310 	and.w	r3, r3, #16
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00a      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80044e6:	4b7e      	ldr	r3, [pc, #504]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80044e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044f4:	497a      	ldr	r1, [pc, #488]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0320 	and.w	r3, r3, #32
 8004504:	2b00      	cmp	r3, #0
 8004506:	d00a      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004508:	4b75      	ldr	r3, [pc, #468]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800450a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800450e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004516:	4972      	ldr	r1, [pc, #456]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004518:	4313      	orrs	r3, r2
 800451a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00a      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800452a:	4b6d      	ldr	r3, [pc, #436]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800452c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004530:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004538:	4969      	ldr	r1, [pc, #420]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800453a:	4313      	orrs	r3, r2
 800453c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004548:	2b00      	cmp	r3, #0
 800454a:	d00a      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800454c:	4b64      	ldr	r3, [pc, #400]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800454e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004552:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800455a:	4961      	ldr	r1, [pc, #388]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800455c:	4313      	orrs	r3, r2
 800455e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00a      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800456e:	4b5c      	ldr	r3, [pc, #368]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004570:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004574:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800457c:	4958      	ldr	r1, [pc, #352]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800457e:	4313      	orrs	r3, r2
 8004580:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00a      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004590:	4b53      	ldr	r3, [pc, #332]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004592:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004596:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800459e:	4950      	ldr	r1, [pc, #320]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00a      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80045b2:	4b4b      	ldr	r3, [pc, #300]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80045b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045b8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045c0:	4947      	ldr	r1, [pc, #284]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00a      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80045d4:	4b42      	ldr	r3, [pc, #264]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80045d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80045da:	f023 0203 	bic.w	r2, r3, #3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045e2:	493f      	ldr	r1, [pc, #252]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d028      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045f6:	4b3a      	ldr	r3, [pc, #232]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80045f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045fc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004604:	4936      	ldr	r1, [pc, #216]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004606:	4313      	orrs	r3, r2
 8004608:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004610:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004614:	d106      	bne.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004616:	4b32      	ldr	r3, [pc, #200]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	4a31      	ldr	r2, [pc, #196]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800461c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004620:	60d3      	str	r3, [r2, #12]
 8004622:	e011      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004628:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800462c:	d10c      	bne.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	3304      	adds	r3, #4
 8004632:	2101      	movs	r1, #1
 8004634:	4618      	mov	r0, r3
 8004636:	f000 f8c9 	bl	80047cc <RCCEx_PLLSAI1_Config>
 800463a:	4603      	mov	r3, r0
 800463c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800463e:	7cfb      	ldrb	r3, [r7, #19]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d001      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8004644:	7cfb      	ldrb	r3, [r7, #19]
 8004646:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d028      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004654:	4b22      	ldr	r3, [pc, #136]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004656:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800465a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004662:	491f      	ldr	r1, [pc, #124]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004664:	4313      	orrs	r3, r2
 8004666:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800466e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004672:	d106      	bne.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004674:	4b1a      	ldr	r3, [pc, #104]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	4a19      	ldr	r2, [pc, #100]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800467a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800467e:	60d3      	str	r3, [r2, #12]
 8004680:	e011      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004686:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800468a:	d10c      	bne.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	3304      	adds	r3, #4
 8004690:	2101      	movs	r1, #1
 8004692:	4618      	mov	r0, r3
 8004694:	f000 f89a 	bl	80047cc <RCCEx_PLLSAI1_Config>
 8004698:	4603      	mov	r3, r0
 800469a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800469c:	7cfb      	ldrb	r3, [r7, #19]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d001      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80046a2:	7cfb      	ldrb	r3, [r7, #19]
 80046a4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d02a      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046b2:	4b0b      	ldr	r3, [pc, #44]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80046b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046b8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80046c0:	4907      	ldr	r1, [pc, #28]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80046cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046d0:	d108      	bne.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046d2:	4b03      	ldr	r3, [pc, #12]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	4a02      	ldr	r2, [pc, #8]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80046d8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80046dc:	60d3      	str	r3, [r2, #12]
 80046de:	e013      	b.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x534>
 80046e0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80046e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80046ec:	d10c      	bne.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	3304      	adds	r3, #4
 80046f2:	2101      	movs	r1, #1
 80046f4:	4618      	mov	r0, r3
 80046f6:	f000 f869 	bl	80047cc <RCCEx_PLLSAI1_Config>
 80046fa:	4603      	mov	r3, r0
 80046fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046fe:	7cfb      	ldrb	r3, [r7, #19]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d001      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8004704:	7cfb      	ldrb	r3, [r7, #19]
 8004706:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d02f      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004714:	4b2c      	ldr	r3, [pc, #176]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004716:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800471a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004722:	4929      	ldr	r1, [pc, #164]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004724:	4313      	orrs	r3, r2
 8004726:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800472e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004732:	d10d      	bne.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	3304      	adds	r3, #4
 8004738:	2102      	movs	r1, #2
 800473a:	4618      	mov	r0, r3
 800473c:	f000 f846 	bl	80047cc <RCCEx_PLLSAI1_Config>
 8004740:	4603      	mov	r3, r0
 8004742:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004744:	7cfb      	ldrb	r3, [r7, #19]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d014      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800474a:	7cfb      	ldrb	r3, [r7, #19]
 800474c:	74bb      	strb	r3, [r7, #18]
 800474e:	e011      	b.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004754:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004758:	d10c      	bne.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	3320      	adds	r3, #32
 800475e:	2102      	movs	r1, #2
 8004760:	4618      	mov	r0, r3
 8004762:	f000 f925 	bl	80049b0 <RCCEx_PLLSAI2_Config>
 8004766:	4603      	mov	r3, r0
 8004768:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800476a:	7cfb      	ldrb	r3, [r7, #19]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d001      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8004770:	7cfb      	ldrb	r3, [r7, #19]
 8004772:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00b      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004780:	4b11      	ldr	r3, [pc, #68]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004782:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004786:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004790:	490d      	ldr	r1, [pc, #52]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004792:	4313      	orrs	r3, r2
 8004794:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d00b      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80047a4:	4b08      	ldr	r3, [pc, #32]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80047a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047aa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047b4:	4904      	ldr	r1, [pc, #16]	@ (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80047bc:	7cbb      	ldrb	r3, [r7, #18]
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3718      	adds	r7, #24
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	40021000 	.word	0x40021000

080047cc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047d6:	2300      	movs	r3, #0
 80047d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80047da:	4b74      	ldr	r3, [pc, #464]	@ (80049ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	f003 0303 	and.w	r3, r3, #3
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d018      	beq.n	8004818 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80047e6:	4b71      	ldr	r3, [pc, #452]	@ (80049ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	f003 0203 	and.w	r2, r3, #3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d10d      	bne.n	8004812 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
       ||
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d009      	beq.n	8004812 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80047fe:	4b6b      	ldr	r3, [pc, #428]	@ (80049ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	091b      	lsrs	r3, r3, #4
 8004804:	f003 0307 	and.w	r3, r3, #7
 8004808:	1c5a      	adds	r2, r3, #1
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
       ||
 800480e:	429a      	cmp	r2, r3
 8004810:	d047      	beq.n	80048a2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	73fb      	strb	r3, [r7, #15]
 8004816:	e044      	b.n	80048a2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2b03      	cmp	r3, #3
 800481e:	d018      	beq.n	8004852 <RCCEx_PLLSAI1_Config+0x86>
 8004820:	2b03      	cmp	r3, #3
 8004822:	d825      	bhi.n	8004870 <RCCEx_PLLSAI1_Config+0xa4>
 8004824:	2b01      	cmp	r3, #1
 8004826:	d002      	beq.n	800482e <RCCEx_PLLSAI1_Config+0x62>
 8004828:	2b02      	cmp	r3, #2
 800482a:	d009      	beq.n	8004840 <RCCEx_PLLSAI1_Config+0x74>
 800482c:	e020      	b.n	8004870 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800482e:	4b5f      	ldr	r3, [pc, #380]	@ (80049ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0302 	and.w	r3, r3, #2
 8004836:	2b00      	cmp	r3, #0
 8004838:	d11d      	bne.n	8004876 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800483e:	e01a      	b.n	8004876 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004840:	4b5a      	ldr	r3, [pc, #360]	@ (80049ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004848:	2b00      	cmp	r3, #0
 800484a:	d116      	bne.n	800487a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004850:	e013      	b.n	800487a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004852:	4b56      	ldr	r3, [pc, #344]	@ (80049ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d10f      	bne.n	800487e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800485e:	4b53      	ldr	r3, [pc, #332]	@ (80049ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d109      	bne.n	800487e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800486e:	e006      	b.n	800487e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	73fb      	strb	r3, [r7, #15]
      break;
 8004874:	e004      	b.n	8004880 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004876:	bf00      	nop
 8004878:	e002      	b.n	8004880 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800487a:	bf00      	nop
 800487c:	e000      	b.n	8004880 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800487e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004880:	7bfb      	ldrb	r3, [r7, #15]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d10d      	bne.n	80048a2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004886:	4b49      	ldr	r3, [pc, #292]	@ (80049ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6819      	ldr	r1, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	3b01      	subs	r3, #1
 8004898:	011b      	lsls	r3, r3, #4
 800489a:	430b      	orrs	r3, r1
 800489c:	4943      	ldr	r1, [pc, #268]	@ (80049ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80048a2:	7bfb      	ldrb	r3, [r7, #15]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d17c      	bne.n	80049a2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80048a8:	4b40      	ldr	r3, [pc, #256]	@ (80049ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a3f      	ldr	r2, [pc, #252]	@ (80049ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80048ae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80048b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048b4:	f7fd ffc6 	bl	8002844 <HAL_GetTick>
 80048b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048ba:	e009      	b.n	80048d0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048bc:	f7fd ffc2 	bl	8002844 <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d902      	bls.n	80048d0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	73fb      	strb	r3, [r7, #15]
        break;
 80048ce:	e005      	b.n	80048dc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048d0:	4b36      	ldr	r3, [pc, #216]	@ (80049ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d1ef      	bne.n	80048bc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80048dc:	7bfb      	ldrb	r3, [r7, #15]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d15f      	bne.n	80049a2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d110      	bne.n	800490a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048e8:	4b30      	ldr	r3, [pc, #192]	@ (80049ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80048f0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	6892      	ldr	r2, [r2, #8]
 80048f8:	0211      	lsls	r1, r2, #8
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	68d2      	ldr	r2, [r2, #12]
 80048fe:	06d2      	lsls	r2, r2, #27
 8004900:	430a      	orrs	r2, r1
 8004902:	492a      	ldr	r1, [pc, #168]	@ (80049ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004904:	4313      	orrs	r3, r2
 8004906:	610b      	str	r3, [r1, #16]
 8004908:	e027      	b.n	800495a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	2b01      	cmp	r3, #1
 800490e:	d112      	bne.n	8004936 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004910:	4b26      	ldr	r3, [pc, #152]	@ (80049ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004912:	691b      	ldr	r3, [r3, #16]
 8004914:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004918:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	6892      	ldr	r2, [r2, #8]
 8004920:	0211      	lsls	r1, r2, #8
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	6912      	ldr	r2, [r2, #16]
 8004926:	0852      	lsrs	r2, r2, #1
 8004928:	3a01      	subs	r2, #1
 800492a:	0552      	lsls	r2, r2, #21
 800492c:	430a      	orrs	r2, r1
 800492e:	491f      	ldr	r1, [pc, #124]	@ (80049ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004930:	4313      	orrs	r3, r2
 8004932:	610b      	str	r3, [r1, #16]
 8004934:	e011      	b.n	800495a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004936:	4b1d      	ldr	r3, [pc, #116]	@ (80049ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800493e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	6892      	ldr	r2, [r2, #8]
 8004946:	0211      	lsls	r1, r2, #8
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	6952      	ldr	r2, [r2, #20]
 800494c:	0852      	lsrs	r2, r2, #1
 800494e:	3a01      	subs	r2, #1
 8004950:	0652      	lsls	r2, r2, #25
 8004952:	430a      	orrs	r2, r1
 8004954:	4915      	ldr	r1, [pc, #84]	@ (80049ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004956:	4313      	orrs	r3, r2
 8004958:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800495a:	4b14      	ldr	r3, [pc, #80]	@ (80049ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a13      	ldr	r2, [pc, #76]	@ (80049ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004960:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004964:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004966:	f7fd ff6d 	bl	8002844 <HAL_GetTick>
 800496a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800496c:	e009      	b.n	8004982 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800496e:	f7fd ff69 	bl	8002844 <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	2b02      	cmp	r3, #2
 800497a:	d902      	bls.n	8004982 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	73fb      	strb	r3, [r7, #15]
          break;
 8004980:	e005      	b.n	800498e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004982:	4b0a      	ldr	r3, [pc, #40]	@ (80049ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d0ef      	beq.n	800496e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800498e:	7bfb      	ldrb	r3, [r7, #15]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d106      	bne.n	80049a2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004994:	4b05      	ldr	r3, [pc, #20]	@ (80049ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8004996:	691a      	ldr	r2, [r3, #16]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	699b      	ldr	r3, [r3, #24]
 800499c:	4903      	ldr	r1, [pc, #12]	@ (80049ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80049a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3710      	adds	r7, #16
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	40021000 	.word	0x40021000

080049b0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049ba:	2300      	movs	r3, #0
 80049bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80049be:	4b69      	ldr	r3, [pc, #420]	@ (8004b64 <RCCEx_PLLSAI2_Config+0x1b4>)
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	f003 0303 	and.w	r3, r3, #3
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d018      	beq.n	80049fc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80049ca:	4b66      	ldr	r3, [pc, #408]	@ (8004b64 <RCCEx_PLLSAI2_Config+0x1b4>)
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	f003 0203 	and.w	r2, r3, #3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d10d      	bne.n	80049f6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
       ||
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d009      	beq.n	80049f6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80049e2:	4b60      	ldr	r3, [pc, #384]	@ (8004b64 <RCCEx_PLLSAI2_Config+0x1b4>)
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	091b      	lsrs	r3, r3, #4
 80049e8:	f003 0307 	and.w	r3, r3, #7
 80049ec:	1c5a      	adds	r2, r3, #1
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
       ||
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d047      	beq.n	8004a86 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	73fb      	strb	r3, [r7, #15]
 80049fa:	e044      	b.n	8004a86 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2b03      	cmp	r3, #3
 8004a02:	d018      	beq.n	8004a36 <RCCEx_PLLSAI2_Config+0x86>
 8004a04:	2b03      	cmp	r3, #3
 8004a06:	d825      	bhi.n	8004a54 <RCCEx_PLLSAI2_Config+0xa4>
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d002      	beq.n	8004a12 <RCCEx_PLLSAI2_Config+0x62>
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d009      	beq.n	8004a24 <RCCEx_PLLSAI2_Config+0x74>
 8004a10:	e020      	b.n	8004a54 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a12:	4b54      	ldr	r3, [pc, #336]	@ (8004b64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0302 	and.w	r3, r3, #2
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d11d      	bne.n	8004a5a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a22:	e01a      	b.n	8004a5a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a24:	4b4f      	ldr	r3, [pc, #316]	@ (8004b64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d116      	bne.n	8004a5e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a34:	e013      	b.n	8004a5e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a36:	4b4b      	ldr	r3, [pc, #300]	@ (8004b64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d10f      	bne.n	8004a62 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a42:	4b48      	ldr	r3, [pc, #288]	@ (8004b64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d109      	bne.n	8004a62 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a52:	e006      	b.n	8004a62 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	73fb      	strb	r3, [r7, #15]
      break;
 8004a58:	e004      	b.n	8004a64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a5a:	bf00      	nop
 8004a5c:	e002      	b.n	8004a64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a5e:	bf00      	nop
 8004a60:	e000      	b.n	8004a64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a62:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a64:	7bfb      	ldrb	r3, [r7, #15]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d10d      	bne.n	8004a86 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004a6a:	4b3e      	ldr	r3, [pc, #248]	@ (8004b64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6819      	ldr	r1, [r3, #0]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	011b      	lsls	r3, r3, #4
 8004a7e:	430b      	orrs	r3, r1
 8004a80:	4938      	ldr	r1, [pc, #224]	@ (8004b64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004a82:	4313      	orrs	r3, r2
 8004a84:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004a86:	7bfb      	ldrb	r3, [r7, #15]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d166      	bne.n	8004b5a <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004a8c:	4b35      	ldr	r3, [pc, #212]	@ (8004b64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a34      	ldr	r2, [pc, #208]	@ (8004b64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004a92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a98:	f7fd fed4 	bl	8002844 <HAL_GetTick>
 8004a9c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a9e:	e009      	b.n	8004ab4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004aa0:	f7fd fed0 	bl	8002844 <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d902      	bls.n	8004ab4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	73fb      	strb	r3, [r7, #15]
        break;
 8004ab2:	e005      	b.n	8004ac0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004ab4:	4b2b      	ldr	r3, [pc, #172]	@ (8004b64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1ef      	bne.n	8004aa0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004ac0:	7bfb      	ldrb	r3, [r7, #15]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d149      	bne.n	8004b5a <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d110      	bne.n	8004aee <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004acc:	4b25      	ldr	r3, [pc, #148]	@ (8004b64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004ace:	695b      	ldr	r3, [r3, #20]
 8004ad0:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004ad4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	6892      	ldr	r2, [r2, #8]
 8004adc:	0211      	lsls	r1, r2, #8
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	68d2      	ldr	r2, [r2, #12]
 8004ae2:	06d2      	lsls	r2, r2, #27
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	491f      	ldr	r1, [pc, #124]	@ (8004b64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	614b      	str	r3, [r1, #20]
 8004aec:	e011      	b.n	8004b12 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004aee:	4b1d      	ldr	r3, [pc, #116]	@ (8004b64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004af0:	695b      	ldr	r3, [r3, #20]
 8004af2:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004af6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	6892      	ldr	r2, [r2, #8]
 8004afe:	0211      	lsls	r1, r2, #8
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	6912      	ldr	r2, [r2, #16]
 8004b04:	0852      	lsrs	r2, r2, #1
 8004b06:	3a01      	subs	r2, #1
 8004b08:	0652      	lsls	r2, r2, #25
 8004b0a:	430a      	orrs	r2, r1
 8004b0c:	4915      	ldr	r1, [pc, #84]	@ (8004b64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004b12:	4b14      	ldr	r3, [pc, #80]	@ (8004b64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a13      	ldr	r2, [pc, #76]	@ (8004b64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004b18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b1c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b1e:	f7fd fe91 	bl	8002844 <HAL_GetTick>
 8004b22:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b24:	e009      	b.n	8004b3a <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b26:	f7fd fe8d 	bl	8002844 <HAL_GetTick>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d902      	bls.n	8004b3a <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	73fb      	strb	r3, [r7, #15]
          break;
 8004b38:	e005      	b.n	8004b46 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8004b64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d0ef      	beq.n	8004b26 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8004b46:	7bfb      	ldrb	r3, [r7, #15]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d106      	bne.n	8004b5a <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004b4c:	4b05      	ldr	r3, [pc, #20]	@ (8004b64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004b4e:	695a      	ldr	r2, [r3, #20]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	695b      	ldr	r3, [r3, #20]
 8004b54:	4903      	ldr	r1, [pc, #12]	@ (8004b64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3710      	adds	r7, #16
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	40021000 	.word	0x40021000

08004b68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d101      	bne.n	8004b7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e095      	b.n	8004ca6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d108      	bne.n	8004b94 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b8a:	d009      	beq.n	8004ba0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	61da      	str	r2, [r3, #28]
 8004b92:	e005      	b.n	8004ba0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d106      	bne.n	8004bc0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f7fc fe7e 	bl	80018bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2202      	movs	r2, #2
 8004bc4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004bd6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004be0:	d902      	bls.n	8004be8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004be2:	2300      	movs	r3, #0
 8004be4:	60fb      	str	r3, [r7, #12]
 8004be6:	e002      	b.n	8004bee <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004be8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004bec:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004bf6:	d007      	beq.n	8004c08 <HAL_SPI_Init+0xa0>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004c00:	d002      	beq.n	8004c08 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004c18:	431a      	orrs	r2, r3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	f003 0302 	and.w	r3, r3, #2
 8004c22:	431a      	orrs	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	695b      	ldr	r3, [r3, #20]
 8004c28:	f003 0301 	and.w	r3, r3, #1
 8004c2c:	431a      	orrs	r2, r3
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c36:	431a      	orrs	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	69db      	ldr	r3, [r3, #28]
 8004c3c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c40:	431a      	orrs	r2, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a1b      	ldr	r3, [r3, #32]
 8004c46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c4a:	ea42 0103 	orr.w	r1, r2, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c52:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	0c1b      	lsrs	r3, r3, #16
 8004c64:	f003 0204 	and.w	r2, r3, #4
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c6c:	f003 0310 	and.w	r3, r3, #16
 8004c70:	431a      	orrs	r2, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c76:	f003 0308 	and.w	r3, r3, #8
 8004c7a:	431a      	orrs	r2, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004c84:	ea42 0103 	orr.w	r1, r2, r3
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	430a      	orrs	r2, r1
 8004c94:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3710      	adds	r7, #16
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}

08004cae <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cae:	b580      	push	{r7, lr}
 8004cb0:	b082      	sub	sp, #8
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d101      	bne.n	8004cc0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e040      	b.n	8004d42 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d106      	bne.n	8004cd6 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f7fd faf9 	bl	80022c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2224      	movs	r2, #36	@ 0x24
 8004cda:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f022 0201 	bic.w	r2, r2, #1
 8004cea:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d002      	beq.n	8004cfa <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 feb5 	bl	8005a64 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 fbfa 	bl	80054f4 <UART_SetConfig>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d101      	bne.n	8004d0a <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e01b      	b.n	8004d42 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	685a      	ldr	r2, [r3, #4]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d18:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	689a      	ldr	r2, [r3, #8]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d28:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f042 0201 	orr.w	r2, r2, #1
 8004d38:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 ff34 	bl	8005ba8 <UART_CheckIdleState>
 8004d40:	4603      	mov	r3, r0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3708      	adds	r7, #8
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b08a      	sub	sp, #40	@ 0x28
 8004d4e:	af02      	add	r7, sp, #8
 8004d50:	60f8      	str	r0, [r7, #12]
 8004d52:	60b9      	str	r1, [r7, #8]
 8004d54:	603b      	str	r3, [r7, #0]
 8004d56:	4613      	mov	r3, r2
 8004d58:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d5e:	2b20      	cmp	r3, #32
 8004d60:	d177      	bne.n	8004e52 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d002      	beq.n	8004d6e <HAL_UART_Transmit+0x24>
 8004d68:	88fb      	ldrh	r3, [r7, #6]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d101      	bne.n	8004d72 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e070      	b.n	8004e54 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2221      	movs	r2, #33	@ 0x21
 8004d7e:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d80:	f7fd fd60 	bl	8002844 <HAL_GetTick>
 8004d84:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	88fa      	ldrh	r2, [r7, #6]
 8004d8a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	88fa      	ldrh	r2, [r7, #6]
 8004d92:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d9e:	d108      	bne.n	8004db2 <HAL_UART_Transmit+0x68>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d104      	bne.n	8004db2 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004da8:	2300      	movs	r3, #0
 8004daa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	61bb      	str	r3, [r7, #24]
 8004db0:	e003      	b.n	8004dba <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004db6:	2300      	movs	r3, #0
 8004db8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004dba:	e02f      	b.n	8004e1c <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	9300      	str	r3, [sp, #0]
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	2180      	movs	r1, #128	@ 0x80
 8004dc6:	68f8      	ldr	r0, [r7, #12]
 8004dc8:	f000 ff96 	bl	8005cf8 <UART_WaitOnFlagUntilTimeout>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d004      	beq.n	8004ddc <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2220      	movs	r2, #32
 8004dd6:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e03b      	b.n	8004e54 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d10b      	bne.n	8004dfa <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	881a      	ldrh	r2, [r3, #0]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004dee:	b292      	uxth	r2, r2
 8004df0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	3302      	adds	r3, #2
 8004df6:	61bb      	str	r3, [r7, #24]
 8004df8:	e007      	b.n	8004e0a <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	781a      	ldrb	r2, [r3, #0]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	3301      	adds	r3, #1
 8004e08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	3b01      	subs	r3, #1
 8004e14:	b29a      	uxth	r2, r3
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d1c9      	bne.n	8004dbc <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	9300      	str	r3, [sp, #0]
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	2140      	movs	r1, #64	@ 0x40
 8004e32:	68f8      	ldr	r0, [r7, #12]
 8004e34:	f000 ff60 	bl	8005cf8 <UART_WaitOnFlagUntilTimeout>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d004      	beq.n	8004e48 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2220      	movs	r2, #32
 8004e42:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e005      	b.n	8004e54 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2220      	movs	r2, #32
 8004e4c:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	e000      	b.n	8004e54 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004e52:	2302      	movs	r3, #2
  }
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3720      	adds	r7, #32
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b08a      	sub	sp, #40	@ 0x28
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	4613      	mov	r3, r2
 8004e68:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e70:	2b20      	cmp	r3, #32
 8004e72:	d137      	bne.n	8004ee4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d002      	beq.n	8004e80 <HAL_UART_Receive_IT+0x24>
 8004e7a:	88fb      	ldrh	r3, [r7, #6]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d101      	bne.n	8004e84 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e030      	b.n	8004ee6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2200      	movs	r2, #0
 8004e88:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a18      	ldr	r2, [pc, #96]	@ (8004ef0 <HAL_UART_Receive_IT+0x94>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d01f      	beq.n	8004ed4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d018      	beq.n	8004ed4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	e853 3f00 	ldrex	r3, [r3]
 8004eae:	613b      	str	r3, [r7, #16]
   return(result);
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004eb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec0:	623b      	str	r3, [r7, #32]
 8004ec2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec4:	69f9      	ldr	r1, [r7, #28]
 8004ec6:	6a3a      	ldr	r2, [r7, #32]
 8004ec8:	e841 2300 	strex	r3, r2, [r1]
 8004ecc:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d1e6      	bne.n	8004ea2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004ed4:	88fb      	ldrh	r3, [r7, #6]
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	68b9      	ldr	r1, [r7, #8]
 8004eda:	68f8      	ldr	r0, [r7, #12]
 8004edc:	f000 ff74 	bl	8005dc8 <UART_Start_Receive_IT>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	e000      	b.n	8004ee6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004ee4:	2302      	movs	r3, #2
  }
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3728      	adds	r7, #40	@ 0x28
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	40008000 	.word	0x40008000

08004ef4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b0ba      	sub	sp, #232	@ 0xe8
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	69db      	ldr	r3, [r3, #28]
 8004f02:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004f1a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004f1e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004f22:	4013      	ands	r3, r2
 8004f24:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004f28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d115      	bne.n	8004f5c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004f30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f34:	f003 0320 	and.w	r3, r3, #32
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d00f      	beq.n	8004f5c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004f3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f40:	f003 0320 	and.w	r3, r3, #32
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d009      	beq.n	8004f5c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	f000 82ae 	beq.w	80054ae <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	4798      	blx	r3
      }
      return;
 8004f5a:	e2a8      	b.n	80054ae <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004f5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f000 8117 	beq.w	8005194 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004f66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f6a:	f003 0301 	and.w	r3, r3, #1
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d106      	bne.n	8004f80 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004f72:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004f76:	4b85      	ldr	r3, [pc, #532]	@ (800518c <HAL_UART_IRQHandler+0x298>)
 8004f78:	4013      	ands	r3, r2
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	f000 810a 	beq.w	8005194 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004f80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f84:	f003 0301 	and.w	r3, r3, #1
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d011      	beq.n	8004fb0 <HAL_UART_IRQHandler+0xbc>
 8004f8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00b      	beq.n	8004fb0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fa6:	f043 0201 	orr.w	r2, r3, #1
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004fb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fb4:	f003 0302 	and.w	r3, r3, #2
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d011      	beq.n	8004fe0 <HAL_UART_IRQHandler+0xec>
 8004fbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004fc0:	f003 0301 	and.w	r3, r3, #1
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d00b      	beq.n	8004fe0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2202      	movs	r2, #2
 8004fce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fd6:	f043 0204 	orr.w	r2, r3, #4
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004fe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fe4:	f003 0304 	and.w	r3, r3, #4
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d011      	beq.n	8005010 <HAL_UART_IRQHandler+0x11c>
 8004fec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ff0:	f003 0301 	and.w	r3, r3, #1
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d00b      	beq.n	8005010 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2204      	movs	r2, #4
 8004ffe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005006:	f043 0202 	orr.w	r2, r3, #2
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005010:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005014:	f003 0308 	and.w	r3, r3, #8
 8005018:	2b00      	cmp	r3, #0
 800501a:	d017      	beq.n	800504c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800501c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005020:	f003 0320 	and.w	r3, r3, #32
 8005024:	2b00      	cmp	r3, #0
 8005026:	d105      	bne.n	8005034 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005028:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800502c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005030:	2b00      	cmp	r3, #0
 8005032:	d00b      	beq.n	800504c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2208      	movs	r2, #8
 800503a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005042:	f043 0208 	orr.w	r2, r3, #8
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800504c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005050:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005054:	2b00      	cmp	r3, #0
 8005056:	d012      	beq.n	800507e <HAL_UART_IRQHandler+0x18a>
 8005058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800505c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005060:	2b00      	cmp	r3, #0
 8005062:	d00c      	beq.n	800507e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800506c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005074:	f043 0220 	orr.w	r2, r3, #32
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005084:	2b00      	cmp	r3, #0
 8005086:	f000 8214 	beq.w	80054b2 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800508a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800508e:	f003 0320 	and.w	r3, r3, #32
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00d      	beq.n	80050b2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005096:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800509a:	f003 0320 	and.w	r3, r3, #32
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d007      	beq.n	80050b2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d003      	beq.n	80050b2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050b8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050c6:	2b40      	cmp	r3, #64	@ 0x40
 80050c8:	d005      	beq.n	80050d6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80050ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050ce:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d04f      	beq.n	8005176 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 ff3c 	bl	8005f54 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050e6:	2b40      	cmp	r3, #64	@ 0x40
 80050e8:	d141      	bne.n	800516e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	3308      	adds	r3, #8
 80050f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80050f8:	e853 3f00 	ldrex	r3, [r3]
 80050fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005100:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005104:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005108:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	3308      	adds	r3, #8
 8005112:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005116:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800511a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800511e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005122:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005126:	e841 2300 	strex	r3, r2, [r1]
 800512a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800512e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d1d9      	bne.n	80050ea <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800513a:	2b00      	cmp	r3, #0
 800513c:	d013      	beq.n	8005166 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005142:	4a13      	ldr	r2, [pc, #76]	@ (8005190 <HAL_UART_IRQHandler+0x29c>)
 8005144:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800514a:	4618      	mov	r0, r3
 800514c:	f7fd fe42 	bl	8002dd4 <HAL_DMA_Abort_IT>
 8005150:	4603      	mov	r3, r0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d017      	beq.n	8005186 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800515a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005160:	4610      	mov	r0, r2
 8005162:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005164:	e00f      	b.n	8005186 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f7fd f9f0 	bl	800254c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800516c:	e00b      	b.n	8005186 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f7fd f9ec 	bl	800254c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005174:	e007      	b.n	8005186 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f7fd f9e8 	bl	800254c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005184:	e195      	b.n	80054b2 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005186:	bf00      	nop
    return;
 8005188:	e193      	b.n	80054b2 <HAL_UART_IRQHandler+0x5be>
 800518a:	bf00      	nop
 800518c:	04000120 	.word	0x04000120
 8005190:	0800601d 	.word	0x0800601d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005198:	2b01      	cmp	r3, #1
 800519a:	f040 814e 	bne.w	800543a <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800519e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051a2:	f003 0310 	and.w	r3, r3, #16
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	f000 8147 	beq.w	800543a <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80051ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051b0:	f003 0310 	and.w	r3, r3, #16
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f000 8140 	beq.w	800543a <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2210      	movs	r2, #16
 80051c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051cc:	2b40      	cmp	r3, #64	@ 0x40
 80051ce:	f040 80b8 	bne.w	8005342 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80051de:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	f000 8167 	beq.w	80054b6 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80051ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80051f2:	429a      	cmp	r2, r3
 80051f4:	f080 815f 	bcs.w	80054b6 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80051fe:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0320 	and.w	r3, r3, #32
 800520e:	2b00      	cmp	r3, #0
 8005210:	f040 8086 	bne.w	8005320 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800521c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005220:	e853 3f00 	ldrex	r3, [r3]
 8005224:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005228:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800522c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005230:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	461a      	mov	r2, r3
 800523a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800523e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005242:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005246:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800524a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800524e:	e841 2300 	strex	r3, r2, [r1]
 8005252:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005256:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800525a:	2b00      	cmp	r3, #0
 800525c:	d1da      	bne.n	8005214 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	3308      	adds	r3, #8
 8005264:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005266:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005268:	e853 3f00 	ldrex	r3, [r3]
 800526c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800526e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005270:	f023 0301 	bic.w	r3, r3, #1
 8005274:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	3308      	adds	r3, #8
 800527e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005282:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005286:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005288:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800528a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800528e:	e841 2300 	strex	r3, r2, [r1]
 8005292:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005294:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005296:	2b00      	cmp	r3, #0
 8005298:	d1e1      	bne.n	800525e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	3308      	adds	r3, #8
 80052a0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80052a4:	e853 3f00 	ldrex	r3, [r3]
 80052a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80052aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80052ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	3308      	adds	r3, #8
 80052ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80052be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80052c0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80052c4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80052c6:	e841 2300 	strex	r3, r2, [r1]
 80052ca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80052cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d1e3      	bne.n	800529a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2220      	movs	r2, #32
 80052d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052e8:	e853 3f00 	ldrex	r3, [r3]
 80052ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80052ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052f0:	f023 0310 	bic.w	r3, r3, #16
 80052f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	461a      	mov	r2, r3
 80052fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005302:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005304:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005306:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005308:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800530a:	e841 2300 	strex	r3, r2, [r1]
 800530e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005310:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1e4      	bne.n	80052e0 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800531a:	4618      	mov	r0, r3
 800531c:	f7fd fd1c 	bl	8002d58 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2202      	movs	r2, #2
 8005324:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005332:	b29b      	uxth	r3, r3
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	b29b      	uxth	r3, r3
 8005338:	4619      	mov	r1, r3
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 f8ce 	bl	80054dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005340:	e0b9      	b.n	80054b6 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800534e:	b29b      	uxth	r3, r3
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800535c:	b29b      	uxth	r3, r3
 800535e:	2b00      	cmp	r3, #0
 8005360:	f000 80ab 	beq.w	80054ba <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8005364:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005368:	2b00      	cmp	r3, #0
 800536a:	f000 80a6 	beq.w	80054ba <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005376:	e853 3f00 	ldrex	r3, [r3]
 800537a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800537c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800537e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005382:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	461a      	mov	r2, r3
 800538c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005390:	647b      	str	r3, [r7, #68]	@ 0x44
 8005392:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005394:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005396:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005398:	e841 2300 	strex	r3, r2, [r1]
 800539c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800539e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d1e4      	bne.n	800536e <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	3308      	adds	r3, #8
 80053aa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ae:	e853 3f00 	ldrex	r3, [r3]
 80053b2:	623b      	str	r3, [r7, #32]
   return(result);
 80053b4:	6a3b      	ldr	r3, [r7, #32]
 80053b6:	f023 0301 	bic.w	r3, r3, #1
 80053ba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	3308      	adds	r3, #8
 80053c4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80053c8:	633a      	str	r2, [r7, #48]	@ 0x30
 80053ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80053ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053d0:	e841 2300 	strex	r3, r2, [r1]
 80053d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80053d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d1e3      	bne.n	80053a4 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2220      	movs	r2, #32
 80053e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	e853 3f00 	ldrex	r3, [r3]
 80053fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f023 0310 	bic.w	r3, r3, #16
 8005404:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	461a      	mov	r2, r3
 800540e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005412:	61fb      	str	r3, [r7, #28]
 8005414:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005416:	69b9      	ldr	r1, [r7, #24]
 8005418:	69fa      	ldr	r2, [r7, #28]
 800541a:	e841 2300 	strex	r3, r2, [r1]
 800541e:	617b      	str	r3, [r7, #20]
   return(result);
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d1e4      	bne.n	80053f0 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2202      	movs	r2, #2
 800542a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800542c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005430:	4619      	mov	r1, r3
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 f852 	bl	80054dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005438:	e03f      	b.n	80054ba <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800543a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800543e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00e      	beq.n	8005464 <HAL_UART_IRQHandler+0x570>
 8005446:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800544a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d008      	beq.n	8005464 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800545a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 ffd9 	bl	8006414 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005462:	e02d      	b.n	80054c0 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005468:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800546c:	2b00      	cmp	r3, #0
 800546e:	d00e      	beq.n	800548e <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005474:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005478:	2b00      	cmp	r3, #0
 800547a:	d008      	beq.n	800548e <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005480:	2b00      	cmp	r3, #0
 8005482:	d01c      	beq.n	80054be <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	4798      	blx	r3
    }
    return;
 800548c:	e017      	b.n	80054be <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800548e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005492:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005496:	2b00      	cmp	r3, #0
 8005498:	d012      	beq.n	80054c0 <HAL_UART_IRQHandler+0x5cc>
 800549a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800549e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00c      	beq.n	80054c0 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 fdce 	bl	8006048 <UART_EndTransmit_IT>
    return;
 80054ac:	e008      	b.n	80054c0 <HAL_UART_IRQHandler+0x5cc>
      return;
 80054ae:	bf00      	nop
 80054b0:	e006      	b.n	80054c0 <HAL_UART_IRQHandler+0x5cc>
    return;
 80054b2:	bf00      	nop
 80054b4:	e004      	b.n	80054c0 <HAL_UART_IRQHandler+0x5cc>
      return;
 80054b6:	bf00      	nop
 80054b8:	e002      	b.n	80054c0 <HAL_UART_IRQHandler+0x5cc>
      return;
 80054ba:	bf00      	nop
 80054bc:	e000      	b.n	80054c0 <HAL_UART_IRQHandler+0x5cc>
    return;
 80054be:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80054c0:	37e8      	adds	r7, #232	@ 0xe8
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop

080054c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80054d0:	bf00      	nop
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	460b      	mov	r3, r1
 80054e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80054e8:	bf00      	nop
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054f8:	b08a      	sub	sp, #40	@ 0x28
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80054fe:	2300      	movs	r3, #0
 8005500:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	689a      	ldr	r2, [r3, #8]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	431a      	orrs	r2, r3
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	695b      	ldr	r3, [r3, #20]
 8005512:	431a      	orrs	r2, r3
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	69db      	ldr	r3, [r3, #28]
 8005518:	4313      	orrs	r3, r2
 800551a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	4ba4      	ldr	r3, [pc, #656]	@ (80057b4 <UART_SetConfig+0x2c0>)
 8005524:	4013      	ands	r3, r2
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	6812      	ldr	r2, [r2, #0]
 800552a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800552c:	430b      	orrs	r3, r1
 800552e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	68da      	ldr	r2, [r3, #12]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	430a      	orrs	r2, r1
 8005544:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a99      	ldr	r2, [pc, #612]	@ (80057b8 <UART_SetConfig+0x2c4>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d004      	beq.n	8005560 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6a1b      	ldr	r3, [r3, #32]
 800555a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800555c:	4313      	orrs	r3, r2
 800555e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005570:	430a      	orrs	r2, r1
 8005572:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a90      	ldr	r2, [pc, #576]	@ (80057bc <UART_SetConfig+0x2c8>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d126      	bne.n	80055cc <UART_SetConfig+0xd8>
 800557e:	4b90      	ldr	r3, [pc, #576]	@ (80057c0 <UART_SetConfig+0x2cc>)
 8005580:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005584:	f003 0303 	and.w	r3, r3, #3
 8005588:	2b03      	cmp	r3, #3
 800558a:	d81b      	bhi.n	80055c4 <UART_SetConfig+0xd0>
 800558c:	a201      	add	r2, pc, #4	@ (adr r2, 8005594 <UART_SetConfig+0xa0>)
 800558e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005592:	bf00      	nop
 8005594:	080055a5 	.word	0x080055a5
 8005598:	080055b5 	.word	0x080055b5
 800559c:	080055ad 	.word	0x080055ad
 80055a0:	080055bd 	.word	0x080055bd
 80055a4:	2301      	movs	r3, #1
 80055a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055aa:	e116      	b.n	80057da <UART_SetConfig+0x2e6>
 80055ac:	2302      	movs	r3, #2
 80055ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055b2:	e112      	b.n	80057da <UART_SetConfig+0x2e6>
 80055b4:	2304      	movs	r3, #4
 80055b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055ba:	e10e      	b.n	80057da <UART_SetConfig+0x2e6>
 80055bc:	2308      	movs	r3, #8
 80055be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055c2:	e10a      	b.n	80057da <UART_SetConfig+0x2e6>
 80055c4:	2310      	movs	r3, #16
 80055c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055ca:	e106      	b.n	80057da <UART_SetConfig+0x2e6>
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a7c      	ldr	r2, [pc, #496]	@ (80057c4 <UART_SetConfig+0x2d0>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d138      	bne.n	8005648 <UART_SetConfig+0x154>
 80055d6:	4b7a      	ldr	r3, [pc, #488]	@ (80057c0 <UART_SetConfig+0x2cc>)
 80055d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055dc:	f003 030c 	and.w	r3, r3, #12
 80055e0:	2b0c      	cmp	r3, #12
 80055e2:	d82d      	bhi.n	8005640 <UART_SetConfig+0x14c>
 80055e4:	a201      	add	r2, pc, #4	@ (adr r2, 80055ec <UART_SetConfig+0xf8>)
 80055e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ea:	bf00      	nop
 80055ec:	08005621 	.word	0x08005621
 80055f0:	08005641 	.word	0x08005641
 80055f4:	08005641 	.word	0x08005641
 80055f8:	08005641 	.word	0x08005641
 80055fc:	08005631 	.word	0x08005631
 8005600:	08005641 	.word	0x08005641
 8005604:	08005641 	.word	0x08005641
 8005608:	08005641 	.word	0x08005641
 800560c:	08005629 	.word	0x08005629
 8005610:	08005641 	.word	0x08005641
 8005614:	08005641 	.word	0x08005641
 8005618:	08005641 	.word	0x08005641
 800561c:	08005639 	.word	0x08005639
 8005620:	2300      	movs	r3, #0
 8005622:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005626:	e0d8      	b.n	80057da <UART_SetConfig+0x2e6>
 8005628:	2302      	movs	r3, #2
 800562a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800562e:	e0d4      	b.n	80057da <UART_SetConfig+0x2e6>
 8005630:	2304      	movs	r3, #4
 8005632:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005636:	e0d0      	b.n	80057da <UART_SetConfig+0x2e6>
 8005638:	2308      	movs	r3, #8
 800563a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800563e:	e0cc      	b.n	80057da <UART_SetConfig+0x2e6>
 8005640:	2310      	movs	r3, #16
 8005642:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005646:	e0c8      	b.n	80057da <UART_SetConfig+0x2e6>
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a5e      	ldr	r2, [pc, #376]	@ (80057c8 <UART_SetConfig+0x2d4>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d125      	bne.n	800569e <UART_SetConfig+0x1aa>
 8005652:	4b5b      	ldr	r3, [pc, #364]	@ (80057c0 <UART_SetConfig+0x2cc>)
 8005654:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005658:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800565c:	2b30      	cmp	r3, #48	@ 0x30
 800565e:	d016      	beq.n	800568e <UART_SetConfig+0x19a>
 8005660:	2b30      	cmp	r3, #48	@ 0x30
 8005662:	d818      	bhi.n	8005696 <UART_SetConfig+0x1a2>
 8005664:	2b20      	cmp	r3, #32
 8005666:	d00a      	beq.n	800567e <UART_SetConfig+0x18a>
 8005668:	2b20      	cmp	r3, #32
 800566a:	d814      	bhi.n	8005696 <UART_SetConfig+0x1a2>
 800566c:	2b00      	cmp	r3, #0
 800566e:	d002      	beq.n	8005676 <UART_SetConfig+0x182>
 8005670:	2b10      	cmp	r3, #16
 8005672:	d008      	beq.n	8005686 <UART_SetConfig+0x192>
 8005674:	e00f      	b.n	8005696 <UART_SetConfig+0x1a2>
 8005676:	2300      	movs	r3, #0
 8005678:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800567c:	e0ad      	b.n	80057da <UART_SetConfig+0x2e6>
 800567e:	2302      	movs	r3, #2
 8005680:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005684:	e0a9      	b.n	80057da <UART_SetConfig+0x2e6>
 8005686:	2304      	movs	r3, #4
 8005688:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800568c:	e0a5      	b.n	80057da <UART_SetConfig+0x2e6>
 800568e:	2308      	movs	r3, #8
 8005690:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005694:	e0a1      	b.n	80057da <UART_SetConfig+0x2e6>
 8005696:	2310      	movs	r3, #16
 8005698:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800569c:	e09d      	b.n	80057da <UART_SetConfig+0x2e6>
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a4a      	ldr	r2, [pc, #296]	@ (80057cc <UART_SetConfig+0x2d8>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d125      	bne.n	80056f4 <UART_SetConfig+0x200>
 80056a8:	4b45      	ldr	r3, [pc, #276]	@ (80057c0 <UART_SetConfig+0x2cc>)
 80056aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ae:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80056b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80056b4:	d016      	beq.n	80056e4 <UART_SetConfig+0x1f0>
 80056b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80056b8:	d818      	bhi.n	80056ec <UART_SetConfig+0x1f8>
 80056ba:	2b80      	cmp	r3, #128	@ 0x80
 80056bc:	d00a      	beq.n	80056d4 <UART_SetConfig+0x1e0>
 80056be:	2b80      	cmp	r3, #128	@ 0x80
 80056c0:	d814      	bhi.n	80056ec <UART_SetConfig+0x1f8>
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d002      	beq.n	80056cc <UART_SetConfig+0x1d8>
 80056c6:	2b40      	cmp	r3, #64	@ 0x40
 80056c8:	d008      	beq.n	80056dc <UART_SetConfig+0x1e8>
 80056ca:	e00f      	b.n	80056ec <UART_SetConfig+0x1f8>
 80056cc:	2300      	movs	r3, #0
 80056ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056d2:	e082      	b.n	80057da <UART_SetConfig+0x2e6>
 80056d4:	2302      	movs	r3, #2
 80056d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056da:	e07e      	b.n	80057da <UART_SetConfig+0x2e6>
 80056dc:	2304      	movs	r3, #4
 80056de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056e2:	e07a      	b.n	80057da <UART_SetConfig+0x2e6>
 80056e4:	2308      	movs	r3, #8
 80056e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056ea:	e076      	b.n	80057da <UART_SetConfig+0x2e6>
 80056ec:	2310      	movs	r3, #16
 80056ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056f2:	e072      	b.n	80057da <UART_SetConfig+0x2e6>
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a35      	ldr	r2, [pc, #212]	@ (80057d0 <UART_SetConfig+0x2dc>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d12a      	bne.n	8005754 <UART_SetConfig+0x260>
 80056fe:	4b30      	ldr	r3, [pc, #192]	@ (80057c0 <UART_SetConfig+0x2cc>)
 8005700:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005704:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005708:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800570c:	d01a      	beq.n	8005744 <UART_SetConfig+0x250>
 800570e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005712:	d81b      	bhi.n	800574c <UART_SetConfig+0x258>
 8005714:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005718:	d00c      	beq.n	8005734 <UART_SetConfig+0x240>
 800571a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800571e:	d815      	bhi.n	800574c <UART_SetConfig+0x258>
 8005720:	2b00      	cmp	r3, #0
 8005722:	d003      	beq.n	800572c <UART_SetConfig+0x238>
 8005724:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005728:	d008      	beq.n	800573c <UART_SetConfig+0x248>
 800572a:	e00f      	b.n	800574c <UART_SetConfig+0x258>
 800572c:	2300      	movs	r3, #0
 800572e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005732:	e052      	b.n	80057da <UART_SetConfig+0x2e6>
 8005734:	2302      	movs	r3, #2
 8005736:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800573a:	e04e      	b.n	80057da <UART_SetConfig+0x2e6>
 800573c:	2304      	movs	r3, #4
 800573e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005742:	e04a      	b.n	80057da <UART_SetConfig+0x2e6>
 8005744:	2308      	movs	r3, #8
 8005746:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800574a:	e046      	b.n	80057da <UART_SetConfig+0x2e6>
 800574c:	2310      	movs	r3, #16
 800574e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005752:	e042      	b.n	80057da <UART_SetConfig+0x2e6>
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a17      	ldr	r2, [pc, #92]	@ (80057b8 <UART_SetConfig+0x2c4>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d13a      	bne.n	80057d4 <UART_SetConfig+0x2e0>
 800575e:	4b18      	ldr	r3, [pc, #96]	@ (80057c0 <UART_SetConfig+0x2cc>)
 8005760:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005764:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005768:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800576c:	d01a      	beq.n	80057a4 <UART_SetConfig+0x2b0>
 800576e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005772:	d81b      	bhi.n	80057ac <UART_SetConfig+0x2b8>
 8005774:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005778:	d00c      	beq.n	8005794 <UART_SetConfig+0x2a0>
 800577a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800577e:	d815      	bhi.n	80057ac <UART_SetConfig+0x2b8>
 8005780:	2b00      	cmp	r3, #0
 8005782:	d003      	beq.n	800578c <UART_SetConfig+0x298>
 8005784:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005788:	d008      	beq.n	800579c <UART_SetConfig+0x2a8>
 800578a:	e00f      	b.n	80057ac <UART_SetConfig+0x2b8>
 800578c:	2300      	movs	r3, #0
 800578e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005792:	e022      	b.n	80057da <UART_SetConfig+0x2e6>
 8005794:	2302      	movs	r3, #2
 8005796:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800579a:	e01e      	b.n	80057da <UART_SetConfig+0x2e6>
 800579c:	2304      	movs	r3, #4
 800579e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057a2:	e01a      	b.n	80057da <UART_SetConfig+0x2e6>
 80057a4:	2308      	movs	r3, #8
 80057a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057aa:	e016      	b.n	80057da <UART_SetConfig+0x2e6>
 80057ac:	2310      	movs	r3, #16
 80057ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057b2:	e012      	b.n	80057da <UART_SetConfig+0x2e6>
 80057b4:	efff69f3 	.word	0xefff69f3
 80057b8:	40008000 	.word	0x40008000
 80057bc:	40013800 	.word	0x40013800
 80057c0:	40021000 	.word	0x40021000
 80057c4:	40004400 	.word	0x40004400
 80057c8:	40004800 	.word	0x40004800
 80057cc:	40004c00 	.word	0x40004c00
 80057d0:	40005000 	.word	0x40005000
 80057d4:	2310      	movs	r3, #16
 80057d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a9f      	ldr	r2, [pc, #636]	@ (8005a5c <UART_SetConfig+0x568>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d17a      	bne.n	80058da <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80057e4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80057e8:	2b08      	cmp	r3, #8
 80057ea:	d824      	bhi.n	8005836 <UART_SetConfig+0x342>
 80057ec:	a201      	add	r2, pc, #4	@ (adr r2, 80057f4 <UART_SetConfig+0x300>)
 80057ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057f2:	bf00      	nop
 80057f4:	08005819 	.word	0x08005819
 80057f8:	08005837 	.word	0x08005837
 80057fc:	08005821 	.word	0x08005821
 8005800:	08005837 	.word	0x08005837
 8005804:	08005827 	.word	0x08005827
 8005808:	08005837 	.word	0x08005837
 800580c:	08005837 	.word	0x08005837
 8005810:	08005837 	.word	0x08005837
 8005814:	0800582f 	.word	0x0800582f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005818:	f7fe fc50 	bl	80040bc <HAL_RCC_GetPCLK1Freq>
 800581c:	61f8      	str	r0, [r7, #28]
        break;
 800581e:	e010      	b.n	8005842 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005820:	4b8f      	ldr	r3, [pc, #572]	@ (8005a60 <UART_SetConfig+0x56c>)
 8005822:	61fb      	str	r3, [r7, #28]
        break;
 8005824:	e00d      	b.n	8005842 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005826:	f7fe fbb1 	bl	8003f8c <HAL_RCC_GetSysClockFreq>
 800582a:	61f8      	str	r0, [r7, #28]
        break;
 800582c:	e009      	b.n	8005842 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800582e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005832:	61fb      	str	r3, [r7, #28]
        break;
 8005834:	e005      	b.n	8005842 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005836:	2300      	movs	r3, #0
 8005838:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005840:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	2b00      	cmp	r3, #0
 8005846:	f000 80fb 	beq.w	8005a40 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	685a      	ldr	r2, [r3, #4]
 800584e:	4613      	mov	r3, r2
 8005850:	005b      	lsls	r3, r3, #1
 8005852:	4413      	add	r3, r2
 8005854:	69fa      	ldr	r2, [r7, #28]
 8005856:	429a      	cmp	r2, r3
 8005858:	d305      	bcc.n	8005866 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005860:	69fa      	ldr	r2, [r7, #28]
 8005862:	429a      	cmp	r2, r3
 8005864:	d903      	bls.n	800586e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800586c:	e0e8      	b.n	8005a40 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	2200      	movs	r2, #0
 8005872:	461c      	mov	r4, r3
 8005874:	4615      	mov	r5, r2
 8005876:	f04f 0200 	mov.w	r2, #0
 800587a:	f04f 0300 	mov.w	r3, #0
 800587e:	022b      	lsls	r3, r5, #8
 8005880:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005884:	0222      	lsls	r2, r4, #8
 8005886:	68f9      	ldr	r1, [r7, #12]
 8005888:	6849      	ldr	r1, [r1, #4]
 800588a:	0849      	lsrs	r1, r1, #1
 800588c:	2000      	movs	r0, #0
 800588e:	4688      	mov	r8, r1
 8005890:	4681      	mov	r9, r0
 8005892:	eb12 0a08 	adds.w	sl, r2, r8
 8005896:	eb43 0b09 	adc.w	fp, r3, r9
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	603b      	str	r3, [r7, #0]
 80058a2:	607a      	str	r2, [r7, #4]
 80058a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058a8:	4650      	mov	r0, sl
 80058aa:	4659      	mov	r1, fp
 80058ac:	f7fb f98c 	bl	8000bc8 <__aeabi_uldivmod>
 80058b0:	4602      	mov	r2, r0
 80058b2:	460b      	mov	r3, r1
 80058b4:	4613      	mov	r3, r2
 80058b6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058be:	d308      	bcc.n	80058d2 <UART_SetConfig+0x3de>
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058c6:	d204      	bcs.n	80058d2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	69ba      	ldr	r2, [r7, #24]
 80058ce:	60da      	str	r2, [r3, #12]
 80058d0:	e0b6      	b.n	8005a40 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80058d8:	e0b2      	b.n	8005a40 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	69db      	ldr	r3, [r3, #28]
 80058de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058e2:	d15e      	bne.n	80059a2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80058e4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80058e8:	2b08      	cmp	r3, #8
 80058ea:	d828      	bhi.n	800593e <UART_SetConfig+0x44a>
 80058ec:	a201      	add	r2, pc, #4	@ (adr r2, 80058f4 <UART_SetConfig+0x400>)
 80058ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f2:	bf00      	nop
 80058f4:	08005919 	.word	0x08005919
 80058f8:	08005921 	.word	0x08005921
 80058fc:	08005929 	.word	0x08005929
 8005900:	0800593f 	.word	0x0800593f
 8005904:	0800592f 	.word	0x0800592f
 8005908:	0800593f 	.word	0x0800593f
 800590c:	0800593f 	.word	0x0800593f
 8005910:	0800593f 	.word	0x0800593f
 8005914:	08005937 	.word	0x08005937
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005918:	f7fe fbd0 	bl	80040bc <HAL_RCC_GetPCLK1Freq>
 800591c:	61f8      	str	r0, [r7, #28]
        break;
 800591e:	e014      	b.n	800594a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005920:	f7fe fbe2 	bl	80040e8 <HAL_RCC_GetPCLK2Freq>
 8005924:	61f8      	str	r0, [r7, #28]
        break;
 8005926:	e010      	b.n	800594a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005928:	4b4d      	ldr	r3, [pc, #308]	@ (8005a60 <UART_SetConfig+0x56c>)
 800592a:	61fb      	str	r3, [r7, #28]
        break;
 800592c:	e00d      	b.n	800594a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800592e:	f7fe fb2d 	bl	8003f8c <HAL_RCC_GetSysClockFreq>
 8005932:	61f8      	str	r0, [r7, #28]
        break;
 8005934:	e009      	b.n	800594a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005936:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800593a:	61fb      	str	r3, [r7, #28]
        break;
 800593c:	e005      	b.n	800594a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800593e:	2300      	movs	r3, #0
 8005940:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005948:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d077      	beq.n	8005a40 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	005a      	lsls	r2, r3, #1
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	085b      	lsrs	r3, r3, #1
 800595a:	441a      	add	r2, r3
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	fbb2 f3f3 	udiv	r3, r2, r3
 8005964:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	2b0f      	cmp	r3, #15
 800596a:	d916      	bls.n	800599a <UART_SetConfig+0x4a6>
 800596c:	69bb      	ldr	r3, [r7, #24]
 800596e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005972:	d212      	bcs.n	800599a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	b29b      	uxth	r3, r3
 8005978:	f023 030f 	bic.w	r3, r3, #15
 800597c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	085b      	lsrs	r3, r3, #1
 8005982:	b29b      	uxth	r3, r3
 8005984:	f003 0307 	and.w	r3, r3, #7
 8005988:	b29a      	uxth	r2, r3
 800598a:	8afb      	ldrh	r3, [r7, #22]
 800598c:	4313      	orrs	r3, r2
 800598e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	8afa      	ldrh	r2, [r7, #22]
 8005996:	60da      	str	r2, [r3, #12]
 8005998:	e052      	b.n	8005a40 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80059a0:	e04e      	b.n	8005a40 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80059a2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80059a6:	2b08      	cmp	r3, #8
 80059a8:	d827      	bhi.n	80059fa <UART_SetConfig+0x506>
 80059aa:	a201      	add	r2, pc, #4	@ (adr r2, 80059b0 <UART_SetConfig+0x4bc>)
 80059ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b0:	080059d5 	.word	0x080059d5
 80059b4:	080059dd 	.word	0x080059dd
 80059b8:	080059e5 	.word	0x080059e5
 80059bc:	080059fb 	.word	0x080059fb
 80059c0:	080059eb 	.word	0x080059eb
 80059c4:	080059fb 	.word	0x080059fb
 80059c8:	080059fb 	.word	0x080059fb
 80059cc:	080059fb 	.word	0x080059fb
 80059d0:	080059f3 	.word	0x080059f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059d4:	f7fe fb72 	bl	80040bc <HAL_RCC_GetPCLK1Freq>
 80059d8:	61f8      	str	r0, [r7, #28]
        break;
 80059da:	e014      	b.n	8005a06 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059dc:	f7fe fb84 	bl	80040e8 <HAL_RCC_GetPCLK2Freq>
 80059e0:	61f8      	str	r0, [r7, #28]
        break;
 80059e2:	e010      	b.n	8005a06 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059e4:	4b1e      	ldr	r3, [pc, #120]	@ (8005a60 <UART_SetConfig+0x56c>)
 80059e6:	61fb      	str	r3, [r7, #28]
        break;
 80059e8:	e00d      	b.n	8005a06 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059ea:	f7fe facf 	bl	8003f8c <HAL_RCC_GetSysClockFreq>
 80059ee:	61f8      	str	r0, [r7, #28]
        break;
 80059f0:	e009      	b.n	8005a06 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059f6:	61fb      	str	r3, [r7, #28]
        break;
 80059f8:	e005      	b.n	8005a06 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80059fa:	2300      	movs	r3, #0
 80059fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005a04:	bf00      	nop
    }

    if (pclk != 0U)
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d019      	beq.n	8005a40 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	085a      	lsrs	r2, r3, #1
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	441a      	add	r2, r3
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a1e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	2b0f      	cmp	r3, #15
 8005a24:	d909      	bls.n	8005a3a <UART_SetConfig+0x546>
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a2c:	d205      	bcs.n	8005a3a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	b29a      	uxth	r2, r3
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	60da      	str	r2, [r3, #12]
 8005a38:	e002      	b.n	8005a40 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2200      	movs	r2, #0
 8005a44:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005a4c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3728      	adds	r7, #40	@ 0x28
 8005a54:	46bd      	mov	sp, r7
 8005a56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a5a:	bf00      	nop
 8005a5c:	40008000 	.word	0x40008000
 8005a60:	00f42400 	.word	0x00f42400

08005a64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a70:	f003 0308 	and.w	r3, r3, #8
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d00a      	beq.n	8005a8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	430a      	orrs	r2, r1
 8005a8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a92:	f003 0301 	and.w	r3, r3, #1
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00a      	beq.n	8005ab0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	430a      	orrs	r2, r1
 8005aae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ab4:	f003 0302 	and.w	r3, r3, #2
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d00a      	beq.n	8005ad2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	430a      	orrs	r2, r1
 8005ad0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad6:	f003 0304 	and.w	r3, r3, #4
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d00a      	beq.n	8005af4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	430a      	orrs	r2, r1
 8005af2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005af8:	f003 0310 	and.w	r3, r3, #16
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d00a      	beq.n	8005b16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	430a      	orrs	r2, r1
 8005b14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b1a:	f003 0320 	and.w	r3, r3, #32
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00a      	beq.n	8005b38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	430a      	orrs	r2, r1
 8005b36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d01a      	beq.n	8005b7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	430a      	orrs	r2, r1
 8005b58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b62:	d10a      	bne.n	8005b7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	430a      	orrs	r2, r1
 8005b78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00a      	beq.n	8005b9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	430a      	orrs	r2, r1
 8005b9a:	605a      	str	r2, [r3, #4]
  }
}
 8005b9c:	bf00      	nop
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b098      	sub	sp, #96	@ 0x60
 8005bac:	af02      	add	r7, sp, #8
 8005bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005bb8:	f7fc fe44 	bl	8002844 <HAL_GetTick>
 8005bbc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 0308 	and.w	r3, r3, #8
 8005bc8:	2b08      	cmp	r3, #8
 8005bca:	d12e      	bne.n	8005c2a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bcc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005bd0:	9300      	str	r3, [sp, #0]
 8005bd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 f88c 	bl	8005cf8 <UART_WaitOnFlagUntilTimeout>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d021      	beq.n	8005c2a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bee:	e853 3f00 	ldrex	r3, [r3]
 8005bf2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005bf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bf6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005bfa:	653b      	str	r3, [r7, #80]	@ 0x50
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	461a      	mov	r2, r3
 8005c02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c04:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c06:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c08:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005c0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c0c:	e841 2300 	strex	r3, r2, [r1]
 8005c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005c12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d1e6      	bne.n	8005be6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2220      	movs	r2, #32
 8005c1c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	e062      	b.n	8005cf0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 0304 	and.w	r3, r3, #4
 8005c34:	2b04      	cmp	r3, #4
 8005c36:	d149      	bne.n	8005ccc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c38:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005c3c:	9300      	str	r3, [sp, #0]
 8005c3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c40:	2200      	movs	r2, #0
 8005c42:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 f856 	bl	8005cf8 <UART_WaitOnFlagUntilTimeout>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d03c      	beq.n	8005ccc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c5a:	e853 3f00 	ldrex	r3, [r3]
 8005c5e:	623b      	str	r3, [r7, #32]
   return(result);
 8005c60:	6a3b      	ldr	r3, [r7, #32]
 8005c62:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c70:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c72:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c74:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c78:	e841 2300 	strex	r3, r2, [r1]
 8005c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d1e6      	bne.n	8005c52 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	3308      	adds	r3, #8
 8005c8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	e853 3f00 	ldrex	r3, [r3]
 8005c92:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f023 0301 	bic.w	r3, r3, #1
 8005c9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	3308      	adds	r3, #8
 8005ca2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ca4:	61fa      	str	r2, [r7, #28]
 8005ca6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca8:	69b9      	ldr	r1, [r7, #24]
 8005caa:	69fa      	ldr	r2, [r7, #28]
 8005cac:	e841 2300 	strex	r3, r2, [r1]
 8005cb0:	617b      	str	r3, [r7, #20]
   return(result);
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d1e5      	bne.n	8005c84 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2220      	movs	r2, #32
 8005cbc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cc8:	2303      	movs	r3, #3
 8005cca:	e011      	b.n	8005cf0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2220      	movs	r2, #32
 8005cd0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2220      	movs	r2, #32
 8005cd6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005cee:	2300      	movs	r3, #0
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3758      	adds	r7, #88	@ 0x58
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	60b9      	str	r1, [r7, #8]
 8005d02:	603b      	str	r3, [r7, #0]
 8005d04:	4613      	mov	r3, r2
 8005d06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d08:	e049      	b.n	8005d9e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d10:	d045      	beq.n	8005d9e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d12:	f7fc fd97 	bl	8002844 <HAL_GetTick>
 8005d16:	4602      	mov	r2, r0
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	1ad3      	subs	r3, r2, r3
 8005d1c:	69ba      	ldr	r2, [r7, #24]
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d302      	bcc.n	8005d28 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d101      	bne.n	8005d2c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	e048      	b.n	8005dbe <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 0304 	and.w	r3, r3, #4
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d031      	beq.n	8005d9e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	69db      	ldr	r3, [r3, #28]
 8005d40:	f003 0308 	and.w	r3, r3, #8
 8005d44:	2b08      	cmp	r3, #8
 8005d46:	d110      	bne.n	8005d6a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2208      	movs	r2, #8
 8005d4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d50:	68f8      	ldr	r0, [r7, #12]
 8005d52:	f000 f8ff 	bl	8005f54 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2208      	movs	r2, #8
 8005d5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e029      	b.n	8005dbe <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	69db      	ldr	r3, [r3, #28]
 8005d70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d78:	d111      	bne.n	8005d9e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005d82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d84:	68f8      	ldr	r0, [r7, #12]
 8005d86:	f000 f8e5 	bl	8005f54 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2220      	movs	r2, #32
 8005d8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	e00f      	b.n	8005dbe <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	69da      	ldr	r2, [r3, #28]
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	4013      	ands	r3, r2
 8005da8:	68ba      	ldr	r2, [r7, #8]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	bf0c      	ite	eq
 8005dae:	2301      	moveq	r3, #1
 8005db0:	2300      	movne	r3, #0
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	461a      	mov	r2, r3
 8005db6:	79fb      	ldrb	r3, [r7, #7]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d0a6      	beq.n	8005d0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3710      	adds	r7, #16
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
	...

08005dc8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b097      	sub	sp, #92	@ 0x5c
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	60b9      	str	r1, [r7, #8]
 8005dd2:	4613      	mov	r3, r2
 8005dd4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	68ba      	ldr	r2, [r7, #8]
 8005dda:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	88fa      	ldrh	r2, [r7, #6]
 8005de0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	88fa      	ldrh	r2, [r7, #6]
 8005de8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2200      	movs	r2, #0
 8005df0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dfa:	d10e      	bne.n	8005e1a <UART_Start_Receive_IT+0x52>
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	691b      	ldr	r3, [r3, #16]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d105      	bne.n	8005e10 <UART_Start_Receive_IT+0x48>
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005e0a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005e0e:	e02d      	b.n	8005e6c <UART_Start_Receive_IT+0xa4>
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	22ff      	movs	r2, #255	@ 0xff
 8005e14:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005e18:	e028      	b.n	8005e6c <UART_Start_Receive_IT+0xa4>
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d10d      	bne.n	8005e3e <UART_Start_Receive_IT+0x76>
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d104      	bne.n	8005e34 <UART_Start_Receive_IT+0x6c>
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	22ff      	movs	r2, #255	@ 0xff
 8005e2e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005e32:	e01b      	b.n	8005e6c <UART_Start_Receive_IT+0xa4>
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	227f      	movs	r2, #127	@ 0x7f
 8005e38:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005e3c:	e016      	b.n	8005e6c <UART_Start_Receive_IT+0xa4>
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e46:	d10d      	bne.n	8005e64 <UART_Start_Receive_IT+0x9c>
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	691b      	ldr	r3, [r3, #16]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d104      	bne.n	8005e5a <UART_Start_Receive_IT+0x92>
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	227f      	movs	r2, #127	@ 0x7f
 8005e54:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005e58:	e008      	b.n	8005e6c <UART_Start_Receive_IT+0xa4>
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	223f      	movs	r2, #63	@ 0x3f
 8005e5e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005e62:	e003      	b.n	8005e6c <UART_Start_Receive_IT+0xa4>
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2222      	movs	r2, #34	@ 0x22
 8005e78:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	3308      	adds	r3, #8
 8005e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e86:	e853 3f00 	ldrex	r3, [r3]
 8005e8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e8e:	f043 0301 	orr.w	r3, r3, #1
 8005e92:	657b      	str	r3, [r7, #84]	@ 0x54
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	3308      	adds	r3, #8
 8005e9a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005e9c:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005e9e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005ea2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ea4:	e841 2300 	strex	r3, r2, [r1]
 8005ea8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005eaa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d1e5      	bne.n	8005e7c <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005eb8:	d107      	bne.n	8005eca <UART_Start_Receive_IT+0x102>
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d103      	bne.n	8005eca <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	4a21      	ldr	r2, [pc, #132]	@ (8005f4c <UART_Start_Receive_IT+0x184>)
 8005ec6:	669a      	str	r2, [r3, #104]	@ 0x68
 8005ec8:	e002      	b.n	8005ed0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	4a20      	ldr	r2, [pc, #128]	@ (8005f50 <UART_Start_Receive_IT+0x188>)
 8005ece:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	691b      	ldr	r3, [r3, #16]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d019      	beq.n	8005f0c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ee0:	e853 3f00 	ldrex	r3, [r3]
 8005ee4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ee8:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005eec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ef6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ef8:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005efa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005efc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005efe:	e841 2300 	strex	r3, r2, [r1]
 8005f02:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005f04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d1e6      	bne.n	8005ed8 <UART_Start_Receive_IT+0x110>
 8005f0a:	e018      	b.n	8005f3e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	e853 3f00 	ldrex	r3, [r3]
 8005f18:	613b      	str	r3, [r7, #16]
   return(result);
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	f043 0320 	orr.w	r3, r3, #32
 8005f20:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	461a      	mov	r2, r3
 8005f28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f2a:	623b      	str	r3, [r7, #32]
 8005f2c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f2e:	69f9      	ldr	r1, [r7, #28]
 8005f30:	6a3a      	ldr	r2, [r7, #32]
 8005f32:	e841 2300 	strex	r3, r2, [r1]
 8005f36:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d1e6      	bne.n	8005f0c <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	375c      	adds	r7, #92	@ 0x5c
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr
 8005f4c:	08006259 	.word	0x08006259
 8005f50:	0800609d 	.word	0x0800609d

08005f54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b095      	sub	sp, #84	@ 0x54
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f64:	e853 3f00 	ldrex	r3, [r3]
 8005f68:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	461a      	mov	r2, r3
 8005f78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f7a:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f7c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f7e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005f80:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005f82:	e841 2300 	strex	r3, r2, [r1]
 8005f86:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d1e6      	bne.n	8005f5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	3308      	adds	r3, #8
 8005f94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f96:	6a3b      	ldr	r3, [r7, #32]
 8005f98:	e853 3f00 	ldrex	r3, [r3]
 8005f9c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	f023 0301 	bic.w	r3, r3, #1
 8005fa4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	3308      	adds	r3, #8
 8005fac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005fae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005fb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005fb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005fb6:	e841 2300 	strex	r3, r2, [r1]
 8005fba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d1e5      	bne.n	8005f8e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d118      	bne.n	8005ffc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	e853 3f00 	ldrex	r3, [r3]
 8005fd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	f023 0310 	bic.w	r3, r3, #16
 8005fde:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fe8:	61bb      	str	r3, [r7, #24]
 8005fea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fec:	6979      	ldr	r1, [r7, #20]
 8005fee:	69ba      	ldr	r2, [r7, #24]
 8005ff0:	e841 2300 	strex	r3, r2, [r1]
 8005ff4:	613b      	str	r3, [r7, #16]
   return(result);
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d1e6      	bne.n	8005fca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2220      	movs	r2, #32
 8006000:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2200      	movs	r2, #0
 8006008:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006010:	bf00      	nop
 8006012:	3754      	adds	r7, #84	@ 0x54
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b084      	sub	sp, #16
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006028:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2200      	movs	r2, #0
 800602e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2200      	movs	r2, #0
 8006036:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800603a:	68f8      	ldr	r0, [r7, #12]
 800603c:	f7fc fa86 	bl	800254c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006040:	bf00      	nop
 8006042:	3710      	adds	r7, #16
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b088      	sub	sp, #32
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	e853 3f00 	ldrex	r3, [r3]
 800605c:	60bb      	str	r3, [r7, #8]
   return(result);
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006064:	61fb      	str	r3, [r7, #28]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	461a      	mov	r2, r3
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	61bb      	str	r3, [r7, #24]
 8006070:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006072:	6979      	ldr	r1, [r7, #20]
 8006074:	69ba      	ldr	r2, [r7, #24]
 8006076:	e841 2300 	strex	r3, r2, [r1]
 800607a:	613b      	str	r3, [r7, #16]
   return(result);
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d1e6      	bne.n	8006050 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2220      	movs	r2, #32
 8006086:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f7ff fa1a 	bl	80054c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006094:	bf00      	nop
 8006096:	3720      	adds	r7, #32
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b09c      	sub	sp, #112	@ 0x70
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80060aa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060b4:	2b22      	cmp	r3, #34	@ 0x22
 80060b6:	f040 80be 	bne.w	8006236 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80060c0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80060c4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80060c8:	b2d9      	uxtb	r1, r3
 80060ca:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80060ce:	b2da      	uxtb	r2, r3
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060d4:	400a      	ands	r2, r1
 80060d6:	b2d2      	uxtb	r2, r2
 80060d8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060de:	1c5a      	adds	r2, r3, #1
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	3b01      	subs	r3, #1
 80060ee:	b29a      	uxth	r2, r3
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	2b00      	cmp	r3, #0
 8006100:	f040 80a3 	bne.w	800624a <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800610a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800610c:	e853 3f00 	ldrex	r3, [r3]
 8006110:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006112:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006114:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006118:	66bb      	str	r3, [r7, #104]	@ 0x68
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	461a      	mov	r2, r3
 8006120:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006122:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006124:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006126:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006128:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800612a:	e841 2300 	strex	r3, r2, [r1]
 800612e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006130:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006132:	2b00      	cmp	r3, #0
 8006134:	d1e6      	bne.n	8006104 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	3308      	adds	r3, #8
 800613c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800613e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006140:	e853 3f00 	ldrex	r3, [r3]
 8006144:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006146:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006148:	f023 0301 	bic.w	r3, r3, #1
 800614c:	667b      	str	r3, [r7, #100]	@ 0x64
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	3308      	adds	r3, #8
 8006154:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006156:	647a      	str	r2, [r7, #68]	@ 0x44
 8006158:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800615a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800615c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800615e:	e841 2300 	strex	r3, r2, [r1]
 8006162:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006164:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006166:	2b00      	cmp	r3, #0
 8006168:	d1e5      	bne.n	8006136 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2220      	movs	r2, #32
 800616e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a34      	ldr	r2, [pc, #208]	@ (8006254 <UART_RxISR_8BIT+0x1b8>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d01f      	beq.n	80061c8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006192:	2b00      	cmp	r3, #0
 8006194:	d018      	beq.n	80061c8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800619e:	e853 3f00 	ldrex	r3, [r3]
 80061a2:	623b      	str	r3, [r7, #32]
   return(result);
 80061a4:	6a3b      	ldr	r3, [r7, #32]
 80061a6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80061aa:	663b      	str	r3, [r7, #96]	@ 0x60
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	461a      	mov	r2, r3
 80061b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80061b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80061b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80061ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061bc:	e841 2300 	strex	r3, r2, [r1]
 80061c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80061c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d1e6      	bne.n	8006196 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d12e      	bne.n	800622e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	e853 3f00 	ldrex	r3, [r3]
 80061e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f023 0310 	bic.w	r3, r3, #16
 80061ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	461a      	mov	r2, r3
 80061f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80061f4:	61fb      	str	r3, [r7, #28]
 80061f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f8:	69b9      	ldr	r1, [r7, #24]
 80061fa:	69fa      	ldr	r2, [r7, #28]
 80061fc:	e841 2300 	strex	r3, r2, [r1]
 8006200:	617b      	str	r3, [r7, #20]
   return(result);
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d1e6      	bne.n	80061d6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	69db      	ldr	r3, [r3, #28]
 800620e:	f003 0310 	and.w	r3, r3, #16
 8006212:	2b10      	cmp	r3, #16
 8006214:	d103      	bne.n	800621e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2210      	movs	r2, #16
 800621c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006224:	4619      	mov	r1, r3
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f7ff f958 	bl	80054dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800622c:	e00d      	b.n	800624a <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f7fc f96c 	bl	800250c <HAL_UART_RxCpltCallback>
}
 8006234:	e009      	b.n	800624a <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	8b1b      	ldrh	r3, [r3, #24]
 800623c:	b29a      	uxth	r2, r3
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f042 0208 	orr.w	r2, r2, #8
 8006246:	b292      	uxth	r2, r2
 8006248:	831a      	strh	r2, [r3, #24]
}
 800624a:	bf00      	nop
 800624c:	3770      	adds	r7, #112	@ 0x70
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	40008000 	.word	0x40008000

08006258 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b09c      	sub	sp, #112	@ 0x70
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006266:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006270:	2b22      	cmp	r3, #34	@ 0x22
 8006272:	f040 80be 	bne.w	80063f2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800627c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006284:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006286:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800628a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800628e:	4013      	ands	r3, r2
 8006290:	b29a      	uxth	r2, r3
 8006292:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006294:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800629a:	1c9a      	adds	r2, r3, #2
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	3b01      	subs	r3, #1
 80062aa:	b29a      	uxth	r2, r3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	f040 80a3 	bne.w	8006406 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80062c8:	e853 3f00 	ldrex	r3, [r3]
 80062cc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80062ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80062d4:	667b      	str	r3, [r7, #100]	@ 0x64
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	461a      	mov	r2, r3
 80062dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80062de:	657b      	str	r3, [r7, #84]	@ 0x54
 80062e0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80062e4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80062e6:	e841 2300 	strex	r3, r2, [r1]
 80062ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80062ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d1e6      	bne.n	80062c0 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	3308      	adds	r3, #8
 80062f8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062fc:	e853 3f00 	ldrex	r3, [r3]
 8006300:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006304:	f023 0301 	bic.w	r3, r3, #1
 8006308:	663b      	str	r3, [r7, #96]	@ 0x60
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	3308      	adds	r3, #8
 8006310:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006312:	643a      	str	r2, [r7, #64]	@ 0x40
 8006314:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006316:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006318:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800631a:	e841 2300 	strex	r3, r2, [r1]
 800631e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006322:	2b00      	cmp	r3, #0
 8006324:	d1e5      	bne.n	80062f2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2220      	movs	r2, #32
 800632a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a34      	ldr	r2, [pc, #208]	@ (8006410 <UART_RxISR_16BIT+0x1b8>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d01f      	beq.n	8006384 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800634e:	2b00      	cmp	r3, #0
 8006350:	d018      	beq.n	8006384 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006358:	6a3b      	ldr	r3, [r7, #32]
 800635a:	e853 3f00 	ldrex	r3, [r3]
 800635e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006360:	69fb      	ldr	r3, [r7, #28]
 8006362:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006366:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	461a      	mov	r2, r3
 800636e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006370:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006372:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006374:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006376:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006378:	e841 2300 	strex	r3, r2, [r1]
 800637c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800637e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006380:	2b00      	cmp	r3, #0
 8006382:	d1e6      	bne.n	8006352 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006388:	2b01      	cmp	r3, #1
 800638a:	d12e      	bne.n	80063ea <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	e853 3f00 	ldrex	r3, [r3]
 800639e:	60bb      	str	r3, [r7, #8]
   return(result);
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	f023 0310 	bic.w	r3, r3, #16
 80063a6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	461a      	mov	r2, r3
 80063ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80063b0:	61bb      	str	r3, [r7, #24]
 80063b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b4:	6979      	ldr	r1, [r7, #20]
 80063b6:	69ba      	ldr	r2, [r7, #24]
 80063b8:	e841 2300 	strex	r3, r2, [r1]
 80063bc:	613b      	str	r3, [r7, #16]
   return(result);
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d1e6      	bne.n	8006392 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	69db      	ldr	r3, [r3, #28]
 80063ca:	f003 0310 	and.w	r3, r3, #16
 80063ce:	2b10      	cmp	r3, #16
 80063d0:	d103      	bne.n	80063da <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2210      	movs	r2, #16
 80063d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80063e0:	4619      	mov	r1, r3
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f7ff f87a 	bl	80054dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80063e8:	e00d      	b.n	8006406 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f7fc f88e 	bl	800250c <HAL_UART_RxCpltCallback>
}
 80063f0:	e009      	b.n	8006406 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	8b1b      	ldrh	r3, [r3, #24]
 80063f8:	b29a      	uxth	r2, r3
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f042 0208 	orr.w	r2, r2, #8
 8006402:	b292      	uxth	r2, r2
 8006404:	831a      	strh	r2, [r3, #24]
}
 8006406:	bf00      	nop
 8006408:	3770      	adds	r7, #112	@ 0x70
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	40008000 	.word	0x40008000

08006414 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800641c:	bf00      	nop
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006428:	b084      	sub	sp, #16
 800642a:	b580      	push	{r7, lr}
 800642c:	b084      	sub	sp, #16
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]
 8006432:	f107 001c 	add.w	r0, r7, #28
 8006436:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 fa66 	bl	8006918 <USB_CoreReset>
 800644c:	4603      	mov	r3, r0
 800644e:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8006450:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006452:	2b00      	cmp	r3, #0
 8006454:	d106      	bne.n	8006464 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800645a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	639a      	str	r2, [r3, #56]	@ 0x38
 8006462:	e005      	b.n	8006470 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006468:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8006470:	7bfb      	ldrb	r3, [r7, #15]
}
 8006472:	4618      	mov	r0, r3
 8006474:	3710      	adds	r7, #16
 8006476:	46bd      	mov	sp, r7
 8006478:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800647c:	b004      	add	sp, #16
 800647e:	4770      	bx	lr

08006480 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	f023 0201 	bic.w	r2, r3, #1
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	370c      	adds	r7, #12
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr

080064a2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80064a2:	b580      	push	{r7, lr}
 80064a4:	b084      	sub	sp, #16
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
 80064aa:	460b      	mov	r3, r1
 80064ac:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80064ae:	2300      	movs	r3, #0
 80064b0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80064be:	78fb      	ldrb	r3, [r7, #3]
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d115      	bne.n	80064f0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80064d0:	2001      	movs	r0, #1
 80064d2:	f7fc f9c3 	bl	800285c <HAL_Delay>
      ms++;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	3301      	adds	r3, #1
 80064da:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 fa0d 	bl	80068fc <USB_GetMode>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d01e      	beq.n	8006526 <USB_SetCurrentMode+0x84>
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2b31      	cmp	r3, #49	@ 0x31
 80064ec:	d9f0      	bls.n	80064d0 <USB_SetCurrentMode+0x2e>
 80064ee:	e01a      	b.n	8006526 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80064f0:	78fb      	ldrb	r3, [r7, #3]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d115      	bne.n	8006522 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	68db      	ldr	r3, [r3, #12]
 80064fa:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006502:	2001      	movs	r0, #1
 8006504:	f7fc f9aa 	bl	800285c <HAL_Delay>
      ms++;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	3301      	adds	r3, #1
 800650c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 f9f4 	bl	80068fc <USB_GetMode>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d005      	beq.n	8006526 <USB_SetCurrentMode+0x84>
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2b31      	cmp	r3, #49	@ 0x31
 800651e:	d9f0      	bls.n	8006502 <USB_SetCurrentMode+0x60>
 8006520:	e001      	b.n	8006526 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	e005      	b.n	8006532 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2b32      	cmp	r3, #50	@ 0x32
 800652a:	d101      	bne.n	8006530 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	e000      	b.n	8006532 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3710      	adds	r7, #16
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
	...

0800653c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800653c:	b084      	sub	sp, #16
 800653e:	b580      	push	{r7, lr}
 8006540:	b086      	sub	sp, #24
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
 8006546:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800654a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800654e:	2300      	movs	r3, #0
 8006550:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006556:	2300      	movs	r3, #0
 8006558:	613b      	str	r3, [r7, #16]
 800655a:	e009      	b.n	8006570 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	3340      	adds	r3, #64	@ 0x40
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	4413      	add	r3, r2
 8006566:	2200      	movs	r2, #0
 8006568:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	3301      	adds	r3, #1
 800656e:	613b      	str	r3, [r7, #16]
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	2b0e      	cmp	r3, #14
 8006574:	d9f2      	bls.n	800655c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006576:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006578:	2b00      	cmp	r3, #0
 800657a:	d11c      	bne.n	80065b6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	68fa      	ldr	r2, [r7, #12]
 8006586:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800658a:	f043 0302 	orr.w	r3, r3, #2
 800658e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006594:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	601a      	str	r2, [r3, #0]
 80065b4:	e005      	b.n	80065c2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065ba:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80065c8:	461a      	mov	r2, r3
 80065ca:	2300      	movs	r3, #0
 80065cc:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80065ce:	2103      	movs	r1, #3
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f000 f959 	bl	8006888 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80065d6:	2110      	movs	r1, #16
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 f8f1 	bl	80067c0 <USB_FlushTxFifo>
 80065de:	4603      	mov	r3, r0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d001      	beq.n	80065e8 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 f91d 	bl	8006828 <USB_FlushRxFifo>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d001      	beq.n	80065f8 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065fe:	461a      	mov	r2, r3
 8006600:	2300      	movs	r3, #0
 8006602:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800660a:	461a      	mov	r2, r3
 800660c:	2300      	movs	r3, #0
 800660e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006616:	461a      	mov	r2, r3
 8006618:	2300      	movs	r3, #0
 800661a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800661c:	2300      	movs	r3, #0
 800661e:	613b      	str	r3, [r7, #16]
 8006620:	e043      	b.n	80066aa <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	015a      	lsls	r2, r3, #5
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	4413      	add	r3, r2
 800662a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006634:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006638:	d118      	bne.n	800666c <USB_DevInit+0x130>
    {
      if (i == 0U)
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d10a      	bne.n	8006656 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	015a      	lsls	r2, r3, #5
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	4413      	add	r3, r2
 8006648:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800664c:	461a      	mov	r2, r3
 800664e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006652:	6013      	str	r3, [r2, #0]
 8006654:	e013      	b.n	800667e <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	015a      	lsls	r2, r3, #5
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	4413      	add	r3, r2
 800665e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006662:	461a      	mov	r2, r3
 8006664:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006668:	6013      	str	r3, [r2, #0]
 800666a:	e008      	b.n	800667e <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	015a      	lsls	r2, r3, #5
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	4413      	add	r3, r2
 8006674:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006678:	461a      	mov	r2, r3
 800667a:	2300      	movs	r3, #0
 800667c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	015a      	lsls	r2, r3, #5
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	4413      	add	r3, r2
 8006686:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800668a:	461a      	mov	r2, r3
 800668c:	2300      	movs	r3, #0
 800668e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	015a      	lsls	r2, r3, #5
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	4413      	add	r3, r2
 8006698:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800669c:	461a      	mov	r2, r3
 800669e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80066a2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	3301      	adds	r3, #1
 80066a8:	613b      	str	r3, [r7, #16]
 80066aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ac:	693a      	ldr	r2, [r7, #16]
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d3b7      	bcc.n	8006622 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066b2:	2300      	movs	r3, #0
 80066b4:	613b      	str	r3, [r7, #16]
 80066b6:	e043      	b.n	8006740 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	015a      	lsls	r2, r3, #5
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	4413      	add	r3, r2
 80066c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80066ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80066ce:	d118      	bne.n	8006702 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d10a      	bne.n	80066ec <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	015a      	lsls	r2, r3, #5
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	4413      	add	r3, r2
 80066de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066e2:	461a      	mov	r2, r3
 80066e4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80066e8:	6013      	str	r3, [r2, #0]
 80066ea:	e013      	b.n	8006714 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	015a      	lsls	r2, r3, #5
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	4413      	add	r3, r2
 80066f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066f8:	461a      	mov	r2, r3
 80066fa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80066fe:	6013      	str	r3, [r2, #0]
 8006700:	e008      	b.n	8006714 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	015a      	lsls	r2, r3, #5
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	4413      	add	r3, r2
 800670a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800670e:	461a      	mov	r2, r3
 8006710:	2300      	movs	r3, #0
 8006712:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	015a      	lsls	r2, r3, #5
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	4413      	add	r3, r2
 800671c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006720:	461a      	mov	r2, r3
 8006722:	2300      	movs	r3, #0
 8006724:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	015a      	lsls	r2, r3, #5
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	4413      	add	r3, r2
 800672e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006732:	461a      	mov	r2, r3
 8006734:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006738:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	3301      	adds	r3, #1
 800673e:	613b      	str	r3, [r7, #16]
 8006740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006742:	693a      	ldr	r2, [r7, #16]
 8006744:	429a      	cmp	r2, r3
 8006746:	d3b7      	bcc.n	80066b8 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800674e:	691b      	ldr	r3, [r3, #16]
 8006750:	68fa      	ldr	r2, [r7, #12]
 8006752:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006756:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800675a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006768:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	699b      	ldr	r3, [r3, #24]
 800676e:	f043 0210 	orr.w	r2, r3, #16
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	699a      	ldr	r2, [r3, #24]
 800677a:	4b10      	ldr	r3, [pc, #64]	@ (80067bc <USB_DevInit+0x280>)
 800677c:	4313      	orrs	r3, r2
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006782:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006784:	2b00      	cmp	r3, #0
 8006786:	d005      	beq.n	8006794 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	699b      	ldr	r3, [r3, #24]
 800678c:	f043 0208 	orr.w	r2, r3, #8
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006794:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006796:	2b01      	cmp	r3, #1
 8006798:	d107      	bne.n	80067aa <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	699b      	ldr	r3, [r3, #24]
 800679e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80067a2:	f043 0304 	orr.w	r3, r3, #4
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80067aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3718      	adds	r7, #24
 80067b0:	46bd      	mov	sp, r7
 80067b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80067b6:	b004      	add	sp, #16
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop
 80067bc:	803c3800 	.word	0x803c3800

080067c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b085      	sub	sp, #20
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80067ca:	2300      	movs	r3, #0
 80067cc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	3301      	adds	r3, #1
 80067d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	4a13      	ldr	r2, [pc, #76]	@ (8006824 <USB_FlushTxFifo+0x64>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d901      	bls.n	80067e0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80067dc:	2303      	movs	r3, #3
 80067de:	e01b      	b.n	8006818 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	daf2      	bge.n	80067ce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80067e8:	2300      	movs	r3, #0
 80067ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	019b      	lsls	r3, r3, #6
 80067f0:	f043 0220 	orr.w	r2, r3, #32
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	3301      	adds	r3, #1
 80067fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	4a08      	ldr	r2, [pc, #32]	@ (8006824 <USB_FlushTxFifo+0x64>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d901      	bls.n	800680a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006806:	2303      	movs	r3, #3
 8006808:	e006      	b.n	8006818 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	f003 0320 	and.w	r3, r3, #32
 8006812:	2b20      	cmp	r3, #32
 8006814:	d0f0      	beq.n	80067f8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006816:	2300      	movs	r3, #0
}
 8006818:	4618      	mov	r0, r3
 800681a:	3714      	adds	r7, #20
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr
 8006824:	00030d40 	.word	0x00030d40

08006828 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006828:	b480      	push	{r7}
 800682a:	b085      	sub	sp, #20
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006830:	2300      	movs	r3, #0
 8006832:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	3301      	adds	r3, #1
 8006838:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	4a11      	ldr	r2, [pc, #68]	@ (8006884 <USB_FlushRxFifo+0x5c>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d901      	bls.n	8006846 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006842:	2303      	movs	r3, #3
 8006844:	e018      	b.n	8006878 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	691b      	ldr	r3, [r3, #16]
 800684a:	2b00      	cmp	r3, #0
 800684c:	daf2      	bge.n	8006834 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800684e:	2300      	movs	r3, #0
 8006850:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2210      	movs	r2, #16
 8006856:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	3301      	adds	r3, #1
 800685c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	4a08      	ldr	r2, [pc, #32]	@ (8006884 <USB_FlushRxFifo+0x5c>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d901      	bls.n	800686a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006866:	2303      	movs	r3, #3
 8006868:	e006      	b.n	8006878 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	f003 0310 	and.w	r3, r3, #16
 8006872:	2b10      	cmp	r3, #16
 8006874:	d0f0      	beq.n	8006858 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006876:	2300      	movs	r3, #0
}
 8006878:	4618      	mov	r0, r3
 800687a:	3714      	adds	r7, #20
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr
 8006884:	00030d40 	.word	0x00030d40

08006888 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006888:	b480      	push	{r7}
 800688a:	b085      	sub	sp, #20
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	460b      	mov	r3, r1
 8006892:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	78fb      	ldrb	r3, [r7, #3]
 80068a2:	68f9      	ldr	r1, [r7, #12]
 80068a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80068a8:	4313      	orrs	r3, r2
 80068aa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3714      	adds	r7, #20
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr

080068ba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80068ba:	b480      	push	{r7}
 80068bc:	b085      	sub	sp, #20
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	68fa      	ldr	r2, [r7, #12]
 80068d0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80068d4:	f023 0303 	bic.w	r3, r3, #3
 80068d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	68fa      	ldr	r2, [r7, #12]
 80068e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80068e8:	f043 0302 	orr.w	r3, r3, #2
 80068ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80068ee:	2300      	movs	r3, #0
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3714      	adds	r7, #20
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	695b      	ldr	r3, [r3, #20]
 8006908:	f003 0301 	and.w	r3, r3, #1
}
 800690c:	4618      	mov	r0, r3
 800690e:	370c      	adds	r7, #12
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006918:	b480      	push	{r7}
 800691a:	b085      	sub	sp, #20
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006920:	2300      	movs	r3, #0
 8006922:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	3301      	adds	r3, #1
 8006928:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	4a13      	ldr	r2, [pc, #76]	@ (800697c <USB_CoreReset+0x64>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d901      	bls.n	8006936 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006932:	2303      	movs	r3, #3
 8006934:	e01b      	b.n	800696e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	2b00      	cmp	r3, #0
 800693c:	daf2      	bge.n	8006924 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800693e:	2300      	movs	r3, #0
 8006940:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	691b      	ldr	r3, [r3, #16]
 8006946:	f043 0201 	orr.w	r2, r3, #1
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	3301      	adds	r3, #1
 8006952:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	4a09      	ldr	r2, [pc, #36]	@ (800697c <USB_CoreReset+0x64>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d901      	bls.n	8006960 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800695c:	2303      	movs	r3, #3
 800695e:	e006      	b.n	800696e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	691b      	ldr	r3, [r3, #16]
 8006964:	f003 0301 	and.w	r3, r3, #1
 8006968:	2b01      	cmp	r3, #1
 800696a:	d0f0      	beq.n	800694e <USB_CoreReset+0x36>

  return HAL_OK;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	3714      	adds	r7, #20
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr
 800697a:	bf00      	nop
 800697c:	00030d40 	.word	0x00030d40

08006980 <malloc>:
 8006980:	4b02      	ldr	r3, [pc, #8]	@ (800698c <malloc+0xc>)
 8006982:	4601      	mov	r1, r0
 8006984:	6818      	ldr	r0, [r3, #0]
 8006986:	f000 b82d 	b.w	80069e4 <_malloc_r>
 800698a:	bf00      	nop
 800698c:	20000178 	.word	0x20000178

08006990 <free>:
 8006990:	4b02      	ldr	r3, [pc, #8]	@ (800699c <free+0xc>)
 8006992:	4601      	mov	r1, r0
 8006994:	6818      	ldr	r0, [r3, #0]
 8006996:	f001 bd97 	b.w	80084c8 <_free_r>
 800699a:	bf00      	nop
 800699c:	20000178 	.word	0x20000178

080069a0 <sbrk_aligned>:
 80069a0:	b570      	push	{r4, r5, r6, lr}
 80069a2:	4e0f      	ldr	r6, [pc, #60]	@ (80069e0 <sbrk_aligned+0x40>)
 80069a4:	460c      	mov	r4, r1
 80069a6:	6831      	ldr	r1, [r6, #0]
 80069a8:	4605      	mov	r5, r0
 80069aa:	b911      	cbnz	r1, 80069b2 <sbrk_aligned+0x12>
 80069ac:	f000 fee0 	bl	8007770 <_sbrk_r>
 80069b0:	6030      	str	r0, [r6, #0]
 80069b2:	4621      	mov	r1, r4
 80069b4:	4628      	mov	r0, r5
 80069b6:	f000 fedb 	bl	8007770 <_sbrk_r>
 80069ba:	1c43      	adds	r3, r0, #1
 80069bc:	d103      	bne.n	80069c6 <sbrk_aligned+0x26>
 80069be:	f04f 34ff 	mov.w	r4, #4294967295
 80069c2:	4620      	mov	r0, r4
 80069c4:	bd70      	pop	{r4, r5, r6, pc}
 80069c6:	1cc4      	adds	r4, r0, #3
 80069c8:	f024 0403 	bic.w	r4, r4, #3
 80069cc:	42a0      	cmp	r0, r4
 80069ce:	d0f8      	beq.n	80069c2 <sbrk_aligned+0x22>
 80069d0:	1a21      	subs	r1, r4, r0
 80069d2:	4628      	mov	r0, r5
 80069d4:	f000 fecc 	bl	8007770 <_sbrk_r>
 80069d8:	3001      	adds	r0, #1
 80069da:	d1f2      	bne.n	80069c2 <sbrk_aligned+0x22>
 80069dc:	e7ef      	b.n	80069be <sbrk_aligned+0x1e>
 80069de:	bf00      	nop
 80069e0:	20000eec 	.word	0x20000eec

080069e4 <_malloc_r>:
 80069e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069e8:	1ccd      	adds	r5, r1, #3
 80069ea:	f025 0503 	bic.w	r5, r5, #3
 80069ee:	3508      	adds	r5, #8
 80069f0:	2d0c      	cmp	r5, #12
 80069f2:	bf38      	it	cc
 80069f4:	250c      	movcc	r5, #12
 80069f6:	2d00      	cmp	r5, #0
 80069f8:	4606      	mov	r6, r0
 80069fa:	db01      	blt.n	8006a00 <_malloc_r+0x1c>
 80069fc:	42a9      	cmp	r1, r5
 80069fe:	d904      	bls.n	8006a0a <_malloc_r+0x26>
 8006a00:	230c      	movs	r3, #12
 8006a02:	6033      	str	r3, [r6, #0]
 8006a04:	2000      	movs	r0, #0
 8006a06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a0a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006ae0 <_malloc_r+0xfc>
 8006a0e:	f000 f869 	bl	8006ae4 <__malloc_lock>
 8006a12:	f8d8 3000 	ldr.w	r3, [r8]
 8006a16:	461c      	mov	r4, r3
 8006a18:	bb44      	cbnz	r4, 8006a6c <_malloc_r+0x88>
 8006a1a:	4629      	mov	r1, r5
 8006a1c:	4630      	mov	r0, r6
 8006a1e:	f7ff ffbf 	bl	80069a0 <sbrk_aligned>
 8006a22:	1c43      	adds	r3, r0, #1
 8006a24:	4604      	mov	r4, r0
 8006a26:	d158      	bne.n	8006ada <_malloc_r+0xf6>
 8006a28:	f8d8 4000 	ldr.w	r4, [r8]
 8006a2c:	4627      	mov	r7, r4
 8006a2e:	2f00      	cmp	r7, #0
 8006a30:	d143      	bne.n	8006aba <_malloc_r+0xd6>
 8006a32:	2c00      	cmp	r4, #0
 8006a34:	d04b      	beq.n	8006ace <_malloc_r+0xea>
 8006a36:	6823      	ldr	r3, [r4, #0]
 8006a38:	4639      	mov	r1, r7
 8006a3a:	4630      	mov	r0, r6
 8006a3c:	eb04 0903 	add.w	r9, r4, r3
 8006a40:	f000 fe96 	bl	8007770 <_sbrk_r>
 8006a44:	4581      	cmp	r9, r0
 8006a46:	d142      	bne.n	8006ace <_malloc_r+0xea>
 8006a48:	6821      	ldr	r1, [r4, #0]
 8006a4a:	1a6d      	subs	r5, r5, r1
 8006a4c:	4629      	mov	r1, r5
 8006a4e:	4630      	mov	r0, r6
 8006a50:	f7ff ffa6 	bl	80069a0 <sbrk_aligned>
 8006a54:	3001      	adds	r0, #1
 8006a56:	d03a      	beq.n	8006ace <_malloc_r+0xea>
 8006a58:	6823      	ldr	r3, [r4, #0]
 8006a5a:	442b      	add	r3, r5
 8006a5c:	6023      	str	r3, [r4, #0]
 8006a5e:	f8d8 3000 	ldr.w	r3, [r8]
 8006a62:	685a      	ldr	r2, [r3, #4]
 8006a64:	bb62      	cbnz	r2, 8006ac0 <_malloc_r+0xdc>
 8006a66:	f8c8 7000 	str.w	r7, [r8]
 8006a6a:	e00f      	b.n	8006a8c <_malloc_r+0xa8>
 8006a6c:	6822      	ldr	r2, [r4, #0]
 8006a6e:	1b52      	subs	r2, r2, r5
 8006a70:	d420      	bmi.n	8006ab4 <_malloc_r+0xd0>
 8006a72:	2a0b      	cmp	r2, #11
 8006a74:	d917      	bls.n	8006aa6 <_malloc_r+0xc2>
 8006a76:	1961      	adds	r1, r4, r5
 8006a78:	42a3      	cmp	r3, r4
 8006a7a:	6025      	str	r5, [r4, #0]
 8006a7c:	bf18      	it	ne
 8006a7e:	6059      	strne	r1, [r3, #4]
 8006a80:	6863      	ldr	r3, [r4, #4]
 8006a82:	bf08      	it	eq
 8006a84:	f8c8 1000 	streq.w	r1, [r8]
 8006a88:	5162      	str	r2, [r4, r5]
 8006a8a:	604b      	str	r3, [r1, #4]
 8006a8c:	4630      	mov	r0, r6
 8006a8e:	f000 f82f 	bl	8006af0 <__malloc_unlock>
 8006a92:	f104 000b 	add.w	r0, r4, #11
 8006a96:	1d23      	adds	r3, r4, #4
 8006a98:	f020 0007 	bic.w	r0, r0, #7
 8006a9c:	1ac2      	subs	r2, r0, r3
 8006a9e:	bf1c      	itt	ne
 8006aa0:	1a1b      	subne	r3, r3, r0
 8006aa2:	50a3      	strne	r3, [r4, r2]
 8006aa4:	e7af      	b.n	8006a06 <_malloc_r+0x22>
 8006aa6:	6862      	ldr	r2, [r4, #4]
 8006aa8:	42a3      	cmp	r3, r4
 8006aaa:	bf0c      	ite	eq
 8006aac:	f8c8 2000 	streq.w	r2, [r8]
 8006ab0:	605a      	strne	r2, [r3, #4]
 8006ab2:	e7eb      	b.n	8006a8c <_malloc_r+0xa8>
 8006ab4:	4623      	mov	r3, r4
 8006ab6:	6864      	ldr	r4, [r4, #4]
 8006ab8:	e7ae      	b.n	8006a18 <_malloc_r+0x34>
 8006aba:	463c      	mov	r4, r7
 8006abc:	687f      	ldr	r7, [r7, #4]
 8006abe:	e7b6      	b.n	8006a2e <_malloc_r+0x4a>
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	42a3      	cmp	r3, r4
 8006ac6:	d1fb      	bne.n	8006ac0 <_malloc_r+0xdc>
 8006ac8:	2300      	movs	r3, #0
 8006aca:	6053      	str	r3, [r2, #4]
 8006acc:	e7de      	b.n	8006a8c <_malloc_r+0xa8>
 8006ace:	230c      	movs	r3, #12
 8006ad0:	6033      	str	r3, [r6, #0]
 8006ad2:	4630      	mov	r0, r6
 8006ad4:	f000 f80c 	bl	8006af0 <__malloc_unlock>
 8006ad8:	e794      	b.n	8006a04 <_malloc_r+0x20>
 8006ada:	6005      	str	r5, [r0, #0]
 8006adc:	e7d6      	b.n	8006a8c <_malloc_r+0xa8>
 8006ade:	bf00      	nop
 8006ae0:	20000ef0 	.word	0x20000ef0

08006ae4 <__malloc_lock>:
 8006ae4:	4801      	ldr	r0, [pc, #4]	@ (8006aec <__malloc_lock+0x8>)
 8006ae6:	f000 be90 	b.w	800780a <__retarget_lock_acquire_recursive>
 8006aea:	bf00      	nop
 8006aec:	20001034 	.word	0x20001034

08006af0 <__malloc_unlock>:
 8006af0:	4801      	ldr	r0, [pc, #4]	@ (8006af8 <__malloc_unlock+0x8>)
 8006af2:	f000 be8b 	b.w	800780c <__retarget_lock_release_recursive>
 8006af6:	bf00      	nop
 8006af8:	20001034 	.word	0x20001034

08006afc <realloc>:
 8006afc:	4b02      	ldr	r3, [pc, #8]	@ (8006b08 <realloc+0xc>)
 8006afe:	460a      	mov	r2, r1
 8006b00:	4601      	mov	r1, r0
 8006b02:	6818      	ldr	r0, [r3, #0]
 8006b04:	f000 b802 	b.w	8006b0c <_realloc_r>
 8006b08:	20000178 	.word	0x20000178

08006b0c <_realloc_r>:
 8006b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b10:	4680      	mov	r8, r0
 8006b12:	4615      	mov	r5, r2
 8006b14:	460c      	mov	r4, r1
 8006b16:	b921      	cbnz	r1, 8006b22 <_realloc_r+0x16>
 8006b18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b1c:	4611      	mov	r1, r2
 8006b1e:	f7ff bf61 	b.w	80069e4 <_malloc_r>
 8006b22:	b92a      	cbnz	r2, 8006b30 <_realloc_r+0x24>
 8006b24:	f001 fcd0 	bl	80084c8 <_free_r>
 8006b28:	2400      	movs	r4, #0
 8006b2a:	4620      	mov	r0, r4
 8006b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b30:	f002 f896 	bl	8008c60 <_malloc_usable_size_r>
 8006b34:	4285      	cmp	r5, r0
 8006b36:	4606      	mov	r6, r0
 8006b38:	d802      	bhi.n	8006b40 <_realloc_r+0x34>
 8006b3a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006b3e:	d8f4      	bhi.n	8006b2a <_realloc_r+0x1e>
 8006b40:	4629      	mov	r1, r5
 8006b42:	4640      	mov	r0, r8
 8006b44:	f7ff ff4e 	bl	80069e4 <_malloc_r>
 8006b48:	4607      	mov	r7, r0
 8006b4a:	2800      	cmp	r0, #0
 8006b4c:	d0ec      	beq.n	8006b28 <_realloc_r+0x1c>
 8006b4e:	42b5      	cmp	r5, r6
 8006b50:	462a      	mov	r2, r5
 8006b52:	4621      	mov	r1, r4
 8006b54:	bf28      	it	cs
 8006b56:	4632      	movcs	r2, r6
 8006b58:	f000 fe59 	bl	800780e <memcpy>
 8006b5c:	4621      	mov	r1, r4
 8006b5e:	4640      	mov	r0, r8
 8006b60:	f001 fcb2 	bl	80084c8 <_free_r>
 8006b64:	463c      	mov	r4, r7
 8006b66:	e7e0      	b.n	8006b2a <_realloc_r+0x1e>

08006b68 <__cvt>:
 8006b68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b6c:	ec57 6b10 	vmov	r6, r7, d0
 8006b70:	2f00      	cmp	r7, #0
 8006b72:	460c      	mov	r4, r1
 8006b74:	4619      	mov	r1, r3
 8006b76:	463b      	mov	r3, r7
 8006b78:	bfbb      	ittet	lt
 8006b7a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006b7e:	461f      	movlt	r7, r3
 8006b80:	2300      	movge	r3, #0
 8006b82:	232d      	movlt	r3, #45	@ 0x2d
 8006b84:	700b      	strb	r3, [r1, #0]
 8006b86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006b88:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006b8c:	4691      	mov	r9, r2
 8006b8e:	f023 0820 	bic.w	r8, r3, #32
 8006b92:	bfbc      	itt	lt
 8006b94:	4632      	movlt	r2, r6
 8006b96:	4616      	movlt	r6, r2
 8006b98:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006b9c:	d005      	beq.n	8006baa <__cvt+0x42>
 8006b9e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006ba2:	d100      	bne.n	8006ba6 <__cvt+0x3e>
 8006ba4:	3401      	adds	r4, #1
 8006ba6:	2102      	movs	r1, #2
 8006ba8:	e000      	b.n	8006bac <__cvt+0x44>
 8006baa:	2103      	movs	r1, #3
 8006bac:	ab03      	add	r3, sp, #12
 8006bae:	9301      	str	r3, [sp, #4]
 8006bb0:	ab02      	add	r3, sp, #8
 8006bb2:	9300      	str	r3, [sp, #0]
 8006bb4:	ec47 6b10 	vmov	d0, r6, r7
 8006bb8:	4653      	mov	r3, sl
 8006bba:	4622      	mov	r2, r4
 8006bbc:	f000 fec0 	bl	8007940 <_dtoa_r>
 8006bc0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006bc4:	4605      	mov	r5, r0
 8006bc6:	d119      	bne.n	8006bfc <__cvt+0x94>
 8006bc8:	f019 0f01 	tst.w	r9, #1
 8006bcc:	d00e      	beq.n	8006bec <__cvt+0x84>
 8006bce:	eb00 0904 	add.w	r9, r0, r4
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	4630      	mov	r0, r6
 8006bd8:	4639      	mov	r1, r7
 8006bda:	f7f9 ff85 	bl	8000ae8 <__aeabi_dcmpeq>
 8006bde:	b108      	cbz	r0, 8006be4 <__cvt+0x7c>
 8006be0:	f8cd 900c 	str.w	r9, [sp, #12]
 8006be4:	2230      	movs	r2, #48	@ 0x30
 8006be6:	9b03      	ldr	r3, [sp, #12]
 8006be8:	454b      	cmp	r3, r9
 8006bea:	d31e      	bcc.n	8006c2a <__cvt+0xc2>
 8006bec:	9b03      	ldr	r3, [sp, #12]
 8006bee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006bf0:	1b5b      	subs	r3, r3, r5
 8006bf2:	4628      	mov	r0, r5
 8006bf4:	6013      	str	r3, [r2, #0]
 8006bf6:	b004      	add	sp, #16
 8006bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bfc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006c00:	eb00 0904 	add.w	r9, r0, r4
 8006c04:	d1e5      	bne.n	8006bd2 <__cvt+0x6a>
 8006c06:	7803      	ldrb	r3, [r0, #0]
 8006c08:	2b30      	cmp	r3, #48	@ 0x30
 8006c0a:	d10a      	bne.n	8006c22 <__cvt+0xba>
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	2300      	movs	r3, #0
 8006c10:	4630      	mov	r0, r6
 8006c12:	4639      	mov	r1, r7
 8006c14:	f7f9 ff68 	bl	8000ae8 <__aeabi_dcmpeq>
 8006c18:	b918      	cbnz	r0, 8006c22 <__cvt+0xba>
 8006c1a:	f1c4 0401 	rsb	r4, r4, #1
 8006c1e:	f8ca 4000 	str.w	r4, [sl]
 8006c22:	f8da 3000 	ldr.w	r3, [sl]
 8006c26:	4499      	add	r9, r3
 8006c28:	e7d3      	b.n	8006bd2 <__cvt+0x6a>
 8006c2a:	1c59      	adds	r1, r3, #1
 8006c2c:	9103      	str	r1, [sp, #12]
 8006c2e:	701a      	strb	r2, [r3, #0]
 8006c30:	e7d9      	b.n	8006be6 <__cvt+0x7e>

08006c32 <__exponent>:
 8006c32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c34:	2900      	cmp	r1, #0
 8006c36:	bfba      	itte	lt
 8006c38:	4249      	neglt	r1, r1
 8006c3a:	232d      	movlt	r3, #45	@ 0x2d
 8006c3c:	232b      	movge	r3, #43	@ 0x2b
 8006c3e:	2909      	cmp	r1, #9
 8006c40:	7002      	strb	r2, [r0, #0]
 8006c42:	7043      	strb	r3, [r0, #1]
 8006c44:	dd29      	ble.n	8006c9a <__exponent+0x68>
 8006c46:	f10d 0307 	add.w	r3, sp, #7
 8006c4a:	461d      	mov	r5, r3
 8006c4c:	270a      	movs	r7, #10
 8006c4e:	461a      	mov	r2, r3
 8006c50:	fbb1 f6f7 	udiv	r6, r1, r7
 8006c54:	fb07 1416 	mls	r4, r7, r6, r1
 8006c58:	3430      	adds	r4, #48	@ 0x30
 8006c5a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006c5e:	460c      	mov	r4, r1
 8006c60:	2c63      	cmp	r4, #99	@ 0x63
 8006c62:	f103 33ff 	add.w	r3, r3, #4294967295
 8006c66:	4631      	mov	r1, r6
 8006c68:	dcf1      	bgt.n	8006c4e <__exponent+0x1c>
 8006c6a:	3130      	adds	r1, #48	@ 0x30
 8006c6c:	1e94      	subs	r4, r2, #2
 8006c6e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006c72:	1c41      	adds	r1, r0, #1
 8006c74:	4623      	mov	r3, r4
 8006c76:	42ab      	cmp	r3, r5
 8006c78:	d30a      	bcc.n	8006c90 <__exponent+0x5e>
 8006c7a:	f10d 0309 	add.w	r3, sp, #9
 8006c7e:	1a9b      	subs	r3, r3, r2
 8006c80:	42ac      	cmp	r4, r5
 8006c82:	bf88      	it	hi
 8006c84:	2300      	movhi	r3, #0
 8006c86:	3302      	adds	r3, #2
 8006c88:	4403      	add	r3, r0
 8006c8a:	1a18      	subs	r0, r3, r0
 8006c8c:	b003      	add	sp, #12
 8006c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c90:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006c94:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006c98:	e7ed      	b.n	8006c76 <__exponent+0x44>
 8006c9a:	2330      	movs	r3, #48	@ 0x30
 8006c9c:	3130      	adds	r1, #48	@ 0x30
 8006c9e:	7083      	strb	r3, [r0, #2]
 8006ca0:	70c1      	strb	r1, [r0, #3]
 8006ca2:	1d03      	adds	r3, r0, #4
 8006ca4:	e7f1      	b.n	8006c8a <__exponent+0x58>
	...

08006ca8 <_printf_float>:
 8006ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cac:	b08d      	sub	sp, #52	@ 0x34
 8006cae:	460c      	mov	r4, r1
 8006cb0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006cb4:	4616      	mov	r6, r2
 8006cb6:	461f      	mov	r7, r3
 8006cb8:	4605      	mov	r5, r0
 8006cba:	f000 fd21 	bl	8007700 <_localeconv_r>
 8006cbe:	6803      	ldr	r3, [r0, #0]
 8006cc0:	9304      	str	r3, [sp, #16]
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f7f9 fae4 	bl	8000290 <strlen>
 8006cc8:	2300      	movs	r3, #0
 8006cca:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ccc:	f8d8 3000 	ldr.w	r3, [r8]
 8006cd0:	9005      	str	r0, [sp, #20]
 8006cd2:	3307      	adds	r3, #7
 8006cd4:	f023 0307 	bic.w	r3, r3, #7
 8006cd8:	f103 0208 	add.w	r2, r3, #8
 8006cdc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006ce0:	f8d4 b000 	ldr.w	fp, [r4]
 8006ce4:	f8c8 2000 	str.w	r2, [r8]
 8006ce8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006cec:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006cf0:	9307      	str	r3, [sp, #28]
 8006cf2:	f8cd 8018 	str.w	r8, [sp, #24]
 8006cf6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006cfa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006cfe:	4b9c      	ldr	r3, [pc, #624]	@ (8006f70 <_printf_float+0x2c8>)
 8006d00:	f04f 32ff 	mov.w	r2, #4294967295
 8006d04:	f7f9 ff22 	bl	8000b4c <__aeabi_dcmpun>
 8006d08:	bb70      	cbnz	r0, 8006d68 <_printf_float+0xc0>
 8006d0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d0e:	4b98      	ldr	r3, [pc, #608]	@ (8006f70 <_printf_float+0x2c8>)
 8006d10:	f04f 32ff 	mov.w	r2, #4294967295
 8006d14:	f7f9 fefc 	bl	8000b10 <__aeabi_dcmple>
 8006d18:	bb30      	cbnz	r0, 8006d68 <_printf_float+0xc0>
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	4640      	mov	r0, r8
 8006d20:	4649      	mov	r1, r9
 8006d22:	f7f9 feeb 	bl	8000afc <__aeabi_dcmplt>
 8006d26:	b110      	cbz	r0, 8006d2e <_printf_float+0x86>
 8006d28:	232d      	movs	r3, #45	@ 0x2d
 8006d2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d2e:	4a91      	ldr	r2, [pc, #580]	@ (8006f74 <_printf_float+0x2cc>)
 8006d30:	4b91      	ldr	r3, [pc, #580]	@ (8006f78 <_printf_float+0x2d0>)
 8006d32:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006d36:	bf94      	ite	ls
 8006d38:	4690      	movls	r8, r2
 8006d3a:	4698      	movhi	r8, r3
 8006d3c:	2303      	movs	r3, #3
 8006d3e:	6123      	str	r3, [r4, #16]
 8006d40:	f02b 0304 	bic.w	r3, fp, #4
 8006d44:	6023      	str	r3, [r4, #0]
 8006d46:	f04f 0900 	mov.w	r9, #0
 8006d4a:	9700      	str	r7, [sp, #0]
 8006d4c:	4633      	mov	r3, r6
 8006d4e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006d50:	4621      	mov	r1, r4
 8006d52:	4628      	mov	r0, r5
 8006d54:	f000 f9d2 	bl	80070fc <_printf_common>
 8006d58:	3001      	adds	r0, #1
 8006d5a:	f040 808d 	bne.w	8006e78 <_printf_float+0x1d0>
 8006d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8006d62:	b00d      	add	sp, #52	@ 0x34
 8006d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d68:	4642      	mov	r2, r8
 8006d6a:	464b      	mov	r3, r9
 8006d6c:	4640      	mov	r0, r8
 8006d6e:	4649      	mov	r1, r9
 8006d70:	f7f9 feec 	bl	8000b4c <__aeabi_dcmpun>
 8006d74:	b140      	cbz	r0, 8006d88 <_printf_float+0xe0>
 8006d76:	464b      	mov	r3, r9
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	bfbc      	itt	lt
 8006d7c:	232d      	movlt	r3, #45	@ 0x2d
 8006d7e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006d82:	4a7e      	ldr	r2, [pc, #504]	@ (8006f7c <_printf_float+0x2d4>)
 8006d84:	4b7e      	ldr	r3, [pc, #504]	@ (8006f80 <_printf_float+0x2d8>)
 8006d86:	e7d4      	b.n	8006d32 <_printf_float+0x8a>
 8006d88:	6863      	ldr	r3, [r4, #4]
 8006d8a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006d8e:	9206      	str	r2, [sp, #24]
 8006d90:	1c5a      	adds	r2, r3, #1
 8006d92:	d13b      	bne.n	8006e0c <_printf_float+0x164>
 8006d94:	2306      	movs	r3, #6
 8006d96:	6063      	str	r3, [r4, #4]
 8006d98:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	6022      	str	r2, [r4, #0]
 8006da0:	9303      	str	r3, [sp, #12]
 8006da2:	ab0a      	add	r3, sp, #40	@ 0x28
 8006da4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006da8:	ab09      	add	r3, sp, #36	@ 0x24
 8006daa:	9300      	str	r3, [sp, #0]
 8006dac:	6861      	ldr	r1, [r4, #4]
 8006dae:	ec49 8b10 	vmov	d0, r8, r9
 8006db2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006db6:	4628      	mov	r0, r5
 8006db8:	f7ff fed6 	bl	8006b68 <__cvt>
 8006dbc:	9b06      	ldr	r3, [sp, #24]
 8006dbe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006dc0:	2b47      	cmp	r3, #71	@ 0x47
 8006dc2:	4680      	mov	r8, r0
 8006dc4:	d129      	bne.n	8006e1a <_printf_float+0x172>
 8006dc6:	1cc8      	adds	r0, r1, #3
 8006dc8:	db02      	blt.n	8006dd0 <_printf_float+0x128>
 8006dca:	6863      	ldr	r3, [r4, #4]
 8006dcc:	4299      	cmp	r1, r3
 8006dce:	dd41      	ble.n	8006e54 <_printf_float+0x1ac>
 8006dd0:	f1aa 0a02 	sub.w	sl, sl, #2
 8006dd4:	fa5f fa8a 	uxtb.w	sl, sl
 8006dd8:	3901      	subs	r1, #1
 8006dda:	4652      	mov	r2, sl
 8006ddc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006de0:	9109      	str	r1, [sp, #36]	@ 0x24
 8006de2:	f7ff ff26 	bl	8006c32 <__exponent>
 8006de6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006de8:	1813      	adds	r3, r2, r0
 8006dea:	2a01      	cmp	r2, #1
 8006dec:	4681      	mov	r9, r0
 8006dee:	6123      	str	r3, [r4, #16]
 8006df0:	dc02      	bgt.n	8006df8 <_printf_float+0x150>
 8006df2:	6822      	ldr	r2, [r4, #0]
 8006df4:	07d2      	lsls	r2, r2, #31
 8006df6:	d501      	bpl.n	8006dfc <_printf_float+0x154>
 8006df8:	3301      	adds	r3, #1
 8006dfa:	6123      	str	r3, [r4, #16]
 8006dfc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d0a2      	beq.n	8006d4a <_printf_float+0xa2>
 8006e04:	232d      	movs	r3, #45	@ 0x2d
 8006e06:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e0a:	e79e      	b.n	8006d4a <_printf_float+0xa2>
 8006e0c:	9a06      	ldr	r2, [sp, #24]
 8006e0e:	2a47      	cmp	r2, #71	@ 0x47
 8006e10:	d1c2      	bne.n	8006d98 <_printf_float+0xf0>
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d1c0      	bne.n	8006d98 <_printf_float+0xf0>
 8006e16:	2301      	movs	r3, #1
 8006e18:	e7bd      	b.n	8006d96 <_printf_float+0xee>
 8006e1a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006e1e:	d9db      	bls.n	8006dd8 <_printf_float+0x130>
 8006e20:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006e24:	d118      	bne.n	8006e58 <_printf_float+0x1b0>
 8006e26:	2900      	cmp	r1, #0
 8006e28:	6863      	ldr	r3, [r4, #4]
 8006e2a:	dd0b      	ble.n	8006e44 <_printf_float+0x19c>
 8006e2c:	6121      	str	r1, [r4, #16]
 8006e2e:	b913      	cbnz	r3, 8006e36 <_printf_float+0x18e>
 8006e30:	6822      	ldr	r2, [r4, #0]
 8006e32:	07d0      	lsls	r0, r2, #31
 8006e34:	d502      	bpl.n	8006e3c <_printf_float+0x194>
 8006e36:	3301      	adds	r3, #1
 8006e38:	440b      	add	r3, r1
 8006e3a:	6123      	str	r3, [r4, #16]
 8006e3c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006e3e:	f04f 0900 	mov.w	r9, #0
 8006e42:	e7db      	b.n	8006dfc <_printf_float+0x154>
 8006e44:	b913      	cbnz	r3, 8006e4c <_printf_float+0x1a4>
 8006e46:	6822      	ldr	r2, [r4, #0]
 8006e48:	07d2      	lsls	r2, r2, #31
 8006e4a:	d501      	bpl.n	8006e50 <_printf_float+0x1a8>
 8006e4c:	3302      	adds	r3, #2
 8006e4e:	e7f4      	b.n	8006e3a <_printf_float+0x192>
 8006e50:	2301      	movs	r3, #1
 8006e52:	e7f2      	b.n	8006e3a <_printf_float+0x192>
 8006e54:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006e58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e5a:	4299      	cmp	r1, r3
 8006e5c:	db05      	blt.n	8006e6a <_printf_float+0x1c2>
 8006e5e:	6823      	ldr	r3, [r4, #0]
 8006e60:	6121      	str	r1, [r4, #16]
 8006e62:	07d8      	lsls	r0, r3, #31
 8006e64:	d5ea      	bpl.n	8006e3c <_printf_float+0x194>
 8006e66:	1c4b      	adds	r3, r1, #1
 8006e68:	e7e7      	b.n	8006e3a <_printf_float+0x192>
 8006e6a:	2900      	cmp	r1, #0
 8006e6c:	bfd4      	ite	le
 8006e6e:	f1c1 0202 	rsble	r2, r1, #2
 8006e72:	2201      	movgt	r2, #1
 8006e74:	4413      	add	r3, r2
 8006e76:	e7e0      	b.n	8006e3a <_printf_float+0x192>
 8006e78:	6823      	ldr	r3, [r4, #0]
 8006e7a:	055a      	lsls	r2, r3, #21
 8006e7c:	d407      	bmi.n	8006e8e <_printf_float+0x1e6>
 8006e7e:	6923      	ldr	r3, [r4, #16]
 8006e80:	4642      	mov	r2, r8
 8006e82:	4631      	mov	r1, r6
 8006e84:	4628      	mov	r0, r5
 8006e86:	47b8      	blx	r7
 8006e88:	3001      	adds	r0, #1
 8006e8a:	d12b      	bne.n	8006ee4 <_printf_float+0x23c>
 8006e8c:	e767      	b.n	8006d5e <_printf_float+0xb6>
 8006e8e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006e92:	f240 80dd 	bls.w	8007050 <_printf_float+0x3a8>
 8006e96:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	f7f9 fe23 	bl	8000ae8 <__aeabi_dcmpeq>
 8006ea2:	2800      	cmp	r0, #0
 8006ea4:	d033      	beq.n	8006f0e <_printf_float+0x266>
 8006ea6:	4a37      	ldr	r2, [pc, #220]	@ (8006f84 <_printf_float+0x2dc>)
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	4631      	mov	r1, r6
 8006eac:	4628      	mov	r0, r5
 8006eae:	47b8      	blx	r7
 8006eb0:	3001      	adds	r0, #1
 8006eb2:	f43f af54 	beq.w	8006d5e <_printf_float+0xb6>
 8006eb6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006eba:	4543      	cmp	r3, r8
 8006ebc:	db02      	blt.n	8006ec4 <_printf_float+0x21c>
 8006ebe:	6823      	ldr	r3, [r4, #0]
 8006ec0:	07d8      	lsls	r0, r3, #31
 8006ec2:	d50f      	bpl.n	8006ee4 <_printf_float+0x23c>
 8006ec4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ec8:	4631      	mov	r1, r6
 8006eca:	4628      	mov	r0, r5
 8006ecc:	47b8      	blx	r7
 8006ece:	3001      	adds	r0, #1
 8006ed0:	f43f af45 	beq.w	8006d5e <_printf_float+0xb6>
 8006ed4:	f04f 0900 	mov.w	r9, #0
 8006ed8:	f108 38ff 	add.w	r8, r8, #4294967295
 8006edc:	f104 0a1a 	add.w	sl, r4, #26
 8006ee0:	45c8      	cmp	r8, r9
 8006ee2:	dc09      	bgt.n	8006ef8 <_printf_float+0x250>
 8006ee4:	6823      	ldr	r3, [r4, #0]
 8006ee6:	079b      	lsls	r3, r3, #30
 8006ee8:	f100 8103 	bmi.w	80070f2 <_printf_float+0x44a>
 8006eec:	68e0      	ldr	r0, [r4, #12]
 8006eee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ef0:	4298      	cmp	r0, r3
 8006ef2:	bfb8      	it	lt
 8006ef4:	4618      	movlt	r0, r3
 8006ef6:	e734      	b.n	8006d62 <_printf_float+0xba>
 8006ef8:	2301      	movs	r3, #1
 8006efa:	4652      	mov	r2, sl
 8006efc:	4631      	mov	r1, r6
 8006efe:	4628      	mov	r0, r5
 8006f00:	47b8      	blx	r7
 8006f02:	3001      	adds	r0, #1
 8006f04:	f43f af2b 	beq.w	8006d5e <_printf_float+0xb6>
 8006f08:	f109 0901 	add.w	r9, r9, #1
 8006f0c:	e7e8      	b.n	8006ee0 <_printf_float+0x238>
 8006f0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	dc39      	bgt.n	8006f88 <_printf_float+0x2e0>
 8006f14:	4a1b      	ldr	r2, [pc, #108]	@ (8006f84 <_printf_float+0x2dc>)
 8006f16:	2301      	movs	r3, #1
 8006f18:	4631      	mov	r1, r6
 8006f1a:	4628      	mov	r0, r5
 8006f1c:	47b8      	blx	r7
 8006f1e:	3001      	adds	r0, #1
 8006f20:	f43f af1d 	beq.w	8006d5e <_printf_float+0xb6>
 8006f24:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006f28:	ea59 0303 	orrs.w	r3, r9, r3
 8006f2c:	d102      	bne.n	8006f34 <_printf_float+0x28c>
 8006f2e:	6823      	ldr	r3, [r4, #0]
 8006f30:	07d9      	lsls	r1, r3, #31
 8006f32:	d5d7      	bpl.n	8006ee4 <_printf_float+0x23c>
 8006f34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f38:	4631      	mov	r1, r6
 8006f3a:	4628      	mov	r0, r5
 8006f3c:	47b8      	blx	r7
 8006f3e:	3001      	adds	r0, #1
 8006f40:	f43f af0d 	beq.w	8006d5e <_printf_float+0xb6>
 8006f44:	f04f 0a00 	mov.w	sl, #0
 8006f48:	f104 0b1a 	add.w	fp, r4, #26
 8006f4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f4e:	425b      	negs	r3, r3
 8006f50:	4553      	cmp	r3, sl
 8006f52:	dc01      	bgt.n	8006f58 <_printf_float+0x2b0>
 8006f54:	464b      	mov	r3, r9
 8006f56:	e793      	b.n	8006e80 <_printf_float+0x1d8>
 8006f58:	2301      	movs	r3, #1
 8006f5a:	465a      	mov	r2, fp
 8006f5c:	4631      	mov	r1, r6
 8006f5e:	4628      	mov	r0, r5
 8006f60:	47b8      	blx	r7
 8006f62:	3001      	adds	r0, #1
 8006f64:	f43f aefb 	beq.w	8006d5e <_printf_float+0xb6>
 8006f68:	f10a 0a01 	add.w	sl, sl, #1
 8006f6c:	e7ee      	b.n	8006f4c <_printf_float+0x2a4>
 8006f6e:	bf00      	nop
 8006f70:	7fefffff 	.word	0x7fefffff
 8006f74:	080098b0 	.word	0x080098b0
 8006f78:	080098b4 	.word	0x080098b4
 8006f7c:	080098b8 	.word	0x080098b8
 8006f80:	080098bc 	.word	0x080098bc
 8006f84:	080098c0 	.word	0x080098c0
 8006f88:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006f8a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006f8e:	4553      	cmp	r3, sl
 8006f90:	bfa8      	it	ge
 8006f92:	4653      	movge	r3, sl
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	4699      	mov	r9, r3
 8006f98:	dc36      	bgt.n	8007008 <_printf_float+0x360>
 8006f9a:	f04f 0b00 	mov.w	fp, #0
 8006f9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006fa2:	f104 021a 	add.w	r2, r4, #26
 8006fa6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006fa8:	9306      	str	r3, [sp, #24]
 8006faa:	eba3 0309 	sub.w	r3, r3, r9
 8006fae:	455b      	cmp	r3, fp
 8006fb0:	dc31      	bgt.n	8007016 <_printf_float+0x36e>
 8006fb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fb4:	459a      	cmp	sl, r3
 8006fb6:	dc3a      	bgt.n	800702e <_printf_float+0x386>
 8006fb8:	6823      	ldr	r3, [r4, #0]
 8006fba:	07da      	lsls	r2, r3, #31
 8006fbc:	d437      	bmi.n	800702e <_printf_float+0x386>
 8006fbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fc0:	ebaa 0903 	sub.w	r9, sl, r3
 8006fc4:	9b06      	ldr	r3, [sp, #24]
 8006fc6:	ebaa 0303 	sub.w	r3, sl, r3
 8006fca:	4599      	cmp	r9, r3
 8006fcc:	bfa8      	it	ge
 8006fce:	4699      	movge	r9, r3
 8006fd0:	f1b9 0f00 	cmp.w	r9, #0
 8006fd4:	dc33      	bgt.n	800703e <_printf_float+0x396>
 8006fd6:	f04f 0800 	mov.w	r8, #0
 8006fda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006fde:	f104 0b1a 	add.w	fp, r4, #26
 8006fe2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fe4:	ebaa 0303 	sub.w	r3, sl, r3
 8006fe8:	eba3 0309 	sub.w	r3, r3, r9
 8006fec:	4543      	cmp	r3, r8
 8006fee:	f77f af79 	ble.w	8006ee4 <_printf_float+0x23c>
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	465a      	mov	r2, fp
 8006ff6:	4631      	mov	r1, r6
 8006ff8:	4628      	mov	r0, r5
 8006ffa:	47b8      	blx	r7
 8006ffc:	3001      	adds	r0, #1
 8006ffe:	f43f aeae 	beq.w	8006d5e <_printf_float+0xb6>
 8007002:	f108 0801 	add.w	r8, r8, #1
 8007006:	e7ec      	b.n	8006fe2 <_printf_float+0x33a>
 8007008:	4642      	mov	r2, r8
 800700a:	4631      	mov	r1, r6
 800700c:	4628      	mov	r0, r5
 800700e:	47b8      	blx	r7
 8007010:	3001      	adds	r0, #1
 8007012:	d1c2      	bne.n	8006f9a <_printf_float+0x2f2>
 8007014:	e6a3      	b.n	8006d5e <_printf_float+0xb6>
 8007016:	2301      	movs	r3, #1
 8007018:	4631      	mov	r1, r6
 800701a:	4628      	mov	r0, r5
 800701c:	9206      	str	r2, [sp, #24]
 800701e:	47b8      	blx	r7
 8007020:	3001      	adds	r0, #1
 8007022:	f43f ae9c 	beq.w	8006d5e <_printf_float+0xb6>
 8007026:	9a06      	ldr	r2, [sp, #24]
 8007028:	f10b 0b01 	add.w	fp, fp, #1
 800702c:	e7bb      	b.n	8006fa6 <_printf_float+0x2fe>
 800702e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007032:	4631      	mov	r1, r6
 8007034:	4628      	mov	r0, r5
 8007036:	47b8      	blx	r7
 8007038:	3001      	adds	r0, #1
 800703a:	d1c0      	bne.n	8006fbe <_printf_float+0x316>
 800703c:	e68f      	b.n	8006d5e <_printf_float+0xb6>
 800703e:	9a06      	ldr	r2, [sp, #24]
 8007040:	464b      	mov	r3, r9
 8007042:	4442      	add	r2, r8
 8007044:	4631      	mov	r1, r6
 8007046:	4628      	mov	r0, r5
 8007048:	47b8      	blx	r7
 800704a:	3001      	adds	r0, #1
 800704c:	d1c3      	bne.n	8006fd6 <_printf_float+0x32e>
 800704e:	e686      	b.n	8006d5e <_printf_float+0xb6>
 8007050:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007054:	f1ba 0f01 	cmp.w	sl, #1
 8007058:	dc01      	bgt.n	800705e <_printf_float+0x3b6>
 800705a:	07db      	lsls	r3, r3, #31
 800705c:	d536      	bpl.n	80070cc <_printf_float+0x424>
 800705e:	2301      	movs	r3, #1
 8007060:	4642      	mov	r2, r8
 8007062:	4631      	mov	r1, r6
 8007064:	4628      	mov	r0, r5
 8007066:	47b8      	blx	r7
 8007068:	3001      	adds	r0, #1
 800706a:	f43f ae78 	beq.w	8006d5e <_printf_float+0xb6>
 800706e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007072:	4631      	mov	r1, r6
 8007074:	4628      	mov	r0, r5
 8007076:	47b8      	blx	r7
 8007078:	3001      	adds	r0, #1
 800707a:	f43f ae70 	beq.w	8006d5e <_printf_float+0xb6>
 800707e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007082:	2200      	movs	r2, #0
 8007084:	2300      	movs	r3, #0
 8007086:	f10a 3aff 	add.w	sl, sl, #4294967295
 800708a:	f7f9 fd2d 	bl	8000ae8 <__aeabi_dcmpeq>
 800708e:	b9c0      	cbnz	r0, 80070c2 <_printf_float+0x41a>
 8007090:	4653      	mov	r3, sl
 8007092:	f108 0201 	add.w	r2, r8, #1
 8007096:	4631      	mov	r1, r6
 8007098:	4628      	mov	r0, r5
 800709a:	47b8      	blx	r7
 800709c:	3001      	adds	r0, #1
 800709e:	d10c      	bne.n	80070ba <_printf_float+0x412>
 80070a0:	e65d      	b.n	8006d5e <_printf_float+0xb6>
 80070a2:	2301      	movs	r3, #1
 80070a4:	465a      	mov	r2, fp
 80070a6:	4631      	mov	r1, r6
 80070a8:	4628      	mov	r0, r5
 80070aa:	47b8      	blx	r7
 80070ac:	3001      	adds	r0, #1
 80070ae:	f43f ae56 	beq.w	8006d5e <_printf_float+0xb6>
 80070b2:	f108 0801 	add.w	r8, r8, #1
 80070b6:	45d0      	cmp	r8, sl
 80070b8:	dbf3      	blt.n	80070a2 <_printf_float+0x3fa>
 80070ba:	464b      	mov	r3, r9
 80070bc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80070c0:	e6df      	b.n	8006e82 <_printf_float+0x1da>
 80070c2:	f04f 0800 	mov.w	r8, #0
 80070c6:	f104 0b1a 	add.w	fp, r4, #26
 80070ca:	e7f4      	b.n	80070b6 <_printf_float+0x40e>
 80070cc:	2301      	movs	r3, #1
 80070ce:	4642      	mov	r2, r8
 80070d0:	e7e1      	b.n	8007096 <_printf_float+0x3ee>
 80070d2:	2301      	movs	r3, #1
 80070d4:	464a      	mov	r2, r9
 80070d6:	4631      	mov	r1, r6
 80070d8:	4628      	mov	r0, r5
 80070da:	47b8      	blx	r7
 80070dc:	3001      	adds	r0, #1
 80070de:	f43f ae3e 	beq.w	8006d5e <_printf_float+0xb6>
 80070e2:	f108 0801 	add.w	r8, r8, #1
 80070e6:	68e3      	ldr	r3, [r4, #12]
 80070e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80070ea:	1a5b      	subs	r3, r3, r1
 80070ec:	4543      	cmp	r3, r8
 80070ee:	dcf0      	bgt.n	80070d2 <_printf_float+0x42a>
 80070f0:	e6fc      	b.n	8006eec <_printf_float+0x244>
 80070f2:	f04f 0800 	mov.w	r8, #0
 80070f6:	f104 0919 	add.w	r9, r4, #25
 80070fa:	e7f4      	b.n	80070e6 <_printf_float+0x43e>

080070fc <_printf_common>:
 80070fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007100:	4616      	mov	r6, r2
 8007102:	4698      	mov	r8, r3
 8007104:	688a      	ldr	r2, [r1, #8]
 8007106:	690b      	ldr	r3, [r1, #16]
 8007108:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800710c:	4293      	cmp	r3, r2
 800710e:	bfb8      	it	lt
 8007110:	4613      	movlt	r3, r2
 8007112:	6033      	str	r3, [r6, #0]
 8007114:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007118:	4607      	mov	r7, r0
 800711a:	460c      	mov	r4, r1
 800711c:	b10a      	cbz	r2, 8007122 <_printf_common+0x26>
 800711e:	3301      	adds	r3, #1
 8007120:	6033      	str	r3, [r6, #0]
 8007122:	6823      	ldr	r3, [r4, #0]
 8007124:	0699      	lsls	r1, r3, #26
 8007126:	bf42      	ittt	mi
 8007128:	6833      	ldrmi	r3, [r6, #0]
 800712a:	3302      	addmi	r3, #2
 800712c:	6033      	strmi	r3, [r6, #0]
 800712e:	6825      	ldr	r5, [r4, #0]
 8007130:	f015 0506 	ands.w	r5, r5, #6
 8007134:	d106      	bne.n	8007144 <_printf_common+0x48>
 8007136:	f104 0a19 	add.w	sl, r4, #25
 800713a:	68e3      	ldr	r3, [r4, #12]
 800713c:	6832      	ldr	r2, [r6, #0]
 800713e:	1a9b      	subs	r3, r3, r2
 8007140:	42ab      	cmp	r3, r5
 8007142:	dc26      	bgt.n	8007192 <_printf_common+0x96>
 8007144:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007148:	6822      	ldr	r2, [r4, #0]
 800714a:	3b00      	subs	r3, #0
 800714c:	bf18      	it	ne
 800714e:	2301      	movne	r3, #1
 8007150:	0692      	lsls	r2, r2, #26
 8007152:	d42b      	bmi.n	80071ac <_printf_common+0xb0>
 8007154:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007158:	4641      	mov	r1, r8
 800715a:	4638      	mov	r0, r7
 800715c:	47c8      	blx	r9
 800715e:	3001      	adds	r0, #1
 8007160:	d01e      	beq.n	80071a0 <_printf_common+0xa4>
 8007162:	6823      	ldr	r3, [r4, #0]
 8007164:	6922      	ldr	r2, [r4, #16]
 8007166:	f003 0306 	and.w	r3, r3, #6
 800716a:	2b04      	cmp	r3, #4
 800716c:	bf02      	ittt	eq
 800716e:	68e5      	ldreq	r5, [r4, #12]
 8007170:	6833      	ldreq	r3, [r6, #0]
 8007172:	1aed      	subeq	r5, r5, r3
 8007174:	68a3      	ldr	r3, [r4, #8]
 8007176:	bf0c      	ite	eq
 8007178:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800717c:	2500      	movne	r5, #0
 800717e:	4293      	cmp	r3, r2
 8007180:	bfc4      	itt	gt
 8007182:	1a9b      	subgt	r3, r3, r2
 8007184:	18ed      	addgt	r5, r5, r3
 8007186:	2600      	movs	r6, #0
 8007188:	341a      	adds	r4, #26
 800718a:	42b5      	cmp	r5, r6
 800718c:	d11a      	bne.n	80071c4 <_printf_common+0xc8>
 800718e:	2000      	movs	r0, #0
 8007190:	e008      	b.n	80071a4 <_printf_common+0xa8>
 8007192:	2301      	movs	r3, #1
 8007194:	4652      	mov	r2, sl
 8007196:	4641      	mov	r1, r8
 8007198:	4638      	mov	r0, r7
 800719a:	47c8      	blx	r9
 800719c:	3001      	adds	r0, #1
 800719e:	d103      	bne.n	80071a8 <_printf_common+0xac>
 80071a0:	f04f 30ff 	mov.w	r0, #4294967295
 80071a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071a8:	3501      	adds	r5, #1
 80071aa:	e7c6      	b.n	800713a <_printf_common+0x3e>
 80071ac:	18e1      	adds	r1, r4, r3
 80071ae:	1c5a      	adds	r2, r3, #1
 80071b0:	2030      	movs	r0, #48	@ 0x30
 80071b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80071b6:	4422      	add	r2, r4
 80071b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80071bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80071c0:	3302      	adds	r3, #2
 80071c2:	e7c7      	b.n	8007154 <_printf_common+0x58>
 80071c4:	2301      	movs	r3, #1
 80071c6:	4622      	mov	r2, r4
 80071c8:	4641      	mov	r1, r8
 80071ca:	4638      	mov	r0, r7
 80071cc:	47c8      	blx	r9
 80071ce:	3001      	adds	r0, #1
 80071d0:	d0e6      	beq.n	80071a0 <_printf_common+0xa4>
 80071d2:	3601      	adds	r6, #1
 80071d4:	e7d9      	b.n	800718a <_printf_common+0x8e>
	...

080071d8 <_printf_i>:
 80071d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071dc:	7e0f      	ldrb	r7, [r1, #24]
 80071de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80071e0:	2f78      	cmp	r7, #120	@ 0x78
 80071e2:	4691      	mov	r9, r2
 80071e4:	4680      	mov	r8, r0
 80071e6:	460c      	mov	r4, r1
 80071e8:	469a      	mov	sl, r3
 80071ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80071ee:	d807      	bhi.n	8007200 <_printf_i+0x28>
 80071f0:	2f62      	cmp	r7, #98	@ 0x62
 80071f2:	d80a      	bhi.n	800720a <_printf_i+0x32>
 80071f4:	2f00      	cmp	r7, #0
 80071f6:	f000 80d2 	beq.w	800739e <_printf_i+0x1c6>
 80071fa:	2f58      	cmp	r7, #88	@ 0x58
 80071fc:	f000 80b9 	beq.w	8007372 <_printf_i+0x19a>
 8007200:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007204:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007208:	e03a      	b.n	8007280 <_printf_i+0xa8>
 800720a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800720e:	2b15      	cmp	r3, #21
 8007210:	d8f6      	bhi.n	8007200 <_printf_i+0x28>
 8007212:	a101      	add	r1, pc, #4	@ (adr r1, 8007218 <_printf_i+0x40>)
 8007214:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007218:	08007271 	.word	0x08007271
 800721c:	08007285 	.word	0x08007285
 8007220:	08007201 	.word	0x08007201
 8007224:	08007201 	.word	0x08007201
 8007228:	08007201 	.word	0x08007201
 800722c:	08007201 	.word	0x08007201
 8007230:	08007285 	.word	0x08007285
 8007234:	08007201 	.word	0x08007201
 8007238:	08007201 	.word	0x08007201
 800723c:	08007201 	.word	0x08007201
 8007240:	08007201 	.word	0x08007201
 8007244:	08007385 	.word	0x08007385
 8007248:	080072af 	.word	0x080072af
 800724c:	0800733f 	.word	0x0800733f
 8007250:	08007201 	.word	0x08007201
 8007254:	08007201 	.word	0x08007201
 8007258:	080073a7 	.word	0x080073a7
 800725c:	08007201 	.word	0x08007201
 8007260:	080072af 	.word	0x080072af
 8007264:	08007201 	.word	0x08007201
 8007268:	08007201 	.word	0x08007201
 800726c:	08007347 	.word	0x08007347
 8007270:	6833      	ldr	r3, [r6, #0]
 8007272:	1d1a      	adds	r2, r3, #4
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	6032      	str	r2, [r6, #0]
 8007278:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800727c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007280:	2301      	movs	r3, #1
 8007282:	e09d      	b.n	80073c0 <_printf_i+0x1e8>
 8007284:	6833      	ldr	r3, [r6, #0]
 8007286:	6820      	ldr	r0, [r4, #0]
 8007288:	1d19      	adds	r1, r3, #4
 800728a:	6031      	str	r1, [r6, #0]
 800728c:	0606      	lsls	r6, r0, #24
 800728e:	d501      	bpl.n	8007294 <_printf_i+0xbc>
 8007290:	681d      	ldr	r5, [r3, #0]
 8007292:	e003      	b.n	800729c <_printf_i+0xc4>
 8007294:	0645      	lsls	r5, r0, #25
 8007296:	d5fb      	bpl.n	8007290 <_printf_i+0xb8>
 8007298:	f9b3 5000 	ldrsh.w	r5, [r3]
 800729c:	2d00      	cmp	r5, #0
 800729e:	da03      	bge.n	80072a8 <_printf_i+0xd0>
 80072a0:	232d      	movs	r3, #45	@ 0x2d
 80072a2:	426d      	negs	r5, r5
 80072a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80072a8:	4859      	ldr	r0, [pc, #356]	@ (8007410 <_printf_i+0x238>)
 80072aa:	230a      	movs	r3, #10
 80072ac:	e011      	b.n	80072d2 <_printf_i+0xfa>
 80072ae:	6821      	ldr	r1, [r4, #0]
 80072b0:	6833      	ldr	r3, [r6, #0]
 80072b2:	0608      	lsls	r0, r1, #24
 80072b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80072b8:	d402      	bmi.n	80072c0 <_printf_i+0xe8>
 80072ba:	0649      	lsls	r1, r1, #25
 80072bc:	bf48      	it	mi
 80072be:	b2ad      	uxthmi	r5, r5
 80072c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80072c2:	4853      	ldr	r0, [pc, #332]	@ (8007410 <_printf_i+0x238>)
 80072c4:	6033      	str	r3, [r6, #0]
 80072c6:	bf14      	ite	ne
 80072c8:	230a      	movne	r3, #10
 80072ca:	2308      	moveq	r3, #8
 80072cc:	2100      	movs	r1, #0
 80072ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80072d2:	6866      	ldr	r6, [r4, #4]
 80072d4:	60a6      	str	r6, [r4, #8]
 80072d6:	2e00      	cmp	r6, #0
 80072d8:	bfa2      	ittt	ge
 80072da:	6821      	ldrge	r1, [r4, #0]
 80072dc:	f021 0104 	bicge.w	r1, r1, #4
 80072e0:	6021      	strge	r1, [r4, #0]
 80072e2:	b90d      	cbnz	r5, 80072e8 <_printf_i+0x110>
 80072e4:	2e00      	cmp	r6, #0
 80072e6:	d04b      	beq.n	8007380 <_printf_i+0x1a8>
 80072e8:	4616      	mov	r6, r2
 80072ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80072ee:	fb03 5711 	mls	r7, r3, r1, r5
 80072f2:	5dc7      	ldrb	r7, [r0, r7]
 80072f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80072f8:	462f      	mov	r7, r5
 80072fa:	42bb      	cmp	r3, r7
 80072fc:	460d      	mov	r5, r1
 80072fe:	d9f4      	bls.n	80072ea <_printf_i+0x112>
 8007300:	2b08      	cmp	r3, #8
 8007302:	d10b      	bne.n	800731c <_printf_i+0x144>
 8007304:	6823      	ldr	r3, [r4, #0]
 8007306:	07df      	lsls	r7, r3, #31
 8007308:	d508      	bpl.n	800731c <_printf_i+0x144>
 800730a:	6923      	ldr	r3, [r4, #16]
 800730c:	6861      	ldr	r1, [r4, #4]
 800730e:	4299      	cmp	r1, r3
 8007310:	bfde      	ittt	le
 8007312:	2330      	movle	r3, #48	@ 0x30
 8007314:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007318:	f106 36ff 	addle.w	r6, r6, #4294967295
 800731c:	1b92      	subs	r2, r2, r6
 800731e:	6122      	str	r2, [r4, #16]
 8007320:	f8cd a000 	str.w	sl, [sp]
 8007324:	464b      	mov	r3, r9
 8007326:	aa03      	add	r2, sp, #12
 8007328:	4621      	mov	r1, r4
 800732a:	4640      	mov	r0, r8
 800732c:	f7ff fee6 	bl	80070fc <_printf_common>
 8007330:	3001      	adds	r0, #1
 8007332:	d14a      	bne.n	80073ca <_printf_i+0x1f2>
 8007334:	f04f 30ff 	mov.w	r0, #4294967295
 8007338:	b004      	add	sp, #16
 800733a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800733e:	6823      	ldr	r3, [r4, #0]
 8007340:	f043 0320 	orr.w	r3, r3, #32
 8007344:	6023      	str	r3, [r4, #0]
 8007346:	4833      	ldr	r0, [pc, #204]	@ (8007414 <_printf_i+0x23c>)
 8007348:	2778      	movs	r7, #120	@ 0x78
 800734a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800734e:	6823      	ldr	r3, [r4, #0]
 8007350:	6831      	ldr	r1, [r6, #0]
 8007352:	061f      	lsls	r7, r3, #24
 8007354:	f851 5b04 	ldr.w	r5, [r1], #4
 8007358:	d402      	bmi.n	8007360 <_printf_i+0x188>
 800735a:	065f      	lsls	r7, r3, #25
 800735c:	bf48      	it	mi
 800735e:	b2ad      	uxthmi	r5, r5
 8007360:	6031      	str	r1, [r6, #0]
 8007362:	07d9      	lsls	r1, r3, #31
 8007364:	bf44      	itt	mi
 8007366:	f043 0320 	orrmi.w	r3, r3, #32
 800736a:	6023      	strmi	r3, [r4, #0]
 800736c:	b11d      	cbz	r5, 8007376 <_printf_i+0x19e>
 800736e:	2310      	movs	r3, #16
 8007370:	e7ac      	b.n	80072cc <_printf_i+0xf4>
 8007372:	4827      	ldr	r0, [pc, #156]	@ (8007410 <_printf_i+0x238>)
 8007374:	e7e9      	b.n	800734a <_printf_i+0x172>
 8007376:	6823      	ldr	r3, [r4, #0]
 8007378:	f023 0320 	bic.w	r3, r3, #32
 800737c:	6023      	str	r3, [r4, #0]
 800737e:	e7f6      	b.n	800736e <_printf_i+0x196>
 8007380:	4616      	mov	r6, r2
 8007382:	e7bd      	b.n	8007300 <_printf_i+0x128>
 8007384:	6833      	ldr	r3, [r6, #0]
 8007386:	6825      	ldr	r5, [r4, #0]
 8007388:	6961      	ldr	r1, [r4, #20]
 800738a:	1d18      	adds	r0, r3, #4
 800738c:	6030      	str	r0, [r6, #0]
 800738e:	062e      	lsls	r6, r5, #24
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	d501      	bpl.n	8007398 <_printf_i+0x1c0>
 8007394:	6019      	str	r1, [r3, #0]
 8007396:	e002      	b.n	800739e <_printf_i+0x1c6>
 8007398:	0668      	lsls	r0, r5, #25
 800739a:	d5fb      	bpl.n	8007394 <_printf_i+0x1bc>
 800739c:	8019      	strh	r1, [r3, #0]
 800739e:	2300      	movs	r3, #0
 80073a0:	6123      	str	r3, [r4, #16]
 80073a2:	4616      	mov	r6, r2
 80073a4:	e7bc      	b.n	8007320 <_printf_i+0x148>
 80073a6:	6833      	ldr	r3, [r6, #0]
 80073a8:	1d1a      	adds	r2, r3, #4
 80073aa:	6032      	str	r2, [r6, #0]
 80073ac:	681e      	ldr	r6, [r3, #0]
 80073ae:	6862      	ldr	r2, [r4, #4]
 80073b0:	2100      	movs	r1, #0
 80073b2:	4630      	mov	r0, r6
 80073b4:	f7f8 ff1c 	bl	80001f0 <memchr>
 80073b8:	b108      	cbz	r0, 80073be <_printf_i+0x1e6>
 80073ba:	1b80      	subs	r0, r0, r6
 80073bc:	6060      	str	r0, [r4, #4]
 80073be:	6863      	ldr	r3, [r4, #4]
 80073c0:	6123      	str	r3, [r4, #16]
 80073c2:	2300      	movs	r3, #0
 80073c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80073c8:	e7aa      	b.n	8007320 <_printf_i+0x148>
 80073ca:	6923      	ldr	r3, [r4, #16]
 80073cc:	4632      	mov	r2, r6
 80073ce:	4649      	mov	r1, r9
 80073d0:	4640      	mov	r0, r8
 80073d2:	47d0      	blx	sl
 80073d4:	3001      	adds	r0, #1
 80073d6:	d0ad      	beq.n	8007334 <_printf_i+0x15c>
 80073d8:	6823      	ldr	r3, [r4, #0]
 80073da:	079b      	lsls	r3, r3, #30
 80073dc:	d413      	bmi.n	8007406 <_printf_i+0x22e>
 80073de:	68e0      	ldr	r0, [r4, #12]
 80073e0:	9b03      	ldr	r3, [sp, #12]
 80073e2:	4298      	cmp	r0, r3
 80073e4:	bfb8      	it	lt
 80073e6:	4618      	movlt	r0, r3
 80073e8:	e7a6      	b.n	8007338 <_printf_i+0x160>
 80073ea:	2301      	movs	r3, #1
 80073ec:	4632      	mov	r2, r6
 80073ee:	4649      	mov	r1, r9
 80073f0:	4640      	mov	r0, r8
 80073f2:	47d0      	blx	sl
 80073f4:	3001      	adds	r0, #1
 80073f6:	d09d      	beq.n	8007334 <_printf_i+0x15c>
 80073f8:	3501      	adds	r5, #1
 80073fa:	68e3      	ldr	r3, [r4, #12]
 80073fc:	9903      	ldr	r1, [sp, #12]
 80073fe:	1a5b      	subs	r3, r3, r1
 8007400:	42ab      	cmp	r3, r5
 8007402:	dcf2      	bgt.n	80073ea <_printf_i+0x212>
 8007404:	e7eb      	b.n	80073de <_printf_i+0x206>
 8007406:	2500      	movs	r5, #0
 8007408:	f104 0619 	add.w	r6, r4, #25
 800740c:	e7f5      	b.n	80073fa <_printf_i+0x222>
 800740e:	bf00      	nop
 8007410:	080098c2 	.word	0x080098c2
 8007414:	080098d3 	.word	0x080098d3

08007418 <std>:
 8007418:	2300      	movs	r3, #0
 800741a:	b510      	push	{r4, lr}
 800741c:	4604      	mov	r4, r0
 800741e:	e9c0 3300 	strd	r3, r3, [r0]
 8007422:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007426:	6083      	str	r3, [r0, #8]
 8007428:	8181      	strh	r1, [r0, #12]
 800742a:	6643      	str	r3, [r0, #100]	@ 0x64
 800742c:	81c2      	strh	r2, [r0, #14]
 800742e:	6183      	str	r3, [r0, #24]
 8007430:	4619      	mov	r1, r3
 8007432:	2208      	movs	r2, #8
 8007434:	305c      	adds	r0, #92	@ 0x5c
 8007436:	f000 f948 	bl	80076ca <memset>
 800743a:	4b0d      	ldr	r3, [pc, #52]	@ (8007470 <std+0x58>)
 800743c:	6263      	str	r3, [r4, #36]	@ 0x24
 800743e:	4b0d      	ldr	r3, [pc, #52]	@ (8007474 <std+0x5c>)
 8007440:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007442:	4b0d      	ldr	r3, [pc, #52]	@ (8007478 <std+0x60>)
 8007444:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007446:	4b0d      	ldr	r3, [pc, #52]	@ (800747c <std+0x64>)
 8007448:	6323      	str	r3, [r4, #48]	@ 0x30
 800744a:	4b0d      	ldr	r3, [pc, #52]	@ (8007480 <std+0x68>)
 800744c:	6224      	str	r4, [r4, #32]
 800744e:	429c      	cmp	r4, r3
 8007450:	d006      	beq.n	8007460 <std+0x48>
 8007452:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007456:	4294      	cmp	r4, r2
 8007458:	d002      	beq.n	8007460 <std+0x48>
 800745a:	33d0      	adds	r3, #208	@ 0xd0
 800745c:	429c      	cmp	r4, r3
 800745e:	d105      	bne.n	800746c <std+0x54>
 8007460:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007468:	f000 b9ce 	b.w	8007808 <__retarget_lock_init_recursive>
 800746c:	bd10      	pop	{r4, pc}
 800746e:	bf00      	nop
 8007470:	08007645 	.word	0x08007645
 8007474:	08007667 	.word	0x08007667
 8007478:	0800769f 	.word	0x0800769f
 800747c:	080076c3 	.word	0x080076c3
 8007480:	20000ef4 	.word	0x20000ef4

08007484 <stdio_exit_handler>:
 8007484:	4a02      	ldr	r2, [pc, #8]	@ (8007490 <stdio_exit_handler+0xc>)
 8007486:	4903      	ldr	r1, [pc, #12]	@ (8007494 <stdio_exit_handler+0x10>)
 8007488:	4803      	ldr	r0, [pc, #12]	@ (8007498 <stdio_exit_handler+0x14>)
 800748a:	f000 b869 	b.w	8007560 <_fwalk_sglue>
 800748e:	bf00      	nop
 8007490:	2000016c 	.word	0x2000016c
 8007494:	08009029 	.word	0x08009029
 8007498:	2000017c 	.word	0x2000017c

0800749c <cleanup_stdio>:
 800749c:	6841      	ldr	r1, [r0, #4]
 800749e:	4b0c      	ldr	r3, [pc, #48]	@ (80074d0 <cleanup_stdio+0x34>)
 80074a0:	4299      	cmp	r1, r3
 80074a2:	b510      	push	{r4, lr}
 80074a4:	4604      	mov	r4, r0
 80074a6:	d001      	beq.n	80074ac <cleanup_stdio+0x10>
 80074a8:	f001 fdbe 	bl	8009028 <_fflush_r>
 80074ac:	68a1      	ldr	r1, [r4, #8]
 80074ae:	4b09      	ldr	r3, [pc, #36]	@ (80074d4 <cleanup_stdio+0x38>)
 80074b0:	4299      	cmp	r1, r3
 80074b2:	d002      	beq.n	80074ba <cleanup_stdio+0x1e>
 80074b4:	4620      	mov	r0, r4
 80074b6:	f001 fdb7 	bl	8009028 <_fflush_r>
 80074ba:	68e1      	ldr	r1, [r4, #12]
 80074bc:	4b06      	ldr	r3, [pc, #24]	@ (80074d8 <cleanup_stdio+0x3c>)
 80074be:	4299      	cmp	r1, r3
 80074c0:	d004      	beq.n	80074cc <cleanup_stdio+0x30>
 80074c2:	4620      	mov	r0, r4
 80074c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074c8:	f001 bdae 	b.w	8009028 <_fflush_r>
 80074cc:	bd10      	pop	{r4, pc}
 80074ce:	bf00      	nop
 80074d0:	20000ef4 	.word	0x20000ef4
 80074d4:	20000f5c 	.word	0x20000f5c
 80074d8:	20000fc4 	.word	0x20000fc4

080074dc <global_stdio_init.part.0>:
 80074dc:	b510      	push	{r4, lr}
 80074de:	4b0b      	ldr	r3, [pc, #44]	@ (800750c <global_stdio_init.part.0+0x30>)
 80074e0:	4c0b      	ldr	r4, [pc, #44]	@ (8007510 <global_stdio_init.part.0+0x34>)
 80074e2:	4a0c      	ldr	r2, [pc, #48]	@ (8007514 <global_stdio_init.part.0+0x38>)
 80074e4:	601a      	str	r2, [r3, #0]
 80074e6:	4620      	mov	r0, r4
 80074e8:	2200      	movs	r2, #0
 80074ea:	2104      	movs	r1, #4
 80074ec:	f7ff ff94 	bl	8007418 <std>
 80074f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80074f4:	2201      	movs	r2, #1
 80074f6:	2109      	movs	r1, #9
 80074f8:	f7ff ff8e 	bl	8007418 <std>
 80074fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007500:	2202      	movs	r2, #2
 8007502:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007506:	2112      	movs	r1, #18
 8007508:	f7ff bf86 	b.w	8007418 <std>
 800750c:	2000102c 	.word	0x2000102c
 8007510:	20000ef4 	.word	0x20000ef4
 8007514:	08007485 	.word	0x08007485

08007518 <__sfp_lock_acquire>:
 8007518:	4801      	ldr	r0, [pc, #4]	@ (8007520 <__sfp_lock_acquire+0x8>)
 800751a:	f000 b976 	b.w	800780a <__retarget_lock_acquire_recursive>
 800751e:	bf00      	nop
 8007520:	20001035 	.word	0x20001035

08007524 <__sfp_lock_release>:
 8007524:	4801      	ldr	r0, [pc, #4]	@ (800752c <__sfp_lock_release+0x8>)
 8007526:	f000 b971 	b.w	800780c <__retarget_lock_release_recursive>
 800752a:	bf00      	nop
 800752c:	20001035 	.word	0x20001035

08007530 <__sinit>:
 8007530:	b510      	push	{r4, lr}
 8007532:	4604      	mov	r4, r0
 8007534:	f7ff fff0 	bl	8007518 <__sfp_lock_acquire>
 8007538:	6a23      	ldr	r3, [r4, #32]
 800753a:	b11b      	cbz	r3, 8007544 <__sinit+0x14>
 800753c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007540:	f7ff bff0 	b.w	8007524 <__sfp_lock_release>
 8007544:	4b04      	ldr	r3, [pc, #16]	@ (8007558 <__sinit+0x28>)
 8007546:	6223      	str	r3, [r4, #32]
 8007548:	4b04      	ldr	r3, [pc, #16]	@ (800755c <__sinit+0x2c>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d1f5      	bne.n	800753c <__sinit+0xc>
 8007550:	f7ff ffc4 	bl	80074dc <global_stdio_init.part.0>
 8007554:	e7f2      	b.n	800753c <__sinit+0xc>
 8007556:	bf00      	nop
 8007558:	0800749d 	.word	0x0800749d
 800755c:	2000102c 	.word	0x2000102c

08007560 <_fwalk_sglue>:
 8007560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007564:	4607      	mov	r7, r0
 8007566:	4688      	mov	r8, r1
 8007568:	4614      	mov	r4, r2
 800756a:	2600      	movs	r6, #0
 800756c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007570:	f1b9 0901 	subs.w	r9, r9, #1
 8007574:	d505      	bpl.n	8007582 <_fwalk_sglue+0x22>
 8007576:	6824      	ldr	r4, [r4, #0]
 8007578:	2c00      	cmp	r4, #0
 800757a:	d1f7      	bne.n	800756c <_fwalk_sglue+0xc>
 800757c:	4630      	mov	r0, r6
 800757e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007582:	89ab      	ldrh	r3, [r5, #12]
 8007584:	2b01      	cmp	r3, #1
 8007586:	d907      	bls.n	8007598 <_fwalk_sglue+0x38>
 8007588:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800758c:	3301      	adds	r3, #1
 800758e:	d003      	beq.n	8007598 <_fwalk_sglue+0x38>
 8007590:	4629      	mov	r1, r5
 8007592:	4638      	mov	r0, r7
 8007594:	47c0      	blx	r8
 8007596:	4306      	orrs	r6, r0
 8007598:	3568      	adds	r5, #104	@ 0x68
 800759a:	e7e9      	b.n	8007570 <_fwalk_sglue+0x10>

0800759c <sniprintf>:
 800759c:	b40c      	push	{r2, r3}
 800759e:	b530      	push	{r4, r5, lr}
 80075a0:	4b17      	ldr	r3, [pc, #92]	@ (8007600 <sniprintf+0x64>)
 80075a2:	1e0c      	subs	r4, r1, #0
 80075a4:	681d      	ldr	r5, [r3, #0]
 80075a6:	b09d      	sub	sp, #116	@ 0x74
 80075a8:	da08      	bge.n	80075bc <sniprintf+0x20>
 80075aa:	238b      	movs	r3, #139	@ 0x8b
 80075ac:	602b      	str	r3, [r5, #0]
 80075ae:	f04f 30ff 	mov.w	r0, #4294967295
 80075b2:	b01d      	add	sp, #116	@ 0x74
 80075b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80075b8:	b002      	add	sp, #8
 80075ba:	4770      	bx	lr
 80075bc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80075c0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80075c4:	bf14      	ite	ne
 80075c6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80075ca:	4623      	moveq	r3, r4
 80075cc:	9304      	str	r3, [sp, #16]
 80075ce:	9307      	str	r3, [sp, #28]
 80075d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80075d4:	9002      	str	r0, [sp, #8]
 80075d6:	9006      	str	r0, [sp, #24]
 80075d8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80075dc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80075de:	ab21      	add	r3, sp, #132	@ 0x84
 80075e0:	a902      	add	r1, sp, #8
 80075e2:	4628      	mov	r0, r5
 80075e4:	9301      	str	r3, [sp, #4]
 80075e6:	f001 fb9f 	bl	8008d28 <_svfiprintf_r>
 80075ea:	1c43      	adds	r3, r0, #1
 80075ec:	bfbc      	itt	lt
 80075ee:	238b      	movlt	r3, #139	@ 0x8b
 80075f0:	602b      	strlt	r3, [r5, #0]
 80075f2:	2c00      	cmp	r4, #0
 80075f4:	d0dd      	beq.n	80075b2 <sniprintf+0x16>
 80075f6:	9b02      	ldr	r3, [sp, #8]
 80075f8:	2200      	movs	r2, #0
 80075fa:	701a      	strb	r2, [r3, #0]
 80075fc:	e7d9      	b.n	80075b2 <sniprintf+0x16>
 80075fe:	bf00      	nop
 8007600:	20000178 	.word	0x20000178

08007604 <siprintf>:
 8007604:	b40e      	push	{r1, r2, r3}
 8007606:	b500      	push	{lr}
 8007608:	b09c      	sub	sp, #112	@ 0x70
 800760a:	ab1d      	add	r3, sp, #116	@ 0x74
 800760c:	9002      	str	r0, [sp, #8]
 800760e:	9006      	str	r0, [sp, #24]
 8007610:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007614:	4809      	ldr	r0, [pc, #36]	@ (800763c <siprintf+0x38>)
 8007616:	9107      	str	r1, [sp, #28]
 8007618:	9104      	str	r1, [sp, #16]
 800761a:	4909      	ldr	r1, [pc, #36]	@ (8007640 <siprintf+0x3c>)
 800761c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007620:	9105      	str	r1, [sp, #20]
 8007622:	6800      	ldr	r0, [r0, #0]
 8007624:	9301      	str	r3, [sp, #4]
 8007626:	a902      	add	r1, sp, #8
 8007628:	f001 fb7e 	bl	8008d28 <_svfiprintf_r>
 800762c:	9b02      	ldr	r3, [sp, #8]
 800762e:	2200      	movs	r2, #0
 8007630:	701a      	strb	r2, [r3, #0]
 8007632:	b01c      	add	sp, #112	@ 0x70
 8007634:	f85d eb04 	ldr.w	lr, [sp], #4
 8007638:	b003      	add	sp, #12
 800763a:	4770      	bx	lr
 800763c:	20000178 	.word	0x20000178
 8007640:	ffff0208 	.word	0xffff0208

08007644 <__sread>:
 8007644:	b510      	push	{r4, lr}
 8007646:	460c      	mov	r4, r1
 8007648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800764c:	f000 f87e 	bl	800774c <_read_r>
 8007650:	2800      	cmp	r0, #0
 8007652:	bfab      	itete	ge
 8007654:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007656:	89a3      	ldrhlt	r3, [r4, #12]
 8007658:	181b      	addge	r3, r3, r0
 800765a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800765e:	bfac      	ite	ge
 8007660:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007662:	81a3      	strhlt	r3, [r4, #12]
 8007664:	bd10      	pop	{r4, pc}

08007666 <__swrite>:
 8007666:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800766a:	461f      	mov	r7, r3
 800766c:	898b      	ldrh	r3, [r1, #12]
 800766e:	05db      	lsls	r3, r3, #23
 8007670:	4605      	mov	r5, r0
 8007672:	460c      	mov	r4, r1
 8007674:	4616      	mov	r6, r2
 8007676:	d505      	bpl.n	8007684 <__swrite+0x1e>
 8007678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800767c:	2302      	movs	r3, #2
 800767e:	2200      	movs	r2, #0
 8007680:	f000 f852 	bl	8007728 <_lseek_r>
 8007684:	89a3      	ldrh	r3, [r4, #12]
 8007686:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800768a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800768e:	81a3      	strh	r3, [r4, #12]
 8007690:	4632      	mov	r2, r6
 8007692:	463b      	mov	r3, r7
 8007694:	4628      	mov	r0, r5
 8007696:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800769a:	f000 b879 	b.w	8007790 <_write_r>

0800769e <__sseek>:
 800769e:	b510      	push	{r4, lr}
 80076a0:	460c      	mov	r4, r1
 80076a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076a6:	f000 f83f 	bl	8007728 <_lseek_r>
 80076aa:	1c43      	adds	r3, r0, #1
 80076ac:	89a3      	ldrh	r3, [r4, #12]
 80076ae:	bf15      	itete	ne
 80076b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80076b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80076b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80076ba:	81a3      	strheq	r3, [r4, #12]
 80076bc:	bf18      	it	ne
 80076be:	81a3      	strhne	r3, [r4, #12]
 80076c0:	bd10      	pop	{r4, pc}

080076c2 <__sclose>:
 80076c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076c6:	f000 b81f 	b.w	8007708 <_close_r>

080076ca <memset>:
 80076ca:	4402      	add	r2, r0
 80076cc:	4603      	mov	r3, r0
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d100      	bne.n	80076d4 <memset+0xa>
 80076d2:	4770      	bx	lr
 80076d4:	f803 1b01 	strb.w	r1, [r3], #1
 80076d8:	e7f9      	b.n	80076ce <memset+0x4>

080076da <strncat>:
 80076da:	b530      	push	{r4, r5, lr}
 80076dc:	4604      	mov	r4, r0
 80076de:	7825      	ldrb	r5, [r4, #0]
 80076e0:	4623      	mov	r3, r4
 80076e2:	3401      	adds	r4, #1
 80076e4:	2d00      	cmp	r5, #0
 80076e6:	d1fa      	bne.n	80076de <strncat+0x4>
 80076e8:	3a01      	subs	r2, #1
 80076ea:	d304      	bcc.n	80076f6 <strncat+0x1c>
 80076ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076f0:	f803 4b01 	strb.w	r4, [r3], #1
 80076f4:	b904      	cbnz	r4, 80076f8 <strncat+0x1e>
 80076f6:	bd30      	pop	{r4, r5, pc}
 80076f8:	2a00      	cmp	r2, #0
 80076fa:	d1f5      	bne.n	80076e8 <strncat+0xe>
 80076fc:	701a      	strb	r2, [r3, #0]
 80076fe:	e7f3      	b.n	80076e8 <strncat+0xe>

08007700 <_localeconv_r>:
 8007700:	4800      	ldr	r0, [pc, #0]	@ (8007704 <_localeconv_r+0x4>)
 8007702:	4770      	bx	lr
 8007704:	200002b8 	.word	0x200002b8

08007708 <_close_r>:
 8007708:	b538      	push	{r3, r4, r5, lr}
 800770a:	4d06      	ldr	r5, [pc, #24]	@ (8007724 <_close_r+0x1c>)
 800770c:	2300      	movs	r3, #0
 800770e:	4604      	mov	r4, r0
 8007710:	4608      	mov	r0, r1
 8007712:	602b      	str	r3, [r5, #0]
 8007714:	f7fa fa16 	bl	8001b44 <_close>
 8007718:	1c43      	adds	r3, r0, #1
 800771a:	d102      	bne.n	8007722 <_close_r+0x1a>
 800771c:	682b      	ldr	r3, [r5, #0]
 800771e:	b103      	cbz	r3, 8007722 <_close_r+0x1a>
 8007720:	6023      	str	r3, [r4, #0]
 8007722:	bd38      	pop	{r3, r4, r5, pc}
 8007724:	20001030 	.word	0x20001030

08007728 <_lseek_r>:
 8007728:	b538      	push	{r3, r4, r5, lr}
 800772a:	4d07      	ldr	r5, [pc, #28]	@ (8007748 <_lseek_r+0x20>)
 800772c:	4604      	mov	r4, r0
 800772e:	4608      	mov	r0, r1
 8007730:	4611      	mov	r1, r2
 8007732:	2200      	movs	r2, #0
 8007734:	602a      	str	r2, [r5, #0]
 8007736:	461a      	mov	r2, r3
 8007738:	f7fa fa2b 	bl	8001b92 <_lseek>
 800773c:	1c43      	adds	r3, r0, #1
 800773e:	d102      	bne.n	8007746 <_lseek_r+0x1e>
 8007740:	682b      	ldr	r3, [r5, #0]
 8007742:	b103      	cbz	r3, 8007746 <_lseek_r+0x1e>
 8007744:	6023      	str	r3, [r4, #0]
 8007746:	bd38      	pop	{r3, r4, r5, pc}
 8007748:	20001030 	.word	0x20001030

0800774c <_read_r>:
 800774c:	b538      	push	{r3, r4, r5, lr}
 800774e:	4d07      	ldr	r5, [pc, #28]	@ (800776c <_read_r+0x20>)
 8007750:	4604      	mov	r4, r0
 8007752:	4608      	mov	r0, r1
 8007754:	4611      	mov	r1, r2
 8007756:	2200      	movs	r2, #0
 8007758:	602a      	str	r2, [r5, #0]
 800775a:	461a      	mov	r2, r3
 800775c:	f7fa f9b9 	bl	8001ad2 <_read>
 8007760:	1c43      	adds	r3, r0, #1
 8007762:	d102      	bne.n	800776a <_read_r+0x1e>
 8007764:	682b      	ldr	r3, [r5, #0]
 8007766:	b103      	cbz	r3, 800776a <_read_r+0x1e>
 8007768:	6023      	str	r3, [r4, #0]
 800776a:	bd38      	pop	{r3, r4, r5, pc}
 800776c:	20001030 	.word	0x20001030

08007770 <_sbrk_r>:
 8007770:	b538      	push	{r3, r4, r5, lr}
 8007772:	4d06      	ldr	r5, [pc, #24]	@ (800778c <_sbrk_r+0x1c>)
 8007774:	2300      	movs	r3, #0
 8007776:	4604      	mov	r4, r0
 8007778:	4608      	mov	r0, r1
 800777a:	602b      	str	r3, [r5, #0]
 800777c:	f7fa fa16 	bl	8001bac <_sbrk>
 8007780:	1c43      	adds	r3, r0, #1
 8007782:	d102      	bne.n	800778a <_sbrk_r+0x1a>
 8007784:	682b      	ldr	r3, [r5, #0]
 8007786:	b103      	cbz	r3, 800778a <_sbrk_r+0x1a>
 8007788:	6023      	str	r3, [r4, #0]
 800778a:	bd38      	pop	{r3, r4, r5, pc}
 800778c:	20001030 	.word	0x20001030

08007790 <_write_r>:
 8007790:	b538      	push	{r3, r4, r5, lr}
 8007792:	4d07      	ldr	r5, [pc, #28]	@ (80077b0 <_write_r+0x20>)
 8007794:	4604      	mov	r4, r0
 8007796:	4608      	mov	r0, r1
 8007798:	4611      	mov	r1, r2
 800779a:	2200      	movs	r2, #0
 800779c:	602a      	str	r2, [r5, #0]
 800779e:	461a      	mov	r2, r3
 80077a0:	f7fa f9b4 	bl	8001b0c <_write>
 80077a4:	1c43      	adds	r3, r0, #1
 80077a6:	d102      	bne.n	80077ae <_write_r+0x1e>
 80077a8:	682b      	ldr	r3, [r5, #0]
 80077aa:	b103      	cbz	r3, 80077ae <_write_r+0x1e>
 80077ac:	6023      	str	r3, [r4, #0]
 80077ae:	bd38      	pop	{r3, r4, r5, pc}
 80077b0:	20001030 	.word	0x20001030

080077b4 <__errno>:
 80077b4:	4b01      	ldr	r3, [pc, #4]	@ (80077bc <__errno+0x8>)
 80077b6:	6818      	ldr	r0, [r3, #0]
 80077b8:	4770      	bx	lr
 80077ba:	bf00      	nop
 80077bc:	20000178 	.word	0x20000178

080077c0 <__libc_init_array>:
 80077c0:	b570      	push	{r4, r5, r6, lr}
 80077c2:	4d0d      	ldr	r5, [pc, #52]	@ (80077f8 <__libc_init_array+0x38>)
 80077c4:	4c0d      	ldr	r4, [pc, #52]	@ (80077fc <__libc_init_array+0x3c>)
 80077c6:	1b64      	subs	r4, r4, r5
 80077c8:	10a4      	asrs	r4, r4, #2
 80077ca:	2600      	movs	r6, #0
 80077cc:	42a6      	cmp	r6, r4
 80077ce:	d109      	bne.n	80077e4 <__libc_init_array+0x24>
 80077d0:	4d0b      	ldr	r5, [pc, #44]	@ (8007800 <__libc_init_array+0x40>)
 80077d2:	4c0c      	ldr	r4, [pc, #48]	@ (8007804 <__libc_init_array+0x44>)
 80077d4:	f001 ff72 	bl	80096bc <_init>
 80077d8:	1b64      	subs	r4, r4, r5
 80077da:	10a4      	asrs	r4, r4, #2
 80077dc:	2600      	movs	r6, #0
 80077de:	42a6      	cmp	r6, r4
 80077e0:	d105      	bne.n	80077ee <__libc_init_array+0x2e>
 80077e2:	bd70      	pop	{r4, r5, r6, pc}
 80077e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80077e8:	4798      	blx	r3
 80077ea:	3601      	adds	r6, #1
 80077ec:	e7ee      	b.n	80077cc <__libc_init_array+0xc>
 80077ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80077f2:	4798      	blx	r3
 80077f4:	3601      	adds	r6, #1
 80077f6:	e7f2      	b.n	80077de <__libc_init_array+0x1e>
 80077f8:	08009c28 	.word	0x08009c28
 80077fc:	08009c28 	.word	0x08009c28
 8007800:	08009c28 	.word	0x08009c28
 8007804:	08009c2c 	.word	0x08009c2c

08007808 <__retarget_lock_init_recursive>:
 8007808:	4770      	bx	lr

0800780a <__retarget_lock_acquire_recursive>:
 800780a:	4770      	bx	lr

0800780c <__retarget_lock_release_recursive>:
 800780c:	4770      	bx	lr

0800780e <memcpy>:
 800780e:	440a      	add	r2, r1
 8007810:	4291      	cmp	r1, r2
 8007812:	f100 33ff 	add.w	r3, r0, #4294967295
 8007816:	d100      	bne.n	800781a <memcpy+0xc>
 8007818:	4770      	bx	lr
 800781a:	b510      	push	{r4, lr}
 800781c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007820:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007824:	4291      	cmp	r1, r2
 8007826:	d1f9      	bne.n	800781c <memcpy+0xe>
 8007828:	bd10      	pop	{r4, pc}

0800782a <quorem>:
 800782a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800782e:	6903      	ldr	r3, [r0, #16]
 8007830:	690c      	ldr	r4, [r1, #16]
 8007832:	42a3      	cmp	r3, r4
 8007834:	4607      	mov	r7, r0
 8007836:	db7e      	blt.n	8007936 <quorem+0x10c>
 8007838:	3c01      	subs	r4, #1
 800783a:	f101 0814 	add.w	r8, r1, #20
 800783e:	00a3      	lsls	r3, r4, #2
 8007840:	f100 0514 	add.w	r5, r0, #20
 8007844:	9300      	str	r3, [sp, #0]
 8007846:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800784a:	9301      	str	r3, [sp, #4]
 800784c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007850:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007854:	3301      	adds	r3, #1
 8007856:	429a      	cmp	r2, r3
 8007858:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800785c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007860:	d32e      	bcc.n	80078c0 <quorem+0x96>
 8007862:	f04f 0a00 	mov.w	sl, #0
 8007866:	46c4      	mov	ip, r8
 8007868:	46ae      	mov	lr, r5
 800786a:	46d3      	mov	fp, sl
 800786c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007870:	b298      	uxth	r0, r3
 8007872:	fb06 a000 	mla	r0, r6, r0, sl
 8007876:	0c02      	lsrs	r2, r0, #16
 8007878:	0c1b      	lsrs	r3, r3, #16
 800787a:	fb06 2303 	mla	r3, r6, r3, r2
 800787e:	f8de 2000 	ldr.w	r2, [lr]
 8007882:	b280      	uxth	r0, r0
 8007884:	b292      	uxth	r2, r2
 8007886:	1a12      	subs	r2, r2, r0
 8007888:	445a      	add	r2, fp
 800788a:	f8de 0000 	ldr.w	r0, [lr]
 800788e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007892:	b29b      	uxth	r3, r3
 8007894:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007898:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800789c:	b292      	uxth	r2, r2
 800789e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80078a2:	45e1      	cmp	r9, ip
 80078a4:	f84e 2b04 	str.w	r2, [lr], #4
 80078a8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80078ac:	d2de      	bcs.n	800786c <quorem+0x42>
 80078ae:	9b00      	ldr	r3, [sp, #0]
 80078b0:	58eb      	ldr	r3, [r5, r3]
 80078b2:	b92b      	cbnz	r3, 80078c0 <quorem+0x96>
 80078b4:	9b01      	ldr	r3, [sp, #4]
 80078b6:	3b04      	subs	r3, #4
 80078b8:	429d      	cmp	r5, r3
 80078ba:	461a      	mov	r2, r3
 80078bc:	d32f      	bcc.n	800791e <quorem+0xf4>
 80078be:	613c      	str	r4, [r7, #16]
 80078c0:	4638      	mov	r0, r7
 80078c2:	f001 f8c5 	bl	8008a50 <__mcmp>
 80078c6:	2800      	cmp	r0, #0
 80078c8:	db25      	blt.n	8007916 <quorem+0xec>
 80078ca:	4629      	mov	r1, r5
 80078cc:	2000      	movs	r0, #0
 80078ce:	f858 2b04 	ldr.w	r2, [r8], #4
 80078d2:	f8d1 c000 	ldr.w	ip, [r1]
 80078d6:	fa1f fe82 	uxth.w	lr, r2
 80078da:	fa1f f38c 	uxth.w	r3, ip
 80078de:	eba3 030e 	sub.w	r3, r3, lr
 80078e2:	4403      	add	r3, r0
 80078e4:	0c12      	lsrs	r2, r2, #16
 80078e6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80078ea:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80078f4:	45c1      	cmp	r9, r8
 80078f6:	f841 3b04 	str.w	r3, [r1], #4
 80078fa:	ea4f 4022 	mov.w	r0, r2, asr #16
 80078fe:	d2e6      	bcs.n	80078ce <quorem+0xa4>
 8007900:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007904:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007908:	b922      	cbnz	r2, 8007914 <quorem+0xea>
 800790a:	3b04      	subs	r3, #4
 800790c:	429d      	cmp	r5, r3
 800790e:	461a      	mov	r2, r3
 8007910:	d30b      	bcc.n	800792a <quorem+0x100>
 8007912:	613c      	str	r4, [r7, #16]
 8007914:	3601      	adds	r6, #1
 8007916:	4630      	mov	r0, r6
 8007918:	b003      	add	sp, #12
 800791a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800791e:	6812      	ldr	r2, [r2, #0]
 8007920:	3b04      	subs	r3, #4
 8007922:	2a00      	cmp	r2, #0
 8007924:	d1cb      	bne.n	80078be <quorem+0x94>
 8007926:	3c01      	subs	r4, #1
 8007928:	e7c6      	b.n	80078b8 <quorem+0x8e>
 800792a:	6812      	ldr	r2, [r2, #0]
 800792c:	3b04      	subs	r3, #4
 800792e:	2a00      	cmp	r2, #0
 8007930:	d1ef      	bne.n	8007912 <quorem+0xe8>
 8007932:	3c01      	subs	r4, #1
 8007934:	e7ea      	b.n	800790c <quorem+0xe2>
 8007936:	2000      	movs	r0, #0
 8007938:	e7ee      	b.n	8007918 <quorem+0xee>
 800793a:	0000      	movs	r0, r0
 800793c:	0000      	movs	r0, r0
	...

08007940 <_dtoa_r>:
 8007940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007944:	69c7      	ldr	r7, [r0, #28]
 8007946:	b099      	sub	sp, #100	@ 0x64
 8007948:	ed8d 0b02 	vstr	d0, [sp, #8]
 800794c:	ec55 4b10 	vmov	r4, r5, d0
 8007950:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007952:	9109      	str	r1, [sp, #36]	@ 0x24
 8007954:	4683      	mov	fp, r0
 8007956:	920e      	str	r2, [sp, #56]	@ 0x38
 8007958:	9313      	str	r3, [sp, #76]	@ 0x4c
 800795a:	b97f      	cbnz	r7, 800797c <_dtoa_r+0x3c>
 800795c:	2010      	movs	r0, #16
 800795e:	f7ff f80f 	bl	8006980 <malloc>
 8007962:	4602      	mov	r2, r0
 8007964:	f8cb 001c 	str.w	r0, [fp, #28]
 8007968:	b920      	cbnz	r0, 8007974 <_dtoa_r+0x34>
 800796a:	4ba7      	ldr	r3, [pc, #668]	@ (8007c08 <_dtoa_r+0x2c8>)
 800796c:	21ef      	movs	r1, #239	@ 0xef
 800796e:	48a7      	ldr	r0, [pc, #668]	@ (8007c0c <_dtoa_r+0x2cc>)
 8007970:	f001 fb9c 	bl	80090ac <__assert_func>
 8007974:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007978:	6007      	str	r7, [r0, #0]
 800797a:	60c7      	str	r7, [r0, #12]
 800797c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007980:	6819      	ldr	r1, [r3, #0]
 8007982:	b159      	cbz	r1, 800799c <_dtoa_r+0x5c>
 8007984:	685a      	ldr	r2, [r3, #4]
 8007986:	604a      	str	r2, [r1, #4]
 8007988:	2301      	movs	r3, #1
 800798a:	4093      	lsls	r3, r2
 800798c:	608b      	str	r3, [r1, #8]
 800798e:	4658      	mov	r0, fp
 8007990:	f000 fe24 	bl	80085dc <_Bfree>
 8007994:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007998:	2200      	movs	r2, #0
 800799a:	601a      	str	r2, [r3, #0]
 800799c:	1e2b      	subs	r3, r5, #0
 800799e:	bfb9      	ittee	lt
 80079a0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80079a4:	9303      	strlt	r3, [sp, #12]
 80079a6:	2300      	movge	r3, #0
 80079a8:	6033      	strge	r3, [r6, #0]
 80079aa:	9f03      	ldr	r7, [sp, #12]
 80079ac:	4b98      	ldr	r3, [pc, #608]	@ (8007c10 <_dtoa_r+0x2d0>)
 80079ae:	bfbc      	itt	lt
 80079b0:	2201      	movlt	r2, #1
 80079b2:	6032      	strlt	r2, [r6, #0]
 80079b4:	43bb      	bics	r3, r7
 80079b6:	d112      	bne.n	80079de <_dtoa_r+0x9e>
 80079b8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80079ba:	f242 730f 	movw	r3, #9999	@ 0x270f
 80079be:	6013      	str	r3, [r2, #0]
 80079c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80079c4:	4323      	orrs	r3, r4
 80079c6:	f000 854d 	beq.w	8008464 <_dtoa_r+0xb24>
 80079ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80079cc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007c24 <_dtoa_r+0x2e4>
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	f000 854f 	beq.w	8008474 <_dtoa_r+0xb34>
 80079d6:	f10a 0303 	add.w	r3, sl, #3
 80079da:	f000 bd49 	b.w	8008470 <_dtoa_r+0xb30>
 80079de:	ed9d 7b02 	vldr	d7, [sp, #8]
 80079e2:	2200      	movs	r2, #0
 80079e4:	ec51 0b17 	vmov	r0, r1, d7
 80079e8:	2300      	movs	r3, #0
 80079ea:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80079ee:	f7f9 f87b 	bl	8000ae8 <__aeabi_dcmpeq>
 80079f2:	4680      	mov	r8, r0
 80079f4:	b158      	cbz	r0, 8007a0e <_dtoa_r+0xce>
 80079f6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80079f8:	2301      	movs	r3, #1
 80079fa:	6013      	str	r3, [r2, #0]
 80079fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80079fe:	b113      	cbz	r3, 8007a06 <_dtoa_r+0xc6>
 8007a00:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007a02:	4b84      	ldr	r3, [pc, #528]	@ (8007c14 <_dtoa_r+0x2d4>)
 8007a04:	6013      	str	r3, [r2, #0]
 8007a06:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007c28 <_dtoa_r+0x2e8>
 8007a0a:	f000 bd33 	b.w	8008474 <_dtoa_r+0xb34>
 8007a0e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007a12:	aa16      	add	r2, sp, #88	@ 0x58
 8007a14:	a917      	add	r1, sp, #92	@ 0x5c
 8007a16:	4658      	mov	r0, fp
 8007a18:	f001 f8ca 	bl	8008bb0 <__d2b>
 8007a1c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007a20:	4681      	mov	r9, r0
 8007a22:	2e00      	cmp	r6, #0
 8007a24:	d077      	beq.n	8007b16 <_dtoa_r+0x1d6>
 8007a26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007a28:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007a2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a34:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007a38:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007a3c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007a40:	4619      	mov	r1, r3
 8007a42:	2200      	movs	r2, #0
 8007a44:	4b74      	ldr	r3, [pc, #464]	@ (8007c18 <_dtoa_r+0x2d8>)
 8007a46:	f7f8 fc2f 	bl	80002a8 <__aeabi_dsub>
 8007a4a:	a369      	add	r3, pc, #420	@ (adr r3, 8007bf0 <_dtoa_r+0x2b0>)
 8007a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a50:	f7f8 fde2 	bl	8000618 <__aeabi_dmul>
 8007a54:	a368      	add	r3, pc, #416	@ (adr r3, 8007bf8 <_dtoa_r+0x2b8>)
 8007a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a5a:	f7f8 fc27 	bl	80002ac <__adddf3>
 8007a5e:	4604      	mov	r4, r0
 8007a60:	4630      	mov	r0, r6
 8007a62:	460d      	mov	r5, r1
 8007a64:	f7f8 fd6e 	bl	8000544 <__aeabi_i2d>
 8007a68:	a365      	add	r3, pc, #404	@ (adr r3, 8007c00 <_dtoa_r+0x2c0>)
 8007a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a6e:	f7f8 fdd3 	bl	8000618 <__aeabi_dmul>
 8007a72:	4602      	mov	r2, r0
 8007a74:	460b      	mov	r3, r1
 8007a76:	4620      	mov	r0, r4
 8007a78:	4629      	mov	r1, r5
 8007a7a:	f7f8 fc17 	bl	80002ac <__adddf3>
 8007a7e:	4604      	mov	r4, r0
 8007a80:	460d      	mov	r5, r1
 8007a82:	f7f9 f879 	bl	8000b78 <__aeabi_d2iz>
 8007a86:	2200      	movs	r2, #0
 8007a88:	4607      	mov	r7, r0
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	4620      	mov	r0, r4
 8007a8e:	4629      	mov	r1, r5
 8007a90:	f7f9 f834 	bl	8000afc <__aeabi_dcmplt>
 8007a94:	b140      	cbz	r0, 8007aa8 <_dtoa_r+0x168>
 8007a96:	4638      	mov	r0, r7
 8007a98:	f7f8 fd54 	bl	8000544 <__aeabi_i2d>
 8007a9c:	4622      	mov	r2, r4
 8007a9e:	462b      	mov	r3, r5
 8007aa0:	f7f9 f822 	bl	8000ae8 <__aeabi_dcmpeq>
 8007aa4:	b900      	cbnz	r0, 8007aa8 <_dtoa_r+0x168>
 8007aa6:	3f01      	subs	r7, #1
 8007aa8:	2f16      	cmp	r7, #22
 8007aaa:	d851      	bhi.n	8007b50 <_dtoa_r+0x210>
 8007aac:	4b5b      	ldr	r3, [pc, #364]	@ (8007c1c <_dtoa_r+0x2dc>)
 8007aae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007aba:	f7f9 f81f 	bl	8000afc <__aeabi_dcmplt>
 8007abe:	2800      	cmp	r0, #0
 8007ac0:	d048      	beq.n	8007b54 <_dtoa_r+0x214>
 8007ac2:	3f01      	subs	r7, #1
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	9312      	str	r3, [sp, #72]	@ 0x48
 8007ac8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007aca:	1b9b      	subs	r3, r3, r6
 8007acc:	1e5a      	subs	r2, r3, #1
 8007ace:	bf44      	itt	mi
 8007ad0:	f1c3 0801 	rsbmi	r8, r3, #1
 8007ad4:	2300      	movmi	r3, #0
 8007ad6:	9208      	str	r2, [sp, #32]
 8007ad8:	bf54      	ite	pl
 8007ada:	f04f 0800 	movpl.w	r8, #0
 8007ade:	9308      	strmi	r3, [sp, #32]
 8007ae0:	2f00      	cmp	r7, #0
 8007ae2:	db39      	blt.n	8007b58 <_dtoa_r+0x218>
 8007ae4:	9b08      	ldr	r3, [sp, #32]
 8007ae6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007ae8:	443b      	add	r3, r7
 8007aea:	9308      	str	r3, [sp, #32]
 8007aec:	2300      	movs	r3, #0
 8007aee:	930a      	str	r3, [sp, #40]	@ 0x28
 8007af0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007af2:	2b09      	cmp	r3, #9
 8007af4:	d864      	bhi.n	8007bc0 <_dtoa_r+0x280>
 8007af6:	2b05      	cmp	r3, #5
 8007af8:	bfc4      	itt	gt
 8007afa:	3b04      	subgt	r3, #4
 8007afc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007afe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b00:	f1a3 0302 	sub.w	r3, r3, #2
 8007b04:	bfcc      	ite	gt
 8007b06:	2400      	movgt	r4, #0
 8007b08:	2401      	movle	r4, #1
 8007b0a:	2b03      	cmp	r3, #3
 8007b0c:	d863      	bhi.n	8007bd6 <_dtoa_r+0x296>
 8007b0e:	e8df f003 	tbb	[pc, r3]
 8007b12:	372a      	.short	0x372a
 8007b14:	5535      	.short	0x5535
 8007b16:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007b1a:	441e      	add	r6, r3
 8007b1c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007b20:	2b20      	cmp	r3, #32
 8007b22:	bfc1      	itttt	gt
 8007b24:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007b28:	409f      	lslgt	r7, r3
 8007b2a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007b2e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007b32:	bfd6      	itet	le
 8007b34:	f1c3 0320 	rsble	r3, r3, #32
 8007b38:	ea47 0003 	orrgt.w	r0, r7, r3
 8007b3c:	fa04 f003 	lslle.w	r0, r4, r3
 8007b40:	f7f8 fcf0 	bl	8000524 <__aeabi_ui2d>
 8007b44:	2201      	movs	r2, #1
 8007b46:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007b4a:	3e01      	subs	r6, #1
 8007b4c:	9214      	str	r2, [sp, #80]	@ 0x50
 8007b4e:	e777      	b.n	8007a40 <_dtoa_r+0x100>
 8007b50:	2301      	movs	r3, #1
 8007b52:	e7b8      	b.n	8007ac6 <_dtoa_r+0x186>
 8007b54:	9012      	str	r0, [sp, #72]	@ 0x48
 8007b56:	e7b7      	b.n	8007ac8 <_dtoa_r+0x188>
 8007b58:	427b      	negs	r3, r7
 8007b5a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	eba8 0807 	sub.w	r8, r8, r7
 8007b62:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007b64:	e7c4      	b.n	8007af0 <_dtoa_r+0x1b0>
 8007b66:	2300      	movs	r3, #0
 8007b68:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	dc35      	bgt.n	8007bdc <_dtoa_r+0x29c>
 8007b70:	2301      	movs	r3, #1
 8007b72:	9300      	str	r3, [sp, #0]
 8007b74:	9307      	str	r3, [sp, #28]
 8007b76:	461a      	mov	r2, r3
 8007b78:	920e      	str	r2, [sp, #56]	@ 0x38
 8007b7a:	e00b      	b.n	8007b94 <_dtoa_r+0x254>
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	e7f3      	b.n	8007b68 <_dtoa_r+0x228>
 8007b80:	2300      	movs	r3, #0
 8007b82:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b86:	18fb      	adds	r3, r7, r3
 8007b88:	9300      	str	r3, [sp, #0]
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	9307      	str	r3, [sp, #28]
 8007b90:	bfb8      	it	lt
 8007b92:	2301      	movlt	r3, #1
 8007b94:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007b98:	2100      	movs	r1, #0
 8007b9a:	2204      	movs	r2, #4
 8007b9c:	f102 0514 	add.w	r5, r2, #20
 8007ba0:	429d      	cmp	r5, r3
 8007ba2:	d91f      	bls.n	8007be4 <_dtoa_r+0x2a4>
 8007ba4:	6041      	str	r1, [r0, #4]
 8007ba6:	4658      	mov	r0, fp
 8007ba8:	f000 fcd8 	bl	800855c <_Balloc>
 8007bac:	4682      	mov	sl, r0
 8007bae:	2800      	cmp	r0, #0
 8007bb0:	d13c      	bne.n	8007c2c <_dtoa_r+0x2ec>
 8007bb2:	4b1b      	ldr	r3, [pc, #108]	@ (8007c20 <_dtoa_r+0x2e0>)
 8007bb4:	4602      	mov	r2, r0
 8007bb6:	f240 11af 	movw	r1, #431	@ 0x1af
 8007bba:	e6d8      	b.n	800796e <_dtoa_r+0x2e>
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	e7e0      	b.n	8007b82 <_dtoa_r+0x242>
 8007bc0:	2401      	movs	r4, #1
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bc6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8007bcc:	9300      	str	r3, [sp, #0]
 8007bce:	9307      	str	r3, [sp, #28]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	2312      	movs	r3, #18
 8007bd4:	e7d0      	b.n	8007b78 <_dtoa_r+0x238>
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007bda:	e7f5      	b.n	8007bc8 <_dtoa_r+0x288>
 8007bdc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007bde:	9300      	str	r3, [sp, #0]
 8007be0:	9307      	str	r3, [sp, #28]
 8007be2:	e7d7      	b.n	8007b94 <_dtoa_r+0x254>
 8007be4:	3101      	adds	r1, #1
 8007be6:	0052      	lsls	r2, r2, #1
 8007be8:	e7d8      	b.n	8007b9c <_dtoa_r+0x25c>
 8007bea:	bf00      	nop
 8007bec:	f3af 8000 	nop.w
 8007bf0:	636f4361 	.word	0x636f4361
 8007bf4:	3fd287a7 	.word	0x3fd287a7
 8007bf8:	8b60c8b3 	.word	0x8b60c8b3
 8007bfc:	3fc68a28 	.word	0x3fc68a28
 8007c00:	509f79fb 	.word	0x509f79fb
 8007c04:	3fd34413 	.word	0x3fd34413
 8007c08:	080098f1 	.word	0x080098f1
 8007c0c:	08009908 	.word	0x08009908
 8007c10:	7ff00000 	.word	0x7ff00000
 8007c14:	080098c1 	.word	0x080098c1
 8007c18:	3ff80000 	.word	0x3ff80000
 8007c1c:	08009a00 	.word	0x08009a00
 8007c20:	08009960 	.word	0x08009960
 8007c24:	080098ed 	.word	0x080098ed
 8007c28:	080098c0 	.word	0x080098c0
 8007c2c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007c30:	6018      	str	r0, [r3, #0]
 8007c32:	9b07      	ldr	r3, [sp, #28]
 8007c34:	2b0e      	cmp	r3, #14
 8007c36:	f200 80a4 	bhi.w	8007d82 <_dtoa_r+0x442>
 8007c3a:	2c00      	cmp	r4, #0
 8007c3c:	f000 80a1 	beq.w	8007d82 <_dtoa_r+0x442>
 8007c40:	2f00      	cmp	r7, #0
 8007c42:	dd33      	ble.n	8007cac <_dtoa_r+0x36c>
 8007c44:	4bad      	ldr	r3, [pc, #692]	@ (8007efc <_dtoa_r+0x5bc>)
 8007c46:	f007 020f 	and.w	r2, r7, #15
 8007c4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c4e:	ed93 7b00 	vldr	d7, [r3]
 8007c52:	05f8      	lsls	r0, r7, #23
 8007c54:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007c58:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007c5c:	d516      	bpl.n	8007c8c <_dtoa_r+0x34c>
 8007c5e:	4ba8      	ldr	r3, [pc, #672]	@ (8007f00 <_dtoa_r+0x5c0>)
 8007c60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c64:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007c68:	f7f8 fe00 	bl	800086c <__aeabi_ddiv>
 8007c6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c70:	f004 040f 	and.w	r4, r4, #15
 8007c74:	2603      	movs	r6, #3
 8007c76:	4da2      	ldr	r5, [pc, #648]	@ (8007f00 <_dtoa_r+0x5c0>)
 8007c78:	b954      	cbnz	r4, 8007c90 <_dtoa_r+0x350>
 8007c7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c82:	f7f8 fdf3 	bl	800086c <__aeabi_ddiv>
 8007c86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c8a:	e028      	b.n	8007cde <_dtoa_r+0x39e>
 8007c8c:	2602      	movs	r6, #2
 8007c8e:	e7f2      	b.n	8007c76 <_dtoa_r+0x336>
 8007c90:	07e1      	lsls	r1, r4, #31
 8007c92:	d508      	bpl.n	8007ca6 <_dtoa_r+0x366>
 8007c94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c98:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007c9c:	f7f8 fcbc 	bl	8000618 <__aeabi_dmul>
 8007ca0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ca4:	3601      	adds	r6, #1
 8007ca6:	1064      	asrs	r4, r4, #1
 8007ca8:	3508      	adds	r5, #8
 8007caa:	e7e5      	b.n	8007c78 <_dtoa_r+0x338>
 8007cac:	f000 80d2 	beq.w	8007e54 <_dtoa_r+0x514>
 8007cb0:	427c      	negs	r4, r7
 8007cb2:	4b92      	ldr	r3, [pc, #584]	@ (8007efc <_dtoa_r+0x5bc>)
 8007cb4:	4d92      	ldr	r5, [pc, #584]	@ (8007f00 <_dtoa_r+0x5c0>)
 8007cb6:	f004 020f 	and.w	r2, r4, #15
 8007cba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007cc6:	f7f8 fca7 	bl	8000618 <__aeabi_dmul>
 8007cca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007cce:	1124      	asrs	r4, r4, #4
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	2602      	movs	r6, #2
 8007cd4:	2c00      	cmp	r4, #0
 8007cd6:	f040 80b2 	bne.w	8007e3e <_dtoa_r+0x4fe>
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d1d3      	bne.n	8007c86 <_dtoa_r+0x346>
 8007cde:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007ce0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	f000 80b7 	beq.w	8007e58 <_dtoa_r+0x518>
 8007cea:	4b86      	ldr	r3, [pc, #536]	@ (8007f04 <_dtoa_r+0x5c4>)
 8007cec:	2200      	movs	r2, #0
 8007cee:	4620      	mov	r0, r4
 8007cf0:	4629      	mov	r1, r5
 8007cf2:	f7f8 ff03 	bl	8000afc <__aeabi_dcmplt>
 8007cf6:	2800      	cmp	r0, #0
 8007cf8:	f000 80ae 	beq.w	8007e58 <_dtoa_r+0x518>
 8007cfc:	9b07      	ldr	r3, [sp, #28]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	f000 80aa 	beq.w	8007e58 <_dtoa_r+0x518>
 8007d04:	9b00      	ldr	r3, [sp, #0]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	dd37      	ble.n	8007d7a <_dtoa_r+0x43a>
 8007d0a:	1e7b      	subs	r3, r7, #1
 8007d0c:	9304      	str	r3, [sp, #16]
 8007d0e:	4620      	mov	r0, r4
 8007d10:	4b7d      	ldr	r3, [pc, #500]	@ (8007f08 <_dtoa_r+0x5c8>)
 8007d12:	2200      	movs	r2, #0
 8007d14:	4629      	mov	r1, r5
 8007d16:	f7f8 fc7f 	bl	8000618 <__aeabi_dmul>
 8007d1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d1e:	9c00      	ldr	r4, [sp, #0]
 8007d20:	3601      	adds	r6, #1
 8007d22:	4630      	mov	r0, r6
 8007d24:	f7f8 fc0e 	bl	8000544 <__aeabi_i2d>
 8007d28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d2c:	f7f8 fc74 	bl	8000618 <__aeabi_dmul>
 8007d30:	4b76      	ldr	r3, [pc, #472]	@ (8007f0c <_dtoa_r+0x5cc>)
 8007d32:	2200      	movs	r2, #0
 8007d34:	f7f8 faba 	bl	80002ac <__adddf3>
 8007d38:	4605      	mov	r5, r0
 8007d3a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007d3e:	2c00      	cmp	r4, #0
 8007d40:	f040 808d 	bne.w	8007e5e <_dtoa_r+0x51e>
 8007d44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d48:	4b71      	ldr	r3, [pc, #452]	@ (8007f10 <_dtoa_r+0x5d0>)
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	f7f8 faac 	bl	80002a8 <__aeabi_dsub>
 8007d50:	4602      	mov	r2, r0
 8007d52:	460b      	mov	r3, r1
 8007d54:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007d58:	462a      	mov	r2, r5
 8007d5a:	4633      	mov	r3, r6
 8007d5c:	f7f8 feec 	bl	8000b38 <__aeabi_dcmpgt>
 8007d60:	2800      	cmp	r0, #0
 8007d62:	f040 828b 	bne.w	800827c <_dtoa_r+0x93c>
 8007d66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d6a:	462a      	mov	r2, r5
 8007d6c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007d70:	f7f8 fec4 	bl	8000afc <__aeabi_dcmplt>
 8007d74:	2800      	cmp	r0, #0
 8007d76:	f040 8128 	bne.w	8007fca <_dtoa_r+0x68a>
 8007d7a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007d7e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007d82:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	f2c0 815a 	blt.w	800803e <_dtoa_r+0x6fe>
 8007d8a:	2f0e      	cmp	r7, #14
 8007d8c:	f300 8157 	bgt.w	800803e <_dtoa_r+0x6fe>
 8007d90:	4b5a      	ldr	r3, [pc, #360]	@ (8007efc <_dtoa_r+0x5bc>)
 8007d92:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007d96:	ed93 7b00 	vldr	d7, [r3]
 8007d9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	ed8d 7b00 	vstr	d7, [sp]
 8007da2:	da03      	bge.n	8007dac <_dtoa_r+0x46c>
 8007da4:	9b07      	ldr	r3, [sp, #28]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	f340 8101 	ble.w	8007fae <_dtoa_r+0x66e>
 8007dac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007db0:	4656      	mov	r6, sl
 8007db2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007db6:	4620      	mov	r0, r4
 8007db8:	4629      	mov	r1, r5
 8007dba:	f7f8 fd57 	bl	800086c <__aeabi_ddiv>
 8007dbe:	f7f8 fedb 	bl	8000b78 <__aeabi_d2iz>
 8007dc2:	4680      	mov	r8, r0
 8007dc4:	f7f8 fbbe 	bl	8000544 <__aeabi_i2d>
 8007dc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007dcc:	f7f8 fc24 	bl	8000618 <__aeabi_dmul>
 8007dd0:	4602      	mov	r2, r0
 8007dd2:	460b      	mov	r3, r1
 8007dd4:	4620      	mov	r0, r4
 8007dd6:	4629      	mov	r1, r5
 8007dd8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007ddc:	f7f8 fa64 	bl	80002a8 <__aeabi_dsub>
 8007de0:	f806 4b01 	strb.w	r4, [r6], #1
 8007de4:	9d07      	ldr	r5, [sp, #28]
 8007de6:	eba6 040a 	sub.w	r4, r6, sl
 8007dea:	42a5      	cmp	r5, r4
 8007dec:	4602      	mov	r2, r0
 8007dee:	460b      	mov	r3, r1
 8007df0:	f040 8117 	bne.w	8008022 <_dtoa_r+0x6e2>
 8007df4:	f7f8 fa5a 	bl	80002ac <__adddf3>
 8007df8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007dfc:	4604      	mov	r4, r0
 8007dfe:	460d      	mov	r5, r1
 8007e00:	f7f8 fe9a 	bl	8000b38 <__aeabi_dcmpgt>
 8007e04:	2800      	cmp	r0, #0
 8007e06:	f040 80f9 	bne.w	8007ffc <_dtoa_r+0x6bc>
 8007e0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e0e:	4620      	mov	r0, r4
 8007e10:	4629      	mov	r1, r5
 8007e12:	f7f8 fe69 	bl	8000ae8 <__aeabi_dcmpeq>
 8007e16:	b118      	cbz	r0, 8007e20 <_dtoa_r+0x4e0>
 8007e18:	f018 0f01 	tst.w	r8, #1
 8007e1c:	f040 80ee 	bne.w	8007ffc <_dtoa_r+0x6bc>
 8007e20:	4649      	mov	r1, r9
 8007e22:	4658      	mov	r0, fp
 8007e24:	f000 fbda 	bl	80085dc <_Bfree>
 8007e28:	2300      	movs	r3, #0
 8007e2a:	7033      	strb	r3, [r6, #0]
 8007e2c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007e2e:	3701      	adds	r7, #1
 8007e30:	601f      	str	r7, [r3, #0]
 8007e32:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	f000 831d 	beq.w	8008474 <_dtoa_r+0xb34>
 8007e3a:	601e      	str	r6, [r3, #0]
 8007e3c:	e31a      	b.n	8008474 <_dtoa_r+0xb34>
 8007e3e:	07e2      	lsls	r2, r4, #31
 8007e40:	d505      	bpl.n	8007e4e <_dtoa_r+0x50e>
 8007e42:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007e46:	f7f8 fbe7 	bl	8000618 <__aeabi_dmul>
 8007e4a:	3601      	adds	r6, #1
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	1064      	asrs	r4, r4, #1
 8007e50:	3508      	adds	r5, #8
 8007e52:	e73f      	b.n	8007cd4 <_dtoa_r+0x394>
 8007e54:	2602      	movs	r6, #2
 8007e56:	e742      	b.n	8007cde <_dtoa_r+0x39e>
 8007e58:	9c07      	ldr	r4, [sp, #28]
 8007e5a:	9704      	str	r7, [sp, #16]
 8007e5c:	e761      	b.n	8007d22 <_dtoa_r+0x3e2>
 8007e5e:	4b27      	ldr	r3, [pc, #156]	@ (8007efc <_dtoa_r+0x5bc>)
 8007e60:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007e62:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007e66:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007e6a:	4454      	add	r4, sl
 8007e6c:	2900      	cmp	r1, #0
 8007e6e:	d053      	beq.n	8007f18 <_dtoa_r+0x5d8>
 8007e70:	4928      	ldr	r1, [pc, #160]	@ (8007f14 <_dtoa_r+0x5d4>)
 8007e72:	2000      	movs	r0, #0
 8007e74:	f7f8 fcfa 	bl	800086c <__aeabi_ddiv>
 8007e78:	4633      	mov	r3, r6
 8007e7a:	462a      	mov	r2, r5
 8007e7c:	f7f8 fa14 	bl	80002a8 <__aeabi_dsub>
 8007e80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007e84:	4656      	mov	r6, sl
 8007e86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e8a:	f7f8 fe75 	bl	8000b78 <__aeabi_d2iz>
 8007e8e:	4605      	mov	r5, r0
 8007e90:	f7f8 fb58 	bl	8000544 <__aeabi_i2d>
 8007e94:	4602      	mov	r2, r0
 8007e96:	460b      	mov	r3, r1
 8007e98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e9c:	f7f8 fa04 	bl	80002a8 <__aeabi_dsub>
 8007ea0:	3530      	adds	r5, #48	@ 0x30
 8007ea2:	4602      	mov	r2, r0
 8007ea4:	460b      	mov	r3, r1
 8007ea6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007eaa:	f806 5b01 	strb.w	r5, [r6], #1
 8007eae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007eb2:	f7f8 fe23 	bl	8000afc <__aeabi_dcmplt>
 8007eb6:	2800      	cmp	r0, #0
 8007eb8:	d171      	bne.n	8007f9e <_dtoa_r+0x65e>
 8007eba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ebe:	4911      	ldr	r1, [pc, #68]	@ (8007f04 <_dtoa_r+0x5c4>)
 8007ec0:	2000      	movs	r0, #0
 8007ec2:	f7f8 f9f1 	bl	80002a8 <__aeabi_dsub>
 8007ec6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007eca:	f7f8 fe17 	bl	8000afc <__aeabi_dcmplt>
 8007ece:	2800      	cmp	r0, #0
 8007ed0:	f040 8095 	bne.w	8007ffe <_dtoa_r+0x6be>
 8007ed4:	42a6      	cmp	r6, r4
 8007ed6:	f43f af50 	beq.w	8007d7a <_dtoa_r+0x43a>
 8007eda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007ede:	4b0a      	ldr	r3, [pc, #40]	@ (8007f08 <_dtoa_r+0x5c8>)
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	f7f8 fb99 	bl	8000618 <__aeabi_dmul>
 8007ee6:	4b08      	ldr	r3, [pc, #32]	@ (8007f08 <_dtoa_r+0x5c8>)
 8007ee8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007eec:	2200      	movs	r2, #0
 8007eee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ef2:	f7f8 fb91 	bl	8000618 <__aeabi_dmul>
 8007ef6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007efa:	e7c4      	b.n	8007e86 <_dtoa_r+0x546>
 8007efc:	08009a00 	.word	0x08009a00
 8007f00:	080099d8 	.word	0x080099d8
 8007f04:	3ff00000 	.word	0x3ff00000
 8007f08:	40240000 	.word	0x40240000
 8007f0c:	401c0000 	.word	0x401c0000
 8007f10:	40140000 	.word	0x40140000
 8007f14:	3fe00000 	.word	0x3fe00000
 8007f18:	4631      	mov	r1, r6
 8007f1a:	4628      	mov	r0, r5
 8007f1c:	f7f8 fb7c 	bl	8000618 <__aeabi_dmul>
 8007f20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007f24:	9415      	str	r4, [sp, #84]	@ 0x54
 8007f26:	4656      	mov	r6, sl
 8007f28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f2c:	f7f8 fe24 	bl	8000b78 <__aeabi_d2iz>
 8007f30:	4605      	mov	r5, r0
 8007f32:	f7f8 fb07 	bl	8000544 <__aeabi_i2d>
 8007f36:	4602      	mov	r2, r0
 8007f38:	460b      	mov	r3, r1
 8007f3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f3e:	f7f8 f9b3 	bl	80002a8 <__aeabi_dsub>
 8007f42:	3530      	adds	r5, #48	@ 0x30
 8007f44:	f806 5b01 	strb.w	r5, [r6], #1
 8007f48:	4602      	mov	r2, r0
 8007f4a:	460b      	mov	r3, r1
 8007f4c:	42a6      	cmp	r6, r4
 8007f4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007f52:	f04f 0200 	mov.w	r2, #0
 8007f56:	d124      	bne.n	8007fa2 <_dtoa_r+0x662>
 8007f58:	4bac      	ldr	r3, [pc, #688]	@ (800820c <_dtoa_r+0x8cc>)
 8007f5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007f5e:	f7f8 f9a5 	bl	80002ac <__adddf3>
 8007f62:	4602      	mov	r2, r0
 8007f64:	460b      	mov	r3, r1
 8007f66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f6a:	f7f8 fde5 	bl	8000b38 <__aeabi_dcmpgt>
 8007f6e:	2800      	cmp	r0, #0
 8007f70:	d145      	bne.n	8007ffe <_dtoa_r+0x6be>
 8007f72:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007f76:	49a5      	ldr	r1, [pc, #660]	@ (800820c <_dtoa_r+0x8cc>)
 8007f78:	2000      	movs	r0, #0
 8007f7a:	f7f8 f995 	bl	80002a8 <__aeabi_dsub>
 8007f7e:	4602      	mov	r2, r0
 8007f80:	460b      	mov	r3, r1
 8007f82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f86:	f7f8 fdb9 	bl	8000afc <__aeabi_dcmplt>
 8007f8a:	2800      	cmp	r0, #0
 8007f8c:	f43f aef5 	beq.w	8007d7a <_dtoa_r+0x43a>
 8007f90:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007f92:	1e73      	subs	r3, r6, #1
 8007f94:	9315      	str	r3, [sp, #84]	@ 0x54
 8007f96:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007f9a:	2b30      	cmp	r3, #48	@ 0x30
 8007f9c:	d0f8      	beq.n	8007f90 <_dtoa_r+0x650>
 8007f9e:	9f04      	ldr	r7, [sp, #16]
 8007fa0:	e73e      	b.n	8007e20 <_dtoa_r+0x4e0>
 8007fa2:	4b9b      	ldr	r3, [pc, #620]	@ (8008210 <_dtoa_r+0x8d0>)
 8007fa4:	f7f8 fb38 	bl	8000618 <__aeabi_dmul>
 8007fa8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007fac:	e7bc      	b.n	8007f28 <_dtoa_r+0x5e8>
 8007fae:	d10c      	bne.n	8007fca <_dtoa_r+0x68a>
 8007fb0:	4b98      	ldr	r3, [pc, #608]	@ (8008214 <_dtoa_r+0x8d4>)
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007fb8:	f7f8 fb2e 	bl	8000618 <__aeabi_dmul>
 8007fbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007fc0:	f7f8 fdb0 	bl	8000b24 <__aeabi_dcmpge>
 8007fc4:	2800      	cmp	r0, #0
 8007fc6:	f000 8157 	beq.w	8008278 <_dtoa_r+0x938>
 8007fca:	2400      	movs	r4, #0
 8007fcc:	4625      	mov	r5, r4
 8007fce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007fd0:	43db      	mvns	r3, r3
 8007fd2:	9304      	str	r3, [sp, #16]
 8007fd4:	4656      	mov	r6, sl
 8007fd6:	2700      	movs	r7, #0
 8007fd8:	4621      	mov	r1, r4
 8007fda:	4658      	mov	r0, fp
 8007fdc:	f000 fafe 	bl	80085dc <_Bfree>
 8007fe0:	2d00      	cmp	r5, #0
 8007fe2:	d0dc      	beq.n	8007f9e <_dtoa_r+0x65e>
 8007fe4:	b12f      	cbz	r7, 8007ff2 <_dtoa_r+0x6b2>
 8007fe6:	42af      	cmp	r7, r5
 8007fe8:	d003      	beq.n	8007ff2 <_dtoa_r+0x6b2>
 8007fea:	4639      	mov	r1, r7
 8007fec:	4658      	mov	r0, fp
 8007fee:	f000 faf5 	bl	80085dc <_Bfree>
 8007ff2:	4629      	mov	r1, r5
 8007ff4:	4658      	mov	r0, fp
 8007ff6:	f000 faf1 	bl	80085dc <_Bfree>
 8007ffa:	e7d0      	b.n	8007f9e <_dtoa_r+0x65e>
 8007ffc:	9704      	str	r7, [sp, #16]
 8007ffe:	4633      	mov	r3, r6
 8008000:	461e      	mov	r6, r3
 8008002:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008006:	2a39      	cmp	r2, #57	@ 0x39
 8008008:	d107      	bne.n	800801a <_dtoa_r+0x6da>
 800800a:	459a      	cmp	sl, r3
 800800c:	d1f8      	bne.n	8008000 <_dtoa_r+0x6c0>
 800800e:	9a04      	ldr	r2, [sp, #16]
 8008010:	3201      	adds	r2, #1
 8008012:	9204      	str	r2, [sp, #16]
 8008014:	2230      	movs	r2, #48	@ 0x30
 8008016:	f88a 2000 	strb.w	r2, [sl]
 800801a:	781a      	ldrb	r2, [r3, #0]
 800801c:	3201      	adds	r2, #1
 800801e:	701a      	strb	r2, [r3, #0]
 8008020:	e7bd      	b.n	8007f9e <_dtoa_r+0x65e>
 8008022:	4b7b      	ldr	r3, [pc, #492]	@ (8008210 <_dtoa_r+0x8d0>)
 8008024:	2200      	movs	r2, #0
 8008026:	f7f8 faf7 	bl	8000618 <__aeabi_dmul>
 800802a:	2200      	movs	r2, #0
 800802c:	2300      	movs	r3, #0
 800802e:	4604      	mov	r4, r0
 8008030:	460d      	mov	r5, r1
 8008032:	f7f8 fd59 	bl	8000ae8 <__aeabi_dcmpeq>
 8008036:	2800      	cmp	r0, #0
 8008038:	f43f aebb 	beq.w	8007db2 <_dtoa_r+0x472>
 800803c:	e6f0      	b.n	8007e20 <_dtoa_r+0x4e0>
 800803e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008040:	2a00      	cmp	r2, #0
 8008042:	f000 80db 	beq.w	80081fc <_dtoa_r+0x8bc>
 8008046:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008048:	2a01      	cmp	r2, #1
 800804a:	f300 80bf 	bgt.w	80081cc <_dtoa_r+0x88c>
 800804e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008050:	2a00      	cmp	r2, #0
 8008052:	f000 80b7 	beq.w	80081c4 <_dtoa_r+0x884>
 8008056:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800805a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800805c:	4646      	mov	r6, r8
 800805e:	9a08      	ldr	r2, [sp, #32]
 8008060:	2101      	movs	r1, #1
 8008062:	441a      	add	r2, r3
 8008064:	4658      	mov	r0, fp
 8008066:	4498      	add	r8, r3
 8008068:	9208      	str	r2, [sp, #32]
 800806a:	f000 fb6b 	bl	8008744 <__i2b>
 800806e:	4605      	mov	r5, r0
 8008070:	b15e      	cbz	r6, 800808a <_dtoa_r+0x74a>
 8008072:	9b08      	ldr	r3, [sp, #32]
 8008074:	2b00      	cmp	r3, #0
 8008076:	dd08      	ble.n	800808a <_dtoa_r+0x74a>
 8008078:	42b3      	cmp	r3, r6
 800807a:	9a08      	ldr	r2, [sp, #32]
 800807c:	bfa8      	it	ge
 800807e:	4633      	movge	r3, r6
 8008080:	eba8 0803 	sub.w	r8, r8, r3
 8008084:	1af6      	subs	r6, r6, r3
 8008086:	1ad3      	subs	r3, r2, r3
 8008088:	9308      	str	r3, [sp, #32]
 800808a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800808c:	b1f3      	cbz	r3, 80080cc <_dtoa_r+0x78c>
 800808e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008090:	2b00      	cmp	r3, #0
 8008092:	f000 80b7 	beq.w	8008204 <_dtoa_r+0x8c4>
 8008096:	b18c      	cbz	r4, 80080bc <_dtoa_r+0x77c>
 8008098:	4629      	mov	r1, r5
 800809a:	4622      	mov	r2, r4
 800809c:	4658      	mov	r0, fp
 800809e:	f000 fc11 	bl	80088c4 <__pow5mult>
 80080a2:	464a      	mov	r2, r9
 80080a4:	4601      	mov	r1, r0
 80080a6:	4605      	mov	r5, r0
 80080a8:	4658      	mov	r0, fp
 80080aa:	f000 fb61 	bl	8008770 <__multiply>
 80080ae:	4649      	mov	r1, r9
 80080b0:	9004      	str	r0, [sp, #16]
 80080b2:	4658      	mov	r0, fp
 80080b4:	f000 fa92 	bl	80085dc <_Bfree>
 80080b8:	9b04      	ldr	r3, [sp, #16]
 80080ba:	4699      	mov	r9, r3
 80080bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80080be:	1b1a      	subs	r2, r3, r4
 80080c0:	d004      	beq.n	80080cc <_dtoa_r+0x78c>
 80080c2:	4649      	mov	r1, r9
 80080c4:	4658      	mov	r0, fp
 80080c6:	f000 fbfd 	bl	80088c4 <__pow5mult>
 80080ca:	4681      	mov	r9, r0
 80080cc:	2101      	movs	r1, #1
 80080ce:	4658      	mov	r0, fp
 80080d0:	f000 fb38 	bl	8008744 <__i2b>
 80080d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80080d6:	4604      	mov	r4, r0
 80080d8:	2b00      	cmp	r3, #0
 80080da:	f000 81cf 	beq.w	800847c <_dtoa_r+0xb3c>
 80080de:	461a      	mov	r2, r3
 80080e0:	4601      	mov	r1, r0
 80080e2:	4658      	mov	r0, fp
 80080e4:	f000 fbee 	bl	80088c4 <__pow5mult>
 80080e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	4604      	mov	r4, r0
 80080ee:	f300 8095 	bgt.w	800821c <_dtoa_r+0x8dc>
 80080f2:	9b02      	ldr	r3, [sp, #8]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	f040 8087 	bne.w	8008208 <_dtoa_r+0x8c8>
 80080fa:	9b03      	ldr	r3, [sp, #12]
 80080fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008100:	2b00      	cmp	r3, #0
 8008102:	f040 8089 	bne.w	8008218 <_dtoa_r+0x8d8>
 8008106:	9b03      	ldr	r3, [sp, #12]
 8008108:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800810c:	0d1b      	lsrs	r3, r3, #20
 800810e:	051b      	lsls	r3, r3, #20
 8008110:	b12b      	cbz	r3, 800811e <_dtoa_r+0x7de>
 8008112:	9b08      	ldr	r3, [sp, #32]
 8008114:	3301      	adds	r3, #1
 8008116:	9308      	str	r3, [sp, #32]
 8008118:	f108 0801 	add.w	r8, r8, #1
 800811c:	2301      	movs	r3, #1
 800811e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008120:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008122:	2b00      	cmp	r3, #0
 8008124:	f000 81b0 	beq.w	8008488 <_dtoa_r+0xb48>
 8008128:	6923      	ldr	r3, [r4, #16]
 800812a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800812e:	6918      	ldr	r0, [r3, #16]
 8008130:	f000 fabc 	bl	80086ac <__hi0bits>
 8008134:	f1c0 0020 	rsb	r0, r0, #32
 8008138:	9b08      	ldr	r3, [sp, #32]
 800813a:	4418      	add	r0, r3
 800813c:	f010 001f 	ands.w	r0, r0, #31
 8008140:	d077      	beq.n	8008232 <_dtoa_r+0x8f2>
 8008142:	f1c0 0320 	rsb	r3, r0, #32
 8008146:	2b04      	cmp	r3, #4
 8008148:	dd6b      	ble.n	8008222 <_dtoa_r+0x8e2>
 800814a:	9b08      	ldr	r3, [sp, #32]
 800814c:	f1c0 001c 	rsb	r0, r0, #28
 8008150:	4403      	add	r3, r0
 8008152:	4480      	add	r8, r0
 8008154:	4406      	add	r6, r0
 8008156:	9308      	str	r3, [sp, #32]
 8008158:	f1b8 0f00 	cmp.w	r8, #0
 800815c:	dd05      	ble.n	800816a <_dtoa_r+0x82a>
 800815e:	4649      	mov	r1, r9
 8008160:	4642      	mov	r2, r8
 8008162:	4658      	mov	r0, fp
 8008164:	f000 fc08 	bl	8008978 <__lshift>
 8008168:	4681      	mov	r9, r0
 800816a:	9b08      	ldr	r3, [sp, #32]
 800816c:	2b00      	cmp	r3, #0
 800816e:	dd05      	ble.n	800817c <_dtoa_r+0x83c>
 8008170:	4621      	mov	r1, r4
 8008172:	461a      	mov	r2, r3
 8008174:	4658      	mov	r0, fp
 8008176:	f000 fbff 	bl	8008978 <__lshift>
 800817a:	4604      	mov	r4, r0
 800817c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800817e:	2b00      	cmp	r3, #0
 8008180:	d059      	beq.n	8008236 <_dtoa_r+0x8f6>
 8008182:	4621      	mov	r1, r4
 8008184:	4648      	mov	r0, r9
 8008186:	f000 fc63 	bl	8008a50 <__mcmp>
 800818a:	2800      	cmp	r0, #0
 800818c:	da53      	bge.n	8008236 <_dtoa_r+0x8f6>
 800818e:	1e7b      	subs	r3, r7, #1
 8008190:	9304      	str	r3, [sp, #16]
 8008192:	4649      	mov	r1, r9
 8008194:	2300      	movs	r3, #0
 8008196:	220a      	movs	r2, #10
 8008198:	4658      	mov	r0, fp
 800819a:	f000 fa41 	bl	8008620 <__multadd>
 800819e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80081a0:	4681      	mov	r9, r0
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	f000 8172 	beq.w	800848c <_dtoa_r+0xb4c>
 80081a8:	2300      	movs	r3, #0
 80081aa:	4629      	mov	r1, r5
 80081ac:	220a      	movs	r2, #10
 80081ae:	4658      	mov	r0, fp
 80081b0:	f000 fa36 	bl	8008620 <__multadd>
 80081b4:	9b00      	ldr	r3, [sp, #0]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	4605      	mov	r5, r0
 80081ba:	dc67      	bgt.n	800828c <_dtoa_r+0x94c>
 80081bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081be:	2b02      	cmp	r3, #2
 80081c0:	dc41      	bgt.n	8008246 <_dtoa_r+0x906>
 80081c2:	e063      	b.n	800828c <_dtoa_r+0x94c>
 80081c4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80081c6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80081ca:	e746      	b.n	800805a <_dtoa_r+0x71a>
 80081cc:	9b07      	ldr	r3, [sp, #28]
 80081ce:	1e5c      	subs	r4, r3, #1
 80081d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081d2:	42a3      	cmp	r3, r4
 80081d4:	bfbf      	itttt	lt
 80081d6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80081d8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80081da:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80081dc:	1ae3      	sublt	r3, r4, r3
 80081de:	bfb4      	ite	lt
 80081e0:	18d2      	addlt	r2, r2, r3
 80081e2:	1b1c      	subge	r4, r3, r4
 80081e4:	9b07      	ldr	r3, [sp, #28]
 80081e6:	bfbc      	itt	lt
 80081e8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80081ea:	2400      	movlt	r4, #0
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	bfb5      	itete	lt
 80081f0:	eba8 0603 	sublt.w	r6, r8, r3
 80081f4:	9b07      	ldrge	r3, [sp, #28]
 80081f6:	2300      	movlt	r3, #0
 80081f8:	4646      	movge	r6, r8
 80081fa:	e730      	b.n	800805e <_dtoa_r+0x71e>
 80081fc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80081fe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008200:	4646      	mov	r6, r8
 8008202:	e735      	b.n	8008070 <_dtoa_r+0x730>
 8008204:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008206:	e75c      	b.n	80080c2 <_dtoa_r+0x782>
 8008208:	2300      	movs	r3, #0
 800820a:	e788      	b.n	800811e <_dtoa_r+0x7de>
 800820c:	3fe00000 	.word	0x3fe00000
 8008210:	40240000 	.word	0x40240000
 8008214:	40140000 	.word	0x40140000
 8008218:	9b02      	ldr	r3, [sp, #8]
 800821a:	e780      	b.n	800811e <_dtoa_r+0x7de>
 800821c:	2300      	movs	r3, #0
 800821e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008220:	e782      	b.n	8008128 <_dtoa_r+0x7e8>
 8008222:	d099      	beq.n	8008158 <_dtoa_r+0x818>
 8008224:	9a08      	ldr	r2, [sp, #32]
 8008226:	331c      	adds	r3, #28
 8008228:	441a      	add	r2, r3
 800822a:	4498      	add	r8, r3
 800822c:	441e      	add	r6, r3
 800822e:	9208      	str	r2, [sp, #32]
 8008230:	e792      	b.n	8008158 <_dtoa_r+0x818>
 8008232:	4603      	mov	r3, r0
 8008234:	e7f6      	b.n	8008224 <_dtoa_r+0x8e4>
 8008236:	9b07      	ldr	r3, [sp, #28]
 8008238:	9704      	str	r7, [sp, #16]
 800823a:	2b00      	cmp	r3, #0
 800823c:	dc20      	bgt.n	8008280 <_dtoa_r+0x940>
 800823e:	9300      	str	r3, [sp, #0]
 8008240:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008242:	2b02      	cmp	r3, #2
 8008244:	dd1e      	ble.n	8008284 <_dtoa_r+0x944>
 8008246:	9b00      	ldr	r3, [sp, #0]
 8008248:	2b00      	cmp	r3, #0
 800824a:	f47f aec0 	bne.w	8007fce <_dtoa_r+0x68e>
 800824e:	4621      	mov	r1, r4
 8008250:	2205      	movs	r2, #5
 8008252:	4658      	mov	r0, fp
 8008254:	f000 f9e4 	bl	8008620 <__multadd>
 8008258:	4601      	mov	r1, r0
 800825a:	4604      	mov	r4, r0
 800825c:	4648      	mov	r0, r9
 800825e:	f000 fbf7 	bl	8008a50 <__mcmp>
 8008262:	2800      	cmp	r0, #0
 8008264:	f77f aeb3 	ble.w	8007fce <_dtoa_r+0x68e>
 8008268:	4656      	mov	r6, sl
 800826a:	2331      	movs	r3, #49	@ 0x31
 800826c:	f806 3b01 	strb.w	r3, [r6], #1
 8008270:	9b04      	ldr	r3, [sp, #16]
 8008272:	3301      	adds	r3, #1
 8008274:	9304      	str	r3, [sp, #16]
 8008276:	e6ae      	b.n	8007fd6 <_dtoa_r+0x696>
 8008278:	9c07      	ldr	r4, [sp, #28]
 800827a:	9704      	str	r7, [sp, #16]
 800827c:	4625      	mov	r5, r4
 800827e:	e7f3      	b.n	8008268 <_dtoa_r+0x928>
 8008280:	9b07      	ldr	r3, [sp, #28]
 8008282:	9300      	str	r3, [sp, #0]
 8008284:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008286:	2b00      	cmp	r3, #0
 8008288:	f000 8104 	beq.w	8008494 <_dtoa_r+0xb54>
 800828c:	2e00      	cmp	r6, #0
 800828e:	dd05      	ble.n	800829c <_dtoa_r+0x95c>
 8008290:	4629      	mov	r1, r5
 8008292:	4632      	mov	r2, r6
 8008294:	4658      	mov	r0, fp
 8008296:	f000 fb6f 	bl	8008978 <__lshift>
 800829a:	4605      	mov	r5, r0
 800829c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d05a      	beq.n	8008358 <_dtoa_r+0xa18>
 80082a2:	6869      	ldr	r1, [r5, #4]
 80082a4:	4658      	mov	r0, fp
 80082a6:	f000 f959 	bl	800855c <_Balloc>
 80082aa:	4606      	mov	r6, r0
 80082ac:	b928      	cbnz	r0, 80082ba <_dtoa_r+0x97a>
 80082ae:	4b84      	ldr	r3, [pc, #528]	@ (80084c0 <_dtoa_r+0xb80>)
 80082b0:	4602      	mov	r2, r0
 80082b2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80082b6:	f7ff bb5a 	b.w	800796e <_dtoa_r+0x2e>
 80082ba:	692a      	ldr	r2, [r5, #16]
 80082bc:	3202      	adds	r2, #2
 80082be:	0092      	lsls	r2, r2, #2
 80082c0:	f105 010c 	add.w	r1, r5, #12
 80082c4:	300c      	adds	r0, #12
 80082c6:	f7ff faa2 	bl	800780e <memcpy>
 80082ca:	2201      	movs	r2, #1
 80082cc:	4631      	mov	r1, r6
 80082ce:	4658      	mov	r0, fp
 80082d0:	f000 fb52 	bl	8008978 <__lshift>
 80082d4:	f10a 0301 	add.w	r3, sl, #1
 80082d8:	9307      	str	r3, [sp, #28]
 80082da:	9b00      	ldr	r3, [sp, #0]
 80082dc:	4453      	add	r3, sl
 80082de:	930b      	str	r3, [sp, #44]	@ 0x2c
 80082e0:	9b02      	ldr	r3, [sp, #8]
 80082e2:	f003 0301 	and.w	r3, r3, #1
 80082e6:	462f      	mov	r7, r5
 80082e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80082ea:	4605      	mov	r5, r0
 80082ec:	9b07      	ldr	r3, [sp, #28]
 80082ee:	4621      	mov	r1, r4
 80082f0:	3b01      	subs	r3, #1
 80082f2:	4648      	mov	r0, r9
 80082f4:	9300      	str	r3, [sp, #0]
 80082f6:	f7ff fa98 	bl	800782a <quorem>
 80082fa:	4639      	mov	r1, r7
 80082fc:	9002      	str	r0, [sp, #8]
 80082fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008302:	4648      	mov	r0, r9
 8008304:	f000 fba4 	bl	8008a50 <__mcmp>
 8008308:	462a      	mov	r2, r5
 800830a:	9008      	str	r0, [sp, #32]
 800830c:	4621      	mov	r1, r4
 800830e:	4658      	mov	r0, fp
 8008310:	f000 fbba 	bl	8008a88 <__mdiff>
 8008314:	68c2      	ldr	r2, [r0, #12]
 8008316:	4606      	mov	r6, r0
 8008318:	bb02      	cbnz	r2, 800835c <_dtoa_r+0xa1c>
 800831a:	4601      	mov	r1, r0
 800831c:	4648      	mov	r0, r9
 800831e:	f000 fb97 	bl	8008a50 <__mcmp>
 8008322:	4602      	mov	r2, r0
 8008324:	4631      	mov	r1, r6
 8008326:	4658      	mov	r0, fp
 8008328:	920e      	str	r2, [sp, #56]	@ 0x38
 800832a:	f000 f957 	bl	80085dc <_Bfree>
 800832e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008330:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008332:	9e07      	ldr	r6, [sp, #28]
 8008334:	ea43 0102 	orr.w	r1, r3, r2
 8008338:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800833a:	4319      	orrs	r1, r3
 800833c:	d110      	bne.n	8008360 <_dtoa_r+0xa20>
 800833e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008342:	d029      	beq.n	8008398 <_dtoa_r+0xa58>
 8008344:	9b08      	ldr	r3, [sp, #32]
 8008346:	2b00      	cmp	r3, #0
 8008348:	dd02      	ble.n	8008350 <_dtoa_r+0xa10>
 800834a:	9b02      	ldr	r3, [sp, #8]
 800834c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008350:	9b00      	ldr	r3, [sp, #0]
 8008352:	f883 8000 	strb.w	r8, [r3]
 8008356:	e63f      	b.n	8007fd8 <_dtoa_r+0x698>
 8008358:	4628      	mov	r0, r5
 800835a:	e7bb      	b.n	80082d4 <_dtoa_r+0x994>
 800835c:	2201      	movs	r2, #1
 800835e:	e7e1      	b.n	8008324 <_dtoa_r+0x9e4>
 8008360:	9b08      	ldr	r3, [sp, #32]
 8008362:	2b00      	cmp	r3, #0
 8008364:	db04      	blt.n	8008370 <_dtoa_r+0xa30>
 8008366:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008368:	430b      	orrs	r3, r1
 800836a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800836c:	430b      	orrs	r3, r1
 800836e:	d120      	bne.n	80083b2 <_dtoa_r+0xa72>
 8008370:	2a00      	cmp	r2, #0
 8008372:	dded      	ble.n	8008350 <_dtoa_r+0xa10>
 8008374:	4649      	mov	r1, r9
 8008376:	2201      	movs	r2, #1
 8008378:	4658      	mov	r0, fp
 800837a:	f000 fafd 	bl	8008978 <__lshift>
 800837e:	4621      	mov	r1, r4
 8008380:	4681      	mov	r9, r0
 8008382:	f000 fb65 	bl	8008a50 <__mcmp>
 8008386:	2800      	cmp	r0, #0
 8008388:	dc03      	bgt.n	8008392 <_dtoa_r+0xa52>
 800838a:	d1e1      	bne.n	8008350 <_dtoa_r+0xa10>
 800838c:	f018 0f01 	tst.w	r8, #1
 8008390:	d0de      	beq.n	8008350 <_dtoa_r+0xa10>
 8008392:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008396:	d1d8      	bne.n	800834a <_dtoa_r+0xa0a>
 8008398:	9a00      	ldr	r2, [sp, #0]
 800839a:	2339      	movs	r3, #57	@ 0x39
 800839c:	7013      	strb	r3, [r2, #0]
 800839e:	4633      	mov	r3, r6
 80083a0:	461e      	mov	r6, r3
 80083a2:	3b01      	subs	r3, #1
 80083a4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80083a8:	2a39      	cmp	r2, #57	@ 0x39
 80083aa:	d052      	beq.n	8008452 <_dtoa_r+0xb12>
 80083ac:	3201      	adds	r2, #1
 80083ae:	701a      	strb	r2, [r3, #0]
 80083b0:	e612      	b.n	8007fd8 <_dtoa_r+0x698>
 80083b2:	2a00      	cmp	r2, #0
 80083b4:	dd07      	ble.n	80083c6 <_dtoa_r+0xa86>
 80083b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80083ba:	d0ed      	beq.n	8008398 <_dtoa_r+0xa58>
 80083bc:	9a00      	ldr	r2, [sp, #0]
 80083be:	f108 0301 	add.w	r3, r8, #1
 80083c2:	7013      	strb	r3, [r2, #0]
 80083c4:	e608      	b.n	8007fd8 <_dtoa_r+0x698>
 80083c6:	9b07      	ldr	r3, [sp, #28]
 80083c8:	9a07      	ldr	r2, [sp, #28]
 80083ca:	f803 8c01 	strb.w	r8, [r3, #-1]
 80083ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d028      	beq.n	8008426 <_dtoa_r+0xae6>
 80083d4:	4649      	mov	r1, r9
 80083d6:	2300      	movs	r3, #0
 80083d8:	220a      	movs	r2, #10
 80083da:	4658      	mov	r0, fp
 80083dc:	f000 f920 	bl	8008620 <__multadd>
 80083e0:	42af      	cmp	r7, r5
 80083e2:	4681      	mov	r9, r0
 80083e4:	f04f 0300 	mov.w	r3, #0
 80083e8:	f04f 020a 	mov.w	r2, #10
 80083ec:	4639      	mov	r1, r7
 80083ee:	4658      	mov	r0, fp
 80083f0:	d107      	bne.n	8008402 <_dtoa_r+0xac2>
 80083f2:	f000 f915 	bl	8008620 <__multadd>
 80083f6:	4607      	mov	r7, r0
 80083f8:	4605      	mov	r5, r0
 80083fa:	9b07      	ldr	r3, [sp, #28]
 80083fc:	3301      	adds	r3, #1
 80083fe:	9307      	str	r3, [sp, #28]
 8008400:	e774      	b.n	80082ec <_dtoa_r+0x9ac>
 8008402:	f000 f90d 	bl	8008620 <__multadd>
 8008406:	4629      	mov	r1, r5
 8008408:	4607      	mov	r7, r0
 800840a:	2300      	movs	r3, #0
 800840c:	220a      	movs	r2, #10
 800840e:	4658      	mov	r0, fp
 8008410:	f000 f906 	bl	8008620 <__multadd>
 8008414:	4605      	mov	r5, r0
 8008416:	e7f0      	b.n	80083fa <_dtoa_r+0xaba>
 8008418:	9b00      	ldr	r3, [sp, #0]
 800841a:	2b00      	cmp	r3, #0
 800841c:	bfcc      	ite	gt
 800841e:	461e      	movgt	r6, r3
 8008420:	2601      	movle	r6, #1
 8008422:	4456      	add	r6, sl
 8008424:	2700      	movs	r7, #0
 8008426:	4649      	mov	r1, r9
 8008428:	2201      	movs	r2, #1
 800842a:	4658      	mov	r0, fp
 800842c:	f000 faa4 	bl	8008978 <__lshift>
 8008430:	4621      	mov	r1, r4
 8008432:	4681      	mov	r9, r0
 8008434:	f000 fb0c 	bl	8008a50 <__mcmp>
 8008438:	2800      	cmp	r0, #0
 800843a:	dcb0      	bgt.n	800839e <_dtoa_r+0xa5e>
 800843c:	d102      	bne.n	8008444 <_dtoa_r+0xb04>
 800843e:	f018 0f01 	tst.w	r8, #1
 8008442:	d1ac      	bne.n	800839e <_dtoa_r+0xa5e>
 8008444:	4633      	mov	r3, r6
 8008446:	461e      	mov	r6, r3
 8008448:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800844c:	2a30      	cmp	r2, #48	@ 0x30
 800844e:	d0fa      	beq.n	8008446 <_dtoa_r+0xb06>
 8008450:	e5c2      	b.n	8007fd8 <_dtoa_r+0x698>
 8008452:	459a      	cmp	sl, r3
 8008454:	d1a4      	bne.n	80083a0 <_dtoa_r+0xa60>
 8008456:	9b04      	ldr	r3, [sp, #16]
 8008458:	3301      	adds	r3, #1
 800845a:	9304      	str	r3, [sp, #16]
 800845c:	2331      	movs	r3, #49	@ 0x31
 800845e:	f88a 3000 	strb.w	r3, [sl]
 8008462:	e5b9      	b.n	8007fd8 <_dtoa_r+0x698>
 8008464:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008466:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80084c4 <_dtoa_r+0xb84>
 800846a:	b11b      	cbz	r3, 8008474 <_dtoa_r+0xb34>
 800846c:	f10a 0308 	add.w	r3, sl, #8
 8008470:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008472:	6013      	str	r3, [r2, #0]
 8008474:	4650      	mov	r0, sl
 8008476:	b019      	add	sp, #100	@ 0x64
 8008478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800847c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800847e:	2b01      	cmp	r3, #1
 8008480:	f77f ae37 	ble.w	80080f2 <_dtoa_r+0x7b2>
 8008484:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008486:	930a      	str	r3, [sp, #40]	@ 0x28
 8008488:	2001      	movs	r0, #1
 800848a:	e655      	b.n	8008138 <_dtoa_r+0x7f8>
 800848c:	9b00      	ldr	r3, [sp, #0]
 800848e:	2b00      	cmp	r3, #0
 8008490:	f77f aed6 	ble.w	8008240 <_dtoa_r+0x900>
 8008494:	4656      	mov	r6, sl
 8008496:	4621      	mov	r1, r4
 8008498:	4648      	mov	r0, r9
 800849a:	f7ff f9c6 	bl	800782a <quorem>
 800849e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80084a2:	f806 8b01 	strb.w	r8, [r6], #1
 80084a6:	9b00      	ldr	r3, [sp, #0]
 80084a8:	eba6 020a 	sub.w	r2, r6, sl
 80084ac:	4293      	cmp	r3, r2
 80084ae:	ddb3      	ble.n	8008418 <_dtoa_r+0xad8>
 80084b0:	4649      	mov	r1, r9
 80084b2:	2300      	movs	r3, #0
 80084b4:	220a      	movs	r2, #10
 80084b6:	4658      	mov	r0, fp
 80084b8:	f000 f8b2 	bl	8008620 <__multadd>
 80084bc:	4681      	mov	r9, r0
 80084be:	e7ea      	b.n	8008496 <_dtoa_r+0xb56>
 80084c0:	08009960 	.word	0x08009960
 80084c4:	080098e4 	.word	0x080098e4

080084c8 <_free_r>:
 80084c8:	b538      	push	{r3, r4, r5, lr}
 80084ca:	4605      	mov	r5, r0
 80084cc:	2900      	cmp	r1, #0
 80084ce:	d041      	beq.n	8008554 <_free_r+0x8c>
 80084d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084d4:	1f0c      	subs	r4, r1, #4
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	bfb8      	it	lt
 80084da:	18e4      	addlt	r4, r4, r3
 80084dc:	f7fe fb02 	bl	8006ae4 <__malloc_lock>
 80084e0:	4a1d      	ldr	r2, [pc, #116]	@ (8008558 <_free_r+0x90>)
 80084e2:	6813      	ldr	r3, [r2, #0]
 80084e4:	b933      	cbnz	r3, 80084f4 <_free_r+0x2c>
 80084e6:	6063      	str	r3, [r4, #4]
 80084e8:	6014      	str	r4, [r2, #0]
 80084ea:	4628      	mov	r0, r5
 80084ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084f0:	f7fe bafe 	b.w	8006af0 <__malloc_unlock>
 80084f4:	42a3      	cmp	r3, r4
 80084f6:	d908      	bls.n	800850a <_free_r+0x42>
 80084f8:	6820      	ldr	r0, [r4, #0]
 80084fa:	1821      	adds	r1, r4, r0
 80084fc:	428b      	cmp	r3, r1
 80084fe:	bf01      	itttt	eq
 8008500:	6819      	ldreq	r1, [r3, #0]
 8008502:	685b      	ldreq	r3, [r3, #4]
 8008504:	1809      	addeq	r1, r1, r0
 8008506:	6021      	streq	r1, [r4, #0]
 8008508:	e7ed      	b.n	80084e6 <_free_r+0x1e>
 800850a:	461a      	mov	r2, r3
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	b10b      	cbz	r3, 8008514 <_free_r+0x4c>
 8008510:	42a3      	cmp	r3, r4
 8008512:	d9fa      	bls.n	800850a <_free_r+0x42>
 8008514:	6811      	ldr	r1, [r2, #0]
 8008516:	1850      	adds	r0, r2, r1
 8008518:	42a0      	cmp	r0, r4
 800851a:	d10b      	bne.n	8008534 <_free_r+0x6c>
 800851c:	6820      	ldr	r0, [r4, #0]
 800851e:	4401      	add	r1, r0
 8008520:	1850      	adds	r0, r2, r1
 8008522:	4283      	cmp	r3, r0
 8008524:	6011      	str	r1, [r2, #0]
 8008526:	d1e0      	bne.n	80084ea <_free_r+0x22>
 8008528:	6818      	ldr	r0, [r3, #0]
 800852a:	685b      	ldr	r3, [r3, #4]
 800852c:	6053      	str	r3, [r2, #4]
 800852e:	4408      	add	r0, r1
 8008530:	6010      	str	r0, [r2, #0]
 8008532:	e7da      	b.n	80084ea <_free_r+0x22>
 8008534:	d902      	bls.n	800853c <_free_r+0x74>
 8008536:	230c      	movs	r3, #12
 8008538:	602b      	str	r3, [r5, #0]
 800853a:	e7d6      	b.n	80084ea <_free_r+0x22>
 800853c:	6820      	ldr	r0, [r4, #0]
 800853e:	1821      	adds	r1, r4, r0
 8008540:	428b      	cmp	r3, r1
 8008542:	bf04      	itt	eq
 8008544:	6819      	ldreq	r1, [r3, #0]
 8008546:	685b      	ldreq	r3, [r3, #4]
 8008548:	6063      	str	r3, [r4, #4]
 800854a:	bf04      	itt	eq
 800854c:	1809      	addeq	r1, r1, r0
 800854e:	6021      	streq	r1, [r4, #0]
 8008550:	6054      	str	r4, [r2, #4]
 8008552:	e7ca      	b.n	80084ea <_free_r+0x22>
 8008554:	bd38      	pop	{r3, r4, r5, pc}
 8008556:	bf00      	nop
 8008558:	20000ef0 	.word	0x20000ef0

0800855c <_Balloc>:
 800855c:	b570      	push	{r4, r5, r6, lr}
 800855e:	69c6      	ldr	r6, [r0, #28]
 8008560:	4604      	mov	r4, r0
 8008562:	460d      	mov	r5, r1
 8008564:	b976      	cbnz	r6, 8008584 <_Balloc+0x28>
 8008566:	2010      	movs	r0, #16
 8008568:	f7fe fa0a 	bl	8006980 <malloc>
 800856c:	4602      	mov	r2, r0
 800856e:	61e0      	str	r0, [r4, #28]
 8008570:	b920      	cbnz	r0, 800857c <_Balloc+0x20>
 8008572:	4b18      	ldr	r3, [pc, #96]	@ (80085d4 <_Balloc+0x78>)
 8008574:	4818      	ldr	r0, [pc, #96]	@ (80085d8 <_Balloc+0x7c>)
 8008576:	216b      	movs	r1, #107	@ 0x6b
 8008578:	f000 fd98 	bl	80090ac <__assert_func>
 800857c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008580:	6006      	str	r6, [r0, #0]
 8008582:	60c6      	str	r6, [r0, #12]
 8008584:	69e6      	ldr	r6, [r4, #28]
 8008586:	68f3      	ldr	r3, [r6, #12]
 8008588:	b183      	cbz	r3, 80085ac <_Balloc+0x50>
 800858a:	69e3      	ldr	r3, [r4, #28]
 800858c:	68db      	ldr	r3, [r3, #12]
 800858e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008592:	b9b8      	cbnz	r0, 80085c4 <_Balloc+0x68>
 8008594:	2101      	movs	r1, #1
 8008596:	fa01 f605 	lsl.w	r6, r1, r5
 800859a:	1d72      	adds	r2, r6, #5
 800859c:	0092      	lsls	r2, r2, #2
 800859e:	4620      	mov	r0, r4
 80085a0:	f000 fda2 	bl	80090e8 <_calloc_r>
 80085a4:	b160      	cbz	r0, 80085c0 <_Balloc+0x64>
 80085a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80085aa:	e00e      	b.n	80085ca <_Balloc+0x6e>
 80085ac:	2221      	movs	r2, #33	@ 0x21
 80085ae:	2104      	movs	r1, #4
 80085b0:	4620      	mov	r0, r4
 80085b2:	f000 fd99 	bl	80090e8 <_calloc_r>
 80085b6:	69e3      	ldr	r3, [r4, #28]
 80085b8:	60f0      	str	r0, [r6, #12]
 80085ba:	68db      	ldr	r3, [r3, #12]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d1e4      	bne.n	800858a <_Balloc+0x2e>
 80085c0:	2000      	movs	r0, #0
 80085c2:	bd70      	pop	{r4, r5, r6, pc}
 80085c4:	6802      	ldr	r2, [r0, #0]
 80085c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80085ca:	2300      	movs	r3, #0
 80085cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80085d0:	e7f7      	b.n	80085c2 <_Balloc+0x66>
 80085d2:	bf00      	nop
 80085d4:	080098f1 	.word	0x080098f1
 80085d8:	08009971 	.word	0x08009971

080085dc <_Bfree>:
 80085dc:	b570      	push	{r4, r5, r6, lr}
 80085de:	69c6      	ldr	r6, [r0, #28]
 80085e0:	4605      	mov	r5, r0
 80085e2:	460c      	mov	r4, r1
 80085e4:	b976      	cbnz	r6, 8008604 <_Bfree+0x28>
 80085e6:	2010      	movs	r0, #16
 80085e8:	f7fe f9ca 	bl	8006980 <malloc>
 80085ec:	4602      	mov	r2, r0
 80085ee:	61e8      	str	r0, [r5, #28]
 80085f0:	b920      	cbnz	r0, 80085fc <_Bfree+0x20>
 80085f2:	4b09      	ldr	r3, [pc, #36]	@ (8008618 <_Bfree+0x3c>)
 80085f4:	4809      	ldr	r0, [pc, #36]	@ (800861c <_Bfree+0x40>)
 80085f6:	218f      	movs	r1, #143	@ 0x8f
 80085f8:	f000 fd58 	bl	80090ac <__assert_func>
 80085fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008600:	6006      	str	r6, [r0, #0]
 8008602:	60c6      	str	r6, [r0, #12]
 8008604:	b13c      	cbz	r4, 8008616 <_Bfree+0x3a>
 8008606:	69eb      	ldr	r3, [r5, #28]
 8008608:	6862      	ldr	r2, [r4, #4]
 800860a:	68db      	ldr	r3, [r3, #12]
 800860c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008610:	6021      	str	r1, [r4, #0]
 8008612:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008616:	bd70      	pop	{r4, r5, r6, pc}
 8008618:	080098f1 	.word	0x080098f1
 800861c:	08009971 	.word	0x08009971

08008620 <__multadd>:
 8008620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008624:	690d      	ldr	r5, [r1, #16]
 8008626:	4607      	mov	r7, r0
 8008628:	460c      	mov	r4, r1
 800862a:	461e      	mov	r6, r3
 800862c:	f101 0c14 	add.w	ip, r1, #20
 8008630:	2000      	movs	r0, #0
 8008632:	f8dc 3000 	ldr.w	r3, [ip]
 8008636:	b299      	uxth	r1, r3
 8008638:	fb02 6101 	mla	r1, r2, r1, r6
 800863c:	0c1e      	lsrs	r6, r3, #16
 800863e:	0c0b      	lsrs	r3, r1, #16
 8008640:	fb02 3306 	mla	r3, r2, r6, r3
 8008644:	b289      	uxth	r1, r1
 8008646:	3001      	adds	r0, #1
 8008648:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800864c:	4285      	cmp	r5, r0
 800864e:	f84c 1b04 	str.w	r1, [ip], #4
 8008652:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008656:	dcec      	bgt.n	8008632 <__multadd+0x12>
 8008658:	b30e      	cbz	r6, 800869e <__multadd+0x7e>
 800865a:	68a3      	ldr	r3, [r4, #8]
 800865c:	42ab      	cmp	r3, r5
 800865e:	dc19      	bgt.n	8008694 <__multadd+0x74>
 8008660:	6861      	ldr	r1, [r4, #4]
 8008662:	4638      	mov	r0, r7
 8008664:	3101      	adds	r1, #1
 8008666:	f7ff ff79 	bl	800855c <_Balloc>
 800866a:	4680      	mov	r8, r0
 800866c:	b928      	cbnz	r0, 800867a <__multadd+0x5a>
 800866e:	4602      	mov	r2, r0
 8008670:	4b0c      	ldr	r3, [pc, #48]	@ (80086a4 <__multadd+0x84>)
 8008672:	480d      	ldr	r0, [pc, #52]	@ (80086a8 <__multadd+0x88>)
 8008674:	21ba      	movs	r1, #186	@ 0xba
 8008676:	f000 fd19 	bl	80090ac <__assert_func>
 800867a:	6922      	ldr	r2, [r4, #16]
 800867c:	3202      	adds	r2, #2
 800867e:	f104 010c 	add.w	r1, r4, #12
 8008682:	0092      	lsls	r2, r2, #2
 8008684:	300c      	adds	r0, #12
 8008686:	f7ff f8c2 	bl	800780e <memcpy>
 800868a:	4621      	mov	r1, r4
 800868c:	4638      	mov	r0, r7
 800868e:	f7ff ffa5 	bl	80085dc <_Bfree>
 8008692:	4644      	mov	r4, r8
 8008694:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008698:	3501      	adds	r5, #1
 800869a:	615e      	str	r6, [r3, #20]
 800869c:	6125      	str	r5, [r4, #16]
 800869e:	4620      	mov	r0, r4
 80086a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086a4:	08009960 	.word	0x08009960
 80086a8:	08009971 	.word	0x08009971

080086ac <__hi0bits>:
 80086ac:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80086b0:	4603      	mov	r3, r0
 80086b2:	bf36      	itet	cc
 80086b4:	0403      	lslcc	r3, r0, #16
 80086b6:	2000      	movcs	r0, #0
 80086b8:	2010      	movcc	r0, #16
 80086ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80086be:	bf3c      	itt	cc
 80086c0:	021b      	lslcc	r3, r3, #8
 80086c2:	3008      	addcc	r0, #8
 80086c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80086c8:	bf3c      	itt	cc
 80086ca:	011b      	lslcc	r3, r3, #4
 80086cc:	3004      	addcc	r0, #4
 80086ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086d2:	bf3c      	itt	cc
 80086d4:	009b      	lslcc	r3, r3, #2
 80086d6:	3002      	addcc	r0, #2
 80086d8:	2b00      	cmp	r3, #0
 80086da:	db05      	blt.n	80086e8 <__hi0bits+0x3c>
 80086dc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80086e0:	f100 0001 	add.w	r0, r0, #1
 80086e4:	bf08      	it	eq
 80086e6:	2020      	moveq	r0, #32
 80086e8:	4770      	bx	lr

080086ea <__lo0bits>:
 80086ea:	6803      	ldr	r3, [r0, #0]
 80086ec:	4602      	mov	r2, r0
 80086ee:	f013 0007 	ands.w	r0, r3, #7
 80086f2:	d00b      	beq.n	800870c <__lo0bits+0x22>
 80086f4:	07d9      	lsls	r1, r3, #31
 80086f6:	d421      	bmi.n	800873c <__lo0bits+0x52>
 80086f8:	0798      	lsls	r0, r3, #30
 80086fa:	bf49      	itett	mi
 80086fc:	085b      	lsrmi	r3, r3, #1
 80086fe:	089b      	lsrpl	r3, r3, #2
 8008700:	2001      	movmi	r0, #1
 8008702:	6013      	strmi	r3, [r2, #0]
 8008704:	bf5c      	itt	pl
 8008706:	6013      	strpl	r3, [r2, #0]
 8008708:	2002      	movpl	r0, #2
 800870a:	4770      	bx	lr
 800870c:	b299      	uxth	r1, r3
 800870e:	b909      	cbnz	r1, 8008714 <__lo0bits+0x2a>
 8008710:	0c1b      	lsrs	r3, r3, #16
 8008712:	2010      	movs	r0, #16
 8008714:	b2d9      	uxtb	r1, r3
 8008716:	b909      	cbnz	r1, 800871c <__lo0bits+0x32>
 8008718:	3008      	adds	r0, #8
 800871a:	0a1b      	lsrs	r3, r3, #8
 800871c:	0719      	lsls	r1, r3, #28
 800871e:	bf04      	itt	eq
 8008720:	091b      	lsreq	r3, r3, #4
 8008722:	3004      	addeq	r0, #4
 8008724:	0799      	lsls	r1, r3, #30
 8008726:	bf04      	itt	eq
 8008728:	089b      	lsreq	r3, r3, #2
 800872a:	3002      	addeq	r0, #2
 800872c:	07d9      	lsls	r1, r3, #31
 800872e:	d403      	bmi.n	8008738 <__lo0bits+0x4e>
 8008730:	085b      	lsrs	r3, r3, #1
 8008732:	f100 0001 	add.w	r0, r0, #1
 8008736:	d003      	beq.n	8008740 <__lo0bits+0x56>
 8008738:	6013      	str	r3, [r2, #0]
 800873a:	4770      	bx	lr
 800873c:	2000      	movs	r0, #0
 800873e:	4770      	bx	lr
 8008740:	2020      	movs	r0, #32
 8008742:	4770      	bx	lr

08008744 <__i2b>:
 8008744:	b510      	push	{r4, lr}
 8008746:	460c      	mov	r4, r1
 8008748:	2101      	movs	r1, #1
 800874a:	f7ff ff07 	bl	800855c <_Balloc>
 800874e:	4602      	mov	r2, r0
 8008750:	b928      	cbnz	r0, 800875e <__i2b+0x1a>
 8008752:	4b05      	ldr	r3, [pc, #20]	@ (8008768 <__i2b+0x24>)
 8008754:	4805      	ldr	r0, [pc, #20]	@ (800876c <__i2b+0x28>)
 8008756:	f240 1145 	movw	r1, #325	@ 0x145
 800875a:	f000 fca7 	bl	80090ac <__assert_func>
 800875e:	2301      	movs	r3, #1
 8008760:	6144      	str	r4, [r0, #20]
 8008762:	6103      	str	r3, [r0, #16]
 8008764:	bd10      	pop	{r4, pc}
 8008766:	bf00      	nop
 8008768:	08009960 	.word	0x08009960
 800876c:	08009971 	.word	0x08009971

08008770 <__multiply>:
 8008770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008774:	4614      	mov	r4, r2
 8008776:	690a      	ldr	r2, [r1, #16]
 8008778:	6923      	ldr	r3, [r4, #16]
 800877a:	429a      	cmp	r2, r3
 800877c:	bfa8      	it	ge
 800877e:	4623      	movge	r3, r4
 8008780:	460f      	mov	r7, r1
 8008782:	bfa4      	itt	ge
 8008784:	460c      	movge	r4, r1
 8008786:	461f      	movge	r7, r3
 8008788:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800878c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008790:	68a3      	ldr	r3, [r4, #8]
 8008792:	6861      	ldr	r1, [r4, #4]
 8008794:	eb0a 0609 	add.w	r6, sl, r9
 8008798:	42b3      	cmp	r3, r6
 800879a:	b085      	sub	sp, #20
 800879c:	bfb8      	it	lt
 800879e:	3101      	addlt	r1, #1
 80087a0:	f7ff fedc 	bl	800855c <_Balloc>
 80087a4:	b930      	cbnz	r0, 80087b4 <__multiply+0x44>
 80087a6:	4602      	mov	r2, r0
 80087a8:	4b44      	ldr	r3, [pc, #272]	@ (80088bc <__multiply+0x14c>)
 80087aa:	4845      	ldr	r0, [pc, #276]	@ (80088c0 <__multiply+0x150>)
 80087ac:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80087b0:	f000 fc7c 	bl	80090ac <__assert_func>
 80087b4:	f100 0514 	add.w	r5, r0, #20
 80087b8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80087bc:	462b      	mov	r3, r5
 80087be:	2200      	movs	r2, #0
 80087c0:	4543      	cmp	r3, r8
 80087c2:	d321      	bcc.n	8008808 <__multiply+0x98>
 80087c4:	f107 0114 	add.w	r1, r7, #20
 80087c8:	f104 0214 	add.w	r2, r4, #20
 80087cc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80087d0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80087d4:	9302      	str	r3, [sp, #8]
 80087d6:	1b13      	subs	r3, r2, r4
 80087d8:	3b15      	subs	r3, #21
 80087da:	f023 0303 	bic.w	r3, r3, #3
 80087de:	3304      	adds	r3, #4
 80087e0:	f104 0715 	add.w	r7, r4, #21
 80087e4:	42ba      	cmp	r2, r7
 80087e6:	bf38      	it	cc
 80087e8:	2304      	movcc	r3, #4
 80087ea:	9301      	str	r3, [sp, #4]
 80087ec:	9b02      	ldr	r3, [sp, #8]
 80087ee:	9103      	str	r1, [sp, #12]
 80087f0:	428b      	cmp	r3, r1
 80087f2:	d80c      	bhi.n	800880e <__multiply+0x9e>
 80087f4:	2e00      	cmp	r6, #0
 80087f6:	dd03      	ble.n	8008800 <__multiply+0x90>
 80087f8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d05b      	beq.n	80088b8 <__multiply+0x148>
 8008800:	6106      	str	r6, [r0, #16]
 8008802:	b005      	add	sp, #20
 8008804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008808:	f843 2b04 	str.w	r2, [r3], #4
 800880c:	e7d8      	b.n	80087c0 <__multiply+0x50>
 800880e:	f8b1 a000 	ldrh.w	sl, [r1]
 8008812:	f1ba 0f00 	cmp.w	sl, #0
 8008816:	d024      	beq.n	8008862 <__multiply+0xf2>
 8008818:	f104 0e14 	add.w	lr, r4, #20
 800881c:	46a9      	mov	r9, r5
 800881e:	f04f 0c00 	mov.w	ip, #0
 8008822:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008826:	f8d9 3000 	ldr.w	r3, [r9]
 800882a:	fa1f fb87 	uxth.w	fp, r7
 800882e:	b29b      	uxth	r3, r3
 8008830:	fb0a 330b 	mla	r3, sl, fp, r3
 8008834:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008838:	f8d9 7000 	ldr.w	r7, [r9]
 800883c:	4463      	add	r3, ip
 800883e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008842:	fb0a c70b 	mla	r7, sl, fp, ip
 8008846:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800884a:	b29b      	uxth	r3, r3
 800884c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008850:	4572      	cmp	r2, lr
 8008852:	f849 3b04 	str.w	r3, [r9], #4
 8008856:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800885a:	d8e2      	bhi.n	8008822 <__multiply+0xb2>
 800885c:	9b01      	ldr	r3, [sp, #4]
 800885e:	f845 c003 	str.w	ip, [r5, r3]
 8008862:	9b03      	ldr	r3, [sp, #12]
 8008864:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008868:	3104      	adds	r1, #4
 800886a:	f1b9 0f00 	cmp.w	r9, #0
 800886e:	d021      	beq.n	80088b4 <__multiply+0x144>
 8008870:	682b      	ldr	r3, [r5, #0]
 8008872:	f104 0c14 	add.w	ip, r4, #20
 8008876:	46ae      	mov	lr, r5
 8008878:	f04f 0a00 	mov.w	sl, #0
 800887c:	f8bc b000 	ldrh.w	fp, [ip]
 8008880:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008884:	fb09 770b 	mla	r7, r9, fp, r7
 8008888:	4457      	add	r7, sl
 800888a:	b29b      	uxth	r3, r3
 800888c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008890:	f84e 3b04 	str.w	r3, [lr], #4
 8008894:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008898:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800889c:	f8be 3000 	ldrh.w	r3, [lr]
 80088a0:	fb09 330a 	mla	r3, r9, sl, r3
 80088a4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80088a8:	4562      	cmp	r2, ip
 80088aa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80088ae:	d8e5      	bhi.n	800887c <__multiply+0x10c>
 80088b0:	9f01      	ldr	r7, [sp, #4]
 80088b2:	51eb      	str	r3, [r5, r7]
 80088b4:	3504      	adds	r5, #4
 80088b6:	e799      	b.n	80087ec <__multiply+0x7c>
 80088b8:	3e01      	subs	r6, #1
 80088ba:	e79b      	b.n	80087f4 <__multiply+0x84>
 80088bc:	08009960 	.word	0x08009960
 80088c0:	08009971 	.word	0x08009971

080088c4 <__pow5mult>:
 80088c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088c8:	4615      	mov	r5, r2
 80088ca:	f012 0203 	ands.w	r2, r2, #3
 80088ce:	4607      	mov	r7, r0
 80088d0:	460e      	mov	r6, r1
 80088d2:	d007      	beq.n	80088e4 <__pow5mult+0x20>
 80088d4:	4c25      	ldr	r4, [pc, #148]	@ (800896c <__pow5mult+0xa8>)
 80088d6:	3a01      	subs	r2, #1
 80088d8:	2300      	movs	r3, #0
 80088da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80088de:	f7ff fe9f 	bl	8008620 <__multadd>
 80088e2:	4606      	mov	r6, r0
 80088e4:	10ad      	asrs	r5, r5, #2
 80088e6:	d03d      	beq.n	8008964 <__pow5mult+0xa0>
 80088e8:	69fc      	ldr	r4, [r7, #28]
 80088ea:	b97c      	cbnz	r4, 800890c <__pow5mult+0x48>
 80088ec:	2010      	movs	r0, #16
 80088ee:	f7fe f847 	bl	8006980 <malloc>
 80088f2:	4602      	mov	r2, r0
 80088f4:	61f8      	str	r0, [r7, #28]
 80088f6:	b928      	cbnz	r0, 8008904 <__pow5mult+0x40>
 80088f8:	4b1d      	ldr	r3, [pc, #116]	@ (8008970 <__pow5mult+0xac>)
 80088fa:	481e      	ldr	r0, [pc, #120]	@ (8008974 <__pow5mult+0xb0>)
 80088fc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008900:	f000 fbd4 	bl	80090ac <__assert_func>
 8008904:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008908:	6004      	str	r4, [r0, #0]
 800890a:	60c4      	str	r4, [r0, #12]
 800890c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008910:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008914:	b94c      	cbnz	r4, 800892a <__pow5mult+0x66>
 8008916:	f240 2171 	movw	r1, #625	@ 0x271
 800891a:	4638      	mov	r0, r7
 800891c:	f7ff ff12 	bl	8008744 <__i2b>
 8008920:	2300      	movs	r3, #0
 8008922:	f8c8 0008 	str.w	r0, [r8, #8]
 8008926:	4604      	mov	r4, r0
 8008928:	6003      	str	r3, [r0, #0]
 800892a:	f04f 0900 	mov.w	r9, #0
 800892e:	07eb      	lsls	r3, r5, #31
 8008930:	d50a      	bpl.n	8008948 <__pow5mult+0x84>
 8008932:	4631      	mov	r1, r6
 8008934:	4622      	mov	r2, r4
 8008936:	4638      	mov	r0, r7
 8008938:	f7ff ff1a 	bl	8008770 <__multiply>
 800893c:	4631      	mov	r1, r6
 800893e:	4680      	mov	r8, r0
 8008940:	4638      	mov	r0, r7
 8008942:	f7ff fe4b 	bl	80085dc <_Bfree>
 8008946:	4646      	mov	r6, r8
 8008948:	106d      	asrs	r5, r5, #1
 800894a:	d00b      	beq.n	8008964 <__pow5mult+0xa0>
 800894c:	6820      	ldr	r0, [r4, #0]
 800894e:	b938      	cbnz	r0, 8008960 <__pow5mult+0x9c>
 8008950:	4622      	mov	r2, r4
 8008952:	4621      	mov	r1, r4
 8008954:	4638      	mov	r0, r7
 8008956:	f7ff ff0b 	bl	8008770 <__multiply>
 800895a:	6020      	str	r0, [r4, #0]
 800895c:	f8c0 9000 	str.w	r9, [r0]
 8008960:	4604      	mov	r4, r0
 8008962:	e7e4      	b.n	800892e <__pow5mult+0x6a>
 8008964:	4630      	mov	r0, r6
 8008966:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800896a:	bf00      	nop
 800896c:	080099cc 	.word	0x080099cc
 8008970:	080098f1 	.word	0x080098f1
 8008974:	08009971 	.word	0x08009971

08008978 <__lshift>:
 8008978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800897c:	460c      	mov	r4, r1
 800897e:	6849      	ldr	r1, [r1, #4]
 8008980:	6923      	ldr	r3, [r4, #16]
 8008982:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008986:	68a3      	ldr	r3, [r4, #8]
 8008988:	4607      	mov	r7, r0
 800898a:	4691      	mov	r9, r2
 800898c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008990:	f108 0601 	add.w	r6, r8, #1
 8008994:	42b3      	cmp	r3, r6
 8008996:	db0b      	blt.n	80089b0 <__lshift+0x38>
 8008998:	4638      	mov	r0, r7
 800899a:	f7ff fddf 	bl	800855c <_Balloc>
 800899e:	4605      	mov	r5, r0
 80089a0:	b948      	cbnz	r0, 80089b6 <__lshift+0x3e>
 80089a2:	4602      	mov	r2, r0
 80089a4:	4b28      	ldr	r3, [pc, #160]	@ (8008a48 <__lshift+0xd0>)
 80089a6:	4829      	ldr	r0, [pc, #164]	@ (8008a4c <__lshift+0xd4>)
 80089a8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80089ac:	f000 fb7e 	bl	80090ac <__assert_func>
 80089b0:	3101      	adds	r1, #1
 80089b2:	005b      	lsls	r3, r3, #1
 80089b4:	e7ee      	b.n	8008994 <__lshift+0x1c>
 80089b6:	2300      	movs	r3, #0
 80089b8:	f100 0114 	add.w	r1, r0, #20
 80089bc:	f100 0210 	add.w	r2, r0, #16
 80089c0:	4618      	mov	r0, r3
 80089c2:	4553      	cmp	r3, sl
 80089c4:	db33      	blt.n	8008a2e <__lshift+0xb6>
 80089c6:	6920      	ldr	r0, [r4, #16]
 80089c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80089cc:	f104 0314 	add.w	r3, r4, #20
 80089d0:	f019 091f 	ands.w	r9, r9, #31
 80089d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80089d8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80089dc:	d02b      	beq.n	8008a36 <__lshift+0xbe>
 80089de:	f1c9 0e20 	rsb	lr, r9, #32
 80089e2:	468a      	mov	sl, r1
 80089e4:	2200      	movs	r2, #0
 80089e6:	6818      	ldr	r0, [r3, #0]
 80089e8:	fa00 f009 	lsl.w	r0, r0, r9
 80089ec:	4310      	orrs	r0, r2
 80089ee:	f84a 0b04 	str.w	r0, [sl], #4
 80089f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80089f6:	459c      	cmp	ip, r3
 80089f8:	fa22 f20e 	lsr.w	r2, r2, lr
 80089fc:	d8f3      	bhi.n	80089e6 <__lshift+0x6e>
 80089fe:	ebac 0304 	sub.w	r3, ip, r4
 8008a02:	3b15      	subs	r3, #21
 8008a04:	f023 0303 	bic.w	r3, r3, #3
 8008a08:	3304      	adds	r3, #4
 8008a0a:	f104 0015 	add.w	r0, r4, #21
 8008a0e:	4584      	cmp	ip, r0
 8008a10:	bf38      	it	cc
 8008a12:	2304      	movcc	r3, #4
 8008a14:	50ca      	str	r2, [r1, r3]
 8008a16:	b10a      	cbz	r2, 8008a1c <__lshift+0xa4>
 8008a18:	f108 0602 	add.w	r6, r8, #2
 8008a1c:	3e01      	subs	r6, #1
 8008a1e:	4638      	mov	r0, r7
 8008a20:	612e      	str	r6, [r5, #16]
 8008a22:	4621      	mov	r1, r4
 8008a24:	f7ff fdda 	bl	80085dc <_Bfree>
 8008a28:	4628      	mov	r0, r5
 8008a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a2e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008a32:	3301      	adds	r3, #1
 8008a34:	e7c5      	b.n	80089c2 <__lshift+0x4a>
 8008a36:	3904      	subs	r1, #4
 8008a38:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a3c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008a40:	459c      	cmp	ip, r3
 8008a42:	d8f9      	bhi.n	8008a38 <__lshift+0xc0>
 8008a44:	e7ea      	b.n	8008a1c <__lshift+0xa4>
 8008a46:	bf00      	nop
 8008a48:	08009960 	.word	0x08009960
 8008a4c:	08009971 	.word	0x08009971

08008a50 <__mcmp>:
 8008a50:	690a      	ldr	r2, [r1, #16]
 8008a52:	4603      	mov	r3, r0
 8008a54:	6900      	ldr	r0, [r0, #16]
 8008a56:	1a80      	subs	r0, r0, r2
 8008a58:	b530      	push	{r4, r5, lr}
 8008a5a:	d10e      	bne.n	8008a7a <__mcmp+0x2a>
 8008a5c:	3314      	adds	r3, #20
 8008a5e:	3114      	adds	r1, #20
 8008a60:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008a64:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008a68:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008a6c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008a70:	4295      	cmp	r5, r2
 8008a72:	d003      	beq.n	8008a7c <__mcmp+0x2c>
 8008a74:	d205      	bcs.n	8008a82 <__mcmp+0x32>
 8008a76:	f04f 30ff 	mov.w	r0, #4294967295
 8008a7a:	bd30      	pop	{r4, r5, pc}
 8008a7c:	42a3      	cmp	r3, r4
 8008a7e:	d3f3      	bcc.n	8008a68 <__mcmp+0x18>
 8008a80:	e7fb      	b.n	8008a7a <__mcmp+0x2a>
 8008a82:	2001      	movs	r0, #1
 8008a84:	e7f9      	b.n	8008a7a <__mcmp+0x2a>
	...

08008a88 <__mdiff>:
 8008a88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a8c:	4689      	mov	r9, r1
 8008a8e:	4606      	mov	r6, r0
 8008a90:	4611      	mov	r1, r2
 8008a92:	4648      	mov	r0, r9
 8008a94:	4614      	mov	r4, r2
 8008a96:	f7ff ffdb 	bl	8008a50 <__mcmp>
 8008a9a:	1e05      	subs	r5, r0, #0
 8008a9c:	d112      	bne.n	8008ac4 <__mdiff+0x3c>
 8008a9e:	4629      	mov	r1, r5
 8008aa0:	4630      	mov	r0, r6
 8008aa2:	f7ff fd5b 	bl	800855c <_Balloc>
 8008aa6:	4602      	mov	r2, r0
 8008aa8:	b928      	cbnz	r0, 8008ab6 <__mdiff+0x2e>
 8008aaa:	4b3f      	ldr	r3, [pc, #252]	@ (8008ba8 <__mdiff+0x120>)
 8008aac:	f240 2137 	movw	r1, #567	@ 0x237
 8008ab0:	483e      	ldr	r0, [pc, #248]	@ (8008bac <__mdiff+0x124>)
 8008ab2:	f000 fafb 	bl	80090ac <__assert_func>
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008abc:	4610      	mov	r0, r2
 8008abe:	b003      	add	sp, #12
 8008ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ac4:	bfbc      	itt	lt
 8008ac6:	464b      	movlt	r3, r9
 8008ac8:	46a1      	movlt	r9, r4
 8008aca:	4630      	mov	r0, r6
 8008acc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008ad0:	bfba      	itte	lt
 8008ad2:	461c      	movlt	r4, r3
 8008ad4:	2501      	movlt	r5, #1
 8008ad6:	2500      	movge	r5, #0
 8008ad8:	f7ff fd40 	bl	800855c <_Balloc>
 8008adc:	4602      	mov	r2, r0
 8008ade:	b918      	cbnz	r0, 8008ae8 <__mdiff+0x60>
 8008ae0:	4b31      	ldr	r3, [pc, #196]	@ (8008ba8 <__mdiff+0x120>)
 8008ae2:	f240 2145 	movw	r1, #581	@ 0x245
 8008ae6:	e7e3      	b.n	8008ab0 <__mdiff+0x28>
 8008ae8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008aec:	6926      	ldr	r6, [r4, #16]
 8008aee:	60c5      	str	r5, [r0, #12]
 8008af0:	f109 0310 	add.w	r3, r9, #16
 8008af4:	f109 0514 	add.w	r5, r9, #20
 8008af8:	f104 0e14 	add.w	lr, r4, #20
 8008afc:	f100 0b14 	add.w	fp, r0, #20
 8008b00:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008b04:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008b08:	9301      	str	r3, [sp, #4]
 8008b0a:	46d9      	mov	r9, fp
 8008b0c:	f04f 0c00 	mov.w	ip, #0
 8008b10:	9b01      	ldr	r3, [sp, #4]
 8008b12:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008b16:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008b1a:	9301      	str	r3, [sp, #4]
 8008b1c:	fa1f f38a 	uxth.w	r3, sl
 8008b20:	4619      	mov	r1, r3
 8008b22:	b283      	uxth	r3, r0
 8008b24:	1acb      	subs	r3, r1, r3
 8008b26:	0c00      	lsrs	r0, r0, #16
 8008b28:	4463      	add	r3, ip
 8008b2a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008b2e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008b32:	b29b      	uxth	r3, r3
 8008b34:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008b38:	4576      	cmp	r6, lr
 8008b3a:	f849 3b04 	str.w	r3, [r9], #4
 8008b3e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008b42:	d8e5      	bhi.n	8008b10 <__mdiff+0x88>
 8008b44:	1b33      	subs	r3, r6, r4
 8008b46:	3b15      	subs	r3, #21
 8008b48:	f023 0303 	bic.w	r3, r3, #3
 8008b4c:	3415      	adds	r4, #21
 8008b4e:	3304      	adds	r3, #4
 8008b50:	42a6      	cmp	r6, r4
 8008b52:	bf38      	it	cc
 8008b54:	2304      	movcc	r3, #4
 8008b56:	441d      	add	r5, r3
 8008b58:	445b      	add	r3, fp
 8008b5a:	461e      	mov	r6, r3
 8008b5c:	462c      	mov	r4, r5
 8008b5e:	4544      	cmp	r4, r8
 8008b60:	d30e      	bcc.n	8008b80 <__mdiff+0xf8>
 8008b62:	f108 0103 	add.w	r1, r8, #3
 8008b66:	1b49      	subs	r1, r1, r5
 8008b68:	f021 0103 	bic.w	r1, r1, #3
 8008b6c:	3d03      	subs	r5, #3
 8008b6e:	45a8      	cmp	r8, r5
 8008b70:	bf38      	it	cc
 8008b72:	2100      	movcc	r1, #0
 8008b74:	440b      	add	r3, r1
 8008b76:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008b7a:	b191      	cbz	r1, 8008ba2 <__mdiff+0x11a>
 8008b7c:	6117      	str	r7, [r2, #16]
 8008b7e:	e79d      	b.n	8008abc <__mdiff+0x34>
 8008b80:	f854 1b04 	ldr.w	r1, [r4], #4
 8008b84:	46e6      	mov	lr, ip
 8008b86:	0c08      	lsrs	r0, r1, #16
 8008b88:	fa1c fc81 	uxtah	ip, ip, r1
 8008b8c:	4471      	add	r1, lr
 8008b8e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008b92:	b289      	uxth	r1, r1
 8008b94:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008b98:	f846 1b04 	str.w	r1, [r6], #4
 8008b9c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008ba0:	e7dd      	b.n	8008b5e <__mdiff+0xd6>
 8008ba2:	3f01      	subs	r7, #1
 8008ba4:	e7e7      	b.n	8008b76 <__mdiff+0xee>
 8008ba6:	bf00      	nop
 8008ba8:	08009960 	.word	0x08009960
 8008bac:	08009971 	.word	0x08009971

08008bb0 <__d2b>:
 8008bb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008bb4:	460f      	mov	r7, r1
 8008bb6:	2101      	movs	r1, #1
 8008bb8:	ec59 8b10 	vmov	r8, r9, d0
 8008bbc:	4616      	mov	r6, r2
 8008bbe:	f7ff fccd 	bl	800855c <_Balloc>
 8008bc2:	4604      	mov	r4, r0
 8008bc4:	b930      	cbnz	r0, 8008bd4 <__d2b+0x24>
 8008bc6:	4602      	mov	r2, r0
 8008bc8:	4b23      	ldr	r3, [pc, #140]	@ (8008c58 <__d2b+0xa8>)
 8008bca:	4824      	ldr	r0, [pc, #144]	@ (8008c5c <__d2b+0xac>)
 8008bcc:	f240 310f 	movw	r1, #783	@ 0x30f
 8008bd0:	f000 fa6c 	bl	80090ac <__assert_func>
 8008bd4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008bd8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008bdc:	b10d      	cbz	r5, 8008be2 <__d2b+0x32>
 8008bde:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008be2:	9301      	str	r3, [sp, #4]
 8008be4:	f1b8 0300 	subs.w	r3, r8, #0
 8008be8:	d023      	beq.n	8008c32 <__d2b+0x82>
 8008bea:	4668      	mov	r0, sp
 8008bec:	9300      	str	r3, [sp, #0]
 8008bee:	f7ff fd7c 	bl	80086ea <__lo0bits>
 8008bf2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008bf6:	b1d0      	cbz	r0, 8008c2e <__d2b+0x7e>
 8008bf8:	f1c0 0320 	rsb	r3, r0, #32
 8008bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8008c00:	430b      	orrs	r3, r1
 8008c02:	40c2      	lsrs	r2, r0
 8008c04:	6163      	str	r3, [r4, #20]
 8008c06:	9201      	str	r2, [sp, #4]
 8008c08:	9b01      	ldr	r3, [sp, #4]
 8008c0a:	61a3      	str	r3, [r4, #24]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	bf0c      	ite	eq
 8008c10:	2201      	moveq	r2, #1
 8008c12:	2202      	movne	r2, #2
 8008c14:	6122      	str	r2, [r4, #16]
 8008c16:	b1a5      	cbz	r5, 8008c42 <__d2b+0x92>
 8008c18:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008c1c:	4405      	add	r5, r0
 8008c1e:	603d      	str	r5, [r7, #0]
 8008c20:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008c24:	6030      	str	r0, [r6, #0]
 8008c26:	4620      	mov	r0, r4
 8008c28:	b003      	add	sp, #12
 8008c2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c2e:	6161      	str	r1, [r4, #20]
 8008c30:	e7ea      	b.n	8008c08 <__d2b+0x58>
 8008c32:	a801      	add	r0, sp, #4
 8008c34:	f7ff fd59 	bl	80086ea <__lo0bits>
 8008c38:	9b01      	ldr	r3, [sp, #4]
 8008c3a:	6163      	str	r3, [r4, #20]
 8008c3c:	3020      	adds	r0, #32
 8008c3e:	2201      	movs	r2, #1
 8008c40:	e7e8      	b.n	8008c14 <__d2b+0x64>
 8008c42:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008c46:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008c4a:	6038      	str	r0, [r7, #0]
 8008c4c:	6918      	ldr	r0, [r3, #16]
 8008c4e:	f7ff fd2d 	bl	80086ac <__hi0bits>
 8008c52:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008c56:	e7e5      	b.n	8008c24 <__d2b+0x74>
 8008c58:	08009960 	.word	0x08009960
 8008c5c:	08009971 	.word	0x08009971

08008c60 <_malloc_usable_size_r>:
 8008c60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c64:	1f18      	subs	r0, r3, #4
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	bfbc      	itt	lt
 8008c6a:	580b      	ldrlt	r3, [r1, r0]
 8008c6c:	18c0      	addlt	r0, r0, r3
 8008c6e:	4770      	bx	lr

08008c70 <__ssputs_r>:
 8008c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c74:	688e      	ldr	r6, [r1, #8]
 8008c76:	461f      	mov	r7, r3
 8008c78:	42be      	cmp	r6, r7
 8008c7a:	680b      	ldr	r3, [r1, #0]
 8008c7c:	4682      	mov	sl, r0
 8008c7e:	460c      	mov	r4, r1
 8008c80:	4690      	mov	r8, r2
 8008c82:	d82d      	bhi.n	8008ce0 <__ssputs_r+0x70>
 8008c84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008c88:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008c8c:	d026      	beq.n	8008cdc <__ssputs_r+0x6c>
 8008c8e:	6965      	ldr	r5, [r4, #20]
 8008c90:	6909      	ldr	r1, [r1, #16]
 8008c92:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c96:	eba3 0901 	sub.w	r9, r3, r1
 8008c9a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c9e:	1c7b      	adds	r3, r7, #1
 8008ca0:	444b      	add	r3, r9
 8008ca2:	106d      	asrs	r5, r5, #1
 8008ca4:	429d      	cmp	r5, r3
 8008ca6:	bf38      	it	cc
 8008ca8:	461d      	movcc	r5, r3
 8008caa:	0553      	lsls	r3, r2, #21
 8008cac:	d527      	bpl.n	8008cfe <__ssputs_r+0x8e>
 8008cae:	4629      	mov	r1, r5
 8008cb0:	f7fd fe98 	bl	80069e4 <_malloc_r>
 8008cb4:	4606      	mov	r6, r0
 8008cb6:	b360      	cbz	r0, 8008d12 <__ssputs_r+0xa2>
 8008cb8:	6921      	ldr	r1, [r4, #16]
 8008cba:	464a      	mov	r2, r9
 8008cbc:	f7fe fda7 	bl	800780e <memcpy>
 8008cc0:	89a3      	ldrh	r3, [r4, #12]
 8008cc2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008cc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cca:	81a3      	strh	r3, [r4, #12]
 8008ccc:	6126      	str	r6, [r4, #16]
 8008cce:	6165      	str	r5, [r4, #20]
 8008cd0:	444e      	add	r6, r9
 8008cd2:	eba5 0509 	sub.w	r5, r5, r9
 8008cd6:	6026      	str	r6, [r4, #0]
 8008cd8:	60a5      	str	r5, [r4, #8]
 8008cda:	463e      	mov	r6, r7
 8008cdc:	42be      	cmp	r6, r7
 8008cde:	d900      	bls.n	8008ce2 <__ssputs_r+0x72>
 8008ce0:	463e      	mov	r6, r7
 8008ce2:	6820      	ldr	r0, [r4, #0]
 8008ce4:	4632      	mov	r2, r6
 8008ce6:	4641      	mov	r1, r8
 8008ce8:	f000 f9c6 	bl	8009078 <memmove>
 8008cec:	68a3      	ldr	r3, [r4, #8]
 8008cee:	1b9b      	subs	r3, r3, r6
 8008cf0:	60a3      	str	r3, [r4, #8]
 8008cf2:	6823      	ldr	r3, [r4, #0]
 8008cf4:	4433      	add	r3, r6
 8008cf6:	6023      	str	r3, [r4, #0]
 8008cf8:	2000      	movs	r0, #0
 8008cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cfe:	462a      	mov	r2, r5
 8008d00:	f7fd ff04 	bl	8006b0c <_realloc_r>
 8008d04:	4606      	mov	r6, r0
 8008d06:	2800      	cmp	r0, #0
 8008d08:	d1e0      	bne.n	8008ccc <__ssputs_r+0x5c>
 8008d0a:	6921      	ldr	r1, [r4, #16]
 8008d0c:	4650      	mov	r0, sl
 8008d0e:	f7ff fbdb 	bl	80084c8 <_free_r>
 8008d12:	230c      	movs	r3, #12
 8008d14:	f8ca 3000 	str.w	r3, [sl]
 8008d18:	89a3      	ldrh	r3, [r4, #12]
 8008d1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d1e:	81a3      	strh	r3, [r4, #12]
 8008d20:	f04f 30ff 	mov.w	r0, #4294967295
 8008d24:	e7e9      	b.n	8008cfa <__ssputs_r+0x8a>
	...

08008d28 <_svfiprintf_r>:
 8008d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d2c:	4698      	mov	r8, r3
 8008d2e:	898b      	ldrh	r3, [r1, #12]
 8008d30:	061b      	lsls	r3, r3, #24
 8008d32:	b09d      	sub	sp, #116	@ 0x74
 8008d34:	4607      	mov	r7, r0
 8008d36:	460d      	mov	r5, r1
 8008d38:	4614      	mov	r4, r2
 8008d3a:	d510      	bpl.n	8008d5e <_svfiprintf_r+0x36>
 8008d3c:	690b      	ldr	r3, [r1, #16]
 8008d3e:	b973      	cbnz	r3, 8008d5e <_svfiprintf_r+0x36>
 8008d40:	2140      	movs	r1, #64	@ 0x40
 8008d42:	f7fd fe4f 	bl	80069e4 <_malloc_r>
 8008d46:	6028      	str	r0, [r5, #0]
 8008d48:	6128      	str	r0, [r5, #16]
 8008d4a:	b930      	cbnz	r0, 8008d5a <_svfiprintf_r+0x32>
 8008d4c:	230c      	movs	r3, #12
 8008d4e:	603b      	str	r3, [r7, #0]
 8008d50:	f04f 30ff 	mov.w	r0, #4294967295
 8008d54:	b01d      	add	sp, #116	@ 0x74
 8008d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d5a:	2340      	movs	r3, #64	@ 0x40
 8008d5c:	616b      	str	r3, [r5, #20]
 8008d5e:	2300      	movs	r3, #0
 8008d60:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d62:	2320      	movs	r3, #32
 8008d64:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008d68:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d6c:	2330      	movs	r3, #48	@ 0x30
 8008d6e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008f0c <_svfiprintf_r+0x1e4>
 8008d72:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008d76:	f04f 0901 	mov.w	r9, #1
 8008d7a:	4623      	mov	r3, r4
 8008d7c:	469a      	mov	sl, r3
 8008d7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d82:	b10a      	cbz	r2, 8008d88 <_svfiprintf_r+0x60>
 8008d84:	2a25      	cmp	r2, #37	@ 0x25
 8008d86:	d1f9      	bne.n	8008d7c <_svfiprintf_r+0x54>
 8008d88:	ebba 0b04 	subs.w	fp, sl, r4
 8008d8c:	d00b      	beq.n	8008da6 <_svfiprintf_r+0x7e>
 8008d8e:	465b      	mov	r3, fp
 8008d90:	4622      	mov	r2, r4
 8008d92:	4629      	mov	r1, r5
 8008d94:	4638      	mov	r0, r7
 8008d96:	f7ff ff6b 	bl	8008c70 <__ssputs_r>
 8008d9a:	3001      	adds	r0, #1
 8008d9c:	f000 80a7 	beq.w	8008eee <_svfiprintf_r+0x1c6>
 8008da0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008da2:	445a      	add	r2, fp
 8008da4:	9209      	str	r2, [sp, #36]	@ 0x24
 8008da6:	f89a 3000 	ldrb.w	r3, [sl]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	f000 809f 	beq.w	8008eee <_svfiprintf_r+0x1c6>
 8008db0:	2300      	movs	r3, #0
 8008db2:	f04f 32ff 	mov.w	r2, #4294967295
 8008db6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008dba:	f10a 0a01 	add.w	sl, sl, #1
 8008dbe:	9304      	str	r3, [sp, #16]
 8008dc0:	9307      	str	r3, [sp, #28]
 8008dc2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008dc6:	931a      	str	r3, [sp, #104]	@ 0x68
 8008dc8:	4654      	mov	r4, sl
 8008dca:	2205      	movs	r2, #5
 8008dcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dd0:	484e      	ldr	r0, [pc, #312]	@ (8008f0c <_svfiprintf_r+0x1e4>)
 8008dd2:	f7f7 fa0d 	bl	80001f0 <memchr>
 8008dd6:	9a04      	ldr	r2, [sp, #16]
 8008dd8:	b9d8      	cbnz	r0, 8008e12 <_svfiprintf_r+0xea>
 8008dda:	06d0      	lsls	r0, r2, #27
 8008ddc:	bf44      	itt	mi
 8008dde:	2320      	movmi	r3, #32
 8008de0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008de4:	0711      	lsls	r1, r2, #28
 8008de6:	bf44      	itt	mi
 8008de8:	232b      	movmi	r3, #43	@ 0x2b
 8008dea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008dee:	f89a 3000 	ldrb.w	r3, [sl]
 8008df2:	2b2a      	cmp	r3, #42	@ 0x2a
 8008df4:	d015      	beq.n	8008e22 <_svfiprintf_r+0xfa>
 8008df6:	9a07      	ldr	r2, [sp, #28]
 8008df8:	4654      	mov	r4, sl
 8008dfa:	2000      	movs	r0, #0
 8008dfc:	f04f 0c0a 	mov.w	ip, #10
 8008e00:	4621      	mov	r1, r4
 8008e02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e06:	3b30      	subs	r3, #48	@ 0x30
 8008e08:	2b09      	cmp	r3, #9
 8008e0a:	d94b      	bls.n	8008ea4 <_svfiprintf_r+0x17c>
 8008e0c:	b1b0      	cbz	r0, 8008e3c <_svfiprintf_r+0x114>
 8008e0e:	9207      	str	r2, [sp, #28]
 8008e10:	e014      	b.n	8008e3c <_svfiprintf_r+0x114>
 8008e12:	eba0 0308 	sub.w	r3, r0, r8
 8008e16:	fa09 f303 	lsl.w	r3, r9, r3
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	9304      	str	r3, [sp, #16]
 8008e1e:	46a2      	mov	sl, r4
 8008e20:	e7d2      	b.n	8008dc8 <_svfiprintf_r+0xa0>
 8008e22:	9b03      	ldr	r3, [sp, #12]
 8008e24:	1d19      	adds	r1, r3, #4
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	9103      	str	r1, [sp, #12]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	bfbb      	ittet	lt
 8008e2e:	425b      	neglt	r3, r3
 8008e30:	f042 0202 	orrlt.w	r2, r2, #2
 8008e34:	9307      	strge	r3, [sp, #28]
 8008e36:	9307      	strlt	r3, [sp, #28]
 8008e38:	bfb8      	it	lt
 8008e3a:	9204      	strlt	r2, [sp, #16]
 8008e3c:	7823      	ldrb	r3, [r4, #0]
 8008e3e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008e40:	d10a      	bne.n	8008e58 <_svfiprintf_r+0x130>
 8008e42:	7863      	ldrb	r3, [r4, #1]
 8008e44:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e46:	d132      	bne.n	8008eae <_svfiprintf_r+0x186>
 8008e48:	9b03      	ldr	r3, [sp, #12]
 8008e4a:	1d1a      	adds	r2, r3, #4
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	9203      	str	r2, [sp, #12]
 8008e50:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008e54:	3402      	adds	r4, #2
 8008e56:	9305      	str	r3, [sp, #20]
 8008e58:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008f1c <_svfiprintf_r+0x1f4>
 8008e5c:	7821      	ldrb	r1, [r4, #0]
 8008e5e:	2203      	movs	r2, #3
 8008e60:	4650      	mov	r0, sl
 8008e62:	f7f7 f9c5 	bl	80001f0 <memchr>
 8008e66:	b138      	cbz	r0, 8008e78 <_svfiprintf_r+0x150>
 8008e68:	9b04      	ldr	r3, [sp, #16]
 8008e6a:	eba0 000a 	sub.w	r0, r0, sl
 8008e6e:	2240      	movs	r2, #64	@ 0x40
 8008e70:	4082      	lsls	r2, r0
 8008e72:	4313      	orrs	r3, r2
 8008e74:	3401      	adds	r4, #1
 8008e76:	9304      	str	r3, [sp, #16]
 8008e78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e7c:	4824      	ldr	r0, [pc, #144]	@ (8008f10 <_svfiprintf_r+0x1e8>)
 8008e7e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e82:	2206      	movs	r2, #6
 8008e84:	f7f7 f9b4 	bl	80001f0 <memchr>
 8008e88:	2800      	cmp	r0, #0
 8008e8a:	d036      	beq.n	8008efa <_svfiprintf_r+0x1d2>
 8008e8c:	4b21      	ldr	r3, [pc, #132]	@ (8008f14 <_svfiprintf_r+0x1ec>)
 8008e8e:	bb1b      	cbnz	r3, 8008ed8 <_svfiprintf_r+0x1b0>
 8008e90:	9b03      	ldr	r3, [sp, #12]
 8008e92:	3307      	adds	r3, #7
 8008e94:	f023 0307 	bic.w	r3, r3, #7
 8008e98:	3308      	adds	r3, #8
 8008e9a:	9303      	str	r3, [sp, #12]
 8008e9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e9e:	4433      	add	r3, r6
 8008ea0:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ea2:	e76a      	b.n	8008d7a <_svfiprintf_r+0x52>
 8008ea4:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ea8:	460c      	mov	r4, r1
 8008eaa:	2001      	movs	r0, #1
 8008eac:	e7a8      	b.n	8008e00 <_svfiprintf_r+0xd8>
 8008eae:	2300      	movs	r3, #0
 8008eb0:	3401      	adds	r4, #1
 8008eb2:	9305      	str	r3, [sp, #20]
 8008eb4:	4619      	mov	r1, r3
 8008eb6:	f04f 0c0a 	mov.w	ip, #10
 8008eba:	4620      	mov	r0, r4
 8008ebc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ec0:	3a30      	subs	r2, #48	@ 0x30
 8008ec2:	2a09      	cmp	r2, #9
 8008ec4:	d903      	bls.n	8008ece <_svfiprintf_r+0x1a6>
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d0c6      	beq.n	8008e58 <_svfiprintf_r+0x130>
 8008eca:	9105      	str	r1, [sp, #20]
 8008ecc:	e7c4      	b.n	8008e58 <_svfiprintf_r+0x130>
 8008ece:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ed2:	4604      	mov	r4, r0
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	e7f0      	b.n	8008eba <_svfiprintf_r+0x192>
 8008ed8:	ab03      	add	r3, sp, #12
 8008eda:	9300      	str	r3, [sp, #0]
 8008edc:	462a      	mov	r2, r5
 8008ede:	4b0e      	ldr	r3, [pc, #56]	@ (8008f18 <_svfiprintf_r+0x1f0>)
 8008ee0:	a904      	add	r1, sp, #16
 8008ee2:	4638      	mov	r0, r7
 8008ee4:	f7fd fee0 	bl	8006ca8 <_printf_float>
 8008ee8:	1c42      	adds	r2, r0, #1
 8008eea:	4606      	mov	r6, r0
 8008eec:	d1d6      	bne.n	8008e9c <_svfiprintf_r+0x174>
 8008eee:	89ab      	ldrh	r3, [r5, #12]
 8008ef0:	065b      	lsls	r3, r3, #25
 8008ef2:	f53f af2d 	bmi.w	8008d50 <_svfiprintf_r+0x28>
 8008ef6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008ef8:	e72c      	b.n	8008d54 <_svfiprintf_r+0x2c>
 8008efa:	ab03      	add	r3, sp, #12
 8008efc:	9300      	str	r3, [sp, #0]
 8008efe:	462a      	mov	r2, r5
 8008f00:	4b05      	ldr	r3, [pc, #20]	@ (8008f18 <_svfiprintf_r+0x1f0>)
 8008f02:	a904      	add	r1, sp, #16
 8008f04:	4638      	mov	r0, r7
 8008f06:	f7fe f967 	bl	80071d8 <_printf_i>
 8008f0a:	e7ed      	b.n	8008ee8 <_svfiprintf_r+0x1c0>
 8008f0c:	08009ac8 	.word	0x08009ac8
 8008f10:	08009ad2 	.word	0x08009ad2
 8008f14:	08006ca9 	.word	0x08006ca9
 8008f18:	08008c71 	.word	0x08008c71
 8008f1c:	08009ace 	.word	0x08009ace

08008f20 <__sflush_r>:
 8008f20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f28:	0716      	lsls	r6, r2, #28
 8008f2a:	4605      	mov	r5, r0
 8008f2c:	460c      	mov	r4, r1
 8008f2e:	d454      	bmi.n	8008fda <__sflush_r+0xba>
 8008f30:	684b      	ldr	r3, [r1, #4]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	dc02      	bgt.n	8008f3c <__sflush_r+0x1c>
 8008f36:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	dd48      	ble.n	8008fce <__sflush_r+0xae>
 8008f3c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008f3e:	2e00      	cmp	r6, #0
 8008f40:	d045      	beq.n	8008fce <__sflush_r+0xae>
 8008f42:	2300      	movs	r3, #0
 8008f44:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008f48:	682f      	ldr	r7, [r5, #0]
 8008f4a:	6a21      	ldr	r1, [r4, #32]
 8008f4c:	602b      	str	r3, [r5, #0]
 8008f4e:	d030      	beq.n	8008fb2 <__sflush_r+0x92>
 8008f50:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008f52:	89a3      	ldrh	r3, [r4, #12]
 8008f54:	0759      	lsls	r1, r3, #29
 8008f56:	d505      	bpl.n	8008f64 <__sflush_r+0x44>
 8008f58:	6863      	ldr	r3, [r4, #4]
 8008f5a:	1ad2      	subs	r2, r2, r3
 8008f5c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008f5e:	b10b      	cbz	r3, 8008f64 <__sflush_r+0x44>
 8008f60:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008f62:	1ad2      	subs	r2, r2, r3
 8008f64:	2300      	movs	r3, #0
 8008f66:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008f68:	6a21      	ldr	r1, [r4, #32]
 8008f6a:	4628      	mov	r0, r5
 8008f6c:	47b0      	blx	r6
 8008f6e:	1c43      	adds	r3, r0, #1
 8008f70:	89a3      	ldrh	r3, [r4, #12]
 8008f72:	d106      	bne.n	8008f82 <__sflush_r+0x62>
 8008f74:	6829      	ldr	r1, [r5, #0]
 8008f76:	291d      	cmp	r1, #29
 8008f78:	d82b      	bhi.n	8008fd2 <__sflush_r+0xb2>
 8008f7a:	4a2a      	ldr	r2, [pc, #168]	@ (8009024 <__sflush_r+0x104>)
 8008f7c:	410a      	asrs	r2, r1
 8008f7e:	07d6      	lsls	r6, r2, #31
 8008f80:	d427      	bmi.n	8008fd2 <__sflush_r+0xb2>
 8008f82:	2200      	movs	r2, #0
 8008f84:	6062      	str	r2, [r4, #4]
 8008f86:	04d9      	lsls	r1, r3, #19
 8008f88:	6922      	ldr	r2, [r4, #16]
 8008f8a:	6022      	str	r2, [r4, #0]
 8008f8c:	d504      	bpl.n	8008f98 <__sflush_r+0x78>
 8008f8e:	1c42      	adds	r2, r0, #1
 8008f90:	d101      	bne.n	8008f96 <__sflush_r+0x76>
 8008f92:	682b      	ldr	r3, [r5, #0]
 8008f94:	b903      	cbnz	r3, 8008f98 <__sflush_r+0x78>
 8008f96:	6560      	str	r0, [r4, #84]	@ 0x54
 8008f98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008f9a:	602f      	str	r7, [r5, #0]
 8008f9c:	b1b9      	cbz	r1, 8008fce <__sflush_r+0xae>
 8008f9e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008fa2:	4299      	cmp	r1, r3
 8008fa4:	d002      	beq.n	8008fac <__sflush_r+0x8c>
 8008fa6:	4628      	mov	r0, r5
 8008fa8:	f7ff fa8e 	bl	80084c8 <_free_r>
 8008fac:	2300      	movs	r3, #0
 8008fae:	6363      	str	r3, [r4, #52]	@ 0x34
 8008fb0:	e00d      	b.n	8008fce <__sflush_r+0xae>
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	4628      	mov	r0, r5
 8008fb6:	47b0      	blx	r6
 8008fb8:	4602      	mov	r2, r0
 8008fba:	1c50      	adds	r0, r2, #1
 8008fbc:	d1c9      	bne.n	8008f52 <__sflush_r+0x32>
 8008fbe:	682b      	ldr	r3, [r5, #0]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d0c6      	beq.n	8008f52 <__sflush_r+0x32>
 8008fc4:	2b1d      	cmp	r3, #29
 8008fc6:	d001      	beq.n	8008fcc <__sflush_r+0xac>
 8008fc8:	2b16      	cmp	r3, #22
 8008fca:	d11e      	bne.n	800900a <__sflush_r+0xea>
 8008fcc:	602f      	str	r7, [r5, #0]
 8008fce:	2000      	movs	r0, #0
 8008fd0:	e022      	b.n	8009018 <__sflush_r+0xf8>
 8008fd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fd6:	b21b      	sxth	r3, r3
 8008fd8:	e01b      	b.n	8009012 <__sflush_r+0xf2>
 8008fda:	690f      	ldr	r7, [r1, #16]
 8008fdc:	2f00      	cmp	r7, #0
 8008fde:	d0f6      	beq.n	8008fce <__sflush_r+0xae>
 8008fe0:	0793      	lsls	r3, r2, #30
 8008fe2:	680e      	ldr	r6, [r1, #0]
 8008fe4:	bf08      	it	eq
 8008fe6:	694b      	ldreq	r3, [r1, #20]
 8008fe8:	600f      	str	r7, [r1, #0]
 8008fea:	bf18      	it	ne
 8008fec:	2300      	movne	r3, #0
 8008fee:	eba6 0807 	sub.w	r8, r6, r7
 8008ff2:	608b      	str	r3, [r1, #8]
 8008ff4:	f1b8 0f00 	cmp.w	r8, #0
 8008ff8:	dde9      	ble.n	8008fce <__sflush_r+0xae>
 8008ffa:	6a21      	ldr	r1, [r4, #32]
 8008ffc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008ffe:	4643      	mov	r3, r8
 8009000:	463a      	mov	r2, r7
 8009002:	4628      	mov	r0, r5
 8009004:	47b0      	blx	r6
 8009006:	2800      	cmp	r0, #0
 8009008:	dc08      	bgt.n	800901c <__sflush_r+0xfc>
 800900a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800900e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009012:	81a3      	strh	r3, [r4, #12]
 8009014:	f04f 30ff 	mov.w	r0, #4294967295
 8009018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800901c:	4407      	add	r7, r0
 800901e:	eba8 0800 	sub.w	r8, r8, r0
 8009022:	e7e7      	b.n	8008ff4 <__sflush_r+0xd4>
 8009024:	dfbffffe 	.word	0xdfbffffe

08009028 <_fflush_r>:
 8009028:	b538      	push	{r3, r4, r5, lr}
 800902a:	690b      	ldr	r3, [r1, #16]
 800902c:	4605      	mov	r5, r0
 800902e:	460c      	mov	r4, r1
 8009030:	b913      	cbnz	r3, 8009038 <_fflush_r+0x10>
 8009032:	2500      	movs	r5, #0
 8009034:	4628      	mov	r0, r5
 8009036:	bd38      	pop	{r3, r4, r5, pc}
 8009038:	b118      	cbz	r0, 8009042 <_fflush_r+0x1a>
 800903a:	6a03      	ldr	r3, [r0, #32]
 800903c:	b90b      	cbnz	r3, 8009042 <_fflush_r+0x1a>
 800903e:	f7fe fa77 	bl	8007530 <__sinit>
 8009042:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d0f3      	beq.n	8009032 <_fflush_r+0xa>
 800904a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800904c:	07d0      	lsls	r0, r2, #31
 800904e:	d404      	bmi.n	800905a <_fflush_r+0x32>
 8009050:	0599      	lsls	r1, r3, #22
 8009052:	d402      	bmi.n	800905a <_fflush_r+0x32>
 8009054:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009056:	f7fe fbd8 	bl	800780a <__retarget_lock_acquire_recursive>
 800905a:	4628      	mov	r0, r5
 800905c:	4621      	mov	r1, r4
 800905e:	f7ff ff5f 	bl	8008f20 <__sflush_r>
 8009062:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009064:	07da      	lsls	r2, r3, #31
 8009066:	4605      	mov	r5, r0
 8009068:	d4e4      	bmi.n	8009034 <_fflush_r+0xc>
 800906a:	89a3      	ldrh	r3, [r4, #12]
 800906c:	059b      	lsls	r3, r3, #22
 800906e:	d4e1      	bmi.n	8009034 <_fflush_r+0xc>
 8009070:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009072:	f7fe fbcb 	bl	800780c <__retarget_lock_release_recursive>
 8009076:	e7dd      	b.n	8009034 <_fflush_r+0xc>

08009078 <memmove>:
 8009078:	4288      	cmp	r0, r1
 800907a:	b510      	push	{r4, lr}
 800907c:	eb01 0402 	add.w	r4, r1, r2
 8009080:	d902      	bls.n	8009088 <memmove+0x10>
 8009082:	4284      	cmp	r4, r0
 8009084:	4623      	mov	r3, r4
 8009086:	d807      	bhi.n	8009098 <memmove+0x20>
 8009088:	1e43      	subs	r3, r0, #1
 800908a:	42a1      	cmp	r1, r4
 800908c:	d008      	beq.n	80090a0 <memmove+0x28>
 800908e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009092:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009096:	e7f8      	b.n	800908a <memmove+0x12>
 8009098:	4402      	add	r2, r0
 800909a:	4601      	mov	r1, r0
 800909c:	428a      	cmp	r2, r1
 800909e:	d100      	bne.n	80090a2 <memmove+0x2a>
 80090a0:	bd10      	pop	{r4, pc}
 80090a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80090a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80090aa:	e7f7      	b.n	800909c <memmove+0x24>

080090ac <__assert_func>:
 80090ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80090ae:	4614      	mov	r4, r2
 80090b0:	461a      	mov	r2, r3
 80090b2:	4b09      	ldr	r3, [pc, #36]	@ (80090d8 <__assert_func+0x2c>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	4605      	mov	r5, r0
 80090b8:	68d8      	ldr	r0, [r3, #12]
 80090ba:	b954      	cbnz	r4, 80090d2 <__assert_func+0x26>
 80090bc:	4b07      	ldr	r3, [pc, #28]	@ (80090dc <__assert_func+0x30>)
 80090be:	461c      	mov	r4, r3
 80090c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80090c4:	9100      	str	r1, [sp, #0]
 80090c6:	462b      	mov	r3, r5
 80090c8:	4905      	ldr	r1, [pc, #20]	@ (80090e0 <__assert_func+0x34>)
 80090ca:	f000 f841 	bl	8009150 <fiprintf>
 80090ce:	f000 f851 	bl	8009174 <abort>
 80090d2:	4b04      	ldr	r3, [pc, #16]	@ (80090e4 <__assert_func+0x38>)
 80090d4:	e7f4      	b.n	80090c0 <__assert_func+0x14>
 80090d6:	bf00      	nop
 80090d8:	20000178 	.word	0x20000178
 80090dc:	08009b1e 	.word	0x08009b1e
 80090e0:	08009af0 	.word	0x08009af0
 80090e4:	08009ae3 	.word	0x08009ae3

080090e8 <_calloc_r>:
 80090e8:	b570      	push	{r4, r5, r6, lr}
 80090ea:	fba1 5402 	umull	r5, r4, r1, r2
 80090ee:	b93c      	cbnz	r4, 8009100 <_calloc_r+0x18>
 80090f0:	4629      	mov	r1, r5
 80090f2:	f7fd fc77 	bl	80069e4 <_malloc_r>
 80090f6:	4606      	mov	r6, r0
 80090f8:	b928      	cbnz	r0, 8009106 <_calloc_r+0x1e>
 80090fa:	2600      	movs	r6, #0
 80090fc:	4630      	mov	r0, r6
 80090fe:	bd70      	pop	{r4, r5, r6, pc}
 8009100:	220c      	movs	r2, #12
 8009102:	6002      	str	r2, [r0, #0]
 8009104:	e7f9      	b.n	80090fa <_calloc_r+0x12>
 8009106:	462a      	mov	r2, r5
 8009108:	4621      	mov	r1, r4
 800910a:	f7fe fade 	bl	80076ca <memset>
 800910e:	e7f5      	b.n	80090fc <_calloc_r+0x14>

08009110 <__ascii_mbtowc>:
 8009110:	b082      	sub	sp, #8
 8009112:	b901      	cbnz	r1, 8009116 <__ascii_mbtowc+0x6>
 8009114:	a901      	add	r1, sp, #4
 8009116:	b142      	cbz	r2, 800912a <__ascii_mbtowc+0x1a>
 8009118:	b14b      	cbz	r3, 800912e <__ascii_mbtowc+0x1e>
 800911a:	7813      	ldrb	r3, [r2, #0]
 800911c:	600b      	str	r3, [r1, #0]
 800911e:	7812      	ldrb	r2, [r2, #0]
 8009120:	1e10      	subs	r0, r2, #0
 8009122:	bf18      	it	ne
 8009124:	2001      	movne	r0, #1
 8009126:	b002      	add	sp, #8
 8009128:	4770      	bx	lr
 800912a:	4610      	mov	r0, r2
 800912c:	e7fb      	b.n	8009126 <__ascii_mbtowc+0x16>
 800912e:	f06f 0001 	mvn.w	r0, #1
 8009132:	e7f8      	b.n	8009126 <__ascii_mbtowc+0x16>

08009134 <__ascii_wctomb>:
 8009134:	4603      	mov	r3, r0
 8009136:	4608      	mov	r0, r1
 8009138:	b141      	cbz	r1, 800914c <__ascii_wctomb+0x18>
 800913a:	2aff      	cmp	r2, #255	@ 0xff
 800913c:	d904      	bls.n	8009148 <__ascii_wctomb+0x14>
 800913e:	228a      	movs	r2, #138	@ 0x8a
 8009140:	601a      	str	r2, [r3, #0]
 8009142:	f04f 30ff 	mov.w	r0, #4294967295
 8009146:	4770      	bx	lr
 8009148:	700a      	strb	r2, [r1, #0]
 800914a:	2001      	movs	r0, #1
 800914c:	4770      	bx	lr
	...

08009150 <fiprintf>:
 8009150:	b40e      	push	{r1, r2, r3}
 8009152:	b503      	push	{r0, r1, lr}
 8009154:	4601      	mov	r1, r0
 8009156:	ab03      	add	r3, sp, #12
 8009158:	4805      	ldr	r0, [pc, #20]	@ (8009170 <fiprintf+0x20>)
 800915a:	f853 2b04 	ldr.w	r2, [r3], #4
 800915e:	6800      	ldr	r0, [r0, #0]
 8009160:	9301      	str	r3, [sp, #4]
 8009162:	f000 f837 	bl	80091d4 <_vfiprintf_r>
 8009166:	b002      	add	sp, #8
 8009168:	f85d eb04 	ldr.w	lr, [sp], #4
 800916c:	b003      	add	sp, #12
 800916e:	4770      	bx	lr
 8009170:	20000178 	.word	0x20000178

08009174 <abort>:
 8009174:	b508      	push	{r3, lr}
 8009176:	2006      	movs	r0, #6
 8009178:	f000 fa00 	bl	800957c <raise>
 800917c:	2001      	movs	r0, #1
 800917e:	f7f8 fc9d 	bl	8001abc <_exit>

08009182 <__sfputc_r>:
 8009182:	6893      	ldr	r3, [r2, #8]
 8009184:	3b01      	subs	r3, #1
 8009186:	2b00      	cmp	r3, #0
 8009188:	b410      	push	{r4}
 800918a:	6093      	str	r3, [r2, #8]
 800918c:	da08      	bge.n	80091a0 <__sfputc_r+0x1e>
 800918e:	6994      	ldr	r4, [r2, #24]
 8009190:	42a3      	cmp	r3, r4
 8009192:	db01      	blt.n	8009198 <__sfputc_r+0x16>
 8009194:	290a      	cmp	r1, #10
 8009196:	d103      	bne.n	80091a0 <__sfputc_r+0x1e>
 8009198:	f85d 4b04 	ldr.w	r4, [sp], #4
 800919c:	f000 b932 	b.w	8009404 <__swbuf_r>
 80091a0:	6813      	ldr	r3, [r2, #0]
 80091a2:	1c58      	adds	r0, r3, #1
 80091a4:	6010      	str	r0, [r2, #0]
 80091a6:	7019      	strb	r1, [r3, #0]
 80091a8:	4608      	mov	r0, r1
 80091aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091ae:	4770      	bx	lr

080091b0 <__sfputs_r>:
 80091b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091b2:	4606      	mov	r6, r0
 80091b4:	460f      	mov	r7, r1
 80091b6:	4614      	mov	r4, r2
 80091b8:	18d5      	adds	r5, r2, r3
 80091ba:	42ac      	cmp	r4, r5
 80091bc:	d101      	bne.n	80091c2 <__sfputs_r+0x12>
 80091be:	2000      	movs	r0, #0
 80091c0:	e007      	b.n	80091d2 <__sfputs_r+0x22>
 80091c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091c6:	463a      	mov	r2, r7
 80091c8:	4630      	mov	r0, r6
 80091ca:	f7ff ffda 	bl	8009182 <__sfputc_r>
 80091ce:	1c43      	adds	r3, r0, #1
 80091d0:	d1f3      	bne.n	80091ba <__sfputs_r+0xa>
 80091d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080091d4 <_vfiprintf_r>:
 80091d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091d8:	460d      	mov	r5, r1
 80091da:	b09d      	sub	sp, #116	@ 0x74
 80091dc:	4614      	mov	r4, r2
 80091de:	4698      	mov	r8, r3
 80091e0:	4606      	mov	r6, r0
 80091e2:	b118      	cbz	r0, 80091ec <_vfiprintf_r+0x18>
 80091e4:	6a03      	ldr	r3, [r0, #32]
 80091e6:	b90b      	cbnz	r3, 80091ec <_vfiprintf_r+0x18>
 80091e8:	f7fe f9a2 	bl	8007530 <__sinit>
 80091ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80091ee:	07d9      	lsls	r1, r3, #31
 80091f0:	d405      	bmi.n	80091fe <_vfiprintf_r+0x2a>
 80091f2:	89ab      	ldrh	r3, [r5, #12]
 80091f4:	059a      	lsls	r2, r3, #22
 80091f6:	d402      	bmi.n	80091fe <_vfiprintf_r+0x2a>
 80091f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80091fa:	f7fe fb06 	bl	800780a <__retarget_lock_acquire_recursive>
 80091fe:	89ab      	ldrh	r3, [r5, #12]
 8009200:	071b      	lsls	r3, r3, #28
 8009202:	d501      	bpl.n	8009208 <_vfiprintf_r+0x34>
 8009204:	692b      	ldr	r3, [r5, #16]
 8009206:	b99b      	cbnz	r3, 8009230 <_vfiprintf_r+0x5c>
 8009208:	4629      	mov	r1, r5
 800920a:	4630      	mov	r0, r6
 800920c:	f000 f938 	bl	8009480 <__swsetup_r>
 8009210:	b170      	cbz	r0, 8009230 <_vfiprintf_r+0x5c>
 8009212:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009214:	07dc      	lsls	r4, r3, #31
 8009216:	d504      	bpl.n	8009222 <_vfiprintf_r+0x4e>
 8009218:	f04f 30ff 	mov.w	r0, #4294967295
 800921c:	b01d      	add	sp, #116	@ 0x74
 800921e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009222:	89ab      	ldrh	r3, [r5, #12]
 8009224:	0598      	lsls	r0, r3, #22
 8009226:	d4f7      	bmi.n	8009218 <_vfiprintf_r+0x44>
 8009228:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800922a:	f7fe faef 	bl	800780c <__retarget_lock_release_recursive>
 800922e:	e7f3      	b.n	8009218 <_vfiprintf_r+0x44>
 8009230:	2300      	movs	r3, #0
 8009232:	9309      	str	r3, [sp, #36]	@ 0x24
 8009234:	2320      	movs	r3, #32
 8009236:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800923a:	f8cd 800c 	str.w	r8, [sp, #12]
 800923e:	2330      	movs	r3, #48	@ 0x30
 8009240:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80093f0 <_vfiprintf_r+0x21c>
 8009244:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009248:	f04f 0901 	mov.w	r9, #1
 800924c:	4623      	mov	r3, r4
 800924e:	469a      	mov	sl, r3
 8009250:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009254:	b10a      	cbz	r2, 800925a <_vfiprintf_r+0x86>
 8009256:	2a25      	cmp	r2, #37	@ 0x25
 8009258:	d1f9      	bne.n	800924e <_vfiprintf_r+0x7a>
 800925a:	ebba 0b04 	subs.w	fp, sl, r4
 800925e:	d00b      	beq.n	8009278 <_vfiprintf_r+0xa4>
 8009260:	465b      	mov	r3, fp
 8009262:	4622      	mov	r2, r4
 8009264:	4629      	mov	r1, r5
 8009266:	4630      	mov	r0, r6
 8009268:	f7ff ffa2 	bl	80091b0 <__sfputs_r>
 800926c:	3001      	adds	r0, #1
 800926e:	f000 80a7 	beq.w	80093c0 <_vfiprintf_r+0x1ec>
 8009272:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009274:	445a      	add	r2, fp
 8009276:	9209      	str	r2, [sp, #36]	@ 0x24
 8009278:	f89a 3000 	ldrb.w	r3, [sl]
 800927c:	2b00      	cmp	r3, #0
 800927e:	f000 809f 	beq.w	80093c0 <_vfiprintf_r+0x1ec>
 8009282:	2300      	movs	r3, #0
 8009284:	f04f 32ff 	mov.w	r2, #4294967295
 8009288:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800928c:	f10a 0a01 	add.w	sl, sl, #1
 8009290:	9304      	str	r3, [sp, #16]
 8009292:	9307      	str	r3, [sp, #28]
 8009294:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009298:	931a      	str	r3, [sp, #104]	@ 0x68
 800929a:	4654      	mov	r4, sl
 800929c:	2205      	movs	r2, #5
 800929e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092a2:	4853      	ldr	r0, [pc, #332]	@ (80093f0 <_vfiprintf_r+0x21c>)
 80092a4:	f7f6 ffa4 	bl	80001f0 <memchr>
 80092a8:	9a04      	ldr	r2, [sp, #16]
 80092aa:	b9d8      	cbnz	r0, 80092e4 <_vfiprintf_r+0x110>
 80092ac:	06d1      	lsls	r1, r2, #27
 80092ae:	bf44      	itt	mi
 80092b0:	2320      	movmi	r3, #32
 80092b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80092b6:	0713      	lsls	r3, r2, #28
 80092b8:	bf44      	itt	mi
 80092ba:	232b      	movmi	r3, #43	@ 0x2b
 80092bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80092c0:	f89a 3000 	ldrb.w	r3, [sl]
 80092c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80092c6:	d015      	beq.n	80092f4 <_vfiprintf_r+0x120>
 80092c8:	9a07      	ldr	r2, [sp, #28]
 80092ca:	4654      	mov	r4, sl
 80092cc:	2000      	movs	r0, #0
 80092ce:	f04f 0c0a 	mov.w	ip, #10
 80092d2:	4621      	mov	r1, r4
 80092d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092d8:	3b30      	subs	r3, #48	@ 0x30
 80092da:	2b09      	cmp	r3, #9
 80092dc:	d94b      	bls.n	8009376 <_vfiprintf_r+0x1a2>
 80092de:	b1b0      	cbz	r0, 800930e <_vfiprintf_r+0x13a>
 80092e0:	9207      	str	r2, [sp, #28]
 80092e2:	e014      	b.n	800930e <_vfiprintf_r+0x13a>
 80092e4:	eba0 0308 	sub.w	r3, r0, r8
 80092e8:	fa09 f303 	lsl.w	r3, r9, r3
 80092ec:	4313      	orrs	r3, r2
 80092ee:	9304      	str	r3, [sp, #16]
 80092f0:	46a2      	mov	sl, r4
 80092f2:	e7d2      	b.n	800929a <_vfiprintf_r+0xc6>
 80092f4:	9b03      	ldr	r3, [sp, #12]
 80092f6:	1d19      	adds	r1, r3, #4
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	9103      	str	r1, [sp, #12]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	bfbb      	ittet	lt
 8009300:	425b      	neglt	r3, r3
 8009302:	f042 0202 	orrlt.w	r2, r2, #2
 8009306:	9307      	strge	r3, [sp, #28]
 8009308:	9307      	strlt	r3, [sp, #28]
 800930a:	bfb8      	it	lt
 800930c:	9204      	strlt	r2, [sp, #16]
 800930e:	7823      	ldrb	r3, [r4, #0]
 8009310:	2b2e      	cmp	r3, #46	@ 0x2e
 8009312:	d10a      	bne.n	800932a <_vfiprintf_r+0x156>
 8009314:	7863      	ldrb	r3, [r4, #1]
 8009316:	2b2a      	cmp	r3, #42	@ 0x2a
 8009318:	d132      	bne.n	8009380 <_vfiprintf_r+0x1ac>
 800931a:	9b03      	ldr	r3, [sp, #12]
 800931c:	1d1a      	adds	r2, r3, #4
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	9203      	str	r2, [sp, #12]
 8009322:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009326:	3402      	adds	r4, #2
 8009328:	9305      	str	r3, [sp, #20]
 800932a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009400 <_vfiprintf_r+0x22c>
 800932e:	7821      	ldrb	r1, [r4, #0]
 8009330:	2203      	movs	r2, #3
 8009332:	4650      	mov	r0, sl
 8009334:	f7f6 ff5c 	bl	80001f0 <memchr>
 8009338:	b138      	cbz	r0, 800934a <_vfiprintf_r+0x176>
 800933a:	9b04      	ldr	r3, [sp, #16]
 800933c:	eba0 000a 	sub.w	r0, r0, sl
 8009340:	2240      	movs	r2, #64	@ 0x40
 8009342:	4082      	lsls	r2, r0
 8009344:	4313      	orrs	r3, r2
 8009346:	3401      	adds	r4, #1
 8009348:	9304      	str	r3, [sp, #16]
 800934a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800934e:	4829      	ldr	r0, [pc, #164]	@ (80093f4 <_vfiprintf_r+0x220>)
 8009350:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009354:	2206      	movs	r2, #6
 8009356:	f7f6 ff4b 	bl	80001f0 <memchr>
 800935a:	2800      	cmp	r0, #0
 800935c:	d03f      	beq.n	80093de <_vfiprintf_r+0x20a>
 800935e:	4b26      	ldr	r3, [pc, #152]	@ (80093f8 <_vfiprintf_r+0x224>)
 8009360:	bb1b      	cbnz	r3, 80093aa <_vfiprintf_r+0x1d6>
 8009362:	9b03      	ldr	r3, [sp, #12]
 8009364:	3307      	adds	r3, #7
 8009366:	f023 0307 	bic.w	r3, r3, #7
 800936a:	3308      	adds	r3, #8
 800936c:	9303      	str	r3, [sp, #12]
 800936e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009370:	443b      	add	r3, r7
 8009372:	9309      	str	r3, [sp, #36]	@ 0x24
 8009374:	e76a      	b.n	800924c <_vfiprintf_r+0x78>
 8009376:	fb0c 3202 	mla	r2, ip, r2, r3
 800937a:	460c      	mov	r4, r1
 800937c:	2001      	movs	r0, #1
 800937e:	e7a8      	b.n	80092d2 <_vfiprintf_r+0xfe>
 8009380:	2300      	movs	r3, #0
 8009382:	3401      	adds	r4, #1
 8009384:	9305      	str	r3, [sp, #20]
 8009386:	4619      	mov	r1, r3
 8009388:	f04f 0c0a 	mov.w	ip, #10
 800938c:	4620      	mov	r0, r4
 800938e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009392:	3a30      	subs	r2, #48	@ 0x30
 8009394:	2a09      	cmp	r2, #9
 8009396:	d903      	bls.n	80093a0 <_vfiprintf_r+0x1cc>
 8009398:	2b00      	cmp	r3, #0
 800939a:	d0c6      	beq.n	800932a <_vfiprintf_r+0x156>
 800939c:	9105      	str	r1, [sp, #20]
 800939e:	e7c4      	b.n	800932a <_vfiprintf_r+0x156>
 80093a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80093a4:	4604      	mov	r4, r0
 80093a6:	2301      	movs	r3, #1
 80093a8:	e7f0      	b.n	800938c <_vfiprintf_r+0x1b8>
 80093aa:	ab03      	add	r3, sp, #12
 80093ac:	9300      	str	r3, [sp, #0]
 80093ae:	462a      	mov	r2, r5
 80093b0:	4b12      	ldr	r3, [pc, #72]	@ (80093fc <_vfiprintf_r+0x228>)
 80093b2:	a904      	add	r1, sp, #16
 80093b4:	4630      	mov	r0, r6
 80093b6:	f7fd fc77 	bl	8006ca8 <_printf_float>
 80093ba:	4607      	mov	r7, r0
 80093bc:	1c78      	adds	r0, r7, #1
 80093be:	d1d6      	bne.n	800936e <_vfiprintf_r+0x19a>
 80093c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80093c2:	07d9      	lsls	r1, r3, #31
 80093c4:	d405      	bmi.n	80093d2 <_vfiprintf_r+0x1fe>
 80093c6:	89ab      	ldrh	r3, [r5, #12]
 80093c8:	059a      	lsls	r2, r3, #22
 80093ca:	d402      	bmi.n	80093d2 <_vfiprintf_r+0x1fe>
 80093cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80093ce:	f7fe fa1d 	bl	800780c <__retarget_lock_release_recursive>
 80093d2:	89ab      	ldrh	r3, [r5, #12]
 80093d4:	065b      	lsls	r3, r3, #25
 80093d6:	f53f af1f 	bmi.w	8009218 <_vfiprintf_r+0x44>
 80093da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80093dc:	e71e      	b.n	800921c <_vfiprintf_r+0x48>
 80093de:	ab03      	add	r3, sp, #12
 80093e0:	9300      	str	r3, [sp, #0]
 80093e2:	462a      	mov	r2, r5
 80093e4:	4b05      	ldr	r3, [pc, #20]	@ (80093fc <_vfiprintf_r+0x228>)
 80093e6:	a904      	add	r1, sp, #16
 80093e8:	4630      	mov	r0, r6
 80093ea:	f7fd fef5 	bl	80071d8 <_printf_i>
 80093ee:	e7e4      	b.n	80093ba <_vfiprintf_r+0x1e6>
 80093f0:	08009ac8 	.word	0x08009ac8
 80093f4:	08009ad2 	.word	0x08009ad2
 80093f8:	08006ca9 	.word	0x08006ca9
 80093fc:	080091b1 	.word	0x080091b1
 8009400:	08009ace 	.word	0x08009ace

08009404 <__swbuf_r>:
 8009404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009406:	460e      	mov	r6, r1
 8009408:	4614      	mov	r4, r2
 800940a:	4605      	mov	r5, r0
 800940c:	b118      	cbz	r0, 8009416 <__swbuf_r+0x12>
 800940e:	6a03      	ldr	r3, [r0, #32]
 8009410:	b90b      	cbnz	r3, 8009416 <__swbuf_r+0x12>
 8009412:	f7fe f88d 	bl	8007530 <__sinit>
 8009416:	69a3      	ldr	r3, [r4, #24]
 8009418:	60a3      	str	r3, [r4, #8]
 800941a:	89a3      	ldrh	r3, [r4, #12]
 800941c:	071a      	lsls	r2, r3, #28
 800941e:	d501      	bpl.n	8009424 <__swbuf_r+0x20>
 8009420:	6923      	ldr	r3, [r4, #16]
 8009422:	b943      	cbnz	r3, 8009436 <__swbuf_r+0x32>
 8009424:	4621      	mov	r1, r4
 8009426:	4628      	mov	r0, r5
 8009428:	f000 f82a 	bl	8009480 <__swsetup_r>
 800942c:	b118      	cbz	r0, 8009436 <__swbuf_r+0x32>
 800942e:	f04f 37ff 	mov.w	r7, #4294967295
 8009432:	4638      	mov	r0, r7
 8009434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009436:	6823      	ldr	r3, [r4, #0]
 8009438:	6922      	ldr	r2, [r4, #16]
 800943a:	1a98      	subs	r0, r3, r2
 800943c:	6963      	ldr	r3, [r4, #20]
 800943e:	b2f6      	uxtb	r6, r6
 8009440:	4283      	cmp	r3, r0
 8009442:	4637      	mov	r7, r6
 8009444:	dc05      	bgt.n	8009452 <__swbuf_r+0x4e>
 8009446:	4621      	mov	r1, r4
 8009448:	4628      	mov	r0, r5
 800944a:	f7ff fded 	bl	8009028 <_fflush_r>
 800944e:	2800      	cmp	r0, #0
 8009450:	d1ed      	bne.n	800942e <__swbuf_r+0x2a>
 8009452:	68a3      	ldr	r3, [r4, #8]
 8009454:	3b01      	subs	r3, #1
 8009456:	60a3      	str	r3, [r4, #8]
 8009458:	6823      	ldr	r3, [r4, #0]
 800945a:	1c5a      	adds	r2, r3, #1
 800945c:	6022      	str	r2, [r4, #0]
 800945e:	701e      	strb	r6, [r3, #0]
 8009460:	6962      	ldr	r2, [r4, #20]
 8009462:	1c43      	adds	r3, r0, #1
 8009464:	429a      	cmp	r2, r3
 8009466:	d004      	beq.n	8009472 <__swbuf_r+0x6e>
 8009468:	89a3      	ldrh	r3, [r4, #12]
 800946a:	07db      	lsls	r3, r3, #31
 800946c:	d5e1      	bpl.n	8009432 <__swbuf_r+0x2e>
 800946e:	2e0a      	cmp	r6, #10
 8009470:	d1df      	bne.n	8009432 <__swbuf_r+0x2e>
 8009472:	4621      	mov	r1, r4
 8009474:	4628      	mov	r0, r5
 8009476:	f7ff fdd7 	bl	8009028 <_fflush_r>
 800947a:	2800      	cmp	r0, #0
 800947c:	d0d9      	beq.n	8009432 <__swbuf_r+0x2e>
 800947e:	e7d6      	b.n	800942e <__swbuf_r+0x2a>

08009480 <__swsetup_r>:
 8009480:	b538      	push	{r3, r4, r5, lr}
 8009482:	4b29      	ldr	r3, [pc, #164]	@ (8009528 <__swsetup_r+0xa8>)
 8009484:	4605      	mov	r5, r0
 8009486:	6818      	ldr	r0, [r3, #0]
 8009488:	460c      	mov	r4, r1
 800948a:	b118      	cbz	r0, 8009494 <__swsetup_r+0x14>
 800948c:	6a03      	ldr	r3, [r0, #32]
 800948e:	b90b      	cbnz	r3, 8009494 <__swsetup_r+0x14>
 8009490:	f7fe f84e 	bl	8007530 <__sinit>
 8009494:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009498:	0719      	lsls	r1, r3, #28
 800949a:	d422      	bmi.n	80094e2 <__swsetup_r+0x62>
 800949c:	06da      	lsls	r2, r3, #27
 800949e:	d407      	bmi.n	80094b0 <__swsetup_r+0x30>
 80094a0:	2209      	movs	r2, #9
 80094a2:	602a      	str	r2, [r5, #0]
 80094a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80094a8:	81a3      	strh	r3, [r4, #12]
 80094aa:	f04f 30ff 	mov.w	r0, #4294967295
 80094ae:	e033      	b.n	8009518 <__swsetup_r+0x98>
 80094b0:	0758      	lsls	r0, r3, #29
 80094b2:	d512      	bpl.n	80094da <__swsetup_r+0x5a>
 80094b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80094b6:	b141      	cbz	r1, 80094ca <__swsetup_r+0x4a>
 80094b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80094bc:	4299      	cmp	r1, r3
 80094be:	d002      	beq.n	80094c6 <__swsetup_r+0x46>
 80094c0:	4628      	mov	r0, r5
 80094c2:	f7ff f801 	bl	80084c8 <_free_r>
 80094c6:	2300      	movs	r3, #0
 80094c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80094ca:	89a3      	ldrh	r3, [r4, #12]
 80094cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80094d0:	81a3      	strh	r3, [r4, #12]
 80094d2:	2300      	movs	r3, #0
 80094d4:	6063      	str	r3, [r4, #4]
 80094d6:	6923      	ldr	r3, [r4, #16]
 80094d8:	6023      	str	r3, [r4, #0]
 80094da:	89a3      	ldrh	r3, [r4, #12]
 80094dc:	f043 0308 	orr.w	r3, r3, #8
 80094e0:	81a3      	strh	r3, [r4, #12]
 80094e2:	6923      	ldr	r3, [r4, #16]
 80094e4:	b94b      	cbnz	r3, 80094fa <__swsetup_r+0x7a>
 80094e6:	89a3      	ldrh	r3, [r4, #12]
 80094e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80094ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80094f0:	d003      	beq.n	80094fa <__swsetup_r+0x7a>
 80094f2:	4621      	mov	r1, r4
 80094f4:	4628      	mov	r0, r5
 80094f6:	f000 f883 	bl	8009600 <__smakebuf_r>
 80094fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094fe:	f013 0201 	ands.w	r2, r3, #1
 8009502:	d00a      	beq.n	800951a <__swsetup_r+0x9a>
 8009504:	2200      	movs	r2, #0
 8009506:	60a2      	str	r2, [r4, #8]
 8009508:	6962      	ldr	r2, [r4, #20]
 800950a:	4252      	negs	r2, r2
 800950c:	61a2      	str	r2, [r4, #24]
 800950e:	6922      	ldr	r2, [r4, #16]
 8009510:	b942      	cbnz	r2, 8009524 <__swsetup_r+0xa4>
 8009512:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009516:	d1c5      	bne.n	80094a4 <__swsetup_r+0x24>
 8009518:	bd38      	pop	{r3, r4, r5, pc}
 800951a:	0799      	lsls	r1, r3, #30
 800951c:	bf58      	it	pl
 800951e:	6962      	ldrpl	r2, [r4, #20]
 8009520:	60a2      	str	r2, [r4, #8]
 8009522:	e7f4      	b.n	800950e <__swsetup_r+0x8e>
 8009524:	2000      	movs	r0, #0
 8009526:	e7f7      	b.n	8009518 <__swsetup_r+0x98>
 8009528:	20000178 	.word	0x20000178

0800952c <_raise_r>:
 800952c:	291f      	cmp	r1, #31
 800952e:	b538      	push	{r3, r4, r5, lr}
 8009530:	4605      	mov	r5, r0
 8009532:	460c      	mov	r4, r1
 8009534:	d904      	bls.n	8009540 <_raise_r+0x14>
 8009536:	2316      	movs	r3, #22
 8009538:	6003      	str	r3, [r0, #0]
 800953a:	f04f 30ff 	mov.w	r0, #4294967295
 800953e:	bd38      	pop	{r3, r4, r5, pc}
 8009540:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009542:	b112      	cbz	r2, 800954a <_raise_r+0x1e>
 8009544:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009548:	b94b      	cbnz	r3, 800955e <_raise_r+0x32>
 800954a:	4628      	mov	r0, r5
 800954c:	f000 f830 	bl	80095b0 <_getpid_r>
 8009550:	4622      	mov	r2, r4
 8009552:	4601      	mov	r1, r0
 8009554:	4628      	mov	r0, r5
 8009556:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800955a:	f000 b817 	b.w	800958c <_kill_r>
 800955e:	2b01      	cmp	r3, #1
 8009560:	d00a      	beq.n	8009578 <_raise_r+0x4c>
 8009562:	1c59      	adds	r1, r3, #1
 8009564:	d103      	bne.n	800956e <_raise_r+0x42>
 8009566:	2316      	movs	r3, #22
 8009568:	6003      	str	r3, [r0, #0]
 800956a:	2001      	movs	r0, #1
 800956c:	e7e7      	b.n	800953e <_raise_r+0x12>
 800956e:	2100      	movs	r1, #0
 8009570:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009574:	4620      	mov	r0, r4
 8009576:	4798      	blx	r3
 8009578:	2000      	movs	r0, #0
 800957a:	e7e0      	b.n	800953e <_raise_r+0x12>

0800957c <raise>:
 800957c:	4b02      	ldr	r3, [pc, #8]	@ (8009588 <raise+0xc>)
 800957e:	4601      	mov	r1, r0
 8009580:	6818      	ldr	r0, [r3, #0]
 8009582:	f7ff bfd3 	b.w	800952c <_raise_r>
 8009586:	bf00      	nop
 8009588:	20000178 	.word	0x20000178

0800958c <_kill_r>:
 800958c:	b538      	push	{r3, r4, r5, lr}
 800958e:	4d07      	ldr	r5, [pc, #28]	@ (80095ac <_kill_r+0x20>)
 8009590:	2300      	movs	r3, #0
 8009592:	4604      	mov	r4, r0
 8009594:	4608      	mov	r0, r1
 8009596:	4611      	mov	r1, r2
 8009598:	602b      	str	r3, [r5, #0]
 800959a:	f7f8 fa7f 	bl	8001a9c <_kill>
 800959e:	1c43      	adds	r3, r0, #1
 80095a0:	d102      	bne.n	80095a8 <_kill_r+0x1c>
 80095a2:	682b      	ldr	r3, [r5, #0]
 80095a4:	b103      	cbz	r3, 80095a8 <_kill_r+0x1c>
 80095a6:	6023      	str	r3, [r4, #0]
 80095a8:	bd38      	pop	{r3, r4, r5, pc}
 80095aa:	bf00      	nop
 80095ac:	20001030 	.word	0x20001030

080095b0 <_getpid_r>:
 80095b0:	f7f8 ba6c 	b.w	8001a8c <_getpid>

080095b4 <__swhatbuf_r>:
 80095b4:	b570      	push	{r4, r5, r6, lr}
 80095b6:	460c      	mov	r4, r1
 80095b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095bc:	2900      	cmp	r1, #0
 80095be:	b096      	sub	sp, #88	@ 0x58
 80095c0:	4615      	mov	r5, r2
 80095c2:	461e      	mov	r6, r3
 80095c4:	da0d      	bge.n	80095e2 <__swhatbuf_r+0x2e>
 80095c6:	89a3      	ldrh	r3, [r4, #12]
 80095c8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80095cc:	f04f 0100 	mov.w	r1, #0
 80095d0:	bf14      	ite	ne
 80095d2:	2340      	movne	r3, #64	@ 0x40
 80095d4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80095d8:	2000      	movs	r0, #0
 80095da:	6031      	str	r1, [r6, #0]
 80095dc:	602b      	str	r3, [r5, #0]
 80095de:	b016      	add	sp, #88	@ 0x58
 80095e0:	bd70      	pop	{r4, r5, r6, pc}
 80095e2:	466a      	mov	r2, sp
 80095e4:	f000 f848 	bl	8009678 <_fstat_r>
 80095e8:	2800      	cmp	r0, #0
 80095ea:	dbec      	blt.n	80095c6 <__swhatbuf_r+0x12>
 80095ec:	9901      	ldr	r1, [sp, #4]
 80095ee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80095f2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80095f6:	4259      	negs	r1, r3
 80095f8:	4159      	adcs	r1, r3
 80095fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80095fe:	e7eb      	b.n	80095d8 <__swhatbuf_r+0x24>

08009600 <__smakebuf_r>:
 8009600:	898b      	ldrh	r3, [r1, #12]
 8009602:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009604:	079d      	lsls	r5, r3, #30
 8009606:	4606      	mov	r6, r0
 8009608:	460c      	mov	r4, r1
 800960a:	d507      	bpl.n	800961c <__smakebuf_r+0x1c>
 800960c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009610:	6023      	str	r3, [r4, #0]
 8009612:	6123      	str	r3, [r4, #16]
 8009614:	2301      	movs	r3, #1
 8009616:	6163      	str	r3, [r4, #20]
 8009618:	b003      	add	sp, #12
 800961a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800961c:	ab01      	add	r3, sp, #4
 800961e:	466a      	mov	r2, sp
 8009620:	f7ff ffc8 	bl	80095b4 <__swhatbuf_r>
 8009624:	9f00      	ldr	r7, [sp, #0]
 8009626:	4605      	mov	r5, r0
 8009628:	4639      	mov	r1, r7
 800962a:	4630      	mov	r0, r6
 800962c:	f7fd f9da 	bl	80069e4 <_malloc_r>
 8009630:	b948      	cbnz	r0, 8009646 <__smakebuf_r+0x46>
 8009632:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009636:	059a      	lsls	r2, r3, #22
 8009638:	d4ee      	bmi.n	8009618 <__smakebuf_r+0x18>
 800963a:	f023 0303 	bic.w	r3, r3, #3
 800963e:	f043 0302 	orr.w	r3, r3, #2
 8009642:	81a3      	strh	r3, [r4, #12]
 8009644:	e7e2      	b.n	800960c <__smakebuf_r+0xc>
 8009646:	89a3      	ldrh	r3, [r4, #12]
 8009648:	6020      	str	r0, [r4, #0]
 800964a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800964e:	81a3      	strh	r3, [r4, #12]
 8009650:	9b01      	ldr	r3, [sp, #4]
 8009652:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009656:	b15b      	cbz	r3, 8009670 <__smakebuf_r+0x70>
 8009658:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800965c:	4630      	mov	r0, r6
 800965e:	f000 f81d 	bl	800969c <_isatty_r>
 8009662:	b128      	cbz	r0, 8009670 <__smakebuf_r+0x70>
 8009664:	89a3      	ldrh	r3, [r4, #12]
 8009666:	f023 0303 	bic.w	r3, r3, #3
 800966a:	f043 0301 	orr.w	r3, r3, #1
 800966e:	81a3      	strh	r3, [r4, #12]
 8009670:	89a3      	ldrh	r3, [r4, #12]
 8009672:	431d      	orrs	r5, r3
 8009674:	81a5      	strh	r5, [r4, #12]
 8009676:	e7cf      	b.n	8009618 <__smakebuf_r+0x18>

08009678 <_fstat_r>:
 8009678:	b538      	push	{r3, r4, r5, lr}
 800967a:	4d07      	ldr	r5, [pc, #28]	@ (8009698 <_fstat_r+0x20>)
 800967c:	2300      	movs	r3, #0
 800967e:	4604      	mov	r4, r0
 8009680:	4608      	mov	r0, r1
 8009682:	4611      	mov	r1, r2
 8009684:	602b      	str	r3, [r5, #0]
 8009686:	f7f8 fa69 	bl	8001b5c <_fstat>
 800968a:	1c43      	adds	r3, r0, #1
 800968c:	d102      	bne.n	8009694 <_fstat_r+0x1c>
 800968e:	682b      	ldr	r3, [r5, #0]
 8009690:	b103      	cbz	r3, 8009694 <_fstat_r+0x1c>
 8009692:	6023      	str	r3, [r4, #0]
 8009694:	bd38      	pop	{r3, r4, r5, pc}
 8009696:	bf00      	nop
 8009698:	20001030 	.word	0x20001030

0800969c <_isatty_r>:
 800969c:	b538      	push	{r3, r4, r5, lr}
 800969e:	4d06      	ldr	r5, [pc, #24]	@ (80096b8 <_isatty_r+0x1c>)
 80096a0:	2300      	movs	r3, #0
 80096a2:	4604      	mov	r4, r0
 80096a4:	4608      	mov	r0, r1
 80096a6:	602b      	str	r3, [r5, #0]
 80096a8:	f7f8 fa68 	bl	8001b7c <_isatty>
 80096ac:	1c43      	adds	r3, r0, #1
 80096ae:	d102      	bne.n	80096b6 <_isatty_r+0x1a>
 80096b0:	682b      	ldr	r3, [r5, #0]
 80096b2:	b103      	cbz	r3, 80096b6 <_isatty_r+0x1a>
 80096b4:	6023      	str	r3, [r4, #0]
 80096b6:	bd38      	pop	{r3, r4, r5, pc}
 80096b8:	20001030 	.word	0x20001030

080096bc <_init>:
 80096bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096be:	bf00      	nop
 80096c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096c2:	bc08      	pop	{r3}
 80096c4:	469e      	mov	lr, r3
 80096c6:	4770      	bx	lr

080096c8 <_fini>:
 80096c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ca:	bf00      	nop
 80096cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096ce:	bc08      	pop	{r3}
 80096d0:	469e      	mov	lr, r3
 80096d2:	4770      	bx	lr
