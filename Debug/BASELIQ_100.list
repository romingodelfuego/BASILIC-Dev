
BASELIQ_100.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009570  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000598  08009720  08009720  0000a720  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009cb8  08009cb8  0000b354  2**0
                  CONTENTS
  4 .ARM          00000008  08009cb8  08009cb8  0000acb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009cc0  08009cc0  0000b354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009cc0  08009cc0  0000acc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009cc4  08009cc4  0000acc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  08009cc8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000dfc  20000354  0800a01c  0000b354  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001150  0800a01c  0000c150  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b354  2**0
                  CONTENTS, READONLY
 12 .debug_info   000164b3  00000000  00000000  0000b384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039aa  00000000  00000000  00021837  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001208  00000000  00000000  000251e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dad  00000000  00000000  000263f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ce23  00000000  00000000  0002719d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019a0e  00000000  00000000  00053fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fea8c  00000000  00000000  0006d9ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016c45a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005adc  00000000  00000000  0016c4a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00171f7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000354 	.word	0x20000354
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009708 	.word	0x08009708

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000358 	.word	0x20000358
 80001ec:	08009708 	.word	0x08009708

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b96a 	b.w	8000eb4 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	460c      	mov	r4, r1
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d14e      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c04:	4694      	mov	ip, r2
 8000c06:	458c      	cmp	ip, r1
 8000c08:	4686      	mov	lr, r0
 8000c0a:	fab2 f282 	clz	r2, r2
 8000c0e:	d962      	bls.n	8000cd6 <__udivmoddi4+0xde>
 8000c10:	b14a      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c12:	f1c2 0320 	rsb	r3, r2, #32
 8000c16:	4091      	lsls	r1, r2
 8000c18:	fa20 f303 	lsr.w	r3, r0, r3
 8000c1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c20:	4319      	orrs	r1, r3
 8000c22:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c2a:	fa1f f68c 	uxth.w	r6, ip
 8000c2e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c36:	fb07 1114 	mls	r1, r7, r4, r1
 8000c3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3e:	fb04 f106 	mul.w	r1, r4, r6
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c4e:	f080 8112 	bcs.w	8000e76 <__udivmoddi4+0x27e>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 810f 	bls.w	8000e76 <__udivmoddi4+0x27e>
 8000c58:	3c02      	subs	r4, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a59      	subs	r1, r3, r1
 8000c5e:	fa1f f38e 	uxth.w	r3, lr
 8000c62:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c66:	fb07 1110 	mls	r1, r7, r0, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb00 f606 	mul.w	r6, r0, r6
 8000c72:	429e      	cmp	r6, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x94>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c7e:	f080 80fc 	bcs.w	8000e7a <__udivmoddi4+0x282>
 8000c82:	429e      	cmp	r6, r3
 8000c84:	f240 80f9 	bls.w	8000e7a <__udivmoddi4+0x282>
 8000c88:	4463      	add	r3, ip
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	1b9b      	subs	r3, r3, r6
 8000c8e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c92:	2100      	movs	r1, #0
 8000c94:	b11d      	cbz	r5, 8000c9e <__udivmoddi4+0xa6>
 8000c96:	40d3      	lsrs	r3, r2
 8000c98:	2200      	movs	r2, #0
 8000c9a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d905      	bls.n	8000cb2 <__udivmoddi4+0xba>
 8000ca6:	b10d      	cbz	r5, 8000cac <__udivmoddi4+0xb4>
 8000ca8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cac:	2100      	movs	r1, #0
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e7f5      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000cb2:	fab3 f183 	clz	r1, r3
 8000cb6:	2900      	cmp	r1, #0
 8000cb8:	d146      	bne.n	8000d48 <__udivmoddi4+0x150>
 8000cba:	42a3      	cmp	r3, r4
 8000cbc:	d302      	bcc.n	8000cc4 <__udivmoddi4+0xcc>
 8000cbe:	4290      	cmp	r0, r2
 8000cc0:	f0c0 80f0 	bcc.w	8000ea4 <__udivmoddi4+0x2ac>
 8000cc4:	1a86      	subs	r6, r0, r2
 8000cc6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cca:	2001      	movs	r0, #1
 8000ccc:	2d00      	cmp	r5, #0
 8000cce:	d0e6      	beq.n	8000c9e <__udivmoddi4+0xa6>
 8000cd0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cd4:	e7e3      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	f040 8090 	bne.w	8000dfc <__udivmoddi4+0x204>
 8000cdc:	eba1 040c 	sub.w	r4, r1, ip
 8000ce0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce4:	fa1f f78c 	uxth.w	r7, ip
 8000ce8:	2101      	movs	r1, #1
 8000cea:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cf6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cfa:	fb07 f006 	mul.w	r0, r7, r6
 8000cfe:	4298      	cmp	r0, r3
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x11c>
 8000d02:	eb1c 0303 	adds.w	r3, ip, r3
 8000d06:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x11a>
 8000d0c:	4298      	cmp	r0, r3
 8000d0e:	f200 80cd 	bhi.w	8000eac <__udivmoddi4+0x2b4>
 8000d12:	4626      	mov	r6, r4
 8000d14:	1a1c      	subs	r4, r3, r0
 8000d16:	fa1f f38e 	uxth.w	r3, lr
 8000d1a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d1e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d26:	fb00 f707 	mul.w	r7, r0, r7
 8000d2a:	429f      	cmp	r7, r3
 8000d2c:	d908      	bls.n	8000d40 <__udivmoddi4+0x148>
 8000d2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d32:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d36:	d202      	bcs.n	8000d3e <__udivmoddi4+0x146>
 8000d38:	429f      	cmp	r7, r3
 8000d3a:	f200 80b0 	bhi.w	8000e9e <__udivmoddi4+0x2a6>
 8000d3e:	4620      	mov	r0, r4
 8000d40:	1bdb      	subs	r3, r3, r7
 8000d42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d46:	e7a5      	b.n	8000c94 <__udivmoddi4+0x9c>
 8000d48:	f1c1 0620 	rsb	r6, r1, #32
 8000d4c:	408b      	lsls	r3, r1
 8000d4e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d52:	431f      	orrs	r7, r3
 8000d54:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d58:	fa04 f301 	lsl.w	r3, r4, r1
 8000d5c:	ea43 030c 	orr.w	r3, r3, ip
 8000d60:	40f4      	lsrs	r4, r6
 8000d62:	fa00 f801 	lsl.w	r8, r0, r1
 8000d66:	0c38      	lsrs	r0, r7, #16
 8000d68:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d6c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d70:	fa1f fc87 	uxth.w	ip, r7
 8000d74:	fb00 441e 	mls	r4, r0, lr, r4
 8000d78:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d7c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d80:	45a1      	cmp	r9, r4
 8000d82:	fa02 f201 	lsl.w	r2, r2, r1
 8000d86:	d90a      	bls.n	8000d9e <__udivmoddi4+0x1a6>
 8000d88:	193c      	adds	r4, r7, r4
 8000d8a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d8e:	f080 8084 	bcs.w	8000e9a <__udivmoddi4+0x2a2>
 8000d92:	45a1      	cmp	r9, r4
 8000d94:	f240 8081 	bls.w	8000e9a <__udivmoddi4+0x2a2>
 8000d98:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d9c:	443c      	add	r4, r7
 8000d9e:	eba4 0409 	sub.w	r4, r4, r9
 8000da2:	fa1f f983 	uxth.w	r9, r3
 8000da6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000daa:	fb00 4413 	mls	r4, r0, r3, r4
 8000dae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000db2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000db6:	45a4      	cmp	ip, r4
 8000db8:	d907      	bls.n	8000dca <__udivmoddi4+0x1d2>
 8000dba:	193c      	adds	r4, r7, r4
 8000dbc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dc0:	d267      	bcs.n	8000e92 <__udivmoddi4+0x29a>
 8000dc2:	45a4      	cmp	ip, r4
 8000dc4:	d965      	bls.n	8000e92 <__udivmoddi4+0x29a>
 8000dc6:	3b02      	subs	r3, #2
 8000dc8:	443c      	add	r4, r7
 8000dca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dce:	fba0 9302 	umull	r9, r3, r0, r2
 8000dd2:	eba4 040c 	sub.w	r4, r4, ip
 8000dd6:	429c      	cmp	r4, r3
 8000dd8:	46ce      	mov	lr, r9
 8000dda:	469c      	mov	ip, r3
 8000ddc:	d351      	bcc.n	8000e82 <__udivmoddi4+0x28a>
 8000dde:	d04e      	beq.n	8000e7e <__udivmoddi4+0x286>
 8000de0:	b155      	cbz	r5, 8000df8 <__udivmoddi4+0x200>
 8000de2:	ebb8 030e 	subs.w	r3, r8, lr
 8000de6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dea:	fa04 f606 	lsl.w	r6, r4, r6
 8000dee:	40cb      	lsrs	r3, r1
 8000df0:	431e      	orrs	r6, r3
 8000df2:	40cc      	lsrs	r4, r1
 8000df4:	e9c5 6400 	strd	r6, r4, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	e750      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000dfc:	f1c2 0320 	rsb	r3, r2, #32
 8000e00:	fa20 f103 	lsr.w	r1, r0, r3
 8000e04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e08:	fa24 f303 	lsr.w	r3, r4, r3
 8000e0c:	4094      	lsls	r4, r2
 8000e0e:	430c      	orrs	r4, r1
 8000e10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e18:	fa1f f78c 	uxth.w	r7, ip
 8000e1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e20:	fb08 3110 	mls	r1, r8, r0, r3
 8000e24:	0c23      	lsrs	r3, r4, #16
 8000e26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e2a:	fb00 f107 	mul.w	r1, r0, r7
 8000e2e:	4299      	cmp	r1, r3
 8000e30:	d908      	bls.n	8000e44 <__udivmoddi4+0x24c>
 8000e32:	eb1c 0303 	adds.w	r3, ip, r3
 8000e36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e3a:	d22c      	bcs.n	8000e96 <__udivmoddi4+0x29e>
 8000e3c:	4299      	cmp	r1, r3
 8000e3e:	d92a      	bls.n	8000e96 <__udivmoddi4+0x29e>
 8000e40:	3802      	subs	r0, #2
 8000e42:	4463      	add	r3, ip
 8000e44:	1a5b      	subs	r3, r3, r1
 8000e46:	b2a4      	uxth	r4, r4
 8000e48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e54:	fb01 f307 	mul.w	r3, r1, r7
 8000e58:	42a3      	cmp	r3, r4
 8000e5a:	d908      	bls.n	8000e6e <__udivmoddi4+0x276>
 8000e5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e64:	d213      	bcs.n	8000e8e <__udivmoddi4+0x296>
 8000e66:	42a3      	cmp	r3, r4
 8000e68:	d911      	bls.n	8000e8e <__udivmoddi4+0x296>
 8000e6a:	3902      	subs	r1, #2
 8000e6c:	4464      	add	r4, ip
 8000e6e:	1ae4      	subs	r4, r4, r3
 8000e70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e74:	e739      	b.n	8000cea <__udivmoddi4+0xf2>
 8000e76:	4604      	mov	r4, r0
 8000e78:	e6f0      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	e706      	b.n	8000c8c <__udivmoddi4+0x94>
 8000e7e:	45c8      	cmp	r8, r9
 8000e80:	d2ae      	bcs.n	8000de0 <__udivmoddi4+0x1e8>
 8000e82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e8a:	3801      	subs	r0, #1
 8000e8c:	e7a8      	b.n	8000de0 <__udivmoddi4+0x1e8>
 8000e8e:	4631      	mov	r1, r6
 8000e90:	e7ed      	b.n	8000e6e <__udivmoddi4+0x276>
 8000e92:	4603      	mov	r3, r0
 8000e94:	e799      	b.n	8000dca <__udivmoddi4+0x1d2>
 8000e96:	4630      	mov	r0, r6
 8000e98:	e7d4      	b.n	8000e44 <__udivmoddi4+0x24c>
 8000e9a:	46d6      	mov	lr, sl
 8000e9c:	e77f      	b.n	8000d9e <__udivmoddi4+0x1a6>
 8000e9e:	4463      	add	r3, ip
 8000ea0:	3802      	subs	r0, #2
 8000ea2:	e74d      	b.n	8000d40 <__udivmoddi4+0x148>
 8000ea4:	4606      	mov	r6, r0
 8000ea6:	4623      	mov	r3, r4
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	e70f      	b.n	8000ccc <__udivmoddi4+0xd4>
 8000eac:	3e02      	subs	r6, #2
 8000eae:	4463      	add	r3, ip
 8000eb0:	e730      	b.n	8000d14 <__udivmoddi4+0x11c>
 8000eb2:	bf00      	nop

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <GNSSCom_Init>:

GNSSCom_HandleTypeDef hGNSSCom;
OutputType type = ASCII;
OutputProtocol protocol = NMEA;

void GNSSCom_Init(UART_HandleTypeDef* huart,UART_HandleTypeDef* huartDebug){
 8000eb8:	b5b0      	push	{r4, r5, r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]
	hGNSSCom.huart = huart;
 8000ec2:	4a18      	ldr	r2, [pc, #96]	@ (8000f24 <GNSSCom_Init+0x6c>)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6013      	str	r3, [r2, #0]
	hGNSSCom.huartDebug = huartDebug;
 8000ec8:	4a16      	ldr	r2, [pc, #88]	@ (8000f24 <GNSSCom_Init+0x6c>)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	6053      	str	r3, [r2, #4]

	memcpy(hGNSSCom.RxBuffer, NULL , UART_RX_BUFFER_SIZE);
 8000ece:	4b15      	ldr	r3, [pc, #84]	@ (8000f24 <GNSSCom_Init+0x6c>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	3308      	adds	r3, #8
 8000ed4:	4611      	mov	r1, r2
 8000ed6:	22c8      	movs	r2, #200	@ 0xc8
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f006 fc92 	bl	8007802 <memcpy>
	memcpy(hGNSSCom.TxBuffer, NULL, UART_TX_BUFFER_SIZE);
 8000ede:	4b11      	ldr	r3, [pc, #68]	@ (8000f24 <GNSSCom_Init+0x6c>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f103 04d0 	add.w	r4, r3, #208	@ 0xd0
 8000ee6:	4615      	mov	r5, r2
 8000ee8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ef0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ef2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ef4:	682b      	ldr	r3, [r5, #0]
 8000ef6:	8023      	strh	r3, [r4, #0]
	memcpy(hGNSSCom.DebugBuffer, NULL, UART_DEBUG_BUFFER_SIZE);
 8000ef8:	4b0a      	ldr	r3, [pc, #40]	@ (8000f24 <GNSSCom_Init+0x6c>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8000f00:	4611      	mov	r1, r2
 8000f02:	22c8      	movs	r2, #200	@ 0xc8
 8000f04:	4618      	mov	r0, r3
 8000f06:	f006 fc7c 	bl	8007802 <memcpy>
	GNSSCom_UartActivate(&hGNSSCom);
 8000f0a:	4806      	ldr	r0, [pc, #24]	@ (8000f24 <GNSSCom_Init+0x6c>)
 8000f0c:	f000 f80c 	bl	8000f28 <GNSSCom_UartActivate>
	HAL_Delay(5000); //En theorie il suffit d attendre la reception du premier msg UART pour envoyer
 8000f10:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000f14:	f001 fcda 	bl	80028cc <HAL_Delay>
	GNSSCom_Send_SetVal();
 8000f18:	f000 f816 	bl	8000f48 <GNSSCom_Send_SetVal>
}
 8000f1c:	bf00      	nop
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bdb0      	pop	{r4, r5, r7, pc}
 8000f24:	20000370 	.word	0x20000370

08000f28 <GNSSCom_UartActivate>:

void GNSSCom_UartActivate(GNSSCom_HandleTypeDef* hGNSS){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(hGNSS->huart, hGNSS->RxBuffer, UART_RX_BUFFER_SIZE);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6818      	ldr	r0, [r3, #0]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3308      	adds	r3, #8
 8000f38:	22c8      	movs	r2, #200	@ 0xc8
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	f003 ffc6 	bl	8004ecc <HAL_UART_Receive_IT>
}
 8000f40:	bf00      	nop
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <GNSSCom_Send_SetVal>:

void GNSSCom_Send_SetVal(void){
 8000f48:	b5b0      	push	{r4, r5, r7, lr}
 8000f4a:	b0a2      	sub	sp, #136	@ 0x88
 8000f4c:	af00      	add	r7, sp, #0
	const char message1[] = "\r\t\t\n...Message1...\r\n";
 8000f4e:	4b7d      	ldr	r3, [pc, #500]	@ (8001144 <GNSSCom_Send_SetVal+0x1fc>)
 8000f50:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 8000f54:	461d      	mov	r5, r3
 8000f56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f5a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f5e:	6020      	str	r0, [r4, #0]
 8000f60:	3404      	adds	r4, #4
 8000f62:	7021      	strb	r1, [r4, #0]
	const char message2[] = "\r\t\t\n...Message2...\r\n";
 8000f64:	4b78      	ldr	r3, [pc, #480]	@ (8001148 <GNSSCom_Send_SetVal+0x200>)
 8000f66:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8000f6a:	461d      	mov	r5, r3
 8000f6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f70:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f74:	6020      	str	r0, [r4, #0]
 8000f76:	3404      	adds	r4, #4
 8000f78:	7021      	strb	r1, [r4, #0]
	const char message3[] = "\r\t\t...Message3...\r\n";
 8000f7a:	4b74      	ldr	r3, [pc, #464]	@ (800114c <GNSSCom_Send_SetVal+0x204>)
 8000f7c:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 8000f80:	461d      	mov	r5, r3
 8000f82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f86:	682b      	ldr	r3, [r5, #0]
 8000f88:	6023      	str	r3, [r4, #0]
	const char message4[] = "\r\t\t...Message4...\r\n";
 8000f8a:	4b71      	ldr	r3, [pc, #452]	@ (8001150 <GNSSCom_Send_SetVal+0x208>)
 8000f8c:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8000f90:	461d      	mov	r5, r3
 8000f92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f96:	682b      	ldr	r3, [r5, #0]
 8000f98:	6023      	str	r3, [r4, #0]
	const char message5[] = "\r\t\t...Message5...\r\n";
 8000f9a:	4b6e      	ldr	r3, [pc, #440]	@ (8001154 <GNSSCom_Send_SetVal+0x20c>)
 8000f9c:	f107 041c 	add.w	r4, r7, #28
 8000fa0:	461d      	mov	r5, r3
 8000fa2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fa4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fa6:	682b      	ldr	r3, [r5, #0]
 8000fa8:	6023      	str	r3, [r4, #0]
	const char messagetest[] = "\r\t\t...Message TEST...\r\n";
 8000faa:	4b6b      	ldr	r3, [pc, #428]	@ (8001158 <GNSSCom_Send_SetVal+0x210>)
 8000fac:	1d3c      	adds	r4, r7, #4
 8000fae:	461d      	mov	r5, r3
 8000fb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fb4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000fb8:	e884 0003 	stmia.w	r4, {r0, r1}
	//const char messageEnd[] = "\r\t\t...END...\r\n";
	HAL_UART_Transmit(hGNSSCom.huartDebug, (uint8_t*)message1,sizeof(message1),HAL_MAX_DELAY);
 8000fbc:	4b67      	ldr	r3, [pc, #412]	@ (800115c <GNSSCom_Send_SetVal+0x214>)
 8000fbe:	6858      	ldr	r0, [r3, #4]
 8000fc0:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8000fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc8:	2215      	movs	r2, #21
 8000fca:	f003 fef6 	bl	8004dba <HAL_UART_Transmit>

	HAL_UART_Transmit(hGNSSCom.huart, commandSetGNSS_Config,sizeof(commandSetGNSS_Config),HAL_MAX_DELAY);
 8000fce:	4b63      	ldr	r3, [pc, #396]	@ (800115c <GNSSCom_Send_SetVal+0x214>)
 8000fd0:	6818      	ldr	r0, [r3, #0]
 8000fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd6:	2284      	movs	r2, #132	@ 0x84
 8000fd8:	4961      	ldr	r1, [pc, #388]	@ (8001160 <GNSSCom_Send_SetVal+0x218>)
 8000fda:	f003 feee 	bl	8004dba <HAL_UART_Transmit>
	memcpy(hGNSSCom.DebugBuffer,commandSetGNSS_Config,sizeof(commandSetGNSS_Config));
 8000fde:	4b5f      	ldr	r3, [pc, #380]	@ (800115c <GNSSCom_Send_SetVal+0x214>)
 8000fe0:	4a5f      	ldr	r2, [pc, #380]	@ (8001160 <GNSSCom_Send_SetVal+0x218>)
 8000fe2:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8000fe6:	4611      	mov	r1, r2
 8000fe8:	2284      	movs	r2, #132	@ 0x84
 8000fea:	4618      	mov	r0, r3
 8000fec:	f006 fc09 	bl	8007802 <memcpy>
	GNSSCom_ReceiveDebug();
 8000ff0:	f000 f8c2 	bl	8001178 <GNSSCom_ReceiveDebug>

	HAL_UART_Transmit(hGNSSCom.huartDebug, (uint8_t*)message2,sizeof(message2),HAL_MAX_DELAY);
 8000ff4:	4b59      	ldr	r3, [pc, #356]	@ (800115c <GNSSCom_Send_SetVal+0x214>)
 8000ff6:	6858      	ldr	r0, [r3, #4]
 8000ff8:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8000ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8001000:	2215      	movs	r2, #21
 8001002:	f003 feda 	bl	8004dba <HAL_UART_Transmit>

	HAL_UART_Transmit(hGNSSCom.huart, commandUart1Ouput,sizeof(commandUart1Ouput),HAL_MAX_DELAY);
 8001006:	4b55      	ldr	r3, [pc, #340]	@ (800115c <GNSSCom_Send_SetVal+0x214>)
 8001008:	6818      	ldr	r0, [r3, #0]
 800100a:	f04f 33ff 	mov.w	r3, #4294967295
 800100e:	221b      	movs	r2, #27
 8001010:	4954      	ldr	r1, [pc, #336]	@ (8001164 <GNSSCom_Send_SetVal+0x21c>)
 8001012:	f003 fed2 	bl	8004dba <HAL_UART_Transmit>
	memcpy(hGNSSCom.DebugBuffer,commandUart1Ouput,sizeof(commandUart1Ouput));
 8001016:	4b51      	ldr	r3, [pc, #324]	@ (800115c <GNSSCom_Send_SetVal+0x214>)
 8001018:	4a52      	ldr	r2, [pc, #328]	@ (8001164 <GNSSCom_Send_SetVal+0x21c>)
 800101a:	f503 7581 	add.w	r5, r3, #258	@ 0x102
 800101e:	4614      	mov	r4, r2
 8001020:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001022:	6028      	str	r0, [r5, #0]
 8001024:	6069      	str	r1, [r5, #4]
 8001026:	60aa      	str	r2, [r5, #8]
 8001028:	60eb      	str	r3, [r5, #12]
 800102a:	cc03      	ldmia	r4!, {r0, r1}
 800102c:	6128      	str	r0, [r5, #16]
 800102e:	6169      	str	r1, [r5, #20]
 8001030:	8823      	ldrh	r3, [r4, #0]
 8001032:	78a2      	ldrb	r2, [r4, #2]
 8001034:	832b      	strh	r3, [r5, #24]
 8001036:	4613      	mov	r3, r2
 8001038:	76ab      	strb	r3, [r5, #26]
	GNSSCom_ReceiveDebug();
 800103a:	f000 f89d 	bl	8001178 <GNSSCom_ReceiveDebug>

	HAL_UART_Transmit(hGNSSCom.huartDebug, (uint8_t*)message3,sizeof(message3),HAL_MAX_DELAY);
 800103e:	4b47      	ldr	r3, [pc, #284]	@ (800115c <GNSSCom_Send_SetVal+0x214>)
 8001040:	6858      	ldr	r0, [r3, #4]
 8001042:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8001046:	f04f 33ff 	mov.w	r3, #4294967295
 800104a:	2214      	movs	r2, #20
 800104c:	f003 feb5 	bl	8004dba <HAL_UART_Transmit>

	HAL_UART_Transmit(hGNSSCom.huart, commandUBXTimeUTC,sizeof(commandUBXTimeUTC),HAL_MAX_DELAY);
 8001050:	4b42      	ldr	r3, [pc, #264]	@ (800115c <GNSSCom_Send_SetVal+0x214>)
 8001052:	6818      	ldr	r0, [r3, #0]
 8001054:	f04f 33ff 	mov.w	r3, #4294967295
 8001058:	220b      	movs	r2, #11
 800105a:	4943      	ldr	r1, [pc, #268]	@ (8001168 <GNSSCom_Send_SetVal+0x220>)
 800105c:	f003 fead 	bl	8004dba <HAL_UART_Transmit>
	memcpy(hGNSSCom.DebugBuffer,commandUBXTimeUTC,sizeof(commandUBXTimeUTC));
 8001060:	4b3e      	ldr	r3, [pc, #248]	@ (800115c <GNSSCom_Send_SetVal+0x214>)
 8001062:	4941      	ldr	r1, [pc, #260]	@ (8001168 <GNSSCom_Send_SetVal+0x220>)
 8001064:	f503 7281 	add.w	r2, r3, #258	@ 0x102
 8001068:	460b      	mov	r3, r1
 800106a:	cb03      	ldmia	r3!, {r0, r1}
 800106c:	6010      	str	r0, [r2, #0]
 800106e:	6051      	str	r1, [r2, #4]
 8001070:	8819      	ldrh	r1, [r3, #0]
 8001072:	789b      	ldrb	r3, [r3, #2]
 8001074:	8111      	strh	r1, [r2, #8]
 8001076:	7293      	strb	r3, [r2, #10]
	GNSSCom_ReceiveDebug();
 8001078:	f000 f87e 	bl	8001178 <GNSSCom_ReceiveDebug>

	HAL_UART_Transmit(hGNSSCom.huartDebug, (uint8_t*)message3,sizeof(message3),HAL_MAX_DELAY);
 800107c:	4b37      	ldr	r3, [pc, #220]	@ (800115c <GNSSCom_Send_SetVal+0x214>)
 800107e:	6858      	ldr	r0, [r3, #4]
 8001080:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8001084:	f04f 33ff 	mov.w	r3, #4294967295
 8001088:	2214      	movs	r2, #20
 800108a:	f003 fe96 	bl	8004dba <HAL_UART_Transmit>

	HAL_UART_Transmit(hGNSSCom.huart, commandSetTP,sizeof(commandSetTP),HAL_MAX_DELAY);
 800108e:	4b33      	ldr	r3, [pc, #204]	@ (800115c <GNSSCom_Send_SetVal+0x214>)
 8001090:	6818      	ldr	r0, [r3, #0]
 8001092:	f04f 33ff 	mov.w	r3, #4294967295
 8001096:	226e      	movs	r2, #110	@ 0x6e
 8001098:	4934      	ldr	r1, [pc, #208]	@ (800116c <GNSSCom_Send_SetVal+0x224>)
 800109a:	f003 fe8e 	bl	8004dba <HAL_UART_Transmit>
	memcpy(hGNSSCom.DebugBuffer,commandSetTP,sizeof(commandSetTP));
 800109e:	4b2f      	ldr	r3, [pc, #188]	@ (800115c <GNSSCom_Send_SetVal+0x214>)
 80010a0:	4a32      	ldr	r2, [pc, #200]	@ (800116c <GNSSCom_Send_SetVal+0x224>)
 80010a2:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 80010a6:	4611      	mov	r1, r2
 80010a8:	226e      	movs	r2, #110	@ 0x6e
 80010aa:	4618      	mov	r0, r3
 80010ac:	f006 fba9 	bl	8007802 <memcpy>
	GNSSCom_ReceiveDebug();
 80010b0:	f000 f862 	bl	8001178 <GNSSCom_ReceiveDebug>

	HAL_UART_Transmit(hGNSSCom.huartDebug, (uint8_t*)message4,sizeof(message4),HAL_MAX_DELAY);
 80010b4:	4b29      	ldr	r3, [pc, #164]	@ (800115c <GNSSCom_Send_SetVal+0x214>)
 80010b6:	6858      	ldr	r0, [r3, #4]
 80010b8:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80010bc:	f04f 33ff 	mov.w	r3, #4294967295
 80010c0:	2214      	movs	r2, #20
 80010c2:	f003 fe7a 	bl	8004dba <HAL_UART_Transmit>

	HAL_UART_Transmit(hGNSSCom.huart, commandMeasureRate,sizeof(commandMeasureRate),HAL_MAX_DELAY);
 80010c6:	4b25      	ldr	r3, [pc, #148]	@ (800115c <GNSSCom_Send_SetVal+0x214>)
 80010c8:	6818      	ldr	r0, [r3, #0]
 80010ca:	f04f 33ff 	mov.w	r3, #4294967295
 80010ce:	221d      	movs	r2, #29
 80010d0:	4927      	ldr	r1, [pc, #156]	@ (8001170 <GNSSCom_Send_SetVal+0x228>)
 80010d2:	f003 fe72 	bl	8004dba <HAL_UART_Transmit>
	memcpy(hGNSSCom.DebugBuffer,commandMeasureRate,sizeof(commandMeasureRate));
 80010d6:	4b21      	ldr	r3, [pc, #132]	@ (800115c <GNSSCom_Send_SetVal+0x214>)
 80010d8:	4a25      	ldr	r2, [pc, #148]	@ (8001170 <GNSSCom_Send_SetVal+0x228>)
 80010da:	f503 7581 	add.w	r5, r3, #258	@ 0x102
 80010de:	4614      	mov	r4, r2
 80010e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010e2:	6028      	str	r0, [r5, #0]
 80010e4:	6069      	str	r1, [r5, #4]
 80010e6:	60aa      	str	r2, [r5, #8]
 80010e8:	60eb      	str	r3, [r5, #12]
 80010ea:	cc07      	ldmia	r4!, {r0, r1, r2}
 80010ec:	6128      	str	r0, [r5, #16]
 80010ee:	6169      	str	r1, [r5, #20]
 80010f0:	61aa      	str	r2, [r5, #24]
 80010f2:	7823      	ldrb	r3, [r4, #0]
 80010f4:	772b      	strb	r3, [r5, #28]
	GNSSCom_ReceiveDebug();
 80010f6:	f000 f83f 	bl	8001178 <GNSSCom_ReceiveDebug>

	HAL_UART_Transmit(hGNSSCom.huartDebug, (uint8_t*)messagetest,sizeof(messagetest),HAL_MAX_DELAY);
 80010fa:	4b18      	ldr	r3, [pc, #96]	@ (800115c <GNSSCom_Send_SetVal+0x214>)
 80010fc:	6858      	ldr	r0, [r3, #4]
 80010fe:	1d39      	adds	r1, r7, #4
 8001100:	f04f 33ff 	mov.w	r3, #4294967295
 8001104:	2218      	movs	r2, #24
 8001106:	f003 fe58 	bl	8004dba <HAL_UART_Transmit>

	HAL_UART_Transmit(hGNSSCom.huart, test_UBXNav_TIMEUTC,sizeof(test_UBXNav_TIMEUTC),HAL_MAX_DELAY);
 800110a:	4b14      	ldr	r3, [pc, #80]	@ (800115c <GNSSCom_Send_SetVal+0x214>)
 800110c:	6818      	ldr	r0, [r3, #0]
 800110e:	f04f 33ff 	mov.w	r3, #4294967295
 8001112:	221c      	movs	r2, #28
 8001114:	4917      	ldr	r1, [pc, #92]	@ (8001174 <GNSSCom_Send_SetVal+0x22c>)
 8001116:	f003 fe50 	bl	8004dba <HAL_UART_Transmit>
	memcpy(hGNSSCom.DebugBuffer,test_UBXNav_TIMEUTC,sizeof(test_UBXNav_TIMEUTC));
 800111a:	4b10      	ldr	r3, [pc, #64]	@ (800115c <GNSSCom_Send_SetVal+0x214>)
 800111c:	4a15      	ldr	r2, [pc, #84]	@ (8001174 <GNSSCom_Send_SetVal+0x22c>)
 800111e:	f503 7581 	add.w	r5, r3, #258	@ 0x102
 8001122:	4614      	mov	r4, r2
 8001124:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001126:	6028      	str	r0, [r5, #0]
 8001128:	6069      	str	r1, [r5, #4]
 800112a:	60aa      	str	r2, [r5, #8]
 800112c:	60eb      	str	r3, [r5, #12]
 800112e:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001130:	6128      	str	r0, [r5, #16]
 8001132:	6169      	str	r1, [r5, #20]
 8001134:	61aa      	str	r2, [r5, #24]
	GNSSCom_ReceiveDebug();
 8001136:	f000 f81f 	bl	8001178 <GNSSCom_ReceiveDebug>

}
 800113a:	bf00      	nop
 800113c:	3788      	adds	r7, #136	@ 0x88
 800113e:	46bd      	mov	sp, r7
 8001140:	bdb0      	pop	{r4, r5, r7, pc}
 8001142:	bf00      	nop
 8001144:	08009720 	.word	0x08009720
 8001148:	08009738 	.word	0x08009738
 800114c:	08009750 	.word	0x08009750
 8001150:	08009764 	.word	0x08009764
 8001154:	08009778 	.word	0x08009778
 8001158:	0800978c 	.word	0x0800978c
 800115c:	20000370 	.word	0x20000370
 8001160:	20000000 	.word	0x20000000
 8001164:	200000f4 	.word	0x200000f4
 8001168:	20000130 	.word	0x20000130
 800116c:	20000084 	.word	0x20000084
 8001170:	20000110 	.word	0x20000110
 8001174:	2000013c 	.word	0x2000013c

08001178 <GNSSCom_ReceiveDebug>:

void GNSSCom_ReceiveDebug(){
 8001178:	b590      	push	{r4, r7, lr}
 800117a:	b0b7      	sub	sp, #220	@ 0xdc
 800117c:	af00      	add	r7, sp, #0
	// Initialiser la chaîne de sortie à une chaîne vide
	char output_string[UART_DEBUG_BUFFER_SIZE];
	int bool_UBXflag = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
	for (int i = 0; i < UART_DEBUG_BUFFER_SIZE; i++) {
 8001184:	2300      	movs	r3, #0
 8001186:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800118a:	e102      	b.n	8001392 <GNSSCom_ReceiveDebug+0x21a>


		if (hGNSSCom.DebugBuffer[i] == HEADER_CheckValue1 || bool_UBXflag ){
 800118c:	4a90      	ldr	r2, [pc, #576]	@ (80013d0 <GNSSCom_ReceiveDebug+0x258>)
 800118e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001192:	4413      	add	r3, r2
 8001194:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	2bb5      	cmp	r3, #181	@ 0xb5
 800119c:	d003      	beq.n	80011a6 <GNSSCom_ReceiveDebug+0x2e>
 800119e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d05e      	beq.n	8001264 <GNSSCom_ReceiveDebug+0xec>
			bool_UBXflag = 1;
 80011a6:	2301      	movs	r3, #1
 80011a8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
			if (hGNSSCom.DebugBuffer[i] == HEADER_CheckValue2 ){
 80011ac:	4a88      	ldr	r2, [pc, #544]	@ (80013d0 <GNSSCom_ReceiveDebug+0x258>)
 80011ae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80011b2:	4413      	add	r3, r2
 80011b4:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	2b62      	cmp	r3, #98	@ 0x62
 80011bc:	d152      	bne.n	8001264 <GNSSCom_ReceiveDebug+0xec>
				//On est sur un message UBX
				bool_UBXflag =0;
 80011be:	2300      	movs	r3, #0
 80011c0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
				int len = (hGNSSCom.DebugBuffer[i+4] << 8) |hGNSSCom.DebugBuffer[i+3];
 80011c4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80011c8:	3304      	adds	r3, #4
 80011ca:	4a81      	ldr	r2, [pc, #516]	@ (80013d0 <GNSSCom_ReceiveDebug+0x258>)
 80011cc:	4413      	add	r3, r2
 80011ce:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 80011d2:	021b      	lsls	r3, r3, #8
 80011d4:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80011d8:	3203      	adds	r2, #3
 80011da:	497d      	ldr	r1, [pc, #500]	@ (80013d0 <GNSSCom_ReceiveDebug+0x258>)
 80011dc:	440a      	add	r2, r1
 80011de:	f892 2102 	ldrb.w	r2, [r2, #258]	@ 0x102
 80011e2:	4313      	orrs	r3, r2
 80011e4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
				UBXMessage_parsed* UbxMessage =(UBXMessage_parsed*) malloc(sizeof(UBXMessage_parsed)) ;
 80011e8:	f44f 70ca 	mov.w	r0, #404	@ 0x194
 80011ec:	f005 fc00 	bl	80069f0 <malloc>
 80011f0:	4603      	mov	r3, r0
 80011f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

				UbxMessage->msgClass = hGNSSCom.DebugBuffer[i + 1];
 80011f6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80011fa:	3301      	adds	r3, #1
 80011fc:	4a74      	ldr	r2, [pc, #464]	@ (80013d0 <GNSSCom_ReceiveDebug+0x258>)
 80011fe:	4413      	add	r3, r2
 8001200:	f893 2102 	ldrb.w	r2, [r3, #258]	@ 0x102
 8001204:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001208:	701a      	strb	r2, [r3, #0]
				UbxMessage->msgID = hGNSSCom.DebugBuffer[i + 2];
 800120a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800120e:	3302      	adds	r3, #2
 8001210:	4a6f      	ldr	r2, [pc, #444]	@ (80013d0 <GNSSCom_ReceiveDebug+0x258>)
 8001212:	4413      	add	r3, r2
 8001214:	f893 2102 	ldrb.w	r2, [r3, #258]	@ 0x102
 8001218:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800121c:	705a      	strb	r2, [r3, #1]
				UbxMessage->len = len;
 800121e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001222:	b29a      	uxth	r2, r3
 8001224:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001228:	805a      	strh	r2, [r3, #2]
				memcpy(UbxMessage->load, hGNSSCom.DebugBuffer + i + 5, len);
 800122a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800122e:	1d18      	adds	r0, r3, #4
 8001230:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001234:	3305      	adds	r3, #5
 8001236:	4a67      	ldr	r2, [pc, #412]	@ (80013d4 <GNSSCom_ReceiveDebug+0x25c>)
 8001238:	4413      	add	r3, r2
 800123a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800123e:	4619      	mov	r1, r3
 8001240:	f006 fadf 	bl	8007802 <memcpy>
				create_message_debug(UbxMessage); //On obtient l'adresse de la structure qui correspond au message
 8001244:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 8001248:	f000 f8d6 	bl	80013f8 <create_message_debug>
				//Maintenant pour pouvoir utilsier ici la structure il nous faut savoir quelle type de structure est elle
				HAL_UART_Transmit(hGNSSCom.huartDebug, UbxMessage->bufferDebug, sizeof(UbxMessage->bufferDebug),HAL_MAX_DELAY);
 800124c:	4b60      	ldr	r3, [pc, #384]	@ (80013d0 <GNSSCom_ReceiveDebug+0x258>)
 800124e:	6858      	ldr	r0, [r3, #4]
 8001250:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001254:	f103 01cc 	add.w	r1, r3, #204	@ 0xcc
 8001258:	f04f 33ff 	mov.w	r3, #4294967295
 800125c:	22c8      	movs	r2, #200	@ 0xc8
 800125e:	f003 fdac 	bl	8004dba <HAL_UART_Transmit>
				break;
 8001262:	e09b      	b.n	800139c <GNSSCom_ReceiveDebug+0x224>
			}
		}

		switch (hGNSSCom.DebugBuffer[i]) {
 8001264:	4a5a      	ldr	r2, [pc, #360]	@ (80013d0 <GNSSCom_ReceiveDebug+0x258>)
 8001266:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800126a:	4413      	add	r3, r2
 800126c:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b0a      	cmp	r3, #10
 8001274:	d002      	beq.n	800127c <GNSSCom_ReceiveDebug+0x104>
 8001276:	2b0d      	cmp	r3, #13
 8001278:	d00e      	beq.n	8001298 <GNSSCom_ReceiveDebug+0x120>
 800127a:	e01b      	b.n	80012b4 <GNSSCom_ReceiveDebug+0x13c>
		case '\n': // Nouvelle ligne détectée
			strcat(output_string, "\n"); // Ajout d'un saut de ligne à la chaîne de sortie
 800127c:	463b      	mov	r3, r7
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff f806 	bl	8000290 <strlen>
 8001284:	4603      	mov	r3, r0
 8001286:	461a      	mov	r2, r3
 8001288:	463b      	mov	r3, r7
 800128a:	4413      	add	r3, r2
 800128c:	4952      	ldr	r1, [pc, #328]	@ (80013d8 <GNSSCom_ReceiveDebug+0x260>)
 800128e:	461a      	mov	r2, r3
 8001290:	460b      	mov	r3, r1
 8001292:	881b      	ldrh	r3, [r3, #0]
 8001294:	8013      	strh	r3, [r2, #0]
			break;
 8001296:	e077      	b.n	8001388 <GNSSCom_ReceiveDebug+0x210>
		case '\r': // Retour de chariot détecté
			strcat(output_string, "\r");
 8001298:	463b      	mov	r3, r7
 800129a:	4618      	mov	r0, r3
 800129c:	f7fe fff8 	bl	8000290 <strlen>
 80012a0:	4603      	mov	r3, r0
 80012a2:	461a      	mov	r2, r3
 80012a4:	463b      	mov	r3, r7
 80012a6:	4413      	add	r3, r2
 80012a8:	494c      	ldr	r1, [pc, #304]	@ (80013dc <GNSSCom_ReceiveDebug+0x264>)
 80012aa:	461a      	mov	r2, r3
 80012ac:	460b      	mov	r3, r1
 80012ae:	881b      	ldrh	r3, [r3, #0]
 80012b0:	8013      	strh	r3, [r2, #0]
			break;
 80012b2:	e069      	b.n	8001388 <GNSSCom_ReceiveDebug+0x210>
		default:
			switch (type) {
 80012b4:	4b4a      	ldr	r3, [pc, #296]	@ (80013e0 <GNSSCom_ReceiveDebug+0x268>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d02c      	beq.n	8001316 <GNSSCom_ReceiveDebug+0x19e>
 80012bc:	2b02      	cmp	r3, #2
 80012be:	dc5a      	bgt.n	8001376 <GNSSCom_ReceiveDebug+0x1fe>
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d002      	beq.n	80012ca <GNSSCom_ReceiveDebug+0x152>
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d013      	beq.n	80012f0 <GNSSCom_ReceiveDebug+0x178>
 80012c8:	e055      	b.n	8001376 <GNSSCom_ReceiveDebug+0x1fe>
			case RAW:
				snprintf(output_string + i, sizeof(output_string) - i, "%d", hGNSSCom.DebugBuffer[i]);
 80012ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80012ce:	463a      	mov	r2, r7
 80012d0:	18d0      	adds	r0, r2, r3
 80012d2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80012d6:	f1c3 01c8 	rsb	r1, r3, #200	@ 0xc8
 80012da:	4a3d      	ldr	r2, [pc, #244]	@ (80013d0 <GNSSCom_ReceiveDebug+0x258>)
 80012dc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80012e0:	4413      	add	r3, r2
 80012e2:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	4a3e      	ldr	r2, [pc, #248]	@ (80013e4 <GNSSCom_ReceiveDebug+0x26c>)
 80012ea:	f006 f951 	bl	8007590 <sniprintf>
				break;
 80012ee:	e042      	b.n	8001376 <GNSSCom_ReceiveDebug+0x1fe>

			case HEX:
				snprintf(output_string +i, sizeof(output_string) - i, "%02X", hGNSSCom.DebugBuffer[i]);
 80012f0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80012f4:	463a      	mov	r2, r7
 80012f6:	18d0      	adds	r0, r2, r3
 80012f8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80012fc:	f1c3 01c8 	rsb	r1, r3, #200	@ 0xc8
 8001300:	4a33      	ldr	r2, [pc, #204]	@ (80013d0 <GNSSCom_ReceiveDebug+0x258>)
 8001302:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001306:	4413      	add	r3, r2
 8001308:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	4a36      	ldr	r2, [pc, #216]	@ (80013e8 <GNSSCom_ReceiveDebug+0x270>)
 8001310:	f006 f93e 	bl	8007590 <sniprintf>
				break;
 8001314:	e02f      	b.n	8001376 <GNSSCom_ReceiveDebug+0x1fe>

			case ASCII:
				snprintf(output_string +i, sizeof(output_string) - i, "%c",
 8001316:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800131a:	463a      	mov	r2, r7
 800131c:	18d0      	adds	r0, r2, r3
 800131e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001322:	f1c3 01c8 	rsb	r1, r3, #200	@ 0xc8
						((hGNSSCom.DebugBuffer[i] >= 32 && hGNSSCom.DebugBuffer[i] <= 126)||hGNSSCom.DebugBuffer[i] >= 192) ? hGNSSCom.DebugBuffer[i] : '.');
 8001326:	4a2a      	ldr	r2, [pc, #168]	@ (80013d0 <GNSSCom_ReceiveDebug+0x258>)
 8001328:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800132c:	4413      	add	r3, r2
 800132e:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001332:	781b      	ldrb	r3, [r3, #0]
				snprintf(output_string +i, sizeof(output_string) - i, "%c",
 8001334:	2b1f      	cmp	r3, #31
 8001336:	d908      	bls.n	800134a <GNSSCom_ReceiveDebug+0x1d2>
						((hGNSSCom.DebugBuffer[i] >= 32 && hGNSSCom.DebugBuffer[i] <= 126)||hGNSSCom.DebugBuffer[i] >= 192) ? hGNSSCom.DebugBuffer[i] : '.');
 8001338:	4a25      	ldr	r2, [pc, #148]	@ (80013d0 <GNSSCom_ReceiveDebug+0x258>)
 800133a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800133e:	4413      	add	r3, r2
 8001340:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b7e      	cmp	r3, #126	@ 0x7e
 8001348:	d908      	bls.n	800135c <GNSSCom_ReceiveDebug+0x1e4>
 800134a:	4a21      	ldr	r2, [pc, #132]	@ (80013d0 <GNSSCom_ReceiveDebug+0x258>)
 800134c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001350:	4413      	add	r3, r2
 8001352:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2bbf      	cmp	r3, #191	@ 0xbf
 800135a:	d907      	bls.n	800136c <GNSSCom_ReceiveDebug+0x1f4>
 800135c:	4a1c      	ldr	r2, [pc, #112]	@ (80013d0 <GNSSCom_ReceiveDebug+0x258>)
 800135e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001362:	4413      	add	r3, r2
 8001364:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001368:	781b      	ldrb	r3, [r3, #0]
				snprintf(output_string +i, sizeof(output_string) - i, "%c",
 800136a:	e000      	b.n	800136e <GNSSCom_ReceiveDebug+0x1f6>
 800136c:	232e      	movs	r3, #46	@ 0x2e
 800136e:	4a1f      	ldr	r2, [pc, #124]	@ (80013ec <GNSSCom_ReceiveDebug+0x274>)
 8001370:	f006 f90e 	bl	8007590 <sniprintf>
				break;
 8001374:	bf00      	nop
			}
			strncat(output_string, " ", sizeof(output_string) - i - 1);
 8001376:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800137a:	f1c3 02c7 	rsb	r2, r3, #199	@ 0xc7
 800137e:	463b      	mov	r3, r7
 8001380:	491b      	ldr	r1, [pc, #108]	@ (80013f0 <GNSSCom_ReceiveDebug+0x278>)
 8001382:	4618      	mov	r0, r3
 8001384:	f006 f9a3 	bl	80076ce <strncat>
	for (int i = 0; i < UART_DEBUG_BUFFER_SIZE; i++) {
 8001388:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800138c:	3301      	adds	r3, #1
 800138e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001392:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001396:	2bc7      	cmp	r3, #199	@ 0xc7
 8001398:	f77f aef8 	ble.w	800118c <GNSSCom_ReceiveDebug+0x14>

		}
	}
	HAL_UART_Transmit(hGNSSCom.huartDebug, (uint8_t*)output_string, strlen(output_string),HAL_MAX_DELAY);
 800139c:	4b0c      	ldr	r3, [pc, #48]	@ (80013d0 <GNSSCom_ReceiveDebug+0x258>)
 800139e:	685c      	ldr	r4, [r3, #4]
 80013a0:	463b      	mov	r3, r7
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7fe ff74 	bl	8000290 <strlen>
 80013a8:	4603      	mov	r3, r0
 80013aa:	b29a      	uxth	r2, r3
 80013ac:	4639      	mov	r1, r7
 80013ae:	f04f 33ff 	mov.w	r3, #4294967295
 80013b2:	4620      	mov	r0, r4
 80013b4:	f003 fd01 	bl	8004dba <HAL_UART_Transmit>
	HAL_UART_Transmit(hGNSSCom.huartDebug, (uint8_t*)"\r\n", 4,HAL_MAX_DELAY);
 80013b8:	4b05      	ldr	r3, [pc, #20]	@ (80013d0 <GNSSCom_ReceiveDebug+0x258>)
 80013ba:	6858      	ldr	r0, [r3, #4]
 80013bc:	f04f 33ff 	mov.w	r3, #4294967295
 80013c0:	2204      	movs	r2, #4
 80013c2:	490c      	ldr	r1, [pc, #48]	@ (80013f4 <GNSSCom_ReceiveDebug+0x27c>)
 80013c4:	f003 fcf9 	bl	8004dba <HAL_UART_Transmit>
}
 80013c8:	bf00      	nop
 80013ca:	37dc      	adds	r7, #220	@ 0xdc
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd90      	pop	{r4, r7, pc}
 80013d0:	20000370 	.word	0x20000370
 80013d4:	20000472 	.word	0x20000472
 80013d8:	080097a4 	.word	0x080097a4
 80013dc:	080097a8 	.word	0x080097a8
 80013e0:	20000158 	.word	0x20000158
 80013e4:	080097ac 	.word	0x080097ac
 80013e8:	080097b0 	.word	0x080097b0
 80013ec:	080097b8 	.word	0x080097b8
 80013f0:	080097bc 	.word	0x080097bc
 80013f4:	080097c0 	.word	0x080097c0

080013f8 <create_message_debug>:
	{0x06, 0x8b, debug_GetVal, &UBX_CFG_GETVAL_instance},
    // Add other mappings for other message types if necessary
};

// Function to create a message structure
void create_message_debug(UBXMessage_parsed* UBXMessage) {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
    // Function pointer and variables to hold the matched mapping's values
    void (*get_func)(UBXMessage_parsed*, void *) = NULL;
 8001400:	2300      	movs	r3, #0
 8001402:	613b      	str	r3, [r7, #16]
    void* structAssociate = NULL;
 8001404:	2300      	movs	r3, #0
 8001406:	60fb      	str	r3, [r7, #12]

    // Loop through the message mappings to find a match
    for (int i = 0; i < sizeof(message_mappings) / sizeof(message_mappings[0]); i++) {
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]
 800140c:	e034      	b.n	8001478 <create_message_debug+0x80>
        if (message_mappings[i].msgClass == UBXMessage->msgClass &&
 800140e:	491e      	ldr	r1, [pc, #120]	@ (8001488 <create_message_debug+0x90>)
 8001410:	697a      	ldr	r2, [r7, #20]
 8001412:	4613      	mov	r3, r2
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	4413      	add	r3, r2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	440b      	add	r3, r1
 800141c:	781a      	ldrb	r2, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	429a      	cmp	r2, r3
 8001424:	d125      	bne.n	8001472 <create_message_debug+0x7a>
            message_mappings[i].msgID == UBXMessage->msgID) {
 8001426:	4918      	ldr	r1, [pc, #96]	@ (8001488 <create_message_debug+0x90>)
 8001428:	697a      	ldr	r2, [r7, #20]
 800142a:	4613      	mov	r3, r2
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	4413      	add	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	440b      	add	r3, r1
 8001434:	3301      	adds	r3, #1
 8001436:	781a      	ldrb	r2, [r3, #0]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	785b      	ldrb	r3, [r3, #1]
        if (message_mappings[i].msgClass == UBXMessage->msgClass &&
 800143c:	429a      	cmp	r2, r3
 800143e:	d118      	bne.n	8001472 <create_message_debug+0x7a>
            // Retrieve the corresponding get function and associated structure and variables
            get_func = message_mappings[i].get_func;
 8001440:	4911      	ldr	r1, [pc, #68]	@ (8001488 <create_message_debug+0x90>)
 8001442:	697a      	ldr	r2, [r7, #20]
 8001444:	4613      	mov	r3, r2
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	4413      	add	r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	440b      	add	r3, r1
 800144e:	3304      	adds	r3, #4
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	613b      	str	r3, [r7, #16]
            structAssociate = message_mappings[i].structAssociate;
 8001454:	490c      	ldr	r1, [pc, #48]	@ (8001488 <create_message_debug+0x90>)
 8001456:	697a      	ldr	r2, [r7, #20]
 8001458:	4613      	mov	r3, r2
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	4413      	add	r3, r2
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	440b      	add	r3, r1
 8001462:	3308      	adds	r3, #8
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	60fb      	str	r3, [r7, #12]
            get_func(UBXMessage,structAssociate);
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	68f9      	ldr	r1, [r7, #12]
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	4798      	blx	r3
            break;
 8001470:	e006      	b.n	8001480 <create_message_debug+0x88>
    for (int i = 0; i < sizeof(message_mappings) / sizeof(message_mappings[0]); i++) {
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	3301      	adds	r3, #1
 8001476:	617b      	str	r3, [r7, #20]
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	2b02      	cmp	r3, #2
 800147c:	d9c7      	bls.n	800140e <create_message_debug+0x16>
        }

    }
}
 800147e:	bf00      	nop
 8001480:	bf00      	nop
 8001482:	3718      	adds	r7, #24
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	2000015c 	.word	0x2000015c

0800148c <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b08a      	sub	sp, #40	@ 0x28
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001492:	1d3b      	adds	r3, r7, #4
 8001494:	2224      	movs	r2, #36	@ 0x24
 8001496:	2100      	movs	r1, #0
 8001498:	4618      	mov	r0, r3
 800149a:	f006 f910 	bl	80076be <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800149e:	4b17      	ldr	r3, [pc, #92]	@ (80014fc <MX_DAC1_Init+0x70>)
 80014a0:	4a17      	ldr	r2, [pc, #92]	@ (8001500 <MX_DAC1_Init+0x74>)
 80014a2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80014a4:	4815      	ldr	r0, [pc, #84]	@ (80014fc <MX_DAC1_Init+0x70>)
 80014a6:	f001 fb46 	bl	8002b36 <HAL_DAC_Init>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80014b0:	f000 f9e5 	bl	800187e <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80014b4:	2300      	movs	r3, #0
 80014b6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80014b8:	2300      	movs	r3, #0
 80014ba:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80014bc:	2300      	movs	r3, #0
 80014be:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80014c0:	2300      	movs	r3, #0
 80014c2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80014c8:	1d3b      	adds	r3, r7, #4
 80014ca:	2200      	movs	r2, #0
 80014cc:	4619      	mov	r1, r3
 80014ce:	480b      	ldr	r0, [pc, #44]	@ (80014fc <MX_DAC1_Init+0x70>)
 80014d0:	f001 fb53 	bl	8002b7a <HAL_DAC_ConfigChannel>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80014da:	f000 f9d0 	bl	800187e <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80014de:	1d3b      	adds	r3, r7, #4
 80014e0:	2210      	movs	r2, #16
 80014e2:	4619      	mov	r1, r3
 80014e4:	4805      	ldr	r0, [pc, #20]	@ (80014fc <MX_DAC1_Init+0x70>)
 80014e6:	f001 fb48 	bl	8002b7a <HAL_DAC_ConfigChannel>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 80014f0:	f000 f9c5 	bl	800187e <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80014f4:	bf00      	nop
 80014f6:	3728      	adds	r7, #40	@ 0x28
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	200006e8 	.word	0x200006e8
 8001500:	40007400 	.word	0x40007400

08001504 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08a      	sub	sp, #40	@ 0x28
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a15      	ldr	r2, [pc, #84]	@ (8001578 <HAL_DAC_MspInit+0x74>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d124      	bne.n	8001570 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001526:	4b15      	ldr	r3, [pc, #84]	@ (800157c <HAL_DAC_MspInit+0x78>)
 8001528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800152a:	4a14      	ldr	r2, [pc, #80]	@ (800157c <HAL_DAC_MspInit+0x78>)
 800152c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001530:	6593      	str	r3, [r2, #88]	@ 0x58
 8001532:	4b12      	ldr	r3, [pc, #72]	@ (800157c <HAL_DAC_MspInit+0x78>)
 8001534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001536:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800153a:	613b      	str	r3, [r7, #16]
 800153c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800153e:	4b0f      	ldr	r3, [pc, #60]	@ (800157c <HAL_DAC_MspInit+0x78>)
 8001540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001542:	4a0e      	ldr	r2, [pc, #56]	@ (800157c <HAL_DAC_MspInit+0x78>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800154a:	4b0c      	ldr	r3, [pc, #48]	@ (800157c <HAL_DAC_MspInit+0x78>)
 800154c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = STM_DAC_TRIG_Pin|STM_DAC_CS_Pin;
 8001556:	2330      	movs	r3, #48	@ 0x30
 8001558:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800155a:	2303      	movs	r3, #3
 800155c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001562:	f107 0314 	add.w	r3, r7, #20
 8001566:	4619      	mov	r1, r3
 8001568:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800156c:	f001 fcac 	bl	8002ec8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8001570:	bf00      	nop
 8001572:	3728      	adds	r7, #40	@ 0x28
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40007400 	.word	0x40007400
 800157c:	40021000 	.word	0x40021000

08001580 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b08c      	sub	sp, #48	@ 0x30
 8001584:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001586:	f107 031c 	add.w	r3, r7, #28
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	605a      	str	r2, [r3, #4]
 8001590:	609a      	str	r2, [r3, #8]
 8001592:	60da      	str	r2, [r3, #12]
 8001594:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001596:	4b63      	ldr	r3, [pc, #396]	@ (8001724 <MX_GPIO_Init+0x1a4>)
 8001598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800159a:	4a62      	ldr	r2, [pc, #392]	@ (8001724 <MX_GPIO_Init+0x1a4>)
 800159c:	f043 0310 	orr.w	r3, r3, #16
 80015a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015a2:	4b60      	ldr	r3, [pc, #384]	@ (8001724 <MX_GPIO_Init+0x1a4>)
 80015a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015a6:	f003 0310 	and.w	r3, r3, #16
 80015aa:	61bb      	str	r3, [r7, #24]
 80015ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ae:	4b5d      	ldr	r3, [pc, #372]	@ (8001724 <MX_GPIO_Init+0x1a4>)
 80015b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b2:	4a5c      	ldr	r2, [pc, #368]	@ (8001724 <MX_GPIO_Init+0x1a4>)
 80015b4:	f043 0304 	orr.w	r3, r3, #4
 80015b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015ba:	4b5a      	ldr	r3, [pc, #360]	@ (8001724 <MX_GPIO_Init+0x1a4>)
 80015bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015be:	f003 0304 	and.w	r3, r3, #4
 80015c2:	617b      	str	r3, [r7, #20]
 80015c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015c6:	4b57      	ldr	r3, [pc, #348]	@ (8001724 <MX_GPIO_Init+0x1a4>)
 80015c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ca:	4a56      	ldr	r2, [pc, #344]	@ (8001724 <MX_GPIO_Init+0x1a4>)
 80015cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015d2:	4b54      	ldr	r3, [pc, #336]	@ (8001724 <MX_GPIO_Init+0x1a4>)
 80015d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015da:	613b      	str	r3, [r7, #16]
 80015dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015de:	4b51      	ldr	r3, [pc, #324]	@ (8001724 <MX_GPIO_Init+0x1a4>)
 80015e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015e2:	4a50      	ldr	r2, [pc, #320]	@ (8001724 <MX_GPIO_Init+0x1a4>)
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015ea:	4b4e      	ldr	r3, [pc, #312]	@ (8001724 <MX_GPIO_Init+0x1a4>)
 80015ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f6:	4b4b      	ldr	r3, [pc, #300]	@ (8001724 <MX_GPIO_Init+0x1a4>)
 80015f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015fa:	4a4a      	ldr	r2, [pc, #296]	@ (8001724 <MX_GPIO_Init+0x1a4>)
 80015fc:	f043 0302 	orr.w	r3, r3, #2
 8001600:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001602:	4b48      	ldr	r3, [pc, #288]	@ (8001724 <MX_GPIO_Init+0x1a4>)
 8001604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	60bb      	str	r3, [r7, #8]
 800160c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800160e:	4b45      	ldr	r3, [pc, #276]	@ (8001724 <MX_GPIO_Init+0x1a4>)
 8001610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001612:	4a44      	ldr	r2, [pc, #272]	@ (8001724 <MX_GPIO_Init+0x1a4>)
 8001614:	f043 0308 	orr.w	r3, r3, #8
 8001618:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800161a:	4b42      	ldr	r3, [pc, #264]	@ (8001724 <MX_GPIO_Init+0x1a4>)
 800161c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800161e:	f003 0308 	and.w	r3, r3, #8
 8001622:	607b      	str	r3, [r7, #4]
 8001624:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, PROC_M2_Pin|PROC_RESET_FPGA_Pin|UI_LED_R_Pin|UI_LED_G_Pin
 8001626:	2200      	movs	r2, #0
 8001628:	f240 11bf 	movw	r1, #447	@ 0x1bf
 800162c:	483e      	ldr	r0, [pc, #248]	@ (8001728 <MX_GPIO_Init+0x1a8>)
 800162e:	f001 fddd 	bl	80031ec <HAL_GPIO_WritePin>
                          |RFM_EN_Pin|RFM_RST_Pin|PROC_M0_Pin|PROC_M1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UI_LED_B_GPIO_Port, UI_LED_B_Pin, GPIO_PIN_RESET);
 8001632:	2200      	movs	r2, #0
 8001634:	2102      	movs	r1, #2
 8001636:	483d      	ldr	r0, [pc, #244]	@ (800172c <MX_GPIO_Init+0x1ac>)
 8001638:	f001 fdd8 	bl	80031ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CLK_64M_EN_Pin|STM_ACQ_TRIG_SRC0_Pin|STM_ACQ_TRIG_SRC1_Pin, GPIO_PIN_RESET);
 800163c:	2200      	movs	r2, #0
 800163e:	f44f 4144 	mov.w	r1, #50176	@ 0xc400
 8001642:	483b      	ldr	r0, [pc, #236]	@ (8001730 <MX_GPIO_Init+0x1b0>)
 8001644:	f001 fdd2 	bl	80031ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ACQ_POW_EN_Pin|GPS_RESET_Pin, GPIO_PIN_SET);
 8001648:	2201      	movs	r2, #1
 800164a:	f44f 6108 	mov.w	r1, #2176	@ 0x880
 800164e:	4838      	ldr	r0, [pc, #224]	@ (8001730 <MX_GPIO_Init+0x1b0>)
 8001650:	f001 fdcc 	bl	80031ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = PROC_M2_Pin|PROC_RESET_FPGA_Pin|UI_LED_R_Pin|UI_LED_G_Pin
 8001654:	f240 13bf 	movw	r3, #447	@ 0x1bf
 8001658:	61fb      	str	r3, [r7, #28]
                          |RFM_EN_Pin|RFM_RST_Pin|PROC_M0_Pin|PROC_M1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800165a:	2301      	movs	r3, #1
 800165c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2300      	movs	r3, #0
 8001660:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001662:	2300      	movs	r3, #0
 8001664:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001666:	f107 031c 	add.w	r3, r7, #28
 800166a:	4619      	mov	r1, r3
 800166c:	482e      	ldr	r0, [pc, #184]	@ (8001728 <MX_GPIO_Init+0x1a8>)
 800166e:	f001 fc2b 	bl	8002ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UI_WakeUp_Pin;
 8001672:	2340      	movs	r3, #64	@ 0x40
 8001674:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001676:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800167a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(UI_WakeUp_GPIO_Port, &GPIO_InitStruct);
 8001680:	f107 031c 	add.w	r3, r7, #28
 8001684:	4619      	mov	r1, r3
 8001686:	4828      	ldr	r0, [pc, #160]	@ (8001728 <MX_GPIO_Init+0x1a8>)
 8001688:	f001 fc1e 	bl	8002ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPS_PROC_TIME_INT_Pin|PROC_FPGA_BUSY_Pin|SD_DETECT_INT_Pin;
 800168c:	f242 03a0 	movw	r3, #8352	@ 0x20a0
 8001690:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001692:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001696:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800169c:	f107 031c 	add.w	r3, r7, #28
 80016a0:	4619      	mov	r1, r3
 80016a2:	4824      	ldr	r0, [pc, #144]	@ (8001734 <MX_GPIO_Init+0x1b4>)
 80016a4:	f001 fc10 	bl	8002ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_VBUS_DETECT_WU_Pin|UI_ARM_Pin;
 80016a8:	2305      	movs	r3, #5
 80016aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016ac:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80016b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b6:	f107 031c 	add.w	r3, r7, #28
 80016ba:	4619      	mov	r1, r3
 80016bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016c0:	f001 fc02 	bl	8002ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UI_LED_B_Pin;
 80016c4:	2302      	movs	r3, #2
 80016c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c8:	2301      	movs	r3, #1
 80016ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d0:	2300      	movs	r3, #0
 80016d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(UI_LED_B_GPIO_Port, &GPIO_InitStruct);
 80016d4:	f107 031c 	add.w	r3, r7, #28
 80016d8:	4619      	mov	r1, r3
 80016da:	4814      	ldr	r0, [pc, #80]	@ (800172c <MX_GPIO_Init+0x1ac>)
 80016dc:	f001 fbf4 	bl	8002ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = CLK_64M_EN_Pin|ACQ_POW_EN_Pin|STM_ACQ_TRIG_SRC0_Pin|STM_ACQ_TRIG_SRC1_Pin
 80016e0:	f64c 4380 	movw	r3, #52352	@ 0xcc80
 80016e4:	61fb      	str	r3, [r7, #28]
                          |GPS_RESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e6:	2301      	movs	r3, #1
 80016e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ee:	2300      	movs	r3, #0
 80016f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016f2:	f107 031c 	add.w	r3, r7, #28
 80016f6:	4619      	mov	r1, r3
 80016f8:	480d      	ldr	r0, [pc, #52]	@ (8001730 <MX_GPIO_Init+0x1b0>)
 80016fa:	f001 fbe5 	bl	8002ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RFM_IRQ_Pin;
 80016fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001702:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001704:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001708:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(RFM_IRQ_GPIO_Port, &GPIO_InitStruct);
 800170e:	f107 031c 	add.w	r3, r7, #28
 8001712:	4619      	mov	r1, r3
 8001714:	4805      	ldr	r0, [pc, #20]	@ (800172c <MX_GPIO_Init+0x1ac>)
 8001716:	f001 fbd7 	bl	8002ec8 <HAL_GPIO_Init>

}
 800171a:	bf00      	nop
 800171c:	3730      	adds	r7, #48	@ 0x30
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40021000 	.word	0x40021000
 8001728:	48001000 	.word	0x48001000
 800172c:	48000400 	.word	0x48000400
 8001730:	48000c00 	.word	0x48000c00
 8001734:	48000800 	.word	0x48000800

08001738 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001738:	b590      	push	{r4, r7, lr}
 800173a:	b089      	sub	sp, #36	@ 0x24
 800173c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800173e:	f001 f850 	bl	80027e2 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001742:	f000 f84d 	bl	80017e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001746:	f7ff ff1b 	bl	8001580 <MX_GPIO_Init>
  MX_DAC1_Init();
 800174a:	f7ff fe9f 	bl	800148c <MX_DAC1_Init>
  MX_SPI1_Init();
 800174e:	f000 f89d 	bl	800188c <MX_SPI1_Init>
  MX_SPI2_Init();
 8001752:	f000 f8d9 	bl	8001908 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8001756:	f000 fd55 	bl	8002204 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800175a:	f000 fd87 	bl	800226c <MX_USART2_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800175e:	f000 ff4d 	bl	80025fc <MX_USB_OTG_FS_PCD_Init>
  MX_USART3_UART_Init();
 8001762:	f000 fdb3 	bl	80022cc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4,GPIO_PIN_SET);
 8001766:	2201      	movs	r2, #1
 8001768:	2110      	movs	r1, #16
 800176a:	4818      	ldr	r0, [pc, #96]	@ (80017cc <main+0x94>)
 800176c:	f001 fd3e 	bl	80031ec <HAL_GPIO_WritePin>

	const char startMessage[] = "\r\nStarting...\r\n";
 8001770:	4b17      	ldr	r3, [pc, #92]	@ (80017d0 <main+0x98>)
 8001772:	f107 0410 	add.w	r4, r7, #16
 8001776:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001778:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	const char initDoneMessage[] = "\r\nInit Done\r\n\n";
 800177c:	4b15      	ldr	r3, [pc, #84]	@ (80017d4 <main+0x9c>)
 800177e:	463c      	mov	r4, r7
 8001780:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001782:	c407      	stmia	r4!, {r0, r1, r2}
 8001784:	8023      	strh	r3, [r4, #0]
 8001786:	3402      	adds	r4, #2
 8001788:	0c1b      	lsrs	r3, r3, #16
 800178a:	7023      	strb	r3, [r4, #0]

	HAL_UART_Transmit(&huart1, (uint8_t *)startMessage, sizeof(startMessage), 10);
 800178c:	f107 0110 	add.w	r1, r7, #16
 8001790:	230a      	movs	r3, #10
 8001792:	2210      	movs	r2, #16
 8001794:	4810      	ldr	r0, [pc, #64]	@ (80017d8 <main+0xa0>)
 8001796:	f003 fb10 	bl	8004dba <HAL_UART_Transmit>
	GNSSCom_Init(&huart3,&huart1);
 800179a:	490f      	ldr	r1, [pc, #60]	@ (80017d8 <main+0xa0>)
 800179c:	480f      	ldr	r0, [pc, #60]	@ (80017dc <main+0xa4>)
 800179e:	f7ff fb8b 	bl	8000eb8 <GNSSCom_Init>
	HAL_UART_Transmit(&huart1, (uint8_t *)initDoneMessage, sizeof(initDoneMessage), 10);
 80017a2:	4639      	mov	r1, r7
 80017a4:	230a      	movs	r3, #10
 80017a6:	220f      	movs	r2, #15
 80017a8:	480b      	ldr	r0, [pc, #44]	@ (80017d8 <main+0xa0>)
 80017aa:	f003 fb06 	bl	8004dba <HAL_UART_Transmit>


	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_5);
 80017ae:	2110      	movs	r1, #16
 80017b0:	4806      	ldr	r0, [pc, #24]	@ (80017cc <main+0x94>)
 80017b2:	f001 fd33 	bl	800321c <HAL_GPIO_TogglePin>
 80017b6:	2120      	movs	r1, #32
 80017b8:	4804      	ldr	r0, [pc, #16]	@ (80017cc <main+0x94>)
 80017ba:	f001 fd2f 	bl	800321c <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 80017be:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017c2:	f001 f883 	bl	80028cc <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80017c6:	bf00      	nop
 80017c8:	e7fd      	b.n	80017c6 <main+0x8e>
 80017ca:	bf00      	nop
 80017cc:	48001000 	.word	0x48001000
 80017d0:	080097c4 	.word	0x080097c4
 80017d4:	080097d4 	.word	0x080097d4
 80017d8:	2000095c 	.word	0x2000095c
 80017dc:	20000a6c 	.word	0x20000a6c

080017e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b096      	sub	sp, #88	@ 0x58
 80017e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017e6:	f107 0314 	add.w	r3, r7, #20
 80017ea:	2244      	movs	r2, #68	@ 0x44
 80017ec:	2100      	movs	r1, #0
 80017ee:	4618      	mov	r0, r3
 80017f0:	f005 ff65 	bl	80076be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017f4:	463b      	mov	r3, r7
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	605a      	str	r2, [r3, #4]
 80017fc:	609a      	str	r2, [r3, #8]
 80017fe:	60da      	str	r2, [r3, #12]
 8001800:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001802:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001806:	f001 fe79 	bl	80034fc <HAL_PWREx_ControlVoltageScaling>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001810:	f000 f835 	bl	800187e <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001814:	2301      	movs	r3, #1
 8001816:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001818:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800181c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800181e:	2302      	movs	r3, #2
 8001820:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001822:	2303      	movs	r3, #3
 8001824:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001826:	2302      	movs	r3, #2
 8001828:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800182a:	230a      	movs	r3, #10
 800182c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800182e:	2302      	movs	r3, #2
 8001830:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001832:	2302      	movs	r3, #2
 8001834:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001836:	2302      	movs	r3, #2
 8001838:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800183a:	f107 0314 	add.w	r3, r7, #20
 800183e:	4618      	mov	r0, r3
 8001840:	f001 fec2 	bl	80035c8 <HAL_RCC_OscConfig>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800184a:	f000 f818 	bl	800187e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800184e:	230f      	movs	r3, #15
 8001850:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001852:	2303      	movs	r3, #3
 8001854:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001856:	2300      	movs	r3, #0
 8001858:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800185a:	2300      	movs	r3, #0
 800185c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800185e:	2300      	movs	r3, #0
 8001860:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001862:	463b      	mov	r3, r7
 8001864:	2104      	movs	r1, #4
 8001866:	4618      	mov	r0, r3
 8001868:	f002 fac8 	bl	8003dfc <HAL_RCC_ClockConfig>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001872:	f000 f804 	bl	800187e <Error_Handler>
  }
}
 8001876:	bf00      	nop
 8001878:	3758      	adds	r7, #88	@ 0x58
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001882:	b672      	cpsid	i
}
 8001884:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001886:	bf00      	nop
 8001888:	e7fd      	b.n	8001886 <Error_Handler+0x8>
	...

0800188c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001890:	4b1b      	ldr	r3, [pc, #108]	@ (8001900 <MX_SPI1_Init+0x74>)
 8001892:	4a1c      	ldr	r2, [pc, #112]	@ (8001904 <MX_SPI1_Init+0x78>)
 8001894:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001896:	4b1a      	ldr	r3, [pc, #104]	@ (8001900 <MX_SPI1_Init+0x74>)
 8001898:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800189c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800189e:	4b18      	ldr	r3, [pc, #96]	@ (8001900 <MX_SPI1_Init+0x74>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80018a4:	4b16      	ldr	r3, [pc, #88]	@ (8001900 <MX_SPI1_Init+0x74>)
 80018a6:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80018aa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018ac:	4b14      	ldr	r3, [pc, #80]	@ (8001900 <MX_SPI1_Init+0x74>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018b2:	4b13      	ldr	r3, [pc, #76]	@ (8001900 <MX_SPI1_Init+0x74>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80018b8:	4b11      	ldr	r3, [pc, #68]	@ (8001900 <MX_SPI1_Init+0x74>)
 80018ba:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80018be:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80018c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001900 <MX_SPI1_Init+0x74>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001900 <MX_SPI1_Init+0x74>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001900 <MX_SPI1_Init+0x74>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001900 <MX_SPI1_Init+0x74>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80018d8:	4b09      	ldr	r3, [pc, #36]	@ (8001900 <MX_SPI1_Init+0x74>)
 80018da:	2207      	movs	r2, #7
 80018dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80018de:	4b08      	ldr	r3, [pc, #32]	@ (8001900 <MX_SPI1_Init+0x74>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80018e4:	4b06      	ldr	r3, [pc, #24]	@ (8001900 <MX_SPI1_Init+0x74>)
 80018e6:	2208      	movs	r2, #8
 80018e8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018ea:	4805      	ldr	r0, [pc, #20]	@ (8001900 <MX_SPI1_Init+0x74>)
 80018ec:	f003 f974 	bl	8004bd8 <HAL_SPI_Init>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80018f6:	f7ff ffc2 	bl	800187e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	200006fc 	.word	0x200006fc
 8001904:	40013000 	.word	0x40013000

08001908 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800190c:	4b1b      	ldr	r3, [pc, #108]	@ (800197c <MX_SPI2_Init+0x74>)
 800190e:	4a1c      	ldr	r2, [pc, #112]	@ (8001980 <MX_SPI2_Init+0x78>)
 8001910:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001912:	4b1a      	ldr	r3, [pc, #104]	@ (800197c <MX_SPI2_Init+0x74>)
 8001914:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001918:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800191a:	4b18      	ldr	r3, [pc, #96]	@ (800197c <MX_SPI2_Init+0x74>)
 800191c:	2200      	movs	r2, #0
 800191e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001920:	4b16      	ldr	r3, [pc, #88]	@ (800197c <MX_SPI2_Init+0x74>)
 8001922:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001926:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001928:	4b14      	ldr	r3, [pc, #80]	@ (800197c <MX_SPI2_Init+0x74>)
 800192a:	2200      	movs	r2, #0
 800192c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800192e:	4b13      	ldr	r3, [pc, #76]	@ (800197c <MX_SPI2_Init+0x74>)
 8001930:	2200      	movs	r2, #0
 8001932:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001934:	4b11      	ldr	r3, [pc, #68]	@ (800197c <MX_SPI2_Init+0x74>)
 8001936:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800193a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800193c:	4b0f      	ldr	r3, [pc, #60]	@ (800197c <MX_SPI2_Init+0x74>)
 800193e:	2200      	movs	r2, #0
 8001940:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001942:	4b0e      	ldr	r3, [pc, #56]	@ (800197c <MX_SPI2_Init+0x74>)
 8001944:	2200      	movs	r2, #0
 8001946:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001948:	4b0c      	ldr	r3, [pc, #48]	@ (800197c <MX_SPI2_Init+0x74>)
 800194a:	2200      	movs	r2, #0
 800194c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800194e:	4b0b      	ldr	r3, [pc, #44]	@ (800197c <MX_SPI2_Init+0x74>)
 8001950:	2200      	movs	r2, #0
 8001952:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001954:	4b09      	ldr	r3, [pc, #36]	@ (800197c <MX_SPI2_Init+0x74>)
 8001956:	2207      	movs	r2, #7
 8001958:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800195a:	4b08      	ldr	r3, [pc, #32]	@ (800197c <MX_SPI2_Init+0x74>)
 800195c:	2200      	movs	r2, #0
 800195e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001960:	4b06      	ldr	r3, [pc, #24]	@ (800197c <MX_SPI2_Init+0x74>)
 8001962:	2208      	movs	r2, #8
 8001964:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001966:	4805      	ldr	r0, [pc, #20]	@ (800197c <MX_SPI2_Init+0x74>)
 8001968:	f003 f936 	bl	8004bd8 <HAL_SPI_Init>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001972:	f7ff ff84 	bl	800187e <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	20000760 	.word	0x20000760
 8001980:	40003800 	.word	0x40003800

08001984 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b08c      	sub	sp, #48	@ 0x30
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198c:	f107 031c 	add.w	r3, r7, #28
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	60da      	str	r2, [r3, #12]
 800199a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a2e      	ldr	r2, [pc, #184]	@ (8001a5c <HAL_SPI_MspInit+0xd8>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d129      	bne.n	80019fa <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019a6:	4b2e      	ldr	r3, [pc, #184]	@ (8001a60 <HAL_SPI_MspInit+0xdc>)
 80019a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019aa:	4a2d      	ldr	r2, [pc, #180]	@ (8001a60 <HAL_SPI_MspInit+0xdc>)
 80019ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80019b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80019b2:	4b2b      	ldr	r3, [pc, #172]	@ (8001a60 <HAL_SPI_MspInit+0xdc>)
 80019b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019ba:	61bb      	str	r3, [r7, #24]
 80019bc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80019be:	4b28      	ldr	r3, [pc, #160]	@ (8001a60 <HAL_SPI_MspInit+0xdc>)
 80019c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019c2:	4a27      	ldr	r2, [pc, #156]	@ (8001a60 <HAL_SPI_MspInit+0xdc>)
 80019c4:	f043 0310 	orr.w	r3, r3, #16
 80019c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019ca:	4b25      	ldr	r3, [pc, #148]	@ (8001a60 <HAL_SPI_MspInit+0xdc>)
 80019cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ce:	f003 0310 	and.w	r3, r3, #16
 80019d2:	617b      	str	r3, [r7, #20]
 80019d4:	697b      	ldr	r3, [r7, #20]
    PE12     ------> SPI1_NSS
    PE13     ------> SPI1_SCK
    PE14     ------> SPI1_MISO
    PE15     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = PROC_nCS_Pin|PROC_SCLK_Pin|PROC_MISO_Pin|PROC_MOSI_Pin;
 80019d6:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80019da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019dc:	2302      	movs	r3, #2
 80019de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e4:	2303      	movs	r3, #3
 80019e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019e8:	2305      	movs	r3, #5
 80019ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019ec:	f107 031c 	add.w	r3, r7, #28
 80019f0:	4619      	mov	r1, r3
 80019f2:	481c      	ldr	r0, [pc, #112]	@ (8001a64 <HAL_SPI_MspInit+0xe0>)
 80019f4:	f001 fa68 	bl	8002ec8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80019f8:	e02c      	b.n	8001a54 <HAL_SPI_MspInit+0xd0>
  else if(spiHandle->Instance==SPI2)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a1a      	ldr	r2, [pc, #104]	@ (8001a68 <HAL_SPI_MspInit+0xe4>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d127      	bne.n	8001a54 <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a04:	4b16      	ldr	r3, [pc, #88]	@ (8001a60 <HAL_SPI_MspInit+0xdc>)
 8001a06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a08:	4a15      	ldr	r2, [pc, #84]	@ (8001a60 <HAL_SPI_MspInit+0xdc>)
 8001a0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a10:	4b13      	ldr	r3, [pc, #76]	@ (8001a60 <HAL_SPI_MspInit+0xdc>)
 8001a12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a18:	613b      	str	r3, [r7, #16]
 8001a1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a1c:	4b10      	ldr	r3, [pc, #64]	@ (8001a60 <HAL_SPI_MspInit+0xdc>)
 8001a1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a20:	4a0f      	ldr	r2, [pc, #60]	@ (8001a60 <HAL_SPI_MspInit+0xdc>)
 8001a22:	f043 0308 	orr.w	r3, r3, #8
 8001a26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a28:	4b0d      	ldr	r3, [pc, #52]	@ (8001a60 <HAL_SPI_MspInit+0xdc>)
 8001a2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a2c:	f003 0308 	and.w	r3, r3, #8
 8001a30:	60fb      	str	r3, [r7, #12]
 8001a32:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RFM_SPI_nCS_Pin|RFM_SPI_SCK_Pin|RFM_SPI_MISO_Pin|RFM_SPI_MOSI_Pin;
 8001a34:	231b      	movs	r3, #27
 8001a36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a40:	2303      	movs	r3, #3
 8001a42:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a44:	2305      	movs	r3, #5
 8001a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a48:	f107 031c 	add.w	r3, r7, #28
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4807      	ldr	r0, [pc, #28]	@ (8001a6c <HAL_SPI_MspInit+0xe8>)
 8001a50:	f001 fa3a 	bl	8002ec8 <HAL_GPIO_Init>
}
 8001a54:	bf00      	nop
 8001a56:	3730      	adds	r7, #48	@ 0x30
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40013000 	.word	0x40013000
 8001a60:	40021000 	.word	0x40021000
 8001a64:	48001000 	.word	0x48001000
 8001a68:	40003800 	.word	0x40003800
 8001a6c:	48000c00 	.word	0x48000c00

08001a70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a76:	4b0f      	ldr	r3, [pc, #60]	@ (8001ab4 <HAL_MspInit+0x44>)
 8001a78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a7a:	4a0e      	ldr	r2, [pc, #56]	@ (8001ab4 <HAL_MspInit+0x44>)
 8001a7c:	f043 0301 	orr.w	r3, r3, #1
 8001a80:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a82:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab4 <HAL_MspInit+0x44>)
 8001a84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	607b      	str	r3, [r7, #4]
 8001a8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a8e:	4b09      	ldr	r3, [pc, #36]	@ (8001ab4 <HAL_MspInit+0x44>)
 8001a90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a92:	4a08      	ldr	r2, [pc, #32]	@ (8001ab4 <HAL_MspInit+0x44>)
 8001a94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a98:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a9a:	4b06      	ldr	r3, [pc, #24]	@ (8001ab4 <HAL_MspInit+0x44>)
 8001a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aa2:	603b      	str	r3, [r7, #0]
 8001aa4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	40021000 	.word	0x40021000

08001ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001abc:	bf00      	nop
 8001abe:	e7fd      	b.n	8001abc <NMI_Handler+0x4>

08001ac0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ac4:	bf00      	nop
 8001ac6:	e7fd      	b.n	8001ac4 <HardFault_Handler+0x4>

08001ac8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001acc:	bf00      	nop
 8001ace:	e7fd      	b.n	8001acc <MemManage_Handler+0x4>

08001ad0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ad4:	bf00      	nop
 8001ad6:	e7fd      	b.n	8001ad4 <BusFault_Handler+0x4>

08001ad8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001adc:	bf00      	nop
 8001ade:	e7fd      	b.n	8001adc <UsageFault_Handler+0x4>

08001ae0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ae4:	bf00      	nop
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aee:	b480      	push	{r7}
 8001af0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b00:	bf00      	nop
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b0e:	f000 febd 	bl	800288c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
	...

08001b18 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b1c:	4802      	ldr	r0, [pc, #8]	@ (8001b28 <USART1_IRQHandler+0x10>)
 8001b1e:	f003 fa21 	bl	8004f64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	2000095c 	.word	0x2000095c

08001b2c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b30:	4802      	ldr	r0, [pc, #8]	@ (8001b3c <USART2_IRQHandler+0x10>)
 8001b32:	f003 fa17 	bl	8004f64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	200009e4 	.word	0x200009e4

08001b40 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001b44:	4802      	ldr	r0, [pc, #8]	@ (8001b50 <USART3_IRQHandler+0x10>)
 8001b46:	f003 fa0d 	bl	8004f64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	20000a6c 	.word	0x20000a6c

08001b54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  return 1;
 8001b58:	2301      	movs	r3, #1
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <_kill>:

int _kill(int pid, int sig)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b6e:	f005 fe1b 	bl	80077a8 <__errno>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2216      	movs	r2, #22
 8001b76:	601a      	str	r2, [r3, #0]
  return -1;
 8001b78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <_exit>:

void _exit (int status)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f7ff ffe7 	bl	8001b64 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b96:	bf00      	nop
 8001b98:	e7fd      	b.n	8001b96 <_exit+0x12>

08001b9a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b086      	sub	sp, #24
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	60f8      	str	r0, [r7, #12]
 8001ba2:	60b9      	str	r1, [r7, #8]
 8001ba4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	617b      	str	r3, [r7, #20]
 8001baa:	e00a      	b.n	8001bc2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bac:	f3af 8000 	nop.w
 8001bb0:	4601      	mov	r1, r0
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	1c5a      	adds	r2, r3, #1
 8001bb6:	60ba      	str	r2, [r7, #8]
 8001bb8:	b2ca      	uxtb	r2, r1
 8001bba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	617b      	str	r3, [r7, #20]
 8001bc2:	697a      	ldr	r2, [r7, #20]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	dbf0      	blt.n	8001bac <_read+0x12>
  }

  return len;
 8001bca:	687b      	ldr	r3, [r7, #4]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3718      	adds	r7, #24
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be0:	2300      	movs	r3, #0
 8001be2:	617b      	str	r3, [r7, #20]
 8001be4:	e009      	b.n	8001bfa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	1c5a      	adds	r2, r3, #1
 8001bea:	60ba      	str	r2, [r7, #8]
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	617b      	str	r3, [r7, #20]
 8001bfa:	697a      	ldr	r2, [r7, #20]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	dbf1      	blt.n	8001be6 <_write+0x12>
  }
  return len;
 8001c02:	687b      	ldr	r3, [r7, #4]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3718      	adds	r7, #24
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <_close>:

int _close(int file)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c34:	605a      	str	r2, [r3, #4]
  return 0;
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <_isatty>:

int _isatty(int file)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c4c:	2301      	movs	r3, #1
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr

08001c5a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b085      	sub	sp, #20
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	60f8      	str	r0, [r7, #12]
 8001c62:	60b9      	str	r1, [r7, #8]
 8001c64:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c66:	2300      	movs	r3, #0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3714      	adds	r7, #20
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c7c:	4a14      	ldr	r2, [pc, #80]	@ (8001cd0 <_sbrk+0x5c>)
 8001c7e:	4b15      	ldr	r3, [pc, #84]	@ (8001cd4 <_sbrk+0x60>)
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c88:	4b13      	ldr	r3, [pc, #76]	@ (8001cd8 <_sbrk+0x64>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d102      	bne.n	8001c96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c90:	4b11      	ldr	r3, [pc, #68]	@ (8001cd8 <_sbrk+0x64>)
 8001c92:	4a12      	ldr	r2, [pc, #72]	@ (8001cdc <_sbrk+0x68>)
 8001c94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c96:	4b10      	ldr	r3, [pc, #64]	@ (8001cd8 <_sbrk+0x64>)
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d207      	bcs.n	8001cb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ca4:	f005 fd80 	bl	80077a8 <__errno>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	220c      	movs	r2, #12
 8001cac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cae:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb2:	e009      	b.n	8001cc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cb4:	4b08      	ldr	r3, [pc, #32]	@ (8001cd8 <_sbrk+0x64>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cba:	4b07      	ldr	r3, [pc, #28]	@ (8001cd8 <_sbrk+0x64>)
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	4a05      	ldr	r2, [pc, #20]	@ (8001cd8 <_sbrk+0x64>)
 8001cc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3718      	adds	r7, #24
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	20050000 	.word	0x20050000
 8001cd4:	00000400 	.word	0x00000400
 8001cd8:	200007c4 	.word	0x200007c4
 8001cdc:	20001150 	.word	0x20001150

08001ce0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ce4:	4b06      	ldr	r3, [pc, #24]	@ (8001d00 <SystemInit+0x20>)
 8001ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cea:	4a05      	ldr	r2, [pc, #20]	@ (8001d00 <SystemInit+0x20>)
 8001cec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001cf0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001cf4:	bf00      	nop
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <debug_UBX_NAV_TIMEUTC>:
 */

#include "traductor.h"


void debug_UBX_NAV_TIMEUTC(UBXMessage_parsed* UBXMessage,UBX_NAV_TIMEUTC *structAssociate){
 8001d04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d08:	b093      	sub	sp, #76	@ 0x4c
 8001d0a:	af08      	add	r7, sp, #32
 8001d0c:	61f8      	str	r0, [r7, #28]
 8001d0e:	61b9      	str	r1, [r7, #24]
	size_t offset = 0;
 8001d10:	2300      	movs	r3, #0
 8001d12:	627b      	str	r3, [r7, #36]	@ 0x24
	ITM_Port32(31)=21;
 8001d14:	4b71      	ldr	r3, [pc, #452]	@ (8001edc <debug_UBX_NAV_TIMEUTC+0x1d8>)
 8001d16:	2215      	movs	r2, #21
 8001d18:	601a      	str	r2, [r3, #0]
	memcpy(&(structAssociate->iTOW), UBXMessage->load + offset, sizeof(structAssociate->iTOW));
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	69fa      	ldr	r2, [r7, #28]
 8001d1e:	1d11      	adds	r1, r2, #4
 8001d20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d22:	440a      	add	r2, r1
 8001d24:	6812      	ldr	r2, [r2, #0]
 8001d26:	601a      	str	r2, [r3, #0]
	offset += sizeof(structAssociate->iTOW);
 8001d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d2a:	3304      	adds	r3, #4
 8001d2c:	627b      	str	r3, [r7, #36]	@ 0x24

	memcpy(&(structAssociate->tAcc), UBXMessage->load + offset, sizeof(structAssociate->tAcc));
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	3304      	adds	r3, #4
 8001d32:	69fa      	ldr	r2, [r7, #28]
 8001d34:	1d11      	adds	r1, r2, #4
 8001d36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d38:	440a      	add	r2, r1
 8001d3a:	6812      	ldr	r2, [r2, #0]
 8001d3c:	601a      	str	r2, [r3, #0]
	offset += sizeof(structAssociate->tAcc);
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d40:	3304      	adds	r3, #4
 8001d42:	627b      	str	r3, [r7, #36]	@ 0x24

	memcpy(&(structAssociate->nano), UBXMessage->load + offset, sizeof(structAssociate->nano));
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	3308      	adds	r3, #8
 8001d48:	69fa      	ldr	r2, [r7, #28]
 8001d4a:	1d11      	adds	r1, r2, #4
 8001d4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d4e:	440a      	add	r2, r1
 8001d50:	6812      	ldr	r2, [r2, #0]
 8001d52:	601a      	str	r2, [r3, #0]
	offset += sizeof(structAssociate->nano);
 8001d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d56:	3304      	adds	r3, #4
 8001d58:	627b      	str	r3, [r7, #36]	@ 0x24

	memcpy(&(structAssociate->year), UBXMessage->load + offset, sizeof(structAssociate->year));
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	330c      	adds	r3, #12
 8001d5e:	69fa      	ldr	r2, [r7, #28]
 8001d60:	1d11      	adds	r1, r2, #4
 8001d62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d64:	440a      	add	r2, r1
 8001d66:	8812      	ldrh	r2, [r2, #0]
 8001d68:	b292      	uxth	r2, r2
 8001d6a:	801a      	strh	r2, [r3, #0]
	offset += sizeof(structAssociate->year);
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d6e:	3302      	adds	r3, #2
 8001d70:	627b      	str	r3, [r7, #36]	@ 0x24

	memcpy(&(structAssociate->month), UBXMessage->load + offset, sizeof(structAssociate->month));
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	330e      	adds	r3, #14
 8001d76:	69fa      	ldr	r2, [r7, #28]
 8001d78:	1d11      	adds	r1, r2, #4
 8001d7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d7c:	440a      	add	r2, r1
 8001d7e:	7812      	ldrb	r2, [r2, #0]
 8001d80:	701a      	strb	r2, [r3, #0]
	offset += sizeof(structAssociate->month);
 8001d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d84:	3301      	adds	r3, #1
 8001d86:	627b      	str	r3, [r7, #36]	@ 0x24

	memcpy(&(structAssociate->day), UBXMessage->load + offset, sizeof(structAssociate->day));
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	330f      	adds	r3, #15
 8001d8c:	69fa      	ldr	r2, [r7, #28]
 8001d8e:	1d11      	adds	r1, r2, #4
 8001d90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d92:	440a      	add	r2, r1
 8001d94:	7812      	ldrb	r2, [r2, #0]
 8001d96:	701a      	strb	r2, [r3, #0]
	offset += sizeof(structAssociate->day);
 8001d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	627b      	str	r3, [r7, #36]	@ 0x24

	memcpy(&(structAssociate->hour), UBXMessage->load + offset, sizeof(structAssociate->hour));
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	3310      	adds	r3, #16
 8001da2:	69fa      	ldr	r2, [r7, #28]
 8001da4:	1d11      	adds	r1, r2, #4
 8001da6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001da8:	440a      	add	r2, r1
 8001daa:	7812      	ldrb	r2, [r2, #0]
 8001dac:	701a      	strb	r2, [r3, #0]
	offset += sizeof(structAssociate->hour);
 8001dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db0:	3301      	adds	r3, #1
 8001db2:	627b      	str	r3, [r7, #36]	@ 0x24

	memcpy(&(structAssociate->min), UBXMessage->load + offset, sizeof(structAssociate->min));
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	3311      	adds	r3, #17
 8001db8:	69fa      	ldr	r2, [r7, #28]
 8001dba:	1d11      	adds	r1, r2, #4
 8001dbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dbe:	440a      	add	r2, r1
 8001dc0:	7812      	ldrb	r2, [r2, #0]
 8001dc2:	701a      	strb	r2, [r3, #0]
	offset += sizeof(structAssociate->min);
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	627b      	str	r3, [r7, #36]	@ 0x24

	memcpy(&(structAssociate->sec), UBXMessage->load + offset, sizeof(structAssociate->sec));
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	3312      	adds	r3, #18
 8001dce:	69fa      	ldr	r2, [r7, #28]
 8001dd0:	1d11      	adds	r1, r2, #4
 8001dd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dd4:	440a      	add	r2, r1
 8001dd6:	7812      	ldrb	r2, [r2, #0]
 8001dd8:	701a      	strb	r2, [r3, #0]
	offset += sizeof(structAssociate->sec);
 8001dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ddc:	3301      	adds	r3, #1
 8001dde:	627b      	str	r3, [r7, #36]	@ 0x24

	memcpy(&(structAssociate->valid), UBXMessage->load + offset, sizeof(structAssociate->valid));
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	3313      	adds	r3, #19
 8001de4:	69fa      	ldr	r2, [r7, #28]
 8001de6:	1d11      	adds	r1, r2, #4
 8001de8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dea:	440a      	add	r2, r1
 8001dec:	7812      	ldrb	r2, [r2, #0]
 8001dee:	701a      	strb	r2, [r3, #0]
	offset += sizeof(structAssociate->valid);
 8001df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df2:	3301      	adds	r3, #1
 8001df4:	627b      	str	r3, [r7, #36]	@ 0x24

	int len =sprintf(UBXMessage->bufferDebug,
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	f103 05cc 	add.w	r5, r3, #204	@ 0xcc
			"tAcc: %u\r\n"
			"nano: %d\r\n"
			"Date[YYYY-MM-DD]: %u-%u-%u\r\n"
			"Time[HH:MM:SS]: %u:%u:%u\r\n"
			"valid: %u\r\n",
			bytes_to_endian(structAssociate->iTOW,sizeof(structAssociate->iTOW),'l'),
 8001dfc:	69bb      	ldr	r3, [r7, #24]
	int len =sprintf(UBXMessage->bufferDebug,
 8001dfe:	226c      	movs	r2, #108	@ 0x6c
 8001e00:	2104      	movs	r1, #4
 8001e02:	4618      	mov	r0, r3
 8001e04:	f000 f938 	bl	8002078 <bytes_to_endian>
 8001e08:	4680      	mov	r8, r0
			bytes_to_endian(structAssociate->tAcc,sizeof(structAssociate->tAcc),'l'),
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	3304      	adds	r3, #4
	int len =sprintf(UBXMessage->bufferDebug,
 8001e0e:	226c      	movs	r2, #108	@ 0x6c
 8001e10:	2104      	movs	r1, #4
 8001e12:	4618      	mov	r0, r3
 8001e14:	f000 f930 	bl	8002078 <bytes_to_endian>
 8001e18:	4681      	mov	r9, r0
			bytes_to_endian(structAssociate->nano,sizeof(structAssociate->nano),'l'),
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	3308      	adds	r3, #8
	int len =sprintf(UBXMessage->bufferDebug,
 8001e1e:	226c      	movs	r2, #108	@ 0x6c
 8001e20:	2104      	movs	r1, #4
 8001e22:	4618      	mov	r0, r3
 8001e24:	f000 f928 	bl	8002078 <bytes_to_endian>
 8001e28:	4606      	mov	r6, r0
			bytes_to_endian(structAssociate->year,sizeof(structAssociate->year),'l'),
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	330c      	adds	r3, #12
	int len =sprintf(UBXMessage->bufferDebug,
 8001e2e:	226c      	movs	r2, #108	@ 0x6c
 8001e30:	2102      	movs	r1, #2
 8001e32:	4618      	mov	r0, r3
 8001e34:	f000 f920 	bl	8002078 <bytes_to_endian>
 8001e38:	6178      	str	r0, [r7, #20]
			bytes_to_endian(structAssociate->month,sizeof(structAssociate->month),'l'),
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	330e      	adds	r3, #14
	int len =sprintf(UBXMessage->bufferDebug,
 8001e3e:	226c      	movs	r2, #108	@ 0x6c
 8001e40:	2101      	movs	r1, #1
 8001e42:	4618      	mov	r0, r3
 8001e44:	f000 f918 	bl	8002078 <bytes_to_endian>
 8001e48:	6138      	str	r0, [r7, #16]
			bytes_to_endian(structAssociate->day,sizeof(structAssociate->day),'l'),
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	330f      	adds	r3, #15
	int len =sprintf(UBXMessage->bufferDebug,
 8001e4e:	226c      	movs	r2, #108	@ 0x6c
 8001e50:	2101      	movs	r1, #1
 8001e52:	4618      	mov	r0, r3
 8001e54:	f000 f910 	bl	8002078 <bytes_to_endian>
 8001e58:	60f8      	str	r0, [r7, #12]
			bytes_to_endian(structAssociate->hour,sizeof(structAssociate->hour),'l'),
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	3310      	adds	r3, #16
	int len =sprintf(UBXMessage->bufferDebug,
 8001e5e:	226c      	movs	r2, #108	@ 0x6c
 8001e60:	2101      	movs	r1, #1
 8001e62:	4618      	mov	r0, r3
 8001e64:	f000 f908 	bl	8002078 <bytes_to_endian>
 8001e68:	60b8      	str	r0, [r7, #8]
			bytes_to_endian(structAssociate->min,sizeof(structAssociate->min),'l'),
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	3311      	adds	r3, #17
	int len =sprintf(UBXMessage->bufferDebug,
 8001e6e:	226c      	movs	r2, #108	@ 0x6c
 8001e70:	2101      	movs	r1, #1
 8001e72:	4618      	mov	r0, r3
 8001e74:	f000 f900 	bl	8002078 <bytes_to_endian>
 8001e78:	6078      	str	r0, [r7, #4]
			bytes_to_endian(structAssociate->sec,sizeof(structAssociate->sec),'l'),
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	3312      	adds	r3, #18
	int len =sprintf(UBXMessage->bufferDebug,
 8001e7e:	226c      	movs	r2, #108	@ 0x6c
 8001e80:	2101      	movs	r1, #1
 8001e82:	4618      	mov	r0, r3
 8001e84:	f000 f8f8 	bl	8002078 <bytes_to_endian>
 8001e88:	4604      	mov	r4, r0
			bytes_to_endian(structAssociate->valid,sizeof(structAssociate->valid),'b')
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	3313      	adds	r3, #19
	int len =sprintf(UBXMessage->bufferDebug,
 8001e8e:	2262      	movs	r2, #98	@ 0x62
 8001e90:	2101      	movs	r1, #1
 8001e92:	4618      	mov	r0, r3
 8001e94:	f000 f8f0 	bl	8002078 <bytes_to_endian>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	9307      	str	r3, [sp, #28]
 8001e9c:	9406      	str	r4, [sp, #24]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	9305      	str	r3, [sp, #20]
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	9304      	str	r3, [sp, #16]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	9303      	str	r3, [sp, #12]
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	9302      	str	r3, [sp, #8]
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	9301      	str	r3, [sp, #4]
 8001eb2:	9600      	str	r6, [sp, #0]
 8001eb4:	464b      	mov	r3, r9
 8001eb6:	4642      	mov	r2, r8
 8001eb8:	4909      	ldr	r1, [pc, #36]	@ (8001ee0 <debug_UBX_NAV_TIMEUTC+0x1dc>)
 8001eba:	4628      	mov	r0, r5
 8001ebc:	f005 fb9c 	bl	80075f8 <siprintf>
 8001ec0:	6238      	str	r0, [r7, #32]
	);
	fill_unuse_memory(UBXMessage,len);
 8001ec2:	6a39      	ldr	r1, [r7, #32]
 8001ec4:	69f8      	ldr	r0, [r7, #28]
 8001ec6:	f000 f959 	bl	800217c <fill_unuse_memory>
	ITM_Port32(31)=20;
 8001eca:	4b04      	ldr	r3, [pc, #16]	@ (8001edc <debug_UBX_NAV_TIMEUTC+0x1d8>)
 8001ecc:	2214      	movs	r2, #20
 8001ece:	601a      	str	r2, [r3, #0]
}
 8001ed0:	bf00      	nop
 8001ed2:	372c      	adds	r7, #44	@ 0x2c
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001eda:	bf00      	nop
 8001edc:	e000007c 	.word	0xe000007c
 8001ee0:	080097e4 	.word	0x080097e4

08001ee4 <debug_SetVal>:

void debug_SetVal(UBXMessage_parsed* UBXMessage,UBX_CFG_SETVAL* structAssociate){
 8001ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ee6:	b087      	sub	sp, #28
 8001ee8:	af02      	add	r7, sp, #8
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]

	size_t offset = 0;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60fb      	str	r3, [r7, #12]

	memcpy(&(structAssociate->version), UBXMessage->load + offset, sizeof(structAssociate->version));
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	1d11      	adds	r1, r2, #4
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	440a      	add	r2, r1
 8001efc:	7812      	ldrb	r2, [r2, #0]
 8001efe:	701a      	strb	r2, [r3, #0]
	offset += sizeof((structAssociate->version));
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	3301      	adds	r3, #1
 8001f04:	60fb      	str	r3, [r7, #12]

	memcpy(&(structAssociate->layers), UBXMessage->load + offset, sizeof(structAssociate->layers));
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	1d11      	adds	r1, r2, #4
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	440a      	add	r2, r1
 8001f12:	7812      	ldrb	r2, [r2, #0]
 8001f14:	701a      	strb	r2, [r3, #0]
	offset += sizeof((structAssociate->layers));
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	60fb      	str	r3, [r7, #12]

	offset += sizeof((structAssociate->reserved));
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	3302      	adds	r3, #2
 8001f20:	60fb      	str	r3, [r7, #12]

	memcpy(&(structAssociate->cfgData), UBXMessage->load + offset, sizeof(structAssociate->cfgData));
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	1d18      	adds	r0, r3, #4
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	1d1a      	adds	r2, r3, #4
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	22c8      	movs	r2, #200	@ 0xc8
 8001f30:	4619      	mov	r1, r3
 8001f32:	f005 fc66 	bl	8007802 <memcpy>
	offset += sizeof((structAssociate->cfgData));
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	33c8      	adds	r3, #200	@ 0xc8
 8001f3a:	60fb      	str	r3, [r7, #12]
	//Diviser ici en flag
	//

	int len = sprintf(UBXMessage->bufferDebug,
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f103 04cc 	add.w	r4, r3, #204	@ 0xcc
			"\r\n__debug_SetVal___\r\n"
			"version: %u\r\n"
			"layers: %u\r\n"
			"KeyId|Value: %s\r\n",
			bytes_to_endian(structAssociate->version,sizeof(structAssociate->version),'b'),
 8001f42:	683b      	ldr	r3, [r7, #0]
	int len = sprintf(UBXMessage->bufferDebug,
 8001f44:	2262      	movs	r2, #98	@ 0x62
 8001f46:	2101      	movs	r1, #1
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f000 f895 	bl	8002078 <bytes_to_endian>
 8001f4e:	4605      	mov	r5, r0
			bytes_to_endian(structAssociate->layers,sizeof(structAssociate->layers),'l'),
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	3301      	adds	r3, #1
	int len = sprintf(UBXMessage->bufferDebug,
 8001f54:	226c      	movs	r2, #108	@ 0x6c
 8001f56:	2101      	movs	r1, #1
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f000 f88d 	bl	8002078 <bytes_to_endian>
 8001f5e:	4606      	mov	r6, r0
			array_to_hex_string(structAssociate->cfgData,sizeof(structAssociate->cfgData))
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	3304      	adds	r3, #4
	int len = sprintf(UBXMessage->bufferDebug,
 8001f64:	21c8      	movs	r1, #200	@ 0xc8
 8001f66:	4618      	mov	r0, r3
 8001f68:	f000 f922 	bl	80021b0 <array_to_hex_string>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	9300      	str	r3, [sp, #0]
 8001f70:	4633      	mov	r3, r6
 8001f72:	462a      	mov	r2, r5
 8001f74:	4906      	ldr	r1, [pc, #24]	@ (8001f90 <debug_SetVal+0xac>)
 8001f76:	4620      	mov	r0, r4
 8001f78:	f005 fb3e 	bl	80075f8 <siprintf>
 8001f7c:	60b8      	str	r0, [r7, #8]
	);
	fill_unuse_memory(UBXMessage,len);
 8001f7e:	68b9      	ldr	r1, [r7, #8]
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f000 f8fb 	bl	800217c <fill_unuse_memory>
}
 8001f86:	bf00      	nop
 8001f88:	3714      	adds	r7, #20
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	08009864 	.word	0x08009864

08001f94 <debug_GetVal>:

void debug_GetVal(UBXMessage_parsed* UBXMessage,UBX_CFG_GETVAL* structAssociate){
 8001f94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f96:	b08b      	sub	sp, #44	@ 0x2c
 8001f98:	af04      	add	r7, sp, #16
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]

	size_t offset = 0;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	617b      	str	r3, [r7, #20]

	memcpy(&(structAssociate->version), UBXMessage->load + offset, sizeof(structAssociate->version));
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	1d11      	adds	r1, r2, #4
 8001fa8:	697a      	ldr	r2, [r7, #20]
 8001faa:	440a      	add	r2, r1
 8001fac:	7812      	ldrb	r2, [r2, #0]
 8001fae:	701a      	strb	r2, [r3, #0]
	offset += sizeof((structAssociate->version));
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	617b      	str	r3, [r7, #20]

	memcpy(&(structAssociate->layers), UBXMessage->load + offset, sizeof(structAssociate->layers));
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	1d11      	adds	r1, r2, #4
 8001fbe:	697a      	ldr	r2, [r7, #20]
 8001fc0:	440a      	add	r2, r1
 8001fc2:	7812      	ldrb	r2, [r2, #0]
 8001fc4:	701a      	strb	r2, [r3, #0]
	offset += sizeof((structAssociate->layers));
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	617b      	str	r3, [r7, #20]

	memcpy(&(structAssociate->position), UBXMessage->load + offset, sizeof(structAssociate->position));
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	3302      	adds	r3, #2
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	1d11      	adds	r1, r2, #4
 8001fd4:	697a      	ldr	r2, [r7, #20]
 8001fd6:	440a      	add	r2, r1
 8001fd8:	8812      	ldrh	r2, [r2, #0]
 8001fda:	b292      	uxth	r2, r2
 8001fdc:	801a      	strh	r2, [r3, #0]
	offset += sizeof((structAssociate->position));
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	3302      	adds	r3, #2
 8001fe2:	617b      	str	r3, [r7, #20]

	memcpy(&(structAssociate->keys), UBXMessage->load + offset, sizeof(structAssociate->keys));
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	1d18      	adds	r0, r3, #4
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	1d1a      	adds	r2, r3, #4
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	4413      	add	r3, r2
 8001ff0:	22c8      	movs	r2, #200	@ 0xc8
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	f005 fc05 	bl	8007802 <memcpy>
	offset += sizeof((structAssociate->keys));
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	33c8      	adds	r3, #200	@ 0xc8
 8001ffc:	617b      	str	r3, [r7, #20]
	//Diviser ici en flag
	//
	int len = sprintf(UBXMessage->bufferDebug,
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f103 04cc 	add.w	r4, r3, #204	@ 0xcc
			"\r\n___debug_GetVal___\r\n"
			"version: %u\r\n"
			"layers: %u\r\n",
			"position: %u\r\n",
			"keys: %u\r\n",
			bytes_to_endian(structAssociate->version,sizeof(structAssociate->version),'b'),
 8002004:	68bb      	ldr	r3, [r7, #8]
	int len = sprintf(UBXMessage->bufferDebug,
 8002006:	2262      	movs	r2, #98	@ 0x62
 8002008:	2101      	movs	r1, #1
 800200a:	4618      	mov	r0, r3
 800200c:	f000 f834 	bl	8002078 <bytes_to_endian>
 8002010:	4605      	mov	r5, r0
			bytes_to_endian(structAssociate->layers,sizeof(structAssociate->layers),'l'),
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	3301      	adds	r3, #1
	int len = sprintf(UBXMessage->bufferDebug,
 8002016:	226c      	movs	r2, #108	@ 0x6c
 8002018:	2101      	movs	r1, #1
 800201a:	4618      	mov	r0, r3
 800201c:	f000 f82c 	bl	8002078 <bytes_to_endian>
 8002020:	4606      	mov	r6, r0
			bytes_to_endian(structAssociate->position,sizeof(structAssociate->position),'l'),
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	3302      	adds	r3, #2
	int len = sprintf(UBXMessage->bufferDebug,
 8002026:	226c      	movs	r2, #108	@ 0x6c
 8002028:	2102      	movs	r1, #2
 800202a:	4618      	mov	r0, r3
 800202c:	f000 f824 	bl	8002078 <bytes_to_endian>
 8002030:	6078      	str	r0, [r7, #4]
			bytes_to_endian(structAssociate->keys,sizeof(structAssociate->keys),'l')
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	3304      	adds	r3, #4
	int len = sprintf(UBXMessage->bufferDebug,
 8002036:	226c      	movs	r2, #108	@ 0x6c
 8002038:	21c8      	movs	r1, #200	@ 0xc8
 800203a:	4618      	mov	r0, r3
 800203c:	f000 f81c 	bl	8002078 <bytes_to_endian>
 8002040:	4603      	mov	r3, r0
 8002042:	9303      	str	r3, [sp, #12]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	9302      	str	r3, [sp, #8]
 8002048:	9601      	str	r6, [sp, #4]
 800204a:	9500      	str	r5, [sp, #0]
 800204c:	4b07      	ldr	r3, [pc, #28]	@ (800206c <debug_GetVal+0xd8>)
 800204e:	4a08      	ldr	r2, [pc, #32]	@ (8002070 <debug_GetVal+0xdc>)
 8002050:	4908      	ldr	r1, [pc, #32]	@ (8002074 <debug_GetVal+0xe0>)
 8002052:	4620      	mov	r0, r4
 8002054:	f005 fad0 	bl	80075f8 <siprintf>
 8002058:	6138      	str	r0, [r7, #16]
	);
	fill_unuse_memory(UBXMessage,len);
 800205a:	6939      	ldr	r1, [r7, #16]
 800205c:	68f8      	ldr	r0, [r7, #12]
 800205e:	f000 f88d 	bl	800217c <fill_unuse_memory>

}
 8002062:	bf00      	nop
 8002064:	371c      	adds	r7, #28
 8002066:	46bd      	mov	sp, r7
 8002068:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800206a:	bf00      	nop
 800206c:	080098a4 	.word	0x080098a4
 8002070:	080098b0 	.word	0x080098b0
 8002074:	080098c0 	.word	0x080098c0

08002078 <bytes_to_endian>:

unsigned int bytes_to_endian(uint8_t attr[], size_t length, char type_endian) {
 8002078:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800207c:	b08f      	sub	sp, #60	@ 0x3c
 800207e:	af00      	add	r7, sp, #0
 8002080:	6278      	str	r0, [r7, #36]	@ 0x24
 8002082:	6239      	str	r1, [r7, #32]
 8002084:	4613      	mov	r3, r2
 8002086:	77fb      	strb	r3, [r7, #31]
	uint64_t result = 0;
 8002088:	f04f 0200 	mov.w	r2, #0
 800208c:	f04f 0300 	mov.w	r3, #0
 8002090:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	if (type_endian == 'l') { // little-endian
 8002094:	7ffb      	ldrb	r3, [r7, #31]
 8002096:	2b6c      	cmp	r3, #108	@ 0x6c
 8002098:	d136      	bne.n	8002108 <bytes_to_endian+0x90>
		for (size_t i = 0; i < length; ++i) {
 800209a:	2300      	movs	r3, #0
 800209c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800209e:	e02e      	b.n	80020fe <bytes_to_endian+0x86>
			result |= ((uint64_t)attr[i]) << (i * 8);
 80020a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020a4:	4413      	add	r3, r2
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2200      	movs	r2, #0
 80020ac:	613b      	str	r3, [r7, #16]
 80020ae:	617a      	str	r2, [r7, #20]
 80020b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	f1a3 0120 	sub.w	r1, r3, #32
 80020b8:	f1c3 0220 	rsb	r2, r3, #32
 80020bc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80020c0:	4628      	mov	r0, r5
 80020c2:	fa00 f903 	lsl.w	r9, r0, r3
 80020c6:	4620      	mov	r0, r4
 80020c8:	fa00 f101 	lsl.w	r1, r0, r1
 80020cc:	ea49 0901 	orr.w	r9, r9, r1
 80020d0:	4621      	mov	r1, r4
 80020d2:	fa21 f202 	lsr.w	r2, r1, r2
 80020d6:	ea49 0902 	orr.w	r9, r9, r2
 80020da:	4622      	mov	r2, r4
 80020dc:	fa02 f803 	lsl.w	r8, r2, r3
 80020e0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80020e4:	ea42 0108 	orr.w	r1, r2, r8
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	ea43 0309 	orr.w	r3, r3, r9
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80020f4:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
		for (size_t i = 0; i < length; ++i) {
 80020f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020fa:	3301      	adds	r3, #1
 80020fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002100:	6a3b      	ldr	r3, [r7, #32]
 8002102:	429a      	cmp	r2, r3
 8002104:	d3cc      	bcc.n	80020a0 <bytes_to_endian+0x28>
 8002106:	e031      	b.n	800216c <bytes_to_endian+0xf4>
		}
	} else if (type_endian == 'b') { // big-endian
 8002108:	7ffb      	ldrb	r3, [r7, #31]
 800210a:	2b62      	cmp	r3, #98	@ 0x62
 800210c:	d12e      	bne.n	800216c <bytes_to_endian+0xf4>
		for (size_t i = 0; i < length; ++i) {
 800210e:	2300      	movs	r3, #0
 8002110:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002112:	e027      	b.n	8002164 <bytes_to_endian+0xec>
			result |= ((uint64_t)attr[i]) << ((sizeof(uint64_t) - i - 1) * 8);
 8002114:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002118:	4413      	add	r3, r2
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2200      	movs	r2, #0
 8002120:	469a      	mov	sl, r3
 8002122:	4693      	mov	fp, r2
 8002124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002126:	f1c3 0307 	rsb	r3, r3, #7
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	f1a3 0120 	sub.w	r1, r3, #32
 8002130:	f1c3 0220 	rsb	r2, r3, #32
 8002134:	fa0b f503 	lsl.w	r5, fp, r3
 8002138:	fa0a f101 	lsl.w	r1, sl, r1
 800213c:	430d      	orrs	r5, r1
 800213e:	fa2a f202 	lsr.w	r2, sl, r2
 8002142:	4315      	orrs	r5, r2
 8002144:	fa0a f403 	lsl.w	r4, sl, r3
 8002148:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800214c:	ea42 0104 	orr.w	r1, r2, r4
 8002150:	6039      	str	r1, [r7, #0]
 8002152:	432b      	orrs	r3, r5
 8002154:	607b      	str	r3, [r7, #4]
 8002156:	e9d7 2300 	ldrd	r2, r3, [r7]
 800215a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		for (size_t i = 0; i < length; ++i) {
 800215e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002160:	3301      	adds	r3, #1
 8002162:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002164:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002166:	6a3b      	ldr	r3, [r7, #32]
 8002168:	429a      	cmp	r2, r3
 800216a:	d3d3      	bcc.n	8002114 <bytes_to_endian+0x9c>
		}
	}

	return result;
 800216c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 800216e:	4618      	mov	r0, r3
 8002170:	373c      	adds	r7, #60	@ 0x3c
 8002172:	46bd      	mov	sp, r7
 8002174:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002178:	4770      	bx	lr
	...

0800217c <fill_unuse_memory>:

void fill_unuse_memory(UBXMessage_parsed* UBXMessage,int len_use){
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
	if (len_use < sizeof(UBXMessage->bufferDebug)) {
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	2bc7      	cmp	r3, #199	@ 0xc7
 800218a:	d80b      	bhi.n	80021a4 <fill_unuse_memory+0x28>
		memset(UBXMessage->bufferDebug + len_use, " ", sizeof(UBXMessage->bufferDebug) - len_use);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f103 02cc 	add.w	r2, r3, #204	@ 0xcc
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	18d0      	adds	r0, r2, r3
 8002196:	4905      	ldr	r1, [pc, #20]	@ (80021ac <fill_unuse_memory+0x30>)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 800219e:	461a      	mov	r2, r3
 80021a0:	f005 fa8d 	bl	80076be <memset>
	}
}
 80021a4:	bf00      	nop
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	080098f0 	.word	0x080098f0

080021b0 <array_to_hex_string>:

char* array_to_hex_string(const uint8_t* array, size_t length) {
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
    // Taille maximale pour le buffer
    static char hex_string[MAX_SIZE_LOAD * 2 + 1];
    for (size_t i = 0; i < length; ++i) {
 80021ba:	2300      	movs	r3, #0
 80021bc:	60fb      	str	r3, [r7, #12]
 80021be:	e00e      	b.n	80021de <array_to_hex_string+0x2e>
        sprintf(hex_string + (i * 2), "%02x", array[i]);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	4a0d      	ldr	r2, [pc, #52]	@ (80021fc <array_to_hex_string+0x4c>)
 80021c6:	1898      	adds	r0, r3, r2
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	4413      	add	r3, r2
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	461a      	mov	r2, r3
 80021d2:	490b      	ldr	r1, [pc, #44]	@ (8002200 <array_to_hex_string+0x50>)
 80021d4:	f005 fa10 	bl	80075f8 <siprintf>
    for (size_t i = 0; i < length; ++i) {
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	3301      	adds	r3, #1
 80021dc:	60fb      	str	r3, [r7, #12]
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d3ec      	bcc.n	80021c0 <array_to_hex_string+0x10>
    }
    hex_string[length * 2] = '\0';
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	4a04      	ldr	r2, [pc, #16]	@ (80021fc <array_to_hex_string+0x4c>)
 80021ec:	2100      	movs	r1, #0
 80021ee:	54d1      	strb	r1, [r2, r3]
    return hex_string;
 80021f0:	4b02      	ldr	r3, [pc, #8]	@ (80021fc <array_to_hex_string+0x4c>)
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	200007c8 	.word	0x200007c8
 8002200:	080098f4 	.word	0x080098f4

08002204 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002208:	4b16      	ldr	r3, [pc, #88]	@ (8002264 <MX_USART1_UART_Init+0x60>)
 800220a:	4a17      	ldr	r2, [pc, #92]	@ (8002268 <MX_USART1_UART_Init+0x64>)
 800220c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800220e:	4b15      	ldr	r3, [pc, #84]	@ (8002264 <MX_USART1_UART_Init+0x60>)
 8002210:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002214:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002216:	4b13      	ldr	r3, [pc, #76]	@ (8002264 <MX_USART1_UART_Init+0x60>)
 8002218:	2200      	movs	r2, #0
 800221a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800221c:	4b11      	ldr	r3, [pc, #68]	@ (8002264 <MX_USART1_UART_Init+0x60>)
 800221e:	2200      	movs	r2, #0
 8002220:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002222:	4b10      	ldr	r3, [pc, #64]	@ (8002264 <MX_USART1_UART_Init+0x60>)
 8002224:	2200      	movs	r2, #0
 8002226:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002228:	4b0e      	ldr	r3, [pc, #56]	@ (8002264 <MX_USART1_UART_Init+0x60>)
 800222a:	220c      	movs	r2, #12
 800222c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800222e:	4b0d      	ldr	r3, [pc, #52]	@ (8002264 <MX_USART1_UART_Init+0x60>)
 8002230:	2200      	movs	r2, #0
 8002232:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002234:	4b0b      	ldr	r3, [pc, #44]	@ (8002264 <MX_USART1_UART_Init+0x60>)
 8002236:	2200      	movs	r2, #0
 8002238:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800223a:	4b0a      	ldr	r3, [pc, #40]	@ (8002264 <MX_USART1_UART_Init+0x60>)
 800223c:	2200      	movs	r2, #0
 800223e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8002240:	4b08      	ldr	r3, [pc, #32]	@ (8002264 <MX_USART1_UART_Init+0x60>)
 8002242:	2208      	movs	r2, #8
 8002244:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8002246:	4b07      	ldr	r3, [pc, #28]	@ (8002264 <MX_USART1_UART_Init+0x60>)
 8002248:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800224c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800224e:	4805      	ldr	r0, [pc, #20]	@ (8002264 <MX_USART1_UART_Init+0x60>)
 8002250:	f002 fd65 	bl	8004d1e <HAL_UART_Init>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800225a:	f7ff fb10 	bl	800187e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	2000095c 	.word	0x2000095c
 8002268:	40013800 	.word	0x40013800

0800226c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002270:	4b14      	ldr	r3, [pc, #80]	@ (80022c4 <MX_USART2_UART_Init+0x58>)
 8002272:	4a15      	ldr	r2, [pc, #84]	@ (80022c8 <MX_USART2_UART_Init+0x5c>)
 8002274:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002276:	4b13      	ldr	r3, [pc, #76]	@ (80022c4 <MX_USART2_UART_Init+0x58>)
 8002278:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800227c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800227e:	4b11      	ldr	r3, [pc, #68]	@ (80022c4 <MX_USART2_UART_Init+0x58>)
 8002280:	2200      	movs	r2, #0
 8002282:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002284:	4b0f      	ldr	r3, [pc, #60]	@ (80022c4 <MX_USART2_UART_Init+0x58>)
 8002286:	2200      	movs	r2, #0
 8002288:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800228a:	4b0e      	ldr	r3, [pc, #56]	@ (80022c4 <MX_USART2_UART_Init+0x58>)
 800228c:	2200      	movs	r2, #0
 800228e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002290:	4b0c      	ldr	r3, [pc, #48]	@ (80022c4 <MX_USART2_UART_Init+0x58>)
 8002292:	220c      	movs	r2, #12
 8002294:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002296:	4b0b      	ldr	r3, [pc, #44]	@ (80022c4 <MX_USART2_UART_Init+0x58>)
 8002298:	2200      	movs	r2, #0
 800229a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800229c:	4b09      	ldr	r3, [pc, #36]	@ (80022c4 <MX_USART2_UART_Init+0x58>)
 800229e:	2200      	movs	r2, #0
 80022a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022a2:	4b08      	ldr	r3, [pc, #32]	@ (80022c4 <MX_USART2_UART_Init+0x58>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022a8:	4b06      	ldr	r3, [pc, #24]	@ (80022c4 <MX_USART2_UART_Init+0x58>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022ae:	4805      	ldr	r0, [pc, #20]	@ (80022c4 <MX_USART2_UART_Init+0x58>)
 80022b0:	f002 fd35 	bl	8004d1e <HAL_UART_Init>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80022ba:	f7ff fae0 	bl	800187e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80022be:	bf00      	nop
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	200009e4 	.word	0x200009e4
 80022c8:	40004400 	.word	0x40004400

080022cc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80022d0:	4b14      	ldr	r3, [pc, #80]	@ (8002324 <MX_USART3_UART_Init+0x58>)
 80022d2:	4a15      	ldr	r2, [pc, #84]	@ (8002328 <MX_USART3_UART_Init+0x5c>)
 80022d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 80022d6:	4b13      	ldr	r3, [pc, #76]	@ (8002324 <MX_USART3_UART_Init+0x58>)
 80022d8:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80022dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80022de:	4b11      	ldr	r3, [pc, #68]	@ (8002324 <MX_USART3_UART_Init+0x58>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80022e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002324 <MX_USART3_UART_Init+0x58>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80022ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002324 <MX_USART3_UART_Init+0x58>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80022f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002324 <MX_USART3_UART_Init+0x58>)
 80022f2:	220c      	movs	r2, #12
 80022f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002324 <MX_USART3_UART_Init+0x58>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80022fc:	4b09      	ldr	r3, [pc, #36]	@ (8002324 <MX_USART3_UART_Init+0x58>)
 80022fe:	2200      	movs	r2, #0
 8002300:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002302:	4b08      	ldr	r3, [pc, #32]	@ (8002324 <MX_USART3_UART_Init+0x58>)
 8002304:	2200      	movs	r2, #0
 8002306:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002308:	4b06      	ldr	r3, [pc, #24]	@ (8002324 <MX_USART3_UART_Init+0x58>)
 800230a:	2200      	movs	r2, #0
 800230c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800230e:	4805      	ldr	r0, [pc, #20]	@ (8002324 <MX_USART3_UART_Init+0x58>)
 8002310:	f002 fd05 	bl	8004d1e <HAL_UART_Init>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800231a:	f7ff fab0 	bl	800187e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800231e:	bf00      	nop
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	20000a6c 	.word	0x20000a6c
 8002328:	40004800 	.word	0x40004800

0800232c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b0b2      	sub	sp, #200	@ 0xc8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002334:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	605a      	str	r2, [r3, #4]
 800233e:	609a      	str	r2, [r3, #8]
 8002340:	60da      	str	r2, [r3, #12]
 8002342:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002344:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002348:	228c      	movs	r2, #140	@ 0x8c
 800234a:	2100      	movs	r1, #0
 800234c:	4618      	mov	r0, r3
 800234e:	f005 f9b6 	bl	80076be <memset>
  if(uartHandle->Instance==USART1)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a80      	ldr	r2, [pc, #512]	@ (8002558 <HAL_UART_MspInit+0x22c>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d166      	bne.n	800242a <HAL_UART_MspInit+0xfe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800235c:	2301      	movs	r3, #1
 800235e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002360:	2300      	movs	r3, #0
 8002362:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002364:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002368:	4618      	mov	r0, r3
 800236a:	f001 ff6b 	bl	8004244 <HAL_RCCEx_PeriphCLKConfig>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002374:	f7ff fa83 	bl	800187e <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002378:	4b78      	ldr	r3, [pc, #480]	@ (800255c <HAL_UART_MspInit+0x230>)
 800237a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800237c:	4a77      	ldr	r2, [pc, #476]	@ (800255c <HAL_UART_MspInit+0x230>)
 800237e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002382:	6613      	str	r3, [r2, #96]	@ 0x60
 8002384:	4b75      	ldr	r3, [pc, #468]	@ (800255c <HAL_UART_MspInit+0x230>)
 8002386:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002388:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800238c:	627b      	str	r3, [r7, #36]	@ 0x24
 800238e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002390:	4b72      	ldr	r3, [pc, #456]	@ (800255c <HAL_UART_MspInit+0x230>)
 8002392:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002394:	4a71      	ldr	r2, [pc, #452]	@ (800255c <HAL_UART_MspInit+0x230>)
 8002396:	f043 0301 	orr.w	r3, r3, #1
 800239a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800239c:	4b6f      	ldr	r3, [pc, #444]	@ (800255c <HAL_UART_MspInit+0x230>)
 800239e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	623b      	str	r3, [r7, #32]
 80023a6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023a8:	4b6c      	ldr	r3, [pc, #432]	@ (800255c <HAL_UART_MspInit+0x230>)
 80023aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ac:	4a6b      	ldr	r2, [pc, #428]	@ (800255c <HAL_UART_MspInit+0x230>)
 80023ae:	f043 0302 	orr.w	r3, r3, #2
 80023b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023b4:	4b69      	ldr	r3, [pc, #420]	@ (800255c <HAL_UART_MspInit+0x230>)
 80023b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	61fb      	str	r3, [r7, #28]
 80023be:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STM_VCP_RX_Pin;
 80023c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80023c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c8:	2302      	movs	r3, #2
 80023ca:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ce:	2300      	movs	r3, #0
 80023d0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d4:	2303      	movs	r3, #3
 80023d6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023da:	2307      	movs	r3, #7
 80023dc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(STM_VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80023e0:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80023e4:	4619      	mov	r1, r3
 80023e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023ea:	f000 fd6d 	bl	8002ec8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STM_VCP_TX_Pin;
 80023ee:	2340      	movs	r3, #64	@ 0x40
 80023f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f4:	2302      	movs	r3, #2
 80023f6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fa:	2300      	movs	r3, #0
 80023fc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002400:	2303      	movs	r3, #3
 8002402:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002406:	2307      	movs	r3, #7
 8002408:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(STM_VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800240c:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002410:	4619      	mov	r1, r3
 8002412:	4853      	ldr	r0, [pc, #332]	@ (8002560 <HAL_UART_MspInit+0x234>)
 8002414:	f000 fd58 	bl	8002ec8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002418:	2200      	movs	r2, #0
 800241a:	2100      	movs	r1, #0
 800241c:	2025      	movs	r0, #37	@ 0x25
 800241e:	f000 fb54 	bl	8002aca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002422:	2025      	movs	r0, #37	@ 0x25
 8002424:	f000 fb6d 	bl	8002b02 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002428:	e091      	b.n	800254e <HAL_UART_MspInit+0x222>
  else if(uartHandle->Instance==USART2)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a4d      	ldr	r2, [pc, #308]	@ (8002564 <HAL_UART_MspInit+0x238>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d143      	bne.n	80024bc <HAL_UART_MspInit+0x190>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002434:	2302      	movs	r3, #2
 8002436:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002438:	2300      	movs	r3, #0
 800243a:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800243c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002440:	4618      	mov	r0, r3
 8002442:	f001 feff 	bl	8004244 <HAL_RCCEx_PeriphCLKConfig>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <HAL_UART_MspInit+0x124>
      Error_Handler();
 800244c:	f7ff fa17 	bl	800187e <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002450:	4b42      	ldr	r3, [pc, #264]	@ (800255c <HAL_UART_MspInit+0x230>)
 8002452:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002454:	4a41      	ldr	r2, [pc, #260]	@ (800255c <HAL_UART_MspInit+0x230>)
 8002456:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800245a:	6593      	str	r3, [r2, #88]	@ 0x58
 800245c:	4b3f      	ldr	r3, [pc, #252]	@ (800255c <HAL_UART_MspInit+0x230>)
 800245e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002460:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002464:	61bb      	str	r3, [r7, #24]
 8002466:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002468:	4b3c      	ldr	r3, [pc, #240]	@ (800255c <HAL_UART_MspInit+0x230>)
 800246a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800246c:	4a3b      	ldr	r2, [pc, #236]	@ (800255c <HAL_UART_MspInit+0x230>)
 800246e:	f043 0308 	orr.w	r3, r3, #8
 8002472:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002474:	4b39      	ldr	r3, [pc, #228]	@ (800255c <HAL_UART_MspInit+0x230>)
 8002476:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002478:	f003 0308 	and.w	r3, r3, #8
 800247c:	617b      	str	r3, [r7, #20]
 800247e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPS_RTCM3_RX_STM_TX_Pin|GPS_RTCM3_TX_STM_RX_Pin;
 8002480:	2360      	movs	r3, #96	@ 0x60
 8002482:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002486:	2302      	movs	r3, #2
 8002488:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248c:	2300      	movs	r3, #0
 800248e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002492:	2303      	movs	r3, #3
 8002494:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002498:	2307      	movs	r3, #7
 800249a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800249e:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80024a2:	4619      	mov	r1, r3
 80024a4:	4830      	ldr	r0, [pc, #192]	@ (8002568 <HAL_UART_MspInit+0x23c>)
 80024a6:	f000 fd0f 	bl	8002ec8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80024aa:	2200      	movs	r2, #0
 80024ac:	2100      	movs	r1, #0
 80024ae:	2026      	movs	r0, #38	@ 0x26
 80024b0:	f000 fb0b 	bl	8002aca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80024b4:	2026      	movs	r0, #38	@ 0x26
 80024b6:	f000 fb24 	bl	8002b02 <HAL_NVIC_EnableIRQ>
}
 80024ba:	e048      	b.n	800254e <HAL_UART_MspInit+0x222>
  else if(uartHandle->Instance==USART3)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a2a      	ldr	r2, [pc, #168]	@ (800256c <HAL_UART_MspInit+0x240>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d143      	bne.n	800254e <HAL_UART_MspInit+0x222>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80024c6:	2304      	movs	r3, #4
 80024c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80024ca:	2300      	movs	r3, #0
 80024cc:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80024d2:	4618      	mov	r0, r3
 80024d4:	f001 feb6 	bl	8004244 <HAL_RCCEx_PeriphCLKConfig>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <HAL_UART_MspInit+0x1b6>
      Error_Handler();
 80024de:	f7ff f9ce 	bl	800187e <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80024e2:	4b1e      	ldr	r3, [pc, #120]	@ (800255c <HAL_UART_MspInit+0x230>)
 80024e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024e6:	4a1d      	ldr	r2, [pc, #116]	@ (800255c <HAL_UART_MspInit+0x230>)
 80024e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80024ee:	4b1b      	ldr	r3, [pc, #108]	@ (800255c <HAL_UART_MspInit+0x230>)
 80024f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024f6:	613b      	str	r3, [r7, #16]
 80024f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024fa:	4b18      	ldr	r3, [pc, #96]	@ (800255c <HAL_UART_MspInit+0x230>)
 80024fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024fe:	4a17      	ldr	r2, [pc, #92]	@ (800255c <HAL_UART_MspInit+0x230>)
 8002500:	f043 0308 	orr.w	r3, r3, #8
 8002504:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002506:	4b15      	ldr	r3, [pc, #84]	@ (800255c <HAL_UART_MspInit+0x230>)
 8002508:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800250a:	f003 0308 	and.w	r3, r3, #8
 800250e:	60fb      	str	r3, [r7, #12]
 8002510:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPS_TX_STM_Pin|GPSR_RX_STM_Pin;
 8002512:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002516:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800251a:	2302      	movs	r3, #2
 800251c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002520:	2300      	movs	r3, #0
 8002522:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002526:	2303      	movs	r3, #3
 8002528:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800252c:	2307      	movs	r3, #7
 800252e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002532:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002536:	4619      	mov	r1, r3
 8002538:	480b      	ldr	r0, [pc, #44]	@ (8002568 <HAL_UART_MspInit+0x23c>)
 800253a:	f000 fcc5 	bl	8002ec8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800253e:	2200      	movs	r2, #0
 8002540:	2100      	movs	r1, #0
 8002542:	2027      	movs	r0, #39	@ 0x27
 8002544:	f000 fac1 	bl	8002aca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002548:	2027      	movs	r0, #39	@ 0x27
 800254a:	f000 fada 	bl	8002b02 <HAL_NVIC_EnableIRQ>
}
 800254e:	bf00      	nop
 8002550:	37c8      	adds	r7, #200	@ 0xc8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	40013800 	.word	0x40013800
 800255c:	40021000 	.word	0x40021000
 8002560:	48000400 	.word	0x48000400
 8002564:	40004400 	.word	0x40004400
 8002568:	48000c00 	.word	0x48000c00
 800256c:	40004800 	.word	0x40004800

08002570 <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
	 if (huart3.Instance == huart->Instance)
 8002578:	4b0f      	ldr	r3, [pc, #60]	@ (80025b8 <HAL_UART_RxCpltCallback+0x48>)
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	429a      	cmp	r2, r3
 8002582:	d114      	bne.n	80025ae <HAL_UART_RxCpltCallback+0x3e>
	{
		 ITM_Port32(31)=01;
 8002584:	4b0d      	ldr	r3, [pc, #52]	@ (80025bc <HAL_UART_RxCpltCallback+0x4c>)
 8002586:	2201      	movs	r2, #1
 8002588:	601a      	str	r2, [r3, #0]
		 memcpy(hGNSSCom.DebugBuffer,hGNSSCom.RxBuffer,UART_RX_BUFFER_SIZE);
 800258a:	4b0d      	ldr	r3, [pc, #52]	@ (80025c0 <HAL_UART_RxCpltCallback+0x50>)
 800258c:	4a0c      	ldr	r2, [pc, #48]	@ (80025c0 <HAL_UART_RxCpltCallback+0x50>)
 800258e:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8002592:	f102 0108 	add.w	r1, r2, #8
 8002596:	22c8      	movs	r2, #200	@ 0xc8
 8002598:	4618      	mov	r0, r3
 800259a:	f005 f932 	bl	8007802 <memcpy>
		 GNSSCom_ReceiveDebug();
 800259e:	f7fe fdeb 	bl	8001178 <GNSSCom_ReceiveDebug>
		 GNSSCom_UartActivate(&hGNSSCom);
 80025a2:	4807      	ldr	r0, [pc, #28]	@ (80025c0 <HAL_UART_RxCpltCallback+0x50>)
 80025a4:	f7fe fcc0 	bl	8000f28 <GNSSCom_UartActivate>
		 ITM_Port32(31)=00;
 80025a8:	4b04      	ldr	r3, [pc, #16]	@ (80025bc <HAL_UART_RxCpltCallback+0x4c>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	601a      	str	r2, [r3, #0]
	}
}
 80025ae:	bf00      	nop
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	20000a6c 	.word	0x20000a6c
 80025bc:	e000007c 	.word	0xe000007c
 80025c0:	20000370 	.word	0x20000370

080025c4 <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
    if (huart->Instance == huart3.Instance) {
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	4b07      	ldr	r3, [pc, #28]	@ (80025f0 <HAL_UART_ErrorCallback+0x2c>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d106      	bne.n	80025e6 <HAL_UART_ErrorCallback+0x22>
    	HAL_UART_Receive_IT(hGNSSCom.huart, hGNSSCom.RxBuffer, sizeof(hGNSSCom.RxBuffer)); // Relancer la réception
 80025d8:	4b06      	ldr	r3, [pc, #24]	@ (80025f4 <HAL_UART_ErrorCallback+0x30>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	22c8      	movs	r2, #200	@ 0xc8
 80025de:	4906      	ldr	r1, [pc, #24]	@ (80025f8 <HAL_UART_ErrorCallback+0x34>)
 80025e0:	4618      	mov	r0, r3
 80025e2:	f002 fc73 	bl	8004ecc <HAL_UART_Receive_IT>
    }

}
 80025e6:	bf00      	nop
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	20000a6c 	.word	0x20000a6c
 80025f4:	20000370 	.word	0x20000370
 80025f8:	20000378 	.word	0x20000378

080025fc <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002600:	4b14      	ldr	r3, [pc, #80]	@ (8002654 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002602:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002606:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002608:	4b12      	ldr	r3, [pc, #72]	@ (8002654 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800260a:	2206      	movs	r2, #6
 800260c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800260e:	4b11      	ldr	r3, [pc, #68]	@ (8002654 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002610:	2202      	movs	r2, #2
 8002612:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002614:	4b0f      	ldr	r3, [pc, #60]	@ (8002654 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002616:	2202      	movs	r2, #2
 8002618:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800261a:	4b0e      	ldr	r3, [pc, #56]	@ (8002654 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800261c:	2200      	movs	r2, #0
 800261e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002620:	4b0c      	ldr	r3, [pc, #48]	@ (8002654 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002622:	2200      	movs	r2, #0
 8002624:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002626:	4b0b      	ldr	r3, [pc, #44]	@ (8002654 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002628:	2200      	movs	r2, #0
 800262a:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800262c:	4b09      	ldr	r3, [pc, #36]	@ (8002654 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800262e:	2201      	movs	r2, #1
 8002630:	629a      	str	r2, [r3, #40]	@ 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002632:	4b08      	ldr	r3, [pc, #32]	@ (8002654 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002634:	2200      	movs	r2, #0
 8002636:	631a      	str	r2, [r3, #48]	@ 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002638:	4b06      	ldr	r3, [pc, #24]	@ (8002654 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800263a:	2201      	movs	r2, #1
 800263c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800263e:	4805      	ldr	r0, [pc, #20]	@ (8002654 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002640:	f000 fe06 	bl	8003250 <HAL_PCD_Init>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800264a:	f7ff f918 	bl	800187e <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800264e:	bf00      	nop
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	20000af4 	.word	0x20000af4

08002658 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b0ae      	sub	sp, #184	@ 0xb8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002660:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	605a      	str	r2, [r3, #4]
 800266a:	609a      	str	r2, [r3, #8]
 800266c:	60da      	str	r2, [r3, #12]
 800266e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002670:	f107 0318 	add.w	r3, r7, #24
 8002674:	228c      	movs	r2, #140	@ 0x8c
 8002676:	2100      	movs	r1, #0
 8002678:	4618      	mov	r0, r3
 800267a:	f005 f820 	bl	80076be <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002686:	d17c      	bne.n	8002782 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002688:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800268c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800268e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002692:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8002696:	2303      	movs	r3, #3
 8002698:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 800269a:	2302      	movs	r3, #2
 800269c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 800269e:	230c      	movs	r3, #12
 80026a0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80026a2:	2302      	movs	r3, #2
 80026a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 80026a6:	2304      	movs	r3, #4
 80026a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80026aa:	2302      	movs	r3, #2
 80026ac:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80026ae:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80026b2:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026b4:	f107 0318 	add.w	r3, r7, #24
 80026b8:	4618      	mov	r0, r3
 80026ba:	f001 fdc3 	bl	8004244 <HAL_RCCEx_PeriphCLKConfig>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80026c4:	f7ff f8db 	bl	800187e <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c8:	4b30      	ldr	r3, [pc, #192]	@ (800278c <HAL_PCD_MspInit+0x134>)
 80026ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026cc:	4a2f      	ldr	r2, [pc, #188]	@ (800278c <HAL_PCD_MspInit+0x134>)
 80026ce:	f043 0301 	orr.w	r3, r3, #1
 80026d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026d4:	4b2d      	ldr	r3, [pc, #180]	@ (800278c <HAL_PCD_MspInit+0x134>)
 80026d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026d8:	f003 0301 	and.w	r3, r3, #1
 80026dc:	617b      	str	r3, [r7, #20]
 80026de:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_VBUS_DETECT_Pin;
 80026e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80026e4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026e8:	2300      	movs	r3, #0
 80026ea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ee:	2300      	movs	r3, #0
 80026f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_DETECT_GPIO_Port, &GPIO_InitStruct);
 80026f4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80026f8:	4619      	mov	r1, r3
 80026fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026fe:	f000 fbe3 	bl	8002ec8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_D_N_Pin|USB_D_P_Pin;
 8002702:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002706:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270a:	2302      	movs	r3, #2
 800270c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002710:	2300      	movs	r3, #0
 8002712:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002716:	2303      	movs	r3, #3
 8002718:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800271c:	230a      	movs	r3, #10
 800271e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002722:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002726:	4619      	mov	r1, r3
 8002728:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800272c:	f000 fbcc 	bl	8002ec8 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002730:	4b16      	ldr	r3, [pc, #88]	@ (800278c <HAL_PCD_MspInit+0x134>)
 8002732:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002734:	4a15      	ldr	r2, [pc, #84]	@ (800278c <HAL_PCD_MspInit+0x134>)
 8002736:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800273a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800273c:	4b13      	ldr	r3, [pc, #76]	@ (800278c <HAL_PCD_MspInit+0x134>)
 800273e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002740:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002744:	613b      	str	r3, [r7, #16]
 8002746:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002748:	4b10      	ldr	r3, [pc, #64]	@ (800278c <HAL_PCD_MspInit+0x134>)
 800274a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800274c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d114      	bne.n	800277e <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002754:	4b0d      	ldr	r3, [pc, #52]	@ (800278c <HAL_PCD_MspInit+0x134>)
 8002756:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002758:	4a0c      	ldr	r2, [pc, #48]	@ (800278c <HAL_PCD_MspInit+0x134>)
 800275a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800275e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002760:	4b0a      	ldr	r3, [pc, #40]	@ (800278c <HAL_PCD_MspInit+0x134>)
 8002762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002764:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002768:	60fb      	str	r3, [r7, #12]
 800276a:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800276c:	f000 ff1c 	bl	80035a8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002770:	4b06      	ldr	r3, [pc, #24]	@ (800278c <HAL_PCD_MspInit+0x134>)
 8002772:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002774:	4a05      	ldr	r2, [pc, #20]	@ (800278c <HAL_PCD_MspInit+0x134>)
 8002776:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800277a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800277c:	e001      	b.n	8002782 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 800277e:	f000 ff13 	bl	80035a8 <HAL_PWREx_EnableVddUSB>
}
 8002782:	bf00      	nop
 8002784:	37b8      	adds	r7, #184	@ 0xb8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	40021000 	.word	0x40021000

08002790 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002790:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80027c8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002794:	f7ff faa4 	bl	8001ce0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002798:	480c      	ldr	r0, [pc, #48]	@ (80027cc <LoopForever+0x6>)
  ldr r1, =_edata
 800279a:	490d      	ldr	r1, [pc, #52]	@ (80027d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800279c:	4a0d      	ldr	r2, [pc, #52]	@ (80027d4 <LoopForever+0xe>)
  movs r3, #0
 800279e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027a0:	e002      	b.n	80027a8 <LoopCopyDataInit>

080027a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027a6:	3304      	adds	r3, #4

080027a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027ac:	d3f9      	bcc.n	80027a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027ae:	4a0a      	ldr	r2, [pc, #40]	@ (80027d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80027b0:	4c0a      	ldr	r4, [pc, #40]	@ (80027dc <LoopForever+0x16>)
  movs r3, #0
 80027b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027b4:	e001      	b.n	80027ba <LoopFillZerobss>

080027b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027b8:	3204      	adds	r2, #4

080027ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027bc:	d3fb      	bcc.n	80027b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027be:	f004 fff9 	bl	80077b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80027c2:	f7fe ffb9 	bl	8001738 <main>

080027c6 <LoopForever>:

LoopForever:
    b LoopForever
 80027c6:	e7fe      	b.n	80027c6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80027c8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80027cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027d0:	20000354 	.word	0x20000354
  ldr r2, =_sidata
 80027d4:	08009cc8 	.word	0x08009cc8
  ldr r2, =_sbss
 80027d8:	20000354 	.word	0x20000354
  ldr r4, =_ebss
 80027dc:	20001150 	.word	0x20001150

080027e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80027e0:	e7fe      	b.n	80027e0 <ADC1_2_IRQHandler>

080027e2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b082      	sub	sp, #8
 80027e6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80027e8:	2300      	movs	r3, #0
 80027ea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027ec:	2003      	movs	r0, #3
 80027ee:	f000 f961 	bl	8002ab4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027f2:	200f      	movs	r0, #15
 80027f4:	f000 f80e 	bl	8002814 <HAL_InitTick>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d002      	beq.n	8002804 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	71fb      	strb	r3, [r7, #7]
 8002802:	e001      	b.n	8002808 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002804:	f7ff f934 	bl	8001a70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002808:	79fb      	ldrb	r3, [r7, #7]
}
 800280a:	4618      	mov	r0, r3
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
	...

08002814 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800281c:	2300      	movs	r3, #0
 800281e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002820:	4b17      	ldr	r3, [pc, #92]	@ (8002880 <HAL_InitTick+0x6c>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d023      	beq.n	8002870 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002828:	4b16      	ldr	r3, [pc, #88]	@ (8002884 <HAL_InitTick+0x70>)
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	4b14      	ldr	r3, [pc, #80]	@ (8002880 <HAL_InitTick+0x6c>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	4619      	mov	r1, r3
 8002832:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002836:	fbb3 f3f1 	udiv	r3, r3, r1
 800283a:	fbb2 f3f3 	udiv	r3, r2, r3
 800283e:	4618      	mov	r0, r3
 8002840:	f000 f96d 	bl	8002b1e <HAL_SYSTICK_Config>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10f      	bne.n	800286a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2b0f      	cmp	r3, #15
 800284e:	d809      	bhi.n	8002864 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002850:	2200      	movs	r2, #0
 8002852:	6879      	ldr	r1, [r7, #4]
 8002854:	f04f 30ff 	mov.w	r0, #4294967295
 8002858:	f000 f937 	bl	8002aca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800285c:	4a0a      	ldr	r2, [pc, #40]	@ (8002888 <HAL_InitTick+0x74>)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6013      	str	r3, [r2, #0]
 8002862:	e007      	b.n	8002874 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	73fb      	strb	r3, [r7, #15]
 8002868:	e004      	b.n	8002874 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	73fb      	strb	r3, [r7, #15]
 800286e:	e001      	b.n	8002874 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002874:	7bfb      	ldrb	r3, [r7, #15]
}
 8002876:	4618      	mov	r0, r3
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	20000188 	.word	0x20000188
 8002884:	20000180 	.word	0x20000180
 8002888:	20000184 	.word	0x20000184

0800288c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002890:	4b06      	ldr	r3, [pc, #24]	@ (80028ac <HAL_IncTick+0x20>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	461a      	mov	r2, r3
 8002896:	4b06      	ldr	r3, [pc, #24]	@ (80028b0 <HAL_IncTick+0x24>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4413      	add	r3, r2
 800289c:	4a04      	ldr	r2, [pc, #16]	@ (80028b0 <HAL_IncTick+0x24>)
 800289e:	6013      	str	r3, [r2, #0]
}
 80028a0:	bf00      	nop
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	20000188 	.word	0x20000188
 80028b0:	20001000 	.word	0x20001000

080028b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  return uwTick;
 80028b8:	4b03      	ldr	r3, [pc, #12]	@ (80028c8 <HAL_GetTick+0x14>)
 80028ba:	681b      	ldr	r3, [r3, #0]
}
 80028bc:	4618      	mov	r0, r3
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	20001000 	.word	0x20001000

080028cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028d4:	f7ff ffee 	bl	80028b4 <HAL_GetTick>
 80028d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e4:	d005      	beq.n	80028f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80028e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002910 <HAL_Delay+0x44>)
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	461a      	mov	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	4413      	add	r3, r2
 80028f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028f2:	bf00      	nop
 80028f4:	f7ff ffde 	bl	80028b4 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	429a      	cmp	r2, r3
 8002902:	d8f7      	bhi.n	80028f4 <HAL_Delay+0x28>
  {
  }
}
 8002904:	bf00      	nop
 8002906:	bf00      	nop
 8002908:	3710      	adds	r7, #16
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	20000188 	.word	0x20000188

08002914 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f003 0307 	and.w	r3, r3, #7
 8002922:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002924:	4b0c      	ldr	r3, [pc, #48]	@ (8002958 <__NVIC_SetPriorityGrouping+0x44>)
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800292a:	68ba      	ldr	r2, [r7, #8]
 800292c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002930:	4013      	ands	r3, r2
 8002932:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800293c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002940:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002944:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002946:	4a04      	ldr	r2, [pc, #16]	@ (8002958 <__NVIC_SetPriorityGrouping+0x44>)
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	60d3      	str	r3, [r2, #12]
}
 800294c:	bf00      	nop
 800294e:	3714      	adds	r7, #20
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr
 8002958:	e000ed00 	.word	0xe000ed00

0800295c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002960:	4b04      	ldr	r3, [pc, #16]	@ (8002974 <__NVIC_GetPriorityGrouping+0x18>)
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	0a1b      	lsrs	r3, r3, #8
 8002966:	f003 0307 	and.w	r3, r3, #7
}
 800296a:	4618      	mov	r0, r3
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr
 8002974:	e000ed00 	.word	0xe000ed00

08002978 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	4603      	mov	r3, r0
 8002980:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002986:	2b00      	cmp	r3, #0
 8002988:	db0b      	blt.n	80029a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800298a:	79fb      	ldrb	r3, [r7, #7]
 800298c:	f003 021f 	and.w	r2, r3, #31
 8002990:	4907      	ldr	r1, [pc, #28]	@ (80029b0 <__NVIC_EnableIRQ+0x38>)
 8002992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002996:	095b      	lsrs	r3, r3, #5
 8002998:	2001      	movs	r0, #1
 800299a:	fa00 f202 	lsl.w	r2, r0, r2
 800299e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029a2:	bf00      	nop
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	e000e100 	.word	0xe000e100

080029b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	4603      	mov	r3, r0
 80029bc:	6039      	str	r1, [r7, #0]
 80029be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	db0a      	blt.n	80029de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	b2da      	uxtb	r2, r3
 80029cc:	490c      	ldr	r1, [pc, #48]	@ (8002a00 <__NVIC_SetPriority+0x4c>)
 80029ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d2:	0112      	lsls	r2, r2, #4
 80029d4:	b2d2      	uxtb	r2, r2
 80029d6:	440b      	add	r3, r1
 80029d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029dc:	e00a      	b.n	80029f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	b2da      	uxtb	r2, r3
 80029e2:	4908      	ldr	r1, [pc, #32]	@ (8002a04 <__NVIC_SetPriority+0x50>)
 80029e4:	79fb      	ldrb	r3, [r7, #7]
 80029e6:	f003 030f 	and.w	r3, r3, #15
 80029ea:	3b04      	subs	r3, #4
 80029ec:	0112      	lsls	r2, r2, #4
 80029ee:	b2d2      	uxtb	r2, r2
 80029f0:	440b      	add	r3, r1
 80029f2:	761a      	strb	r2, [r3, #24]
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr
 8002a00:	e000e100 	.word	0xe000e100
 8002a04:	e000ed00 	.word	0xe000ed00

08002a08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b089      	sub	sp, #36	@ 0x24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f003 0307 	and.w	r3, r3, #7
 8002a1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	f1c3 0307 	rsb	r3, r3, #7
 8002a22:	2b04      	cmp	r3, #4
 8002a24:	bf28      	it	cs
 8002a26:	2304      	movcs	r3, #4
 8002a28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	3304      	adds	r3, #4
 8002a2e:	2b06      	cmp	r3, #6
 8002a30:	d902      	bls.n	8002a38 <NVIC_EncodePriority+0x30>
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	3b03      	subs	r3, #3
 8002a36:	e000      	b.n	8002a3a <NVIC_EncodePriority+0x32>
 8002a38:	2300      	movs	r3, #0
 8002a3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	fa02 f303 	lsl.w	r3, r2, r3
 8002a46:	43da      	mvns	r2, r3
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	401a      	ands	r2, r3
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a50:	f04f 31ff 	mov.w	r1, #4294967295
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	fa01 f303 	lsl.w	r3, r1, r3
 8002a5a:	43d9      	mvns	r1, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a60:	4313      	orrs	r3, r2
         );
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3724      	adds	r7, #36	@ 0x24
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
	...

08002a70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a80:	d301      	bcc.n	8002a86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a82:	2301      	movs	r3, #1
 8002a84:	e00f      	b.n	8002aa6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a86:	4a0a      	ldr	r2, [pc, #40]	@ (8002ab0 <SysTick_Config+0x40>)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a8e:	210f      	movs	r1, #15
 8002a90:	f04f 30ff 	mov.w	r0, #4294967295
 8002a94:	f7ff ff8e 	bl	80029b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a98:	4b05      	ldr	r3, [pc, #20]	@ (8002ab0 <SysTick_Config+0x40>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a9e:	4b04      	ldr	r3, [pc, #16]	@ (8002ab0 <SysTick_Config+0x40>)
 8002aa0:	2207      	movs	r2, #7
 8002aa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	e000e010 	.word	0xe000e010

08002ab4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f7ff ff29 	bl	8002914 <__NVIC_SetPriorityGrouping>
}
 8002ac2:	bf00      	nop
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b086      	sub	sp, #24
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	60b9      	str	r1, [r7, #8]
 8002ad4:	607a      	str	r2, [r7, #4]
 8002ad6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002adc:	f7ff ff3e 	bl	800295c <__NVIC_GetPriorityGrouping>
 8002ae0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	68b9      	ldr	r1, [r7, #8]
 8002ae6:	6978      	ldr	r0, [r7, #20]
 8002ae8:	f7ff ff8e 	bl	8002a08 <NVIC_EncodePriority>
 8002aec:	4602      	mov	r2, r0
 8002aee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002af2:	4611      	mov	r1, r2
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7ff ff5d 	bl	80029b4 <__NVIC_SetPriority>
}
 8002afa:	bf00      	nop
 8002afc:	3718      	adds	r7, #24
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b082      	sub	sp, #8
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	4603      	mov	r3, r0
 8002b0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7ff ff31 	bl	8002978 <__NVIC_EnableIRQ>
}
 8002b16:	bf00      	nop
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b082      	sub	sp, #8
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f7ff ffa2 	bl	8002a70 <SysTick_Config>
 8002b2c:	4603      	mov	r3, r0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b082      	sub	sp, #8
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d101      	bne.n	8002b48 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e014      	b.n	8002b72 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	791b      	ldrb	r3, [r3, #4]
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d105      	bne.n	8002b5e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f7fe fcd3 	bl	8001504 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2202      	movs	r2, #2
 8002b62:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b088      	sub	sp, #32
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	60f8      	str	r0, [r7, #12]
 8002b82:	60b9      	str	r1, [r7, #8]
 8002b84:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002b86:	2300      	movs	r3, #0
 8002b88:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	795b      	ldrb	r3, [r3, #5]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d101      	bne.n	8002b96 <HAL_DAC_ConfigChannel+0x1c>
 8002b92:	2302      	movs	r3, #2
 8002b94:	e114      	b.n	8002dc0 <HAL_DAC_ConfigChannel+0x246>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2202      	movs	r2, #2
 8002ba0:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	f040 8081 	bne.w	8002cae <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002bac:	f7ff fe82 	bl	80028b4 <HAL_GetTick>
 8002bb0:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d140      	bne.n	8002c3a <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002bb8:	e018      	b.n	8002bec <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002bba:	f7ff fe7b 	bl	80028b4 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d911      	bls.n	8002bec <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00a      	beq.n	8002bec <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	f043 0208 	orr.w	r2, r3, #8
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2203      	movs	r2, #3
 8002be6:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e0e9      	b.n	8002dc0 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bf2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1df      	bne.n	8002bba <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8002bfa:	2001      	movs	r0, #1
 8002bfc:	f7ff fe66 	bl	80028cc <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	68ba      	ldr	r2, [r7, #8]
 8002c06:	6992      	ldr	r2, [r2, #24]
 8002c08:	641a      	str	r2, [r3, #64]	@ 0x40
 8002c0a:	e023      	b.n	8002c54 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002c0c:	f7ff fe52 	bl	80028b4 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d90f      	bls.n	8002c3a <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	da0a      	bge.n	8002c3a <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	f043 0208 	orr.w	r2, r3, #8
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2203      	movs	r2, #3
 8002c34:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e0c2      	b.n	8002dc0 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	dbe3      	blt.n	8002c0c <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8002c44:	2001      	movs	r0, #1
 8002c46:	f7ff fe41 	bl	80028cc <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68ba      	ldr	r2, [r7, #8]
 8002c50:	6992      	ldr	r2, [r2, #24]
 8002c52:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f003 0310 	and.w	r3, r3, #16
 8002c60:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8002c64:	fa01 f303 	lsl.w	r3, r1, r3
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	ea02 0103 	and.w	r1, r2, r3
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	69da      	ldr	r2, [r3, #28]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f003 0310 	and.w	r3, r3, #16
 8002c78:	409a      	lsls	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f003 0310 	and.w	r3, r3, #16
 8002c8e:	21ff      	movs	r1, #255	@ 0xff
 8002c90:	fa01 f303 	lsl.w	r3, r1, r3
 8002c94:	43db      	mvns	r3, r3
 8002c96:	ea02 0103 	and.w	r1, r2, r3
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	6a1a      	ldr	r2, [r3, #32]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f003 0310 	and.w	r3, r3, #16
 8002ca4:	409a      	lsls	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	430a      	orrs	r2, r1
 8002cac:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d11d      	bne.n	8002cf2 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cbc:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f003 0310 	and.w	r3, r3, #16
 8002cc4:	221f      	movs	r2, #31
 8002cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cca:	43db      	mvns	r3, r3
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	4013      	ands	r3, r2
 8002cd0:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f003 0310 	and.w	r3, r3, #16
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cf8:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f003 0310 	and.w	r3, r3, #16
 8002d00:	2207      	movs	r2, #7
 8002d02:	fa02 f303 	lsl.w	r3, r2, r3
 8002d06:	43db      	mvns	r3, r3
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	431a      	orrs	r2, r3
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f003 0310 	and.w	r3, r3, #16
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	6819      	ldr	r1, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f003 0310 	and.w	r3, r3, #16
 8002d46:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4e:	43da      	mvns	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	400a      	ands	r2, r1
 8002d56:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f003 0310 	and.w	r3, r3, #16
 8002d66:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8002d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6e:	43db      	mvns	r3, r3
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	4013      	ands	r3, r2
 8002d74:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f003 0310 	and.w	r3, r3, #16
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	6819      	ldr	r1, [r3, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f003 0310 	and.w	r3, r3, #16
 8002da2:	22c0      	movs	r2, #192	@ 0xc0
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	43da      	mvns	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	400a      	ands	r2, r1
 8002db0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2201      	movs	r2, #1
 8002db6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3720      	adds	r7, #32
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d008      	beq.n	8002df2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2204      	movs	r2, #4
 8002de4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e022      	b.n	8002e38 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f022 020e 	bic.w	r2, r2, #14
 8002e00:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 0201 	bic.w	r2, r2, #1
 8002e10:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e16:	f003 021c 	and.w	r2, r3, #28
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e1e:	2101      	movs	r1, #1
 8002e20:	fa01 f202 	lsl.w	r2, r1, r2
 8002e24:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002e36:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3714      	adds	r7, #20
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d005      	beq.n	8002e68 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2204      	movs	r2, #4
 8002e60:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	73fb      	strb	r3, [r7, #15]
 8002e66:	e029      	b.n	8002ebc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f022 020e 	bic.w	r2, r2, #14
 8002e76:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 0201 	bic.w	r2, r2, #1
 8002e86:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e8c:	f003 021c 	and.w	r2, r3, #28
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e94:	2101      	movs	r1, #1
 8002e96:	fa01 f202 	lsl.w	r2, r1, r2
 8002e9a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d003      	beq.n	8002ebc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	4798      	blx	r3
    }
  }
  return status;
 8002ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3710      	adds	r7, #16
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
	...

08002ec8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b087      	sub	sp, #28
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ed6:	e166      	b.n	80031a6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	2101      	movs	r1, #1
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f000 8158 	beq.w	80031a0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f003 0303 	and.w	r3, r3, #3
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d005      	beq.n	8002f08 <HAL_GPIO_Init+0x40>
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f003 0303 	and.w	r3, r3, #3
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d130      	bne.n	8002f6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	2203      	movs	r2, #3
 8002f14:	fa02 f303 	lsl.w	r3, r2, r3
 8002f18:	43db      	mvns	r3, r3
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	68da      	ldr	r2, [r3, #12]
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2c:	693a      	ldr	r2, [r7, #16]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	693a      	ldr	r2, [r7, #16]
 8002f36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f3e:	2201      	movs	r2, #1
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	fa02 f303 	lsl.w	r3, r2, r3
 8002f46:	43db      	mvns	r3, r3
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	091b      	lsrs	r3, r3, #4
 8002f54:	f003 0201 	and.w	r2, r3, #1
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f003 0303 	and.w	r3, r3, #3
 8002f72:	2b03      	cmp	r3, #3
 8002f74:	d017      	beq.n	8002fa6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	2203      	movs	r2, #3
 8002f82:	fa02 f303 	lsl.w	r3, r2, r3
 8002f86:	43db      	mvns	r3, r3
 8002f88:	693a      	ldr	r2, [r7, #16]
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	689a      	ldr	r2, [r3, #8]
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f003 0303 	and.w	r3, r3, #3
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d123      	bne.n	8002ffa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	08da      	lsrs	r2, r3, #3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	3208      	adds	r2, #8
 8002fba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	f003 0307 	and.w	r3, r3, #7
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	220f      	movs	r2, #15
 8002fca:	fa02 f303 	lsl.w	r3, r2, r3
 8002fce:	43db      	mvns	r3, r3
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	691a      	ldr	r2, [r3, #16]
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	f003 0307 	and.w	r3, r3, #7
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	08da      	lsrs	r2, r3, #3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3208      	adds	r2, #8
 8002ff4:	6939      	ldr	r1, [r7, #16]
 8002ff6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	2203      	movs	r2, #3
 8003006:	fa02 f303 	lsl.w	r3, r2, r3
 800300a:	43db      	mvns	r3, r3
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	4013      	ands	r3, r2
 8003010:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f003 0203 	and.w	r2, r3, #3
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	fa02 f303 	lsl.w	r3, r2, r3
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	4313      	orrs	r3, r2
 8003026:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003036:	2b00      	cmp	r3, #0
 8003038:	f000 80b2 	beq.w	80031a0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800303c:	4b61      	ldr	r3, [pc, #388]	@ (80031c4 <HAL_GPIO_Init+0x2fc>)
 800303e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003040:	4a60      	ldr	r2, [pc, #384]	@ (80031c4 <HAL_GPIO_Init+0x2fc>)
 8003042:	f043 0301 	orr.w	r3, r3, #1
 8003046:	6613      	str	r3, [r2, #96]	@ 0x60
 8003048:	4b5e      	ldr	r3, [pc, #376]	@ (80031c4 <HAL_GPIO_Init+0x2fc>)
 800304a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	60bb      	str	r3, [r7, #8]
 8003052:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003054:	4a5c      	ldr	r2, [pc, #368]	@ (80031c8 <HAL_GPIO_Init+0x300>)
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	089b      	lsrs	r3, r3, #2
 800305a:	3302      	adds	r3, #2
 800305c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003060:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	f003 0303 	and.w	r3, r3, #3
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	220f      	movs	r2, #15
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	43db      	mvns	r3, r3
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	4013      	ands	r3, r2
 8003076:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800307e:	d02b      	beq.n	80030d8 <HAL_GPIO_Init+0x210>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4a52      	ldr	r2, [pc, #328]	@ (80031cc <HAL_GPIO_Init+0x304>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d025      	beq.n	80030d4 <HAL_GPIO_Init+0x20c>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a51      	ldr	r2, [pc, #324]	@ (80031d0 <HAL_GPIO_Init+0x308>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d01f      	beq.n	80030d0 <HAL_GPIO_Init+0x208>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a50      	ldr	r2, [pc, #320]	@ (80031d4 <HAL_GPIO_Init+0x30c>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d019      	beq.n	80030cc <HAL_GPIO_Init+0x204>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4a4f      	ldr	r2, [pc, #316]	@ (80031d8 <HAL_GPIO_Init+0x310>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d013      	beq.n	80030c8 <HAL_GPIO_Init+0x200>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4a4e      	ldr	r2, [pc, #312]	@ (80031dc <HAL_GPIO_Init+0x314>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d00d      	beq.n	80030c4 <HAL_GPIO_Init+0x1fc>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a4d      	ldr	r2, [pc, #308]	@ (80031e0 <HAL_GPIO_Init+0x318>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d007      	beq.n	80030c0 <HAL_GPIO_Init+0x1f8>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a4c      	ldr	r2, [pc, #304]	@ (80031e4 <HAL_GPIO_Init+0x31c>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d101      	bne.n	80030bc <HAL_GPIO_Init+0x1f4>
 80030b8:	2307      	movs	r3, #7
 80030ba:	e00e      	b.n	80030da <HAL_GPIO_Init+0x212>
 80030bc:	2308      	movs	r3, #8
 80030be:	e00c      	b.n	80030da <HAL_GPIO_Init+0x212>
 80030c0:	2306      	movs	r3, #6
 80030c2:	e00a      	b.n	80030da <HAL_GPIO_Init+0x212>
 80030c4:	2305      	movs	r3, #5
 80030c6:	e008      	b.n	80030da <HAL_GPIO_Init+0x212>
 80030c8:	2304      	movs	r3, #4
 80030ca:	e006      	b.n	80030da <HAL_GPIO_Init+0x212>
 80030cc:	2303      	movs	r3, #3
 80030ce:	e004      	b.n	80030da <HAL_GPIO_Init+0x212>
 80030d0:	2302      	movs	r3, #2
 80030d2:	e002      	b.n	80030da <HAL_GPIO_Init+0x212>
 80030d4:	2301      	movs	r3, #1
 80030d6:	e000      	b.n	80030da <HAL_GPIO_Init+0x212>
 80030d8:	2300      	movs	r3, #0
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	f002 0203 	and.w	r2, r2, #3
 80030e0:	0092      	lsls	r2, r2, #2
 80030e2:	4093      	lsls	r3, r2
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80030ea:	4937      	ldr	r1, [pc, #220]	@ (80031c8 <HAL_GPIO_Init+0x300>)
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	089b      	lsrs	r3, r3, #2
 80030f0:	3302      	adds	r3, #2
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80030f8:	4b3b      	ldr	r3, [pc, #236]	@ (80031e8 <HAL_GPIO_Init+0x320>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	43db      	mvns	r3, r3
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	4013      	ands	r3, r2
 8003106:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d003      	beq.n	800311c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	4313      	orrs	r3, r2
 800311a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800311c:	4a32      	ldr	r2, [pc, #200]	@ (80031e8 <HAL_GPIO_Init+0x320>)
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003122:	4b31      	ldr	r3, [pc, #196]	@ (80031e8 <HAL_GPIO_Init+0x320>)
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	43db      	mvns	r3, r3
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	4013      	ands	r3, r2
 8003130:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d003      	beq.n	8003146 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	4313      	orrs	r3, r2
 8003144:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003146:	4a28      	ldr	r2, [pc, #160]	@ (80031e8 <HAL_GPIO_Init+0x320>)
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800314c:	4b26      	ldr	r3, [pc, #152]	@ (80031e8 <HAL_GPIO_Init+0x320>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	43db      	mvns	r3, r3
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	4013      	ands	r3, r2
 800315a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d003      	beq.n	8003170 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003168:	693a      	ldr	r2, [r7, #16]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	4313      	orrs	r3, r2
 800316e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003170:	4a1d      	ldr	r2, [pc, #116]	@ (80031e8 <HAL_GPIO_Init+0x320>)
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003176:	4b1c      	ldr	r3, [pc, #112]	@ (80031e8 <HAL_GPIO_Init+0x320>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	43db      	mvns	r3, r3
 8003180:	693a      	ldr	r2, [r7, #16]
 8003182:	4013      	ands	r3, r2
 8003184:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d003      	beq.n	800319a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	4313      	orrs	r3, r2
 8003198:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800319a:	4a13      	ldr	r2, [pc, #76]	@ (80031e8 <HAL_GPIO_Init+0x320>)
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	3301      	adds	r3, #1
 80031a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	fa22 f303 	lsr.w	r3, r2, r3
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f47f ae91 	bne.w	8002ed8 <HAL_GPIO_Init+0x10>
  }
}
 80031b6:	bf00      	nop
 80031b8:	bf00      	nop
 80031ba:	371c      	adds	r7, #28
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr
 80031c4:	40021000 	.word	0x40021000
 80031c8:	40010000 	.word	0x40010000
 80031cc:	48000400 	.word	0x48000400
 80031d0:	48000800 	.word	0x48000800
 80031d4:	48000c00 	.word	0x48000c00
 80031d8:	48001000 	.word	0x48001000
 80031dc:	48001400 	.word	0x48001400
 80031e0:	48001800 	.word	0x48001800
 80031e4:	48001c00 	.word	0x48001c00
 80031e8:	40010400 	.word	0x40010400

080031ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	460b      	mov	r3, r1
 80031f6:	807b      	strh	r3, [r7, #2]
 80031f8:	4613      	mov	r3, r2
 80031fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031fc:	787b      	ldrb	r3, [r7, #1]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d003      	beq.n	800320a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003202:	887a      	ldrh	r2, [r7, #2]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003208:	e002      	b.n	8003210 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800320a:	887a      	ldrh	r2, [r7, #2]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	460b      	mov	r3, r1
 8003226:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800322e:	887a      	ldrh	r2, [r7, #2]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	4013      	ands	r3, r2
 8003234:	041a      	lsls	r2, r3, #16
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	43d9      	mvns	r1, r3
 800323a:	887b      	ldrh	r3, [r7, #2]
 800323c:	400b      	ands	r3, r1
 800323e:	431a      	orrs	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	619a      	str	r2, [r3, #24]
}
 8003244:	bf00      	nop
 8003246:	3714      	adds	r7, #20
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003252:	b08f      	sub	sp, #60	@ 0x3c
 8003254:	af0a      	add	r7, sp, #40	@ 0x28
 8003256:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d101      	bne.n	8003262 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e116      	b.n	8003490 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 800326e:	b2db      	uxtb	r3, r3
 8003270:	2b00      	cmp	r3, #0
 8003272:	d106      	bne.n	8003282 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f7ff f9eb 	bl	8002658 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2203      	movs	r2, #3
 8003286:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800328e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003292:	2b00      	cmp	r3, #0
 8003294:	d102      	bne.n	800329c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f003 f925 	bl	80064f0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	603b      	str	r3, [r7, #0]
 80032ac:	687e      	ldr	r6, [r7, #4]
 80032ae:	466d      	mov	r5, sp
 80032b0:	f106 0410 	add.w	r4, r6, #16
 80032b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80032c0:	e885 0003 	stmia.w	r5, {r0, r1}
 80032c4:	1d33      	adds	r3, r6, #4
 80032c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032c8:	6838      	ldr	r0, [r7, #0]
 80032ca:	f003 f8e5 	bl	8006498 <USB_CoreInit>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d005      	beq.n	80032e0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2202      	movs	r2, #2
 80032d8:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e0d7      	b.n	8003490 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2100      	movs	r1, #0
 80032e6:	4618      	mov	r0, r3
 80032e8:	f003 f913 	bl	8006512 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032ec:	2300      	movs	r3, #0
 80032ee:	73fb      	strb	r3, [r7, #15]
 80032f0:	e04a      	b.n	8003388 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80032f2:	7bfa      	ldrb	r2, [r7, #15]
 80032f4:	6879      	ldr	r1, [r7, #4]
 80032f6:	4613      	mov	r3, r2
 80032f8:	00db      	lsls	r3, r3, #3
 80032fa:	4413      	add	r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	440b      	add	r3, r1
 8003300:	333d      	adds	r3, #61	@ 0x3d
 8003302:	2201      	movs	r2, #1
 8003304:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003306:	7bfa      	ldrb	r2, [r7, #15]
 8003308:	6879      	ldr	r1, [r7, #4]
 800330a:	4613      	mov	r3, r2
 800330c:	00db      	lsls	r3, r3, #3
 800330e:	4413      	add	r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	440b      	add	r3, r1
 8003314:	333c      	adds	r3, #60	@ 0x3c
 8003316:	7bfa      	ldrb	r2, [r7, #15]
 8003318:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 800331a:	7bfa      	ldrb	r2, [r7, #15]
 800331c:	7bfb      	ldrb	r3, [r7, #15]
 800331e:	b298      	uxth	r0, r3
 8003320:	6879      	ldr	r1, [r7, #4]
 8003322:	4613      	mov	r3, r2
 8003324:	00db      	lsls	r3, r3, #3
 8003326:	4413      	add	r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	440b      	add	r3, r1
 800332c:	3356      	adds	r3, #86	@ 0x56
 800332e:	4602      	mov	r2, r0
 8003330:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003332:	7bfa      	ldrb	r2, [r7, #15]
 8003334:	6879      	ldr	r1, [r7, #4]
 8003336:	4613      	mov	r3, r2
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	4413      	add	r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	440b      	add	r3, r1
 8003340:	3340      	adds	r3, #64	@ 0x40
 8003342:	2200      	movs	r2, #0
 8003344:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003346:	7bfa      	ldrb	r2, [r7, #15]
 8003348:	6879      	ldr	r1, [r7, #4]
 800334a:	4613      	mov	r3, r2
 800334c:	00db      	lsls	r3, r3, #3
 800334e:	4413      	add	r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	440b      	add	r3, r1
 8003354:	3344      	adds	r3, #68	@ 0x44
 8003356:	2200      	movs	r2, #0
 8003358:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800335a:	7bfa      	ldrb	r2, [r7, #15]
 800335c:	6879      	ldr	r1, [r7, #4]
 800335e:	4613      	mov	r3, r2
 8003360:	00db      	lsls	r3, r3, #3
 8003362:	4413      	add	r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	440b      	add	r3, r1
 8003368:	3348      	adds	r3, #72	@ 0x48
 800336a:	2200      	movs	r2, #0
 800336c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800336e:	7bfa      	ldrb	r2, [r7, #15]
 8003370:	6879      	ldr	r1, [r7, #4]
 8003372:	4613      	mov	r3, r2
 8003374:	00db      	lsls	r3, r3, #3
 8003376:	4413      	add	r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	440b      	add	r3, r1
 800337c:	334c      	adds	r3, #76	@ 0x4c
 800337e:	2200      	movs	r2, #0
 8003380:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003382:	7bfb      	ldrb	r3, [r7, #15]
 8003384:	3301      	adds	r3, #1
 8003386:	73fb      	strb	r3, [r7, #15]
 8003388:	7bfa      	ldrb	r2, [r7, #15]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	429a      	cmp	r2, r3
 8003390:	d3af      	bcc.n	80032f2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003392:	2300      	movs	r3, #0
 8003394:	73fb      	strb	r3, [r7, #15]
 8003396:	e044      	b.n	8003422 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003398:	7bfa      	ldrb	r2, [r7, #15]
 800339a:	6879      	ldr	r1, [r7, #4]
 800339c:	4613      	mov	r3, r2
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	4413      	add	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	440b      	add	r3, r1
 80033a6:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 80033aa:	2200      	movs	r2, #0
 80033ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80033ae:	7bfa      	ldrb	r2, [r7, #15]
 80033b0:	6879      	ldr	r1, [r7, #4]
 80033b2:	4613      	mov	r3, r2
 80033b4:	00db      	lsls	r3, r3, #3
 80033b6:	4413      	add	r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	440b      	add	r3, r1
 80033bc:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 80033c0:	7bfa      	ldrb	r2, [r7, #15]
 80033c2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80033c4:	7bfa      	ldrb	r2, [r7, #15]
 80033c6:	6879      	ldr	r1, [r7, #4]
 80033c8:	4613      	mov	r3, r2
 80033ca:	00db      	lsls	r3, r3, #3
 80033cc:	4413      	add	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	440b      	add	r3, r1
 80033d2:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80033d6:	2200      	movs	r2, #0
 80033d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80033da:	7bfa      	ldrb	r2, [r7, #15]
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	4613      	mov	r3, r2
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	4413      	add	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	440b      	add	r3, r1
 80033e8:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 80033ec:	2200      	movs	r2, #0
 80033ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80033f0:	7bfa      	ldrb	r2, [r7, #15]
 80033f2:	6879      	ldr	r1, [r7, #4]
 80033f4:	4613      	mov	r3, r2
 80033f6:	00db      	lsls	r3, r3, #3
 80033f8:	4413      	add	r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	440b      	add	r3, r1
 80033fe:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8003402:	2200      	movs	r2, #0
 8003404:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003406:	7bfa      	ldrb	r2, [r7, #15]
 8003408:	6879      	ldr	r1, [r7, #4]
 800340a:	4613      	mov	r3, r2
 800340c:	00db      	lsls	r3, r3, #3
 800340e:	4413      	add	r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	440b      	add	r3, r1
 8003414:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8003418:	2200      	movs	r2, #0
 800341a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800341c:	7bfb      	ldrb	r3, [r7, #15]
 800341e:	3301      	adds	r3, #1
 8003420:	73fb      	strb	r3, [r7, #15]
 8003422:	7bfa      	ldrb	r2, [r7, #15]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	429a      	cmp	r2, r3
 800342a:	d3b5      	bcc.n	8003398 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	603b      	str	r3, [r7, #0]
 8003432:	687e      	ldr	r6, [r7, #4]
 8003434:	466d      	mov	r5, sp
 8003436:	f106 0410 	add.w	r4, r6, #16
 800343a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800343c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800343e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003440:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003442:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003446:	e885 0003 	stmia.w	r5, {r0, r1}
 800344a:	1d33      	adds	r3, r6, #4
 800344c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800344e:	6838      	ldr	r0, [r7, #0]
 8003450:	f003 f8ac 	bl	80065ac <USB_DevInit>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d005      	beq.n	8003466 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2202      	movs	r2, #2
 800345e:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e014      	b.n	8003490 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2201      	movs	r2, #1
 8003472:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800347a:	2b01      	cmp	r3, #1
 800347c:	d102      	bne.n	8003484 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 f80a 	bl	8003498 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4618      	mov	r0, r3
 800348a:	f003 fa4e 	bl	800692a <USB_DevDisconnect>

  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3714      	adds	r7, #20
 8003494:	46bd      	mov	sp, r7
 8003496:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003498 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2201      	movs	r2, #1
 80034aa:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034ca:	f043 0303 	orr.w	r3, r3, #3
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3714      	adds	r7, #20
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80034e4:	4b04      	ldr	r3, [pc, #16]	@ (80034f8 <HAL_PWREx_GetVoltageRange+0x18>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	40007000 	.word	0x40007000

080034fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800350a:	d130      	bne.n	800356e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800350c:	4b23      	ldr	r3, [pc, #140]	@ (800359c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003514:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003518:	d038      	beq.n	800358c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800351a:	4b20      	ldr	r3, [pc, #128]	@ (800359c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003522:	4a1e      	ldr	r2, [pc, #120]	@ (800359c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003524:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003528:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800352a:	4b1d      	ldr	r3, [pc, #116]	@ (80035a0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2232      	movs	r2, #50	@ 0x32
 8003530:	fb02 f303 	mul.w	r3, r2, r3
 8003534:	4a1b      	ldr	r2, [pc, #108]	@ (80035a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003536:	fba2 2303 	umull	r2, r3, r2, r3
 800353a:	0c9b      	lsrs	r3, r3, #18
 800353c:	3301      	adds	r3, #1
 800353e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003540:	e002      	b.n	8003548 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	3b01      	subs	r3, #1
 8003546:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003548:	4b14      	ldr	r3, [pc, #80]	@ (800359c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800354a:	695b      	ldr	r3, [r3, #20]
 800354c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003550:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003554:	d102      	bne.n	800355c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1f2      	bne.n	8003542 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800355c:	4b0f      	ldr	r3, [pc, #60]	@ (800359c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800355e:	695b      	ldr	r3, [r3, #20]
 8003560:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003564:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003568:	d110      	bne.n	800358c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e00f      	b.n	800358e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800356e:	4b0b      	ldr	r3, [pc, #44]	@ (800359c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003576:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800357a:	d007      	beq.n	800358c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800357c:	4b07      	ldr	r3, [pc, #28]	@ (800359c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003584:	4a05      	ldr	r2, [pc, #20]	@ (800359c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003586:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800358a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3714      	adds	r7, #20
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	40007000 	.word	0x40007000
 80035a0:	20000180 	.word	0x20000180
 80035a4:	431bde83 	.word	0x431bde83

080035a8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80035a8:	b480      	push	{r7}
 80035aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80035ac:	4b05      	ldr	r3, [pc, #20]	@ (80035c4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	4a04      	ldr	r2, [pc, #16]	@ (80035c4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80035b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80035b6:	6053      	str	r3, [r2, #4]
}
 80035b8:	bf00      	nop
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	40007000 	.word	0x40007000

080035c8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b088      	sub	sp, #32
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d102      	bne.n	80035dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	f000 bc08 	b.w	8003dec <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035dc:	4b96      	ldr	r3, [pc, #600]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	f003 030c 	and.w	r3, r3, #12
 80035e4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035e6:	4b94      	ldr	r3, [pc, #592]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	f003 0303 	and.w	r3, r3, #3
 80035ee:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0310 	and.w	r3, r3, #16
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	f000 80e4 	beq.w	80037c6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d007      	beq.n	8003614 <HAL_RCC_OscConfig+0x4c>
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	2b0c      	cmp	r3, #12
 8003608:	f040 808b 	bne.w	8003722 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	2b01      	cmp	r3, #1
 8003610:	f040 8087 	bne.w	8003722 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003614:	4b88      	ldr	r3, [pc, #544]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0302 	and.w	r3, r3, #2
 800361c:	2b00      	cmp	r3, #0
 800361e:	d005      	beq.n	800362c <HAL_RCC_OscConfig+0x64>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d101      	bne.n	800362c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e3df      	b.n	8003dec <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a1a      	ldr	r2, [r3, #32]
 8003630:	4b81      	ldr	r3, [pc, #516]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0308 	and.w	r3, r3, #8
 8003638:	2b00      	cmp	r3, #0
 800363a:	d004      	beq.n	8003646 <HAL_RCC_OscConfig+0x7e>
 800363c:	4b7e      	ldr	r3, [pc, #504]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003644:	e005      	b.n	8003652 <HAL_RCC_OscConfig+0x8a>
 8003646:	4b7c      	ldr	r3, [pc, #496]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 8003648:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800364c:	091b      	lsrs	r3, r3, #4
 800364e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003652:	4293      	cmp	r3, r2
 8003654:	d223      	bcs.n	800369e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	4618      	mov	r0, r3
 800365c:	f000 fd92 	bl	8004184 <RCC_SetFlashLatencyFromMSIRange>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d001      	beq.n	800366a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e3c0      	b.n	8003dec <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800366a:	4b73      	ldr	r3, [pc, #460]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a72      	ldr	r2, [pc, #456]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 8003670:	f043 0308 	orr.w	r3, r3, #8
 8003674:	6013      	str	r3, [r2, #0]
 8003676:	4b70      	ldr	r3, [pc, #448]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	496d      	ldr	r1, [pc, #436]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 8003684:	4313      	orrs	r3, r2
 8003686:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003688:	4b6b      	ldr	r3, [pc, #428]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	69db      	ldr	r3, [r3, #28]
 8003694:	021b      	lsls	r3, r3, #8
 8003696:	4968      	ldr	r1, [pc, #416]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 8003698:	4313      	orrs	r3, r2
 800369a:	604b      	str	r3, [r1, #4]
 800369c:	e025      	b.n	80036ea <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800369e:	4b66      	ldr	r3, [pc, #408]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a65      	ldr	r2, [pc, #404]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 80036a4:	f043 0308 	orr.w	r3, r3, #8
 80036a8:	6013      	str	r3, [r2, #0]
 80036aa:	4b63      	ldr	r3, [pc, #396]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	4960      	ldr	r1, [pc, #384]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036bc:	4b5e      	ldr	r3, [pc, #376]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	69db      	ldr	r3, [r3, #28]
 80036c8:	021b      	lsls	r3, r3, #8
 80036ca:	495b      	ldr	r1, [pc, #364]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d109      	bne.n	80036ea <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a1b      	ldr	r3, [r3, #32]
 80036da:	4618      	mov	r0, r3
 80036dc:	f000 fd52 	bl	8004184 <RCC_SetFlashLatencyFromMSIRange>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e380      	b.n	8003dec <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036ea:	f000 fc87 	bl	8003ffc <HAL_RCC_GetSysClockFreq>
 80036ee:	4602      	mov	r2, r0
 80036f0:	4b51      	ldr	r3, [pc, #324]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	091b      	lsrs	r3, r3, #4
 80036f6:	f003 030f 	and.w	r3, r3, #15
 80036fa:	4950      	ldr	r1, [pc, #320]	@ (800383c <HAL_RCC_OscConfig+0x274>)
 80036fc:	5ccb      	ldrb	r3, [r1, r3]
 80036fe:	f003 031f 	and.w	r3, r3, #31
 8003702:	fa22 f303 	lsr.w	r3, r2, r3
 8003706:	4a4e      	ldr	r2, [pc, #312]	@ (8003840 <HAL_RCC_OscConfig+0x278>)
 8003708:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800370a:	4b4e      	ldr	r3, [pc, #312]	@ (8003844 <HAL_RCC_OscConfig+0x27c>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4618      	mov	r0, r3
 8003710:	f7ff f880 	bl	8002814 <HAL_InitTick>
 8003714:	4603      	mov	r3, r0
 8003716:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003718:	7bfb      	ldrb	r3, [r7, #15]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d052      	beq.n	80037c4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800371e:	7bfb      	ldrb	r3, [r7, #15]
 8003720:	e364      	b.n	8003dec <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d032      	beq.n	8003790 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800372a:	4b43      	ldr	r3, [pc, #268]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a42      	ldr	r2, [pc, #264]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 8003730:	f043 0301 	orr.w	r3, r3, #1
 8003734:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003736:	f7ff f8bd 	bl	80028b4 <HAL_GetTick>
 800373a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800373c:	e008      	b.n	8003750 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800373e:	f7ff f8b9 	bl	80028b4 <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	2b02      	cmp	r3, #2
 800374a:	d901      	bls.n	8003750 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e34d      	b.n	8003dec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003750:	4b39      	ldr	r3, [pc, #228]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0302 	and.w	r3, r3, #2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d0f0      	beq.n	800373e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800375c:	4b36      	ldr	r3, [pc, #216]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a35      	ldr	r2, [pc, #212]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 8003762:	f043 0308 	orr.w	r3, r3, #8
 8003766:	6013      	str	r3, [r2, #0]
 8003768:	4b33      	ldr	r3, [pc, #204]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a1b      	ldr	r3, [r3, #32]
 8003774:	4930      	ldr	r1, [pc, #192]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 8003776:	4313      	orrs	r3, r2
 8003778:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800377a:	4b2f      	ldr	r3, [pc, #188]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	69db      	ldr	r3, [r3, #28]
 8003786:	021b      	lsls	r3, r3, #8
 8003788:	492b      	ldr	r1, [pc, #172]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 800378a:	4313      	orrs	r3, r2
 800378c:	604b      	str	r3, [r1, #4]
 800378e:	e01a      	b.n	80037c6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003790:	4b29      	ldr	r3, [pc, #164]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a28      	ldr	r2, [pc, #160]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 8003796:	f023 0301 	bic.w	r3, r3, #1
 800379a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800379c:	f7ff f88a 	bl	80028b4 <HAL_GetTick>
 80037a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80037a2:	e008      	b.n	80037b6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80037a4:	f7ff f886 	bl	80028b4 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d901      	bls.n	80037b6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e31a      	b.n	8003dec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80037b6:	4b20      	ldr	r3, [pc, #128]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1f0      	bne.n	80037a4 <HAL_RCC_OscConfig+0x1dc>
 80037c2:	e000      	b.n	80037c6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80037c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d073      	beq.n	80038ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	2b08      	cmp	r3, #8
 80037d6:	d005      	beq.n	80037e4 <HAL_RCC_OscConfig+0x21c>
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	2b0c      	cmp	r3, #12
 80037dc:	d10e      	bne.n	80037fc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	2b03      	cmp	r3, #3
 80037e2:	d10b      	bne.n	80037fc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037e4:	4b14      	ldr	r3, [pc, #80]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d063      	beq.n	80038b8 <HAL_RCC_OscConfig+0x2f0>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d15f      	bne.n	80038b8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e2f7      	b.n	8003dec <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003804:	d106      	bne.n	8003814 <HAL_RCC_OscConfig+0x24c>
 8003806:	4b0c      	ldr	r3, [pc, #48]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a0b      	ldr	r2, [pc, #44]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 800380c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003810:	6013      	str	r3, [r2, #0]
 8003812:	e025      	b.n	8003860 <HAL_RCC_OscConfig+0x298>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800381c:	d114      	bne.n	8003848 <HAL_RCC_OscConfig+0x280>
 800381e:	4b06      	ldr	r3, [pc, #24]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a05      	ldr	r2, [pc, #20]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 8003824:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003828:	6013      	str	r3, [r2, #0]
 800382a:	4b03      	ldr	r3, [pc, #12]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a02      	ldr	r2, [pc, #8]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 8003830:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003834:	6013      	str	r3, [r2, #0]
 8003836:	e013      	b.n	8003860 <HAL_RCC_OscConfig+0x298>
 8003838:	40021000 	.word	0x40021000
 800383c:	080098fc 	.word	0x080098fc
 8003840:	20000180 	.word	0x20000180
 8003844:	20000184 	.word	0x20000184
 8003848:	4ba0      	ldr	r3, [pc, #640]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a9f      	ldr	r2, [pc, #636]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 800384e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003852:	6013      	str	r3, [r2, #0]
 8003854:	4b9d      	ldr	r3, [pc, #628]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a9c      	ldr	r2, [pc, #624]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 800385a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800385e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d013      	beq.n	8003890 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003868:	f7ff f824 	bl	80028b4 <HAL_GetTick>
 800386c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800386e:	e008      	b.n	8003882 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003870:	f7ff f820 	bl	80028b4 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b64      	cmp	r3, #100	@ 0x64
 800387c:	d901      	bls.n	8003882 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e2b4      	b.n	8003dec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003882:	4b92      	ldr	r3, [pc, #584]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d0f0      	beq.n	8003870 <HAL_RCC_OscConfig+0x2a8>
 800388e:	e014      	b.n	80038ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003890:	f7ff f810 	bl	80028b4 <HAL_GetTick>
 8003894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003896:	e008      	b.n	80038aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003898:	f7ff f80c 	bl	80028b4 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	2b64      	cmp	r3, #100	@ 0x64
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e2a0      	b.n	8003dec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038aa:	4b88      	ldr	r3, [pc, #544]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1f0      	bne.n	8003898 <HAL_RCC_OscConfig+0x2d0>
 80038b6:	e000      	b.n	80038ba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d060      	beq.n	8003988 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	2b04      	cmp	r3, #4
 80038ca:	d005      	beq.n	80038d8 <HAL_RCC_OscConfig+0x310>
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	2b0c      	cmp	r3, #12
 80038d0:	d119      	bne.n	8003906 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d116      	bne.n	8003906 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038d8:	4b7c      	ldr	r3, [pc, #496]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d005      	beq.n	80038f0 <HAL_RCC_OscConfig+0x328>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d101      	bne.n	80038f0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e27d      	b.n	8003dec <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038f0:	4b76      	ldr	r3, [pc, #472]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	061b      	lsls	r3, r3, #24
 80038fe:	4973      	ldr	r1, [pc, #460]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 8003900:	4313      	orrs	r3, r2
 8003902:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003904:	e040      	b.n	8003988 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d023      	beq.n	8003956 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800390e:	4b6f      	ldr	r3, [pc, #444]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a6e      	ldr	r2, [pc, #440]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 8003914:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003918:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800391a:	f7fe ffcb 	bl	80028b4 <HAL_GetTick>
 800391e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003920:	e008      	b.n	8003934 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003922:	f7fe ffc7 	bl	80028b4 <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	2b02      	cmp	r3, #2
 800392e:	d901      	bls.n	8003934 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e25b      	b.n	8003dec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003934:	4b65      	ldr	r3, [pc, #404]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800393c:	2b00      	cmp	r3, #0
 800393e:	d0f0      	beq.n	8003922 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003940:	4b62      	ldr	r3, [pc, #392]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	061b      	lsls	r3, r3, #24
 800394e:	495f      	ldr	r1, [pc, #380]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 8003950:	4313      	orrs	r3, r2
 8003952:	604b      	str	r3, [r1, #4]
 8003954:	e018      	b.n	8003988 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003956:	4b5d      	ldr	r3, [pc, #372]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a5c      	ldr	r2, [pc, #368]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 800395c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003960:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003962:	f7fe ffa7 	bl	80028b4 <HAL_GetTick>
 8003966:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003968:	e008      	b.n	800397c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800396a:	f7fe ffa3 	bl	80028b4 <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	2b02      	cmp	r3, #2
 8003976:	d901      	bls.n	800397c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e237      	b.n	8003dec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800397c:	4b53      	ldr	r3, [pc, #332]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1f0      	bne.n	800396a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0308 	and.w	r3, r3, #8
 8003990:	2b00      	cmp	r3, #0
 8003992:	d03c      	beq.n	8003a0e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	695b      	ldr	r3, [r3, #20]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d01c      	beq.n	80039d6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800399c:	4b4b      	ldr	r3, [pc, #300]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 800399e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039a2:	4a4a      	ldr	r2, [pc, #296]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 80039a4:	f043 0301 	orr.w	r3, r3, #1
 80039a8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ac:	f7fe ff82 	bl	80028b4 <HAL_GetTick>
 80039b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039b2:	e008      	b.n	80039c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039b4:	f7fe ff7e 	bl	80028b4 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e212      	b.n	8003dec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039c6:	4b41      	ldr	r3, [pc, #260]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 80039c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d0ef      	beq.n	80039b4 <HAL_RCC_OscConfig+0x3ec>
 80039d4:	e01b      	b.n	8003a0e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039d6:	4b3d      	ldr	r3, [pc, #244]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 80039d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039dc:	4a3b      	ldr	r2, [pc, #236]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 80039de:	f023 0301 	bic.w	r3, r3, #1
 80039e2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039e6:	f7fe ff65 	bl	80028b4 <HAL_GetTick>
 80039ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039ec:	e008      	b.n	8003a00 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039ee:	f7fe ff61 	bl	80028b4 <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d901      	bls.n	8003a00 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e1f5      	b.n	8003dec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a00:	4b32      	ldr	r3, [pc, #200]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 8003a02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1ef      	bne.n	80039ee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0304 	and.w	r3, r3, #4
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	f000 80a6 	beq.w	8003b68 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003a20:	4b2a      	ldr	r3, [pc, #168]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 8003a22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d10d      	bne.n	8003a48 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a2c:	4b27      	ldr	r3, [pc, #156]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 8003a2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a30:	4a26      	ldr	r2, [pc, #152]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 8003a32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a36:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a38:	4b24      	ldr	r3, [pc, #144]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 8003a3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a40:	60bb      	str	r3, [r7, #8]
 8003a42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a44:	2301      	movs	r3, #1
 8003a46:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a48:	4b21      	ldr	r3, [pc, #132]	@ (8003ad0 <HAL_RCC_OscConfig+0x508>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d118      	bne.n	8003a86 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a54:	4b1e      	ldr	r3, [pc, #120]	@ (8003ad0 <HAL_RCC_OscConfig+0x508>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a1d      	ldr	r2, [pc, #116]	@ (8003ad0 <HAL_RCC_OscConfig+0x508>)
 8003a5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a5e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a60:	f7fe ff28 	bl	80028b4 <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a66:	e008      	b.n	8003a7a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a68:	f7fe ff24 	bl	80028b4 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e1b8      	b.n	8003dec <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a7a:	4b15      	ldr	r3, [pc, #84]	@ (8003ad0 <HAL_RCC_OscConfig+0x508>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d0f0      	beq.n	8003a68 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d108      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x4d8>
 8003a8e:	4b0f      	ldr	r3, [pc, #60]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 8003a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a94:	4a0d      	ldr	r2, [pc, #52]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 8003a96:	f043 0301 	orr.w	r3, r3, #1
 8003a9a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a9e:	e029      	b.n	8003af4 <HAL_RCC_OscConfig+0x52c>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	2b05      	cmp	r3, #5
 8003aa6:	d115      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x50c>
 8003aa8:	4b08      	ldr	r3, [pc, #32]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 8003aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aae:	4a07      	ldr	r2, [pc, #28]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 8003ab0:	f043 0304 	orr.w	r3, r3, #4
 8003ab4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ab8:	4b04      	ldr	r3, [pc, #16]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 8003aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003abe:	4a03      	ldr	r2, [pc, #12]	@ (8003acc <HAL_RCC_OscConfig+0x504>)
 8003ac0:	f043 0301 	orr.w	r3, r3, #1
 8003ac4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ac8:	e014      	b.n	8003af4 <HAL_RCC_OscConfig+0x52c>
 8003aca:	bf00      	nop
 8003acc:	40021000 	.word	0x40021000
 8003ad0:	40007000 	.word	0x40007000
 8003ad4:	4b9d      	ldr	r3, [pc, #628]	@ (8003d4c <HAL_RCC_OscConfig+0x784>)
 8003ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ada:	4a9c      	ldr	r2, [pc, #624]	@ (8003d4c <HAL_RCC_OscConfig+0x784>)
 8003adc:	f023 0301 	bic.w	r3, r3, #1
 8003ae0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ae4:	4b99      	ldr	r3, [pc, #612]	@ (8003d4c <HAL_RCC_OscConfig+0x784>)
 8003ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aea:	4a98      	ldr	r2, [pc, #608]	@ (8003d4c <HAL_RCC_OscConfig+0x784>)
 8003aec:	f023 0304 	bic.w	r3, r3, #4
 8003af0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d016      	beq.n	8003b2a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003afc:	f7fe feda 	bl	80028b4 <HAL_GetTick>
 8003b00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b02:	e00a      	b.n	8003b1a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b04:	f7fe fed6 	bl	80028b4 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e168      	b.n	8003dec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b1a:	4b8c      	ldr	r3, [pc, #560]	@ (8003d4c <HAL_RCC_OscConfig+0x784>)
 8003b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d0ed      	beq.n	8003b04 <HAL_RCC_OscConfig+0x53c>
 8003b28:	e015      	b.n	8003b56 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b2a:	f7fe fec3 	bl	80028b4 <HAL_GetTick>
 8003b2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b30:	e00a      	b.n	8003b48 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b32:	f7fe febf 	bl	80028b4 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d901      	bls.n	8003b48 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e151      	b.n	8003dec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b48:	4b80      	ldr	r3, [pc, #512]	@ (8003d4c <HAL_RCC_OscConfig+0x784>)
 8003b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1ed      	bne.n	8003b32 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b56:	7ffb      	ldrb	r3, [r7, #31]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d105      	bne.n	8003b68 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b5c:	4b7b      	ldr	r3, [pc, #492]	@ (8003d4c <HAL_RCC_OscConfig+0x784>)
 8003b5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b60:	4a7a      	ldr	r2, [pc, #488]	@ (8003d4c <HAL_RCC_OscConfig+0x784>)
 8003b62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b66:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0320 	and.w	r3, r3, #32
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d03c      	beq.n	8003bee <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d01c      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b7c:	4b73      	ldr	r3, [pc, #460]	@ (8003d4c <HAL_RCC_OscConfig+0x784>)
 8003b7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b82:	4a72      	ldr	r2, [pc, #456]	@ (8003d4c <HAL_RCC_OscConfig+0x784>)
 8003b84:	f043 0301 	orr.w	r3, r3, #1
 8003b88:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b8c:	f7fe fe92 	bl	80028b4 <HAL_GetTick>
 8003b90:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b92:	e008      	b.n	8003ba6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b94:	f7fe fe8e 	bl	80028b4 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e122      	b.n	8003dec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ba6:	4b69      	ldr	r3, [pc, #420]	@ (8003d4c <HAL_RCC_OscConfig+0x784>)
 8003ba8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d0ef      	beq.n	8003b94 <HAL_RCC_OscConfig+0x5cc>
 8003bb4:	e01b      	b.n	8003bee <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003bb6:	4b65      	ldr	r3, [pc, #404]	@ (8003d4c <HAL_RCC_OscConfig+0x784>)
 8003bb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003bbc:	4a63      	ldr	r2, [pc, #396]	@ (8003d4c <HAL_RCC_OscConfig+0x784>)
 8003bbe:	f023 0301 	bic.w	r3, r3, #1
 8003bc2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bc6:	f7fe fe75 	bl	80028b4 <HAL_GetTick>
 8003bca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003bcc:	e008      	b.n	8003be0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bce:	f7fe fe71 	bl	80028b4 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d901      	bls.n	8003be0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e105      	b.n	8003dec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003be0:	4b5a      	ldr	r3, [pc, #360]	@ (8003d4c <HAL_RCC_OscConfig+0x784>)
 8003be2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1ef      	bne.n	8003bce <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	f000 80f9 	beq.w	8003dea <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	f040 80cf 	bne.w	8003da0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003c02:	4b52      	ldr	r3, [pc, #328]	@ (8003d4c <HAL_RCC_OscConfig+0x784>)
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	f003 0203 	and.w	r2, r3, #3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d12c      	bne.n	8003c70 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c20:	3b01      	subs	r3, #1
 8003c22:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d123      	bne.n	8003c70 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c32:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d11b      	bne.n	8003c70 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c42:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d113      	bne.n	8003c70 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c52:	085b      	lsrs	r3, r3, #1
 8003c54:	3b01      	subs	r3, #1
 8003c56:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d109      	bne.n	8003c70 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c66:	085b      	lsrs	r3, r3, #1
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d071      	beq.n	8003d54 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	2b0c      	cmp	r3, #12
 8003c74:	d068      	beq.n	8003d48 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003c76:	4b35      	ldr	r3, [pc, #212]	@ (8003d4c <HAL_RCC_OscConfig+0x784>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d105      	bne.n	8003c8e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003c82:	4b32      	ldr	r3, [pc, #200]	@ (8003d4c <HAL_RCC_OscConfig+0x784>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e0ac      	b.n	8003dec <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003c92:	4b2e      	ldr	r3, [pc, #184]	@ (8003d4c <HAL_RCC_OscConfig+0x784>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a2d      	ldr	r2, [pc, #180]	@ (8003d4c <HAL_RCC_OscConfig+0x784>)
 8003c98:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c9c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c9e:	f7fe fe09 	bl	80028b4 <HAL_GetTick>
 8003ca2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ca4:	e008      	b.n	8003cb8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ca6:	f7fe fe05 	bl	80028b4 <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d901      	bls.n	8003cb8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e099      	b.n	8003dec <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cb8:	4b24      	ldr	r3, [pc, #144]	@ (8003d4c <HAL_RCC_OscConfig+0x784>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1f0      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cc4:	4b21      	ldr	r3, [pc, #132]	@ (8003d4c <HAL_RCC_OscConfig+0x784>)
 8003cc6:	68da      	ldr	r2, [r3, #12]
 8003cc8:	4b21      	ldr	r3, [pc, #132]	@ (8003d50 <HAL_RCC_OscConfig+0x788>)
 8003cca:	4013      	ands	r3, r2
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003cd4:	3a01      	subs	r2, #1
 8003cd6:	0112      	lsls	r2, r2, #4
 8003cd8:	4311      	orrs	r1, r2
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003cde:	0212      	lsls	r2, r2, #8
 8003ce0:	4311      	orrs	r1, r2
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003ce6:	0852      	lsrs	r2, r2, #1
 8003ce8:	3a01      	subs	r2, #1
 8003cea:	0552      	lsls	r2, r2, #21
 8003cec:	4311      	orrs	r1, r2
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003cf2:	0852      	lsrs	r2, r2, #1
 8003cf4:	3a01      	subs	r2, #1
 8003cf6:	0652      	lsls	r2, r2, #25
 8003cf8:	4311      	orrs	r1, r2
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003cfe:	06d2      	lsls	r2, r2, #27
 8003d00:	430a      	orrs	r2, r1
 8003d02:	4912      	ldr	r1, [pc, #72]	@ (8003d4c <HAL_RCC_OscConfig+0x784>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003d08:	4b10      	ldr	r3, [pc, #64]	@ (8003d4c <HAL_RCC_OscConfig+0x784>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a0f      	ldr	r2, [pc, #60]	@ (8003d4c <HAL_RCC_OscConfig+0x784>)
 8003d0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d12:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d14:	4b0d      	ldr	r3, [pc, #52]	@ (8003d4c <HAL_RCC_OscConfig+0x784>)
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	4a0c      	ldr	r2, [pc, #48]	@ (8003d4c <HAL_RCC_OscConfig+0x784>)
 8003d1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d1e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d20:	f7fe fdc8 	bl	80028b4 <HAL_GetTick>
 8003d24:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d26:	e008      	b.n	8003d3a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d28:	f7fe fdc4 	bl	80028b4 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e058      	b.n	8003dec <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d3a:	4b04      	ldr	r3, [pc, #16]	@ (8003d4c <HAL_RCC_OscConfig+0x784>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d0f0      	beq.n	8003d28 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d46:	e050      	b.n	8003dea <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e04f      	b.n	8003dec <HAL_RCC_OscConfig+0x824>
 8003d4c:	40021000 	.word	0x40021000
 8003d50:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d54:	4b27      	ldr	r3, [pc, #156]	@ (8003df4 <HAL_RCC_OscConfig+0x82c>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d144      	bne.n	8003dea <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003d60:	4b24      	ldr	r3, [pc, #144]	@ (8003df4 <HAL_RCC_OscConfig+0x82c>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a23      	ldr	r2, [pc, #140]	@ (8003df4 <HAL_RCC_OscConfig+0x82c>)
 8003d66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d6a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d6c:	4b21      	ldr	r3, [pc, #132]	@ (8003df4 <HAL_RCC_OscConfig+0x82c>)
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	4a20      	ldr	r2, [pc, #128]	@ (8003df4 <HAL_RCC_OscConfig+0x82c>)
 8003d72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d76:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d78:	f7fe fd9c 	bl	80028b4 <HAL_GetTick>
 8003d7c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d7e:	e008      	b.n	8003d92 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d80:	f7fe fd98 	bl	80028b4 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e02c      	b.n	8003dec <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d92:	4b18      	ldr	r3, [pc, #96]	@ (8003df4 <HAL_RCC_OscConfig+0x82c>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d0f0      	beq.n	8003d80 <HAL_RCC_OscConfig+0x7b8>
 8003d9e:	e024      	b.n	8003dea <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	2b0c      	cmp	r3, #12
 8003da4:	d01f      	beq.n	8003de6 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003da6:	4b13      	ldr	r3, [pc, #76]	@ (8003df4 <HAL_RCC_OscConfig+0x82c>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a12      	ldr	r2, [pc, #72]	@ (8003df4 <HAL_RCC_OscConfig+0x82c>)
 8003dac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003db0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db2:	f7fe fd7f 	bl	80028b4 <HAL_GetTick>
 8003db6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003db8:	e008      	b.n	8003dcc <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dba:	f7fe fd7b 	bl	80028b4 <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d901      	bls.n	8003dcc <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e00f      	b.n	8003dec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dcc:	4b09      	ldr	r3, [pc, #36]	@ (8003df4 <HAL_RCC_OscConfig+0x82c>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d1f0      	bne.n	8003dba <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003dd8:	4b06      	ldr	r3, [pc, #24]	@ (8003df4 <HAL_RCC_OscConfig+0x82c>)
 8003dda:	68da      	ldr	r2, [r3, #12]
 8003ddc:	4905      	ldr	r1, [pc, #20]	@ (8003df4 <HAL_RCC_OscConfig+0x82c>)
 8003dde:	4b06      	ldr	r3, [pc, #24]	@ (8003df8 <HAL_RCC_OscConfig+0x830>)
 8003de0:	4013      	ands	r3, r2
 8003de2:	60cb      	str	r3, [r1, #12]
 8003de4:	e001      	b.n	8003dea <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e000      	b.n	8003dec <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3720      	adds	r7, #32
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	40021000 	.word	0x40021000
 8003df8:	feeefffc 	.word	0xfeeefffc

08003dfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d101      	bne.n	8003e10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e0e7      	b.n	8003fe0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e10:	4b75      	ldr	r3, [pc, #468]	@ (8003fe8 <HAL_RCC_ClockConfig+0x1ec>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0307 	and.w	r3, r3, #7
 8003e18:	683a      	ldr	r2, [r7, #0]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d910      	bls.n	8003e40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e1e:	4b72      	ldr	r3, [pc, #456]	@ (8003fe8 <HAL_RCC_ClockConfig+0x1ec>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f023 0207 	bic.w	r2, r3, #7
 8003e26:	4970      	ldr	r1, [pc, #448]	@ (8003fe8 <HAL_RCC_ClockConfig+0x1ec>)
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e2e:	4b6e      	ldr	r3, [pc, #440]	@ (8003fe8 <HAL_RCC_ClockConfig+0x1ec>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0307 	and.w	r3, r3, #7
 8003e36:	683a      	ldr	r2, [r7, #0]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d001      	beq.n	8003e40 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e0cf      	b.n	8003fe0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d010      	beq.n	8003e6e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689a      	ldr	r2, [r3, #8]
 8003e50:	4b66      	ldr	r3, [pc, #408]	@ (8003fec <HAL_RCC_ClockConfig+0x1f0>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d908      	bls.n	8003e6e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e5c:	4b63      	ldr	r3, [pc, #396]	@ (8003fec <HAL_RCC_ClockConfig+0x1f0>)
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	4960      	ldr	r1, [pc, #384]	@ (8003fec <HAL_RCC_ClockConfig+0x1f0>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d04c      	beq.n	8003f14 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	2b03      	cmp	r3, #3
 8003e80:	d107      	bne.n	8003e92 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e82:	4b5a      	ldr	r3, [pc, #360]	@ (8003fec <HAL_RCC_ClockConfig+0x1f0>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d121      	bne.n	8003ed2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e0a6      	b.n	8003fe0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d107      	bne.n	8003eaa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e9a:	4b54      	ldr	r3, [pc, #336]	@ (8003fec <HAL_RCC_ClockConfig+0x1f0>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d115      	bne.n	8003ed2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e09a      	b.n	8003fe0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d107      	bne.n	8003ec2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003eb2:	4b4e      	ldr	r3, [pc, #312]	@ (8003fec <HAL_RCC_ClockConfig+0x1f0>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0302 	and.w	r3, r3, #2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d109      	bne.n	8003ed2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e08e      	b.n	8003fe0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ec2:	4b4a      	ldr	r3, [pc, #296]	@ (8003fec <HAL_RCC_ClockConfig+0x1f0>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d101      	bne.n	8003ed2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e086      	b.n	8003fe0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ed2:	4b46      	ldr	r3, [pc, #280]	@ (8003fec <HAL_RCC_ClockConfig+0x1f0>)
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f023 0203 	bic.w	r2, r3, #3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	4943      	ldr	r1, [pc, #268]	@ (8003fec <HAL_RCC_ClockConfig+0x1f0>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ee4:	f7fe fce6 	bl	80028b4 <HAL_GetTick>
 8003ee8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eea:	e00a      	b.n	8003f02 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eec:	f7fe fce2 	bl	80028b4 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e06e      	b.n	8003fe0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f02:	4b3a      	ldr	r3, [pc, #232]	@ (8003fec <HAL_RCC_ClockConfig+0x1f0>)
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f003 020c 	and.w	r2, r3, #12
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d1eb      	bne.n	8003eec <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0302 	and.w	r3, r3, #2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d010      	beq.n	8003f42 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	689a      	ldr	r2, [r3, #8]
 8003f24:	4b31      	ldr	r3, [pc, #196]	@ (8003fec <HAL_RCC_ClockConfig+0x1f0>)
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d208      	bcs.n	8003f42 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f30:	4b2e      	ldr	r3, [pc, #184]	@ (8003fec <HAL_RCC_ClockConfig+0x1f0>)
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	492b      	ldr	r1, [pc, #172]	@ (8003fec <HAL_RCC_ClockConfig+0x1f0>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f42:	4b29      	ldr	r3, [pc, #164]	@ (8003fe8 <HAL_RCC_ClockConfig+0x1ec>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0307 	and.w	r3, r3, #7
 8003f4a:	683a      	ldr	r2, [r7, #0]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d210      	bcs.n	8003f72 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f50:	4b25      	ldr	r3, [pc, #148]	@ (8003fe8 <HAL_RCC_ClockConfig+0x1ec>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f023 0207 	bic.w	r2, r3, #7
 8003f58:	4923      	ldr	r1, [pc, #140]	@ (8003fe8 <HAL_RCC_ClockConfig+0x1ec>)
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f60:	4b21      	ldr	r3, [pc, #132]	@ (8003fe8 <HAL_RCC_ClockConfig+0x1ec>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0307 	and.w	r3, r3, #7
 8003f68:	683a      	ldr	r2, [r7, #0]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d001      	beq.n	8003f72 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e036      	b.n	8003fe0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0304 	and.w	r3, r3, #4
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d008      	beq.n	8003f90 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f7e:	4b1b      	ldr	r3, [pc, #108]	@ (8003fec <HAL_RCC_ClockConfig+0x1f0>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	4918      	ldr	r1, [pc, #96]	@ (8003fec <HAL_RCC_ClockConfig+0x1f0>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0308 	and.w	r3, r3, #8
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d009      	beq.n	8003fb0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f9c:	4b13      	ldr	r3, [pc, #76]	@ (8003fec <HAL_RCC_ClockConfig+0x1f0>)
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	00db      	lsls	r3, r3, #3
 8003faa:	4910      	ldr	r1, [pc, #64]	@ (8003fec <HAL_RCC_ClockConfig+0x1f0>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003fb0:	f000 f824 	bl	8003ffc <HAL_RCC_GetSysClockFreq>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8003fec <HAL_RCC_ClockConfig+0x1f0>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	091b      	lsrs	r3, r3, #4
 8003fbc:	f003 030f 	and.w	r3, r3, #15
 8003fc0:	490b      	ldr	r1, [pc, #44]	@ (8003ff0 <HAL_RCC_ClockConfig+0x1f4>)
 8003fc2:	5ccb      	ldrb	r3, [r1, r3]
 8003fc4:	f003 031f 	and.w	r3, r3, #31
 8003fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8003fcc:	4a09      	ldr	r2, [pc, #36]	@ (8003ff4 <HAL_RCC_ClockConfig+0x1f8>)
 8003fce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003fd0:	4b09      	ldr	r3, [pc, #36]	@ (8003ff8 <HAL_RCC_ClockConfig+0x1fc>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7fe fc1d 	bl	8002814 <HAL_InitTick>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	72fb      	strb	r3, [r7, #11]

  return status;
 8003fde:	7afb      	ldrb	r3, [r7, #11]
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	40022000 	.word	0x40022000
 8003fec:	40021000 	.word	0x40021000
 8003ff0:	080098fc 	.word	0x080098fc
 8003ff4:	20000180 	.word	0x20000180
 8003ff8:	20000184 	.word	0x20000184

08003ffc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b089      	sub	sp, #36	@ 0x24
 8004000:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004002:	2300      	movs	r3, #0
 8004004:	61fb      	str	r3, [r7, #28]
 8004006:	2300      	movs	r3, #0
 8004008:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800400a:	4b3e      	ldr	r3, [pc, #248]	@ (8004104 <HAL_RCC_GetSysClockFreq+0x108>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f003 030c 	and.w	r3, r3, #12
 8004012:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004014:	4b3b      	ldr	r3, [pc, #236]	@ (8004104 <HAL_RCC_GetSysClockFreq+0x108>)
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	f003 0303 	and.w	r3, r3, #3
 800401c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d005      	beq.n	8004030 <HAL_RCC_GetSysClockFreq+0x34>
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	2b0c      	cmp	r3, #12
 8004028:	d121      	bne.n	800406e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2b01      	cmp	r3, #1
 800402e:	d11e      	bne.n	800406e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004030:	4b34      	ldr	r3, [pc, #208]	@ (8004104 <HAL_RCC_GetSysClockFreq+0x108>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0308 	and.w	r3, r3, #8
 8004038:	2b00      	cmp	r3, #0
 800403a:	d107      	bne.n	800404c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800403c:	4b31      	ldr	r3, [pc, #196]	@ (8004104 <HAL_RCC_GetSysClockFreq+0x108>)
 800403e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004042:	0a1b      	lsrs	r3, r3, #8
 8004044:	f003 030f 	and.w	r3, r3, #15
 8004048:	61fb      	str	r3, [r7, #28]
 800404a:	e005      	b.n	8004058 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800404c:	4b2d      	ldr	r3, [pc, #180]	@ (8004104 <HAL_RCC_GetSysClockFreq+0x108>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	091b      	lsrs	r3, r3, #4
 8004052:	f003 030f 	and.w	r3, r3, #15
 8004056:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004058:	4a2b      	ldr	r2, [pc, #172]	@ (8004108 <HAL_RCC_GetSysClockFreq+0x10c>)
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004060:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d10d      	bne.n	8004084 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800406c:	e00a      	b.n	8004084 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	2b04      	cmp	r3, #4
 8004072:	d102      	bne.n	800407a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004074:	4b25      	ldr	r3, [pc, #148]	@ (800410c <HAL_RCC_GetSysClockFreq+0x110>)
 8004076:	61bb      	str	r3, [r7, #24]
 8004078:	e004      	b.n	8004084 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	2b08      	cmp	r3, #8
 800407e:	d101      	bne.n	8004084 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004080:	4b23      	ldr	r3, [pc, #140]	@ (8004110 <HAL_RCC_GetSysClockFreq+0x114>)
 8004082:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	2b0c      	cmp	r3, #12
 8004088:	d134      	bne.n	80040f4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800408a:	4b1e      	ldr	r3, [pc, #120]	@ (8004104 <HAL_RCC_GetSysClockFreq+0x108>)
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	f003 0303 	and.w	r3, r3, #3
 8004092:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	2b02      	cmp	r3, #2
 8004098:	d003      	beq.n	80040a2 <HAL_RCC_GetSysClockFreq+0xa6>
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	2b03      	cmp	r3, #3
 800409e:	d003      	beq.n	80040a8 <HAL_RCC_GetSysClockFreq+0xac>
 80040a0:	e005      	b.n	80040ae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80040a2:	4b1a      	ldr	r3, [pc, #104]	@ (800410c <HAL_RCC_GetSysClockFreq+0x110>)
 80040a4:	617b      	str	r3, [r7, #20]
      break;
 80040a6:	e005      	b.n	80040b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80040a8:	4b19      	ldr	r3, [pc, #100]	@ (8004110 <HAL_RCC_GetSysClockFreq+0x114>)
 80040aa:	617b      	str	r3, [r7, #20]
      break;
 80040ac:	e002      	b.n	80040b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	617b      	str	r3, [r7, #20]
      break;
 80040b2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80040b4:	4b13      	ldr	r3, [pc, #76]	@ (8004104 <HAL_RCC_GetSysClockFreq+0x108>)
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	091b      	lsrs	r3, r3, #4
 80040ba:	f003 0307 	and.w	r3, r3, #7
 80040be:	3301      	adds	r3, #1
 80040c0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80040c2:	4b10      	ldr	r3, [pc, #64]	@ (8004104 <HAL_RCC_GetSysClockFreq+0x108>)
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	0a1b      	lsrs	r3, r3, #8
 80040c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	fb03 f202 	mul.w	r2, r3, r2
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040da:	4b0a      	ldr	r3, [pc, #40]	@ (8004104 <HAL_RCC_GetSysClockFreq+0x108>)
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	0e5b      	lsrs	r3, r3, #25
 80040e0:	f003 0303 	and.w	r3, r3, #3
 80040e4:	3301      	adds	r3, #1
 80040e6:	005b      	lsls	r3, r3, #1
 80040e8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80040ea:	697a      	ldr	r2, [r7, #20]
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80040f2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80040f4:	69bb      	ldr	r3, [r7, #24]
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3724      	adds	r7, #36	@ 0x24
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	40021000 	.word	0x40021000
 8004108:	08009914 	.word	0x08009914
 800410c:	00f42400 	.word	0x00f42400
 8004110:	01e84800 	.word	0x01e84800

08004114 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004114:	b480      	push	{r7}
 8004116:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004118:	4b03      	ldr	r3, [pc, #12]	@ (8004128 <HAL_RCC_GetHCLKFreq+0x14>)
 800411a:	681b      	ldr	r3, [r3, #0]
}
 800411c:	4618      	mov	r0, r3
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	20000180 	.word	0x20000180

0800412c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004130:	f7ff fff0 	bl	8004114 <HAL_RCC_GetHCLKFreq>
 8004134:	4602      	mov	r2, r0
 8004136:	4b06      	ldr	r3, [pc, #24]	@ (8004150 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	0a1b      	lsrs	r3, r3, #8
 800413c:	f003 0307 	and.w	r3, r3, #7
 8004140:	4904      	ldr	r1, [pc, #16]	@ (8004154 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004142:	5ccb      	ldrb	r3, [r1, r3]
 8004144:	f003 031f 	and.w	r3, r3, #31
 8004148:	fa22 f303 	lsr.w	r3, r2, r3
}
 800414c:	4618      	mov	r0, r3
 800414e:	bd80      	pop	{r7, pc}
 8004150:	40021000 	.word	0x40021000
 8004154:	0800990c 	.word	0x0800990c

08004158 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800415c:	f7ff ffda 	bl	8004114 <HAL_RCC_GetHCLKFreq>
 8004160:	4602      	mov	r2, r0
 8004162:	4b06      	ldr	r3, [pc, #24]	@ (800417c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	0adb      	lsrs	r3, r3, #11
 8004168:	f003 0307 	and.w	r3, r3, #7
 800416c:	4904      	ldr	r1, [pc, #16]	@ (8004180 <HAL_RCC_GetPCLK2Freq+0x28>)
 800416e:	5ccb      	ldrb	r3, [r1, r3]
 8004170:	f003 031f 	and.w	r3, r3, #31
 8004174:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004178:	4618      	mov	r0, r3
 800417a:	bd80      	pop	{r7, pc}
 800417c:	40021000 	.word	0x40021000
 8004180:	0800990c 	.word	0x0800990c

08004184 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800418c:	2300      	movs	r3, #0
 800418e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004190:	4b2a      	ldr	r3, [pc, #168]	@ (800423c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004192:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004194:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d003      	beq.n	80041a4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800419c:	f7ff f9a0 	bl	80034e0 <HAL_PWREx_GetVoltageRange>
 80041a0:	6178      	str	r0, [r7, #20]
 80041a2:	e014      	b.n	80041ce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80041a4:	4b25      	ldr	r3, [pc, #148]	@ (800423c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041a8:	4a24      	ldr	r2, [pc, #144]	@ (800423c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80041b0:	4b22      	ldr	r3, [pc, #136]	@ (800423c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041b8:	60fb      	str	r3, [r7, #12]
 80041ba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80041bc:	f7ff f990 	bl	80034e0 <HAL_PWREx_GetVoltageRange>
 80041c0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80041c2:	4b1e      	ldr	r3, [pc, #120]	@ (800423c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041c6:	4a1d      	ldr	r2, [pc, #116]	@ (800423c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041cc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041d4:	d10b      	bne.n	80041ee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2b80      	cmp	r3, #128	@ 0x80
 80041da:	d919      	bls.n	8004210 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2ba0      	cmp	r3, #160	@ 0xa0
 80041e0:	d902      	bls.n	80041e8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80041e2:	2302      	movs	r3, #2
 80041e4:	613b      	str	r3, [r7, #16]
 80041e6:	e013      	b.n	8004210 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80041e8:	2301      	movs	r3, #1
 80041ea:	613b      	str	r3, [r7, #16]
 80041ec:	e010      	b.n	8004210 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2b80      	cmp	r3, #128	@ 0x80
 80041f2:	d902      	bls.n	80041fa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80041f4:	2303      	movs	r3, #3
 80041f6:	613b      	str	r3, [r7, #16]
 80041f8:	e00a      	b.n	8004210 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2b80      	cmp	r3, #128	@ 0x80
 80041fe:	d102      	bne.n	8004206 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004200:	2302      	movs	r3, #2
 8004202:	613b      	str	r3, [r7, #16]
 8004204:	e004      	b.n	8004210 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2b70      	cmp	r3, #112	@ 0x70
 800420a:	d101      	bne.n	8004210 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800420c:	2301      	movs	r3, #1
 800420e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004210:	4b0b      	ldr	r3, [pc, #44]	@ (8004240 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f023 0207 	bic.w	r2, r3, #7
 8004218:	4909      	ldr	r1, [pc, #36]	@ (8004240 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	4313      	orrs	r3, r2
 800421e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004220:	4b07      	ldr	r3, [pc, #28]	@ (8004240 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0307 	and.w	r3, r3, #7
 8004228:	693a      	ldr	r2, [r7, #16]
 800422a:	429a      	cmp	r2, r3
 800422c:	d001      	beq.n	8004232 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e000      	b.n	8004234 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004232:	2300      	movs	r3, #0
}
 8004234:	4618      	mov	r0, r3
 8004236:	3718      	adds	r7, #24
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}
 800423c:	40021000 	.word	0x40021000
 8004240:	40022000 	.word	0x40022000

08004244 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b086      	sub	sp, #24
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800424c:	2300      	movs	r3, #0
 800424e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004250:	2300      	movs	r3, #0
 8004252:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800425c:	2b00      	cmp	r3, #0
 800425e:	d041      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004264:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004268:	d02a      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800426a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800426e:	d824      	bhi.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004270:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004274:	d008      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004276:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800427a:	d81e      	bhi.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00a      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004280:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004284:	d010      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004286:	e018      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004288:	4b86      	ldr	r3, [pc, #536]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	4a85      	ldr	r2, [pc, #532]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800428e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004292:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004294:	e015      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	3304      	adds	r3, #4
 800429a:	2100      	movs	r1, #0
 800429c:	4618      	mov	r0, r3
 800429e:	f000 facd 	bl	800483c <RCCEx_PLLSAI1_Config>
 80042a2:	4603      	mov	r3, r0
 80042a4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042a6:	e00c      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	3320      	adds	r3, #32
 80042ac:	2100      	movs	r1, #0
 80042ae:	4618      	mov	r0, r3
 80042b0:	f000 fbb6 	bl	8004a20 <RCCEx_PLLSAI2_Config>
 80042b4:	4603      	mov	r3, r0
 80042b6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042b8:	e003      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	74fb      	strb	r3, [r7, #19]
      break;
 80042be:	e000      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80042c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042c2:	7cfb      	ldrb	r3, [r7, #19]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d10b      	bne.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042c8:	4b76      	ldr	r3, [pc, #472]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042ce:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042d6:	4973      	ldr	r1, [pc, #460]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80042de:	e001      	b.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042e0:	7cfb      	ldrb	r3, [r7, #19]
 80042e2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d041      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042f4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80042f8:	d02a      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80042fa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80042fe:	d824      	bhi.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004300:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004304:	d008      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004306:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800430a:	d81e      	bhi.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00a      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004310:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004314:	d010      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004316:	e018      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004318:	4b62      	ldr	r3, [pc, #392]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	4a61      	ldr	r2, [pc, #388]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800431e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004322:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004324:	e015      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	3304      	adds	r3, #4
 800432a:	2100      	movs	r1, #0
 800432c:	4618      	mov	r0, r3
 800432e:	f000 fa85 	bl	800483c <RCCEx_PLLSAI1_Config>
 8004332:	4603      	mov	r3, r0
 8004334:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004336:	e00c      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	3320      	adds	r3, #32
 800433c:	2100      	movs	r1, #0
 800433e:	4618      	mov	r0, r3
 8004340:	f000 fb6e 	bl	8004a20 <RCCEx_PLLSAI2_Config>
 8004344:	4603      	mov	r3, r0
 8004346:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004348:	e003      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	74fb      	strb	r3, [r7, #19]
      break;
 800434e:	e000      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004350:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004352:	7cfb      	ldrb	r3, [r7, #19]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d10b      	bne.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004358:	4b52      	ldr	r3, [pc, #328]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800435a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800435e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004366:	494f      	ldr	r1, [pc, #316]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004368:	4313      	orrs	r3, r2
 800436a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800436e:	e001      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004370:	7cfb      	ldrb	r3, [r7, #19]
 8004372:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800437c:	2b00      	cmp	r3, #0
 800437e:	f000 80a0 	beq.w	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004382:	2300      	movs	r3, #0
 8004384:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004386:	4b47      	ldr	r3, [pc, #284]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004388:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800438a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d101      	bne.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004392:	2301      	movs	r3, #1
 8004394:	e000      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004396:	2300      	movs	r3, #0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00d      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800439c:	4b41      	ldr	r3, [pc, #260]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800439e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043a0:	4a40      	ldr	r2, [pc, #256]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80043a8:	4b3e      	ldr	r3, [pc, #248]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043b0:	60bb      	str	r3, [r7, #8]
 80043b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043b4:	2301      	movs	r3, #1
 80043b6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043b8:	4b3b      	ldr	r3, [pc, #236]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a3a      	ldr	r2, [pc, #232]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80043be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043c4:	f7fe fa76 	bl	80028b4 <HAL_GetTick>
 80043c8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043ca:	e009      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043cc:	f7fe fa72 	bl	80028b4 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d902      	bls.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	74fb      	strb	r3, [r7, #19]
        break;
 80043de:	e005      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043e0:	4b31      	ldr	r3, [pc, #196]	@ (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d0ef      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80043ec:	7cfb      	ldrb	r3, [r7, #19]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d15c      	bne.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80043f2:	4b2c      	ldr	r3, [pc, #176]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043fc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d01f      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	429a      	cmp	r2, r3
 800440e:	d019      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004410:	4b24      	ldr	r3, [pc, #144]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004412:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004416:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800441a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800441c:	4b21      	ldr	r3, [pc, #132]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800441e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004422:	4a20      	ldr	r2, [pc, #128]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004424:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004428:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800442c:	4b1d      	ldr	r3, [pc, #116]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800442e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004432:	4a1c      	ldr	r2, [pc, #112]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004434:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004438:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800443c:	4a19      	ldr	r2, [pc, #100]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b00      	cmp	r3, #0
 800444c:	d016      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800444e:	f7fe fa31 	bl	80028b4 <HAL_GetTick>
 8004452:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004454:	e00b      	b.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004456:	f7fe fa2d 	bl	80028b4 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004464:	4293      	cmp	r3, r2
 8004466:	d902      	bls.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	74fb      	strb	r3, [r7, #19]
            break;
 800446c:	e006      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800446e:	4b0d      	ldr	r3, [pc, #52]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004470:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	2b00      	cmp	r3, #0
 800447a:	d0ec      	beq.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800447c:	7cfb      	ldrb	r3, [r7, #19]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10c      	bne.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004482:	4b08      	ldr	r3, [pc, #32]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004484:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004488:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004492:	4904      	ldr	r1, [pc, #16]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004494:	4313      	orrs	r3, r2
 8004496:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800449a:	e009      	b.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800449c:	7cfb      	ldrb	r3, [r7, #19]
 800449e:	74bb      	strb	r3, [r7, #18]
 80044a0:	e006      	b.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80044a2:	bf00      	nop
 80044a4:	40021000 	.word	0x40021000
 80044a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ac:	7cfb      	ldrb	r3, [r7, #19]
 80044ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044b0:	7c7b      	ldrb	r3, [r7, #17]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d105      	bne.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044b6:	4ba6      	ldr	r3, [pc, #664]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80044b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044ba:	4aa5      	ldr	r2, [pc, #660]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80044bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044c0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00a      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044ce:	4ba0      	ldr	r3, [pc, #640]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80044d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044d4:	f023 0203 	bic.w	r2, r3, #3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044dc:	499c      	ldr	r1, [pc, #624]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0302 	and.w	r3, r3, #2
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00a      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80044f0:	4b97      	ldr	r3, [pc, #604]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80044f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044f6:	f023 020c 	bic.w	r2, r3, #12
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044fe:	4994      	ldr	r1, [pc, #592]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004500:	4313      	orrs	r3, r2
 8004502:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0304 	and.w	r3, r3, #4
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00a      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004512:	4b8f      	ldr	r3, [pc, #572]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004514:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004518:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004520:	498b      	ldr	r1, [pc, #556]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004522:	4313      	orrs	r3, r2
 8004524:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0308 	and.w	r3, r3, #8
 8004530:	2b00      	cmp	r3, #0
 8004532:	d00a      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004534:	4b86      	ldr	r3, [pc, #536]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004536:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800453a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004542:	4983      	ldr	r1, [pc, #524]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004544:	4313      	orrs	r3, r2
 8004546:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0310 	and.w	r3, r3, #16
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00a      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004556:	4b7e      	ldr	r3, [pc, #504]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004558:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800455c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004564:	497a      	ldr	r1, [pc, #488]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004566:	4313      	orrs	r3, r2
 8004568:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0320 	and.w	r3, r3, #32
 8004574:	2b00      	cmp	r3, #0
 8004576:	d00a      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004578:	4b75      	ldr	r3, [pc, #468]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800457a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800457e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004586:	4972      	ldr	r1, [pc, #456]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004588:	4313      	orrs	r3, r2
 800458a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00a      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800459a:	4b6d      	ldr	r3, [pc, #436]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800459c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045a0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045a8:	4969      	ldr	r1, [pc, #420]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d00a      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80045bc:	4b64      	ldr	r3, [pc, #400]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80045be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045c2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80045ca:	4961      	ldr	r1, [pc, #388]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00a      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045de:	4b5c      	ldr	r3, [pc, #368]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80045e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045e4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045ec:	4958      	ldr	r1, [pc, #352]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00a      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004600:	4b53      	ldr	r3, [pc, #332]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004602:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004606:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800460e:	4950      	ldr	r1, [pc, #320]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004610:	4313      	orrs	r3, r2
 8004612:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00a      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004622:	4b4b      	ldr	r3, [pc, #300]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004624:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004628:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004630:	4947      	ldr	r1, [pc, #284]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004632:	4313      	orrs	r3, r2
 8004634:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d00a      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004644:	4b42      	ldr	r3, [pc, #264]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004646:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800464a:	f023 0203 	bic.w	r2, r3, #3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004652:	493f      	ldr	r1, [pc, #252]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004654:	4313      	orrs	r3, r2
 8004656:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d028      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004666:	4b3a      	ldr	r3, [pc, #232]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004668:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800466c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004674:	4936      	ldr	r1, [pc, #216]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004676:	4313      	orrs	r3, r2
 8004678:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004680:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004684:	d106      	bne.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004686:	4b32      	ldr	r3, [pc, #200]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	4a31      	ldr	r2, [pc, #196]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800468c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004690:	60d3      	str	r3, [r2, #12]
 8004692:	e011      	b.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004698:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800469c:	d10c      	bne.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	3304      	adds	r3, #4
 80046a2:	2101      	movs	r1, #1
 80046a4:	4618      	mov	r0, r3
 80046a6:	f000 f8c9 	bl	800483c <RCCEx_PLLSAI1_Config>
 80046aa:	4603      	mov	r3, r0
 80046ac:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80046ae:	7cfb      	ldrb	r3, [r7, #19]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d001      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80046b4:	7cfb      	ldrb	r3, [r7, #19]
 80046b6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d028      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80046c4:	4b22      	ldr	r3, [pc, #136]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80046c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046ca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046d2:	491f      	ldr	r1, [pc, #124]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046e2:	d106      	bne.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046e4:	4b1a      	ldr	r3, [pc, #104]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	4a19      	ldr	r2, [pc, #100]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80046ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80046ee:	60d3      	str	r3, [r2, #12]
 80046f0:	e011      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046f6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80046fa:	d10c      	bne.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	3304      	adds	r3, #4
 8004700:	2101      	movs	r1, #1
 8004702:	4618      	mov	r0, r3
 8004704:	f000 f89a 	bl	800483c <RCCEx_PLLSAI1_Config>
 8004708:	4603      	mov	r3, r0
 800470a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800470c:	7cfb      	ldrb	r3, [r7, #19]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d001      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8004712:	7cfb      	ldrb	r3, [r7, #19]
 8004714:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d02a      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004722:	4b0b      	ldr	r3, [pc, #44]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004724:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004728:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004730:	4907      	ldr	r1, [pc, #28]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004732:	4313      	orrs	r3, r2
 8004734:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800473c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004740:	d108      	bne.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004742:	4b03      	ldr	r3, [pc, #12]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	4a02      	ldr	r2, [pc, #8]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004748:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800474c:	60d3      	str	r3, [r2, #12]
 800474e:	e013      	b.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8004750:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004758:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800475c:	d10c      	bne.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	3304      	adds	r3, #4
 8004762:	2101      	movs	r1, #1
 8004764:	4618      	mov	r0, r3
 8004766:	f000 f869 	bl	800483c <RCCEx_PLLSAI1_Config>
 800476a:	4603      	mov	r3, r0
 800476c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800476e:	7cfb      	ldrb	r3, [r7, #19]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d001      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8004774:	7cfb      	ldrb	r3, [r7, #19]
 8004776:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d02f      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004784:	4b2c      	ldr	r3, [pc, #176]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004786:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800478a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004792:	4929      	ldr	r1, [pc, #164]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004794:	4313      	orrs	r3, r2
 8004796:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800479e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80047a2:	d10d      	bne.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	3304      	adds	r3, #4
 80047a8:	2102      	movs	r1, #2
 80047aa:	4618      	mov	r0, r3
 80047ac:	f000 f846 	bl	800483c <RCCEx_PLLSAI1_Config>
 80047b0:	4603      	mov	r3, r0
 80047b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047b4:	7cfb      	ldrb	r3, [r7, #19]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d014      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80047ba:	7cfb      	ldrb	r3, [r7, #19]
 80047bc:	74bb      	strb	r3, [r7, #18]
 80047be:	e011      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80047c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80047c8:	d10c      	bne.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	3320      	adds	r3, #32
 80047ce:	2102      	movs	r1, #2
 80047d0:	4618      	mov	r0, r3
 80047d2:	f000 f925 	bl	8004a20 <RCCEx_PLLSAI2_Config>
 80047d6:	4603      	mov	r3, r0
 80047d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047da:	7cfb      	ldrb	r3, [r7, #19]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d001      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80047e0:	7cfb      	ldrb	r3, [r7, #19]
 80047e2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00b      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80047f0:	4b11      	ldr	r3, [pc, #68]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80047f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047f6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004800:	490d      	ldr	r1, [pc, #52]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004802:	4313      	orrs	r3, r2
 8004804:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d00b      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004814:	4b08      	ldr	r3, [pc, #32]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004816:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800481a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004824:	4904      	ldr	r1, [pc, #16]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004826:	4313      	orrs	r3, r2
 8004828:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800482c:	7cbb      	ldrb	r3, [r7, #18]
}
 800482e:	4618      	mov	r0, r3
 8004830:	3718      	adds	r7, #24
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	40021000 	.word	0x40021000

0800483c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004846:	2300      	movs	r3, #0
 8004848:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800484a:	4b74      	ldr	r3, [pc, #464]	@ (8004a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	f003 0303 	and.w	r3, r3, #3
 8004852:	2b00      	cmp	r3, #0
 8004854:	d018      	beq.n	8004888 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004856:	4b71      	ldr	r3, [pc, #452]	@ (8004a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	f003 0203 	and.w	r2, r3, #3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	429a      	cmp	r2, r3
 8004864:	d10d      	bne.n	8004882 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
       ||
 800486a:	2b00      	cmp	r3, #0
 800486c:	d009      	beq.n	8004882 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800486e:	4b6b      	ldr	r3, [pc, #428]	@ (8004a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	091b      	lsrs	r3, r3, #4
 8004874:	f003 0307 	and.w	r3, r3, #7
 8004878:	1c5a      	adds	r2, r3, #1
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
       ||
 800487e:	429a      	cmp	r2, r3
 8004880:	d047      	beq.n	8004912 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	73fb      	strb	r3, [r7, #15]
 8004886:	e044      	b.n	8004912 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2b03      	cmp	r3, #3
 800488e:	d018      	beq.n	80048c2 <RCCEx_PLLSAI1_Config+0x86>
 8004890:	2b03      	cmp	r3, #3
 8004892:	d825      	bhi.n	80048e0 <RCCEx_PLLSAI1_Config+0xa4>
 8004894:	2b01      	cmp	r3, #1
 8004896:	d002      	beq.n	800489e <RCCEx_PLLSAI1_Config+0x62>
 8004898:	2b02      	cmp	r3, #2
 800489a:	d009      	beq.n	80048b0 <RCCEx_PLLSAI1_Config+0x74>
 800489c:	e020      	b.n	80048e0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800489e:	4b5f      	ldr	r3, [pc, #380]	@ (8004a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0302 	and.w	r3, r3, #2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d11d      	bne.n	80048e6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048ae:	e01a      	b.n	80048e6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80048b0:	4b5a      	ldr	r3, [pc, #360]	@ (8004a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d116      	bne.n	80048ea <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048c0:	e013      	b.n	80048ea <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80048c2:	4b56      	ldr	r3, [pc, #344]	@ (8004a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d10f      	bne.n	80048ee <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80048ce:	4b53      	ldr	r3, [pc, #332]	@ (8004a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d109      	bne.n	80048ee <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80048de:	e006      	b.n	80048ee <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	73fb      	strb	r3, [r7, #15]
      break;
 80048e4:	e004      	b.n	80048f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048e6:	bf00      	nop
 80048e8:	e002      	b.n	80048f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048ea:	bf00      	nop
 80048ec:	e000      	b.n	80048f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80048f0:	7bfb      	ldrb	r3, [r7, #15]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d10d      	bne.n	8004912 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80048f6:	4b49      	ldr	r3, [pc, #292]	@ (8004a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6819      	ldr	r1, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	3b01      	subs	r3, #1
 8004908:	011b      	lsls	r3, r3, #4
 800490a:	430b      	orrs	r3, r1
 800490c:	4943      	ldr	r1, [pc, #268]	@ (8004a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 800490e:	4313      	orrs	r3, r2
 8004910:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004912:	7bfb      	ldrb	r3, [r7, #15]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d17c      	bne.n	8004a12 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004918:	4b40      	ldr	r3, [pc, #256]	@ (8004a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a3f      	ldr	r2, [pc, #252]	@ (8004a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 800491e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004922:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004924:	f7fd ffc6 	bl	80028b4 <HAL_GetTick>
 8004928:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800492a:	e009      	b.n	8004940 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800492c:	f7fd ffc2 	bl	80028b4 <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	2b02      	cmp	r3, #2
 8004938:	d902      	bls.n	8004940 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	73fb      	strb	r3, [r7, #15]
        break;
 800493e:	e005      	b.n	800494c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004940:	4b36      	ldr	r3, [pc, #216]	@ (8004a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d1ef      	bne.n	800492c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800494c:	7bfb      	ldrb	r3, [r7, #15]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d15f      	bne.n	8004a12 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d110      	bne.n	800497a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004958:	4b30      	ldr	r3, [pc, #192]	@ (8004a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004960:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	6892      	ldr	r2, [r2, #8]
 8004968:	0211      	lsls	r1, r2, #8
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	68d2      	ldr	r2, [r2, #12]
 800496e:	06d2      	lsls	r2, r2, #27
 8004970:	430a      	orrs	r2, r1
 8004972:	492a      	ldr	r1, [pc, #168]	@ (8004a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004974:	4313      	orrs	r3, r2
 8004976:	610b      	str	r3, [r1, #16]
 8004978:	e027      	b.n	80049ca <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	2b01      	cmp	r3, #1
 800497e:	d112      	bne.n	80049a6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004980:	4b26      	ldr	r3, [pc, #152]	@ (8004a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004982:	691b      	ldr	r3, [r3, #16]
 8004984:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004988:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	6892      	ldr	r2, [r2, #8]
 8004990:	0211      	lsls	r1, r2, #8
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	6912      	ldr	r2, [r2, #16]
 8004996:	0852      	lsrs	r2, r2, #1
 8004998:	3a01      	subs	r2, #1
 800499a:	0552      	lsls	r2, r2, #21
 800499c:	430a      	orrs	r2, r1
 800499e:	491f      	ldr	r1, [pc, #124]	@ (8004a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 80049a0:	4313      	orrs	r3, r2
 80049a2:	610b      	str	r3, [r1, #16]
 80049a4:	e011      	b.n	80049ca <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049a6:	4b1d      	ldr	r3, [pc, #116]	@ (8004a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80049ae:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	6892      	ldr	r2, [r2, #8]
 80049b6:	0211      	lsls	r1, r2, #8
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	6952      	ldr	r2, [r2, #20]
 80049bc:	0852      	lsrs	r2, r2, #1
 80049be:	3a01      	subs	r2, #1
 80049c0:	0652      	lsls	r2, r2, #25
 80049c2:	430a      	orrs	r2, r1
 80049c4:	4915      	ldr	r1, [pc, #84]	@ (8004a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80049ca:	4b14      	ldr	r3, [pc, #80]	@ (8004a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a13      	ldr	r2, [pc, #76]	@ (8004a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 80049d0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80049d4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049d6:	f7fd ff6d 	bl	80028b4 <HAL_GetTick>
 80049da:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80049dc:	e009      	b.n	80049f2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049de:	f7fd ff69 	bl	80028b4 <HAL_GetTick>
 80049e2:	4602      	mov	r2, r0
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d902      	bls.n	80049f2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	73fb      	strb	r3, [r7, #15]
          break;
 80049f0:	e005      	b.n	80049fe <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80049f2:	4b0a      	ldr	r3, [pc, #40]	@ (8004a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d0ef      	beq.n	80049de <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80049fe:	7bfb      	ldrb	r3, [r7, #15]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d106      	bne.n	8004a12 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004a04:	4b05      	ldr	r3, [pc, #20]	@ (8004a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a06:	691a      	ldr	r2, [r3, #16]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	4903      	ldr	r1, [pc, #12]	@ (8004a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3710      	adds	r7, #16
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	40021000 	.word	0x40021000

08004a20 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a2e:	4b69      	ldr	r3, [pc, #420]	@ (8004bd4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	f003 0303 	and.w	r3, r3, #3
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d018      	beq.n	8004a6c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004a3a:	4b66      	ldr	r3, [pc, #408]	@ (8004bd4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	f003 0203 	and.w	r2, r3, #3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d10d      	bne.n	8004a66 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
       ||
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d009      	beq.n	8004a66 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004a52:	4b60      	ldr	r3, [pc, #384]	@ (8004bd4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	091b      	lsrs	r3, r3, #4
 8004a58:	f003 0307 	and.w	r3, r3, #7
 8004a5c:	1c5a      	adds	r2, r3, #1
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
       ||
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d047      	beq.n	8004af6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	73fb      	strb	r3, [r7, #15]
 8004a6a:	e044      	b.n	8004af6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2b03      	cmp	r3, #3
 8004a72:	d018      	beq.n	8004aa6 <RCCEx_PLLSAI2_Config+0x86>
 8004a74:	2b03      	cmp	r3, #3
 8004a76:	d825      	bhi.n	8004ac4 <RCCEx_PLLSAI2_Config+0xa4>
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d002      	beq.n	8004a82 <RCCEx_PLLSAI2_Config+0x62>
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d009      	beq.n	8004a94 <RCCEx_PLLSAI2_Config+0x74>
 8004a80:	e020      	b.n	8004ac4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a82:	4b54      	ldr	r3, [pc, #336]	@ (8004bd4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0302 	and.w	r3, r3, #2
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d11d      	bne.n	8004aca <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a92:	e01a      	b.n	8004aca <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a94:	4b4f      	ldr	r3, [pc, #316]	@ (8004bd4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d116      	bne.n	8004ace <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004aa4:	e013      	b.n	8004ace <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004aa6:	4b4b      	ldr	r3, [pc, #300]	@ (8004bd4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d10f      	bne.n	8004ad2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004ab2:	4b48      	ldr	r3, [pc, #288]	@ (8004bd4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d109      	bne.n	8004ad2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004ac2:	e006      	b.n	8004ad2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ac8:	e004      	b.n	8004ad4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004aca:	bf00      	nop
 8004acc:	e002      	b.n	8004ad4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004ace:	bf00      	nop
 8004ad0:	e000      	b.n	8004ad4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004ad2:	bf00      	nop
    }

    if(status == HAL_OK)
 8004ad4:	7bfb      	ldrb	r3, [r7, #15]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d10d      	bne.n	8004af6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004ada:	4b3e      	ldr	r3, [pc, #248]	@ (8004bd4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6819      	ldr	r1, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	3b01      	subs	r3, #1
 8004aec:	011b      	lsls	r3, r3, #4
 8004aee:	430b      	orrs	r3, r1
 8004af0:	4938      	ldr	r1, [pc, #224]	@ (8004bd4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004af6:	7bfb      	ldrb	r3, [r7, #15]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d166      	bne.n	8004bca <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004afc:	4b35      	ldr	r3, [pc, #212]	@ (8004bd4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a34      	ldr	r2, [pc, #208]	@ (8004bd4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004b02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b08:	f7fd fed4 	bl	80028b4 <HAL_GetTick>
 8004b0c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b0e:	e009      	b.n	8004b24 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b10:	f7fd fed0 	bl	80028b4 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d902      	bls.n	8004b24 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	73fb      	strb	r3, [r7, #15]
        break;
 8004b22:	e005      	b.n	8004b30 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b24:	4b2b      	ldr	r3, [pc, #172]	@ (8004bd4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d1ef      	bne.n	8004b10 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004b30:	7bfb      	ldrb	r3, [r7, #15]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d149      	bne.n	8004bca <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d110      	bne.n	8004b5e <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b3c:	4b25      	ldr	r3, [pc, #148]	@ (8004bd4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004b3e:	695b      	ldr	r3, [r3, #20]
 8004b40:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004b44:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	6892      	ldr	r2, [r2, #8]
 8004b4c:	0211      	lsls	r1, r2, #8
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	68d2      	ldr	r2, [r2, #12]
 8004b52:	06d2      	lsls	r2, r2, #27
 8004b54:	430a      	orrs	r2, r1
 8004b56:	491f      	ldr	r1, [pc, #124]	@ (8004bd4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	614b      	str	r3, [r1, #20]
 8004b5c:	e011      	b.n	8004b82 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b5e:	4b1d      	ldr	r3, [pc, #116]	@ (8004bd4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004b66:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	6892      	ldr	r2, [r2, #8]
 8004b6e:	0211      	lsls	r1, r2, #8
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	6912      	ldr	r2, [r2, #16]
 8004b74:	0852      	lsrs	r2, r2, #1
 8004b76:	3a01      	subs	r2, #1
 8004b78:	0652      	lsls	r2, r2, #25
 8004b7a:	430a      	orrs	r2, r1
 8004b7c:	4915      	ldr	r1, [pc, #84]	@ (8004bd4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004b82:	4b14      	ldr	r3, [pc, #80]	@ (8004bd4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a13      	ldr	r2, [pc, #76]	@ (8004bd4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004b88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b8c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b8e:	f7fd fe91 	bl	80028b4 <HAL_GetTick>
 8004b92:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b94:	e009      	b.n	8004baa <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b96:	f7fd fe8d 	bl	80028b4 <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d902      	bls.n	8004baa <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	73fb      	strb	r3, [r7, #15]
          break;
 8004ba8:	e005      	b.n	8004bb6 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004baa:	4b0a      	ldr	r3, [pc, #40]	@ (8004bd4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d0ef      	beq.n	8004b96 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8004bb6:	7bfb      	ldrb	r3, [r7, #15]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d106      	bne.n	8004bca <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004bbc:	4b05      	ldr	r3, [pc, #20]	@ (8004bd4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004bbe:	695a      	ldr	r2, [r3, #20]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	695b      	ldr	r3, [r3, #20]
 8004bc4:	4903      	ldr	r1, [pc, #12]	@ (8004bd4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3710      	adds	r7, #16
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	40021000 	.word	0x40021000

08004bd8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d101      	bne.n	8004bea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e095      	b.n	8004d16 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d108      	bne.n	8004c04 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004bfa:	d009      	beq.n	8004c10 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	61da      	str	r2, [r3, #28]
 8004c02:	e005      	b.n	8004c10 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d106      	bne.n	8004c30 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f7fc feaa 	bl	8001984 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2202      	movs	r2, #2
 8004c34:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c46:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004c50:	d902      	bls.n	8004c58 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004c52:	2300      	movs	r3, #0
 8004c54:	60fb      	str	r3, [r7, #12]
 8004c56:	e002      	b.n	8004c5e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004c58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004c5c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004c66:	d007      	beq.n	8004c78 <HAL_SPI_Init+0xa0>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004c70:	d002      	beq.n	8004c78 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004c88:	431a      	orrs	r2, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	f003 0302 	and.w	r3, r3, #2
 8004c92:	431a      	orrs	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	695b      	ldr	r3, [r3, #20]
 8004c98:	f003 0301 	and.w	r3, r3, #1
 8004c9c:	431a      	orrs	r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ca6:	431a      	orrs	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	69db      	ldr	r3, [r3, #28]
 8004cac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004cb0:	431a      	orrs	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cba:	ea42 0103 	orr.w	r1, r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	0c1b      	lsrs	r3, r3, #16
 8004cd4:	f003 0204 	and.w	r2, r3, #4
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cdc:	f003 0310 	and.w	r3, r3, #16
 8004ce0:	431a      	orrs	r2, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ce6:	f003 0308 	and.w	r3, r3, #8
 8004cea:	431a      	orrs	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004cf4:	ea42 0103 	orr.w	r1, r2, r3
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	430a      	orrs	r2, r1
 8004d04:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3710      	adds	r7, #16
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b082      	sub	sp, #8
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d101      	bne.n	8004d30 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e040      	b.n	8004db2 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d106      	bne.n	8004d46 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f7fd faf3 	bl	800232c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2224      	movs	r2, #36	@ 0x24
 8004d4a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f022 0201 	bic.w	r2, r2, #1
 8004d5a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d002      	beq.n	8004d6a <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f000 feb5 	bl	8005ad4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 fbfa 	bl	8005564 <UART_SetConfig>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d101      	bne.n	8004d7a <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e01b      	b.n	8004db2 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	685a      	ldr	r2, [r3, #4]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d88:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	689a      	ldr	r2, [r3, #8]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d98:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f042 0201 	orr.w	r2, r2, #1
 8004da8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 ff34 	bl	8005c18 <UART_CheckIdleState>
 8004db0:	4603      	mov	r3, r0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3708      	adds	r7, #8
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}

08004dba <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dba:	b580      	push	{r7, lr}
 8004dbc:	b08a      	sub	sp, #40	@ 0x28
 8004dbe:	af02      	add	r7, sp, #8
 8004dc0:	60f8      	str	r0, [r7, #12]
 8004dc2:	60b9      	str	r1, [r7, #8]
 8004dc4:	603b      	str	r3, [r7, #0]
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004dce:	2b20      	cmp	r3, #32
 8004dd0:	d177      	bne.n	8004ec2 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d002      	beq.n	8004dde <HAL_UART_Transmit+0x24>
 8004dd8:	88fb      	ldrh	r3, [r7, #6]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d101      	bne.n	8004de2 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e070      	b.n	8004ec4 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2221      	movs	r2, #33	@ 0x21
 8004dee:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004df0:	f7fd fd60 	bl	80028b4 <HAL_GetTick>
 8004df4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	88fa      	ldrh	r2, [r7, #6]
 8004dfa:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	88fa      	ldrh	r2, [r7, #6]
 8004e02:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e0e:	d108      	bne.n	8004e22 <HAL_UART_Transmit+0x68>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d104      	bne.n	8004e22 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	61bb      	str	r3, [r7, #24]
 8004e20:	e003      	b.n	8004e2a <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e26:	2300      	movs	r3, #0
 8004e28:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004e2a:	e02f      	b.n	8004e8c <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	9300      	str	r3, [sp, #0]
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	2200      	movs	r2, #0
 8004e34:	2180      	movs	r1, #128	@ 0x80
 8004e36:	68f8      	ldr	r0, [r7, #12]
 8004e38:	f000 ff96 	bl	8005d68 <UART_WaitOnFlagUntilTimeout>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d004      	beq.n	8004e4c <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2220      	movs	r2, #32
 8004e46:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e03b      	b.n	8004ec4 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10b      	bne.n	8004e6a <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	881a      	ldrh	r2, [r3, #0]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e5e:	b292      	uxth	r2, r2
 8004e60:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	3302      	adds	r3, #2
 8004e66:	61bb      	str	r3, [r7, #24]
 8004e68:	e007      	b.n	8004e7a <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	781a      	ldrb	r2, [r3, #0]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	3301      	adds	r3, #1
 8004e78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	3b01      	subs	r3, #1
 8004e84:	b29a      	uxth	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d1c9      	bne.n	8004e2c <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	9300      	str	r3, [sp, #0]
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	2140      	movs	r1, #64	@ 0x40
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	f000 ff60 	bl	8005d68 <UART_WaitOnFlagUntilTimeout>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d004      	beq.n	8004eb8 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2220      	movs	r2, #32
 8004eb2:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	e005      	b.n	8004ec4 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2220      	movs	r2, #32
 8004ebc:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	e000      	b.n	8004ec4 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004ec2:	2302      	movs	r3, #2
  }
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3720      	adds	r7, #32
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b08a      	sub	sp, #40	@ 0x28
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ee0:	2b20      	cmp	r3, #32
 8004ee2:	d137      	bne.n	8004f54 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d002      	beq.n	8004ef0 <HAL_UART_Receive_IT+0x24>
 8004eea:	88fb      	ldrh	r3, [r7, #6]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d101      	bne.n	8004ef4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e030      	b.n	8004f56 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a18      	ldr	r2, [pc, #96]	@ (8004f60 <HAL_UART_Receive_IT+0x94>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d01f      	beq.n	8004f44 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d018      	beq.n	8004f44 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	e853 3f00 	ldrex	r3, [r3]
 8004f1e:	613b      	str	r3, [r7, #16]
   return(result);
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004f26:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f30:	623b      	str	r3, [r7, #32]
 8004f32:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f34:	69f9      	ldr	r1, [r7, #28]
 8004f36:	6a3a      	ldr	r2, [r7, #32]
 8004f38:	e841 2300 	strex	r3, r2, [r1]
 8004f3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d1e6      	bne.n	8004f12 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004f44:	88fb      	ldrh	r3, [r7, #6]
 8004f46:	461a      	mov	r2, r3
 8004f48:	68b9      	ldr	r1, [r7, #8]
 8004f4a:	68f8      	ldr	r0, [r7, #12]
 8004f4c:	f000 ff74 	bl	8005e38 <UART_Start_Receive_IT>
 8004f50:	4603      	mov	r3, r0
 8004f52:	e000      	b.n	8004f56 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004f54:	2302      	movs	r3, #2
  }
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3728      	adds	r7, #40	@ 0x28
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	40008000 	.word	0x40008000

08004f64 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b0ba      	sub	sp, #232	@ 0xe8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	69db      	ldr	r3, [r3, #28]
 8004f72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004f8a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004f8e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004f92:	4013      	ands	r3, r2
 8004f94:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004f98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d115      	bne.n	8004fcc <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004fa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fa4:	f003 0320 	and.w	r3, r3, #32
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d00f      	beq.n	8004fcc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004fac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fb0:	f003 0320 	and.w	r3, r3, #32
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d009      	beq.n	8004fcc <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	f000 82ae 	beq.w	800551e <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	4798      	blx	r3
      }
      return;
 8004fca:	e2a8      	b.n	800551e <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004fcc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	f000 8117 	beq.w	8005204 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004fd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004fda:	f003 0301 	and.w	r3, r3, #1
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d106      	bne.n	8004ff0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004fe2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004fe6:	4b85      	ldr	r3, [pc, #532]	@ (80051fc <HAL_UART_IRQHandler+0x298>)
 8004fe8:	4013      	ands	r3, r2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	f000 810a 	beq.w	8005204 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004ff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ff4:	f003 0301 	and.w	r3, r3, #1
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d011      	beq.n	8005020 <HAL_UART_IRQHandler+0xbc>
 8004ffc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005000:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00b      	beq.n	8005020 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2201      	movs	r2, #1
 800500e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005016:	f043 0201 	orr.w	r2, r3, #1
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005024:	f003 0302 	and.w	r3, r3, #2
 8005028:	2b00      	cmp	r3, #0
 800502a:	d011      	beq.n	8005050 <HAL_UART_IRQHandler+0xec>
 800502c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005030:	f003 0301 	and.w	r3, r3, #1
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00b      	beq.n	8005050 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2202      	movs	r2, #2
 800503e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005046:	f043 0204 	orr.w	r2, r3, #4
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005050:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005054:	f003 0304 	and.w	r3, r3, #4
 8005058:	2b00      	cmp	r3, #0
 800505a:	d011      	beq.n	8005080 <HAL_UART_IRQHandler+0x11c>
 800505c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005060:	f003 0301 	and.w	r3, r3, #1
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00b      	beq.n	8005080 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2204      	movs	r2, #4
 800506e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005076:	f043 0202 	orr.w	r2, r3, #2
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005084:	f003 0308 	and.w	r3, r3, #8
 8005088:	2b00      	cmp	r3, #0
 800508a:	d017      	beq.n	80050bc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800508c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005090:	f003 0320 	and.w	r3, r3, #32
 8005094:	2b00      	cmp	r3, #0
 8005096:	d105      	bne.n	80050a4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005098:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800509c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d00b      	beq.n	80050bc <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2208      	movs	r2, #8
 80050aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050b2:	f043 0208 	orr.w	r2, r3, #8
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80050bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d012      	beq.n	80050ee <HAL_UART_IRQHandler+0x18a>
 80050c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050cc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d00c      	beq.n	80050ee <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80050dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050e4:	f043 0220 	orr.w	r2, r3, #32
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	f000 8214 	beq.w	8005522 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80050fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050fe:	f003 0320 	and.w	r3, r3, #32
 8005102:	2b00      	cmp	r3, #0
 8005104:	d00d      	beq.n	8005122 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005106:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800510a:	f003 0320 	and.w	r3, r3, #32
 800510e:	2b00      	cmp	r3, #0
 8005110:	d007      	beq.n	8005122 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005116:	2b00      	cmp	r3, #0
 8005118:	d003      	beq.n	8005122 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005128:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005136:	2b40      	cmp	r3, #64	@ 0x40
 8005138:	d005      	beq.n	8005146 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800513a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800513e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005142:	2b00      	cmp	r3, #0
 8005144:	d04f      	beq.n	80051e6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 ff3c 	bl	8005fc4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005156:	2b40      	cmp	r3, #64	@ 0x40
 8005158:	d141      	bne.n	80051de <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	3308      	adds	r3, #8
 8005160:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005164:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005168:	e853 3f00 	ldrex	r3, [r3]
 800516c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005170:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005174:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005178:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	3308      	adds	r3, #8
 8005182:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005186:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800518a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800518e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005192:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005196:	e841 2300 	strex	r3, r2, [r1]
 800519a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800519e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1d9      	bne.n	800515a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d013      	beq.n	80051d6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051b2:	4a13      	ldr	r2, [pc, #76]	@ (8005200 <HAL_UART_IRQHandler+0x29c>)
 80051b4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051ba:	4618      	mov	r0, r3
 80051bc:	f7fd fe42 	bl	8002e44 <HAL_DMA_Abort_IT>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d017      	beq.n	80051f6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80051d0:	4610      	mov	r0, r2
 80051d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051d4:	e00f      	b.n	80051f6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f7fd f9f4 	bl	80025c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051dc:	e00b      	b.n	80051f6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f7fd f9f0 	bl	80025c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051e4:	e007      	b.n	80051f6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f7fd f9ec 	bl	80025c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80051f4:	e195      	b.n	8005522 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051f6:	bf00      	nop
    return;
 80051f8:	e193      	b.n	8005522 <HAL_UART_IRQHandler+0x5be>
 80051fa:	bf00      	nop
 80051fc:	04000120 	.word	0x04000120
 8005200:	0800608d 	.word	0x0800608d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005208:	2b01      	cmp	r3, #1
 800520a:	f040 814e 	bne.w	80054aa <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800520e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005212:	f003 0310 	and.w	r3, r3, #16
 8005216:	2b00      	cmp	r3, #0
 8005218:	f000 8147 	beq.w	80054aa <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800521c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005220:	f003 0310 	and.w	r3, r3, #16
 8005224:	2b00      	cmp	r3, #0
 8005226:	f000 8140 	beq.w	80054aa <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2210      	movs	r2, #16
 8005230:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800523c:	2b40      	cmp	r3, #64	@ 0x40
 800523e:	f040 80b8 	bne.w	80053b2 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800524e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005252:	2b00      	cmp	r3, #0
 8005254:	f000 8167 	beq.w	8005526 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800525e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005262:	429a      	cmp	r2, r3
 8005264:	f080 815f 	bcs.w	8005526 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800526e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 0320 	and.w	r3, r3, #32
 800527e:	2b00      	cmp	r3, #0
 8005280:	f040 8086 	bne.w	8005390 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800528c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005290:	e853 3f00 	ldrex	r3, [r3]
 8005294:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005298:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800529c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	461a      	mov	r2, r3
 80052aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80052ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80052b2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80052ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80052be:	e841 2300 	strex	r3, r2, [r1]
 80052c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80052c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1da      	bne.n	8005284 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	3308      	adds	r3, #8
 80052d4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80052d8:	e853 3f00 	ldrex	r3, [r3]
 80052dc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80052de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80052e0:	f023 0301 	bic.w	r3, r3, #1
 80052e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	3308      	adds	r3, #8
 80052ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80052f2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80052f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80052fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80052fe:	e841 2300 	strex	r3, r2, [r1]
 8005302:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005304:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1e1      	bne.n	80052ce <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	3308      	adds	r3, #8
 8005310:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005312:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005314:	e853 3f00 	ldrex	r3, [r3]
 8005318:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800531a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800531c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005320:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	3308      	adds	r3, #8
 800532a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800532e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005330:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005332:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005334:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005336:	e841 2300 	strex	r3, r2, [r1]
 800533a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800533c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800533e:	2b00      	cmp	r3, #0
 8005340:	d1e3      	bne.n	800530a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2220      	movs	r2, #32
 8005346:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005356:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005358:	e853 3f00 	ldrex	r3, [r3]
 800535c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800535e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005360:	f023 0310 	bic.w	r3, r3, #16
 8005364:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	461a      	mov	r2, r3
 800536e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005372:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005374:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005376:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005378:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800537a:	e841 2300 	strex	r3, r2, [r1]
 800537e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005380:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005382:	2b00      	cmp	r3, #0
 8005384:	d1e4      	bne.n	8005350 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800538a:	4618      	mov	r0, r3
 800538c:	f7fd fd1c 	bl	8002dc8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2202      	movs	r2, #2
 8005394:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	4619      	mov	r1, r3
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 f8ce 	bl	800554c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80053b0:	e0b9      	b.n	8005526 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80053be:	b29b      	uxth	r3, r3
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	f000 80ab 	beq.w	800552a <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 80053d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f000 80a6 	beq.w	800552a <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053e6:	e853 3f00 	ldrex	r3, [r3]
 80053ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80053ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	461a      	mov	r2, r3
 80053fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005400:	647b      	str	r3, [r7, #68]	@ 0x44
 8005402:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005404:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005406:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005408:	e841 2300 	strex	r3, r2, [r1]
 800540c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800540e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005410:	2b00      	cmp	r3, #0
 8005412:	d1e4      	bne.n	80053de <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	3308      	adds	r3, #8
 800541a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800541c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800541e:	e853 3f00 	ldrex	r3, [r3]
 8005422:	623b      	str	r3, [r7, #32]
   return(result);
 8005424:	6a3b      	ldr	r3, [r7, #32]
 8005426:	f023 0301 	bic.w	r3, r3, #1
 800542a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	3308      	adds	r3, #8
 8005434:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005438:	633a      	str	r2, [r7, #48]	@ 0x30
 800543a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800543c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800543e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005440:	e841 2300 	strex	r3, r2, [r1]
 8005444:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005448:	2b00      	cmp	r3, #0
 800544a:	d1e3      	bne.n	8005414 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2220      	movs	r2, #32
 8005450:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	e853 3f00 	ldrex	r3, [r3]
 800546c:	60fb      	str	r3, [r7, #12]
   return(result);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f023 0310 	bic.w	r3, r3, #16
 8005474:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	461a      	mov	r2, r3
 800547e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005482:	61fb      	str	r3, [r7, #28]
 8005484:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005486:	69b9      	ldr	r1, [r7, #24]
 8005488:	69fa      	ldr	r2, [r7, #28]
 800548a:	e841 2300 	strex	r3, r2, [r1]
 800548e:	617b      	str	r3, [r7, #20]
   return(result);
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d1e4      	bne.n	8005460 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2202      	movs	r2, #2
 800549a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800549c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80054a0:	4619      	mov	r1, r3
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 f852 	bl	800554c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80054a8:	e03f      	b.n	800552a <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80054aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d00e      	beq.n	80054d4 <HAL_UART_IRQHandler+0x570>
 80054b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d008      	beq.n	80054d4 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80054ca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f000 ffd9 	bl	8006484 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80054d2:	e02d      	b.n	8005530 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80054d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d00e      	beq.n	80054fe <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80054e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d008      	beq.n	80054fe <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d01c      	beq.n	800552e <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	4798      	blx	r3
    }
    return;
 80054fc:	e017      	b.n	800552e <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80054fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005502:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005506:	2b00      	cmp	r3, #0
 8005508:	d012      	beq.n	8005530 <HAL_UART_IRQHandler+0x5cc>
 800550a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800550e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005512:	2b00      	cmp	r3, #0
 8005514:	d00c      	beq.n	8005530 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 fdce 	bl	80060b8 <UART_EndTransmit_IT>
    return;
 800551c:	e008      	b.n	8005530 <HAL_UART_IRQHandler+0x5cc>
      return;
 800551e:	bf00      	nop
 8005520:	e006      	b.n	8005530 <HAL_UART_IRQHandler+0x5cc>
    return;
 8005522:	bf00      	nop
 8005524:	e004      	b.n	8005530 <HAL_UART_IRQHandler+0x5cc>
      return;
 8005526:	bf00      	nop
 8005528:	e002      	b.n	8005530 <HAL_UART_IRQHandler+0x5cc>
      return;
 800552a:	bf00      	nop
 800552c:	e000      	b.n	8005530 <HAL_UART_IRQHandler+0x5cc>
    return;
 800552e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005530:	37e8      	adds	r7, #232	@ 0xe8
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop

08005538 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005540:	bf00      	nop
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	460b      	mov	r3, r1
 8005556:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005558:	bf00      	nop
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005564:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005568:	b08a      	sub	sp, #40	@ 0x28
 800556a:	af00      	add	r7, sp, #0
 800556c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800556e:	2300      	movs	r3, #0
 8005570:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	689a      	ldr	r2, [r3, #8]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	431a      	orrs	r2, r3
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	695b      	ldr	r3, [r3, #20]
 8005582:	431a      	orrs	r2, r3
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	69db      	ldr	r3, [r3, #28]
 8005588:	4313      	orrs	r3, r2
 800558a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	4ba4      	ldr	r3, [pc, #656]	@ (8005824 <UART_SetConfig+0x2c0>)
 8005594:	4013      	ands	r3, r2
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	6812      	ldr	r2, [r2, #0]
 800559a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800559c:	430b      	orrs	r3, r1
 800559e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	68da      	ldr	r2, [r3, #12]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	430a      	orrs	r2, r1
 80055b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a99      	ldr	r2, [pc, #612]	@ (8005828 <UART_SetConfig+0x2c4>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d004      	beq.n	80055d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6a1b      	ldr	r3, [r3, #32]
 80055ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055cc:	4313      	orrs	r3, r2
 80055ce:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055e0:	430a      	orrs	r2, r1
 80055e2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a90      	ldr	r2, [pc, #576]	@ (800582c <UART_SetConfig+0x2c8>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d126      	bne.n	800563c <UART_SetConfig+0xd8>
 80055ee:	4b90      	ldr	r3, [pc, #576]	@ (8005830 <UART_SetConfig+0x2cc>)
 80055f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055f4:	f003 0303 	and.w	r3, r3, #3
 80055f8:	2b03      	cmp	r3, #3
 80055fa:	d81b      	bhi.n	8005634 <UART_SetConfig+0xd0>
 80055fc:	a201      	add	r2, pc, #4	@ (adr r2, 8005604 <UART_SetConfig+0xa0>)
 80055fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005602:	bf00      	nop
 8005604:	08005615 	.word	0x08005615
 8005608:	08005625 	.word	0x08005625
 800560c:	0800561d 	.word	0x0800561d
 8005610:	0800562d 	.word	0x0800562d
 8005614:	2301      	movs	r3, #1
 8005616:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800561a:	e116      	b.n	800584a <UART_SetConfig+0x2e6>
 800561c:	2302      	movs	r3, #2
 800561e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005622:	e112      	b.n	800584a <UART_SetConfig+0x2e6>
 8005624:	2304      	movs	r3, #4
 8005626:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800562a:	e10e      	b.n	800584a <UART_SetConfig+0x2e6>
 800562c:	2308      	movs	r3, #8
 800562e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005632:	e10a      	b.n	800584a <UART_SetConfig+0x2e6>
 8005634:	2310      	movs	r3, #16
 8005636:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800563a:	e106      	b.n	800584a <UART_SetConfig+0x2e6>
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a7c      	ldr	r2, [pc, #496]	@ (8005834 <UART_SetConfig+0x2d0>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d138      	bne.n	80056b8 <UART_SetConfig+0x154>
 8005646:	4b7a      	ldr	r3, [pc, #488]	@ (8005830 <UART_SetConfig+0x2cc>)
 8005648:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800564c:	f003 030c 	and.w	r3, r3, #12
 8005650:	2b0c      	cmp	r3, #12
 8005652:	d82d      	bhi.n	80056b0 <UART_SetConfig+0x14c>
 8005654:	a201      	add	r2, pc, #4	@ (adr r2, 800565c <UART_SetConfig+0xf8>)
 8005656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800565a:	bf00      	nop
 800565c:	08005691 	.word	0x08005691
 8005660:	080056b1 	.word	0x080056b1
 8005664:	080056b1 	.word	0x080056b1
 8005668:	080056b1 	.word	0x080056b1
 800566c:	080056a1 	.word	0x080056a1
 8005670:	080056b1 	.word	0x080056b1
 8005674:	080056b1 	.word	0x080056b1
 8005678:	080056b1 	.word	0x080056b1
 800567c:	08005699 	.word	0x08005699
 8005680:	080056b1 	.word	0x080056b1
 8005684:	080056b1 	.word	0x080056b1
 8005688:	080056b1 	.word	0x080056b1
 800568c:	080056a9 	.word	0x080056a9
 8005690:	2300      	movs	r3, #0
 8005692:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005696:	e0d8      	b.n	800584a <UART_SetConfig+0x2e6>
 8005698:	2302      	movs	r3, #2
 800569a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800569e:	e0d4      	b.n	800584a <UART_SetConfig+0x2e6>
 80056a0:	2304      	movs	r3, #4
 80056a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056a6:	e0d0      	b.n	800584a <UART_SetConfig+0x2e6>
 80056a8:	2308      	movs	r3, #8
 80056aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056ae:	e0cc      	b.n	800584a <UART_SetConfig+0x2e6>
 80056b0:	2310      	movs	r3, #16
 80056b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056b6:	e0c8      	b.n	800584a <UART_SetConfig+0x2e6>
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a5e      	ldr	r2, [pc, #376]	@ (8005838 <UART_SetConfig+0x2d4>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d125      	bne.n	800570e <UART_SetConfig+0x1aa>
 80056c2:	4b5b      	ldr	r3, [pc, #364]	@ (8005830 <UART_SetConfig+0x2cc>)
 80056c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056c8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80056cc:	2b30      	cmp	r3, #48	@ 0x30
 80056ce:	d016      	beq.n	80056fe <UART_SetConfig+0x19a>
 80056d0:	2b30      	cmp	r3, #48	@ 0x30
 80056d2:	d818      	bhi.n	8005706 <UART_SetConfig+0x1a2>
 80056d4:	2b20      	cmp	r3, #32
 80056d6:	d00a      	beq.n	80056ee <UART_SetConfig+0x18a>
 80056d8:	2b20      	cmp	r3, #32
 80056da:	d814      	bhi.n	8005706 <UART_SetConfig+0x1a2>
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d002      	beq.n	80056e6 <UART_SetConfig+0x182>
 80056e0:	2b10      	cmp	r3, #16
 80056e2:	d008      	beq.n	80056f6 <UART_SetConfig+0x192>
 80056e4:	e00f      	b.n	8005706 <UART_SetConfig+0x1a2>
 80056e6:	2300      	movs	r3, #0
 80056e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056ec:	e0ad      	b.n	800584a <UART_SetConfig+0x2e6>
 80056ee:	2302      	movs	r3, #2
 80056f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056f4:	e0a9      	b.n	800584a <UART_SetConfig+0x2e6>
 80056f6:	2304      	movs	r3, #4
 80056f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056fc:	e0a5      	b.n	800584a <UART_SetConfig+0x2e6>
 80056fe:	2308      	movs	r3, #8
 8005700:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005704:	e0a1      	b.n	800584a <UART_SetConfig+0x2e6>
 8005706:	2310      	movs	r3, #16
 8005708:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800570c:	e09d      	b.n	800584a <UART_SetConfig+0x2e6>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a4a      	ldr	r2, [pc, #296]	@ (800583c <UART_SetConfig+0x2d8>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d125      	bne.n	8005764 <UART_SetConfig+0x200>
 8005718:	4b45      	ldr	r3, [pc, #276]	@ (8005830 <UART_SetConfig+0x2cc>)
 800571a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800571e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005722:	2bc0      	cmp	r3, #192	@ 0xc0
 8005724:	d016      	beq.n	8005754 <UART_SetConfig+0x1f0>
 8005726:	2bc0      	cmp	r3, #192	@ 0xc0
 8005728:	d818      	bhi.n	800575c <UART_SetConfig+0x1f8>
 800572a:	2b80      	cmp	r3, #128	@ 0x80
 800572c:	d00a      	beq.n	8005744 <UART_SetConfig+0x1e0>
 800572e:	2b80      	cmp	r3, #128	@ 0x80
 8005730:	d814      	bhi.n	800575c <UART_SetConfig+0x1f8>
 8005732:	2b00      	cmp	r3, #0
 8005734:	d002      	beq.n	800573c <UART_SetConfig+0x1d8>
 8005736:	2b40      	cmp	r3, #64	@ 0x40
 8005738:	d008      	beq.n	800574c <UART_SetConfig+0x1e8>
 800573a:	e00f      	b.n	800575c <UART_SetConfig+0x1f8>
 800573c:	2300      	movs	r3, #0
 800573e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005742:	e082      	b.n	800584a <UART_SetConfig+0x2e6>
 8005744:	2302      	movs	r3, #2
 8005746:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800574a:	e07e      	b.n	800584a <UART_SetConfig+0x2e6>
 800574c:	2304      	movs	r3, #4
 800574e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005752:	e07a      	b.n	800584a <UART_SetConfig+0x2e6>
 8005754:	2308      	movs	r3, #8
 8005756:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800575a:	e076      	b.n	800584a <UART_SetConfig+0x2e6>
 800575c:	2310      	movs	r3, #16
 800575e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005762:	e072      	b.n	800584a <UART_SetConfig+0x2e6>
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a35      	ldr	r2, [pc, #212]	@ (8005840 <UART_SetConfig+0x2dc>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d12a      	bne.n	80057c4 <UART_SetConfig+0x260>
 800576e:	4b30      	ldr	r3, [pc, #192]	@ (8005830 <UART_SetConfig+0x2cc>)
 8005770:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005774:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005778:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800577c:	d01a      	beq.n	80057b4 <UART_SetConfig+0x250>
 800577e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005782:	d81b      	bhi.n	80057bc <UART_SetConfig+0x258>
 8005784:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005788:	d00c      	beq.n	80057a4 <UART_SetConfig+0x240>
 800578a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800578e:	d815      	bhi.n	80057bc <UART_SetConfig+0x258>
 8005790:	2b00      	cmp	r3, #0
 8005792:	d003      	beq.n	800579c <UART_SetConfig+0x238>
 8005794:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005798:	d008      	beq.n	80057ac <UART_SetConfig+0x248>
 800579a:	e00f      	b.n	80057bc <UART_SetConfig+0x258>
 800579c:	2300      	movs	r3, #0
 800579e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057a2:	e052      	b.n	800584a <UART_SetConfig+0x2e6>
 80057a4:	2302      	movs	r3, #2
 80057a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057aa:	e04e      	b.n	800584a <UART_SetConfig+0x2e6>
 80057ac:	2304      	movs	r3, #4
 80057ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057b2:	e04a      	b.n	800584a <UART_SetConfig+0x2e6>
 80057b4:	2308      	movs	r3, #8
 80057b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057ba:	e046      	b.n	800584a <UART_SetConfig+0x2e6>
 80057bc:	2310      	movs	r3, #16
 80057be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057c2:	e042      	b.n	800584a <UART_SetConfig+0x2e6>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a17      	ldr	r2, [pc, #92]	@ (8005828 <UART_SetConfig+0x2c4>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d13a      	bne.n	8005844 <UART_SetConfig+0x2e0>
 80057ce:	4b18      	ldr	r3, [pc, #96]	@ (8005830 <UART_SetConfig+0x2cc>)
 80057d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057d4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80057d8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80057dc:	d01a      	beq.n	8005814 <UART_SetConfig+0x2b0>
 80057de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80057e2:	d81b      	bhi.n	800581c <UART_SetConfig+0x2b8>
 80057e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057e8:	d00c      	beq.n	8005804 <UART_SetConfig+0x2a0>
 80057ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057ee:	d815      	bhi.n	800581c <UART_SetConfig+0x2b8>
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d003      	beq.n	80057fc <UART_SetConfig+0x298>
 80057f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057f8:	d008      	beq.n	800580c <UART_SetConfig+0x2a8>
 80057fa:	e00f      	b.n	800581c <UART_SetConfig+0x2b8>
 80057fc:	2300      	movs	r3, #0
 80057fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005802:	e022      	b.n	800584a <UART_SetConfig+0x2e6>
 8005804:	2302      	movs	r3, #2
 8005806:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800580a:	e01e      	b.n	800584a <UART_SetConfig+0x2e6>
 800580c:	2304      	movs	r3, #4
 800580e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005812:	e01a      	b.n	800584a <UART_SetConfig+0x2e6>
 8005814:	2308      	movs	r3, #8
 8005816:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800581a:	e016      	b.n	800584a <UART_SetConfig+0x2e6>
 800581c:	2310      	movs	r3, #16
 800581e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005822:	e012      	b.n	800584a <UART_SetConfig+0x2e6>
 8005824:	efff69f3 	.word	0xefff69f3
 8005828:	40008000 	.word	0x40008000
 800582c:	40013800 	.word	0x40013800
 8005830:	40021000 	.word	0x40021000
 8005834:	40004400 	.word	0x40004400
 8005838:	40004800 	.word	0x40004800
 800583c:	40004c00 	.word	0x40004c00
 8005840:	40005000 	.word	0x40005000
 8005844:	2310      	movs	r3, #16
 8005846:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a9f      	ldr	r2, [pc, #636]	@ (8005acc <UART_SetConfig+0x568>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d17a      	bne.n	800594a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005854:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005858:	2b08      	cmp	r3, #8
 800585a:	d824      	bhi.n	80058a6 <UART_SetConfig+0x342>
 800585c:	a201      	add	r2, pc, #4	@ (adr r2, 8005864 <UART_SetConfig+0x300>)
 800585e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005862:	bf00      	nop
 8005864:	08005889 	.word	0x08005889
 8005868:	080058a7 	.word	0x080058a7
 800586c:	08005891 	.word	0x08005891
 8005870:	080058a7 	.word	0x080058a7
 8005874:	08005897 	.word	0x08005897
 8005878:	080058a7 	.word	0x080058a7
 800587c:	080058a7 	.word	0x080058a7
 8005880:	080058a7 	.word	0x080058a7
 8005884:	0800589f 	.word	0x0800589f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005888:	f7fe fc50 	bl	800412c <HAL_RCC_GetPCLK1Freq>
 800588c:	61f8      	str	r0, [r7, #28]
        break;
 800588e:	e010      	b.n	80058b2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005890:	4b8f      	ldr	r3, [pc, #572]	@ (8005ad0 <UART_SetConfig+0x56c>)
 8005892:	61fb      	str	r3, [r7, #28]
        break;
 8005894:	e00d      	b.n	80058b2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005896:	f7fe fbb1 	bl	8003ffc <HAL_RCC_GetSysClockFreq>
 800589a:	61f8      	str	r0, [r7, #28]
        break;
 800589c:	e009      	b.n	80058b2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800589e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058a2:	61fb      	str	r3, [r7, #28]
        break;
 80058a4:	e005      	b.n	80058b2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80058a6:	2300      	movs	r3, #0
 80058a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80058b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	f000 80fb 	beq.w	8005ab0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	685a      	ldr	r2, [r3, #4]
 80058be:	4613      	mov	r3, r2
 80058c0:	005b      	lsls	r3, r3, #1
 80058c2:	4413      	add	r3, r2
 80058c4:	69fa      	ldr	r2, [r7, #28]
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d305      	bcc.n	80058d6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80058d0:	69fa      	ldr	r2, [r7, #28]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d903      	bls.n	80058de <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80058dc:	e0e8      	b.n	8005ab0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	2200      	movs	r2, #0
 80058e2:	461c      	mov	r4, r3
 80058e4:	4615      	mov	r5, r2
 80058e6:	f04f 0200 	mov.w	r2, #0
 80058ea:	f04f 0300 	mov.w	r3, #0
 80058ee:	022b      	lsls	r3, r5, #8
 80058f0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80058f4:	0222      	lsls	r2, r4, #8
 80058f6:	68f9      	ldr	r1, [r7, #12]
 80058f8:	6849      	ldr	r1, [r1, #4]
 80058fa:	0849      	lsrs	r1, r1, #1
 80058fc:	2000      	movs	r0, #0
 80058fe:	4688      	mov	r8, r1
 8005900:	4681      	mov	r9, r0
 8005902:	eb12 0a08 	adds.w	sl, r2, r8
 8005906:	eb43 0b09 	adc.w	fp, r3, r9
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	603b      	str	r3, [r7, #0]
 8005912:	607a      	str	r2, [r7, #4]
 8005914:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005918:	4650      	mov	r0, sl
 800591a:	4659      	mov	r1, fp
 800591c:	f7fb f954 	bl	8000bc8 <__aeabi_uldivmod>
 8005920:	4602      	mov	r2, r0
 8005922:	460b      	mov	r3, r1
 8005924:	4613      	mov	r3, r2
 8005926:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005928:	69bb      	ldr	r3, [r7, #24]
 800592a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800592e:	d308      	bcc.n	8005942 <UART_SetConfig+0x3de>
 8005930:	69bb      	ldr	r3, [r7, #24]
 8005932:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005936:	d204      	bcs.n	8005942 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	69ba      	ldr	r2, [r7, #24]
 800593e:	60da      	str	r2, [r3, #12]
 8005940:	e0b6      	b.n	8005ab0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005948:	e0b2      	b.n	8005ab0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	69db      	ldr	r3, [r3, #28]
 800594e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005952:	d15e      	bne.n	8005a12 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005954:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005958:	2b08      	cmp	r3, #8
 800595a:	d828      	bhi.n	80059ae <UART_SetConfig+0x44a>
 800595c:	a201      	add	r2, pc, #4	@ (adr r2, 8005964 <UART_SetConfig+0x400>)
 800595e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005962:	bf00      	nop
 8005964:	08005989 	.word	0x08005989
 8005968:	08005991 	.word	0x08005991
 800596c:	08005999 	.word	0x08005999
 8005970:	080059af 	.word	0x080059af
 8005974:	0800599f 	.word	0x0800599f
 8005978:	080059af 	.word	0x080059af
 800597c:	080059af 	.word	0x080059af
 8005980:	080059af 	.word	0x080059af
 8005984:	080059a7 	.word	0x080059a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005988:	f7fe fbd0 	bl	800412c <HAL_RCC_GetPCLK1Freq>
 800598c:	61f8      	str	r0, [r7, #28]
        break;
 800598e:	e014      	b.n	80059ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005990:	f7fe fbe2 	bl	8004158 <HAL_RCC_GetPCLK2Freq>
 8005994:	61f8      	str	r0, [r7, #28]
        break;
 8005996:	e010      	b.n	80059ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005998:	4b4d      	ldr	r3, [pc, #308]	@ (8005ad0 <UART_SetConfig+0x56c>)
 800599a:	61fb      	str	r3, [r7, #28]
        break;
 800599c:	e00d      	b.n	80059ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800599e:	f7fe fb2d 	bl	8003ffc <HAL_RCC_GetSysClockFreq>
 80059a2:	61f8      	str	r0, [r7, #28]
        break;
 80059a4:	e009      	b.n	80059ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059aa:	61fb      	str	r3, [r7, #28]
        break;
 80059ac:	e005      	b.n	80059ba <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80059ae:	2300      	movs	r3, #0
 80059b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80059b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d077      	beq.n	8005ab0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	005a      	lsls	r2, r3, #1
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	085b      	lsrs	r3, r3, #1
 80059ca:	441a      	add	r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80059d4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	2b0f      	cmp	r3, #15
 80059da:	d916      	bls.n	8005a0a <UART_SetConfig+0x4a6>
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059e2:	d212      	bcs.n	8005a0a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	f023 030f 	bic.w	r3, r3, #15
 80059ec:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	085b      	lsrs	r3, r3, #1
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	f003 0307 	and.w	r3, r3, #7
 80059f8:	b29a      	uxth	r2, r3
 80059fa:	8afb      	ldrh	r3, [r7, #22]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	8afa      	ldrh	r2, [r7, #22]
 8005a06:	60da      	str	r2, [r3, #12]
 8005a08:	e052      	b.n	8005ab0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005a10:	e04e      	b.n	8005ab0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a12:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005a16:	2b08      	cmp	r3, #8
 8005a18:	d827      	bhi.n	8005a6a <UART_SetConfig+0x506>
 8005a1a:	a201      	add	r2, pc, #4	@ (adr r2, 8005a20 <UART_SetConfig+0x4bc>)
 8005a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a20:	08005a45 	.word	0x08005a45
 8005a24:	08005a4d 	.word	0x08005a4d
 8005a28:	08005a55 	.word	0x08005a55
 8005a2c:	08005a6b 	.word	0x08005a6b
 8005a30:	08005a5b 	.word	0x08005a5b
 8005a34:	08005a6b 	.word	0x08005a6b
 8005a38:	08005a6b 	.word	0x08005a6b
 8005a3c:	08005a6b 	.word	0x08005a6b
 8005a40:	08005a63 	.word	0x08005a63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a44:	f7fe fb72 	bl	800412c <HAL_RCC_GetPCLK1Freq>
 8005a48:	61f8      	str	r0, [r7, #28]
        break;
 8005a4a:	e014      	b.n	8005a76 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a4c:	f7fe fb84 	bl	8004158 <HAL_RCC_GetPCLK2Freq>
 8005a50:	61f8      	str	r0, [r7, #28]
        break;
 8005a52:	e010      	b.n	8005a76 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a54:	4b1e      	ldr	r3, [pc, #120]	@ (8005ad0 <UART_SetConfig+0x56c>)
 8005a56:	61fb      	str	r3, [r7, #28]
        break;
 8005a58:	e00d      	b.n	8005a76 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a5a:	f7fe facf 	bl	8003ffc <HAL_RCC_GetSysClockFreq>
 8005a5e:	61f8      	str	r0, [r7, #28]
        break;
 8005a60:	e009      	b.n	8005a76 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a66:	61fb      	str	r3, [r7, #28]
        break;
 8005a68:	e005      	b.n	8005a76 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005a74:	bf00      	nop
    }

    if (pclk != 0U)
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d019      	beq.n	8005ab0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	085a      	lsrs	r2, r3, #1
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	441a      	add	r2, r3
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a8e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	2b0f      	cmp	r3, #15
 8005a94:	d909      	bls.n	8005aaa <UART_SetConfig+0x546>
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a9c:	d205      	bcs.n	8005aaa <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	b29a      	uxth	r2, r3
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	60da      	str	r2, [r3, #12]
 8005aa8:	e002      	b.n	8005ab0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005abc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3728      	adds	r7, #40	@ 0x28
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005aca:	bf00      	nop
 8005acc:	40008000 	.word	0x40008000
 8005ad0:	00f42400 	.word	0x00f42400

08005ad4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ae0:	f003 0308 	and.w	r3, r3, #8
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d00a      	beq.n	8005afe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	430a      	orrs	r2, r1
 8005afc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b02:	f003 0301 	and.w	r3, r3, #1
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d00a      	beq.n	8005b20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	430a      	orrs	r2, r1
 8005b1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b24:	f003 0302 	and.w	r3, r3, #2
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d00a      	beq.n	8005b42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	430a      	orrs	r2, r1
 8005b40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b46:	f003 0304 	and.w	r3, r3, #4
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00a      	beq.n	8005b64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	430a      	orrs	r2, r1
 8005b62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b68:	f003 0310 	and.w	r3, r3, #16
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00a      	beq.n	8005b86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	430a      	orrs	r2, r1
 8005b84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b8a:	f003 0320 	and.w	r3, r3, #32
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d00a      	beq.n	8005ba8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	430a      	orrs	r2, r1
 8005ba6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d01a      	beq.n	8005bea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	430a      	orrs	r2, r1
 8005bc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005bd2:	d10a      	bne.n	8005bea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	430a      	orrs	r2, r1
 8005be8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00a      	beq.n	8005c0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	430a      	orrs	r2, r1
 8005c0a:	605a      	str	r2, [r3, #4]
  }
}
 8005c0c:	bf00      	nop
 8005c0e:	370c      	adds	r7, #12
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b098      	sub	sp, #96	@ 0x60
 8005c1c:	af02      	add	r7, sp, #8
 8005c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c28:	f7fc fe44 	bl	80028b4 <HAL_GetTick>
 8005c2c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 0308 	and.w	r3, r3, #8
 8005c38:	2b08      	cmp	r3, #8
 8005c3a:	d12e      	bne.n	8005c9a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c3c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005c40:	9300      	str	r3, [sp, #0]
 8005c42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c44:	2200      	movs	r2, #0
 8005c46:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 f88c 	bl	8005d68 <UART_WaitOnFlagUntilTimeout>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d021      	beq.n	8005c9a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c5e:	e853 3f00 	ldrex	r3, [r3]
 8005c62:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005c64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	461a      	mov	r2, r3
 8005c72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c74:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c76:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c78:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005c7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c7c:	e841 2300 	strex	r3, r2, [r1]
 8005c80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005c82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d1e6      	bne.n	8005c56 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2220      	movs	r2, #32
 8005c8c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	e062      	b.n	8005d60 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 0304 	and.w	r3, r3, #4
 8005ca4:	2b04      	cmp	r3, #4
 8005ca6:	d149      	bne.n	8005d3c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ca8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005cac:	9300      	str	r3, [sp, #0]
 8005cae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 f856 	bl	8005d68 <UART_WaitOnFlagUntilTimeout>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d03c      	beq.n	8005d3c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cca:	e853 3f00 	ldrex	r3, [r3]
 8005cce:	623b      	str	r3, [r7, #32]
   return(result);
 8005cd0:	6a3b      	ldr	r3, [r7, #32]
 8005cd2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005cd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	461a      	mov	r2, r3
 8005cde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ce0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ce2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ce6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ce8:	e841 2300 	strex	r3, r2, [r1]
 8005cec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d1e6      	bne.n	8005cc2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	3308      	adds	r3, #8
 8005cfa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	e853 3f00 	ldrex	r3, [r3]
 8005d02:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f023 0301 	bic.w	r3, r3, #1
 8005d0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	3308      	adds	r3, #8
 8005d12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d14:	61fa      	str	r2, [r7, #28]
 8005d16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d18:	69b9      	ldr	r1, [r7, #24]
 8005d1a:	69fa      	ldr	r2, [r7, #28]
 8005d1c:	e841 2300 	strex	r3, r2, [r1]
 8005d20:	617b      	str	r3, [r7, #20]
   return(result);
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d1e5      	bne.n	8005cf4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2220      	movs	r2, #32
 8005d2c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d38:	2303      	movs	r3, #3
 8005d3a:	e011      	b.n	8005d60 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2220      	movs	r2, #32
 8005d40:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2220      	movs	r2, #32
 8005d46:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005d5e:	2300      	movs	r3, #0
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3758      	adds	r7, #88	@ 0x58
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	60b9      	str	r1, [r7, #8]
 8005d72:	603b      	str	r3, [r7, #0]
 8005d74:	4613      	mov	r3, r2
 8005d76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d78:	e049      	b.n	8005e0e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d7a:	69bb      	ldr	r3, [r7, #24]
 8005d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d80:	d045      	beq.n	8005e0e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d82:	f7fc fd97 	bl	80028b4 <HAL_GetTick>
 8005d86:	4602      	mov	r2, r0
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	1ad3      	subs	r3, r2, r3
 8005d8c:	69ba      	ldr	r2, [r7, #24]
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d302      	bcc.n	8005d98 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d101      	bne.n	8005d9c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005d98:	2303      	movs	r3, #3
 8005d9a:	e048      	b.n	8005e2e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 0304 	and.w	r3, r3, #4
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d031      	beq.n	8005e0e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	69db      	ldr	r3, [r3, #28]
 8005db0:	f003 0308 	and.w	r3, r3, #8
 8005db4:	2b08      	cmp	r3, #8
 8005db6:	d110      	bne.n	8005dda <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	2208      	movs	r2, #8
 8005dbe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005dc0:	68f8      	ldr	r0, [r7, #12]
 8005dc2:	f000 f8ff 	bl	8005fc4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2208      	movs	r2, #8
 8005dca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e029      	b.n	8005e2e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	69db      	ldr	r3, [r3, #28]
 8005de0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005de4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005de8:	d111      	bne.n	8005e0e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005df2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005df4:	68f8      	ldr	r0, [r7, #12]
 8005df6:	f000 f8e5 	bl	8005fc4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2220      	movs	r2, #32
 8005dfe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	e00f      	b.n	8005e2e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	69da      	ldr	r2, [r3, #28]
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	4013      	ands	r3, r2
 8005e18:	68ba      	ldr	r2, [r7, #8]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	bf0c      	ite	eq
 8005e1e:	2301      	moveq	r3, #1
 8005e20:	2300      	movne	r3, #0
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	461a      	mov	r2, r3
 8005e26:	79fb      	ldrb	r3, [r7, #7]
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d0a6      	beq.n	8005d7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3710      	adds	r7, #16
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
	...

08005e38 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b097      	sub	sp, #92	@ 0x5c
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	60b9      	str	r1, [r7, #8]
 8005e42:	4613      	mov	r3, r2
 8005e44:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	68ba      	ldr	r2, [r7, #8]
 8005e4a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	88fa      	ldrh	r2, [r7, #6]
 8005e50:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	88fa      	ldrh	r2, [r7, #6]
 8005e58:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e6a:	d10e      	bne.n	8005e8a <UART_Start_Receive_IT+0x52>
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d105      	bne.n	8005e80 <UART_Start_Receive_IT+0x48>
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005e7a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005e7e:	e02d      	b.n	8005edc <UART_Start_Receive_IT+0xa4>
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	22ff      	movs	r2, #255	@ 0xff
 8005e84:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005e88:	e028      	b.n	8005edc <UART_Start_Receive_IT+0xa4>
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d10d      	bne.n	8005eae <UART_Start_Receive_IT+0x76>
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d104      	bne.n	8005ea4 <UART_Start_Receive_IT+0x6c>
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	22ff      	movs	r2, #255	@ 0xff
 8005e9e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005ea2:	e01b      	b.n	8005edc <UART_Start_Receive_IT+0xa4>
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	227f      	movs	r2, #127	@ 0x7f
 8005ea8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005eac:	e016      	b.n	8005edc <UART_Start_Receive_IT+0xa4>
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005eb6:	d10d      	bne.n	8005ed4 <UART_Start_Receive_IT+0x9c>
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d104      	bne.n	8005eca <UART_Start_Receive_IT+0x92>
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	227f      	movs	r2, #127	@ 0x7f
 8005ec4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005ec8:	e008      	b.n	8005edc <UART_Start_Receive_IT+0xa4>
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	223f      	movs	r2, #63	@ 0x3f
 8005ece:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005ed2:	e003      	b.n	8005edc <UART_Start_Receive_IT+0xa4>
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2222      	movs	r2, #34	@ 0x22
 8005ee8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	3308      	adds	r3, #8
 8005ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ef6:	e853 3f00 	ldrex	r3, [r3]
 8005efa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005efc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005efe:	f043 0301 	orr.w	r3, r3, #1
 8005f02:	657b      	str	r3, [r7, #84]	@ 0x54
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	3308      	adds	r3, #8
 8005f0a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005f0c:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005f0e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f10:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005f12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f14:	e841 2300 	strex	r3, r2, [r1]
 8005f18:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005f1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d1e5      	bne.n	8005eec <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f28:	d107      	bne.n	8005f3a <UART_Start_Receive_IT+0x102>
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d103      	bne.n	8005f3a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	4a21      	ldr	r2, [pc, #132]	@ (8005fbc <UART_Start_Receive_IT+0x184>)
 8005f36:	669a      	str	r2, [r3, #104]	@ 0x68
 8005f38:	e002      	b.n	8005f40 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	4a20      	ldr	r2, [pc, #128]	@ (8005fc0 <UART_Start_Receive_IT+0x188>)
 8005f3e:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	691b      	ldr	r3, [r3, #16]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d019      	beq.n	8005f7c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f50:	e853 3f00 	ldrex	r3, [r3]
 8005f54:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f58:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005f5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	461a      	mov	r2, r3
 8005f64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f66:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f68:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f6a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005f6c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005f6e:	e841 2300 	strex	r3, r2, [r1]
 8005f72:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005f74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d1e6      	bne.n	8005f48 <UART_Start_Receive_IT+0x110>
 8005f7a:	e018      	b.n	8005fae <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	e853 3f00 	ldrex	r3, [r3]
 8005f88:	613b      	str	r3, [r7, #16]
   return(result);
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	f043 0320 	orr.w	r3, r3, #32
 8005f90:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	461a      	mov	r2, r3
 8005f98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f9a:	623b      	str	r3, [r7, #32]
 8005f9c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9e:	69f9      	ldr	r1, [r7, #28]
 8005fa0:	6a3a      	ldr	r2, [r7, #32]
 8005fa2:	e841 2300 	strex	r3, r2, [r1]
 8005fa6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005fa8:	69bb      	ldr	r3, [r7, #24]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d1e6      	bne.n	8005f7c <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005fae:	2300      	movs	r3, #0
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	375c      	adds	r7, #92	@ 0x5c
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr
 8005fbc:	080062c9 	.word	0x080062c9
 8005fc0:	0800610d 	.word	0x0800610d

08005fc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b095      	sub	sp, #84	@ 0x54
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fd4:	e853 3f00 	ldrex	r3, [r3]
 8005fd8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fdc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005fe0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005fea:	643b      	str	r3, [r7, #64]	@ 0x40
 8005fec:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005ff0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ff2:	e841 2300 	strex	r3, r2, [r1]
 8005ff6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005ff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d1e6      	bne.n	8005fcc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	3308      	adds	r3, #8
 8006004:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006006:	6a3b      	ldr	r3, [r7, #32]
 8006008:	e853 3f00 	ldrex	r3, [r3]
 800600c:	61fb      	str	r3, [r7, #28]
   return(result);
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	f023 0301 	bic.w	r3, r3, #1
 8006014:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	3308      	adds	r3, #8
 800601c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800601e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006020:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006022:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006024:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006026:	e841 2300 	strex	r3, r2, [r1]
 800602a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800602c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800602e:	2b00      	cmp	r3, #0
 8006030:	d1e5      	bne.n	8005ffe <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006036:	2b01      	cmp	r3, #1
 8006038:	d118      	bne.n	800606c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	e853 3f00 	ldrex	r3, [r3]
 8006046:	60bb      	str	r3, [r7, #8]
   return(result);
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	f023 0310 	bic.w	r3, r3, #16
 800604e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	461a      	mov	r2, r3
 8006056:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006058:	61bb      	str	r3, [r7, #24]
 800605a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800605c:	6979      	ldr	r1, [r7, #20]
 800605e:	69ba      	ldr	r2, [r7, #24]
 8006060:	e841 2300 	strex	r3, r2, [r1]
 8006064:	613b      	str	r3, [r7, #16]
   return(result);
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d1e6      	bne.n	800603a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2220      	movs	r2, #32
 8006070:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006080:	bf00      	nop
 8006082:	3754      	adds	r7, #84	@ 0x54
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006098:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2200      	movs	r2, #0
 800609e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80060aa:	68f8      	ldr	r0, [r7, #12]
 80060ac:	f7fc fa8a 	bl	80025c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060b0:	bf00      	nop
 80060b2:	3710      	adds	r7, #16
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b088      	sub	sp, #32
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	e853 3f00 	ldrex	r3, [r3]
 80060cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060d4:	61fb      	str	r3, [r7, #28]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	461a      	mov	r2, r3
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	61bb      	str	r3, [r7, #24]
 80060e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e2:	6979      	ldr	r1, [r7, #20]
 80060e4:	69ba      	ldr	r2, [r7, #24]
 80060e6:	e841 2300 	strex	r3, r2, [r1]
 80060ea:	613b      	str	r3, [r7, #16]
   return(result);
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d1e6      	bne.n	80060c0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2220      	movs	r2, #32
 80060f6:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f7ff fa1a 	bl	8005538 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006104:	bf00      	nop
 8006106:	3720      	adds	r7, #32
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}

0800610c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b09c      	sub	sp, #112	@ 0x70
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800611a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006124:	2b22      	cmp	r3, #34	@ 0x22
 8006126:	f040 80be 	bne.w	80062a6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006130:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006134:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006138:	b2d9      	uxtb	r1, r3
 800613a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800613e:	b2da      	uxtb	r2, r3
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006144:	400a      	ands	r2, r1
 8006146:	b2d2      	uxtb	r2, r2
 8006148:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800614e:	1c5a      	adds	r2, r3, #1
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800615a:	b29b      	uxth	r3, r3
 800615c:	3b01      	subs	r3, #1
 800615e:	b29a      	uxth	r2, r3
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800616c:	b29b      	uxth	r3, r3
 800616e:	2b00      	cmp	r3, #0
 8006170:	f040 80a3 	bne.w	80062ba <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800617a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800617c:	e853 3f00 	ldrex	r3, [r3]
 8006180:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006182:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006184:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006188:	66bb      	str	r3, [r7, #104]	@ 0x68
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	461a      	mov	r2, r3
 8006190:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006192:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006194:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006196:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006198:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800619a:	e841 2300 	strex	r3, r2, [r1]
 800619e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80061a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d1e6      	bne.n	8006174 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	3308      	adds	r3, #8
 80061ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061b0:	e853 3f00 	ldrex	r3, [r3]
 80061b4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80061b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061b8:	f023 0301 	bic.w	r3, r3, #1
 80061bc:	667b      	str	r3, [r7, #100]	@ 0x64
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	3308      	adds	r3, #8
 80061c4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80061c6:	647a      	str	r2, [r7, #68]	@ 0x44
 80061c8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80061cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80061ce:	e841 2300 	strex	r3, r2, [r1]
 80061d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80061d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d1e5      	bne.n	80061a6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2220      	movs	r2, #32
 80061de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a34      	ldr	r2, [pc, #208]	@ (80062c4 <UART_RxISR_8BIT+0x1b8>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d01f      	beq.n	8006238 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006202:	2b00      	cmp	r3, #0
 8006204:	d018      	beq.n	8006238 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800620e:	e853 3f00 	ldrex	r3, [r3]
 8006212:	623b      	str	r3, [r7, #32]
   return(result);
 8006214:	6a3b      	ldr	r3, [r7, #32]
 8006216:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800621a:	663b      	str	r3, [r7, #96]	@ 0x60
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	461a      	mov	r2, r3
 8006222:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006224:	633b      	str	r3, [r7, #48]	@ 0x30
 8006226:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006228:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800622a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800622c:	e841 2300 	strex	r3, r2, [r1]
 8006230:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006234:	2b00      	cmp	r3, #0
 8006236:	d1e6      	bne.n	8006206 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800623c:	2b01      	cmp	r3, #1
 800623e:	d12e      	bne.n	800629e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	e853 3f00 	ldrex	r3, [r3]
 8006252:	60fb      	str	r3, [r7, #12]
   return(result);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f023 0310 	bic.w	r3, r3, #16
 800625a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	461a      	mov	r2, r3
 8006262:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006264:	61fb      	str	r3, [r7, #28]
 8006266:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006268:	69b9      	ldr	r1, [r7, #24]
 800626a:	69fa      	ldr	r2, [r7, #28]
 800626c:	e841 2300 	strex	r3, r2, [r1]
 8006270:	617b      	str	r3, [r7, #20]
   return(result);
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d1e6      	bne.n	8006246 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	69db      	ldr	r3, [r3, #28]
 800627e:	f003 0310 	and.w	r3, r3, #16
 8006282:	2b10      	cmp	r3, #16
 8006284:	d103      	bne.n	800628e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2210      	movs	r2, #16
 800628c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006294:	4619      	mov	r1, r3
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f7ff f958 	bl	800554c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800629c:	e00d      	b.n	80062ba <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f7fc f966 	bl	8002570 <HAL_UART_RxCpltCallback>
}
 80062a4:	e009      	b.n	80062ba <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	8b1b      	ldrh	r3, [r3, #24]
 80062ac:	b29a      	uxth	r2, r3
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f042 0208 	orr.w	r2, r2, #8
 80062b6:	b292      	uxth	r2, r2
 80062b8:	831a      	strh	r2, [r3, #24]
}
 80062ba:	bf00      	nop
 80062bc:	3770      	adds	r7, #112	@ 0x70
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	40008000 	.word	0x40008000

080062c8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b09c      	sub	sp, #112	@ 0x70
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80062d6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062e0:	2b22      	cmp	r3, #34	@ 0x22
 80062e2:	f040 80be 	bne.w	8006462 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80062ec:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062f4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80062f6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80062fa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80062fe:	4013      	ands	r3, r2
 8006300:	b29a      	uxth	r2, r3
 8006302:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006304:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800630a:	1c9a      	adds	r2, r3, #2
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006316:	b29b      	uxth	r3, r3
 8006318:	3b01      	subs	r3, #1
 800631a:	b29a      	uxth	r2, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006328:	b29b      	uxth	r3, r3
 800632a:	2b00      	cmp	r3, #0
 800632c:	f040 80a3 	bne.w	8006476 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006336:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006338:	e853 3f00 	ldrex	r3, [r3]
 800633c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800633e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006340:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006344:	667b      	str	r3, [r7, #100]	@ 0x64
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	461a      	mov	r2, r3
 800634c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800634e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006350:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006352:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006354:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006356:	e841 2300 	strex	r3, r2, [r1]
 800635a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800635c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800635e:	2b00      	cmp	r3, #0
 8006360:	d1e6      	bne.n	8006330 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	3308      	adds	r3, #8
 8006368:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800636a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800636c:	e853 3f00 	ldrex	r3, [r3]
 8006370:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006374:	f023 0301 	bic.w	r3, r3, #1
 8006378:	663b      	str	r3, [r7, #96]	@ 0x60
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	3308      	adds	r3, #8
 8006380:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006382:	643a      	str	r2, [r7, #64]	@ 0x40
 8006384:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006386:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006388:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800638a:	e841 2300 	strex	r3, r2, [r1]
 800638e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006392:	2b00      	cmp	r3, #0
 8006394:	d1e5      	bne.n	8006362 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2220      	movs	r2, #32
 800639a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a34      	ldr	r2, [pc, #208]	@ (8006480 <UART_RxISR_16BIT+0x1b8>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d01f      	beq.n	80063f4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d018      	beq.n	80063f4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c8:	6a3b      	ldr	r3, [r7, #32]
 80063ca:	e853 3f00 	ldrex	r3, [r3]
 80063ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80063d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	461a      	mov	r2, r3
 80063de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80063e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063e2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80063e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80063e8:	e841 2300 	strex	r3, r2, [r1]
 80063ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80063ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d1e6      	bne.n	80063c2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d12e      	bne.n	800645a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	e853 3f00 	ldrex	r3, [r3]
 800640e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	f023 0310 	bic.w	r3, r3, #16
 8006416:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	461a      	mov	r2, r3
 800641e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006420:	61bb      	str	r3, [r7, #24]
 8006422:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006424:	6979      	ldr	r1, [r7, #20]
 8006426:	69ba      	ldr	r2, [r7, #24]
 8006428:	e841 2300 	strex	r3, r2, [r1]
 800642c:	613b      	str	r3, [r7, #16]
   return(result);
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d1e6      	bne.n	8006402 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	69db      	ldr	r3, [r3, #28]
 800643a:	f003 0310 	and.w	r3, r3, #16
 800643e:	2b10      	cmp	r3, #16
 8006440:	d103      	bne.n	800644a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	2210      	movs	r2, #16
 8006448:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006450:	4619      	mov	r1, r3
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f7ff f87a 	bl	800554c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006458:	e00d      	b.n	8006476 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f7fc f888 	bl	8002570 <HAL_UART_RxCpltCallback>
}
 8006460:	e009      	b.n	8006476 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	8b1b      	ldrh	r3, [r3, #24]
 8006468:	b29a      	uxth	r2, r3
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f042 0208 	orr.w	r2, r2, #8
 8006472:	b292      	uxth	r2, r2
 8006474:	831a      	strh	r2, [r3, #24]
}
 8006476:	bf00      	nop
 8006478:	3770      	adds	r7, #112	@ 0x70
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
 800647e:	bf00      	nop
 8006480:	40008000 	.word	0x40008000

08006484 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800648c:	bf00      	nop
 800648e:	370c      	adds	r7, #12
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006498:	b084      	sub	sp, #16
 800649a:	b580      	push	{r7, lr}
 800649c:	b084      	sub	sp, #16
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
 80064a2:	f107 001c 	add.w	r0, r7, #28
 80064a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 fa66 	bl	8006988 <USB_CoreReset>
 80064bc:	4603      	mov	r3, r0
 80064be:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80064c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d106      	bne.n	80064d4 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ca:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	639a      	str	r2, [r3, #56]	@ 0x38
 80064d2:	e005      	b.n	80064e0 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064d8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 80064e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3710      	adds	r7, #16
 80064e6:	46bd      	mov	sp, r7
 80064e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064ec:	b004      	add	sp, #16
 80064ee:	4770      	bx	lr

080064f0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	f023 0201 	bic.w	r2, r3, #1
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006504:	2300      	movs	r3, #0
}
 8006506:	4618      	mov	r0, r3
 8006508:	370c      	adds	r7, #12
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr

08006512 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006512:	b580      	push	{r7, lr}
 8006514:	b084      	sub	sp, #16
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
 800651a:	460b      	mov	r3, r1
 800651c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800651e:	2300      	movs	r3, #0
 8006520:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	68db      	ldr	r3, [r3, #12]
 8006526:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800652e:	78fb      	ldrb	r3, [r7, #3]
 8006530:	2b01      	cmp	r3, #1
 8006532:	d115      	bne.n	8006560 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006540:	2001      	movs	r0, #1
 8006542:	f7fc f9c3 	bl	80028cc <HAL_Delay>
      ms++;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	3301      	adds	r3, #1
 800654a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 fa0d 	bl	800696c <USB_GetMode>
 8006552:	4603      	mov	r3, r0
 8006554:	2b01      	cmp	r3, #1
 8006556:	d01e      	beq.n	8006596 <USB_SetCurrentMode+0x84>
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2b31      	cmp	r3, #49	@ 0x31
 800655c:	d9f0      	bls.n	8006540 <USB_SetCurrentMode+0x2e>
 800655e:	e01a      	b.n	8006596 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006560:	78fb      	ldrb	r3, [r7, #3]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d115      	bne.n	8006592 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006572:	2001      	movs	r0, #1
 8006574:	f7fc f9aa 	bl	80028cc <HAL_Delay>
      ms++;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	3301      	adds	r3, #1
 800657c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 f9f4 	bl	800696c <USB_GetMode>
 8006584:	4603      	mov	r3, r0
 8006586:	2b00      	cmp	r3, #0
 8006588:	d005      	beq.n	8006596 <USB_SetCurrentMode+0x84>
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2b31      	cmp	r3, #49	@ 0x31
 800658e:	d9f0      	bls.n	8006572 <USB_SetCurrentMode+0x60>
 8006590:	e001      	b.n	8006596 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	e005      	b.n	80065a2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2b32      	cmp	r3, #50	@ 0x32
 800659a:	d101      	bne.n	80065a0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	e000      	b.n	80065a2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3710      	adds	r7, #16
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
	...

080065ac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80065ac:	b084      	sub	sp, #16
 80065ae:	b580      	push	{r7, lr}
 80065b0:	b086      	sub	sp, #24
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
 80065b6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80065ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80065be:	2300      	movs	r3, #0
 80065c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80065c6:	2300      	movs	r3, #0
 80065c8:	613b      	str	r3, [r7, #16]
 80065ca:	e009      	b.n	80065e0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	3340      	adds	r3, #64	@ 0x40
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	4413      	add	r3, r2
 80065d6:	2200      	movs	r2, #0
 80065d8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	3301      	adds	r3, #1
 80065de:	613b      	str	r3, [r7, #16]
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	2b0e      	cmp	r3, #14
 80065e4:	d9f2      	bls.n	80065cc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80065e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d11c      	bne.n	8006626 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	68fa      	ldr	r2, [r7, #12]
 80065f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80065fa:	f043 0302 	orr.w	r3, r3, #2
 80065fe:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006604:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	601a      	str	r2, [r3, #0]
 8006624:	e005      	b.n	8006632 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800662a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006638:	461a      	mov	r2, r3
 800663a:	2300      	movs	r3, #0
 800663c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800663e:	2103      	movs	r1, #3
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f000 f959 	bl	80068f8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006646:	2110      	movs	r1, #16
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f000 f8f1 	bl	8006830 <USB_FlushTxFifo>
 800664e:	4603      	mov	r3, r0
 8006650:	2b00      	cmp	r3, #0
 8006652:	d001      	beq.n	8006658 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 f91d 	bl	8006898 <USB_FlushRxFifo>
 800665e:	4603      	mov	r3, r0
 8006660:	2b00      	cmp	r3, #0
 8006662:	d001      	beq.n	8006668 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8006664:	2301      	movs	r3, #1
 8006666:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800666e:	461a      	mov	r2, r3
 8006670:	2300      	movs	r3, #0
 8006672:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800667a:	461a      	mov	r2, r3
 800667c:	2300      	movs	r3, #0
 800667e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006686:	461a      	mov	r2, r3
 8006688:	2300      	movs	r3, #0
 800668a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800668c:	2300      	movs	r3, #0
 800668e:	613b      	str	r3, [r7, #16]
 8006690:	e043      	b.n	800671a <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	015a      	lsls	r2, r3, #5
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	4413      	add	r3, r2
 800669a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80066a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80066a8:	d118      	bne.n	80066dc <USB_DevInit+0x130>
    {
      if (i == 0U)
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d10a      	bne.n	80066c6 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	015a      	lsls	r2, r3, #5
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	4413      	add	r3, r2
 80066b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066bc:	461a      	mov	r2, r3
 80066be:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80066c2:	6013      	str	r3, [r2, #0]
 80066c4:	e013      	b.n	80066ee <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	015a      	lsls	r2, r3, #5
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	4413      	add	r3, r2
 80066ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066d2:	461a      	mov	r2, r3
 80066d4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80066d8:	6013      	str	r3, [r2, #0]
 80066da:	e008      	b.n	80066ee <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	015a      	lsls	r2, r3, #5
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	4413      	add	r3, r2
 80066e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066e8:	461a      	mov	r2, r3
 80066ea:	2300      	movs	r3, #0
 80066ec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	015a      	lsls	r2, r3, #5
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	4413      	add	r3, r2
 80066f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066fa:	461a      	mov	r2, r3
 80066fc:	2300      	movs	r3, #0
 80066fe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	015a      	lsls	r2, r3, #5
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	4413      	add	r3, r2
 8006708:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800670c:	461a      	mov	r2, r3
 800670e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006712:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	3301      	adds	r3, #1
 8006718:	613b      	str	r3, [r7, #16]
 800671a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800671c:	693a      	ldr	r2, [r7, #16]
 800671e:	429a      	cmp	r2, r3
 8006720:	d3b7      	bcc.n	8006692 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006722:	2300      	movs	r3, #0
 8006724:	613b      	str	r3, [r7, #16]
 8006726:	e043      	b.n	80067b0 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	015a      	lsls	r2, r3, #5
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	4413      	add	r3, r2
 8006730:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800673a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800673e:	d118      	bne.n	8006772 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d10a      	bne.n	800675c <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	015a      	lsls	r2, r3, #5
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	4413      	add	r3, r2
 800674e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006752:	461a      	mov	r2, r3
 8006754:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006758:	6013      	str	r3, [r2, #0]
 800675a:	e013      	b.n	8006784 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	015a      	lsls	r2, r3, #5
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	4413      	add	r3, r2
 8006764:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006768:	461a      	mov	r2, r3
 800676a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800676e:	6013      	str	r3, [r2, #0]
 8006770:	e008      	b.n	8006784 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	015a      	lsls	r2, r3, #5
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	4413      	add	r3, r2
 800677a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800677e:	461a      	mov	r2, r3
 8006780:	2300      	movs	r3, #0
 8006782:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	015a      	lsls	r2, r3, #5
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	4413      	add	r3, r2
 800678c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006790:	461a      	mov	r2, r3
 8006792:	2300      	movs	r3, #0
 8006794:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	015a      	lsls	r2, r3, #5
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	4413      	add	r3, r2
 800679e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067a2:	461a      	mov	r2, r3
 80067a4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80067a8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	3301      	adds	r3, #1
 80067ae:	613b      	str	r3, [r7, #16]
 80067b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b2:	693a      	ldr	r2, [r7, #16]
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d3b7      	bcc.n	8006728 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067be:	691b      	ldr	r3, [r3, #16]
 80067c0:	68fa      	ldr	r2, [r7, #12]
 80067c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80067c6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80067ca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80067d8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	699b      	ldr	r3, [r3, #24]
 80067de:	f043 0210 	orr.w	r2, r3, #16
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	699a      	ldr	r2, [r3, #24]
 80067ea:	4b10      	ldr	r3, [pc, #64]	@ (800682c <USB_DevInit+0x280>)
 80067ec:	4313      	orrs	r3, r2
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80067f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d005      	beq.n	8006804 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	699b      	ldr	r3, [r3, #24]
 80067fc:	f043 0208 	orr.w	r2, r3, #8
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006804:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006806:	2b01      	cmp	r3, #1
 8006808:	d107      	bne.n	800681a <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	699b      	ldr	r3, [r3, #24]
 800680e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006812:	f043 0304 	orr.w	r3, r3, #4
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800681a:	7dfb      	ldrb	r3, [r7, #23]
}
 800681c:	4618      	mov	r0, r3
 800681e:	3718      	adds	r7, #24
 8006820:	46bd      	mov	sp, r7
 8006822:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006826:	b004      	add	sp, #16
 8006828:	4770      	bx	lr
 800682a:	bf00      	nop
 800682c:	803c3800 	.word	0x803c3800

08006830 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006830:	b480      	push	{r7}
 8006832:	b085      	sub	sp, #20
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800683a:	2300      	movs	r3, #0
 800683c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	3301      	adds	r3, #1
 8006842:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	4a13      	ldr	r2, [pc, #76]	@ (8006894 <USB_FlushTxFifo+0x64>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d901      	bls.n	8006850 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800684c:	2303      	movs	r3, #3
 800684e:	e01b      	b.n	8006888 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	691b      	ldr	r3, [r3, #16]
 8006854:	2b00      	cmp	r3, #0
 8006856:	daf2      	bge.n	800683e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006858:	2300      	movs	r3, #0
 800685a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	019b      	lsls	r3, r3, #6
 8006860:	f043 0220 	orr.w	r2, r3, #32
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	3301      	adds	r3, #1
 800686c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	4a08      	ldr	r2, [pc, #32]	@ (8006894 <USB_FlushTxFifo+0x64>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d901      	bls.n	800687a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006876:	2303      	movs	r3, #3
 8006878:	e006      	b.n	8006888 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	691b      	ldr	r3, [r3, #16]
 800687e:	f003 0320 	and.w	r3, r3, #32
 8006882:	2b20      	cmp	r3, #32
 8006884:	d0f0      	beq.n	8006868 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006886:	2300      	movs	r3, #0
}
 8006888:	4618      	mov	r0, r3
 800688a:	3714      	adds	r7, #20
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr
 8006894:	00030d40 	.word	0x00030d40

08006898 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006898:	b480      	push	{r7}
 800689a:	b085      	sub	sp, #20
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80068a0:	2300      	movs	r3, #0
 80068a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	3301      	adds	r3, #1
 80068a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	4a11      	ldr	r2, [pc, #68]	@ (80068f4 <USB_FlushRxFifo+0x5c>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d901      	bls.n	80068b6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80068b2:	2303      	movs	r3, #3
 80068b4:	e018      	b.n	80068e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	daf2      	bge.n	80068a4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80068be:	2300      	movs	r3, #0
 80068c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2210      	movs	r2, #16
 80068c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	3301      	adds	r3, #1
 80068cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	4a08      	ldr	r2, [pc, #32]	@ (80068f4 <USB_FlushRxFifo+0x5c>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d901      	bls.n	80068da <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80068d6:	2303      	movs	r3, #3
 80068d8:	e006      	b.n	80068e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	f003 0310 	and.w	r3, r3, #16
 80068e2:	2b10      	cmp	r3, #16
 80068e4:	d0f0      	beq.n	80068c8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80068e6:	2300      	movs	r3, #0
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3714      	adds	r7, #20
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr
 80068f4:	00030d40 	.word	0x00030d40

080068f8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b085      	sub	sp, #20
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	460b      	mov	r3, r1
 8006902:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	78fb      	ldrb	r3, [r7, #3]
 8006912:	68f9      	ldr	r1, [r7, #12]
 8006914:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006918:	4313      	orrs	r3, r2
 800691a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800691c:	2300      	movs	r3, #0
}
 800691e:	4618      	mov	r0, r3
 8006920:	3714      	adds	r7, #20
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr

0800692a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800692a:	b480      	push	{r7}
 800692c:	b085      	sub	sp, #20
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	68fa      	ldr	r2, [r7, #12]
 8006940:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006944:	f023 0303 	bic.w	r3, r3, #3
 8006948:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	68fa      	ldr	r2, [r7, #12]
 8006954:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006958:	f043 0302 	orr.w	r3, r3, #2
 800695c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800695e:	2300      	movs	r3, #0
}
 8006960:	4618      	mov	r0, r3
 8006962:	3714      	adds	r7, #20
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	695b      	ldr	r3, [r3, #20]
 8006978:	f003 0301 	and.w	r3, r3, #1
}
 800697c:	4618      	mov	r0, r3
 800697e:	370c      	adds	r7, #12
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006988:	b480      	push	{r7}
 800698a:	b085      	sub	sp, #20
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006990:	2300      	movs	r3, #0
 8006992:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	3301      	adds	r3, #1
 8006998:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	4a13      	ldr	r2, [pc, #76]	@ (80069ec <USB_CoreReset+0x64>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d901      	bls.n	80069a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80069a2:	2303      	movs	r3, #3
 80069a4:	e01b      	b.n	80069de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	daf2      	bge.n	8006994 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80069ae:	2300      	movs	r3, #0
 80069b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	691b      	ldr	r3, [r3, #16]
 80069b6:	f043 0201 	orr.w	r2, r3, #1
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	3301      	adds	r3, #1
 80069c2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	4a09      	ldr	r2, [pc, #36]	@ (80069ec <USB_CoreReset+0x64>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d901      	bls.n	80069d0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80069cc:	2303      	movs	r3, #3
 80069ce:	e006      	b.n	80069de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	691b      	ldr	r3, [r3, #16]
 80069d4:	f003 0301 	and.w	r3, r3, #1
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d0f0      	beq.n	80069be <USB_CoreReset+0x36>

  return HAL_OK;
 80069dc:	2300      	movs	r3, #0
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3714      	adds	r7, #20
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr
 80069ea:	bf00      	nop
 80069ec:	00030d40 	.word	0x00030d40

080069f0 <malloc>:
 80069f0:	4b02      	ldr	r3, [pc, #8]	@ (80069fc <malloc+0xc>)
 80069f2:	4601      	mov	r1, r0
 80069f4:	6818      	ldr	r0, [r3, #0]
 80069f6:	f000 b825 	b.w	8006a44 <_malloc_r>
 80069fa:	bf00      	nop
 80069fc:	20000198 	.word	0x20000198

08006a00 <sbrk_aligned>:
 8006a00:	b570      	push	{r4, r5, r6, lr}
 8006a02:	4e0f      	ldr	r6, [pc, #60]	@ (8006a40 <sbrk_aligned+0x40>)
 8006a04:	460c      	mov	r4, r1
 8006a06:	6831      	ldr	r1, [r6, #0]
 8006a08:	4605      	mov	r5, r0
 8006a0a:	b911      	cbnz	r1, 8006a12 <sbrk_aligned+0x12>
 8006a0c:	f000 feaa 	bl	8007764 <_sbrk_r>
 8006a10:	6030      	str	r0, [r6, #0]
 8006a12:	4621      	mov	r1, r4
 8006a14:	4628      	mov	r0, r5
 8006a16:	f000 fea5 	bl	8007764 <_sbrk_r>
 8006a1a:	1c43      	adds	r3, r0, #1
 8006a1c:	d103      	bne.n	8006a26 <sbrk_aligned+0x26>
 8006a1e:	f04f 34ff 	mov.w	r4, #4294967295
 8006a22:	4620      	mov	r0, r4
 8006a24:	bd70      	pop	{r4, r5, r6, pc}
 8006a26:	1cc4      	adds	r4, r0, #3
 8006a28:	f024 0403 	bic.w	r4, r4, #3
 8006a2c:	42a0      	cmp	r0, r4
 8006a2e:	d0f8      	beq.n	8006a22 <sbrk_aligned+0x22>
 8006a30:	1a21      	subs	r1, r4, r0
 8006a32:	4628      	mov	r0, r5
 8006a34:	f000 fe96 	bl	8007764 <_sbrk_r>
 8006a38:	3001      	adds	r0, #1
 8006a3a:	d1f2      	bne.n	8006a22 <sbrk_aligned+0x22>
 8006a3c:	e7ef      	b.n	8006a1e <sbrk_aligned+0x1e>
 8006a3e:	bf00      	nop
 8006a40:	20001004 	.word	0x20001004

08006a44 <_malloc_r>:
 8006a44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a48:	1ccd      	adds	r5, r1, #3
 8006a4a:	f025 0503 	bic.w	r5, r5, #3
 8006a4e:	3508      	adds	r5, #8
 8006a50:	2d0c      	cmp	r5, #12
 8006a52:	bf38      	it	cc
 8006a54:	250c      	movcc	r5, #12
 8006a56:	2d00      	cmp	r5, #0
 8006a58:	4606      	mov	r6, r0
 8006a5a:	db01      	blt.n	8006a60 <_malloc_r+0x1c>
 8006a5c:	42a9      	cmp	r1, r5
 8006a5e:	d904      	bls.n	8006a6a <_malloc_r+0x26>
 8006a60:	230c      	movs	r3, #12
 8006a62:	6033      	str	r3, [r6, #0]
 8006a64:	2000      	movs	r0, #0
 8006a66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006b40 <_malloc_r+0xfc>
 8006a6e:	f000 f869 	bl	8006b44 <__malloc_lock>
 8006a72:	f8d8 3000 	ldr.w	r3, [r8]
 8006a76:	461c      	mov	r4, r3
 8006a78:	bb44      	cbnz	r4, 8006acc <_malloc_r+0x88>
 8006a7a:	4629      	mov	r1, r5
 8006a7c:	4630      	mov	r0, r6
 8006a7e:	f7ff ffbf 	bl	8006a00 <sbrk_aligned>
 8006a82:	1c43      	adds	r3, r0, #1
 8006a84:	4604      	mov	r4, r0
 8006a86:	d158      	bne.n	8006b3a <_malloc_r+0xf6>
 8006a88:	f8d8 4000 	ldr.w	r4, [r8]
 8006a8c:	4627      	mov	r7, r4
 8006a8e:	2f00      	cmp	r7, #0
 8006a90:	d143      	bne.n	8006b1a <_malloc_r+0xd6>
 8006a92:	2c00      	cmp	r4, #0
 8006a94:	d04b      	beq.n	8006b2e <_malloc_r+0xea>
 8006a96:	6823      	ldr	r3, [r4, #0]
 8006a98:	4639      	mov	r1, r7
 8006a9a:	4630      	mov	r0, r6
 8006a9c:	eb04 0903 	add.w	r9, r4, r3
 8006aa0:	f000 fe60 	bl	8007764 <_sbrk_r>
 8006aa4:	4581      	cmp	r9, r0
 8006aa6:	d142      	bne.n	8006b2e <_malloc_r+0xea>
 8006aa8:	6821      	ldr	r1, [r4, #0]
 8006aaa:	1a6d      	subs	r5, r5, r1
 8006aac:	4629      	mov	r1, r5
 8006aae:	4630      	mov	r0, r6
 8006ab0:	f7ff ffa6 	bl	8006a00 <sbrk_aligned>
 8006ab4:	3001      	adds	r0, #1
 8006ab6:	d03a      	beq.n	8006b2e <_malloc_r+0xea>
 8006ab8:	6823      	ldr	r3, [r4, #0]
 8006aba:	442b      	add	r3, r5
 8006abc:	6023      	str	r3, [r4, #0]
 8006abe:	f8d8 3000 	ldr.w	r3, [r8]
 8006ac2:	685a      	ldr	r2, [r3, #4]
 8006ac4:	bb62      	cbnz	r2, 8006b20 <_malloc_r+0xdc>
 8006ac6:	f8c8 7000 	str.w	r7, [r8]
 8006aca:	e00f      	b.n	8006aec <_malloc_r+0xa8>
 8006acc:	6822      	ldr	r2, [r4, #0]
 8006ace:	1b52      	subs	r2, r2, r5
 8006ad0:	d420      	bmi.n	8006b14 <_malloc_r+0xd0>
 8006ad2:	2a0b      	cmp	r2, #11
 8006ad4:	d917      	bls.n	8006b06 <_malloc_r+0xc2>
 8006ad6:	1961      	adds	r1, r4, r5
 8006ad8:	42a3      	cmp	r3, r4
 8006ada:	6025      	str	r5, [r4, #0]
 8006adc:	bf18      	it	ne
 8006ade:	6059      	strne	r1, [r3, #4]
 8006ae0:	6863      	ldr	r3, [r4, #4]
 8006ae2:	bf08      	it	eq
 8006ae4:	f8c8 1000 	streq.w	r1, [r8]
 8006ae8:	5162      	str	r2, [r4, r5]
 8006aea:	604b      	str	r3, [r1, #4]
 8006aec:	4630      	mov	r0, r6
 8006aee:	f000 f82f 	bl	8006b50 <__malloc_unlock>
 8006af2:	f104 000b 	add.w	r0, r4, #11
 8006af6:	1d23      	adds	r3, r4, #4
 8006af8:	f020 0007 	bic.w	r0, r0, #7
 8006afc:	1ac2      	subs	r2, r0, r3
 8006afe:	bf1c      	itt	ne
 8006b00:	1a1b      	subne	r3, r3, r0
 8006b02:	50a3      	strne	r3, [r4, r2]
 8006b04:	e7af      	b.n	8006a66 <_malloc_r+0x22>
 8006b06:	6862      	ldr	r2, [r4, #4]
 8006b08:	42a3      	cmp	r3, r4
 8006b0a:	bf0c      	ite	eq
 8006b0c:	f8c8 2000 	streq.w	r2, [r8]
 8006b10:	605a      	strne	r2, [r3, #4]
 8006b12:	e7eb      	b.n	8006aec <_malloc_r+0xa8>
 8006b14:	4623      	mov	r3, r4
 8006b16:	6864      	ldr	r4, [r4, #4]
 8006b18:	e7ae      	b.n	8006a78 <_malloc_r+0x34>
 8006b1a:	463c      	mov	r4, r7
 8006b1c:	687f      	ldr	r7, [r7, #4]
 8006b1e:	e7b6      	b.n	8006a8e <_malloc_r+0x4a>
 8006b20:	461a      	mov	r2, r3
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	42a3      	cmp	r3, r4
 8006b26:	d1fb      	bne.n	8006b20 <_malloc_r+0xdc>
 8006b28:	2300      	movs	r3, #0
 8006b2a:	6053      	str	r3, [r2, #4]
 8006b2c:	e7de      	b.n	8006aec <_malloc_r+0xa8>
 8006b2e:	230c      	movs	r3, #12
 8006b30:	6033      	str	r3, [r6, #0]
 8006b32:	4630      	mov	r0, r6
 8006b34:	f000 f80c 	bl	8006b50 <__malloc_unlock>
 8006b38:	e794      	b.n	8006a64 <_malloc_r+0x20>
 8006b3a:	6005      	str	r5, [r0, #0]
 8006b3c:	e7d6      	b.n	8006aec <_malloc_r+0xa8>
 8006b3e:	bf00      	nop
 8006b40:	20001008 	.word	0x20001008

08006b44 <__malloc_lock>:
 8006b44:	4801      	ldr	r0, [pc, #4]	@ (8006b4c <__malloc_lock+0x8>)
 8006b46:	f000 be5a 	b.w	80077fe <__retarget_lock_acquire_recursive>
 8006b4a:	bf00      	nop
 8006b4c:	2000114c 	.word	0x2000114c

08006b50 <__malloc_unlock>:
 8006b50:	4801      	ldr	r0, [pc, #4]	@ (8006b58 <__malloc_unlock+0x8>)
 8006b52:	f000 be55 	b.w	8007800 <__retarget_lock_release_recursive>
 8006b56:	bf00      	nop
 8006b58:	2000114c 	.word	0x2000114c

08006b5c <__cvt>:
 8006b5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b60:	ec57 6b10 	vmov	r6, r7, d0
 8006b64:	2f00      	cmp	r7, #0
 8006b66:	460c      	mov	r4, r1
 8006b68:	4619      	mov	r1, r3
 8006b6a:	463b      	mov	r3, r7
 8006b6c:	bfbb      	ittet	lt
 8006b6e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006b72:	461f      	movlt	r7, r3
 8006b74:	2300      	movge	r3, #0
 8006b76:	232d      	movlt	r3, #45	@ 0x2d
 8006b78:	700b      	strb	r3, [r1, #0]
 8006b7a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006b7c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006b80:	4691      	mov	r9, r2
 8006b82:	f023 0820 	bic.w	r8, r3, #32
 8006b86:	bfbc      	itt	lt
 8006b88:	4632      	movlt	r2, r6
 8006b8a:	4616      	movlt	r6, r2
 8006b8c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006b90:	d005      	beq.n	8006b9e <__cvt+0x42>
 8006b92:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006b96:	d100      	bne.n	8006b9a <__cvt+0x3e>
 8006b98:	3401      	adds	r4, #1
 8006b9a:	2102      	movs	r1, #2
 8006b9c:	e000      	b.n	8006ba0 <__cvt+0x44>
 8006b9e:	2103      	movs	r1, #3
 8006ba0:	ab03      	add	r3, sp, #12
 8006ba2:	9301      	str	r3, [sp, #4]
 8006ba4:	ab02      	add	r3, sp, #8
 8006ba6:	9300      	str	r3, [sp, #0]
 8006ba8:	ec47 6b10 	vmov	d0, r6, r7
 8006bac:	4653      	mov	r3, sl
 8006bae:	4622      	mov	r2, r4
 8006bb0:	f000 febe 	bl	8007930 <_dtoa_r>
 8006bb4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006bb8:	4605      	mov	r5, r0
 8006bba:	d119      	bne.n	8006bf0 <__cvt+0x94>
 8006bbc:	f019 0f01 	tst.w	r9, #1
 8006bc0:	d00e      	beq.n	8006be0 <__cvt+0x84>
 8006bc2:	eb00 0904 	add.w	r9, r0, r4
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	2300      	movs	r3, #0
 8006bca:	4630      	mov	r0, r6
 8006bcc:	4639      	mov	r1, r7
 8006bce:	f7f9 ff8b 	bl	8000ae8 <__aeabi_dcmpeq>
 8006bd2:	b108      	cbz	r0, 8006bd8 <__cvt+0x7c>
 8006bd4:	f8cd 900c 	str.w	r9, [sp, #12]
 8006bd8:	2230      	movs	r2, #48	@ 0x30
 8006bda:	9b03      	ldr	r3, [sp, #12]
 8006bdc:	454b      	cmp	r3, r9
 8006bde:	d31e      	bcc.n	8006c1e <__cvt+0xc2>
 8006be0:	9b03      	ldr	r3, [sp, #12]
 8006be2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006be4:	1b5b      	subs	r3, r3, r5
 8006be6:	4628      	mov	r0, r5
 8006be8:	6013      	str	r3, [r2, #0]
 8006bea:	b004      	add	sp, #16
 8006bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bf0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006bf4:	eb00 0904 	add.w	r9, r0, r4
 8006bf8:	d1e5      	bne.n	8006bc6 <__cvt+0x6a>
 8006bfa:	7803      	ldrb	r3, [r0, #0]
 8006bfc:	2b30      	cmp	r3, #48	@ 0x30
 8006bfe:	d10a      	bne.n	8006c16 <__cvt+0xba>
 8006c00:	2200      	movs	r2, #0
 8006c02:	2300      	movs	r3, #0
 8006c04:	4630      	mov	r0, r6
 8006c06:	4639      	mov	r1, r7
 8006c08:	f7f9 ff6e 	bl	8000ae8 <__aeabi_dcmpeq>
 8006c0c:	b918      	cbnz	r0, 8006c16 <__cvt+0xba>
 8006c0e:	f1c4 0401 	rsb	r4, r4, #1
 8006c12:	f8ca 4000 	str.w	r4, [sl]
 8006c16:	f8da 3000 	ldr.w	r3, [sl]
 8006c1a:	4499      	add	r9, r3
 8006c1c:	e7d3      	b.n	8006bc6 <__cvt+0x6a>
 8006c1e:	1c59      	adds	r1, r3, #1
 8006c20:	9103      	str	r1, [sp, #12]
 8006c22:	701a      	strb	r2, [r3, #0]
 8006c24:	e7d9      	b.n	8006bda <__cvt+0x7e>

08006c26 <__exponent>:
 8006c26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c28:	2900      	cmp	r1, #0
 8006c2a:	bfba      	itte	lt
 8006c2c:	4249      	neglt	r1, r1
 8006c2e:	232d      	movlt	r3, #45	@ 0x2d
 8006c30:	232b      	movge	r3, #43	@ 0x2b
 8006c32:	2909      	cmp	r1, #9
 8006c34:	7002      	strb	r2, [r0, #0]
 8006c36:	7043      	strb	r3, [r0, #1]
 8006c38:	dd29      	ble.n	8006c8e <__exponent+0x68>
 8006c3a:	f10d 0307 	add.w	r3, sp, #7
 8006c3e:	461d      	mov	r5, r3
 8006c40:	270a      	movs	r7, #10
 8006c42:	461a      	mov	r2, r3
 8006c44:	fbb1 f6f7 	udiv	r6, r1, r7
 8006c48:	fb07 1416 	mls	r4, r7, r6, r1
 8006c4c:	3430      	adds	r4, #48	@ 0x30
 8006c4e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006c52:	460c      	mov	r4, r1
 8006c54:	2c63      	cmp	r4, #99	@ 0x63
 8006c56:	f103 33ff 	add.w	r3, r3, #4294967295
 8006c5a:	4631      	mov	r1, r6
 8006c5c:	dcf1      	bgt.n	8006c42 <__exponent+0x1c>
 8006c5e:	3130      	adds	r1, #48	@ 0x30
 8006c60:	1e94      	subs	r4, r2, #2
 8006c62:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006c66:	1c41      	adds	r1, r0, #1
 8006c68:	4623      	mov	r3, r4
 8006c6a:	42ab      	cmp	r3, r5
 8006c6c:	d30a      	bcc.n	8006c84 <__exponent+0x5e>
 8006c6e:	f10d 0309 	add.w	r3, sp, #9
 8006c72:	1a9b      	subs	r3, r3, r2
 8006c74:	42ac      	cmp	r4, r5
 8006c76:	bf88      	it	hi
 8006c78:	2300      	movhi	r3, #0
 8006c7a:	3302      	adds	r3, #2
 8006c7c:	4403      	add	r3, r0
 8006c7e:	1a18      	subs	r0, r3, r0
 8006c80:	b003      	add	sp, #12
 8006c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c84:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006c88:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006c8c:	e7ed      	b.n	8006c6a <__exponent+0x44>
 8006c8e:	2330      	movs	r3, #48	@ 0x30
 8006c90:	3130      	adds	r1, #48	@ 0x30
 8006c92:	7083      	strb	r3, [r0, #2]
 8006c94:	70c1      	strb	r1, [r0, #3]
 8006c96:	1d03      	adds	r3, r0, #4
 8006c98:	e7f1      	b.n	8006c7e <__exponent+0x58>
	...

08006c9c <_printf_float>:
 8006c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ca0:	b08d      	sub	sp, #52	@ 0x34
 8006ca2:	460c      	mov	r4, r1
 8006ca4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006ca8:	4616      	mov	r6, r2
 8006caa:	461f      	mov	r7, r3
 8006cac:	4605      	mov	r5, r0
 8006cae:	f000 fd21 	bl	80076f4 <_localeconv_r>
 8006cb2:	6803      	ldr	r3, [r0, #0]
 8006cb4:	9304      	str	r3, [sp, #16]
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f7f9 faea 	bl	8000290 <strlen>
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	930a      	str	r3, [sp, #40]	@ 0x28
 8006cc0:	f8d8 3000 	ldr.w	r3, [r8]
 8006cc4:	9005      	str	r0, [sp, #20]
 8006cc6:	3307      	adds	r3, #7
 8006cc8:	f023 0307 	bic.w	r3, r3, #7
 8006ccc:	f103 0208 	add.w	r2, r3, #8
 8006cd0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006cd4:	f8d4 b000 	ldr.w	fp, [r4]
 8006cd8:	f8c8 2000 	str.w	r2, [r8]
 8006cdc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ce0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006ce4:	9307      	str	r3, [sp, #28]
 8006ce6:	f8cd 8018 	str.w	r8, [sp, #24]
 8006cea:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006cee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006cf2:	4b9c      	ldr	r3, [pc, #624]	@ (8006f64 <_printf_float+0x2c8>)
 8006cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8006cf8:	f7f9 ff28 	bl	8000b4c <__aeabi_dcmpun>
 8006cfc:	bb70      	cbnz	r0, 8006d5c <_printf_float+0xc0>
 8006cfe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d02:	4b98      	ldr	r3, [pc, #608]	@ (8006f64 <_printf_float+0x2c8>)
 8006d04:	f04f 32ff 	mov.w	r2, #4294967295
 8006d08:	f7f9 ff02 	bl	8000b10 <__aeabi_dcmple>
 8006d0c:	bb30      	cbnz	r0, 8006d5c <_printf_float+0xc0>
 8006d0e:	2200      	movs	r2, #0
 8006d10:	2300      	movs	r3, #0
 8006d12:	4640      	mov	r0, r8
 8006d14:	4649      	mov	r1, r9
 8006d16:	f7f9 fef1 	bl	8000afc <__aeabi_dcmplt>
 8006d1a:	b110      	cbz	r0, 8006d22 <_printf_float+0x86>
 8006d1c:	232d      	movs	r3, #45	@ 0x2d
 8006d1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d22:	4a91      	ldr	r2, [pc, #580]	@ (8006f68 <_printf_float+0x2cc>)
 8006d24:	4b91      	ldr	r3, [pc, #580]	@ (8006f6c <_printf_float+0x2d0>)
 8006d26:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006d2a:	bf94      	ite	ls
 8006d2c:	4690      	movls	r8, r2
 8006d2e:	4698      	movhi	r8, r3
 8006d30:	2303      	movs	r3, #3
 8006d32:	6123      	str	r3, [r4, #16]
 8006d34:	f02b 0304 	bic.w	r3, fp, #4
 8006d38:	6023      	str	r3, [r4, #0]
 8006d3a:	f04f 0900 	mov.w	r9, #0
 8006d3e:	9700      	str	r7, [sp, #0]
 8006d40:	4633      	mov	r3, r6
 8006d42:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006d44:	4621      	mov	r1, r4
 8006d46:	4628      	mov	r0, r5
 8006d48:	f000 f9d2 	bl	80070f0 <_printf_common>
 8006d4c:	3001      	adds	r0, #1
 8006d4e:	f040 808d 	bne.w	8006e6c <_printf_float+0x1d0>
 8006d52:	f04f 30ff 	mov.w	r0, #4294967295
 8006d56:	b00d      	add	sp, #52	@ 0x34
 8006d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d5c:	4642      	mov	r2, r8
 8006d5e:	464b      	mov	r3, r9
 8006d60:	4640      	mov	r0, r8
 8006d62:	4649      	mov	r1, r9
 8006d64:	f7f9 fef2 	bl	8000b4c <__aeabi_dcmpun>
 8006d68:	b140      	cbz	r0, 8006d7c <_printf_float+0xe0>
 8006d6a:	464b      	mov	r3, r9
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	bfbc      	itt	lt
 8006d70:	232d      	movlt	r3, #45	@ 0x2d
 8006d72:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006d76:	4a7e      	ldr	r2, [pc, #504]	@ (8006f70 <_printf_float+0x2d4>)
 8006d78:	4b7e      	ldr	r3, [pc, #504]	@ (8006f74 <_printf_float+0x2d8>)
 8006d7a:	e7d4      	b.n	8006d26 <_printf_float+0x8a>
 8006d7c:	6863      	ldr	r3, [r4, #4]
 8006d7e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006d82:	9206      	str	r2, [sp, #24]
 8006d84:	1c5a      	adds	r2, r3, #1
 8006d86:	d13b      	bne.n	8006e00 <_printf_float+0x164>
 8006d88:	2306      	movs	r3, #6
 8006d8a:	6063      	str	r3, [r4, #4]
 8006d8c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006d90:	2300      	movs	r3, #0
 8006d92:	6022      	str	r2, [r4, #0]
 8006d94:	9303      	str	r3, [sp, #12]
 8006d96:	ab0a      	add	r3, sp, #40	@ 0x28
 8006d98:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006d9c:	ab09      	add	r3, sp, #36	@ 0x24
 8006d9e:	9300      	str	r3, [sp, #0]
 8006da0:	6861      	ldr	r1, [r4, #4]
 8006da2:	ec49 8b10 	vmov	d0, r8, r9
 8006da6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006daa:	4628      	mov	r0, r5
 8006dac:	f7ff fed6 	bl	8006b5c <__cvt>
 8006db0:	9b06      	ldr	r3, [sp, #24]
 8006db2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006db4:	2b47      	cmp	r3, #71	@ 0x47
 8006db6:	4680      	mov	r8, r0
 8006db8:	d129      	bne.n	8006e0e <_printf_float+0x172>
 8006dba:	1cc8      	adds	r0, r1, #3
 8006dbc:	db02      	blt.n	8006dc4 <_printf_float+0x128>
 8006dbe:	6863      	ldr	r3, [r4, #4]
 8006dc0:	4299      	cmp	r1, r3
 8006dc2:	dd41      	ble.n	8006e48 <_printf_float+0x1ac>
 8006dc4:	f1aa 0a02 	sub.w	sl, sl, #2
 8006dc8:	fa5f fa8a 	uxtb.w	sl, sl
 8006dcc:	3901      	subs	r1, #1
 8006dce:	4652      	mov	r2, sl
 8006dd0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006dd4:	9109      	str	r1, [sp, #36]	@ 0x24
 8006dd6:	f7ff ff26 	bl	8006c26 <__exponent>
 8006dda:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006ddc:	1813      	adds	r3, r2, r0
 8006dde:	2a01      	cmp	r2, #1
 8006de0:	4681      	mov	r9, r0
 8006de2:	6123      	str	r3, [r4, #16]
 8006de4:	dc02      	bgt.n	8006dec <_printf_float+0x150>
 8006de6:	6822      	ldr	r2, [r4, #0]
 8006de8:	07d2      	lsls	r2, r2, #31
 8006dea:	d501      	bpl.n	8006df0 <_printf_float+0x154>
 8006dec:	3301      	adds	r3, #1
 8006dee:	6123      	str	r3, [r4, #16]
 8006df0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d0a2      	beq.n	8006d3e <_printf_float+0xa2>
 8006df8:	232d      	movs	r3, #45	@ 0x2d
 8006dfa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006dfe:	e79e      	b.n	8006d3e <_printf_float+0xa2>
 8006e00:	9a06      	ldr	r2, [sp, #24]
 8006e02:	2a47      	cmp	r2, #71	@ 0x47
 8006e04:	d1c2      	bne.n	8006d8c <_printf_float+0xf0>
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d1c0      	bne.n	8006d8c <_printf_float+0xf0>
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e7bd      	b.n	8006d8a <_printf_float+0xee>
 8006e0e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006e12:	d9db      	bls.n	8006dcc <_printf_float+0x130>
 8006e14:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006e18:	d118      	bne.n	8006e4c <_printf_float+0x1b0>
 8006e1a:	2900      	cmp	r1, #0
 8006e1c:	6863      	ldr	r3, [r4, #4]
 8006e1e:	dd0b      	ble.n	8006e38 <_printf_float+0x19c>
 8006e20:	6121      	str	r1, [r4, #16]
 8006e22:	b913      	cbnz	r3, 8006e2a <_printf_float+0x18e>
 8006e24:	6822      	ldr	r2, [r4, #0]
 8006e26:	07d0      	lsls	r0, r2, #31
 8006e28:	d502      	bpl.n	8006e30 <_printf_float+0x194>
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	440b      	add	r3, r1
 8006e2e:	6123      	str	r3, [r4, #16]
 8006e30:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006e32:	f04f 0900 	mov.w	r9, #0
 8006e36:	e7db      	b.n	8006df0 <_printf_float+0x154>
 8006e38:	b913      	cbnz	r3, 8006e40 <_printf_float+0x1a4>
 8006e3a:	6822      	ldr	r2, [r4, #0]
 8006e3c:	07d2      	lsls	r2, r2, #31
 8006e3e:	d501      	bpl.n	8006e44 <_printf_float+0x1a8>
 8006e40:	3302      	adds	r3, #2
 8006e42:	e7f4      	b.n	8006e2e <_printf_float+0x192>
 8006e44:	2301      	movs	r3, #1
 8006e46:	e7f2      	b.n	8006e2e <_printf_float+0x192>
 8006e48:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006e4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e4e:	4299      	cmp	r1, r3
 8006e50:	db05      	blt.n	8006e5e <_printf_float+0x1c2>
 8006e52:	6823      	ldr	r3, [r4, #0]
 8006e54:	6121      	str	r1, [r4, #16]
 8006e56:	07d8      	lsls	r0, r3, #31
 8006e58:	d5ea      	bpl.n	8006e30 <_printf_float+0x194>
 8006e5a:	1c4b      	adds	r3, r1, #1
 8006e5c:	e7e7      	b.n	8006e2e <_printf_float+0x192>
 8006e5e:	2900      	cmp	r1, #0
 8006e60:	bfd4      	ite	le
 8006e62:	f1c1 0202 	rsble	r2, r1, #2
 8006e66:	2201      	movgt	r2, #1
 8006e68:	4413      	add	r3, r2
 8006e6a:	e7e0      	b.n	8006e2e <_printf_float+0x192>
 8006e6c:	6823      	ldr	r3, [r4, #0]
 8006e6e:	055a      	lsls	r2, r3, #21
 8006e70:	d407      	bmi.n	8006e82 <_printf_float+0x1e6>
 8006e72:	6923      	ldr	r3, [r4, #16]
 8006e74:	4642      	mov	r2, r8
 8006e76:	4631      	mov	r1, r6
 8006e78:	4628      	mov	r0, r5
 8006e7a:	47b8      	blx	r7
 8006e7c:	3001      	adds	r0, #1
 8006e7e:	d12b      	bne.n	8006ed8 <_printf_float+0x23c>
 8006e80:	e767      	b.n	8006d52 <_printf_float+0xb6>
 8006e82:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006e86:	f240 80dd 	bls.w	8007044 <_printf_float+0x3a8>
 8006e8a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006e8e:	2200      	movs	r2, #0
 8006e90:	2300      	movs	r3, #0
 8006e92:	f7f9 fe29 	bl	8000ae8 <__aeabi_dcmpeq>
 8006e96:	2800      	cmp	r0, #0
 8006e98:	d033      	beq.n	8006f02 <_printf_float+0x266>
 8006e9a:	4a37      	ldr	r2, [pc, #220]	@ (8006f78 <_printf_float+0x2dc>)
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	4631      	mov	r1, r6
 8006ea0:	4628      	mov	r0, r5
 8006ea2:	47b8      	blx	r7
 8006ea4:	3001      	adds	r0, #1
 8006ea6:	f43f af54 	beq.w	8006d52 <_printf_float+0xb6>
 8006eaa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006eae:	4543      	cmp	r3, r8
 8006eb0:	db02      	blt.n	8006eb8 <_printf_float+0x21c>
 8006eb2:	6823      	ldr	r3, [r4, #0]
 8006eb4:	07d8      	lsls	r0, r3, #31
 8006eb6:	d50f      	bpl.n	8006ed8 <_printf_float+0x23c>
 8006eb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ebc:	4631      	mov	r1, r6
 8006ebe:	4628      	mov	r0, r5
 8006ec0:	47b8      	blx	r7
 8006ec2:	3001      	adds	r0, #1
 8006ec4:	f43f af45 	beq.w	8006d52 <_printf_float+0xb6>
 8006ec8:	f04f 0900 	mov.w	r9, #0
 8006ecc:	f108 38ff 	add.w	r8, r8, #4294967295
 8006ed0:	f104 0a1a 	add.w	sl, r4, #26
 8006ed4:	45c8      	cmp	r8, r9
 8006ed6:	dc09      	bgt.n	8006eec <_printf_float+0x250>
 8006ed8:	6823      	ldr	r3, [r4, #0]
 8006eda:	079b      	lsls	r3, r3, #30
 8006edc:	f100 8103 	bmi.w	80070e6 <_printf_float+0x44a>
 8006ee0:	68e0      	ldr	r0, [r4, #12]
 8006ee2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ee4:	4298      	cmp	r0, r3
 8006ee6:	bfb8      	it	lt
 8006ee8:	4618      	movlt	r0, r3
 8006eea:	e734      	b.n	8006d56 <_printf_float+0xba>
 8006eec:	2301      	movs	r3, #1
 8006eee:	4652      	mov	r2, sl
 8006ef0:	4631      	mov	r1, r6
 8006ef2:	4628      	mov	r0, r5
 8006ef4:	47b8      	blx	r7
 8006ef6:	3001      	adds	r0, #1
 8006ef8:	f43f af2b 	beq.w	8006d52 <_printf_float+0xb6>
 8006efc:	f109 0901 	add.w	r9, r9, #1
 8006f00:	e7e8      	b.n	8006ed4 <_printf_float+0x238>
 8006f02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	dc39      	bgt.n	8006f7c <_printf_float+0x2e0>
 8006f08:	4a1b      	ldr	r2, [pc, #108]	@ (8006f78 <_printf_float+0x2dc>)
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	4631      	mov	r1, r6
 8006f0e:	4628      	mov	r0, r5
 8006f10:	47b8      	blx	r7
 8006f12:	3001      	adds	r0, #1
 8006f14:	f43f af1d 	beq.w	8006d52 <_printf_float+0xb6>
 8006f18:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006f1c:	ea59 0303 	orrs.w	r3, r9, r3
 8006f20:	d102      	bne.n	8006f28 <_printf_float+0x28c>
 8006f22:	6823      	ldr	r3, [r4, #0]
 8006f24:	07d9      	lsls	r1, r3, #31
 8006f26:	d5d7      	bpl.n	8006ed8 <_printf_float+0x23c>
 8006f28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f2c:	4631      	mov	r1, r6
 8006f2e:	4628      	mov	r0, r5
 8006f30:	47b8      	blx	r7
 8006f32:	3001      	adds	r0, #1
 8006f34:	f43f af0d 	beq.w	8006d52 <_printf_float+0xb6>
 8006f38:	f04f 0a00 	mov.w	sl, #0
 8006f3c:	f104 0b1a 	add.w	fp, r4, #26
 8006f40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f42:	425b      	negs	r3, r3
 8006f44:	4553      	cmp	r3, sl
 8006f46:	dc01      	bgt.n	8006f4c <_printf_float+0x2b0>
 8006f48:	464b      	mov	r3, r9
 8006f4a:	e793      	b.n	8006e74 <_printf_float+0x1d8>
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	465a      	mov	r2, fp
 8006f50:	4631      	mov	r1, r6
 8006f52:	4628      	mov	r0, r5
 8006f54:	47b8      	blx	r7
 8006f56:	3001      	adds	r0, #1
 8006f58:	f43f aefb 	beq.w	8006d52 <_printf_float+0xb6>
 8006f5c:	f10a 0a01 	add.w	sl, sl, #1
 8006f60:	e7ee      	b.n	8006f40 <_printf_float+0x2a4>
 8006f62:	bf00      	nop
 8006f64:	7fefffff 	.word	0x7fefffff
 8006f68:	08009944 	.word	0x08009944
 8006f6c:	08009948 	.word	0x08009948
 8006f70:	0800994c 	.word	0x0800994c
 8006f74:	08009950 	.word	0x08009950
 8006f78:	08009954 	.word	0x08009954
 8006f7c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006f7e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006f82:	4553      	cmp	r3, sl
 8006f84:	bfa8      	it	ge
 8006f86:	4653      	movge	r3, sl
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	4699      	mov	r9, r3
 8006f8c:	dc36      	bgt.n	8006ffc <_printf_float+0x360>
 8006f8e:	f04f 0b00 	mov.w	fp, #0
 8006f92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f96:	f104 021a 	add.w	r2, r4, #26
 8006f9a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006f9c:	9306      	str	r3, [sp, #24]
 8006f9e:	eba3 0309 	sub.w	r3, r3, r9
 8006fa2:	455b      	cmp	r3, fp
 8006fa4:	dc31      	bgt.n	800700a <_printf_float+0x36e>
 8006fa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fa8:	459a      	cmp	sl, r3
 8006faa:	dc3a      	bgt.n	8007022 <_printf_float+0x386>
 8006fac:	6823      	ldr	r3, [r4, #0]
 8006fae:	07da      	lsls	r2, r3, #31
 8006fb0:	d437      	bmi.n	8007022 <_printf_float+0x386>
 8006fb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fb4:	ebaa 0903 	sub.w	r9, sl, r3
 8006fb8:	9b06      	ldr	r3, [sp, #24]
 8006fba:	ebaa 0303 	sub.w	r3, sl, r3
 8006fbe:	4599      	cmp	r9, r3
 8006fc0:	bfa8      	it	ge
 8006fc2:	4699      	movge	r9, r3
 8006fc4:	f1b9 0f00 	cmp.w	r9, #0
 8006fc8:	dc33      	bgt.n	8007032 <_printf_float+0x396>
 8006fca:	f04f 0800 	mov.w	r8, #0
 8006fce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006fd2:	f104 0b1a 	add.w	fp, r4, #26
 8006fd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fd8:	ebaa 0303 	sub.w	r3, sl, r3
 8006fdc:	eba3 0309 	sub.w	r3, r3, r9
 8006fe0:	4543      	cmp	r3, r8
 8006fe2:	f77f af79 	ble.w	8006ed8 <_printf_float+0x23c>
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	465a      	mov	r2, fp
 8006fea:	4631      	mov	r1, r6
 8006fec:	4628      	mov	r0, r5
 8006fee:	47b8      	blx	r7
 8006ff0:	3001      	adds	r0, #1
 8006ff2:	f43f aeae 	beq.w	8006d52 <_printf_float+0xb6>
 8006ff6:	f108 0801 	add.w	r8, r8, #1
 8006ffa:	e7ec      	b.n	8006fd6 <_printf_float+0x33a>
 8006ffc:	4642      	mov	r2, r8
 8006ffe:	4631      	mov	r1, r6
 8007000:	4628      	mov	r0, r5
 8007002:	47b8      	blx	r7
 8007004:	3001      	adds	r0, #1
 8007006:	d1c2      	bne.n	8006f8e <_printf_float+0x2f2>
 8007008:	e6a3      	b.n	8006d52 <_printf_float+0xb6>
 800700a:	2301      	movs	r3, #1
 800700c:	4631      	mov	r1, r6
 800700e:	4628      	mov	r0, r5
 8007010:	9206      	str	r2, [sp, #24]
 8007012:	47b8      	blx	r7
 8007014:	3001      	adds	r0, #1
 8007016:	f43f ae9c 	beq.w	8006d52 <_printf_float+0xb6>
 800701a:	9a06      	ldr	r2, [sp, #24]
 800701c:	f10b 0b01 	add.w	fp, fp, #1
 8007020:	e7bb      	b.n	8006f9a <_printf_float+0x2fe>
 8007022:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007026:	4631      	mov	r1, r6
 8007028:	4628      	mov	r0, r5
 800702a:	47b8      	blx	r7
 800702c:	3001      	adds	r0, #1
 800702e:	d1c0      	bne.n	8006fb2 <_printf_float+0x316>
 8007030:	e68f      	b.n	8006d52 <_printf_float+0xb6>
 8007032:	9a06      	ldr	r2, [sp, #24]
 8007034:	464b      	mov	r3, r9
 8007036:	4442      	add	r2, r8
 8007038:	4631      	mov	r1, r6
 800703a:	4628      	mov	r0, r5
 800703c:	47b8      	blx	r7
 800703e:	3001      	adds	r0, #1
 8007040:	d1c3      	bne.n	8006fca <_printf_float+0x32e>
 8007042:	e686      	b.n	8006d52 <_printf_float+0xb6>
 8007044:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007048:	f1ba 0f01 	cmp.w	sl, #1
 800704c:	dc01      	bgt.n	8007052 <_printf_float+0x3b6>
 800704e:	07db      	lsls	r3, r3, #31
 8007050:	d536      	bpl.n	80070c0 <_printf_float+0x424>
 8007052:	2301      	movs	r3, #1
 8007054:	4642      	mov	r2, r8
 8007056:	4631      	mov	r1, r6
 8007058:	4628      	mov	r0, r5
 800705a:	47b8      	blx	r7
 800705c:	3001      	adds	r0, #1
 800705e:	f43f ae78 	beq.w	8006d52 <_printf_float+0xb6>
 8007062:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007066:	4631      	mov	r1, r6
 8007068:	4628      	mov	r0, r5
 800706a:	47b8      	blx	r7
 800706c:	3001      	adds	r0, #1
 800706e:	f43f ae70 	beq.w	8006d52 <_printf_float+0xb6>
 8007072:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007076:	2200      	movs	r2, #0
 8007078:	2300      	movs	r3, #0
 800707a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800707e:	f7f9 fd33 	bl	8000ae8 <__aeabi_dcmpeq>
 8007082:	b9c0      	cbnz	r0, 80070b6 <_printf_float+0x41a>
 8007084:	4653      	mov	r3, sl
 8007086:	f108 0201 	add.w	r2, r8, #1
 800708a:	4631      	mov	r1, r6
 800708c:	4628      	mov	r0, r5
 800708e:	47b8      	blx	r7
 8007090:	3001      	adds	r0, #1
 8007092:	d10c      	bne.n	80070ae <_printf_float+0x412>
 8007094:	e65d      	b.n	8006d52 <_printf_float+0xb6>
 8007096:	2301      	movs	r3, #1
 8007098:	465a      	mov	r2, fp
 800709a:	4631      	mov	r1, r6
 800709c:	4628      	mov	r0, r5
 800709e:	47b8      	blx	r7
 80070a0:	3001      	adds	r0, #1
 80070a2:	f43f ae56 	beq.w	8006d52 <_printf_float+0xb6>
 80070a6:	f108 0801 	add.w	r8, r8, #1
 80070aa:	45d0      	cmp	r8, sl
 80070ac:	dbf3      	blt.n	8007096 <_printf_float+0x3fa>
 80070ae:	464b      	mov	r3, r9
 80070b0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80070b4:	e6df      	b.n	8006e76 <_printf_float+0x1da>
 80070b6:	f04f 0800 	mov.w	r8, #0
 80070ba:	f104 0b1a 	add.w	fp, r4, #26
 80070be:	e7f4      	b.n	80070aa <_printf_float+0x40e>
 80070c0:	2301      	movs	r3, #1
 80070c2:	4642      	mov	r2, r8
 80070c4:	e7e1      	b.n	800708a <_printf_float+0x3ee>
 80070c6:	2301      	movs	r3, #1
 80070c8:	464a      	mov	r2, r9
 80070ca:	4631      	mov	r1, r6
 80070cc:	4628      	mov	r0, r5
 80070ce:	47b8      	blx	r7
 80070d0:	3001      	adds	r0, #1
 80070d2:	f43f ae3e 	beq.w	8006d52 <_printf_float+0xb6>
 80070d6:	f108 0801 	add.w	r8, r8, #1
 80070da:	68e3      	ldr	r3, [r4, #12]
 80070dc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80070de:	1a5b      	subs	r3, r3, r1
 80070e0:	4543      	cmp	r3, r8
 80070e2:	dcf0      	bgt.n	80070c6 <_printf_float+0x42a>
 80070e4:	e6fc      	b.n	8006ee0 <_printf_float+0x244>
 80070e6:	f04f 0800 	mov.w	r8, #0
 80070ea:	f104 0919 	add.w	r9, r4, #25
 80070ee:	e7f4      	b.n	80070da <_printf_float+0x43e>

080070f0 <_printf_common>:
 80070f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070f4:	4616      	mov	r6, r2
 80070f6:	4698      	mov	r8, r3
 80070f8:	688a      	ldr	r2, [r1, #8]
 80070fa:	690b      	ldr	r3, [r1, #16]
 80070fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007100:	4293      	cmp	r3, r2
 8007102:	bfb8      	it	lt
 8007104:	4613      	movlt	r3, r2
 8007106:	6033      	str	r3, [r6, #0]
 8007108:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800710c:	4607      	mov	r7, r0
 800710e:	460c      	mov	r4, r1
 8007110:	b10a      	cbz	r2, 8007116 <_printf_common+0x26>
 8007112:	3301      	adds	r3, #1
 8007114:	6033      	str	r3, [r6, #0]
 8007116:	6823      	ldr	r3, [r4, #0]
 8007118:	0699      	lsls	r1, r3, #26
 800711a:	bf42      	ittt	mi
 800711c:	6833      	ldrmi	r3, [r6, #0]
 800711e:	3302      	addmi	r3, #2
 8007120:	6033      	strmi	r3, [r6, #0]
 8007122:	6825      	ldr	r5, [r4, #0]
 8007124:	f015 0506 	ands.w	r5, r5, #6
 8007128:	d106      	bne.n	8007138 <_printf_common+0x48>
 800712a:	f104 0a19 	add.w	sl, r4, #25
 800712e:	68e3      	ldr	r3, [r4, #12]
 8007130:	6832      	ldr	r2, [r6, #0]
 8007132:	1a9b      	subs	r3, r3, r2
 8007134:	42ab      	cmp	r3, r5
 8007136:	dc26      	bgt.n	8007186 <_printf_common+0x96>
 8007138:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800713c:	6822      	ldr	r2, [r4, #0]
 800713e:	3b00      	subs	r3, #0
 8007140:	bf18      	it	ne
 8007142:	2301      	movne	r3, #1
 8007144:	0692      	lsls	r2, r2, #26
 8007146:	d42b      	bmi.n	80071a0 <_printf_common+0xb0>
 8007148:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800714c:	4641      	mov	r1, r8
 800714e:	4638      	mov	r0, r7
 8007150:	47c8      	blx	r9
 8007152:	3001      	adds	r0, #1
 8007154:	d01e      	beq.n	8007194 <_printf_common+0xa4>
 8007156:	6823      	ldr	r3, [r4, #0]
 8007158:	6922      	ldr	r2, [r4, #16]
 800715a:	f003 0306 	and.w	r3, r3, #6
 800715e:	2b04      	cmp	r3, #4
 8007160:	bf02      	ittt	eq
 8007162:	68e5      	ldreq	r5, [r4, #12]
 8007164:	6833      	ldreq	r3, [r6, #0]
 8007166:	1aed      	subeq	r5, r5, r3
 8007168:	68a3      	ldr	r3, [r4, #8]
 800716a:	bf0c      	ite	eq
 800716c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007170:	2500      	movne	r5, #0
 8007172:	4293      	cmp	r3, r2
 8007174:	bfc4      	itt	gt
 8007176:	1a9b      	subgt	r3, r3, r2
 8007178:	18ed      	addgt	r5, r5, r3
 800717a:	2600      	movs	r6, #0
 800717c:	341a      	adds	r4, #26
 800717e:	42b5      	cmp	r5, r6
 8007180:	d11a      	bne.n	80071b8 <_printf_common+0xc8>
 8007182:	2000      	movs	r0, #0
 8007184:	e008      	b.n	8007198 <_printf_common+0xa8>
 8007186:	2301      	movs	r3, #1
 8007188:	4652      	mov	r2, sl
 800718a:	4641      	mov	r1, r8
 800718c:	4638      	mov	r0, r7
 800718e:	47c8      	blx	r9
 8007190:	3001      	adds	r0, #1
 8007192:	d103      	bne.n	800719c <_printf_common+0xac>
 8007194:	f04f 30ff 	mov.w	r0, #4294967295
 8007198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800719c:	3501      	adds	r5, #1
 800719e:	e7c6      	b.n	800712e <_printf_common+0x3e>
 80071a0:	18e1      	adds	r1, r4, r3
 80071a2:	1c5a      	adds	r2, r3, #1
 80071a4:	2030      	movs	r0, #48	@ 0x30
 80071a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80071aa:	4422      	add	r2, r4
 80071ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80071b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80071b4:	3302      	adds	r3, #2
 80071b6:	e7c7      	b.n	8007148 <_printf_common+0x58>
 80071b8:	2301      	movs	r3, #1
 80071ba:	4622      	mov	r2, r4
 80071bc:	4641      	mov	r1, r8
 80071be:	4638      	mov	r0, r7
 80071c0:	47c8      	blx	r9
 80071c2:	3001      	adds	r0, #1
 80071c4:	d0e6      	beq.n	8007194 <_printf_common+0xa4>
 80071c6:	3601      	adds	r6, #1
 80071c8:	e7d9      	b.n	800717e <_printf_common+0x8e>
	...

080071cc <_printf_i>:
 80071cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071d0:	7e0f      	ldrb	r7, [r1, #24]
 80071d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80071d4:	2f78      	cmp	r7, #120	@ 0x78
 80071d6:	4691      	mov	r9, r2
 80071d8:	4680      	mov	r8, r0
 80071da:	460c      	mov	r4, r1
 80071dc:	469a      	mov	sl, r3
 80071de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80071e2:	d807      	bhi.n	80071f4 <_printf_i+0x28>
 80071e4:	2f62      	cmp	r7, #98	@ 0x62
 80071e6:	d80a      	bhi.n	80071fe <_printf_i+0x32>
 80071e8:	2f00      	cmp	r7, #0
 80071ea:	f000 80d2 	beq.w	8007392 <_printf_i+0x1c6>
 80071ee:	2f58      	cmp	r7, #88	@ 0x58
 80071f0:	f000 80b9 	beq.w	8007366 <_printf_i+0x19a>
 80071f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80071f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80071fc:	e03a      	b.n	8007274 <_printf_i+0xa8>
 80071fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007202:	2b15      	cmp	r3, #21
 8007204:	d8f6      	bhi.n	80071f4 <_printf_i+0x28>
 8007206:	a101      	add	r1, pc, #4	@ (adr r1, 800720c <_printf_i+0x40>)
 8007208:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800720c:	08007265 	.word	0x08007265
 8007210:	08007279 	.word	0x08007279
 8007214:	080071f5 	.word	0x080071f5
 8007218:	080071f5 	.word	0x080071f5
 800721c:	080071f5 	.word	0x080071f5
 8007220:	080071f5 	.word	0x080071f5
 8007224:	08007279 	.word	0x08007279
 8007228:	080071f5 	.word	0x080071f5
 800722c:	080071f5 	.word	0x080071f5
 8007230:	080071f5 	.word	0x080071f5
 8007234:	080071f5 	.word	0x080071f5
 8007238:	08007379 	.word	0x08007379
 800723c:	080072a3 	.word	0x080072a3
 8007240:	08007333 	.word	0x08007333
 8007244:	080071f5 	.word	0x080071f5
 8007248:	080071f5 	.word	0x080071f5
 800724c:	0800739b 	.word	0x0800739b
 8007250:	080071f5 	.word	0x080071f5
 8007254:	080072a3 	.word	0x080072a3
 8007258:	080071f5 	.word	0x080071f5
 800725c:	080071f5 	.word	0x080071f5
 8007260:	0800733b 	.word	0x0800733b
 8007264:	6833      	ldr	r3, [r6, #0]
 8007266:	1d1a      	adds	r2, r3, #4
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	6032      	str	r2, [r6, #0]
 800726c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007270:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007274:	2301      	movs	r3, #1
 8007276:	e09d      	b.n	80073b4 <_printf_i+0x1e8>
 8007278:	6833      	ldr	r3, [r6, #0]
 800727a:	6820      	ldr	r0, [r4, #0]
 800727c:	1d19      	adds	r1, r3, #4
 800727e:	6031      	str	r1, [r6, #0]
 8007280:	0606      	lsls	r6, r0, #24
 8007282:	d501      	bpl.n	8007288 <_printf_i+0xbc>
 8007284:	681d      	ldr	r5, [r3, #0]
 8007286:	e003      	b.n	8007290 <_printf_i+0xc4>
 8007288:	0645      	lsls	r5, r0, #25
 800728a:	d5fb      	bpl.n	8007284 <_printf_i+0xb8>
 800728c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007290:	2d00      	cmp	r5, #0
 8007292:	da03      	bge.n	800729c <_printf_i+0xd0>
 8007294:	232d      	movs	r3, #45	@ 0x2d
 8007296:	426d      	negs	r5, r5
 8007298:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800729c:	4859      	ldr	r0, [pc, #356]	@ (8007404 <_printf_i+0x238>)
 800729e:	230a      	movs	r3, #10
 80072a0:	e011      	b.n	80072c6 <_printf_i+0xfa>
 80072a2:	6821      	ldr	r1, [r4, #0]
 80072a4:	6833      	ldr	r3, [r6, #0]
 80072a6:	0608      	lsls	r0, r1, #24
 80072a8:	f853 5b04 	ldr.w	r5, [r3], #4
 80072ac:	d402      	bmi.n	80072b4 <_printf_i+0xe8>
 80072ae:	0649      	lsls	r1, r1, #25
 80072b0:	bf48      	it	mi
 80072b2:	b2ad      	uxthmi	r5, r5
 80072b4:	2f6f      	cmp	r7, #111	@ 0x6f
 80072b6:	4853      	ldr	r0, [pc, #332]	@ (8007404 <_printf_i+0x238>)
 80072b8:	6033      	str	r3, [r6, #0]
 80072ba:	bf14      	ite	ne
 80072bc:	230a      	movne	r3, #10
 80072be:	2308      	moveq	r3, #8
 80072c0:	2100      	movs	r1, #0
 80072c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80072c6:	6866      	ldr	r6, [r4, #4]
 80072c8:	60a6      	str	r6, [r4, #8]
 80072ca:	2e00      	cmp	r6, #0
 80072cc:	bfa2      	ittt	ge
 80072ce:	6821      	ldrge	r1, [r4, #0]
 80072d0:	f021 0104 	bicge.w	r1, r1, #4
 80072d4:	6021      	strge	r1, [r4, #0]
 80072d6:	b90d      	cbnz	r5, 80072dc <_printf_i+0x110>
 80072d8:	2e00      	cmp	r6, #0
 80072da:	d04b      	beq.n	8007374 <_printf_i+0x1a8>
 80072dc:	4616      	mov	r6, r2
 80072de:	fbb5 f1f3 	udiv	r1, r5, r3
 80072e2:	fb03 5711 	mls	r7, r3, r1, r5
 80072e6:	5dc7      	ldrb	r7, [r0, r7]
 80072e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80072ec:	462f      	mov	r7, r5
 80072ee:	42bb      	cmp	r3, r7
 80072f0:	460d      	mov	r5, r1
 80072f2:	d9f4      	bls.n	80072de <_printf_i+0x112>
 80072f4:	2b08      	cmp	r3, #8
 80072f6:	d10b      	bne.n	8007310 <_printf_i+0x144>
 80072f8:	6823      	ldr	r3, [r4, #0]
 80072fa:	07df      	lsls	r7, r3, #31
 80072fc:	d508      	bpl.n	8007310 <_printf_i+0x144>
 80072fe:	6923      	ldr	r3, [r4, #16]
 8007300:	6861      	ldr	r1, [r4, #4]
 8007302:	4299      	cmp	r1, r3
 8007304:	bfde      	ittt	le
 8007306:	2330      	movle	r3, #48	@ 0x30
 8007308:	f806 3c01 	strble.w	r3, [r6, #-1]
 800730c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007310:	1b92      	subs	r2, r2, r6
 8007312:	6122      	str	r2, [r4, #16]
 8007314:	f8cd a000 	str.w	sl, [sp]
 8007318:	464b      	mov	r3, r9
 800731a:	aa03      	add	r2, sp, #12
 800731c:	4621      	mov	r1, r4
 800731e:	4640      	mov	r0, r8
 8007320:	f7ff fee6 	bl	80070f0 <_printf_common>
 8007324:	3001      	adds	r0, #1
 8007326:	d14a      	bne.n	80073be <_printf_i+0x1f2>
 8007328:	f04f 30ff 	mov.w	r0, #4294967295
 800732c:	b004      	add	sp, #16
 800732e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007332:	6823      	ldr	r3, [r4, #0]
 8007334:	f043 0320 	orr.w	r3, r3, #32
 8007338:	6023      	str	r3, [r4, #0]
 800733a:	4833      	ldr	r0, [pc, #204]	@ (8007408 <_printf_i+0x23c>)
 800733c:	2778      	movs	r7, #120	@ 0x78
 800733e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007342:	6823      	ldr	r3, [r4, #0]
 8007344:	6831      	ldr	r1, [r6, #0]
 8007346:	061f      	lsls	r7, r3, #24
 8007348:	f851 5b04 	ldr.w	r5, [r1], #4
 800734c:	d402      	bmi.n	8007354 <_printf_i+0x188>
 800734e:	065f      	lsls	r7, r3, #25
 8007350:	bf48      	it	mi
 8007352:	b2ad      	uxthmi	r5, r5
 8007354:	6031      	str	r1, [r6, #0]
 8007356:	07d9      	lsls	r1, r3, #31
 8007358:	bf44      	itt	mi
 800735a:	f043 0320 	orrmi.w	r3, r3, #32
 800735e:	6023      	strmi	r3, [r4, #0]
 8007360:	b11d      	cbz	r5, 800736a <_printf_i+0x19e>
 8007362:	2310      	movs	r3, #16
 8007364:	e7ac      	b.n	80072c0 <_printf_i+0xf4>
 8007366:	4827      	ldr	r0, [pc, #156]	@ (8007404 <_printf_i+0x238>)
 8007368:	e7e9      	b.n	800733e <_printf_i+0x172>
 800736a:	6823      	ldr	r3, [r4, #0]
 800736c:	f023 0320 	bic.w	r3, r3, #32
 8007370:	6023      	str	r3, [r4, #0]
 8007372:	e7f6      	b.n	8007362 <_printf_i+0x196>
 8007374:	4616      	mov	r6, r2
 8007376:	e7bd      	b.n	80072f4 <_printf_i+0x128>
 8007378:	6833      	ldr	r3, [r6, #0]
 800737a:	6825      	ldr	r5, [r4, #0]
 800737c:	6961      	ldr	r1, [r4, #20]
 800737e:	1d18      	adds	r0, r3, #4
 8007380:	6030      	str	r0, [r6, #0]
 8007382:	062e      	lsls	r6, r5, #24
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	d501      	bpl.n	800738c <_printf_i+0x1c0>
 8007388:	6019      	str	r1, [r3, #0]
 800738a:	e002      	b.n	8007392 <_printf_i+0x1c6>
 800738c:	0668      	lsls	r0, r5, #25
 800738e:	d5fb      	bpl.n	8007388 <_printf_i+0x1bc>
 8007390:	8019      	strh	r1, [r3, #0]
 8007392:	2300      	movs	r3, #0
 8007394:	6123      	str	r3, [r4, #16]
 8007396:	4616      	mov	r6, r2
 8007398:	e7bc      	b.n	8007314 <_printf_i+0x148>
 800739a:	6833      	ldr	r3, [r6, #0]
 800739c:	1d1a      	adds	r2, r3, #4
 800739e:	6032      	str	r2, [r6, #0]
 80073a0:	681e      	ldr	r6, [r3, #0]
 80073a2:	6862      	ldr	r2, [r4, #4]
 80073a4:	2100      	movs	r1, #0
 80073a6:	4630      	mov	r0, r6
 80073a8:	f7f8 ff22 	bl	80001f0 <memchr>
 80073ac:	b108      	cbz	r0, 80073b2 <_printf_i+0x1e6>
 80073ae:	1b80      	subs	r0, r0, r6
 80073b0:	6060      	str	r0, [r4, #4]
 80073b2:	6863      	ldr	r3, [r4, #4]
 80073b4:	6123      	str	r3, [r4, #16]
 80073b6:	2300      	movs	r3, #0
 80073b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80073bc:	e7aa      	b.n	8007314 <_printf_i+0x148>
 80073be:	6923      	ldr	r3, [r4, #16]
 80073c0:	4632      	mov	r2, r6
 80073c2:	4649      	mov	r1, r9
 80073c4:	4640      	mov	r0, r8
 80073c6:	47d0      	blx	sl
 80073c8:	3001      	adds	r0, #1
 80073ca:	d0ad      	beq.n	8007328 <_printf_i+0x15c>
 80073cc:	6823      	ldr	r3, [r4, #0]
 80073ce:	079b      	lsls	r3, r3, #30
 80073d0:	d413      	bmi.n	80073fa <_printf_i+0x22e>
 80073d2:	68e0      	ldr	r0, [r4, #12]
 80073d4:	9b03      	ldr	r3, [sp, #12]
 80073d6:	4298      	cmp	r0, r3
 80073d8:	bfb8      	it	lt
 80073da:	4618      	movlt	r0, r3
 80073dc:	e7a6      	b.n	800732c <_printf_i+0x160>
 80073de:	2301      	movs	r3, #1
 80073e0:	4632      	mov	r2, r6
 80073e2:	4649      	mov	r1, r9
 80073e4:	4640      	mov	r0, r8
 80073e6:	47d0      	blx	sl
 80073e8:	3001      	adds	r0, #1
 80073ea:	d09d      	beq.n	8007328 <_printf_i+0x15c>
 80073ec:	3501      	adds	r5, #1
 80073ee:	68e3      	ldr	r3, [r4, #12]
 80073f0:	9903      	ldr	r1, [sp, #12]
 80073f2:	1a5b      	subs	r3, r3, r1
 80073f4:	42ab      	cmp	r3, r5
 80073f6:	dcf2      	bgt.n	80073de <_printf_i+0x212>
 80073f8:	e7eb      	b.n	80073d2 <_printf_i+0x206>
 80073fa:	2500      	movs	r5, #0
 80073fc:	f104 0619 	add.w	r6, r4, #25
 8007400:	e7f5      	b.n	80073ee <_printf_i+0x222>
 8007402:	bf00      	nop
 8007404:	08009956 	.word	0x08009956
 8007408:	08009967 	.word	0x08009967

0800740c <std>:
 800740c:	2300      	movs	r3, #0
 800740e:	b510      	push	{r4, lr}
 8007410:	4604      	mov	r4, r0
 8007412:	e9c0 3300 	strd	r3, r3, [r0]
 8007416:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800741a:	6083      	str	r3, [r0, #8]
 800741c:	8181      	strh	r1, [r0, #12]
 800741e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007420:	81c2      	strh	r2, [r0, #14]
 8007422:	6183      	str	r3, [r0, #24]
 8007424:	4619      	mov	r1, r3
 8007426:	2208      	movs	r2, #8
 8007428:	305c      	adds	r0, #92	@ 0x5c
 800742a:	f000 f948 	bl	80076be <memset>
 800742e:	4b0d      	ldr	r3, [pc, #52]	@ (8007464 <std+0x58>)
 8007430:	6263      	str	r3, [r4, #36]	@ 0x24
 8007432:	4b0d      	ldr	r3, [pc, #52]	@ (8007468 <std+0x5c>)
 8007434:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007436:	4b0d      	ldr	r3, [pc, #52]	@ (800746c <std+0x60>)
 8007438:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800743a:	4b0d      	ldr	r3, [pc, #52]	@ (8007470 <std+0x64>)
 800743c:	6323      	str	r3, [r4, #48]	@ 0x30
 800743e:	4b0d      	ldr	r3, [pc, #52]	@ (8007474 <std+0x68>)
 8007440:	6224      	str	r4, [r4, #32]
 8007442:	429c      	cmp	r4, r3
 8007444:	d006      	beq.n	8007454 <std+0x48>
 8007446:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800744a:	4294      	cmp	r4, r2
 800744c:	d002      	beq.n	8007454 <std+0x48>
 800744e:	33d0      	adds	r3, #208	@ 0xd0
 8007450:	429c      	cmp	r4, r3
 8007452:	d105      	bne.n	8007460 <std+0x54>
 8007454:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800745c:	f000 b9ce 	b.w	80077fc <__retarget_lock_init_recursive>
 8007460:	bd10      	pop	{r4, pc}
 8007462:	bf00      	nop
 8007464:	08007639 	.word	0x08007639
 8007468:	0800765b 	.word	0x0800765b
 800746c:	08007693 	.word	0x08007693
 8007470:	080076b7 	.word	0x080076b7
 8007474:	2000100c 	.word	0x2000100c

08007478 <stdio_exit_handler>:
 8007478:	4a02      	ldr	r2, [pc, #8]	@ (8007484 <stdio_exit_handler+0xc>)
 800747a:	4903      	ldr	r1, [pc, #12]	@ (8007488 <stdio_exit_handler+0x10>)
 800747c:	4803      	ldr	r0, [pc, #12]	@ (800748c <stdio_exit_handler+0x14>)
 800747e:	f000 b869 	b.w	8007554 <_fwalk_sglue>
 8007482:	bf00      	nop
 8007484:	2000018c 	.word	0x2000018c
 8007488:	08009009 	.word	0x08009009
 800748c:	2000019c 	.word	0x2000019c

08007490 <cleanup_stdio>:
 8007490:	6841      	ldr	r1, [r0, #4]
 8007492:	4b0c      	ldr	r3, [pc, #48]	@ (80074c4 <cleanup_stdio+0x34>)
 8007494:	4299      	cmp	r1, r3
 8007496:	b510      	push	{r4, lr}
 8007498:	4604      	mov	r4, r0
 800749a:	d001      	beq.n	80074a0 <cleanup_stdio+0x10>
 800749c:	f001 fdb4 	bl	8009008 <_fflush_r>
 80074a0:	68a1      	ldr	r1, [r4, #8]
 80074a2:	4b09      	ldr	r3, [pc, #36]	@ (80074c8 <cleanup_stdio+0x38>)
 80074a4:	4299      	cmp	r1, r3
 80074a6:	d002      	beq.n	80074ae <cleanup_stdio+0x1e>
 80074a8:	4620      	mov	r0, r4
 80074aa:	f001 fdad 	bl	8009008 <_fflush_r>
 80074ae:	68e1      	ldr	r1, [r4, #12]
 80074b0:	4b06      	ldr	r3, [pc, #24]	@ (80074cc <cleanup_stdio+0x3c>)
 80074b2:	4299      	cmp	r1, r3
 80074b4:	d004      	beq.n	80074c0 <cleanup_stdio+0x30>
 80074b6:	4620      	mov	r0, r4
 80074b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074bc:	f001 bda4 	b.w	8009008 <_fflush_r>
 80074c0:	bd10      	pop	{r4, pc}
 80074c2:	bf00      	nop
 80074c4:	2000100c 	.word	0x2000100c
 80074c8:	20001074 	.word	0x20001074
 80074cc:	200010dc 	.word	0x200010dc

080074d0 <global_stdio_init.part.0>:
 80074d0:	b510      	push	{r4, lr}
 80074d2:	4b0b      	ldr	r3, [pc, #44]	@ (8007500 <global_stdio_init.part.0+0x30>)
 80074d4:	4c0b      	ldr	r4, [pc, #44]	@ (8007504 <global_stdio_init.part.0+0x34>)
 80074d6:	4a0c      	ldr	r2, [pc, #48]	@ (8007508 <global_stdio_init.part.0+0x38>)
 80074d8:	601a      	str	r2, [r3, #0]
 80074da:	4620      	mov	r0, r4
 80074dc:	2200      	movs	r2, #0
 80074de:	2104      	movs	r1, #4
 80074e0:	f7ff ff94 	bl	800740c <std>
 80074e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80074e8:	2201      	movs	r2, #1
 80074ea:	2109      	movs	r1, #9
 80074ec:	f7ff ff8e 	bl	800740c <std>
 80074f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80074f4:	2202      	movs	r2, #2
 80074f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074fa:	2112      	movs	r1, #18
 80074fc:	f7ff bf86 	b.w	800740c <std>
 8007500:	20001144 	.word	0x20001144
 8007504:	2000100c 	.word	0x2000100c
 8007508:	08007479 	.word	0x08007479

0800750c <__sfp_lock_acquire>:
 800750c:	4801      	ldr	r0, [pc, #4]	@ (8007514 <__sfp_lock_acquire+0x8>)
 800750e:	f000 b976 	b.w	80077fe <__retarget_lock_acquire_recursive>
 8007512:	bf00      	nop
 8007514:	2000114d 	.word	0x2000114d

08007518 <__sfp_lock_release>:
 8007518:	4801      	ldr	r0, [pc, #4]	@ (8007520 <__sfp_lock_release+0x8>)
 800751a:	f000 b971 	b.w	8007800 <__retarget_lock_release_recursive>
 800751e:	bf00      	nop
 8007520:	2000114d 	.word	0x2000114d

08007524 <__sinit>:
 8007524:	b510      	push	{r4, lr}
 8007526:	4604      	mov	r4, r0
 8007528:	f7ff fff0 	bl	800750c <__sfp_lock_acquire>
 800752c:	6a23      	ldr	r3, [r4, #32]
 800752e:	b11b      	cbz	r3, 8007538 <__sinit+0x14>
 8007530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007534:	f7ff bff0 	b.w	8007518 <__sfp_lock_release>
 8007538:	4b04      	ldr	r3, [pc, #16]	@ (800754c <__sinit+0x28>)
 800753a:	6223      	str	r3, [r4, #32]
 800753c:	4b04      	ldr	r3, [pc, #16]	@ (8007550 <__sinit+0x2c>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d1f5      	bne.n	8007530 <__sinit+0xc>
 8007544:	f7ff ffc4 	bl	80074d0 <global_stdio_init.part.0>
 8007548:	e7f2      	b.n	8007530 <__sinit+0xc>
 800754a:	bf00      	nop
 800754c:	08007491 	.word	0x08007491
 8007550:	20001144 	.word	0x20001144

08007554 <_fwalk_sglue>:
 8007554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007558:	4607      	mov	r7, r0
 800755a:	4688      	mov	r8, r1
 800755c:	4614      	mov	r4, r2
 800755e:	2600      	movs	r6, #0
 8007560:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007564:	f1b9 0901 	subs.w	r9, r9, #1
 8007568:	d505      	bpl.n	8007576 <_fwalk_sglue+0x22>
 800756a:	6824      	ldr	r4, [r4, #0]
 800756c:	2c00      	cmp	r4, #0
 800756e:	d1f7      	bne.n	8007560 <_fwalk_sglue+0xc>
 8007570:	4630      	mov	r0, r6
 8007572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007576:	89ab      	ldrh	r3, [r5, #12]
 8007578:	2b01      	cmp	r3, #1
 800757a:	d907      	bls.n	800758c <_fwalk_sglue+0x38>
 800757c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007580:	3301      	adds	r3, #1
 8007582:	d003      	beq.n	800758c <_fwalk_sglue+0x38>
 8007584:	4629      	mov	r1, r5
 8007586:	4638      	mov	r0, r7
 8007588:	47c0      	blx	r8
 800758a:	4306      	orrs	r6, r0
 800758c:	3568      	adds	r5, #104	@ 0x68
 800758e:	e7e9      	b.n	8007564 <_fwalk_sglue+0x10>

08007590 <sniprintf>:
 8007590:	b40c      	push	{r2, r3}
 8007592:	b530      	push	{r4, r5, lr}
 8007594:	4b17      	ldr	r3, [pc, #92]	@ (80075f4 <sniprintf+0x64>)
 8007596:	1e0c      	subs	r4, r1, #0
 8007598:	681d      	ldr	r5, [r3, #0]
 800759a:	b09d      	sub	sp, #116	@ 0x74
 800759c:	da08      	bge.n	80075b0 <sniprintf+0x20>
 800759e:	238b      	movs	r3, #139	@ 0x8b
 80075a0:	602b      	str	r3, [r5, #0]
 80075a2:	f04f 30ff 	mov.w	r0, #4294967295
 80075a6:	b01d      	add	sp, #116	@ 0x74
 80075a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80075ac:	b002      	add	sp, #8
 80075ae:	4770      	bx	lr
 80075b0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80075b4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80075b8:	bf14      	ite	ne
 80075ba:	f104 33ff 	addne.w	r3, r4, #4294967295
 80075be:	4623      	moveq	r3, r4
 80075c0:	9304      	str	r3, [sp, #16]
 80075c2:	9307      	str	r3, [sp, #28]
 80075c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80075c8:	9002      	str	r0, [sp, #8]
 80075ca:	9006      	str	r0, [sp, #24]
 80075cc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80075d0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80075d2:	ab21      	add	r3, sp, #132	@ 0x84
 80075d4:	a902      	add	r1, sp, #8
 80075d6:	4628      	mov	r0, r5
 80075d8:	9301      	str	r3, [sp, #4]
 80075da:	f001 fb95 	bl	8008d08 <_svfiprintf_r>
 80075de:	1c43      	adds	r3, r0, #1
 80075e0:	bfbc      	itt	lt
 80075e2:	238b      	movlt	r3, #139	@ 0x8b
 80075e4:	602b      	strlt	r3, [r5, #0]
 80075e6:	2c00      	cmp	r4, #0
 80075e8:	d0dd      	beq.n	80075a6 <sniprintf+0x16>
 80075ea:	9b02      	ldr	r3, [sp, #8]
 80075ec:	2200      	movs	r2, #0
 80075ee:	701a      	strb	r2, [r3, #0]
 80075f0:	e7d9      	b.n	80075a6 <sniprintf+0x16>
 80075f2:	bf00      	nop
 80075f4:	20000198 	.word	0x20000198

080075f8 <siprintf>:
 80075f8:	b40e      	push	{r1, r2, r3}
 80075fa:	b500      	push	{lr}
 80075fc:	b09c      	sub	sp, #112	@ 0x70
 80075fe:	ab1d      	add	r3, sp, #116	@ 0x74
 8007600:	9002      	str	r0, [sp, #8]
 8007602:	9006      	str	r0, [sp, #24]
 8007604:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007608:	4809      	ldr	r0, [pc, #36]	@ (8007630 <siprintf+0x38>)
 800760a:	9107      	str	r1, [sp, #28]
 800760c:	9104      	str	r1, [sp, #16]
 800760e:	4909      	ldr	r1, [pc, #36]	@ (8007634 <siprintf+0x3c>)
 8007610:	f853 2b04 	ldr.w	r2, [r3], #4
 8007614:	9105      	str	r1, [sp, #20]
 8007616:	6800      	ldr	r0, [r0, #0]
 8007618:	9301      	str	r3, [sp, #4]
 800761a:	a902      	add	r1, sp, #8
 800761c:	f001 fb74 	bl	8008d08 <_svfiprintf_r>
 8007620:	9b02      	ldr	r3, [sp, #8]
 8007622:	2200      	movs	r2, #0
 8007624:	701a      	strb	r2, [r3, #0]
 8007626:	b01c      	add	sp, #112	@ 0x70
 8007628:	f85d eb04 	ldr.w	lr, [sp], #4
 800762c:	b003      	add	sp, #12
 800762e:	4770      	bx	lr
 8007630:	20000198 	.word	0x20000198
 8007634:	ffff0208 	.word	0xffff0208

08007638 <__sread>:
 8007638:	b510      	push	{r4, lr}
 800763a:	460c      	mov	r4, r1
 800763c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007640:	f000 f87e 	bl	8007740 <_read_r>
 8007644:	2800      	cmp	r0, #0
 8007646:	bfab      	itete	ge
 8007648:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800764a:	89a3      	ldrhlt	r3, [r4, #12]
 800764c:	181b      	addge	r3, r3, r0
 800764e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007652:	bfac      	ite	ge
 8007654:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007656:	81a3      	strhlt	r3, [r4, #12]
 8007658:	bd10      	pop	{r4, pc}

0800765a <__swrite>:
 800765a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800765e:	461f      	mov	r7, r3
 8007660:	898b      	ldrh	r3, [r1, #12]
 8007662:	05db      	lsls	r3, r3, #23
 8007664:	4605      	mov	r5, r0
 8007666:	460c      	mov	r4, r1
 8007668:	4616      	mov	r6, r2
 800766a:	d505      	bpl.n	8007678 <__swrite+0x1e>
 800766c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007670:	2302      	movs	r3, #2
 8007672:	2200      	movs	r2, #0
 8007674:	f000 f852 	bl	800771c <_lseek_r>
 8007678:	89a3      	ldrh	r3, [r4, #12]
 800767a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800767e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007682:	81a3      	strh	r3, [r4, #12]
 8007684:	4632      	mov	r2, r6
 8007686:	463b      	mov	r3, r7
 8007688:	4628      	mov	r0, r5
 800768a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800768e:	f000 b879 	b.w	8007784 <_write_r>

08007692 <__sseek>:
 8007692:	b510      	push	{r4, lr}
 8007694:	460c      	mov	r4, r1
 8007696:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800769a:	f000 f83f 	bl	800771c <_lseek_r>
 800769e:	1c43      	adds	r3, r0, #1
 80076a0:	89a3      	ldrh	r3, [r4, #12]
 80076a2:	bf15      	itete	ne
 80076a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80076a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80076aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80076ae:	81a3      	strheq	r3, [r4, #12]
 80076b0:	bf18      	it	ne
 80076b2:	81a3      	strhne	r3, [r4, #12]
 80076b4:	bd10      	pop	{r4, pc}

080076b6 <__sclose>:
 80076b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076ba:	f000 b81f 	b.w	80076fc <_close_r>

080076be <memset>:
 80076be:	4402      	add	r2, r0
 80076c0:	4603      	mov	r3, r0
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d100      	bne.n	80076c8 <memset+0xa>
 80076c6:	4770      	bx	lr
 80076c8:	f803 1b01 	strb.w	r1, [r3], #1
 80076cc:	e7f9      	b.n	80076c2 <memset+0x4>

080076ce <strncat>:
 80076ce:	b530      	push	{r4, r5, lr}
 80076d0:	4604      	mov	r4, r0
 80076d2:	7825      	ldrb	r5, [r4, #0]
 80076d4:	4623      	mov	r3, r4
 80076d6:	3401      	adds	r4, #1
 80076d8:	2d00      	cmp	r5, #0
 80076da:	d1fa      	bne.n	80076d2 <strncat+0x4>
 80076dc:	3a01      	subs	r2, #1
 80076de:	d304      	bcc.n	80076ea <strncat+0x1c>
 80076e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076e4:	f803 4b01 	strb.w	r4, [r3], #1
 80076e8:	b904      	cbnz	r4, 80076ec <strncat+0x1e>
 80076ea:	bd30      	pop	{r4, r5, pc}
 80076ec:	2a00      	cmp	r2, #0
 80076ee:	d1f5      	bne.n	80076dc <strncat+0xe>
 80076f0:	701a      	strb	r2, [r3, #0]
 80076f2:	e7f3      	b.n	80076dc <strncat+0xe>

080076f4 <_localeconv_r>:
 80076f4:	4800      	ldr	r0, [pc, #0]	@ (80076f8 <_localeconv_r+0x4>)
 80076f6:	4770      	bx	lr
 80076f8:	200002d8 	.word	0x200002d8

080076fc <_close_r>:
 80076fc:	b538      	push	{r3, r4, r5, lr}
 80076fe:	4d06      	ldr	r5, [pc, #24]	@ (8007718 <_close_r+0x1c>)
 8007700:	2300      	movs	r3, #0
 8007702:	4604      	mov	r4, r0
 8007704:	4608      	mov	r0, r1
 8007706:	602b      	str	r3, [r5, #0]
 8007708:	f7fa fa80 	bl	8001c0c <_close>
 800770c:	1c43      	adds	r3, r0, #1
 800770e:	d102      	bne.n	8007716 <_close_r+0x1a>
 8007710:	682b      	ldr	r3, [r5, #0]
 8007712:	b103      	cbz	r3, 8007716 <_close_r+0x1a>
 8007714:	6023      	str	r3, [r4, #0]
 8007716:	bd38      	pop	{r3, r4, r5, pc}
 8007718:	20001148 	.word	0x20001148

0800771c <_lseek_r>:
 800771c:	b538      	push	{r3, r4, r5, lr}
 800771e:	4d07      	ldr	r5, [pc, #28]	@ (800773c <_lseek_r+0x20>)
 8007720:	4604      	mov	r4, r0
 8007722:	4608      	mov	r0, r1
 8007724:	4611      	mov	r1, r2
 8007726:	2200      	movs	r2, #0
 8007728:	602a      	str	r2, [r5, #0]
 800772a:	461a      	mov	r2, r3
 800772c:	f7fa fa95 	bl	8001c5a <_lseek>
 8007730:	1c43      	adds	r3, r0, #1
 8007732:	d102      	bne.n	800773a <_lseek_r+0x1e>
 8007734:	682b      	ldr	r3, [r5, #0]
 8007736:	b103      	cbz	r3, 800773a <_lseek_r+0x1e>
 8007738:	6023      	str	r3, [r4, #0]
 800773a:	bd38      	pop	{r3, r4, r5, pc}
 800773c:	20001148 	.word	0x20001148

08007740 <_read_r>:
 8007740:	b538      	push	{r3, r4, r5, lr}
 8007742:	4d07      	ldr	r5, [pc, #28]	@ (8007760 <_read_r+0x20>)
 8007744:	4604      	mov	r4, r0
 8007746:	4608      	mov	r0, r1
 8007748:	4611      	mov	r1, r2
 800774a:	2200      	movs	r2, #0
 800774c:	602a      	str	r2, [r5, #0]
 800774e:	461a      	mov	r2, r3
 8007750:	f7fa fa23 	bl	8001b9a <_read>
 8007754:	1c43      	adds	r3, r0, #1
 8007756:	d102      	bne.n	800775e <_read_r+0x1e>
 8007758:	682b      	ldr	r3, [r5, #0]
 800775a:	b103      	cbz	r3, 800775e <_read_r+0x1e>
 800775c:	6023      	str	r3, [r4, #0]
 800775e:	bd38      	pop	{r3, r4, r5, pc}
 8007760:	20001148 	.word	0x20001148

08007764 <_sbrk_r>:
 8007764:	b538      	push	{r3, r4, r5, lr}
 8007766:	4d06      	ldr	r5, [pc, #24]	@ (8007780 <_sbrk_r+0x1c>)
 8007768:	2300      	movs	r3, #0
 800776a:	4604      	mov	r4, r0
 800776c:	4608      	mov	r0, r1
 800776e:	602b      	str	r3, [r5, #0]
 8007770:	f7fa fa80 	bl	8001c74 <_sbrk>
 8007774:	1c43      	adds	r3, r0, #1
 8007776:	d102      	bne.n	800777e <_sbrk_r+0x1a>
 8007778:	682b      	ldr	r3, [r5, #0]
 800777a:	b103      	cbz	r3, 800777e <_sbrk_r+0x1a>
 800777c:	6023      	str	r3, [r4, #0]
 800777e:	bd38      	pop	{r3, r4, r5, pc}
 8007780:	20001148 	.word	0x20001148

08007784 <_write_r>:
 8007784:	b538      	push	{r3, r4, r5, lr}
 8007786:	4d07      	ldr	r5, [pc, #28]	@ (80077a4 <_write_r+0x20>)
 8007788:	4604      	mov	r4, r0
 800778a:	4608      	mov	r0, r1
 800778c:	4611      	mov	r1, r2
 800778e:	2200      	movs	r2, #0
 8007790:	602a      	str	r2, [r5, #0]
 8007792:	461a      	mov	r2, r3
 8007794:	f7fa fa1e 	bl	8001bd4 <_write>
 8007798:	1c43      	adds	r3, r0, #1
 800779a:	d102      	bne.n	80077a2 <_write_r+0x1e>
 800779c:	682b      	ldr	r3, [r5, #0]
 800779e:	b103      	cbz	r3, 80077a2 <_write_r+0x1e>
 80077a0:	6023      	str	r3, [r4, #0]
 80077a2:	bd38      	pop	{r3, r4, r5, pc}
 80077a4:	20001148 	.word	0x20001148

080077a8 <__errno>:
 80077a8:	4b01      	ldr	r3, [pc, #4]	@ (80077b0 <__errno+0x8>)
 80077aa:	6818      	ldr	r0, [r3, #0]
 80077ac:	4770      	bx	lr
 80077ae:	bf00      	nop
 80077b0:	20000198 	.word	0x20000198

080077b4 <__libc_init_array>:
 80077b4:	b570      	push	{r4, r5, r6, lr}
 80077b6:	4d0d      	ldr	r5, [pc, #52]	@ (80077ec <__libc_init_array+0x38>)
 80077b8:	4c0d      	ldr	r4, [pc, #52]	@ (80077f0 <__libc_init_array+0x3c>)
 80077ba:	1b64      	subs	r4, r4, r5
 80077bc:	10a4      	asrs	r4, r4, #2
 80077be:	2600      	movs	r6, #0
 80077c0:	42a6      	cmp	r6, r4
 80077c2:	d109      	bne.n	80077d8 <__libc_init_array+0x24>
 80077c4:	4d0b      	ldr	r5, [pc, #44]	@ (80077f4 <__libc_init_array+0x40>)
 80077c6:	4c0c      	ldr	r4, [pc, #48]	@ (80077f8 <__libc_init_array+0x44>)
 80077c8:	f001 ff9e 	bl	8009708 <_init>
 80077cc:	1b64      	subs	r4, r4, r5
 80077ce:	10a4      	asrs	r4, r4, #2
 80077d0:	2600      	movs	r6, #0
 80077d2:	42a6      	cmp	r6, r4
 80077d4:	d105      	bne.n	80077e2 <__libc_init_array+0x2e>
 80077d6:	bd70      	pop	{r4, r5, r6, pc}
 80077d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80077dc:	4798      	blx	r3
 80077de:	3601      	adds	r6, #1
 80077e0:	e7ee      	b.n	80077c0 <__libc_init_array+0xc>
 80077e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80077e6:	4798      	blx	r3
 80077e8:	3601      	adds	r6, #1
 80077ea:	e7f2      	b.n	80077d2 <__libc_init_array+0x1e>
 80077ec:	08009cc0 	.word	0x08009cc0
 80077f0:	08009cc0 	.word	0x08009cc0
 80077f4:	08009cc0 	.word	0x08009cc0
 80077f8:	08009cc4 	.word	0x08009cc4

080077fc <__retarget_lock_init_recursive>:
 80077fc:	4770      	bx	lr

080077fe <__retarget_lock_acquire_recursive>:
 80077fe:	4770      	bx	lr

08007800 <__retarget_lock_release_recursive>:
 8007800:	4770      	bx	lr

08007802 <memcpy>:
 8007802:	440a      	add	r2, r1
 8007804:	4291      	cmp	r1, r2
 8007806:	f100 33ff 	add.w	r3, r0, #4294967295
 800780a:	d100      	bne.n	800780e <memcpy+0xc>
 800780c:	4770      	bx	lr
 800780e:	b510      	push	{r4, lr}
 8007810:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007814:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007818:	4291      	cmp	r1, r2
 800781a:	d1f9      	bne.n	8007810 <memcpy+0xe>
 800781c:	bd10      	pop	{r4, pc}

0800781e <quorem>:
 800781e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007822:	6903      	ldr	r3, [r0, #16]
 8007824:	690c      	ldr	r4, [r1, #16]
 8007826:	42a3      	cmp	r3, r4
 8007828:	4607      	mov	r7, r0
 800782a:	db7e      	blt.n	800792a <quorem+0x10c>
 800782c:	3c01      	subs	r4, #1
 800782e:	f101 0814 	add.w	r8, r1, #20
 8007832:	00a3      	lsls	r3, r4, #2
 8007834:	f100 0514 	add.w	r5, r0, #20
 8007838:	9300      	str	r3, [sp, #0]
 800783a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800783e:	9301      	str	r3, [sp, #4]
 8007840:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007844:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007848:	3301      	adds	r3, #1
 800784a:	429a      	cmp	r2, r3
 800784c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007850:	fbb2 f6f3 	udiv	r6, r2, r3
 8007854:	d32e      	bcc.n	80078b4 <quorem+0x96>
 8007856:	f04f 0a00 	mov.w	sl, #0
 800785a:	46c4      	mov	ip, r8
 800785c:	46ae      	mov	lr, r5
 800785e:	46d3      	mov	fp, sl
 8007860:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007864:	b298      	uxth	r0, r3
 8007866:	fb06 a000 	mla	r0, r6, r0, sl
 800786a:	0c02      	lsrs	r2, r0, #16
 800786c:	0c1b      	lsrs	r3, r3, #16
 800786e:	fb06 2303 	mla	r3, r6, r3, r2
 8007872:	f8de 2000 	ldr.w	r2, [lr]
 8007876:	b280      	uxth	r0, r0
 8007878:	b292      	uxth	r2, r2
 800787a:	1a12      	subs	r2, r2, r0
 800787c:	445a      	add	r2, fp
 800787e:	f8de 0000 	ldr.w	r0, [lr]
 8007882:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007886:	b29b      	uxth	r3, r3
 8007888:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800788c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007890:	b292      	uxth	r2, r2
 8007892:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007896:	45e1      	cmp	r9, ip
 8007898:	f84e 2b04 	str.w	r2, [lr], #4
 800789c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80078a0:	d2de      	bcs.n	8007860 <quorem+0x42>
 80078a2:	9b00      	ldr	r3, [sp, #0]
 80078a4:	58eb      	ldr	r3, [r5, r3]
 80078a6:	b92b      	cbnz	r3, 80078b4 <quorem+0x96>
 80078a8:	9b01      	ldr	r3, [sp, #4]
 80078aa:	3b04      	subs	r3, #4
 80078ac:	429d      	cmp	r5, r3
 80078ae:	461a      	mov	r2, r3
 80078b0:	d32f      	bcc.n	8007912 <quorem+0xf4>
 80078b2:	613c      	str	r4, [r7, #16]
 80078b4:	4638      	mov	r0, r7
 80078b6:	f001 f8c3 	bl	8008a40 <__mcmp>
 80078ba:	2800      	cmp	r0, #0
 80078bc:	db25      	blt.n	800790a <quorem+0xec>
 80078be:	4629      	mov	r1, r5
 80078c0:	2000      	movs	r0, #0
 80078c2:	f858 2b04 	ldr.w	r2, [r8], #4
 80078c6:	f8d1 c000 	ldr.w	ip, [r1]
 80078ca:	fa1f fe82 	uxth.w	lr, r2
 80078ce:	fa1f f38c 	uxth.w	r3, ip
 80078d2:	eba3 030e 	sub.w	r3, r3, lr
 80078d6:	4403      	add	r3, r0
 80078d8:	0c12      	lsrs	r2, r2, #16
 80078da:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80078de:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80078e2:	b29b      	uxth	r3, r3
 80078e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80078e8:	45c1      	cmp	r9, r8
 80078ea:	f841 3b04 	str.w	r3, [r1], #4
 80078ee:	ea4f 4022 	mov.w	r0, r2, asr #16
 80078f2:	d2e6      	bcs.n	80078c2 <quorem+0xa4>
 80078f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80078f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80078fc:	b922      	cbnz	r2, 8007908 <quorem+0xea>
 80078fe:	3b04      	subs	r3, #4
 8007900:	429d      	cmp	r5, r3
 8007902:	461a      	mov	r2, r3
 8007904:	d30b      	bcc.n	800791e <quorem+0x100>
 8007906:	613c      	str	r4, [r7, #16]
 8007908:	3601      	adds	r6, #1
 800790a:	4630      	mov	r0, r6
 800790c:	b003      	add	sp, #12
 800790e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007912:	6812      	ldr	r2, [r2, #0]
 8007914:	3b04      	subs	r3, #4
 8007916:	2a00      	cmp	r2, #0
 8007918:	d1cb      	bne.n	80078b2 <quorem+0x94>
 800791a:	3c01      	subs	r4, #1
 800791c:	e7c6      	b.n	80078ac <quorem+0x8e>
 800791e:	6812      	ldr	r2, [r2, #0]
 8007920:	3b04      	subs	r3, #4
 8007922:	2a00      	cmp	r2, #0
 8007924:	d1ef      	bne.n	8007906 <quorem+0xe8>
 8007926:	3c01      	subs	r4, #1
 8007928:	e7ea      	b.n	8007900 <quorem+0xe2>
 800792a:	2000      	movs	r0, #0
 800792c:	e7ee      	b.n	800790c <quorem+0xee>
	...

08007930 <_dtoa_r>:
 8007930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007934:	69c7      	ldr	r7, [r0, #28]
 8007936:	b099      	sub	sp, #100	@ 0x64
 8007938:	ed8d 0b02 	vstr	d0, [sp, #8]
 800793c:	ec55 4b10 	vmov	r4, r5, d0
 8007940:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007942:	9109      	str	r1, [sp, #36]	@ 0x24
 8007944:	4683      	mov	fp, r0
 8007946:	920e      	str	r2, [sp, #56]	@ 0x38
 8007948:	9313      	str	r3, [sp, #76]	@ 0x4c
 800794a:	b97f      	cbnz	r7, 800796c <_dtoa_r+0x3c>
 800794c:	2010      	movs	r0, #16
 800794e:	f7ff f84f 	bl	80069f0 <malloc>
 8007952:	4602      	mov	r2, r0
 8007954:	f8cb 001c 	str.w	r0, [fp, #28]
 8007958:	b920      	cbnz	r0, 8007964 <_dtoa_r+0x34>
 800795a:	4ba7      	ldr	r3, [pc, #668]	@ (8007bf8 <_dtoa_r+0x2c8>)
 800795c:	21ef      	movs	r1, #239	@ 0xef
 800795e:	48a7      	ldr	r0, [pc, #668]	@ (8007bfc <_dtoa_r+0x2cc>)
 8007960:	f001 fb94 	bl	800908c <__assert_func>
 8007964:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007968:	6007      	str	r7, [r0, #0]
 800796a:	60c7      	str	r7, [r0, #12]
 800796c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007970:	6819      	ldr	r1, [r3, #0]
 8007972:	b159      	cbz	r1, 800798c <_dtoa_r+0x5c>
 8007974:	685a      	ldr	r2, [r3, #4]
 8007976:	604a      	str	r2, [r1, #4]
 8007978:	2301      	movs	r3, #1
 800797a:	4093      	lsls	r3, r2
 800797c:	608b      	str	r3, [r1, #8]
 800797e:	4658      	mov	r0, fp
 8007980:	f000 fe24 	bl	80085cc <_Bfree>
 8007984:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007988:	2200      	movs	r2, #0
 800798a:	601a      	str	r2, [r3, #0]
 800798c:	1e2b      	subs	r3, r5, #0
 800798e:	bfb9      	ittee	lt
 8007990:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007994:	9303      	strlt	r3, [sp, #12]
 8007996:	2300      	movge	r3, #0
 8007998:	6033      	strge	r3, [r6, #0]
 800799a:	9f03      	ldr	r7, [sp, #12]
 800799c:	4b98      	ldr	r3, [pc, #608]	@ (8007c00 <_dtoa_r+0x2d0>)
 800799e:	bfbc      	itt	lt
 80079a0:	2201      	movlt	r2, #1
 80079a2:	6032      	strlt	r2, [r6, #0]
 80079a4:	43bb      	bics	r3, r7
 80079a6:	d112      	bne.n	80079ce <_dtoa_r+0x9e>
 80079a8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80079aa:	f242 730f 	movw	r3, #9999	@ 0x270f
 80079ae:	6013      	str	r3, [r2, #0]
 80079b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80079b4:	4323      	orrs	r3, r4
 80079b6:	f000 854d 	beq.w	8008454 <_dtoa_r+0xb24>
 80079ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80079bc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007c14 <_dtoa_r+0x2e4>
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	f000 854f 	beq.w	8008464 <_dtoa_r+0xb34>
 80079c6:	f10a 0303 	add.w	r3, sl, #3
 80079ca:	f000 bd49 	b.w	8008460 <_dtoa_r+0xb30>
 80079ce:	ed9d 7b02 	vldr	d7, [sp, #8]
 80079d2:	2200      	movs	r2, #0
 80079d4:	ec51 0b17 	vmov	r0, r1, d7
 80079d8:	2300      	movs	r3, #0
 80079da:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80079de:	f7f9 f883 	bl	8000ae8 <__aeabi_dcmpeq>
 80079e2:	4680      	mov	r8, r0
 80079e4:	b158      	cbz	r0, 80079fe <_dtoa_r+0xce>
 80079e6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80079e8:	2301      	movs	r3, #1
 80079ea:	6013      	str	r3, [r2, #0]
 80079ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80079ee:	b113      	cbz	r3, 80079f6 <_dtoa_r+0xc6>
 80079f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80079f2:	4b84      	ldr	r3, [pc, #528]	@ (8007c04 <_dtoa_r+0x2d4>)
 80079f4:	6013      	str	r3, [r2, #0]
 80079f6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007c18 <_dtoa_r+0x2e8>
 80079fa:	f000 bd33 	b.w	8008464 <_dtoa_r+0xb34>
 80079fe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007a02:	aa16      	add	r2, sp, #88	@ 0x58
 8007a04:	a917      	add	r1, sp, #92	@ 0x5c
 8007a06:	4658      	mov	r0, fp
 8007a08:	f001 f8ca 	bl	8008ba0 <__d2b>
 8007a0c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007a10:	4681      	mov	r9, r0
 8007a12:	2e00      	cmp	r6, #0
 8007a14:	d077      	beq.n	8007b06 <_dtoa_r+0x1d6>
 8007a16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007a18:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007a1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a24:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007a28:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007a2c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007a30:	4619      	mov	r1, r3
 8007a32:	2200      	movs	r2, #0
 8007a34:	4b74      	ldr	r3, [pc, #464]	@ (8007c08 <_dtoa_r+0x2d8>)
 8007a36:	f7f8 fc37 	bl	80002a8 <__aeabi_dsub>
 8007a3a:	a369      	add	r3, pc, #420	@ (adr r3, 8007be0 <_dtoa_r+0x2b0>)
 8007a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a40:	f7f8 fdea 	bl	8000618 <__aeabi_dmul>
 8007a44:	a368      	add	r3, pc, #416	@ (adr r3, 8007be8 <_dtoa_r+0x2b8>)
 8007a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a4a:	f7f8 fc2f 	bl	80002ac <__adddf3>
 8007a4e:	4604      	mov	r4, r0
 8007a50:	4630      	mov	r0, r6
 8007a52:	460d      	mov	r5, r1
 8007a54:	f7f8 fd76 	bl	8000544 <__aeabi_i2d>
 8007a58:	a365      	add	r3, pc, #404	@ (adr r3, 8007bf0 <_dtoa_r+0x2c0>)
 8007a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a5e:	f7f8 fddb 	bl	8000618 <__aeabi_dmul>
 8007a62:	4602      	mov	r2, r0
 8007a64:	460b      	mov	r3, r1
 8007a66:	4620      	mov	r0, r4
 8007a68:	4629      	mov	r1, r5
 8007a6a:	f7f8 fc1f 	bl	80002ac <__adddf3>
 8007a6e:	4604      	mov	r4, r0
 8007a70:	460d      	mov	r5, r1
 8007a72:	f7f9 f881 	bl	8000b78 <__aeabi_d2iz>
 8007a76:	2200      	movs	r2, #0
 8007a78:	4607      	mov	r7, r0
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	4620      	mov	r0, r4
 8007a7e:	4629      	mov	r1, r5
 8007a80:	f7f9 f83c 	bl	8000afc <__aeabi_dcmplt>
 8007a84:	b140      	cbz	r0, 8007a98 <_dtoa_r+0x168>
 8007a86:	4638      	mov	r0, r7
 8007a88:	f7f8 fd5c 	bl	8000544 <__aeabi_i2d>
 8007a8c:	4622      	mov	r2, r4
 8007a8e:	462b      	mov	r3, r5
 8007a90:	f7f9 f82a 	bl	8000ae8 <__aeabi_dcmpeq>
 8007a94:	b900      	cbnz	r0, 8007a98 <_dtoa_r+0x168>
 8007a96:	3f01      	subs	r7, #1
 8007a98:	2f16      	cmp	r7, #22
 8007a9a:	d851      	bhi.n	8007b40 <_dtoa_r+0x210>
 8007a9c:	4b5b      	ldr	r3, [pc, #364]	@ (8007c0c <_dtoa_r+0x2dc>)
 8007a9e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007aaa:	f7f9 f827 	bl	8000afc <__aeabi_dcmplt>
 8007aae:	2800      	cmp	r0, #0
 8007ab0:	d048      	beq.n	8007b44 <_dtoa_r+0x214>
 8007ab2:	3f01      	subs	r7, #1
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	9312      	str	r3, [sp, #72]	@ 0x48
 8007ab8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007aba:	1b9b      	subs	r3, r3, r6
 8007abc:	1e5a      	subs	r2, r3, #1
 8007abe:	bf44      	itt	mi
 8007ac0:	f1c3 0801 	rsbmi	r8, r3, #1
 8007ac4:	2300      	movmi	r3, #0
 8007ac6:	9208      	str	r2, [sp, #32]
 8007ac8:	bf54      	ite	pl
 8007aca:	f04f 0800 	movpl.w	r8, #0
 8007ace:	9308      	strmi	r3, [sp, #32]
 8007ad0:	2f00      	cmp	r7, #0
 8007ad2:	db39      	blt.n	8007b48 <_dtoa_r+0x218>
 8007ad4:	9b08      	ldr	r3, [sp, #32]
 8007ad6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007ad8:	443b      	add	r3, r7
 8007ada:	9308      	str	r3, [sp, #32]
 8007adc:	2300      	movs	r3, #0
 8007ade:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ae0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ae2:	2b09      	cmp	r3, #9
 8007ae4:	d864      	bhi.n	8007bb0 <_dtoa_r+0x280>
 8007ae6:	2b05      	cmp	r3, #5
 8007ae8:	bfc4      	itt	gt
 8007aea:	3b04      	subgt	r3, #4
 8007aec:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007aee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007af0:	f1a3 0302 	sub.w	r3, r3, #2
 8007af4:	bfcc      	ite	gt
 8007af6:	2400      	movgt	r4, #0
 8007af8:	2401      	movle	r4, #1
 8007afa:	2b03      	cmp	r3, #3
 8007afc:	d863      	bhi.n	8007bc6 <_dtoa_r+0x296>
 8007afe:	e8df f003 	tbb	[pc, r3]
 8007b02:	372a      	.short	0x372a
 8007b04:	5535      	.short	0x5535
 8007b06:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007b0a:	441e      	add	r6, r3
 8007b0c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007b10:	2b20      	cmp	r3, #32
 8007b12:	bfc1      	itttt	gt
 8007b14:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007b18:	409f      	lslgt	r7, r3
 8007b1a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007b1e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007b22:	bfd6      	itet	le
 8007b24:	f1c3 0320 	rsble	r3, r3, #32
 8007b28:	ea47 0003 	orrgt.w	r0, r7, r3
 8007b2c:	fa04 f003 	lslle.w	r0, r4, r3
 8007b30:	f7f8 fcf8 	bl	8000524 <__aeabi_ui2d>
 8007b34:	2201      	movs	r2, #1
 8007b36:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007b3a:	3e01      	subs	r6, #1
 8007b3c:	9214      	str	r2, [sp, #80]	@ 0x50
 8007b3e:	e777      	b.n	8007a30 <_dtoa_r+0x100>
 8007b40:	2301      	movs	r3, #1
 8007b42:	e7b8      	b.n	8007ab6 <_dtoa_r+0x186>
 8007b44:	9012      	str	r0, [sp, #72]	@ 0x48
 8007b46:	e7b7      	b.n	8007ab8 <_dtoa_r+0x188>
 8007b48:	427b      	negs	r3, r7
 8007b4a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	eba8 0807 	sub.w	r8, r8, r7
 8007b52:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007b54:	e7c4      	b.n	8007ae0 <_dtoa_r+0x1b0>
 8007b56:	2300      	movs	r3, #0
 8007b58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	dc35      	bgt.n	8007bcc <_dtoa_r+0x29c>
 8007b60:	2301      	movs	r3, #1
 8007b62:	9300      	str	r3, [sp, #0]
 8007b64:	9307      	str	r3, [sp, #28]
 8007b66:	461a      	mov	r2, r3
 8007b68:	920e      	str	r2, [sp, #56]	@ 0x38
 8007b6a:	e00b      	b.n	8007b84 <_dtoa_r+0x254>
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	e7f3      	b.n	8007b58 <_dtoa_r+0x228>
 8007b70:	2300      	movs	r3, #0
 8007b72:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b76:	18fb      	adds	r3, r7, r3
 8007b78:	9300      	str	r3, [sp, #0]
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	9307      	str	r3, [sp, #28]
 8007b80:	bfb8      	it	lt
 8007b82:	2301      	movlt	r3, #1
 8007b84:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007b88:	2100      	movs	r1, #0
 8007b8a:	2204      	movs	r2, #4
 8007b8c:	f102 0514 	add.w	r5, r2, #20
 8007b90:	429d      	cmp	r5, r3
 8007b92:	d91f      	bls.n	8007bd4 <_dtoa_r+0x2a4>
 8007b94:	6041      	str	r1, [r0, #4]
 8007b96:	4658      	mov	r0, fp
 8007b98:	f000 fcd8 	bl	800854c <_Balloc>
 8007b9c:	4682      	mov	sl, r0
 8007b9e:	2800      	cmp	r0, #0
 8007ba0:	d13c      	bne.n	8007c1c <_dtoa_r+0x2ec>
 8007ba2:	4b1b      	ldr	r3, [pc, #108]	@ (8007c10 <_dtoa_r+0x2e0>)
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	f240 11af 	movw	r1, #431	@ 0x1af
 8007baa:	e6d8      	b.n	800795e <_dtoa_r+0x2e>
 8007bac:	2301      	movs	r3, #1
 8007bae:	e7e0      	b.n	8007b72 <_dtoa_r+0x242>
 8007bb0:	2401      	movs	r4, #1
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bb6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8007bbc:	9300      	str	r3, [sp, #0]
 8007bbe:	9307      	str	r3, [sp, #28]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	2312      	movs	r3, #18
 8007bc4:	e7d0      	b.n	8007b68 <_dtoa_r+0x238>
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007bca:	e7f5      	b.n	8007bb8 <_dtoa_r+0x288>
 8007bcc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007bce:	9300      	str	r3, [sp, #0]
 8007bd0:	9307      	str	r3, [sp, #28]
 8007bd2:	e7d7      	b.n	8007b84 <_dtoa_r+0x254>
 8007bd4:	3101      	adds	r1, #1
 8007bd6:	0052      	lsls	r2, r2, #1
 8007bd8:	e7d8      	b.n	8007b8c <_dtoa_r+0x25c>
 8007bda:	bf00      	nop
 8007bdc:	f3af 8000 	nop.w
 8007be0:	636f4361 	.word	0x636f4361
 8007be4:	3fd287a7 	.word	0x3fd287a7
 8007be8:	8b60c8b3 	.word	0x8b60c8b3
 8007bec:	3fc68a28 	.word	0x3fc68a28
 8007bf0:	509f79fb 	.word	0x509f79fb
 8007bf4:	3fd34413 	.word	0x3fd34413
 8007bf8:	08009985 	.word	0x08009985
 8007bfc:	0800999c 	.word	0x0800999c
 8007c00:	7ff00000 	.word	0x7ff00000
 8007c04:	08009955 	.word	0x08009955
 8007c08:	3ff80000 	.word	0x3ff80000
 8007c0c:	08009a98 	.word	0x08009a98
 8007c10:	080099f4 	.word	0x080099f4
 8007c14:	08009981 	.word	0x08009981
 8007c18:	08009954 	.word	0x08009954
 8007c1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007c20:	6018      	str	r0, [r3, #0]
 8007c22:	9b07      	ldr	r3, [sp, #28]
 8007c24:	2b0e      	cmp	r3, #14
 8007c26:	f200 80a4 	bhi.w	8007d72 <_dtoa_r+0x442>
 8007c2a:	2c00      	cmp	r4, #0
 8007c2c:	f000 80a1 	beq.w	8007d72 <_dtoa_r+0x442>
 8007c30:	2f00      	cmp	r7, #0
 8007c32:	dd33      	ble.n	8007c9c <_dtoa_r+0x36c>
 8007c34:	4bad      	ldr	r3, [pc, #692]	@ (8007eec <_dtoa_r+0x5bc>)
 8007c36:	f007 020f 	and.w	r2, r7, #15
 8007c3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c3e:	ed93 7b00 	vldr	d7, [r3]
 8007c42:	05f8      	lsls	r0, r7, #23
 8007c44:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007c48:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007c4c:	d516      	bpl.n	8007c7c <_dtoa_r+0x34c>
 8007c4e:	4ba8      	ldr	r3, [pc, #672]	@ (8007ef0 <_dtoa_r+0x5c0>)
 8007c50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007c58:	f7f8 fe08 	bl	800086c <__aeabi_ddiv>
 8007c5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c60:	f004 040f 	and.w	r4, r4, #15
 8007c64:	2603      	movs	r6, #3
 8007c66:	4da2      	ldr	r5, [pc, #648]	@ (8007ef0 <_dtoa_r+0x5c0>)
 8007c68:	b954      	cbnz	r4, 8007c80 <_dtoa_r+0x350>
 8007c6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c72:	f7f8 fdfb 	bl	800086c <__aeabi_ddiv>
 8007c76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c7a:	e028      	b.n	8007cce <_dtoa_r+0x39e>
 8007c7c:	2602      	movs	r6, #2
 8007c7e:	e7f2      	b.n	8007c66 <_dtoa_r+0x336>
 8007c80:	07e1      	lsls	r1, r4, #31
 8007c82:	d508      	bpl.n	8007c96 <_dtoa_r+0x366>
 8007c84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c88:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007c8c:	f7f8 fcc4 	bl	8000618 <__aeabi_dmul>
 8007c90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c94:	3601      	adds	r6, #1
 8007c96:	1064      	asrs	r4, r4, #1
 8007c98:	3508      	adds	r5, #8
 8007c9a:	e7e5      	b.n	8007c68 <_dtoa_r+0x338>
 8007c9c:	f000 80d2 	beq.w	8007e44 <_dtoa_r+0x514>
 8007ca0:	427c      	negs	r4, r7
 8007ca2:	4b92      	ldr	r3, [pc, #584]	@ (8007eec <_dtoa_r+0x5bc>)
 8007ca4:	4d92      	ldr	r5, [pc, #584]	@ (8007ef0 <_dtoa_r+0x5c0>)
 8007ca6:	f004 020f 	and.w	r2, r4, #15
 8007caa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007cb6:	f7f8 fcaf 	bl	8000618 <__aeabi_dmul>
 8007cba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007cbe:	1124      	asrs	r4, r4, #4
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	2602      	movs	r6, #2
 8007cc4:	2c00      	cmp	r4, #0
 8007cc6:	f040 80b2 	bne.w	8007e2e <_dtoa_r+0x4fe>
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d1d3      	bne.n	8007c76 <_dtoa_r+0x346>
 8007cce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007cd0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	f000 80b7 	beq.w	8007e48 <_dtoa_r+0x518>
 8007cda:	4b86      	ldr	r3, [pc, #536]	@ (8007ef4 <_dtoa_r+0x5c4>)
 8007cdc:	2200      	movs	r2, #0
 8007cde:	4620      	mov	r0, r4
 8007ce0:	4629      	mov	r1, r5
 8007ce2:	f7f8 ff0b 	bl	8000afc <__aeabi_dcmplt>
 8007ce6:	2800      	cmp	r0, #0
 8007ce8:	f000 80ae 	beq.w	8007e48 <_dtoa_r+0x518>
 8007cec:	9b07      	ldr	r3, [sp, #28]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	f000 80aa 	beq.w	8007e48 <_dtoa_r+0x518>
 8007cf4:	9b00      	ldr	r3, [sp, #0]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	dd37      	ble.n	8007d6a <_dtoa_r+0x43a>
 8007cfa:	1e7b      	subs	r3, r7, #1
 8007cfc:	9304      	str	r3, [sp, #16]
 8007cfe:	4620      	mov	r0, r4
 8007d00:	4b7d      	ldr	r3, [pc, #500]	@ (8007ef8 <_dtoa_r+0x5c8>)
 8007d02:	2200      	movs	r2, #0
 8007d04:	4629      	mov	r1, r5
 8007d06:	f7f8 fc87 	bl	8000618 <__aeabi_dmul>
 8007d0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d0e:	9c00      	ldr	r4, [sp, #0]
 8007d10:	3601      	adds	r6, #1
 8007d12:	4630      	mov	r0, r6
 8007d14:	f7f8 fc16 	bl	8000544 <__aeabi_i2d>
 8007d18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d1c:	f7f8 fc7c 	bl	8000618 <__aeabi_dmul>
 8007d20:	4b76      	ldr	r3, [pc, #472]	@ (8007efc <_dtoa_r+0x5cc>)
 8007d22:	2200      	movs	r2, #0
 8007d24:	f7f8 fac2 	bl	80002ac <__adddf3>
 8007d28:	4605      	mov	r5, r0
 8007d2a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007d2e:	2c00      	cmp	r4, #0
 8007d30:	f040 808d 	bne.w	8007e4e <_dtoa_r+0x51e>
 8007d34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d38:	4b71      	ldr	r3, [pc, #452]	@ (8007f00 <_dtoa_r+0x5d0>)
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	f7f8 fab4 	bl	80002a8 <__aeabi_dsub>
 8007d40:	4602      	mov	r2, r0
 8007d42:	460b      	mov	r3, r1
 8007d44:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007d48:	462a      	mov	r2, r5
 8007d4a:	4633      	mov	r3, r6
 8007d4c:	f7f8 fef4 	bl	8000b38 <__aeabi_dcmpgt>
 8007d50:	2800      	cmp	r0, #0
 8007d52:	f040 828b 	bne.w	800826c <_dtoa_r+0x93c>
 8007d56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d5a:	462a      	mov	r2, r5
 8007d5c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007d60:	f7f8 fecc 	bl	8000afc <__aeabi_dcmplt>
 8007d64:	2800      	cmp	r0, #0
 8007d66:	f040 8128 	bne.w	8007fba <_dtoa_r+0x68a>
 8007d6a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007d6e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007d72:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	f2c0 815a 	blt.w	800802e <_dtoa_r+0x6fe>
 8007d7a:	2f0e      	cmp	r7, #14
 8007d7c:	f300 8157 	bgt.w	800802e <_dtoa_r+0x6fe>
 8007d80:	4b5a      	ldr	r3, [pc, #360]	@ (8007eec <_dtoa_r+0x5bc>)
 8007d82:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007d86:	ed93 7b00 	vldr	d7, [r3]
 8007d8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	ed8d 7b00 	vstr	d7, [sp]
 8007d92:	da03      	bge.n	8007d9c <_dtoa_r+0x46c>
 8007d94:	9b07      	ldr	r3, [sp, #28]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	f340 8101 	ble.w	8007f9e <_dtoa_r+0x66e>
 8007d9c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007da0:	4656      	mov	r6, sl
 8007da2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007da6:	4620      	mov	r0, r4
 8007da8:	4629      	mov	r1, r5
 8007daa:	f7f8 fd5f 	bl	800086c <__aeabi_ddiv>
 8007dae:	f7f8 fee3 	bl	8000b78 <__aeabi_d2iz>
 8007db2:	4680      	mov	r8, r0
 8007db4:	f7f8 fbc6 	bl	8000544 <__aeabi_i2d>
 8007db8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007dbc:	f7f8 fc2c 	bl	8000618 <__aeabi_dmul>
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	460b      	mov	r3, r1
 8007dc4:	4620      	mov	r0, r4
 8007dc6:	4629      	mov	r1, r5
 8007dc8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007dcc:	f7f8 fa6c 	bl	80002a8 <__aeabi_dsub>
 8007dd0:	f806 4b01 	strb.w	r4, [r6], #1
 8007dd4:	9d07      	ldr	r5, [sp, #28]
 8007dd6:	eba6 040a 	sub.w	r4, r6, sl
 8007dda:	42a5      	cmp	r5, r4
 8007ddc:	4602      	mov	r2, r0
 8007dde:	460b      	mov	r3, r1
 8007de0:	f040 8117 	bne.w	8008012 <_dtoa_r+0x6e2>
 8007de4:	f7f8 fa62 	bl	80002ac <__adddf3>
 8007de8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007dec:	4604      	mov	r4, r0
 8007dee:	460d      	mov	r5, r1
 8007df0:	f7f8 fea2 	bl	8000b38 <__aeabi_dcmpgt>
 8007df4:	2800      	cmp	r0, #0
 8007df6:	f040 80f9 	bne.w	8007fec <_dtoa_r+0x6bc>
 8007dfa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007dfe:	4620      	mov	r0, r4
 8007e00:	4629      	mov	r1, r5
 8007e02:	f7f8 fe71 	bl	8000ae8 <__aeabi_dcmpeq>
 8007e06:	b118      	cbz	r0, 8007e10 <_dtoa_r+0x4e0>
 8007e08:	f018 0f01 	tst.w	r8, #1
 8007e0c:	f040 80ee 	bne.w	8007fec <_dtoa_r+0x6bc>
 8007e10:	4649      	mov	r1, r9
 8007e12:	4658      	mov	r0, fp
 8007e14:	f000 fbda 	bl	80085cc <_Bfree>
 8007e18:	2300      	movs	r3, #0
 8007e1a:	7033      	strb	r3, [r6, #0]
 8007e1c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007e1e:	3701      	adds	r7, #1
 8007e20:	601f      	str	r7, [r3, #0]
 8007e22:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	f000 831d 	beq.w	8008464 <_dtoa_r+0xb34>
 8007e2a:	601e      	str	r6, [r3, #0]
 8007e2c:	e31a      	b.n	8008464 <_dtoa_r+0xb34>
 8007e2e:	07e2      	lsls	r2, r4, #31
 8007e30:	d505      	bpl.n	8007e3e <_dtoa_r+0x50e>
 8007e32:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007e36:	f7f8 fbef 	bl	8000618 <__aeabi_dmul>
 8007e3a:	3601      	adds	r6, #1
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	1064      	asrs	r4, r4, #1
 8007e40:	3508      	adds	r5, #8
 8007e42:	e73f      	b.n	8007cc4 <_dtoa_r+0x394>
 8007e44:	2602      	movs	r6, #2
 8007e46:	e742      	b.n	8007cce <_dtoa_r+0x39e>
 8007e48:	9c07      	ldr	r4, [sp, #28]
 8007e4a:	9704      	str	r7, [sp, #16]
 8007e4c:	e761      	b.n	8007d12 <_dtoa_r+0x3e2>
 8007e4e:	4b27      	ldr	r3, [pc, #156]	@ (8007eec <_dtoa_r+0x5bc>)
 8007e50:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007e52:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007e56:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007e5a:	4454      	add	r4, sl
 8007e5c:	2900      	cmp	r1, #0
 8007e5e:	d053      	beq.n	8007f08 <_dtoa_r+0x5d8>
 8007e60:	4928      	ldr	r1, [pc, #160]	@ (8007f04 <_dtoa_r+0x5d4>)
 8007e62:	2000      	movs	r0, #0
 8007e64:	f7f8 fd02 	bl	800086c <__aeabi_ddiv>
 8007e68:	4633      	mov	r3, r6
 8007e6a:	462a      	mov	r2, r5
 8007e6c:	f7f8 fa1c 	bl	80002a8 <__aeabi_dsub>
 8007e70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007e74:	4656      	mov	r6, sl
 8007e76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e7a:	f7f8 fe7d 	bl	8000b78 <__aeabi_d2iz>
 8007e7e:	4605      	mov	r5, r0
 8007e80:	f7f8 fb60 	bl	8000544 <__aeabi_i2d>
 8007e84:	4602      	mov	r2, r0
 8007e86:	460b      	mov	r3, r1
 8007e88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e8c:	f7f8 fa0c 	bl	80002a8 <__aeabi_dsub>
 8007e90:	3530      	adds	r5, #48	@ 0x30
 8007e92:	4602      	mov	r2, r0
 8007e94:	460b      	mov	r3, r1
 8007e96:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007e9a:	f806 5b01 	strb.w	r5, [r6], #1
 8007e9e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007ea2:	f7f8 fe2b 	bl	8000afc <__aeabi_dcmplt>
 8007ea6:	2800      	cmp	r0, #0
 8007ea8:	d171      	bne.n	8007f8e <_dtoa_r+0x65e>
 8007eaa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007eae:	4911      	ldr	r1, [pc, #68]	@ (8007ef4 <_dtoa_r+0x5c4>)
 8007eb0:	2000      	movs	r0, #0
 8007eb2:	f7f8 f9f9 	bl	80002a8 <__aeabi_dsub>
 8007eb6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007eba:	f7f8 fe1f 	bl	8000afc <__aeabi_dcmplt>
 8007ebe:	2800      	cmp	r0, #0
 8007ec0:	f040 8095 	bne.w	8007fee <_dtoa_r+0x6be>
 8007ec4:	42a6      	cmp	r6, r4
 8007ec6:	f43f af50 	beq.w	8007d6a <_dtoa_r+0x43a>
 8007eca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007ece:	4b0a      	ldr	r3, [pc, #40]	@ (8007ef8 <_dtoa_r+0x5c8>)
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	f7f8 fba1 	bl	8000618 <__aeabi_dmul>
 8007ed6:	4b08      	ldr	r3, [pc, #32]	@ (8007ef8 <_dtoa_r+0x5c8>)
 8007ed8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007edc:	2200      	movs	r2, #0
 8007ede:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ee2:	f7f8 fb99 	bl	8000618 <__aeabi_dmul>
 8007ee6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007eea:	e7c4      	b.n	8007e76 <_dtoa_r+0x546>
 8007eec:	08009a98 	.word	0x08009a98
 8007ef0:	08009a70 	.word	0x08009a70
 8007ef4:	3ff00000 	.word	0x3ff00000
 8007ef8:	40240000 	.word	0x40240000
 8007efc:	401c0000 	.word	0x401c0000
 8007f00:	40140000 	.word	0x40140000
 8007f04:	3fe00000 	.word	0x3fe00000
 8007f08:	4631      	mov	r1, r6
 8007f0a:	4628      	mov	r0, r5
 8007f0c:	f7f8 fb84 	bl	8000618 <__aeabi_dmul>
 8007f10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007f14:	9415      	str	r4, [sp, #84]	@ 0x54
 8007f16:	4656      	mov	r6, sl
 8007f18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f1c:	f7f8 fe2c 	bl	8000b78 <__aeabi_d2iz>
 8007f20:	4605      	mov	r5, r0
 8007f22:	f7f8 fb0f 	bl	8000544 <__aeabi_i2d>
 8007f26:	4602      	mov	r2, r0
 8007f28:	460b      	mov	r3, r1
 8007f2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f2e:	f7f8 f9bb 	bl	80002a8 <__aeabi_dsub>
 8007f32:	3530      	adds	r5, #48	@ 0x30
 8007f34:	f806 5b01 	strb.w	r5, [r6], #1
 8007f38:	4602      	mov	r2, r0
 8007f3a:	460b      	mov	r3, r1
 8007f3c:	42a6      	cmp	r6, r4
 8007f3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007f42:	f04f 0200 	mov.w	r2, #0
 8007f46:	d124      	bne.n	8007f92 <_dtoa_r+0x662>
 8007f48:	4bac      	ldr	r3, [pc, #688]	@ (80081fc <_dtoa_r+0x8cc>)
 8007f4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007f4e:	f7f8 f9ad 	bl	80002ac <__adddf3>
 8007f52:	4602      	mov	r2, r0
 8007f54:	460b      	mov	r3, r1
 8007f56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f5a:	f7f8 fded 	bl	8000b38 <__aeabi_dcmpgt>
 8007f5e:	2800      	cmp	r0, #0
 8007f60:	d145      	bne.n	8007fee <_dtoa_r+0x6be>
 8007f62:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007f66:	49a5      	ldr	r1, [pc, #660]	@ (80081fc <_dtoa_r+0x8cc>)
 8007f68:	2000      	movs	r0, #0
 8007f6a:	f7f8 f99d 	bl	80002a8 <__aeabi_dsub>
 8007f6e:	4602      	mov	r2, r0
 8007f70:	460b      	mov	r3, r1
 8007f72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f76:	f7f8 fdc1 	bl	8000afc <__aeabi_dcmplt>
 8007f7a:	2800      	cmp	r0, #0
 8007f7c:	f43f aef5 	beq.w	8007d6a <_dtoa_r+0x43a>
 8007f80:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007f82:	1e73      	subs	r3, r6, #1
 8007f84:	9315      	str	r3, [sp, #84]	@ 0x54
 8007f86:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007f8a:	2b30      	cmp	r3, #48	@ 0x30
 8007f8c:	d0f8      	beq.n	8007f80 <_dtoa_r+0x650>
 8007f8e:	9f04      	ldr	r7, [sp, #16]
 8007f90:	e73e      	b.n	8007e10 <_dtoa_r+0x4e0>
 8007f92:	4b9b      	ldr	r3, [pc, #620]	@ (8008200 <_dtoa_r+0x8d0>)
 8007f94:	f7f8 fb40 	bl	8000618 <__aeabi_dmul>
 8007f98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f9c:	e7bc      	b.n	8007f18 <_dtoa_r+0x5e8>
 8007f9e:	d10c      	bne.n	8007fba <_dtoa_r+0x68a>
 8007fa0:	4b98      	ldr	r3, [pc, #608]	@ (8008204 <_dtoa_r+0x8d4>)
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007fa8:	f7f8 fb36 	bl	8000618 <__aeabi_dmul>
 8007fac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007fb0:	f7f8 fdb8 	bl	8000b24 <__aeabi_dcmpge>
 8007fb4:	2800      	cmp	r0, #0
 8007fb6:	f000 8157 	beq.w	8008268 <_dtoa_r+0x938>
 8007fba:	2400      	movs	r4, #0
 8007fbc:	4625      	mov	r5, r4
 8007fbe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007fc0:	43db      	mvns	r3, r3
 8007fc2:	9304      	str	r3, [sp, #16]
 8007fc4:	4656      	mov	r6, sl
 8007fc6:	2700      	movs	r7, #0
 8007fc8:	4621      	mov	r1, r4
 8007fca:	4658      	mov	r0, fp
 8007fcc:	f000 fafe 	bl	80085cc <_Bfree>
 8007fd0:	2d00      	cmp	r5, #0
 8007fd2:	d0dc      	beq.n	8007f8e <_dtoa_r+0x65e>
 8007fd4:	b12f      	cbz	r7, 8007fe2 <_dtoa_r+0x6b2>
 8007fd6:	42af      	cmp	r7, r5
 8007fd8:	d003      	beq.n	8007fe2 <_dtoa_r+0x6b2>
 8007fda:	4639      	mov	r1, r7
 8007fdc:	4658      	mov	r0, fp
 8007fde:	f000 faf5 	bl	80085cc <_Bfree>
 8007fe2:	4629      	mov	r1, r5
 8007fe4:	4658      	mov	r0, fp
 8007fe6:	f000 faf1 	bl	80085cc <_Bfree>
 8007fea:	e7d0      	b.n	8007f8e <_dtoa_r+0x65e>
 8007fec:	9704      	str	r7, [sp, #16]
 8007fee:	4633      	mov	r3, r6
 8007ff0:	461e      	mov	r6, r3
 8007ff2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007ff6:	2a39      	cmp	r2, #57	@ 0x39
 8007ff8:	d107      	bne.n	800800a <_dtoa_r+0x6da>
 8007ffa:	459a      	cmp	sl, r3
 8007ffc:	d1f8      	bne.n	8007ff0 <_dtoa_r+0x6c0>
 8007ffe:	9a04      	ldr	r2, [sp, #16]
 8008000:	3201      	adds	r2, #1
 8008002:	9204      	str	r2, [sp, #16]
 8008004:	2230      	movs	r2, #48	@ 0x30
 8008006:	f88a 2000 	strb.w	r2, [sl]
 800800a:	781a      	ldrb	r2, [r3, #0]
 800800c:	3201      	adds	r2, #1
 800800e:	701a      	strb	r2, [r3, #0]
 8008010:	e7bd      	b.n	8007f8e <_dtoa_r+0x65e>
 8008012:	4b7b      	ldr	r3, [pc, #492]	@ (8008200 <_dtoa_r+0x8d0>)
 8008014:	2200      	movs	r2, #0
 8008016:	f7f8 faff 	bl	8000618 <__aeabi_dmul>
 800801a:	2200      	movs	r2, #0
 800801c:	2300      	movs	r3, #0
 800801e:	4604      	mov	r4, r0
 8008020:	460d      	mov	r5, r1
 8008022:	f7f8 fd61 	bl	8000ae8 <__aeabi_dcmpeq>
 8008026:	2800      	cmp	r0, #0
 8008028:	f43f aebb 	beq.w	8007da2 <_dtoa_r+0x472>
 800802c:	e6f0      	b.n	8007e10 <_dtoa_r+0x4e0>
 800802e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008030:	2a00      	cmp	r2, #0
 8008032:	f000 80db 	beq.w	80081ec <_dtoa_r+0x8bc>
 8008036:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008038:	2a01      	cmp	r2, #1
 800803a:	f300 80bf 	bgt.w	80081bc <_dtoa_r+0x88c>
 800803e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008040:	2a00      	cmp	r2, #0
 8008042:	f000 80b7 	beq.w	80081b4 <_dtoa_r+0x884>
 8008046:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800804a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800804c:	4646      	mov	r6, r8
 800804e:	9a08      	ldr	r2, [sp, #32]
 8008050:	2101      	movs	r1, #1
 8008052:	441a      	add	r2, r3
 8008054:	4658      	mov	r0, fp
 8008056:	4498      	add	r8, r3
 8008058:	9208      	str	r2, [sp, #32]
 800805a:	f000 fb6b 	bl	8008734 <__i2b>
 800805e:	4605      	mov	r5, r0
 8008060:	b15e      	cbz	r6, 800807a <_dtoa_r+0x74a>
 8008062:	9b08      	ldr	r3, [sp, #32]
 8008064:	2b00      	cmp	r3, #0
 8008066:	dd08      	ble.n	800807a <_dtoa_r+0x74a>
 8008068:	42b3      	cmp	r3, r6
 800806a:	9a08      	ldr	r2, [sp, #32]
 800806c:	bfa8      	it	ge
 800806e:	4633      	movge	r3, r6
 8008070:	eba8 0803 	sub.w	r8, r8, r3
 8008074:	1af6      	subs	r6, r6, r3
 8008076:	1ad3      	subs	r3, r2, r3
 8008078:	9308      	str	r3, [sp, #32]
 800807a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800807c:	b1f3      	cbz	r3, 80080bc <_dtoa_r+0x78c>
 800807e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008080:	2b00      	cmp	r3, #0
 8008082:	f000 80b7 	beq.w	80081f4 <_dtoa_r+0x8c4>
 8008086:	b18c      	cbz	r4, 80080ac <_dtoa_r+0x77c>
 8008088:	4629      	mov	r1, r5
 800808a:	4622      	mov	r2, r4
 800808c:	4658      	mov	r0, fp
 800808e:	f000 fc11 	bl	80088b4 <__pow5mult>
 8008092:	464a      	mov	r2, r9
 8008094:	4601      	mov	r1, r0
 8008096:	4605      	mov	r5, r0
 8008098:	4658      	mov	r0, fp
 800809a:	f000 fb61 	bl	8008760 <__multiply>
 800809e:	4649      	mov	r1, r9
 80080a0:	9004      	str	r0, [sp, #16]
 80080a2:	4658      	mov	r0, fp
 80080a4:	f000 fa92 	bl	80085cc <_Bfree>
 80080a8:	9b04      	ldr	r3, [sp, #16]
 80080aa:	4699      	mov	r9, r3
 80080ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80080ae:	1b1a      	subs	r2, r3, r4
 80080b0:	d004      	beq.n	80080bc <_dtoa_r+0x78c>
 80080b2:	4649      	mov	r1, r9
 80080b4:	4658      	mov	r0, fp
 80080b6:	f000 fbfd 	bl	80088b4 <__pow5mult>
 80080ba:	4681      	mov	r9, r0
 80080bc:	2101      	movs	r1, #1
 80080be:	4658      	mov	r0, fp
 80080c0:	f000 fb38 	bl	8008734 <__i2b>
 80080c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80080c6:	4604      	mov	r4, r0
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	f000 81cf 	beq.w	800846c <_dtoa_r+0xb3c>
 80080ce:	461a      	mov	r2, r3
 80080d0:	4601      	mov	r1, r0
 80080d2:	4658      	mov	r0, fp
 80080d4:	f000 fbee 	bl	80088b4 <__pow5mult>
 80080d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080da:	2b01      	cmp	r3, #1
 80080dc:	4604      	mov	r4, r0
 80080de:	f300 8095 	bgt.w	800820c <_dtoa_r+0x8dc>
 80080e2:	9b02      	ldr	r3, [sp, #8]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	f040 8087 	bne.w	80081f8 <_dtoa_r+0x8c8>
 80080ea:	9b03      	ldr	r3, [sp, #12]
 80080ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	f040 8089 	bne.w	8008208 <_dtoa_r+0x8d8>
 80080f6:	9b03      	ldr	r3, [sp, #12]
 80080f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80080fc:	0d1b      	lsrs	r3, r3, #20
 80080fe:	051b      	lsls	r3, r3, #20
 8008100:	b12b      	cbz	r3, 800810e <_dtoa_r+0x7de>
 8008102:	9b08      	ldr	r3, [sp, #32]
 8008104:	3301      	adds	r3, #1
 8008106:	9308      	str	r3, [sp, #32]
 8008108:	f108 0801 	add.w	r8, r8, #1
 800810c:	2301      	movs	r3, #1
 800810e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008110:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008112:	2b00      	cmp	r3, #0
 8008114:	f000 81b0 	beq.w	8008478 <_dtoa_r+0xb48>
 8008118:	6923      	ldr	r3, [r4, #16]
 800811a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800811e:	6918      	ldr	r0, [r3, #16]
 8008120:	f000 fabc 	bl	800869c <__hi0bits>
 8008124:	f1c0 0020 	rsb	r0, r0, #32
 8008128:	9b08      	ldr	r3, [sp, #32]
 800812a:	4418      	add	r0, r3
 800812c:	f010 001f 	ands.w	r0, r0, #31
 8008130:	d077      	beq.n	8008222 <_dtoa_r+0x8f2>
 8008132:	f1c0 0320 	rsb	r3, r0, #32
 8008136:	2b04      	cmp	r3, #4
 8008138:	dd6b      	ble.n	8008212 <_dtoa_r+0x8e2>
 800813a:	9b08      	ldr	r3, [sp, #32]
 800813c:	f1c0 001c 	rsb	r0, r0, #28
 8008140:	4403      	add	r3, r0
 8008142:	4480      	add	r8, r0
 8008144:	4406      	add	r6, r0
 8008146:	9308      	str	r3, [sp, #32]
 8008148:	f1b8 0f00 	cmp.w	r8, #0
 800814c:	dd05      	ble.n	800815a <_dtoa_r+0x82a>
 800814e:	4649      	mov	r1, r9
 8008150:	4642      	mov	r2, r8
 8008152:	4658      	mov	r0, fp
 8008154:	f000 fc08 	bl	8008968 <__lshift>
 8008158:	4681      	mov	r9, r0
 800815a:	9b08      	ldr	r3, [sp, #32]
 800815c:	2b00      	cmp	r3, #0
 800815e:	dd05      	ble.n	800816c <_dtoa_r+0x83c>
 8008160:	4621      	mov	r1, r4
 8008162:	461a      	mov	r2, r3
 8008164:	4658      	mov	r0, fp
 8008166:	f000 fbff 	bl	8008968 <__lshift>
 800816a:	4604      	mov	r4, r0
 800816c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800816e:	2b00      	cmp	r3, #0
 8008170:	d059      	beq.n	8008226 <_dtoa_r+0x8f6>
 8008172:	4621      	mov	r1, r4
 8008174:	4648      	mov	r0, r9
 8008176:	f000 fc63 	bl	8008a40 <__mcmp>
 800817a:	2800      	cmp	r0, #0
 800817c:	da53      	bge.n	8008226 <_dtoa_r+0x8f6>
 800817e:	1e7b      	subs	r3, r7, #1
 8008180:	9304      	str	r3, [sp, #16]
 8008182:	4649      	mov	r1, r9
 8008184:	2300      	movs	r3, #0
 8008186:	220a      	movs	r2, #10
 8008188:	4658      	mov	r0, fp
 800818a:	f000 fa41 	bl	8008610 <__multadd>
 800818e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008190:	4681      	mov	r9, r0
 8008192:	2b00      	cmp	r3, #0
 8008194:	f000 8172 	beq.w	800847c <_dtoa_r+0xb4c>
 8008198:	2300      	movs	r3, #0
 800819a:	4629      	mov	r1, r5
 800819c:	220a      	movs	r2, #10
 800819e:	4658      	mov	r0, fp
 80081a0:	f000 fa36 	bl	8008610 <__multadd>
 80081a4:	9b00      	ldr	r3, [sp, #0]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	4605      	mov	r5, r0
 80081aa:	dc67      	bgt.n	800827c <_dtoa_r+0x94c>
 80081ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081ae:	2b02      	cmp	r3, #2
 80081b0:	dc41      	bgt.n	8008236 <_dtoa_r+0x906>
 80081b2:	e063      	b.n	800827c <_dtoa_r+0x94c>
 80081b4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80081b6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80081ba:	e746      	b.n	800804a <_dtoa_r+0x71a>
 80081bc:	9b07      	ldr	r3, [sp, #28]
 80081be:	1e5c      	subs	r4, r3, #1
 80081c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081c2:	42a3      	cmp	r3, r4
 80081c4:	bfbf      	itttt	lt
 80081c6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80081c8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80081ca:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80081cc:	1ae3      	sublt	r3, r4, r3
 80081ce:	bfb4      	ite	lt
 80081d0:	18d2      	addlt	r2, r2, r3
 80081d2:	1b1c      	subge	r4, r3, r4
 80081d4:	9b07      	ldr	r3, [sp, #28]
 80081d6:	bfbc      	itt	lt
 80081d8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80081da:	2400      	movlt	r4, #0
 80081dc:	2b00      	cmp	r3, #0
 80081de:	bfb5      	itete	lt
 80081e0:	eba8 0603 	sublt.w	r6, r8, r3
 80081e4:	9b07      	ldrge	r3, [sp, #28]
 80081e6:	2300      	movlt	r3, #0
 80081e8:	4646      	movge	r6, r8
 80081ea:	e730      	b.n	800804e <_dtoa_r+0x71e>
 80081ec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80081ee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80081f0:	4646      	mov	r6, r8
 80081f2:	e735      	b.n	8008060 <_dtoa_r+0x730>
 80081f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80081f6:	e75c      	b.n	80080b2 <_dtoa_r+0x782>
 80081f8:	2300      	movs	r3, #0
 80081fa:	e788      	b.n	800810e <_dtoa_r+0x7de>
 80081fc:	3fe00000 	.word	0x3fe00000
 8008200:	40240000 	.word	0x40240000
 8008204:	40140000 	.word	0x40140000
 8008208:	9b02      	ldr	r3, [sp, #8]
 800820a:	e780      	b.n	800810e <_dtoa_r+0x7de>
 800820c:	2300      	movs	r3, #0
 800820e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008210:	e782      	b.n	8008118 <_dtoa_r+0x7e8>
 8008212:	d099      	beq.n	8008148 <_dtoa_r+0x818>
 8008214:	9a08      	ldr	r2, [sp, #32]
 8008216:	331c      	adds	r3, #28
 8008218:	441a      	add	r2, r3
 800821a:	4498      	add	r8, r3
 800821c:	441e      	add	r6, r3
 800821e:	9208      	str	r2, [sp, #32]
 8008220:	e792      	b.n	8008148 <_dtoa_r+0x818>
 8008222:	4603      	mov	r3, r0
 8008224:	e7f6      	b.n	8008214 <_dtoa_r+0x8e4>
 8008226:	9b07      	ldr	r3, [sp, #28]
 8008228:	9704      	str	r7, [sp, #16]
 800822a:	2b00      	cmp	r3, #0
 800822c:	dc20      	bgt.n	8008270 <_dtoa_r+0x940>
 800822e:	9300      	str	r3, [sp, #0]
 8008230:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008232:	2b02      	cmp	r3, #2
 8008234:	dd1e      	ble.n	8008274 <_dtoa_r+0x944>
 8008236:	9b00      	ldr	r3, [sp, #0]
 8008238:	2b00      	cmp	r3, #0
 800823a:	f47f aec0 	bne.w	8007fbe <_dtoa_r+0x68e>
 800823e:	4621      	mov	r1, r4
 8008240:	2205      	movs	r2, #5
 8008242:	4658      	mov	r0, fp
 8008244:	f000 f9e4 	bl	8008610 <__multadd>
 8008248:	4601      	mov	r1, r0
 800824a:	4604      	mov	r4, r0
 800824c:	4648      	mov	r0, r9
 800824e:	f000 fbf7 	bl	8008a40 <__mcmp>
 8008252:	2800      	cmp	r0, #0
 8008254:	f77f aeb3 	ble.w	8007fbe <_dtoa_r+0x68e>
 8008258:	4656      	mov	r6, sl
 800825a:	2331      	movs	r3, #49	@ 0x31
 800825c:	f806 3b01 	strb.w	r3, [r6], #1
 8008260:	9b04      	ldr	r3, [sp, #16]
 8008262:	3301      	adds	r3, #1
 8008264:	9304      	str	r3, [sp, #16]
 8008266:	e6ae      	b.n	8007fc6 <_dtoa_r+0x696>
 8008268:	9c07      	ldr	r4, [sp, #28]
 800826a:	9704      	str	r7, [sp, #16]
 800826c:	4625      	mov	r5, r4
 800826e:	e7f3      	b.n	8008258 <_dtoa_r+0x928>
 8008270:	9b07      	ldr	r3, [sp, #28]
 8008272:	9300      	str	r3, [sp, #0]
 8008274:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008276:	2b00      	cmp	r3, #0
 8008278:	f000 8104 	beq.w	8008484 <_dtoa_r+0xb54>
 800827c:	2e00      	cmp	r6, #0
 800827e:	dd05      	ble.n	800828c <_dtoa_r+0x95c>
 8008280:	4629      	mov	r1, r5
 8008282:	4632      	mov	r2, r6
 8008284:	4658      	mov	r0, fp
 8008286:	f000 fb6f 	bl	8008968 <__lshift>
 800828a:	4605      	mov	r5, r0
 800828c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800828e:	2b00      	cmp	r3, #0
 8008290:	d05a      	beq.n	8008348 <_dtoa_r+0xa18>
 8008292:	6869      	ldr	r1, [r5, #4]
 8008294:	4658      	mov	r0, fp
 8008296:	f000 f959 	bl	800854c <_Balloc>
 800829a:	4606      	mov	r6, r0
 800829c:	b928      	cbnz	r0, 80082aa <_dtoa_r+0x97a>
 800829e:	4b84      	ldr	r3, [pc, #528]	@ (80084b0 <_dtoa_r+0xb80>)
 80082a0:	4602      	mov	r2, r0
 80082a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80082a6:	f7ff bb5a 	b.w	800795e <_dtoa_r+0x2e>
 80082aa:	692a      	ldr	r2, [r5, #16]
 80082ac:	3202      	adds	r2, #2
 80082ae:	0092      	lsls	r2, r2, #2
 80082b0:	f105 010c 	add.w	r1, r5, #12
 80082b4:	300c      	adds	r0, #12
 80082b6:	f7ff faa4 	bl	8007802 <memcpy>
 80082ba:	2201      	movs	r2, #1
 80082bc:	4631      	mov	r1, r6
 80082be:	4658      	mov	r0, fp
 80082c0:	f000 fb52 	bl	8008968 <__lshift>
 80082c4:	f10a 0301 	add.w	r3, sl, #1
 80082c8:	9307      	str	r3, [sp, #28]
 80082ca:	9b00      	ldr	r3, [sp, #0]
 80082cc:	4453      	add	r3, sl
 80082ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 80082d0:	9b02      	ldr	r3, [sp, #8]
 80082d2:	f003 0301 	and.w	r3, r3, #1
 80082d6:	462f      	mov	r7, r5
 80082d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80082da:	4605      	mov	r5, r0
 80082dc:	9b07      	ldr	r3, [sp, #28]
 80082de:	4621      	mov	r1, r4
 80082e0:	3b01      	subs	r3, #1
 80082e2:	4648      	mov	r0, r9
 80082e4:	9300      	str	r3, [sp, #0]
 80082e6:	f7ff fa9a 	bl	800781e <quorem>
 80082ea:	4639      	mov	r1, r7
 80082ec:	9002      	str	r0, [sp, #8]
 80082ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80082f2:	4648      	mov	r0, r9
 80082f4:	f000 fba4 	bl	8008a40 <__mcmp>
 80082f8:	462a      	mov	r2, r5
 80082fa:	9008      	str	r0, [sp, #32]
 80082fc:	4621      	mov	r1, r4
 80082fe:	4658      	mov	r0, fp
 8008300:	f000 fbba 	bl	8008a78 <__mdiff>
 8008304:	68c2      	ldr	r2, [r0, #12]
 8008306:	4606      	mov	r6, r0
 8008308:	bb02      	cbnz	r2, 800834c <_dtoa_r+0xa1c>
 800830a:	4601      	mov	r1, r0
 800830c:	4648      	mov	r0, r9
 800830e:	f000 fb97 	bl	8008a40 <__mcmp>
 8008312:	4602      	mov	r2, r0
 8008314:	4631      	mov	r1, r6
 8008316:	4658      	mov	r0, fp
 8008318:	920e      	str	r2, [sp, #56]	@ 0x38
 800831a:	f000 f957 	bl	80085cc <_Bfree>
 800831e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008320:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008322:	9e07      	ldr	r6, [sp, #28]
 8008324:	ea43 0102 	orr.w	r1, r3, r2
 8008328:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800832a:	4319      	orrs	r1, r3
 800832c:	d110      	bne.n	8008350 <_dtoa_r+0xa20>
 800832e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008332:	d029      	beq.n	8008388 <_dtoa_r+0xa58>
 8008334:	9b08      	ldr	r3, [sp, #32]
 8008336:	2b00      	cmp	r3, #0
 8008338:	dd02      	ble.n	8008340 <_dtoa_r+0xa10>
 800833a:	9b02      	ldr	r3, [sp, #8]
 800833c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008340:	9b00      	ldr	r3, [sp, #0]
 8008342:	f883 8000 	strb.w	r8, [r3]
 8008346:	e63f      	b.n	8007fc8 <_dtoa_r+0x698>
 8008348:	4628      	mov	r0, r5
 800834a:	e7bb      	b.n	80082c4 <_dtoa_r+0x994>
 800834c:	2201      	movs	r2, #1
 800834e:	e7e1      	b.n	8008314 <_dtoa_r+0x9e4>
 8008350:	9b08      	ldr	r3, [sp, #32]
 8008352:	2b00      	cmp	r3, #0
 8008354:	db04      	blt.n	8008360 <_dtoa_r+0xa30>
 8008356:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008358:	430b      	orrs	r3, r1
 800835a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800835c:	430b      	orrs	r3, r1
 800835e:	d120      	bne.n	80083a2 <_dtoa_r+0xa72>
 8008360:	2a00      	cmp	r2, #0
 8008362:	dded      	ble.n	8008340 <_dtoa_r+0xa10>
 8008364:	4649      	mov	r1, r9
 8008366:	2201      	movs	r2, #1
 8008368:	4658      	mov	r0, fp
 800836a:	f000 fafd 	bl	8008968 <__lshift>
 800836e:	4621      	mov	r1, r4
 8008370:	4681      	mov	r9, r0
 8008372:	f000 fb65 	bl	8008a40 <__mcmp>
 8008376:	2800      	cmp	r0, #0
 8008378:	dc03      	bgt.n	8008382 <_dtoa_r+0xa52>
 800837a:	d1e1      	bne.n	8008340 <_dtoa_r+0xa10>
 800837c:	f018 0f01 	tst.w	r8, #1
 8008380:	d0de      	beq.n	8008340 <_dtoa_r+0xa10>
 8008382:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008386:	d1d8      	bne.n	800833a <_dtoa_r+0xa0a>
 8008388:	9a00      	ldr	r2, [sp, #0]
 800838a:	2339      	movs	r3, #57	@ 0x39
 800838c:	7013      	strb	r3, [r2, #0]
 800838e:	4633      	mov	r3, r6
 8008390:	461e      	mov	r6, r3
 8008392:	3b01      	subs	r3, #1
 8008394:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008398:	2a39      	cmp	r2, #57	@ 0x39
 800839a:	d052      	beq.n	8008442 <_dtoa_r+0xb12>
 800839c:	3201      	adds	r2, #1
 800839e:	701a      	strb	r2, [r3, #0]
 80083a0:	e612      	b.n	8007fc8 <_dtoa_r+0x698>
 80083a2:	2a00      	cmp	r2, #0
 80083a4:	dd07      	ble.n	80083b6 <_dtoa_r+0xa86>
 80083a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80083aa:	d0ed      	beq.n	8008388 <_dtoa_r+0xa58>
 80083ac:	9a00      	ldr	r2, [sp, #0]
 80083ae:	f108 0301 	add.w	r3, r8, #1
 80083b2:	7013      	strb	r3, [r2, #0]
 80083b4:	e608      	b.n	8007fc8 <_dtoa_r+0x698>
 80083b6:	9b07      	ldr	r3, [sp, #28]
 80083b8:	9a07      	ldr	r2, [sp, #28]
 80083ba:	f803 8c01 	strb.w	r8, [r3, #-1]
 80083be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d028      	beq.n	8008416 <_dtoa_r+0xae6>
 80083c4:	4649      	mov	r1, r9
 80083c6:	2300      	movs	r3, #0
 80083c8:	220a      	movs	r2, #10
 80083ca:	4658      	mov	r0, fp
 80083cc:	f000 f920 	bl	8008610 <__multadd>
 80083d0:	42af      	cmp	r7, r5
 80083d2:	4681      	mov	r9, r0
 80083d4:	f04f 0300 	mov.w	r3, #0
 80083d8:	f04f 020a 	mov.w	r2, #10
 80083dc:	4639      	mov	r1, r7
 80083de:	4658      	mov	r0, fp
 80083e0:	d107      	bne.n	80083f2 <_dtoa_r+0xac2>
 80083e2:	f000 f915 	bl	8008610 <__multadd>
 80083e6:	4607      	mov	r7, r0
 80083e8:	4605      	mov	r5, r0
 80083ea:	9b07      	ldr	r3, [sp, #28]
 80083ec:	3301      	adds	r3, #1
 80083ee:	9307      	str	r3, [sp, #28]
 80083f0:	e774      	b.n	80082dc <_dtoa_r+0x9ac>
 80083f2:	f000 f90d 	bl	8008610 <__multadd>
 80083f6:	4629      	mov	r1, r5
 80083f8:	4607      	mov	r7, r0
 80083fa:	2300      	movs	r3, #0
 80083fc:	220a      	movs	r2, #10
 80083fe:	4658      	mov	r0, fp
 8008400:	f000 f906 	bl	8008610 <__multadd>
 8008404:	4605      	mov	r5, r0
 8008406:	e7f0      	b.n	80083ea <_dtoa_r+0xaba>
 8008408:	9b00      	ldr	r3, [sp, #0]
 800840a:	2b00      	cmp	r3, #0
 800840c:	bfcc      	ite	gt
 800840e:	461e      	movgt	r6, r3
 8008410:	2601      	movle	r6, #1
 8008412:	4456      	add	r6, sl
 8008414:	2700      	movs	r7, #0
 8008416:	4649      	mov	r1, r9
 8008418:	2201      	movs	r2, #1
 800841a:	4658      	mov	r0, fp
 800841c:	f000 faa4 	bl	8008968 <__lshift>
 8008420:	4621      	mov	r1, r4
 8008422:	4681      	mov	r9, r0
 8008424:	f000 fb0c 	bl	8008a40 <__mcmp>
 8008428:	2800      	cmp	r0, #0
 800842a:	dcb0      	bgt.n	800838e <_dtoa_r+0xa5e>
 800842c:	d102      	bne.n	8008434 <_dtoa_r+0xb04>
 800842e:	f018 0f01 	tst.w	r8, #1
 8008432:	d1ac      	bne.n	800838e <_dtoa_r+0xa5e>
 8008434:	4633      	mov	r3, r6
 8008436:	461e      	mov	r6, r3
 8008438:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800843c:	2a30      	cmp	r2, #48	@ 0x30
 800843e:	d0fa      	beq.n	8008436 <_dtoa_r+0xb06>
 8008440:	e5c2      	b.n	8007fc8 <_dtoa_r+0x698>
 8008442:	459a      	cmp	sl, r3
 8008444:	d1a4      	bne.n	8008390 <_dtoa_r+0xa60>
 8008446:	9b04      	ldr	r3, [sp, #16]
 8008448:	3301      	adds	r3, #1
 800844a:	9304      	str	r3, [sp, #16]
 800844c:	2331      	movs	r3, #49	@ 0x31
 800844e:	f88a 3000 	strb.w	r3, [sl]
 8008452:	e5b9      	b.n	8007fc8 <_dtoa_r+0x698>
 8008454:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008456:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80084b4 <_dtoa_r+0xb84>
 800845a:	b11b      	cbz	r3, 8008464 <_dtoa_r+0xb34>
 800845c:	f10a 0308 	add.w	r3, sl, #8
 8008460:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008462:	6013      	str	r3, [r2, #0]
 8008464:	4650      	mov	r0, sl
 8008466:	b019      	add	sp, #100	@ 0x64
 8008468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800846c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800846e:	2b01      	cmp	r3, #1
 8008470:	f77f ae37 	ble.w	80080e2 <_dtoa_r+0x7b2>
 8008474:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008476:	930a      	str	r3, [sp, #40]	@ 0x28
 8008478:	2001      	movs	r0, #1
 800847a:	e655      	b.n	8008128 <_dtoa_r+0x7f8>
 800847c:	9b00      	ldr	r3, [sp, #0]
 800847e:	2b00      	cmp	r3, #0
 8008480:	f77f aed6 	ble.w	8008230 <_dtoa_r+0x900>
 8008484:	4656      	mov	r6, sl
 8008486:	4621      	mov	r1, r4
 8008488:	4648      	mov	r0, r9
 800848a:	f7ff f9c8 	bl	800781e <quorem>
 800848e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008492:	f806 8b01 	strb.w	r8, [r6], #1
 8008496:	9b00      	ldr	r3, [sp, #0]
 8008498:	eba6 020a 	sub.w	r2, r6, sl
 800849c:	4293      	cmp	r3, r2
 800849e:	ddb3      	ble.n	8008408 <_dtoa_r+0xad8>
 80084a0:	4649      	mov	r1, r9
 80084a2:	2300      	movs	r3, #0
 80084a4:	220a      	movs	r2, #10
 80084a6:	4658      	mov	r0, fp
 80084a8:	f000 f8b2 	bl	8008610 <__multadd>
 80084ac:	4681      	mov	r9, r0
 80084ae:	e7ea      	b.n	8008486 <_dtoa_r+0xb56>
 80084b0:	080099f4 	.word	0x080099f4
 80084b4:	08009978 	.word	0x08009978

080084b8 <_free_r>:
 80084b8:	b538      	push	{r3, r4, r5, lr}
 80084ba:	4605      	mov	r5, r0
 80084bc:	2900      	cmp	r1, #0
 80084be:	d041      	beq.n	8008544 <_free_r+0x8c>
 80084c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084c4:	1f0c      	subs	r4, r1, #4
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	bfb8      	it	lt
 80084ca:	18e4      	addlt	r4, r4, r3
 80084cc:	f7fe fb3a 	bl	8006b44 <__malloc_lock>
 80084d0:	4a1d      	ldr	r2, [pc, #116]	@ (8008548 <_free_r+0x90>)
 80084d2:	6813      	ldr	r3, [r2, #0]
 80084d4:	b933      	cbnz	r3, 80084e4 <_free_r+0x2c>
 80084d6:	6063      	str	r3, [r4, #4]
 80084d8:	6014      	str	r4, [r2, #0]
 80084da:	4628      	mov	r0, r5
 80084dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084e0:	f7fe bb36 	b.w	8006b50 <__malloc_unlock>
 80084e4:	42a3      	cmp	r3, r4
 80084e6:	d908      	bls.n	80084fa <_free_r+0x42>
 80084e8:	6820      	ldr	r0, [r4, #0]
 80084ea:	1821      	adds	r1, r4, r0
 80084ec:	428b      	cmp	r3, r1
 80084ee:	bf01      	itttt	eq
 80084f0:	6819      	ldreq	r1, [r3, #0]
 80084f2:	685b      	ldreq	r3, [r3, #4]
 80084f4:	1809      	addeq	r1, r1, r0
 80084f6:	6021      	streq	r1, [r4, #0]
 80084f8:	e7ed      	b.n	80084d6 <_free_r+0x1e>
 80084fa:	461a      	mov	r2, r3
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	b10b      	cbz	r3, 8008504 <_free_r+0x4c>
 8008500:	42a3      	cmp	r3, r4
 8008502:	d9fa      	bls.n	80084fa <_free_r+0x42>
 8008504:	6811      	ldr	r1, [r2, #0]
 8008506:	1850      	adds	r0, r2, r1
 8008508:	42a0      	cmp	r0, r4
 800850a:	d10b      	bne.n	8008524 <_free_r+0x6c>
 800850c:	6820      	ldr	r0, [r4, #0]
 800850e:	4401      	add	r1, r0
 8008510:	1850      	adds	r0, r2, r1
 8008512:	4283      	cmp	r3, r0
 8008514:	6011      	str	r1, [r2, #0]
 8008516:	d1e0      	bne.n	80084da <_free_r+0x22>
 8008518:	6818      	ldr	r0, [r3, #0]
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	6053      	str	r3, [r2, #4]
 800851e:	4408      	add	r0, r1
 8008520:	6010      	str	r0, [r2, #0]
 8008522:	e7da      	b.n	80084da <_free_r+0x22>
 8008524:	d902      	bls.n	800852c <_free_r+0x74>
 8008526:	230c      	movs	r3, #12
 8008528:	602b      	str	r3, [r5, #0]
 800852a:	e7d6      	b.n	80084da <_free_r+0x22>
 800852c:	6820      	ldr	r0, [r4, #0]
 800852e:	1821      	adds	r1, r4, r0
 8008530:	428b      	cmp	r3, r1
 8008532:	bf04      	itt	eq
 8008534:	6819      	ldreq	r1, [r3, #0]
 8008536:	685b      	ldreq	r3, [r3, #4]
 8008538:	6063      	str	r3, [r4, #4]
 800853a:	bf04      	itt	eq
 800853c:	1809      	addeq	r1, r1, r0
 800853e:	6021      	streq	r1, [r4, #0]
 8008540:	6054      	str	r4, [r2, #4]
 8008542:	e7ca      	b.n	80084da <_free_r+0x22>
 8008544:	bd38      	pop	{r3, r4, r5, pc}
 8008546:	bf00      	nop
 8008548:	20001008 	.word	0x20001008

0800854c <_Balloc>:
 800854c:	b570      	push	{r4, r5, r6, lr}
 800854e:	69c6      	ldr	r6, [r0, #28]
 8008550:	4604      	mov	r4, r0
 8008552:	460d      	mov	r5, r1
 8008554:	b976      	cbnz	r6, 8008574 <_Balloc+0x28>
 8008556:	2010      	movs	r0, #16
 8008558:	f7fe fa4a 	bl	80069f0 <malloc>
 800855c:	4602      	mov	r2, r0
 800855e:	61e0      	str	r0, [r4, #28]
 8008560:	b920      	cbnz	r0, 800856c <_Balloc+0x20>
 8008562:	4b18      	ldr	r3, [pc, #96]	@ (80085c4 <_Balloc+0x78>)
 8008564:	4818      	ldr	r0, [pc, #96]	@ (80085c8 <_Balloc+0x7c>)
 8008566:	216b      	movs	r1, #107	@ 0x6b
 8008568:	f000 fd90 	bl	800908c <__assert_func>
 800856c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008570:	6006      	str	r6, [r0, #0]
 8008572:	60c6      	str	r6, [r0, #12]
 8008574:	69e6      	ldr	r6, [r4, #28]
 8008576:	68f3      	ldr	r3, [r6, #12]
 8008578:	b183      	cbz	r3, 800859c <_Balloc+0x50>
 800857a:	69e3      	ldr	r3, [r4, #28]
 800857c:	68db      	ldr	r3, [r3, #12]
 800857e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008582:	b9b8      	cbnz	r0, 80085b4 <_Balloc+0x68>
 8008584:	2101      	movs	r1, #1
 8008586:	fa01 f605 	lsl.w	r6, r1, r5
 800858a:	1d72      	adds	r2, r6, #5
 800858c:	0092      	lsls	r2, r2, #2
 800858e:	4620      	mov	r0, r4
 8008590:	f000 fd9a 	bl	80090c8 <_calloc_r>
 8008594:	b160      	cbz	r0, 80085b0 <_Balloc+0x64>
 8008596:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800859a:	e00e      	b.n	80085ba <_Balloc+0x6e>
 800859c:	2221      	movs	r2, #33	@ 0x21
 800859e:	2104      	movs	r1, #4
 80085a0:	4620      	mov	r0, r4
 80085a2:	f000 fd91 	bl	80090c8 <_calloc_r>
 80085a6:	69e3      	ldr	r3, [r4, #28]
 80085a8:	60f0      	str	r0, [r6, #12]
 80085aa:	68db      	ldr	r3, [r3, #12]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d1e4      	bne.n	800857a <_Balloc+0x2e>
 80085b0:	2000      	movs	r0, #0
 80085b2:	bd70      	pop	{r4, r5, r6, pc}
 80085b4:	6802      	ldr	r2, [r0, #0]
 80085b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80085ba:	2300      	movs	r3, #0
 80085bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80085c0:	e7f7      	b.n	80085b2 <_Balloc+0x66>
 80085c2:	bf00      	nop
 80085c4:	08009985 	.word	0x08009985
 80085c8:	08009a05 	.word	0x08009a05

080085cc <_Bfree>:
 80085cc:	b570      	push	{r4, r5, r6, lr}
 80085ce:	69c6      	ldr	r6, [r0, #28]
 80085d0:	4605      	mov	r5, r0
 80085d2:	460c      	mov	r4, r1
 80085d4:	b976      	cbnz	r6, 80085f4 <_Bfree+0x28>
 80085d6:	2010      	movs	r0, #16
 80085d8:	f7fe fa0a 	bl	80069f0 <malloc>
 80085dc:	4602      	mov	r2, r0
 80085de:	61e8      	str	r0, [r5, #28]
 80085e0:	b920      	cbnz	r0, 80085ec <_Bfree+0x20>
 80085e2:	4b09      	ldr	r3, [pc, #36]	@ (8008608 <_Bfree+0x3c>)
 80085e4:	4809      	ldr	r0, [pc, #36]	@ (800860c <_Bfree+0x40>)
 80085e6:	218f      	movs	r1, #143	@ 0x8f
 80085e8:	f000 fd50 	bl	800908c <__assert_func>
 80085ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80085f0:	6006      	str	r6, [r0, #0]
 80085f2:	60c6      	str	r6, [r0, #12]
 80085f4:	b13c      	cbz	r4, 8008606 <_Bfree+0x3a>
 80085f6:	69eb      	ldr	r3, [r5, #28]
 80085f8:	6862      	ldr	r2, [r4, #4]
 80085fa:	68db      	ldr	r3, [r3, #12]
 80085fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008600:	6021      	str	r1, [r4, #0]
 8008602:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008606:	bd70      	pop	{r4, r5, r6, pc}
 8008608:	08009985 	.word	0x08009985
 800860c:	08009a05 	.word	0x08009a05

08008610 <__multadd>:
 8008610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008614:	690d      	ldr	r5, [r1, #16]
 8008616:	4607      	mov	r7, r0
 8008618:	460c      	mov	r4, r1
 800861a:	461e      	mov	r6, r3
 800861c:	f101 0c14 	add.w	ip, r1, #20
 8008620:	2000      	movs	r0, #0
 8008622:	f8dc 3000 	ldr.w	r3, [ip]
 8008626:	b299      	uxth	r1, r3
 8008628:	fb02 6101 	mla	r1, r2, r1, r6
 800862c:	0c1e      	lsrs	r6, r3, #16
 800862e:	0c0b      	lsrs	r3, r1, #16
 8008630:	fb02 3306 	mla	r3, r2, r6, r3
 8008634:	b289      	uxth	r1, r1
 8008636:	3001      	adds	r0, #1
 8008638:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800863c:	4285      	cmp	r5, r0
 800863e:	f84c 1b04 	str.w	r1, [ip], #4
 8008642:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008646:	dcec      	bgt.n	8008622 <__multadd+0x12>
 8008648:	b30e      	cbz	r6, 800868e <__multadd+0x7e>
 800864a:	68a3      	ldr	r3, [r4, #8]
 800864c:	42ab      	cmp	r3, r5
 800864e:	dc19      	bgt.n	8008684 <__multadd+0x74>
 8008650:	6861      	ldr	r1, [r4, #4]
 8008652:	4638      	mov	r0, r7
 8008654:	3101      	adds	r1, #1
 8008656:	f7ff ff79 	bl	800854c <_Balloc>
 800865a:	4680      	mov	r8, r0
 800865c:	b928      	cbnz	r0, 800866a <__multadd+0x5a>
 800865e:	4602      	mov	r2, r0
 8008660:	4b0c      	ldr	r3, [pc, #48]	@ (8008694 <__multadd+0x84>)
 8008662:	480d      	ldr	r0, [pc, #52]	@ (8008698 <__multadd+0x88>)
 8008664:	21ba      	movs	r1, #186	@ 0xba
 8008666:	f000 fd11 	bl	800908c <__assert_func>
 800866a:	6922      	ldr	r2, [r4, #16]
 800866c:	3202      	adds	r2, #2
 800866e:	f104 010c 	add.w	r1, r4, #12
 8008672:	0092      	lsls	r2, r2, #2
 8008674:	300c      	adds	r0, #12
 8008676:	f7ff f8c4 	bl	8007802 <memcpy>
 800867a:	4621      	mov	r1, r4
 800867c:	4638      	mov	r0, r7
 800867e:	f7ff ffa5 	bl	80085cc <_Bfree>
 8008682:	4644      	mov	r4, r8
 8008684:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008688:	3501      	adds	r5, #1
 800868a:	615e      	str	r6, [r3, #20]
 800868c:	6125      	str	r5, [r4, #16]
 800868e:	4620      	mov	r0, r4
 8008690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008694:	080099f4 	.word	0x080099f4
 8008698:	08009a05 	.word	0x08009a05

0800869c <__hi0bits>:
 800869c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80086a0:	4603      	mov	r3, r0
 80086a2:	bf36      	itet	cc
 80086a4:	0403      	lslcc	r3, r0, #16
 80086a6:	2000      	movcs	r0, #0
 80086a8:	2010      	movcc	r0, #16
 80086aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80086ae:	bf3c      	itt	cc
 80086b0:	021b      	lslcc	r3, r3, #8
 80086b2:	3008      	addcc	r0, #8
 80086b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80086b8:	bf3c      	itt	cc
 80086ba:	011b      	lslcc	r3, r3, #4
 80086bc:	3004      	addcc	r0, #4
 80086be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086c2:	bf3c      	itt	cc
 80086c4:	009b      	lslcc	r3, r3, #2
 80086c6:	3002      	addcc	r0, #2
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	db05      	blt.n	80086d8 <__hi0bits+0x3c>
 80086cc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80086d0:	f100 0001 	add.w	r0, r0, #1
 80086d4:	bf08      	it	eq
 80086d6:	2020      	moveq	r0, #32
 80086d8:	4770      	bx	lr

080086da <__lo0bits>:
 80086da:	6803      	ldr	r3, [r0, #0]
 80086dc:	4602      	mov	r2, r0
 80086de:	f013 0007 	ands.w	r0, r3, #7
 80086e2:	d00b      	beq.n	80086fc <__lo0bits+0x22>
 80086e4:	07d9      	lsls	r1, r3, #31
 80086e6:	d421      	bmi.n	800872c <__lo0bits+0x52>
 80086e8:	0798      	lsls	r0, r3, #30
 80086ea:	bf49      	itett	mi
 80086ec:	085b      	lsrmi	r3, r3, #1
 80086ee:	089b      	lsrpl	r3, r3, #2
 80086f0:	2001      	movmi	r0, #1
 80086f2:	6013      	strmi	r3, [r2, #0]
 80086f4:	bf5c      	itt	pl
 80086f6:	6013      	strpl	r3, [r2, #0]
 80086f8:	2002      	movpl	r0, #2
 80086fa:	4770      	bx	lr
 80086fc:	b299      	uxth	r1, r3
 80086fe:	b909      	cbnz	r1, 8008704 <__lo0bits+0x2a>
 8008700:	0c1b      	lsrs	r3, r3, #16
 8008702:	2010      	movs	r0, #16
 8008704:	b2d9      	uxtb	r1, r3
 8008706:	b909      	cbnz	r1, 800870c <__lo0bits+0x32>
 8008708:	3008      	adds	r0, #8
 800870a:	0a1b      	lsrs	r3, r3, #8
 800870c:	0719      	lsls	r1, r3, #28
 800870e:	bf04      	itt	eq
 8008710:	091b      	lsreq	r3, r3, #4
 8008712:	3004      	addeq	r0, #4
 8008714:	0799      	lsls	r1, r3, #30
 8008716:	bf04      	itt	eq
 8008718:	089b      	lsreq	r3, r3, #2
 800871a:	3002      	addeq	r0, #2
 800871c:	07d9      	lsls	r1, r3, #31
 800871e:	d403      	bmi.n	8008728 <__lo0bits+0x4e>
 8008720:	085b      	lsrs	r3, r3, #1
 8008722:	f100 0001 	add.w	r0, r0, #1
 8008726:	d003      	beq.n	8008730 <__lo0bits+0x56>
 8008728:	6013      	str	r3, [r2, #0]
 800872a:	4770      	bx	lr
 800872c:	2000      	movs	r0, #0
 800872e:	4770      	bx	lr
 8008730:	2020      	movs	r0, #32
 8008732:	4770      	bx	lr

08008734 <__i2b>:
 8008734:	b510      	push	{r4, lr}
 8008736:	460c      	mov	r4, r1
 8008738:	2101      	movs	r1, #1
 800873a:	f7ff ff07 	bl	800854c <_Balloc>
 800873e:	4602      	mov	r2, r0
 8008740:	b928      	cbnz	r0, 800874e <__i2b+0x1a>
 8008742:	4b05      	ldr	r3, [pc, #20]	@ (8008758 <__i2b+0x24>)
 8008744:	4805      	ldr	r0, [pc, #20]	@ (800875c <__i2b+0x28>)
 8008746:	f240 1145 	movw	r1, #325	@ 0x145
 800874a:	f000 fc9f 	bl	800908c <__assert_func>
 800874e:	2301      	movs	r3, #1
 8008750:	6144      	str	r4, [r0, #20]
 8008752:	6103      	str	r3, [r0, #16]
 8008754:	bd10      	pop	{r4, pc}
 8008756:	bf00      	nop
 8008758:	080099f4 	.word	0x080099f4
 800875c:	08009a05 	.word	0x08009a05

08008760 <__multiply>:
 8008760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008764:	4614      	mov	r4, r2
 8008766:	690a      	ldr	r2, [r1, #16]
 8008768:	6923      	ldr	r3, [r4, #16]
 800876a:	429a      	cmp	r2, r3
 800876c:	bfa8      	it	ge
 800876e:	4623      	movge	r3, r4
 8008770:	460f      	mov	r7, r1
 8008772:	bfa4      	itt	ge
 8008774:	460c      	movge	r4, r1
 8008776:	461f      	movge	r7, r3
 8008778:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800877c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008780:	68a3      	ldr	r3, [r4, #8]
 8008782:	6861      	ldr	r1, [r4, #4]
 8008784:	eb0a 0609 	add.w	r6, sl, r9
 8008788:	42b3      	cmp	r3, r6
 800878a:	b085      	sub	sp, #20
 800878c:	bfb8      	it	lt
 800878e:	3101      	addlt	r1, #1
 8008790:	f7ff fedc 	bl	800854c <_Balloc>
 8008794:	b930      	cbnz	r0, 80087a4 <__multiply+0x44>
 8008796:	4602      	mov	r2, r0
 8008798:	4b44      	ldr	r3, [pc, #272]	@ (80088ac <__multiply+0x14c>)
 800879a:	4845      	ldr	r0, [pc, #276]	@ (80088b0 <__multiply+0x150>)
 800879c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80087a0:	f000 fc74 	bl	800908c <__assert_func>
 80087a4:	f100 0514 	add.w	r5, r0, #20
 80087a8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80087ac:	462b      	mov	r3, r5
 80087ae:	2200      	movs	r2, #0
 80087b0:	4543      	cmp	r3, r8
 80087b2:	d321      	bcc.n	80087f8 <__multiply+0x98>
 80087b4:	f107 0114 	add.w	r1, r7, #20
 80087b8:	f104 0214 	add.w	r2, r4, #20
 80087bc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80087c0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80087c4:	9302      	str	r3, [sp, #8]
 80087c6:	1b13      	subs	r3, r2, r4
 80087c8:	3b15      	subs	r3, #21
 80087ca:	f023 0303 	bic.w	r3, r3, #3
 80087ce:	3304      	adds	r3, #4
 80087d0:	f104 0715 	add.w	r7, r4, #21
 80087d4:	42ba      	cmp	r2, r7
 80087d6:	bf38      	it	cc
 80087d8:	2304      	movcc	r3, #4
 80087da:	9301      	str	r3, [sp, #4]
 80087dc:	9b02      	ldr	r3, [sp, #8]
 80087de:	9103      	str	r1, [sp, #12]
 80087e0:	428b      	cmp	r3, r1
 80087e2:	d80c      	bhi.n	80087fe <__multiply+0x9e>
 80087e4:	2e00      	cmp	r6, #0
 80087e6:	dd03      	ble.n	80087f0 <__multiply+0x90>
 80087e8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d05b      	beq.n	80088a8 <__multiply+0x148>
 80087f0:	6106      	str	r6, [r0, #16]
 80087f2:	b005      	add	sp, #20
 80087f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087f8:	f843 2b04 	str.w	r2, [r3], #4
 80087fc:	e7d8      	b.n	80087b0 <__multiply+0x50>
 80087fe:	f8b1 a000 	ldrh.w	sl, [r1]
 8008802:	f1ba 0f00 	cmp.w	sl, #0
 8008806:	d024      	beq.n	8008852 <__multiply+0xf2>
 8008808:	f104 0e14 	add.w	lr, r4, #20
 800880c:	46a9      	mov	r9, r5
 800880e:	f04f 0c00 	mov.w	ip, #0
 8008812:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008816:	f8d9 3000 	ldr.w	r3, [r9]
 800881a:	fa1f fb87 	uxth.w	fp, r7
 800881e:	b29b      	uxth	r3, r3
 8008820:	fb0a 330b 	mla	r3, sl, fp, r3
 8008824:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008828:	f8d9 7000 	ldr.w	r7, [r9]
 800882c:	4463      	add	r3, ip
 800882e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008832:	fb0a c70b 	mla	r7, sl, fp, ip
 8008836:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800883a:	b29b      	uxth	r3, r3
 800883c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008840:	4572      	cmp	r2, lr
 8008842:	f849 3b04 	str.w	r3, [r9], #4
 8008846:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800884a:	d8e2      	bhi.n	8008812 <__multiply+0xb2>
 800884c:	9b01      	ldr	r3, [sp, #4]
 800884e:	f845 c003 	str.w	ip, [r5, r3]
 8008852:	9b03      	ldr	r3, [sp, #12]
 8008854:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008858:	3104      	adds	r1, #4
 800885a:	f1b9 0f00 	cmp.w	r9, #0
 800885e:	d021      	beq.n	80088a4 <__multiply+0x144>
 8008860:	682b      	ldr	r3, [r5, #0]
 8008862:	f104 0c14 	add.w	ip, r4, #20
 8008866:	46ae      	mov	lr, r5
 8008868:	f04f 0a00 	mov.w	sl, #0
 800886c:	f8bc b000 	ldrh.w	fp, [ip]
 8008870:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008874:	fb09 770b 	mla	r7, r9, fp, r7
 8008878:	4457      	add	r7, sl
 800887a:	b29b      	uxth	r3, r3
 800887c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008880:	f84e 3b04 	str.w	r3, [lr], #4
 8008884:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008888:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800888c:	f8be 3000 	ldrh.w	r3, [lr]
 8008890:	fb09 330a 	mla	r3, r9, sl, r3
 8008894:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008898:	4562      	cmp	r2, ip
 800889a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800889e:	d8e5      	bhi.n	800886c <__multiply+0x10c>
 80088a0:	9f01      	ldr	r7, [sp, #4]
 80088a2:	51eb      	str	r3, [r5, r7]
 80088a4:	3504      	adds	r5, #4
 80088a6:	e799      	b.n	80087dc <__multiply+0x7c>
 80088a8:	3e01      	subs	r6, #1
 80088aa:	e79b      	b.n	80087e4 <__multiply+0x84>
 80088ac:	080099f4 	.word	0x080099f4
 80088b0:	08009a05 	.word	0x08009a05

080088b4 <__pow5mult>:
 80088b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088b8:	4615      	mov	r5, r2
 80088ba:	f012 0203 	ands.w	r2, r2, #3
 80088be:	4607      	mov	r7, r0
 80088c0:	460e      	mov	r6, r1
 80088c2:	d007      	beq.n	80088d4 <__pow5mult+0x20>
 80088c4:	4c25      	ldr	r4, [pc, #148]	@ (800895c <__pow5mult+0xa8>)
 80088c6:	3a01      	subs	r2, #1
 80088c8:	2300      	movs	r3, #0
 80088ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80088ce:	f7ff fe9f 	bl	8008610 <__multadd>
 80088d2:	4606      	mov	r6, r0
 80088d4:	10ad      	asrs	r5, r5, #2
 80088d6:	d03d      	beq.n	8008954 <__pow5mult+0xa0>
 80088d8:	69fc      	ldr	r4, [r7, #28]
 80088da:	b97c      	cbnz	r4, 80088fc <__pow5mult+0x48>
 80088dc:	2010      	movs	r0, #16
 80088de:	f7fe f887 	bl	80069f0 <malloc>
 80088e2:	4602      	mov	r2, r0
 80088e4:	61f8      	str	r0, [r7, #28]
 80088e6:	b928      	cbnz	r0, 80088f4 <__pow5mult+0x40>
 80088e8:	4b1d      	ldr	r3, [pc, #116]	@ (8008960 <__pow5mult+0xac>)
 80088ea:	481e      	ldr	r0, [pc, #120]	@ (8008964 <__pow5mult+0xb0>)
 80088ec:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80088f0:	f000 fbcc 	bl	800908c <__assert_func>
 80088f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80088f8:	6004      	str	r4, [r0, #0]
 80088fa:	60c4      	str	r4, [r0, #12]
 80088fc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008900:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008904:	b94c      	cbnz	r4, 800891a <__pow5mult+0x66>
 8008906:	f240 2171 	movw	r1, #625	@ 0x271
 800890a:	4638      	mov	r0, r7
 800890c:	f7ff ff12 	bl	8008734 <__i2b>
 8008910:	2300      	movs	r3, #0
 8008912:	f8c8 0008 	str.w	r0, [r8, #8]
 8008916:	4604      	mov	r4, r0
 8008918:	6003      	str	r3, [r0, #0]
 800891a:	f04f 0900 	mov.w	r9, #0
 800891e:	07eb      	lsls	r3, r5, #31
 8008920:	d50a      	bpl.n	8008938 <__pow5mult+0x84>
 8008922:	4631      	mov	r1, r6
 8008924:	4622      	mov	r2, r4
 8008926:	4638      	mov	r0, r7
 8008928:	f7ff ff1a 	bl	8008760 <__multiply>
 800892c:	4631      	mov	r1, r6
 800892e:	4680      	mov	r8, r0
 8008930:	4638      	mov	r0, r7
 8008932:	f7ff fe4b 	bl	80085cc <_Bfree>
 8008936:	4646      	mov	r6, r8
 8008938:	106d      	asrs	r5, r5, #1
 800893a:	d00b      	beq.n	8008954 <__pow5mult+0xa0>
 800893c:	6820      	ldr	r0, [r4, #0]
 800893e:	b938      	cbnz	r0, 8008950 <__pow5mult+0x9c>
 8008940:	4622      	mov	r2, r4
 8008942:	4621      	mov	r1, r4
 8008944:	4638      	mov	r0, r7
 8008946:	f7ff ff0b 	bl	8008760 <__multiply>
 800894a:	6020      	str	r0, [r4, #0]
 800894c:	f8c0 9000 	str.w	r9, [r0]
 8008950:	4604      	mov	r4, r0
 8008952:	e7e4      	b.n	800891e <__pow5mult+0x6a>
 8008954:	4630      	mov	r0, r6
 8008956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800895a:	bf00      	nop
 800895c:	08009a60 	.word	0x08009a60
 8008960:	08009985 	.word	0x08009985
 8008964:	08009a05 	.word	0x08009a05

08008968 <__lshift>:
 8008968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800896c:	460c      	mov	r4, r1
 800896e:	6849      	ldr	r1, [r1, #4]
 8008970:	6923      	ldr	r3, [r4, #16]
 8008972:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008976:	68a3      	ldr	r3, [r4, #8]
 8008978:	4607      	mov	r7, r0
 800897a:	4691      	mov	r9, r2
 800897c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008980:	f108 0601 	add.w	r6, r8, #1
 8008984:	42b3      	cmp	r3, r6
 8008986:	db0b      	blt.n	80089a0 <__lshift+0x38>
 8008988:	4638      	mov	r0, r7
 800898a:	f7ff fddf 	bl	800854c <_Balloc>
 800898e:	4605      	mov	r5, r0
 8008990:	b948      	cbnz	r0, 80089a6 <__lshift+0x3e>
 8008992:	4602      	mov	r2, r0
 8008994:	4b28      	ldr	r3, [pc, #160]	@ (8008a38 <__lshift+0xd0>)
 8008996:	4829      	ldr	r0, [pc, #164]	@ (8008a3c <__lshift+0xd4>)
 8008998:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800899c:	f000 fb76 	bl	800908c <__assert_func>
 80089a0:	3101      	adds	r1, #1
 80089a2:	005b      	lsls	r3, r3, #1
 80089a4:	e7ee      	b.n	8008984 <__lshift+0x1c>
 80089a6:	2300      	movs	r3, #0
 80089a8:	f100 0114 	add.w	r1, r0, #20
 80089ac:	f100 0210 	add.w	r2, r0, #16
 80089b0:	4618      	mov	r0, r3
 80089b2:	4553      	cmp	r3, sl
 80089b4:	db33      	blt.n	8008a1e <__lshift+0xb6>
 80089b6:	6920      	ldr	r0, [r4, #16]
 80089b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80089bc:	f104 0314 	add.w	r3, r4, #20
 80089c0:	f019 091f 	ands.w	r9, r9, #31
 80089c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80089c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80089cc:	d02b      	beq.n	8008a26 <__lshift+0xbe>
 80089ce:	f1c9 0e20 	rsb	lr, r9, #32
 80089d2:	468a      	mov	sl, r1
 80089d4:	2200      	movs	r2, #0
 80089d6:	6818      	ldr	r0, [r3, #0]
 80089d8:	fa00 f009 	lsl.w	r0, r0, r9
 80089dc:	4310      	orrs	r0, r2
 80089de:	f84a 0b04 	str.w	r0, [sl], #4
 80089e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80089e6:	459c      	cmp	ip, r3
 80089e8:	fa22 f20e 	lsr.w	r2, r2, lr
 80089ec:	d8f3      	bhi.n	80089d6 <__lshift+0x6e>
 80089ee:	ebac 0304 	sub.w	r3, ip, r4
 80089f2:	3b15      	subs	r3, #21
 80089f4:	f023 0303 	bic.w	r3, r3, #3
 80089f8:	3304      	adds	r3, #4
 80089fa:	f104 0015 	add.w	r0, r4, #21
 80089fe:	4584      	cmp	ip, r0
 8008a00:	bf38      	it	cc
 8008a02:	2304      	movcc	r3, #4
 8008a04:	50ca      	str	r2, [r1, r3]
 8008a06:	b10a      	cbz	r2, 8008a0c <__lshift+0xa4>
 8008a08:	f108 0602 	add.w	r6, r8, #2
 8008a0c:	3e01      	subs	r6, #1
 8008a0e:	4638      	mov	r0, r7
 8008a10:	612e      	str	r6, [r5, #16]
 8008a12:	4621      	mov	r1, r4
 8008a14:	f7ff fdda 	bl	80085cc <_Bfree>
 8008a18:	4628      	mov	r0, r5
 8008a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a1e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008a22:	3301      	adds	r3, #1
 8008a24:	e7c5      	b.n	80089b2 <__lshift+0x4a>
 8008a26:	3904      	subs	r1, #4
 8008a28:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a2c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008a30:	459c      	cmp	ip, r3
 8008a32:	d8f9      	bhi.n	8008a28 <__lshift+0xc0>
 8008a34:	e7ea      	b.n	8008a0c <__lshift+0xa4>
 8008a36:	bf00      	nop
 8008a38:	080099f4 	.word	0x080099f4
 8008a3c:	08009a05 	.word	0x08009a05

08008a40 <__mcmp>:
 8008a40:	690a      	ldr	r2, [r1, #16]
 8008a42:	4603      	mov	r3, r0
 8008a44:	6900      	ldr	r0, [r0, #16]
 8008a46:	1a80      	subs	r0, r0, r2
 8008a48:	b530      	push	{r4, r5, lr}
 8008a4a:	d10e      	bne.n	8008a6a <__mcmp+0x2a>
 8008a4c:	3314      	adds	r3, #20
 8008a4e:	3114      	adds	r1, #20
 8008a50:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008a54:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008a58:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008a5c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008a60:	4295      	cmp	r5, r2
 8008a62:	d003      	beq.n	8008a6c <__mcmp+0x2c>
 8008a64:	d205      	bcs.n	8008a72 <__mcmp+0x32>
 8008a66:	f04f 30ff 	mov.w	r0, #4294967295
 8008a6a:	bd30      	pop	{r4, r5, pc}
 8008a6c:	42a3      	cmp	r3, r4
 8008a6e:	d3f3      	bcc.n	8008a58 <__mcmp+0x18>
 8008a70:	e7fb      	b.n	8008a6a <__mcmp+0x2a>
 8008a72:	2001      	movs	r0, #1
 8008a74:	e7f9      	b.n	8008a6a <__mcmp+0x2a>
	...

08008a78 <__mdiff>:
 8008a78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a7c:	4689      	mov	r9, r1
 8008a7e:	4606      	mov	r6, r0
 8008a80:	4611      	mov	r1, r2
 8008a82:	4648      	mov	r0, r9
 8008a84:	4614      	mov	r4, r2
 8008a86:	f7ff ffdb 	bl	8008a40 <__mcmp>
 8008a8a:	1e05      	subs	r5, r0, #0
 8008a8c:	d112      	bne.n	8008ab4 <__mdiff+0x3c>
 8008a8e:	4629      	mov	r1, r5
 8008a90:	4630      	mov	r0, r6
 8008a92:	f7ff fd5b 	bl	800854c <_Balloc>
 8008a96:	4602      	mov	r2, r0
 8008a98:	b928      	cbnz	r0, 8008aa6 <__mdiff+0x2e>
 8008a9a:	4b3f      	ldr	r3, [pc, #252]	@ (8008b98 <__mdiff+0x120>)
 8008a9c:	f240 2137 	movw	r1, #567	@ 0x237
 8008aa0:	483e      	ldr	r0, [pc, #248]	@ (8008b9c <__mdiff+0x124>)
 8008aa2:	f000 faf3 	bl	800908c <__assert_func>
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008aac:	4610      	mov	r0, r2
 8008aae:	b003      	add	sp, #12
 8008ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ab4:	bfbc      	itt	lt
 8008ab6:	464b      	movlt	r3, r9
 8008ab8:	46a1      	movlt	r9, r4
 8008aba:	4630      	mov	r0, r6
 8008abc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008ac0:	bfba      	itte	lt
 8008ac2:	461c      	movlt	r4, r3
 8008ac4:	2501      	movlt	r5, #1
 8008ac6:	2500      	movge	r5, #0
 8008ac8:	f7ff fd40 	bl	800854c <_Balloc>
 8008acc:	4602      	mov	r2, r0
 8008ace:	b918      	cbnz	r0, 8008ad8 <__mdiff+0x60>
 8008ad0:	4b31      	ldr	r3, [pc, #196]	@ (8008b98 <__mdiff+0x120>)
 8008ad2:	f240 2145 	movw	r1, #581	@ 0x245
 8008ad6:	e7e3      	b.n	8008aa0 <__mdiff+0x28>
 8008ad8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008adc:	6926      	ldr	r6, [r4, #16]
 8008ade:	60c5      	str	r5, [r0, #12]
 8008ae0:	f109 0310 	add.w	r3, r9, #16
 8008ae4:	f109 0514 	add.w	r5, r9, #20
 8008ae8:	f104 0e14 	add.w	lr, r4, #20
 8008aec:	f100 0b14 	add.w	fp, r0, #20
 8008af0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008af4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008af8:	9301      	str	r3, [sp, #4]
 8008afa:	46d9      	mov	r9, fp
 8008afc:	f04f 0c00 	mov.w	ip, #0
 8008b00:	9b01      	ldr	r3, [sp, #4]
 8008b02:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008b06:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008b0a:	9301      	str	r3, [sp, #4]
 8008b0c:	fa1f f38a 	uxth.w	r3, sl
 8008b10:	4619      	mov	r1, r3
 8008b12:	b283      	uxth	r3, r0
 8008b14:	1acb      	subs	r3, r1, r3
 8008b16:	0c00      	lsrs	r0, r0, #16
 8008b18:	4463      	add	r3, ip
 8008b1a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008b1e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008b22:	b29b      	uxth	r3, r3
 8008b24:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008b28:	4576      	cmp	r6, lr
 8008b2a:	f849 3b04 	str.w	r3, [r9], #4
 8008b2e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008b32:	d8e5      	bhi.n	8008b00 <__mdiff+0x88>
 8008b34:	1b33      	subs	r3, r6, r4
 8008b36:	3b15      	subs	r3, #21
 8008b38:	f023 0303 	bic.w	r3, r3, #3
 8008b3c:	3415      	adds	r4, #21
 8008b3e:	3304      	adds	r3, #4
 8008b40:	42a6      	cmp	r6, r4
 8008b42:	bf38      	it	cc
 8008b44:	2304      	movcc	r3, #4
 8008b46:	441d      	add	r5, r3
 8008b48:	445b      	add	r3, fp
 8008b4a:	461e      	mov	r6, r3
 8008b4c:	462c      	mov	r4, r5
 8008b4e:	4544      	cmp	r4, r8
 8008b50:	d30e      	bcc.n	8008b70 <__mdiff+0xf8>
 8008b52:	f108 0103 	add.w	r1, r8, #3
 8008b56:	1b49      	subs	r1, r1, r5
 8008b58:	f021 0103 	bic.w	r1, r1, #3
 8008b5c:	3d03      	subs	r5, #3
 8008b5e:	45a8      	cmp	r8, r5
 8008b60:	bf38      	it	cc
 8008b62:	2100      	movcc	r1, #0
 8008b64:	440b      	add	r3, r1
 8008b66:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008b6a:	b191      	cbz	r1, 8008b92 <__mdiff+0x11a>
 8008b6c:	6117      	str	r7, [r2, #16]
 8008b6e:	e79d      	b.n	8008aac <__mdiff+0x34>
 8008b70:	f854 1b04 	ldr.w	r1, [r4], #4
 8008b74:	46e6      	mov	lr, ip
 8008b76:	0c08      	lsrs	r0, r1, #16
 8008b78:	fa1c fc81 	uxtah	ip, ip, r1
 8008b7c:	4471      	add	r1, lr
 8008b7e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008b82:	b289      	uxth	r1, r1
 8008b84:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008b88:	f846 1b04 	str.w	r1, [r6], #4
 8008b8c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008b90:	e7dd      	b.n	8008b4e <__mdiff+0xd6>
 8008b92:	3f01      	subs	r7, #1
 8008b94:	e7e7      	b.n	8008b66 <__mdiff+0xee>
 8008b96:	bf00      	nop
 8008b98:	080099f4 	.word	0x080099f4
 8008b9c:	08009a05 	.word	0x08009a05

08008ba0 <__d2b>:
 8008ba0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008ba4:	460f      	mov	r7, r1
 8008ba6:	2101      	movs	r1, #1
 8008ba8:	ec59 8b10 	vmov	r8, r9, d0
 8008bac:	4616      	mov	r6, r2
 8008bae:	f7ff fccd 	bl	800854c <_Balloc>
 8008bb2:	4604      	mov	r4, r0
 8008bb4:	b930      	cbnz	r0, 8008bc4 <__d2b+0x24>
 8008bb6:	4602      	mov	r2, r0
 8008bb8:	4b23      	ldr	r3, [pc, #140]	@ (8008c48 <__d2b+0xa8>)
 8008bba:	4824      	ldr	r0, [pc, #144]	@ (8008c4c <__d2b+0xac>)
 8008bbc:	f240 310f 	movw	r1, #783	@ 0x30f
 8008bc0:	f000 fa64 	bl	800908c <__assert_func>
 8008bc4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008bc8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008bcc:	b10d      	cbz	r5, 8008bd2 <__d2b+0x32>
 8008bce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008bd2:	9301      	str	r3, [sp, #4]
 8008bd4:	f1b8 0300 	subs.w	r3, r8, #0
 8008bd8:	d023      	beq.n	8008c22 <__d2b+0x82>
 8008bda:	4668      	mov	r0, sp
 8008bdc:	9300      	str	r3, [sp, #0]
 8008bde:	f7ff fd7c 	bl	80086da <__lo0bits>
 8008be2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008be6:	b1d0      	cbz	r0, 8008c1e <__d2b+0x7e>
 8008be8:	f1c0 0320 	rsb	r3, r0, #32
 8008bec:	fa02 f303 	lsl.w	r3, r2, r3
 8008bf0:	430b      	orrs	r3, r1
 8008bf2:	40c2      	lsrs	r2, r0
 8008bf4:	6163      	str	r3, [r4, #20]
 8008bf6:	9201      	str	r2, [sp, #4]
 8008bf8:	9b01      	ldr	r3, [sp, #4]
 8008bfa:	61a3      	str	r3, [r4, #24]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	bf0c      	ite	eq
 8008c00:	2201      	moveq	r2, #1
 8008c02:	2202      	movne	r2, #2
 8008c04:	6122      	str	r2, [r4, #16]
 8008c06:	b1a5      	cbz	r5, 8008c32 <__d2b+0x92>
 8008c08:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008c0c:	4405      	add	r5, r0
 8008c0e:	603d      	str	r5, [r7, #0]
 8008c10:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008c14:	6030      	str	r0, [r6, #0]
 8008c16:	4620      	mov	r0, r4
 8008c18:	b003      	add	sp, #12
 8008c1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c1e:	6161      	str	r1, [r4, #20]
 8008c20:	e7ea      	b.n	8008bf8 <__d2b+0x58>
 8008c22:	a801      	add	r0, sp, #4
 8008c24:	f7ff fd59 	bl	80086da <__lo0bits>
 8008c28:	9b01      	ldr	r3, [sp, #4]
 8008c2a:	6163      	str	r3, [r4, #20]
 8008c2c:	3020      	adds	r0, #32
 8008c2e:	2201      	movs	r2, #1
 8008c30:	e7e8      	b.n	8008c04 <__d2b+0x64>
 8008c32:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008c36:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008c3a:	6038      	str	r0, [r7, #0]
 8008c3c:	6918      	ldr	r0, [r3, #16]
 8008c3e:	f7ff fd2d 	bl	800869c <__hi0bits>
 8008c42:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008c46:	e7e5      	b.n	8008c14 <__d2b+0x74>
 8008c48:	080099f4 	.word	0x080099f4
 8008c4c:	08009a05 	.word	0x08009a05

08008c50 <__ssputs_r>:
 8008c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c54:	688e      	ldr	r6, [r1, #8]
 8008c56:	461f      	mov	r7, r3
 8008c58:	42be      	cmp	r6, r7
 8008c5a:	680b      	ldr	r3, [r1, #0]
 8008c5c:	4682      	mov	sl, r0
 8008c5e:	460c      	mov	r4, r1
 8008c60:	4690      	mov	r8, r2
 8008c62:	d82d      	bhi.n	8008cc0 <__ssputs_r+0x70>
 8008c64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008c68:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008c6c:	d026      	beq.n	8008cbc <__ssputs_r+0x6c>
 8008c6e:	6965      	ldr	r5, [r4, #20]
 8008c70:	6909      	ldr	r1, [r1, #16]
 8008c72:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c76:	eba3 0901 	sub.w	r9, r3, r1
 8008c7a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c7e:	1c7b      	adds	r3, r7, #1
 8008c80:	444b      	add	r3, r9
 8008c82:	106d      	asrs	r5, r5, #1
 8008c84:	429d      	cmp	r5, r3
 8008c86:	bf38      	it	cc
 8008c88:	461d      	movcc	r5, r3
 8008c8a:	0553      	lsls	r3, r2, #21
 8008c8c:	d527      	bpl.n	8008cde <__ssputs_r+0x8e>
 8008c8e:	4629      	mov	r1, r5
 8008c90:	f7fd fed8 	bl	8006a44 <_malloc_r>
 8008c94:	4606      	mov	r6, r0
 8008c96:	b360      	cbz	r0, 8008cf2 <__ssputs_r+0xa2>
 8008c98:	6921      	ldr	r1, [r4, #16]
 8008c9a:	464a      	mov	r2, r9
 8008c9c:	f7fe fdb1 	bl	8007802 <memcpy>
 8008ca0:	89a3      	ldrh	r3, [r4, #12]
 8008ca2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008ca6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008caa:	81a3      	strh	r3, [r4, #12]
 8008cac:	6126      	str	r6, [r4, #16]
 8008cae:	6165      	str	r5, [r4, #20]
 8008cb0:	444e      	add	r6, r9
 8008cb2:	eba5 0509 	sub.w	r5, r5, r9
 8008cb6:	6026      	str	r6, [r4, #0]
 8008cb8:	60a5      	str	r5, [r4, #8]
 8008cba:	463e      	mov	r6, r7
 8008cbc:	42be      	cmp	r6, r7
 8008cbe:	d900      	bls.n	8008cc2 <__ssputs_r+0x72>
 8008cc0:	463e      	mov	r6, r7
 8008cc2:	6820      	ldr	r0, [r4, #0]
 8008cc4:	4632      	mov	r2, r6
 8008cc6:	4641      	mov	r1, r8
 8008cc8:	f000 f9c6 	bl	8009058 <memmove>
 8008ccc:	68a3      	ldr	r3, [r4, #8]
 8008cce:	1b9b      	subs	r3, r3, r6
 8008cd0:	60a3      	str	r3, [r4, #8]
 8008cd2:	6823      	ldr	r3, [r4, #0]
 8008cd4:	4433      	add	r3, r6
 8008cd6:	6023      	str	r3, [r4, #0]
 8008cd8:	2000      	movs	r0, #0
 8008cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cde:	462a      	mov	r2, r5
 8008ce0:	f000 fa18 	bl	8009114 <_realloc_r>
 8008ce4:	4606      	mov	r6, r0
 8008ce6:	2800      	cmp	r0, #0
 8008ce8:	d1e0      	bne.n	8008cac <__ssputs_r+0x5c>
 8008cea:	6921      	ldr	r1, [r4, #16]
 8008cec:	4650      	mov	r0, sl
 8008cee:	f7ff fbe3 	bl	80084b8 <_free_r>
 8008cf2:	230c      	movs	r3, #12
 8008cf4:	f8ca 3000 	str.w	r3, [sl]
 8008cf8:	89a3      	ldrh	r3, [r4, #12]
 8008cfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008cfe:	81a3      	strh	r3, [r4, #12]
 8008d00:	f04f 30ff 	mov.w	r0, #4294967295
 8008d04:	e7e9      	b.n	8008cda <__ssputs_r+0x8a>
	...

08008d08 <_svfiprintf_r>:
 8008d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d0c:	4698      	mov	r8, r3
 8008d0e:	898b      	ldrh	r3, [r1, #12]
 8008d10:	061b      	lsls	r3, r3, #24
 8008d12:	b09d      	sub	sp, #116	@ 0x74
 8008d14:	4607      	mov	r7, r0
 8008d16:	460d      	mov	r5, r1
 8008d18:	4614      	mov	r4, r2
 8008d1a:	d510      	bpl.n	8008d3e <_svfiprintf_r+0x36>
 8008d1c:	690b      	ldr	r3, [r1, #16]
 8008d1e:	b973      	cbnz	r3, 8008d3e <_svfiprintf_r+0x36>
 8008d20:	2140      	movs	r1, #64	@ 0x40
 8008d22:	f7fd fe8f 	bl	8006a44 <_malloc_r>
 8008d26:	6028      	str	r0, [r5, #0]
 8008d28:	6128      	str	r0, [r5, #16]
 8008d2a:	b930      	cbnz	r0, 8008d3a <_svfiprintf_r+0x32>
 8008d2c:	230c      	movs	r3, #12
 8008d2e:	603b      	str	r3, [r7, #0]
 8008d30:	f04f 30ff 	mov.w	r0, #4294967295
 8008d34:	b01d      	add	sp, #116	@ 0x74
 8008d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d3a:	2340      	movs	r3, #64	@ 0x40
 8008d3c:	616b      	str	r3, [r5, #20]
 8008d3e:	2300      	movs	r3, #0
 8008d40:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d42:	2320      	movs	r3, #32
 8008d44:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008d48:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d4c:	2330      	movs	r3, #48	@ 0x30
 8008d4e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008eec <_svfiprintf_r+0x1e4>
 8008d52:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008d56:	f04f 0901 	mov.w	r9, #1
 8008d5a:	4623      	mov	r3, r4
 8008d5c:	469a      	mov	sl, r3
 8008d5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d62:	b10a      	cbz	r2, 8008d68 <_svfiprintf_r+0x60>
 8008d64:	2a25      	cmp	r2, #37	@ 0x25
 8008d66:	d1f9      	bne.n	8008d5c <_svfiprintf_r+0x54>
 8008d68:	ebba 0b04 	subs.w	fp, sl, r4
 8008d6c:	d00b      	beq.n	8008d86 <_svfiprintf_r+0x7e>
 8008d6e:	465b      	mov	r3, fp
 8008d70:	4622      	mov	r2, r4
 8008d72:	4629      	mov	r1, r5
 8008d74:	4638      	mov	r0, r7
 8008d76:	f7ff ff6b 	bl	8008c50 <__ssputs_r>
 8008d7a:	3001      	adds	r0, #1
 8008d7c:	f000 80a7 	beq.w	8008ece <_svfiprintf_r+0x1c6>
 8008d80:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d82:	445a      	add	r2, fp
 8008d84:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d86:	f89a 3000 	ldrb.w	r3, [sl]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	f000 809f 	beq.w	8008ece <_svfiprintf_r+0x1c6>
 8008d90:	2300      	movs	r3, #0
 8008d92:	f04f 32ff 	mov.w	r2, #4294967295
 8008d96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d9a:	f10a 0a01 	add.w	sl, sl, #1
 8008d9e:	9304      	str	r3, [sp, #16]
 8008da0:	9307      	str	r3, [sp, #28]
 8008da2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008da6:	931a      	str	r3, [sp, #104]	@ 0x68
 8008da8:	4654      	mov	r4, sl
 8008daa:	2205      	movs	r2, #5
 8008dac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008db0:	484e      	ldr	r0, [pc, #312]	@ (8008eec <_svfiprintf_r+0x1e4>)
 8008db2:	f7f7 fa1d 	bl	80001f0 <memchr>
 8008db6:	9a04      	ldr	r2, [sp, #16]
 8008db8:	b9d8      	cbnz	r0, 8008df2 <_svfiprintf_r+0xea>
 8008dba:	06d0      	lsls	r0, r2, #27
 8008dbc:	bf44      	itt	mi
 8008dbe:	2320      	movmi	r3, #32
 8008dc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008dc4:	0711      	lsls	r1, r2, #28
 8008dc6:	bf44      	itt	mi
 8008dc8:	232b      	movmi	r3, #43	@ 0x2b
 8008dca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008dce:	f89a 3000 	ldrb.w	r3, [sl]
 8008dd2:	2b2a      	cmp	r3, #42	@ 0x2a
 8008dd4:	d015      	beq.n	8008e02 <_svfiprintf_r+0xfa>
 8008dd6:	9a07      	ldr	r2, [sp, #28]
 8008dd8:	4654      	mov	r4, sl
 8008dda:	2000      	movs	r0, #0
 8008ddc:	f04f 0c0a 	mov.w	ip, #10
 8008de0:	4621      	mov	r1, r4
 8008de2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008de6:	3b30      	subs	r3, #48	@ 0x30
 8008de8:	2b09      	cmp	r3, #9
 8008dea:	d94b      	bls.n	8008e84 <_svfiprintf_r+0x17c>
 8008dec:	b1b0      	cbz	r0, 8008e1c <_svfiprintf_r+0x114>
 8008dee:	9207      	str	r2, [sp, #28]
 8008df0:	e014      	b.n	8008e1c <_svfiprintf_r+0x114>
 8008df2:	eba0 0308 	sub.w	r3, r0, r8
 8008df6:	fa09 f303 	lsl.w	r3, r9, r3
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	9304      	str	r3, [sp, #16]
 8008dfe:	46a2      	mov	sl, r4
 8008e00:	e7d2      	b.n	8008da8 <_svfiprintf_r+0xa0>
 8008e02:	9b03      	ldr	r3, [sp, #12]
 8008e04:	1d19      	adds	r1, r3, #4
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	9103      	str	r1, [sp, #12]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	bfbb      	ittet	lt
 8008e0e:	425b      	neglt	r3, r3
 8008e10:	f042 0202 	orrlt.w	r2, r2, #2
 8008e14:	9307      	strge	r3, [sp, #28]
 8008e16:	9307      	strlt	r3, [sp, #28]
 8008e18:	bfb8      	it	lt
 8008e1a:	9204      	strlt	r2, [sp, #16]
 8008e1c:	7823      	ldrb	r3, [r4, #0]
 8008e1e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008e20:	d10a      	bne.n	8008e38 <_svfiprintf_r+0x130>
 8008e22:	7863      	ldrb	r3, [r4, #1]
 8008e24:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e26:	d132      	bne.n	8008e8e <_svfiprintf_r+0x186>
 8008e28:	9b03      	ldr	r3, [sp, #12]
 8008e2a:	1d1a      	adds	r2, r3, #4
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	9203      	str	r2, [sp, #12]
 8008e30:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008e34:	3402      	adds	r4, #2
 8008e36:	9305      	str	r3, [sp, #20]
 8008e38:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008efc <_svfiprintf_r+0x1f4>
 8008e3c:	7821      	ldrb	r1, [r4, #0]
 8008e3e:	2203      	movs	r2, #3
 8008e40:	4650      	mov	r0, sl
 8008e42:	f7f7 f9d5 	bl	80001f0 <memchr>
 8008e46:	b138      	cbz	r0, 8008e58 <_svfiprintf_r+0x150>
 8008e48:	9b04      	ldr	r3, [sp, #16]
 8008e4a:	eba0 000a 	sub.w	r0, r0, sl
 8008e4e:	2240      	movs	r2, #64	@ 0x40
 8008e50:	4082      	lsls	r2, r0
 8008e52:	4313      	orrs	r3, r2
 8008e54:	3401      	adds	r4, #1
 8008e56:	9304      	str	r3, [sp, #16]
 8008e58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e5c:	4824      	ldr	r0, [pc, #144]	@ (8008ef0 <_svfiprintf_r+0x1e8>)
 8008e5e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e62:	2206      	movs	r2, #6
 8008e64:	f7f7 f9c4 	bl	80001f0 <memchr>
 8008e68:	2800      	cmp	r0, #0
 8008e6a:	d036      	beq.n	8008eda <_svfiprintf_r+0x1d2>
 8008e6c:	4b21      	ldr	r3, [pc, #132]	@ (8008ef4 <_svfiprintf_r+0x1ec>)
 8008e6e:	bb1b      	cbnz	r3, 8008eb8 <_svfiprintf_r+0x1b0>
 8008e70:	9b03      	ldr	r3, [sp, #12]
 8008e72:	3307      	adds	r3, #7
 8008e74:	f023 0307 	bic.w	r3, r3, #7
 8008e78:	3308      	adds	r3, #8
 8008e7a:	9303      	str	r3, [sp, #12]
 8008e7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e7e:	4433      	add	r3, r6
 8008e80:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e82:	e76a      	b.n	8008d5a <_svfiprintf_r+0x52>
 8008e84:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e88:	460c      	mov	r4, r1
 8008e8a:	2001      	movs	r0, #1
 8008e8c:	e7a8      	b.n	8008de0 <_svfiprintf_r+0xd8>
 8008e8e:	2300      	movs	r3, #0
 8008e90:	3401      	adds	r4, #1
 8008e92:	9305      	str	r3, [sp, #20]
 8008e94:	4619      	mov	r1, r3
 8008e96:	f04f 0c0a 	mov.w	ip, #10
 8008e9a:	4620      	mov	r0, r4
 8008e9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ea0:	3a30      	subs	r2, #48	@ 0x30
 8008ea2:	2a09      	cmp	r2, #9
 8008ea4:	d903      	bls.n	8008eae <_svfiprintf_r+0x1a6>
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d0c6      	beq.n	8008e38 <_svfiprintf_r+0x130>
 8008eaa:	9105      	str	r1, [sp, #20]
 8008eac:	e7c4      	b.n	8008e38 <_svfiprintf_r+0x130>
 8008eae:	fb0c 2101 	mla	r1, ip, r1, r2
 8008eb2:	4604      	mov	r4, r0
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	e7f0      	b.n	8008e9a <_svfiprintf_r+0x192>
 8008eb8:	ab03      	add	r3, sp, #12
 8008eba:	9300      	str	r3, [sp, #0]
 8008ebc:	462a      	mov	r2, r5
 8008ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8008ef8 <_svfiprintf_r+0x1f0>)
 8008ec0:	a904      	add	r1, sp, #16
 8008ec2:	4638      	mov	r0, r7
 8008ec4:	f7fd feea 	bl	8006c9c <_printf_float>
 8008ec8:	1c42      	adds	r2, r0, #1
 8008eca:	4606      	mov	r6, r0
 8008ecc:	d1d6      	bne.n	8008e7c <_svfiprintf_r+0x174>
 8008ece:	89ab      	ldrh	r3, [r5, #12]
 8008ed0:	065b      	lsls	r3, r3, #25
 8008ed2:	f53f af2d 	bmi.w	8008d30 <_svfiprintf_r+0x28>
 8008ed6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008ed8:	e72c      	b.n	8008d34 <_svfiprintf_r+0x2c>
 8008eda:	ab03      	add	r3, sp, #12
 8008edc:	9300      	str	r3, [sp, #0]
 8008ede:	462a      	mov	r2, r5
 8008ee0:	4b05      	ldr	r3, [pc, #20]	@ (8008ef8 <_svfiprintf_r+0x1f0>)
 8008ee2:	a904      	add	r1, sp, #16
 8008ee4:	4638      	mov	r0, r7
 8008ee6:	f7fe f971 	bl	80071cc <_printf_i>
 8008eea:	e7ed      	b.n	8008ec8 <_svfiprintf_r+0x1c0>
 8008eec:	08009b60 	.word	0x08009b60
 8008ef0:	08009b6a 	.word	0x08009b6a
 8008ef4:	08006c9d 	.word	0x08006c9d
 8008ef8:	08008c51 	.word	0x08008c51
 8008efc:	08009b66 	.word	0x08009b66

08008f00 <__sflush_r>:
 8008f00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f08:	0716      	lsls	r6, r2, #28
 8008f0a:	4605      	mov	r5, r0
 8008f0c:	460c      	mov	r4, r1
 8008f0e:	d454      	bmi.n	8008fba <__sflush_r+0xba>
 8008f10:	684b      	ldr	r3, [r1, #4]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	dc02      	bgt.n	8008f1c <__sflush_r+0x1c>
 8008f16:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	dd48      	ble.n	8008fae <__sflush_r+0xae>
 8008f1c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008f1e:	2e00      	cmp	r6, #0
 8008f20:	d045      	beq.n	8008fae <__sflush_r+0xae>
 8008f22:	2300      	movs	r3, #0
 8008f24:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008f28:	682f      	ldr	r7, [r5, #0]
 8008f2a:	6a21      	ldr	r1, [r4, #32]
 8008f2c:	602b      	str	r3, [r5, #0]
 8008f2e:	d030      	beq.n	8008f92 <__sflush_r+0x92>
 8008f30:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008f32:	89a3      	ldrh	r3, [r4, #12]
 8008f34:	0759      	lsls	r1, r3, #29
 8008f36:	d505      	bpl.n	8008f44 <__sflush_r+0x44>
 8008f38:	6863      	ldr	r3, [r4, #4]
 8008f3a:	1ad2      	subs	r2, r2, r3
 8008f3c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008f3e:	b10b      	cbz	r3, 8008f44 <__sflush_r+0x44>
 8008f40:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008f42:	1ad2      	subs	r2, r2, r3
 8008f44:	2300      	movs	r3, #0
 8008f46:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008f48:	6a21      	ldr	r1, [r4, #32]
 8008f4a:	4628      	mov	r0, r5
 8008f4c:	47b0      	blx	r6
 8008f4e:	1c43      	adds	r3, r0, #1
 8008f50:	89a3      	ldrh	r3, [r4, #12]
 8008f52:	d106      	bne.n	8008f62 <__sflush_r+0x62>
 8008f54:	6829      	ldr	r1, [r5, #0]
 8008f56:	291d      	cmp	r1, #29
 8008f58:	d82b      	bhi.n	8008fb2 <__sflush_r+0xb2>
 8008f5a:	4a2a      	ldr	r2, [pc, #168]	@ (8009004 <__sflush_r+0x104>)
 8008f5c:	410a      	asrs	r2, r1
 8008f5e:	07d6      	lsls	r6, r2, #31
 8008f60:	d427      	bmi.n	8008fb2 <__sflush_r+0xb2>
 8008f62:	2200      	movs	r2, #0
 8008f64:	6062      	str	r2, [r4, #4]
 8008f66:	04d9      	lsls	r1, r3, #19
 8008f68:	6922      	ldr	r2, [r4, #16]
 8008f6a:	6022      	str	r2, [r4, #0]
 8008f6c:	d504      	bpl.n	8008f78 <__sflush_r+0x78>
 8008f6e:	1c42      	adds	r2, r0, #1
 8008f70:	d101      	bne.n	8008f76 <__sflush_r+0x76>
 8008f72:	682b      	ldr	r3, [r5, #0]
 8008f74:	b903      	cbnz	r3, 8008f78 <__sflush_r+0x78>
 8008f76:	6560      	str	r0, [r4, #84]	@ 0x54
 8008f78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008f7a:	602f      	str	r7, [r5, #0]
 8008f7c:	b1b9      	cbz	r1, 8008fae <__sflush_r+0xae>
 8008f7e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008f82:	4299      	cmp	r1, r3
 8008f84:	d002      	beq.n	8008f8c <__sflush_r+0x8c>
 8008f86:	4628      	mov	r0, r5
 8008f88:	f7ff fa96 	bl	80084b8 <_free_r>
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	6363      	str	r3, [r4, #52]	@ 0x34
 8008f90:	e00d      	b.n	8008fae <__sflush_r+0xae>
 8008f92:	2301      	movs	r3, #1
 8008f94:	4628      	mov	r0, r5
 8008f96:	47b0      	blx	r6
 8008f98:	4602      	mov	r2, r0
 8008f9a:	1c50      	adds	r0, r2, #1
 8008f9c:	d1c9      	bne.n	8008f32 <__sflush_r+0x32>
 8008f9e:	682b      	ldr	r3, [r5, #0]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d0c6      	beq.n	8008f32 <__sflush_r+0x32>
 8008fa4:	2b1d      	cmp	r3, #29
 8008fa6:	d001      	beq.n	8008fac <__sflush_r+0xac>
 8008fa8:	2b16      	cmp	r3, #22
 8008faa:	d11e      	bne.n	8008fea <__sflush_r+0xea>
 8008fac:	602f      	str	r7, [r5, #0]
 8008fae:	2000      	movs	r0, #0
 8008fb0:	e022      	b.n	8008ff8 <__sflush_r+0xf8>
 8008fb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fb6:	b21b      	sxth	r3, r3
 8008fb8:	e01b      	b.n	8008ff2 <__sflush_r+0xf2>
 8008fba:	690f      	ldr	r7, [r1, #16]
 8008fbc:	2f00      	cmp	r7, #0
 8008fbe:	d0f6      	beq.n	8008fae <__sflush_r+0xae>
 8008fc0:	0793      	lsls	r3, r2, #30
 8008fc2:	680e      	ldr	r6, [r1, #0]
 8008fc4:	bf08      	it	eq
 8008fc6:	694b      	ldreq	r3, [r1, #20]
 8008fc8:	600f      	str	r7, [r1, #0]
 8008fca:	bf18      	it	ne
 8008fcc:	2300      	movne	r3, #0
 8008fce:	eba6 0807 	sub.w	r8, r6, r7
 8008fd2:	608b      	str	r3, [r1, #8]
 8008fd4:	f1b8 0f00 	cmp.w	r8, #0
 8008fd8:	dde9      	ble.n	8008fae <__sflush_r+0xae>
 8008fda:	6a21      	ldr	r1, [r4, #32]
 8008fdc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008fde:	4643      	mov	r3, r8
 8008fe0:	463a      	mov	r2, r7
 8008fe2:	4628      	mov	r0, r5
 8008fe4:	47b0      	blx	r6
 8008fe6:	2800      	cmp	r0, #0
 8008fe8:	dc08      	bgt.n	8008ffc <__sflush_r+0xfc>
 8008fea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ff2:	81a3      	strh	r3, [r4, #12]
 8008ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ffc:	4407      	add	r7, r0
 8008ffe:	eba8 0800 	sub.w	r8, r8, r0
 8009002:	e7e7      	b.n	8008fd4 <__sflush_r+0xd4>
 8009004:	dfbffffe 	.word	0xdfbffffe

08009008 <_fflush_r>:
 8009008:	b538      	push	{r3, r4, r5, lr}
 800900a:	690b      	ldr	r3, [r1, #16]
 800900c:	4605      	mov	r5, r0
 800900e:	460c      	mov	r4, r1
 8009010:	b913      	cbnz	r3, 8009018 <_fflush_r+0x10>
 8009012:	2500      	movs	r5, #0
 8009014:	4628      	mov	r0, r5
 8009016:	bd38      	pop	{r3, r4, r5, pc}
 8009018:	b118      	cbz	r0, 8009022 <_fflush_r+0x1a>
 800901a:	6a03      	ldr	r3, [r0, #32]
 800901c:	b90b      	cbnz	r3, 8009022 <_fflush_r+0x1a>
 800901e:	f7fe fa81 	bl	8007524 <__sinit>
 8009022:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d0f3      	beq.n	8009012 <_fflush_r+0xa>
 800902a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800902c:	07d0      	lsls	r0, r2, #31
 800902e:	d404      	bmi.n	800903a <_fflush_r+0x32>
 8009030:	0599      	lsls	r1, r3, #22
 8009032:	d402      	bmi.n	800903a <_fflush_r+0x32>
 8009034:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009036:	f7fe fbe2 	bl	80077fe <__retarget_lock_acquire_recursive>
 800903a:	4628      	mov	r0, r5
 800903c:	4621      	mov	r1, r4
 800903e:	f7ff ff5f 	bl	8008f00 <__sflush_r>
 8009042:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009044:	07da      	lsls	r2, r3, #31
 8009046:	4605      	mov	r5, r0
 8009048:	d4e4      	bmi.n	8009014 <_fflush_r+0xc>
 800904a:	89a3      	ldrh	r3, [r4, #12]
 800904c:	059b      	lsls	r3, r3, #22
 800904e:	d4e1      	bmi.n	8009014 <_fflush_r+0xc>
 8009050:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009052:	f7fe fbd5 	bl	8007800 <__retarget_lock_release_recursive>
 8009056:	e7dd      	b.n	8009014 <_fflush_r+0xc>

08009058 <memmove>:
 8009058:	4288      	cmp	r0, r1
 800905a:	b510      	push	{r4, lr}
 800905c:	eb01 0402 	add.w	r4, r1, r2
 8009060:	d902      	bls.n	8009068 <memmove+0x10>
 8009062:	4284      	cmp	r4, r0
 8009064:	4623      	mov	r3, r4
 8009066:	d807      	bhi.n	8009078 <memmove+0x20>
 8009068:	1e43      	subs	r3, r0, #1
 800906a:	42a1      	cmp	r1, r4
 800906c:	d008      	beq.n	8009080 <memmove+0x28>
 800906e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009072:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009076:	e7f8      	b.n	800906a <memmove+0x12>
 8009078:	4402      	add	r2, r0
 800907a:	4601      	mov	r1, r0
 800907c:	428a      	cmp	r2, r1
 800907e:	d100      	bne.n	8009082 <memmove+0x2a>
 8009080:	bd10      	pop	{r4, pc}
 8009082:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009086:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800908a:	e7f7      	b.n	800907c <memmove+0x24>

0800908c <__assert_func>:
 800908c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800908e:	4614      	mov	r4, r2
 8009090:	461a      	mov	r2, r3
 8009092:	4b09      	ldr	r3, [pc, #36]	@ (80090b8 <__assert_func+0x2c>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	4605      	mov	r5, r0
 8009098:	68d8      	ldr	r0, [r3, #12]
 800909a:	b954      	cbnz	r4, 80090b2 <__assert_func+0x26>
 800909c:	4b07      	ldr	r3, [pc, #28]	@ (80090bc <__assert_func+0x30>)
 800909e:	461c      	mov	r4, r3
 80090a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80090a4:	9100      	str	r1, [sp, #0]
 80090a6:	462b      	mov	r3, r5
 80090a8:	4905      	ldr	r1, [pc, #20]	@ (80090c0 <__assert_func+0x34>)
 80090aa:	f000 f86f 	bl	800918c <fiprintf>
 80090ae:	f000 f87f 	bl	80091b0 <abort>
 80090b2:	4b04      	ldr	r3, [pc, #16]	@ (80090c4 <__assert_func+0x38>)
 80090b4:	e7f4      	b.n	80090a0 <__assert_func+0x14>
 80090b6:	bf00      	nop
 80090b8:	20000198 	.word	0x20000198
 80090bc:	08009bb6 	.word	0x08009bb6
 80090c0:	08009b88 	.word	0x08009b88
 80090c4:	08009b7b 	.word	0x08009b7b

080090c8 <_calloc_r>:
 80090c8:	b570      	push	{r4, r5, r6, lr}
 80090ca:	fba1 5402 	umull	r5, r4, r1, r2
 80090ce:	b93c      	cbnz	r4, 80090e0 <_calloc_r+0x18>
 80090d0:	4629      	mov	r1, r5
 80090d2:	f7fd fcb7 	bl	8006a44 <_malloc_r>
 80090d6:	4606      	mov	r6, r0
 80090d8:	b928      	cbnz	r0, 80090e6 <_calloc_r+0x1e>
 80090da:	2600      	movs	r6, #0
 80090dc:	4630      	mov	r0, r6
 80090de:	bd70      	pop	{r4, r5, r6, pc}
 80090e0:	220c      	movs	r2, #12
 80090e2:	6002      	str	r2, [r0, #0]
 80090e4:	e7f9      	b.n	80090da <_calloc_r+0x12>
 80090e6:	462a      	mov	r2, r5
 80090e8:	4621      	mov	r1, r4
 80090ea:	f7fe fae8 	bl	80076be <memset>
 80090ee:	e7f5      	b.n	80090dc <_calloc_r+0x14>

080090f0 <__ascii_mbtowc>:
 80090f0:	b082      	sub	sp, #8
 80090f2:	b901      	cbnz	r1, 80090f6 <__ascii_mbtowc+0x6>
 80090f4:	a901      	add	r1, sp, #4
 80090f6:	b142      	cbz	r2, 800910a <__ascii_mbtowc+0x1a>
 80090f8:	b14b      	cbz	r3, 800910e <__ascii_mbtowc+0x1e>
 80090fa:	7813      	ldrb	r3, [r2, #0]
 80090fc:	600b      	str	r3, [r1, #0]
 80090fe:	7812      	ldrb	r2, [r2, #0]
 8009100:	1e10      	subs	r0, r2, #0
 8009102:	bf18      	it	ne
 8009104:	2001      	movne	r0, #1
 8009106:	b002      	add	sp, #8
 8009108:	4770      	bx	lr
 800910a:	4610      	mov	r0, r2
 800910c:	e7fb      	b.n	8009106 <__ascii_mbtowc+0x16>
 800910e:	f06f 0001 	mvn.w	r0, #1
 8009112:	e7f8      	b.n	8009106 <__ascii_mbtowc+0x16>

08009114 <_realloc_r>:
 8009114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009118:	4680      	mov	r8, r0
 800911a:	4615      	mov	r5, r2
 800911c:	460c      	mov	r4, r1
 800911e:	b921      	cbnz	r1, 800912a <_realloc_r+0x16>
 8009120:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009124:	4611      	mov	r1, r2
 8009126:	f7fd bc8d 	b.w	8006a44 <_malloc_r>
 800912a:	b92a      	cbnz	r2, 8009138 <_realloc_r+0x24>
 800912c:	f7ff f9c4 	bl	80084b8 <_free_r>
 8009130:	2400      	movs	r4, #0
 8009132:	4620      	mov	r0, r4
 8009134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009138:	f000 f841 	bl	80091be <_malloc_usable_size_r>
 800913c:	4285      	cmp	r5, r0
 800913e:	4606      	mov	r6, r0
 8009140:	d802      	bhi.n	8009148 <_realloc_r+0x34>
 8009142:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009146:	d8f4      	bhi.n	8009132 <_realloc_r+0x1e>
 8009148:	4629      	mov	r1, r5
 800914a:	4640      	mov	r0, r8
 800914c:	f7fd fc7a 	bl	8006a44 <_malloc_r>
 8009150:	4607      	mov	r7, r0
 8009152:	2800      	cmp	r0, #0
 8009154:	d0ec      	beq.n	8009130 <_realloc_r+0x1c>
 8009156:	42b5      	cmp	r5, r6
 8009158:	462a      	mov	r2, r5
 800915a:	4621      	mov	r1, r4
 800915c:	bf28      	it	cs
 800915e:	4632      	movcs	r2, r6
 8009160:	f7fe fb4f 	bl	8007802 <memcpy>
 8009164:	4621      	mov	r1, r4
 8009166:	4640      	mov	r0, r8
 8009168:	f7ff f9a6 	bl	80084b8 <_free_r>
 800916c:	463c      	mov	r4, r7
 800916e:	e7e0      	b.n	8009132 <_realloc_r+0x1e>

08009170 <__ascii_wctomb>:
 8009170:	4603      	mov	r3, r0
 8009172:	4608      	mov	r0, r1
 8009174:	b141      	cbz	r1, 8009188 <__ascii_wctomb+0x18>
 8009176:	2aff      	cmp	r2, #255	@ 0xff
 8009178:	d904      	bls.n	8009184 <__ascii_wctomb+0x14>
 800917a:	228a      	movs	r2, #138	@ 0x8a
 800917c:	601a      	str	r2, [r3, #0]
 800917e:	f04f 30ff 	mov.w	r0, #4294967295
 8009182:	4770      	bx	lr
 8009184:	700a      	strb	r2, [r1, #0]
 8009186:	2001      	movs	r0, #1
 8009188:	4770      	bx	lr
	...

0800918c <fiprintf>:
 800918c:	b40e      	push	{r1, r2, r3}
 800918e:	b503      	push	{r0, r1, lr}
 8009190:	4601      	mov	r1, r0
 8009192:	ab03      	add	r3, sp, #12
 8009194:	4805      	ldr	r0, [pc, #20]	@ (80091ac <fiprintf+0x20>)
 8009196:	f853 2b04 	ldr.w	r2, [r3], #4
 800919a:	6800      	ldr	r0, [r0, #0]
 800919c:	9301      	str	r3, [sp, #4]
 800919e:	f000 f83f 	bl	8009220 <_vfiprintf_r>
 80091a2:	b002      	add	sp, #8
 80091a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80091a8:	b003      	add	sp, #12
 80091aa:	4770      	bx	lr
 80091ac:	20000198 	.word	0x20000198

080091b0 <abort>:
 80091b0:	b508      	push	{r3, lr}
 80091b2:	2006      	movs	r0, #6
 80091b4:	f000 fa08 	bl	80095c8 <raise>
 80091b8:	2001      	movs	r0, #1
 80091ba:	f7f8 fce3 	bl	8001b84 <_exit>

080091be <_malloc_usable_size_r>:
 80091be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091c2:	1f18      	subs	r0, r3, #4
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	bfbc      	itt	lt
 80091c8:	580b      	ldrlt	r3, [r1, r0]
 80091ca:	18c0      	addlt	r0, r0, r3
 80091cc:	4770      	bx	lr

080091ce <__sfputc_r>:
 80091ce:	6893      	ldr	r3, [r2, #8]
 80091d0:	3b01      	subs	r3, #1
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	b410      	push	{r4}
 80091d6:	6093      	str	r3, [r2, #8]
 80091d8:	da08      	bge.n	80091ec <__sfputc_r+0x1e>
 80091da:	6994      	ldr	r4, [r2, #24]
 80091dc:	42a3      	cmp	r3, r4
 80091de:	db01      	blt.n	80091e4 <__sfputc_r+0x16>
 80091e0:	290a      	cmp	r1, #10
 80091e2:	d103      	bne.n	80091ec <__sfputc_r+0x1e>
 80091e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091e8:	f000 b932 	b.w	8009450 <__swbuf_r>
 80091ec:	6813      	ldr	r3, [r2, #0]
 80091ee:	1c58      	adds	r0, r3, #1
 80091f0:	6010      	str	r0, [r2, #0]
 80091f2:	7019      	strb	r1, [r3, #0]
 80091f4:	4608      	mov	r0, r1
 80091f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091fa:	4770      	bx	lr

080091fc <__sfputs_r>:
 80091fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091fe:	4606      	mov	r6, r0
 8009200:	460f      	mov	r7, r1
 8009202:	4614      	mov	r4, r2
 8009204:	18d5      	adds	r5, r2, r3
 8009206:	42ac      	cmp	r4, r5
 8009208:	d101      	bne.n	800920e <__sfputs_r+0x12>
 800920a:	2000      	movs	r0, #0
 800920c:	e007      	b.n	800921e <__sfputs_r+0x22>
 800920e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009212:	463a      	mov	r2, r7
 8009214:	4630      	mov	r0, r6
 8009216:	f7ff ffda 	bl	80091ce <__sfputc_r>
 800921a:	1c43      	adds	r3, r0, #1
 800921c:	d1f3      	bne.n	8009206 <__sfputs_r+0xa>
 800921e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009220 <_vfiprintf_r>:
 8009220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009224:	460d      	mov	r5, r1
 8009226:	b09d      	sub	sp, #116	@ 0x74
 8009228:	4614      	mov	r4, r2
 800922a:	4698      	mov	r8, r3
 800922c:	4606      	mov	r6, r0
 800922e:	b118      	cbz	r0, 8009238 <_vfiprintf_r+0x18>
 8009230:	6a03      	ldr	r3, [r0, #32]
 8009232:	b90b      	cbnz	r3, 8009238 <_vfiprintf_r+0x18>
 8009234:	f7fe f976 	bl	8007524 <__sinit>
 8009238:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800923a:	07d9      	lsls	r1, r3, #31
 800923c:	d405      	bmi.n	800924a <_vfiprintf_r+0x2a>
 800923e:	89ab      	ldrh	r3, [r5, #12]
 8009240:	059a      	lsls	r2, r3, #22
 8009242:	d402      	bmi.n	800924a <_vfiprintf_r+0x2a>
 8009244:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009246:	f7fe fada 	bl	80077fe <__retarget_lock_acquire_recursive>
 800924a:	89ab      	ldrh	r3, [r5, #12]
 800924c:	071b      	lsls	r3, r3, #28
 800924e:	d501      	bpl.n	8009254 <_vfiprintf_r+0x34>
 8009250:	692b      	ldr	r3, [r5, #16]
 8009252:	b99b      	cbnz	r3, 800927c <_vfiprintf_r+0x5c>
 8009254:	4629      	mov	r1, r5
 8009256:	4630      	mov	r0, r6
 8009258:	f000 f938 	bl	80094cc <__swsetup_r>
 800925c:	b170      	cbz	r0, 800927c <_vfiprintf_r+0x5c>
 800925e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009260:	07dc      	lsls	r4, r3, #31
 8009262:	d504      	bpl.n	800926e <_vfiprintf_r+0x4e>
 8009264:	f04f 30ff 	mov.w	r0, #4294967295
 8009268:	b01d      	add	sp, #116	@ 0x74
 800926a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800926e:	89ab      	ldrh	r3, [r5, #12]
 8009270:	0598      	lsls	r0, r3, #22
 8009272:	d4f7      	bmi.n	8009264 <_vfiprintf_r+0x44>
 8009274:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009276:	f7fe fac3 	bl	8007800 <__retarget_lock_release_recursive>
 800927a:	e7f3      	b.n	8009264 <_vfiprintf_r+0x44>
 800927c:	2300      	movs	r3, #0
 800927e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009280:	2320      	movs	r3, #32
 8009282:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009286:	f8cd 800c 	str.w	r8, [sp, #12]
 800928a:	2330      	movs	r3, #48	@ 0x30
 800928c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800943c <_vfiprintf_r+0x21c>
 8009290:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009294:	f04f 0901 	mov.w	r9, #1
 8009298:	4623      	mov	r3, r4
 800929a:	469a      	mov	sl, r3
 800929c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092a0:	b10a      	cbz	r2, 80092a6 <_vfiprintf_r+0x86>
 80092a2:	2a25      	cmp	r2, #37	@ 0x25
 80092a4:	d1f9      	bne.n	800929a <_vfiprintf_r+0x7a>
 80092a6:	ebba 0b04 	subs.w	fp, sl, r4
 80092aa:	d00b      	beq.n	80092c4 <_vfiprintf_r+0xa4>
 80092ac:	465b      	mov	r3, fp
 80092ae:	4622      	mov	r2, r4
 80092b0:	4629      	mov	r1, r5
 80092b2:	4630      	mov	r0, r6
 80092b4:	f7ff ffa2 	bl	80091fc <__sfputs_r>
 80092b8:	3001      	adds	r0, #1
 80092ba:	f000 80a7 	beq.w	800940c <_vfiprintf_r+0x1ec>
 80092be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80092c0:	445a      	add	r2, fp
 80092c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80092c4:	f89a 3000 	ldrb.w	r3, [sl]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	f000 809f 	beq.w	800940c <_vfiprintf_r+0x1ec>
 80092ce:	2300      	movs	r3, #0
 80092d0:	f04f 32ff 	mov.w	r2, #4294967295
 80092d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092d8:	f10a 0a01 	add.w	sl, sl, #1
 80092dc:	9304      	str	r3, [sp, #16]
 80092de:	9307      	str	r3, [sp, #28]
 80092e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80092e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80092e6:	4654      	mov	r4, sl
 80092e8:	2205      	movs	r2, #5
 80092ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092ee:	4853      	ldr	r0, [pc, #332]	@ (800943c <_vfiprintf_r+0x21c>)
 80092f0:	f7f6 ff7e 	bl	80001f0 <memchr>
 80092f4:	9a04      	ldr	r2, [sp, #16]
 80092f6:	b9d8      	cbnz	r0, 8009330 <_vfiprintf_r+0x110>
 80092f8:	06d1      	lsls	r1, r2, #27
 80092fa:	bf44      	itt	mi
 80092fc:	2320      	movmi	r3, #32
 80092fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009302:	0713      	lsls	r3, r2, #28
 8009304:	bf44      	itt	mi
 8009306:	232b      	movmi	r3, #43	@ 0x2b
 8009308:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800930c:	f89a 3000 	ldrb.w	r3, [sl]
 8009310:	2b2a      	cmp	r3, #42	@ 0x2a
 8009312:	d015      	beq.n	8009340 <_vfiprintf_r+0x120>
 8009314:	9a07      	ldr	r2, [sp, #28]
 8009316:	4654      	mov	r4, sl
 8009318:	2000      	movs	r0, #0
 800931a:	f04f 0c0a 	mov.w	ip, #10
 800931e:	4621      	mov	r1, r4
 8009320:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009324:	3b30      	subs	r3, #48	@ 0x30
 8009326:	2b09      	cmp	r3, #9
 8009328:	d94b      	bls.n	80093c2 <_vfiprintf_r+0x1a2>
 800932a:	b1b0      	cbz	r0, 800935a <_vfiprintf_r+0x13a>
 800932c:	9207      	str	r2, [sp, #28]
 800932e:	e014      	b.n	800935a <_vfiprintf_r+0x13a>
 8009330:	eba0 0308 	sub.w	r3, r0, r8
 8009334:	fa09 f303 	lsl.w	r3, r9, r3
 8009338:	4313      	orrs	r3, r2
 800933a:	9304      	str	r3, [sp, #16]
 800933c:	46a2      	mov	sl, r4
 800933e:	e7d2      	b.n	80092e6 <_vfiprintf_r+0xc6>
 8009340:	9b03      	ldr	r3, [sp, #12]
 8009342:	1d19      	adds	r1, r3, #4
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	9103      	str	r1, [sp, #12]
 8009348:	2b00      	cmp	r3, #0
 800934a:	bfbb      	ittet	lt
 800934c:	425b      	neglt	r3, r3
 800934e:	f042 0202 	orrlt.w	r2, r2, #2
 8009352:	9307      	strge	r3, [sp, #28]
 8009354:	9307      	strlt	r3, [sp, #28]
 8009356:	bfb8      	it	lt
 8009358:	9204      	strlt	r2, [sp, #16]
 800935a:	7823      	ldrb	r3, [r4, #0]
 800935c:	2b2e      	cmp	r3, #46	@ 0x2e
 800935e:	d10a      	bne.n	8009376 <_vfiprintf_r+0x156>
 8009360:	7863      	ldrb	r3, [r4, #1]
 8009362:	2b2a      	cmp	r3, #42	@ 0x2a
 8009364:	d132      	bne.n	80093cc <_vfiprintf_r+0x1ac>
 8009366:	9b03      	ldr	r3, [sp, #12]
 8009368:	1d1a      	adds	r2, r3, #4
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	9203      	str	r2, [sp, #12]
 800936e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009372:	3402      	adds	r4, #2
 8009374:	9305      	str	r3, [sp, #20]
 8009376:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800944c <_vfiprintf_r+0x22c>
 800937a:	7821      	ldrb	r1, [r4, #0]
 800937c:	2203      	movs	r2, #3
 800937e:	4650      	mov	r0, sl
 8009380:	f7f6 ff36 	bl	80001f0 <memchr>
 8009384:	b138      	cbz	r0, 8009396 <_vfiprintf_r+0x176>
 8009386:	9b04      	ldr	r3, [sp, #16]
 8009388:	eba0 000a 	sub.w	r0, r0, sl
 800938c:	2240      	movs	r2, #64	@ 0x40
 800938e:	4082      	lsls	r2, r0
 8009390:	4313      	orrs	r3, r2
 8009392:	3401      	adds	r4, #1
 8009394:	9304      	str	r3, [sp, #16]
 8009396:	f814 1b01 	ldrb.w	r1, [r4], #1
 800939a:	4829      	ldr	r0, [pc, #164]	@ (8009440 <_vfiprintf_r+0x220>)
 800939c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80093a0:	2206      	movs	r2, #6
 80093a2:	f7f6 ff25 	bl	80001f0 <memchr>
 80093a6:	2800      	cmp	r0, #0
 80093a8:	d03f      	beq.n	800942a <_vfiprintf_r+0x20a>
 80093aa:	4b26      	ldr	r3, [pc, #152]	@ (8009444 <_vfiprintf_r+0x224>)
 80093ac:	bb1b      	cbnz	r3, 80093f6 <_vfiprintf_r+0x1d6>
 80093ae:	9b03      	ldr	r3, [sp, #12]
 80093b0:	3307      	adds	r3, #7
 80093b2:	f023 0307 	bic.w	r3, r3, #7
 80093b6:	3308      	adds	r3, #8
 80093b8:	9303      	str	r3, [sp, #12]
 80093ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093bc:	443b      	add	r3, r7
 80093be:	9309      	str	r3, [sp, #36]	@ 0x24
 80093c0:	e76a      	b.n	8009298 <_vfiprintf_r+0x78>
 80093c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80093c6:	460c      	mov	r4, r1
 80093c8:	2001      	movs	r0, #1
 80093ca:	e7a8      	b.n	800931e <_vfiprintf_r+0xfe>
 80093cc:	2300      	movs	r3, #0
 80093ce:	3401      	adds	r4, #1
 80093d0:	9305      	str	r3, [sp, #20]
 80093d2:	4619      	mov	r1, r3
 80093d4:	f04f 0c0a 	mov.w	ip, #10
 80093d8:	4620      	mov	r0, r4
 80093da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093de:	3a30      	subs	r2, #48	@ 0x30
 80093e0:	2a09      	cmp	r2, #9
 80093e2:	d903      	bls.n	80093ec <_vfiprintf_r+0x1cc>
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d0c6      	beq.n	8009376 <_vfiprintf_r+0x156>
 80093e8:	9105      	str	r1, [sp, #20]
 80093ea:	e7c4      	b.n	8009376 <_vfiprintf_r+0x156>
 80093ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80093f0:	4604      	mov	r4, r0
 80093f2:	2301      	movs	r3, #1
 80093f4:	e7f0      	b.n	80093d8 <_vfiprintf_r+0x1b8>
 80093f6:	ab03      	add	r3, sp, #12
 80093f8:	9300      	str	r3, [sp, #0]
 80093fa:	462a      	mov	r2, r5
 80093fc:	4b12      	ldr	r3, [pc, #72]	@ (8009448 <_vfiprintf_r+0x228>)
 80093fe:	a904      	add	r1, sp, #16
 8009400:	4630      	mov	r0, r6
 8009402:	f7fd fc4b 	bl	8006c9c <_printf_float>
 8009406:	4607      	mov	r7, r0
 8009408:	1c78      	adds	r0, r7, #1
 800940a:	d1d6      	bne.n	80093ba <_vfiprintf_r+0x19a>
 800940c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800940e:	07d9      	lsls	r1, r3, #31
 8009410:	d405      	bmi.n	800941e <_vfiprintf_r+0x1fe>
 8009412:	89ab      	ldrh	r3, [r5, #12]
 8009414:	059a      	lsls	r2, r3, #22
 8009416:	d402      	bmi.n	800941e <_vfiprintf_r+0x1fe>
 8009418:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800941a:	f7fe f9f1 	bl	8007800 <__retarget_lock_release_recursive>
 800941e:	89ab      	ldrh	r3, [r5, #12]
 8009420:	065b      	lsls	r3, r3, #25
 8009422:	f53f af1f 	bmi.w	8009264 <_vfiprintf_r+0x44>
 8009426:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009428:	e71e      	b.n	8009268 <_vfiprintf_r+0x48>
 800942a:	ab03      	add	r3, sp, #12
 800942c:	9300      	str	r3, [sp, #0]
 800942e:	462a      	mov	r2, r5
 8009430:	4b05      	ldr	r3, [pc, #20]	@ (8009448 <_vfiprintf_r+0x228>)
 8009432:	a904      	add	r1, sp, #16
 8009434:	4630      	mov	r0, r6
 8009436:	f7fd fec9 	bl	80071cc <_printf_i>
 800943a:	e7e4      	b.n	8009406 <_vfiprintf_r+0x1e6>
 800943c:	08009b60 	.word	0x08009b60
 8009440:	08009b6a 	.word	0x08009b6a
 8009444:	08006c9d 	.word	0x08006c9d
 8009448:	080091fd 	.word	0x080091fd
 800944c:	08009b66 	.word	0x08009b66

08009450 <__swbuf_r>:
 8009450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009452:	460e      	mov	r6, r1
 8009454:	4614      	mov	r4, r2
 8009456:	4605      	mov	r5, r0
 8009458:	b118      	cbz	r0, 8009462 <__swbuf_r+0x12>
 800945a:	6a03      	ldr	r3, [r0, #32]
 800945c:	b90b      	cbnz	r3, 8009462 <__swbuf_r+0x12>
 800945e:	f7fe f861 	bl	8007524 <__sinit>
 8009462:	69a3      	ldr	r3, [r4, #24]
 8009464:	60a3      	str	r3, [r4, #8]
 8009466:	89a3      	ldrh	r3, [r4, #12]
 8009468:	071a      	lsls	r2, r3, #28
 800946a:	d501      	bpl.n	8009470 <__swbuf_r+0x20>
 800946c:	6923      	ldr	r3, [r4, #16]
 800946e:	b943      	cbnz	r3, 8009482 <__swbuf_r+0x32>
 8009470:	4621      	mov	r1, r4
 8009472:	4628      	mov	r0, r5
 8009474:	f000 f82a 	bl	80094cc <__swsetup_r>
 8009478:	b118      	cbz	r0, 8009482 <__swbuf_r+0x32>
 800947a:	f04f 37ff 	mov.w	r7, #4294967295
 800947e:	4638      	mov	r0, r7
 8009480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009482:	6823      	ldr	r3, [r4, #0]
 8009484:	6922      	ldr	r2, [r4, #16]
 8009486:	1a98      	subs	r0, r3, r2
 8009488:	6963      	ldr	r3, [r4, #20]
 800948a:	b2f6      	uxtb	r6, r6
 800948c:	4283      	cmp	r3, r0
 800948e:	4637      	mov	r7, r6
 8009490:	dc05      	bgt.n	800949e <__swbuf_r+0x4e>
 8009492:	4621      	mov	r1, r4
 8009494:	4628      	mov	r0, r5
 8009496:	f7ff fdb7 	bl	8009008 <_fflush_r>
 800949a:	2800      	cmp	r0, #0
 800949c:	d1ed      	bne.n	800947a <__swbuf_r+0x2a>
 800949e:	68a3      	ldr	r3, [r4, #8]
 80094a0:	3b01      	subs	r3, #1
 80094a2:	60a3      	str	r3, [r4, #8]
 80094a4:	6823      	ldr	r3, [r4, #0]
 80094a6:	1c5a      	adds	r2, r3, #1
 80094a8:	6022      	str	r2, [r4, #0]
 80094aa:	701e      	strb	r6, [r3, #0]
 80094ac:	6962      	ldr	r2, [r4, #20]
 80094ae:	1c43      	adds	r3, r0, #1
 80094b0:	429a      	cmp	r2, r3
 80094b2:	d004      	beq.n	80094be <__swbuf_r+0x6e>
 80094b4:	89a3      	ldrh	r3, [r4, #12]
 80094b6:	07db      	lsls	r3, r3, #31
 80094b8:	d5e1      	bpl.n	800947e <__swbuf_r+0x2e>
 80094ba:	2e0a      	cmp	r6, #10
 80094bc:	d1df      	bne.n	800947e <__swbuf_r+0x2e>
 80094be:	4621      	mov	r1, r4
 80094c0:	4628      	mov	r0, r5
 80094c2:	f7ff fda1 	bl	8009008 <_fflush_r>
 80094c6:	2800      	cmp	r0, #0
 80094c8:	d0d9      	beq.n	800947e <__swbuf_r+0x2e>
 80094ca:	e7d6      	b.n	800947a <__swbuf_r+0x2a>

080094cc <__swsetup_r>:
 80094cc:	b538      	push	{r3, r4, r5, lr}
 80094ce:	4b29      	ldr	r3, [pc, #164]	@ (8009574 <__swsetup_r+0xa8>)
 80094d0:	4605      	mov	r5, r0
 80094d2:	6818      	ldr	r0, [r3, #0]
 80094d4:	460c      	mov	r4, r1
 80094d6:	b118      	cbz	r0, 80094e0 <__swsetup_r+0x14>
 80094d8:	6a03      	ldr	r3, [r0, #32]
 80094da:	b90b      	cbnz	r3, 80094e0 <__swsetup_r+0x14>
 80094dc:	f7fe f822 	bl	8007524 <__sinit>
 80094e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094e4:	0719      	lsls	r1, r3, #28
 80094e6:	d422      	bmi.n	800952e <__swsetup_r+0x62>
 80094e8:	06da      	lsls	r2, r3, #27
 80094ea:	d407      	bmi.n	80094fc <__swsetup_r+0x30>
 80094ec:	2209      	movs	r2, #9
 80094ee:	602a      	str	r2, [r5, #0]
 80094f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80094f4:	81a3      	strh	r3, [r4, #12]
 80094f6:	f04f 30ff 	mov.w	r0, #4294967295
 80094fa:	e033      	b.n	8009564 <__swsetup_r+0x98>
 80094fc:	0758      	lsls	r0, r3, #29
 80094fe:	d512      	bpl.n	8009526 <__swsetup_r+0x5a>
 8009500:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009502:	b141      	cbz	r1, 8009516 <__swsetup_r+0x4a>
 8009504:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009508:	4299      	cmp	r1, r3
 800950a:	d002      	beq.n	8009512 <__swsetup_r+0x46>
 800950c:	4628      	mov	r0, r5
 800950e:	f7fe ffd3 	bl	80084b8 <_free_r>
 8009512:	2300      	movs	r3, #0
 8009514:	6363      	str	r3, [r4, #52]	@ 0x34
 8009516:	89a3      	ldrh	r3, [r4, #12]
 8009518:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800951c:	81a3      	strh	r3, [r4, #12]
 800951e:	2300      	movs	r3, #0
 8009520:	6063      	str	r3, [r4, #4]
 8009522:	6923      	ldr	r3, [r4, #16]
 8009524:	6023      	str	r3, [r4, #0]
 8009526:	89a3      	ldrh	r3, [r4, #12]
 8009528:	f043 0308 	orr.w	r3, r3, #8
 800952c:	81a3      	strh	r3, [r4, #12]
 800952e:	6923      	ldr	r3, [r4, #16]
 8009530:	b94b      	cbnz	r3, 8009546 <__swsetup_r+0x7a>
 8009532:	89a3      	ldrh	r3, [r4, #12]
 8009534:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009538:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800953c:	d003      	beq.n	8009546 <__swsetup_r+0x7a>
 800953e:	4621      	mov	r1, r4
 8009540:	4628      	mov	r0, r5
 8009542:	f000 f883 	bl	800964c <__smakebuf_r>
 8009546:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800954a:	f013 0201 	ands.w	r2, r3, #1
 800954e:	d00a      	beq.n	8009566 <__swsetup_r+0x9a>
 8009550:	2200      	movs	r2, #0
 8009552:	60a2      	str	r2, [r4, #8]
 8009554:	6962      	ldr	r2, [r4, #20]
 8009556:	4252      	negs	r2, r2
 8009558:	61a2      	str	r2, [r4, #24]
 800955a:	6922      	ldr	r2, [r4, #16]
 800955c:	b942      	cbnz	r2, 8009570 <__swsetup_r+0xa4>
 800955e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009562:	d1c5      	bne.n	80094f0 <__swsetup_r+0x24>
 8009564:	bd38      	pop	{r3, r4, r5, pc}
 8009566:	0799      	lsls	r1, r3, #30
 8009568:	bf58      	it	pl
 800956a:	6962      	ldrpl	r2, [r4, #20]
 800956c:	60a2      	str	r2, [r4, #8]
 800956e:	e7f4      	b.n	800955a <__swsetup_r+0x8e>
 8009570:	2000      	movs	r0, #0
 8009572:	e7f7      	b.n	8009564 <__swsetup_r+0x98>
 8009574:	20000198 	.word	0x20000198

08009578 <_raise_r>:
 8009578:	291f      	cmp	r1, #31
 800957a:	b538      	push	{r3, r4, r5, lr}
 800957c:	4605      	mov	r5, r0
 800957e:	460c      	mov	r4, r1
 8009580:	d904      	bls.n	800958c <_raise_r+0x14>
 8009582:	2316      	movs	r3, #22
 8009584:	6003      	str	r3, [r0, #0]
 8009586:	f04f 30ff 	mov.w	r0, #4294967295
 800958a:	bd38      	pop	{r3, r4, r5, pc}
 800958c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800958e:	b112      	cbz	r2, 8009596 <_raise_r+0x1e>
 8009590:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009594:	b94b      	cbnz	r3, 80095aa <_raise_r+0x32>
 8009596:	4628      	mov	r0, r5
 8009598:	f000 f830 	bl	80095fc <_getpid_r>
 800959c:	4622      	mov	r2, r4
 800959e:	4601      	mov	r1, r0
 80095a0:	4628      	mov	r0, r5
 80095a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095a6:	f000 b817 	b.w	80095d8 <_kill_r>
 80095aa:	2b01      	cmp	r3, #1
 80095ac:	d00a      	beq.n	80095c4 <_raise_r+0x4c>
 80095ae:	1c59      	adds	r1, r3, #1
 80095b0:	d103      	bne.n	80095ba <_raise_r+0x42>
 80095b2:	2316      	movs	r3, #22
 80095b4:	6003      	str	r3, [r0, #0]
 80095b6:	2001      	movs	r0, #1
 80095b8:	e7e7      	b.n	800958a <_raise_r+0x12>
 80095ba:	2100      	movs	r1, #0
 80095bc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80095c0:	4620      	mov	r0, r4
 80095c2:	4798      	blx	r3
 80095c4:	2000      	movs	r0, #0
 80095c6:	e7e0      	b.n	800958a <_raise_r+0x12>

080095c8 <raise>:
 80095c8:	4b02      	ldr	r3, [pc, #8]	@ (80095d4 <raise+0xc>)
 80095ca:	4601      	mov	r1, r0
 80095cc:	6818      	ldr	r0, [r3, #0]
 80095ce:	f7ff bfd3 	b.w	8009578 <_raise_r>
 80095d2:	bf00      	nop
 80095d4:	20000198 	.word	0x20000198

080095d8 <_kill_r>:
 80095d8:	b538      	push	{r3, r4, r5, lr}
 80095da:	4d07      	ldr	r5, [pc, #28]	@ (80095f8 <_kill_r+0x20>)
 80095dc:	2300      	movs	r3, #0
 80095de:	4604      	mov	r4, r0
 80095e0:	4608      	mov	r0, r1
 80095e2:	4611      	mov	r1, r2
 80095e4:	602b      	str	r3, [r5, #0]
 80095e6:	f7f8 fabd 	bl	8001b64 <_kill>
 80095ea:	1c43      	adds	r3, r0, #1
 80095ec:	d102      	bne.n	80095f4 <_kill_r+0x1c>
 80095ee:	682b      	ldr	r3, [r5, #0]
 80095f0:	b103      	cbz	r3, 80095f4 <_kill_r+0x1c>
 80095f2:	6023      	str	r3, [r4, #0]
 80095f4:	bd38      	pop	{r3, r4, r5, pc}
 80095f6:	bf00      	nop
 80095f8:	20001148 	.word	0x20001148

080095fc <_getpid_r>:
 80095fc:	f7f8 baaa 	b.w	8001b54 <_getpid>

08009600 <__swhatbuf_r>:
 8009600:	b570      	push	{r4, r5, r6, lr}
 8009602:	460c      	mov	r4, r1
 8009604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009608:	2900      	cmp	r1, #0
 800960a:	b096      	sub	sp, #88	@ 0x58
 800960c:	4615      	mov	r5, r2
 800960e:	461e      	mov	r6, r3
 8009610:	da0d      	bge.n	800962e <__swhatbuf_r+0x2e>
 8009612:	89a3      	ldrh	r3, [r4, #12]
 8009614:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009618:	f04f 0100 	mov.w	r1, #0
 800961c:	bf14      	ite	ne
 800961e:	2340      	movne	r3, #64	@ 0x40
 8009620:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009624:	2000      	movs	r0, #0
 8009626:	6031      	str	r1, [r6, #0]
 8009628:	602b      	str	r3, [r5, #0]
 800962a:	b016      	add	sp, #88	@ 0x58
 800962c:	bd70      	pop	{r4, r5, r6, pc}
 800962e:	466a      	mov	r2, sp
 8009630:	f000 f848 	bl	80096c4 <_fstat_r>
 8009634:	2800      	cmp	r0, #0
 8009636:	dbec      	blt.n	8009612 <__swhatbuf_r+0x12>
 8009638:	9901      	ldr	r1, [sp, #4]
 800963a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800963e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009642:	4259      	negs	r1, r3
 8009644:	4159      	adcs	r1, r3
 8009646:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800964a:	e7eb      	b.n	8009624 <__swhatbuf_r+0x24>

0800964c <__smakebuf_r>:
 800964c:	898b      	ldrh	r3, [r1, #12]
 800964e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009650:	079d      	lsls	r5, r3, #30
 8009652:	4606      	mov	r6, r0
 8009654:	460c      	mov	r4, r1
 8009656:	d507      	bpl.n	8009668 <__smakebuf_r+0x1c>
 8009658:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800965c:	6023      	str	r3, [r4, #0]
 800965e:	6123      	str	r3, [r4, #16]
 8009660:	2301      	movs	r3, #1
 8009662:	6163      	str	r3, [r4, #20]
 8009664:	b003      	add	sp, #12
 8009666:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009668:	ab01      	add	r3, sp, #4
 800966a:	466a      	mov	r2, sp
 800966c:	f7ff ffc8 	bl	8009600 <__swhatbuf_r>
 8009670:	9f00      	ldr	r7, [sp, #0]
 8009672:	4605      	mov	r5, r0
 8009674:	4639      	mov	r1, r7
 8009676:	4630      	mov	r0, r6
 8009678:	f7fd f9e4 	bl	8006a44 <_malloc_r>
 800967c:	b948      	cbnz	r0, 8009692 <__smakebuf_r+0x46>
 800967e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009682:	059a      	lsls	r2, r3, #22
 8009684:	d4ee      	bmi.n	8009664 <__smakebuf_r+0x18>
 8009686:	f023 0303 	bic.w	r3, r3, #3
 800968a:	f043 0302 	orr.w	r3, r3, #2
 800968e:	81a3      	strh	r3, [r4, #12]
 8009690:	e7e2      	b.n	8009658 <__smakebuf_r+0xc>
 8009692:	89a3      	ldrh	r3, [r4, #12]
 8009694:	6020      	str	r0, [r4, #0]
 8009696:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800969a:	81a3      	strh	r3, [r4, #12]
 800969c:	9b01      	ldr	r3, [sp, #4]
 800969e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80096a2:	b15b      	cbz	r3, 80096bc <__smakebuf_r+0x70>
 80096a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096a8:	4630      	mov	r0, r6
 80096aa:	f000 f81d 	bl	80096e8 <_isatty_r>
 80096ae:	b128      	cbz	r0, 80096bc <__smakebuf_r+0x70>
 80096b0:	89a3      	ldrh	r3, [r4, #12]
 80096b2:	f023 0303 	bic.w	r3, r3, #3
 80096b6:	f043 0301 	orr.w	r3, r3, #1
 80096ba:	81a3      	strh	r3, [r4, #12]
 80096bc:	89a3      	ldrh	r3, [r4, #12]
 80096be:	431d      	orrs	r5, r3
 80096c0:	81a5      	strh	r5, [r4, #12]
 80096c2:	e7cf      	b.n	8009664 <__smakebuf_r+0x18>

080096c4 <_fstat_r>:
 80096c4:	b538      	push	{r3, r4, r5, lr}
 80096c6:	4d07      	ldr	r5, [pc, #28]	@ (80096e4 <_fstat_r+0x20>)
 80096c8:	2300      	movs	r3, #0
 80096ca:	4604      	mov	r4, r0
 80096cc:	4608      	mov	r0, r1
 80096ce:	4611      	mov	r1, r2
 80096d0:	602b      	str	r3, [r5, #0]
 80096d2:	f7f8 faa7 	bl	8001c24 <_fstat>
 80096d6:	1c43      	adds	r3, r0, #1
 80096d8:	d102      	bne.n	80096e0 <_fstat_r+0x1c>
 80096da:	682b      	ldr	r3, [r5, #0]
 80096dc:	b103      	cbz	r3, 80096e0 <_fstat_r+0x1c>
 80096de:	6023      	str	r3, [r4, #0]
 80096e0:	bd38      	pop	{r3, r4, r5, pc}
 80096e2:	bf00      	nop
 80096e4:	20001148 	.word	0x20001148

080096e8 <_isatty_r>:
 80096e8:	b538      	push	{r3, r4, r5, lr}
 80096ea:	4d06      	ldr	r5, [pc, #24]	@ (8009704 <_isatty_r+0x1c>)
 80096ec:	2300      	movs	r3, #0
 80096ee:	4604      	mov	r4, r0
 80096f0:	4608      	mov	r0, r1
 80096f2:	602b      	str	r3, [r5, #0]
 80096f4:	f7f8 faa6 	bl	8001c44 <_isatty>
 80096f8:	1c43      	adds	r3, r0, #1
 80096fa:	d102      	bne.n	8009702 <_isatty_r+0x1a>
 80096fc:	682b      	ldr	r3, [r5, #0]
 80096fe:	b103      	cbz	r3, 8009702 <_isatty_r+0x1a>
 8009700:	6023      	str	r3, [r4, #0]
 8009702:	bd38      	pop	{r3, r4, r5, pc}
 8009704:	20001148 	.word	0x20001148

08009708 <_init>:
 8009708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800970a:	bf00      	nop
 800970c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800970e:	bc08      	pop	{r3}
 8009710:	469e      	mov	lr, r3
 8009712:	4770      	bx	lr

08009714 <_fini>:
 8009714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009716:	bf00      	nop
 8009718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800971a:	bc08      	pop	{r3}
 800971c:	469e      	mov	lr, r3
 800971e:	4770      	bx	lr
