
BASELIQ_100.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009618  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a8  080097c8  080097c8  0000a7c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d70  08009d70  0000b354  2**0
                  CONTENTS
  4 .ARM          00000008  08009d70  08009d70  0000ad70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d78  08009d78  0000b354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d78  08009d78  0000ad78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d7c  08009d7c  0000ad7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  08009d80  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000dfc  20000354  0800a0d4  0000b354  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001150  0800a0d4  0000c150  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b354  2**0
                  CONTENTS, READONLY
 12 .debug_info   000164ce  00000000  00000000  0000b384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039aa  00000000  00000000  00021852  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001208  00000000  00000000  00025200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dad  00000000  00000000  00026408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ce23  00000000  00000000  000271b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019a54  00000000  00000000  00053fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fea8c  00000000  00000000  0006da2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016c4b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005adc  00000000  00000000  0016c4fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00171fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000354 	.word	0x20000354
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080097b0 	.word	0x080097b0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000358 	.word	0x20000358
 80001ec:	080097b0 	.word	0x080097b0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b96a 	b.w	8000eb4 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	460c      	mov	r4, r1
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d14e      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c04:	4694      	mov	ip, r2
 8000c06:	458c      	cmp	ip, r1
 8000c08:	4686      	mov	lr, r0
 8000c0a:	fab2 f282 	clz	r2, r2
 8000c0e:	d962      	bls.n	8000cd6 <__udivmoddi4+0xde>
 8000c10:	b14a      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c12:	f1c2 0320 	rsb	r3, r2, #32
 8000c16:	4091      	lsls	r1, r2
 8000c18:	fa20 f303 	lsr.w	r3, r0, r3
 8000c1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c20:	4319      	orrs	r1, r3
 8000c22:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c2a:	fa1f f68c 	uxth.w	r6, ip
 8000c2e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c36:	fb07 1114 	mls	r1, r7, r4, r1
 8000c3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3e:	fb04 f106 	mul.w	r1, r4, r6
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c4e:	f080 8112 	bcs.w	8000e76 <__udivmoddi4+0x27e>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 810f 	bls.w	8000e76 <__udivmoddi4+0x27e>
 8000c58:	3c02      	subs	r4, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a59      	subs	r1, r3, r1
 8000c5e:	fa1f f38e 	uxth.w	r3, lr
 8000c62:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c66:	fb07 1110 	mls	r1, r7, r0, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb00 f606 	mul.w	r6, r0, r6
 8000c72:	429e      	cmp	r6, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x94>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c7e:	f080 80fc 	bcs.w	8000e7a <__udivmoddi4+0x282>
 8000c82:	429e      	cmp	r6, r3
 8000c84:	f240 80f9 	bls.w	8000e7a <__udivmoddi4+0x282>
 8000c88:	4463      	add	r3, ip
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	1b9b      	subs	r3, r3, r6
 8000c8e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c92:	2100      	movs	r1, #0
 8000c94:	b11d      	cbz	r5, 8000c9e <__udivmoddi4+0xa6>
 8000c96:	40d3      	lsrs	r3, r2
 8000c98:	2200      	movs	r2, #0
 8000c9a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d905      	bls.n	8000cb2 <__udivmoddi4+0xba>
 8000ca6:	b10d      	cbz	r5, 8000cac <__udivmoddi4+0xb4>
 8000ca8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cac:	2100      	movs	r1, #0
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e7f5      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000cb2:	fab3 f183 	clz	r1, r3
 8000cb6:	2900      	cmp	r1, #0
 8000cb8:	d146      	bne.n	8000d48 <__udivmoddi4+0x150>
 8000cba:	42a3      	cmp	r3, r4
 8000cbc:	d302      	bcc.n	8000cc4 <__udivmoddi4+0xcc>
 8000cbe:	4290      	cmp	r0, r2
 8000cc0:	f0c0 80f0 	bcc.w	8000ea4 <__udivmoddi4+0x2ac>
 8000cc4:	1a86      	subs	r6, r0, r2
 8000cc6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cca:	2001      	movs	r0, #1
 8000ccc:	2d00      	cmp	r5, #0
 8000cce:	d0e6      	beq.n	8000c9e <__udivmoddi4+0xa6>
 8000cd0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cd4:	e7e3      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	f040 8090 	bne.w	8000dfc <__udivmoddi4+0x204>
 8000cdc:	eba1 040c 	sub.w	r4, r1, ip
 8000ce0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce4:	fa1f f78c 	uxth.w	r7, ip
 8000ce8:	2101      	movs	r1, #1
 8000cea:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cf6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cfa:	fb07 f006 	mul.w	r0, r7, r6
 8000cfe:	4298      	cmp	r0, r3
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x11c>
 8000d02:	eb1c 0303 	adds.w	r3, ip, r3
 8000d06:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x11a>
 8000d0c:	4298      	cmp	r0, r3
 8000d0e:	f200 80cd 	bhi.w	8000eac <__udivmoddi4+0x2b4>
 8000d12:	4626      	mov	r6, r4
 8000d14:	1a1c      	subs	r4, r3, r0
 8000d16:	fa1f f38e 	uxth.w	r3, lr
 8000d1a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d1e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d26:	fb00 f707 	mul.w	r7, r0, r7
 8000d2a:	429f      	cmp	r7, r3
 8000d2c:	d908      	bls.n	8000d40 <__udivmoddi4+0x148>
 8000d2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d32:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d36:	d202      	bcs.n	8000d3e <__udivmoddi4+0x146>
 8000d38:	429f      	cmp	r7, r3
 8000d3a:	f200 80b0 	bhi.w	8000e9e <__udivmoddi4+0x2a6>
 8000d3e:	4620      	mov	r0, r4
 8000d40:	1bdb      	subs	r3, r3, r7
 8000d42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d46:	e7a5      	b.n	8000c94 <__udivmoddi4+0x9c>
 8000d48:	f1c1 0620 	rsb	r6, r1, #32
 8000d4c:	408b      	lsls	r3, r1
 8000d4e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d52:	431f      	orrs	r7, r3
 8000d54:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d58:	fa04 f301 	lsl.w	r3, r4, r1
 8000d5c:	ea43 030c 	orr.w	r3, r3, ip
 8000d60:	40f4      	lsrs	r4, r6
 8000d62:	fa00 f801 	lsl.w	r8, r0, r1
 8000d66:	0c38      	lsrs	r0, r7, #16
 8000d68:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d6c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d70:	fa1f fc87 	uxth.w	ip, r7
 8000d74:	fb00 441e 	mls	r4, r0, lr, r4
 8000d78:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d7c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d80:	45a1      	cmp	r9, r4
 8000d82:	fa02 f201 	lsl.w	r2, r2, r1
 8000d86:	d90a      	bls.n	8000d9e <__udivmoddi4+0x1a6>
 8000d88:	193c      	adds	r4, r7, r4
 8000d8a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d8e:	f080 8084 	bcs.w	8000e9a <__udivmoddi4+0x2a2>
 8000d92:	45a1      	cmp	r9, r4
 8000d94:	f240 8081 	bls.w	8000e9a <__udivmoddi4+0x2a2>
 8000d98:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d9c:	443c      	add	r4, r7
 8000d9e:	eba4 0409 	sub.w	r4, r4, r9
 8000da2:	fa1f f983 	uxth.w	r9, r3
 8000da6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000daa:	fb00 4413 	mls	r4, r0, r3, r4
 8000dae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000db2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000db6:	45a4      	cmp	ip, r4
 8000db8:	d907      	bls.n	8000dca <__udivmoddi4+0x1d2>
 8000dba:	193c      	adds	r4, r7, r4
 8000dbc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dc0:	d267      	bcs.n	8000e92 <__udivmoddi4+0x29a>
 8000dc2:	45a4      	cmp	ip, r4
 8000dc4:	d965      	bls.n	8000e92 <__udivmoddi4+0x29a>
 8000dc6:	3b02      	subs	r3, #2
 8000dc8:	443c      	add	r4, r7
 8000dca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dce:	fba0 9302 	umull	r9, r3, r0, r2
 8000dd2:	eba4 040c 	sub.w	r4, r4, ip
 8000dd6:	429c      	cmp	r4, r3
 8000dd8:	46ce      	mov	lr, r9
 8000dda:	469c      	mov	ip, r3
 8000ddc:	d351      	bcc.n	8000e82 <__udivmoddi4+0x28a>
 8000dde:	d04e      	beq.n	8000e7e <__udivmoddi4+0x286>
 8000de0:	b155      	cbz	r5, 8000df8 <__udivmoddi4+0x200>
 8000de2:	ebb8 030e 	subs.w	r3, r8, lr
 8000de6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dea:	fa04 f606 	lsl.w	r6, r4, r6
 8000dee:	40cb      	lsrs	r3, r1
 8000df0:	431e      	orrs	r6, r3
 8000df2:	40cc      	lsrs	r4, r1
 8000df4:	e9c5 6400 	strd	r6, r4, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	e750      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000dfc:	f1c2 0320 	rsb	r3, r2, #32
 8000e00:	fa20 f103 	lsr.w	r1, r0, r3
 8000e04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e08:	fa24 f303 	lsr.w	r3, r4, r3
 8000e0c:	4094      	lsls	r4, r2
 8000e0e:	430c      	orrs	r4, r1
 8000e10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e18:	fa1f f78c 	uxth.w	r7, ip
 8000e1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e20:	fb08 3110 	mls	r1, r8, r0, r3
 8000e24:	0c23      	lsrs	r3, r4, #16
 8000e26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e2a:	fb00 f107 	mul.w	r1, r0, r7
 8000e2e:	4299      	cmp	r1, r3
 8000e30:	d908      	bls.n	8000e44 <__udivmoddi4+0x24c>
 8000e32:	eb1c 0303 	adds.w	r3, ip, r3
 8000e36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e3a:	d22c      	bcs.n	8000e96 <__udivmoddi4+0x29e>
 8000e3c:	4299      	cmp	r1, r3
 8000e3e:	d92a      	bls.n	8000e96 <__udivmoddi4+0x29e>
 8000e40:	3802      	subs	r0, #2
 8000e42:	4463      	add	r3, ip
 8000e44:	1a5b      	subs	r3, r3, r1
 8000e46:	b2a4      	uxth	r4, r4
 8000e48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e54:	fb01 f307 	mul.w	r3, r1, r7
 8000e58:	42a3      	cmp	r3, r4
 8000e5a:	d908      	bls.n	8000e6e <__udivmoddi4+0x276>
 8000e5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e64:	d213      	bcs.n	8000e8e <__udivmoddi4+0x296>
 8000e66:	42a3      	cmp	r3, r4
 8000e68:	d911      	bls.n	8000e8e <__udivmoddi4+0x296>
 8000e6a:	3902      	subs	r1, #2
 8000e6c:	4464      	add	r4, ip
 8000e6e:	1ae4      	subs	r4, r4, r3
 8000e70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e74:	e739      	b.n	8000cea <__udivmoddi4+0xf2>
 8000e76:	4604      	mov	r4, r0
 8000e78:	e6f0      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	e706      	b.n	8000c8c <__udivmoddi4+0x94>
 8000e7e:	45c8      	cmp	r8, r9
 8000e80:	d2ae      	bcs.n	8000de0 <__udivmoddi4+0x1e8>
 8000e82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e8a:	3801      	subs	r0, #1
 8000e8c:	e7a8      	b.n	8000de0 <__udivmoddi4+0x1e8>
 8000e8e:	4631      	mov	r1, r6
 8000e90:	e7ed      	b.n	8000e6e <__udivmoddi4+0x276>
 8000e92:	4603      	mov	r3, r0
 8000e94:	e799      	b.n	8000dca <__udivmoddi4+0x1d2>
 8000e96:	4630      	mov	r0, r6
 8000e98:	e7d4      	b.n	8000e44 <__udivmoddi4+0x24c>
 8000e9a:	46d6      	mov	lr, sl
 8000e9c:	e77f      	b.n	8000d9e <__udivmoddi4+0x1a6>
 8000e9e:	4463      	add	r3, ip
 8000ea0:	3802      	subs	r0, #2
 8000ea2:	e74d      	b.n	8000d40 <__udivmoddi4+0x148>
 8000ea4:	4606      	mov	r6, r0
 8000ea6:	4623      	mov	r3, r4
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	e70f      	b.n	8000ccc <__udivmoddi4+0xd4>
 8000eac:	3e02      	subs	r6, #2
 8000eae:	4463      	add	r3, ip
 8000eb0:	e730      	b.n	8000d14 <__udivmoddi4+0x11c>
 8000eb2:	bf00      	nop

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <GNSSCom_Init>:

GNSSCom_HandleTypeDef hGNSSCom;
OutputType type = ASCII;
OutputProtocol protocol = NMEA;

void GNSSCom_Init(UART_HandleTypeDef* huart,UART_HandleTypeDef* huartDebug){
 8000eb8:	b5b0      	push	{r4, r5, r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]
	hGNSSCom.huart = huart;
 8000ec2:	4a18      	ldr	r2, [pc, #96]	@ (8000f24 <GNSSCom_Init+0x6c>)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6013      	str	r3, [r2, #0]
	hGNSSCom.huartDebug = huartDebug;
 8000ec8:	4a16      	ldr	r2, [pc, #88]	@ (8000f24 <GNSSCom_Init+0x6c>)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	6053      	str	r3, [r2, #4]

	memcpy(hGNSSCom.RxBuffer, NULL , UART_RX_BUFFER_SIZE);
 8000ece:	4b15      	ldr	r3, [pc, #84]	@ (8000f24 <GNSSCom_Init+0x6c>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	3308      	adds	r3, #8
 8000ed4:	4611      	mov	r1, r2
 8000ed6:	22c8      	movs	r2, #200	@ 0xc8
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f006 fce4 	bl	80078a6 <memcpy>
	memcpy(hGNSSCom.TxBuffer, NULL, UART_TX_BUFFER_SIZE);
 8000ede:	4b11      	ldr	r3, [pc, #68]	@ (8000f24 <GNSSCom_Init+0x6c>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f103 04d0 	add.w	r4, r3, #208	@ 0xd0
 8000ee6:	4615      	mov	r5, r2
 8000ee8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ef0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ef2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ef4:	682b      	ldr	r3, [r5, #0]
 8000ef6:	8023      	strh	r3, [r4, #0]
	memcpy(hGNSSCom.DebugBuffer, NULL, UART_DEBUG_BUFFER_SIZE);
 8000ef8:	4b0a      	ldr	r3, [pc, #40]	@ (8000f24 <GNSSCom_Init+0x6c>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8000f00:	4611      	mov	r1, r2
 8000f02:	22c8      	movs	r2, #200	@ 0xc8
 8000f04:	4618      	mov	r0, r3
 8000f06:	f006 fcce 	bl	80078a6 <memcpy>
	GNSSCom_UartActivate(&hGNSSCom);
 8000f0a:	4806      	ldr	r0, [pc, #24]	@ (8000f24 <GNSSCom_Init+0x6c>)
 8000f0c:	f000 f80c 	bl	8000f28 <GNSSCom_UartActivate>
	HAL_Delay(5000); //En theorie il suffit d attendre la reception du premier msg UART pour envoyer
 8000f10:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000f14:	f001 fd2c 	bl	8002970 <HAL_Delay>
	GNSSCom_Send_SetVal();
 8000f18:	f000 f816 	bl	8000f48 <GNSSCom_Send_SetVal>
}
 8000f1c:	bf00      	nop
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bdb0      	pop	{r4, r5, r7, pc}
 8000f24:	20000370 	.word	0x20000370

08000f28 <GNSSCom_UartActivate>:

void GNSSCom_UartActivate(GNSSCom_HandleTypeDef* hGNSS){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(hGNSS->huart, hGNSS->RxBuffer, UART_RX_BUFFER_SIZE);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6818      	ldr	r0, [r3, #0]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3308      	adds	r3, #8
 8000f38:	22c8      	movs	r2, #200	@ 0xc8
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	f004 f818 	bl	8004f70 <HAL_UART_Receive_IT>
}
 8000f40:	bf00      	nop
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <GNSSCom_Send_SetVal>:

void GNSSCom_Send_SetVal(void){
 8000f48:	b5b0      	push	{r4, r5, r7, lr}
 8000f4a:	b0a2      	sub	sp, #136	@ 0x88
 8000f4c:	af00      	add	r7, sp, #0
	const char message1[] = "\r\t\t\n...Message1...\r\n";
 8000f4e:	4b7d      	ldr	r3, [pc, #500]	@ (8001144 <GNSSCom_Send_SetVal+0x1fc>)
 8000f50:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 8000f54:	461d      	mov	r5, r3
 8000f56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f5a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f5e:	6020      	str	r0, [r4, #0]
 8000f60:	3404      	adds	r4, #4
 8000f62:	7021      	strb	r1, [r4, #0]
	const char message2[] = "\r\t\t\n...Message2...\r\n";
 8000f64:	4b78      	ldr	r3, [pc, #480]	@ (8001148 <GNSSCom_Send_SetVal+0x200>)
 8000f66:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8000f6a:	461d      	mov	r5, r3
 8000f6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f70:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f74:	6020      	str	r0, [r4, #0]
 8000f76:	3404      	adds	r4, #4
 8000f78:	7021      	strb	r1, [r4, #0]
	const char message3[] = "\r\t\t...Message3...\r\n";
 8000f7a:	4b74      	ldr	r3, [pc, #464]	@ (800114c <GNSSCom_Send_SetVal+0x204>)
 8000f7c:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 8000f80:	461d      	mov	r5, r3
 8000f82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f86:	682b      	ldr	r3, [r5, #0]
 8000f88:	6023      	str	r3, [r4, #0]
	const char message4[] = "\r\t\t...Message4...\r\n";
 8000f8a:	4b71      	ldr	r3, [pc, #452]	@ (8001150 <GNSSCom_Send_SetVal+0x208>)
 8000f8c:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8000f90:	461d      	mov	r5, r3
 8000f92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f96:	682b      	ldr	r3, [r5, #0]
 8000f98:	6023      	str	r3, [r4, #0]
	const char message5[] = "\r\t\t...Message5...\r\n";
 8000f9a:	4b6e      	ldr	r3, [pc, #440]	@ (8001154 <GNSSCom_Send_SetVal+0x20c>)
 8000f9c:	f107 041c 	add.w	r4, r7, #28
 8000fa0:	461d      	mov	r5, r3
 8000fa2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fa4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fa6:	682b      	ldr	r3, [r5, #0]
 8000fa8:	6023      	str	r3, [r4, #0]
	const char messagetest[] = "\r\t\t...Message TEST...\r\n";
 8000faa:	4b6b      	ldr	r3, [pc, #428]	@ (8001158 <GNSSCom_Send_SetVal+0x210>)
 8000fac:	1d3c      	adds	r4, r7, #4
 8000fae:	461d      	mov	r5, r3
 8000fb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fb4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000fb8:	e884 0003 	stmia.w	r4, {r0, r1}
	//const char messageEnd[] = "\r\t\t...END...\r\n";
	HAL_UART_Transmit(hGNSSCom.huartDebug, (uint8_t*)message1,sizeof(message1),HAL_MAX_DELAY);
 8000fbc:	4b67      	ldr	r3, [pc, #412]	@ (800115c <GNSSCom_Send_SetVal+0x214>)
 8000fbe:	6858      	ldr	r0, [r3, #4]
 8000fc0:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8000fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc8:	2215      	movs	r2, #21
 8000fca:	f003 ff48 	bl	8004e5e <HAL_UART_Transmit>

	HAL_UART_Transmit(hGNSSCom.huart, commandSetGNSS_Config,sizeof(commandSetGNSS_Config),HAL_MAX_DELAY);
 8000fce:	4b63      	ldr	r3, [pc, #396]	@ (800115c <GNSSCom_Send_SetVal+0x214>)
 8000fd0:	6818      	ldr	r0, [r3, #0]
 8000fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd6:	2284      	movs	r2, #132	@ 0x84
 8000fd8:	4961      	ldr	r1, [pc, #388]	@ (8001160 <GNSSCom_Send_SetVal+0x218>)
 8000fda:	f003 ff40 	bl	8004e5e <HAL_UART_Transmit>
	memcpy(hGNSSCom.DebugBuffer,commandSetGNSS_Config,sizeof(commandSetGNSS_Config));
 8000fde:	4b5f      	ldr	r3, [pc, #380]	@ (800115c <GNSSCom_Send_SetVal+0x214>)
 8000fe0:	4a5f      	ldr	r2, [pc, #380]	@ (8001160 <GNSSCom_Send_SetVal+0x218>)
 8000fe2:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8000fe6:	4611      	mov	r1, r2
 8000fe8:	2284      	movs	r2, #132	@ 0x84
 8000fea:	4618      	mov	r0, r3
 8000fec:	f006 fc5b 	bl	80078a6 <memcpy>
	GNSSCom_ReceiveDebug();
 8000ff0:	f000 f8c2 	bl	8001178 <GNSSCom_ReceiveDebug>

	HAL_UART_Transmit(hGNSSCom.huartDebug, (uint8_t*)message2,sizeof(message2),HAL_MAX_DELAY);
 8000ff4:	4b59      	ldr	r3, [pc, #356]	@ (800115c <GNSSCom_Send_SetVal+0x214>)
 8000ff6:	6858      	ldr	r0, [r3, #4]
 8000ff8:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8000ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8001000:	2215      	movs	r2, #21
 8001002:	f003 ff2c 	bl	8004e5e <HAL_UART_Transmit>

	HAL_UART_Transmit(hGNSSCom.huart, commandUart1Ouput,sizeof(commandUart1Ouput),HAL_MAX_DELAY);
 8001006:	4b55      	ldr	r3, [pc, #340]	@ (800115c <GNSSCom_Send_SetVal+0x214>)
 8001008:	6818      	ldr	r0, [r3, #0]
 800100a:	f04f 33ff 	mov.w	r3, #4294967295
 800100e:	221b      	movs	r2, #27
 8001010:	4954      	ldr	r1, [pc, #336]	@ (8001164 <GNSSCom_Send_SetVal+0x21c>)
 8001012:	f003 ff24 	bl	8004e5e <HAL_UART_Transmit>
	memcpy(hGNSSCom.DebugBuffer,commandUart1Ouput,sizeof(commandUart1Ouput));
 8001016:	4b51      	ldr	r3, [pc, #324]	@ (800115c <GNSSCom_Send_SetVal+0x214>)
 8001018:	4a52      	ldr	r2, [pc, #328]	@ (8001164 <GNSSCom_Send_SetVal+0x21c>)
 800101a:	f503 7581 	add.w	r5, r3, #258	@ 0x102
 800101e:	4614      	mov	r4, r2
 8001020:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001022:	6028      	str	r0, [r5, #0]
 8001024:	6069      	str	r1, [r5, #4]
 8001026:	60aa      	str	r2, [r5, #8]
 8001028:	60eb      	str	r3, [r5, #12]
 800102a:	cc03      	ldmia	r4!, {r0, r1}
 800102c:	6128      	str	r0, [r5, #16]
 800102e:	6169      	str	r1, [r5, #20]
 8001030:	8823      	ldrh	r3, [r4, #0]
 8001032:	78a2      	ldrb	r2, [r4, #2]
 8001034:	832b      	strh	r3, [r5, #24]
 8001036:	4613      	mov	r3, r2
 8001038:	76ab      	strb	r3, [r5, #26]
	GNSSCom_ReceiveDebug();
 800103a:	f000 f89d 	bl	8001178 <GNSSCom_ReceiveDebug>

	HAL_UART_Transmit(hGNSSCom.huartDebug, (uint8_t*)message3,sizeof(message3),HAL_MAX_DELAY);
 800103e:	4b47      	ldr	r3, [pc, #284]	@ (800115c <GNSSCom_Send_SetVal+0x214>)
 8001040:	6858      	ldr	r0, [r3, #4]
 8001042:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8001046:	f04f 33ff 	mov.w	r3, #4294967295
 800104a:	2214      	movs	r2, #20
 800104c:	f003 ff07 	bl	8004e5e <HAL_UART_Transmit>

	HAL_UART_Transmit(hGNSSCom.huart, commandUBXTimeUTC,sizeof(commandUBXTimeUTC),HAL_MAX_DELAY);
 8001050:	4b42      	ldr	r3, [pc, #264]	@ (800115c <GNSSCom_Send_SetVal+0x214>)
 8001052:	6818      	ldr	r0, [r3, #0]
 8001054:	f04f 33ff 	mov.w	r3, #4294967295
 8001058:	220b      	movs	r2, #11
 800105a:	4943      	ldr	r1, [pc, #268]	@ (8001168 <GNSSCom_Send_SetVal+0x220>)
 800105c:	f003 feff 	bl	8004e5e <HAL_UART_Transmit>
	memcpy(hGNSSCom.DebugBuffer,commandUBXTimeUTC,sizeof(commandUBXTimeUTC));
 8001060:	4b3e      	ldr	r3, [pc, #248]	@ (800115c <GNSSCom_Send_SetVal+0x214>)
 8001062:	4941      	ldr	r1, [pc, #260]	@ (8001168 <GNSSCom_Send_SetVal+0x220>)
 8001064:	f503 7281 	add.w	r2, r3, #258	@ 0x102
 8001068:	460b      	mov	r3, r1
 800106a:	cb03      	ldmia	r3!, {r0, r1}
 800106c:	6010      	str	r0, [r2, #0]
 800106e:	6051      	str	r1, [r2, #4]
 8001070:	8819      	ldrh	r1, [r3, #0]
 8001072:	789b      	ldrb	r3, [r3, #2]
 8001074:	8111      	strh	r1, [r2, #8]
 8001076:	7293      	strb	r3, [r2, #10]
	GNSSCom_ReceiveDebug();
 8001078:	f000 f87e 	bl	8001178 <GNSSCom_ReceiveDebug>

	HAL_UART_Transmit(hGNSSCom.huartDebug, (uint8_t*)message3,sizeof(message3),HAL_MAX_DELAY);
 800107c:	4b37      	ldr	r3, [pc, #220]	@ (800115c <GNSSCom_Send_SetVal+0x214>)
 800107e:	6858      	ldr	r0, [r3, #4]
 8001080:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8001084:	f04f 33ff 	mov.w	r3, #4294967295
 8001088:	2214      	movs	r2, #20
 800108a:	f003 fee8 	bl	8004e5e <HAL_UART_Transmit>

	HAL_UART_Transmit(hGNSSCom.huart, commandSetTP,sizeof(commandSetTP),HAL_MAX_DELAY);
 800108e:	4b33      	ldr	r3, [pc, #204]	@ (800115c <GNSSCom_Send_SetVal+0x214>)
 8001090:	6818      	ldr	r0, [r3, #0]
 8001092:	f04f 33ff 	mov.w	r3, #4294967295
 8001096:	226e      	movs	r2, #110	@ 0x6e
 8001098:	4934      	ldr	r1, [pc, #208]	@ (800116c <GNSSCom_Send_SetVal+0x224>)
 800109a:	f003 fee0 	bl	8004e5e <HAL_UART_Transmit>
	memcpy(hGNSSCom.DebugBuffer,commandSetTP,sizeof(commandSetTP));
 800109e:	4b2f      	ldr	r3, [pc, #188]	@ (800115c <GNSSCom_Send_SetVal+0x214>)
 80010a0:	4a32      	ldr	r2, [pc, #200]	@ (800116c <GNSSCom_Send_SetVal+0x224>)
 80010a2:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 80010a6:	4611      	mov	r1, r2
 80010a8:	226e      	movs	r2, #110	@ 0x6e
 80010aa:	4618      	mov	r0, r3
 80010ac:	f006 fbfb 	bl	80078a6 <memcpy>
	GNSSCom_ReceiveDebug();
 80010b0:	f000 f862 	bl	8001178 <GNSSCom_ReceiveDebug>

	HAL_UART_Transmit(hGNSSCom.huartDebug, (uint8_t*)message4,sizeof(message4),HAL_MAX_DELAY);
 80010b4:	4b29      	ldr	r3, [pc, #164]	@ (800115c <GNSSCom_Send_SetVal+0x214>)
 80010b6:	6858      	ldr	r0, [r3, #4]
 80010b8:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80010bc:	f04f 33ff 	mov.w	r3, #4294967295
 80010c0:	2214      	movs	r2, #20
 80010c2:	f003 fecc 	bl	8004e5e <HAL_UART_Transmit>

	HAL_UART_Transmit(hGNSSCom.huart, commandMeasureRate,sizeof(commandMeasureRate),HAL_MAX_DELAY);
 80010c6:	4b25      	ldr	r3, [pc, #148]	@ (800115c <GNSSCom_Send_SetVal+0x214>)
 80010c8:	6818      	ldr	r0, [r3, #0]
 80010ca:	f04f 33ff 	mov.w	r3, #4294967295
 80010ce:	221d      	movs	r2, #29
 80010d0:	4927      	ldr	r1, [pc, #156]	@ (8001170 <GNSSCom_Send_SetVal+0x228>)
 80010d2:	f003 fec4 	bl	8004e5e <HAL_UART_Transmit>
	memcpy(hGNSSCom.DebugBuffer,commandMeasureRate,sizeof(commandMeasureRate));
 80010d6:	4b21      	ldr	r3, [pc, #132]	@ (800115c <GNSSCom_Send_SetVal+0x214>)
 80010d8:	4a25      	ldr	r2, [pc, #148]	@ (8001170 <GNSSCom_Send_SetVal+0x228>)
 80010da:	f503 7581 	add.w	r5, r3, #258	@ 0x102
 80010de:	4614      	mov	r4, r2
 80010e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010e2:	6028      	str	r0, [r5, #0]
 80010e4:	6069      	str	r1, [r5, #4]
 80010e6:	60aa      	str	r2, [r5, #8]
 80010e8:	60eb      	str	r3, [r5, #12]
 80010ea:	cc07      	ldmia	r4!, {r0, r1, r2}
 80010ec:	6128      	str	r0, [r5, #16]
 80010ee:	6169      	str	r1, [r5, #20]
 80010f0:	61aa      	str	r2, [r5, #24]
 80010f2:	7823      	ldrb	r3, [r4, #0]
 80010f4:	772b      	strb	r3, [r5, #28]
	GNSSCom_ReceiveDebug();
 80010f6:	f000 f83f 	bl	8001178 <GNSSCom_ReceiveDebug>

	HAL_UART_Transmit(hGNSSCom.huartDebug, (uint8_t*)messagetest,sizeof(messagetest),HAL_MAX_DELAY);
 80010fa:	4b18      	ldr	r3, [pc, #96]	@ (800115c <GNSSCom_Send_SetVal+0x214>)
 80010fc:	6858      	ldr	r0, [r3, #4]
 80010fe:	1d39      	adds	r1, r7, #4
 8001100:	f04f 33ff 	mov.w	r3, #4294967295
 8001104:	2218      	movs	r2, #24
 8001106:	f003 feaa 	bl	8004e5e <HAL_UART_Transmit>

	HAL_UART_Transmit(hGNSSCom.huart, test_UBXNav_TIMEUTC,sizeof(test_UBXNav_TIMEUTC),HAL_MAX_DELAY);
 800110a:	4b14      	ldr	r3, [pc, #80]	@ (800115c <GNSSCom_Send_SetVal+0x214>)
 800110c:	6818      	ldr	r0, [r3, #0]
 800110e:	f04f 33ff 	mov.w	r3, #4294967295
 8001112:	221c      	movs	r2, #28
 8001114:	4917      	ldr	r1, [pc, #92]	@ (8001174 <GNSSCom_Send_SetVal+0x22c>)
 8001116:	f003 fea2 	bl	8004e5e <HAL_UART_Transmit>
	memcpy(hGNSSCom.DebugBuffer,test_UBXNav_TIMEUTC,sizeof(test_UBXNav_TIMEUTC));
 800111a:	4b10      	ldr	r3, [pc, #64]	@ (800115c <GNSSCom_Send_SetVal+0x214>)
 800111c:	4a15      	ldr	r2, [pc, #84]	@ (8001174 <GNSSCom_Send_SetVal+0x22c>)
 800111e:	f503 7581 	add.w	r5, r3, #258	@ 0x102
 8001122:	4614      	mov	r4, r2
 8001124:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001126:	6028      	str	r0, [r5, #0]
 8001128:	6069      	str	r1, [r5, #4]
 800112a:	60aa      	str	r2, [r5, #8]
 800112c:	60eb      	str	r3, [r5, #12]
 800112e:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001130:	6128      	str	r0, [r5, #16]
 8001132:	6169      	str	r1, [r5, #20]
 8001134:	61aa      	str	r2, [r5, #24]
	GNSSCom_ReceiveDebug();
 8001136:	f000 f81f 	bl	8001178 <GNSSCom_ReceiveDebug>

}
 800113a:	bf00      	nop
 800113c:	3788      	adds	r7, #136	@ 0x88
 800113e:	46bd      	mov	sp, r7
 8001140:	bdb0      	pop	{r4, r5, r7, pc}
 8001142:	bf00      	nop
 8001144:	080097c8 	.word	0x080097c8
 8001148:	080097e0 	.word	0x080097e0
 800114c:	080097f8 	.word	0x080097f8
 8001150:	0800980c 	.word	0x0800980c
 8001154:	08009820 	.word	0x08009820
 8001158:	08009834 	.word	0x08009834
 800115c:	20000370 	.word	0x20000370
 8001160:	20000000 	.word	0x20000000
 8001164:	200000f4 	.word	0x200000f4
 8001168:	20000130 	.word	0x20000130
 800116c:	20000084 	.word	0x20000084
 8001170:	20000110 	.word	0x20000110
 8001174:	2000013c 	.word	0x2000013c

08001178 <GNSSCom_ReceiveDebug>:

void GNSSCom_ReceiveDebug(){
 8001178:	b590      	push	{r4, r7, lr}
 800117a:	b0b7      	sub	sp, #220	@ 0xdc
 800117c:	af00      	add	r7, sp, #0
	// Initialiser la chaîne de sortie à une chaîne vide
	char output_string[UART_DEBUG_BUFFER_SIZE];
	int bool_UBXflag = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
	for (int i = 0; i < UART_DEBUG_BUFFER_SIZE; i++) {
 8001184:	2300      	movs	r3, #0
 8001186:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800118a:	e102      	b.n	8001392 <GNSSCom_ReceiveDebug+0x21a>


		if (hGNSSCom.DebugBuffer[i] == HEADER_CheckValue1 || bool_UBXflag ){
 800118c:	4a90      	ldr	r2, [pc, #576]	@ (80013d0 <GNSSCom_ReceiveDebug+0x258>)
 800118e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001192:	4413      	add	r3, r2
 8001194:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	2bb5      	cmp	r3, #181	@ 0xb5
 800119c:	d003      	beq.n	80011a6 <GNSSCom_ReceiveDebug+0x2e>
 800119e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d05e      	beq.n	8001264 <GNSSCom_ReceiveDebug+0xec>
			bool_UBXflag = 1;
 80011a6:	2301      	movs	r3, #1
 80011a8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
			if (hGNSSCom.DebugBuffer[i] == HEADER_CheckValue2 ){
 80011ac:	4a88      	ldr	r2, [pc, #544]	@ (80013d0 <GNSSCom_ReceiveDebug+0x258>)
 80011ae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80011b2:	4413      	add	r3, r2
 80011b4:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	2b62      	cmp	r3, #98	@ 0x62
 80011bc:	d152      	bne.n	8001264 <GNSSCom_ReceiveDebug+0xec>
				//On est sur un message UBX
				bool_UBXflag =0;
 80011be:	2300      	movs	r3, #0
 80011c0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
				int len = (hGNSSCom.DebugBuffer[i+4] << 8) |hGNSSCom.DebugBuffer[i+3];
 80011c4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80011c8:	3304      	adds	r3, #4
 80011ca:	4a81      	ldr	r2, [pc, #516]	@ (80013d0 <GNSSCom_ReceiveDebug+0x258>)
 80011cc:	4413      	add	r3, r2
 80011ce:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 80011d2:	021b      	lsls	r3, r3, #8
 80011d4:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80011d8:	3203      	adds	r2, #3
 80011da:	497d      	ldr	r1, [pc, #500]	@ (80013d0 <GNSSCom_ReceiveDebug+0x258>)
 80011dc:	440a      	add	r2, r1
 80011de:	f892 2102 	ldrb.w	r2, [r2, #258]	@ 0x102
 80011e2:	4313      	orrs	r3, r2
 80011e4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
				UBXMessage_parsed* UbxMessage =(UBXMessage_parsed*) malloc(sizeof(UBXMessage_parsed)) ;
 80011e8:	f44f 70ca 	mov.w	r0, #404	@ 0x194
 80011ec:	f005 fc52 	bl	8006a94 <malloc>
 80011f0:	4603      	mov	r3, r0
 80011f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

				UbxMessage->msgClass = hGNSSCom.DebugBuffer[i + 1];
 80011f6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80011fa:	3301      	adds	r3, #1
 80011fc:	4a74      	ldr	r2, [pc, #464]	@ (80013d0 <GNSSCom_ReceiveDebug+0x258>)
 80011fe:	4413      	add	r3, r2
 8001200:	f893 2102 	ldrb.w	r2, [r3, #258]	@ 0x102
 8001204:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001208:	701a      	strb	r2, [r3, #0]
				UbxMessage->msgID = hGNSSCom.DebugBuffer[i + 2];
 800120a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800120e:	3302      	adds	r3, #2
 8001210:	4a6f      	ldr	r2, [pc, #444]	@ (80013d0 <GNSSCom_ReceiveDebug+0x258>)
 8001212:	4413      	add	r3, r2
 8001214:	f893 2102 	ldrb.w	r2, [r3, #258]	@ 0x102
 8001218:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800121c:	705a      	strb	r2, [r3, #1]
				UbxMessage->len = len;
 800121e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001222:	b29a      	uxth	r2, r3
 8001224:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001228:	805a      	strh	r2, [r3, #2]
				memcpy(UbxMessage->load, hGNSSCom.DebugBuffer + i + 5, len);
 800122a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800122e:	1d18      	adds	r0, r3, #4
 8001230:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001234:	3305      	adds	r3, #5
 8001236:	4a67      	ldr	r2, [pc, #412]	@ (80013d4 <GNSSCom_ReceiveDebug+0x25c>)
 8001238:	4413      	add	r3, r2
 800123a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800123e:	4619      	mov	r1, r3
 8001240:	f006 fb31 	bl	80078a6 <memcpy>
				create_message_debug(UbxMessage); //On obtient l'adresse de la structure qui correspond au message
 8001244:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 8001248:	f000 f8d6 	bl	80013f8 <create_message_debug>
				//Maintenant pour pouvoir utilsier ici la structure il nous faut savoir quelle type de structure est elle
				HAL_UART_Transmit(hGNSSCom.huartDebug, UbxMessage->bufferDebug, sizeof(UbxMessage->bufferDebug),HAL_MAX_DELAY);
 800124c:	4b60      	ldr	r3, [pc, #384]	@ (80013d0 <GNSSCom_ReceiveDebug+0x258>)
 800124e:	6858      	ldr	r0, [r3, #4]
 8001250:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001254:	f103 01cc 	add.w	r1, r3, #204	@ 0xcc
 8001258:	f04f 33ff 	mov.w	r3, #4294967295
 800125c:	22c8      	movs	r2, #200	@ 0xc8
 800125e:	f003 fdfe 	bl	8004e5e <HAL_UART_Transmit>
				break;
 8001262:	e09b      	b.n	800139c <GNSSCom_ReceiveDebug+0x224>
			}
		}

		switch (hGNSSCom.DebugBuffer[i]) {
 8001264:	4a5a      	ldr	r2, [pc, #360]	@ (80013d0 <GNSSCom_ReceiveDebug+0x258>)
 8001266:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800126a:	4413      	add	r3, r2
 800126c:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b0a      	cmp	r3, #10
 8001274:	d002      	beq.n	800127c <GNSSCom_ReceiveDebug+0x104>
 8001276:	2b0d      	cmp	r3, #13
 8001278:	d00e      	beq.n	8001298 <GNSSCom_ReceiveDebug+0x120>
 800127a:	e01b      	b.n	80012b4 <GNSSCom_ReceiveDebug+0x13c>
		case '\n': // Nouvelle ligne détectée
			strcat(output_string, "\n"); // Ajout d'un saut de ligne à la chaîne de sortie
 800127c:	463b      	mov	r3, r7
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff f806 	bl	8000290 <strlen>
 8001284:	4603      	mov	r3, r0
 8001286:	461a      	mov	r2, r3
 8001288:	463b      	mov	r3, r7
 800128a:	4413      	add	r3, r2
 800128c:	4952      	ldr	r1, [pc, #328]	@ (80013d8 <GNSSCom_ReceiveDebug+0x260>)
 800128e:	461a      	mov	r2, r3
 8001290:	460b      	mov	r3, r1
 8001292:	881b      	ldrh	r3, [r3, #0]
 8001294:	8013      	strh	r3, [r2, #0]
			break;
 8001296:	e077      	b.n	8001388 <GNSSCom_ReceiveDebug+0x210>
		case '\r': // Retour de chariot détecté
			strcat(output_string, "\r");
 8001298:	463b      	mov	r3, r7
 800129a:	4618      	mov	r0, r3
 800129c:	f7fe fff8 	bl	8000290 <strlen>
 80012a0:	4603      	mov	r3, r0
 80012a2:	461a      	mov	r2, r3
 80012a4:	463b      	mov	r3, r7
 80012a6:	4413      	add	r3, r2
 80012a8:	494c      	ldr	r1, [pc, #304]	@ (80013dc <GNSSCom_ReceiveDebug+0x264>)
 80012aa:	461a      	mov	r2, r3
 80012ac:	460b      	mov	r3, r1
 80012ae:	881b      	ldrh	r3, [r3, #0]
 80012b0:	8013      	strh	r3, [r2, #0]
			break;
 80012b2:	e069      	b.n	8001388 <GNSSCom_ReceiveDebug+0x210>
		default:
			switch (type) {
 80012b4:	4b4a      	ldr	r3, [pc, #296]	@ (80013e0 <GNSSCom_ReceiveDebug+0x268>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d02c      	beq.n	8001316 <GNSSCom_ReceiveDebug+0x19e>
 80012bc:	2b02      	cmp	r3, #2
 80012be:	dc5a      	bgt.n	8001376 <GNSSCom_ReceiveDebug+0x1fe>
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d002      	beq.n	80012ca <GNSSCom_ReceiveDebug+0x152>
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d013      	beq.n	80012f0 <GNSSCom_ReceiveDebug+0x178>
 80012c8:	e055      	b.n	8001376 <GNSSCom_ReceiveDebug+0x1fe>
			case RAW:
				snprintf(output_string + i, sizeof(output_string) - i, "%d", hGNSSCom.DebugBuffer[i]);
 80012ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80012ce:	463a      	mov	r2, r7
 80012d0:	18d0      	adds	r0, r2, r3
 80012d2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80012d6:	f1c3 01c8 	rsb	r1, r3, #200	@ 0xc8
 80012da:	4a3d      	ldr	r2, [pc, #244]	@ (80013d0 <GNSSCom_ReceiveDebug+0x258>)
 80012dc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80012e0:	4413      	add	r3, r2
 80012e2:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	4a3e      	ldr	r2, [pc, #248]	@ (80013e4 <GNSSCom_ReceiveDebug+0x26c>)
 80012ea:	f006 f9a3 	bl	8007634 <sniprintf>
				break;
 80012ee:	e042      	b.n	8001376 <GNSSCom_ReceiveDebug+0x1fe>

			case HEX:
				snprintf(output_string +i, sizeof(output_string) - i, "%02X", hGNSSCom.DebugBuffer[i]);
 80012f0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80012f4:	463a      	mov	r2, r7
 80012f6:	18d0      	adds	r0, r2, r3
 80012f8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80012fc:	f1c3 01c8 	rsb	r1, r3, #200	@ 0xc8
 8001300:	4a33      	ldr	r2, [pc, #204]	@ (80013d0 <GNSSCom_ReceiveDebug+0x258>)
 8001302:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001306:	4413      	add	r3, r2
 8001308:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	4a36      	ldr	r2, [pc, #216]	@ (80013e8 <GNSSCom_ReceiveDebug+0x270>)
 8001310:	f006 f990 	bl	8007634 <sniprintf>
				break;
 8001314:	e02f      	b.n	8001376 <GNSSCom_ReceiveDebug+0x1fe>

			case ASCII:
				snprintf(output_string +i, sizeof(output_string) - i, "%c",
 8001316:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800131a:	463a      	mov	r2, r7
 800131c:	18d0      	adds	r0, r2, r3
 800131e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001322:	f1c3 01c8 	rsb	r1, r3, #200	@ 0xc8
						((hGNSSCom.DebugBuffer[i] >= 32 && hGNSSCom.DebugBuffer[i] <= 126)||hGNSSCom.DebugBuffer[i] >= 192) ? hGNSSCom.DebugBuffer[i] : '.');
 8001326:	4a2a      	ldr	r2, [pc, #168]	@ (80013d0 <GNSSCom_ReceiveDebug+0x258>)
 8001328:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800132c:	4413      	add	r3, r2
 800132e:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001332:	781b      	ldrb	r3, [r3, #0]
				snprintf(output_string +i, sizeof(output_string) - i, "%c",
 8001334:	2b1f      	cmp	r3, #31
 8001336:	d908      	bls.n	800134a <GNSSCom_ReceiveDebug+0x1d2>
						((hGNSSCom.DebugBuffer[i] >= 32 && hGNSSCom.DebugBuffer[i] <= 126)||hGNSSCom.DebugBuffer[i] >= 192) ? hGNSSCom.DebugBuffer[i] : '.');
 8001338:	4a25      	ldr	r2, [pc, #148]	@ (80013d0 <GNSSCom_ReceiveDebug+0x258>)
 800133a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800133e:	4413      	add	r3, r2
 8001340:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b7e      	cmp	r3, #126	@ 0x7e
 8001348:	d908      	bls.n	800135c <GNSSCom_ReceiveDebug+0x1e4>
 800134a:	4a21      	ldr	r2, [pc, #132]	@ (80013d0 <GNSSCom_ReceiveDebug+0x258>)
 800134c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001350:	4413      	add	r3, r2
 8001352:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2bbf      	cmp	r3, #191	@ 0xbf
 800135a:	d907      	bls.n	800136c <GNSSCom_ReceiveDebug+0x1f4>
 800135c:	4a1c      	ldr	r2, [pc, #112]	@ (80013d0 <GNSSCom_ReceiveDebug+0x258>)
 800135e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001362:	4413      	add	r3, r2
 8001364:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8001368:	781b      	ldrb	r3, [r3, #0]
				snprintf(output_string +i, sizeof(output_string) - i, "%c",
 800136a:	e000      	b.n	800136e <GNSSCom_ReceiveDebug+0x1f6>
 800136c:	232e      	movs	r3, #46	@ 0x2e
 800136e:	4a1f      	ldr	r2, [pc, #124]	@ (80013ec <GNSSCom_ReceiveDebug+0x274>)
 8001370:	f006 f960 	bl	8007634 <sniprintf>
				break;
 8001374:	bf00      	nop
			}
			strncat(output_string, " ", sizeof(output_string) - i - 1);
 8001376:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800137a:	f1c3 02c7 	rsb	r2, r3, #199	@ 0xc7
 800137e:	463b      	mov	r3, r7
 8001380:	491b      	ldr	r1, [pc, #108]	@ (80013f0 <GNSSCom_ReceiveDebug+0x278>)
 8001382:	4618      	mov	r0, r3
 8001384:	f006 f9f5 	bl	8007772 <strncat>
	for (int i = 0; i < UART_DEBUG_BUFFER_SIZE; i++) {
 8001388:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800138c:	3301      	adds	r3, #1
 800138e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001392:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001396:	2bc7      	cmp	r3, #199	@ 0xc7
 8001398:	f77f aef8 	ble.w	800118c <GNSSCom_ReceiveDebug+0x14>

		}
	}
	HAL_UART_Transmit(hGNSSCom.huartDebug, (uint8_t*)output_string, strlen(output_string),HAL_MAX_DELAY);
 800139c:	4b0c      	ldr	r3, [pc, #48]	@ (80013d0 <GNSSCom_ReceiveDebug+0x258>)
 800139e:	685c      	ldr	r4, [r3, #4]
 80013a0:	463b      	mov	r3, r7
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7fe ff74 	bl	8000290 <strlen>
 80013a8:	4603      	mov	r3, r0
 80013aa:	b29a      	uxth	r2, r3
 80013ac:	4639      	mov	r1, r7
 80013ae:	f04f 33ff 	mov.w	r3, #4294967295
 80013b2:	4620      	mov	r0, r4
 80013b4:	f003 fd53 	bl	8004e5e <HAL_UART_Transmit>
	HAL_UART_Transmit(hGNSSCom.huartDebug, (uint8_t*)"\r\n", 4,HAL_MAX_DELAY);
 80013b8:	4b05      	ldr	r3, [pc, #20]	@ (80013d0 <GNSSCom_ReceiveDebug+0x258>)
 80013ba:	6858      	ldr	r0, [r3, #4]
 80013bc:	f04f 33ff 	mov.w	r3, #4294967295
 80013c0:	2204      	movs	r2, #4
 80013c2:	490c      	ldr	r1, [pc, #48]	@ (80013f4 <GNSSCom_ReceiveDebug+0x27c>)
 80013c4:	f003 fd4b 	bl	8004e5e <HAL_UART_Transmit>
}
 80013c8:	bf00      	nop
 80013ca:	37dc      	adds	r7, #220	@ 0xdc
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd90      	pop	{r4, r7, pc}
 80013d0:	20000370 	.word	0x20000370
 80013d4:	20000472 	.word	0x20000472
 80013d8:	0800984c 	.word	0x0800984c
 80013dc:	08009850 	.word	0x08009850
 80013e0:	20000158 	.word	0x20000158
 80013e4:	08009854 	.word	0x08009854
 80013e8:	08009858 	.word	0x08009858
 80013ec:	08009860 	.word	0x08009860
 80013f0:	08009864 	.word	0x08009864
 80013f4:	08009868 	.word	0x08009868

080013f8 <create_message_debug>:
	{0x06, 0x8b, debug_GetVal, &UBX_CFG_GETVAL_instance},
    // Add other mappings for other message types if necessary
};

// Function to create a message structure
void create_message_debug(UBXMessage_parsed* UBXMessage) {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
    // Function pointer and variables to hold the matched mapping's values
    void (*get_func)(UBXMessage_parsed*, void *) = NULL;
 8001400:	2300      	movs	r3, #0
 8001402:	613b      	str	r3, [r7, #16]
    void* structAssociate = NULL;
 8001404:	2300      	movs	r3, #0
 8001406:	60fb      	str	r3, [r7, #12]

    // Loop through the message mappings to find a match
    for (int i = 0; i < sizeof(message_mappings) / sizeof(message_mappings[0]); i++) {
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]
 800140c:	e034      	b.n	8001478 <create_message_debug+0x80>
        if (message_mappings[i].msgClass == UBXMessage->msgClass &&
 800140e:	491e      	ldr	r1, [pc, #120]	@ (8001488 <create_message_debug+0x90>)
 8001410:	697a      	ldr	r2, [r7, #20]
 8001412:	4613      	mov	r3, r2
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	4413      	add	r3, r2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	440b      	add	r3, r1
 800141c:	781a      	ldrb	r2, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	429a      	cmp	r2, r3
 8001424:	d125      	bne.n	8001472 <create_message_debug+0x7a>
            message_mappings[i].msgID == UBXMessage->msgID) {
 8001426:	4918      	ldr	r1, [pc, #96]	@ (8001488 <create_message_debug+0x90>)
 8001428:	697a      	ldr	r2, [r7, #20]
 800142a:	4613      	mov	r3, r2
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	4413      	add	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	440b      	add	r3, r1
 8001434:	3301      	adds	r3, #1
 8001436:	781a      	ldrb	r2, [r3, #0]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	785b      	ldrb	r3, [r3, #1]
        if (message_mappings[i].msgClass == UBXMessage->msgClass &&
 800143c:	429a      	cmp	r2, r3
 800143e:	d118      	bne.n	8001472 <create_message_debug+0x7a>
            // Retrieve the corresponding get function and associated structure and variables
            get_func = message_mappings[i].get_func;
 8001440:	4911      	ldr	r1, [pc, #68]	@ (8001488 <create_message_debug+0x90>)
 8001442:	697a      	ldr	r2, [r7, #20]
 8001444:	4613      	mov	r3, r2
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	4413      	add	r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	440b      	add	r3, r1
 800144e:	3304      	adds	r3, #4
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	613b      	str	r3, [r7, #16]
            structAssociate = message_mappings[i].structAssociate;
 8001454:	490c      	ldr	r1, [pc, #48]	@ (8001488 <create_message_debug+0x90>)
 8001456:	697a      	ldr	r2, [r7, #20]
 8001458:	4613      	mov	r3, r2
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	4413      	add	r3, r2
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	440b      	add	r3, r1
 8001462:	3308      	adds	r3, #8
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	60fb      	str	r3, [r7, #12]
            get_func(UBXMessage,structAssociate);
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	68f9      	ldr	r1, [r7, #12]
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	4798      	blx	r3
            break;
 8001470:	e006      	b.n	8001480 <create_message_debug+0x88>
    for (int i = 0; i < sizeof(message_mappings) / sizeof(message_mappings[0]); i++) {
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	3301      	adds	r3, #1
 8001476:	617b      	str	r3, [r7, #20]
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	2b02      	cmp	r3, #2
 800147c:	d9c7      	bls.n	800140e <create_message_debug+0x16>
        }

    }
}
 800147e:	bf00      	nop
 8001480:	bf00      	nop
 8001482:	3718      	adds	r7, #24
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	2000015c 	.word	0x2000015c

0800148c <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b08a      	sub	sp, #40	@ 0x28
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001492:	1d3b      	adds	r3, r7, #4
 8001494:	2224      	movs	r2, #36	@ 0x24
 8001496:	2100      	movs	r1, #0
 8001498:	4618      	mov	r0, r3
 800149a:	f006 f962 	bl	8007762 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800149e:	4b17      	ldr	r3, [pc, #92]	@ (80014fc <MX_DAC1_Init+0x70>)
 80014a0:	4a17      	ldr	r2, [pc, #92]	@ (8001500 <MX_DAC1_Init+0x74>)
 80014a2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80014a4:	4815      	ldr	r0, [pc, #84]	@ (80014fc <MX_DAC1_Init+0x70>)
 80014a6:	f001 fb98 	bl	8002bda <HAL_DAC_Init>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80014b0:	f000 f9e5 	bl	800187e <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80014b4:	2300      	movs	r3, #0
 80014b6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80014b8:	2300      	movs	r3, #0
 80014ba:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80014bc:	2300      	movs	r3, #0
 80014be:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80014c0:	2300      	movs	r3, #0
 80014c2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80014c8:	1d3b      	adds	r3, r7, #4
 80014ca:	2200      	movs	r2, #0
 80014cc:	4619      	mov	r1, r3
 80014ce:	480b      	ldr	r0, [pc, #44]	@ (80014fc <MX_DAC1_Init+0x70>)
 80014d0:	f001 fba5 	bl	8002c1e <HAL_DAC_ConfigChannel>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80014da:	f000 f9d0 	bl	800187e <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80014de:	1d3b      	adds	r3, r7, #4
 80014e0:	2210      	movs	r2, #16
 80014e2:	4619      	mov	r1, r3
 80014e4:	4805      	ldr	r0, [pc, #20]	@ (80014fc <MX_DAC1_Init+0x70>)
 80014e6:	f001 fb9a 	bl	8002c1e <HAL_DAC_ConfigChannel>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 80014f0:	f000 f9c5 	bl	800187e <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80014f4:	bf00      	nop
 80014f6:	3728      	adds	r7, #40	@ 0x28
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	200006e8 	.word	0x200006e8
 8001500:	40007400 	.word	0x40007400

08001504 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08a      	sub	sp, #40	@ 0x28
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a15      	ldr	r2, [pc, #84]	@ (8001578 <HAL_DAC_MspInit+0x74>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d124      	bne.n	8001570 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001526:	4b15      	ldr	r3, [pc, #84]	@ (800157c <HAL_DAC_MspInit+0x78>)
 8001528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800152a:	4a14      	ldr	r2, [pc, #80]	@ (800157c <HAL_DAC_MspInit+0x78>)
 800152c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001530:	6593      	str	r3, [r2, #88]	@ 0x58
 8001532:	4b12      	ldr	r3, [pc, #72]	@ (800157c <HAL_DAC_MspInit+0x78>)
 8001534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001536:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800153a:	613b      	str	r3, [r7, #16]
 800153c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800153e:	4b0f      	ldr	r3, [pc, #60]	@ (800157c <HAL_DAC_MspInit+0x78>)
 8001540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001542:	4a0e      	ldr	r2, [pc, #56]	@ (800157c <HAL_DAC_MspInit+0x78>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800154a:	4b0c      	ldr	r3, [pc, #48]	@ (800157c <HAL_DAC_MspInit+0x78>)
 800154c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = STM_DAC_TRIG_Pin|STM_DAC_CS_Pin;
 8001556:	2330      	movs	r3, #48	@ 0x30
 8001558:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800155a:	2303      	movs	r3, #3
 800155c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001562:	f107 0314 	add.w	r3, r7, #20
 8001566:	4619      	mov	r1, r3
 8001568:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800156c:	f001 fcfe 	bl	8002f6c <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8001570:	bf00      	nop
 8001572:	3728      	adds	r7, #40	@ 0x28
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40007400 	.word	0x40007400
 800157c:	40021000 	.word	0x40021000

08001580 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b08c      	sub	sp, #48	@ 0x30
 8001584:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001586:	f107 031c 	add.w	r3, r7, #28
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	605a      	str	r2, [r3, #4]
 8001590:	609a      	str	r2, [r3, #8]
 8001592:	60da      	str	r2, [r3, #12]
 8001594:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001596:	4b63      	ldr	r3, [pc, #396]	@ (8001724 <MX_GPIO_Init+0x1a4>)
 8001598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800159a:	4a62      	ldr	r2, [pc, #392]	@ (8001724 <MX_GPIO_Init+0x1a4>)
 800159c:	f043 0310 	orr.w	r3, r3, #16
 80015a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015a2:	4b60      	ldr	r3, [pc, #384]	@ (8001724 <MX_GPIO_Init+0x1a4>)
 80015a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015a6:	f003 0310 	and.w	r3, r3, #16
 80015aa:	61bb      	str	r3, [r7, #24]
 80015ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ae:	4b5d      	ldr	r3, [pc, #372]	@ (8001724 <MX_GPIO_Init+0x1a4>)
 80015b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b2:	4a5c      	ldr	r2, [pc, #368]	@ (8001724 <MX_GPIO_Init+0x1a4>)
 80015b4:	f043 0304 	orr.w	r3, r3, #4
 80015b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015ba:	4b5a      	ldr	r3, [pc, #360]	@ (8001724 <MX_GPIO_Init+0x1a4>)
 80015bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015be:	f003 0304 	and.w	r3, r3, #4
 80015c2:	617b      	str	r3, [r7, #20]
 80015c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015c6:	4b57      	ldr	r3, [pc, #348]	@ (8001724 <MX_GPIO_Init+0x1a4>)
 80015c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ca:	4a56      	ldr	r2, [pc, #344]	@ (8001724 <MX_GPIO_Init+0x1a4>)
 80015cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015d2:	4b54      	ldr	r3, [pc, #336]	@ (8001724 <MX_GPIO_Init+0x1a4>)
 80015d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015da:	613b      	str	r3, [r7, #16]
 80015dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015de:	4b51      	ldr	r3, [pc, #324]	@ (8001724 <MX_GPIO_Init+0x1a4>)
 80015e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015e2:	4a50      	ldr	r2, [pc, #320]	@ (8001724 <MX_GPIO_Init+0x1a4>)
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015ea:	4b4e      	ldr	r3, [pc, #312]	@ (8001724 <MX_GPIO_Init+0x1a4>)
 80015ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f6:	4b4b      	ldr	r3, [pc, #300]	@ (8001724 <MX_GPIO_Init+0x1a4>)
 80015f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015fa:	4a4a      	ldr	r2, [pc, #296]	@ (8001724 <MX_GPIO_Init+0x1a4>)
 80015fc:	f043 0302 	orr.w	r3, r3, #2
 8001600:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001602:	4b48      	ldr	r3, [pc, #288]	@ (8001724 <MX_GPIO_Init+0x1a4>)
 8001604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	60bb      	str	r3, [r7, #8]
 800160c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800160e:	4b45      	ldr	r3, [pc, #276]	@ (8001724 <MX_GPIO_Init+0x1a4>)
 8001610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001612:	4a44      	ldr	r2, [pc, #272]	@ (8001724 <MX_GPIO_Init+0x1a4>)
 8001614:	f043 0308 	orr.w	r3, r3, #8
 8001618:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800161a:	4b42      	ldr	r3, [pc, #264]	@ (8001724 <MX_GPIO_Init+0x1a4>)
 800161c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800161e:	f003 0308 	and.w	r3, r3, #8
 8001622:	607b      	str	r3, [r7, #4]
 8001624:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, PROC_M2_Pin|PROC_RESET_FPGA_Pin|UI_LED_R_Pin|UI_LED_G_Pin
 8001626:	2200      	movs	r2, #0
 8001628:	f240 11bf 	movw	r1, #447	@ 0x1bf
 800162c:	483e      	ldr	r0, [pc, #248]	@ (8001728 <MX_GPIO_Init+0x1a8>)
 800162e:	f001 fe2f 	bl	8003290 <HAL_GPIO_WritePin>
                          |RFM_EN_Pin|RFM_RST_Pin|PROC_M0_Pin|PROC_M1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UI_LED_B_GPIO_Port, UI_LED_B_Pin, GPIO_PIN_RESET);
 8001632:	2200      	movs	r2, #0
 8001634:	2102      	movs	r1, #2
 8001636:	483d      	ldr	r0, [pc, #244]	@ (800172c <MX_GPIO_Init+0x1ac>)
 8001638:	f001 fe2a 	bl	8003290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CLK_64M_EN_Pin|STM_ACQ_TRIG_SRC0_Pin|STM_ACQ_TRIG_SRC1_Pin, GPIO_PIN_RESET);
 800163c:	2200      	movs	r2, #0
 800163e:	f44f 4144 	mov.w	r1, #50176	@ 0xc400
 8001642:	483b      	ldr	r0, [pc, #236]	@ (8001730 <MX_GPIO_Init+0x1b0>)
 8001644:	f001 fe24 	bl	8003290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ACQ_POW_EN_Pin|GPS_RESET_Pin, GPIO_PIN_SET);
 8001648:	2201      	movs	r2, #1
 800164a:	f44f 6108 	mov.w	r1, #2176	@ 0x880
 800164e:	4838      	ldr	r0, [pc, #224]	@ (8001730 <MX_GPIO_Init+0x1b0>)
 8001650:	f001 fe1e 	bl	8003290 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = PROC_M2_Pin|PROC_RESET_FPGA_Pin|UI_LED_R_Pin|UI_LED_G_Pin
 8001654:	f240 13bf 	movw	r3, #447	@ 0x1bf
 8001658:	61fb      	str	r3, [r7, #28]
                          |RFM_EN_Pin|RFM_RST_Pin|PROC_M0_Pin|PROC_M1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800165a:	2301      	movs	r3, #1
 800165c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2300      	movs	r3, #0
 8001660:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001662:	2300      	movs	r3, #0
 8001664:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001666:	f107 031c 	add.w	r3, r7, #28
 800166a:	4619      	mov	r1, r3
 800166c:	482e      	ldr	r0, [pc, #184]	@ (8001728 <MX_GPIO_Init+0x1a8>)
 800166e:	f001 fc7d 	bl	8002f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UI_WakeUp_Pin;
 8001672:	2340      	movs	r3, #64	@ 0x40
 8001674:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001676:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800167a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(UI_WakeUp_GPIO_Port, &GPIO_InitStruct);
 8001680:	f107 031c 	add.w	r3, r7, #28
 8001684:	4619      	mov	r1, r3
 8001686:	4828      	ldr	r0, [pc, #160]	@ (8001728 <MX_GPIO_Init+0x1a8>)
 8001688:	f001 fc70 	bl	8002f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPS_PROC_TIME_INT_Pin|PROC_FPGA_BUSY_Pin|SD_DETECT_INT_Pin;
 800168c:	f242 03a0 	movw	r3, #8352	@ 0x20a0
 8001690:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001692:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001696:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800169c:	f107 031c 	add.w	r3, r7, #28
 80016a0:	4619      	mov	r1, r3
 80016a2:	4824      	ldr	r0, [pc, #144]	@ (8001734 <MX_GPIO_Init+0x1b4>)
 80016a4:	f001 fc62 	bl	8002f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_VBUS_DETECT_WU_Pin|UI_ARM_Pin;
 80016a8:	2305      	movs	r3, #5
 80016aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016ac:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80016b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b6:	f107 031c 	add.w	r3, r7, #28
 80016ba:	4619      	mov	r1, r3
 80016bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016c0:	f001 fc54 	bl	8002f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UI_LED_B_Pin;
 80016c4:	2302      	movs	r3, #2
 80016c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c8:	2301      	movs	r3, #1
 80016ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d0:	2300      	movs	r3, #0
 80016d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(UI_LED_B_GPIO_Port, &GPIO_InitStruct);
 80016d4:	f107 031c 	add.w	r3, r7, #28
 80016d8:	4619      	mov	r1, r3
 80016da:	4814      	ldr	r0, [pc, #80]	@ (800172c <MX_GPIO_Init+0x1ac>)
 80016dc:	f001 fc46 	bl	8002f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = CLK_64M_EN_Pin|ACQ_POW_EN_Pin|STM_ACQ_TRIG_SRC0_Pin|STM_ACQ_TRIG_SRC1_Pin
 80016e0:	f64c 4380 	movw	r3, #52352	@ 0xcc80
 80016e4:	61fb      	str	r3, [r7, #28]
                          |GPS_RESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e6:	2301      	movs	r3, #1
 80016e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ee:	2300      	movs	r3, #0
 80016f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016f2:	f107 031c 	add.w	r3, r7, #28
 80016f6:	4619      	mov	r1, r3
 80016f8:	480d      	ldr	r0, [pc, #52]	@ (8001730 <MX_GPIO_Init+0x1b0>)
 80016fa:	f001 fc37 	bl	8002f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RFM_IRQ_Pin;
 80016fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001702:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001704:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001708:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(RFM_IRQ_GPIO_Port, &GPIO_InitStruct);
 800170e:	f107 031c 	add.w	r3, r7, #28
 8001712:	4619      	mov	r1, r3
 8001714:	4805      	ldr	r0, [pc, #20]	@ (800172c <MX_GPIO_Init+0x1ac>)
 8001716:	f001 fc29 	bl	8002f6c <HAL_GPIO_Init>

}
 800171a:	bf00      	nop
 800171c:	3730      	adds	r7, #48	@ 0x30
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40021000 	.word	0x40021000
 8001728:	48001000 	.word	0x48001000
 800172c:	48000400 	.word	0x48000400
 8001730:	48000c00 	.word	0x48000c00
 8001734:	48000800 	.word	0x48000800

08001738 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001738:	b590      	push	{r4, r7, lr}
 800173a:	b089      	sub	sp, #36	@ 0x24
 800173c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800173e:	f001 f8a2 	bl	8002886 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001742:	f000 f84d 	bl	80017e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001746:	f7ff ff1b 	bl	8001580 <MX_GPIO_Init>
  MX_DAC1_Init();
 800174a:	f7ff fe9f 	bl	800148c <MX_DAC1_Init>
  MX_SPI1_Init();
 800174e:	f000 f89d 	bl	800188c <MX_SPI1_Init>
  MX_SPI2_Init();
 8001752:	f000 f8d9 	bl	8001908 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8001756:	f000 fda7 	bl	80022a8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800175a:	f000 fdd9 	bl	8002310 <MX_USART2_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800175e:	f000 ff9f 	bl	80026a0 <MX_USB_OTG_FS_PCD_Init>
  MX_USART3_UART_Init();
 8001762:	f000 fe05 	bl	8002370 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4,GPIO_PIN_SET);
 8001766:	2201      	movs	r2, #1
 8001768:	2110      	movs	r1, #16
 800176a:	4818      	ldr	r0, [pc, #96]	@ (80017cc <main+0x94>)
 800176c:	f001 fd90 	bl	8003290 <HAL_GPIO_WritePin>

	const char startMessage[] = "\r\nStarting...\r\n";
 8001770:	4b17      	ldr	r3, [pc, #92]	@ (80017d0 <main+0x98>)
 8001772:	f107 0410 	add.w	r4, r7, #16
 8001776:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001778:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	const char initDoneMessage[] = "\r\nInit Done\r\n\n";
 800177c:	4b15      	ldr	r3, [pc, #84]	@ (80017d4 <main+0x9c>)
 800177e:	463c      	mov	r4, r7
 8001780:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001782:	c407      	stmia	r4!, {r0, r1, r2}
 8001784:	8023      	strh	r3, [r4, #0]
 8001786:	3402      	adds	r4, #2
 8001788:	0c1b      	lsrs	r3, r3, #16
 800178a:	7023      	strb	r3, [r4, #0]

	HAL_UART_Transmit(&huart1, (uint8_t *)startMessage, sizeof(startMessage), 10);
 800178c:	f107 0110 	add.w	r1, r7, #16
 8001790:	230a      	movs	r3, #10
 8001792:	2210      	movs	r2, #16
 8001794:	4810      	ldr	r0, [pc, #64]	@ (80017d8 <main+0xa0>)
 8001796:	f003 fb62 	bl	8004e5e <HAL_UART_Transmit>
	GNSSCom_Init(&huart3,&huart1);
 800179a:	490f      	ldr	r1, [pc, #60]	@ (80017d8 <main+0xa0>)
 800179c:	480f      	ldr	r0, [pc, #60]	@ (80017dc <main+0xa4>)
 800179e:	f7ff fb8b 	bl	8000eb8 <GNSSCom_Init>
	HAL_UART_Transmit(&huart1, (uint8_t *)initDoneMessage, sizeof(initDoneMessage), 10);
 80017a2:	4639      	mov	r1, r7
 80017a4:	230a      	movs	r3, #10
 80017a6:	220f      	movs	r2, #15
 80017a8:	480b      	ldr	r0, [pc, #44]	@ (80017d8 <main+0xa0>)
 80017aa:	f003 fb58 	bl	8004e5e <HAL_UART_Transmit>


	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_5);
 80017ae:	2110      	movs	r1, #16
 80017b0:	4806      	ldr	r0, [pc, #24]	@ (80017cc <main+0x94>)
 80017b2:	f001 fd85 	bl	80032c0 <HAL_GPIO_TogglePin>
 80017b6:	2120      	movs	r1, #32
 80017b8:	4804      	ldr	r0, [pc, #16]	@ (80017cc <main+0x94>)
 80017ba:	f001 fd81 	bl	80032c0 <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 80017be:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017c2:	f001 f8d5 	bl	8002970 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80017c6:	bf00      	nop
 80017c8:	e7fd      	b.n	80017c6 <main+0x8e>
 80017ca:	bf00      	nop
 80017cc:	48001000 	.word	0x48001000
 80017d0:	0800986c 	.word	0x0800986c
 80017d4:	0800987c 	.word	0x0800987c
 80017d8:	2000095c 	.word	0x2000095c
 80017dc:	20000a6c 	.word	0x20000a6c

080017e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b096      	sub	sp, #88	@ 0x58
 80017e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017e6:	f107 0314 	add.w	r3, r7, #20
 80017ea:	2244      	movs	r2, #68	@ 0x44
 80017ec:	2100      	movs	r1, #0
 80017ee:	4618      	mov	r0, r3
 80017f0:	f005 ffb7 	bl	8007762 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017f4:	463b      	mov	r3, r7
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	605a      	str	r2, [r3, #4]
 80017fc:	609a      	str	r2, [r3, #8]
 80017fe:	60da      	str	r2, [r3, #12]
 8001800:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001802:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001806:	f001 fecb 	bl	80035a0 <HAL_PWREx_ControlVoltageScaling>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001810:	f000 f835 	bl	800187e <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001814:	2301      	movs	r3, #1
 8001816:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001818:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800181c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800181e:	2302      	movs	r3, #2
 8001820:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001822:	2303      	movs	r3, #3
 8001824:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001826:	2302      	movs	r3, #2
 8001828:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800182a:	230a      	movs	r3, #10
 800182c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800182e:	2302      	movs	r3, #2
 8001830:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001832:	2302      	movs	r3, #2
 8001834:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001836:	2302      	movs	r3, #2
 8001838:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800183a:	f107 0314 	add.w	r3, r7, #20
 800183e:	4618      	mov	r0, r3
 8001840:	f001 ff14 	bl	800366c <HAL_RCC_OscConfig>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800184a:	f000 f818 	bl	800187e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800184e:	230f      	movs	r3, #15
 8001850:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001852:	2303      	movs	r3, #3
 8001854:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001856:	2300      	movs	r3, #0
 8001858:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800185a:	2300      	movs	r3, #0
 800185c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800185e:	2300      	movs	r3, #0
 8001860:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001862:	463b      	mov	r3, r7
 8001864:	2104      	movs	r1, #4
 8001866:	4618      	mov	r0, r3
 8001868:	f002 fb1a 	bl	8003ea0 <HAL_RCC_ClockConfig>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001872:	f000 f804 	bl	800187e <Error_Handler>
  }
}
 8001876:	bf00      	nop
 8001878:	3758      	adds	r7, #88	@ 0x58
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001882:	b672      	cpsid	i
}
 8001884:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001886:	bf00      	nop
 8001888:	e7fd      	b.n	8001886 <Error_Handler+0x8>
	...

0800188c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001890:	4b1b      	ldr	r3, [pc, #108]	@ (8001900 <MX_SPI1_Init+0x74>)
 8001892:	4a1c      	ldr	r2, [pc, #112]	@ (8001904 <MX_SPI1_Init+0x78>)
 8001894:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001896:	4b1a      	ldr	r3, [pc, #104]	@ (8001900 <MX_SPI1_Init+0x74>)
 8001898:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800189c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800189e:	4b18      	ldr	r3, [pc, #96]	@ (8001900 <MX_SPI1_Init+0x74>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80018a4:	4b16      	ldr	r3, [pc, #88]	@ (8001900 <MX_SPI1_Init+0x74>)
 80018a6:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80018aa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018ac:	4b14      	ldr	r3, [pc, #80]	@ (8001900 <MX_SPI1_Init+0x74>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018b2:	4b13      	ldr	r3, [pc, #76]	@ (8001900 <MX_SPI1_Init+0x74>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80018b8:	4b11      	ldr	r3, [pc, #68]	@ (8001900 <MX_SPI1_Init+0x74>)
 80018ba:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80018be:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80018c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001900 <MX_SPI1_Init+0x74>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001900 <MX_SPI1_Init+0x74>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001900 <MX_SPI1_Init+0x74>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001900 <MX_SPI1_Init+0x74>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80018d8:	4b09      	ldr	r3, [pc, #36]	@ (8001900 <MX_SPI1_Init+0x74>)
 80018da:	2207      	movs	r2, #7
 80018dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80018de:	4b08      	ldr	r3, [pc, #32]	@ (8001900 <MX_SPI1_Init+0x74>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80018e4:	4b06      	ldr	r3, [pc, #24]	@ (8001900 <MX_SPI1_Init+0x74>)
 80018e6:	2208      	movs	r2, #8
 80018e8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018ea:	4805      	ldr	r0, [pc, #20]	@ (8001900 <MX_SPI1_Init+0x74>)
 80018ec:	f003 f9c6 	bl	8004c7c <HAL_SPI_Init>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80018f6:	f7ff ffc2 	bl	800187e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	200006fc 	.word	0x200006fc
 8001904:	40013000 	.word	0x40013000

08001908 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800190c:	4b1b      	ldr	r3, [pc, #108]	@ (800197c <MX_SPI2_Init+0x74>)
 800190e:	4a1c      	ldr	r2, [pc, #112]	@ (8001980 <MX_SPI2_Init+0x78>)
 8001910:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001912:	4b1a      	ldr	r3, [pc, #104]	@ (800197c <MX_SPI2_Init+0x74>)
 8001914:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001918:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800191a:	4b18      	ldr	r3, [pc, #96]	@ (800197c <MX_SPI2_Init+0x74>)
 800191c:	2200      	movs	r2, #0
 800191e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001920:	4b16      	ldr	r3, [pc, #88]	@ (800197c <MX_SPI2_Init+0x74>)
 8001922:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001926:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001928:	4b14      	ldr	r3, [pc, #80]	@ (800197c <MX_SPI2_Init+0x74>)
 800192a:	2200      	movs	r2, #0
 800192c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800192e:	4b13      	ldr	r3, [pc, #76]	@ (800197c <MX_SPI2_Init+0x74>)
 8001930:	2200      	movs	r2, #0
 8001932:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001934:	4b11      	ldr	r3, [pc, #68]	@ (800197c <MX_SPI2_Init+0x74>)
 8001936:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800193a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800193c:	4b0f      	ldr	r3, [pc, #60]	@ (800197c <MX_SPI2_Init+0x74>)
 800193e:	2200      	movs	r2, #0
 8001940:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001942:	4b0e      	ldr	r3, [pc, #56]	@ (800197c <MX_SPI2_Init+0x74>)
 8001944:	2200      	movs	r2, #0
 8001946:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001948:	4b0c      	ldr	r3, [pc, #48]	@ (800197c <MX_SPI2_Init+0x74>)
 800194a:	2200      	movs	r2, #0
 800194c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800194e:	4b0b      	ldr	r3, [pc, #44]	@ (800197c <MX_SPI2_Init+0x74>)
 8001950:	2200      	movs	r2, #0
 8001952:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001954:	4b09      	ldr	r3, [pc, #36]	@ (800197c <MX_SPI2_Init+0x74>)
 8001956:	2207      	movs	r2, #7
 8001958:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800195a:	4b08      	ldr	r3, [pc, #32]	@ (800197c <MX_SPI2_Init+0x74>)
 800195c:	2200      	movs	r2, #0
 800195e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001960:	4b06      	ldr	r3, [pc, #24]	@ (800197c <MX_SPI2_Init+0x74>)
 8001962:	2208      	movs	r2, #8
 8001964:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001966:	4805      	ldr	r0, [pc, #20]	@ (800197c <MX_SPI2_Init+0x74>)
 8001968:	f003 f988 	bl	8004c7c <HAL_SPI_Init>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001972:	f7ff ff84 	bl	800187e <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	20000760 	.word	0x20000760
 8001980:	40003800 	.word	0x40003800

08001984 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b08c      	sub	sp, #48	@ 0x30
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198c:	f107 031c 	add.w	r3, r7, #28
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	60da      	str	r2, [r3, #12]
 800199a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a2e      	ldr	r2, [pc, #184]	@ (8001a5c <HAL_SPI_MspInit+0xd8>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d129      	bne.n	80019fa <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019a6:	4b2e      	ldr	r3, [pc, #184]	@ (8001a60 <HAL_SPI_MspInit+0xdc>)
 80019a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019aa:	4a2d      	ldr	r2, [pc, #180]	@ (8001a60 <HAL_SPI_MspInit+0xdc>)
 80019ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80019b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80019b2:	4b2b      	ldr	r3, [pc, #172]	@ (8001a60 <HAL_SPI_MspInit+0xdc>)
 80019b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019ba:	61bb      	str	r3, [r7, #24]
 80019bc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80019be:	4b28      	ldr	r3, [pc, #160]	@ (8001a60 <HAL_SPI_MspInit+0xdc>)
 80019c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019c2:	4a27      	ldr	r2, [pc, #156]	@ (8001a60 <HAL_SPI_MspInit+0xdc>)
 80019c4:	f043 0310 	orr.w	r3, r3, #16
 80019c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019ca:	4b25      	ldr	r3, [pc, #148]	@ (8001a60 <HAL_SPI_MspInit+0xdc>)
 80019cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ce:	f003 0310 	and.w	r3, r3, #16
 80019d2:	617b      	str	r3, [r7, #20]
 80019d4:	697b      	ldr	r3, [r7, #20]
    PE12     ------> SPI1_NSS
    PE13     ------> SPI1_SCK
    PE14     ------> SPI1_MISO
    PE15     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = PROC_nCS_Pin|PROC_SCLK_Pin|PROC_MISO_Pin|PROC_MOSI_Pin;
 80019d6:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80019da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019dc:	2302      	movs	r3, #2
 80019de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e4:	2303      	movs	r3, #3
 80019e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019e8:	2305      	movs	r3, #5
 80019ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019ec:	f107 031c 	add.w	r3, r7, #28
 80019f0:	4619      	mov	r1, r3
 80019f2:	481c      	ldr	r0, [pc, #112]	@ (8001a64 <HAL_SPI_MspInit+0xe0>)
 80019f4:	f001 faba 	bl	8002f6c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80019f8:	e02c      	b.n	8001a54 <HAL_SPI_MspInit+0xd0>
  else if(spiHandle->Instance==SPI2)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a1a      	ldr	r2, [pc, #104]	@ (8001a68 <HAL_SPI_MspInit+0xe4>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d127      	bne.n	8001a54 <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a04:	4b16      	ldr	r3, [pc, #88]	@ (8001a60 <HAL_SPI_MspInit+0xdc>)
 8001a06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a08:	4a15      	ldr	r2, [pc, #84]	@ (8001a60 <HAL_SPI_MspInit+0xdc>)
 8001a0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a10:	4b13      	ldr	r3, [pc, #76]	@ (8001a60 <HAL_SPI_MspInit+0xdc>)
 8001a12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a18:	613b      	str	r3, [r7, #16]
 8001a1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a1c:	4b10      	ldr	r3, [pc, #64]	@ (8001a60 <HAL_SPI_MspInit+0xdc>)
 8001a1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a20:	4a0f      	ldr	r2, [pc, #60]	@ (8001a60 <HAL_SPI_MspInit+0xdc>)
 8001a22:	f043 0308 	orr.w	r3, r3, #8
 8001a26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a28:	4b0d      	ldr	r3, [pc, #52]	@ (8001a60 <HAL_SPI_MspInit+0xdc>)
 8001a2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a2c:	f003 0308 	and.w	r3, r3, #8
 8001a30:	60fb      	str	r3, [r7, #12]
 8001a32:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RFM_SPI_nCS_Pin|RFM_SPI_SCK_Pin|RFM_SPI_MISO_Pin|RFM_SPI_MOSI_Pin;
 8001a34:	231b      	movs	r3, #27
 8001a36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a40:	2303      	movs	r3, #3
 8001a42:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a44:	2305      	movs	r3, #5
 8001a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a48:	f107 031c 	add.w	r3, r7, #28
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4807      	ldr	r0, [pc, #28]	@ (8001a6c <HAL_SPI_MspInit+0xe8>)
 8001a50:	f001 fa8c 	bl	8002f6c <HAL_GPIO_Init>
}
 8001a54:	bf00      	nop
 8001a56:	3730      	adds	r7, #48	@ 0x30
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40013000 	.word	0x40013000
 8001a60:	40021000 	.word	0x40021000
 8001a64:	48001000 	.word	0x48001000
 8001a68:	40003800 	.word	0x40003800
 8001a6c:	48000c00 	.word	0x48000c00

08001a70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a76:	4b0f      	ldr	r3, [pc, #60]	@ (8001ab4 <HAL_MspInit+0x44>)
 8001a78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a7a:	4a0e      	ldr	r2, [pc, #56]	@ (8001ab4 <HAL_MspInit+0x44>)
 8001a7c:	f043 0301 	orr.w	r3, r3, #1
 8001a80:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a82:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab4 <HAL_MspInit+0x44>)
 8001a84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	607b      	str	r3, [r7, #4]
 8001a8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a8e:	4b09      	ldr	r3, [pc, #36]	@ (8001ab4 <HAL_MspInit+0x44>)
 8001a90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a92:	4a08      	ldr	r2, [pc, #32]	@ (8001ab4 <HAL_MspInit+0x44>)
 8001a94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a98:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a9a:	4b06      	ldr	r3, [pc, #24]	@ (8001ab4 <HAL_MspInit+0x44>)
 8001a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aa2:	603b      	str	r3, [r7, #0]
 8001aa4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	40021000 	.word	0x40021000

08001ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001abc:	bf00      	nop
 8001abe:	e7fd      	b.n	8001abc <NMI_Handler+0x4>

08001ac0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ac4:	bf00      	nop
 8001ac6:	e7fd      	b.n	8001ac4 <HardFault_Handler+0x4>

08001ac8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001acc:	bf00      	nop
 8001ace:	e7fd      	b.n	8001acc <MemManage_Handler+0x4>

08001ad0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ad4:	bf00      	nop
 8001ad6:	e7fd      	b.n	8001ad4 <BusFault_Handler+0x4>

08001ad8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001adc:	bf00      	nop
 8001ade:	e7fd      	b.n	8001adc <UsageFault_Handler+0x4>

08001ae0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ae4:	bf00      	nop
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aee:	b480      	push	{r7}
 8001af0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b00:	bf00      	nop
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b0e:	f000 ff0f 	bl	8002930 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
	...

08001b18 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b1c:	4802      	ldr	r0, [pc, #8]	@ (8001b28 <USART1_IRQHandler+0x10>)
 8001b1e:	f003 fa73 	bl	8005008 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	2000095c 	.word	0x2000095c

08001b2c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b30:	4802      	ldr	r0, [pc, #8]	@ (8001b3c <USART2_IRQHandler+0x10>)
 8001b32:	f003 fa69 	bl	8005008 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	200009e4 	.word	0x200009e4

08001b40 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001b44:	4802      	ldr	r0, [pc, #8]	@ (8001b50 <USART3_IRQHandler+0x10>)
 8001b46:	f003 fa5f 	bl	8005008 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	20000a6c 	.word	0x20000a6c

08001b54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  return 1;
 8001b58:	2301      	movs	r3, #1
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <_kill>:

int _kill(int pid, int sig)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b6e:	f005 fe6d 	bl	800784c <__errno>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2216      	movs	r2, #22
 8001b76:	601a      	str	r2, [r3, #0]
  return -1;
 8001b78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <_exit>:

void _exit (int status)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f7ff ffe7 	bl	8001b64 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b96:	bf00      	nop
 8001b98:	e7fd      	b.n	8001b96 <_exit+0x12>

08001b9a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b086      	sub	sp, #24
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	60f8      	str	r0, [r7, #12]
 8001ba2:	60b9      	str	r1, [r7, #8]
 8001ba4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	617b      	str	r3, [r7, #20]
 8001baa:	e00a      	b.n	8001bc2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bac:	f3af 8000 	nop.w
 8001bb0:	4601      	mov	r1, r0
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	1c5a      	adds	r2, r3, #1
 8001bb6:	60ba      	str	r2, [r7, #8]
 8001bb8:	b2ca      	uxtb	r2, r1
 8001bba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	617b      	str	r3, [r7, #20]
 8001bc2:	697a      	ldr	r2, [r7, #20]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	dbf0      	blt.n	8001bac <_read+0x12>
  }

  return len;
 8001bca:	687b      	ldr	r3, [r7, #4]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3718      	adds	r7, #24
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be0:	2300      	movs	r3, #0
 8001be2:	617b      	str	r3, [r7, #20]
 8001be4:	e009      	b.n	8001bfa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	1c5a      	adds	r2, r3, #1
 8001bea:	60ba      	str	r2, [r7, #8]
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	617b      	str	r3, [r7, #20]
 8001bfa:	697a      	ldr	r2, [r7, #20]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	dbf1      	blt.n	8001be6 <_write+0x12>
  }
  return len;
 8001c02:	687b      	ldr	r3, [r7, #4]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3718      	adds	r7, #24
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <_close>:

int _close(int file)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c34:	605a      	str	r2, [r3, #4]
  return 0;
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <_isatty>:

int _isatty(int file)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c4c:	2301      	movs	r3, #1
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr

08001c5a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b085      	sub	sp, #20
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	60f8      	str	r0, [r7, #12]
 8001c62:	60b9      	str	r1, [r7, #8]
 8001c64:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c66:	2300      	movs	r3, #0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3714      	adds	r7, #20
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c7c:	4a14      	ldr	r2, [pc, #80]	@ (8001cd0 <_sbrk+0x5c>)
 8001c7e:	4b15      	ldr	r3, [pc, #84]	@ (8001cd4 <_sbrk+0x60>)
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c88:	4b13      	ldr	r3, [pc, #76]	@ (8001cd8 <_sbrk+0x64>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d102      	bne.n	8001c96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c90:	4b11      	ldr	r3, [pc, #68]	@ (8001cd8 <_sbrk+0x64>)
 8001c92:	4a12      	ldr	r2, [pc, #72]	@ (8001cdc <_sbrk+0x68>)
 8001c94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c96:	4b10      	ldr	r3, [pc, #64]	@ (8001cd8 <_sbrk+0x64>)
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d207      	bcs.n	8001cb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ca4:	f005 fdd2 	bl	800784c <__errno>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	220c      	movs	r2, #12
 8001cac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cae:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb2:	e009      	b.n	8001cc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cb4:	4b08      	ldr	r3, [pc, #32]	@ (8001cd8 <_sbrk+0x64>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cba:	4b07      	ldr	r3, [pc, #28]	@ (8001cd8 <_sbrk+0x64>)
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	4a05      	ldr	r2, [pc, #20]	@ (8001cd8 <_sbrk+0x64>)
 8001cc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3718      	adds	r7, #24
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	20050000 	.word	0x20050000
 8001cd4:	00000400 	.word	0x00000400
 8001cd8:	200007c4 	.word	0x200007c4
 8001cdc:	20001150 	.word	0x20001150

08001ce0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ce4:	4b06      	ldr	r3, [pc, #24]	@ (8001d00 <SystemInit+0x20>)
 8001ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cea:	4a05      	ldr	r2, [pc, #20]	@ (8001d00 <SystemInit+0x20>)
 8001cec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001cf0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001cf4:	bf00      	nop
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <debug_UBX_NAV_TIMEUTC>:
 */

#include "traductor.h"


void debug_UBX_NAV_TIMEUTC(UBXMessage_parsed* UBXMessage,UBX_NAV_TIMEUTC *structAssociate){
 8001d04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d08:	b093      	sub	sp, #76	@ 0x4c
 8001d0a:	af08      	add	r7, sp, #32
 8001d0c:	61f8      	str	r0, [r7, #28]
 8001d0e:	61b9      	str	r1, [r7, #24]
	size_t offset = 0;
 8001d10:	2300      	movs	r3, #0
 8001d12:	627b      	str	r3, [r7, #36]	@ 0x24
	ITM_Port32(31)=21;
 8001d14:	4b71      	ldr	r3, [pc, #452]	@ (8001edc <debug_UBX_NAV_TIMEUTC+0x1d8>)
 8001d16:	2215      	movs	r2, #21
 8001d18:	601a      	str	r2, [r3, #0]
	memcpy(&(structAssociate->iTOW), UBXMessage->load + offset, sizeof(structAssociate->iTOW));
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	69fa      	ldr	r2, [r7, #28]
 8001d1e:	1d11      	adds	r1, r2, #4
 8001d20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d22:	440a      	add	r2, r1
 8001d24:	6812      	ldr	r2, [r2, #0]
 8001d26:	601a      	str	r2, [r3, #0]
	offset += sizeof(structAssociate->iTOW);
 8001d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d2a:	3304      	adds	r3, #4
 8001d2c:	627b      	str	r3, [r7, #36]	@ 0x24

	memcpy(&(structAssociate->tAcc), UBXMessage->load + offset, sizeof(structAssociate->tAcc));
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	3304      	adds	r3, #4
 8001d32:	69fa      	ldr	r2, [r7, #28]
 8001d34:	1d11      	adds	r1, r2, #4
 8001d36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d38:	440a      	add	r2, r1
 8001d3a:	6812      	ldr	r2, [r2, #0]
 8001d3c:	601a      	str	r2, [r3, #0]
	offset += sizeof(structAssociate->tAcc);
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d40:	3304      	adds	r3, #4
 8001d42:	627b      	str	r3, [r7, #36]	@ 0x24

	memcpy(&(structAssociate->nano), UBXMessage->load + offset, sizeof(structAssociate->nano));
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	3308      	adds	r3, #8
 8001d48:	69fa      	ldr	r2, [r7, #28]
 8001d4a:	1d11      	adds	r1, r2, #4
 8001d4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d4e:	440a      	add	r2, r1
 8001d50:	6812      	ldr	r2, [r2, #0]
 8001d52:	601a      	str	r2, [r3, #0]
	offset += sizeof(structAssociate->nano);
 8001d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d56:	3304      	adds	r3, #4
 8001d58:	627b      	str	r3, [r7, #36]	@ 0x24

	memcpy(&(structAssociate->year), UBXMessage->load + offset, sizeof(structAssociate->year));
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	330c      	adds	r3, #12
 8001d5e:	69fa      	ldr	r2, [r7, #28]
 8001d60:	1d11      	adds	r1, r2, #4
 8001d62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d64:	440a      	add	r2, r1
 8001d66:	8812      	ldrh	r2, [r2, #0]
 8001d68:	b292      	uxth	r2, r2
 8001d6a:	801a      	strh	r2, [r3, #0]
	offset += sizeof(structAssociate->year);
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d6e:	3302      	adds	r3, #2
 8001d70:	627b      	str	r3, [r7, #36]	@ 0x24

	memcpy(&(structAssociate->month), UBXMessage->load + offset, sizeof(structAssociate->month));
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	330e      	adds	r3, #14
 8001d76:	69fa      	ldr	r2, [r7, #28]
 8001d78:	1d11      	adds	r1, r2, #4
 8001d7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d7c:	440a      	add	r2, r1
 8001d7e:	7812      	ldrb	r2, [r2, #0]
 8001d80:	701a      	strb	r2, [r3, #0]
	offset += sizeof(structAssociate->month);
 8001d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d84:	3301      	adds	r3, #1
 8001d86:	627b      	str	r3, [r7, #36]	@ 0x24

	memcpy(&(structAssociate->day), UBXMessage->load + offset, sizeof(structAssociate->day));
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	330f      	adds	r3, #15
 8001d8c:	69fa      	ldr	r2, [r7, #28]
 8001d8e:	1d11      	adds	r1, r2, #4
 8001d90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d92:	440a      	add	r2, r1
 8001d94:	7812      	ldrb	r2, [r2, #0]
 8001d96:	701a      	strb	r2, [r3, #0]
	offset += sizeof(structAssociate->day);
 8001d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	627b      	str	r3, [r7, #36]	@ 0x24

	memcpy(&(structAssociate->hour), UBXMessage->load + offset, sizeof(structAssociate->hour));
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	3310      	adds	r3, #16
 8001da2:	69fa      	ldr	r2, [r7, #28]
 8001da4:	1d11      	adds	r1, r2, #4
 8001da6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001da8:	440a      	add	r2, r1
 8001daa:	7812      	ldrb	r2, [r2, #0]
 8001dac:	701a      	strb	r2, [r3, #0]
	offset += sizeof(structAssociate->hour);
 8001dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db0:	3301      	adds	r3, #1
 8001db2:	627b      	str	r3, [r7, #36]	@ 0x24

	memcpy(&(structAssociate->min), UBXMessage->load + offset, sizeof(structAssociate->min));
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	3311      	adds	r3, #17
 8001db8:	69fa      	ldr	r2, [r7, #28]
 8001dba:	1d11      	adds	r1, r2, #4
 8001dbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dbe:	440a      	add	r2, r1
 8001dc0:	7812      	ldrb	r2, [r2, #0]
 8001dc2:	701a      	strb	r2, [r3, #0]
	offset += sizeof(structAssociate->min);
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	627b      	str	r3, [r7, #36]	@ 0x24

	memcpy(&(structAssociate->sec), UBXMessage->load + offset, sizeof(structAssociate->sec));
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	3312      	adds	r3, #18
 8001dce:	69fa      	ldr	r2, [r7, #28]
 8001dd0:	1d11      	adds	r1, r2, #4
 8001dd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dd4:	440a      	add	r2, r1
 8001dd6:	7812      	ldrb	r2, [r2, #0]
 8001dd8:	701a      	strb	r2, [r3, #0]
	offset += sizeof(structAssociate->sec);
 8001dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ddc:	3301      	adds	r3, #1
 8001dde:	627b      	str	r3, [r7, #36]	@ 0x24

	memcpy(&(structAssociate->valid), UBXMessage->load + offset, sizeof(structAssociate->valid));
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	3313      	adds	r3, #19
 8001de4:	69fa      	ldr	r2, [r7, #28]
 8001de6:	1d11      	adds	r1, r2, #4
 8001de8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dea:	440a      	add	r2, r1
 8001dec:	7812      	ldrb	r2, [r2, #0]
 8001dee:	701a      	strb	r2, [r3, #0]
	offset += sizeof(structAssociate->valid);
 8001df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df2:	3301      	adds	r3, #1
 8001df4:	627b      	str	r3, [r7, #36]	@ 0x24

	int len =sprintf(UBXMessage->bufferDebug,
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	f103 05cc 	add.w	r5, r3, #204	@ 0xcc
			"iTOW [ms]: %u\r\n"
			"tAcc [ns]: %u\r\n"
			"Date [YYYY-MM-DD]: %u-%u-%u\r\n"
			"Time [HH:MM:SS]: %u:%u:%u - %u [ns]\r\n"
			"valid: %u\r\n",
			bytes_to_endian(structAssociate->iTOW,sizeof(structAssociate->iTOW),'l'),
 8001dfc:	69bb      	ldr	r3, [r7, #24]
	int len =sprintf(UBXMessage->bufferDebug,
 8001dfe:	226c      	movs	r2, #108	@ 0x6c
 8001e00:	2104      	movs	r1, #4
 8001e02:	4618      	mov	r0, r3
 8001e04:	f000 f938 	bl	8002078 <bytes_to_endian>
 8001e08:	4680      	mov	r8, r0
			bytes_to_endian(structAssociate->tAcc,sizeof(structAssociate->tAcc),'l'),
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	3304      	adds	r3, #4
	int len =sprintf(UBXMessage->bufferDebug,
 8001e0e:	226c      	movs	r2, #108	@ 0x6c
 8001e10:	2104      	movs	r1, #4
 8001e12:	4618      	mov	r0, r3
 8001e14:	f000 f930 	bl	8002078 <bytes_to_endian>
 8001e18:	4681      	mov	r9, r0
			bytes_to_endian(structAssociate->year,sizeof(structAssociate->year),'l'),
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	330c      	adds	r3, #12
	int len =sprintf(UBXMessage->bufferDebug,
 8001e1e:	226c      	movs	r2, #108	@ 0x6c
 8001e20:	2102      	movs	r1, #2
 8001e22:	4618      	mov	r0, r3
 8001e24:	f000 f928 	bl	8002078 <bytes_to_endian>
 8001e28:	4606      	mov	r6, r0
			bytes_to_endian(structAssociate->month,sizeof(structAssociate->month),'l'),
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	330e      	adds	r3, #14
	int len =sprintf(UBXMessage->bufferDebug,
 8001e2e:	226c      	movs	r2, #108	@ 0x6c
 8001e30:	2101      	movs	r1, #1
 8001e32:	4618      	mov	r0, r3
 8001e34:	f000 f920 	bl	8002078 <bytes_to_endian>
 8001e38:	6178      	str	r0, [r7, #20]
			bytes_to_endian(structAssociate->day,sizeof(structAssociate->day),'l'),
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	330f      	adds	r3, #15
	int len =sprintf(UBXMessage->bufferDebug,
 8001e3e:	226c      	movs	r2, #108	@ 0x6c
 8001e40:	2101      	movs	r1, #1
 8001e42:	4618      	mov	r0, r3
 8001e44:	f000 f918 	bl	8002078 <bytes_to_endian>
 8001e48:	6138      	str	r0, [r7, #16]
			bytes_to_endian(structAssociate->hour,sizeof(structAssociate->hour),'l'),
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	3310      	adds	r3, #16
	int len =sprintf(UBXMessage->bufferDebug,
 8001e4e:	226c      	movs	r2, #108	@ 0x6c
 8001e50:	2101      	movs	r1, #1
 8001e52:	4618      	mov	r0, r3
 8001e54:	f000 f910 	bl	8002078 <bytes_to_endian>
 8001e58:	60f8      	str	r0, [r7, #12]
			bytes_to_endian(structAssociate->min,sizeof(structAssociate->min),'l'),
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	3311      	adds	r3, #17
	int len =sprintf(UBXMessage->bufferDebug,
 8001e5e:	226c      	movs	r2, #108	@ 0x6c
 8001e60:	2101      	movs	r1, #1
 8001e62:	4618      	mov	r0, r3
 8001e64:	f000 f908 	bl	8002078 <bytes_to_endian>
 8001e68:	60b8      	str	r0, [r7, #8]
			bytes_to_endian(structAssociate->sec,sizeof(structAssociate->sec),'l'),
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	3312      	adds	r3, #18
	int len =sprintf(UBXMessage->bufferDebug,
 8001e6e:	226c      	movs	r2, #108	@ 0x6c
 8001e70:	2101      	movs	r1, #1
 8001e72:	4618      	mov	r0, r3
 8001e74:	f000 f900 	bl	8002078 <bytes_to_endian>
 8001e78:	6078      	str	r0, [r7, #4]
			bytes_to_endian(structAssociate->nano,sizeof(structAssociate->nano),'l'),
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	3308      	adds	r3, #8
	int len =sprintf(UBXMessage->bufferDebug,
 8001e7e:	226c      	movs	r2, #108	@ 0x6c
 8001e80:	2104      	movs	r1, #4
 8001e82:	4618      	mov	r0, r3
 8001e84:	f000 f8f8 	bl	8002078 <bytes_to_endian>
 8001e88:	4604      	mov	r4, r0
			bytes_to_endian(structAssociate->valid,sizeof(structAssociate->valid),'l')
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	3313      	adds	r3, #19
	int len =sprintf(UBXMessage->bufferDebug,
 8001e8e:	226c      	movs	r2, #108	@ 0x6c
 8001e90:	2101      	movs	r1, #1
 8001e92:	4618      	mov	r0, r3
 8001e94:	f000 f8f0 	bl	8002078 <bytes_to_endian>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	9307      	str	r3, [sp, #28]
 8001e9c:	9406      	str	r4, [sp, #24]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	9305      	str	r3, [sp, #20]
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	9304      	str	r3, [sp, #16]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	9303      	str	r3, [sp, #12]
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	9302      	str	r3, [sp, #8]
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	9301      	str	r3, [sp, #4]
 8001eb2:	9600      	str	r6, [sp, #0]
 8001eb4:	464b      	mov	r3, r9
 8001eb6:	4642      	mov	r2, r8
 8001eb8:	4909      	ldr	r1, [pc, #36]	@ (8001ee0 <debug_UBX_NAV_TIMEUTC+0x1dc>)
 8001eba:	4628      	mov	r0, r5
 8001ebc:	f005 fbee 	bl	800769c <siprintf>
 8001ec0:	6238      	str	r0, [r7, #32]
	);

	fill_unuse_memory(UBXMessage,len);
 8001ec2:	6a39      	ldr	r1, [r7, #32]
 8001ec4:	69f8      	ldr	r0, [r7, #28]
 8001ec6:	f000 f9ab 	bl	8002220 <fill_unuse_memory>
	ITM_Port32(31)=20;
 8001eca:	4b04      	ldr	r3, [pc, #16]	@ (8001edc <debug_UBX_NAV_TIMEUTC+0x1d8>)
 8001ecc:	2214      	movs	r2, #20
 8001ece:	601a      	str	r2, [r3, #0]
}
 8001ed0:	bf00      	nop
 8001ed2:	372c      	adds	r7, #44	@ 0x2c
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001eda:	bf00      	nop
 8001edc:	e000007c 	.word	0xe000007c
 8001ee0:	0800988c 	.word	0x0800988c

08001ee4 <debug_SetVal>:

void debug_SetVal(UBXMessage_parsed* UBXMessage,UBX_CFG_SETVAL* structAssociate){
 8001ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ee6:	b087      	sub	sp, #28
 8001ee8:	af02      	add	r7, sp, #8
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]

	size_t offset = 0;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60fb      	str	r3, [r7, #12]

	memcpy(&(structAssociate->version), UBXMessage->load + offset, sizeof(structAssociate->version));
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	1d11      	adds	r1, r2, #4
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	440a      	add	r2, r1
 8001efc:	7812      	ldrb	r2, [r2, #0]
 8001efe:	701a      	strb	r2, [r3, #0]
	offset += sizeof((structAssociate->version));
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	3301      	adds	r3, #1
 8001f04:	60fb      	str	r3, [r7, #12]

	memcpy(&(structAssociate->layers), UBXMessage->load + offset, sizeof(structAssociate->layers));
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	1d11      	adds	r1, r2, #4
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	440a      	add	r2, r1
 8001f12:	7812      	ldrb	r2, [r2, #0]
 8001f14:	701a      	strb	r2, [r3, #0]
	offset += sizeof((structAssociate->layers));
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	60fb      	str	r3, [r7, #12]

	offset += sizeof((structAssociate->reserved));
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	3302      	adds	r3, #2
 8001f20:	60fb      	str	r3, [r7, #12]

	memcpy(&(structAssociate->cfgData), UBXMessage->load + offset, sizeof(structAssociate->cfgData));
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	1d18      	adds	r0, r3, #4
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	1d1a      	adds	r2, r3, #4
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	22c8      	movs	r2, #200	@ 0xc8
 8001f30:	4619      	mov	r1, r3
 8001f32:	f005 fcb8 	bl	80078a6 <memcpy>
	offset += sizeof((structAssociate->cfgData));
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	33c8      	adds	r3, #200	@ 0xc8
 8001f3a:	60fb      	str	r3, [r7, #12]
	//Diviser ici en flag
	//

	int len = sprintf(UBXMessage->bufferDebug,
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f103 04cc 	add.w	r4, r3, #204	@ 0xcc
			"\r\n__debug_SetVal___\r\n"
			"version: %u\r\n"
			"layers: %u\r\n"
			"KeyId|Value: %s\r\n",
			bytes_to_endian(structAssociate->version,sizeof(structAssociate->version),'b'),
 8001f42:	683b      	ldr	r3, [r7, #0]
	int len = sprintf(UBXMessage->bufferDebug,
 8001f44:	2262      	movs	r2, #98	@ 0x62
 8001f46:	2101      	movs	r1, #1
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f000 f895 	bl	8002078 <bytes_to_endian>
 8001f4e:	4605      	mov	r5, r0
			bytes_to_endian(structAssociate->layers,sizeof(structAssociate->layers),'l'),
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	3301      	adds	r3, #1
	int len = sprintf(UBXMessage->bufferDebug,
 8001f54:	226c      	movs	r2, #108	@ 0x6c
 8001f56:	2101      	movs	r1, #1
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f000 f88d 	bl	8002078 <bytes_to_endian>
 8001f5e:	4606      	mov	r6, r0
			array_to_hex_string(structAssociate->cfgData,sizeof(structAssociate->cfgData))
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	3304      	adds	r3, #4
	int len = sprintf(UBXMessage->bufferDebug,
 8001f64:	21c8      	movs	r1, #200	@ 0xc8
 8001f66:	4618      	mov	r0, r3
 8001f68:	f000 f974 	bl	8002254 <array_to_hex_string>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	9300      	str	r3, [sp, #0]
 8001f70:	4633      	mov	r3, r6
 8001f72:	462a      	mov	r2, r5
 8001f74:	4906      	ldr	r1, [pc, #24]	@ (8001f90 <debug_SetVal+0xac>)
 8001f76:	4620      	mov	r0, r4
 8001f78:	f005 fb90 	bl	800769c <siprintf>
 8001f7c:	60b8      	str	r0, [r7, #8]
	);
	fill_unuse_memory(UBXMessage,len);
 8001f7e:	68b9      	ldr	r1, [r7, #8]
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f000 f94d 	bl	8002220 <fill_unuse_memory>
}
 8001f86:	bf00      	nop
 8001f88:	3714      	adds	r7, #20
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	08009918 	.word	0x08009918

08001f94 <debug_GetVal>:

void debug_GetVal(UBXMessage_parsed* UBXMessage,UBX_CFG_GETVAL* structAssociate){
 8001f94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f96:	b08b      	sub	sp, #44	@ 0x2c
 8001f98:	af04      	add	r7, sp, #16
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]

	size_t offset = 0;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	617b      	str	r3, [r7, #20]

	memcpy(&(structAssociate->version), UBXMessage->load + offset, sizeof(structAssociate->version));
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	1d11      	adds	r1, r2, #4
 8001fa8:	697a      	ldr	r2, [r7, #20]
 8001faa:	440a      	add	r2, r1
 8001fac:	7812      	ldrb	r2, [r2, #0]
 8001fae:	701a      	strb	r2, [r3, #0]
	offset += sizeof((structAssociate->version));
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	617b      	str	r3, [r7, #20]

	memcpy(&(structAssociate->layers), UBXMessage->load + offset, sizeof(structAssociate->layers));
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	1d11      	adds	r1, r2, #4
 8001fbe:	697a      	ldr	r2, [r7, #20]
 8001fc0:	440a      	add	r2, r1
 8001fc2:	7812      	ldrb	r2, [r2, #0]
 8001fc4:	701a      	strb	r2, [r3, #0]
	offset += sizeof((structAssociate->layers));
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	617b      	str	r3, [r7, #20]

	memcpy(&(structAssociate->position), UBXMessage->load + offset, sizeof(structAssociate->position));
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	3302      	adds	r3, #2
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	1d11      	adds	r1, r2, #4
 8001fd4:	697a      	ldr	r2, [r7, #20]
 8001fd6:	440a      	add	r2, r1
 8001fd8:	8812      	ldrh	r2, [r2, #0]
 8001fda:	b292      	uxth	r2, r2
 8001fdc:	801a      	strh	r2, [r3, #0]
	offset += sizeof((structAssociate->position));
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	3302      	adds	r3, #2
 8001fe2:	617b      	str	r3, [r7, #20]

	memcpy(&(structAssociate->keys), UBXMessage->load + offset, sizeof(structAssociate->keys));
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	1d18      	adds	r0, r3, #4
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	1d1a      	adds	r2, r3, #4
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	4413      	add	r3, r2
 8001ff0:	22c8      	movs	r2, #200	@ 0xc8
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	f005 fc57 	bl	80078a6 <memcpy>
	offset += sizeof((structAssociate->keys));
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	33c8      	adds	r3, #200	@ 0xc8
 8001ffc:	617b      	str	r3, [r7, #20]
	//Diviser ici en flag
	//
	int len = sprintf(UBXMessage->bufferDebug,
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f103 04cc 	add.w	r4, r3, #204	@ 0xcc
			"\r\n___debug_GetVal___\r\n"
			"version: %llu\r\n"
			"layers: %u\r\n",
			"position: %u\r\n",
			"keys: %u\r\n",
			bytes_to_endian(structAssociate->version,sizeof(structAssociate->version),'b'),
 8002004:	68bb      	ldr	r3, [r7, #8]
	int len = sprintf(UBXMessage->bufferDebug,
 8002006:	2262      	movs	r2, #98	@ 0x62
 8002008:	2101      	movs	r1, #1
 800200a:	4618      	mov	r0, r3
 800200c:	f000 f834 	bl	8002078 <bytes_to_endian>
 8002010:	4605      	mov	r5, r0
			bytes_to_endian(structAssociate->layers,sizeof(structAssociate->layers),'l'),
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	3301      	adds	r3, #1
	int len = sprintf(UBXMessage->bufferDebug,
 8002016:	226c      	movs	r2, #108	@ 0x6c
 8002018:	2101      	movs	r1, #1
 800201a:	4618      	mov	r0, r3
 800201c:	f000 f82c 	bl	8002078 <bytes_to_endian>
 8002020:	4606      	mov	r6, r0
			bytes_to_endian(structAssociate->position,sizeof(structAssociate->position),'l'),
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	3302      	adds	r3, #2
	int len = sprintf(UBXMessage->bufferDebug,
 8002026:	226c      	movs	r2, #108	@ 0x6c
 8002028:	2102      	movs	r1, #2
 800202a:	4618      	mov	r0, r3
 800202c:	f000 f824 	bl	8002078 <bytes_to_endian>
 8002030:	6078      	str	r0, [r7, #4]
			bytes_to_endian(structAssociate->keys,sizeof(structAssociate->keys),'l')
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	3304      	adds	r3, #4
	int len = sprintf(UBXMessage->bufferDebug,
 8002036:	226c      	movs	r2, #108	@ 0x6c
 8002038:	21c8      	movs	r1, #200	@ 0xc8
 800203a:	4618      	mov	r0, r3
 800203c:	f000 f81c 	bl	8002078 <bytes_to_endian>
 8002040:	4603      	mov	r3, r0
 8002042:	9303      	str	r3, [sp, #12]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	9302      	str	r3, [sp, #8]
 8002048:	9601      	str	r6, [sp, #4]
 800204a:	9500      	str	r5, [sp, #0]
 800204c:	4b07      	ldr	r3, [pc, #28]	@ (800206c <debug_GetVal+0xd8>)
 800204e:	4a08      	ldr	r2, [pc, #32]	@ (8002070 <debug_GetVal+0xdc>)
 8002050:	4908      	ldr	r1, [pc, #32]	@ (8002074 <debug_GetVal+0xe0>)
 8002052:	4620      	mov	r0, r4
 8002054:	f005 fb22 	bl	800769c <siprintf>
 8002058:	6138      	str	r0, [r7, #16]
	);
	fill_unuse_memory(UBXMessage,len);
 800205a:	6939      	ldr	r1, [r7, #16]
 800205c:	68f8      	ldr	r0, [r7, #12]
 800205e:	f000 f8df 	bl	8002220 <fill_unuse_memory>

}
 8002062:	bf00      	nop
 8002064:	371c      	adds	r7, #28
 8002066:	46bd      	mov	sp, r7
 8002068:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800206a:	bf00      	nop
 800206c:	08009958 	.word	0x08009958
 8002070:	08009964 	.word	0x08009964
 8002074:	08009974 	.word	0x08009974

08002078 <bytes_to_endian>:

unsigned int bytes_to_endian(uint8_t attr[], size_t length, char type_endian) {
 8002078:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800207c:	b097      	sub	sp, #92	@ 0x5c
 800207e:	af00      	add	r7, sp, #0
 8002080:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8002082:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002084:	4613      	mov	r3, r2
 8002086:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint64_t result = 0;
 800208a:	f04f 0200 	mov.w	r2, #0
 800208e:	f04f 0300 	mov.w	r3, #0
 8002092:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	if (type_endian == 'l') { // little-endian
 8002096:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800209a:	2b6c      	cmp	r3, #108	@ 0x6c
 800209c:	d136      	bne.n	800210c <bytes_to_endian+0x94>
		for (size_t i = 0; i < length; ++i) {
 800209e:	2300      	movs	r3, #0
 80020a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80020a2:	e02e      	b.n	8002102 <bytes_to_endian+0x8a>
			result |= ((uint64_t)attr[i]) << (i * 8);
 80020a4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80020a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80020a8:	4413      	add	r3, r2
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2200      	movs	r2, #0
 80020b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80020b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80020b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	f1a3 0120 	sub.w	r1, r3, #32
 80020bc:	f1c3 0220 	rsb	r2, r3, #32
 80020c0:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 80020c4:	4628      	mov	r0, r5
 80020c6:	fa00 fb03 	lsl.w	fp, r0, r3
 80020ca:	4620      	mov	r0, r4
 80020cc:	fa00 f101 	lsl.w	r1, r0, r1
 80020d0:	ea4b 0b01 	orr.w	fp, fp, r1
 80020d4:	4621      	mov	r1, r4
 80020d6:	fa21 f202 	lsr.w	r2, r1, r2
 80020da:	ea4b 0b02 	orr.w	fp, fp, r2
 80020de:	4622      	mov	r2, r4
 80020e0:	fa02 fa03 	lsl.w	sl, r2, r3
 80020e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80020e8:	ea42 010a 	orr.w	r1, r2, sl
 80020ec:	6139      	str	r1, [r7, #16]
 80020ee:	ea43 030b 	orr.w	r3, r3, fp
 80020f2:	617b      	str	r3, [r7, #20]
 80020f4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80020f8:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
		for (size_t i = 0; i < length; ++i) {
 80020fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80020fe:	3301      	adds	r3, #1
 8002100:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002102:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002106:	429a      	cmp	r2, r3
 8002108:	d3cc      	bcc.n	80020a4 <bytes_to_endian+0x2c>
 800210a:	e081      	b.n	8002210 <bytes_to_endian+0x198>
		}
	} else if (type_endian == 'b') { // big-endian
 800210c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002110:	2b62      	cmp	r3, #98	@ 0x62
 8002112:	d138      	bne.n	8002186 <bytes_to_endian+0x10e>
		for (size_t i = 0; i < length; ++i) {
 8002114:	2300      	movs	r3, #0
 8002116:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002118:	e030      	b.n	800217c <bytes_to_endian+0x104>
			result |= ((uint64_t)attr[i]) << ((sizeof(uint64_t) - i - 1) * 8);
 800211a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800211c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800211e:	4413      	add	r3, r2
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	b2db      	uxtb	r3, r3
 8002124:	2200      	movs	r2, #0
 8002126:	623b      	str	r3, [r7, #32]
 8002128:	627a      	str	r2, [r7, #36]	@ 0x24
 800212a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800212c:	f1c3 0307 	rsb	r3, r3, #7
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	f1a3 0120 	sub.w	r1, r3, #32
 8002136:	f1c3 0220 	rsb	r2, r3, #32
 800213a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800213e:	4628      	mov	r0, r5
 8002140:	fa00 f903 	lsl.w	r9, r0, r3
 8002144:	4620      	mov	r0, r4
 8002146:	fa00 f101 	lsl.w	r1, r0, r1
 800214a:	ea49 0901 	orr.w	r9, r9, r1
 800214e:	4621      	mov	r1, r4
 8002150:	fa21 f202 	lsr.w	r2, r1, r2
 8002154:	ea49 0902 	orr.w	r9, r9, r2
 8002158:	4622      	mov	r2, r4
 800215a:	fa02 f803 	lsl.w	r8, r2, r3
 800215e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002162:	ea42 0108 	orr.w	r1, r2, r8
 8002166:	60b9      	str	r1, [r7, #8]
 8002168:	ea43 0309 	orr.w	r3, r3, r9
 800216c:	60fb      	str	r3, [r7, #12]
 800216e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002172:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
		for (size_t i = 0; i < length; ++i) {
 8002176:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002178:	3301      	adds	r3, #1
 800217a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800217c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800217e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002180:	429a      	cmp	r2, r3
 8002182:	d3ca      	bcc.n	800211a <bytes_to_endian+0xa2>
 8002184:	e044      	b.n	8002210 <bytes_to_endian+0x198>
		}
	}
	else if (type_endian == '2'){ //little-endiand 2's complements
 8002186:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800218a:	2b32      	cmp	r3, #50	@ 0x32
 800218c:	d140      	bne.n	8002210 <bytes_to_endian+0x198>
		if (attr[length - 1] & 0x80) { // Check if the most significant bit (MSB) is 1 (indicating negative number)
 800218e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002190:	3b01      	subs	r3, #1
 8002192:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002194:	4413      	add	r3, r2
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	b25b      	sxtb	r3, r3
 800219a:	2b00      	cmp	r3, #0
 800219c:	da05      	bge.n	80021aa <bytes_to_endian+0x132>
			result = -1; // Initialize result to all 1s for negative number
 800219e:	f04f 32ff 	mov.w	r2, #4294967295
 80021a2:	f04f 33ff 	mov.w	r3, #4294967295
 80021a6:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
		}
		for (size_t i = 0; i < length; ++i) {
 80021aa:	2300      	movs	r3, #0
 80021ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80021ae:	e02b      	b.n	8002208 <bytes_to_endian+0x190>
			result |= ((uint64_t)attr[i]) << (i * 8);
 80021b0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80021b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021b4:	4413      	add	r3, r2
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2200      	movs	r2, #0
 80021bc:	61bb      	str	r3, [r7, #24]
 80021be:	61fa      	str	r2, [r7, #28]
 80021c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	f1a3 0120 	sub.w	r1, r3, #32
 80021c8:	f1c3 0220 	rsb	r2, r3, #32
 80021cc:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80021d0:	4648      	mov	r0, r9
 80021d2:	fa00 f503 	lsl.w	r5, r0, r3
 80021d6:	4640      	mov	r0, r8
 80021d8:	fa00 f101 	lsl.w	r1, r0, r1
 80021dc:	430d      	orrs	r5, r1
 80021de:	4641      	mov	r1, r8
 80021e0:	fa21 f202 	lsr.w	r2, r1, r2
 80021e4:	4315      	orrs	r5, r2
 80021e6:	4642      	mov	r2, r8
 80021e8:	fa02 f403 	lsl.w	r4, r2, r3
 80021ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80021f0:	ea42 0104 	orr.w	r1, r2, r4
 80021f4:	6039      	str	r1, [r7, #0]
 80021f6:	432b      	orrs	r3, r5
 80021f8:	607b      	str	r3, [r7, #4]
 80021fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80021fe:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
		for (size_t i = 0; i < length; ++i) {
 8002202:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002204:	3301      	adds	r3, #1
 8002206:	647b      	str	r3, [r7, #68]	@ 0x44
 8002208:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800220a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800220c:	429a      	cmp	r2, r3
 800220e:	d3cf      	bcc.n	80021b0 <bytes_to_endian+0x138>
		}
	}
	return result;
 8002210:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 8002212:	4618      	mov	r0, r3
 8002214:	375c      	adds	r7, #92	@ 0x5c
 8002216:	46bd      	mov	sp, r7
 8002218:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800221c:	4770      	bx	lr
	...

08002220 <fill_unuse_memory>:

void fill_unuse_memory(UBXMessage_parsed* UBXMessage,int len_use){
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
	if (len_use < sizeof(UBXMessage->bufferDebug)) {
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	2bc7      	cmp	r3, #199	@ 0xc7
 800222e:	d80b      	bhi.n	8002248 <fill_unuse_memory+0x28>
		memset(UBXMessage->bufferDebug + len_use, " ", sizeof(UBXMessage->bufferDebug) - len_use);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f103 02cc 	add.w	r2, r3, #204	@ 0xcc
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	18d0      	adds	r0, r2, r3
 800223a:	4905      	ldr	r1, [pc, #20]	@ (8002250 <fill_unuse_memory+0x30>)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 8002242:	461a      	mov	r2, r3
 8002244:	f005 fa8d 	bl	8007762 <memset>
	}
}
 8002248:	bf00      	nop
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	080099a8 	.word	0x080099a8

08002254 <array_to_hex_string>:

char* array_to_hex_string(const uint8_t* array, size_t length) {
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
	// Taille maximale pour le buffer
	static char hex_string[MAX_SIZE_LOAD * 2 + 1];
	for (size_t i = 0; i < length; ++i) {
 800225e:	2300      	movs	r3, #0
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	e00e      	b.n	8002282 <array_to_hex_string+0x2e>
		sprintf(hex_string + (i * 2), "%02x", array[i]);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	4a0d      	ldr	r2, [pc, #52]	@ (80022a0 <array_to_hex_string+0x4c>)
 800226a:	1898      	adds	r0, r3, r2
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	4413      	add	r3, r2
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	461a      	mov	r2, r3
 8002276:	490b      	ldr	r1, [pc, #44]	@ (80022a4 <array_to_hex_string+0x50>)
 8002278:	f005 fa10 	bl	800769c <siprintf>
	for (size_t i = 0; i < length; ++i) {
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	3301      	adds	r3, #1
 8002280:	60fb      	str	r3, [r7, #12]
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	429a      	cmp	r2, r3
 8002288:	d3ec      	bcc.n	8002264 <array_to_hex_string+0x10>
	}
	hex_string[length * 2] = '\0';
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	4a04      	ldr	r2, [pc, #16]	@ (80022a0 <array_to_hex_string+0x4c>)
 8002290:	2100      	movs	r1, #0
 8002292:	54d1      	strb	r1, [r2, r3]
	return hex_string;
 8002294:	4b02      	ldr	r3, [pc, #8]	@ (80022a0 <array_to_hex_string+0x4c>)
}
 8002296:	4618      	mov	r0, r3
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	200007c8 	.word	0x200007c8
 80022a4:	080099ac 	.word	0x080099ac

080022a8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80022ac:	4b16      	ldr	r3, [pc, #88]	@ (8002308 <MX_USART1_UART_Init+0x60>)
 80022ae:	4a17      	ldr	r2, [pc, #92]	@ (800230c <MX_USART1_UART_Init+0x64>)
 80022b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80022b2:	4b15      	ldr	r3, [pc, #84]	@ (8002308 <MX_USART1_UART_Init+0x60>)
 80022b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80022b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022ba:	4b13      	ldr	r3, [pc, #76]	@ (8002308 <MX_USART1_UART_Init+0x60>)
 80022bc:	2200      	movs	r2, #0
 80022be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80022c0:	4b11      	ldr	r3, [pc, #68]	@ (8002308 <MX_USART1_UART_Init+0x60>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80022c6:	4b10      	ldr	r3, [pc, #64]	@ (8002308 <MX_USART1_UART_Init+0x60>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80022cc:	4b0e      	ldr	r3, [pc, #56]	@ (8002308 <MX_USART1_UART_Init+0x60>)
 80022ce:	220c      	movs	r2, #12
 80022d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002308 <MX_USART1_UART_Init+0x60>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80022d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002308 <MX_USART1_UART_Init+0x60>)
 80022da:	2200      	movs	r2, #0
 80022dc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022de:	4b0a      	ldr	r3, [pc, #40]	@ (8002308 <MX_USART1_UART_Init+0x60>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 80022e4:	4b08      	ldr	r3, [pc, #32]	@ (8002308 <MX_USART1_UART_Init+0x60>)
 80022e6:	2208      	movs	r2, #8
 80022e8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80022ea:	4b07      	ldr	r3, [pc, #28]	@ (8002308 <MX_USART1_UART_Init+0x60>)
 80022ec:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80022f0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80022f2:	4805      	ldr	r0, [pc, #20]	@ (8002308 <MX_USART1_UART_Init+0x60>)
 80022f4:	f002 fd65 	bl	8004dc2 <HAL_UART_Init>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80022fe:	f7ff fabe 	bl	800187e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002302:	bf00      	nop
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	2000095c 	.word	0x2000095c
 800230c:	40013800 	.word	0x40013800

08002310 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002314:	4b14      	ldr	r3, [pc, #80]	@ (8002368 <MX_USART2_UART_Init+0x58>)
 8002316:	4a15      	ldr	r2, [pc, #84]	@ (800236c <MX_USART2_UART_Init+0x5c>)
 8002318:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800231a:	4b13      	ldr	r3, [pc, #76]	@ (8002368 <MX_USART2_UART_Init+0x58>)
 800231c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002320:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002322:	4b11      	ldr	r3, [pc, #68]	@ (8002368 <MX_USART2_UART_Init+0x58>)
 8002324:	2200      	movs	r2, #0
 8002326:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002328:	4b0f      	ldr	r3, [pc, #60]	@ (8002368 <MX_USART2_UART_Init+0x58>)
 800232a:	2200      	movs	r2, #0
 800232c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800232e:	4b0e      	ldr	r3, [pc, #56]	@ (8002368 <MX_USART2_UART_Init+0x58>)
 8002330:	2200      	movs	r2, #0
 8002332:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002334:	4b0c      	ldr	r3, [pc, #48]	@ (8002368 <MX_USART2_UART_Init+0x58>)
 8002336:	220c      	movs	r2, #12
 8002338:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800233a:	4b0b      	ldr	r3, [pc, #44]	@ (8002368 <MX_USART2_UART_Init+0x58>)
 800233c:	2200      	movs	r2, #0
 800233e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002340:	4b09      	ldr	r3, [pc, #36]	@ (8002368 <MX_USART2_UART_Init+0x58>)
 8002342:	2200      	movs	r2, #0
 8002344:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002346:	4b08      	ldr	r3, [pc, #32]	@ (8002368 <MX_USART2_UART_Init+0x58>)
 8002348:	2200      	movs	r2, #0
 800234a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800234c:	4b06      	ldr	r3, [pc, #24]	@ (8002368 <MX_USART2_UART_Init+0x58>)
 800234e:	2200      	movs	r2, #0
 8002350:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002352:	4805      	ldr	r0, [pc, #20]	@ (8002368 <MX_USART2_UART_Init+0x58>)
 8002354:	f002 fd35 	bl	8004dc2 <HAL_UART_Init>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800235e:	f7ff fa8e 	bl	800187e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002362:	bf00      	nop
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	200009e4 	.word	0x200009e4
 800236c:	40004400 	.word	0x40004400

08002370 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002374:	4b14      	ldr	r3, [pc, #80]	@ (80023c8 <MX_USART3_UART_Init+0x58>)
 8002376:	4a15      	ldr	r2, [pc, #84]	@ (80023cc <MX_USART3_UART_Init+0x5c>)
 8002378:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 800237a:	4b13      	ldr	r3, [pc, #76]	@ (80023c8 <MX_USART3_UART_Init+0x58>)
 800237c:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8002380:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002382:	4b11      	ldr	r3, [pc, #68]	@ (80023c8 <MX_USART3_UART_Init+0x58>)
 8002384:	2200      	movs	r2, #0
 8002386:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002388:	4b0f      	ldr	r3, [pc, #60]	@ (80023c8 <MX_USART3_UART_Init+0x58>)
 800238a:	2200      	movs	r2, #0
 800238c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800238e:	4b0e      	ldr	r3, [pc, #56]	@ (80023c8 <MX_USART3_UART_Init+0x58>)
 8002390:	2200      	movs	r2, #0
 8002392:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002394:	4b0c      	ldr	r3, [pc, #48]	@ (80023c8 <MX_USART3_UART_Init+0x58>)
 8002396:	220c      	movs	r2, #12
 8002398:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800239a:	4b0b      	ldr	r3, [pc, #44]	@ (80023c8 <MX_USART3_UART_Init+0x58>)
 800239c:	2200      	movs	r2, #0
 800239e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80023a0:	4b09      	ldr	r3, [pc, #36]	@ (80023c8 <MX_USART3_UART_Init+0x58>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023a6:	4b08      	ldr	r3, [pc, #32]	@ (80023c8 <MX_USART3_UART_Init+0x58>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023ac:	4b06      	ldr	r3, [pc, #24]	@ (80023c8 <MX_USART3_UART_Init+0x58>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80023b2:	4805      	ldr	r0, [pc, #20]	@ (80023c8 <MX_USART3_UART_Init+0x58>)
 80023b4:	f002 fd05 	bl	8004dc2 <HAL_UART_Init>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80023be:	f7ff fa5e 	bl	800187e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80023c2:	bf00      	nop
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	20000a6c 	.word	0x20000a6c
 80023cc:	40004800 	.word	0x40004800

080023d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b0b2      	sub	sp, #200	@ 0xc8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d8:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	605a      	str	r2, [r3, #4]
 80023e2:	609a      	str	r2, [r3, #8]
 80023e4:	60da      	str	r2, [r3, #12]
 80023e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023e8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80023ec:	228c      	movs	r2, #140	@ 0x8c
 80023ee:	2100      	movs	r1, #0
 80023f0:	4618      	mov	r0, r3
 80023f2:	f005 f9b6 	bl	8007762 <memset>
  if(uartHandle->Instance==USART1)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a80      	ldr	r2, [pc, #512]	@ (80025fc <HAL_UART_MspInit+0x22c>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d166      	bne.n	80024ce <HAL_UART_MspInit+0xfe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002400:	2301      	movs	r3, #1
 8002402:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002404:	2300      	movs	r3, #0
 8002406:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002408:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800240c:	4618      	mov	r0, r3
 800240e:	f001 ff6b 	bl	80042e8 <HAL_RCCEx_PeriphCLKConfig>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002418:	f7ff fa31 	bl	800187e <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800241c:	4b78      	ldr	r3, [pc, #480]	@ (8002600 <HAL_UART_MspInit+0x230>)
 800241e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002420:	4a77      	ldr	r2, [pc, #476]	@ (8002600 <HAL_UART_MspInit+0x230>)
 8002422:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002426:	6613      	str	r3, [r2, #96]	@ 0x60
 8002428:	4b75      	ldr	r3, [pc, #468]	@ (8002600 <HAL_UART_MspInit+0x230>)
 800242a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800242c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002430:	627b      	str	r3, [r7, #36]	@ 0x24
 8002432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002434:	4b72      	ldr	r3, [pc, #456]	@ (8002600 <HAL_UART_MspInit+0x230>)
 8002436:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002438:	4a71      	ldr	r2, [pc, #452]	@ (8002600 <HAL_UART_MspInit+0x230>)
 800243a:	f043 0301 	orr.w	r3, r3, #1
 800243e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002440:	4b6f      	ldr	r3, [pc, #444]	@ (8002600 <HAL_UART_MspInit+0x230>)
 8002442:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	623b      	str	r3, [r7, #32]
 800244a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800244c:	4b6c      	ldr	r3, [pc, #432]	@ (8002600 <HAL_UART_MspInit+0x230>)
 800244e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002450:	4a6b      	ldr	r2, [pc, #428]	@ (8002600 <HAL_UART_MspInit+0x230>)
 8002452:	f043 0302 	orr.w	r3, r3, #2
 8002456:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002458:	4b69      	ldr	r3, [pc, #420]	@ (8002600 <HAL_UART_MspInit+0x230>)
 800245a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	61fb      	str	r3, [r7, #28]
 8002462:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STM_VCP_RX_Pin;
 8002464:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002468:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800246c:	2302      	movs	r3, #2
 800246e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002472:	2300      	movs	r3, #0
 8002474:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002478:	2303      	movs	r3, #3
 800247a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800247e:	2307      	movs	r3, #7
 8002480:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(STM_VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002484:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002488:	4619      	mov	r1, r3
 800248a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800248e:	f000 fd6d 	bl	8002f6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STM_VCP_TX_Pin;
 8002492:	2340      	movs	r3, #64	@ 0x40
 8002494:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002498:	2302      	movs	r3, #2
 800249a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249e:	2300      	movs	r3, #0
 80024a0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024a4:	2303      	movs	r3, #3
 80024a6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80024aa:	2307      	movs	r3, #7
 80024ac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(STM_VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80024b0:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80024b4:	4619      	mov	r1, r3
 80024b6:	4853      	ldr	r0, [pc, #332]	@ (8002604 <HAL_UART_MspInit+0x234>)
 80024b8:	f000 fd58 	bl	8002f6c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80024bc:	2200      	movs	r2, #0
 80024be:	2100      	movs	r1, #0
 80024c0:	2025      	movs	r0, #37	@ 0x25
 80024c2:	f000 fb54 	bl	8002b6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80024c6:	2025      	movs	r0, #37	@ 0x25
 80024c8:	f000 fb6d 	bl	8002ba6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80024cc:	e091      	b.n	80025f2 <HAL_UART_MspInit+0x222>
  else if(uartHandle->Instance==USART2)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a4d      	ldr	r2, [pc, #308]	@ (8002608 <HAL_UART_MspInit+0x238>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d143      	bne.n	8002560 <HAL_UART_MspInit+0x190>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80024d8:	2302      	movs	r3, #2
 80024da:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80024dc:	2300      	movs	r3, #0
 80024de:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024e0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80024e4:	4618      	mov	r0, r3
 80024e6:	f001 feff 	bl	80042e8 <HAL_RCCEx_PeriphCLKConfig>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <HAL_UART_MspInit+0x124>
      Error_Handler();
 80024f0:	f7ff f9c5 	bl	800187e <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80024f4:	4b42      	ldr	r3, [pc, #264]	@ (8002600 <HAL_UART_MspInit+0x230>)
 80024f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024f8:	4a41      	ldr	r2, [pc, #260]	@ (8002600 <HAL_UART_MspInit+0x230>)
 80024fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8002500:	4b3f      	ldr	r3, [pc, #252]	@ (8002600 <HAL_UART_MspInit+0x230>)
 8002502:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002504:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002508:	61bb      	str	r3, [r7, #24]
 800250a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800250c:	4b3c      	ldr	r3, [pc, #240]	@ (8002600 <HAL_UART_MspInit+0x230>)
 800250e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002510:	4a3b      	ldr	r2, [pc, #236]	@ (8002600 <HAL_UART_MspInit+0x230>)
 8002512:	f043 0308 	orr.w	r3, r3, #8
 8002516:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002518:	4b39      	ldr	r3, [pc, #228]	@ (8002600 <HAL_UART_MspInit+0x230>)
 800251a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800251c:	f003 0308 	and.w	r3, r3, #8
 8002520:	617b      	str	r3, [r7, #20]
 8002522:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPS_RTCM3_RX_STM_TX_Pin|GPS_RTCM3_TX_STM_RX_Pin;
 8002524:	2360      	movs	r3, #96	@ 0x60
 8002526:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800252a:	2302      	movs	r3, #2
 800252c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002530:	2300      	movs	r3, #0
 8002532:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002536:	2303      	movs	r3, #3
 8002538:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800253c:	2307      	movs	r3, #7
 800253e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002542:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002546:	4619      	mov	r1, r3
 8002548:	4830      	ldr	r0, [pc, #192]	@ (800260c <HAL_UART_MspInit+0x23c>)
 800254a:	f000 fd0f 	bl	8002f6c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800254e:	2200      	movs	r2, #0
 8002550:	2100      	movs	r1, #0
 8002552:	2026      	movs	r0, #38	@ 0x26
 8002554:	f000 fb0b 	bl	8002b6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002558:	2026      	movs	r0, #38	@ 0x26
 800255a:	f000 fb24 	bl	8002ba6 <HAL_NVIC_EnableIRQ>
}
 800255e:	e048      	b.n	80025f2 <HAL_UART_MspInit+0x222>
  else if(uartHandle->Instance==USART3)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a2a      	ldr	r2, [pc, #168]	@ (8002610 <HAL_UART_MspInit+0x240>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d143      	bne.n	80025f2 <HAL_UART_MspInit+0x222>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800256a:	2304      	movs	r3, #4
 800256c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800256e:	2300      	movs	r3, #0
 8002570:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002572:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002576:	4618      	mov	r0, r3
 8002578:	f001 feb6 	bl	80042e8 <HAL_RCCEx_PeriphCLKConfig>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <HAL_UART_MspInit+0x1b6>
      Error_Handler();
 8002582:	f7ff f97c 	bl	800187e <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002586:	4b1e      	ldr	r3, [pc, #120]	@ (8002600 <HAL_UART_MspInit+0x230>)
 8002588:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800258a:	4a1d      	ldr	r2, [pc, #116]	@ (8002600 <HAL_UART_MspInit+0x230>)
 800258c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002590:	6593      	str	r3, [r2, #88]	@ 0x58
 8002592:	4b1b      	ldr	r3, [pc, #108]	@ (8002600 <HAL_UART_MspInit+0x230>)
 8002594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002596:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800259a:	613b      	str	r3, [r7, #16]
 800259c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800259e:	4b18      	ldr	r3, [pc, #96]	@ (8002600 <HAL_UART_MspInit+0x230>)
 80025a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025a2:	4a17      	ldr	r2, [pc, #92]	@ (8002600 <HAL_UART_MspInit+0x230>)
 80025a4:	f043 0308 	orr.w	r3, r3, #8
 80025a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025aa:	4b15      	ldr	r3, [pc, #84]	@ (8002600 <HAL_UART_MspInit+0x230>)
 80025ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ae:	f003 0308 	and.w	r3, r3, #8
 80025b2:	60fb      	str	r3, [r7, #12]
 80025b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPS_TX_STM_Pin|GPSR_RX_STM_Pin;
 80025b6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80025ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025be:	2302      	movs	r3, #2
 80025c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c4:	2300      	movs	r3, #0
 80025c6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ca:	2303      	movs	r3, #3
 80025cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80025d0:	2307      	movs	r3, #7
 80025d2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025d6:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80025da:	4619      	mov	r1, r3
 80025dc:	480b      	ldr	r0, [pc, #44]	@ (800260c <HAL_UART_MspInit+0x23c>)
 80025de:	f000 fcc5 	bl	8002f6c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80025e2:	2200      	movs	r2, #0
 80025e4:	2100      	movs	r1, #0
 80025e6:	2027      	movs	r0, #39	@ 0x27
 80025e8:	f000 fac1 	bl	8002b6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80025ec:	2027      	movs	r0, #39	@ 0x27
 80025ee:	f000 fada 	bl	8002ba6 <HAL_NVIC_EnableIRQ>
}
 80025f2:	bf00      	nop
 80025f4:	37c8      	adds	r7, #200	@ 0xc8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	40013800 	.word	0x40013800
 8002600:	40021000 	.word	0x40021000
 8002604:	48000400 	.word	0x48000400
 8002608:	40004400 	.word	0x40004400
 800260c:	48000c00 	.word	0x48000c00
 8002610:	40004800 	.word	0x40004800

08002614 <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
	 if (huart3.Instance == huart->Instance)
 800261c:	4b0f      	ldr	r3, [pc, #60]	@ (800265c <HAL_UART_RxCpltCallback+0x48>)
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	429a      	cmp	r2, r3
 8002626:	d114      	bne.n	8002652 <HAL_UART_RxCpltCallback+0x3e>
	{
		 ITM_Port32(31)=01;
 8002628:	4b0d      	ldr	r3, [pc, #52]	@ (8002660 <HAL_UART_RxCpltCallback+0x4c>)
 800262a:	2201      	movs	r2, #1
 800262c:	601a      	str	r2, [r3, #0]
		 memcpy(hGNSSCom.DebugBuffer,hGNSSCom.RxBuffer,UART_RX_BUFFER_SIZE);
 800262e:	4b0d      	ldr	r3, [pc, #52]	@ (8002664 <HAL_UART_RxCpltCallback+0x50>)
 8002630:	4a0c      	ldr	r2, [pc, #48]	@ (8002664 <HAL_UART_RxCpltCallback+0x50>)
 8002632:	f503 7381 	add.w	r3, r3, #258	@ 0x102
 8002636:	f102 0108 	add.w	r1, r2, #8
 800263a:	22c8      	movs	r2, #200	@ 0xc8
 800263c:	4618      	mov	r0, r3
 800263e:	f005 f932 	bl	80078a6 <memcpy>
		 GNSSCom_ReceiveDebug();
 8002642:	f7fe fd99 	bl	8001178 <GNSSCom_ReceiveDebug>
		 GNSSCom_UartActivate(&hGNSSCom);
 8002646:	4807      	ldr	r0, [pc, #28]	@ (8002664 <HAL_UART_RxCpltCallback+0x50>)
 8002648:	f7fe fc6e 	bl	8000f28 <GNSSCom_UartActivate>
		 ITM_Port32(31)=00;
 800264c:	4b04      	ldr	r3, [pc, #16]	@ (8002660 <HAL_UART_RxCpltCallback+0x4c>)
 800264e:	2200      	movs	r2, #0
 8002650:	601a      	str	r2, [r3, #0]
	}
}
 8002652:	bf00      	nop
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	20000a6c 	.word	0x20000a6c
 8002660:	e000007c 	.word	0xe000007c
 8002664:	20000370 	.word	0x20000370

08002668 <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == huart3.Instance) {
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	4b07      	ldr	r3, [pc, #28]	@ (8002694 <HAL_UART_ErrorCallback+0x2c>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	429a      	cmp	r2, r3
 800267a:	d106      	bne.n	800268a <HAL_UART_ErrorCallback+0x22>
    	HAL_UART_Receive_IT(hGNSSCom.huart, hGNSSCom.RxBuffer, sizeof(hGNSSCom.RxBuffer)); // Relancer la réception
 800267c:	4b06      	ldr	r3, [pc, #24]	@ (8002698 <HAL_UART_ErrorCallback+0x30>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	22c8      	movs	r2, #200	@ 0xc8
 8002682:	4906      	ldr	r1, [pc, #24]	@ (800269c <HAL_UART_ErrorCallback+0x34>)
 8002684:	4618      	mov	r0, r3
 8002686:	f002 fc73 	bl	8004f70 <HAL_UART_Receive_IT>
    }

}
 800268a:	bf00      	nop
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	20000a6c 	.word	0x20000a6c
 8002698:	20000370 	.word	0x20000370
 800269c:	20000378 	.word	0x20000378

080026a0 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80026a4:	4b14      	ldr	r3, [pc, #80]	@ (80026f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80026a6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80026aa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80026ac:	4b12      	ldr	r3, [pc, #72]	@ (80026f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80026ae:	2206      	movs	r2, #6
 80026b0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80026b2:	4b11      	ldr	r3, [pc, #68]	@ (80026f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80026b4:	2202      	movs	r2, #2
 80026b6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80026b8:	4b0f      	ldr	r3, [pc, #60]	@ (80026f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80026ba:	2202      	movs	r2, #2
 80026bc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80026be:	4b0e      	ldr	r3, [pc, #56]	@ (80026f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80026c4:	4b0c      	ldr	r3, [pc, #48]	@ (80026f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80026ca:	4b0b      	ldr	r3, [pc, #44]	@ (80026f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80026d0:	4b09      	ldr	r3, [pc, #36]	@ (80026f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80026d2:	2201      	movs	r2, #1
 80026d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80026d6:	4b08      	ldr	r3, [pc, #32]	@ (80026f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80026d8:	2200      	movs	r2, #0
 80026da:	631a      	str	r2, [r3, #48]	@ 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80026dc:	4b06      	ldr	r3, [pc, #24]	@ (80026f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80026de:	2201      	movs	r2, #1
 80026e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80026e2:	4805      	ldr	r0, [pc, #20]	@ (80026f8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80026e4:	f000 fe06 	bl	80032f4 <HAL_PCD_Init>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80026ee:	f7ff f8c6 	bl	800187e <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80026f2:	bf00      	nop
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	20000af4 	.word	0x20000af4

080026fc <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b0ae      	sub	sp, #184	@ 0xb8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002704:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	605a      	str	r2, [r3, #4]
 800270e:	609a      	str	r2, [r3, #8]
 8002710:	60da      	str	r2, [r3, #12]
 8002712:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002714:	f107 0318 	add.w	r3, r7, #24
 8002718:	228c      	movs	r2, #140	@ 0x8c
 800271a:	2100      	movs	r1, #0
 800271c:	4618      	mov	r0, r3
 800271e:	f005 f820 	bl	8007762 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800272a:	d17c      	bne.n	8002826 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800272c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002730:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002732:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002736:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 800273a:	2303      	movs	r3, #3
 800273c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 800273e:	2302      	movs	r3, #2
 8002740:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 8002742:	230c      	movs	r3, #12
 8002744:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8002746:	2302      	movs	r3, #2
 8002748:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 800274a:	2304      	movs	r3, #4
 800274c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800274e:	2302      	movs	r3, #2
 8002750:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8002752:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002756:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002758:	f107 0318 	add.w	r3, r7, #24
 800275c:	4618      	mov	r0, r3
 800275e:	f001 fdc3 	bl	80042e8 <HAL_RCCEx_PeriphCLKConfig>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8002768:	f7ff f889 	bl	800187e <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800276c:	4b30      	ldr	r3, [pc, #192]	@ (8002830 <HAL_PCD_MspInit+0x134>)
 800276e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002770:	4a2f      	ldr	r2, [pc, #188]	@ (8002830 <HAL_PCD_MspInit+0x134>)
 8002772:	f043 0301 	orr.w	r3, r3, #1
 8002776:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002778:	4b2d      	ldr	r3, [pc, #180]	@ (8002830 <HAL_PCD_MspInit+0x134>)
 800277a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800277c:	f003 0301 	and.w	r3, r3, #1
 8002780:	617b      	str	r3, [r7, #20]
 8002782:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_VBUS_DETECT_Pin;
 8002784:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002788:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800278c:	2300      	movs	r3, #0
 800278e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002792:	2300      	movs	r3, #0
 8002794:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_DETECT_GPIO_Port, &GPIO_InitStruct);
 8002798:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800279c:	4619      	mov	r1, r3
 800279e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027a2:	f000 fbe3 	bl	8002f6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_D_N_Pin|USB_D_P_Pin;
 80027a6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80027aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ae:	2302      	movs	r3, #2
 80027b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b4:	2300      	movs	r3, #0
 80027b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ba:	2303      	movs	r3, #3
 80027bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80027c0:	230a      	movs	r3, #10
 80027c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027c6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80027ca:	4619      	mov	r1, r3
 80027cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027d0:	f000 fbcc 	bl	8002f6c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80027d4:	4b16      	ldr	r3, [pc, #88]	@ (8002830 <HAL_PCD_MspInit+0x134>)
 80027d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027d8:	4a15      	ldr	r2, [pc, #84]	@ (8002830 <HAL_PCD_MspInit+0x134>)
 80027da:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80027de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027e0:	4b13      	ldr	r3, [pc, #76]	@ (8002830 <HAL_PCD_MspInit+0x134>)
 80027e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027e8:	613b      	str	r3, [r7, #16]
 80027ea:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027ec:	4b10      	ldr	r3, [pc, #64]	@ (8002830 <HAL_PCD_MspInit+0x134>)
 80027ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d114      	bne.n	8002822 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027f8:	4b0d      	ldr	r3, [pc, #52]	@ (8002830 <HAL_PCD_MspInit+0x134>)
 80027fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027fc:	4a0c      	ldr	r2, [pc, #48]	@ (8002830 <HAL_PCD_MspInit+0x134>)
 80027fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002802:	6593      	str	r3, [r2, #88]	@ 0x58
 8002804:	4b0a      	ldr	r3, [pc, #40]	@ (8002830 <HAL_PCD_MspInit+0x134>)
 8002806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002808:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800280c:	60fb      	str	r3, [r7, #12]
 800280e:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8002810:	f000 ff1c 	bl	800364c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002814:	4b06      	ldr	r3, [pc, #24]	@ (8002830 <HAL_PCD_MspInit+0x134>)
 8002816:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002818:	4a05      	ldr	r2, [pc, #20]	@ (8002830 <HAL_PCD_MspInit+0x134>)
 800281a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800281e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002820:	e001      	b.n	8002826 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8002822:	f000 ff13 	bl	800364c <HAL_PWREx_EnableVddUSB>
}
 8002826:	bf00      	nop
 8002828:	37b8      	adds	r7, #184	@ 0xb8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	40021000 	.word	0x40021000

08002834 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002834:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800286c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002838:	f7ff fa52 	bl	8001ce0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800283c:	480c      	ldr	r0, [pc, #48]	@ (8002870 <LoopForever+0x6>)
  ldr r1, =_edata
 800283e:	490d      	ldr	r1, [pc, #52]	@ (8002874 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002840:	4a0d      	ldr	r2, [pc, #52]	@ (8002878 <LoopForever+0xe>)
  movs r3, #0
 8002842:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002844:	e002      	b.n	800284c <LoopCopyDataInit>

08002846 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002846:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002848:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800284a:	3304      	adds	r3, #4

0800284c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800284c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800284e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002850:	d3f9      	bcc.n	8002846 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002852:	4a0a      	ldr	r2, [pc, #40]	@ (800287c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002854:	4c0a      	ldr	r4, [pc, #40]	@ (8002880 <LoopForever+0x16>)
  movs r3, #0
 8002856:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002858:	e001      	b.n	800285e <LoopFillZerobss>

0800285a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800285a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800285c:	3204      	adds	r2, #4

0800285e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800285e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002860:	d3fb      	bcc.n	800285a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002862:	f004 fff9 	bl	8007858 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002866:	f7fe ff67 	bl	8001738 <main>

0800286a <LoopForever>:

LoopForever:
    b LoopForever
 800286a:	e7fe      	b.n	800286a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800286c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002870:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002874:	20000354 	.word	0x20000354
  ldr r2, =_sidata
 8002878:	08009d80 	.word	0x08009d80
  ldr r2, =_sbss
 800287c:	20000354 	.word	0x20000354
  ldr r4, =_ebss
 8002880:	20001150 	.word	0x20001150

08002884 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002884:	e7fe      	b.n	8002884 <ADC1_2_IRQHandler>

08002886 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	b082      	sub	sp, #8
 800288a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800288c:	2300      	movs	r3, #0
 800288e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002890:	2003      	movs	r0, #3
 8002892:	f000 f961 	bl	8002b58 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002896:	200f      	movs	r0, #15
 8002898:	f000 f80e 	bl	80028b8 <HAL_InitTick>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d002      	beq.n	80028a8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	71fb      	strb	r3, [r7, #7]
 80028a6:	e001      	b.n	80028ac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80028a8:	f7ff f8e2 	bl	8001a70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80028ac:	79fb      	ldrb	r3, [r7, #7]
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
	...

080028b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80028c0:	2300      	movs	r3, #0
 80028c2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80028c4:	4b17      	ldr	r3, [pc, #92]	@ (8002924 <HAL_InitTick+0x6c>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d023      	beq.n	8002914 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80028cc:	4b16      	ldr	r3, [pc, #88]	@ (8002928 <HAL_InitTick+0x70>)
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	4b14      	ldr	r3, [pc, #80]	@ (8002924 <HAL_InitTick+0x6c>)
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	4619      	mov	r1, r3
 80028d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028da:	fbb3 f3f1 	udiv	r3, r3, r1
 80028de:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e2:	4618      	mov	r0, r3
 80028e4:	f000 f96d 	bl	8002bc2 <HAL_SYSTICK_Config>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d10f      	bne.n	800290e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2b0f      	cmp	r3, #15
 80028f2:	d809      	bhi.n	8002908 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028f4:	2200      	movs	r2, #0
 80028f6:	6879      	ldr	r1, [r7, #4]
 80028f8:	f04f 30ff 	mov.w	r0, #4294967295
 80028fc:	f000 f937 	bl	8002b6e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002900:	4a0a      	ldr	r2, [pc, #40]	@ (800292c <HAL_InitTick+0x74>)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6013      	str	r3, [r2, #0]
 8002906:	e007      	b.n	8002918 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	73fb      	strb	r3, [r7, #15]
 800290c:	e004      	b.n	8002918 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	73fb      	strb	r3, [r7, #15]
 8002912:	e001      	b.n	8002918 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002918:	7bfb      	ldrb	r3, [r7, #15]
}
 800291a:	4618      	mov	r0, r3
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	20000188 	.word	0x20000188
 8002928:	20000180 	.word	0x20000180
 800292c:	20000184 	.word	0x20000184

08002930 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002934:	4b06      	ldr	r3, [pc, #24]	@ (8002950 <HAL_IncTick+0x20>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	461a      	mov	r2, r3
 800293a:	4b06      	ldr	r3, [pc, #24]	@ (8002954 <HAL_IncTick+0x24>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4413      	add	r3, r2
 8002940:	4a04      	ldr	r2, [pc, #16]	@ (8002954 <HAL_IncTick+0x24>)
 8002942:	6013      	str	r3, [r2, #0]
}
 8002944:	bf00      	nop
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	20000188 	.word	0x20000188
 8002954:	20001000 	.word	0x20001000

08002958 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  return uwTick;
 800295c:	4b03      	ldr	r3, [pc, #12]	@ (800296c <HAL_GetTick+0x14>)
 800295e:	681b      	ldr	r3, [r3, #0]
}
 8002960:	4618      	mov	r0, r3
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	20001000 	.word	0x20001000

08002970 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002978:	f7ff ffee 	bl	8002958 <HAL_GetTick>
 800297c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002988:	d005      	beq.n	8002996 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800298a:	4b0a      	ldr	r3, [pc, #40]	@ (80029b4 <HAL_Delay+0x44>)
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	461a      	mov	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	4413      	add	r3, r2
 8002994:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002996:	bf00      	nop
 8002998:	f7ff ffde 	bl	8002958 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d8f7      	bhi.n	8002998 <HAL_Delay+0x28>
  {
  }
}
 80029a8:	bf00      	nop
 80029aa:	bf00      	nop
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	20000188 	.word	0x20000188

080029b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f003 0307 	and.w	r3, r3, #7
 80029c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029c8:	4b0c      	ldr	r3, [pc, #48]	@ (80029fc <__NVIC_SetPriorityGrouping+0x44>)
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029ce:	68ba      	ldr	r2, [r7, #8]
 80029d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80029d4:	4013      	ands	r3, r2
 80029d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80029e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029ea:	4a04      	ldr	r2, [pc, #16]	@ (80029fc <__NVIC_SetPriorityGrouping+0x44>)
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	60d3      	str	r3, [r2, #12]
}
 80029f0:	bf00      	nop
 80029f2:	3714      	adds	r7, #20
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr
 80029fc:	e000ed00 	.word	0xe000ed00

08002a00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a04:	4b04      	ldr	r3, [pc, #16]	@ (8002a18 <__NVIC_GetPriorityGrouping+0x18>)
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	0a1b      	lsrs	r3, r3, #8
 8002a0a:	f003 0307 	and.w	r3, r3, #7
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	e000ed00 	.word	0xe000ed00

08002a1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	4603      	mov	r3, r0
 8002a24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	db0b      	blt.n	8002a46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a2e:	79fb      	ldrb	r3, [r7, #7]
 8002a30:	f003 021f 	and.w	r2, r3, #31
 8002a34:	4907      	ldr	r1, [pc, #28]	@ (8002a54 <__NVIC_EnableIRQ+0x38>)
 8002a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3a:	095b      	lsrs	r3, r3, #5
 8002a3c:	2001      	movs	r0, #1
 8002a3e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a46:	bf00      	nop
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	e000e100 	.word	0xe000e100

08002a58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	4603      	mov	r3, r0
 8002a60:	6039      	str	r1, [r7, #0]
 8002a62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	db0a      	blt.n	8002a82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	b2da      	uxtb	r2, r3
 8002a70:	490c      	ldr	r1, [pc, #48]	@ (8002aa4 <__NVIC_SetPriority+0x4c>)
 8002a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a76:	0112      	lsls	r2, r2, #4
 8002a78:	b2d2      	uxtb	r2, r2
 8002a7a:	440b      	add	r3, r1
 8002a7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a80:	e00a      	b.n	8002a98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	b2da      	uxtb	r2, r3
 8002a86:	4908      	ldr	r1, [pc, #32]	@ (8002aa8 <__NVIC_SetPriority+0x50>)
 8002a88:	79fb      	ldrb	r3, [r7, #7]
 8002a8a:	f003 030f 	and.w	r3, r3, #15
 8002a8e:	3b04      	subs	r3, #4
 8002a90:	0112      	lsls	r2, r2, #4
 8002a92:	b2d2      	uxtb	r2, r2
 8002a94:	440b      	add	r3, r1
 8002a96:	761a      	strb	r2, [r3, #24]
}
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr
 8002aa4:	e000e100 	.word	0xe000e100
 8002aa8:	e000ed00 	.word	0xe000ed00

08002aac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b089      	sub	sp, #36	@ 0x24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f003 0307 	and.w	r3, r3, #7
 8002abe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	f1c3 0307 	rsb	r3, r3, #7
 8002ac6:	2b04      	cmp	r3, #4
 8002ac8:	bf28      	it	cs
 8002aca:	2304      	movcs	r3, #4
 8002acc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	3304      	adds	r3, #4
 8002ad2:	2b06      	cmp	r3, #6
 8002ad4:	d902      	bls.n	8002adc <NVIC_EncodePriority+0x30>
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	3b03      	subs	r3, #3
 8002ada:	e000      	b.n	8002ade <NVIC_EncodePriority+0x32>
 8002adc:	2300      	movs	r3, #0
 8002ade:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aea:	43da      	mvns	r2, r3
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	401a      	ands	r2, r3
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002af4:	f04f 31ff 	mov.w	r1, #4294967295
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	fa01 f303 	lsl.w	r3, r1, r3
 8002afe:	43d9      	mvns	r1, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b04:	4313      	orrs	r3, r2
         );
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3724      	adds	r7, #36	@ 0x24
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
	...

08002b14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b24:	d301      	bcc.n	8002b2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b26:	2301      	movs	r3, #1
 8002b28:	e00f      	b.n	8002b4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b2a:	4a0a      	ldr	r2, [pc, #40]	@ (8002b54 <SysTick_Config+0x40>)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b32:	210f      	movs	r1, #15
 8002b34:	f04f 30ff 	mov.w	r0, #4294967295
 8002b38:	f7ff ff8e 	bl	8002a58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b3c:	4b05      	ldr	r3, [pc, #20]	@ (8002b54 <SysTick_Config+0x40>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b42:	4b04      	ldr	r3, [pc, #16]	@ (8002b54 <SysTick_Config+0x40>)
 8002b44:	2207      	movs	r2, #7
 8002b46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	e000e010 	.word	0xe000e010

08002b58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f7ff ff29 	bl	80029b8 <__NVIC_SetPriorityGrouping>
}
 8002b66:	bf00      	nop
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b086      	sub	sp, #24
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	4603      	mov	r3, r0
 8002b76:	60b9      	str	r1, [r7, #8]
 8002b78:	607a      	str	r2, [r7, #4]
 8002b7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b80:	f7ff ff3e 	bl	8002a00 <__NVIC_GetPriorityGrouping>
 8002b84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	68b9      	ldr	r1, [r7, #8]
 8002b8a:	6978      	ldr	r0, [r7, #20]
 8002b8c:	f7ff ff8e 	bl	8002aac <NVIC_EncodePriority>
 8002b90:	4602      	mov	r2, r0
 8002b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b96:	4611      	mov	r1, r2
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7ff ff5d 	bl	8002a58 <__NVIC_SetPriority>
}
 8002b9e:	bf00      	nop
 8002ba0:	3718      	adds	r7, #24
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b082      	sub	sp, #8
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	4603      	mov	r3, r0
 8002bae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7ff ff31 	bl	8002a1c <__NVIC_EnableIRQ>
}
 8002bba:	bf00      	nop
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b082      	sub	sp, #8
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f7ff ffa2 	bl	8002b14 <SysTick_Config>
 8002bd0:	4603      	mov	r3, r0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b082      	sub	sp, #8
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d101      	bne.n	8002bec <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e014      	b.n	8002c16 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	791b      	ldrb	r3, [r3, #4]
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d105      	bne.n	8002c02 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f7fe fc81 	bl	8001504 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2202      	movs	r2, #2
 8002c06:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2201      	movs	r2, #1
 8002c12:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b088      	sub	sp, #32
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	60f8      	str	r0, [r7, #12]
 8002c26:	60b9      	str	r1, [r7, #8]
 8002c28:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	795b      	ldrb	r3, [r3, #5]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d101      	bne.n	8002c3a <HAL_DAC_ConfigChannel+0x1c>
 8002c36:	2302      	movs	r3, #2
 8002c38:	e114      	b.n	8002e64 <HAL_DAC_ConfigChannel+0x246>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2202      	movs	r2, #2
 8002c44:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2b04      	cmp	r3, #4
 8002c4c:	f040 8081 	bne.w	8002d52 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002c50:	f7ff fe82 	bl	8002958 <HAL_GetTick>
 8002c54:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d140      	bne.n	8002cde <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002c5c:	e018      	b.n	8002c90 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002c5e:	f7ff fe7b 	bl	8002958 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d911      	bls.n	8002c90 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00a      	beq.n	8002c90 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	f043 0208 	orr.w	r2, r3, #8
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2203      	movs	r2, #3
 8002c8a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e0e9      	b.n	8002e64 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c96:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1df      	bne.n	8002c5e <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8002c9e:	2001      	movs	r0, #1
 8002ca0:	f7ff fe66 	bl	8002970 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68ba      	ldr	r2, [r7, #8]
 8002caa:	6992      	ldr	r2, [r2, #24]
 8002cac:	641a      	str	r2, [r3, #64]	@ 0x40
 8002cae:	e023      	b.n	8002cf8 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002cb0:	f7ff fe52 	bl	8002958 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d90f      	bls.n	8002cde <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	da0a      	bge.n	8002cde <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	f043 0208 	orr.w	r2, r3, #8
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2203      	movs	r2, #3
 8002cd8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e0c2      	b.n	8002e64 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	dbe3      	blt.n	8002cb0 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8002ce8:	2001      	movs	r0, #1
 8002cea:	f7ff fe41 	bl	8002970 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68ba      	ldr	r2, [r7, #8]
 8002cf4:	6992      	ldr	r2, [r2, #24]
 8002cf6:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f003 0310 	and.w	r3, r3, #16
 8002d04:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8002d08:	fa01 f303 	lsl.w	r3, r1, r3
 8002d0c:	43db      	mvns	r3, r3
 8002d0e:	ea02 0103 	and.w	r1, r2, r3
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	69da      	ldr	r2, [r3, #28]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f003 0310 	and.w	r3, r3, #16
 8002d1c:	409a      	lsls	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	430a      	orrs	r2, r1
 8002d24:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f003 0310 	and.w	r3, r3, #16
 8002d32:	21ff      	movs	r1, #255	@ 0xff
 8002d34:	fa01 f303 	lsl.w	r3, r1, r3
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	ea02 0103 	and.w	r1, r2, r3
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	6a1a      	ldr	r2, [r3, #32]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f003 0310 	and.w	r3, r3, #16
 8002d48:	409a      	lsls	r2, r3
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d11d      	bne.n	8002d96 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d60:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f003 0310 	and.w	r3, r3, #16
 8002d68:	221f      	movs	r2, #31
 8002d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6e:	43db      	mvns	r3, r3
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	4013      	ands	r3, r2
 8002d74:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f003 0310 	and.w	r3, r3, #16
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d9c:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f003 0310 	and.w	r3, r3, #16
 8002da4:	2207      	movs	r2, #7
 8002da6:	fa02 f303 	lsl.w	r3, r2, r3
 8002daa:	43db      	mvns	r3, r3
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	4013      	ands	r3, r2
 8002db0:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f003 0310 	and.w	r3, r3, #16
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	6819      	ldr	r1, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f003 0310 	and.w	r3, r3, #16
 8002dea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002dee:	fa02 f303 	lsl.w	r3, r2, r3
 8002df2:	43da      	mvns	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	400a      	ands	r2, r1
 8002dfa:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f003 0310 	and.w	r3, r3, #16
 8002e0a:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8002e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e12:	43db      	mvns	r3, r3
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	4013      	ands	r3, r2
 8002e18:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f003 0310 	and.w	r3, r3, #16
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6819      	ldr	r1, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f003 0310 	and.w	r3, r3, #16
 8002e46:	22c0      	movs	r2, #192	@ 0xc0
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	43da      	mvns	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	400a      	ands	r2, r1
 8002e54:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3720      	adds	r7, #32
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e74:	2300      	movs	r3, #0
 8002e76:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d008      	beq.n	8002e96 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2204      	movs	r2, #4
 8002e88:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e022      	b.n	8002edc <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f022 020e 	bic.w	r2, r2, #14
 8002ea4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 0201 	bic.w	r2, r2, #1
 8002eb4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eba:	f003 021c 	and.w	r2, r3, #28
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec2:	2101      	movs	r1, #1
 8002ec4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ec8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002eda:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3714      	adds	r7, #20
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d005      	beq.n	8002f0c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2204      	movs	r2, #4
 8002f04:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	73fb      	strb	r3, [r7, #15]
 8002f0a:	e029      	b.n	8002f60 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f022 020e 	bic.w	r2, r2, #14
 8002f1a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f022 0201 	bic.w	r2, r2, #1
 8002f2a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f30:	f003 021c 	and.w	r2, r3, #28
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f38:	2101      	movs	r1, #1
 8002f3a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f3e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d003      	beq.n	8002f60 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	4798      	blx	r3
    }
  }
  return status;
 8002f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3710      	adds	r7, #16
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
	...

08002f6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b087      	sub	sp, #28
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f76:	2300      	movs	r3, #0
 8002f78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f7a:	e166      	b.n	800324a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	2101      	movs	r1, #1
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	fa01 f303 	lsl.w	r3, r1, r3
 8002f88:	4013      	ands	r3, r2
 8002f8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f000 8158 	beq.w	8003244 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f003 0303 	and.w	r3, r3, #3
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d005      	beq.n	8002fac <HAL_GPIO_Init+0x40>
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f003 0303 	and.w	r3, r3, #3
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d130      	bne.n	800300e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	2203      	movs	r2, #3
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	68da      	ldr	r2, [r3, #12]
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	43db      	mvns	r3, r3
 8002fec:	693a      	ldr	r2, [r7, #16]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	091b      	lsrs	r3, r3, #4
 8002ff8:	f003 0201 	and.w	r2, r3, #1
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	4313      	orrs	r3, r2
 8003006:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f003 0303 	and.w	r3, r3, #3
 8003016:	2b03      	cmp	r3, #3
 8003018:	d017      	beq.n	800304a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	2203      	movs	r2, #3
 8003026:	fa02 f303 	lsl.w	r3, r2, r3
 800302a:	43db      	mvns	r3, r3
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	4013      	ands	r3, r2
 8003030:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	689a      	ldr	r2, [r3, #8]
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	fa02 f303 	lsl.w	r3, r2, r3
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	4313      	orrs	r3, r2
 8003042:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f003 0303 	and.w	r3, r3, #3
 8003052:	2b02      	cmp	r3, #2
 8003054:	d123      	bne.n	800309e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	08da      	lsrs	r2, r3, #3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	3208      	adds	r2, #8
 800305e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003062:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	f003 0307 	and.w	r3, r3, #7
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	220f      	movs	r2, #15
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	43db      	mvns	r3, r3
 8003074:	693a      	ldr	r2, [r7, #16]
 8003076:	4013      	ands	r3, r2
 8003078:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	691a      	ldr	r2, [r3, #16]
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	f003 0307 	and.w	r3, r3, #7
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	fa02 f303 	lsl.w	r3, r2, r3
 800308a:	693a      	ldr	r2, [r7, #16]
 800308c:	4313      	orrs	r3, r2
 800308e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	08da      	lsrs	r2, r3, #3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	3208      	adds	r2, #8
 8003098:	6939      	ldr	r1, [r7, #16]
 800309a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	2203      	movs	r2, #3
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	43db      	mvns	r3, r3
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	4013      	ands	r3, r2
 80030b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f003 0203 	and.w	r2, r3, #3
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	fa02 f303 	lsl.w	r3, r2, r3
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f000 80b2 	beq.w	8003244 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030e0:	4b61      	ldr	r3, [pc, #388]	@ (8003268 <HAL_GPIO_Init+0x2fc>)
 80030e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030e4:	4a60      	ldr	r2, [pc, #384]	@ (8003268 <HAL_GPIO_Init+0x2fc>)
 80030e6:	f043 0301 	orr.w	r3, r3, #1
 80030ea:	6613      	str	r3, [r2, #96]	@ 0x60
 80030ec:	4b5e      	ldr	r3, [pc, #376]	@ (8003268 <HAL_GPIO_Init+0x2fc>)
 80030ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030f0:	f003 0301 	and.w	r3, r3, #1
 80030f4:	60bb      	str	r3, [r7, #8]
 80030f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80030f8:	4a5c      	ldr	r2, [pc, #368]	@ (800326c <HAL_GPIO_Init+0x300>)
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	089b      	lsrs	r3, r3, #2
 80030fe:	3302      	adds	r3, #2
 8003100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003104:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	f003 0303 	and.w	r3, r3, #3
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	220f      	movs	r2, #15
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	43db      	mvns	r3, r3
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	4013      	ands	r3, r2
 800311a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003122:	d02b      	beq.n	800317c <HAL_GPIO_Init+0x210>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a52      	ldr	r2, [pc, #328]	@ (8003270 <HAL_GPIO_Init+0x304>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d025      	beq.n	8003178 <HAL_GPIO_Init+0x20c>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4a51      	ldr	r2, [pc, #324]	@ (8003274 <HAL_GPIO_Init+0x308>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d01f      	beq.n	8003174 <HAL_GPIO_Init+0x208>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a50      	ldr	r2, [pc, #320]	@ (8003278 <HAL_GPIO_Init+0x30c>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d019      	beq.n	8003170 <HAL_GPIO_Init+0x204>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a4f      	ldr	r2, [pc, #316]	@ (800327c <HAL_GPIO_Init+0x310>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d013      	beq.n	800316c <HAL_GPIO_Init+0x200>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a4e      	ldr	r2, [pc, #312]	@ (8003280 <HAL_GPIO_Init+0x314>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d00d      	beq.n	8003168 <HAL_GPIO_Init+0x1fc>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a4d      	ldr	r2, [pc, #308]	@ (8003284 <HAL_GPIO_Init+0x318>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d007      	beq.n	8003164 <HAL_GPIO_Init+0x1f8>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a4c      	ldr	r2, [pc, #304]	@ (8003288 <HAL_GPIO_Init+0x31c>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d101      	bne.n	8003160 <HAL_GPIO_Init+0x1f4>
 800315c:	2307      	movs	r3, #7
 800315e:	e00e      	b.n	800317e <HAL_GPIO_Init+0x212>
 8003160:	2308      	movs	r3, #8
 8003162:	e00c      	b.n	800317e <HAL_GPIO_Init+0x212>
 8003164:	2306      	movs	r3, #6
 8003166:	e00a      	b.n	800317e <HAL_GPIO_Init+0x212>
 8003168:	2305      	movs	r3, #5
 800316a:	e008      	b.n	800317e <HAL_GPIO_Init+0x212>
 800316c:	2304      	movs	r3, #4
 800316e:	e006      	b.n	800317e <HAL_GPIO_Init+0x212>
 8003170:	2303      	movs	r3, #3
 8003172:	e004      	b.n	800317e <HAL_GPIO_Init+0x212>
 8003174:	2302      	movs	r3, #2
 8003176:	e002      	b.n	800317e <HAL_GPIO_Init+0x212>
 8003178:	2301      	movs	r3, #1
 800317a:	e000      	b.n	800317e <HAL_GPIO_Init+0x212>
 800317c:	2300      	movs	r3, #0
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	f002 0203 	and.w	r2, r2, #3
 8003184:	0092      	lsls	r2, r2, #2
 8003186:	4093      	lsls	r3, r2
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	4313      	orrs	r3, r2
 800318c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800318e:	4937      	ldr	r1, [pc, #220]	@ (800326c <HAL_GPIO_Init+0x300>)
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	089b      	lsrs	r3, r3, #2
 8003194:	3302      	adds	r3, #2
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800319c:	4b3b      	ldr	r3, [pc, #236]	@ (800328c <HAL_GPIO_Init+0x320>)
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	43db      	mvns	r3, r3
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	4013      	ands	r3, r2
 80031aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d003      	beq.n	80031c0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	4313      	orrs	r3, r2
 80031be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80031c0:	4a32      	ldr	r2, [pc, #200]	@ (800328c <HAL_GPIO_Init+0x320>)
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80031c6:	4b31      	ldr	r3, [pc, #196]	@ (800328c <HAL_GPIO_Init+0x320>)
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	43db      	mvns	r3, r3
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	4013      	ands	r3, r2
 80031d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80031ea:	4a28      	ldr	r2, [pc, #160]	@ (800328c <HAL_GPIO_Init+0x320>)
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80031f0:	4b26      	ldr	r3, [pc, #152]	@ (800328c <HAL_GPIO_Init+0x320>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	43db      	mvns	r3, r3
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	4013      	ands	r3, r2
 80031fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d003      	beq.n	8003214 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800320c:	693a      	ldr	r2, [r7, #16]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	4313      	orrs	r3, r2
 8003212:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003214:	4a1d      	ldr	r2, [pc, #116]	@ (800328c <HAL_GPIO_Init+0x320>)
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800321a:	4b1c      	ldr	r3, [pc, #112]	@ (800328c <HAL_GPIO_Init+0x320>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	43db      	mvns	r3, r3
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	4013      	ands	r3, r2
 8003228:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d003      	beq.n	800323e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	4313      	orrs	r3, r2
 800323c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800323e:	4a13      	ldr	r2, [pc, #76]	@ (800328c <HAL_GPIO_Init+0x320>)
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	3301      	adds	r3, #1
 8003248:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	fa22 f303 	lsr.w	r3, r2, r3
 8003254:	2b00      	cmp	r3, #0
 8003256:	f47f ae91 	bne.w	8002f7c <HAL_GPIO_Init+0x10>
  }
}
 800325a:	bf00      	nop
 800325c:	bf00      	nop
 800325e:	371c      	adds	r7, #28
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr
 8003268:	40021000 	.word	0x40021000
 800326c:	40010000 	.word	0x40010000
 8003270:	48000400 	.word	0x48000400
 8003274:	48000800 	.word	0x48000800
 8003278:	48000c00 	.word	0x48000c00
 800327c:	48001000 	.word	0x48001000
 8003280:	48001400 	.word	0x48001400
 8003284:	48001800 	.word	0x48001800
 8003288:	48001c00 	.word	0x48001c00
 800328c:	40010400 	.word	0x40010400

08003290 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	460b      	mov	r3, r1
 800329a:	807b      	strh	r3, [r7, #2]
 800329c:	4613      	mov	r3, r2
 800329e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032a0:	787b      	ldrb	r3, [r7, #1]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d003      	beq.n	80032ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80032a6:	887a      	ldrh	r2, [r7, #2]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80032ac:	e002      	b.n	80032b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80032ae:	887a      	ldrh	r2, [r7, #2]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	460b      	mov	r3, r1
 80032ca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	695b      	ldr	r3, [r3, #20]
 80032d0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80032d2:	887a      	ldrh	r2, [r7, #2]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	4013      	ands	r3, r2
 80032d8:	041a      	lsls	r2, r3, #16
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	43d9      	mvns	r1, r3
 80032de:	887b      	ldrh	r3, [r7, #2]
 80032e0:	400b      	ands	r3, r1
 80032e2:	431a      	orrs	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	619a      	str	r2, [r3, #24]
}
 80032e8:	bf00      	nop
 80032ea:	3714      	adds	r7, #20
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80032f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032f6:	b08f      	sub	sp, #60	@ 0x3c
 80032f8:	af0a      	add	r7, sp, #40	@ 0x28
 80032fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d101      	bne.n	8003306 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e116      	b.n	8003534 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8003312:	b2db      	uxtb	r3, r3
 8003314:	2b00      	cmp	r3, #0
 8003316:	d106      	bne.n	8003326 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f7ff f9eb 	bl	80026fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2203      	movs	r2, #3
 800332a:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003332:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003336:	2b00      	cmp	r3, #0
 8003338:	d102      	bne.n	8003340 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4618      	mov	r0, r3
 8003346:	f003 f925 	bl	8006594 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	603b      	str	r3, [r7, #0]
 8003350:	687e      	ldr	r6, [r7, #4]
 8003352:	466d      	mov	r5, sp
 8003354:	f106 0410 	add.w	r4, r6, #16
 8003358:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800335a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800335c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800335e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003360:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003364:	e885 0003 	stmia.w	r5, {r0, r1}
 8003368:	1d33      	adds	r3, r6, #4
 800336a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800336c:	6838      	ldr	r0, [r7, #0]
 800336e:	f003 f8e5 	bl	800653c <USB_CoreInit>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d005      	beq.n	8003384 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2202      	movs	r2, #2
 800337c:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e0d7      	b.n	8003534 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2100      	movs	r1, #0
 800338a:	4618      	mov	r0, r3
 800338c:	f003 f913 	bl	80065b6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003390:	2300      	movs	r3, #0
 8003392:	73fb      	strb	r3, [r7, #15]
 8003394:	e04a      	b.n	800342c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003396:	7bfa      	ldrb	r2, [r7, #15]
 8003398:	6879      	ldr	r1, [r7, #4]
 800339a:	4613      	mov	r3, r2
 800339c:	00db      	lsls	r3, r3, #3
 800339e:	4413      	add	r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	440b      	add	r3, r1
 80033a4:	333d      	adds	r3, #61	@ 0x3d
 80033a6:	2201      	movs	r2, #1
 80033a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80033aa:	7bfa      	ldrb	r2, [r7, #15]
 80033ac:	6879      	ldr	r1, [r7, #4]
 80033ae:	4613      	mov	r3, r2
 80033b0:	00db      	lsls	r3, r3, #3
 80033b2:	4413      	add	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	440b      	add	r3, r1
 80033b8:	333c      	adds	r3, #60	@ 0x3c
 80033ba:	7bfa      	ldrb	r2, [r7, #15]
 80033bc:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80033be:	7bfa      	ldrb	r2, [r7, #15]
 80033c0:	7bfb      	ldrb	r3, [r7, #15]
 80033c2:	b298      	uxth	r0, r3
 80033c4:	6879      	ldr	r1, [r7, #4]
 80033c6:	4613      	mov	r3, r2
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	4413      	add	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	440b      	add	r3, r1
 80033d0:	3356      	adds	r3, #86	@ 0x56
 80033d2:	4602      	mov	r2, r0
 80033d4:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80033d6:	7bfa      	ldrb	r2, [r7, #15]
 80033d8:	6879      	ldr	r1, [r7, #4]
 80033da:	4613      	mov	r3, r2
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	4413      	add	r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	440b      	add	r3, r1
 80033e4:	3340      	adds	r3, #64	@ 0x40
 80033e6:	2200      	movs	r2, #0
 80033e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80033ea:	7bfa      	ldrb	r2, [r7, #15]
 80033ec:	6879      	ldr	r1, [r7, #4]
 80033ee:	4613      	mov	r3, r2
 80033f0:	00db      	lsls	r3, r3, #3
 80033f2:	4413      	add	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	440b      	add	r3, r1
 80033f8:	3344      	adds	r3, #68	@ 0x44
 80033fa:	2200      	movs	r2, #0
 80033fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80033fe:	7bfa      	ldrb	r2, [r7, #15]
 8003400:	6879      	ldr	r1, [r7, #4]
 8003402:	4613      	mov	r3, r2
 8003404:	00db      	lsls	r3, r3, #3
 8003406:	4413      	add	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	440b      	add	r3, r1
 800340c:	3348      	adds	r3, #72	@ 0x48
 800340e:	2200      	movs	r2, #0
 8003410:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003412:	7bfa      	ldrb	r2, [r7, #15]
 8003414:	6879      	ldr	r1, [r7, #4]
 8003416:	4613      	mov	r3, r2
 8003418:	00db      	lsls	r3, r3, #3
 800341a:	4413      	add	r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	440b      	add	r3, r1
 8003420:	334c      	adds	r3, #76	@ 0x4c
 8003422:	2200      	movs	r2, #0
 8003424:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003426:	7bfb      	ldrb	r3, [r7, #15]
 8003428:	3301      	adds	r3, #1
 800342a:	73fb      	strb	r3, [r7, #15]
 800342c:	7bfa      	ldrb	r2, [r7, #15]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	429a      	cmp	r2, r3
 8003434:	d3af      	bcc.n	8003396 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003436:	2300      	movs	r3, #0
 8003438:	73fb      	strb	r3, [r7, #15]
 800343a:	e044      	b.n	80034c6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800343c:	7bfa      	ldrb	r2, [r7, #15]
 800343e:	6879      	ldr	r1, [r7, #4]
 8003440:	4613      	mov	r3, r2
 8003442:	00db      	lsls	r3, r3, #3
 8003444:	4413      	add	r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	440b      	add	r3, r1
 800344a:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 800344e:	2200      	movs	r2, #0
 8003450:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003452:	7bfa      	ldrb	r2, [r7, #15]
 8003454:	6879      	ldr	r1, [r7, #4]
 8003456:	4613      	mov	r3, r2
 8003458:	00db      	lsls	r3, r3, #3
 800345a:	4413      	add	r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	440b      	add	r3, r1
 8003460:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8003464:	7bfa      	ldrb	r2, [r7, #15]
 8003466:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003468:	7bfa      	ldrb	r2, [r7, #15]
 800346a:	6879      	ldr	r1, [r7, #4]
 800346c:	4613      	mov	r3, r2
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	4413      	add	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	440b      	add	r3, r1
 8003476:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800347a:	2200      	movs	r2, #0
 800347c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800347e:	7bfa      	ldrb	r2, [r7, #15]
 8003480:	6879      	ldr	r1, [r7, #4]
 8003482:	4613      	mov	r3, r2
 8003484:	00db      	lsls	r3, r3, #3
 8003486:	4413      	add	r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	440b      	add	r3, r1
 800348c:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 8003490:	2200      	movs	r2, #0
 8003492:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003494:	7bfa      	ldrb	r2, [r7, #15]
 8003496:	6879      	ldr	r1, [r7, #4]
 8003498:	4613      	mov	r3, r2
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	4413      	add	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	440b      	add	r3, r1
 80034a2:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 80034a6:	2200      	movs	r2, #0
 80034a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80034aa:	7bfa      	ldrb	r2, [r7, #15]
 80034ac:	6879      	ldr	r1, [r7, #4]
 80034ae:	4613      	mov	r3, r2
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	4413      	add	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	440b      	add	r3, r1
 80034b8:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 80034bc:	2200      	movs	r2, #0
 80034be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034c0:	7bfb      	ldrb	r3, [r7, #15]
 80034c2:	3301      	adds	r3, #1
 80034c4:	73fb      	strb	r3, [r7, #15]
 80034c6:	7bfa      	ldrb	r2, [r7, #15]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d3b5      	bcc.n	800343c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	603b      	str	r3, [r7, #0]
 80034d6:	687e      	ldr	r6, [r7, #4]
 80034d8:	466d      	mov	r5, sp
 80034da:	f106 0410 	add.w	r4, r6, #16
 80034de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80034ea:	e885 0003 	stmia.w	r5, {r0, r1}
 80034ee:	1d33      	adds	r3, r6, #4
 80034f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034f2:	6838      	ldr	r0, [r7, #0]
 80034f4:	f003 f8ac 	bl	8006650 <USB_DevInit>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d005      	beq.n	800350a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2202      	movs	r2, #2
 8003502:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e014      	b.n	8003534 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2201      	movs	r2, #1
 8003516:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800351e:	2b01      	cmp	r3, #1
 8003520:	d102      	bne.n	8003528 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f80a 	bl	800353c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4618      	mov	r0, r3
 800352e:	f003 fa4e 	bl	80069ce <USB_DevDisconnect>

  return HAL_OK;
 8003532:	2300      	movs	r3, #0
}
 8003534:	4618      	mov	r0, r3
 8003536:	3714      	adds	r7, #20
 8003538:	46bd      	mov	sp, r7
 800353a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800353c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800353c:	b480      	push	{r7}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2201      	movs	r2, #1
 800354e:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800356a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800356e:	f043 0303 	orr.w	r3, r3, #3
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3714      	adds	r7, #20
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003584:	b480      	push	{r7}
 8003586:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003588:	4b04      	ldr	r3, [pc, #16]	@ (800359c <HAL_PWREx_GetVoltageRange+0x18>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003590:	4618      	mov	r0, r3
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	40007000 	.word	0x40007000

080035a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035ae:	d130      	bne.n	8003612 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80035b0:	4b23      	ldr	r3, [pc, #140]	@ (8003640 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80035b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035bc:	d038      	beq.n	8003630 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80035be:	4b20      	ldr	r3, [pc, #128]	@ (8003640 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80035c6:	4a1e      	ldr	r2, [pc, #120]	@ (8003640 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035c8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80035cc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80035ce:	4b1d      	ldr	r3, [pc, #116]	@ (8003644 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2232      	movs	r2, #50	@ 0x32
 80035d4:	fb02 f303 	mul.w	r3, r2, r3
 80035d8:	4a1b      	ldr	r2, [pc, #108]	@ (8003648 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80035da:	fba2 2303 	umull	r2, r3, r2, r3
 80035de:	0c9b      	lsrs	r3, r3, #18
 80035e0:	3301      	adds	r3, #1
 80035e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035e4:	e002      	b.n	80035ec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	3b01      	subs	r3, #1
 80035ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035ec:	4b14      	ldr	r3, [pc, #80]	@ (8003640 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035ee:	695b      	ldr	r3, [r3, #20]
 80035f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035f8:	d102      	bne.n	8003600 <HAL_PWREx_ControlVoltageScaling+0x60>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1f2      	bne.n	80035e6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003600:	4b0f      	ldr	r3, [pc, #60]	@ (8003640 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003602:	695b      	ldr	r3, [r3, #20]
 8003604:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003608:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800360c:	d110      	bne.n	8003630 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e00f      	b.n	8003632 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003612:	4b0b      	ldr	r3, [pc, #44]	@ (8003640 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800361a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800361e:	d007      	beq.n	8003630 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003620:	4b07      	ldr	r3, [pc, #28]	@ (8003640 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003628:	4a05      	ldr	r2, [pc, #20]	@ (8003640 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800362a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800362e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3714      	adds	r7, #20
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	40007000 	.word	0x40007000
 8003644:	20000180 	.word	0x20000180
 8003648:	431bde83 	.word	0x431bde83

0800364c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003650:	4b05      	ldr	r3, [pc, #20]	@ (8003668 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	4a04      	ldr	r2, [pc, #16]	@ (8003668 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003656:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800365a:	6053      	str	r3, [r2, #4]
}
 800365c:	bf00      	nop
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	40007000 	.word	0x40007000

0800366c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b088      	sub	sp, #32
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d102      	bne.n	8003680 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	f000 bc08 	b.w	8003e90 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003680:	4b96      	ldr	r3, [pc, #600]	@ (80038dc <HAL_RCC_OscConfig+0x270>)
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f003 030c 	and.w	r3, r3, #12
 8003688:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800368a:	4b94      	ldr	r3, [pc, #592]	@ (80038dc <HAL_RCC_OscConfig+0x270>)
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	f003 0303 	and.w	r3, r3, #3
 8003692:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0310 	and.w	r3, r3, #16
 800369c:	2b00      	cmp	r3, #0
 800369e:	f000 80e4 	beq.w	800386a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d007      	beq.n	80036b8 <HAL_RCC_OscConfig+0x4c>
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	2b0c      	cmp	r3, #12
 80036ac:	f040 808b 	bne.w	80037c6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	f040 8087 	bne.w	80037c6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80036b8:	4b88      	ldr	r3, [pc, #544]	@ (80038dc <HAL_RCC_OscConfig+0x270>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d005      	beq.n	80036d0 <HAL_RCC_OscConfig+0x64>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	699b      	ldr	r3, [r3, #24]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d101      	bne.n	80036d0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e3df      	b.n	8003e90 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a1a      	ldr	r2, [r3, #32]
 80036d4:	4b81      	ldr	r3, [pc, #516]	@ (80038dc <HAL_RCC_OscConfig+0x270>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0308 	and.w	r3, r3, #8
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d004      	beq.n	80036ea <HAL_RCC_OscConfig+0x7e>
 80036e0:	4b7e      	ldr	r3, [pc, #504]	@ (80038dc <HAL_RCC_OscConfig+0x270>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80036e8:	e005      	b.n	80036f6 <HAL_RCC_OscConfig+0x8a>
 80036ea:	4b7c      	ldr	r3, [pc, #496]	@ (80038dc <HAL_RCC_OscConfig+0x270>)
 80036ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036f0:	091b      	lsrs	r3, r3, #4
 80036f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d223      	bcs.n	8003742 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a1b      	ldr	r3, [r3, #32]
 80036fe:	4618      	mov	r0, r3
 8003700:	f000 fd92 	bl	8004228 <RCC_SetFlashLatencyFromMSIRange>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e3c0      	b.n	8003e90 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800370e:	4b73      	ldr	r3, [pc, #460]	@ (80038dc <HAL_RCC_OscConfig+0x270>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a72      	ldr	r2, [pc, #456]	@ (80038dc <HAL_RCC_OscConfig+0x270>)
 8003714:	f043 0308 	orr.w	r3, r3, #8
 8003718:	6013      	str	r3, [r2, #0]
 800371a:	4b70      	ldr	r3, [pc, #448]	@ (80038dc <HAL_RCC_OscConfig+0x270>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	496d      	ldr	r1, [pc, #436]	@ (80038dc <HAL_RCC_OscConfig+0x270>)
 8003728:	4313      	orrs	r3, r2
 800372a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800372c:	4b6b      	ldr	r3, [pc, #428]	@ (80038dc <HAL_RCC_OscConfig+0x270>)
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	69db      	ldr	r3, [r3, #28]
 8003738:	021b      	lsls	r3, r3, #8
 800373a:	4968      	ldr	r1, [pc, #416]	@ (80038dc <HAL_RCC_OscConfig+0x270>)
 800373c:	4313      	orrs	r3, r2
 800373e:	604b      	str	r3, [r1, #4]
 8003740:	e025      	b.n	800378e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003742:	4b66      	ldr	r3, [pc, #408]	@ (80038dc <HAL_RCC_OscConfig+0x270>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a65      	ldr	r2, [pc, #404]	@ (80038dc <HAL_RCC_OscConfig+0x270>)
 8003748:	f043 0308 	orr.w	r3, r3, #8
 800374c:	6013      	str	r3, [r2, #0]
 800374e:	4b63      	ldr	r3, [pc, #396]	@ (80038dc <HAL_RCC_OscConfig+0x270>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	4960      	ldr	r1, [pc, #384]	@ (80038dc <HAL_RCC_OscConfig+0x270>)
 800375c:	4313      	orrs	r3, r2
 800375e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003760:	4b5e      	ldr	r3, [pc, #376]	@ (80038dc <HAL_RCC_OscConfig+0x270>)
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	69db      	ldr	r3, [r3, #28]
 800376c:	021b      	lsls	r3, r3, #8
 800376e:	495b      	ldr	r1, [pc, #364]	@ (80038dc <HAL_RCC_OscConfig+0x270>)
 8003770:	4313      	orrs	r3, r2
 8003772:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d109      	bne.n	800378e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a1b      	ldr	r3, [r3, #32]
 800377e:	4618      	mov	r0, r3
 8003780:	f000 fd52 	bl	8004228 <RCC_SetFlashLatencyFromMSIRange>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e380      	b.n	8003e90 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800378e:	f000 fc87 	bl	80040a0 <HAL_RCC_GetSysClockFreq>
 8003792:	4602      	mov	r2, r0
 8003794:	4b51      	ldr	r3, [pc, #324]	@ (80038dc <HAL_RCC_OscConfig+0x270>)
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	091b      	lsrs	r3, r3, #4
 800379a:	f003 030f 	and.w	r3, r3, #15
 800379e:	4950      	ldr	r1, [pc, #320]	@ (80038e0 <HAL_RCC_OscConfig+0x274>)
 80037a0:	5ccb      	ldrb	r3, [r1, r3]
 80037a2:	f003 031f 	and.w	r3, r3, #31
 80037a6:	fa22 f303 	lsr.w	r3, r2, r3
 80037aa:	4a4e      	ldr	r2, [pc, #312]	@ (80038e4 <HAL_RCC_OscConfig+0x278>)
 80037ac:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80037ae:	4b4e      	ldr	r3, [pc, #312]	@ (80038e8 <HAL_RCC_OscConfig+0x27c>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7ff f880 	bl	80028b8 <HAL_InitTick>
 80037b8:	4603      	mov	r3, r0
 80037ba:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80037bc:	7bfb      	ldrb	r3, [r7, #15]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d052      	beq.n	8003868 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80037c2:	7bfb      	ldrb	r3, [r7, #15]
 80037c4:	e364      	b.n	8003e90 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d032      	beq.n	8003834 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80037ce:	4b43      	ldr	r3, [pc, #268]	@ (80038dc <HAL_RCC_OscConfig+0x270>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a42      	ldr	r2, [pc, #264]	@ (80038dc <HAL_RCC_OscConfig+0x270>)
 80037d4:	f043 0301 	orr.w	r3, r3, #1
 80037d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80037da:	f7ff f8bd 	bl	8002958 <HAL_GetTick>
 80037de:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037e0:	e008      	b.n	80037f4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80037e2:	f7ff f8b9 	bl	8002958 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d901      	bls.n	80037f4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e34d      	b.n	8003e90 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037f4:	4b39      	ldr	r3, [pc, #228]	@ (80038dc <HAL_RCC_OscConfig+0x270>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d0f0      	beq.n	80037e2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003800:	4b36      	ldr	r3, [pc, #216]	@ (80038dc <HAL_RCC_OscConfig+0x270>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a35      	ldr	r2, [pc, #212]	@ (80038dc <HAL_RCC_OscConfig+0x270>)
 8003806:	f043 0308 	orr.w	r3, r3, #8
 800380a:	6013      	str	r3, [r2, #0]
 800380c:	4b33      	ldr	r3, [pc, #204]	@ (80038dc <HAL_RCC_OscConfig+0x270>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a1b      	ldr	r3, [r3, #32]
 8003818:	4930      	ldr	r1, [pc, #192]	@ (80038dc <HAL_RCC_OscConfig+0x270>)
 800381a:	4313      	orrs	r3, r2
 800381c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800381e:	4b2f      	ldr	r3, [pc, #188]	@ (80038dc <HAL_RCC_OscConfig+0x270>)
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	69db      	ldr	r3, [r3, #28]
 800382a:	021b      	lsls	r3, r3, #8
 800382c:	492b      	ldr	r1, [pc, #172]	@ (80038dc <HAL_RCC_OscConfig+0x270>)
 800382e:	4313      	orrs	r3, r2
 8003830:	604b      	str	r3, [r1, #4]
 8003832:	e01a      	b.n	800386a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003834:	4b29      	ldr	r3, [pc, #164]	@ (80038dc <HAL_RCC_OscConfig+0x270>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a28      	ldr	r2, [pc, #160]	@ (80038dc <HAL_RCC_OscConfig+0x270>)
 800383a:	f023 0301 	bic.w	r3, r3, #1
 800383e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003840:	f7ff f88a 	bl	8002958 <HAL_GetTick>
 8003844:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003846:	e008      	b.n	800385a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003848:	f7ff f886 	bl	8002958 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b02      	cmp	r3, #2
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e31a      	b.n	8003e90 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800385a:	4b20      	ldr	r3, [pc, #128]	@ (80038dc <HAL_RCC_OscConfig+0x270>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1f0      	bne.n	8003848 <HAL_RCC_OscConfig+0x1dc>
 8003866:	e000      	b.n	800386a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003868:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	2b00      	cmp	r3, #0
 8003874:	d073      	beq.n	800395e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	2b08      	cmp	r3, #8
 800387a:	d005      	beq.n	8003888 <HAL_RCC_OscConfig+0x21c>
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	2b0c      	cmp	r3, #12
 8003880:	d10e      	bne.n	80038a0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	2b03      	cmp	r3, #3
 8003886:	d10b      	bne.n	80038a0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003888:	4b14      	ldr	r3, [pc, #80]	@ (80038dc <HAL_RCC_OscConfig+0x270>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d063      	beq.n	800395c <HAL_RCC_OscConfig+0x2f0>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d15f      	bne.n	800395c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e2f7      	b.n	8003e90 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038a8:	d106      	bne.n	80038b8 <HAL_RCC_OscConfig+0x24c>
 80038aa:	4b0c      	ldr	r3, [pc, #48]	@ (80038dc <HAL_RCC_OscConfig+0x270>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a0b      	ldr	r2, [pc, #44]	@ (80038dc <HAL_RCC_OscConfig+0x270>)
 80038b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038b4:	6013      	str	r3, [r2, #0]
 80038b6:	e025      	b.n	8003904 <HAL_RCC_OscConfig+0x298>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038c0:	d114      	bne.n	80038ec <HAL_RCC_OscConfig+0x280>
 80038c2:	4b06      	ldr	r3, [pc, #24]	@ (80038dc <HAL_RCC_OscConfig+0x270>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a05      	ldr	r2, [pc, #20]	@ (80038dc <HAL_RCC_OscConfig+0x270>)
 80038c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038cc:	6013      	str	r3, [r2, #0]
 80038ce:	4b03      	ldr	r3, [pc, #12]	@ (80038dc <HAL_RCC_OscConfig+0x270>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a02      	ldr	r2, [pc, #8]	@ (80038dc <HAL_RCC_OscConfig+0x270>)
 80038d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038d8:	6013      	str	r3, [r2, #0]
 80038da:	e013      	b.n	8003904 <HAL_RCC_OscConfig+0x298>
 80038dc:	40021000 	.word	0x40021000
 80038e0:	080099b4 	.word	0x080099b4
 80038e4:	20000180 	.word	0x20000180
 80038e8:	20000184 	.word	0x20000184
 80038ec:	4ba0      	ldr	r3, [pc, #640]	@ (8003b70 <HAL_RCC_OscConfig+0x504>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a9f      	ldr	r2, [pc, #636]	@ (8003b70 <HAL_RCC_OscConfig+0x504>)
 80038f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038f6:	6013      	str	r3, [r2, #0]
 80038f8:	4b9d      	ldr	r3, [pc, #628]	@ (8003b70 <HAL_RCC_OscConfig+0x504>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a9c      	ldr	r2, [pc, #624]	@ (8003b70 <HAL_RCC_OscConfig+0x504>)
 80038fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003902:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d013      	beq.n	8003934 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800390c:	f7ff f824 	bl	8002958 <HAL_GetTick>
 8003910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003912:	e008      	b.n	8003926 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003914:	f7ff f820 	bl	8002958 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b64      	cmp	r3, #100	@ 0x64
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e2b4      	b.n	8003e90 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003926:	4b92      	ldr	r3, [pc, #584]	@ (8003b70 <HAL_RCC_OscConfig+0x504>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d0f0      	beq.n	8003914 <HAL_RCC_OscConfig+0x2a8>
 8003932:	e014      	b.n	800395e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003934:	f7ff f810 	bl	8002958 <HAL_GetTick>
 8003938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800393a:	e008      	b.n	800394e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800393c:	f7ff f80c 	bl	8002958 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b64      	cmp	r3, #100	@ 0x64
 8003948:	d901      	bls.n	800394e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e2a0      	b.n	8003e90 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800394e:	4b88      	ldr	r3, [pc, #544]	@ (8003b70 <HAL_RCC_OscConfig+0x504>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1f0      	bne.n	800393c <HAL_RCC_OscConfig+0x2d0>
 800395a:	e000      	b.n	800395e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800395c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d060      	beq.n	8003a2c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	2b04      	cmp	r3, #4
 800396e:	d005      	beq.n	800397c <HAL_RCC_OscConfig+0x310>
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	2b0c      	cmp	r3, #12
 8003974:	d119      	bne.n	80039aa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	2b02      	cmp	r3, #2
 800397a:	d116      	bne.n	80039aa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800397c:	4b7c      	ldr	r3, [pc, #496]	@ (8003b70 <HAL_RCC_OscConfig+0x504>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003984:	2b00      	cmp	r3, #0
 8003986:	d005      	beq.n	8003994 <HAL_RCC_OscConfig+0x328>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d101      	bne.n	8003994 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e27d      	b.n	8003e90 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003994:	4b76      	ldr	r3, [pc, #472]	@ (8003b70 <HAL_RCC_OscConfig+0x504>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	061b      	lsls	r3, r3, #24
 80039a2:	4973      	ldr	r1, [pc, #460]	@ (8003b70 <HAL_RCC_OscConfig+0x504>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039a8:	e040      	b.n	8003a2c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d023      	beq.n	80039fa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039b2:	4b6f      	ldr	r3, [pc, #444]	@ (8003b70 <HAL_RCC_OscConfig+0x504>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a6e      	ldr	r2, [pc, #440]	@ (8003b70 <HAL_RCC_OscConfig+0x504>)
 80039b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039be:	f7fe ffcb 	bl	8002958 <HAL_GetTick>
 80039c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039c4:	e008      	b.n	80039d8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039c6:	f7fe ffc7 	bl	8002958 <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d901      	bls.n	80039d8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e25b      	b.n	8003e90 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039d8:	4b65      	ldr	r3, [pc, #404]	@ (8003b70 <HAL_RCC_OscConfig+0x504>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d0f0      	beq.n	80039c6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039e4:	4b62      	ldr	r3, [pc, #392]	@ (8003b70 <HAL_RCC_OscConfig+0x504>)
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	061b      	lsls	r3, r3, #24
 80039f2:	495f      	ldr	r1, [pc, #380]	@ (8003b70 <HAL_RCC_OscConfig+0x504>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	604b      	str	r3, [r1, #4]
 80039f8:	e018      	b.n	8003a2c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039fa:	4b5d      	ldr	r3, [pc, #372]	@ (8003b70 <HAL_RCC_OscConfig+0x504>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a5c      	ldr	r2, [pc, #368]	@ (8003b70 <HAL_RCC_OscConfig+0x504>)
 8003a00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a06:	f7fe ffa7 	bl	8002958 <HAL_GetTick>
 8003a0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a0c:	e008      	b.n	8003a20 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a0e:	f7fe ffa3 	bl	8002958 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d901      	bls.n	8003a20 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e237      	b.n	8003e90 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a20:	4b53      	ldr	r3, [pc, #332]	@ (8003b70 <HAL_RCC_OscConfig+0x504>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1f0      	bne.n	8003a0e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0308 	and.w	r3, r3, #8
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d03c      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	695b      	ldr	r3, [r3, #20]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d01c      	beq.n	8003a7a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a40:	4b4b      	ldr	r3, [pc, #300]	@ (8003b70 <HAL_RCC_OscConfig+0x504>)
 8003a42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a46:	4a4a      	ldr	r2, [pc, #296]	@ (8003b70 <HAL_RCC_OscConfig+0x504>)
 8003a48:	f043 0301 	orr.w	r3, r3, #1
 8003a4c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a50:	f7fe ff82 	bl	8002958 <HAL_GetTick>
 8003a54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a56:	e008      	b.n	8003a6a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a58:	f7fe ff7e 	bl	8002958 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e212      	b.n	8003e90 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a6a:	4b41      	ldr	r3, [pc, #260]	@ (8003b70 <HAL_RCC_OscConfig+0x504>)
 8003a6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a70:	f003 0302 	and.w	r3, r3, #2
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d0ef      	beq.n	8003a58 <HAL_RCC_OscConfig+0x3ec>
 8003a78:	e01b      	b.n	8003ab2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a7a:	4b3d      	ldr	r3, [pc, #244]	@ (8003b70 <HAL_RCC_OscConfig+0x504>)
 8003a7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a80:	4a3b      	ldr	r2, [pc, #236]	@ (8003b70 <HAL_RCC_OscConfig+0x504>)
 8003a82:	f023 0301 	bic.w	r3, r3, #1
 8003a86:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a8a:	f7fe ff65 	bl	8002958 <HAL_GetTick>
 8003a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a90:	e008      	b.n	8003aa4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a92:	f7fe ff61 	bl	8002958 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d901      	bls.n	8003aa4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e1f5      	b.n	8003e90 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003aa4:	4b32      	ldr	r3, [pc, #200]	@ (8003b70 <HAL_RCC_OscConfig+0x504>)
 8003aa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1ef      	bne.n	8003a92 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0304 	and.w	r3, r3, #4
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	f000 80a6 	beq.w	8003c0c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003ac4:	4b2a      	ldr	r3, [pc, #168]	@ (8003b70 <HAL_RCC_OscConfig+0x504>)
 8003ac6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ac8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d10d      	bne.n	8003aec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ad0:	4b27      	ldr	r3, [pc, #156]	@ (8003b70 <HAL_RCC_OscConfig+0x504>)
 8003ad2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ad4:	4a26      	ldr	r2, [pc, #152]	@ (8003b70 <HAL_RCC_OscConfig+0x504>)
 8003ad6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ada:	6593      	str	r3, [r2, #88]	@ 0x58
 8003adc:	4b24      	ldr	r3, [pc, #144]	@ (8003b70 <HAL_RCC_OscConfig+0x504>)
 8003ade:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ae0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ae4:	60bb      	str	r3, [r7, #8]
 8003ae6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003aec:	4b21      	ldr	r3, [pc, #132]	@ (8003b74 <HAL_RCC_OscConfig+0x508>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d118      	bne.n	8003b2a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003af8:	4b1e      	ldr	r3, [pc, #120]	@ (8003b74 <HAL_RCC_OscConfig+0x508>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a1d      	ldr	r2, [pc, #116]	@ (8003b74 <HAL_RCC_OscConfig+0x508>)
 8003afe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b02:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b04:	f7fe ff28 	bl	8002958 <HAL_GetTick>
 8003b08:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b0a:	e008      	b.n	8003b1e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b0c:	f7fe ff24 	bl	8002958 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e1b8      	b.n	8003e90 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b1e:	4b15      	ldr	r3, [pc, #84]	@ (8003b74 <HAL_RCC_OscConfig+0x508>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d0f0      	beq.n	8003b0c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d108      	bne.n	8003b44 <HAL_RCC_OscConfig+0x4d8>
 8003b32:	4b0f      	ldr	r3, [pc, #60]	@ (8003b70 <HAL_RCC_OscConfig+0x504>)
 8003b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b38:	4a0d      	ldr	r2, [pc, #52]	@ (8003b70 <HAL_RCC_OscConfig+0x504>)
 8003b3a:	f043 0301 	orr.w	r3, r3, #1
 8003b3e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b42:	e029      	b.n	8003b98 <HAL_RCC_OscConfig+0x52c>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	2b05      	cmp	r3, #5
 8003b4a:	d115      	bne.n	8003b78 <HAL_RCC_OscConfig+0x50c>
 8003b4c:	4b08      	ldr	r3, [pc, #32]	@ (8003b70 <HAL_RCC_OscConfig+0x504>)
 8003b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b52:	4a07      	ldr	r2, [pc, #28]	@ (8003b70 <HAL_RCC_OscConfig+0x504>)
 8003b54:	f043 0304 	orr.w	r3, r3, #4
 8003b58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b5c:	4b04      	ldr	r3, [pc, #16]	@ (8003b70 <HAL_RCC_OscConfig+0x504>)
 8003b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b62:	4a03      	ldr	r2, [pc, #12]	@ (8003b70 <HAL_RCC_OscConfig+0x504>)
 8003b64:	f043 0301 	orr.w	r3, r3, #1
 8003b68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b6c:	e014      	b.n	8003b98 <HAL_RCC_OscConfig+0x52c>
 8003b6e:	bf00      	nop
 8003b70:	40021000 	.word	0x40021000
 8003b74:	40007000 	.word	0x40007000
 8003b78:	4b9d      	ldr	r3, [pc, #628]	@ (8003df0 <HAL_RCC_OscConfig+0x784>)
 8003b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b7e:	4a9c      	ldr	r2, [pc, #624]	@ (8003df0 <HAL_RCC_OscConfig+0x784>)
 8003b80:	f023 0301 	bic.w	r3, r3, #1
 8003b84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b88:	4b99      	ldr	r3, [pc, #612]	@ (8003df0 <HAL_RCC_OscConfig+0x784>)
 8003b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b8e:	4a98      	ldr	r2, [pc, #608]	@ (8003df0 <HAL_RCC_OscConfig+0x784>)
 8003b90:	f023 0304 	bic.w	r3, r3, #4
 8003b94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d016      	beq.n	8003bce <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba0:	f7fe feda 	bl	8002958 <HAL_GetTick>
 8003ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ba6:	e00a      	b.n	8003bbe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ba8:	f7fe fed6 	bl	8002958 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e168      	b.n	8003e90 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bbe:	4b8c      	ldr	r3, [pc, #560]	@ (8003df0 <HAL_RCC_OscConfig+0x784>)
 8003bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bc4:	f003 0302 	and.w	r3, r3, #2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d0ed      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x53c>
 8003bcc:	e015      	b.n	8003bfa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bce:	f7fe fec3 	bl	8002958 <HAL_GetTick>
 8003bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bd4:	e00a      	b.n	8003bec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bd6:	f7fe febf 	bl	8002958 <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d901      	bls.n	8003bec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	e151      	b.n	8003e90 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bec:	4b80      	ldr	r3, [pc, #512]	@ (8003df0 <HAL_RCC_OscConfig+0x784>)
 8003bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1ed      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bfa:	7ffb      	ldrb	r3, [r7, #31]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d105      	bne.n	8003c0c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c00:	4b7b      	ldr	r3, [pc, #492]	@ (8003df0 <HAL_RCC_OscConfig+0x784>)
 8003c02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c04:	4a7a      	ldr	r2, [pc, #488]	@ (8003df0 <HAL_RCC_OscConfig+0x784>)
 8003c06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c0a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0320 	and.w	r3, r3, #32
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d03c      	beq.n	8003c92 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d01c      	beq.n	8003c5a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003c20:	4b73      	ldr	r3, [pc, #460]	@ (8003df0 <HAL_RCC_OscConfig+0x784>)
 8003c22:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c26:	4a72      	ldr	r2, [pc, #456]	@ (8003df0 <HAL_RCC_OscConfig+0x784>)
 8003c28:	f043 0301 	orr.w	r3, r3, #1
 8003c2c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c30:	f7fe fe92 	bl	8002958 <HAL_GetTick>
 8003c34:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003c36:	e008      	b.n	8003c4a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c38:	f7fe fe8e 	bl	8002958 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d901      	bls.n	8003c4a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e122      	b.n	8003e90 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003c4a:	4b69      	ldr	r3, [pc, #420]	@ (8003df0 <HAL_RCC_OscConfig+0x784>)
 8003c4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c50:	f003 0302 	and.w	r3, r3, #2
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d0ef      	beq.n	8003c38 <HAL_RCC_OscConfig+0x5cc>
 8003c58:	e01b      	b.n	8003c92 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003c5a:	4b65      	ldr	r3, [pc, #404]	@ (8003df0 <HAL_RCC_OscConfig+0x784>)
 8003c5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c60:	4a63      	ldr	r2, [pc, #396]	@ (8003df0 <HAL_RCC_OscConfig+0x784>)
 8003c62:	f023 0301 	bic.w	r3, r3, #1
 8003c66:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c6a:	f7fe fe75 	bl	8002958 <HAL_GetTick>
 8003c6e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c70:	e008      	b.n	8003c84 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c72:	f7fe fe71 	bl	8002958 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d901      	bls.n	8003c84 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e105      	b.n	8003e90 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c84:	4b5a      	ldr	r3, [pc, #360]	@ (8003df0 <HAL_RCC_OscConfig+0x784>)
 8003c86:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1ef      	bne.n	8003c72 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	f000 80f9 	beq.w	8003e8e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	f040 80cf 	bne.w	8003e44 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003ca6:	4b52      	ldr	r3, [pc, #328]	@ (8003df0 <HAL_RCC_OscConfig+0x784>)
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	f003 0203 	and.w	r2, r3, #3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d12c      	bne.n	8003d14 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d123      	bne.n	8003d14 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cd6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d11b      	bne.n	8003d14 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ce6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d113      	bne.n	8003d14 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cf6:	085b      	lsrs	r3, r3, #1
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d109      	bne.n	8003d14 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d0a:	085b      	lsrs	r3, r3, #1
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d071      	beq.n	8003df8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	2b0c      	cmp	r3, #12
 8003d18:	d068      	beq.n	8003dec <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003d1a:	4b35      	ldr	r3, [pc, #212]	@ (8003df0 <HAL_RCC_OscConfig+0x784>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d105      	bne.n	8003d32 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003d26:	4b32      	ldr	r3, [pc, #200]	@ (8003df0 <HAL_RCC_OscConfig+0x784>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d001      	beq.n	8003d36 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e0ac      	b.n	8003e90 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003d36:	4b2e      	ldr	r3, [pc, #184]	@ (8003df0 <HAL_RCC_OscConfig+0x784>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a2d      	ldr	r2, [pc, #180]	@ (8003df0 <HAL_RCC_OscConfig+0x784>)
 8003d3c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d40:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d42:	f7fe fe09 	bl	8002958 <HAL_GetTick>
 8003d46:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d48:	e008      	b.n	8003d5c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d4a:	f7fe fe05 	bl	8002958 <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d901      	bls.n	8003d5c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e099      	b.n	8003e90 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d5c:	4b24      	ldr	r3, [pc, #144]	@ (8003df0 <HAL_RCC_OscConfig+0x784>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1f0      	bne.n	8003d4a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d68:	4b21      	ldr	r3, [pc, #132]	@ (8003df0 <HAL_RCC_OscConfig+0x784>)
 8003d6a:	68da      	ldr	r2, [r3, #12]
 8003d6c:	4b21      	ldr	r3, [pc, #132]	@ (8003df4 <HAL_RCC_OscConfig+0x788>)
 8003d6e:	4013      	ands	r3, r2
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003d78:	3a01      	subs	r2, #1
 8003d7a:	0112      	lsls	r2, r2, #4
 8003d7c:	4311      	orrs	r1, r2
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003d82:	0212      	lsls	r2, r2, #8
 8003d84:	4311      	orrs	r1, r2
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003d8a:	0852      	lsrs	r2, r2, #1
 8003d8c:	3a01      	subs	r2, #1
 8003d8e:	0552      	lsls	r2, r2, #21
 8003d90:	4311      	orrs	r1, r2
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003d96:	0852      	lsrs	r2, r2, #1
 8003d98:	3a01      	subs	r2, #1
 8003d9a:	0652      	lsls	r2, r2, #25
 8003d9c:	4311      	orrs	r1, r2
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003da2:	06d2      	lsls	r2, r2, #27
 8003da4:	430a      	orrs	r2, r1
 8003da6:	4912      	ldr	r1, [pc, #72]	@ (8003df0 <HAL_RCC_OscConfig+0x784>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003dac:	4b10      	ldr	r3, [pc, #64]	@ (8003df0 <HAL_RCC_OscConfig+0x784>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a0f      	ldr	r2, [pc, #60]	@ (8003df0 <HAL_RCC_OscConfig+0x784>)
 8003db2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003db6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003db8:	4b0d      	ldr	r3, [pc, #52]	@ (8003df0 <HAL_RCC_OscConfig+0x784>)
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	4a0c      	ldr	r2, [pc, #48]	@ (8003df0 <HAL_RCC_OscConfig+0x784>)
 8003dbe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003dc2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003dc4:	f7fe fdc8 	bl	8002958 <HAL_GetTick>
 8003dc8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dca:	e008      	b.n	8003dde <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dcc:	f7fe fdc4 	bl	8002958 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e058      	b.n	8003e90 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dde:	4b04      	ldr	r3, [pc, #16]	@ (8003df0 <HAL_RCC_OscConfig+0x784>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d0f0      	beq.n	8003dcc <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003dea:	e050      	b.n	8003e8e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e04f      	b.n	8003e90 <HAL_RCC_OscConfig+0x824>
 8003df0:	40021000 	.word	0x40021000
 8003df4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003df8:	4b27      	ldr	r3, [pc, #156]	@ (8003e98 <HAL_RCC_OscConfig+0x82c>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d144      	bne.n	8003e8e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003e04:	4b24      	ldr	r3, [pc, #144]	@ (8003e98 <HAL_RCC_OscConfig+0x82c>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a23      	ldr	r2, [pc, #140]	@ (8003e98 <HAL_RCC_OscConfig+0x82c>)
 8003e0a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e0e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e10:	4b21      	ldr	r3, [pc, #132]	@ (8003e98 <HAL_RCC_OscConfig+0x82c>)
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	4a20      	ldr	r2, [pc, #128]	@ (8003e98 <HAL_RCC_OscConfig+0x82c>)
 8003e16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e1a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e1c:	f7fe fd9c 	bl	8002958 <HAL_GetTick>
 8003e20:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e22:	e008      	b.n	8003e36 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e24:	f7fe fd98 	bl	8002958 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d901      	bls.n	8003e36 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e02c      	b.n	8003e90 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e36:	4b18      	ldr	r3, [pc, #96]	@ (8003e98 <HAL_RCC_OscConfig+0x82c>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d0f0      	beq.n	8003e24 <HAL_RCC_OscConfig+0x7b8>
 8003e42:	e024      	b.n	8003e8e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	2b0c      	cmp	r3, #12
 8003e48:	d01f      	beq.n	8003e8a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e4a:	4b13      	ldr	r3, [pc, #76]	@ (8003e98 <HAL_RCC_OscConfig+0x82c>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a12      	ldr	r2, [pc, #72]	@ (8003e98 <HAL_RCC_OscConfig+0x82c>)
 8003e50:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e56:	f7fe fd7f 	bl	8002958 <HAL_GetTick>
 8003e5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e5c:	e008      	b.n	8003e70 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e5e:	f7fe fd7b 	bl	8002958 <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d901      	bls.n	8003e70 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e00f      	b.n	8003e90 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e70:	4b09      	ldr	r3, [pc, #36]	@ (8003e98 <HAL_RCC_OscConfig+0x82c>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d1f0      	bne.n	8003e5e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003e7c:	4b06      	ldr	r3, [pc, #24]	@ (8003e98 <HAL_RCC_OscConfig+0x82c>)
 8003e7e:	68da      	ldr	r2, [r3, #12]
 8003e80:	4905      	ldr	r1, [pc, #20]	@ (8003e98 <HAL_RCC_OscConfig+0x82c>)
 8003e82:	4b06      	ldr	r3, [pc, #24]	@ (8003e9c <HAL_RCC_OscConfig+0x830>)
 8003e84:	4013      	ands	r3, r2
 8003e86:	60cb      	str	r3, [r1, #12]
 8003e88:	e001      	b.n	8003e8e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e000      	b.n	8003e90 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3720      	adds	r7, #32
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	40021000 	.word	0x40021000
 8003e9c:	feeefffc 	.word	0xfeeefffc

08003ea0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d101      	bne.n	8003eb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e0e7      	b.n	8004084 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003eb4:	4b75      	ldr	r3, [pc, #468]	@ (800408c <HAL_RCC_ClockConfig+0x1ec>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0307 	and.w	r3, r3, #7
 8003ebc:	683a      	ldr	r2, [r7, #0]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d910      	bls.n	8003ee4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ec2:	4b72      	ldr	r3, [pc, #456]	@ (800408c <HAL_RCC_ClockConfig+0x1ec>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f023 0207 	bic.w	r2, r3, #7
 8003eca:	4970      	ldr	r1, [pc, #448]	@ (800408c <HAL_RCC_ClockConfig+0x1ec>)
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ed2:	4b6e      	ldr	r3, [pc, #440]	@ (800408c <HAL_RCC_ClockConfig+0x1ec>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0307 	and.w	r3, r3, #7
 8003eda:	683a      	ldr	r2, [r7, #0]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d001      	beq.n	8003ee4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e0cf      	b.n	8004084 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0302 	and.w	r3, r3, #2
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d010      	beq.n	8003f12 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	689a      	ldr	r2, [r3, #8]
 8003ef4:	4b66      	ldr	r3, [pc, #408]	@ (8004090 <HAL_RCC_ClockConfig+0x1f0>)
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d908      	bls.n	8003f12 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f00:	4b63      	ldr	r3, [pc, #396]	@ (8004090 <HAL_RCC_ClockConfig+0x1f0>)
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	4960      	ldr	r1, [pc, #384]	@ (8004090 <HAL_RCC_ClockConfig+0x1f0>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0301 	and.w	r3, r3, #1
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d04c      	beq.n	8003fb8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	2b03      	cmp	r3, #3
 8003f24:	d107      	bne.n	8003f36 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f26:	4b5a      	ldr	r3, [pc, #360]	@ (8004090 <HAL_RCC_ClockConfig+0x1f0>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d121      	bne.n	8003f76 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e0a6      	b.n	8004084 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d107      	bne.n	8003f4e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f3e:	4b54      	ldr	r3, [pc, #336]	@ (8004090 <HAL_RCC_ClockConfig+0x1f0>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d115      	bne.n	8003f76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e09a      	b.n	8004084 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d107      	bne.n	8003f66 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f56:	4b4e      	ldr	r3, [pc, #312]	@ (8004090 <HAL_RCC_ClockConfig+0x1f0>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d109      	bne.n	8003f76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e08e      	b.n	8004084 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f66:	4b4a      	ldr	r3, [pc, #296]	@ (8004090 <HAL_RCC_ClockConfig+0x1f0>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e086      	b.n	8004084 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f76:	4b46      	ldr	r3, [pc, #280]	@ (8004090 <HAL_RCC_ClockConfig+0x1f0>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f023 0203 	bic.w	r2, r3, #3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	4943      	ldr	r1, [pc, #268]	@ (8004090 <HAL_RCC_ClockConfig+0x1f0>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f88:	f7fe fce6 	bl	8002958 <HAL_GetTick>
 8003f8c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f8e:	e00a      	b.n	8003fa6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f90:	f7fe fce2 	bl	8002958 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e06e      	b.n	8004084 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fa6:	4b3a      	ldr	r3, [pc, #232]	@ (8004090 <HAL_RCC_ClockConfig+0x1f0>)
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f003 020c 	and.w	r2, r3, #12
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d1eb      	bne.n	8003f90 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0302 	and.w	r3, r3, #2
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d010      	beq.n	8003fe6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	689a      	ldr	r2, [r3, #8]
 8003fc8:	4b31      	ldr	r3, [pc, #196]	@ (8004090 <HAL_RCC_ClockConfig+0x1f0>)
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d208      	bcs.n	8003fe6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fd4:	4b2e      	ldr	r3, [pc, #184]	@ (8004090 <HAL_RCC_ClockConfig+0x1f0>)
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	492b      	ldr	r1, [pc, #172]	@ (8004090 <HAL_RCC_ClockConfig+0x1f0>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fe6:	4b29      	ldr	r3, [pc, #164]	@ (800408c <HAL_RCC_ClockConfig+0x1ec>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0307 	and.w	r3, r3, #7
 8003fee:	683a      	ldr	r2, [r7, #0]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d210      	bcs.n	8004016 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ff4:	4b25      	ldr	r3, [pc, #148]	@ (800408c <HAL_RCC_ClockConfig+0x1ec>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f023 0207 	bic.w	r2, r3, #7
 8003ffc:	4923      	ldr	r1, [pc, #140]	@ (800408c <HAL_RCC_ClockConfig+0x1ec>)
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	4313      	orrs	r3, r2
 8004002:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004004:	4b21      	ldr	r3, [pc, #132]	@ (800408c <HAL_RCC_ClockConfig+0x1ec>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0307 	and.w	r3, r3, #7
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	429a      	cmp	r2, r3
 8004010:	d001      	beq.n	8004016 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e036      	b.n	8004084 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0304 	and.w	r3, r3, #4
 800401e:	2b00      	cmp	r3, #0
 8004020:	d008      	beq.n	8004034 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004022:	4b1b      	ldr	r3, [pc, #108]	@ (8004090 <HAL_RCC_ClockConfig+0x1f0>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	4918      	ldr	r1, [pc, #96]	@ (8004090 <HAL_RCC_ClockConfig+0x1f0>)
 8004030:	4313      	orrs	r3, r2
 8004032:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0308 	and.w	r3, r3, #8
 800403c:	2b00      	cmp	r3, #0
 800403e:	d009      	beq.n	8004054 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004040:	4b13      	ldr	r3, [pc, #76]	@ (8004090 <HAL_RCC_ClockConfig+0x1f0>)
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	00db      	lsls	r3, r3, #3
 800404e:	4910      	ldr	r1, [pc, #64]	@ (8004090 <HAL_RCC_ClockConfig+0x1f0>)
 8004050:	4313      	orrs	r3, r2
 8004052:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004054:	f000 f824 	bl	80040a0 <HAL_RCC_GetSysClockFreq>
 8004058:	4602      	mov	r2, r0
 800405a:	4b0d      	ldr	r3, [pc, #52]	@ (8004090 <HAL_RCC_ClockConfig+0x1f0>)
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	091b      	lsrs	r3, r3, #4
 8004060:	f003 030f 	and.w	r3, r3, #15
 8004064:	490b      	ldr	r1, [pc, #44]	@ (8004094 <HAL_RCC_ClockConfig+0x1f4>)
 8004066:	5ccb      	ldrb	r3, [r1, r3]
 8004068:	f003 031f 	and.w	r3, r3, #31
 800406c:	fa22 f303 	lsr.w	r3, r2, r3
 8004070:	4a09      	ldr	r2, [pc, #36]	@ (8004098 <HAL_RCC_ClockConfig+0x1f8>)
 8004072:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004074:	4b09      	ldr	r3, [pc, #36]	@ (800409c <HAL_RCC_ClockConfig+0x1fc>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4618      	mov	r0, r3
 800407a:	f7fe fc1d 	bl	80028b8 <HAL_InitTick>
 800407e:	4603      	mov	r3, r0
 8004080:	72fb      	strb	r3, [r7, #11]

  return status;
 8004082:	7afb      	ldrb	r3, [r7, #11]
}
 8004084:	4618      	mov	r0, r3
 8004086:	3710      	adds	r7, #16
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	40022000 	.word	0x40022000
 8004090:	40021000 	.word	0x40021000
 8004094:	080099b4 	.word	0x080099b4
 8004098:	20000180 	.word	0x20000180
 800409c:	20000184 	.word	0x20000184

080040a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b089      	sub	sp, #36	@ 0x24
 80040a4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80040a6:	2300      	movs	r3, #0
 80040a8:	61fb      	str	r3, [r7, #28]
 80040aa:	2300      	movs	r3, #0
 80040ac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040ae:	4b3e      	ldr	r3, [pc, #248]	@ (80041a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f003 030c 	and.w	r3, r3, #12
 80040b6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040b8:	4b3b      	ldr	r3, [pc, #236]	@ (80041a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	f003 0303 	and.w	r3, r3, #3
 80040c0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d005      	beq.n	80040d4 <HAL_RCC_GetSysClockFreq+0x34>
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	2b0c      	cmp	r3, #12
 80040cc:	d121      	bne.n	8004112 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d11e      	bne.n	8004112 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80040d4:	4b34      	ldr	r3, [pc, #208]	@ (80041a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0308 	and.w	r3, r3, #8
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d107      	bne.n	80040f0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80040e0:	4b31      	ldr	r3, [pc, #196]	@ (80041a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80040e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040e6:	0a1b      	lsrs	r3, r3, #8
 80040e8:	f003 030f 	and.w	r3, r3, #15
 80040ec:	61fb      	str	r3, [r7, #28]
 80040ee:	e005      	b.n	80040fc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80040f0:	4b2d      	ldr	r3, [pc, #180]	@ (80041a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	091b      	lsrs	r3, r3, #4
 80040f6:	f003 030f 	and.w	r3, r3, #15
 80040fa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80040fc:	4a2b      	ldr	r2, [pc, #172]	@ (80041ac <HAL_RCC_GetSysClockFreq+0x10c>)
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004104:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d10d      	bne.n	8004128 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004110:	e00a      	b.n	8004128 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	2b04      	cmp	r3, #4
 8004116:	d102      	bne.n	800411e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004118:	4b25      	ldr	r3, [pc, #148]	@ (80041b0 <HAL_RCC_GetSysClockFreq+0x110>)
 800411a:	61bb      	str	r3, [r7, #24]
 800411c:	e004      	b.n	8004128 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	2b08      	cmp	r3, #8
 8004122:	d101      	bne.n	8004128 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004124:	4b23      	ldr	r3, [pc, #140]	@ (80041b4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004126:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	2b0c      	cmp	r3, #12
 800412c:	d134      	bne.n	8004198 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800412e:	4b1e      	ldr	r3, [pc, #120]	@ (80041a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	f003 0303 	and.w	r3, r3, #3
 8004136:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	2b02      	cmp	r3, #2
 800413c:	d003      	beq.n	8004146 <HAL_RCC_GetSysClockFreq+0xa6>
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	2b03      	cmp	r3, #3
 8004142:	d003      	beq.n	800414c <HAL_RCC_GetSysClockFreq+0xac>
 8004144:	e005      	b.n	8004152 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004146:	4b1a      	ldr	r3, [pc, #104]	@ (80041b0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004148:	617b      	str	r3, [r7, #20]
      break;
 800414a:	e005      	b.n	8004158 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800414c:	4b19      	ldr	r3, [pc, #100]	@ (80041b4 <HAL_RCC_GetSysClockFreq+0x114>)
 800414e:	617b      	str	r3, [r7, #20]
      break;
 8004150:	e002      	b.n	8004158 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	617b      	str	r3, [r7, #20]
      break;
 8004156:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004158:	4b13      	ldr	r3, [pc, #76]	@ (80041a8 <HAL_RCC_GetSysClockFreq+0x108>)
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	091b      	lsrs	r3, r3, #4
 800415e:	f003 0307 	and.w	r3, r3, #7
 8004162:	3301      	adds	r3, #1
 8004164:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004166:	4b10      	ldr	r3, [pc, #64]	@ (80041a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	0a1b      	lsrs	r3, r3, #8
 800416c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004170:	697a      	ldr	r2, [r7, #20]
 8004172:	fb03 f202 	mul.w	r2, r3, r2
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	fbb2 f3f3 	udiv	r3, r2, r3
 800417c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800417e:	4b0a      	ldr	r3, [pc, #40]	@ (80041a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	0e5b      	lsrs	r3, r3, #25
 8004184:	f003 0303 	and.w	r3, r3, #3
 8004188:	3301      	adds	r3, #1
 800418a:	005b      	lsls	r3, r3, #1
 800418c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	fbb2 f3f3 	udiv	r3, r2, r3
 8004196:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004198:	69bb      	ldr	r3, [r7, #24]
}
 800419a:	4618      	mov	r0, r3
 800419c:	3724      	adds	r7, #36	@ 0x24
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	40021000 	.word	0x40021000
 80041ac:	080099cc 	.word	0x080099cc
 80041b0:	00f42400 	.word	0x00f42400
 80041b4:	01e84800 	.word	0x01e84800

080041b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041b8:	b480      	push	{r7}
 80041ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041bc:	4b03      	ldr	r3, [pc, #12]	@ (80041cc <HAL_RCC_GetHCLKFreq+0x14>)
 80041be:	681b      	ldr	r3, [r3, #0]
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	20000180 	.word	0x20000180

080041d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80041d4:	f7ff fff0 	bl	80041b8 <HAL_RCC_GetHCLKFreq>
 80041d8:	4602      	mov	r2, r0
 80041da:	4b06      	ldr	r3, [pc, #24]	@ (80041f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	0a1b      	lsrs	r3, r3, #8
 80041e0:	f003 0307 	and.w	r3, r3, #7
 80041e4:	4904      	ldr	r1, [pc, #16]	@ (80041f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80041e6:	5ccb      	ldrb	r3, [r1, r3]
 80041e8:	f003 031f 	and.w	r3, r3, #31
 80041ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	40021000 	.word	0x40021000
 80041f8:	080099c4 	.word	0x080099c4

080041fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004200:	f7ff ffda 	bl	80041b8 <HAL_RCC_GetHCLKFreq>
 8004204:	4602      	mov	r2, r0
 8004206:	4b06      	ldr	r3, [pc, #24]	@ (8004220 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	0adb      	lsrs	r3, r3, #11
 800420c:	f003 0307 	and.w	r3, r3, #7
 8004210:	4904      	ldr	r1, [pc, #16]	@ (8004224 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004212:	5ccb      	ldrb	r3, [r1, r3]
 8004214:	f003 031f 	and.w	r3, r3, #31
 8004218:	fa22 f303 	lsr.w	r3, r2, r3
}
 800421c:	4618      	mov	r0, r3
 800421e:	bd80      	pop	{r7, pc}
 8004220:	40021000 	.word	0x40021000
 8004224:	080099c4 	.word	0x080099c4

08004228 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b086      	sub	sp, #24
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004230:	2300      	movs	r3, #0
 8004232:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004234:	4b2a      	ldr	r3, [pc, #168]	@ (80042e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004236:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004238:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d003      	beq.n	8004248 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004240:	f7ff f9a0 	bl	8003584 <HAL_PWREx_GetVoltageRange>
 8004244:	6178      	str	r0, [r7, #20]
 8004246:	e014      	b.n	8004272 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004248:	4b25      	ldr	r3, [pc, #148]	@ (80042e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800424a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800424c:	4a24      	ldr	r2, [pc, #144]	@ (80042e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800424e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004252:	6593      	str	r3, [r2, #88]	@ 0x58
 8004254:	4b22      	ldr	r3, [pc, #136]	@ (80042e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004256:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004258:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800425c:	60fb      	str	r3, [r7, #12]
 800425e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004260:	f7ff f990 	bl	8003584 <HAL_PWREx_GetVoltageRange>
 8004264:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004266:	4b1e      	ldr	r3, [pc, #120]	@ (80042e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800426a:	4a1d      	ldr	r2, [pc, #116]	@ (80042e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800426c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004270:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004278:	d10b      	bne.n	8004292 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2b80      	cmp	r3, #128	@ 0x80
 800427e:	d919      	bls.n	80042b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2ba0      	cmp	r3, #160	@ 0xa0
 8004284:	d902      	bls.n	800428c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004286:	2302      	movs	r3, #2
 8004288:	613b      	str	r3, [r7, #16]
 800428a:	e013      	b.n	80042b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800428c:	2301      	movs	r3, #1
 800428e:	613b      	str	r3, [r7, #16]
 8004290:	e010      	b.n	80042b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2b80      	cmp	r3, #128	@ 0x80
 8004296:	d902      	bls.n	800429e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004298:	2303      	movs	r3, #3
 800429a:	613b      	str	r3, [r7, #16]
 800429c:	e00a      	b.n	80042b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2b80      	cmp	r3, #128	@ 0x80
 80042a2:	d102      	bne.n	80042aa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80042a4:	2302      	movs	r3, #2
 80042a6:	613b      	str	r3, [r7, #16]
 80042a8:	e004      	b.n	80042b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2b70      	cmp	r3, #112	@ 0x70
 80042ae:	d101      	bne.n	80042b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80042b0:	2301      	movs	r3, #1
 80042b2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80042b4:	4b0b      	ldr	r3, [pc, #44]	@ (80042e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f023 0207 	bic.w	r2, r3, #7
 80042bc:	4909      	ldr	r1, [pc, #36]	@ (80042e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80042c4:	4b07      	ldr	r3, [pc, #28]	@ (80042e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0307 	and.w	r3, r3, #7
 80042cc:	693a      	ldr	r2, [r7, #16]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d001      	beq.n	80042d6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e000      	b.n	80042d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80042d6:	2300      	movs	r3, #0
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3718      	adds	r7, #24
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	40021000 	.word	0x40021000
 80042e4:	40022000 	.word	0x40022000

080042e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b086      	sub	sp, #24
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80042f0:	2300      	movs	r3, #0
 80042f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80042f4:	2300      	movs	r3, #0
 80042f6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004300:	2b00      	cmp	r3, #0
 8004302:	d041      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004308:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800430c:	d02a      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800430e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004312:	d824      	bhi.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004314:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004318:	d008      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800431a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800431e:	d81e      	bhi.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00a      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004324:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004328:	d010      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800432a:	e018      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800432c:	4b86      	ldr	r3, [pc, #536]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	4a85      	ldr	r2, [pc, #532]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004332:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004336:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004338:	e015      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	3304      	adds	r3, #4
 800433e:	2100      	movs	r1, #0
 8004340:	4618      	mov	r0, r3
 8004342:	f000 facd 	bl	80048e0 <RCCEx_PLLSAI1_Config>
 8004346:	4603      	mov	r3, r0
 8004348:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800434a:	e00c      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	3320      	adds	r3, #32
 8004350:	2100      	movs	r1, #0
 8004352:	4618      	mov	r0, r3
 8004354:	f000 fbb6 	bl	8004ac4 <RCCEx_PLLSAI2_Config>
 8004358:	4603      	mov	r3, r0
 800435a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800435c:	e003      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	74fb      	strb	r3, [r7, #19]
      break;
 8004362:	e000      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004364:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004366:	7cfb      	ldrb	r3, [r7, #19]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d10b      	bne.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800436c:	4b76      	ldr	r3, [pc, #472]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800436e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004372:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800437a:	4973      	ldr	r1, [pc, #460]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800437c:	4313      	orrs	r3, r2
 800437e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004382:	e001      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004384:	7cfb      	ldrb	r3, [r7, #19]
 8004386:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d041      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004398:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800439c:	d02a      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800439e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80043a2:	d824      	bhi.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x106>
 80043a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80043a8:	d008      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80043aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80043ae:	d81e      	bhi.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x106>
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00a      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80043b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80043b8:	d010      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80043ba:	e018      	b.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80043bc:	4b62      	ldr	r3, [pc, #392]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	4a61      	ldr	r2, [pc, #388]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043c6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80043c8:	e015      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	3304      	adds	r3, #4
 80043ce:	2100      	movs	r1, #0
 80043d0:	4618      	mov	r0, r3
 80043d2:	f000 fa85 	bl	80048e0 <RCCEx_PLLSAI1_Config>
 80043d6:	4603      	mov	r3, r0
 80043d8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80043da:	e00c      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	3320      	adds	r3, #32
 80043e0:	2100      	movs	r1, #0
 80043e2:	4618      	mov	r0, r3
 80043e4:	f000 fb6e 	bl	8004ac4 <RCCEx_PLLSAI2_Config>
 80043e8:	4603      	mov	r3, r0
 80043ea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80043ec:	e003      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	74fb      	strb	r3, [r7, #19]
      break;
 80043f2:	e000      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80043f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043f6:	7cfb      	ldrb	r3, [r7, #19]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d10b      	bne.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80043fc:	4b52      	ldr	r3, [pc, #328]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004402:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800440a:	494f      	ldr	r1, [pc, #316]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800440c:	4313      	orrs	r3, r2
 800440e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004412:	e001      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004414:	7cfb      	ldrb	r3, [r7, #19]
 8004416:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004420:	2b00      	cmp	r3, #0
 8004422:	f000 80a0 	beq.w	8004566 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004426:	2300      	movs	r3, #0
 8004428:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800442a:	4b47      	ldr	r3, [pc, #284]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800442c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800442e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004436:	2301      	movs	r3, #1
 8004438:	e000      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800443a:	2300      	movs	r3, #0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d00d      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004440:	4b41      	ldr	r3, [pc, #260]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004442:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004444:	4a40      	ldr	r2, [pc, #256]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004446:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800444a:	6593      	str	r3, [r2, #88]	@ 0x58
 800444c:	4b3e      	ldr	r3, [pc, #248]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800444e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004450:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004454:	60bb      	str	r3, [r7, #8]
 8004456:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004458:	2301      	movs	r3, #1
 800445a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800445c:	4b3b      	ldr	r3, [pc, #236]	@ (800454c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a3a      	ldr	r2, [pc, #232]	@ (800454c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004462:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004466:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004468:	f7fe fa76 	bl	8002958 <HAL_GetTick>
 800446c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800446e:	e009      	b.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004470:	f7fe fa72 	bl	8002958 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	2b02      	cmp	r3, #2
 800447c:	d902      	bls.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	74fb      	strb	r3, [r7, #19]
        break;
 8004482:	e005      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004484:	4b31      	ldr	r3, [pc, #196]	@ (800454c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800448c:	2b00      	cmp	r3, #0
 800448e:	d0ef      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004490:	7cfb      	ldrb	r3, [r7, #19]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d15c      	bne.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004496:	4b2c      	ldr	r3, [pc, #176]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004498:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800449c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044a0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d01f      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d019      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80044b4:	4b24      	ldr	r3, [pc, #144]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80044c0:	4b21      	ldr	r3, [pc, #132]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044c6:	4a20      	ldr	r2, [pc, #128]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80044d0:	4b1d      	ldr	r3, [pc, #116]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044d6:	4a1c      	ldr	r2, [pc, #112]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80044e0:	4a19      	ldr	r2, [pc, #100]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d016      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f2:	f7fe fa31 	bl	8002958 <HAL_GetTick>
 80044f6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044f8:	e00b      	b.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044fa:	f7fe fa2d 	bl	8002958 <HAL_GetTick>
 80044fe:	4602      	mov	r2, r0
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004508:	4293      	cmp	r3, r2
 800450a:	d902      	bls.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	74fb      	strb	r3, [r7, #19]
            break;
 8004510:	e006      	b.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004512:	4b0d      	ldr	r3, [pc, #52]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004514:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004518:	f003 0302 	and.w	r3, r3, #2
 800451c:	2b00      	cmp	r3, #0
 800451e:	d0ec      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004520:	7cfb      	ldrb	r3, [r7, #19]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d10c      	bne.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004526:	4b08      	ldr	r3, [pc, #32]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004528:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800452c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004536:	4904      	ldr	r1, [pc, #16]	@ (8004548 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004538:	4313      	orrs	r3, r2
 800453a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800453e:	e009      	b.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004540:	7cfb      	ldrb	r3, [r7, #19]
 8004542:	74bb      	strb	r3, [r7, #18]
 8004544:	e006      	b.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004546:	bf00      	nop
 8004548:	40021000 	.word	0x40021000
 800454c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004550:	7cfb      	ldrb	r3, [r7, #19]
 8004552:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004554:	7c7b      	ldrb	r3, [r7, #17]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d105      	bne.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800455a:	4ba6      	ldr	r3, [pc, #664]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800455c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800455e:	4aa5      	ldr	r2, [pc, #660]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004560:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004564:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00a      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004572:	4ba0      	ldr	r3, [pc, #640]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004574:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004578:	f023 0203 	bic.w	r2, r3, #3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004580:	499c      	ldr	r1, [pc, #624]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004582:	4313      	orrs	r3, r2
 8004584:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0302 	and.w	r3, r3, #2
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00a      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004594:	4b97      	ldr	r3, [pc, #604]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004596:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800459a:	f023 020c 	bic.w	r2, r3, #12
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045a2:	4994      	ldr	r1, [pc, #592]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0304 	and.w	r3, r3, #4
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00a      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80045b6:	4b8f      	ldr	r3, [pc, #572]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80045b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045bc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c4:	498b      	ldr	r1, [pc, #556]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0308 	and.w	r3, r3, #8
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00a      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80045d8:	4b86      	ldr	r3, [pc, #536]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80045da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045de:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045e6:	4983      	ldr	r1, [pc, #524]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0310 	and.w	r3, r3, #16
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00a      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80045fa:	4b7e      	ldr	r3, [pc, #504]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80045fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004600:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004608:	497a      	ldr	r1, [pc, #488]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800460a:	4313      	orrs	r3, r2
 800460c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0320 	and.w	r3, r3, #32
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00a      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800461c:	4b75      	ldr	r3, [pc, #468]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800461e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004622:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800462a:	4972      	ldr	r1, [pc, #456]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800462c:	4313      	orrs	r3, r2
 800462e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00a      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800463e:	4b6d      	ldr	r3, [pc, #436]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004640:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004644:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800464c:	4969      	ldr	r1, [pc, #420]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800464e:	4313      	orrs	r3, r2
 8004650:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00a      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004660:	4b64      	ldr	r3, [pc, #400]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004662:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004666:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800466e:	4961      	ldr	r1, [pc, #388]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004670:	4313      	orrs	r3, r2
 8004672:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00a      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004682:	4b5c      	ldr	r3, [pc, #368]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004684:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004688:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004690:	4958      	ldr	r1, [pc, #352]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004692:	4313      	orrs	r3, r2
 8004694:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00a      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046a4:	4b53      	ldr	r3, [pc, #332]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80046a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046aa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046b2:	4950      	ldr	r1, [pc, #320]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00a      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80046c6:	4b4b      	ldr	r3, [pc, #300]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80046c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046cc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046d4:	4947      	ldr	r1, [pc, #284]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00a      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80046e8:	4b42      	ldr	r3, [pc, #264]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80046ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80046ee:	f023 0203 	bic.w	r2, r3, #3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046f6:	493f      	ldr	r1, [pc, #252]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d028      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800470a:	4b3a      	ldr	r3, [pc, #232]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800470c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004710:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004718:	4936      	ldr	r1, [pc, #216]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800471a:	4313      	orrs	r3, r2
 800471c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004724:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004728:	d106      	bne.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800472a:	4b32      	ldr	r3, [pc, #200]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	4a31      	ldr	r2, [pc, #196]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004730:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004734:	60d3      	str	r3, [r2, #12]
 8004736:	e011      	b.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800473c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004740:	d10c      	bne.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	3304      	adds	r3, #4
 8004746:	2101      	movs	r1, #1
 8004748:	4618      	mov	r0, r3
 800474a:	f000 f8c9 	bl	80048e0 <RCCEx_PLLSAI1_Config>
 800474e:	4603      	mov	r3, r0
 8004750:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004752:	7cfb      	ldrb	r3, [r7, #19]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d001      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8004758:	7cfb      	ldrb	r3, [r7, #19]
 800475a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d028      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004768:	4b22      	ldr	r3, [pc, #136]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800476a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800476e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004776:	491f      	ldr	r1, [pc, #124]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004778:	4313      	orrs	r3, r2
 800477a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004782:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004786:	d106      	bne.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004788:	4b1a      	ldr	r3, [pc, #104]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	4a19      	ldr	r2, [pc, #100]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800478e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004792:	60d3      	str	r3, [r2, #12]
 8004794:	e011      	b.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800479a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800479e:	d10c      	bne.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	3304      	adds	r3, #4
 80047a4:	2101      	movs	r1, #1
 80047a6:	4618      	mov	r0, r3
 80047a8:	f000 f89a 	bl	80048e0 <RCCEx_PLLSAI1_Config>
 80047ac:	4603      	mov	r3, r0
 80047ae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047b0:	7cfb      	ldrb	r3, [r7, #19]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d001      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80047b6:	7cfb      	ldrb	r3, [r7, #19]
 80047b8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d02a      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80047c6:	4b0b      	ldr	r3, [pc, #44]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80047c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047cc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047d4:	4907      	ldr	r1, [pc, #28]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80047e4:	d108      	bne.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047e6:	4b03      	ldr	r3, [pc, #12]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	4a02      	ldr	r2, [pc, #8]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80047ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80047f0:	60d3      	str	r3, [r2, #12]
 80047f2:	e013      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x534>
 80047f4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047fc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004800:	d10c      	bne.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	3304      	adds	r3, #4
 8004806:	2101      	movs	r1, #1
 8004808:	4618      	mov	r0, r3
 800480a:	f000 f869 	bl	80048e0 <RCCEx_PLLSAI1_Config>
 800480e:	4603      	mov	r3, r0
 8004810:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004812:	7cfb      	ldrb	r3, [r7, #19]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d001      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8004818:	7cfb      	ldrb	r3, [r7, #19]
 800481a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d02f      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004828:	4b2c      	ldr	r3, [pc, #176]	@ (80048dc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800482a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800482e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004836:	4929      	ldr	r1, [pc, #164]	@ (80048dc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004838:	4313      	orrs	r3, r2
 800483a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004842:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004846:	d10d      	bne.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	3304      	adds	r3, #4
 800484c:	2102      	movs	r1, #2
 800484e:	4618      	mov	r0, r3
 8004850:	f000 f846 	bl	80048e0 <RCCEx_PLLSAI1_Config>
 8004854:	4603      	mov	r3, r0
 8004856:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004858:	7cfb      	ldrb	r3, [r7, #19]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d014      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800485e:	7cfb      	ldrb	r3, [r7, #19]
 8004860:	74bb      	strb	r3, [r7, #18]
 8004862:	e011      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004868:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800486c:	d10c      	bne.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	3320      	adds	r3, #32
 8004872:	2102      	movs	r1, #2
 8004874:	4618      	mov	r0, r3
 8004876:	f000 f925 	bl	8004ac4 <RCCEx_PLLSAI2_Config>
 800487a:	4603      	mov	r3, r0
 800487c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800487e:	7cfb      	ldrb	r3, [r7, #19]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d001      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8004884:	7cfb      	ldrb	r3, [r7, #19]
 8004886:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d00b      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004894:	4b11      	ldr	r3, [pc, #68]	@ (80048dc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004896:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800489a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048a4:	490d      	ldr	r1, [pc, #52]	@ (80048dc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d00b      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80048b8:	4b08      	ldr	r3, [pc, #32]	@ (80048dc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80048ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048be:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048c8:	4904      	ldr	r1, [pc, #16]	@ (80048dc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80048d0:	7cbb      	ldrb	r3, [r7, #18]
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3718      	adds	r7, #24
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	40021000 	.word	0x40021000

080048e0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048ea:	2300      	movs	r3, #0
 80048ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80048ee:	4b74      	ldr	r3, [pc, #464]	@ (8004ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	f003 0303 	and.w	r3, r3, #3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d018      	beq.n	800492c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80048fa:	4b71      	ldr	r3, [pc, #452]	@ (8004ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	f003 0203 	and.w	r2, r3, #3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	429a      	cmp	r2, r3
 8004908:	d10d      	bne.n	8004926 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
       ||
 800490e:	2b00      	cmp	r3, #0
 8004910:	d009      	beq.n	8004926 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004912:	4b6b      	ldr	r3, [pc, #428]	@ (8004ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	091b      	lsrs	r3, r3, #4
 8004918:	f003 0307 	and.w	r3, r3, #7
 800491c:	1c5a      	adds	r2, r3, #1
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
       ||
 8004922:	429a      	cmp	r2, r3
 8004924:	d047      	beq.n	80049b6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	73fb      	strb	r3, [r7, #15]
 800492a:	e044      	b.n	80049b6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2b03      	cmp	r3, #3
 8004932:	d018      	beq.n	8004966 <RCCEx_PLLSAI1_Config+0x86>
 8004934:	2b03      	cmp	r3, #3
 8004936:	d825      	bhi.n	8004984 <RCCEx_PLLSAI1_Config+0xa4>
 8004938:	2b01      	cmp	r3, #1
 800493a:	d002      	beq.n	8004942 <RCCEx_PLLSAI1_Config+0x62>
 800493c:	2b02      	cmp	r3, #2
 800493e:	d009      	beq.n	8004954 <RCCEx_PLLSAI1_Config+0x74>
 8004940:	e020      	b.n	8004984 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004942:	4b5f      	ldr	r3, [pc, #380]	@ (8004ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0302 	and.w	r3, r3, #2
 800494a:	2b00      	cmp	r3, #0
 800494c:	d11d      	bne.n	800498a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004952:	e01a      	b.n	800498a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004954:	4b5a      	ldr	r3, [pc, #360]	@ (8004ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800495c:	2b00      	cmp	r3, #0
 800495e:	d116      	bne.n	800498e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004964:	e013      	b.n	800498e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004966:	4b56      	ldr	r3, [pc, #344]	@ (8004ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d10f      	bne.n	8004992 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004972:	4b53      	ldr	r3, [pc, #332]	@ (8004ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d109      	bne.n	8004992 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004982:	e006      	b.n	8004992 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	73fb      	strb	r3, [r7, #15]
      break;
 8004988:	e004      	b.n	8004994 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800498a:	bf00      	nop
 800498c:	e002      	b.n	8004994 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800498e:	bf00      	nop
 8004990:	e000      	b.n	8004994 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004992:	bf00      	nop
    }

    if(status == HAL_OK)
 8004994:	7bfb      	ldrb	r3, [r7, #15]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d10d      	bne.n	80049b6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800499a:	4b49      	ldr	r3, [pc, #292]	@ (8004ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6819      	ldr	r1, [r3, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	3b01      	subs	r3, #1
 80049ac:	011b      	lsls	r3, r3, #4
 80049ae:	430b      	orrs	r3, r1
 80049b0:	4943      	ldr	r1, [pc, #268]	@ (8004ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80049b6:	7bfb      	ldrb	r3, [r7, #15]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d17c      	bne.n	8004ab6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80049bc:	4b40      	ldr	r3, [pc, #256]	@ (8004ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a3f      	ldr	r2, [pc, #252]	@ (8004ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80049c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049c8:	f7fd ffc6 	bl	8002958 <HAL_GetTick>
 80049cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80049ce:	e009      	b.n	80049e4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049d0:	f7fd ffc2 	bl	8002958 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d902      	bls.n	80049e4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	73fb      	strb	r3, [r7, #15]
        break;
 80049e2:	e005      	b.n	80049f0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80049e4:	4b36      	ldr	r3, [pc, #216]	@ (8004ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d1ef      	bne.n	80049d0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80049f0:	7bfb      	ldrb	r3, [r7, #15]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d15f      	bne.n	8004ab6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d110      	bne.n	8004a1e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049fc:	4b30      	ldr	r3, [pc, #192]	@ (8004ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049fe:	691b      	ldr	r3, [r3, #16]
 8004a00:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004a04:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	6892      	ldr	r2, [r2, #8]
 8004a0c:	0211      	lsls	r1, r2, #8
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	68d2      	ldr	r2, [r2, #12]
 8004a12:	06d2      	lsls	r2, r2, #27
 8004a14:	430a      	orrs	r2, r1
 8004a16:	492a      	ldr	r1, [pc, #168]	@ (8004ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	610b      	str	r3, [r1, #16]
 8004a1c:	e027      	b.n	8004a6e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d112      	bne.n	8004a4a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a24:	4b26      	ldr	r3, [pc, #152]	@ (8004ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004a2c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	6892      	ldr	r2, [r2, #8]
 8004a34:	0211      	lsls	r1, r2, #8
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	6912      	ldr	r2, [r2, #16]
 8004a3a:	0852      	lsrs	r2, r2, #1
 8004a3c:	3a01      	subs	r2, #1
 8004a3e:	0552      	lsls	r2, r2, #21
 8004a40:	430a      	orrs	r2, r1
 8004a42:	491f      	ldr	r1, [pc, #124]	@ (8004ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	610b      	str	r3, [r1, #16]
 8004a48:	e011      	b.n	8004a6e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a4a:	4b1d      	ldr	r3, [pc, #116]	@ (8004ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004a52:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	6892      	ldr	r2, [r2, #8]
 8004a5a:	0211      	lsls	r1, r2, #8
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	6952      	ldr	r2, [r2, #20]
 8004a60:	0852      	lsrs	r2, r2, #1
 8004a62:	3a01      	subs	r2, #1
 8004a64:	0652      	lsls	r2, r2, #25
 8004a66:	430a      	orrs	r2, r1
 8004a68:	4915      	ldr	r1, [pc, #84]	@ (8004ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004a6e:	4b14      	ldr	r3, [pc, #80]	@ (8004ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a13      	ldr	r2, [pc, #76]	@ (8004ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a74:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004a78:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a7a:	f7fd ff6d 	bl	8002958 <HAL_GetTick>
 8004a7e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a80:	e009      	b.n	8004a96 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a82:	f7fd ff69 	bl	8002958 <HAL_GetTick>
 8004a86:	4602      	mov	r2, r0
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	d902      	bls.n	8004a96 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004a90:	2303      	movs	r3, #3
 8004a92:	73fb      	strb	r3, [r7, #15]
          break;
 8004a94:	e005      	b.n	8004aa2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a96:	4b0a      	ldr	r3, [pc, #40]	@ (8004ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d0ef      	beq.n	8004a82 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004aa2:	7bfb      	ldrb	r3, [r7, #15]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d106      	bne.n	8004ab6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004aa8:	4b05      	ldr	r3, [pc, #20]	@ (8004ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004aaa:	691a      	ldr	r2, [r3, #16]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	699b      	ldr	r3, [r3, #24]
 8004ab0:	4903      	ldr	r1, [pc, #12]	@ (8004ac0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3710      	adds	r7, #16
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	40021000 	.word	0x40021000

08004ac4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004ad2:	4b69      	ldr	r3, [pc, #420]	@ (8004c78 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	f003 0303 	and.w	r3, r3, #3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d018      	beq.n	8004b10 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004ade:	4b66      	ldr	r3, [pc, #408]	@ (8004c78 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	f003 0203 	and.w	r2, r3, #3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d10d      	bne.n	8004b0a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
       ||
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d009      	beq.n	8004b0a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004af6:	4b60      	ldr	r3, [pc, #384]	@ (8004c78 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	091b      	lsrs	r3, r3, #4
 8004afc:	f003 0307 	and.w	r3, r3, #7
 8004b00:	1c5a      	adds	r2, r3, #1
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
       ||
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d047      	beq.n	8004b9a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	73fb      	strb	r3, [r7, #15]
 8004b0e:	e044      	b.n	8004b9a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2b03      	cmp	r3, #3
 8004b16:	d018      	beq.n	8004b4a <RCCEx_PLLSAI2_Config+0x86>
 8004b18:	2b03      	cmp	r3, #3
 8004b1a:	d825      	bhi.n	8004b68 <RCCEx_PLLSAI2_Config+0xa4>
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d002      	beq.n	8004b26 <RCCEx_PLLSAI2_Config+0x62>
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d009      	beq.n	8004b38 <RCCEx_PLLSAI2_Config+0x74>
 8004b24:	e020      	b.n	8004b68 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b26:	4b54      	ldr	r3, [pc, #336]	@ (8004c78 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d11d      	bne.n	8004b6e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b36:	e01a      	b.n	8004b6e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b38:	4b4f      	ldr	r3, [pc, #316]	@ (8004c78 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d116      	bne.n	8004b72 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b48:	e013      	b.n	8004b72 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b4a:	4b4b      	ldr	r3, [pc, #300]	@ (8004c78 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d10f      	bne.n	8004b76 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b56:	4b48      	ldr	r3, [pc, #288]	@ (8004c78 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d109      	bne.n	8004b76 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b66:	e006      	b.n	8004b76 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	73fb      	strb	r3, [r7, #15]
      break;
 8004b6c:	e004      	b.n	8004b78 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004b6e:	bf00      	nop
 8004b70:	e002      	b.n	8004b78 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004b72:	bf00      	nop
 8004b74:	e000      	b.n	8004b78 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004b76:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b78:	7bfb      	ldrb	r3, [r7, #15]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d10d      	bne.n	8004b9a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004b7e:	4b3e      	ldr	r3, [pc, #248]	@ (8004c78 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6819      	ldr	r1, [r3, #0]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	3b01      	subs	r3, #1
 8004b90:	011b      	lsls	r3, r3, #4
 8004b92:	430b      	orrs	r3, r1
 8004b94:	4938      	ldr	r1, [pc, #224]	@ (8004c78 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004b9a:	7bfb      	ldrb	r3, [r7, #15]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d166      	bne.n	8004c6e <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004ba0:	4b35      	ldr	r3, [pc, #212]	@ (8004c78 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a34      	ldr	r2, [pc, #208]	@ (8004c78 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004ba6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004baa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bac:	f7fd fed4 	bl	8002958 <HAL_GetTick>
 8004bb0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004bb2:	e009      	b.n	8004bc8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004bb4:	f7fd fed0 	bl	8002958 <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d902      	bls.n	8004bc8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	73fb      	strb	r3, [r7, #15]
        break;
 8004bc6:	e005      	b.n	8004bd4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004bc8:	4b2b      	ldr	r3, [pc, #172]	@ (8004c78 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d1ef      	bne.n	8004bb4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004bd4:	7bfb      	ldrb	r3, [r7, #15]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d149      	bne.n	8004c6e <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d110      	bne.n	8004c02 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004be0:	4b25      	ldr	r3, [pc, #148]	@ (8004c78 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004be2:	695b      	ldr	r3, [r3, #20]
 8004be4:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004be8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	6892      	ldr	r2, [r2, #8]
 8004bf0:	0211      	lsls	r1, r2, #8
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	68d2      	ldr	r2, [r2, #12]
 8004bf6:	06d2      	lsls	r2, r2, #27
 8004bf8:	430a      	orrs	r2, r1
 8004bfa:	491f      	ldr	r1, [pc, #124]	@ (8004c78 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	614b      	str	r3, [r1, #20]
 8004c00:	e011      	b.n	8004c26 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c02:	4b1d      	ldr	r3, [pc, #116]	@ (8004c78 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004c04:	695b      	ldr	r3, [r3, #20]
 8004c06:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004c0a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	6892      	ldr	r2, [r2, #8]
 8004c12:	0211      	lsls	r1, r2, #8
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	6912      	ldr	r2, [r2, #16]
 8004c18:	0852      	lsrs	r2, r2, #1
 8004c1a:	3a01      	subs	r2, #1
 8004c1c:	0652      	lsls	r2, r2, #25
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	4915      	ldr	r1, [pc, #84]	@ (8004c78 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004c26:	4b14      	ldr	r3, [pc, #80]	@ (8004c78 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a13      	ldr	r2, [pc, #76]	@ (8004c78 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004c2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c30:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c32:	f7fd fe91 	bl	8002958 <HAL_GetTick>
 8004c36:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004c38:	e009      	b.n	8004c4e <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004c3a:	f7fd fe8d 	bl	8002958 <HAL_GetTick>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d902      	bls.n	8004c4e <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	73fb      	strb	r3, [r7, #15]
          break;
 8004c4c:	e005      	b.n	8004c5a <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004c4e:	4b0a      	ldr	r3, [pc, #40]	@ (8004c78 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d0ef      	beq.n	8004c3a <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8004c5a:	7bfb      	ldrb	r3, [r7, #15]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d106      	bne.n	8004c6e <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004c60:	4b05      	ldr	r3, [pc, #20]	@ (8004c78 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004c62:	695a      	ldr	r2, [r3, #20]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	695b      	ldr	r3, [r3, #20]
 8004c68:	4903      	ldr	r1, [pc, #12]	@ (8004c78 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3710      	adds	r7, #16
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	40021000 	.word	0x40021000

08004c7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e095      	b.n	8004dba <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d108      	bne.n	8004ca8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c9e:	d009      	beq.n	8004cb4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	61da      	str	r2, [r3, #28]
 8004ca6:	e005      	b.n	8004cb4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d106      	bne.n	8004cd4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f7fc fe58 	bl	8001984 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2202      	movs	r2, #2
 8004cd8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004cea:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004cf4:	d902      	bls.n	8004cfc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	60fb      	str	r3, [r7, #12]
 8004cfa:	e002      	b.n	8004d02 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004cfc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004d00:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004d0a:	d007      	beq.n	8004d1c <HAL_SPI_Init+0xa0>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004d14:	d002      	beq.n	8004d1c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004d2c:	431a      	orrs	r2, r3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	f003 0302 	and.w	r3, r3, #2
 8004d36:	431a      	orrs	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	695b      	ldr	r3, [r3, #20]
 8004d3c:	f003 0301 	and.w	r3, r3, #1
 8004d40:	431a      	orrs	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d4a:	431a      	orrs	r2, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	69db      	ldr	r3, [r3, #28]
 8004d50:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d54:	431a      	orrs	r2, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d5e:	ea42 0103 	orr.w	r1, r2, r3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d66:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	430a      	orrs	r2, r1
 8004d70:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	699b      	ldr	r3, [r3, #24]
 8004d76:	0c1b      	lsrs	r3, r3, #16
 8004d78:	f003 0204 	and.w	r2, r3, #4
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d80:	f003 0310 	and.w	r3, r3, #16
 8004d84:	431a      	orrs	r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d8a:	f003 0308 	and.w	r3, r3, #8
 8004d8e:	431a      	orrs	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004d98:	ea42 0103 	orr.w	r1, r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	430a      	orrs	r2, r1
 8004da8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3710      	adds	r7, #16
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	b082      	sub	sp, #8
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d101      	bne.n	8004dd4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e040      	b.n	8004e56 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d106      	bne.n	8004dea <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f7fd faf3 	bl	80023d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2224      	movs	r2, #36	@ 0x24
 8004dee:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f022 0201 	bic.w	r2, r2, #1
 8004dfe:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d002      	beq.n	8004e0e <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 feb5 	bl	8005b78 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 fbfa 	bl	8005608 <UART_SetConfig>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d101      	bne.n	8004e1e <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e01b      	b.n	8004e56 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	685a      	ldr	r2, [r3, #4]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004e2c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	689a      	ldr	r2, [r3, #8]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004e3c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f042 0201 	orr.w	r2, r2, #1
 8004e4c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 ff34 	bl	8005cbc <UART_CheckIdleState>
 8004e54:	4603      	mov	r3, r0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3708      	adds	r7, #8
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}

08004e5e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e5e:	b580      	push	{r7, lr}
 8004e60:	b08a      	sub	sp, #40	@ 0x28
 8004e62:	af02      	add	r7, sp, #8
 8004e64:	60f8      	str	r0, [r7, #12]
 8004e66:	60b9      	str	r1, [r7, #8]
 8004e68:	603b      	str	r3, [r7, #0]
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e72:	2b20      	cmp	r3, #32
 8004e74:	d177      	bne.n	8004f66 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d002      	beq.n	8004e82 <HAL_UART_Transmit+0x24>
 8004e7c:	88fb      	ldrh	r3, [r7, #6]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d101      	bne.n	8004e86 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e070      	b.n	8004f68 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2221      	movs	r2, #33	@ 0x21
 8004e92:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e94:	f7fd fd60 	bl	8002958 <HAL_GetTick>
 8004e98:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	88fa      	ldrh	r2, [r7, #6]
 8004e9e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	88fa      	ldrh	r2, [r7, #6]
 8004ea6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004eb2:	d108      	bne.n	8004ec6 <HAL_UART_Transmit+0x68>
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d104      	bne.n	8004ec6 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	61bb      	str	r3, [r7, #24]
 8004ec4:	e003      	b.n	8004ece <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004ece:	e02f      	b.n	8004f30 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	9300      	str	r3, [sp, #0]
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	2180      	movs	r1, #128	@ 0x80
 8004eda:	68f8      	ldr	r0, [r7, #12]
 8004edc:	f000 ff96 	bl	8005e0c <UART_WaitOnFlagUntilTimeout>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d004      	beq.n	8004ef0 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2220      	movs	r2, #32
 8004eea:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	e03b      	b.n	8004f68 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d10b      	bne.n	8004f0e <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	881a      	ldrh	r2, [r3, #0]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f02:	b292      	uxth	r2, r2
 8004f04:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	3302      	adds	r3, #2
 8004f0a:	61bb      	str	r3, [r7, #24]
 8004f0c:	e007      	b.n	8004f1e <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	781a      	ldrb	r2, [r3, #0]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	3b01      	subs	r3, #1
 8004f28:	b29a      	uxth	r2, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d1c9      	bne.n	8004ed0 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	9300      	str	r3, [sp, #0]
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	2200      	movs	r2, #0
 8004f44:	2140      	movs	r1, #64	@ 0x40
 8004f46:	68f8      	ldr	r0, [r7, #12]
 8004f48:	f000 ff60 	bl	8005e0c <UART_WaitOnFlagUntilTimeout>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d004      	beq.n	8004f5c <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2220      	movs	r2, #32
 8004f56:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	e005      	b.n	8004f68 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2220      	movs	r2, #32
 8004f60:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004f62:	2300      	movs	r3, #0
 8004f64:	e000      	b.n	8004f68 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004f66:	2302      	movs	r3, #2
  }
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3720      	adds	r7, #32
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b08a      	sub	sp, #40	@ 0x28
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f84:	2b20      	cmp	r3, #32
 8004f86:	d137      	bne.n	8004ff8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d002      	beq.n	8004f94 <HAL_UART_Receive_IT+0x24>
 8004f8e:	88fb      	ldrh	r3, [r7, #6]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d101      	bne.n	8004f98 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e030      	b.n	8004ffa <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a18      	ldr	r2, [pc, #96]	@ (8005004 <HAL_UART_Receive_IT+0x94>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d01f      	beq.n	8004fe8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d018      	beq.n	8004fe8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	e853 3f00 	ldrex	r3, [r3]
 8004fc2:	613b      	str	r3, [r7, #16]
   return(result);
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004fca:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd4:	623b      	str	r3, [r7, #32]
 8004fd6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd8:	69f9      	ldr	r1, [r7, #28]
 8004fda:	6a3a      	ldr	r2, [r7, #32]
 8004fdc:	e841 2300 	strex	r3, r2, [r1]
 8004fe0:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d1e6      	bne.n	8004fb6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004fe8:	88fb      	ldrh	r3, [r7, #6]
 8004fea:	461a      	mov	r2, r3
 8004fec:	68b9      	ldr	r1, [r7, #8]
 8004fee:	68f8      	ldr	r0, [r7, #12]
 8004ff0:	f000 ff74 	bl	8005edc <UART_Start_Receive_IT>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	e000      	b.n	8004ffa <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004ff8:	2302      	movs	r3, #2
  }
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3728      	adds	r7, #40	@ 0x28
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	40008000 	.word	0x40008000

08005008 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b0ba      	sub	sp, #232	@ 0xe8
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	69db      	ldr	r3, [r3, #28]
 8005016:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800502e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005032:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005036:	4013      	ands	r3, r2
 8005038:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800503c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005040:	2b00      	cmp	r3, #0
 8005042:	d115      	bne.n	8005070 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005044:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005048:	f003 0320 	and.w	r3, r3, #32
 800504c:	2b00      	cmp	r3, #0
 800504e:	d00f      	beq.n	8005070 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005050:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005054:	f003 0320 	and.w	r3, r3, #32
 8005058:	2b00      	cmp	r3, #0
 800505a:	d009      	beq.n	8005070 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005060:	2b00      	cmp	r3, #0
 8005062:	f000 82ae 	beq.w	80055c2 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	4798      	blx	r3
      }
      return;
 800506e:	e2a8      	b.n	80055c2 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005070:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005074:	2b00      	cmp	r3, #0
 8005076:	f000 8117 	beq.w	80052a8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800507a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800507e:	f003 0301 	and.w	r3, r3, #1
 8005082:	2b00      	cmp	r3, #0
 8005084:	d106      	bne.n	8005094 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005086:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800508a:	4b85      	ldr	r3, [pc, #532]	@ (80052a0 <HAL_UART_IRQHandler+0x298>)
 800508c:	4013      	ands	r3, r2
 800508e:	2b00      	cmp	r3, #0
 8005090:	f000 810a 	beq.w	80052a8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005094:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005098:	f003 0301 	and.w	r3, r3, #1
 800509c:	2b00      	cmp	r3, #0
 800509e:	d011      	beq.n	80050c4 <HAL_UART_IRQHandler+0xbc>
 80050a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d00b      	beq.n	80050c4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2201      	movs	r2, #1
 80050b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050ba:	f043 0201 	orr.w	r2, r3, #1
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050c8:	f003 0302 	and.w	r3, r3, #2
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d011      	beq.n	80050f4 <HAL_UART_IRQHandler+0xec>
 80050d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050d4:	f003 0301 	and.w	r3, r3, #1
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d00b      	beq.n	80050f4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2202      	movs	r2, #2
 80050e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050ea:	f043 0204 	orr.w	r2, r3, #4
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050f8:	f003 0304 	and.w	r3, r3, #4
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d011      	beq.n	8005124 <HAL_UART_IRQHandler+0x11c>
 8005100:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005104:	f003 0301 	and.w	r3, r3, #1
 8005108:	2b00      	cmp	r3, #0
 800510a:	d00b      	beq.n	8005124 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2204      	movs	r2, #4
 8005112:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800511a:	f043 0202 	orr.w	r2, r3, #2
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005128:	f003 0308 	and.w	r3, r3, #8
 800512c:	2b00      	cmp	r3, #0
 800512e:	d017      	beq.n	8005160 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005134:	f003 0320 	and.w	r3, r3, #32
 8005138:	2b00      	cmp	r3, #0
 800513a:	d105      	bne.n	8005148 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800513c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005140:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005144:	2b00      	cmp	r3, #0
 8005146:	d00b      	beq.n	8005160 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2208      	movs	r2, #8
 800514e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005156:	f043 0208 	orr.w	r2, r3, #8
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005160:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005164:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005168:	2b00      	cmp	r3, #0
 800516a:	d012      	beq.n	8005192 <HAL_UART_IRQHandler+0x18a>
 800516c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005170:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005174:	2b00      	cmp	r3, #0
 8005176:	d00c      	beq.n	8005192 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005180:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005188:	f043 0220 	orr.w	r2, r3, #32
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005198:	2b00      	cmp	r3, #0
 800519a:	f000 8214 	beq.w	80055c6 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800519e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051a2:	f003 0320 	and.w	r3, r3, #32
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00d      	beq.n	80051c6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80051aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051ae:	f003 0320 	and.w	r3, r3, #32
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d007      	beq.n	80051c6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d003      	beq.n	80051c6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051cc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051da:	2b40      	cmp	r3, #64	@ 0x40
 80051dc:	d005      	beq.n	80051ea <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80051de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051e2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d04f      	beq.n	800528a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 ff3c 	bl	8006068 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051fa:	2b40      	cmp	r3, #64	@ 0x40
 80051fc:	d141      	bne.n	8005282 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	3308      	adds	r3, #8
 8005204:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005208:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800520c:	e853 3f00 	ldrex	r3, [r3]
 8005210:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005214:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005218:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800521c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	3308      	adds	r3, #8
 8005226:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800522a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800522e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005232:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005236:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800523a:	e841 2300 	strex	r3, r2, [r1]
 800523e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005242:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d1d9      	bne.n	80051fe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800524e:	2b00      	cmp	r3, #0
 8005250:	d013      	beq.n	800527a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005256:	4a13      	ldr	r2, [pc, #76]	@ (80052a4 <HAL_UART_IRQHandler+0x29c>)
 8005258:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800525e:	4618      	mov	r0, r3
 8005260:	f7fd fe42 	bl	8002ee8 <HAL_DMA_Abort_IT>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d017      	beq.n	800529a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800526e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005274:	4610      	mov	r0, r2
 8005276:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005278:	e00f      	b.n	800529a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f7fd f9f4 	bl	8002668 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005280:	e00b      	b.n	800529a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f7fd f9f0 	bl	8002668 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005288:	e007      	b.n	800529a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f7fd f9ec 	bl	8002668 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005298:	e195      	b.n	80055c6 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800529a:	bf00      	nop
    return;
 800529c:	e193      	b.n	80055c6 <HAL_UART_IRQHandler+0x5be>
 800529e:	bf00      	nop
 80052a0:	04000120 	.word	0x04000120
 80052a4:	08006131 	.word	0x08006131

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	f040 814e 	bne.w	800554e <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80052b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052b6:	f003 0310 	and.w	r3, r3, #16
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	f000 8147 	beq.w	800554e <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80052c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052c4:	f003 0310 	and.w	r3, r3, #16
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	f000 8140 	beq.w	800554e <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2210      	movs	r2, #16
 80052d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052e0:	2b40      	cmp	r3, #64	@ 0x40
 80052e2:	f040 80b8 	bne.w	8005456 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80052f2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	f000 8167 	beq.w	80055ca <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005302:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005306:	429a      	cmp	r2, r3
 8005308:	f080 815f 	bcs.w	80055ca <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005312:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0320 	and.w	r3, r3, #32
 8005322:	2b00      	cmp	r3, #0
 8005324:	f040 8086 	bne.w	8005434 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005330:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005334:	e853 3f00 	ldrex	r3, [r3]
 8005338:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800533c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005340:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005344:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	461a      	mov	r2, r3
 800534e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005352:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005356:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800535a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800535e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005362:	e841 2300 	strex	r3, r2, [r1]
 8005366:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800536a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1da      	bne.n	8005328 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	3308      	adds	r3, #8
 8005378:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800537c:	e853 3f00 	ldrex	r3, [r3]
 8005380:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005382:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005384:	f023 0301 	bic.w	r3, r3, #1
 8005388:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	3308      	adds	r3, #8
 8005392:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005396:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800539a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800539c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800539e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80053a2:	e841 2300 	strex	r3, r2, [r1]
 80053a6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80053a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d1e1      	bne.n	8005372 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	3308      	adds	r3, #8
 80053b4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80053b8:	e853 3f00 	ldrex	r3, [r3]
 80053bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80053be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80053c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	3308      	adds	r3, #8
 80053ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80053d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80053d4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80053d8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80053da:	e841 2300 	strex	r3, r2, [r1]
 80053de:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80053e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d1e3      	bne.n	80053ae <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2220      	movs	r2, #32
 80053ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053fc:	e853 3f00 	ldrex	r3, [r3]
 8005400:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005402:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005404:	f023 0310 	bic.w	r3, r3, #16
 8005408:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	461a      	mov	r2, r3
 8005412:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005416:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005418:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800541a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800541c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800541e:	e841 2300 	strex	r3, r2, [r1]
 8005422:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005424:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005426:	2b00      	cmp	r3, #0
 8005428:	d1e4      	bne.n	80053f4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800542e:	4618      	mov	r0, r3
 8005430:	f7fd fd1c 	bl	8002e6c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2202      	movs	r2, #2
 8005438:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005446:	b29b      	uxth	r3, r3
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	b29b      	uxth	r3, r3
 800544c:	4619      	mov	r1, r3
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 f8ce 	bl	80055f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005454:	e0b9      	b.n	80055ca <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005462:	b29b      	uxth	r3, r3
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005470:	b29b      	uxth	r3, r3
 8005472:	2b00      	cmp	r3, #0
 8005474:	f000 80ab 	beq.w	80055ce <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8005478:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800547c:	2b00      	cmp	r3, #0
 800547e:	f000 80a6 	beq.w	80055ce <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800548a:	e853 3f00 	ldrex	r3, [r3]
 800548e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005490:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005492:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005496:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	461a      	mov	r2, r3
 80054a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80054a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80054a6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80054aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054ac:	e841 2300 	strex	r3, r2, [r1]
 80054b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80054b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d1e4      	bne.n	8005482 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	3308      	adds	r3, #8
 80054be:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c2:	e853 3f00 	ldrex	r3, [r3]
 80054c6:	623b      	str	r3, [r7, #32]
   return(result);
 80054c8:	6a3b      	ldr	r3, [r7, #32]
 80054ca:	f023 0301 	bic.w	r3, r3, #1
 80054ce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	3308      	adds	r3, #8
 80054d8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80054dc:	633a      	str	r2, [r7, #48]	@ 0x30
 80054de:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054e4:	e841 2300 	strex	r3, r2, [r1]
 80054e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80054ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d1e3      	bne.n	80054b8 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2220      	movs	r2, #32
 80054f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	e853 3f00 	ldrex	r3, [r3]
 8005510:	60fb      	str	r3, [r7, #12]
   return(result);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f023 0310 	bic.w	r3, r3, #16
 8005518:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	461a      	mov	r2, r3
 8005522:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005526:	61fb      	str	r3, [r7, #28]
 8005528:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800552a:	69b9      	ldr	r1, [r7, #24]
 800552c:	69fa      	ldr	r2, [r7, #28]
 800552e:	e841 2300 	strex	r3, r2, [r1]
 8005532:	617b      	str	r3, [r7, #20]
   return(result);
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d1e4      	bne.n	8005504 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2202      	movs	r2, #2
 800553e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005540:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005544:	4619      	mov	r1, r3
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 f852 	bl	80055f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800554c:	e03f      	b.n	80055ce <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800554e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005552:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00e      	beq.n	8005578 <HAL_UART_IRQHandler+0x570>
 800555a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800555e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d008      	beq.n	8005578 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800556e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 ffd9 	bl	8006528 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005576:	e02d      	b.n	80055d4 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800557c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005580:	2b00      	cmp	r3, #0
 8005582:	d00e      	beq.n	80055a2 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005588:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800558c:	2b00      	cmp	r3, #0
 800558e:	d008      	beq.n	80055a2 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005594:	2b00      	cmp	r3, #0
 8005596:	d01c      	beq.n	80055d2 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	4798      	blx	r3
    }
    return;
 80055a0:	e017      	b.n	80055d2 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80055a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d012      	beq.n	80055d4 <HAL_UART_IRQHandler+0x5cc>
 80055ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00c      	beq.n	80055d4 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 fdce 	bl	800615c <UART_EndTransmit_IT>
    return;
 80055c0:	e008      	b.n	80055d4 <HAL_UART_IRQHandler+0x5cc>
      return;
 80055c2:	bf00      	nop
 80055c4:	e006      	b.n	80055d4 <HAL_UART_IRQHandler+0x5cc>
    return;
 80055c6:	bf00      	nop
 80055c8:	e004      	b.n	80055d4 <HAL_UART_IRQHandler+0x5cc>
      return;
 80055ca:	bf00      	nop
 80055cc:	e002      	b.n	80055d4 <HAL_UART_IRQHandler+0x5cc>
      return;
 80055ce:	bf00      	nop
 80055d0:	e000      	b.n	80055d4 <HAL_UART_IRQHandler+0x5cc>
    return;
 80055d2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80055d4:	37e8      	adds	r7, #232	@ 0xe8
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	bf00      	nop

080055dc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80055e4:	bf00      	nop
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	460b      	mov	r3, r1
 80055fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80055fc:	bf00      	nop
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005608:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800560c:	b08a      	sub	sp, #40	@ 0x28
 800560e:	af00      	add	r7, sp, #0
 8005610:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005612:	2300      	movs	r3, #0
 8005614:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	689a      	ldr	r2, [r3, #8]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	431a      	orrs	r2, r3
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	695b      	ldr	r3, [r3, #20]
 8005626:	431a      	orrs	r2, r3
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	69db      	ldr	r3, [r3, #28]
 800562c:	4313      	orrs	r3, r2
 800562e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	4ba4      	ldr	r3, [pc, #656]	@ (80058c8 <UART_SetConfig+0x2c0>)
 8005638:	4013      	ands	r3, r2
 800563a:	68fa      	ldr	r2, [r7, #12]
 800563c:	6812      	ldr	r2, [r2, #0]
 800563e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005640:	430b      	orrs	r3, r1
 8005642:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	68da      	ldr	r2, [r3, #12]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	430a      	orrs	r2, r1
 8005658:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	699b      	ldr	r3, [r3, #24]
 800565e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a99      	ldr	r2, [pc, #612]	@ (80058cc <UART_SetConfig+0x2c4>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d004      	beq.n	8005674 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6a1b      	ldr	r3, [r3, #32]
 800566e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005670:	4313      	orrs	r3, r2
 8005672:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005684:	430a      	orrs	r2, r1
 8005686:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a90      	ldr	r2, [pc, #576]	@ (80058d0 <UART_SetConfig+0x2c8>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d126      	bne.n	80056e0 <UART_SetConfig+0xd8>
 8005692:	4b90      	ldr	r3, [pc, #576]	@ (80058d4 <UART_SetConfig+0x2cc>)
 8005694:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005698:	f003 0303 	and.w	r3, r3, #3
 800569c:	2b03      	cmp	r3, #3
 800569e:	d81b      	bhi.n	80056d8 <UART_SetConfig+0xd0>
 80056a0:	a201      	add	r2, pc, #4	@ (adr r2, 80056a8 <UART_SetConfig+0xa0>)
 80056a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a6:	bf00      	nop
 80056a8:	080056b9 	.word	0x080056b9
 80056ac:	080056c9 	.word	0x080056c9
 80056b0:	080056c1 	.word	0x080056c1
 80056b4:	080056d1 	.word	0x080056d1
 80056b8:	2301      	movs	r3, #1
 80056ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056be:	e116      	b.n	80058ee <UART_SetConfig+0x2e6>
 80056c0:	2302      	movs	r3, #2
 80056c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056c6:	e112      	b.n	80058ee <UART_SetConfig+0x2e6>
 80056c8:	2304      	movs	r3, #4
 80056ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056ce:	e10e      	b.n	80058ee <UART_SetConfig+0x2e6>
 80056d0:	2308      	movs	r3, #8
 80056d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056d6:	e10a      	b.n	80058ee <UART_SetConfig+0x2e6>
 80056d8:	2310      	movs	r3, #16
 80056da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056de:	e106      	b.n	80058ee <UART_SetConfig+0x2e6>
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a7c      	ldr	r2, [pc, #496]	@ (80058d8 <UART_SetConfig+0x2d0>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d138      	bne.n	800575c <UART_SetConfig+0x154>
 80056ea:	4b7a      	ldr	r3, [pc, #488]	@ (80058d4 <UART_SetConfig+0x2cc>)
 80056ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056f0:	f003 030c 	and.w	r3, r3, #12
 80056f4:	2b0c      	cmp	r3, #12
 80056f6:	d82d      	bhi.n	8005754 <UART_SetConfig+0x14c>
 80056f8:	a201      	add	r2, pc, #4	@ (adr r2, 8005700 <UART_SetConfig+0xf8>)
 80056fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056fe:	bf00      	nop
 8005700:	08005735 	.word	0x08005735
 8005704:	08005755 	.word	0x08005755
 8005708:	08005755 	.word	0x08005755
 800570c:	08005755 	.word	0x08005755
 8005710:	08005745 	.word	0x08005745
 8005714:	08005755 	.word	0x08005755
 8005718:	08005755 	.word	0x08005755
 800571c:	08005755 	.word	0x08005755
 8005720:	0800573d 	.word	0x0800573d
 8005724:	08005755 	.word	0x08005755
 8005728:	08005755 	.word	0x08005755
 800572c:	08005755 	.word	0x08005755
 8005730:	0800574d 	.word	0x0800574d
 8005734:	2300      	movs	r3, #0
 8005736:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800573a:	e0d8      	b.n	80058ee <UART_SetConfig+0x2e6>
 800573c:	2302      	movs	r3, #2
 800573e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005742:	e0d4      	b.n	80058ee <UART_SetConfig+0x2e6>
 8005744:	2304      	movs	r3, #4
 8005746:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800574a:	e0d0      	b.n	80058ee <UART_SetConfig+0x2e6>
 800574c:	2308      	movs	r3, #8
 800574e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005752:	e0cc      	b.n	80058ee <UART_SetConfig+0x2e6>
 8005754:	2310      	movs	r3, #16
 8005756:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800575a:	e0c8      	b.n	80058ee <UART_SetConfig+0x2e6>
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a5e      	ldr	r2, [pc, #376]	@ (80058dc <UART_SetConfig+0x2d4>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d125      	bne.n	80057b2 <UART_SetConfig+0x1aa>
 8005766:	4b5b      	ldr	r3, [pc, #364]	@ (80058d4 <UART_SetConfig+0x2cc>)
 8005768:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800576c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005770:	2b30      	cmp	r3, #48	@ 0x30
 8005772:	d016      	beq.n	80057a2 <UART_SetConfig+0x19a>
 8005774:	2b30      	cmp	r3, #48	@ 0x30
 8005776:	d818      	bhi.n	80057aa <UART_SetConfig+0x1a2>
 8005778:	2b20      	cmp	r3, #32
 800577a:	d00a      	beq.n	8005792 <UART_SetConfig+0x18a>
 800577c:	2b20      	cmp	r3, #32
 800577e:	d814      	bhi.n	80057aa <UART_SetConfig+0x1a2>
 8005780:	2b00      	cmp	r3, #0
 8005782:	d002      	beq.n	800578a <UART_SetConfig+0x182>
 8005784:	2b10      	cmp	r3, #16
 8005786:	d008      	beq.n	800579a <UART_SetConfig+0x192>
 8005788:	e00f      	b.n	80057aa <UART_SetConfig+0x1a2>
 800578a:	2300      	movs	r3, #0
 800578c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005790:	e0ad      	b.n	80058ee <UART_SetConfig+0x2e6>
 8005792:	2302      	movs	r3, #2
 8005794:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005798:	e0a9      	b.n	80058ee <UART_SetConfig+0x2e6>
 800579a:	2304      	movs	r3, #4
 800579c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057a0:	e0a5      	b.n	80058ee <UART_SetConfig+0x2e6>
 80057a2:	2308      	movs	r3, #8
 80057a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057a8:	e0a1      	b.n	80058ee <UART_SetConfig+0x2e6>
 80057aa:	2310      	movs	r3, #16
 80057ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057b0:	e09d      	b.n	80058ee <UART_SetConfig+0x2e6>
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a4a      	ldr	r2, [pc, #296]	@ (80058e0 <UART_SetConfig+0x2d8>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d125      	bne.n	8005808 <UART_SetConfig+0x200>
 80057bc:	4b45      	ldr	r3, [pc, #276]	@ (80058d4 <UART_SetConfig+0x2cc>)
 80057be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057c2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80057c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80057c8:	d016      	beq.n	80057f8 <UART_SetConfig+0x1f0>
 80057ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80057cc:	d818      	bhi.n	8005800 <UART_SetConfig+0x1f8>
 80057ce:	2b80      	cmp	r3, #128	@ 0x80
 80057d0:	d00a      	beq.n	80057e8 <UART_SetConfig+0x1e0>
 80057d2:	2b80      	cmp	r3, #128	@ 0x80
 80057d4:	d814      	bhi.n	8005800 <UART_SetConfig+0x1f8>
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d002      	beq.n	80057e0 <UART_SetConfig+0x1d8>
 80057da:	2b40      	cmp	r3, #64	@ 0x40
 80057dc:	d008      	beq.n	80057f0 <UART_SetConfig+0x1e8>
 80057de:	e00f      	b.n	8005800 <UART_SetConfig+0x1f8>
 80057e0:	2300      	movs	r3, #0
 80057e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057e6:	e082      	b.n	80058ee <UART_SetConfig+0x2e6>
 80057e8:	2302      	movs	r3, #2
 80057ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057ee:	e07e      	b.n	80058ee <UART_SetConfig+0x2e6>
 80057f0:	2304      	movs	r3, #4
 80057f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057f6:	e07a      	b.n	80058ee <UART_SetConfig+0x2e6>
 80057f8:	2308      	movs	r3, #8
 80057fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057fe:	e076      	b.n	80058ee <UART_SetConfig+0x2e6>
 8005800:	2310      	movs	r3, #16
 8005802:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005806:	e072      	b.n	80058ee <UART_SetConfig+0x2e6>
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a35      	ldr	r2, [pc, #212]	@ (80058e4 <UART_SetConfig+0x2dc>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d12a      	bne.n	8005868 <UART_SetConfig+0x260>
 8005812:	4b30      	ldr	r3, [pc, #192]	@ (80058d4 <UART_SetConfig+0x2cc>)
 8005814:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005818:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800581c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005820:	d01a      	beq.n	8005858 <UART_SetConfig+0x250>
 8005822:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005826:	d81b      	bhi.n	8005860 <UART_SetConfig+0x258>
 8005828:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800582c:	d00c      	beq.n	8005848 <UART_SetConfig+0x240>
 800582e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005832:	d815      	bhi.n	8005860 <UART_SetConfig+0x258>
 8005834:	2b00      	cmp	r3, #0
 8005836:	d003      	beq.n	8005840 <UART_SetConfig+0x238>
 8005838:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800583c:	d008      	beq.n	8005850 <UART_SetConfig+0x248>
 800583e:	e00f      	b.n	8005860 <UART_SetConfig+0x258>
 8005840:	2300      	movs	r3, #0
 8005842:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005846:	e052      	b.n	80058ee <UART_SetConfig+0x2e6>
 8005848:	2302      	movs	r3, #2
 800584a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800584e:	e04e      	b.n	80058ee <UART_SetConfig+0x2e6>
 8005850:	2304      	movs	r3, #4
 8005852:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005856:	e04a      	b.n	80058ee <UART_SetConfig+0x2e6>
 8005858:	2308      	movs	r3, #8
 800585a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800585e:	e046      	b.n	80058ee <UART_SetConfig+0x2e6>
 8005860:	2310      	movs	r3, #16
 8005862:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005866:	e042      	b.n	80058ee <UART_SetConfig+0x2e6>
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a17      	ldr	r2, [pc, #92]	@ (80058cc <UART_SetConfig+0x2c4>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d13a      	bne.n	80058e8 <UART_SetConfig+0x2e0>
 8005872:	4b18      	ldr	r3, [pc, #96]	@ (80058d4 <UART_SetConfig+0x2cc>)
 8005874:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005878:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800587c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005880:	d01a      	beq.n	80058b8 <UART_SetConfig+0x2b0>
 8005882:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005886:	d81b      	bhi.n	80058c0 <UART_SetConfig+0x2b8>
 8005888:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800588c:	d00c      	beq.n	80058a8 <UART_SetConfig+0x2a0>
 800588e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005892:	d815      	bhi.n	80058c0 <UART_SetConfig+0x2b8>
 8005894:	2b00      	cmp	r3, #0
 8005896:	d003      	beq.n	80058a0 <UART_SetConfig+0x298>
 8005898:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800589c:	d008      	beq.n	80058b0 <UART_SetConfig+0x2a8>
 800589e:	e00f      	b.n	80058c0 <UART_SetConfig+0x2b8>
 80058a0:	2300      	movs	r3, #0
 80058a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058a6:	e022      	b.n	80058ee <UART_SetConfig+0x2e6>
 80058a8:	2302      	movs	r3, #2
 80058aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058ae:	e01e      	b.n	80058ee <UART_SetConfig+0x2e6>
 80058b0:	2304      	movs	r3, #4
 80058b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058b6:	e01a      	b.n	80058ee <UART_SetConfig+0x2e6>
 80058b8:	2308      	movs	r3, #8
 80058ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058be:	e016      	b.n	80058ee <UART_SetConfig+0x2e6>
 80058c0:	2310      	movs	r3, #16
 80058c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058c6:	e012      	b.n	80058ee <UART_SetConfig+0x2e6>
 80058c8:	efff69f3 	.word	0xefff69f3
 80058cc:	40008000 	.word	0x40008000
 80058d0:	40013800 	.word	0x40013800
 80058d4:	40021000 	.word	0x40021000
 80058d8:	40004400 	.word	0x40004400
 80058dc:	40004800 	.word	0x40004800
 80058e0:	40004c00 	.word	0x40004c00
 80058e4:	40005000 	.word	0x40005000
 80058e8:	2310      	movs	r3, #16
 80058ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a9f      	ldr	r2, [pc, #636]	@ (8005b70 <UART_SetConfig+0x568>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d17a      	bne.n	80059ee <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80058f8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80058fc:	2b08      	cmp	r3, #8
 80058fe:	d824      	bhi.n	800594a <UART_SetConfig+0x342>
 8005900:	a201      	add	r2, pc, #4	@ (adr r2, 8005908 <UART_SetConfig+0x300>)
 8005902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005906:	bf00      	nop
 8005908:	0800592d 	.word	0x0800592d
 800590c:	0800594b 	.word	0x0800594b
 8005910:	08005935 	.word	0x08005935
 8005914:	0800594b 	.word	0x0800594b
 8005918:	0800593b 	.word	0x0800593b
 800591c:	0800594b 	.word	0x0800594b
 8005920:	0800594b 	.word	0x0800594b
 8005924:	0800594b 	.word	0x0800594b
 8005928:	08005943 	.word	0x08005943
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800592c:	f7fe fc50 	bl	80041d0 <HAL_RCC_GetPCLK1Freq>
 8005930:	61f8      	str	r0, [r7, #28]
        break;
 8005932:	e010      	b.n	8005956 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005934:	4b8f      	ldr	r3, [pc, #572]	@ (8005b74 <UART_SetConfig+0x56c>)
 8005936:	61fb      	str	r3, [r7, #28]
        break;
 8005938:	e00d      	b.n	8005956 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800593a:	f7fe fbb1 	bl	80040a0 <HAL_RCC_GetSysClockFreq>
 800593e:	61f8      	str	r0, [r7, #28]
        break;
 8005940:	e009      	b.n	8005956 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005942:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005946:	61fb      	str	r3, [r7, #28]
        break;
 8005948:	e005      	b.n	8005956 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800594a:	2300      	movs	r3, #0
 800594c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005954:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	2b00      	cmp	r3, #0
 800595a:	f000 80fb 	beq.w	8005b54 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	685a      	ldr	r2, [r3, #4]
 8005962:	4613      	mov	r3, r2
 8005964:	005b      	lsls	r3, r3, #1
 8005966:	4413      	add	r3, r2
 8005968:	69fa      	ldr	r2, [r7, #28]
 800596a:	429a      	cmp	r2, r3
 800596c:	d305      	bcc.n	800597a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005974:	69fa      	ldr	r2, [r7, #28]
 8005976:	429a      	cmp	r2, r3
 8005978:	d903      	bls.n	8005982 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005980:	e0e8      	b.n	8005b54 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	2200      	movs	r2, #0
 8005986:	461c      	mov	r4, r3
 8005988:	4615      	mov	r5, r2
 800598a:	f04f 0200 	mov.w	r2, #0
 800598e:	f04f 0300 	mov.w	r3, #0
 8005992:	022b      	lsls	r3, r5, #8
 8005994:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005998:	0222      	lsls	r2, r4, #8
 800599a:	68f9      	ldr	r1, [r7, #12]
 800599c:	6849      	ldr	r1, [r1, #4]
 800599e:	0849      	lsrs	r1, r1, #1
 80059a0:	2000      	movs	r0, #0
 80059a2:	4688      	mov	r8, r1
 80059a4:	4681      	mov	r9, r0
 80059a6:	eb12 0a08 	adds.w	sl, r2, r8
 80059aa:	eb43 0b09 	adc.w	fp, r3, r9
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	603b      	str	r3, [r7, #0]
 80059b6:	607a      	str	r2, [r7, #4]
 80059b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059bc:	4650      	mov	r0, sl
 80059be:	4659      	mov	r1, fp
 80059c0:	f7fb f902 	bl	8000bc8 <__aeabi_uldivmod>
 80059c4:	4602      	mov	r2, r0
 80059c6:	460b      	mov	r3, r1
 80059c8:	4613      	mov	r3, r2
 80059ca:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80059d2:	d308      	bcc.n	80059e6 <UART_SetConfig+0x3de>
 80059d4:	69bb      	ldr	r3, [r7, #24]
 80059d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059da:	d204      	bcs.n	80059e6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	69ba      	ldr	r2, [r7, #24]
 80059e2:	60da      	str	r2, [r3, #12]
 80059e4:	e0b6      	b.n	8005b54 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80059ec:	e0b2      	b.n	8005b54 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	69db      	ldr	r3, [r3, #28]
 80059f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059f6:	d15e      	bne.n	8005ab6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80059f8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80059fc:	2b08      	cmp	r3, #8
 80059fe:	d828      	bhi.n	8005a52 <UART_SetConfig+0x44a>
 8005a00:	a201      	add	r2, pc, #4	@ (adr r2, 8005a08 <UART_SetConfig+0x400>)
 8005a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a06:	bf00      	nop
 8005a08:	08005a2d 	.word	0x08005a2d
 8005a0c:	08005a35 	.word	0x08005a35
 8005a10:	08005a3d 	.word	0x08005a3d
 8005a14:	08005a53 	.word	0x08005a53
 8005a18:	08005a43 	.word	0x08005a43
 8005a1c:	08005a53 	.word	0x08005a53
 8005a20:	08005a53 	.word	0x08005a53
 8005a24:	08005a53 	.word	0x08005a53
 8005a28:	08005a4b 	.word	0x08005a4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a2c:	f7fe fbd0 	bl	80041d0 <HAL_RCC_GetPCLK1Freq>
 8005a30:	61f8      	str	r0, [r7, #28]
        break;
 8005a32:	e014      	b.n	8005a5e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a34:	f7fe fbe2 	bl	80041fc <HAL_RCC_GetPCLK2Freq>
 8005a38:	61f8      	str	r0, [r7, #28]
        break;
 8005a3a:	e010      	b.n	8005a5e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a3c:	4b4d      	ldr	r3, [pc, #308]	@ (8005b74 <UART_SetConfig+0x56c>)
 8005a3e:	61fb      	str	r3, [r7, #28]
        break;
 8005a40:	e00d      	b.n	8005a5e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a42:	f7fe fb2d 	bl	80040a0 <HAL_RCC_GetSysClockFreq>
 8005a46:	61f8      	str	r0, [r7, #28]
        break;
 8005a48:	e009      	b.n	8005a5e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a4e:	61fb      	str	r3, [r7, #28]
        break;
 8005a50:	e005      	b.n	8005a5e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005a52:	2300      	movs	r3, #0
 8005a54:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005a5c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d077      	beq.n	8005b54 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	005a      	lsls	r2, r3, #1
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	085b      	lsrs	r3, r3, #1
 8005a6e:	441a      	add	r2, r3
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a78:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	2b0f      	cmp	r3, #15
 8005a7e:	d916      	bls.n	8005aae <UART_SetConfig+0x4a6>
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a86:	d212      	bcs.n	8005aae <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	f023 030f 	bic.w	r3, r3, #15
 8005a90:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	085b      	lsrs	r3, r3, #1
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	f003 0307 	and.w	r3, r3, #7
 8005a9c:	b29a      	uxth	r2, r3
 8005a9e:	8afb      	ldrh	r3, [r7, #22]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	8afa      	ldrh	r2, [r7, #22]
 8005aaa:	60da      	str	r2, [r3, #12]
 8005aac:	e052      	b.n	8005b54 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005ab4:	e04e      	b.n	8005b54 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ab6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005aba:	2b08      	cmp	r3, #8
 8005abc:	d827      	bhi.n	8005b0e <UART_SetConfig+0x506>
 8005abe:	a201      	add	r2, pc, #4	@ (adr r2, 8005ac4 <UART_SetConfig+0x4bc>)
 8005ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac4:	08005ae9 	.word	0x08005ae9
 8005ac8:	08005af1 	.word	0x08005af1
 8005acc:	08005af9 	.word	0x08005af9
 8005ad0:	08005b0f 	.word	0x08005b0f
 8005ad4:	08005aff 	.word	0x08005aff
 8005ad8:	08005b0f 	.word	0x08005b0f
 8005adc:	08005b0f 	.word	0x08005b0f
 8005ae0:	08005b0f 	.word	0x08005b0f
 8005ae4:	08005b07 	.word	0x08005b07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ae8:	f7fe fb72 	bl	80041d0 <HAL_RCC_GetPCLK1Freq>
 8005aec:	61f8      	str	r0, [r7, #28]
        break;
 8005aee:	e014      	b.n	8005b1a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005af0:	f7fe fb84 	bl	80041fc <HAL_RCC_GetPCLK2Freq>
 8005af4:	61f8      	str	r0, [r7, #28]
        break;
 8005af6:	e010      	b.n	8005b1a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005af8:	4b1e      	ldr	r3, [pc, #120]	@ (8005b74 <UART_SetConfig+0x56c>)
 8005afa:	61fb      	str	r3, [r7, #28]
        break;
 8005afc:	e00d      	b.n	8005b1a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005afe:	f7fe facf 	bl	80040a0 <HAL_RCC_GetSysClockFreq>
 8005b02:	61f8      	str	r0, [r7, #28]
        break;
 8005b04:	e009      	b.n	8005b1a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b0a:	61fb      	str	r3, [r7, #28]
        break;
 8005b0c:	e005      	b.n	8005b1a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005b18:	bf00      	nop
    }

    if (pclk != 0U)
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d019      	beq.n	8005b54 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	085a      	lsrs	r2, r3, #1
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	441a      	add	r2, r3
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b32:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	2b0f      	cmp	r3, #15
 8005b38:	d909      	bls.n	8005b4e <UART_SetConfig+0x546>
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b40:	d205      	bcs.n	8005b4e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	b29a      	uxth	r2, r3
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	60da      	str	r2, [r3, #12]
 8005b4c:	e002      	b.n	8005b54 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2200      	movs	r2, #0
 8005b58:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005b60:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3728      	adds	r7, #40	@ 0x28
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b6e:	bf00      	nop
 8005b70:	40008000 	.word	0x40008000
 8005b74:	00f42400 	.word	0x00f42400

08005b78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b84:	f003 0308 	and.w	r3, r3, #8
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d00a      	beq.n	8005ba2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	430a      	orrs	r2, r1
 8005ba0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ba6:	f003 0301 	and.w	r3, r3, #1
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00a      	beq.n	8005bc4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	430a      	orrs	r2, r1
 8005bc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bc8:	f003 0302 	and.w	r3, r3, #2
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d00a      	beq.n	8005be6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	430a      	orrs	r2, r1
 8005be4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bea:	f003 0304 	and.w	r3, r3, #4
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d00a      	beq.n	8005c08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	430a      	orrs	r2, r1
 8005c06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c0c:	f003 0310 	and.w	r3, r3, #16
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d00a      	beq.n	8005c2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	430a      	orrs	r2, r1
 8005c28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c2e:	f003 0320 	and.w	r3, r3, #32
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d00a      	beq.n	8005c4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	430a      	orrs	r2, r1
 8005c4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d01a      	beq.n	8005c8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	430a      	orrs	r2, r1
 8005c6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c76:	d10a      	bne.n	8005c8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	430a      	orrs	r2, r1
 8005c8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d00a      	beq.n	8005cb0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	430a      	orrs	r2, r1
 8005cae:	605a      	str	r2, [r3, #4]
  }
}
 8005cb0:	bf00      	nop
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b098      	sub	sp, #96	@ 0x60
 8005cc0:	af02      	add	r7, sp, #8
 8005cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ccc:	f7fc fe44 	bl	8002958 <HAL_GetTick>
 8005cd0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 0308 	and.w	r3, r3, #8
 8005cdc:	2b08      	cmp	r3, #8
 8005cde:	d12e      	bne.n	8005d3e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ce0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005ce4:	9300      	str	r3, [sp, #0]
 8005ce6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 f88c 	bl	8005e0c <UART_WaitOnFlagUntilTimeout>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d021      	beq.n	8005d3e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d02:	e853 3f00 	ldrex	r3, [r3]
 8005d06:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005d08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	461a      	mov	r2, r3
 8005d16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d18:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d1a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d1c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d20:	e841 2300 	strex	r3, r2, [r1]
 8005d24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005d26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d1e6      	bne.n	8005cfa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2220      	movs	r2, #32
 8005d30:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e062      	b.n	8005e04 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 0304 	and.w	r3, r3, #4
 8005d48:	2b04      	cmp	r3, #4
 8005d4a:	d149      	bne.n	8005de0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d4c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005d50:	9300      	str	r3, [sp, #0]
 8005d52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d54:	2200      	movs	r2, #0
 8005d56:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 f856 	bl	8005e0c <UART_WaitOnFlagUntilTimeout>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d03c      	beq.n	8005de0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d6e:	e853 3f00 	ldrex	r3, [r3]
 8005d72:	623b      	str	r3, [r7, #32]
   return(result);
 8005d74:	6a3b      	ldr	r3, [r7, #32]
 8005d76:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	461a      	mov	r2, r3
 8005d82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d84:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d86:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d88:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d8c:	e841 2300 	strex	r3, r2, [r1]
 8005d90:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d1e6      	bne.n	8005d66 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	3308      	adds	r3, #8
 8005d9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	e853 3f00 	ldrex	r3, [r3]
 8005da6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f023 0301 	bic.w	r3, r3, #1
 8005dae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	3308      	adds	r3, #8
 8005db6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005db8:	61fa      	str	r2, [r7, #28]
 8005dba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dbc:	69b9      	ldr	r1, [r7, #24]
 8005dbe:	69fa      	ldr	r2, [r7, #28]
 8005dc0:	e841 2300 	strex	r3, r2, [r1]
 8005dc4:	617b      	str	r3, [r7, #20]
   return(result);
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d1e5      	bne.n	8005d98 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2220      	movs	r2, #32
 8005dd0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	e011      	b.n	8005e04 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2220      	movs	r2, #32
 8005de4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2220      	movs	r2, #32
 8005dea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3758      	adds	r7, #88	@ 0x58
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	60f8      	str	r0, [r7, #12]
 8005e14:	60b9      	str	r1, [r7, #8]
 8005e16:	603b      	str	r3, [r7, #0]
 8005e18:	4613      	mov	r3, r2
 8005e1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e1c:	e049      	b.n	8005eb2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e24:	d045      	beq.n	8005eb2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e26:	f7fc fd97 	bl	8002958 <HAL_GetTick>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	1ad3      	subs	r3, r2, r3
 8005e30:	69ba      	ldr	r2, [r7, #24]
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d302      	bcc.n	8005e3c <UART_WaitOnFlagUntilTimeout+0x30>
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d101      	bne.n	8005e40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005e3c:	2303      	movs	r3, #3
 8005e3e:	e048      	b.n	8005ed2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 0304 	and.w	r3, r3, #4
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d031      	beq.n	8005eb2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	69db      	ldr	r3, [r3, #28]
 8005e54:	f003 0308 	and.w	r3, r3, #8
 8005e58:	2b08      	cmp	r3, #8
 8005e5a:	d110      	bne.n	8005e7e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2208      	movs	r2, #8
 8005e62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e64:	68f8      	ldr	r0, [r7, #12]
 8005e66:	f000 f8ff 	bl	8006068 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2208      	movs	r2, #8
 8005e6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e029      	b.n	8005ed2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	69db      	ldr	r3, [r3, #28]
 8005e84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e8c:	d111      	bne.n	8005eb2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005e96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e98:	68f8      	ldr	r0, [r7, #12]
 8005e9a:	f000 f8e5 	bl	8006068 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2220      	movs	r2, #32
 8005ea2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005eae:	2303      	movs	r3, #3
 8005eb0:	e00f      	b.n	8005ed2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	69da      	ldr	r2, [r3, #28]
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	4013      	ands	r3, r2
 8005ebc:	68ba      	ldr	r2, [r7, #8]
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	bf0c      	ite	eq
 8005ec2:	2301      	moveq	r3, #1
 8005ec4:	2300      	movne	r3, #0
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	461a      	mov	r2, r3
 8005eca:	79fb      	ldrb	r3, [r7, #7]
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d0a6      	beq.n	8005e1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ed0:	2300      	movs	r3, #0
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3710      	adds	r7, #16
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
	...

08005edc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b097      	sub	sp, #92	@ 0x5c
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	4613      	mov	r3, r2
 8005ee8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	68ba      	ldr	r2, [r7, #8]
 8005eee:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	88fa      	ldrh	r2, [r7, #6]
 8005ef4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	88fa      	ldrh	r2, [r7, #6]
 8005efc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f0e:	d10e      	bne.n	8005f2e <UART_Start_Receive_IT+0x52>
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	691b      	ldr	r3, [r3, #16]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d105      	bne.n	8005f24 <UART_Start_Receive_IT+0x48>
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005f1e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005f22:	e02d      	b.n	8005f80 <UART_Start_Receive_IT+0xa4>
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	22ff      	movs	r2, #255	@ 0xff
 8005f28:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005f2c:	e028      	b.n	8005f80 <UART_Start_Receive_IT+0xa4>
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d10d      	bne.n	8005f52 <UART_Start_Receive_IT+0x76>
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d104      	bne.n	8005f48 <UART_Start_Receive_IT+0x6c>
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	22ff      	movs	r2, #255	@ 0xff
 8005f42:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005f46:	e01b      	b.n	8005f80 <UART_Start_Receive_IT+0xa4>
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	227f      	movs	r2, #127	@ 0x7f
 8005f4c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005f50:	e016      	b.n	8005f80 <UART_Start_Receive_IT+0xa4>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f5a:	d10d      	bne.n	8005f78 <UART_Start_Receive_IT+0x9c>
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d104      	bne.n	8005f6e <UART_Start_Receive_IT+0x92>
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	227f      	movs	r2, #127	@ 0x7f
 8005f68:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005f6c:	e008      	b.n	8005f80 <UART_Start_Receive_IT+0xa4>
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	223f      	movs	r2, #63	@ 0x3f
 8005f72:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005f76:	e003      	b.n	8005f80 <UART_Start_Receive_IT+0xa4>
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2222      	movs	r2, #34	@ 0x22
 8005f8c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	3308      	adds	r3, #8
 8005f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f9a:	e853 3f00 	ldrex	r3, [r3]
 8005f9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fa2:	f043 0301 	orr.w	r3, r3, #1
 8005fa6:	657b      	str	r3, [r7, #84]	@ 0x54
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	3308      	adds	r3, #8
 8005fae:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005fb0:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005fb2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005fb6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005fb8:	e841 2300 	strex	r3, r2, [r1]
 8005fbc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005fbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d1e5      	bne.n	8005f90 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fcc:	d107      	bne.n	8005fde <UART_Start_Receive_IT+0x102>
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d103      	bne.n	8005fde <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	4a21      	ldr	r2, [pc, #132]	@ (8006060 <UART_Start_Receive_IT+0x184>)
 8005fda:	669a      	str	r2, [r3, #104]	@ 0x68
 8005fdc:	e002      	b.n	8005fe4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	4a20      	ldr	r2, [pc, #128]	@ (8006064 <UART_Start_Receive_IT+0x188>)
 8005fe2:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	691b      	ldr	r3, [r3, #16]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d019      	beq.n	8006020 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ff4:	e853 3f00 	ldrex	r3, [r3]
 8005ff8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ffc:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006000:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	461a      	mov	r2, r3
 8006008:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800600a:	637b      	str	r3, [r7, #52]	@ 0x34
 800600c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006010:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006012:	e841 2300 	strex	r3, r2, [r1]
 8006016:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800601a:	2b00      	cmp	r3, #0
 800601c:	d1e6      	bne.n	8005fec <UART_Start_Receive_IT+0x110>
 800601e:	e018      	b.n	8006052 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	e853 3f00 	ldrex	r3, [r3]
 800602c:	613b      	str	r3, [r7, #16]
   return(result);
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	f043 0320 	orr.w	r3, r3, #32
 8006034:	653b      	str	r3, [r7, #80]	@ 0x50
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	461a      	mov	r2, r3
 800603c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800603e:	623b      	str	r3, [r7, #32]
 8006040:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006042:	69f9      	ldr	r1, [r7, #28]
 8006044:	6a3a      	ldr	r2, [r7, #32]
 8006046:	e841 2300 	strex	r3, r2, [r1]
 800604a:	61bb      	str	r3, [r7, #24]
   return(result);
 800604c:	69bb      	ldr	r3, [r7, #24]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d1e6      	bne.n	8006020 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006052:	2300      	movs	r3, #0
}
 8006054:	4618      	mov	r0, r3
 8006056:	375c      	adds	r7, #92	@ 0x5c
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr
 8006060:	0800636d 	.word	0x0800636d
 8006064:	080061b1 	.word	0x080061b1

08006068 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006068:	b480      	push	{r7}
 800606a:	b095      	sub	sp, #84	@ 0x54
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006076:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006078:	e853 3f00 	ldrex	r3, [r3]
 800607c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800607e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006080:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006084:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	461a      	mov	r2, r3
 800608c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800608e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006090:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006092:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006094:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006096:	e841 2300 	strex	r3, r2, [r1]
 800609a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800609c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d1e6      	bne.n	8006070 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	3308      	adds	r3, #8
 80060a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060aa:	6a3b      	ldr	r3, [r7, #32]
 80060ac:	e853 3f00 	ldrex	r3, [r3]
 80060b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	f023 0301 	bic.w	r3, r3, #1
 80060b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	3308      	adds	r3, #8
 80060c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80060c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80060c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80060c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80060ca:	e841 2300 	strex	r3, r2, [r1]
 80060ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80060d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d1e5      	bne.n	80060a2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d118      	bne.n	8006110 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	e853 3f00 	ldrex	r3, [r3]
 80060ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	f023 0310 	bic.w	r3, r3, #16
 80060f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	461a      	mov	r2, r3
 80060fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060fc:	61bb      	str	r3, [r7, #24]
 80060fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006100:	6979      	ldr	r1, [r7, #20]
 8006102:	69ba      	ldr	r2, [r7, #24]
 8006104:	e841 2300 	strex	r3, r2, [r1]
 8006108:	613b      	str	r3, [r7, #16]
   return(result);
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d1e6      	bne.n	80060de <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2220      	movs	r2, #32
 8006114:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006124:	bf00      	nop
 8006126:	3754      	adds	r7, #84	@ 0x54
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800613c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2200      	movs	r2, #0
 8006142:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800614e:	68f8      	ldr	r0, [r7, #12]
 8006150:	f7fc fa8a 	bl	8002668 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006154:	bf00      	nop
 8006156:	3710      	adds	r7, #16
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b088      	sub	sp, #32
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	e853 3f00 	ldrex	r3, [r3]
 8006170:	60bb      	str	r3, [r7, #8]
   return(result);
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006178:	61fb      	str	r3, [r7, #28]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	461a      	mov	r2, r3
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	61bb      	str	r3, [r7, #24]
 8006184:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006186:	6979      	ldr	r1, [r7, #20]
 8006188:	69ba      	ldr	r2, [r7, #24]
 800618a:	e841 2300 	strex	r3, r2, [r1]
 800618e:	613b      	str	r3, [r7, #16]
   return(result);
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d1e6      	bne.n	8006164 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2220      	movs	r2, #32
 800619a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f7ff fa1a 	bl	80055dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061a8:	bf00      	nop
 80061aa:	3720      	adds	r7, #32
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b09c      	sub	sp, #112	@ 0x70
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80061be:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80061c8:	2b22      	cmp	r3, #34	@ 0x22
 80061ca:	f040 80be 	bne.w	800634a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80061d4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80061d8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80061dc:	b2d9      	uxtb	r1, r3
 80061de:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80061e2:	b2da      	uxtb	r2, r3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061e8:	400a      	ands	r2, r1
 80061ea:	b2d2      	uxtb	r2, r2
 80061ec:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061f2:	1c5a      	adds	r2, r3, #1
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80061fe:	b29b      	uxth	r3, r3
 8006200:	3b01      	subs	r3, #1
 8006202:	b29a      	uxth	r2, r3
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006210:	b29b      	uxth	r3, r3
 8006212:	2b00      	cmp	r3, #0
 8006214:	f040 80a3 	bne.w	800635e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800621e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006220:	e853 3f00 	ldrex	r3, [r3]
 8006224:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006226:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006228:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800622c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	461a      	mov	r2, r3
 8006234:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006236:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006238:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800623a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800623c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800623e:	e841 2300 	strex	r3, r2, [r1]
 8006242:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006244:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006246:	2b00      	cmp	r3, #0
 8006248:	d1e6      	bne.n	8006218 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	3308      	adds	r3, #8
 8006250:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006254:	e853 3f00 	ldrex	r3, [r3]
 8006258:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800625a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800625c:	f023 0301 	bic.w	r3, r3, #1
 8006260:	667b      	str	r3, [r7, #100]	@ 0x64
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	3308      	adds	r3, #8
 8006268:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800626a:	647a      	str	r2, [r7, #68]	@ 0x44
 800626c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800626e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006270:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006272:	e841 2300 	strex	r3, r2, [r1]
 8006276:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006278:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800627a:	2b00      	cmp	r3, #0
 800627c:	d1e5      	bne.n	800624a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2220      	movs	r2, #32
 8006282:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a34      	ldr	r2, [pc, #208]	@ (8006368 <UART_RxISR_8BIT+0x1b8>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d01f      	beq.n	80062dc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d018      	beq.n	80062dc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b2:	e853 3f00 	ldrex	r3, [r3]
 80062b6:	623b      	str	r3, [r7, #32]
   return(result);
 80062b8:	6a3b      	ldr	r3, [r7, #32]
 80062ba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80062be:	663b      	str	r3, [r7, #96]	@ 0x60
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	461a      	mov	r2, r3
 80062c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80062c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80062ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80062ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062d0:	e841 2300 	strex	r3, r2, [r1]
 80062d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80062d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d1e6      	bne.n	80062aa <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d12e      	bne.n	8006342 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	e853 3f00 	ldrex	r3, [r3]
 80062f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f023 0310 	bic.w	r3, r3, #16
 80062fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	461a      	mov	r2, r3
 8006306:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006308:	61fb      	str	r3, [r7, #28]
 800630a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630c:	69b9      	ldr	r1, [r7, #24]
 800630e:	69fa      	ldr	r2, [r7, #28]
 8006310:	e841 2300 	strex	r3, r2, [r1]
 8006314:	617b      	str	r3, [r7, #20]
   return(result);
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d1e6      	bne.n	80062ea <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	69db      	ldr	r3, [r3, #28]
 8006322:	f003 0310 	and.w	r3, r3, #16
 8006326:	2b10      	cmp	r3, #16
 8006328:	d103      	bne.n	8006332 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	2210      	movs	r2, #16
 8006330:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006338:	4619      	mov	r1, r3
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f7ff f958 	bl	80055f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006340:	e00d      	b.n	800635e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f7fc f966 	bl	8002614 <HAL_UART_RxCpltCallback>
}
 8006348:	e009      	b.n	800635e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	8b1b      	ldrh	r3, [r3, #24]
 8006350:	b29a      	uxth	r2, r3
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f042 0208 	orr.w	r2, r2, #8
 800635a:	b292      	uxth	r2, r2
 800635c:	831a      	strh	r2, [r3, #24]
}
 800635e:	bf00      	nop
 8006360:	3770      	adds	r7, #112	@ 0x70
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop
 8006368:	40008000 	.word	0x40008000

0800636c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b09c      	sub	sp, #112	@ 0x70
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800637a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006384:	2b22      	cmp	r3, #34	@ 0x22
 8006386:	f040 80be 	bne.w	8006506 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006390:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006398:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800639a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800639e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80063a2:	4013      	ands	r3, r2
 80063a4:	b29a      	uxth	r2, r3
 80063a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80063a8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063ae:	1c9a      	adds	r2, r3, #2
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	3b01      	subs	r3, #1
 80063be:	b29a      	uxth	r2, r3
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	f040 80a3 	bne.w	800651a <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80063dc:	e853 3f00 	ldrex	r3, [r3]
 80063e0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80063e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80063e8:	667b      	str	r3, [r7, #100]	@ 0x64
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	461a      	mov	r2, r3
 80063f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80063f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80063f4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80063f8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80063fa:	e841 2300 	strex	r3, r2, [r1]
 80063fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006400:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006402:	2b00      	cmp	r3, #0
 8006404:	d1e6      	bne.n	80063d4 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	3308      	adds	r3, #8
 800640c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800640e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006410:	e853 3f00 	ldrex	r3, [r3]
 8006414:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006418:	f023 0301 	bic.w	r3, r3, #1
 800641c:	663b      	str	r3, [r7, #96]	@ 0x60
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	3308      	adds	r3, #8
 8006424:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006426:	643a      	str	r2, [r7, #64]	@ 0x40
 8006428:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800642a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800642c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800642e:	e841 2300 	strex	r3, r2, [r1]
 8006432:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006436:	2b00      	cmp	r3, #0
 8006438:	d1e5      	bne.n	8006406 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2220      	movs	r2, #32
 800643e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a34      	ldr	r2, [pc, #208]	@ (8006524 <UART_RxISR_16BIT+0x1b8>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d01f      	beq.n	8006498 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006462:	2b00      	cmp	r3, #0
 8006464:	d018      	beq.n	8006498 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800646c:	6a3b      	ldr	r3, [r7, #32]
 800646e:	e853 3f00 	ldrex	r3, [r3]
 8006472:	61fb      	str	r3, [r7, #28]
   return(result);
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800647a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	461a      	mov	r2, r3
 8006482:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006484:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006486:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006488:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800648a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800648c:	e841 2300 	strex	r3, r2, [r1]
 8006490:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006494:	2b00      	cmp	r3, #0
 8006496:	d1e6      	bne.n	8006466 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800649c:	2b01      	cmp	r3, #1
 800649e:	d12e      	bne.n	80064fe <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	e853 3f00 	ldrex	r3, [r3]
 80064b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	f023 0310 	bic.w	r3, r3, #16
 80064ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	461a      	mov	r2, r3
 80064c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80064c4:	61bb      	str	r3, [r7, #24]
 80064c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c8:	6979      	ldr	r1, [r7, #20]
 80064ca:	69ba      	ldr	r2, [r7, #24]
 80064cc:	e841 2300 	strex	r3, r2, [r1]
 80064d0:	613b      	str	r3, [r7, #16]
   return(result);
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d1e6      	bne.n	80064a6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	69db      	ldr	r3, [r3, #28]
 80064de:	f003 0310 	and.w	r3, r3, #16
 80064e2:	2b10      	cmp	r3, #16
 80064e4:	d103      	bne.n	80064ee <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2210      	movs	r2, #16
 80064ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80064f4:	4619      	mov	r1, r3
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f7ff f87a 	bl	80055f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80064fc:	e00d      	b.n	800651a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f7fc f888 	bl	8002614 <HAL_UART_RxCpltCallback>
}
 8006504:	e009      	b.n	800651a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	8b1b      	ldrh	r3, [r3, #24]
 800650c:	b29a      	uxth	r2, r3
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f042 0208 	orr.w	r2, r2, #8
 8006516:	b292      	uxth	r2, r2
 8006518:	831a      	strh	r2, [r3, #24]
}
 800651a:	bf00      	nop
 800651c:	3770      	adds	r7, #112	@ 0x70
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop
 8006524:	40008000 	.word	0x40008000

08006528 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006530:	bf00      	nop
 8006532:	370c      	adds	r7, #12
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800653c:	b084      	sub	sp, #16
 800653e:	b580      	push	{r7, lr}
 8006540:	b084      	sub	sp, #16
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
 8006546:	f107 001c 	add.w	r0, r7, #28
 800654a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 fa66 	bl	8006a2c <USB_CoreReset>
 8006560:	4603      	mov	r3, r0
 8006562:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8006564:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006566:	2b00      	cmp	r3, #0
 8006568:	d106      	bne.n	8006578 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800656e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	639a      	str	r2, [r3, #56]	@ 0x38
 8006576:	e005      	b.n	8006584 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800657c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8006584:	7bfb      	ldrb	r3, [r7, #15]
}
 8006586:	4618      	mov	r0, r3
 8006588:	3710      	adds	r7, #16
 800658a:	46bd      	mov	sp, r7
 800658c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006590:	b004      	add	sp, #16
 8006592:	4770      	bx	lr

08006594 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	f023 0201 	bic.w	r2, r3, #1
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	370c      	adds	r7, #12
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr

080065b6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80065b6:	b580      	push	{r7, lr}
 80065b8:	b084      	sub	sp, #16
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
 80065be:	460b      	mov	r3, r1
 80065c0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80065c2:	2300      	movs	r3, #0
 80065c4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80065d2:	78fb      	ldrb	r3, [r7, #3]
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d115      	bne.n	8006604 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80065e4:	2001      	movs	r0, #1
 80065e6:	f7fc f9c3 	bl	8002970 <HAL_Delay>
      ms++;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	3301      	adds	r3, #1
 80065ee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f000 fa0d 	bl	8006a10 <USB_GetMode>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d01e      	beq.n	800663a <USB_SetCurrentMode+0x84>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2b31      	cmp	r3, #49	@ 0x31
 8006600:	d9f0      	bls.n	80065e4 <USB_SetCurrentMode+0x2e>
 8006602:	e01a      	b.n	800663a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006604:	78fb      	ldrb	r3, [r7, #3]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d115      	bne.n	8006636 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006616:	2001      	movs	r0, #1
 8006618:	f7fc f9aa 	bl	8002970 <HAL_Delay>
      ms++;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	3301      	adds	r3, #1
 8006620:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 f9f4 	bl	8006a10 <USB_GetMode>
 8006628:	4603      	mov	r3, r0
 800662a:	2b00      	cmp	r3, #0
 800662c:	d005      	beq.n	800663a <USB_SetCurrentMode+0x84>
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2b31      	cmp	r3, #49	@ 0x31
 8006632:	d9f0      	bls.n	8006616 <USB_SetCurrentMode+0x60>
 8006634:	e001      	b.n	800663a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	e005      	b.n	8006646 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2b32      	cmp	r3, #50	@ 0x32
 800663e:	d101      	bne.n	8006644 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	e000      	b.n	8006646 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006644:	2300      	movs	r3, #0
}
 8006646:	4618      	mov	r0, r3
 8006648:	3710      	adds	r7, #16
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
	...

08006650 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006650:	b084      	sub	sp, #16
 8006652:	b580      	push	{r7, lr}
 8006654:	b086      	sub	sp, #24
 8006656:	af00      	add	r7, sp, #0
 8006658:	6078      	str	r0, [r7, #4]
 800665a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800665e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006662:	2300      	movs	r3, #0
 8006664:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800666a:	2300      	movs	r3, #0
 800666c:	613b      	str	r3, [r7, #16]
 800666e:	e009      	b.n	8006684 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	3340      	adds	r3, #64	@ 0x40
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	4413      	add	r3, r2
 800667a:	2200      	movs	r2, #0
 800667c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	3301      	adds	r3, #1
 8006682:	613b      	str	r3, [r7, #16]
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	2b0e      	cmp	r3, #14
 8006688:	d9f2      	bls.n	8006670 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800668a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800668c:	2b00      	cmp	r3, #0
 800668e:	d11c      	bne.n	80066ca <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	68fa      	ldr	r2, [r7, #12]
 800669a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800669e:	f043 0302 	orr.w	r3, r3, #2
 80066a2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066a8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	601a      	str	r2, [r3, #0]
 80066c8:	e005      	b.n	80066d6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066ce:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80066dc:	461a      	mov	r2, r3
 80066de:	2300      	movs	r3, #0
 80066e0:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80066e2:	2103      	movs	r1, #3
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 f959 	bl	800699c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80066ea:	2110      	movs	r1, #16
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f000 f8f1 	bl	80068d4 <USB_FlushTxFifo>
 80066f2:	4603      	mov	r3, r0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d001      	beq.n	80066fc <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f000 f91d 	bl	800693c <USB_FlushRxFifo>
 8006702:	4603      	mov	r3, r0
 8006704:	2b00      	cmp	r3, #0
 8006706:	d001      	beq.n	800670c <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006712:	461a      	mov	r2, r3
 8006714:	2300      	movs	r3, #0
 8006716:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800671e:	461a      	mov	r2, r3
 8006720:	2300      	movs	r3, #0
 8006722:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800672a:	461a      	mov	r2, r3
 800672c:	2300      	movs	r3, #0
 800672e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006730:	2300      	movs	r3, #0
 8006732:	613b      	str	r3, [r7, #16]
 8006734:	e043      	b.n	80067be <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	015a      	lsls	r2, r3, #5
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	4413      	add	r3, r2
 800673e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006748:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800674c:	d118      	bne.n	8006780 <USB_DevInit+0x130>
    {
      if (i == 0U)
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d10a      	bne.n	800676a <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	015a      	lsls	r2, r3, #5
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	4413      	add	r3, r2
 800675c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006760:	461a      	mov	r2, r3
 8006762:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006766:	6013      	str	r3, [r2, #0]
 8006768:	e013      	b.n	8006792 <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	015a      	lsls	r2, r3, #5
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	4413      	add	r3, r2
 8006772:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006776:	461a      	mov	r2, r3
 8006778:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800677c:	6013      	str	r3, [r2, #0]
 800677e:	e008      	b.n	8006792 <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	015a      	lsls	r2, r3, #5
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	4413      	add	r3, r2
 8006788:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800678c:	461a      	mov	r2, r3
 800678e:	2300      	movs	r3, #0
 8006790:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	015a      	lsls	r2, r3, #5
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	4413      	add	r3, r2
 800679a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800679e:	461a      	mov	r2, r3
 80067a0:	2300      	movs	r3, #0
 80067a2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	015a      	lsls	r2, r3, #5
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	4413      	add	r3, r2
 80067ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067b0:	461a      	mov	r2, r3
 80067b2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80067b6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	3301      	adds	r3, #1
 80067bc:	613b      	str	r3, [r7, #16]
 80067be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c0:	693a      	ldr	r2, [r7, #16]
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d3b7      	bcc.n	8006736 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067c6:	2300      	movs	r3, #0
 80067c8:	613b      	str	r3, [r7, #16]
 80067ca:	e043      	b.n	8006854 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	015a      	lsls	r2, r3, #5
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	4413      	add	r3, r2
 80067d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80067de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80067e2:	d118      	bne.n	8006816 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d10a      	bne.n	8006800 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	015a      	lsls	r2, r3, #5
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	4413      	add	r3, r2
 80067f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067f6:	461a      	mov	r2, r3
 80067f8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80067fc:	6013      	str	r3, [r2, #0]
 80067fe:	e013      	b.n	8006828 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	015a      	lsls	r2, r3, #5
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	4413      	add	r3, r2
 8006808:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800680c:	461a      	mov	r2, r3
 800680e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006812:	6013      	str	r3, [r2, #0]
 8006814:	e008      	b.n	8006828 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	015a      	lsls	r2, r3, #5
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	4413      	add	r3, r2
 800681e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006822:	461a      	mov	r2, r3
 8006824:	2300      	movs	r3, #0
 8006826:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	015a      	lsls	r2, r3, #5
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	4413      	add	r3, r2
 8006830:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006834:	461a      	mov	r2, r3
 8006836:	2300      	movs	r3, #0
 8006838:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	015a      	lsls	r2, r3, #5
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	4413      	add	r3, r2
 8006842:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006846:	461a      	mov	r2, r3
 8006848:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800684c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	3301      	adds	r3, #1
 8006852:	613b      	str	r3, [r7, #16]
 8006854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006856:	693a      	ldr	r2, [r7, #16]
 8006858:	429a      	cmp	r2, r3
 800685a:	d3b7      	bcc.n	80067cc <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006862:	691b      	ldr	r3, [r3, #16]
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800686a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800686e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800687c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	699b      	ldr	r3, [r3, #24]
 8006882:	f043 0210 	orr.w	r2, r3, #16
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	699a      	ldr	r2, [r3, #24]
 800688e:	4b10      	ldr	r3, [pc, #64]	@ (80068d0 <USB_DevInit+0x280>)
 8006890:	4313      	orrs	r3, r2
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006896:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006898:	2b00      	cmp	r3, #0
 800689a:	d005      	beq.n	80068a8 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	699b      	ldr	r3, [r3, #24]
 80068a0:	f043 0208 	orr.w	r2, r3, #8
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80068a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d107      	bne.n	80068be <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	699b      	ldr	r3, [r3, #24]
 80068b2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80068b6:	f043 0304 	orr.w	r3, r3, #4
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80068be:	7dfb      	ldrb	r3, [r7, #23]
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3718      	adds	r7, #24
 80068c4:	46bd      	mov	sp, r7
 80068c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80068ca:	b004      	add	sp, #16
 80068cc:	4770      	bx	lr
 80068ce:	bf00      	nop
 80068d0:	803c3800 	.word	0x803c3800

080068d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b085      	sub	sp, #20
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80068de:	2300      	movs	r3, #0
 80068e0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	3301      	adds	r3, #1
 80068e6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	4a13      	ldr	r2, [pc, #76]	@ (8006938 <USB_FlushTxFifo+0x64>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d901      	bls.n	80068f4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80068f0:	2303      	movs	r3, #3
 80068f2:	e01b      	b.n	800692c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	691b      	ldr	r3, [r3, #16]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	daf2      	bge.n	80068e2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80068fc:	2300      	movs	r3, #0
 80068fe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	019b      	lsls	r3, r3, #6
 8006904:	f043 0220 	orr.w	r2, r3, #32
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	3301      	adds	r3, #1
 8006910:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	4a08      	ldr	r2, [pc, #32]	@ (8006938 <USB_FlushTxFifo+0x64>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d901      	bls.n	800691e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800691a:	2303      	movs	r3, #3
 800691c:	e006      	b.n	800692c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	691b      	ldr	r3, [r3, #16]
 8006922:	f003 0320 	and.w	r3, r3, #32
 8006926:	2b20      	cmp	r3, #32
 8006928:	d0f0      	beq.n	800690c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800692a:	2300      	movs	r3, #0
}
 800692c:	4618      	mov	r0, r3
 800692e:	3714      	adds	r7, #20
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr
 8006938:	00030d40 	.word	0x00030d40

0800693c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800693c:	b480      	push	{r7}
 800693e:	b085      	sub	sp, #20
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006944:	2300      	movs	r3, #0
 8006946:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	3301      	adds	r3, #1
 800694c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	4a11      	ldr	r2, [pc, #68]	@ (8006998 <USB_FlushRxFifo+0x5c>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d901      	bls.n	800695a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006956:	2303      	movs	r3, #3
 8006958:	e018      	b.n	800698c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	691b      	ldr	r3, [r3, #16]
 800695e:	2b00      	cmp	r3, #0
 8006960:	daf2      	bge.n	8006948 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006962:	2300      	movs	r3, #0
 8006964:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2210      	movs	r2, #16
 800696a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	3301      	adds	r3, #1
 8006970:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	4a08      	ldr	r2, [pc, #32]	@ (8006998 <USB_FlushRxFifo+0x5c>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d901      	bls.n	800697e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800697a:	2303      	movs	r3, #3
 800697c:	e006      	b.n	800698c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	f003 0310 	and.w	r3, r3, #16
 8006986:	2b10      	cmp	r3, #16
 8006988:	d0f0      	beq.n	800696c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800698a:	2300      	movs	r3, #0
}
 800698c:	4618      	mov	r0, r3
 800698e:	3714      	adds	r7, #20
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr
 8006998:	00030d40 	.word	0x00030d40

0800699c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800699c:	b480      	push	{r7}
 800699e:	b085      	sub	sp, #20
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	460b      	mov	r3, r1
 80069a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	78fb      	ldrb	r3, [r7, #3]
 80069b6:	68f9      	ldr	r1, [r7, #12]
 80069b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80069bc:	4313      	orrs	r3, r2
 80069be:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80069c0:	2300      	movs	r3, #0
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3714      	adds	r7, #20
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr

080069ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80069ce:	b480      	push	{r7}
 80069d0:	b085      	sub	sp, #20
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	68fa      	ldr	r2, [r7, #12]
 80069e4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80069e8:	f023 0303 	bic.w	r3, r3, #3
 80069ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	68fa      	ldr	r2, [r7, #12]
 80069f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80069fc:	f043 0302 	orr.w	r3, r3, #2
 8006a00:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a02:	2300      	movs	r3, #0
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3714      	adds	r7, #20
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr

08006a10 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	695b      	ldr	r3, [r3, #20]
 8006a1c:	f003 0301 	and.w	r3, r3, #1
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	370c      	adds	r7, #12
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr

08006a2c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b085      	sub	sp, #20
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a34:	2300      	movs	r3, #0
 8006a36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	4a13      	ldr	r2, [pc, #76]	@ (8006a90 <USB_CoreReset+0x64>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d901      	bls.n	8006a4a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006a46:	2303      	movs	r3, #3
 8006a48:	e01b      	b.n	8006a82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	691b      	ldr	r3, [r3, #16]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	daf2      	bge.n	8006a38 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006a52:	2300      	movs	r3, #0
 8006a54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	691b      	ldr	r3, [r3, #16]
 8006a5a:	f043 0201 	orr.w	r2, r3, #1
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	3301      	adds	r3, #1
 8006a66:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	4a09      	ldr	r2, [pc, #36]	@ (8006a90 <USB_CoreReset+0x64>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d901      	bls.n	8006a74 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006a70:	2303      	movs	r3, #3
 8006a72:	e006      	b.n	8006a82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	691b      	ldr	r3, [r3, #16]
 8006a78:	f003 0301 	and.w	r3, r3, #1
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d0f0      	beq.n	8006a62 <USB_CoreReset+0x36>

  return HAL_OK;
 8006a80:	2300      	movs	r3, #0
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3714      	adds	r7, #20
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr
 8006a8e:	bf00      	nop
 8006a90:	00030d40 	.word	0x00030d40

08006a94 <malloc>:
 8006a94:	4b02      	ldr	r3, [pc, #8]	@ (8006aa0 <malloc+0xc>)
 8006a96:	4601      	mov	r1, r0
 8006a98:	6818      	ldr	r0, [r3, #0]
 8006a9a:	f000 b825 	b.w	8006ae8 <_malloc_r>
 8006a9e:	bf00      	nop
 8006aa0:	20000198 	.word	0x20000198

08006aa4 <sbrk_aligned>:
 8006aa4:	b570      	push	{r4, r5, r6, lr}
 8006aa6:	4e0f      	ldr	r6, [pc, #60]	@ (8006ae4 <sbrk_aligned+0x40>)
 8006aa8:	460c      	mov	r4, r1
 8006aaa:	6831      	ldr	r1, [r6, #0]
 8006aac:	4605      	mov	r5, r0
 8006aae:	b911      	cbnz	r1, 8006ab6 <sbrk_aligned+0x12>
 8006ab0:	f000 feaa 	bl	8007808 <_sbrk_r>
 8006ab4:	6030      	str	r0, [r6, #0]
 8006ab6:	4621      	mov	r1, r4
 8006ab8:	4628      	mov	r0, r5
 8006aba:	f000 fea5 	bl	8007808 <_sbrk_r>
 8006abe:	1c43      	adds	r3, r0, #1
 8006ac0:	d103      	bne.n	8006aca <sbrk_aligned+0x26>
 8006ac2:	f04f 34ff 	mov.w	r4, #4294967295
 8006ac6:	4620      	mov	r0, r4
 8006ac8:	bd70      	pop	{r4, r5, r6, pc}
 8006aca:	1cc4      	adds	r4, r0, #3
 8006acc:	f024 0403 	bic.w	r4, r4, #3
 8006ad0:	42a0      	cmp	r0, r4
 8006ad2:	d0f8      	beq.n	8006ac6 <sbrk_aligned+0x22>
 8006ad4:	1a21      	subs	r1, r4, r0
 8006ad6:	4628      	mov	r0, r5
 8006ad8:	f000 fe96 	bl	8007808 <_sbrk_r>
 8006adc:	3001      	adds	r0, #1
 8006ade:	d1f2      	bne.n	8006ac6 <sbrk_aligned+0x22>
 8006ae0:	e7ef      	b.n	8006ac2 <sbrk_aligned+0x1e>
 8006ae2:	bf00      	nop
 8006ae4:	20001004 	.word	0x20001004

08006ae8 <_malloc_r>:
 8006ae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006aec:	1ccd      	adds	r5, r1, #3
 8006aee:	f025 0503 	bic.w	r5, r5, #3
 8006af2:	3508      	adds	r5, #8
 8006af4:	2d0c      	cmp	r5, #12
 8006af6:	bf38      	it	cc
 8006af8:	250c      	movcc	r5, #12
 8006afa:	2d00      	cmp	r5, #0
 8006afc:	4606      	mov	r6, r0
 8006afe:	db01      	blt.n	8006b04 <_malloc_r+0x1c>
 8006b00:	42a9      	cmp	r1, r5
 8006b02:	d904      	bls.n	8006b0e <_malloc_r+0x26>
 8006b04:	230c      	movs	r3, #12
 8006b06:	6033      	str	r3, [r6, #0]
 8006b08:	2000      	movs	r0, #0
 8006b0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006be4 <_malloc_r+0xfc>
 8006b12:	f000 f869 	bl	8006be8 <__malloc_lock>
 8006b16:	f8d8 3000 	ldr.w	r3, [r8]
 8006b1a:	461c      	mov	r4, r3
 8006b1c:	bb44      	cbnz	r4, 8006b70 <_malloc_r+0x88>
 8006b1e:	4629      	mov	r1, r5
 8006b20:	4630      	mov	r0, r6
 8006b22:	f7ff ffbf 	bl	8006aa4 <sbrk_aligned>
 8006b26:	1c43      	adds	r3, r0, #1
 8006b28:	4604      	mov	r4, r0
 8006b2a:	d158      	bne.n	8006bde <_malloc_r+0xf6>
 8006b2c:	f8d8 4000 	ldr.w	r4, [r8]
 8006b30:	4627      	mov	r7, r4
 8006b32:	2f00      	cmp	r7, #0
 8006b34:	d143      	bne.n	8006bbe <_malloc_r+0xd6>
 8006b36:	2c00      	cmp	r4, #0
 8006b38:	d04b      	beq.n	8006bd2 <_malloc_r+0xea>
 8006b3a:	6823      	ldr	r3, [r4, #0]
 8006b3c:	4639      	mov	r1, r7
 8006b3e:	4630      	mov	r0, r6
 8006b40:	eb04 0903 	add.w	r9, r4, r3
 8006b44:	f000 fe60 	bl	8007808 <_sbrk_r>
 8006b48:	4581      	cmp	r9, r0
 8006b4a:	d142      	bne.n	8006bd2 <_malloc_r+0xea>
 8006b4c:	6821      	ldr	r1, [r4, #0]
 8006b4e:	1a6d      	subs	r5, r5, r1
 8006b50:	4629      	mov	r1, r5
 8006b52:	4630      	mov	r0, r6
 8006b54:	f7ff ffa6 	bl	8006aa4 <sbrk_aligned>
 8006b58:	3001      	adds	r0, #1
 8006b5a:	d03a      	beq.n	8006bd2 <_malloc_r+0xea>
 8006b5c:	6823      	ldr	r3, [r4, #0]
 8006b5e:	442b      	add	r3, r5
 8006b60:	6023      	str	r3, [r4, #0]
 8006b62:	f8d8 3000 	ldr.w	r3, [r8]
 8006b66:	685a      	ldr	r2, [r3, #4]
 8006b68:	bb62      	cbnz	r2, 8006bc4 <_malloc_r+0xdc>
 8006b6a:	f8c8 7000 	str.w	r7, [r8]
 8006b6e:	e00f      	b.n	8006b90 <_malloc_r+0xa8>
 8006b70:	6822      	ldr	r2, [r4, #0]
 8006b72:	1b52      	subs	r2, r2, r5
 8006b74:	d420      	bmi.n	8006bb8 <_malloc_r+0xd0>
 8006b76:	2a0b      	cmp	r2, #11
 8006b78:	d917      	bls.n	8006baa <_malloc_r+0xc2>
 8006b7a:	1961      	adds	r1, r4, r5
 8006b7c:	42a3      	cmp	r3, r4
 8006b7e:	6025      	str	r5, [r4, #0]
 8006b80:	bf18      	it	ne
 8006b82:	6059      	strne	r1, [r3, #4]
 8006b84:	6863      	ldr	r3, [r4, #4]
 8006b86:	bf08      	it	eq
 8006b88:	f8c8 1000 	streq.w	r1, [r8]
 8006b8c:	5162      	str	r2, [r4, r5]
 8006b8e:	604b      	str	r3, [r1, #4]
 8006b90:	4630      	mov	r0, r6
 8006b92:	f000 f82f 	bl	8006bf4 <__malloc_unlock>
 8006b96:	f104 000b 	add.w	r0, r4, #11
 8006b9a:	1d23      	adds	r3, r4, #4
 8006b9c:	f020 0007 	bic.w	r0, r0, #7
 8006ba0:	1ac2      	subs	r2, r0, r3
 8006ba2:	bf1c      	itt	ne
 8006ba4:	1a1b      	subne	r3, r3, r0
 8006ba6:	50a3      	strne	r3, [r4, r2]
 8006ba8:	e7af      	b.n	8006b0a <_malloc_r+0x22>
 8006baa:	6862      	ldr	r2, [r4, #4]
 8006bac:	42a3      	cmp	r3, r4
 8006bae:	bf0c      	ite	eq
 8006bb0:	f8c8 2000 	streq.w	r2, [r8]
 8006bb4:	605a      	strne	r2, [r3, #4]
 8006bb6:	e7eb      	b.n	8006b90 <_malloc_r+0xa8>
 8006bb8:	4623      	mov	r3, r4
 8006bba:	6864      	ldr	r4, [r4, #4]
 8006bbc:	e7ae      	b.n	8006b1c <_malloc_r+0x34>
 8006bbe:	463c      	mov	r4, r7
 8006bc0:	687f      	ldr	r7, [r7, #4]
 8006bc2:	e7b6      	b.n	8006b32 <_malloc_r+0x4a>
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	42a3      	cmp	r3, r4
 8006bca:	d1fb      	bne.n	8006bc4 <_malloc_r+0xdc>
 8006bcc:	2300      	movs	r3, #0
 8006bce:	6053      	str	r3, [r2, #4]
 8006bd0:	e7de      	b.n	8006b90 <_malloc_r+0xa8>
 8006bd2:	230c      	movs	r3, #12
 8006bd4:	6033      	str	r3, [r6, #0]
 8006bd6:	4630      	mov	r0, r6
 8006bd8:	f000 f80c 	bl	8006bf4 <__malloc_unlock>
 8006bdc:	e794      	b.n	8006b08 <_malloc_r+0x20>
 8006bde:	6005      	str	r5, [r0, #0]
 8006be0:	e7d6      	b.n	8006b90 <_malloc_r+0xa8>
 8006be2:	bf00      	nop
 8006be4:	20001008 	.word	0x20001008

08006be8 <__malloc_lock>:
 8006be8:	4801      	ldr	r0, [pc, #4]	@ (8006bf0 <__malloc_lock+0x8>)
 8006bea:	f000 be5a 	b.w	80078a2 <__retarget_lock_acquire_recursive>
 8006bee:	bf00      	nop
 8006bf0:	2000114c 	.word	0x2000114c

08006bf4 <__malloc_unlock>:
 8006bf4:	4801      	ldr	r0, [pc, #4]	@ (8006bfc <__malloc_unlock+0x8>)
 8006bf6:	f000 be55 	b.w	80078a4 <__retarget_lock_release_recursive>
 8006bfa:	bf00      	nop
 8006bfc:	2000114c 	.word	0x2000114c

08006c00 <__cvt>:
 8006c00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c04:	ec57 6b10 	vmov	r6, r7, d0
 8006c08:	2f00      	cmp	r7, #0
 8006c0a:	460c      	mov	r4, r1
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	463b      	mov	r3, r7
 8006c10:	bfbb      	ittet	lt
 8006c12:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006c16:	461f      	movlt	r7, r3
 8006c18:	2300      	movge	r3, #0
 8006c1a:	232d      	movlt	r3, #45	@ 0x2d
 8006c1c:	700b      	strb	r3, [r1, #0]
 8006c1e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006c20:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006c24:	4691      	mov	r9, r2
 8006c26:	f023 0820 	bic.w	r8, r3, #32
 8006c2a:	bfbc      	itt	lt
 8006c2c:	4632      	movlt	r2, r6
 8006c2e:	4616      	movlt	r6, r2
 8006c30:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006c34:	d005      	beq.n	8006c42 <__cvt+0x42>
 8006c36:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006c3a:	d100      	bne.n	8006c3e <__cvt+0x3e>
 8006c3c:	3401      	adds	r4, #1
 8006c3e:	2102      	movs	r1, #2
 8006c40:	e000      	b.n	8006c44 <__cvt+0x44>
 8006c42:	2103      	movs	r1, #3
 8006c44:	ab03      	add	r3, sp, #12
 8006c46:	9301      	str	r3, [sp, #4]
 8006c48:	ab02      	add	r3, sp, #8
 8006c4a:	9300      	str	r3, [sp, #0]
 8006c4c:	ec47 6b10 	vmov	d0, r6, r7
 8006c50:	4653      	mov	r3, sl
 8006c52:	4622      	mov	r2, r4
 8006c54:	f000 fec0 	bl	80079d8 <_dtoa_r>
 8006c58:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006c5c:	4605      	mov	r5, r0
 8006c5e:	d119      	bne.n	8006c94 <__cvt+0x94>
 8006c60:	f019 0f01 	tst.w	r9, #1
 8006c64:	d00e      	beq.n	8006c84 <__cvt+0x84>
 8006c66:	eb00 0904 	add.w	r9, r0, r4
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	4630      	mov	r0, r6
 8006c70:	4639      	mov	r1, r7
 8006c72:	f7f9 ff39 	bl	8000ae8 <__aeabi_dcmpeq>
 8006c76:	b108      	cbz	r0, 8006c7c <__cvt+0x7c>
 8006c78:	f8cd 900c 	str.w	r9, [sp, #12]
 8006c7c:	2230      	movs	r2, #48	@ 0x30
 8006c7e:	9b03      	ldr	r3, [sp, #12]
 8006c80:	454b      	cmp	r3, r9
 8006c82:	d31e      	bcc.n	8006cc2 <__cvt+0xc2>
 8006c84:	9b03      	ldr	r3, [sp, #12]
 8006c86:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006c88:	1b5b      	subs	r3, r3, r5
 8006c8a:	4628      	mov	r0, r5
 8006c8c:	6013      	str	r3, [r2, #0]
 8006c8e:	b004      	add	sp, #16
 8006c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c94:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006c98:	eb00 0904 	add.w	r9, r0, r4
 8006c9c:	d1e5      	bne.n	8006c6a <__cvt+0x6a>
 8006c9e:	7803      	ldrb	r3, [r0, #0]
 8006ca0:	2b30      	cmp	r3, #48	@ 0x30
 8006ca2:	d10a      	bne.n	8006cba <__cvt+0xba>
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	4630      	mov	r0, r6
 8006caa:	4639      	mov	r1, r7
 8006cac:	f7f9 ff1c 	bl	8000ae8 <__aeabi_dcmpeq>
 8006cb0:	b918      	cbnz	r0, 8006cba <__cvt+0xba>
 8006cb2:	f1c4 0401 	rsb	r4, r4, #1
 8006cb6:	f8ca 4000 	str.w	r4, [sl]
 8006cba:	f8da 3000 	ldr.w	r3, [sl]
 8006cbe:	4499      	add	r9, r3
 8006cc0:	e7d3      	b.n	8006c6a <__cvt+0x6a>
 8006cc2:	1c59      	adds	r1, r3, #1
 8006cc4:	9103      	str	r1, [sp, #12]
 8006cc6:	701a      	strb	r2, [r3, #0]
 8006cc8:	e7d9      	b.n	8006c7e <__cvt+0x7e>

08006cca <__exponent>:
 8006cca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ccc:	2900      	cmp	r1, #0
 8006cce:	bfba      	itte	lt
 8006cd0:	4249      	neglt	r1, r1
 8006cd2:	232d      	movlt	r3, #45	@ 0x2d
 8006cd4:	232b      	movge	r3, #43	@ 0x2b
 8006cd6:	2909      	cmp	r1, #9
 8006cd8:	7002      	strb	r2, [r0, #0]
 8006cda:	7043      	strb	r3, [r0, #1]
 8006cdc:	dd29      	ble.n	8006d32 <__exponent+0x68>
 8006cde:	f10d 0307 	add.w	r3, sp, #7
 8006ce2:	461d      	mov	r5, r3
 8006ce4:	270a      	movs	r7, #10
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	fbb1 f6f7 	udiv	r6, r1, r7
 8006cec:	fb07 1416 	mls	r4, r7, r6, r1
 8006cf0:	3430      	adds	r4, #48	@ 0x30
 8006cf2:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006cf6:	460c      	mov	r4, r1
 8006cf8:	2c63      	cmp	r4, #99	@ 0x63
 8006cfa:	f103 33ff 	add.w	r3, r3, #4294967295
 8006cfe:	4631      	mov	r1, r6
 8006d00:	dcf1      	bgt.n	8006ce6 <__exponent+0x1c>
 8006d02:	3130      	adds	r1, #48	@ 0x30
 8006d04:	1e94      	subs	r4, r2, #2
 8006d06:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006d0a:	1c41      	adds	r1, r0, #1
 8006d0c:	4623      	mov	r3, r4
 8006d0e:	42ab      	cmp	r3, r5
 8006d10:	d30a      	bcc.n	8006d28 <__exponent+0x5e>
 8006d12:	f10d 0309 	add.w	r3, sp, #9
 8006d16:	1a9b      	subs	r3, r3, r2
 8006d18:	42ac      	cmp	r4, r5
 8006d1a:	bf88      	it	hi
 8006d1c:	2300      	movhi	r3, #0
 8006d1e:	3302      	adds	r3, #2
 8006d20:	4403      	add	r3, r0
 8006d22:	1a18      	subs	r0, r3, r0
 8006d24:	b003      	add	sp, #12
 8006d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d28:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006d2c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006d30:	e7ed      	b.n	8006d0e <__exponent+0x44>
 8006d32:	2330      	movs	r3, #48	@ 0x30
 8006d34:	3130      	adds	r1, #48	@ 0x30
 8006d36:	7083      	strb	r3, [r0, #2]
 8006d38:	70c1      	strb	r1, [r0, #3]
 8006d3a:	1d03      	adds	r3, r0, #4
 8006d3c:	e7f1      	b.n	8006d22 <__exponent+0x58>
	...

08006d40 <_printf_float>:
 8006d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d44:	b08d      	sub	sp, #52	@ 0x34
 8006d46:	460c      	mov	r4, r1
 8006d48:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006d4c:	4616      	mov	r6, r2
 8006d4e:	461f      	mov	r7, r3
 8006d50:	4605      	mov	r5, r0
 8006d52:	f000 fd21 	bl	8007798 <_localeconv_r>
 8006d56:	6803      	ldr	r3, [r0, #0]
 8006d58:	9304      	str	r3, [sp, #16]
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f7f9 fa98 	bl	8000290 <strlen>
 8006d60:	2300      	movs	r3, #0
 8006d62:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d64:	f8d8 3000 	ldr.w	r3, [r8]
 8006d68:	9005      	str	r0, [sp, #20]
 8006d6a:	3307      	adds	r3, #7
 8006d6c:	f023 0307 	bic.w	r3, r3, #7
 8006d70:	f103 0208 	add.w	r2, r3, #8
 8006d74:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006d78:	f8d4 b000 	ldr.w	fp, [r4]
 8006d7c:	f8c8 2000 	str.w	r2, [r8]
 8006d80:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006d84:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006d88:	9307      	str	r3, [sp, #28]
 8006d8a:	f8cd 8018 	str.w	r8, [sp, #24]
 8006d8e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006d92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d96:	4b9c      	ldr	r3, [pc, #624]	@ (8007008 <_printf_float+0x2c8>)
 8006d98:	f04f 32ff 	mov.w	r2, #4294967295
 8006d9c:	f7f9 fed6 	bl	8000b4c <__aeabi_dcmpun>
 8006da0:	bb70      	cbnz	r0, 8006e00 <_printf_float+0xc0>
 8006da2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006da6:	4b98      	ldr	r3, [pc, #608]	@ (8007008 <_printf_float+0x2c8>)
 8006da8:	f04f 32ff 	mov.w	r2, #4294967295
 8006dac:	f7f9 feb0 	bl	8000b10 <__aeabi_dcmple>
 8006db0:	bb30      	cbnz	r0, 8006e00 <_printf_float+0xc0>
 8006db2:	2200      	movs	r2, #0
 8006db4:	2300      	movs	r3, #0
 8006db6:	4640      	mov	r0, r8
 8006db8:	4649      	mov	r1, r9
 8006dba:	f7f9 fe9f 	bl	8000afc <__aeabi_dcmplt>
 8006dbe:	b110      	cbz	r0, 8006dc6 <_printf_float+0x86>
 8006dc0:	232d      	movs	r3, #45	@ 0x2d
 8006dc2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006dc6:	4a91      	ldr	r2, [pc, #580]	@ (800700c <_printf_float+0x2cc>)
 8006dc8:	4b91      	ldr	r3, [pc, #580]	@ (8007010 <_printf_float+0x2d0>)
 8006dca:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006dce:	bf94      	ite	ls
 8006dd0:	4690      	movls	r8, r2
 8006dd2:	4698      	movhi	r8, r3
 8006dd4:	2303      	movs	r3, #3
 8006dd6:	6123      	str	r3, [r4, #16]
 8006dd8:	f02b 0304 	bic.w	r3, fp, #4
 8006ddc:	6023      	str	r3, [r4, #0]
 8006dde:	f04f 0900 	mov.w	r9, #0
 8006de2:	9700      	str	r7, [sp, #0]
 8006de4:	4633      	mov	r3, r6
 8006de6:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006de8:	4621      	mov	r1, r4
 8006dea:	4628      	mov	r0, r5
 8006dec:	f000 f9d2 	bl	8007194 <_printf_common>
 8006df0:	3001      	adds	r0, #1
 8006df2:	f040 808d 	bne.w	8006f10 <_printf_float+0x1d0>
 8006df6:	f04f 30ff 	mov.w	r0, #4294967295
 8006dfa:	b00d      	add	sp, #52	@ 0x34
 8006dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e00:	4642      	mov	r2, r8
 8006e02:	464b      	mov	r3, r9
 8006e04:	4640      	mov	r0, r8
 8006e06:	4649      	mov	r1, r9
 8006e08:	f7f9 fea0 	bl	8000b4c <__aeabi_dcmpun>
 8006e0c:	b140      	cbz	r0, 8006e20 <_printf_float+0xe0>
 8006e0e:	464b      	mov	r3, r9
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	bfbc      	itt	lt
 8006e14:	232d      	movlt	r3, #45	@ 0x2d
 8006e16:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006e1a:	4a7e      	ldr	r2, [pc, #504]	@ (8007014 <_printf_float+0x2d4>)
 8006e1c:	4b7e      	ldr	r3, [pc, #504]	@ (8007018 <_printf_float+0x2d8>)
 8006e1e:	e7d4      	b.n	8006dca <_printf_float+0x8a>
 8006e20:	6863      	ldr	r3, [r4, #4]
 8006e22:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006e26:	9206      	str	r2, [sp, #24]
 8006e28:	1c5a      	adds	r2, r3, #1
 8006e2a:	d13b      	bne.n	8006ea4 <_printf_float+0x164>
 8006e2c:	2306      	movs	r3, #6
 8006e2e:	6063      	str	r3, [r4, #4]
 8006e30:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006e34:	2300      	movs	r3, #0
 8006e36:	6022      	str	r2, [r4, #0]
 8006e38:	9303      	str	r3, [sp, #12]
 8006e3a:	ab0a      	add	r3, sp, #40	@ 0x28
 8006e3c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006e40:	ab09      	add	r3, sp, #36	@ 0x24
 8006e42:	9300      	str	r3, [sp, #0]
 8006e44:	6861      	ldr	r1, [r4, #4]
 8006e46:	ec49 8b10 	vmov	d0, r8, r9
 8006e4a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006e4e:	4628      	mov	r0, r5
 8006e50:	f7ff fed6 	bl	8006c00 <__cvt>
 8006e54:	9b06      	ldr	r3, [sp, #24]
 8006e56:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006e58:	2b47      	cmp	r3, #71	@ 0x47
 8006e5a:	4680      	mov	r8, r0
 8006e5c:	d129      	bne.n	8006eb2 <_printf_float+0x172>
 8006e5e:	1cc8      	adds	r0, r1, #3
 8006e60:	db02      	blt.n	8006e68 <_printf_float+0x128>
 8006e62:	6863      	ldr	r3, [r4, #4]
 8006e64:	4299      	cmp	r1, r3
 8006e66:	dd41      	ble.n	8006eec <_printf_float+0x1ac>
 8006e68:	f1aa 0a02 	sub.w	sl, sl, #2
 8006e6c:	fa5f fa8a 	uxtb.w	sl, sl
 8006e70:	3901      	subs	r1, #1
 8006e72:	4652      	mov	r2, sl
 8006e74:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006e78:	9109      	str	r1, [sp, #36]	@ 0x24
 8006e7a:	f7ff ff26 	bl	8006cca <__exponent>
 8006e7e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006e80:	1813      	adds	r3, r2, r0
 8006e82:	2a01      	cmp	r2, #1
 8006e84:	4681      	mov	r9, r0
 8006e86:	6123      	str	r3, [r4, #16]
 8006e88:	dc02      	bgt.n	8006e90 <_printf_float+0x150>
 8006e8a:	6822      	ldr	r2, [r4, #0]
 8006e8c:	07d2      	lsls	r2, r2, #31
 8006e8e:	d501      	bpl.n	8006e94 <_printf_float+0x154>
 8006e90:	3301      	adds	r3, #1
 8006e92:	6123      	str	r3, [r4, #16]
 8006e94:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d0a2      	beq.n	8006de2 <_printf_float+0xa2>
 8006e9c:	232d      	movs	r3, #45	@ 0x2d
 8006e9e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ea2:	e79e      	b.n	8006de2 <_printf_float+0xa2>
 8006ea4:	9a06      	ldr	r2, [sp, #24]
 8006ea6:	2a47      	cmp	r2, #71	@ 0x47
 8006ea8:	d1c2      	bne.n	8006e30 <_printf_float+0xf0>
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d1c0      	bne.n	8006e30 <_printf_float+0xf0>
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e7bd      	b.n	8006e2e <_printf_float+0xee>
 8006eb2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006eb6:	d9db      	bls.n	8006e70 <_printf_float+0x130>
 8006eb8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006ebc:	d118      	bne.n	8006ef0 <_printf_float+0x1b0>
 8006ebe:	2900      	cmp	r1, #0
 8006ec0:	6863      	ldr	r3, [r4, #4]
 8006ec2:	dd0b      	ble.n	8006edc <_printf_float+0x19c>
 8006ec4:	6121      	str	r1, [r4, #16]
 8006ec6:	b913      	cbnz	r3, 8006ece <_printf_float+0x18e>
 8006ec8:	6822      	ldr	r2, [r4, #0]
 8006eca:	07d0      	lsls	r0, r2, #31
 8006ecc:	d502      	bpl.n	8006ed4 <_printf_float+0x194>
 8006ece:	3301      	adds	r3, #1
 8006ed0:	440b      	add	r3, r1
 8006ed2:	6123      	str	r3, [r4, #16]
 8006ed4:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006ed6:	f04f 0900 	mov.w	r9, #0
 8006eda:	e7db      	b.n	8006e94 <_printf_float+0x154>
 8006edc:	b913      	cbnz	r3, 8006ee4 <_printf_float+0x1a4>
 8006ede:	6822      	ldr	r2, [r4, #0]
 8006ee0:	07d2      	lsls	r2, r2, #31
 8006ee2:	d501      	bpl.n	8006ee8 <_printf_float+0x1a8>
 8006ee4:	3302      	adds	r3, #2
 8006ee6:	e7f4      	b.n	8006ed2 <_printf_float+0x192>
 8006ee8:	2301      	movs	r3, #1
 8006eea:	e7f2      	b.n	8006ed2 <_printf_float+0x192>
 8006eec:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006ef0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ef2:	4299      	cmp	r1, r3
 8006ef4:	db05      	blt.n	8006f02 <_printf_float+0x1c2>
 8006ef6:	6823      	ldr	r3, [r4, #0]
 8006ef8:	6121      	str	r1, [r4, #16]
 8006efa:	07d8      	lsls	r0, r3, #31
 8006efc:	d5ea      	bpl.n	8006ed4 <_printf_float+0x194>
 8006efe:	1c4b      	adds	r3, r1, #1
 8006f00:	e7e7      	b.n	8006ed2 <_printf_float+0x192>
 8006f02:	2900      	cmp	r1, #0
 8006f04:	bfd4      	ite	le
 8006f06:	f1c1 0202 	rsble	r2, r1, #2
 8006f0a:	2201      	movgt	r2, #1
 8006f0c:	4413      	add	r3, r2
 8006f0e:	e7e0      	b.n	8006ed2 <_printf_float+0x192>
 8006f10:	6823      	ldr	r3, [r4, #0]
 8006f12:	055a      	lsls	r2, r3, #21
 8006f14:	d407      	bmi.n	8006f26 <_printf_float+0x1e6>
 8006f16:	6923      	ldr	r3, [r4, #16]
 8006f18:	4642      	mov	r2, r8
 8006f1a:	4631      	mov	r1, r6
 8006f1c:	4628      	mov	r0, r5
 8006f1e:	47b8      	blx	r7
 8006f20:	3001      	adds	r0, #1
 8006f22:	d12b      	bne.n	8006f7c <_printf_float+0x23c>
 8006f24:	e767      	b.n	8006df6 <_printf_float+0xb6>
 8006f26:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006f2a:	f240 80dd 	bls.w	80070e8 <_printf_float+0x3a8>
 8006f2e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006f32:	2200      	movs	r2, #0
 8006f34:	2300      	movs	r3, #0
 8006f36:	f7f9 fdd7 	bl	8000ae8 <__aeabi_dcmpeq>
 8006f3a:	2800      	cmp	r0, #0
 8006f3c:	d033      	beq.n	8006fa6 <_printf_float+0x266>
 8006f3e:	4a37      	ldr	r2, [pc, #220]	@ (800701c <_printf_float+0x2dc>)
 8006f40:	2301      	movs	r3, #1
 8006f42:	4631      	mov	r1, r6
 8006f44:	4628      	mov	r0, r5
 8006f46:	47b8      	blx	r7
 8006f48:	3001      	adds	r0, #1
 8006f4a:	f43f af54 	beq.w	8006df6 <_printf_float+0xb6>
 8006f4e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006f52:	4543      	cmp	r3, r8
 8006f54:	db02      	blt.n	8006f5c <_printf_float+0x21c>
 8006f56:	6823      	ldr	r3, [r4, #0]
 8006f58:	07d8      	lsls	r0, r3, #31
 8006f5a:	d50f      	bpl.n	8006f7c <_printf_float+0x23c>
 8006f5c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f60:	4631      	mov	r1, r6
 8006f62:	4628      	mov	r0, r5
 8006f64:	47b8      	blx	r7
 8006f66:	3001      	adds	r0, #1
 8006f68:	f43f af45 	beq.w	8006df6 <_printf_float+0xb6>
 8006f6c:	f04f 0900 	mov.w	r9, #0
 8006f70:	f108 38ff 	add.w	r8, r8, #4294967295
 8006f74:	f104 0a1a 	add.w	sl, r4, #26
 8006f78:	45c8      	cmp	r8, r9
 8006f7a:	dc09      	bgt.n	8006f90 <_printf_float+0x250>
 8006f7c:	6823      	ldr	r3, [r4, #0]
 8006f7e:	079b      	lsls	r3, r3, #30
 8006f80:	f100 8103 	bmi.w	800718a <_printf_float+0x44a>
 8006f84:	68e0      	ldr	r0, [r4, #12]
 8006f86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f88:	4298      	cmp	r0, r3
 8006f8a:	bfb8      	it	lt
 8006f8c:	4618      	movlt	r0, r3
 8006f8e:	e734      	b.n	8006dfa <_printf_float+0xba>
 8006f90:	2301      	movs	r3, #1
 8006f92:	4652      	mov	r2, sl
 8006f94:	4631      	mov	r1, r6
 8006f96:	4628      	mov	r0, r5
 8006f98:	47b8      	blx	r7
 8006f9a:	3001      	adds	r0, #1
 8006f9c:	f43f af2b 	beq.w	8006df6 <_printf_float+0xb6>
 8006fa0:	f109 0901 	add.w	r9, r9, #1
 8006fa4:	e7e8      	b.n	8006f78 <_printf_float+0x238>
 8006fa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	dc39      	bgt.n	8007020 <_printf_float+0x2e0>
 8006fac:	4a1b      	ldr	r2, [pc, #108]	@ (800701c <_printf_float+0x2dc>)
 8006fae:	2301      	movs	r3, #1
 8006fb0:	4631      	mov	r1, r6
 8006fb2:	4628      	mov	r0, r5
 8006fb4:	47b8      	blx	r7
 8006fb6:	3001      	adds	r0, #1
 8006fb8:	f43f af1d 	beq.w	8006df6 <_printf_float+0xb6>
 8006fbc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006fc0:	ea59 0303 	orrs.w	r3, r9, r3
 8006fc4:	d102      	bne.n	8006fcc <_printf_float+0x28c>
 8006fc6:	6823      	ldr	r3, [r4, #0]
 8006fc8:	07d9      	lsls	r1, r3, #31
 8006fca:	d5d7      	bpl.n	8006f7c <_printf_float+0x23c>
 8006fcc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006fd0:	4631      	mov	r1, r6
 8006fd2:	4628      	mov	r0, r5
 8006fd4:	47b8      	blx	r7
 8006fd6:	3001      	adds	r0, #1
 8006fd8:	f43f af0d 	beq.w	8006df6 <_printf_float+0xb6>
 8006fdc:	f04f 0a00 	mov.w	sl, #0
 8006fe0:	f104 0b1a 	add.w	fp, r4, #26
 8006fe4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fe6:	425b      	negs	r3, r3
 8006fe8:	4553      	cmp	r3, sl
 8006fea:	dc01      	bgt.n	8006ff0 <_printf_float+0x2b0>
 8006fec:	464b      	mov	r3, r9
 8006fee:	e793      	b.n	8006f18 <_printf_float+0x1d8>
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	465a      	mov	r2, fp
 8006ff4:	4631      	mov	r1, r6
 8006ff6:	4628      	mov	r0, r5
 8006ff8:	47b8      	blx	r7
 8006ffa:	3001      	adds	r0, #1
 8006ffc:	f43f aefb 	beq.w	8006df6 <_printf_float+0xb6>
 8007000:	f10a 0a01 	add.w	sl, sl, #1
 8007004:	e7ee      	b.n	8006fe4 <_printf_float+0x2a4>
 8007006:	bf00      	nop
 8007008:	7fefffff 	.word	0x7fefffff
 800700c:	080099fc 	.word	0x080099fc
 8007010:	08009a00 	.word	0x08009a00
 8007014:	08009a04 	.word	0x08009a04
 8007018:	08009a08 	.word	0x08009a08
 800701c:	08009a0c 	.word	0x08009a0c
 8007020:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007022:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007026:	4553      	cmp	r3, sl
 8007028:	bfa8      	it	ge
 800702a:	4653      	movge	r3, sl
 800702c:	2b00      	cmp	r3, #0
 800702e:	4699      	mov	r9, r3
 8007030:	dc36      	bgt.n	80070a0 <_printf_float+0x360>
 8007032:	f04f 0b00 	mov.w	fp, #0
 8007036:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800703a:	f104 021a 	add.w	r2, r4, #26
 800703e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007040:	9306      	str	r3, [sp, #24]
 8007042:	eba3 0309 	sub.w	r3, r3, r9
 8007046:	455b      	cmp	r3, fp
 8007048:	dc31      	bgt.n	80070ae <_printf_float+0x36e>
 800704a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800704c:	459a      	cmp	sl, r3
 800704e:	dc3a      	bgt.n	80070c6 <_printf_float+0x386>
 8007050:	6823      	ldr	r3, [r4, #0]
 8007052:	07da      	lsls	r2, r3, #31
 8007054:	d437      	bmi.n	80070c6 <_printf_float+0x386>
 8007056:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007058:	ebaa 0903 	sub.w	r9, sl, r3
 800705c:	9b06      	ldr	r3, [sp, #24]
 800705e:	ebaa 0303 	sub.w	r3, sl, r3
 8007062:	4599      	cmp	r9, r3
 8007064:	bfa8      	it	ge
 8007066:	4699      	movge	r9, r3
 8007068:	f1b9 0f00 	cmp.w	r9, #0
 800706c:	dc33      	bgt.n	80070d6 <_printf_float+0x396>
 800706e:	f04f 0800 	mov.w	r8, #0
 8007072:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007076:	f104 0b1a 	add.w	fp, r4, #26
 800707a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800707c:	ebaa 0303 	sub.w	r3, sl, r3
 8007080:	eba3 0309 	sub.w	r3, r3, r9
 8007084:	4543      	cmp	r3, r8
 8007086:	f77f af79 	ble.w	8006f7c <_printf_float+0x23c>
 800708a:	2301      	movs	r3, #1
 800708c:	465a      	mov	r2, fp
 800708e:	4631      	mov	r1, r6
 8007090:	4628      	mov	r0, r5
 8007092:	47b8      	blx	r7
 8007094:	3001      	adds	r0, #1
 8007096:	f43f aeae 	beq.w	8006df6 <_printf_float+0xb6>
 800709a:	f108 0801 	add.w	r8, r8, #1
 800709e:	e7ec      	b.n	800707a <_printf_float+0x33a>
 80070a0:	4642      	mov	r2, r8
 80070a2:	4631      	mov	r1, r6
 80070a4:	4628      	mov	r0, r5
 80070a6:	47b8      	blx	r7
 80070a8:	3001      	adds	r0, #1
 80070aa:	d1c2      	bne.n	8007032 <_printf_float+0x2f2>
 80070ac:	e6a3      	b.n	8006df6 <_printf_float+0xb6>
 80070ae:	2301      	movs	r3, #1
 80070b0:	4631      	mov	r1, r6
 80070b2:	4628      	mov	r0, r5
 80070b4:	9206      	str	r2, [sp, #24]
 80070b6:	47b8      	blx	r7
 80070b8:	3001      	adds	r0, #1
 80070ba:	f43f ae9c 	beq.w	8006df6 <_printf_float+0xb6>
 80070be:	9a06      	ldr	r2, [sp, #24]
 80070c0:	f10b 0b01 	add.w	fp, fp, #1
 80070c4:	e7bb      	b.n	800703e <_printf_float+0x2fe>
 80070c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80070ca:	4631      	mov	r1, r6
 80070cc:	4628      	mov	r0, r5
 80070ce:	47b8      	blx	r7
 80070d0:	3001      	adds	r0, #1
 80070d2:	d1c0      	bne.n	8007056 <_printf_float+0x316>
 80070d4:	e68f      	b.n	8006df6 <_printf_float+0xb6>
 80070d6:	9a06      	ldr	r2, [sp, #24]
 80070d8:	464b      	mov	r3, r9
 80070da:	4442      	add	r2, r8
 80070dc:	4631      	mov	r1, r6
 80070de:	4628      	mov	r0, r5
 80070e0:	47b8      	blx	r7
 80070e2:	3001      	adds	r0, #1
 80070e4:	d1c3      	bne.n	800706e <_printf_float+0x32e>
 80070e6:	e686      	b.n	8006df6 <_printf_float+0xb6>
 80070e8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80070ec:	f1ba 0f01 	cmp.w	sl, #1
 80070f0:	dc01      	bgt.n	80070f6 <_printf_float+0x3b6>
 80070f2:	07db      	lsls	r3, r3, #31
 80070f4:	d536      	bpl.n	8007164 <_printf_float+0x424>
 80070f6:	2301      	movs	r3, #1
 80070f8:	4642      	mov	r2, r8
 80070fa:	4631      	mov	r1, r6
 80070fc:	4628      	mov	r0, r5
 80070fe:	47b8      	blx	r7
 8007100:	3001      	adds	r0, #1
 8007102:	f43f ae78 	beq.w	8006df6 <_printf_float+0xb6>
 8007106:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800710a:	4631      	mov	r1, r6
 800710c:	4628      	mov	r0, r5
 800710e:	47b8      	blx	r7
 8007110:	3001      	adds	r0, #1
 8007112:	f43f ae70 	beq.w	8006df6 <_printf_float+0xb6>
 8007116:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800711a:	2200      	movs	r2, #0
 800711c:	2300      	movs	r3, #0
 800711e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007122:	f7f9 fce1 	bl	8000ae8 <__aeabi_dcmpeq>
 8007126:	b9c0      	cbnz	r0, 800715a <_printf_float+0x41a>
 8007128:	4653      	mov	r3, sl
 800712a:	f108 0201 	add.w	r2, r8, #1
 800712e:	4631      	mov	r1, r6
 8007130:	4628      	mov	r0, r5
 8007132:	47b8      	blx	r7
 8007134:	3001      	adds	r0, #1
 8007136:	d10c      	bne.n	8007152 <_printf_float+0x412>
 8007138:	e65d      	b.n	8006df6 <_printf_float+0xb6>
 800713a:	2301      	movs	r3, #1
 800713c:	465a      	mov	r2, fp
 800713e:	4631      	mov	r1, r6
 8007140:	4628      	mov	r0, r5
 8007142:	47b8      	blx	r7
 8007144:	3001      	adds	r0, #1
 8007146:	f43f ae56 	beq.w	8006df6 <_printf_float+0xb6>
 800714a:	f108 0801 	add.w	r8, r8, #1
 800714e:	45d0      	cmp	r8, sl
 8007150:	dbf3      	blt.n	800713a <_printf_float+0x3fa>
 8007152:	464b      	mov	r3, r9
 8007154:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007158:	e6df      	b.n	8006f1a <_printf_float+0x1da>
 800715a:	f04f 0800 	mov.w	r8, #0
 800715e:	f104 0b1a 	add.w	fp, r4, #26
 8007162:	e7f4      	b.n	800714e <_printf_float+0x40e>
 8007164:	2301      	movs	r3, #1
 8007166:	4642      	mov	r2, r8
 8007168:	e7e1      	b.n	800712e <_printf_float+0x3ee>
 800716a:	2301      	movs	r3, #1
 800716c:	464a      	mov	r2, r9
 800716e:	4631      	mov	r1, r6
 8007170:	4628      	mov	r0, r5
 8007172:	47b8      	blx	r7
 8007174:	3001      	adds	r0, #1
 8007176:	f43f ae3e 	beq.w	8006df6 <_printf_float+0xb6>
 800717a:	f108 0801 	add.w	r8, r8, #1
 800717e:	68e3      	ldr	r3, [r4, #12]
 8007180:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007182:	1a5b      	subs	r3, r3, r1
 8007184:	4543      	cmp	r3, r8
 8007186:	dcf0      	bgt.n	800716a <_printf_float+0x42a>
 8007188:	e6fc      	b.n	8006f84 <_printf_float+0x244>
 800718a:	f04f 0800 	mov.w	r8, #0
 800718e:	f104 0919 	add.w	r9, r4, #25
 8007192:	e7f4      	b.n	800717e <_printf_float+0x43e>

08007194 <_printf_common>:
 8007194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007198:	4616      	mov	r6, r2
 800719a:	4698      	mov	r8, r3
 800719c:	688a      	ldr	r2, [r1, #8]
 800719e:	690b      	ldr	r3, [r1, #16]
 80071a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80071a4:	4293      	cmp	r3, r2
 80071a6:	bfb8      	it	lt
 80071a8:	4613      	movlt	r3, r2
 80071aa:	6033      	str	r3, [r6, #0]
 80071ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80071b0:	4607      	mov	r7, r0
 80071b2:	460c      	mov	r4, r1
 80071b4:	b10a      	cbz	r2, 80071ba <_printf_common+0x26>
 80071b6:	3301      	adds	r3, #1
 80071b8:	6033      	str	r3, [r6, #0]
 80071ba:	6823      	ldr	r3, [r4, #0]
 80071bc:	0699      	lsls	r1, r3, #26
 80071be:	bf42      	ittt	mi
 80071c0:	6833      	ldrmi	r3, [r6, #0]
 80071c2:	3302      	addmi	r3, #2
 80071c4:	6033      	strmi	r3, [r6, #0]
 80071c6:	6825      	ldr	r5, [r4, #0]
 80071c8:	f015 0506 	ands.w	r5, r5, #6
 80071cc:	d106      	bne.n	80071dc <_printf_common+0x48>
 80071ce:	f104 0a19 	add.w	sl, r4, #25
 80071d2:	68e3      	ldr	r3, [r4, #12]
 80071d4:	6832      	ldr	r2, [r6, #0]
 80071d6:	1a9b      	subs	r3, r3, r2
 80071d8:	42ab      	cmp	r3, r5
 80071da:	dc26      	bgt.n	800722a <_printf_common+0x96>
 80071dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80071e0:	6822      	ldr	r2, [r4, #0]
 80071e2:	3b00      	subs	r3, #0
 80071e4:	bf18      	it	ne
 80071e6:	2301      	movne	r3, #1
 80071e8:	0692      	lsls	r2, r2, #26
 80071ea:	d42b      	bmi.n	8007244 <_printf_common+0xb0>
 80071ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80071f0:	4641      	mov	r1, r8
 80071f2:	4638      	mov	r0, r7
 80071f4:	47c8      	blx	r9
 80071f6:	3001      	adds	r0, #1
 80071f8:	d01e      	beq.n	8007238 <_printf_common+0xa4>
 80071fa:	6823      	ldr	r3, [r4, #0]
 80071fc:	6922      	ldr	r2, [r4, #16]
 80071fe:	f003 0306 	and.w	r3, r3, #6
 8007202:	2b04      	cmp	r3, #4
 8007204:	bf02      	ittt	eq
 8007206:	68e5      	ldreq	r5, [r4, #12]
 8007208:	6833      	ldreq	r3, [r6, #0]
 800720a:	1aed      	subeq	r5, r5, r3
 800720c:	68a3      	ldr	r3, [r4, #8]
 800720e:	bf0c      	ite	eq
 8007210:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007214:	2500      	movne	r5, #0
 8007216:	4293      	cmp	r3, r2
 8007218:	bfc4      	itt	gt
 800721a:	1a9b      	subgt	r3, r3, r2
 800721c:	18ed      	addgt	r5, r5, r3
 800721e:	2600      	movs	r6, #0
 8007220:	341a      	adds	r4, #26
 8007222:	42b5      	cmp	r5, r6
 8007224:	d11a      	bne.n	800725c <_printf_common+0xc8>
 8007226:	2000      	movs	r0, #0
 8007228:	e008      	b.n	800723c <_printf_common+0xa8>
 800722a:	2301      	movs	r3, #1
 800722c:	4652      	mov	r2, sl
 800722e:	4641      	mov	r1, r8
 8007230:	4638      	mov	r0, r7
 8007232:	47c8      	blx	r9
 8007234:	3001      	adds	r0, #1
 8007236:	d103      	bne.n	8007240 <_printf_common+0xac>
 8007238:	f04f 30ff 	mov.w	r0, #4294967295
 800723c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007240:	3501      	adds	r5, #1
 8007242:	e7c6      	b.n	80071d2 <_printf_common+0x3e>
 8007244:	18e1      	adds	r1, r4, r3
 8007246:	1c5a      	adds	r2, r3, #1
 8007248:	2030      	movs	r0, #48	@ 0x30
 800724a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800724e:	4422      	add	r2, r4
 8007250:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007254:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007258:	3302      	adds	r3, #2
 800725a:	e7c7      	b.n	80071ec <_printf_common+0x58>
 800725c:	2301      	movs	r3, #1
 800725e:	4622      	mov	r2, r4
 8007260:	4641      	mov	r1, r8
 8007262:	4638      	mov	r0, r7
 8007264:	47c8      	blx	r9
 8007266:	3001      	adds	r0, #1
 8007268:	d0e6      	beq.n	8007238 <_printf_common+0xa4>
 800726a:	3601      	adds	r6, #1
 800726c:	e7d9      	b.n	8007222 <_printf_common+0x8e>
	...

08007270 <_printf_i>:
 8007270:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007274:	7e0f      	ldrb	r7, [r1, #24]
 8007276:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007278:	2f78      	cmp	r7, #120	@ 0x78
 800727a:	4691      	mov	r9, r2
 800727c:	4680      	mov	r8, r0
 800727e:	460c      	mov	r4, r1
 8007280:	469a      	mov	sl, r3
 8007282:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007286:	d807      	bhi.n	8007298 <_printf_i+0x28>
 8007288:	2f62      	cmp	r7, #98	@ 0x62
 800728a:	d80a      	bhi.n	80072a2 <_printf_i+0x32>
 800728c:	2f00      	cmp	r7, #0
 800728e:	f000 80d2 	beq.w	8007436 <_printf_i+0x1c6>
 8007292:	2f58      	cmp	r7, #88	@ 0x58
 8007294:	f000 80b9 	beq.w	800740a <_printf_i+0x19a>
 8007298:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800729c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80072a0:	e03a      	b.n	8007318 <_printf_i+0xa8>
 80072a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80072a6:	2b15      	cmp	r3, #21
 80072a8:	d8f6      	bhi.n	8007298 <_printf_i+0x28>
 80072aa:	a101      	add	r1, pc, #4	@ (adr r1, 80072b0 <_printf_i+0x40>)
 80072ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80072b0:	08007309 	.word	0x08007309
 80072b4:	0800731d 	.word	0x0800731d
 80072b8:	08007299 	.word	0x08007299
 80072bc:	08007299 	.word	0x08007299
 80072c0:	08007299 	.word	0x08007299
 80072c4:	08007299 	.word	0x08007299
 80072c8:	0800731d 	.word	0x0800731d
 80072cc:	08007299 	.word	0x08007299
 80072d0:	08007299 	.word	0x08007299
 80072d4:	08007299 	.word	0x08007299
 80072d8:	08007299 	.word	0x08007299
 80072dc:	0800741d 	.word	0x0800741d
 80072e0:	08007347 	.word	0x08007347
 80072e4:	080073d7 	.word	0x080073d7
 80072e8:	08007299 	.word	0x08007299
 80072ec:	08007299 	.word	0x08007299
 80072f0:	0800743f 	.word	0x0800743f
 80072f4:	08007299 	.word	0x08007299
 80072f8:	08007347 	.word	0x08007347
 80072fc:	08007299 	.word	0x08007299
 8007300:	08007299 	.word	0x08007299
 8007304:	080073df 	.word	0x080073df
 8007308:	6833      	ldr	r3, [r6, #0]
 800730a:	1d1a      	adds	r2, r3, #4
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	6032      	str	r2, [r6, #0]
 8007310:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007314:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007318:	2301      	movs	r3, #1
 800731a:	e09d      	b.n	8007458 <_printf_i+0x1e8>
 800731c:	6833      	ldr	r3, [r6, #0]
 800731e:	6820      	ldr	r0, [r4, #0]
 8007320:	1d19      	adds	r1, r3, #4
 8007322:	6031      	str	r1, [r6, #0]
 8007324:	0606      	lsls	r6, r0, #24
 8007326:	d501      	bpl.n	800732c <_printf_i+0xbc>
 8007328:	681d      	ldr	r5, [r3, #0]
 800732a:	e003      	b.n	8007334 <_printf_i+0xc4>
 800732c:	0645      	lsls	r5, r0, #25
 800732e:	d5fb      	bpl.n	8007328 <_printf_i+0xb8>
 8007330:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007334:	2d00      	cmp	r5, #0
 8007336:	da03      	bge.n	8007340 <_printf_i+0xd0>
 8007338:	232d      	movs	r3, #45	@ 0x2d
 800733a:	426d      	negs	r5, r5
 800733c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007340:	4859      	ldr	r0, [pc, #356]	@ (80074a8 <_printf_i+0x238>)
 8007342:	230a      	movs	r3, #10
 8007344:	e011      	b.n	800736a <_printf_i+0xfa>
 8007346:	6821      	ldr	r1, [r4, #0]
 8007348:	6833      	ldr	r3, [r6, #0]
 800734a:	0608      	lsls	r0, r1, #24
 800734c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007350:	d402      	bmi.n	8007358 <_printf_i+0xe8>
 8007352:	0649      	lsls	r1, r1, #25
 8007354:	bf48      	it	mi
 8007356:	b2ad      	uxthmi	r5, r5
 8007358:	2f6f      	cmp	r7, #111	@ 0x6f
 800735a:	4853      	ldr	r0, [pc, #332]	@ (80074a8 <_printf_i+0x238>)
 800735c:	6033      	str	r3, [r6, #0]
 800735e:	bf14      	ite	ne
 8007360:	230a      	movne	r3, #10
 8007362:	2308      	moveq	r3, #8
 8007364:	2100      	movs	r1, #0
 8007366:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800736a:	6866      	ldr	r6, [r4, #4]
 800736c:	60a6      	str	r6, [r4, #8]
 800736e:	2e00      	cmp	r6, #0
 8007370:	bfa2      	ittt	ge
 8007372:	6821      	ldrge	r1, [r4, #0]
 8007374:	f021 0104 	bicge.w	r1, r1, #4
 8007378:	6021      	strge	r1, [r4, #0]
 800737a:	b90d      	cbnz	r5, 8007380 <_printf_i+0x110>
 800737c:	2e00      	cmp	r6, #0
 800737e:	d04b      	beq.n	8007418 <_printf_i+0x1a8>
 8007380:	4616      	mov	r6, r2
 8007382:	fbb5 f1f3 	udiv	r1, r5, r3
 8007386:	fb03 5711 	mls	r7, r3, r1, r5
 800738a:	5dc7      	ldrb	r7, [r0, r7]
 800738c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007390:	462f      	mov	r7, r5
 8007392:	42bb      	cmp	r3, r7
 8007394:	460d      	mov	r5, r1
 8007396:	d9f4      	bls.n	8007382 <_printf_i+0x112>
 8007398:	2b08      	cmp	r3, #8
 800739a:	d10b      	bne.n	80073b4 <_printf_i+0x144>
 800739c:	6823      	ldr	r3, [r4, #0]
 800739e:	07df      	lsls	r7, r3, #31
 80073a0:	d508      	bpl.n	80073b4 <_printf_i+0x144>
 80073a2:	6923      	ldr	r3, [r4, #16]
 80073a4:	6861      	ldr	r1, [r4, #4]
 80073a6:	4299      	cmp	r1, r3
 80073a8:	bfde      	ittt	le
 80073aa:	2330      	movle	r3, #48	@ 0x30
 80073ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80073b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80073b4:	1b92      	subs	r2, r2, r6
 80073b6:	6122      	str	r2, [r4, #16]
 80073b8:	f8cd a000 	str.w	sl, [sp]
 80073bc:	464b      	mov	r3, r9
 80073be:	aa03      	add	r2, sp, #12
 80073c0:	4621      	mov	r1, r4
 80073c2:	4640      	mov	r0, r8
 80073c4:	f7ff fee6 	bl	8007194 <_printf_common>
 80073c8:	3001      	adds	r0, #1
 80073ca:	d14a      	bne.n	8007462 <_printf_i+0x1f2>
 80073cc:	f04f 30ff 	mov.w	r0, #4294967295
 80073d0:	b004      	add	sp, #16
 80073d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073d6:	6823      	ldr	r3, [r4, #0]
 80073d8:	f043 0320 	orr.w	r3, r3, #32
 80073dc:	6023      	str	r3, [r4, #0]
 80073de:	4833      	ldr	r0, [pc, #204]	@ (80074ac <_printf_i+0x23c>)
 80073e0:	2778      	movs	r7, #120	@ 0x78
 80073e2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80073e6:	6823      	ldr	r3, [r4, #0]
 80073e8:	6831      	ldr	r1, [r6, #0]
 80073ea:	061f      	lsls	r7, r3, #24
 80073ec:	f851 5b04 	ldr.w	r5, [r1], #4
 80073f0:	d402      	bmi.n	80073f8 <_printf_i+0x188>
 80073f2:	065f      	lsls	r7, r3, #25
 80073f4:	bf48      	it	mi
 80073f6:	b2ad      	uxthmi	r5, r5
 80073f8:	6031      	str	r1, [r6, #0]
 80073fa:	07d9      	lsls	r1, r3, #31
 80073fc:	bf44      	itt	mi
 80073fe:	f043 0320 	orrmi.w	r3, r3, #32
 8007402:	6023      	strmi	r3, [r4, #0]
 8007404:	b11d      	cbz	r5, 800740e <_printf_i+0x19e>
 8007406:	2310      	movs	r3, #16
 8007408:	e7ac      	b.n	8007364 <_printf_i+0xf4>
 800740a:	4827      	ldr	r0, [pc, #156]	@ (80074a8 <_printf_i+0x238>)
 800740c:	e7e9      	b.n	80073e2 <_printf_i+0x172>
 800740e:	6823      	ldr	r3, [r4, #0]
 8007410:	f023 0320 	bic.w	r3, r3, #32
 8007414:	6023      	str	r3, [r4, #0]
 8007416:	e7f6      	b.n	8007406 <_printf_i+0x196>
 8007418:	4616      	mov	r6, r2
 800741a:	e7bd      	b.n	8007398 <_printf_i+0x128>
 800741c:	6833      	ldr	r3, [r6, #0]
 800741e:	6825      	ldr	r5, [r4, #0]
 8007420:	6961      	ldr	r1, [r4, #20]
 8007422:	1d18      	adds	r0, r3, #4
 8007424:	6030      	str	r0, [r6, #0]
 8007426:	062e      	lsls	r6, r5, #24
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	d501      	bpl.n	8007430 <_printf_i+0x1c0>
 800742c:	6019      	str	r1, [r3, #0]
 800742e:	e002      	b.n	8007436 <_printf_i+0x1c6>
 8007430:	0668      	lsls	r0, r5, #25
 8007432:	d5fb      	bpl.n	800742c <_printf_i+0x1bc>
 8007434:	8019      	strh	r1, [r3, #0]
 8007436:	2300      	movs	r3, #0
 8007438:	6123      	str	r3, [r4, #16]
 800743a:	4616      	mov	r6, r2
 800743c:	e7bc      	b.n	80073b8 <_printf_i+0x148>
 800743e:	6833      	ldr	r3, [r6, #0]
 8007440:	1d1a      	adds	r2, r3, #4
 8007442:	6032      	str	r2, [r6, #0]
 8007444:	681e      	ldr	r6, [r3, #0]
 8007446:	6862      	ldr	r2, [r4, #4]
 8007448:	2100      	movs	r1, #0
 800744a:	4630      	mov	r0, r6
 800744c:	f7f8 fed0 	bl	80001f0 <memchr>
 8007450:	b108      	cbz	r0, 8007456 <_printf_i+0x1e6>
 8007452:	1b80      	subs	r0, r0, r6
 8007454:	6060      	str	r0, [r4, #4]
 8007456:	6863      	ldr	r3, [r4, #4]
 8007458:	6123      	str	r3, [r4, #16]
 800745a:	2300      	movs	r3, #0
 800745c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007460:	e7aa      	b.n	80073b8 <_printf_i+0x148>
 8007462:	6923      	ldr	r3, [r4, #16]
 8007464:	4632      	mov	r2, r6
 8007466:	4649      	mov	r1, r9
 8007468:	4640      	mov	r0, r8
 800746a:	47d0      	blx	sl
 800746c:	3001      	adds	r0, #1
 800746e:	d0ad      	beq.n	80073cc <_printf_i+0x15c>
 8007470:	6823      	ldr	r3, [r4, #0]
 8007472:	079b      	lsls	r3, r3, #30
 8007474:	d413      	bmi.n	800749e <_printf_i+0x22e>
 8007476:	68e0      	ldr	r0, [r4, #12]
 8007478:	9b03      	ldr	r3, [sp, #12]
 800747a:	4298      	cmp	r0, r3
 800747c:	bfb8      	it	lt
 800747e:	4618      	movlt	r0, r3
 8007480:	e7a6      	b.n	80073d0 <_printf_i+0x160>
 8007482:	2301      	movs	r3, #1
 8007484:	4632      	mov	r2, r6
 8007486:	4649      	mov	r1, r9
 8007488:	4640      	mov	r0, r8
 800748a:	47d0      	blx	sl
 800748c:	3001      	adds	r0, #1
 800748e:	d09d      	beq.n	80073cc <_printf_i+0x15c>
 8007490:	3501      	adds	r5, #1
 8007492:	68e3      	ldr	r3, [r4, #12]
 8007494:	9903      	ldr	r1, [sp, #12]
 8007496:	1a5b      	subs	r3, r3, r1
 8007498:	42ab      	cmp	r3, r5
 800749a:	dcf2      	bgt.n	8007482 <_printf_i+0x212>
 800749c:	e7eb      	b.n	8007476 <_printf_i+0x206>
 800749e:	2500      	movs	r5, #0
 80074a0:	f104 0619 	add.w	r6, r4, #25
 80074a4:	e7f5      	b.n	8007492 <_printf_i+0x222>
 80074a6:	bf00      	nop
 80074a8:	08009a0e 	.word	0x08009a0e
 80074ac:	08009a1f 	.word	0x08009a1f

080074b0 <std>:
 80074b0:	2300      	movs	r3, #0
 80074b2:	b510      	push	{r4, lr}
 80074b4:	4604      	mov	r4, r0
 80074b6:	e9c0 3300 	strd	r3, r3, [r0]
 80074ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80074be:	6083      	str	r3, [r0, #8]
 80074c0:	8181      	strh	r1, [r0, #12]
 80074c2:	6643      	str	r3, [r0, #100]	@ 0x64
 80074c4:	81c2      	strh	r2, [r0, #14]
 80074c6:	6183      	str	r3, [r0, #24]
 80074c8:	4619      	mov	r1, r3
 80074ca:	2208      	movs	r2, #8
 80074cc:	305c      	adds	r0, #92	@ 0x5c
 80074ce:	f000 f948 	bl	8007762 <memset>
 80074d2:	4b0d      	ldr	r3, [pc, #52]	@ (8007508 <std+0x58>)
 80074d4:	6263      	str	r3, [r4, #36]	@ 0x24
 80074d6:	4b0d      	ldr	r3, [pc, #52]	@ (800750c <std+0x5c>)
 80074d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80074da:	4b0d      	ldr	r3, [pc, #52]	@ (8007510 <std+0x60>)
 80074dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80074de:	4b0d      	ldr	r3, [pc, #52]	@ (8007514 <std+0x64>)
 80074e0:	6323      	str	r3, [r4, #48]	@ 0x30
 80074e2:	4b0d      	ldr	r3, [pc, #52]	@ (8007518 <std+0x68>)
 80074e4:	6224      	str	r4, [r4, #32]
 80074e6:	429c      	cmp	r4, r3
 80074e8:	d006      	beq.n	80074f8 <std+0x48>
 80074ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80074ee:	4294      	cmp	r4, r2
 80074f0:	d002      	beq.n	80074f8 <std+0x48>
 80074f2:	33d0      	adds	r3, #208	@ 0xd0
 80074f4:	429c      	cmp	r4, r3
 80074f6:	d105      	bne.n	8007504 <std+0x54>
 80074f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80074fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007500:	f000 b9ce 	b.w	80078a0 <__retarget_lock_init_recursive>
 8007504:	bd10      	pop	{r4, pc}
 8007506:	bf00      	nop
 8007508:	080076dd 	.word	0x080076dd
 800750c:	080076ff 	.word	0x080076ff
 8007510:	08007737 	.word	0x08007737
 8007514:	0800775b 	.word	0x0800775b
 8007518:	2000100c 	.word	0x2000100c

0800751c <stdio_exit_handler>:
 800751c:	4a02      	ldr	r2, [pc, #8]	@ (8007528 <stdio_exit_handler+0xc>)
 800751e:	4903      	ldr	r1, [pc, #12]	@ (800752c <stdio_exit_handler+0x10>)
 8007520:	4803      	ldr	r0, [pc, #12]	@ (8007530 <stdio_exit_handler+0x14>)
 8007522:	f000 b869 	b.w	80075f8 <_fwalk_sglue>
 8007526:	bf00      	nop
 8007528:	2000018c 	.word	0x2000018c
 800752c:	080090b1 	.word	0x080090b1
 8007530:	2000019c 	.word	0x2000019c

08007534 <cleanup_stdio>:
 8007534:	6841      	ldr	r1, [r0, #4]
 8007536:	4b0c      	ldr	r3, [pc, #48]	@ (8007568 <cleanup_stdio+0x34>)
 8007538:	4299      	cmp	r1, r3
 800753a:	b510      	push	{r4, lr}
 800753c:	4604      	mov	r4, r0
 800753e:	d001      	beq.n	8007544 <cleanup_stdio+0x10>
 8007540:	f001 fdb6 	bl	80090b0 <_fflush_r>
 8007544:	68a1      	ldr	r1, [r4, #8]
 8007546:	4b09      	ldr	r3, [pc, #36]	@ (800756c <cleanup_stdio+0x38>)
 8007548:	4299      	cmp	r1, r3
 800754a:	d002      	beq.n	8007552 <cleanup_stdio+0x1e>
 800754c:	4620      	mov	r0, r4
 800754e:	f001 fdaf 	bl	80090b0 <_fflush_r>
 8007552:	68e1      	ldr	r1, [r4, #12]
 8007554:	4b06      	ldr	r3, [pc, #24]	@ (8007570 <cleanup_stdio+0x3c>)
 8007556:	4299      	cmp	r1, r3
 8007558:	d004      	beq.n	8007564 <cleanup_stdio+0x30>
 800755a:	4620      	mov	r0, r4
 800755c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007560:	f001 bda6 	b.w	80090b0 <_fflush_r>
 8007564:	bd10      	pop	{r4, pc}
 8007566:	bf00      	nop
 8007568:	2000100c 	.word	0x2000100c
 800756c:	20001074 	.word	0x20001074
 8007570:	200010dc 	.word	0x200010dc

08007574 <global_stdio_init.part.0>:
 8007574:	b510      	push	{r4, lr}
 8007576:	4b0b      	ldr	r3, [pc, #44]	@ (80075a4 <global_stdio_init.part.0+0x30>)
 8007578:	4c0b      	ldr	r4, [pc, #44]	@ (80075a8 <global_stdio_init.part.0+0x34>)
 800757a:	4a0c      	ldr	r2, [pc, #48]	@ (80075ac <global_stdio_init.part.0+0x38>)
 800757c:	601a      	str	r2, [r3, #0]
 800757e:	4620      	mov	r0, r4
 8007580:	2200      	movs	r2, #0
 8007582:	2104      	movs	r1, #4
 8007584:	f7ff ff94 	bl	80074b0 <std>
 8007588:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800758c:	2201      	movs	r2, #1
 800758e:	2109      	movs	r1, #9
 8007590:	f7ff ff8e 	bl	80074b0 <std>
 8007594:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007598:	2202      	movs	r2, #2
 800759a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800759e:	2112      	movs	r1, #18
 80075a0:	f7ff bf86 	b.w	80074b0 <std>
 80075a4:	20001144 	.word	0x20001144
 80075a8:	2000100c 	.word	0x2000100c
 80075ac:	0800751d 	.word	0x0800751d

080075b0 <__sfp_lock_acquire>:
 80075b0:	4801      	ldr	r0, [pc, #4]	@ (80075b8 <__sfp_lock_acquire+0x8>)
 80075b2:	f000 b976 	b.w	80078a2 <__retarget_lock_acquire_recursive>
 80075b6:	bf00      	nop
 80075b8:	2000114d 	.word	0x2000114d

080075bc <__sfp_lock_release>:
 80075bc:	4801      	ldr	r0, [pc, #4]	@ (80075c4 <__sfp_lock_release+0x8>)
 80075be:	f000 b971 	b.w	80078a4 <__retarget_lock_release_recursive>
 80075c2:	bf00      	nop
 80075c4:	2000114d 	.word	0x2000114d

080075c8 <__sinit>:
 80075c8:	b510      	push	{r4, lr}
 80075ca:	4604      	mov	r4, r0
 80075cc:	f7ff fff0 	bl	80075b0 <__sfp_lock_acquire>
 80075d0:	6a23      	ldr	r3, [r4, #32]
 80075d2:	b11b      	cbz	r3, 80075dc <__sinit+0x14>
 80075d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075d8:	f7ff bff0 	b.w	80075bc <__sfp_lock_release>
 80075dc:	4b04      	ldr	r3, [pc, #16]	@ (80075f0 <__sinit+0x28>)
 80075de:	6223      	str	r3, [r4, #32]
 80075e0:	4b04      	ldr	r3, [pc, #16]	@ (80075f4 <__sinit+0x2c>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d1f5      	bne.n	80075d4 <__sinit+0xc>
 80075e8:	f7ff ffc4 	bl	8007574 <global_stdio_init.part.0>
 80075ec:	e7f2      	b.n	80075d4 <__sinit+0xc>
 80075ee:	bf00      	nop
 80075f0:	08007535 	.word	0x08007535
 80075f4:	20001144 	.word	0x20001144

080075f8 <_fwalk_sglue>:
 80075f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075fc:	4607      	mov	r7, r0
 80075fe:	4688      	mov	r8, r1
 8007600:	4614      	mov	r4, r2
 8007602:	2600      	movs	r6, #0
 8007604:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007608:	f1b9 0901 	subs.w	r9, r9, #1
 800760c:	d505      	bpl.n	800761a <_fwalk_sglue+0x22>
 800760e:	6824      	ldr	r4, [r4, #0]
 8007610:	2c00      	cmp	r4, #0
 8007612:	d1f7      	bne.n	8007604 <_fwalk_sglue+0xc>
 8007614:	4630      	mov	r0, r6
 8007616:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800761a:	89ab      	ldrh	r3, [r5, #12]
 800761c:	2b01      	cmp	r3, #1
 800761e:	d907      	bls.n	8007630 <_fwalk_sglue+0x38>
 8007620:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007624:	3301      	adds	r3, #1
 8007626:	d003      	beq.n	8007630 <_fwalk_sglue+0x38>
 8007628:	4629      	mov	r1, r5
 800762a:	4638      	mov	r0, r7
 800762c:	47c0      	blx	r8
 800762e:	4306      	orrs	r6, r0
 8007630:	3568      	adds	r5, #104	@ 0x68
 8007632:	e7e9      	b.n	8007608 <_fwalk_sglue+0x10>

08007634 <sniprintf>:
 8007634:	b40c      	push	{r2, r3}
 8007636:	b530      	push	{r4, r5, lr}
 8007638:	4b17      	ldr	r3, [pc, #92]	@ (8007698 <sniprintf+0x64>)
 800763a:	1e0c      	subs	r4, r1, #0
 800763c:	681d      	ldr	r5, [r3, #0]
 800763e:	b09d      	sub	sp, #116	@ 0x74
 8007640:	da08      	bge.n	8007654 <sniprintf+0x20>
 8007642:	238b      	movs	r3, #139	@ 0x8b
 8007644:	602b      	str	r3, [r5, #0]
 8007646:	f04f 30ff 	mov.w	r0, #4294967295
 800764a:	b01d      	add	sp, #116	@ 0x74
 800764c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007650:	b002      	add	sp, #8
 8007652:	4770      	bx	lr
 8007654:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007658:	f8ad 3014 	strh.w	r3, [sp, #20]
 800765c:	bf14      	ite	ne
 800765e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007662:	4623      	moveq	r3, r4
 8007664:	9304      	str	r3, [sp, #16]
 8007666:	9307      	str	r3, [sp, #28]
 8007668:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800766c:	9002      	str	r0, [sp, #8]
 800766e:	9006      	str	r0, [sp, #24]
 8007670:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007674:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007676:	ab21      	add	r3, sp, #132	@ 0x84
 8007678:	a902      	add	r1, sp, #8
 800767a:	4628      	mov	r0, r5
 800767c:	9301      	str	r3, [sp, #4]
 800767e:	f001 fb97 	bl	8008db0 <_svfiprintf_r>
 8007682:	1c43      	adds	r3, r0, #1
 8007684:	bfbc      	itt	lt
 8007686:	238b      	movlt	r3, #139	@ 0x8b
 8007688:	602b      	strlt	r3, [r5, #0]
 800768a:	2c00      	cmp	r4, #0
 800768c:	d0dd      	beq.n	800764a <sniprintf+0x16>
 800768e:	9b02      	ldr	r3, [sp, #8]
 8007690:	2200      	movs	r2, #0
 8007692:	701a      	strb	r2, [r3, #0]
 8007694:	e7d9      	b.n	800764a <sniprintf+0x16>
 8007696:	bf00      	nop
 8007698:	20000198 	.word	0x20000198

0800769c <siprintf>:
 800769c:	b40e      	push	{r1, r2, r3}
 800769e:	b500      	push	{lr}
 80076a0:	b09c      	sub	sp, #112	@ 0x70
 80076a2:	ab1d      	add	r3, sp, #116	@ 0x74
 80076a4:	9002      	str	r0, [sp, #8]
 80076a6:	9006      	str	r0, [sp, #24]
 80076a8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80076ac:	4809      	ldr	r0, [pc, #36]	@ (80076d4 <siprintf+0x38>)
 80076ae:	9107      	str	r1, [sp, #28]
 80076b0:	9104      	str	r1, [sp, #16]
 80076b2:	4909      	ldr	r1, [pc, #36]	@ (80076d8 <siprintf+0x3c>)
 80076b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80076b8:	9105      	str	r1, [sp, #20]
 80076ba:	6800      	ldr	r0, [r0, #0]
 80076bc:	9301      	str	r3, [sp, #4]
 80076be:	a902      	add	r1, sp, #8
 80076c0:	f001 fb76 	bl	8008db0 <_svfiprintf_r>
 80076c4:	9b02      	ldr	r3, [sp, #8]
 80076c6:	2200      	movs	r2, #0
 80076c8:	701a      	strb	r2, [r3, #0]
 80076ca:	b01c      	add	sp, #112	@ 0x70
 80076cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80076d0:	b003      	add	sp, #12
 80076d2:	4770      	bx	lr
 80076d4:	20000198 	.word	0x20000198
 80076d8:	ffff0208 	.word	0xffff0208

080076dc <__sread>:
 80076dc:	b510      	push	{r4, lr}
 80076de:	460c      	mov	r4, r1
 80076e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076e4:	f000 f87e 	bl	80077e4 <_read_r>
 80076e8:	2800      	cmp	r0, #0
 80076ea:	bfab      	itete	ge
 80076ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80076ee:	89a3      	ldrhlt	r3, [r4, #12]
 80076f0:	181b      	addge	r3, r3, r0
 80076f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80076f6:	bfac      	ite	ge
 80076f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80076fa:	81a3      	strhlt	r3, [r4, #12]
 80076fc:	bd10      	pop	{r4, pc}

080076fe <__swrite>:
 80076fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007702:	461f      	mov	r7, r3
 8007704:	898b      	ldrh	r3, [r1, #12]
 8007706:	05db      	lsls	r3, r3, #23
 8007708:	4605      	mov	r5, r0
 800770a:	460c      	mov	r4, r1
 800770c:	4616      	mov	r6, r2
 800770e:	d505      	bpl.n	800771c <__swrite+0x1e>
 8007710:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007714:	2302      	movs	r3, #2
 8007716:	2200      	movs	r2, #0
 8007718:	f000 f852 	bl	80077c0 <_lseek_r>
 800771c:	89a3      	ldrh	r3, [r4, #12]
 800771e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007722:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007726:	81a3      	strh	r3, [r4, #12]
 8007728:	4632      	mov	r2, r6
 800772a:	463b      	mov	r3, r7
 800772c:	4628      	mov	r0, r5
 800772e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007732:	f000 b879 	b.w	8007828 <_write_r>

08007736 <__sseek>:
 8007736:	b510      	push	{r4, lr}
 8007738:	460c      	mov	r4, r1
 800773a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800773e:	f000 f83f 	bl	80077c0 <_lseek_r>
 8007742:	1c43      	adds	r3, r0, #1
 8007744:	89a3      	ldrh	r3, [r4, #12]
 8007746:	bf15      	itete	ne
 8007748:	6560      	strne	r0, [r4, #84]	@ 0x54
 800774a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800774e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007752:	81a3      	strheq	r3, [r4, #12]
 8007754:	bf18      	it	ne
 8007756:	81a3      	strhne	r3, [r4, #12]
 8007758:	bd10      	pop	{r4, pc}

0800775a <__sclose>:
 800775a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800775e:	f000 b81f 	b.w	80077a0 <_close_r>

08007762 <memset>:
 8007762:	4402      	add	r2, r0
 8007764:	4603      	mov	r3, r0
 8007766:	4293      	cmp	r3, r2
 8007768:	d100      	bne.n	800776c <memset+0xa>
 800776a:	4770      	bx	lr
 800776c:	f803 1b01 	strb.w	r1, [r3], #1
 8007770:	e7f9      	b.n	8007766 <memset+0x4>

08007772 <strncat>:
 8007772:	b530      	push	{r4, r5, lr}
 8007774:	4604      	mov	r4, r0
 8007776:	7825      	ldrb	r5, [r4, #0]
 8007778:	4623      	mov	r3, r4
 800777a:	3401      	adds	r4, #1
 800777c:	2d00      	cmp	r5, #0
 800777e:	d1fa      	bne.n	8007776 <strncat+0x4>
 8007780:	3a01      	subs	r2, #1
 8007782:	d304      	bcc.n	800778e <strncat+0x1c>
 8007784:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007788:	f803 4b01 	strb.w	r4, [r3], #1
 800778c:	b904      	cbnz	r4, 8007790 <strncat+0x1e>
 800778e:	bd30      	pop	{r4, r5, pc}
 8007790:	2a00      	cmp	r2, #0
 8007792:	d1f5      	bne.n	8007780 <strncat+0xe>
 8007794:	701a      	strb	r2, [r3, #0]
 8007796:	e7f3      	b.n	8007780 <strncat+0xe>

08007798 <_localeconv_r>:
 8007798:	4800      	ldr	r0, [pc, #0]	@ (800779c <_localeconv_r+0x4>)
 800779a:	4770      	bx	lr
 800779c:	200002d8 	.word	0x200002d8

080077a0 <_close_r>:
 80077a0:	b538      	push	{r3, r4, r5, lr}
 80077a2:	4d06      	ldr	r5, [pc, #24]	@ (80077bc <_close_r+0x1c>)
 80077a4:	2300      	movs	r3, #0
 80077a6:	4604      	mov	r4, r0
 80077a8:	4608      	mov	r0, r1
 80077aa:	602b      	str	r3, [r5, #0]
 80077ac:	f7fa fa2e 	bl	8001c0c <_close>
 80077b0:	1c43      	adds	r3, r0, #1
 80077b2:	d102      	bne.n	80077ba <_close_r+0x1a>
 80077b4:	682b      	ldr	r3, [r5, #0]
 80077b6:	b103      	cbz	r3, 80077ba <_close_r+0x1a>
 80077b8:	6023      	str	r3, [r4, #0]
 80077ba:	bd38      	pop	{r3, r4, r5, pc}
 80077bc:	20001148 	.word	0x20001148

080077c0 <_lseek_r>:
 80077c0:	b538      	push	{r3, r4, r5, lr}
 80077c2:	4d07      	ldr	r5, [pc, #28]	@ (80077e0 <_lseek_r+0x20>)
 80077c4:	4604      	mov	r4, r0
 80077c6:	4608      	mov	r0, r1
 80077c8:	4611      	mov	r1, r2
 80077ca:	2200      	movs	r2, #0
 80077cc:	602a      	str	r2, [r5, #0]
 80077ce:	461a      	mov	r2, r3
 80077d0:	f7fa fa43 	bl	8001c5a <_lseek>
 80077d4:	1c43      	adds	r3, r0, #1
 80077d6:	d102      	bne.n	80077de <_lseek_r+0x1e>
 80077d8:	682b      	ldr	r3, [r5, #0]
 80077da:	b103      	cbz	r3, 80077de <_lseek_r+0x1e>
 80077dc:	6023      	str	r3, [r4, #0]
 80077de:	bd38      	pop	{r3, r4, r5, pc}
 80077e0:	20001148 	.word	0x20001148

080077e4 <_read_r>:
 80077e4:	b538      	push	{r3, r4, r5, lr}
 80077e6:	4d07      	ldr	r5, [pc, #28]	@ (8007804 <_read_r+0x20>)
 80077e8:	4604      	mov	r4, r0
 80077ea:	4608      	mov	r0, r1
 80077ec:	4611      	mov	r1, r2
 80077ee:	2200      	movs	r2, #0
 80077f0:	602a      	str	r2, [r5, #0]
 80077f2:	461a      	mov	r2, r3
 80077f4:	f7fa f9d1 	bl	8001b9a <_read>
 80077f8:	1c43      	adds	r3, r0, #1
 80077fa:	d102      	bne.n	8007802 <_read_r+0x1e>
 80077fc:	682b      	ldr	r3, [r5, #0]
 80077fe:	b103      	cbz	r3, 8007802 <_read_r+0x1e>
 8007800:	6023      	str	r3, [r4, #0]
 8007802:	bd38      	pop	{r3, r4, r5, pc}
 8007804:	20001148 	.word	0x20001148

08007808 <_sbrk_r>:
 8007808:	b538      	push	{r3, r4, r5, lr}
 800780a:	4d06      	ldr	r5, [pc, #24]	@ (8007824 <_sbrk_r+0x1c>)
 800780c:	2300      	movs	r3, #0
 800780e:	4604      	mov	r4, r0
 8007810:	4608      	mov	r0, r1
 8007812:	602b      	str	r3, [r5, #0]
 8007814:	f7fa fa2e 	bl	8001c74 <_sbrk>
 8007818:	1c43      	adds	r3, r0, #1
 800781a:	d102      	bne.n	8007822 <_sbrk_r+0x1a>
 800781c:	682b      	ldr	r3, [r5, #0]
 800781e:	b103      	cbz	r3, 8007822 <_sbrk_r+0x1a>
 8007820:	6023      	str	r3, [r4, #0]
 8007822:	bd38      	pop	{r3, r4, r5, pc}
 8007824:	20001148 	.word	0x20001148

08007828 <_write_r>:
 8007828:	b538      	push	{r3, r4, r5, lr}
 800782a:	4d07      	ldr	r5, [pc, #28]	@ (8007848 <_write_r+0x20>)
 800782c:	4604      	mov	r4, r0
 800782e:	4608      	mov	r0, r1
 8007830:	4611      	mov	r1, r2
 8007832:	2200      	movs	r2, #0
 8007834:	602a      	str	r2, [r5, #0]
 8007836:	461a      	mov	r2, r3
 8007838:	f7fa f9cc 	bl	8001bd4 <_write>
 800783c:	1c43      	adds	r3, r0, #1
 800783e:	d102      	bne.n	8007846 <_write_r+0x1e>
 8007840:	682b      	ldr	r3, [r5, #0]
 8007842:	b103      	cbz	r3, 8007846 <_write_r+0x1e>
 8007844:	6023      	str	r3, [r4, #0]
 8007846:	bd38      	pop	{r3, r4, r5, pc}
 8007848:	20001148 	.word	0x20001148

0800784c <__errno>:
 800784c:	4b01      	ldr	r3, [pc, #4]	@ (8007854 <__errno+0x8>)
 800784e:	6818      	ldr	r0, [r3, #0]
 8007850:	4770      	bx	lr
 8007852:	bf00      	nop
 8007854:	20000198 	.word	0x20000198

08007858 <__libc_init_array>:
 8007858:	b570      	push	{r4, r5, r6, lr}
 800785a:	4d0d      	ldr	r5, [pc, #52]	@ (8007890 <__libc_init_array+0x38>)
 800785c:	4c0d      	ldr	r4, [pc, #52]	@ (8007894 <__libc_init_array+0x3c>)
 800785e:	1b64      	subs	r4, r4, r5
 8007860:	10a4      	asrs	r4, r4, #2
 8007862:	2600      	movs	r6, #0
 8007864:	42a6      	cmp	r6, r4
 8007866:	d109      	bne.n	800787c <__libc_init_array+0x24>
 8007868:	4d0b      	ldr	r5, [pc, #44]	@ (8007898 <__libc_init_array+0x40>)
 800786a:	4c0c      	ldr	r4, [pc, #48]	@ (800789c <__libc_init_array+0x44>)
 800786c:	f001 ffa0 	bl	80097b0 <_init>
 8007870:	1b64      	subs	r4, r4, r5
 8007872:	10a4      	asrs	r4, r4, #2
 8007874:	2600      	movs	r6, #0
 8007876:	42a6      	cmp	r6, r4
 8007878:	d105      	bne.n	8007886 <__libc_init_array+0x2e>
 800787a:	bd70      	pop	{r4, r5, r6, pc}
 800787c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007880:	4798      	blx	r3
 8007882:	3601      	adds	r6, #1
 8007884:	e7ee      	b.n	8007864 <__libc_init_array+0xc>
 8007886:	f855 3b04 	ldr.w	r3, [r5], #4
 800788a:	4798      	blx	r3
 800788c:	3601      	adds	r6, #1
 800788e:	e7f2      	b.n	8007876 <__libc_init_array+0x1e>
 8007890:	08009d78 	.word	0x08009d78
 8007894:	08009d78 	.word	0x08009d78
 8007898:	08009d78 	.word	0x08009d78
 800789c:	08009d7c 	.word	0x08009d7c

080078a0 <__retarget_lock_init_recursive>:
 80078a0:	4770      	bx	lr

080078a2 <__retarget_lock_acquire_recursive>:
 80078a2:	4770      	bx	lr

080078a4 <__retarget_lock_release_recursive>:
 80078a4:	4770      	bx	lr

080078a6 <memcpy>:
 80078a6:	440a      	add	r2, r1
 80078a8:	4291      	cmp	r1, r2
 80078aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80078ae:	d100      	bne.n	80078b2 <memcpy+0xc>
 80078b0:	4770      	bx	lr
 80078b2:	b510      	push	{r4, lr}
 80078b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078bc:	4291      	cmp	r1, r2
 80078be:	d1f9      	bne.n	80078b4 <memcpy+0xe>
 80078c0:	bd10      	pop	{r4, pc}

080078c2 <quorem>:
 80078c2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078c6:	6903      	ldr	r3, [r0, #16]
 80078c8:	690c      	ldr	r4, [r1, #16]
 80078ca:	42a3      	cmp	r3, r4
 80078cc:	4607      	mov	r7, r0
 80078ce:	db7e      	blt.n	80079ce <quorem+0x10c>
 80078d0:	3c01      	subs	r4, #1
 80078d2:	f101 0814 	add.w	r8, r1, #20
 80078d6:	00a3      	lsls	r3, r4, #2
 80078d8:	f100 0514 	add.w	r5, r0, #20
 80078dc:	9300      	str	r3, [sp, #0]
 80078de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80078e2:	9301      	str	r3, [sp, #4]
 80078e4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80078e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80078ec:	3301      	adds	r3, #1
 80078ee:	429a      	cmp	r2, r3
 80078f0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80078f4:	fbb2 f6f3 	udiv	r6, r2, r3
 80078f8:	d32e      	bcc.n	8007958 <quorem+0x96>
 80078fa:	f04f 0a00 	mov.w	sl, #0
 80078fe:	46c4      	mov	ip, r8
 8007900:	46ae      	mov	lr, r5
 8007902:	46d3      	mov	fp, sl
 8007904:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007908:	b298      	uxth	r0, r3
 800790a:	fb06 a000 	mla	r0, r6, r0, sl
 800790e:	0c02      	lsrs	r2, r0, #16
 8007910:	0c1b      	lsrs	r3, r3, #16
 8007912:	fb06 2303 	mla	r3, r6, r3, r2
 8007916:	f8de 2000 	ldr.w	r2, [lr]
 800791a:	b280      	uxth	r0, r0
 800791c:	b292      	uxth	r2, r2
 800791e:	1a12      	subs	r2, r2, r0
 8007920:	445a      	add	r2, fp
 8007922:	f8de 0000 	ldr.w	r0, [lr]
 8007926:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800792a:	b29b      	uxth	r3, r3
 800792c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007930:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007934:	b292      	uxth	r2, r2
 8007936:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800793a:	45e1      	cmp	r9, ip
 800793c:	f84e 2b04 	str.w	r2, [lr], #4
 8007940:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007944:	d2de      	bcs.n	8007904 <quorem+0x42>
 8007946:	9b00      	ldr	r3, [sp, #0]
 8007948:	58eb      	ldr	r3, [r5, r3]
 800794a:	b92b      	cbnz	r3, 8007958 <quorem+0x96>
 800794c:	9b01      	ldr	r3, [sp, #4]
 800794e:	3b04      	subs	r3, #4
 8007950:	429d      	cmp	r5, r3
 8007952:	461a      	mov	r2, r3
 8007954:	d32f      	bcc.n	80079b6 <quorem+0xf4>
 8007956:	613c      	str	r4, [r7, #16]
 8007958:	4638      	mov	r0, r7
 800795a:	f001 f8c5 	bl	8008ae8 <__mcmp>
 800795e:	2800      	cmp	r0, #0
 8007960:	db25      	blt.n	80079ae <quorem+0xec>
 8007962:	4629      	mov	r1, r5
 8007964:	2000      	movs	r0, #0
 8007966:	f858 2b04 	ldr.w	r2, [r8], #4
 800796a:	f8d1 c000 	ldr.w	ip, [r1]
 800796e:	fa1f fe82 	uxth.w	lr, r2
 8007972:	fa1f f38c 	uxth.w	r3, ip
 8007976:	eba3 030e 	sub.w	r3, r3, lr
 800797a:	4403      	add	r3, r0
 800797c:	0c12      	lsrs	r2, r2, #16
 800797e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007982:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007986:	b29b      	uxth	r3, r3
 8007988:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800798c:	45c1      	cmp	r9, r8
 800798e:	f841 3b04 	str.w	r3, [r1], #4
 8007992:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007996:	d2e6      	bcs.n	8007966 <quorem+0xa4>
 8007998:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800799c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80079a0:	b922      	cbnz	r2, 80079ac <quorem+0xea>
 80079a2:	3b04      	subs	r3, #4
 80079a4:	429d      	cmp	r5, r3
 80079a6:	461a      	mov	r2, r3
 80079a8:	d30b      	bcc.n	80079c2 <quorem+0x100>
 80079aa:	613c      	str	r4, [r7, #16]
 80079ac:	3601      	adds	r6, #1
 80079ae:	4630      	mov	r0, r6
 80079b0:	b003      	add	sp, #12
 80079b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079b6:	6812      	ldr	r2, [r2, #0]
 80079b8:	3b04      	subs	r3, #4
 80079ba:	2a00      	cmp	r2, #0
 80079bc:	d1cb      	bne.n	8007956 <quorem+0x94>
 80079be:	3c01      	subs	r4, #1
 80079c0:	e7c6      	b.n	8007950 <quorem+0x8e>
 80079c2:	6812      	ldr	r2, [r2, #0]
 80079c4:	3b04      	subs	r3, #4
 80079c6:	2a00      	cmp	r2, #0
 80079c8:	d1ef      	bne.n	80079aa <quorem+0xe8>
 80079ca:	3c01      	subs	r4, #1
 80079cc:	e7ea      	b.n	80079a4 <quorem+0xe2>
 80079ce:	2000      	movs	r0, #0
 80079d0:	e7ee      	b.n	80079b0 <quorem+0xee>
 80079d2:	0000      	movs	r0, r0
 80079d4:	0000      	movs	r0, r0
	...

080079d8 <_dtoa_r>:
 80079d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079dc:	69c7      	ldr	r7, [r0, #28]
 80079de:	b099      	sub	sp, #100	@ 0x64
 80079e0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80079e4:	ec55 4b10 	vmov	r4, r5, d0
 80079e8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80079ea:	9109      	str	r1, [sp, #36]	@ 0x24
 80079ec:	4683      	mov	fp, r0
 80079ee:	920e      	str	r2, [sp, #56]	@ 0x38
 80079f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80079f2:	b97f      	cbnz	r7, 8007a14 <_dtoa_r+0x3c>
 80079f4:	2010      	movs	r0, #16
 80079f6:	f7ff f84d 	bl	8006a94 <malloc>
 80079fa:	4602      	mov	r2, r0
 80079fc:	f8cb 001c 	str.w	r0, [fp, #28]
 8007a00:	b920      	cbnz	r0, 8007a0c <_dtoa_r+0x34>
 8007a02:	4ba7      	ldr	r3, [pc, #668]	@ (8007ca0 <_dtoa_r+0x2c8>)
 8007a04:	21ef      	movs	r1, #239	@ 0xef
 8007a06:	48a7      	ldr	r0, [pc, #668]	@ (8007ca4 <_dtoa_r+0x2cc>)
 8007a08:	f001 fb94 	bl	8009134 <__assert_func>
 8007a0c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007a10:	6007      	str	r7, [r0, #0]
 8007a12:	60c7      	str	r7, [r0, #12]
 8007a14:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007a18:	6819      	ldr	r1, [r3, #0]
 8007a1a:	b159      	cbz	r1, 8007a34 <_dtoa_r+0x5c>
 8007a1c:	685a      	ldr	r2, [r3, #4]
 8007a1e:	604a      	str	r2, [r1, #4]
 8007a20:	2301      	movs	r3, #1
 8007a22:	4093      	lsls	r3, r2
 8007a24:	608b      	str	r3, [r1, #8]
 8007a26:	4658      	mov	r0, fp
 8007a28:	f000 fe24 	bl	8008674 <_Bfree>
 8007a2c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007a30:	2200      	movs	r2, #0
 8007a32:	601a      	str	r2, [r3, #0]
 8007a34:	1e2b      	subs	r3, r5, #0
 8007a36:	bfb9      	ittee	lt
 8007a38:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007a3c:	9303      	strlt	r3, [sp, #12]
 8007a3e:	2300      	movge	r3, #0
 8007a40:	6033      	strge	r3, [r6, #0]
 8007a42:	9f03      	ldr	r7, [sp, #12]
 8007a44:	4b98      	ldr	r3, [pc, #608]	@ (8007ca8 <_dtoa_r+0x2d0>)
 8007a46:	bfbc      	itt	lt
 8007a48:	2201      	movlt	r2, #1
 8007a4a:	6032      	strlt	r2, [r6, #0]
 8007a4c:	43bb      	bics	r3, r7
 8007a4e:	d112      	bne.n	8007a76 <_dtoa_r+0x9e>
 8007a50:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007a52:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007a56:	6013      	str	r3, [r2, #0]
 8007a58:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007a5c:	4323      	orrs	r3, r4
 8007a5e:	f000 854d 	beq.w	80084fc <_dtoa_r+0xb24>
 8007a62:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007a64:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007cbc <_dtoa_r+0x2e4>
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	f000 854f 	beq.w	800850c <_dtoa_r+0xb34>
 8007a6e:	f10a 0303 	add.w	r3, sl, #3
 8007a72:	f000 bd49 	b.w	8008508 <_dtoa_r+0xb30>
 8007a76:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	ec51 0b17 	vmov	r0, r1, d7
 8007a80:	2300      	movs	r3, #0
 8007a82:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007a86:	f7f9 f82f 	bl	8000ae8 <__aeabi_dcmpeq>
 8007a8a:	4680      	mov	r8, r0
 8007a8c:	b158      	cbz	r0, 8007aa6 <_dtoa_r+0xce>
 8007a8e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007a90:	2301      	movs	r3, #1
 8007a92:	6013      	str	r3, [r2, #0]
 8007a94:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007a96:	b113      	cbz	r3, 8007a9e <_dtoa_r+0xc6>
 8007a98:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007a9a:	4b84      	ldr	r3, [pc, #528]	@ (8007cac <_dtoa_r+0x2d4>)
 8007a9c:	6013      	str	r3, [r2, #0]
 8007a9e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007cc0 <_dtoa_r+0x2e8>
 8007aa2:	f000 bd33 	b.w	800850c <_dtoa_r+0xb34>
 8007aa6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007aaa:	aa16      	add	r2, sp, #88	@ 0x58
 8007aac:	a917      	add	r1, sp, #92	@ 0x5c
 8007aae:	4658      	mov	r0, fp
 8007ab0:	f001 f8ca 	bl	8008c48 <__d2b>
 8007ab4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007ab8:	4681      	mov	r9, r0
 8007aba:	2e00      	cmp	r6, #0
 8007abc:	d077      	beq.n	8007bae <_dtoa_r+0x1d6>
 8007abe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007ac0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007ac4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ac8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007acc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007ad0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007ad4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007ad8:	4619      	mov	r1, r3
 8007ada:	2200      	movs	r2, #0
 8007adc:	4b74      	ldr	r3, [pc, #464]	@ (8007cb0 <_dtoa_r+0x2d8>)
 8007ade:	f7f8 fbe3 	bl	80002a8 <__aeabi_dsub>
 8007ae2:	a369      	add	r3, pc, #420	@ (adr r3, 8007c88 <_dtoa_r+0x2b0>)
 8007ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae8:	f7f8 fd96 	bl	8000618 <__aeabi_dmul>
 8007aec:	a368      	add	r3, pc, #416	@ (adr r3, 8007c90 <_dtoa_r+0x2b8>)
 8007aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af2:	f7f8 fbdb 	bl	80002ac <__adddf3>
 8007af6:	4604      	mov	r4, r0
 8007af8:	4630      	mov	r0, r6
 8007afa:	460d      	mov	r5, r1
 8007afc:	f7f8 fd22 	bl	8000544 <__aeabi_i2d>
 8007b00:	a365      	add	r3, pc, #404	@ (adr r3, 8007c98 <_dtoa_r+0x2c0>)
 8007b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b06:	f7f8 fd87 	bl	8000618 <__aeabi_dmul>
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	460b      	mov	r3, r1
 8007b0e:	4620      	mov	r0, r4
 8007b10:	4629      	mov	r1, r5
 8007b12:	f7f8 fbcb 	bl	80002ac <__adddf3>
 8007b16:	4604      	mov	r4, r0
 8007b18:	460d      	mov	r5, r1
 8007b1a:	f7f9 f82d 	bl	8000b78 <__aeabi_d2iz>
 8007b1e:	2200      	movs	r2, #0
 8007b20:	4607      	mov	r7, r0
 8007b22:	2300      	movs	r3, #0
 8007b24:	4620      	mov	r0, r4
 8007b26:	4629      	mov	r1, r5
 8007b28:	f7f8 ffe8 	bl	8000afc <__aeabi_dcmplt>
 8007b2c:	b140      	cbz	r0, 8007b40 <_dtoa_r+0x168>
 8007b2e:	4638      	mov	r0, r7
 8007b30:	f7f8 fd08 	bl	8000544 <__aeabi_i2d>
 8007b34:	4622      	mov	r2, r4
 8007b36:	462b      	mov	r3, r5
 8007b38:	f7f8 ffd6 	bl	8000ae8 <__aeabi_dcmpeq>
 8007b3c:	b900      	cbnz	r0, 8007b40 <_dtoa_r+0x168>
 8007b3e:	3f01      	subs	r7, #1
 8007b40:	2f16      	cmp	r7, #22
 8007b42:	d851      	bhi.n	8007be8 <_dtoa_r+0x210>
 8007b44:	4b5b      	ldr	r3, [pc, #364]	@ (8007cb4 <_dtoa_r+0x2dc>)
 8007b46:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b52:	f7f8 ffd3 	bl	8000afc <__aeabi_dcmplt>
 8007b56:	2800      	cmp	r0, #0
 8007b58:	d048      	beq.n	8007bec <_dtoa_r+0x214>
 8007b5a:	3f01      	subs	r7, #1
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	9312      	str	r3, [sp, #72]	@ 0x48
 8007b60:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007b62:	1b9b      	subs	r3, r3, r6
 8007b64:	1e5a      	subs	r2, r3, #1
 8007b66:	bf44      	itt	mi
 8007b68:	f1c3 0801 	rsbmi	r8, r3, #1
 8007b6c:	2300      	movmi	r3, #0
 8007b6e:	9208      	str	r2, [sp, #32]
 8007b70:	bf54      	ite	pl
 8007b72:	f04f 0800 	movpl.w	r8, #0
 8007b76:	9308      	strmi	r3, [sp, #32]
 8007b78:	2f00      	cmp	r7, #0
 8007b7a:	db39      	blt.n	8007bf0 <_dtoa_r+0x218>
 8007b7c:	9b08      	ldr	r3, [sp, #32]
 8007b7e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007b80:	443b      	add	r3, r7
 8007b82:	9308      	str	r3, [sp, #32]
 8007b84:	2300      	movs	r3, #0
 8007b86:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b8a:	2b09      	cmp	r3, #9
 8007b8c:	d864      	bhi.n	8007c58 <_dtoa_r+0x280>
 8007b8e:	2b05      	cmp	r3, #5
 8007b90:	bfc4      	itt	gt
 8007b92:	3b04      	subgt	r3, #4
 8007b94:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007b96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b98:	f1a3 0302 	sub.w	r3, r3, #2
 8007b9c:	bfcc      	ite	gt
 8007b9e:	2400      	movgt	r4, #0
 8007ba0:	2401      	movle	r4, #1
 8007ba2:	2b03      	cmp	r3, #3
 8007ba4:	d863      	bhi.n	8007c6e <_dtoa_r+0x296>
 8007ba6:	e8df f003 	tbb	[pc, r3]
 8007baa:	372a      	.short	0x372a
 8007bac:	5535      	.short	0x5535
 8007bae:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007bb2:	441e      	add	r6, r3
 8007bb4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007bb8:	2b20      	cmp	r3, #32
 8007bba:	bfc1      	itttt	gt
 8007bbc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007bc0:	409f      	lslgt	r7, r3
 8007bc2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007bc6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007bca:	bfd6      	itet	le
 8007bcc:	f1c3 0320 	rsble	r3, r3, #32
 8007bd0:	ea47 0003 	orrgt.w	r0, r7, r3
 8007bd4:	fa04 f003 	lslle.w	r0, r4, r3
 8007bd8:	f7f8 fca4 	bl	8000524 <__aeabi_ui2d>
 8007bdc:	2201      	movs	r2, #1
 8007bde:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007be2:	3e01      	subs	r6, #1
 8007be4:	9214      	str	r2, [sp, #80]	@ 0x50
 8007be6:	e777      	b.n	8007ad8 <_dtoa_r+0x100>
 8007be8:	2301      	movs	r3, #1
 8007bea:	e7b8      	b.n	8007b5e <_dtoa_r+0x186>
 8007bec:	9012      	str	r0, [sp, #72]	@ 0x48
 8007bee:	e7b7      	b.n	8007b60 <_dtoa_r+0x188>
 8007bf0:	427b      	negs	r3, r7
 8007bf2:	930a      	str	r3, [sp, #40]	@ 0x28
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	eba8 0807 	sub.w	r8, r8, r7
 8007bfa:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007bfc:	e7c4      	b.n	8007b88 <_dtoa_r+0x1b0>
 8007bfe:	2300      	movs	r3, #0
 8007c00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	dc35      	bgt.n	8007c74 <_dtoa_r+0x29c>
 8007c08:	2301      	movs	r3, #1
 8007c0a:	9300      	str	r3, [sp, #0]
 8007c0c:	9307      	str	r3, [sp, #28]
 8007c0e:	461a      	mov	r2, r3
 8007c10:	920e      	str	r2, [sp, #56]	@ 0x38
 8007c12:	e00b      	b.n	8007c2c <_dtoa_r+0x254>
 8007c14:	2301      	movs	r3, #1
 8007c16:	e7f3      	b.n	8007c00 <_dtoa_r+0x228>
 8007c18:	2300      	movs	r3, #0
 8007c1a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007c1e:	18fb      	adds	r3, r7, r3
 8007c20:	9300      	str	r3, [sp, #0]
 8007c22:	3301      	adds	r3, #1
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	9307      	str	r3, [sp, #28]
 8007c28:	bfb8      	it	lt
 8007c2a:	2301      	movlt	r3, #1
 8007c2c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007c30:	2100      	movs	r1, #0
 8007c32:	2204      	movs	r2, #4
 8007c34:	f102 0514 	add.w	r5, r2, #20
 8007c38:	429d      	cmp	r5, r3
 8007c3a:	d91f      	bls.n	8007c7c <_dtoa_r+0x2a4>
 8007c3c:	6041      	str	r1, [r0, #4]
 8007c3e:	4658      	mov	r0, fp
 8007c40:	f000 fcd8 	bl	80085f4 <_Balloc>
 8007c44:	4682      	mov	sl, r0
 8007c46:	2800      	cmp	r0, #0
 8007c48:	d13c      	bne.n	8007cc4 <_dtoa_r+0x2ec>
 8007c4a:	4b1b      	ldr	r3, [pc, #108]	@ (8007cb8 <_dtoa_r+0x2e0>)
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007c52:	e6d8      	b.n	8007a06 <_dtoa_r+0x2e>
 8007c54:	2301      	movs	r3, #1
 8007c56:	e7e0      	b.n	8007c1a <_dtoa_r+0x242>
 8007c58:	2401      	movs	r4, #1
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c5e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007c60:	f04f 33ff 	mov.w	r3, #4294967295
 8007c64:	9300      	str	r3, [sp, #0]
 8007c66:	9307      	str	r3, [sp, #28]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	2312      	movs	r3, #18
 8007c6c:	e7d0      	b.n	8007c10 <_dtoa_r+0x238>
 8007c6e:	2301      	movs	r3, #1
 8007c70:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c72:	e7f5      	b.n	8007c60 <_dtoa_r+0x288>
 8007c74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007c76:	9300      	str	r3, [sp, #0]
 8007c78:	9307      	str	r3, [sp, #28]
 8007c7a:	e7d7      	b.n	8007c2c <_dtoa_r+0x254>
 8007c7c:	3101      	adds	r1, #1
 8007c7e:	0052      	lsls	r2, r2, #1
 8007c80:	e7d8      	b.n	8007c34 <_dtoa_r+0x25c>
 8007c82:	bf00      	nop
 8007c84:	f3af 8000 	nop.w
 8007c88:	636f4361 	.word	0x636f4361
 8007c8c:	3fd287a7 	.word	0x3fd287a7
 8007c90:	8b60c8b3 	.word	0x8b60c8b3
 8007c94:	3fc68a28 	.word	0x3fc68a28
 8007c98:	509f79fb 	.word	0x509f79fb
 8007c9c:	3fd34413 	.word	0x3fd34413
 8007ca0:	08009a3d 	.word	0x08009a3d
 8007ca4:	08009a54 	.word	0x08009a54
 8007ca8:	7ff00000 	.word	0x7ff00000
 8007cac:	08009a0d 	.word	0x08009a0d
 8007cb0:	3ff80000 	.word	0x3ff80000
 8007cb4:	08009b50 	.word	0x08009b50
 8007cb8:	08009aac 	.word	0x08009aac
 8007cbc:	08009a39 	.word	0x08009a39
 8007cc0:	08009a0c 	.word	0x08009a0c
 8007cc4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007cc8:	6018      	str	r0, [r3, #0]
 8007cca:	9b07      	ldr	r3, [sp, #28]
 8007ccc:	2b0e      	cmp	r3, #14
 8007cce:	f200 80a4 	bhi.w	8007e1a <_dtoa_r+0x442>
 8007cd2:	2c00      	cmp	r4, #0
 8007cd4:	f000 80a1 	beq.w	8007e1a <_dtoa_r+0x442>
 8007cd8:	2f00      	cmp	r7, #0
 8007cda:	dd33      	ble.n	8007d44 <_dtoa_r+0x36c>
 8007cdc:	4bad      	ldr	r3, [pc, #692]	@ (8007f94 <_dtoa_r+0x5bc>)
 8007cde:	f007 020f 	and.w	r2, r7, #15
 8007ce2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ce6:	ed93 7b00 	vldr	d7, [r3]
 8007cea:	05f8      	lsls	r0, r7, #23
 8007cec:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007cf0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007cf4:	d516      	bpl.n	8007d24 <_dtoa_r+0x34c>
 8007cf6:	4ba8      	ldr	r3, [pc, #672]	@ (8007f98 <_dtoa_r+0x5c0>)
 8007cf8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007cfc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007d00:	f7f8 fdb4 	bl	800086c <__aeabi_ddiv>
 8007d04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d08:	f004 040f 	and.w	r4, r4, #15
 8007d0c:	2603      	movs	r6, #3
 8007d0e:	4da2      	ldr	r5, [pc, #648]	@ (8007f98 <_dtoa_r+0x5c0>)
 8007d10:	b954      	cbnz	r4, 8007d28 <_dtoa_r+0x350>
 8007d12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d1a:	f7f8 fda7 	bl	800086c <__aeabi_ddiv>
 8007d1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d22:	e028      	b.n	8007d76 <_dtoa_r+0x39e>
 8007d24:	2602      	movs	r6, #2
 8007d26:	e7f2      	b.n	8007d0e <_dtoa_r+0x336>
 8007d28:	07e1      	lsls	r1, r4, #31
 8007d2a:	d508      	bpl.n	8007d3e <_dtoa_r+0x366>
 8007d2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d30:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007d34:	f7f8 fc70 	bl	8000618 <__aeabi_dmul>
 8007d38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d3c:	3601      	adds	r6, #1
 8007d3e:	1064      	asrs	r4, r4, #1
 8007d40:	3508      	adds	r5, #8
 8007d42:	e7e5      	b.n	8007d10 <_dtoa_r+0x338>
 8007d44:	f000 80d2 	beq.w	8007eec <_dtoa_r+0x514>
 8007d48:	427c      	negs	r4, r7
 8007d4a:	4b92      	ldr	r3, [pc, #584]	@ (8007f94 <_dtoa_r+0x5bc>)
 8007d4c:	4d92      	ldr	r5, [pc, #584]	@ (8007f98 <_dtoa_r+0x5c0>)
 8007d4e:	f004 020f 	and.w	r2, r4, #15
 8007d52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d5e:	f7f8 fc5b 	bl	8000618 <__aeabi_dmul>
 8007d62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d66:	1124      	asrs	r4, r4, #4
 8007d68:	2300      	movs	r3, #0
 8007d6a:	2602      	movs	r6, #2
 8007d6c:	2c00      	cmp	r4, #0
 8007d6e:	f040 80b2 	bne.w	8007ed6 <_dtoa_r+0x4fe>
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d1d3      	bne.n	8007d1e <_dtoa_r+0x346>
 8007d76:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007d78:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	f000 80b7 	beq.w	8007ef0 <_dtoa_r+0x518>
 8007d82:	4b86      	ldr	r3, [pc, #536]	@ (8007f9c <_dtoa_r+0x5c4>)
 8007d84:	2200      	movs	r2, #0
 8007d86:	4620      	mov	r0, r4
 8007d88:	4629      	mov	r1, r5
 8007d8a:	f7f8 feb7 	bl	8000afc <__aeabi_dcmplt>
 8007d8e:	2800      	cmp	r0, #0
 8007d90:	f000 80ae 	beq.w	8007ef0 <_dtoa_r+0x518>
 8007d94:	9b07      	ldr	r3, [sp, #28]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	f000 80aa 	beq.w	8007ef0 <_dtoa_r+0x518>
 8007d9c:	9b00      	ldr	r3, [sp, #0]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	dd37      	ble.n	8007e12 <_dtoa_r+0x43a>
 8007da2:	1e7b      	subs	r3, r7, #1
 8007da4:	9304      	str	r3, [sp, #16]
 8007da6:	4620      	mov	r0, r4
 8007da8:	4b7d      	ldr	r3, [pc, #500]	@ (8007fa0 <_dtoa_r+0x5c8>)
 8007daa:	2200      	movs	r2, #0
 8007dac:	4629      	mov	r1, r5
 8007dae:	f7f8 fc33 	bl	8000618 <__aeabi_dmul>
 8007db2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007db6:	9c00      	ldr	r4, [sp, #0]
 8007db8:	3601      	adds	r6, #1
 8007dba:	4630      	mov	r0, r6
 8007dbc:	f7f8 fbc2 	bl	8000544 <__aeabi_i2d>
 8007dc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007dc4:	f7f8 fc28 	bl	8000618 <__aeabi_dmul>
 8007dc8:	4b76      	ldr	r3, [pc, #472]	@ (8007fa4 <_dtoa_r+0x5cc>)
 8007dca:	2200      	movs	r2, #0
 8007dcc:	f7f8 fa6e 	bl	80002ac <__adddf3>
 8007dd0:	4605      	mov	r5, r0
 8007dd2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007dd6:	2c00      	cmp	r4, #0
 8007dd8:	f040 808d 	bne.w	8007ef6 <_dtoa_r+0x51e>
 8007ddc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007de0:	4b71      	ldr	r3, [pc, #452]	@ (8007fa8 <_dtoa_r+0x5d0>)
 8007de2:	2200      	movs	r2, #0
 8007de4:	f7f8 fa60 	bl	80002a8 <__aeabi_dsub>
 8007de8:	4602      	mov	r2, r0
 8007dea:	460b      	mov	r3, r1
 8007dec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007df0:	462a      	mov	r2, r5
 8007df2:	4633      	mov	r3, r6
 8007df4:	f7f8 fea0 	bl	8000b38 <__aeabi_dcmpgt>
 8007df8:	2800      	cmp	r0, #0
 8007dfa:	f040 828b 	bne.w	8008314 <_dtoa_r+0x93c>
 8007dfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e02:	462a      	mov	r2, r5
 8007e04:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007e08:	f7f8 fe78 	bl	8000afc <__aeabi_dcmplt>
 8007e0c:	2800      	cmp	r0, #0
 8007e0e:	f040 8128 	bne.w	8008062 <_dtoa_r+0x68a>
 8007e12:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007e16:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007e1a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	f2c0 815a 	blt.w	80080d6 <_dtoa_r+0x6fe>
 8007e22:	2f0e      	cmp	r7, #14
 8007e24:	f300 8157 	bgt.w	80080d6 <_dtoa_r+0x6fe>
 8007e28:	4b5a      	ldr	r3, [pc, #360]	@ (8007f94 <_dtoa_r+0x5bc>)
 8007e2a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007e2e:	ed93 7b00 	vldr	d7, [r3]
 8007e32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	ed8d 7b00 	vstr	d7, [sp]
 8007e3a:	da03      	bge.n	8007e44 <_dtoa_r+0x46c>
 8007e3c:	9b07      	ldr	r3, [sp, #28]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	f340 8101 	ble.w	8008046 <_dtoa_r+0x66e>
 8007e44:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007e48:	4656      	mov	r6, sl
 8007e4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e4e:	4620      	mov	r0, r4
 8007e50:	4629      	mov	r1, r5
 8007e52:	f7f8 fd0b 	bl	800086c <__aeabi_ddiv>
 8007e56:	f7f8 fe8f 	bl	8000b78 <__aeabi_d2iz>
 8007e5a:	4680      	mov	r8, r0
 8007e5c:	f7f8 fb72 	bl	8000544 <__aeabi_i2d>
 8007e60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e64:	f7f8 fbd8 	bl	8000618 <__aeabi_dmul>
 8007e68:	4602      	mov	r2, r0
 8007e6a:	460b      	mov	r3, r1
 8007e6c:	4620      	mov	r0, r4
 8007e6e:	4629      	mov	r1, r5
 8007e70:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007e74:	f7f8 fa18 	bl	80002a8 <__aeabi_dsub>
 8007e78:	f806 4b01 	strb.w	r4, [r6], #1
 8007e7c:	9d07      	ldr	r5, [sp, #28]
 8007e7e:	eba6 040a 	sub.w	r4, r6, sl
 8007e82:	42a5      	cmp	r5, r4
 8007e84:	4602      	mov	r2, r0
 8007e86:	460b      	mov	r3, r1
 8007e88:	f040 8117 	bne.w	80080ba <_dtoa_r+0x6e2>
 8007e8c:	f7f8 fa0e 	bl	80002ac <__adddf3>
 8007e90:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e94:	4604      	mov	r4, r0
 8007e96:	460d      	mov	r5, r1
 8007e98:	f7f8 fe4e 	bl	8000b38 <__aeabi_dcmpgt>
 8007e9c:	2800      	cmp	r0, #0
 8007e9e:	f040 80f9 	bne.w	8008094 <_dtoa_r+0x6bc>
 8007ea2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007ea6:	4620      	mov	r0, r4
 8007ea8:	4629      	mov	r1, r5
 8007eaa:	f7f8 fe1d 	bl	8000ae8 <__aeabi_dcmpeq>
 8007eae:	b118      	cbz	r0, 8007eb8 <_dtoa_r+0x4e0>
 8007eb0:	f018 0f01 	tst.w	r8, #1
 8007eb4:	f040 80ee 	bne.w	8008094 <_dtoa_r+0x6bc>
 8007eb8:	4649      	mov	r1, r9
 8007eba:	4658      	mov	r0, fp
 8007ebc:	f000 fbda 	bl	8008674 <_Bfree>
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	7033      	strb	r3, [r6, #0]
 8007ec4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007ec6:	3701      	adds	r7, #1
 8007ec8:	601f      	str	r7, [r3, #0]
 8007eca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	f000 831d 	beq.w	800850c <_dtoa_r+0xb34>
 8007ed2:	601e      	str	r6, [r3, #0]
 8007ed4:	e31a      	b.n	800850c <_dtoa_r+0xb34>
 8007ed6:	07e2      	lsls	r2, r4, #31
 8007ed8:	d505      	bpl.n	8007ee6 <_dtoa_r+0x50e>
 8007eda:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007ede:	f7f8 fb9b 	bl	8000618 <__aeabi_dmul>
 8007ee2:	3601      	adds	r6, #1
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	1064      	asrs	r4, r4, #1
 8007ee8:	3508      	adds	r5, #8
 8007eea:	e73f      	b.n	8007d6c <_dtoa_r+0x394>
 8007eec:	2602      	movs	r6, #2
 8007eee:	e742      	b.n	8007d76 <_dtoa_r+0x39e>
 8007ef0:	9c07      	ldr	r4, [sp, #28]
 8007ef2:	9704      	str	r7, [sp, #16]
 8007ef4:	e761      	b.n	8007dba <_dtoa_r+0x3e2>
 8007ef6:	4b27      	ldr	r3, [pc, #156]	@ (8007f94 <_dtoa_r+0x5bc>)
 8007ef8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007efa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007efe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007f02:	4454      	add	r4, sl
 8007f04:	2900      	cmp	r1, #0
 8007f06:	d053      	beq.n	8007fb0 <_dtoa_r+0x5d8>
 8007f08:	4928      	ldr	r1, [pc, #160]	@ (8007fac <_dtoa_r+0x5d4>)
 8007f0a:	2000      	movs	r0, #0
 8007f0c:	f7f8 fcae 	bl	800086c <__aeabi_ddiv>
 8007f10:	4633      	mov	r3, r6
 8007f12:	462a      	mov	r2, r5
 8007f14:	f7f8 f9c8 	bl	80002a8 <__aeabi_dsub>
 8007f18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007f1c:	4656      	mov	r6, sl
 8007f1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f22:	f7f8 fe29 	bl	8000b78 <__aeabi_d2iz>
 8007f26:	4605      	mov	r5, r0
 8007f28:	f7f8 fb0c 	bl	8000544 <__aeabi_i2d>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	460b      	mov	r3, r1
 8007f30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f34:	f7f8 f9b8 	bl	80002a8 <__aeabi_dsub>
 8007f38:	3530      	adds	r5, #48	@ 0x30
 8007f3a:	4602      	mov	r2, r0
 8007f3c:	460b      	mov	r3, r1
 8007f3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007f42:	f806 5b01 	strb.w	r5, [r6], #1
 8007f46:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007f4a:	f7f8 fdd7 	bl	8000afc <__aeabi_dcmplt>
 8007f4e:	2800      	cmp	r0, #0
 8007f50:	d171      	bne.n	8008036 <_dtoa_r+0x65e>
 8007f52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f56:	4911      	ldr	r1, [pc, #68]	@ (8007f9c <_dtoa_r+0x5c4>)
 8007f58:	2000      	movs	r0, #0
 8007f5a:	f7f8 f9a5 	bl	80002a8 <__aeabi_dsub>
 8007f5e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007f62:	f7f8 fdcb 	bl	8000afc <__aeabi_dcmplt>
 8007f66:	2800      	cmp	r0, #0
 8007f68:	f040 8095 	bne.w	8008096 <_dtoa_r+0x6be>
 8007f6c:	42a6      	cmp	r6, r4
 8007f6e:	f43f af50 	beq.w	8007e12 <_dtoa_r+0x43a>
 8007f72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007f76:	4b0a      	ldr	r3, [pc, #40]	@ (8007fa0 <_dtoa_r+0x5c8>)
 8007f78:	2200      	movs	r2, #0
 8007f7a:	f7f8 fb4d 	bl	8000618 <__aeabi_dmul>
 8007f7e:	4b08      	ldr	r3, [pc, #32]	@ (8007fa0 <_dtoa_r+0x5c8>)
 8007f80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007f84:	2200      	movs	r2, #0
 8007f86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f8a:	f7f8 fb45 	bl	8000618 <__aeabi_dmul>
 8007f8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f92:	e7c4      	b.n	8007f1e <_dtoa_r+0x546>
 8007f94:	08009b50 	.word	0x08009b50
 8007f98:	08009b28 	.word	0x08009b28
 8007f9c:	3ff00000 	.word	0x3ff00000
 8007fa0:	40240000 	.word	0x40240000
 8007fa4:	401c0000 	.word	0x401c0000
 8007fa8:	40140000 	.word	0x40140000
 8007fac:	3fe00000 	.word	0x3fe00000
 8007fb0:	4631      	mov	r1, r6
 8007fb2:	4628      	mov	r0, r5
 8007fb4:	f7f8 fb30 	bl	8000618 <__aeabi_dmul>
 8007fb8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007fbc:	9415      	str	r4, [sp, #84]	@ 0x54
 8007fbe:	4656      	mov	r6, sl
 8007fc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fc4:	f7f8 fdd8 	bl	8000b78 <__aeabi_d2iz>
 8007fc8:	4605      	mov	r5, r0
 8007fca:	f7f8 fabb 	bl	8000544 <__aeabi_i2d>
 8007fce:	4602      	mov	r2, r0
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fd6:	f7f8 f967 	bl	80002a8 <__aeabi_dsub>
 8007fda:	3530      	adds	r5, #48	@ 0x30
 8007fdc:	f806 5b01 	strb.w	r5, [r6], #1
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	460b      	mov	r3, r1
 8007fe4:	42a6      	cmp	r6, r4
 8007fe6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007fea:	f04f 0200 	mov.w	r2, #0
 8007fee:	d124      	bne.n	800803a <_dtoa_r+0x662>
 8007ff0:	4bac      	ldr	r3, [pc, #688]	@ (80082a4 <_dtoa_r+0x8cc>)
 8007ff2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007ff6:	f7f8 f959 	bl	80002ac <__adddf3>
 8007ffa:	4602      	mov	r2, r0
 8007ffc:	460b      	mov	r3, r1
 8007ffe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008002:	f7f8 fd99 	bl	8000b38 <__aeabi_dcmpgt>
 8008006:	2800      	cmp	r0, #0
 8008008:	d145      	bne.n	8008096 <_dtoa_r+0x6be>
 800800a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800800e:	49a5      	ldr	r1, [pc, #660]	@ (80082a4 <_dtoa_r+0x8cc>)
 8008010:	2000      	movs	r0, #0
 8008012:	f7f8 f949 	bl	80002a8 <__aeabi_dsub>
 8008016:	4602      	mov	r2, r0
 8008018:	460b      	mov	r3, r1
 800801a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800801e:	f7f8 fd6d 	bl	8000afc <__aeabi_dcmplt>
 8008022:	2800      	cmp	r0, #0
 8008024:	f43f aef5 	beq.w	8007e12 <_dtoa_r+0x43a>
 8008028:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800802a:	1e73      	subs	r3, r6, #1
 800802c:	9315      	str	r3, [sp, #84]	@ 0x54
 800802e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008032:	2b30      	cmp	r3, #48	@ 0x30
 8008034:	d0f8      	beq.n	8008028 <_dtoa_r+0x650>
 8008036:	9f04      	ldr	r7, [sp, #16]
 8008038:	e73e      	b.n	8007eb8 <_dtoa_r+0x4e0>
 800803a:	4b9b      	ldr	r3, [pc, #620]	@ (80082a8 <_dtoa_r+0x8d0>)
 800803c:	f7f8 faec 	bl	8000618 <__aeabi_dmul>
 8008040:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008044:	e7bc      	b.n	8007fc0 <_dtoa_r+0x5e8>
 8008046:	d10c      	bne.n	8008062 <_dtoa_r+0x68a>
 8008048:	4b98      	ldr	r3, [pc, #608]	@ (80082ac <_dtoa_r+0x8d4>)
 800804a:	2200      	movs	r2, #0
 800804c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008050:	f7f8 fae2 	bl	8000618 <__aeabi_dmul>
 8008054:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008058:	f7f8 fd64 	bl	8000b24 <__aeabi_dcmpge>
 800805c:	2800      	cmp	r0, #0
 800805e:	f000 8157 	beq.w	8008310 <_dtoa_r+0x938>
 8008062:	2400      	movs	r4, #0
 8008064:	4625      	mov	r5, r4
 8008066:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008068:	43db      	mvns	r3, r3
 800806a:	9304      	str	r3, [sp, #16]
 800806c:	4656      	mov	r6, sl
 800806e:	2700      	movs	r7, #0
 8008070:	4621      	mov	r1, r4
 8008072:	4658      	mov	r0, fp
 8008074:	f000 fafe 	bl	8008674 <_Bfree>
 8008078:	2d00      	cmp	r5, #0
 800807a:	d0dc      	beq.n	8008036 <_dtoa_r+0x65e>
 800807c:	b12f      	cbz	r7, 800808a <_dtoa_r+0x6b2>
 800807e:	42af      	cmp	r7, r5
 8008080:	d003      	beq.n	800808a <_dtoa_r+0x6b2>
 8008082:	4639      	mov	r1, r7
 8008084:	4658      	mov	r0, fp
 8008086:	f000 faf5 	bl	8008674 <_Bfree>
 800808a:	4629      	mov	r1, r5
 800808c:	4658      	mov	r0, fp
 800808e:	f000 faf1 	bl	8008674 <_Bfree>
 8008092:	e7d0      	b.n	8008036 <_dtoa_r+0x65e>
 8008094:	9704      	str	r7, [sp, #16]
 8008096:	4633      	mov	r3, r6
 8008098:	461e      	mov	r6, r3
 800809a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800809e:	2a39      	cmp	r2, #57	@ 0x39
 80080a0:	d107      	bne.n	80080b2 <_dtoa_r+0x6da>
 80080a2:	459a      	cmp	sl, r3
 80080a4:	d1f8      	bne.n	8008098 <_dtoa_r+0x6c0>
 80080a6:	9a04      	ldr	r2, [sp, #16]
 80080a8:	3201      	adds	r2, #1
 80080aa:	9204      	str	r2, [sp, #16]
 80080ac:	2230      	movs	r2, #48	@ 0x30
 80080ae:	f88a 2000 	strb.w	r2, [sl]
 80080b2:	781a      	ldrb	r2, [r3, #0]
 80080b4:	3201      	adds	r2, #1
 80080b6:	701a      	strb	r2, [r3, #0]
 80080b8:	e7bd      	b.n	8008036 <_dtoa_r+0x65e>
 80080ba:	4b7b      	ldr	r3, [pc, #492]	@ (80082a8 <_dtoa_r+0x8d0>)
 80080bc:	2200      	movs	r2, #0
 80080be:	f7f8 faab 	bl	8000618 <__aeabi_dmul>
 80080c2:	2200      	movs	r2, #0
 80080c4:	2300      	movs	r3, #0
 80080c6:	4604      	mov	r4, r0
 80080c8:	460d      	mov	r5, r1
 80080ca:	f7f8 fd0d 	bl	8000ae8 <__aeabi_dcmpeq>
 80080ce:	2800      	cmp	r0, #0
 80080d0:	f43f aebb 	beq.w	8007e4a <_dtoa_r+0x472>
 80080d4:	e6f0      	b.n	8007eb8 <_dtoa_r+0x4e0>
 80080d6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80080d8:	2a00      	cmp	r2, #0
 80080da:	f000 80db 	beq.w	8008294 <_dtoa_r+0x8bc>
 80080de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080e0:	2a01      	cmp	r2, #1
 80080e2:	f300 80bf 	bgt.w	8008264 <_dtoa_r+0x88c>
 80080e6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80080e8:	2a00      	cmp	r2, #0
 80080ea:	f000 80b7 	beq.w	800825c <_dtoa_r+0x884>
 80080ee:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80080f2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80080f4:	4646      	mov	r6, r8
 80080f6:	9a08      	ldr	r2, [sp, #32]
 80080f8:	2101      	movs	r1, #1
 80080fa:	441a      	add	r2, r3
 80080fc:	4658      	mov	r0, fp
 80080fe:	4498      	add	r8, r3
 8008100:	9208      	str	r2, [sp, #32]
 8008102:	f000 fb6b 	bl	80087dc <__i2b>
 8008106:	4605      	mov	r5, r0
 8008108:	b15e      	cbz	r6, 8008122 <_dtoa_r+0x74a>
 800810a:	9b08      	ldr	r3, [sp, #32]
 800810c:	2b00      	cmp	r3, #0
 800810e:	dd08      	ble.n	8008122 <_dtoa_r+0x74a>
 8008110:	42b3      	cmp	r3, r6
 8008112:	9a08      	ldr	r2, [sp, #32]
 8008114:	bfa8      	it	ge
 8008116:	4633      	movge	r3, r6
 8008118:	eba8 0803 	sub.w	r8, r8, r3
 800811c:	1af6      	subs	r6, r6, r3
 800811e:	1ad3      	subs	r3, r2, r3
 8008120:	9308      	str	r3, [sp, #32]
 8008122:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008124:	b1f3      	cbz	r3, 8008164 <_dtoa_r+0x78c>
 8008126:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008128:	2b00      	cmp	r3, #0
 800812a:	f000 80b7 	beq.w	800829c <_dtoa_r+0x8c4>
 800812e:	b18c      	cbz	r4, 8008154 <_dtoa_r+0x77c>
 8008130:	4629      	mov	r1, r5
 8008132:	4622      	mov	r2, r4
 8008134:	4658      	mov	r0, fp
 8008136:	f000 fc11 	bl	800895c <__pow5mult>
 800813a:	464a      	mov	r2, r9
 800813c:	4601      	mov	r1, r0
 800813e:	4605      	mov	r5, r0
 8008140:	4658      	mov	r0, fp
 8008142:	f000 fb61 	bl	8008808 <__multiply>
 8008146:	4649      	mov	r1, r9
 8008148:	9004      	str	r0, [sp, #16]
 800814a:	4658      	mov	r0, fp
 800814c:	f000 fa92 	bl	8008674 <_Bfree>
 8008150:	9b04      	ldr	r3, [sp, #16]
 8008152:	4699      	mov	r9, r3
 8008154:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008156:	1b1a      	subs	r2, r3, r4
 8008158:	d004      	beq.n	8008164 <_dtoa_r+0x78c>
 800815a:	4649      	mov	r1, r9
 800815c:	4658      	mov	r0, fp
 800815e:	f000 fbfd 	bl	800895c <__pow5mult>
 8008162:	4681      	mov	r9, r0
 8008164:	2101      	movs	r1, #1
 8008166:	4658      	mov	r0, fp
 8008168:	f000 fb38 	bl	80087dc <__i2b>
 800816c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800816e:	4604      	mov	r4, r0
 8008170:	2b00      	cmp	r3, #0
 8008172:	f000 81cf 	beq.w	8008514 <_dtoa_r+0xb3c>
 8008176:	461a      	mov	r2, r3
 8008178:	4601      	mov	r1, r0
 800817a:	4658      	mov	r0, fp
 800817c:	f000 fbee 	bl	800895c <__pow5mult>
 8008180:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008182:	2b01      	cmp	r3, #1
 8008184:	4604      	mov	r4, r0
 8008186:	f300 8095 	bgt.w	80082b4 <_dtoa_r+0x8dc>
 800818a:	9b02      	ldr	r3, [sp, #8]
 800818c:	2b00      	cmp	r3, #0
 800818e:	f040 8087 	bne.w	80082a0 <_dtoa_r+0x8c8>
 8008192:	9b03      	ldr	r3, [sp, #12]
 8008194:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008198:	2b00      	cmp	r3, #0
 800819a:	f040 8089 	bne.w	80082b0 <_dtoa_r+0x8d8>
 800819e:	9b03      	ldr	r3, [sp, #12]
 80081a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80081a4:	0d1b      	lsrs	r3, r3, #20
 80081a6:	051b      	lsls	r3, r3, #20
 80081a8:	b12b      	cbz	r3, 80081b6 <_dtoa_r+0x7de>
 80081aa:	9b08      	ldr	r3, [sp, #32]
 80081ac:	3301      	adds	r3, #1
 80081ae:	9308      	str	r3, [sp, #32]
 80081b0:	f108 0801 	add.w	r8, r8, #1
 80081b4:	2301      	movs	r3, #1
 80081b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80081b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	f000 81b0 	beq.w	8008520 <_dtoa_r+0xb48>
 80081c0:	6923      	ldr	r3, [r4, #16]
 80081c2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80081c6:	6918      	ldr	r0, [r3, #16]
 80081c8:	f000 fabc 	bl	8008744 <__hi0bits>
 80081cc:	f1c0 0020 	rsb	r0, r0, #32
 80081d0:	9b08      	ldr	r3, [sp, #32]
 80081d2:	4418      	add	r0, r3
 80081d4:	f010 001f 	ands.w	r0, r0, #31
 80081d8:	d077      	beq.n	80082ca <_dtoa_r+0x8f2>
 80081da:	f1c0 0320 	rsb	r3, r0, #32
 80081de:	2b04      	cmp	r3, #4
 80081e0:	dd6b      	ble.n	80082ba <_dtoa_r+0x8e2>
 80081e2:	9b08      	ldr	r3, [sp, #32]
 80081e4:	f1c0 001c 	rsb	r0, r0, #28
 80081e8:	4403      	add	r3, r0
 80081ea:	4480      	add	r8, r0
 80081ec:	4406      	add	r6, r0
 80081ee:	9308      	str	r3, [sp, #32]
 80081f0:	f1b8 0f00 	cmp.w	r8, #0
 80081f4:	dd05      	ble.n	8008202 <_dtoa_r+0x82a>
 80081f6:	4649      	mov	r1, r9
 80081f8:	4642      	mov	r2, r8
 80081fa:	4658      	mov	r0, fp
 80081fc:	f000 fc08 	bl	8008a10 <__lshift>
 8008200:	4681      	mov	r9, r0
 8008202:	9b08      	ldr	r3, [sp, #32]
 8008204:	2b00      	cmp	r3, #0
 8008206:	dd05      	ble.n	8008214 <_dtoa_r+0x83c>
 8008208:	4621      	mov	r1, r4
 800820a:	461a      	mov	r2, r3
 800820c:	4658      	mov	r0, fp
 800820e:	f000 fbff 	bl	8008a10 <__lshift>
 8008212:	4604      	mov	r4, r0
 8008214:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008216:	2b00      	cmp	r3, #0
 8008218:	d059      	beq.n	80082ce <_dtoa_r+0x8f6>
 800821a:	4621      	mov	r1, r4
 800821c:	4648      	mov	r0, r9
 800821e:	f000 fc63 	bl	8008ae8 <__mcmp>
 8008222:	2800      	cmp	r0, #0
 8008224:	da53      	bge.n	80082ce <_dtoa_r+0x8f6>
 8008226:	1e7b      	subs	r3, r7, #1
 8008228:	9304      	str	r3, [sp, #16]
 800822a:	4649      	mov	r1, r9
 800822c:	2300      	movs	r3, #0
 800822e:	220a      	movs	r2, #10
 8008230:	4658      	mov	r0, fp
 8008232:	f000 fa41 	bl	80086b8 <__multadd>
 8008236:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008238:	4681      	mov	r9, r0
 800823a:	2b00      	cmp	r3, #0
 800823c:	f000 8172 	beq.w	8008524 <_dtoa_r+0xb4c>
 8008240:	2300      	movs	r3, #0
 8008242:	4629      	mov	r1, r5
 8008244:	220a      	movs	r2, #10
 8008246:	4658      	mov	r0, fp
 8008248:	f000 fa36 	bl	80086b8 <__multadd>
 800824c:	9b00      	ldr	r3, [sp, #0]
 800824e:	2b00      	cmp	r3, #0
 8008250:	4605      	mov	r5, r0
 8008252:	dc67      	bgt.n	8008324 <_dtoa_r+0x94c>
 8008254:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008256:	2b02      	cmp	r3, #2
 8008258:	dc41      	bgt.n	80082de <_dtoa_r+0x906>
 800825a:	e063      	b.n	8008324 <_dtoa_r+0x94c>
 800825c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800825e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008262:	e746      	b.n	80080f2 <_dtoa_r+0x71a>
 8008264:	9b07      	ldr	r3, [sp, #28]
 8008266:	1e5c      	subs	r4, r3, #1
 8008268:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800826a:	42a3      	cmp	r3, r4
 800826c:	bfbf      	itttt	lt
 800826e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008270:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008272:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008274:	1ae3      	sublt	r3, r4, r3
 8008276:	bfb4      	ite	lt
 8008278:	18d2      	addlt	r2, r2, r3
 800827a:	1b1c      	subge	r4, r3, r4
 800827c:	9b07      	ldr	r3, [sp, #28]
 800827e:	bfbc      	itt	lt
 8008280:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008282:	2400      	movlt	r4, #0
 8008284:	2b00      	cmp	r3, #0
 8008286:	bfb5      	itete	lt
 8008288:	eba8 0603 	sublt.w	r6, r8, r3
 800828c:	9b07      	ldrge	r3, [sp, #28]
 800828e:	2300      	movlt	r3, #0
 8008290:	4646      	movge	r6, r8
 8008292:	e730      	b.n	80080f6 <_dtoa_r+0x71e>
 8008294:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008296:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008298:	4646      	mov	r6, r8
 800829a:	e735      	b.n	8008108 <_dtoa_r+0x730>
 800829c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800829e:	e75c      	b.n	800815a <_dtoa_r+0x782>
 80082a0:	2300      	movs	r3, #0
 80082a2:	e788      	b.n	80081b6 <_dtoa_r+0x7de>
 80082a4:	3fe00000 	.word	0x3fe00000
 80082a8:	40240000 	.word	0x40240000
 80082ac:	40140000 	.word	0x40140000
 80082b0:	9b02      	ldr	r3, [sp, #8]
 80082b2:	e780      	b.n	80081b6 <_dtoa_r+0x7de>
 80082b4:	2300      	movs	r3, #0
 80082b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80082b8:	e782      	b.n	80081c0 <_dtoa_r+0x7e8>
 80082ba:	d099      	beq.n	80081f0 <_dtoa_r+0x818>
 80082bc:	9a08      	ldr	r2, [sp, #32]
 80082be:	331c      	adds	r3, #28
 80082c0:	441a      	add	r2, r3
 80082c2:	4498      	add	r8, r3
 80082c4:	441e      	add	r6, r3
 80082c6:	9208      	str	r2, [sp, #32]
 80082c8:	e792      	b.n	80081f0 <_dtoa_r+0x818>
 80082ca:	4603      	mov	r3, r0
 80082cc:	e7f6      	b.n	80082bc <_dtoa_r+0x8e4>
 80082ce:	9b07      	ldr	r3, [sp, #28]
 80082d0:	9704      	str	r7, [sp, #16]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	dc20      	bgt.n	8008318 <_dtoa_r+0x940>
 80082d6:	9300      	str	r3, [sp, #0]
 80082d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082da:	2b02      	cmp	r3, #2
 80082dc:	dd1e      	ble.n	800831c <_dtoa_r+0x944>
 80082de:	9b00      	ldr	r3, [sp, #0]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	f47f aec0 	bne.w	8008066 <_dtoa_r+0x68e>
 80082e6:	4621      	mov	r1, r4
 80082e8:	2205      	movs	r2, #5
 80082ea:	4658      	mov	r0, fp
 80082ec:	f000 f9e4 	bl	80086b8 <__multadd>
 80082f0:	4601      	mov	r1, r0
 80082f2:	4604      	mov	r4, r0
 80082f4:	4648      	mov	r0, r9
 80082f6:	f000 fbf7 	bl	8008ae8 <__mcmp>
 80082fa:	2800      	cmp	r0, #0
 80082fc:	f77f aeb3 	ble.w	8008066 <_dtoa_r+0x68e>
 8008300:	4656      	mov	r6, sl
 8008302:	2331      	movs	r3, #49	@ 0x31
 8008304:	f806 3b01 	strb.w	r3, [r6], #1
 8008308:	9b04      	ldr	r3, [sp, #16]
 800830a:	3301      	adds	r3, #1
 800830c:	9304      	str	r3, [sp, #16]
 800830e:	e6ae      	b.n	800806e <_dtoa_r+0x696>
 8008310:	9c07      	ldr	r4, [sp, #28]
 8008312:	9704      	str	r7, [sp, #16]
 8008314:	4625      	mov	r5, r4
 8008316:	e7f3      	b.n	8008300 <_dtoa_r+0x928>
 8008318:	9b07      	ldr	r3, [sp, #28]
 800831a:	9300      	str	r3, [sp, #0]
 800831c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800831e:	2b00      	cmp	r3, #0
 8008320:	f000 8104 	beq.w	800852c <_dtoa_r+0xb54>
 8008324:	2e00      	cmp	r6, #0
 8008326:	dd05      	ble.n	8008334 <_dtoa_r+0x95c>
 8008328:	4629      	mov	r1, r5
 800832a:	4632      	mov	r2, r6
 800832c:	4658      	mov	r0, fp
 800832e:	f000 fb6f 	bl	8008a10 <__lshift>
 8008332:	4605      	mov	r5, r0
 8008334:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008336:	2b00      	cmp	r3, #0
 8008338:	d05a      	beq.n	80083f0 <_dtoa_r+0xa18>
 800833a:	6869      	ldr	r1, [r5, #4]
 800833c:	4658      	mov	r0, fp
 800833e:	f000 f959 	bl	80085f4 <_Balloc>
 8008342:	4606      	mov	r6, r0
 8008344:	b928      	cbnz	r0, 8008352 <_dtoa_r+0x97a>
 8008346:	4b84      	ldr	r3, [pc, #528]	@ (8008558 <_dtoa_r+0xb80>)
 8008348:	4602      	mov	r2, r0
 800834a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800834e:	f7ff bb5a 	b.w	8007a06 <_dtoa_r+0x2e>
 8008352:	692a      	ldr	r2, [r5, #16]
 8008354:	3202      	adds	r2, #2
 8008356:	0092      	lsls	r2, r2, #2
 8008358:	f105 010c 	add.w	r1, r5, #12
 800835c:	300c      	adds	r0, #12
 800835e:	f7ff faa2 	bl	80078a6 <memcpy>
 8008362:	2201      	movs	r2, #1
 8008364:	4631      	mov	r1, r6
 8008366:	4658      	mov	r0, fp
 8008368:	f000 fb52 	bl	8008a10 <__lshift>
 800836c:	f10a 0301 	add.w	r3, sl, #1
 8008370:	9307      	str	r3, [sp, #28]
 8008372:	9b00      	ldr	r3, [sp, #0]
 8008374:	4453      	add	r3, sl
 8008376:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008378:	9b02      	ldr	r3, [sp, #8]
 800837a:	f003 0301 	and.w	r3, r3, #1
 800837e:	462f      	mov	r7, r5
 8008380:	930a      	str	r3, [sp, #40]	@ 0x28
 8008382:	4605      	mov	r5, r0
 8008384:	9b07      	ldr	r3, [sp, #28]
 8008386:	4621      	mov	r1, r4
 8008388:	3b01      	subs	r3, #1
 800838a:	4648      	mov	r0, r9
 800838c:	9300      	str	r3, [sp, #0]
 800838e:	f7ff fa98 	bl	80078c2 <quorem>
 8008392:	4639      	mov	r1, r7
 8008394:	9002      	str	r0, [sp, #8]
 8008396:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800839a:	4648      	mov	r0, r9
 800839c:	f000 fba4 	bl	8008ae8 <__mcmp>
 80083a0:	462a      	mov	r2, r5
 80083a2:	9008      	str	r0, [sp, #32]
 80083a4:	4621      	mov	r1, r4
 80083a6:	4658      	mov	r0, fp
 80083a8:	f000 fbba 	bl	8008b20 <__mdiff>
 80083ac:	68c2      	ldr	r2, [r0, #12]
 80083ae:	4606      	mov	r6, r0
 80083b0:	bb02      	cbnz	r2, 80083f4 <_dtoa_r+0xa1c>
 80083b2:	4601      	mov	r1, r0
 80083b4:	4648      	mov	r0, r9
 80083b6:	f000 fb97 	bl	8008ae8 <__mcmp>
 80083ba:	4602      	mov	r2, r0
 80083bc:	4631      	mov	r1, r6
 80083be:	4658      	mov	r0, fp
 80083c0:	920e      	str	r2, [sp, #56]	@ 0x38
 80083c2:	f000 f957 	bl	8008674 <_Bfree>
 80083c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083c8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80083ca:	9e07      	ldr	r6, [sp, #28]
 80083cc:	ea43 0102 	orr.w	r1, r3, r2
 80083d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083d2:	4319      	orrs	r1, r3
 80083d4:	d110      	bne.n	80083f8 <_dtoa_r+0xa20>
 80083d6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80083da:	d029      	beq.n	8008430 <_dtoa_r+0xa58>
 80083dc:	9b08      	ldr	r3, [sp, #32]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	dd02      	ble.n	80083e8 <_dtoa_r+0xa10>
 80083e2:	9b02      	ldr	r3, [sp, #8]
 80083e4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80083e8:	9b00      	ldr	r3, [sp, #0]
 80083ea:	f883 8000 	strb.w	r8, [r3]
 80083ee:	e63f      	b.n	8008070 <_dtoa_r+0x698>
 80083f0:	4628      	mov	r0, r5
 80083f2:	e7bb      	b.n	800836c <_dtoa_r+0x994>
 80083f4:	2201      	movs	r2, #1
 80083f6:	e7e1      	b.n	80083bc <_dtoa_r+0x9e4>
 80083f8:	9b08      	ldr	r3, [sp, #32]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	db04      	blt.n	8008408 <_dtoa_r+0xa30>
 80083fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008400:	430b      	orrs	r3, r1
 8008402:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008404:	430b      	orrs	r3, r1
 8008406:	d120      	bne.n	800844a <_dtoa_r+0xa72>
 8008408:	2a00      	cmp	r2, #0
 800840a:	dded      	ble.n	80083e8 <_dtoa_r+0xa10>
 800840c:	4649      	mov	r1, r9
 800840e:	2201      	movs	r2, #1
 8008410:	4658      	mov	r0, fp
 8008412:	f000 fafd 	bl	8008a10 <__lshift>
 8008416:	4621      	mov	r1, r4
 8008418:	4681      	mov	r9, r0
 800841a:	f000 fb65 	bl	8008ae8 <__mcmp>
 800841e:	2800      	cmp	r0, #0
 8008420:	dc03      	bgt.n	800842a <_dtoa_r+0xa52>
 8008422:	d1e1      	bne.n	80083e8 <_dtoa_r+0xa10>
 8008424:	f018 0f01 	tst.w	r8, #1
 8008428:	d0de      	beq.n	80083e8 <_dtoa_r+0xa10>
 800842a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800842e:	d1d8      	bne.n	80083e2 <_dtoa_r+0xa0a>
 8008430:	9a00      	ldr	r2, [sp, #0]
 8008432:	2339      	movs	r3, #57	@ 0x39
 8008434:	7013      	strb	r3, [r2, #0]
 8008436:	4633      	mov	r3, r6
 8008438:	461e      	mov	r6, r3
 800843a:	3b01      	subs	r3, #1
 800843c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008440:	2a39      	cmp	r2, #57	@ 0x39
 8008442:	d052      	beq.n	80084ea <_dtoa_r+0xb12>
 8008444:	3201      	adds	r2, #1
 8008446:	701a      	strb	r2, [r3, #0]
 8008448:	e612      	b.n	8008070 <_dtoa_r+0x698>
 800844a:	2a00      	cmp	r2, #0
 800844c:	dd07      	ble.n	800845e <_dtoa_r+0xa86>
 800844e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008452:	d0ed      	beq.n	8008430 <_dtoa_r+0xa58>
 8008454:	9a00      	ldr	r2, [sp, #0]
 8008456:	f108 0301 	add.w	r3, r8, #1
 800845a:	7013      	strb	r3, [r2, #0]
 800845c:	e608      	b.n	8008070 <_dtoa_r+0x698>
 800845e:	9b07      	ldr	r3, [sp, #28]
 8008460:	9a07      	ldr	r2, [sp, #28]
 8008462:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008466:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008468:	4293      	cmp	r3, r2
 800846a:	d028      	beq.n	80084be <_dtoa_r+0xae6>
 800846c:	4649      	mov	r1, r9
 800846e:	2300      	movs	r3, #0
 8008470:	220a      	movs	r2, #10
 8008472:	4658      	mov	r0, fp
 8008474:	f000 f920 	bl	80086b8 <__multadd>
 8008478:	42af      	cmp	r7, r5
 800847a:	4681      	mov	r9, r0
 800847c:	f04f 0300 	mov.w	r3, #0
 8008480:	f04f 020a 	mov.w	r2, #10
 8008484:	4639      	mov	r1, r7
 8008486:	4658      	mov	r0, fp
 8008488:	d107      	bne.n	800849a <_dtoa_r+0xac2>
 800848a:	f000 f915 	bl	80086b8 <__multadd>
 800848e:	4607      	mov	r7, r0
 8008490:	4605      	mov	r5, r0
 8008492:	9b07      	ldr	r3, [sp, #28]
 8008494:	3301      	adds	r3, #1
 8008496:	9307      	str	r3, [sp, #28]
 8008498:	e774      	b.n	8008384 <_dtoa_r+0x9ac>
 800849a:	f000 f90d 	bl	80086b8 <__multadd>
 800849e:	4629      	mov	r1, r5
 80084a0:	4607      	mov	r7, r0
 80084a2:	2300      	movs	r3, #0
 80084a4:	220a      	movs	r2, #10
 80084a6:	4658      	mov	r0, fp
 80084a8:	f000 f906 	bl	80086b8 <__multadd>
 80084ac:	4605      	mov	r5, r0
 80084ae:	e7f0      	b.n	8008492 <_dtoa_r+0xaba>
 80084b0:	9b00      	ldr	r3, [sp, #0]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	bfcc      	ite	gt
 80084b6:	461e      	movgt	r6, r3
 80084b8:	2601      	movle	r6, #1
 80084ba:	4456      	add	r6, sl
 80084bc:	2700      	movs	r7, #0
 80084be:	4649      	mov	r1, r9
 80084c0:	2201      	movs	r2, #1
 80084c2:	4658      	mov	r0, fp
 80084c4:	f000 faa4 	bl	8008a10 <__lshift>
 80084c8:	4621      	mov	r1, r4
 80084ca:	4681      	mov	r9, r0
 80084cc:	f000 fb0c 	bl	8008ae8 <__mcmp>
 80084d0:	2800      	cmp	r0, #0
 80084d2:	dcb0      	bgt.n	8008436 <_dtoa_r+0xa5e>
 80084d4:	d102      	bne.n	80084dc <_dtoa_r+0xb04>
 80084d6:	f018 0f01 	tst.w	r8, #1
 80084da:	d1ac      	bne.n	8008436 <_dtoa_r+0xa5e>
 80084dc:	4633      	mov	r3, r6
 80084de:	461e      	mov	r6, r3
 80084e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80084e4:	2a30      	cmp	r2, #48	@ 0x30
 80084e6:	d0fa      	beq.n	80084de <_dtoa_r+0xb06>
 80084e8:	e5c2      	b.n	8008070 <_dtoa_r+0x698>
 80084ea:	459a      	cmp	sl, r3
 80084ec:	d1a4      	bne.n	8008438 <_dtoa_r+0xa60>
 80084ee:	9b04      	ldr	r3, [sp, #16]
 80084f0:	3301      	adds	r3, #1
 80084f2:	9304      	str	r3, [sp, #16]
 80084f4:	2331      	movs	r3, #49	@ 0x31
 80084f6:	f88a 3000 	strb.w	r3, [sl]
 80084fa:	e5b9      	b.n	8008070 <_dtoa_r+0x698>
 80084fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80084fe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800855c <_dtoa_r+0xb84>
 8008502:	b11b      	cbz	r3, 800850c <_dtoa_r+0xb34>
 8008504:	f10a 0308 	add.w	r3, sl, #8
 8008508:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800850a:	6013      	str	r3, [r2, #0]
 800850c:	4650      	mov	r0, sl
 800850e:	b019      	add	sp, #100	@ 0x64
 8008510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008514:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008516:	2b01      	cmp	r3, #1
 8008518:	f77f ae37 	ble.w	800818a <_dtoa_r+0x7b2>
 800851c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800851e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008520:	2001      	movs	r0, #1
 8008522:	e655      	b.n	80081d0 <_dtoa_r+0x7f8>
 8008524:	9b00      	ldr	r3, [sp, #0]
 8008526:	2b00      	cmp	r3, #0
 8008528:	f77f aed6 	ble.w	80082d8 <_dtoa_r+0x900>
 800852c:	4656      	mov	r6, sl
 800852e:	4621      	mov	r1, r4
 8008530:	4648      	mov	r0, r9
 8008532:	f7ff f9c6 	bl	80078c2 <quorem>
 8008536:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800853a:	f806 8b01 	strb.w	r8, [r6], #1
 800853e:	9b00      	ldr	r3, [sp, #0]
 8008540:	eba6 020a 	sub.w	r2, r6, sl
 8008544:	4293      	cmp	r3, r2
 8008546:	ddb3      	ble.n	80084b0 <_dtoa_r+0xad8>
 8008548:	4649      	mov	r1, r9
 800854a:	2300      	movs	r3, #0
 800854c:	220a      	movs	r2, #10
 800854e:	4658      	mov	r0, fp
 8008550:	f000 f8b2 	bl	80086b8 <__multadd>
 8008554:	4681      	mov	r9, r0
 8008556:	e7ea      	b.n	800852e <_dtoa_r+0xb56>
 8008558:	08009aac 	.word	0x08009aac
 800855c:	08009a30 	.word	0x08009a30

08008560 <_free_r>:
 8008560:	b538      	push	{r3, r4, r5, lr}
 8008562:	4605      	mov	r5, r0
 8008564:	2900      	cmp	r1, #0
 8008566:	d041      	beq.n	80085ec <_free_r+0x8c>
 8008568:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800856c:	1f0c      	subs	r4, r1, #4
 800856e:	2b00      	cmp	r3, #0
 8008570:	bfb8      	it	lt
 8008572:	18e4      	addlt	r4, r4, r3
 8008574:	f7fe fb38 	bl	8006be8 <__malloc_lock>
 8008578:	4a1d      	ldr	r2, [pc, #116]	@ (80085f0 <_free_r+0x90>)
 800857a:	6813      	ldr	r3, [r2, #0]
 800857c:	b933      	cbnz	r3, 800858c <_free_r+0x2c>
 800857e:	6063      	str	r3, [r4, #4]
 8008580:	6014      	str	r4, [r2, #0]
 8008582:	4628      	mov	r0, r5
 8008584:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008588:	f7fe bb34 	b.w	8006bf4 <__malloc_unlock>
 800858c:	42a3      	cmp	r3, r4
 800858e:	d908      	bls.n	80085a2 <_free_r+0x42>
 8008590:	6820      	ldr	r0, [r4, #0]
 8008592:	1821      	adds	r1, r4, r0
 8008594:	428b      	cmp	r3, r1
 8008596:	bf01      	itttt	eq
 8008598:	6819      	ldreq	r1, [r3, #0]
 800859a:	685b      	ldreq	r3, [r3, #4]
 800859c:	1809      	addeq	r1, r1, r0
 800859e:	6021      	streq	r1, [r4, #0]
 80085a0:	e7ed      	b.n	800857e <_free_r+0x1e>
 80085a2:	461a      	mov	r2, r3
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	b10b      	cbz	r3, 80085ac <_free_r+0x4c>
 80085a8:	42a3      	cmp	r3, r4
 80085aa:	d9fa      	bls.n	80085a2 <_free_r+0x42>
 80085ac:	6811      	ldr	r1, [r2, #0]
 80085ae:	1850      	adds	r0, r2, r1
 80085b0:	42a0      	cmp	r0, r4
 80085b2:	d10b      	bne.n	80085cc <_free_r+0x6c>
 80085b4:	6820      	ldr	r0, [r4, #0]
 80085b6:	4401      	add	r1, r0
 80085b8:	1850      	adds	r0, r2, r1
 80085ba:	4283      	cmp	r3, r0
 80085bc:	6011      	str	r1, [r2, #0]
 80085be:	d1e0      	bne.n	8008582 <_free_r+0x22>
 80085c0:	6818      	ldr	r0, [r3, #0]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	6053      	str	r3, [r2, #4]
 80085c6:	4408      	add	r0, r1
 80085c8:	6010      	str	r0, [r2, #0]
 80085ca:	e7da      	b.n	8008582 <_free_r+0x22>
 80085cc:	d902      	bls.n	80085d4 <_free_r+0x74>
 80085ce:	230c      	movs	r3, #12
 80085d0:	602b      	str	r3, [r5, #0]
 80085d2:	e7d6      	b.n	8008582 <_free_r+0x22>
 80085d4:	6820      	ldr	r0, [r4, #0]
 80085d6:	1821      	adds	r1, r4, r0
 80085d8:	428b      	cmp	r3, r1
 80085da:	bf04      	itt	eq
 80085dc:	6819      	ldreq	r1, [r3, #0]
 80085de:	685b      	ldreq	r3, [r3, #4]
 80085e0:	6063      	str	r3, [r4, #4]
 80085e2:	bf04      	itt	eq
 80085e4:	1809      	addeq	r1, r1, r0
 80085e6:	6021      	streq	r1, [r4, #0]
 80085e8:	6054      	str	r4, [r2, #4]
 80085ea:	e7ca      	b.n	8008582 <_free_r+0x22>
 80085ec:	bd38      	pop	{r3, r4, r5, pc}
 80085ee:	bf00      	nop
 80085f0:	20001008 	.word	0x20001008

080085f4 <_Balloc>:
 80085f4:	b570      	push	{r4, r5, r6, lr}
 80085f6:	69c6      	ldr	r6, [r0, #28]
 80085f8:	4604      	mov	r4, r0
 80085fa:	460d      	mov	r5, r1
 80085fc:	b976      	cbnz	r6, 800861c <_Balloc+0x28>
 80085fe:	2010      	movs	r0, #16
 8008600:	f7fe fa48 	bl	8006a94 <malloc>
 8008604:	4602      	mov	r2, r0
 8008606:	61e0      	str	r0, [r4, #28]
 8008608:	b920      	cbnz	r0, 8008614 <_Balloc+0x20>
 800860a:	4b18      	ldr	r3, [pc, #96]	@ (800866c <_Balloc+0x78>)
 800860c:	4818      	ldr	r0, [pc, #96]	@ (8008670 <_Balloc+0x7c>)
 800860e:	216b      	movs	r1, #107	@ 0x6b
 8008610:	f000 fd90 	bl	8009134 <__assert_func>
 8008614:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008618:	6006      	str	r6, [r0, #0]
 800861a:	60c6      	str	r6, [r0, #12]
 800861c:	69e6      	ldr	r6, [r4, #28]
 800861e:	68f3      	ldr	r3, [r6, #12]
 8008620:	b183      	cbz	r3, 8008644 <_Balloc+0x50>
 8008622:	69e3      	ldr	r3, [r4, #28]
 8008624:	68db      	ldr	r3, [r3, #12]
 8008626:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800862a:	b9b8      	cbnz	r0, 800865c <_Balloc+0x68>
 800862c:	2101      	movs	r1, #1
 800862e:	fa01 f605 	lsl.w	r6, r1, r5
 8008632:	1d72      	adds	r2, r6, #5
 8008634:	0092      	lsls	r2, r2, #2
 8008636:	4620      	mov	r0, r4
 8008638:	f000 fd9a 	bl	8009170 <_calloc_r>
 800863c:	b160      	cbz	r0, 8008658 <_Balloc+0x64>
 800863e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008642:	e00e      	b.n	8008662 <_Balloc+0x6e>
 8008644:	2221      	movs	r2, #33	@ 0x21
 8008646:	2104      	movs	r1, #4
 8008648:	4620      	mov	r0, r4
 800864a:	f000 fd91 	bl	8009170 <_calloc_r>
 800864e:	69e3      	ldr	r3, [r4, #28]
 8008650:	60f0      	str	r0, [r6, #12]
 8008652:	68db      	ldr	r3, [r3, #12]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d1e4      	bne.n	8008622 <_Balloc+0x2e>
 8008658:	2000      	movs	r0, #0
 800865a:	bd70      	pop	{r4, r5, r6, pc}
 800865c:	6802      	ldr	r2, [r0, #0]
 800865e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008662:	2300      	movs	r3, #0
 8008664:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008668:	e7f7      	b.n	800865a <_Balloc+0x66>
 800866a:	bf00      	nop
 800866c:	08009a3d 	.word	0x08009a3d
 8008670:	08009abd 	.word	0x08009abd

08008674 <_Bfree>:
 8008674:	b570      	push	{r4, r5, r6, lr}
 8008676:	69c6      	ldr	r6, [r0, #28]
 8008678:	4605      	mov	r5, r0
 800867a:	460c      	mov	r4, r1
 800867c:	b976      	cbnz	r6, 800869c <_Bfree+0x28>
 800867e:	2010      	movs	r0, #16
 8008680:	f7fe fa08 	bl	8006a94 <malloc>
 8008684:	4602      	mov	r2, r0
 8008686:	61e8      	str	r0, [r5, #28]
 8008688:	b920      	cbnz	r0, 8008694 <_Bfree+0x20>
 800868a:	4b09      	ldr	r3, [pc, #36]	@ (80086b0 <_Bfree+0x3c>)
 800868c:	4809      	ldr	r0, [pc, #36]	@ (80086b4 <_Bfree+0x40>)
 800868e:	218f      	movs	r1, #143	@ 0x8f
 8008690:	f000 fd50 	bl	8009134 <__assert_func>
 8008694:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008698:	6006      	str	r6, [r0, #0]
 800869a:	60c6      	str	r6, [r0, #12]
 800869c:	b13c      	cbz	r4, 80086ae <_Bfree+0x3a>
 800869e:	69eb      	ldr	r3, [r5, #28]
 80086a0:	6862      	ldr	r2, [r4, #4]
 80086a2:	68db      	ldr	r3, [r3, #12]
 80086a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80086a8:	6021      	str	r1, [r4, #0]
 80086aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80086ae:	bd70      	pop	{r4, r5, r6, pc}
 80086b0:	08009a3d 	.word	0x08009a3d
 80086b4:	08009abd 	.word	0x08009abd

080086b8 <__multadd>:
 80086b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086bc:	690d      	ldr	r5, [r1, #16]
 80086be:	4607      	mov	r7, r0
 80086c0:	460c      	mov	r4, r1
 80086c2:	461e      	mov	r6, r3
 80086c4:	f101 0c14 	add.w	ip, r1, #20
 80086c8:	2000      	movs	r0, #0
 80086ca:	f8dc 3000 	ldr.w	r3, [ip]
 80086ce:	b299      	uxth	r1, r3
 80086d0:	fb02 6101 	mla	r1, r2, r1, r6
 80086d4:	0c1e      	lsrs	r6, r3, #16
 80086d6:	0c0b      	lsrs	r3, r1, #16
 80086d8:	fb02 3306 	mla	r3, r2, r6, r3
 80086dc:	b289      	uxth	r1, r1
 80086de:	3001      	adds	r0, #1
 80086e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80086e4:	4285      	cmp	r5, r0
 80086e6:	f84c 1b04 	str.w	r1, [ip], #4
 80086ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80086ee:	dcec      	bgt.n	80086ca <__multadd+0x12>
 80086f0:	b30e      	cbz	r6, 8008736 <__multadd+0x7e>
 80086f2:	68a3      	ldr	r3, [r4, #8]
 80086f4:	42ab      	cmp	r3, r5
 80086f6:	dc19      	bgt.n	800872c <__multadd+0x74>
 80086f8:	6861      	ldr	r1, [r4, #4]
 80086fa:	4638      	mov	r0, r7
 80086fc:	3101      	adds	r1, #1
 80086fe:	f7ff ff79 	bl	80085f4 <_Balloc>
 8008702:	4680      	mov	r8, r0
 8008704:	b928      	cbnz	r0, 8008712 <__multadd+0x5a>
 8008706:	4602      	mov	r2, r0
 8008708:	4b0c      	ldr	r3, [pc, #48]	@ (800873c <__multadd+0x84>)
 800870a:	480d      	ldr	r0, [pc, #52]	@ (8008740 <__multadd+0x88>)
 800870c:	21ba      	movs	r1, #186	@ 0xba
 800870e:	f000 fd11 	bl	8009134 <__assert_func>
 8008712:	6922      	ldr	r2, [r4, #16]
 8008714:	3202      	adds	r2, #2
 8008716:	f104 010c 	add.w	r1, r4, #12
 800871a:	0092      	lsls	r2, r2, #2
 800871c:	300c      	adds	r0, #12
 800871e:	f7ff f8c2 	bl	80078a6 <memcpy>
 8008722:	4621      	mov	r1, r4
 8008724:	4638      	mov	r0, r7
 8008726:	f7ff ffa5 	bl	8008674 <_Bfree>
 800872a:	4644      	mov	r4, r8
 800872c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008730:	3501      	adds	r5, #1
 8008732:	615e      	str	r6, [r3, #20]
 8008734:	6125      	str	r5, [r4, #16]
 8008736:	4620      	mov	r0, r4
 8008738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800873c:	08009aac 	.word	0x08009aac
 8008740:	08009abd 	.word	0x08009abd

08008744 <__hi0bits>:
 8008744:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008748:	4603      	mov	r3, r0
 800874a:	bf36      	itet	cc
 800874c:	0403      	lslcc	r3, r0, #16
 800874e:	2000      	movcs	r0, #0
 8008750:	2010      	movcc	r0, #16
 8008752:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008756:	bf3c      	itt	cc
 8008758:	021b      	lslcc	r3, r3, #8
 800875a:	3008      	addcc	r0, #8
 800875c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008760:	bf3c      	itt	cc
 8008762:	011b      	lslcc	r3, r3, #4
 8008764:	3004      	addcc	r0, #4
 8008766:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800876a:	bf3c      	itt	cc
 800876c:	009b      	lslcc	r3, r3, #2
 800876e:	3002      	addcc	r0, #2
 8008770:	2b00      	cmp	r3, #0
 8008772:	db05      	blt.n	8008780 <__hi0bits+0x3c>
 8008774:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008778:	f100 0001 	add.w	r0, r0, #1
 800877c:	bf08      	it	eq
 800877e:	2020      	moveq	r0, #32
 8008780:	4770      	bx	lr

08008782 <__lo0bits>:
 8008782:	6803      	ldr	r3, [r0, #0]
 8008784:	4602      	mov	r2, r0
 8008786:	f013 0007 	ands.w	r0, r3, #7
 800878a:	d00b      	beq.n	80087a4 <__lo0bits+0x22>
 800878c:	07d9      	lsls	r1, r3, #31
 800878e:	d421      	bmi.n	80087d4 <__lo0bits+0x52>
 8008790:	0798      	lsls	r0, r3, #30
 8008792:	bf49      	itett	mi
 8008794:	085b      	lsrmi	r3, r3, #1
 8008796:	089b      	lsrpl	r3, r3, #2
 8008798:	2001      	movmi	r0, #1
 800879a:	6013      	strmi	r3, [r2, #0]
 800879c:	bf5c      	itt	pl
 800879e:	6013      	strpl	r3, [r2, #0]
 80087a0:	2002      	movpl	r0, #2
 80087a2:	4770      	bx	lr
 80087a4:	b299      	uxth	r1, r3
 80087a6:	b909      	cbnz	r1, 80087ac <__lo0bits+0x2a>
 80087a8:	0c1b      	lsrs	r3, r3, #16
 80087aa:	2010      	movs	r0, #16
 80087ac:	b2d9      	uxtb	r1, r3
 80087ae:	b909      	cbnz	r1, 80087b4 <__lo0bits+0x32>
 80087b0:	3008      	adds	r0, #8
 80087b2:	0a1b      	lsrs	r3, r3, #8
 80087b4:	0719      	lsls	r1, r3, #28
 80087b6:	bf04      	itt	eq
 80087b8:	091b      	lsreq	r3, r3, #4
 80087ba:	3004      	addeq	r0, #4
 80087bc:	0799      	lsls	r1, r3, #30
 80087be:	bf04      	itt	eq
 80087c0:	089b      	lsreq	r3, r3, #2
 80087c2:	3002      	addeq	r0, #2
 80087c4:	07d9      	lsls	r1, r3, #31
 80087c6:	d403      	bmi.n	80087d0 <__lo0bits+0x4e>
 80087c8:	085b      	lsrs	r3, r3, #1
 80087ca:	f100 0001 	add.w	r0, r0, #1
 80087ce:	d003      	beq.n	80087d8 <__lo0bits+0x56>
 80087d0:	6013      	str	r3, [r2, #0]
 80087d2:	4770      	bx	lr
 80087d4:	2000      	movs	r0, #0
 80087d6:	4770      	bx	lr
 80087d8:	2020      	movs	r0, #32
 80087da:	4770      	bx	lr

080087dc <__i2b>:
 80087dc:	b510      	push	{r4, lr}
 80087de:	460c      	mov	r4, r1
 80087e0:	2101      	movs	r1, #1
 80087e2:	f7ff ff07 	bl	80085f4 <_Balloc>
 80087e6:	4602      	mov	r2, r0
 80087e8:	b928      	cbnz	r0, 80087f6 <__i2b+0x1a>
 80087ea:	4b05      	ldr	r3, [pc, #20]	@ (8008800 <__i2b+0x24>)
 80087ec:	4805      	ldr	r0, [pc, #20]	@ (8008804 <__i2b+0x28>)
 80087ee:	f240 1145 	movw	r1, #325	@ 0x145
 80087f2:	f000 fc9f 	bl	8009134 <__assert_func>
 80087f6:	2301      	movs	r3, #1
 80087f8:	6144      	str	r4, [r0, #20]
 80087fa:	6103      	str	r3, [r0, #16]
 80087fc:	bd10      	pop	{r4, pc}
 80087fe:	bf00      	nop
 8008800:	08009aac 	.word	0x08009aac
 8008804:	08009abd 	.word	0x08009abd

08008808 <__multiply>:
 8008808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800880c:	4614      	mov	r4, r2
 800880e:	690a      	ldr	r2, [r1, #16]
 8008810:	6923      	ldr	r3, [r4, #16]
 8008812:	429a      	cmp	r2, r3
 8008814:	bfa8      	it	ge
 8008816:	4623      	movge	r3, r4
 8008818:	460f      	mov	r7, r1
 800881a:	bfa4      	itt	ge
 800881c:	460c      	movge	r4, r1
 800881e:	461f      	movge	r7, r3
 8008820:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008824:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008828:	68a3      	ldr	r3, [r4, #8]
 800882a:	6861      	ldr	r1, [r4, #4]
 800882c:	eb0a 0609 	add.w	r6, sl, r9
 8008830:	42b3      	cmp	r3, r6
 8008832:	b085      	sub	sp, #20
 8008834:	bfb8      	it	lt
 8008836:	3101      	addlt	r1, #1
 8008838:	f7ff fedc 	bl	80085f4 <_Balloc>
 800883c:	b930      	cbnz	r0, 800884c <__multiply+0x44>
 800883e:	4602      	mov	r2, r0
 8008840:	4b44      	ldr	r3, [pc, #272]	@ (8008954 <__multiply+0x14c>)
 8008842:	4845      	ldr	r0, [pc, #276]	@ (8008958 <__multiply+0x150>)
 8008844:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008848:	f000 fc74 	bl	8009134 <__assert_func>
 800884c:	f100 0514 	add.w	r5, r0, #20
 8008850:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008854:	462b      	mov	r3, r5
 8008856:	2200      	movs	r2, #0
 8008858:	4543      	cmp	r3, r8
 800885a:	d321      	bcc.n	80088a0 <__multiply+0x98>
 800885c:	f107 0114 	add.w	r1, r7, #20
 8008860:	f104 0214 	add.w	r2, r4, #20
 8008864:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008868:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800886c:	9302      	str	r3, [sp, #8]
 800886e:	1b13      	subs	r3, r2, r4
 8008870:	3b15      	subs	r3, #21
 8008872:	f023 0303 	bic.w	r3, r3, #3
 8008876:	3304      	adds	r3, #4
 8008878:	f104 0715 	add.w	r7, r4, #21
 800887c:	42ba      	cmp	r2, r7
 800887e:	bf38      	it	cc
 8008880:	2304      	movcc	r3, #4
 8008882:	9301      	str	r3, [sp, #4]
 8008884:	9b02      	ldr	r3, [sp, #8]
 8008886:	9103      	str	r1, [sp, #12]
 8008888:	428b      	cmp	r3, r1
 800888a:	d80c      	bhi.n	80088a6 <__multiply+0x9e>
 800888c:	2e00      	cmp	r6, #0
 800888e:	dd03      	ble.n	8008898 <__multiply+0x90>
 8008890:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008894:	2b00      	cmp	r3, #0
 8008896:	d05b      	beq.n	8008950 <__multiply+0x148>
 8008898:	6106      	str	r6, [r0, #16]
 800889a:	b005      	add	sp, #20
 800889c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088a0:	f843 2b04 	str.w	r2, [r3], #4
 80088a4:	e7d8      	b.n	8008858 <__multiply+0x50>
 80088a6:	f8b1 a000 	ldrh.w	sl, [r1]
 80088aa:	f1ba 0f00 	cmp.w	sl, #0
 80088ae:	d024      	beq.n	80088fa <__multiply+0xf2>
 80088b0:	f104 0e14 	add.w	lr, r4, #20
 80088b4:	46a9      	mov	r9, r5
 80088b6:	f04f 0c00 	mov.w	ip, #0
 80088ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 80088be:	f8d9 3000 	ldr.w	r3, [r9]
 80088c2:	fa1f fb87 	uxth.w	fp, r7
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	fb0a 330b 	mla	r3, sl, fp, r3
 80088cc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80088d0:	f8d9 7000 	ldr.w	r7, [r9]
 80088d4:	4463      	add	r3, ip
 80088d6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80088da:	fb0a c70b 	mla	r7, sl, fp, ip
 80088de:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80088e8:	4572      	cmp	r2, lr
 80088ea:	f849 3b04 	str.w	r3, [r9], #4
 80088ee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80088f2:	d8e2      	bhi.n	80088ba <__multiply+0xb2>
 80088f4:	9b01      	ldr	r3, [sp, #4]
 80088f6:	f845 c003 	str.w	ip, [r5, r3]
 80088fa:	9b03      	ldr	r3, [sp, #12]
 80088fc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008900:	3104      	adds	r1, #4
 8008902:	f1b9 0f00 	cmp.w	r9, #0
 8008906:	d021      	beq.n	800894c <__multiply+0x144>
 8008908:	682b      	ldr	r3, [r5, #0]
 800890a:	f104 0c14 	add.w	ip, r4, #20
 800890e:	46ae      	mov	lr, r5
 8008910:	f04f 0a00 	mov.w	sl, #0
 8008914:	f8bc b000 	ldrh.w	fp, [ip]
 8008918:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800891c:	fb09 770b 	mla	r7, r9, fp, r7
 8008920:	4457      	add	r7, sl
 8008922:	b29b      	uxth	r3, r3
 8008924:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008928:	f84e 3b04 	str.w	r3, [lr], #4
 800892c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008930:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008934:	f8be 3000 	ldrh.w	r3, [lr]
 8008938:	fb09 330a 	mla	r3, r9, sl, r3
 800893c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008940:	4562      	cmp	r2, ip
 8008942:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008946:	d8e5      	bhi.n	8008914 <__multiply+0x10c>
 8008948:	9f01      	ldr	r7, [sp, #4]
 800894a:	51eb      	str	r3, [r5, r7]
 800894c:	3504      	adds	r5, #4
 800894e:	e799      	b.n	8008884 <__multiply+0x7c>
 8008950:	3e01      	subs	r6, #1
 8008952:	e79b      	b.n	800888c <__multiply+0x84>
 8008954:	08009aac 	.word	0x08009aac
 8008958:	08009abd 	.word	0x08009abd

0800895c <__pow5mult>:
 800895c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008960:	4615      	mov	r5, r2
 8008962:	f012 0203 	ands.w	r2, r2, #3
 8008966:	4607      	mov	r7, r0
 8008968:	460e      	mov	r6, r1
 800896a:	d007      	beq.n	800897c <__pow5mult+0x20>
 800896c:	4c25      	ldr	r4, [pc, #148]	@ (8008a04 <__pow5mult+0xa8>)
 800896e:	3a01      	subs	r2, #1
 8008970:	2300      	movs	r3, #0
 8008972:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008976:	f7ff fe9f 	bl	80086b8 <__multadd>
 800897a:	4606      	mov	r6, r0
 800897c:	10ad      	asrs	r5, r5, #2
 800897e:	d03d      	beq.n	80089fc <__pow5mult+0xa0>
 8008980:	69fc      	ldr	r4, [r7, #28]
 8008982:	b97c      	cbnz	r4, 80089a4 <__pow5mult+0x48>
 8008984:	2010      	movs	r0, #16
 8008986:	f7fe f885 	bl	8006a94 <malloc>
 800898a:	4602      	mov	r2, r0
 800898c:	61f8      	str	r0, [r7, #28]
 800898e:	b928      	cbnz	r0, 800899c <__pow5mult+0x40>
 8008990:	4b1d      	ldr	r3, [pc, #116]	@ (8008a08 <__pow5mult+0xac>)
 8008992:	481e      	ldr	r0, [pc, #120]	@ (8008a0c <__pow5mult+0xb0>)
 8008994:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008998:	f000 fbcc 	bl	8009134 <__assert_func>
 800899c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80089a0:	6004      	str	r4, [r0, #0]
 80089a2:	60c4      	str	r4, [r0, #12]
 80089a4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80089a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80089ac:	b94c      	cbnz	r4, 80089c2 <__pow5mult+0x66>
 80089ae:	f240 2171 	movw	r1, #625	@ 0x271
 80089b2:	4638      	mov	r0, r7
 80089b4:	f7ff ff12 	bl	80087dc <__i2b>
 80089b8:	2300      	movs	r3, #0
 80089ba:	f8c8 0008 	str.w	r0, [r8, #8]
 80089be:	4604      	mov	r4, r0
 80089c0:	6003      	str	r3, [r0, #0]
 80089c2:	f04f 0900 	mov.w	r9, #0
 80089c6:	07eb      	lsls	r3, r5, #31
 80089c8:	d50a      	bpl.n	80089e0 <__pow5mult+0x84>
 80089ca:	4631      	mov	r1, r6
 80089cc:	4622      	mov	r2, r4
 80089ce:	4638      	mov	r0, r7
 80089d0:	f7ff ff1a 	bl	8008808 <__multiply>
 80089d4:	4631      	mov	r1, r6
 80089d6:	4680      	mov	r8, r0
 80089d8:	4638      	mov	r0, r7
 80089da:	f7ff fe4b 	bl	8008674 <_Bfree>
 80089de:	4646      	mov	r6, r8
 80089e0:	106d      	asrs	r5, r5, #1
 80089e2:	d00b      	beq.n	80089fc <__pow5mult+0xa0>
 80089e4:	6820      	ldr	r0, [r4, #0]
 80089e6:	b938      	cbnz	r0, 80089f8 <__pow5mult+0x9c>
 80089e8:	4622      	mov	r2, r4
 80089ea:	4621      	mov	r1, r4
 80089ec:	4638      	mov	r0, r7
 80089ee:	f7ff ff0b 	bl	8008808 <__multiply>
 80089f2:	6020      	str	r0, [r4, #0]
 80089f4:	f8c0 9000 	str.w	r9, [r0]
 80089f8:	4604      	mov	r4, r0
 80089fa:	e7e4      	b.n	80089c6 <__pow5mult+0x6a>
 80089fc:	4630      	mov	r0, r6
 80089fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a02:	bf00      	nop
 8008a04:	08009b18 	.word	0x08009b18
 8008a08:	08009a3d 	.word	0x08009a3d
 8008a0c:	08009abd 	.word	0x08009abd

08008a10 <__lshift>:
 8008a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a14:	460c      	mov	r4, r1
 8008a16:	6849      	ldr	r1, [r1, #4]
 8008a18:	6923      	ldr	r3, [r4, #16]
 8008a1a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008a1e:	68a3      	ldr	r3, [r4, #8]
 8008a20:	4607      	mov	r7, r0
 8008a22:	4691      	mov	r9, r2
 8008a24:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008a28:	f108 0601 	add.w	r6, r8, #1
 8008a2c:	42b3      	cmp	r3, r6
 8008a2e:	db0b      	blt.n	8008a48 <__lshift+0x38>
 8008a30:	4638      	mov	r0, r7
 8008a32:	f7ff fddf 	bl	80085f4 <_Balloc>
 8008a36:	4605      	mov	r5, r0
 8008a38:	b948      	cbnz	r0, 8008a4e <__lshift+0x3e>
 8008a3a:	4602      	mov	r2, r0
 8008a3c:	4b28      	ldr	r3, [pc, #160]	@ (8008ae0 <__lshift+0xd0>)
 8008a3e:	4829      	ldr	r0, [pc, #164]	@ (8008ae4 <__lshift+0xd4>)
 8008a40:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008a44:	f000 fb76 	bl	8009134 <__assert_func>
 8008a48:	3101      	adds	r1, #1
 8008a4a:	005b      	lsls	r3, r3, #1
 8008a4c:	e7ee      	b.n	8008a2c <__lshift+0x1c>
 8008a4e:	2300      	movs	r3, #0
 8008a50:	f100 0114 	add.w	r1, r0, #20
 8008a54:	f100 0210 	add.w	r2, r0, #16
 8008a58:	4618      	mov	r0, r3
 8008a5a:	4553      	cmp	r3, sl
 8008a5c:	db33      	blt.n	8008ac6 <__lshift+0xb6>
 8008a5e:	6920      	ldr	r0, [r4, #16]
 8008a60:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008a64:	f104 0314 	add.w	r3, r4, #20
 8008a68:	f019 091f 	ands.w	r9, r9, #31
 8008a6c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008a70:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008a74:	d02b      	beq.n	8008ace <__lshift+0xbe>
 8008a76:	f1c9 0e20 	rsb	lr, r9, #32
 8008a7a:	468a      	mov	sl, r1
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	6818      	ldr	r0, [r3, #0]
 8008a80:	fa00 f009 	lsl.w	r0, r0, r9
 8008a84:	4310      	orrs	r0, r2
 8008a86:	f84a 0b04 	str.w	r0, [sl], #4
 8008a8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a8e:	459c      	cmp	ip, r3
 8008a90:	fa22 f20e 	lsr.w	r2, r2, lr
 8008a94:	d8f3      	bhi.n	8008a7e <__lshift+0x6e>
 8008a96:	ebac 0304 	sub.w	r3, ip, r4
 8008a9a:	3b15      	subs	r3, #21
 8008a9c:	f023 0303 	bic.w	r3, r3, #3
 8008aa0:	3304      	adds	r3, #4
 8008aa2:	f104 0015 	add.w	r0, r4, #21
 8008aa6:	4584      	cmp	ip, r0
 8008aa8:	bf38      	it	cc
 8008aaa:	2304      	movcc	r3, #4
 8008aac:	50ca      	str	r2, [r1, r3]
 8008aae:	b10a      	cbz	r2, 8008ab4 <__lshift+0xa4>
 8008ab0:	f108 0602 	add.w	r6, r8, #2
 8008ab4:	3e01      	subs	r6, #1
 8008ab6:	4638      	mov	r0, r7
 8008ab8:	612e      	str	r6, [r5, #16]
 8008aba:	4621      	mov	r1, r4
 8008abc:	f7ff fdda 	bl	8008674 <_Bfree>
 8008ac0:	4628      	mov	r0, r5
 8008ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ac6:	f842 0f04 	str.w	r0, [r2, #4]!
 8008aca:	3301      	adds	r3, #1
 8008acc:	e7c5      	b.n	8008a5a <__lshift+0x4a>
 8008ace:	3904      	subs	r1, #4
 8008ad0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ad4:	f841 2f04 	str.w	r2, [r1, #4]!
 8008ad8:	459c      	cmp	ip, r3
 8008ada:	d8f9      	bhi.n	8008ad0 <__lshift+0xc0>
 8008adc:	e7ea      	b.n	8008ab4 <__lshift+0xa4>
 8008ade:	bf00      	nop
 8008ae0:	08009aac 	.word	0x08009aac
 8008ae4:	08009abd 	.word	0x08009abd

08008ae8 <__mcmp>:
 8008ae8:	690a      	ldr	r2, [r1, #16]
 8008aea:	4603      	mov	r3, r0
 8008aec:	6900      	ldr	r0, [r0, #16]
 8008aee:	1a80      	subs	r0, r0, r2
 8008af0:	b530      	push	{r4, r5, lr}
 8008af2:	d10e      	bne.n	8008b12 <__mcmp+0x2a>
 8008af4:	3314      	adds	r3, #20
 8008af6:	3114      	adds	r1, #20
 8008af8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008afc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008b00:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008b04:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008b08:	4295      	cmp	r5, r2
 8008b0a:	d003      	beq.n	8008b14 <__mcmp+0x2c>
 8008b0c:	d205      	bcs.n	8008b1a <__mcmp+0x32>
 8008b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8008b12:	bd30      	pop	{r4, r5, pc}
 8008b14:	42a3      	cmp	r3, r4
 8008b16:	d3f3      	bcc.n	8008b00 <__mcmp+0x18>
 8008b18:	e7fb      	b.n	8008b12 <__mcmp+0x2a>
 8008b1a:	2001      	movs	r0, #1
 8008b1c:	e7f9      	b.n	8008b12 <__mcmp+0x2a>
	...

08008b20 <__mdiff>:
 8008b20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b24:	4689      	mov	r9, r1
 8008b26:	4606      	mov	r6, r0
 8008b28:	4611      	mov	r1, r2
 8008b2a:	4648      	mov	r0, r9
 8008b2c:	4614      	mov	r4, r2
 8008b2e:	f7ff ffdb 	bl	8008ae8 <__mcmp>
 8008b32:	1e05      	subs	r5, r0, #0
 8008b34:	d112      	bne.n	8008b5c <__mdiff+0x3c>
 8008b36:	4629      	mov	r1, r5
 8008b38:	4630      	mov	r0, r6
 8008b3a:	f7ff fd5b 	bl	80085f4 <_Balloc>
 8008b3e:	4602      	mov	r2, r0
 8008b40:	b928      	cbnz	r0, 8008b4e <__mdiff+0x2e>
 8008b42:	4b3f      	ldr	r3, [pc, #252]	@ (8008c40 <__mdiff+0x120>)
 8008b44:	f240 2137 	movw	r1, #567	@ 0x237
 8008b48:	483e      	ldr	r0, [pc, #248]	@ (8008c44 <__mdiff+0x124>)
 8008b4a:	f000 faf3 	bl	8009134 <__assert_func>
 8008b4e:	2301      	movs	r3, #1
 8008b50:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008b54:	4610      	mov	r0, r2
 8008b56:	b003      	add	sp, #12
 8008b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b5c:	bfbc      	itt	lt
 8008b5e:	464b      	movlt	r3, r9
 8008b60:	46a1      	movlt	r9, r4
 8008b62:	4630      	mov	r0, r6
 8008b64:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008b68:	bfba      	itte	lt
 8008b6a:	461c      	movlt	r4, r3
 8008b6c:	2501      	movlt	r5, #1
 8008b6e:	2500      	movge	r5, #0
 8008b70:	f7ff fd40 	bl	80085f4 <_Balloc>
 8008b74:	4602      	mov	r2, r0
 8008b76:	b918      	cbnz	r0, 8008b80 <__mdiff+0x60>
 8008b78:	4b31      	ldr	r3, [pc, #196]	@ (8008c40 <__mdiff+0x120>)
 8008b7a:	f240 2145 	movw	r1, #581	@ 0x245
 8008b7e:	e7e3      	b.n	8008b48 <__mdiff+0x28>
 8008b80:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008b84:	6926      	ldr	r6, [r4, #16]
 8008b86:	60c5      	str	r5, [r0, #12]
 8008b88:	f109 0310 	add.w	r3, r9, #16
 8008b8c:	f109 0514 	add.w	r5, r9, #20
 8008b90:	f104 0e14 	add.w	lr, r4, #20
 8008b94:	f100 0b14 	add.w	fp, r0, #20
 8008b98:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008b9c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008ba0:	9301      	str	r3, [sp, #4]
 8008ba2:	46d9      	mov	r9, fp
 8008ba4:	f04f 0c00 	mov.w	ip, #0
 8008ba8:	9b01      	ldr	r3, [sp, #4]
 8008baa:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008bae:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008bb2:	9301      	str	r3, [sp, #4]
 8008bb4:	fa1f f38a 	uxth.w	r3, sl
 8008bb8:	4619      	mov	r1, r3
 8008bba:	b283      	uxth	r3, r0
 8008bbc:	1acb      	subs	r3, r1, r3
 8008bbe:	0c00      	lsrs	r0, r0, #16
 8008bc0:	4463      	add	r3, ip
 8008bc2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008bc6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008bd0:	4576      	cmp	r6, lr
 8008bd2:	f849 3b04 	str.w	r3, [r9], #4
 8008bd6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008bda:	d8e5      	bhi.n	8008ba8 <__mdiff+0x88>
 8008bdc:	1b33      	subs	r3, r6, r4
 8008bde:	3b15      	subs	r3, #21
 8008be0:	f023 0303 	bic.w	r3, r3, #3
 8008be4:	3415      	adds	r4, #21
 8008be6:	3304      	adds	r3, #4
 8008be8:	42a6      	cmp	r6, r4
 8008bea:	bf38      	it	cc
 8008bec:	2304      	movcc	r3, #4
 8008bee:	441d      	add	r5, r3
 8008bf0:	445b      	add	r3, fp
 8008bf2:	461e      	mov	r6, r3
 8008bf4:	462c      	mov	r4, r5
 8008bf6:	4544      	cmp	r4, r8
 8008bf8:	d30e      	bcc.n	8008c18 <__mdiff+0xf8>
 8008bfa:	f108 0103 	add.w	r1, r8, #3
 8008bfe:	1b49      	subs	r1, r1, r5
 8008c00:	f021 0103 	bic.w	r1, r1, #3
 8008c04:	3d03      	subs	r5, #3
 8008c06:	45a8      	cmp	r8, r5
 8008c08:	bf38      	it	cc
 8008c0a:	2100      	movcc	r1, #0
 8008c0c:	440b      	add	r3, r1
 8008c0e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008c12:	b191      	cbz	r1, 8008c3a <__mdiff+0x11a>
 8008c14:	6117      	str	r7, [r2, #16]
 8008c16:	e79d      	b.n	8008b54 <__mdiff+0x34>
 8008c18:	f854 1b04 	ldr.w	r1, [r4], #4
 8008c1c:	46e6      	mov	lr, ip
 8008c1e:	0c08      	lsrs	r0, r1, #16
 8008c20:	fa1c fc81 	uxtah	ip, ip, r1
 8008c24:	4471      	add	r1, lr
 8008c26:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008c2a:	b289      	uxth	r1, r1
 8008c2c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008c30:	f846 1b04 	str.w	r1, [r6], #4
 8008c34:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008c38:	e7dd      	b.n	8008bf6 <__mdiff+0xd6>
 8008c3a:	3f01      	subs	r7, #1
 8008c3c:	e7e7      	b.n	8008c0e <__mdiff+0xee>
 8008c3e:	bf00      	nop
 8008c40:	08009aac 	.word	0x08009aac
 8008c44:	08009abd 	.word	0x08009abd

08008c48 <__d2b>:
 8008c48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008c4c:	460f      	mov	r7, r1
 8008c4e:	2101      	movs	r1, #1
 8008c50:	ec59 8b10 	vmov	r8, r9, d0
 8008c54:	4616      	mov	r6, r2
 8008c56:	f7ff fccd 	bl	80085f4 <_Balloc>
 8008c5a:	4604      	mov	r4, r0
 8008c5c:	b930      	cbnz	r0, 8008c6c <__d2b+0x24>
 8008c5e:	4602      	mov	r2, r0
 8008c60:	4b23      	ldr	r3, [pc, #140]	@ (8008cf0 <__d2b+0xa8>)
 8008c62:	4824      	ldr	r0, [pc, #144]	@ (8008cf4 <__d2b+0xac>)
 8008c64:	f240 310f 	movw	r1, #783	@ 0x30f
 8008c68:	f000 fa64 	bl	8009134 <__assert_func>
 8008c6c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008c70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008c74:	b10d      	cbz	r5, 8008c7a <__d2b+0x32>
 8008c76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008c7a:	9301      	str	r3, [sp, #4]
 8008c7c:	f1b8 0300 	subs.w	r3, r8, #0
 8008c80:	d023      	beq.n	8008cca <__d2b+0x82>
 8008c82:	4668      	mov	r0, sp
 8008c84:	9300      	str	r3, [sp, #0]
 8008c86:	f7ff fd7c 	bl	8008782 <__lo0bits>
 8008c8a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008c8e:	b1d0      	cbz	r0, 8008cc6 <__d2b+0x7e>
 8008c90:	f1c0 0320 	rsb	r3, r0, #32
 8008c94:	fa02 f303 	lsl.w	r3, r2, r3
 8008c98:	430b      	orrs	r3, r1
 8008c9a:	40c2      	lsrs	r2, r0
 8008c9c:	6163      	str	r3, [r4, #20]
 8008c9e:	9201      	str	r2, [sp, #4]
 8008ca0:	9b01      	ldr	r3, [sp, #4]
 8008ca2:	61a3      	str	r3, [r4, #24]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	bf0c      	ite	eq
 8008ca8:	2201      	moveq	r2, #1
 8008caa:	2202      	movne	r2, #2
 8008cac:	6122      	str	r2, [r4, #16]
 8008cae:	b1a5      	cbz	r5, 8008cda <__d2b+0x92>
 8008cb0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008cb4:	4405      	add	r5, r0
 8008cb6:	603d      	str	r5, [r7, #0]
 8008cb8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008cbc:	6030      	str	r0, [r6, #0]
 8008cbe:	4620      	mov	r0, r4
 8008cc0:	b003      	add	sp, #12
 8008cc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008cc6:	6161      	str	r1, [r4, #20]
 8008cc8:	e7ea      	b.n	8008ca0 <__d2b+0x58>
 8008cca:	a801      	add	r0, sp, #4
 8008ccc:	f7ff fd59 	bl	8008782 <__lo0bits>
 8008cd0:	9b01      	ldr	r3, [sp, #4]
 8008cd2:	6163      	str	r3, [r4, #20]
 8008cd4:	3020      	adds	r0, #32
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	e7e8      	b.n	8008cac <__d2b+0x64>
 8008cda:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008cde:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008ce2:	6038      	str	r0, [r7, #0]
 8008ce4:	6918      	ldr	r0, [r3, #16]
 8008ce6:	f7ff fd2d 	bl	8008744 <__hi0bits>
 8008cea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008cee:	e7e5      	b.n	8008cbc <__d2b+0x74>
 8008cf0:	08009aac 	.word	0x08009aac
 8008cf4:	08009abd 	.word	0x08009abd

08008cf8 <__ssputs_r>:
 8008cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cfc:	688e      	ldr	r6, [r1, #8]
 8008cfe:	461f      	mov	r7, r3
 8008d00:	42be      	cmp	r6, r7
 8008d02:	680b      	ldr	r3, [r1, #0]
 8008d04:	4682      	mov	sl, r0
 8008d06:	460c      	mov	r4, r1
 8008d08:	4690      	mov	r8, r2
 8008d0a:	d82d      	bhi.n	8008d68 <__ssputs_r+0x70>
 8008d0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008d10:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008d14:	d026      	beq.n	8008d64 <__ssputs_r+0x6c>
 8008d16:	6965      	ldr	r5, [r4, #20]
 8008d18:	6909      	ldr	r1, [r1, #16]
 8008d1a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008d1e:	eba3 0901 	sub.w	r9, r3, r1
 8008d22:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008d26:	1c7b      	adds	r3, r7, #1
 8008d28:	444b      	add	r3, r9
 8008d2a:	106d      	asrs	r5, r5, #1
 8008d2c:	429d      	cmp	r5, r3
 8008d2e:	bf38      	it	cc
 8008d30:	461d      	movcc	r5, r3
 8008d32:	0553      	lsls	r3, r2, #21
 8008d34:	d527      	bpl.n	8008d86 <__ssputs_r+0x8e>
 8008d36:	4629      	mov	r1, r5
 8008d38:	f7fd fed6 	bl	8006ae8 <_malloc_r>
 8008d3c:	4606      	mov	r6, r0
 8008d3e:	b360      	cbz	r0, 8008d9a <__ssputs_r+0xa2>
 8008d40:	6921      	ldr	r1, [r4, #16]
 8008d42:	464a      	mov	r2, r9
 8008d44:	f7fe fdaf 	bl	80078a6 <memcpy>
 8008d48:	89a3      	ldrh	r3, [r4, #12]
 8008d4a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008d4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d52:	81a3      	strh	r3, [r4, #12]
 8008d54:	6126      	str	r6, [r4, #16]
 8008d56:	6165      	str	r5, [r4, #20]
 8008d58:	444e      	add	r6, r9
 8008d5a:	eba5 0509 	sub.w	r5, r5, r9
 8008d5e:	6026      	str	r6, [r4, #0]
 8008d60:	60a5      	str	r5, [r4, #8]
 8008d62:	463e      	mov	r6, r7
 8008d64:	42be      	cmp	r6, r7
 8008d66:	d900      	bls.n	8008d6a <__ssputs_r+0x72>
 8008d68:	463e      	mov	r6, r7
 8008d6a:	6820      	ldr	r0, [r4, #0]
 8008d6c:	4632      	mov	r2, r6
 8008d6e:	4641      	mov	r1, r8
 8008d70:	f000 f9c6 	bl	8009100 <memmove>
 8008d74:	68a3      	ldr	r3, [r4, #8]
 8008d76:	1b9b      	subs	r3, r3, r6
 8008d78:	60a3      	str	r3, [r4, #8]
 8008d7a:	6823      	ldr	r3, [r4, #0]
 8008d7c:	4433      	add	r3, r6
 8008d7e:	6023      	str	r3, [r4, #0]
 8008d80:	2000      	movs	r0, #0
 8008d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d86:	462a      	mov	r2, r5
 8008d88:	f000 fa18 	bl	80091bc <_realloc_r>
 8008d8c:	4606      	mov	r6, r0
 8008d8e:	2800      	cmp	r0, #0
 8008d90:	d1e0      	bne.n	8008d54 <__ssputs_r+0x5c>
 8008d92:	6921      	ldr	r1, [r4, #16]
 8008d94:	4650      	mov	r0, sl
 8008d96:	f7ff fbe3 	bl	8008560 <_free_r>
 8008d9a:	230c      	movs	r3, #12
 8008d9c:	f8ca 3000 	str.w	r3, [sl]
 8008da0:	89a3      	ldrh	r3, [r4, #12]
 8008da2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008da6:	81a3      	strh	r3, [r4, #12]
 8008da8:	f04f 30ff 	mov.w	r0, #4294967295
 8008dac:	e7e9      	b.n	8008d82 <__ssputs_r+0x8a>
	...

08008db0 <_svfiprintf_r>:
 8008db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008db4:	4698      	mov	r8, r3
 8008db6:	898b      	ldrh	r3, [r1, #12]
 8008db8:	061b      	lsls	r3, r3, #24
 8008dba:	b09d      	sub	sp, #116	@ 0x74
 8008dbc:	4607      	mov	r7, r0
 8008dbe:	460d      	mov	r5, r1
 8008dc0:	4614      	mov	r4, r2
 8008dc2:	d510      	bpl.n	8008de6 <_svfiprintf_r+0x36>
 8008dc4:	690b      	ldr	r3, [r1, #16]
 8008dc6:	b973      	cbnz	r3, 8008de6 <_svfiprintf_r+0x36>
 8008dc8:	2140      	movs	r1, #64	@ 0x40
 8008dca:	f7fd fe8d 	bl	8006ae8 <_malloc_r>
 8008dce:	6028      	str	r0, [r5, #0]
 8008dd0:	6128      	str	r0, [r5, #16]
 8008dd2:	b930      	cbnz	r0, 8008de2 <_svfiprintf_r+0x32>
 8008dd4:	230c      	movs	r3, #12
 8008dd6:	603b      	str	r3, [r7, #0]
 8008dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8008ddc:	b01d      	add	sp, #116	@ 0x74
 8008dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008de2:	2340      	movs	r3, #64	@ 0x40
 8008de4:	616b      	str	r3, [r5, #20]
 8008de6:	2300      	movs	r3, #0
 8008de8:	9309      	str	r3, [sp, #36]	@ 0x24
 8008dea:	2320      	movs	r3, #32
 8008dec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008df0:	f8cd 800c 	str.w	r8, [sp, #12]
 8008df4:	2330      	movs	r3, #48	@ 0x30
 8008df6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008f94 <_svfiprintf_r+0x1e4>
 8008dfa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008dfe:	f04f 0901 	mov.w	r9, #1
 8008e02:	4623      	mov	r3, r4
 8008e04:	469a      	mov	sl, r3
 8008e06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e0a:	b10a      	cbz	r2, 8008e10 <_svfiprintf_r+0x60>
 8008e0c:	2a25      	cmp	r2, #37	@ 0x25
 8008e0e:	d1f9      	bne.n	8008e04 <_svfiprintf_r+0x54>
 8008e10:	ebba 0b04 	subs.w	fp, sl, r4
 8008e14:	d00b      	beq.n	8008e2e <_svfiprintf_r+0x7e>
 8008e16:	465b      	mov	r3, fp
 8008e18:	4622      	mov	r2, r4
 8008e1a:	4629      	mov	r1, r5
 8008e1c:	4638      	mov	r0, r7
 8008e1e:	f7ff ff6b 	bl	8008cf8 <__ssputs_r>
 8008e22:	3001      	adds	r0, #1
 8008e24:	f000 80a7 	beq.w	8008f76 <_svfiprintf_r+0x1c6>
 8008e28:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e2a:	445a      	add	r2, fp
 8008e2c:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e2e:	f89a 3000 	ldrb.w	r3, [sl]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	f000 809f 	beq.w	8008f76 <_svfiprintf_r+0x1c6>
 8008e38:	2300      	movs	r3, #0
 8008e3a:	f04f 32ff 	mov.w	r2, #4294967295
 8008e3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e42:	f10a 0a01 	add.w	sl, sl, #1
 8008e46:	9304      	str	r3, [sp, #16]
 8008e48:	9307      	str	r3, [sp, #28]
 8008e4a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008e4e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008e50:	4654      	mov	r4, sl
 8008e52:	2205      	movs	r2, #5
 8008e54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e58:	484e      	ldr	r0, [pc, #312]	@ (8008f94 <_svfiprintf_r+0x1e4>)
 8008e5a:	f7f7 f9c9 	bl	80001f0 <memchr>
 8008e5e:	9a04      	ldr	r2, [sp, #16]
 8008e60:	b9d8      	cbnz	r0, 8008e9a <_svfiprintf_r+0xea>
 8008e62:	06d0      	lsls	r0, r2, #27
 8008e64:	bf44      	itt	mi
 8008e66:	2320      	movmi	r3, #32
 8008e68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e6c:	0711      	lsls	r1, r2, #28
 8008e6e:	bf44      	itt	mi
 8008e70:	232b      	movmi	r3, #43	@ 0x2b
 8008e72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e76:	f89a 3000 	ldrb.w	r3, [sl]
 8008e7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e7c:	d015      	beq.n	8008eaa <_svfiprintf_r+0xfa>
 8008e7e:	9a07      	ldr	r2, [sp, #28]
 8008e80:	4654      	mov	r4, sl
 8008e82:	2000      	movs	r0, #0
 8008e84:	f04f 0c0a 	mov.w	ip, #10
 8008e88:	4621      	mov	r1, r4
 8008e8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e8e:	3b30      	subs	r3, #48	@ 0x30
 8008e90:	2b09      	cmp	r3, #9
 8008e92:	d94b      	bls.n	8008f2c <_svfiprintf_r+0x17c>
 8008e94:	b1b0      	cbz	r0, 8008ec4 <_svfiprintf_r+0x114>
 8008e96:	9207      	str	r2, [sp, #28]
 8008e98:	e014      	b.n	8008ec4 <_svfiprintf_r+0x114>
 8008e9a:	eba0 0308 	sub.w	r3, r0, r8
 8008e9e:	fa09 f303 	lsl.w	r3, r9, r3
 8008ea2:	4313      	orrs	r3, r2
 8008ea4:	9304      	str	r3, [sp, #16]
 8008ea6:	46a2      	mov	sl, r4
 8008ea8:	e7d2      	b.n	8008e50 <_svfiprintf_r+0xa0>
 8008eaa:	9b03      	ldr	r3, [sp, #12]
 8008eac:	1d19      	adds	r1, r3, #4
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	9103      	str	r1, [sp, #12]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	bfbb      	ittet	lt
 8008eb6:	425b      	neglt	r3, r3
 8008eb8:	f042 0202 	orrlt.w	r2, r2, #2
 8008ebc:	9307      	strge	r3, [sp, #28]
 8008ebe:	9307      	strlt	r3, [sp, #28]
 8008ec0:	bfb8      	it	lt
 8008ec2:	9204      	strlt	r2, [sp, #16]
 8008ec4:	7823      	ldrb	r3, [r4, #0]
 8008ec6:	2b2e      	cmp	r3, #46	@ 0x2e
 8008ec8:	d10a      	bne.n	8008ee0 <_svfiprintf_r+0x130>
 8008eca:	7863      	ldrb	r3, [r4, #1]
 8008ecc:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ece:	d132      	bne.n	8008f36 <_svfiprintf_r+0x186>
 8008ed0:	9b03      	ldr	r3, [sp, #12]
 8008ed2:	1d1a      	adds	r2, r3, #4
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	9203      	str	r2, [sp, #12]
 8008ed8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008edc:	3402      	adds	r4, #2
 8008ede:	9305      	str	r3, [sp, #20]
 8008ee0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008fa4 <_svfiprintf_r+0x1f4>
 8008ee4:	7821      	ldrb	r1, [r4, #0]
 8008ee6:	2203      	movs	r2, #3
 8008ee8:	4650      	mov	r0, sl
 8008eea:	f7f7 f981 	bl	80001f0 <memchr>
 8008eee:	b138      	cbz	r0, 8008f00 <_svfiprintf_r+0x150>
 8008ef0:	9b04      	ldr	r3, [sp, #16]
 8008ef2:	eba0 000a 	sub.w	r0, r0, sl
 8008ef6:	2240      	movs	r2, #64	@ 0x40
 8008ef8:	4082      	lsls	r2, r0
 8008efa:	4313      	orrs	r3, r2
 8008efc:	3401      	adds	r4, #1
 8008efe:	9304      	str	r3, [sp, #16]
 8008f00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f04:	4824      	ldr	r0, [pc, #144]	@ (8008f98 <_svfiprintf_r+0x1e8>)
 8008f06:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008f0a:	2206      	movs	r2, #6
 8008f0c:	f7f7 f970 	bl	80001f0 <memchr>
 8008f10:	2800      	cmp	r0, #0
 8008f12:	d036      	beq.n	8008f82 <_svfiprintf_r+0x1d2>
 8008f14:	4b21      	ldr	r3, [pc, #132]	@ (8008f9c <_svfiprintf_r+0x1ec>)
 8008f16:	bb1b      	cbnz	r3, 8008f60 <_svfiprintf_r+0x1b0>
 8008f18:	9b03      	ldr	r3, [sp, #12]
 8008f1a:	3307      	adds	r3, #7
 8008f1c:	f023 0307 	bic.w	r3, r3, #7
 8008f20:	3308      	adds	r3, #8
 8008f22:	9303      	str	r3, [sp, #12]
 8008f24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f26:	4433      	add	r3, r6
 8008f28:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f2a:	e76a      	b.n	8008e02 <_svfiprintf_r+0x52>
 8008f2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f30:	460c      	mov	r4, r1
 8008f32:	2001      	movs	r0, #1
 8008f34:	e7a8      	b.n	8008e88 <_svfiprintf_r+0xd8>
 8008f36:	2300      	movs	r3, #0
 8008f38:	3401      	adds	r4, #1
 8008f3a:	9305      	str	r3, [sp, #20]
 8008f3c:	4619      	mov	r1, r3
 8008f3e:	f04f 0c0a 	mov.w	ip, #10
 8008f42:	4620      	mov	r0, r4
 8008f44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f48:	3a30      	subs	r2, #48	@ 0x30
 8008f4a:	2a09      	cmp	r2, #9
 8008f4c:	d903      	bls.n	8008f56 <_svfiprintf_r+0x1a6>
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d0c6      	beq.n	8008ee0 <_svfiprintf_r+0x130>
 8008f52:	9105      	str	r1, [sp, #20]
 8008f54:	e7c4      	b.n	8008ee0 <_svfiprintf_r+0x130>
 8008f56:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f5a:	4604      	mov	r4, r0
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	e7f0      	b.n	8008f42 <_svfiprintf_r+0x192>
 8008f60:	ab03      	add	r3, sp, #12
 8008f62:	9300      	str	r3, [sp, #0]
 8008f64:	462a      	mov	r2, r5
 8008f66:	4b0e      	ldr	r3, [pc, #56]	@ (8008fa0 <_svfiprintf_r+0x1f0>)
 8008f68:	a904      	add	r1, sp, #16
 8008f6a:	4638      	mov	r0, r7
 8008f6c:	f7fd fee8 	bl	8006d40 <_printf_float>
 8008f70:	1c42      	adds	r2, r0, #1
 8008f72:	4606      	mov	r6, r0
 8008f74:	d1d6      	bne.n	8008f24 <_svfiprintf_r+0x174>
 8008f76:	89ab      	ldrh	r3, [r5, #12]
 8008f78:	065b      	lsls	r3, r3, #25
 8008f7a:	f53f af2d 	bmi.w	8008dd8 <_svfiprintf_r+0x28>
 8008f7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008f80:	e72c      	b.n	8008ddc <_svfiprintf_r+0x2c>
 8008f82:	ab03      	add	r3, sp, #12
 8008f84:	9300      	str	r3, [sp, #0]
 8008f86:	462a      	mov	r2, r5
 8008f88:	4b05      	ldr	r3, [pc, #20]	@ (8008fa0 <_svfiprintf_r+0x1f0>)
 8008f8a:	a904      	add	r1, sp, #16
 8008f8c:	4638      	mov	r0, r7
 8008f8e:	f7fe f96f 	bl	8007270 <_printf_i>
 8008f92:	e7ed      	b.n	8008f70 <_svfiprintf_r+0x1c0>
 8008f94:	08009c18 	.word	0x08009c18
 8008f98:	08009c22 	.word	0x08009c22
 8008f9c:	08006d41 	.word	0x08006d41
 8008fa0:	08008cf9 	.word	0x08008cf9
 8008fa4:	08009c1e 	.word	0x08009c1e

08008fa8 <__sflush_r>:
 8008fa8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fb0:	0716      	lsls	r6, r2, #28
 8008fb2:	4605      	mov	r5, r0
 8008fb4:	460c      	mov	r4, r1
 8008fb6:	d454      	bmi.n	8009062 <__sflush_r+0xba>
 8008fb8:	684b      	ldr	r3, [r1, #4]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	dc02      	bgt.n	8008fc4 <__sflush_r+0x1c>
 8008fbe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	dd48      	ble.n	8009056 <__sflush_r+0xae>
 8008fc4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008fc6:	2e00      	cmp	r6, #0
 8008fc8:	d045      	beq.n	8009056 <__sflush_r+0xae>
 8008fca:	2300      	movs	r3, #0
 8008fcc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008fd0:	682f      	ldr	r7, [r5, #0]
 8008fd2:	6a21      	ldr	r1, [r4, #32]
 8008fd4:	602b      	str	r3, [r5, #0]
 8008fd6:	d030      	beq.n	800903a <__sflush_r+0x92>
 8008fd8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008fda:	89a3      	ldrh	r3, [r4, #12]
 8008fdc:	0759      	lsls	r1, r3, #29
 8008fde:	d505      	bpl.n	8008fec <__sflush_r+0x44>
 8008fe0:	6863      	ldr	r3, [r4, #4]
 8008fe2:	1ad2      	subs	r2, r2, r3
 8008fe4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008fe6:	b10b      	cbz	r3, 8008fec <__sflush_r+0x44>
 8008fe8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008fea:	1ad2      	subs	r2, r2, r3
 8008fec:	2300      	movs	r3, #0
 8008fee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008ff0:	6a21      	ldr	r1, [r4, #32]
 8008ff2:	4628      	mov	r0, r5
 8008ff4:	47b0      	blx	r6
 8008ff6:	1c43      	adds	r3, r0, #1
 8008ff8:	89a3      	ldrh	r3, [r4, #12]
 8008ffa:	d106      	bne.n	800900a <__sflush_r+0x62>
 8008ffc:	6829      	ldr	r1, [r5, #0]
 8008ffe:	291d      	cmp	r1, #29
 8009000:	d82b      	bhi.n	800905a <__sflush_r+0xb2>
 8009002:	4a2a      	ldr	r2, [pc, #168]	@ (80090ac <__sflush_r+0x104>)
 8009004:	410a      	asrs	r2, r1
 8009006:	07d6      	lsls	r6, r2, #31
 8009008:	d427      	bmi.n	800905a <__sflush_r+0xb2>
 800900a:	2200      	movs	r2, #0
 800900c:	6062      	str	r2, [r4, #4]
 800900e:	04d9      	lsls	r1, r3, #19
 8009010:	6922      	ldr	r2, [r4, #16]
 8009012:	6022      	str	r2, [r4, #0]
 8009014:	d504      	bpl.n	8009020 <__sflush_r+0x78>
 8009016:	1c42      	adds	r2, r0, #1
 8009018:	d101      	bne.n	800901e <__sflush_r+0x76>
 800901a:	682b      	ldr	r3, [r5, #0]
 800901c:	b903      	cbnz	r3, 8009020 <__sflush_r+0x78>
 800901e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009020:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009022:	602f      	str	r7, [r5, #0]
 8009024:	b1b9      	cbz	r1, 8009056 <__sflush_r+0xae>
 8009026:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800902a:	4299      	cmp	r1, r3
 800902c:	d002      	beq.n	8009034 <__sflush_r+0x8c>
 800902e:	4628      	mov	r0, r5
 8009030:	f7ff fa96 	bl	8008560 <_free_r>
 8009034:	2300      	movs	r3, #0
 8009036:	6363      	str	r3, [r4, #52]	@ 0x34
 8009038:	e00d      	b.n	8009056 <__sflush_r+0xae>
 800903a:	2301      	movs	r3, #1
 800903c:	4628      	mov	r0, r5
 800903e:	47b0      	blx	r6
 8009040:	4602      	mov	r2, r0
 8009042:	1c50      	adds	r0, r2, #1
 8009044:	d1c9      	bne.n	8008fda <__sflush_r+0x32>
 8009046:	682b      	ldr	r3, [r5, #0]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d0c6      	beq.n	8008fda <__sflush_r+0x32>
 800904c:	2b1d      	cmp	r3, #29
 800904e:	d001      	beq.n	8009054 <__sflush_r+0xac>
 8009050:	2b16      	cmp	r3, #22
 8009052:	d11e      	bne.n	8009092 <__sflush_r+0xea>
 8009054:	602f      	str	r7, [r5, #0]
 8009056:	2000      	movs	r0, #0
 8009058:	e022      	b.n	80090a0 <__sflush_r+0xf8>
 800905a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800905e:	b21b      	sxth	r3, r3
 8009060:	e01b      	b.n	800909a <__sflush_r+0xf2>
 8009062:	690f      	ldr	r7, [r1, #16]
 8009064:	2f00      	cmp	r7, #0
 8009066:	d0f6      	beq.n	8009056 <__sflush_r+0xae>
 8009068:	0793      	lsls	r3, r2, #30
 800906a:	680e      	ldr	r6, [r1, #0]
 800906c:	bf08      	it	eq
 800906e:	694b      	ldreq	r3, [r1, #20]
 8009070:	600f      	str	r7, [r1, #0]
 8009072:	bf18      	it	ne
 8009074:	2300      	movne	r3, #0
 8009076:	eba6 0807 	sub.w	r8, r6, r7
 800907a:	608b      	str	r3, [r1, #8]
 800907c:	f1b8 0f00 	cmp.w	r8, #0
 8009080:	dde9      	ble.n	8009056 <__sflush_r+0xae>
 8009082:	6a21      	ldr	r1, [r4, #32]
 8009084:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009086:	4643      	mov	r3, r8
 8009088:	463a      	mov	r2, r7
 800908a:	4628      	mov	r0, r5
 800908c:	47b0      	blx	r6
 800908e:	2800      	cmp	r0, #0
 8009090:	dc08      	bgt.n	80090a4 <__sflush_r+0xfc>
 8009092:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009096:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800909a:	81a3      	strh	r3, [r4, #12]
 800909c:	f04f 30ff 	mov.w	r0, #4294967295
 80090a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090a4:	4407      	add	r7, r0
 80090a6:	eba8 0800 	sub.w	r8, r8, r0
 80090aa:	e7e7      	b.n	800907c <__sflush_r+0xd4>
 80090ac:	dfbffffe 	.word	0xdfbffffe

080090b0 <_fflush_r>:
 80090b0:	b538      	push	{r3, r4, r5, lr}
 80090b2:	690b      	ldr	r3, [r1, #16]
 80090b4:	4605      	mov	r5, r0
 80090b6:	460c      	mov	r4, r1
 80090b8:	b913      	cbnz	r3, 80090c0 <_fflush_r+0x10>
 80090ba:	2500      	movs	r5, #0
 80090bc:	4628      	mov	r0, r5
 80090be:	bd38      	pop	{r3, r4, r5, pc}
 80090c0:	b118      	cbz	r0, 80090ca <_fflush_r+0x1a>
 80090c2:	6a03      	ldr	r3, [r0, #32]
 80090c4:	b90b      	cbnz	r3, 80090ca <_fflush_r+0x1a>
 80090c6:	f7fe fa7f 	bl	80075c8 <__sinit>
 80090ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d0f3      	beq.n	80090ba <_fflush_r+0xa>
 80090d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80090d4:	07d0      	lsls	r0, r2, #31
 80090d6:	d404      	bmi.n	80090e2 <_fflush_r+0x32>
 80090d8:	0599      	lsls	r1, r3, #22
 80090da:	d402      	bmi.n	80090e2 <_fflush_r+0x32>
 80090dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80090de:	f7fe fbe0 	bl	80078a2 <__retarget_lock_acquire_recursive>
 80090e2:	4628      	mov	r0, r5
 80090e4:	4621      	mov	r1, r4
 80090e6:	f7ff ff5f 	bl	8008fa8 <__sflush_r>
 80090ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80090ec:	07da      	lsls	r2, r3, #31
 80090ee:	4605      	mov	r5, r0
 80090f0:	d4e4      	bmi.n	80090bc <_fflush_r+0xc>
 80090f2:	89a3      	ldrh	r3, [r4, #12]
 80090f4:	059b      	lsls	r3, r3, #22
 80090f6:	d4e1      	bmi.n	80090bc <_fflush_r+0xc>
 80090f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80090fa:	f7fe fbd3 	bl	80078a4 <__retarget_lock_release_recursive>
 80090fe:	e7dd      	b.n	80090bc <_fflush_r+0xc>

08009100 <memmove>:
 8009100:	4288      	cmp	r0, r1
 8009102:	b510      	push	{r4, lr}
 8009104:	eb01 0402 	add.w	r4, r1, r2
 8009108:	d902      	bls.n	8009110 <memmove+0x10>
 800910a:	4284      	cmp	r4, r0
 800910c:	4623      	mov	r3, r4
 800910e:	d807      	bhi.n	8009120 <memmove+0x20>
 8009110:	1e43      	subs	r3, r0, #1
 8009112:	42a1      	cmp	r1, r4
 8009114:	d008      	beq.n	8009128 <memmove+0x28>
 8009116:	f811 2b01 	ldrb.w	r2, [r1], #1
 800911a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800911e:	e7f8      	b.n	8009112 <memmove+0x12>
 8009120:	4402      	add	r2, r0
 8009122:	4601      	mov	r1, r0
 8009124:	428a      	cmp	r2, r1
 8009126:	d100      	bne.n	800912a <memmove+0x2a>
 8009128:	bd10      	pop	{r4, pc}
 800912a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800912e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009132:	e7f7      	b.n	8009124 <memmove+0x24>

08009134 <__assert_func>:
 8009134:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009136:	4614      	mov	r4, r2
 8009138:	461a      	mov	r2, r3
 800913a:	4b09      	ldr	r3, [pc, #36]	@ (8009160 <__assert_func+0x2c>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	4605      	mov	r5, r0
 8009140:	68d8      	ldr	r0, [r3, #12]
 8009142:	b954      	cbnz	r4, 800915a <__assert_func+0x26>
 8009144:	4b07      	ldr	r3, [pc, #28]	@ (8009164 <__assert_func+0x30>)
 8009146:	461c      	mov	r4, r3
 8009148:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800914c:	9100      	str	r1, [sp, #0]
 800914e:	462b      	mov	r3, r5
 8009150:	4905      	ldr	r1, [pc, #20]	@ (8009168 <__assert_func+0x34>)
 8009152:	f000 f86f 	bl	8009234 <fiprintf>
 8009156:	f000 f87f 	bl	8009258 <abort>
 800915a:	4b04      	ldr	r3, [pc, #16]	@ (800916c <__assert_func+0x38>)
 800915c:	e7f4      	b.n	8009148 <__assert_func+0x14>
 800915e:	bf00      	nop
 8009160:	20000198 	.word	0x20000198
 8009164:	08009c6e 	.word	0x08009c6e
 8009168:	08009c40 	.word	0x08009c40
 800916c:	08009c33 	.word	0x08009c33

08009170 <_calloc_r>:
 8009170:	b570      	push	{r4, r5, r6, lr}
 8009172:	fba1 5402 	umull	r5, r4, r1, r2
 8009176:	b93c      	cbnz	r4, 8009188 <_calloc_r+0x18>
 8009178:	4629      	mov	r1, r5
 800917a:	f7fd fcb5 	bl	8006ae8 <_malloc_r>
 800917e:	4606      	mov	r6, r0
 8009180:	b928      	cbnz	r0, 800918e <_calloc_r+0x1e>
 8009182:	2600      	movs	r6, #0
 8009184:	4630      	mov	r0, r6
 8009186:	bd70      	pop	{r4, r5, r6, pc}
 8009188:	220c      	movs	r2, #12
 800918a:	6002      	str	r2, [r0, #0]
 800918c:	e7f9      	b.n	8009182 <_calloc_r+0x12>
 800918e:	462a      	mov	r2, r5
 8009190:	4621      	mov	r1, r4
 8009192:	f7fe fae6 	bl	8007762 <memset>
 8009196:	e7f5      	b.n	8009184 <_calloc_r+0x14>

08009198 <__ascii_mbtowc>:
 8009198:	b082      	sub	sp, #8
 800919a:	b901      	cbnz	r1, 800919e <__ascii_mbtowc+0x6>
 800919c:	a901      	add	r1, sp, #4
 800919e:	b142      	cbz	r2, 80091b2 <__ascii_mbtowc+0x1a>
 80091a0:	b14b      	cbz	r3, 80091b6 <__ascii_mbtowc+0x1e>
 80091a2:	7813      	ldrb	r3, [r2, #0]
 80091a4:	600b      	str	r3, [r1, #0]
 80091a6:	7812      	ldrb	r2, [r2, #0]
 80091a8:	1e10      	subs	r0, r2, #0
 80091aa:	bf18      	it	ne
 80091ac:	2001      	movne	r0, #1
 80091ae:	b002      	add	sp, #8
 80091b0:	4770      	bx	lr
 80091b2:	4610      	mov	r0, r2
 80091b4:	e7fb      	b.n	80091ae <__ascii_mbtowc+0x16>
 80091b6:	f06f 0001 	mvn.w	r0, #1
 80091ba:	e7f8      	b.n	80091ae <__ascii_mbtowc+0x16>

080091bc <_realloc_r>:
 80091bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091c0:	4680      	mov	r8, r0
 80091c2:	4615      	mov	r5, r2
 80091c4:	460c      	mov	r4, r1
 80091c6:	b921      	cbnz	r1, 80091d2 <_realloc_r+0x16>
 80091c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091cc:	4611      	mov	r1, r2
 80091ce:	f7fd bc8b 	b.w	8006ae8 <_malloc_r>
 80091d2:	b92a      	cbnz	r2, 80091e0 <_realloc_r+0x24>
 80091d4:	f7ff f9c4 	bl	8008560 <_free_r>
 80091d8:	2400      	movs	r4, #0
 80091da:	4620      	mov	r0, r4
 80091dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091e0:	f000 f841 	bl	8009266 <_malloc_usable_size_r>
 80091e4:	4285      	cmp	r5, r0
 80091e6:	4606      	mov	r6, r0
 80091e8:	d802      	bhi.n	80091f0 <_realloc_r+0x34>
 80091ea:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80091ee:	d8f4      	bhi.n	80091da <_realloc_r+0x1e>
 80091f0:	4629      	mov	r1, r5
 80091f2:	4640      	mov	r0, r8
 80091f4:	f7fd fc78 	bl	8006ae8 <_malloc_r>
 80091f8:	4607      	mov	r7, r0
 80091fa:	2800      	cmp	r0, #0
 80091fc:	d0ec      	beq.n	80091d8 <_realloc_r+0x1c>
 80091fe:	42b5      	cmp	r5, r6
 8009200:	462a      	mov	r2, r5
 8009202:	4621      	mov	r1, r4
 8009204:	bf28      	it	cs
 8009206:	4632      	movcs	r2, r6
 8009208:	f7fe fb4d 	bl	80078a6 <memcpy>
 800920c:	4621      	mov	r1, r4
 800920e:	4640      	mov	r0, r8
 8009210:	f7ff f9a6 	bl	8008560 <_free_r>
 8009214:	463c      	mov	r4, r7
 8009216:	e7e0      	b.n	80091da <_realloc_r+0x1e>

08009218 <__ascii_wctomb>:
 8009218:	4603      	mov	r3, r0
 800921a:	4608      	mov	r0, r1
 800921c:	b141      	cbz	r1, 8009230 <__ascii_wctomb+0x18>
 800921e:	2aff      	cmp	r2, #255	@ 0xff
 8009220:	d904      	bls.n	800922c <__ascii_wctomb+0x14>
 8009222:	228a      	movs	r2, #138	@ 0x8a
 8009224:	601a      	str	r2, [r3, #0]
 8009226:	f04f 30ff 	mov.w	r0, #4294967295
 800922a:	4770      	bx	lr
 800922c:	700a      	strb	r2, [r1, #0]
 800922e:	2001      	movs	r0, #1
 8009230:	4770      	bx	lr
	...

08009234 <fiprintf>:
 8009234:	b40e      	push	{r1, r2, r3}
 8009236:	b503      	push	{r0, r1, lr}
 8009238:	4601      	mov	r1, r0
 800923a:	ab03      	add	r3, sp, #12
 800923c:	4805      	ldr	r0, [pc, #20]	@ (8009254 <fiprintf+0x20>)
 800923e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009242:	6800      	ldr	r0, [r0, #0]
 8009244:	9301      	str	r3, [sp, #4]
 8009246:	f000 f83f 	bl	80092c8 <_vfiprintf_r>
 800924a:	b002      	add	sp, #8
 800924c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009250:	b003      	add	sp, #12
 8009252:	4770      	bx	lr
 8009254:	20000198 	.word	0x20000198

08009258 <abort>:
 8009258:	b508      	push	{r3, lr}
 800925a:	2006      	movs	r0, #6
 800925c:	f000 fa08 	bl	8009670 <raise>
 8009260:	2001      	movs	r0, #1
 8009262:	f7f8 fc8f 	bl	8001b84 <_exit>

08009266 <_malloc_usable_size_r>:
 8009266:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800926a:	1f18      	subs	r0, r3, #4
 800926c:	2b00      	cmp	r3, #0
 800926e:	bfbc      	itt	lt
 8009270:	580b      	ldrlt	r3, [r1, r0]
 8009272:	18c0      	addlt	r0, r0, r3
 8009274:	4770      	bx	lr

08009276 <__sfputc_r>:
 8009276:	6893      	ldr	r3, [r2, #8]
 8009278:	3b01      	subs	r3, #1
 800927a:	2b00      	cmp	r3, #0
 800927c:	b410      	push	{r4}
 800927e:	6093      	str	r3, [r2, #8]
 8009280:	da08      	bge.n	8009294 <__sfputc_r+0x1e>
 8009282:	6994      	ldr	r4, [r2, #24]
 8009284:	42a3      	cmp	r3, r4
 8009286:	db01      	blt.n	800928c <__sfputc_r+0x16>
 8009288:	290a      	cmp	r1, #10
 800928a:	d103      	bne.n	8009294 <__sfputc_r+0x1e>
 800928c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009290:	f000 b932 	b.w	80094f8 <__swbuf_r>
 8009294:	6813      	ldr	r3, [r2, #0]
 8009296:	1c58      	adds	r0, r3, #1
 8009298:	6010      	str	r0, [r2, #0]
 800929a:	7019      	strb	r1, [r3, #0]
 800929c:	4608      	mov	r0, r1
 800929e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092a2:	4770      	bx	lr

080092a4 <__sfputs_r>:
 80092a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092a6:	4606      	mov	r6, r0
 80092a8:	460f      	mov	r7, r1
 80092aa:	4614      	mov	r4, r2
 80092ac:	18d5      	adds	r5, r2, r3
 80092ae:	42ac      	cmp	r4, r5
 80092b0:	d101      	bne.n	80092b6 <__sfputs_r+0x12>
 80092b2:	2000      	movs	r0, #0
 80092b4:	e007      	b.n	80092c6 <__sfputs_r+0x22>
 80092b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092ba:	463a      	mov	r2, r7
 80092bc:	4630      	mov	r0, r6
 80092be:	f7ff ffda 	bl	8009276 <__sfputc_r>
 80092c2:	1c43      	adds	r3, r0, #1
 80092c4:	d1f3      	bne.n	80092ae <__sfputs_r+0xa>
 80092c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080092c8 <_vfiprintf_r>:
 80092c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092cc:	460d      	mov	r5, r1
 80092ce:	b09d      	sub	sp, #116	@ 0x74
 80092d0:	4614      	mov	r4, r2
 80092d2:	4698      	mov	r8, r3
 80092d4:	4606      	mov	r6, r0
 80092d6:	b118      	cbz	r0, 80092e0 <_vfiprintf_r+0x18>
 80092d8:	6a03      	ldr	r3, [r0, #32]
 80092da:	b90b      	cbnz	r3, 80092e0 <_vfiprintf_r+0x18>
 80092dc:	f7fe f974 	bl	80075c8 <__sinit>
 80092e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80092e2:	07d9      	lsls	r1, r3, #31
 80092e4:	d405      	bmi.n	80092f2 <_vfiprintf_r+0x2a>
 80092e6:	89ab      	ldrh	r3, [r5, #12]
 80092e8:	059a      	lsls	r2, r3, #22
 80092ea:	d402      	bmi.n	80092f2 <_vfiprintf_r+0x2a>
 80092ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80092ee:	f7fe fad8 	bl	80078a2 <__retarget_lock_acquire_recursive>
 80092f2:	89ab      	ldrh	r3, [r5, #12]
 80092f4:	071b      	lsls	r3, r3, #28
 80092f6:	d501      	bpl.n	80092fc <_vfiprintf_r+0x34>
 80092f8:	692b      	ldr	r3, [r5, #16]
 80092fa:	b99b      	cbnz	r3, 8009324 <_vfiprintf_r+0x5c>
 80092fc:	4629      	mov	r1, r5
 80092fe:	4630      	mov	r0, r6
 8009300:	f000 f938 	bl	8009574 <__swsetup_r>
 8009304:	b170      	cbz	r0, 8009324 <_vfiprintf_r+0x5c>
 8009306:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009308:	07dc      	lsls	r4, r3, #31
 800930a:	d504      	bpl.n	8009316 <_vfiprintf_r+0x4e>
 800930c:	f04f 30ff 	mov.w	r0, #4294967295
 8009310:	b01d      	add	sp, #116	@ 0x74
 8009312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009316:	89ab      	ldrh	r3, [r5, #12]
 8009318:	0598      	lsls	r0, r3, #22
 800931a:	d4f7      	bmi.n	800930c <_vfiprintf_r+0x44>
 800931c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800931e:	f7fe fac1 	bl	80078a4 <__retarget_lock_release_recursive>
 8009322:	e7f3      	b.n	800930c <_vfiprintf_r+0x44>
 8009324:	2300      	movs	r3, #0
 8009326:	9309      	str	r3, [sp, #36]	@ 0x24
 8009328:	2320      	movs	r3, #32
 800932a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800932e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009332:	2330      	movs	r3, #48	@ 0x30
 8009334:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80094e4 <_vfiprintf_r+0x21c>
 8009338:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800933c:	f04f 0901 	mov.w	r9, #1
 8009340:	4623      	mov	r3, r4
 8009342:	469a      	mov	sl, r3
 8009344:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009348:	b10a      	cbz	r2, 800934e <_vfiprintf_r+0x86>
 800934a:	2a25      	cmp	r2, #37	@ 0x25
 800934c:	d1f9      	bne.n	8009342 <_vfiprintf_r+0x7a>
 800934e:	ebba 0b04 	subs.w	fp, sl, r4
 8009352:	d00b      	beq.n	800936c <_vfiprintf_r+0xa4>
 8009354:	465b      	mov	r3, fp
 8009356:	4622      	mov	r2, r4
 8009358:	4629      	mov	r1, r5
 800935a:	4630      	mov	r0, r6
 800935c:	f7ff ffa2 	bl	80092a4 <__sfputs_r>
 8009360:	3001      	adds	r0, #1
 8009362:	f000 80a7 	beq.w	80094b4 <_vfiprintf_r+0x1ec>
 8009366:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009368:	445a      	add	r2, fp
 800936a:	9209      	str	r2, [sp, #36]	@ 0x24
 800936c:	f89a 3000 	ldrb.w	r3, [sl]
 8009370:	2b00      	cmp	r3, #0
 8009372:	f000 809f 	beq.w	80094b4 <_vfiprintf_r+0x1ec>
 8009376:	2300      	movs	r3, #0
 8009378:	f04f 32ff 	mov.w	r2, #4294967295
 800937c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009380:	f10a 0a01 	add.w	sl, sl, #1
 8009384:	9304      	str	r3, [sp, #16]
 8009386:	9307      	str	r3, [sp, #28]
 8009388:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800938c:	931a      	str	r3, [sp, #104]	@ 0x68
 800938e:	4654      	mov	r4, sl
 8009390:	2205      	movs	r2, #5
 8009392:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009396:	4853      	ldr	r0, [pc, #332]	@ (80094e4 <_vfiprintf_r+0x21c>)
 8009398:	f7f6 ff2a 	bl	80001f0 <memchr>
 800939c:	9a04      	ldr	r2, [sp, #16]
 800939e:	b9d8      	cbnz	r0, 80093d8 <_vfiprintf_r+0x110>
 80093a0:	06d1      	lsls	r1, r2, #27
 80093a2:	bf44      	itt	mi
 80093a4:	2320      	movmi	r3, #32
 80093a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80093aa:	0713      	lsls	r3, r2, #28
 80093ac:	bf44      	itt	mi
 80093ae:	232b      	movmi	r3, #43	@ 0x2b
 80093b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80093b4:	f89a 3000 	ldrb.w	r3, [sl]
 80093b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80093ba:	d015      	beq.n	80093e8 <_vfiprintf_r+0x120>
 80093bc:	9a07      	ldr	r2, [sp, #28]
 80093be:	4654      	mov	r4, sl
 80093c0:	2000      	movs	r0, #0
 80093c2:	f04f 0c0a 	mov.w	ip, #10
 80093c6:	4621      	mov	r1, r4
 80093c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093cc:	3b30      	subs	r3, #48	@ 0x30
 80093ce:	2b09      	cmp	r3, #9
 80093d0:	d94b      	bls.n	800946a <_vfiprintf_r+0x1a2>
 80093d2:	b1b0      	cbz	r0, 8009402 <_vfiprintf_r+0x13a>
 80093d4:	9207      	str	r2, [sp, #28]
 80093d6:	e014      	b.n	8009402 <_vfiprintf_r+0x13a>
 80093d8:	eba0 0308 	sub.w	r3, r0, r8
 80093dc:	fa09 f303 	lsl.w	r3, r9, r3
 80093e0:	4313      	orrs	r3, r2
 80093e2:	9304      	str	r3, [sp, #16]
 80093e4:	46a2      	mov	sl, r4
 80093e6:	e7d2      	b.n	800938e <_vfiprintf_r+0xc6>
 80093e8:	9b03      	ldr	r3, [sp, #12]
 80093ea:	1d19      	adds	r1, r3, #4
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	9103      	str	r1, [sp, #12]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	bfbb      	ittet	lt
 80093f4:	425b      	neglt	r3, r3
 80093f6:	f042 0202 	orrlt.w	r2, r2, #2
 80093fa:	9307      	strge	r3, [sp, #28]
 80093fc:	9307      	strlt	r3, [sp, #28]
 80093fe:	bfb8      	it	lt
 8009400:	9204      	strlt	r2, [sp, #16]
 8009402:	7823      	ldrb	r3, [r4, #0]
 8009404:	2b2e      	cmp	r3, #46	@ 0x2e
 8009406:	d10a      	bne.n	800941e <_vfiprintf_r+0x156>
 8009408:	7863      	ldrb	r3, [r4, #1]
 800940a:	2b2a      	cmp	r3, #42	@ 0x2a
 800940c:	d132      	bne.n	8009474 <_vfiprintf_r+0x1ac>
 800940e:	9b03      	ldr	r3, [sp, #12]
 8009410:	1d1a      	adds	r2, r3, #4
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	9203      	str	r2, [sp, #12]
 8009416:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800941a:	3402      	adds	r4, #2
 800941c:	9305      	str	r3, [sp, #20]
 800941e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80094f4 <_vfiprintf_r+0x22c>
 8009422:	7821      	ldrb	r1, [r4, #0]
 8009424:	2203      	movs	r2, #3
 8009426:	4650      	mov	r0, sl
 8009428:	f7f6 fee2 	bl	80001f0 <memchr>
 800942c:	b138      	cbz	r0, 800943e <_vfiprintf_r+0x176>
 800942e:	9b04      	ldr	r3, [sp, #16]
 8009430:	eba0 000a 	sub.w	r0, r0, sl
 8009434:	2240      	movs	r2, #64	@ 0x40
 8009436:	4082      	lsls	r2, r0
 8009438:	4313      	orrs	r3, r2
 800943a:	3401      	adds	r4, #1
 800943c:	9304      	str	r3, [sp, #16]
 800943e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009442:	4829      	ldr	r0, [pc, #164]	@ (80094e8 <_vfiprintf_r+0x220>)
 8009444:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009448:	2206      	movs	r2, #6
 800944a:	f7f6 fed1 	bl	80001f0 <memchr>
 800944e:	2800      	cmp	r0, #0
 8009450:	d03f      	beq.n	80094d2 <_vfiprintf_r+0x20a>
 8009452:	4b26      	ldr	r3, [pc, #152]	@ (80094ec <_vfiprintf_r+0x224>)
 8009454:	bb1b      	cbnz	r3, 800949e <_vfiprintf_r+0x1d6>
 8009456:	9b03      	ldr	r3, [sp, #12]
 8009458:	3307      	adds	r3, #7
 800945a:	f023 0307 	bic.w	r3, r3, #7
 800945e:	3308      	adds	r3, #8
 8009460:	9303      	str	r3, [sp, #12]
 8009462:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009464:	443b      	add	r3, r7
 8009466:	9309      	str	r3, [sp, #36]	@ 0x24
 8009468:	e76a      	b.n	8009340 <_vfiprintf_r+0x78>
 800946a:	fb0c 3202 	mla	r2, ip, r2, r3
 800946e:	460c      	mov	r4, r1
 8009470:	2001      	movs	r0, #1
 8009472:	e7a8      	b.n	80093c6 <_vfiprintf_r+0xfe>
 8009474:	2300      	movs	r3, #0
 8009476:	3401      	adds	r4, #1
 8009478:	9305      	str	r3, [sp, #20]
 800947a:	4619      	mov	r1, r3
 800947c:	f04f 0c0a 	mov.w	ip, #10
 8009480:	4620      	mov	r0, r4
 8009482:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009486:	3a30      	subs	r2, #48	@ 0x30
 8009488:	2a09      	cmp	r2, #9
 800948a:	d903      	bls.n	8009494 <_vfiprintf_r+0x1cc>
 800948c:	2b00      	cmp	r3, #0
 800948e:	d0c6      	beq.n	800941e <_vfiprintf_r+0x156>
 8009490:	9105      	str	r1, [sp, #20]
 8009492:	e7c4      	b.n	800941e <_vfiprintf_r+0x156>
 8009494:	fb0c 2101 	mla	r1, ip, r1, r2
 8009498:	4604      	mov	r4, r0
 800949a:	2301      	movs	r3, #1
 800949c:	e7f0      	b.n	8009480 <_vfiprintf_r+0x1b8>
 800949e:	ab03      	add	r3, sp, #12
 80094a0:	9300      	str	r3, [sp, #0]
 80094a2:	462a      	mov	r2, r5
 80094a4:	4b12      	ldr	r3, [pc, #72]	@ (80094f0 <_vfiprintf_r+0x228>)
 80094a6:	a904      	add	r1, sp, #16
 80094a8:	4630      	mov	r0, r6
 80094aa:	f7fd fc49 	bl	8006d40 <_printf_float>
 80094ae:	4607      	mov	r7, r0
 80094b0:	1c78      	adds	r0, r7, #1
 80094b2:	d1d6      	bne.n	8009462 <_vfiprintf_r+0x19a>
 80094b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80094b6:	07d9      	lsls	r1, r3, #31
 80094b8:	d405      	bmi.n	80094c6 <_vfiprintf_r+0x1fe>
 80094ba:	89ab      	ldrh	r3, [r5, #12]
 80094bc:	059a      	lsls	r2, r3, #22
 80094be:	d402      	bmi.n	80094c6 <_vfiprintf_r+0x1fe>
 80094c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80094c2:	f7fe f9ef 	bl	80078a4 <__retarget_lock_release_recursive>
 80094c6:	89ab      	ldrh	r3, [r5, #12]
 80094c8:	065b      	lsls	r3, r3, #25
 80094ca:	f53f af1f 	bmi.w	800930c <_vfiprintf_r+0x44>
 80094ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80094d0:	e71e      	b.n	8009310 <_vfiprintf_r+0x48>
 80094d2:	ab03      	add	r3, sp, #12
 80094d4:	9300      	str	r3, [sp, #0]
 80094d6:	462a      	mov	r2, r5
 80094d8:	4b05      	ldr	r3, [pc, #20]	@ (80094f0 <_vfiprintf_r+0x228>)
 80094da:	a904      	add	r1, sp, #16
 80094dc:	4630      	mov	r0, r6
 80094de:	f7fd fec7 	bl	8007270 <_printf_i>
 80094e2:	e7e4      	b.n	80094ae <_vfiprintf_r+0x1e6>
 80094e4:	08009c18 	.word	0x08009c18
 80094e8:	08009c22 	.word	0x08009c22
 80094ec:	08006d41 	.word	0x08006d41
 80094f0:	080092a5 	.word	0x080092a5
 80094f4:	08009c1e 	.word	0x08009c1e

080094f8 <__swbuf_r>:
 80094f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094fa:	460e      	mov	r6, r1
 80094fc:	4614      	mov	r4, r2
 80094fe:	4605      	mov	r5, r0
 8009500:	b118      	cbz	r0, 800950a <__swbuf_r+0x12>
 8009502:	6a03      	ldr	r3, [r0, #32]
 8009504:	b90b      	cbnz	r3, 800950a <__swbuf_r+0x12>
 8009506:	f7fe f85f 	bl	80075c8 <__sinit>
 800950a:	69a3      	ldr	r3, [r4, #24]
 800950c:	60a3      	str	r3, [r4, #8]
 800950e:	89a3      	ldrh	r3, [r4, #12]
 8009510:	071a      	lsls	r2, r3, #28
 8009512:	d501      	bpl.n	8009518 <__swbuf_r+0x20>
 8009514:	6923      	ldr	r3, [r4, #16]
 8009516:	b943      	cbnz	r3, 800952a <__swbuf_r+0x32>
 8009518:	4621      	mov	r1, r4
 800951a:	4628      	mov	r0, r5
 800951c:	f000 f82a 	bl	8009574 <__swsetup_r>
 8009520:	b118      	cbz	r0, 800952a <__swbuf_r+0x32>
 8009522:	f04f 37ff 	mov.w	r7, #4294967295
 8009526:	4638      	mov	r0, r7
 8009528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800952a:	6823      	ldr	r3, [r4, #0]
 800952c:	6922      	ldr	r2, [r4, #16]
 800952e:	1a98      	subs	r0, r3, r2
 8009530:	6963      	ldr	r3, [r4, #20]
 8009532:	b2f6      	uxtb	r6, r6
 8009534:	4283      	cmp	r3, r0
 8009536:	4637      	mov	r7, r6
 8009538:	dc05      	bgt.n	8009546 <__swbuf_r+0x4e>
 800953a:	4621      	mov	r1, r4
 800953c:	4628      	mov	r0, r5
 800953e:	f7ff fdb7 	bl	80090b0 <_fflush_r>
 8009542:	2800      	cmp	r0, #0
 8009544:	d1ed      	bne.n	8009522 <__swbuf_r+0x2a>
 8009546:	68a3      	ldr	r3, [r4, #8]
 8009548:	3b01      	subs	r3, #1
 800954a:	60a3      	str	r3, [r4, #8]
 800954c:	6823      	ldr	r3, [r4, #0]
 800954e:	1c5a      	adds	r2, r3, #1
 8009550:	6022      	str	r2, [r4, #0]
 8009552:	701e      	strb	r6, [r3, #0]
 8009554:	6962      	ldr	r2, [r4, #20]
 8009556:	1c43      	adds	r3, r0, #1
 8009558:	429a      	cmp	r2, r3
 800955a:	d004      	beq.n	8009566 <__swbuf_r+0x6e>
 800955c:	89a3      	ldrh	r3, [r4, #12]
 800955e:	07db      	lsls	r3, r3, #31
 8009560:	d5e1      	bpl.n	8009526 <__swbuf_r+0x2e>
 8009562:	2e0a      	cmp	r6, #10
 8009564:	d1df      	bne.n	8009526 <__swbuf_r+0x2e>
 8009566:	4621      	mov	r1, r4
 8009568:	4628      	mov	r0, r5
 800956a:	f7ff fda1 	bl	80090b0 <_fflush_r>
 800956e:	2800      	cmp	r0, #0
 8009570:	d0d9      	beq.n	8009526 <__swbuf_r+0x2e>
 8009572:	e7d6      	b.n	8009522 <__swbuf_r+0x2a>

08009574 <__swsetup_r>:
 8009574:	b538      	push	{r3, r4, r5, lr}
 8009576:	4b29      	ldr	r3, [pc, #164]	@ (800961c <__swsetup_r+0xa8>)
 8009578:	4605      	mov	r5, r0
 800957a:	6818      	ldr	r0, [r3, #0]
 800957c:	460c      	mov	r4, r1
 800957e:	b118      	cbz	r0, 8009588 <__swsetup_r+0x14>
 8009580:	6a03      	ldr	r3, [r0, #32]
 8009582:	b90b      	cbnz	r3, 8009588 <__swsetup_r+0x14>
 8009584:	f7fe f820 	bl	80075c8 <__sinit>
 8009588:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800958c:	0719      	lsls	r1, r3, #28
 800958e:	d422      	bmi.n	80095d6 <__swsetup_r+0x62>
 8009590:	06da      	lsls	r2, r3, #27
 8009592:	d407      	bmi.n	80095a4 <__swsetup_r+0x30>
 8009594:	2209      	movs	r2, #9
 8009596:	602a      	str	r2, [r5, #0]
 8009598:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800959c:	81a3      	strh	r3, [r4, #12]
 800959e:	f04f 30ff 	mov.w	r0, #4294967295
 80095a2:	e033      	b.n	800960c <__swsetup_r+0x98>
 80095a4:	0758      	lsls	r0, r3, #29
 80095a6:	d512      	bpl.n	80095ce <__swsetup_r+0x5a>
 80095a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80095aa:	b141      	cbz	r1, 80095be <__swsetup_r+0x4a>
 80095ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80095b0:	4299      	cmp	r1, r3
 80095b2:	d002      	beq.n	80095ba <__swsetup_r+0x46>
 80095b4:	4628      	mov	r0, r5
 80095b6:	f7fe ffd3 	bl	8008560 <_free_r>
 80095ba:	2300      	movs	r3, #0
 80095bc:	6363      	str	r3, [r4, #52]	@ 0x34
 80095be:	89a3      	ldrh	r3, [r4, #12]
 80095c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80095c4:	81a3      	strh	r3, [r4, #12]
 80095c6:	2300      	movs	r3, #0
 80095c8:	6063      	str	r3, [r4, #4]
 80095ca:	6923      	ldr	r3, [r4, #16]
 80095cc:	6023      	str	r3, [r4, #0]
 80095ce:	89a3      	ldrh	r3, [r4, #12]
 80095d0:	f043 0308 	orr.w	r3, r3, #8
 80095d4:	81a3      	strh	r3, [r4, #12]
 80095d6:	6923      	ldr	r3, [r4, #16]
 80095d8:	b94b      	cbnz	r3, 80095ee <__swsetup_r+0x7a>
 80095da:	89a3      	ldrh	r3, [r4, #12]
 80095dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80095e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80095e4:	d003      	beq.n	80095ee <__swsetup_r+0x7a>
 80095e6:	4621      	mov	r1, r4
 80095e8:	4628      	mov	r0, r5
 80095ea:	f000 f883 	bl	80096f4 <__smakebuf_r>
 80095ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095f2:	f013 0201 	ands.w	r2, r3, #1
 80095f6:	d00a      	beq.n	800960e <__swsetup_r+0x9a>
 80095f8:	2200      	movs	r2, #0
 80095fa:	60a2      	str	r2, [r4, #8]
 80095fc:	6962      	ldr	r2, [r4, #20]
 80095fe:	4252      	negs	r2, r2
 8009600:	61a2      	str	r2, [r4, #24]
 8009602:	6922      	ldr	r2, [r4, #16]
 8009604:	b942      	cbnz	r2, 8009618 <__swsetup_r+0xa4>
 8009606:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800960a:	d1c5      	bne.n	8009598 <__swsetup_r+0x24>
 800960c:	bd38      	pop	{r3, r4, r5, pc}
 800960e:	0799      	lsls	r1, r3, #30
 8009610:	bf58      	it	pl
 8009612:	6962      	ldrpl	r2, [r4, #20]
 8009614:	60a2      	str	r2, [r4, #8]
 8009616:	e7f4      	b.n	8009602 <__swsetup_r+0x8e>
 8009618:	2000      	movs	r0, #0
 800961a:	e7f7      	b.n	800960c <__swsetup_r+0x98>
 800961c:	20000198 	.word	0x20000198

08009620 <_raise_r>:
 8009620:	291f      	cmp	r1, #31
 8009622:	b538      	push	{r3, r4, r5, lr}
 8009624:	4605      	mov	r5, r0
 8009626:	460c      	mov	r4, r1
 8009628:	d904      	bls.n	8009634 <_raise_r+0x14>
 800962a:	2316      	movs	r3, #22
 800962c:	6003      	str	r3, [r0, #0]
 800962e:	f04f 30ff 	mov.w	r0, #4294967295
 8009632:	bd38      	pop	{r3, r4, r5, pc}
 8009634:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009636:	b112      	cbz	r2, 800963e <_raise_r+0x1e>
 8009638:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800963c:	b94b      	cbnz	r3, 8009652 <_raise_r+0x32>
 800963e:	4628      	mov	r0, r5
 8009640:	f000 f830 	bl	80096a4 <_getpid_r>
 8009644:	4622      	mov	r2, r4
 8009646:	4601      	mov	r1, r0
 8009648:	4628      	mov	r0, r5
 800964a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800964e:	f000 b817 	b.w	8009680 <_kill_r>
 8009652:	2b01      	cmp	r3, #1
 8009654:	d00a      	beq.n	800966c <_raise_r+0x4c>
 8009656:	1c59      	adds	r1, r3, #1
 8009658:	d103      	bne.n	8009662 <_raise_r+0x42>
 800965a:	2316      	movs	r3, #22
 800965c:	6003      	str	r3, [r0, #0]
 800965e:	2001      	movs	r0, #1
 8009660:	e7e7      	b.n	8009632 <_raise_r+0x12>
 8009662:	2100      	movs	r1, #0
 8009664:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009668:	4620      	mov	r0, r4
 800966a:	4798      	blx	r3
 800966c:	2000      	movs	r0, #0
 800966e:	e7e0      	b.n	8009632 <_raise_r+0x12>

08009670 <raise>:
 8009670:	4b02      	ldr	r3, [pc, #8]	@ (800967c <raise+0xc>)
 8009672:	4601      	mov	r1, r0
 8009674:	6818      	ldr	r0, [r3, #0]
 8009676:	f7ff bfd3 	b.w	8009620 <_raise_r>
 800967a:	bf00      	nop
 800967c:	20000198 	.word	0x20000198

08009680 <_kill_r>:
 8009680:	b538      	push	{r3, r4, r5, lr}
 8009682:	4d07      	ldr	r5, [pc, #28]	@ (80096a0 <_kill_r+0x20>)
 8009684:	2300      	movs	r3, #0
 8009686:	4604      	mov	r4, r0
 8009688:	4608      	mov	r0, r1
 800968a:	4611      	mov	r1, r2
 800968c:	602b      	str	r3, [r5, #0]
 800968e:	f7f8 fa69 	bl	8001b64 <_kill>
 8009692:	1c43      	adds	r3, r0, #1
 8009694:	d102      	bne.n	800969c <_kill_r+0x1c>
 8009696:	682b      	ldr	r3, [r5, #0]
 8009698:	b103      	cbz	r3, 800969c <_kill_r+0x1c>
 800969a:	6023      	str	r3, [r4, #0]
 800969c:	bd38      	pop	{r3, r4, r5, pc}
 800969e:	bf00      	nop
 80096a0:	20001148 	.word	0x20001148

080096a4 <_getpid_r>:
 80096a4:	f7f8 ba56 	b.w	8001b54 <_getpid>

080096a8 <__swhatbuf_r>:
 80096a8:	b570      	push	{r4, r5, r6, lr}
 80096aa:	460c      	mov	r4, r1
 80096ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096b0:	2900      	cmp	r1, #0
 80096b2:	b096      	sub	sp, #88	@ 0x58
 80096b4:	4615      	mov	r5, r2
 80096b6:	461e      	mov	r6, r3
 80096b8:	da0d      	bge.n	80096d6 <__swhatbuf_r+0x2e>
 80096ba:	89a3      	ldrh	r3, [r4, #12]
 80096bc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80096c0:	f04f 0100 	mov.w	r1, #0
 80096c4:	bf14      	ite	ne
 80096c6:	2340      	movne	r3, #64	@ 0x40
 80096c8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80096cc:	2000      	movs	r0, #0
 80096ce:	6031      	str	r1, [r6, #0]
 80096d0:	602b      	str	r3, [r5, #0]
 80096d2:	b016      	add	sp, #88	@ 0x58
 80096d4:	bd70      	pop	{r4, r5, r6, pc}
 80096d6:	466a      	mov	r2, sp
 80096d8:	f000 f848 	bl	800976c <_fstat_r>
 80096dc:	2800      	cmp	r0, #0
 80096de:	dbec      	blt.n	80096ba <__swhatbuf_r+0x12>
 80096e0:	9901      	ldr	r1, [sp, #4]
 80096e2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80096e6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80096ea:	4259      	negs	r1, r3
 80096ec:	4159      	adcs	r1, r3
 80096ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80096f2:	e7eb      	b.n	80096cc <__swhatbuf_r+0x24>

080096f4 <__smakebuf_r>:
 80096f4:	898b      	ldrh	r3, [r1, #12]
 80096f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80096f8:	079d      	lsls	r5, r3, #30
 80096fa:	4606      	mov	r6, r0
 80096fc:	460c      	mov	r4, r1
 80096fe:	d507      	bpl.n	8009710 <__smakebuf_r+0x1c>
 8009700:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009704:	6023      	str	r3, [r4, #0]
 8009706:	6123      	str	r3, [r4, #16]
 8009708:	2301      	movs	r3, #1
 800970a:	6163      	str	r3, [r4, #20]
 800970c:	b003      	add	sp, #12
 800970e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009710:	ab01      	add	r3, sp, #4
 8009712:	466a      	mov	r2, sp
 8009714:	f7ff ffc8 	bl	80096a8 <__swhatbuf_r>
 8009718:	9f00      	ldr	r7, [sp, #0]
 800971a:	4605      	mov	r5, r0
 800971c:	4639      	mov	r1, r7
 800971e:	4630      	mov	r0, r6
 8009720:	f7fd f9e2 	bl	8006ae8 <_malloc_r>
 8009724:	b948      	cbnz	r0, 800973a <__smakebuf_r+0x46>
 8009726:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800972a:	059a      	lsls	r2, r3, #22
 800972c:	d4ee      	bmi.n	800970c <__smakebuf_r+0x18>
 800972e:	f023 0303 	bic.w	r3, r3, #3
 8009732:	f043 0302 	orr.w	r3, r3, #2
 8009736:	81a3      	strh	r3, [r4, #12]
 8009738:	e7e2      	b.n	8009700 <__smakebuf_r+0xc>
 800973a:	89a3      	ldrh	r3, [r4, #12]
 800973c:	6020      	str	r0, [r4, #0]
 800973e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009742:	81a3      	strh	r3, [r4, #12]
 8009744:	9b01      	ldr	r3, [sp, #4]
 8009746:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800974a:	b15b      	cbz	r3, 8009764 <__smakebuf_r+0x70>
 800974c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009750:	4630      	mov	r0, r6
 8009752:	f000 f81d 	bl	8009790 <_isatty_r>
 8009756:	b128      	cbz	r0, 8009764 <__smakebuf_r+0x70>
 8009758:	89a3      	ldrh	r3, [r4, #12]
 800975a:	f023 0303 	bic.w	r3, r3, #3
 800975e:	f043 0301 	orr.w	r3, r3, #1
 8009762:	81a3      	strh	r3, [r4, #12]
 8009764:	89a3      	ldrh	r3, [r4, #12]
 8009766:	431d      	orrs	r5, r3
 8009768:	81a5      	strh	r5, [r4, #12]
 800976a:	e7cf      	b.n	800970c <__smakebuf_r+0x18>

0800976c <_fstat_r>:
 800976c:	b538      	push	{r3, r4, r5, lr}
 800976e:	4d07      	ldr	r5, [pc, #28]	@ (800978c <_fstat_r+0x20>)
 8009770:	2300      	movs	r3, #0
 8009772:	4604      	mov	r4, r0
 8009774:	4608      	mov	r0, r1
 8009776:	4611      	mov	r1, r2
 8009778:	602b      	str	r3, [r5, #0]
 800977a:	f7f8 fa53 	bl	8001c24 <_fstat>
 800977e:	1c43      	adds	r3, r0, #1
 8009780:	d102      	bne.n	8009788 <_fstat_r+0x1c>
 8009782:	682b      	ldr	r3, [r5, #0]
 8009784:	b103      	cbz	r3, 8009788 <_fstat_r+0x1c>
 8009786:	6023      	str	r3, [r4, #0]
 8009788:	bd38      	pop	{r3, r4, r5, pc}
 800978a:	bf00      	nop
 800978c:	20001148 	.word	0x20001148

08009790 <_isatty_r>:
 8009790:	b538      	push	{r3, r4, r5, lr}
 8009792:	4d06      	ldr	r5, [pc, #24]	@ (80097ac <_isatty_r+0x1c>)
 8009794:	2300      	movs	r3, #0
 8009796:	4604      	mov	r4, r0
 8009798:	4608      	mov	r0, r1
 800979a:	602b      	str	r3, [r5, #0]
 800979c:	f7f8 fa52 	bl	8001c44 <_isatty>
 80097a0:	1c43      	adds	r3, r0, #1
 80097a2:	d102      	bne.n	80097aa <_isatty_r+0x1a>
 80097a4:	682b      	ldr	r3, [r5, #0]
 80097a6:	b103      	cbz	r3, 80097aa <_isatty_r+0x1a>
 80097a8:	6023      	str	r3, [r4, #0]
 80097aa:	bd38      	pop	{r3, r4, r5, pc}
 80097ac:	20001148 	.word	0x20001148

080097b0 <_init>:
 80097b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097b2:	bf00      	nop
 80097b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097b6:	bc08      	pop	{r3}
 80097b8:	469e      	mov	lr, r3
 80097ba:	4770      	bx	lr

080097bc <_fini>:
 80097bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097be:	bf00      	nop
 80097c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097c2:	bc08      	pop	{r3}
 80097c4:	469e      	mov	lr, r3
 80097c6:	4770      	bx	lr
