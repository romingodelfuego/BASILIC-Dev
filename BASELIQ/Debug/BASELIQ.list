
BASELIQ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001061c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a08  080107cc  080107cc  000117cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080111d4  080111d4  0001321c  2**0
                  CONTENTS
  4 .ARM          00000008  080111d4  080111d4  000121d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080111dc  080111dc  0001321c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080111dc  080111dc  000121dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080111e0  080111e0  000121e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000021c  20000000  080111e4  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00017350  2000021c  08011400  0001321c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001756c  08011400  0001356c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001321c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003439b  00000000  00000000  0001324c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000089e3  00000000  00000000  000475e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002668  00000000  00000000  0004ffd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001d20  00000000  00000000  00052638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000273bd  00000000  00000000  00054358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0000caee  00000000  00000000  0007b715  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00088203  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00009efc  00000000  00000000  00088248  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000068  00000000  00000000  00092144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000021c 	.word	0x2000021c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080107b4 	.word	0x080107b4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000220 	.word	0x20000220
 80001ec:	080107b4 	.word	0x080107b4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <GNSSCom_Init>:

GNSSCom_HandleTypeDef hGNSSCom;
OutputType type = ASCII;
OutputProtocol protocol = UBX;

void GNSSCom_Init(UART_HandleTypeDef* huart,UART_HandleTypeDef* huartDebug){
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	6039      	str	r1, [r7, #0]
	hGNSSCom.huart = huart;
 800059a:	4a0f      	ldr	r2, [pc, #60]	@ (80005d8 <GNSSCom_Init+0x48>)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	6013      	str	r3, [r2, #0]
	hGNSSCom.huartDebug = huartDebug;
 80005a0:	4a0d      	ldr	r2, [pc, #52]	@ (80005d8 <GNSSCom_Init+0x48>)
 80005a2:	683b      	ldr	r3, [r7, #0]
 80005a4:	6053      	str	r3, [r2, #4]

	hGNSSCom.Rx = initializeBuffer(UART_RX_BUFFER_SIZE);
 80005a6:	20c8      	movs	r0, #200	@ 0xc8
 80005a8:	f000 f82e 	bl	8000608 <initializeBuffer>
 80005ac:	4603      	mov	r3, r0
 80005ae:	4a0a      	ldr	r2, [pc, #40]	@ (80005d8 <GNSSCom_Init+0x48>)
 80005b0:	6093      	str	r3, [r2, #8]
	memset(hGNSSCom.DebugBuffer, 0, UART_DEBUG_BUFFER_SIZE);
 80005b2:	22c8      	movs	r2, #200	@ 0xc8
 80005b4:	2100      	movs	r1, #0
 80005b6:	4809      	ldr	r0, [pc, #36]	@ (80005dc <GNSSCom_Init+0x4c>)
 80005b8:	f00f fccc 	bl	800ff54 <memset>

	GNSSCom_UartActivate(&hGNSSCom);
 80005bc:	4806      	ldr	r0, [pc, #24]	@ (80005d8 <GNSSCom_Init+0x48>)
 80005be:	f000 f80f 	bl	80005e0 <GNSSCom_UartActivate>
	HAL_Delay(5000); //En theorie il suffit d attendre la reception du premier msg UART pour envoyer
 80005c2:	f241 3088 	movw	r0, #5000	@ 0x1388
 80005c6:	f002 ff23 	bl	8003410 <HAL_Delay>
	GNSSCom_SetUp_Init();
 80005ca:	f000 f87b 	bl	80006c4 <GNSSCom_SetUp_Init>


}
 80005ce:	bf00      	nop
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	20000238 	.word	0x20000238
 80005dc:	20000244 	.word	0x20000244

080005e0 <GNSSCom_UartActivate>:
void GNSSCom_UartActivate(GNSSCom_HandleTypeDef* hGNSS){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(hGNSS->huart, hGNSS->Rx->buffer, hGNSS->Rx->size);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	6818      	ldr	r0, [r3, #0]
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	689b      	ldr	r3, [r3, #8]
 80005f0:	6819      	ldr	r1, [r3, #0]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	689b      	ldr	r3, [r3, #8]
 80005f6:	685b      	ldr	r3, [r3, #4]
 80005f8:	b29b      	uxth	r3, r3
 80005fa:	461a      	mov	r2, r3
 80005fc:	f006 ff42 	bl	8007484 <HAL_UART_Receive_IT>
}
 8000600:	bf00      	nop
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <initializeBuffer>:

DynamicBuffer* initializeBuffer(size_t initialSize) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
	DynamicBuffer *bufferDynamic = (DynamicBuffer *)pvPortMalloc(sizeof(DynamicBuffer));
 8000610:	2008      	movs	r0, #8
 8000612:	f00c fb03 	bl	800cc1c <pvPortMalloc>
 8000616:	60f8      	str	r0, [r7, #12]
	if (bufferDynamic == NULL) {
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d101      	bne.n	8000622 <initializeBuffer+0x1a>
		return NULL; // Échec de l'allocation mémoire
 800061e:	2300      	movs	r3, #0
 8000620:	e012      	b.n	8000648 <initializeBuffer+0x40>
	}

	bufferDynamic->buffer = (uint8_t*)pvPortMalloc(initialSize);
 8000622:	6878      	ldr	r0, [r7, #4]
 8000624:	f00c fafa 	bl	800cc1c <pvPortMalloc>
 8000628:	4602      	mov	r2, r0
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	601a      	str	r2, [r3, #0]
	if (bufferDynamic->buffer == NULL) {
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d104      	bne.n	8000640 <initializeBuffer+0x38>
		vPortFree(bufferDynamic); // Libérer la mémoire allouée pour la structure
 8000636:	68f8      	ldr	r0, [r7, #12]
 8000638:	f00c fbd6 	bl	800cde8 <vPortFree>
		return NULL; // Échec de l'allocation mémoire
 800063c:	2300      	movs	r3, #0
 800063e:	e003      	b.n	8000648 <initializeBuffer+0x40>
	}

	bufferDynamic->size = initialSize;
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	687a      	ldr	r2, [r7, #4]
 8000644:	605a      	str	r2, [r3, #4]
	return bufferDynamic;
 8000646:	68fb      	ldr	r3, [r7, #12]
}
 8000648:	4618      	mov	r0, r3
 800064a:	3710      	adds	r7, #16
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}

08000650 <freeBuffer>:

void freeBuffer(DynamicBuffer *bufferDynamic) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	vPortFree(bufferDynamic->buffer);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4618      	mov	r0, r3
 800065e:	f00c fbc3 	bl	800cde8 <vPortFree>
	vPortFree(bufferDynamic);
 8000662:	6878      	ldr	r0, [r7, #4]
 8000664:	f00c fbc0 	bl	800cde8 <vPortFree>
}
 8000668:	bf00      	nop
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}

08000670 <GNSSCom_Send_SetVal>:
void GNSSCom_Send_SetVal(CommandnSize toTransmit){
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af00      	add	r7, sp, #0
 8000676:	463b      	mov	r3, r7
 8000678:	e883 0003 	stmia.w	r3, {r0, r1}
	while (hGNSSCom.huart->gState != HAL_UART_STATE_READY){ITM_Port32(30)=99999999;}
 800067c:	e002      	b.n	8000684 <GNSSCom_Send_SetVal+0x14>
 800067e:	4b0e      	ldr	r3, [pc, #56]	@ (80006b8 <GNSSCom_Send_SetVal+0x48>)
 8000680:	4a0e      	ldr	r2, [pc, #56]	@ (80006bc <GNSSCom_Send_SetVal+0x4c>)
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	4b0e      	ldr	r3, [pc, #56]	@ (80006c0 <GNSSCom_Send_SetVal+0x50>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800068a:	2b20      	cmp	r3, #32
 800068c:	d1f7      	bne.n	800067e <GNSSCom_Send_SetVal+0xe>
	HAL_StatusTypeDef statut = HAL_UART_Transmit(hGNSSCom.huart, toTransmit.command, toTransmit.size,HAL_MAX_DELAY);
 800068e:	4b0c      	ldr	r3, [pc, #48]	@ (80006c0 <GNSSCom_Send_SetVal+0x50>)
 8000690:	6818      	ldr	r0, [r3, #0]
 8000692:	6839      	ldr	r1, [r7, #0]
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	b29a      	uxth	r2, r3
 8000698:	f04f 33ff 	mov.w	r3, #4294967295
 800069c:	f006 fe0a 	bl	80072b4 <HAL_UART_Transmit>
 80006a0:	4603      	mov	r3, r0
 80006a2:	73fb      	strb	r3, [r7, #15]
	if (statut!= HAL_OK){
 80006a4:	7bfb      	ldrb	r3, [r7, #15]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <GNSSCom_Send_SetVal+0x3e>
		Error_Handler();
 80006aa:	f002 f921 	bl	80028f0 <Error_Handler>
	}
}
 80006ae:	bf00      	nop
 80006b0:	3710      	adds	r7, #16
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	e0000078 	.word	0xe0000078
 80006bc:	05f5e0ff 	.word	0x05f5e0ff
 80006c0:	20000238 	.word	0x20000238

080006c4 <GNSSCom_SetUp_Init>:
void GNSSCom_SetUp_Init(void){
 80006c4:	b5b0      	push	{r4, r5, r7, lr}
 80006c6:	b09a      	sub	sp, #104	@ 0x68
 80006c8:	af00      	add	r7, sp, #0

	CommandnSize commands[] = {
 80006ca:	4b50      	ldr	r3, [pc, #320]	@ (800080c <GNSSCom_SetUp_Init+0x148>)
 80006cc:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 80006d0:	461d      	mov	r5, r3
 80006d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006da:	e895 0003 	ldmia.w	r5, {r0, r1}
 80006de:	e884 0003 	stmia.w	r4, {r0, r1}
			{commandUart1Ouput, sizeof(commandUart1Ouput)},
			//{commandUBXTimeUTC, sizeof(commandUBXTimeUTC)}
	};
	char message[50];

	for (int i = 0; i < sizeof(commands) / sizeof(commands[0]); ++i) {
 80006e2:	2300      	movs	r3, #0
 80006e4:	667b      	str	r3, [r7, #100]	@ 0x64
 80006e6:	e088      	b.n	80007fa <GNSSCom_SetUp_Init+0x136>
		// Transmit debug message
		sprintf(message, "\r\t\t\n...UBXMessage%d...\r\n", i + 1);
 80006e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80006ea:	1c5a      	adds	r2, r3, #1
 80006ec:	463b      	mov	r3, r7
 80006ee:	4948      	ldr	r1, [pc, #288]	@ (8000810 <GNSSCom_SetUp_Init+0x14c>)
 80006f0:	4618      	mov	r0, r3
 80006f2:	f00f fc0f 	bl	800ff14 <siprintf>
		HAL_UART_Transmit(hGNSSCom.huartDebug, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 80006f6:	4b47      	ldr	r3, [pc, #284]	@ (8000814 <GNSSCom_SetUp_Init+0x150>)
 80006f8:	685c      	ldr	r4, [r3, #4]
 80006fa:	463b      	mov	r3, r7
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff fd77 	bl	80001f0 <strlen>
 8000702:	4603      	mov	r3, r0
 8000704:	b29a      	uxth	r2, r3
 8000706:	4639      	mov	r1, r7
 8000708:	f04f 33ff 	mov.w	r3, #4294967295
 800070c:	4620      	mov	r0, r4
 800070e:	f006 fdd1 	bl	80072b4 <HAL_UART_Transmit>

		// Transmit command
		GNSSCom_Send_SetVal(commands[i]);
 8000712:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000714:	00db      	lsls	r3, r3, #3
 8000716:	3368      	adds	r3, #104	@ 0x68
 8000718:	443b      	add	r3, r7
 800071a:	3b34      	subs	r3, #52	@ 0x34
 800071c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000720:	f7ff ffa6 	bl	8000670 <GNSSCom_Send_SetVal>

		// On fais croire que la commande a ete recu par le RX buffer : TIPS pour print en debug la commande
		memcpy(hGNSSCom.Rx->buffer, commands[i].command, commands[i].size);
 8000724:	4b3b      	ldr	r3, [pc, #236]	@ (8000814 <GNSSCom_SetUp_Init+0x150>)
 8000726:	689b      	ldr	r3, [r3, #8]
 8000728:	6818      	ldr	r0, [r3, #0]
 800072a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800072c:	00db      	lsls	r3, r3, #3
 800072e:	3368      	adds	r3, #104	@ 0x68
 8000730:	443b      	add	r3, r7
 8000732:	f853 1c34 	ldr.w	r1, [r3, #-52]
 8000736:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000738:	00db      	lsls	r3, r3, #3
 800073a:	3368      	adds	r3, #104	@ 0x68
 800073c:	443b      	add	r3, r7
 800073e:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8000742:	461a      	mov	r2, r3
 8000744:	f00f fca8 	bl	8010098 <memcpy>

		GenericMessage* command_debug = GNSSCom_Receive(hGNSSCom.Rx->buffer,hGNSSCom.Rx->size);
 8000748:	4b32      	ldr	r3, [pc, #200]	@ (8000814 <GNSSCom_SetUp_Init+0x150>)
 800074a:	689b      	ldr	r3, [r3, #8]
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	4b31      	ldr	r3, [pc, #196]	@ (8000814 <GNSSCom_SetUp_Init+0x150>)
 8000750:	689b      	ldr	r3, [r3, #8]
 8000752:	685b      	ldr	r3, [r3, #4]
 8000754:	4619      	mov	r1, r3
 8000756:	4610      	mov	r0, r2
 8000758:	f000 f860 	bl	800081c <GNSSCom_Receive>
 800075c:	6638      	str	r0, [r7, #96]	@ 0x60
		if (command_debug->typeMessage == UBX){
 800075e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	2b02      	cmp	r3, #2
 8000764:	d125      	bne.n	80007b2 <GNSSCom_SetUp_Init+0xee>
			UBXMessage_parsed* messageUBX=(UBXMessage_parsed*) command_debug->Message.UBXMessage;
 8000766:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000768:	685b      	ldr	r3, [r3, #4]
 800076a:	65fb      	str	r3, [r7, #92]	@ 0x5c
			create_message_debug(messageUBX);
 800076c:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800076e:	f000 f8ed 	bl	800094c <create_message_debug>
			HAL_UART_Transmit(hGNSSCom.huartDebug,(uint8_t*) messageUBX->bufferDebug, sizeof(messageUBX->bufferDebug), HAL_MAX_DELAY);
 8000772:	4b28      	ldr	r3, [pc, #160]	@ (8000814 <GNSSCom_SetUp_Init+0x150>)
 8000774:	6858      	ldr	r0, [r3, #4]
 8000776:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000778:	1d19      	adds	r1, r3, #4
 800077a:	f04f 33ff 	mov.w	r3, #4294967295
 800077e:	22c8      	movs	r2, #200	@ 0xc8
 8000780:	f006 fd98 	bl	80072b4 <HAL_UART_Transmit>
			freeBuffer(command_debug->Message.UBXMessage->brute);
 8000784:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000786:	685b      	ldr	r3, [r3, #4]
 8000788:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff ff5f 	bl	8000650 <freeBuffer>
			freeBuffer(command_debug->Message.UBXMessage->load);
 8000792:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000794:	685b      	ldr	r3, [r3, #4]
 8000796:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff ff58 	bl	8000650 <freeBuffer>
			free(command_debug->Message.UBXMessage);
 80007a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80007a2:	685b      	ldr	r3, [r3, #4]
 80007a4:	4618      	mov	r0, r3
 80007a6:	f00f facb 	bl	800fd40 <free>
			free(command_debug);
 80007aa:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80007ac:	f00f fac8 	bl	800fd40 <free>
 80007b0:	e020      	b.n	80007f4 <GNSSCom_SetUp_Init+0x130>
		}
		else{
			sprintf(message, "\r\t\t\n...UBXMessage%d - FAILED...\r\n", i + 1);
 80007b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80007b4:	1c5a      	adds	r2, r3, #1
 80007b6:	463b      	mov	r3, r7
 80007b8:	4917      	ldr	r1, [pc, #92]	@ (8000818 <GNSSCom_SetUp_Init+0x154>)
 80007ba:	4618      	mov	r0, r3
 80007bc:	f00f fbaa 	bl	800ff14 <siprintf>
			HAL_UART_Transmit(hGNSSCom.huartDebug, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 80007c0:	4b14      	ldr	r3, [pc, #80]	@ (8000814 <GNSSCom_SetUp_Init+0x150>)
 80007c2:	685c      	ldr	r4, [r3, #4]
 80007c4:	463b      	mov	r3, r7
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff fd12 	bl	80001f0 <strlen>
 80007cc:	4603      	mov	r3, r0
 80007ce:	b29a      	uxth	r2, r3
 80007d0:	4639      	mov	r1, r7
 80007d2:	f04f 33ff 	mov.w	r3, #4294967295
 80007d6:	4620      	mov	r0, r4
 80007d8:	f006 fd6c 	bl	80072b4 <HAL_UART_Transmit>
			if (command_debug->typeMessage == NMEA){
 80007dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	2b01      	cmp	r3, #1
 80007e2:	d107      	bne.n	80007f4 <GNSSCom_SetUp_Init+0x130>
				free(command_debug->Message.NMEAMessage);
 80007e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80007e6:	685b      	ldr	r3, [r3, #4]
 80007e8:	4618      	mov	r0, r3
 80007ea:	f00f faa9 	bl	800fd40 <free>
				free(command_debug);
 80007ee:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80007f0:	f00f faa6 	bl	800fd40 <free>
	for (int i = 0; i < sizeof(commands) / sizeof(commands[0]); ++i) {
 80007f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80007f6:	3301      	adds	r3, #1
 80007f8:	667b      	str	r3, [r7, #100]	@ 0x64
 80007fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80007fc:	2b04      	cmp	r3, #4
 80007fe:	f67f af73 	bls.w	80006e8 <GNSSCom_SetUp_Init+0x24>
			}
		}
	}
}
 8000802:	bf00      	nop
 8000804:	bf00      	nop
 8000806:	3768      	adds	r7, #104	@ 0x68
 8000808:	46bd      	mov	sp, r7
 800080a:	bdb0      	pop	{r4, r5, r7, pc}
 800080c:	0801080c 	.word	0x0801080c
 8000810:	080107cc 	.word	0x080107cc
 8000814:	20000238 	.word	0x20000238
 8000818:	080107e8 	.word	0x080107e8

0800081c <GNSSCom_Receive>:

GenericMessage* GNSSCom_Receive(uint8_t* buffer,size_t size){
 800081c:	b580      	push	{r7, lr}
 800081e:	b086      	sub	sp, #24
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	6039      	str	r1, [r7, #0]
	GenericMessage* genericMessage=(GenericMessage*) malloc(sizeof(GenericMessage));
 8000826:	2008      	movs	r0, #8
 8000828:	f00f fa82 	bl	800fd30 <malloc>
 800082c:	4603      	mov	r3, r0
 800082e:	613b      	str	r3, [r7, #16]

	for (int i = 0; i < size; i++) {
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]
 8000834:	e07f      	b.n	8000936 <GNSSCom_Receive+0x11a>
		if (buffer[i] == HEADER_UBX_1 &&
 8000836:	697b      	ldr	r3, [r7, #20]
 8000838:	687a      	ldr	r2, [r7, #4]
 800083a:	4413      	add	r3, r2
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	2bb5      	cmp	r3, #181	@ 0xb5
 8000840:	d163      	bne.n	800090a <GNSSCom_Receive+0xee>
				buffer[i +1] == HEADER_UBX_2 ){
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	3301      	adds	r3, #1
 8000846:	687a      	ldr	r2, [r7, #4]
 8000848:	4413      	add	r3, r2
 800084a:	781b      	ldrb	r3, [r3, #0]
		if (buffer[i] == HEADER_UBX_1 &&
 800084c:	2b62      	cmp	r3, #98	@ 0x62
 800084e:	d15c      	bne.n	800090a <GNSSCom_Receive+0xee>
			genericMessage->typeMessage=UBX;
 8000850:	693b      	ldr	r3, [r7, #16]
 8000852:	2202      	movs	r2, #2
 8000854:	701a      	strb	r2, [r3, #0]
			UBXMessage_parsed* UbxMessage =(UBXMessage_parsed*) malloc(sizeof(UBXMessage_parsed));
 8000856:	20d4      	movs	r0, #212	@ 0xd4
 8000858:	f00f fa6a 	bl	800fd30 <malloc>
 800085c:	4603      	mov	r3, r0
 800085e:	60fb      	str	r3, [r7, #12]
			UbxMessage->CLASS = buffer[i + 2];
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	3302      	adds	r3, #2
 8000864:	687a      	ldr	r2, [r7, #4]
 8000866:	4413      	add	r3, r2
 8000868:	781a      	ldrb	r2, [r3, #0]
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	701a      	strb	r2, [r3, #0]
			UbxMessage->ID = buffer[i + 3];
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	3303      	adds	r3, #3
 8000872:	687a      	ldr	r2, [r7, #4]
 8000874:	4413      	add	r3, r2
 8000876:	781a      	ldrb	r2, [r3, #0]
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	705a      	strb	r2, [r3, #1]
			UbxMessage->len_payload = (buffer[i+5] << 8) |buffer[i+4];
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	3305      	adds	r3, #5
 8000880:	687a      	ldr	r2, [r7, #4]
 8000882:	4413      	add	r3, r2
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	021b      	lsls	r3, r3, #8
 8000888:	b21a      	sxth	r2, r3
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	3304      	adds	r3, #4
 800088e:	6879      	ldr	r1, [r7, #4]
 8000890:	440b      	add	r3, r1
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	b21b      	sxth	r3, r3
 8000896:	4313      	orrs	r3, r2
 8000898:	b21b      	sxth	r3, r3
 800089a:	b29a      	uxth	r2, r3
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	805a      	strh	r2, [r3, #2]
			UbxMessage->load=initializeBuffer((size_t)UbxMessage->len_payload);
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	885b      	ldrh	r3, [r3, #2]
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff feaf 	bl	8000608 <initializeBuffer>
 80008aa:	4602      	mov	r2, r0
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

			memcpy(UbxMessage->load->buffer, buffer + i + 6, UbxMessage->load->size);
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80008b8:	6818      	ldr	r0, [r3, #0]
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	3306      	adds	r3, #6
 80008be:	687a      	ldr	r2, [r7, #4]
 80008c0:	18d1      	adds	r1, r2, r3
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	461a      	mov	r2, r3
 80008cc:	f00f fbe4 	bl	8010098 <memcpy>

			UbxMessage->brute=initializeBuffer((size_t)UbxMessage->len_payload + 8);
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	885b      	ldrh	r3, [r3, #2]
 80008d4:	3308      	adds	r3, #8
 80008d6:	4618      	mov	r0, r3
 80008d8:	f7ff fe96 	bl	8000608 <initializeBuffer>
 80008dc:	4602      	mov	r2, r0
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
			memcpy(UbxMessage->brute->buffer, buffer + i, UbxMessage->brute->size);
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80008ea:	6818      	ldr	r0, [r3, #0]
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	687a      	ldr	r2, [r7, #4]
 80008f0:	18d1      	adds	r1, r2, r3
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	461a      	mov	r2, r3
 80008fc:	f00f fbcc 	bl	8010098 <memcpy>

			genericMessage->Message.UBXMessage = UbxMessage;
 8000900:	693b      	ldr	r3, [r7, #16]
 8000902:	68fa      	ldr	r2, [r7, #12]
 8000904:	605a      	str	r2, [r3, #4]
			return genericMessage;
 8000906:	693b      	ldr	r3, [r7, #16]
 8000908:	e01b      	b.n	8000942 <GNSSCom_Receive+0x126>
		}

		else if(buffer[i] == HEADER_NMEA) {
 800090a:	697b      	ldr	r3, [r7, #20]
 800090c:	687a      	ldr	r2, [r7, #4]
 800090e:	4413      	add	r3, r2
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	2b24      	cmp	r3, #36	@ 0x24
 8000914:	d10c      	bne.n	8000930 <GNSSCom_Receive+0x114>
			NMEAMessage_parsed* NMEAMessage =(NMEAMessage_parsed*) malloc(sizeof(NMEAMessage_parsed));
 8000916:	2004      	movs	r0, #4
 8000918:	f00f fa0a 	bl	800fd30 <malloc>
 800091c:	4603      	mov	r3, r0
 800091e:	60bb      	str	r3, [r7, #8]
			genericMessage->typeMessage= NMEA;
 8000920:	693b      	ldr	r3, [r7, #16]
 8000922:	2201      	movs	r2, #1
 8000924:	701a      	strb	r2, [r3, #0]
			genericMessage->Message.NMEAMessage = NMEAMessage;
 8000926:	693b      	ldr	r3, [r7, #16]
 8000928:	68ba      	ldr	r2, [r7, #8]
 800092a:	605a      	str	r2, [r3, #4]
			return genericMessage; //Temporaire
 800092c:	693b      	ldr	r3, [r7, #16]
 800092e:	e008      	b.n	8000942 <GNSSCom_Receive+0x126>
	for (int i = 0; i < size; i++) {
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	3301      	adds	r3, #1
 8000934:	617b      	str	r3, [r7, #20]
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	683a      	ldr	r2, [r7, #0]
 800093a:	429a      	cmp	r2, r3
 800093c:	f63f af7b 	bhi.w	8000836 <GNSSCom_Receive+0x1a>
		}
	}
	return genericMessage;
 8000940:	693b      	ldr	r3, [r7, #16]
}
 8000942:	4618      	mov	r0, r3
 8000944:	3718      	adds	r7, #24
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
	...

0800094c <create_message_debug>:
	{0x06, 0x01,(void (*)(UBXMessage_parsed *, void *)) debug_PollMessage, &UBX_CFG_MSG_instance},
    // Add other mappings for other message types if necessary
};


void create_message_debug(UBXMessage_parsed* UBXMessage) {
 800094c:	b580      	push	{r7, lr}
 800094e:	b086      	sub	sp, #24
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
    // Function pointer and variables to hold the matched mapping's values
    void (*get_func)(UBXMessage_parsed*, void *) = NULL;
 8000954:	2300      	movs	r3, #0
 8000956:	613b      	str	r3, [r7, #16]
    void* structAssociate = NULL;
 8000958:	2300      	movs	r3, #0
 800095a:	60fb      	str	r3, [r7, #12]

    // Loop through the message mappings to find a match
    for (int i = 0; i < sizeof(message_mappings) / sizeof(message_mappings[0]); i++) {
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]
 8000960:	e034      	b.n	80009cc <create_message_debug+0x80>
        if (message_mappings[i].CLASS == UBXMessage->CLASS &&
 8000962:	491e      	ldr	r1, [pc, #120]	@ (80009dc <create_message_debug+0x90>)
 8000964:	697a      	ldr	r2, [r7, #20]
 8000966:	4613      	mov	r3, r2
 8000968:	005b      	lsls	r3, r3, #1
 800096a:	4413      	add	r3, r2
 800096c:	009b      	lsls	r3, r3, #2
 800096e:	440b      	add	r3, r1
 8000970:	781a      	ldrb	r2, [r3, #0]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	429a      	cmp	r2, r3
 8000978:	d125      	bne.n	80009c6 <create_message_debug+0x7a>
            message_mappings[i].ID == UBXMessage->ID) {
 800097a:	4918      	ldr	r1, [pc, #96]	@ (80009dc <create_message_debug+0x90>)
 800097c:	697a      	ldr	r2, [r7, #20]
 800097e:	4613      	mov	r3, r2
 8000980:	005b      	lsls	r3, r3, #1
 8000982:	4413      	add	r3, r2
 8000984:	009b      	lsls	r3, r3, #2
 8000986:	440b      	add	r3, r1
 8000988:	3301      	adds	r3, #1
 800098a:	781a      	ldrb	r2, [r3, #0]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	785b      	ldrb	r3, [r3, #1]
        if (message_mappings[i].CLASS == UBXMessage->CLASS &&
 8000990:	429a      	cmp	r2, r3
 8000992:	d118      	bne.n	80009c6 <create_message_debug+0x7a>
            // Retrieve the corresponding get function and associated structure and variables
            get_func = message_mappings[i].get_func;
 8000994:	4911      	ldr	r1, [pc, #68]	@ (80009dc <create_message_debug+0x90>)
 8000996:	697a      	ldr	r2, [r7, #20]
 8000998:	4613      	mov	r3, r2
 800099a:	005b      	lsls	r3, r3, #1
 800099c:	4413      	add	r3, r2
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	440b      	add	r3, r1
 80009a2:	3304      	adds	r3, #4
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	613b      	str	r3, [r7, #16]
            structAssociate = message_mappings[i].structAssociate; //Pour l'utilisation dans d'autres fonctions
 80009a8:	490c      	ldr	r1, [pc, #48]	@ (80009dc <create_message_debug+0x90>)
 80009aa:	697a      	ldr	r2, [r7, #20]
 80009ac:	4613      	mov	r3, r2
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	4413      	add	r3, r2
 80009b2:	009b      	lsls	r3, r3, #2
 80009b4:	440b      	add	r3, r1
 80009b6:	3308      	adds	r3, #8
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	60fb      	str	r3, [r7, #12]
            get_func(UBXMessage,structAssociate);
 80009bc:	693b      	ldr	r3, [r7, #16]
 80009be:	68f9      	ldr	r1, [r7, #12]
 80009c0:	6878      	ldr	r0, [r7, #4]
 80009c2:	4798      	blx	r3

            //On adapte la taille du buffer pour les prochains messages
            //resizeBuffer(hGNSSCom.Rx,UBXMessage->len + 8);
            //On tronque le buffer
            // ->
            break;
 80009c4:	e006      	b.n	80009d4 <create_message_debug+0x88>
    for (int i = 0; i < sizeof(message_mappings) / sizeof(message_mappings[0]); i++) {
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	3301      	adds	r3, #1
 80009ca:	617b      	str	r3, [r7, #20]
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	2b02      	cmp	r3, #2
 80009d0:	d9c7      	bls.n	8000962 <create_message_debug+0x16>
        }

    }
}
 80009d2:	bf00      	nop
 80009d4:	bf00      	nop
 80009d6:	3718      	adds	r7, #24
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20000188 	.word	0x20000188

080009e0 <debug_UBX_NAV_TIMEUTC>:
 */

#include "GNSS/traductor.h"


void debug_UBX_NAV_TIMEUTC(UBXMessage_parsed* UBXMessage,UBX_NAV_TIMEUTC *structAssociate){
 80009e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80009e4:	b094      	sub	sp, #80	@ 0x50
 80009e6:	af0a      	add	r7, sp, #40	@ 0x28
 80009e8:	61f8      	str	r0, [r7, #28]
 80009ea:	61b9      	str	r1, [r7, #24]
	size_t offset = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	627b      	str	r3, [r7, #36]	@ 0x24
	ITM_Port32(31)=21;
 80009f0:	4b7b      	ldr	r3, [pc, #492]	@ (8000be0 <debug_UBX_NAV_TIMEUTC+0x200>)
 80009f2:	2215      	movs	r2, #21
 80009f4:	601a      	str	r2, [r3, #0]
	memcpy(&(structAssociate->iTOW), UBXMessage->load->buffer + offset, sizeof(structAssociate->iTOW));
 80009f6:	69bb      	ldr	r3, [r7, #24]
 80009f8:	69fa      	ldr	r2, [r7, #28]
 80009fa:	f8d2 20cc 	ldr.w	r2, [r2, #204]	@ 0xcc
 80009fe:	6811      	ldr	r1, [r2, #0]
 8000a00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a02:	440a      	add	r2, r1
 8000a04:	6812      	ldr	r2, [r2, #0]
 8000a06:	601a      	str	r2, [r3, #0]
	offset += sizeof(structAssociate->iTOW);
 8000a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a0a:	3304      	adds	r3, #4
 8000a0c:	627b      	str	r3, [r7, #36]	@ 0x24

	memcpy(&(structAssociate->tAcc), UBXMessage->load->buffer + offset, sizeof(structAssociate->tAcc));
 8000a0e:	69bb      	ldr	r3, [r7, #24]
 8000a10:	3304      	adds	r3, #4
 8000a12:	69fa      	ldr	r2, [r7, #28]
 8000a14:	f8d2 20cc 	ldr.w	r2, [r2, #204]	@ 0xcc
 8000a18:	6811      	ldr	r1, [r2, #0]
 8000a1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a1c:	440a      	add	r2, r1
 8000a1e:	6812      	ldr	r2, [r2, #0]
 8000a20:	601a      	str	r2, [r3, #0]
	offset += sizeof(structAssociate->tAcc);
 8000a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a24:	3304      	adds	r3, #4
 8000a26:	627b      	str	r3, [r7, #36]	@ 0x24

	memcpy(&(structAssociate->nano), UBXMessage->load->buffer + offset, sizeof(structAssociate->nano));
 8000a28:	69bb      	ldr	r3, [r7, #24]
 8000a2a:	3308      	adds	r3, #8
 8000a2c:	69fa      	ldr	r2, [r7, #28]
 8000a2e:	f8d2 20cc 	ldr.w	r2, [r2, #204]	@ 0xcc
 8000a32:	6811      	ldr	r1, [r2, #0]
 8000a34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a36:	440a      	add	r2, r1
 8000a38:	6812      	ldr	r2, [r2, #0]
 8000a3a:	601a      	str	r2, [r3, #0]
	offset += sizeof(structAssociate->nano);
 8000a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a3e:	3304      	adds	r3, #4
 8000a40:	627b      	str	r3, [r7, #36]	@ 0x24

	memcpy(&(structAssociate->year), UBXMessage->load->buffer + offset, sizeof(structAssociate->year));
 8000a42:	69bb      	ldr	r3, [r7, #24]
 8000a44:	330c      	adds	r3, #12
 8000a46:	69fa      	ldr	r2, [r7, #28]
 8000a48:	f8d2 20cc 	ldr.w	r2, [r2, #204]	@ 0xcc
 8000a4c:	6811      	ldr	r1, [r2, #0]
 8000a4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a50:	440a      	add	r2, r1
 8000a52:	8812      	ldrh	r2, [r2, #0]
 8000a54:	b292      	uxth	r2, r2
 8000a56:	801a      	strh	r2, [r3, #0]
	offset += sizeof(structAssociate->year);
 8000a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a5a:	3302      	adds	r3, #2
 8000a5c:	627b      	str	r3, [r7, #36]	@ 0x24

	memcpy(&(structAssociate->month), UBXMessage->load->buffer + offset, sizeof(structAssociate->month));
 8000a5e:	69bb      	ldr	r3, [r7, #24]
 8000a60:	330e      	adds	r3, #14
 8000a62:	69fa      	ldr	r2, [r7, #28]
 8000a64:	f8d2 20cc 	ldr.w	r2, [r2, #204]	@ 0xcc
 8000a68:	6811      	ldr	r1, [r2, #0]
 8000a6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a6c:	440a      	add	r2, r1
 8000a6e:	7812      	ldrb	r2, [r2, #0]
 8000a70:	701a      	strb	r2, [r3, #0]
	offset += sizeof(structAssociate->month);
 8000a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a74:	3301      	adds	r3, #1
 8000a76:	627b      	str	r3, [r7, #36]	@ 0x24

	memcpy(&(structAssociate->day), UBXMessage->load->buffer + offset, sizeof(structAssociate->day));
 8000a78:	69bb      	ldr	r3, [r7, #24]
 8000a7a:	330f      	adds	r3, #15
 8000a7c:	69fa      	ldr	r2, [r7, #28]
 8000a7e:	f8d2 20cc 	ldr.w	r2, [r2, #204]	@ 0xcc
 8000a82:	6811      	ldr	r1, [r2, #0]
 8000a84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a86:	440a      	add	r2, r1
 8000a88:	7812      	ldrb	r2, [r2, #0]
 8000a8a:	701a      	strb	r2, [r3, #0]
	offset += sizeof(structAssociate->day);
 8000a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a8e:	3301      	adds	r3, #1
 8000a90:	627b      	str	r3, [r7, #36]	@ 0x24

	memcpy(&(structAssociate->hour), UBXMessage->load->buffer + offset, sizeof(structAssociate->hour));
 8000a92:	69bb      	ldr	r3, [r7, #24]
 8000a94:	3310      	adds	r3, #16
 8000a96:	69fa      	ldr	r2, [r7, #28]
 8000a98:	f8d2 20cc 	ldr.w	r2, [r2, #204]	@ 0xcc
 8000a9c:	6811      	ldr	r1, [r2, #0]
 8000a9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000aa0:	440a      	add	r2, r1
 8000aa2:	7812      	ldrb	r2, [r2, #0]
 8000aa4:	701a      	strb	r2, [r3, #0]
	offset += sizeof(structAssociate->hour);
 8000aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	627b      	str	r3, [r7, #36]	@ 0x24

	memcpy(&(structAssociate->min), UBXMessage->load->buffer + offset, sizeof(structAssociate->min));
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	3311      	adds	r3, #17
 8000ab0:	69fa      	ldr	r2, [r7, #28]
 8000ab2:	f8d2 20cc 	ldr.w	r2, [r2, #204]	@ 0xcc
 8000ab6:	6811      	ldr	r1, [r2, #0]
 8000ab8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000aba:	440a      	add	r2, r1
 8000abc:	7812      	ldrb	r2, [r2, #0]
 8000abe:	701a      	strb	r2, [r3, #0]
	offset += sizeof(structAssociate->min);
 8000ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	627b      	str	r3, [r7, #36]	@ 0x24

	memcpy(&(structAssociate->sec), UBXMessage->load->buffer + offset, sizeof(structAssociate->sec));
 8000ac6:	69bb      	ldr	r3, [r7, #24]
 8000ac8:	3312      	adds	r3, #18
 8000aca:	69fa      	ldr	r2, [r7, #28]
 8000acc:	f8d2 20cc 	ldr.w	r2, [r2, #204]	@ 0xcc
 8000ad0:	6811      	ldr	r1, [r2, #0]
 8000ad2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ad4:	440a      	add	r2, r1
 8000ad6:	7812      	ldrb	r2, [r2, #0]
 8000ad8:	701a      	strb	r2, [r3, #0]
	offset += sizeof(structAssociate->sec);
 8000ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000adc:	3301      	adds	r3, #1
 8000ade:	627b      	str	r3, [r7, #36]	@ 0x24

	memcpy(&(structAssociate->valid), UBXMessage->load->buffer + offset, sizeof(structAssociate->valid));
 8000ae0:	69bb      	ldr	r3, [r7, #24]
 8000ae2:	3313      	adds	r3, #19
 8000ae4:	69fa      	ldr	r2, [r7, #28]
 8000ae6:	f8d2 20cc 	ldr.w	r2, [r2, #204]	@ 0xcc
 8000aea:	6811      	ldr	r1, [r2, #0]
 8000aec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000aee:	440a      	add	r2, r1
 8000af0:	7812      	ldrb	r2, [r2, #0]
 8000af2:	701a      	strb	r2, [r3, #0]
	offset += sizeof(structAssociate->valid);
 8000af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000af6:	3301      	adds	r3, #1
 8000af8:	627b      	str	r3, [r7, #36]	@ 0x24

	int len =snprintf(UBXMessage->bufferDebug,  (size_t)UART_DEBUG_BUFFER_SIZE,
 8000afa:	69fb      	ldr	r3, [r7, #28]
 8000afc:	1d1d      	adds	r5, r3, #4
			"iTOW [ms]: %u\r\n"
			"tAcc [ns]: %u\r\n"
			"Date [YYYY-MM-DD]: %u-%u-%u\r\n"
			"Time [HH:MM:SS]: %u:%u:%u - %u [ns]\r\n"
			"valid: %u\r\n",
			bytes_to_endian(structAssociate->iTOW,sizeof(structAssociate->iTOW),'l'),
 8000afe:	69bb      	ldr	r3, [r7, #24]
	int len =snprintf(UBXMessage->bufferDebug,  (size_t)UART_DEBUG_BUFFER_SIZE,
 8000b00:	226c      	movs	r2, #108	@ 0x6c
 8000b02:	2104      	movs	r1, #4
 8000b04:	4618      	mov	r0, r3
 8000b06:	f000 f927 	bl	8000d58 <bytes_to_endian>
 8000b0a:	4680      	mov	r8, r0
			bytes_to_endian(structAssociate->tAcc,sizeof(structAssociate->tAcc),'l'),
 8000b0c:	69bb      	ldr	r3, [r7, #24]
 8000b0e:	3304      	adds	r3, #4
	int len =snprintf(UBXMessage->bufferDebug,  (size_t)UART_DEBUG_BUFFER_SIZE,
 8000b10:	226c      	movs	r2, #108	@ 0x6c
 8000b12:	2104      	movs	r1, #4
 8000b14:	4618      	mov	r0, r3
 8000b16:	f000 f91f 	bl	8000d58 <bytes_to_endian>
 8000b1a:	4606      	mov	r6, r0
			bytes_to_endian(structAssociate->year,sizeof(structAssociate->year),'l'),
 8000b1c:	69bb      	ldr	r3, [r7, #24]
 8000b1e:	330c      	adds	r3, #12
	int len =snprintf(UBXMessage->bufferDebug,  (size_t)UART_DEBUG_BUFFER_SIZE,
 8000b20:	226c      	movs	r2, #108	@ 0x6c
 8000b22:	2102      	movs	r1, #2
 8000b24:	4618      	mov	r0, r3
 8000b26:	f000 f917 	bl	8000d58 <bytes_to_endian>
 8000b2a:	6178      	str	r0, [r7, #20]
			bytes_to_endian(structAssociate->month,sizeof(structAssociate->month),'l'),
 8000b2c:	69bb      	ldr	r3, [r7, #24]
 8000b2e:	330e      	adds	r3, #14
	int len =snprintf(UBXMessage->bufferDebug,  (size_t)UART_DEBUG_BUFFER_SIZE,
 8000b30:	226c      	movs	r2, #108	@ 0x6c
 8000b32:	2101      	movs	r1, #1
 8000b34:	4618      	mov	r0, r3
 8000b36:	f000 f90f 	bl	8000d58 <bytes_to_endian>
 8000b3a:	6138      	str	r0, [r7, #16]
			bytes_to_endian(structAssociate->day,sizeof(structAssociate->day),'l'),
 8000b3c:	69bb      	ldr	r3, [r7, #24]
 8000b3e:	330f      	adds	r3, #15
	int len =snprintf(UBXMessage->bufferDebug,  (size_t)UART_DEBUG_BUFFER_SIZE,
 8000b40:	226c      	movs	r2, #108	@ 0x6c
 8000b42:	2101      	movs	r1, #1
 8000b44:	4618      	mov	r0, r3
 8000b46:	f000 f907 	bl	8000d58 <bytes_to_endian>
 8000b4a:	60f8      	str	r0, [r7, #12]
			bytes_to_endian(structAssociate->hour,sizeof(structAssociate->hour),'l'),
 8000b4c:	69bb      	ldr	r3, [r7, #24]
 8000b4e:	3310      	adds	r3, #16
	int len =snprintf(UBXMessage->bufferDebug,  (size_t)UART_DEBUG_BUFFER_SIZE,
 8000b50:	226c      	movs	r2, #108	@ 0x6c
 8000b52:	2101      	movs	r1, #1
 8000b54:	4618      	mov	r0, r3
 8000b56:	f000 f8ff 	bl	8000d58 <bytes_to_endian>
 8000b5a:	60b8      	str	r0, [r7, #8]
			bytes_to_endian(structAssociate->min,sizeof(structAssociate->min),'l'),
 8000b5c:	69bb      	ldr	r3, [r7, #24]
 8000b5e:	3311      	adds	r3, #17
	int len =snprintf(UBXMessage->bufferDebug,  (size_t)UART_DEBUG_BUFFER_SIZE,
 8000b60:	226c      	movs	r2, #108	@ 0x6c
 8000b62:	2101      	movs	r1, #1
 8000b64:	4618      	mov	r0, r3
 8000b66:	f000 f8f7 	bl	8000d58 <bytes_to_endian>
 8000b6a:	6078      	str	r0, [r7, #4]
			bytes_to_endian(structAssociate->sec,sizeof(structAssociate->sec),'l'),
 8000b6c:	69bb      	ldr	r3, [r7, #24]
 8000b6e:	3312      	adds	r3, #18
	int len =snprintf(UBXMessage->bufferDebug,  (size_t)UART_DEBUG_BUFFER_SIZE,
 8000b70:	226c      	movs	r2, #108	@ 0x6c
 8000b72:	2101      	movs	r1, #1
 8000b74:	4618      	mov	r0, r3
 8000b76:	f000 f8ef 	bl	8000d58 <bytes_to_endian>
 8000b7a:	6038      	str	r0, [r7, #0]
			bytes_to_endian(structAssociate->nano,sizeof(structAssociate->nano),'l'),
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	3308      	adds	r3, #8
	int len =snprintf(UBXMessage->bufferDebug,  (size_t)UART_DEBUG_BUFFER_SIZE,
 8000b80:	226c      	movs	r2, #108	@ 0x6c
 8000b82:	2104      	movs	r1, #4
 8000b84:	4618      	mov	r0, r3
 8000b86:	f000 f8e7 	bl	8000d58 <bytes_to_endian>
 8000b8a:	4604      	mov	r4, r0
			bytes_to_endian(structAssociate->valid,sizeof(structAssociate->valid),'l')
 8000b8c:	69bb      	ldr	r3, [r7, #24]
 8000b8e:	3313      	adds	r3, #19
	int len =snprintf(UBXMessage->bufferDebug,  (size_t)UART_DEBUG_BUFFER_SIZE,
 8000b90:	226c      	movs	r2, #108	@ 0x6c
 8000b92:	2101      	movs	r1, #1
 8000b94:	4618      	mov	r0, r3
 8000b96:	f000 f8df 	bl	8000d58 <bytes_to_endian>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	9308      	str	r3, [sp, #32]
 8000b9e:	9407      	str	r4, [sp, #28]
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	9306      	str	r3, [sp, #24]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	9305      	str	r3, [sp, #20]
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	9304      	str	r3, [sp, #16]
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	9303      	str	r3, [sp, #12]
 8000bb0:	693b      	ldr	r3, [r7, #16]
 8000bb2:	9302      	str	r3, [sp, #8]
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	9301      	str	r3, [sp, #4]
 8000bb8:	9600      	str	r6, [sp, #0]
 8000bba:	4643      	mov	r3, r8
 8000bbc:	4a09      	ldr	r2, [pc, #36]	@ (8000be4 <debug_UBX_NAV_TIMEUTC+0x204>)
 8000bbe:	21c8      	movs	r1, #200	@ 0xc8
 8000bc0:	4628      	mov	r0, r5
 8000bc2:	f00f f973 	bl	800feac <sniprintf>
 8000bc6:	6238      	str	r0, [r7, #32]
	);

	fill_unuse_memory(UBXMessage,len);
 8000bc8:	6a39      	ldr	r1, [r7, #32]
 8000bca:	69f8      	ldr	r0, [r7, #28]
 8000bcc:	f000 f997 	bl	8000efe <fill_unuse_memory>
	ITM_Port32(31)=20;
 8000bd0:	4b03      	ldr	r3, [pc, #12]	@ (8000be0 <debug_UBX_NAV_TIMEUTC+0x200>)
 8000bd2:	2214      	movs	r2, #20
 8000bd4:	601a      	str	r2, [r3, #0]
}
 8000bd6:	bf00      	nop
 8000bd8:	3728      	adds	r7, #40	@ 0x28
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000be0:	e000007c 	.word	0xe000007c
 8000be4:	08010834 	.word	0x08010834

08000be8 <debug_SetVal>:

void debug_SetVal(UBXMessage_parsed* UBXMessage,UBX_CFG_SETVAL* structAssociate){
 8000be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bea:	b087      	sub	sp, #28
 8000bec:	af02      	add	r7, sp, #8
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	6039      	str	r1, [r7, #0]

	size_t offset = 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	60fb      	str	r3, [r7, #12]

	memcpy(&(structAssociate->version), UBXMessage->load->buffer + offset, sizeof(structAssociate->version));
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	687a      	ldr	r2, [r7, #4]
 8000bfa:	f8d2 20cc 	ldr.w	r2, [r2, #204]	@ 0xcc
 8000bfe:	6811      	ldr	r1, [r2, #0]
 8000c00:	68fa      	ldr	r2, [r7, #12]
 8000c02:	440a      	add	r2, r1
 8000c04:	7812      	ldrb	r2, [r2, #0]
 8000c06:	701a      	strb	r2, [r3, #0]
	offset += sizeof((structAssociate->version));
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	60fb      	str	r3, [r7, #12]

	memcpy(&(structAssociate->layers), UBXMessage->load->buffer + offset, sizeof(structAssociate->layers));
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	3301      	adds	r3, #1
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	f8d2 20cc 	ldr.w	r2, [r2, #204]	@ 0xcc
 8000c18:	6811      	ldr	r1, [r2, #0]
 8000c1a:	68fa      	ldr	r2, [r7, #12]
 8000c1c:	440a      	add	r2, r1
 8000c1e:	7812      	ldrb	r2, [r2, #0]
 8000c20:	701a      	strb	r2, [r3, #0]
	offset += sizeof((structAssociate->layers));
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	3301      	adds	r3, #1
 8000c26:	60fb      	str	r3, [r7, #12]

	offset += sizeof((structAssociate->reserved));
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	3302      	adds	r3, #2
 8000c2c:	60fb      	str	r3, [r7, #12]

	memcpy(&(structAssociate->cfgData), UBXMessage->load->buffer + offset, sizeof(structAssociate->cfgData));
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	1d18      	adds	r0, r3, #4
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	22c8      	movs	r2, #200	@ 0xc8
 8000c40:	4619      	mov	r1, r3
 8000c42:	f00f fa29 	bl	8010098 <memcpy>
	offset += sizeof((structAssociate->cfgData));
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	33c8      	adds	r3, #200	@ 0xc8
 8000c4a:	60fb      	str	r3, [r7, #12]
	//Diviser ici en flag
	//

	int len = snprintf(UBXMessage->bufferDebug, (size_t)UART_DEBUG_BUFFER_SIZE,
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	1d1c      	adds	r4, r3, #4
			"\r\n__debug_SetVal___\r\n"
			"version: %u\r\n"
			"layers: %u\r\n"
			"KeyId|Value: %s\r\n",
			bytes_to_endian(structAssociate->version,sizeof(structAssociate->version),'b'),
 8000c50:	683b      	ldr	r3, [r7, #0]
	int len = snprintf(UBXMessage->bufferDebug, (size_t)UART_DEBUG_BUFFER_SIZE,
 8000c52:	2262      	movs	r2, #98	@ 0x62
 8000c54:	2101      	movs	r1, #1
 8000c56:	4618      	mov	r0, r3
 8000c58:	f000 f87e 	bl	8000d58 <bytes_to_endian>
 8000c5c:	4606      	mov	r6, r0
			bytes_to_endian(structAssociate->layers,sizeof(structAssociate->layers),'l'),
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	3301      	adds	r3, #1
	int len = snprintf(UBXMessage->bufferDebug, (size_t)UART_DEBUG_BUFFER_SIZE,
 8000c62:	226c      	movs	r2, #108	@ 0x6c
 8000c64:	2101      	movs	r1, #1
 8000c66:	4618      	mov	r0, r3
 8000c68:	f000 f876 	bl	8000d58 <bytes_to_endian>
 8000c6c:	4605      	mov	r5, r0
			array_to_hex_string(structAssociate->cfgData,sizeof(structAssociate->cfgData))
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	3304      	adds	r3, #4
	int len = snprintf(UBXMessage->bufferDebug, (size_t)UART_DEBUG_BUFFER_SIZE,
 8000c72:	21c8      	movs	r1, #200	@ 0xc8
 8000c74:	4618      	mov	r0, r3
 8000c76:	f000 f959 	bl	8000f2c <array_to_hex_string>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	9301      	str	r3, [sp, #4]
 8000c7e:	9500      	str	r5, [sp, #0]
 8000c80:	4633      	mov	r3, r6
 8000c82:	4a07      	ldr	r2, [pc, #28]	@ (8000ca0 <debug_SetVal+0xb8>)
 8000c84:	21c8      	movs	r1, #200	@ 0xc8
 8000c86:	4620      	mov	r0, r4
 8000c88:	f00f f910 	bl	800feac <sniprintf>
 8000c8c:	60b8      	str	r0, [r7, #8]
	);
	fill_unuse_memory(UBXMessage,len);
 8000c8e:	68b9      	ldr	r1, [r7, #8]
 8000c90:	6878      	ldr	r0, [r7, #4]
 8000c92:	f000 f934 	bl	8000efe <fill_unuse_memory>
}
 8000c96:	bf00      	nop
 8000c98:	3714      	adds	r7, #20
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	080108c0 	.word	0x080108c0

08000ca4 <debug_PollMessage>:
void debug_PollMessage(UBXMessage_parsed* UBXMessage,UBX_CFG_MSG* structAssociate){
 8000ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ca6:	b087      	sub	sp, #28
 8000ca8:	af02      	add	r7, sp, #8
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	6039      	str	r1, [r7, #0]
	size_t offset = 0;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60fb      	str	r3, [r7, #12]

		memcpy(&(structAssociate->msgClass), UBXMessage->load->buffer + offset, sizeof(structAssociate->msgClass));
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	687a      	ldr	r2, [r7, #4]
 8000cb6:	f8d2 20cc 	ldr.w	r2, [r2, #204]	@ 0xcc
 8000cba:	6811      	ldr	r1, [r2, #0]
 8000cbc:	68fa      	ldr	r2, [r7, #12]
 8000cbe:	440a      	add	r2, r1
 8000cc0:	7812      	ldrb	r2, [r2, #0]
 8000cc2:	701a      	strb	r2, [r3, #0]
		offset += sizeof((structAssociate->msgClass));
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	60fb      	str	r3, [r7, #12]

		memcpy(&(structAssociate->msgID), UBXMessage->load->buffer + offset, sizeof(structAssociate->msgID));
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	687a      	ldr	r2, [r7, #4]
 8000cd0:	f8d2 20cc 	ldr.w	r2, [r2, #204]	@ 0xcc
 8000cd4:	6811      	ldr	r1, [r2, #0]
 8000cd6:	68fa      	ldr	r2, [r7, #12]
 8000cd8:	440a      	add	r2, r1
 8000cda:	7812      	ldrb	r2, [r2, #0]
 8000cdc:	701a      	strb	r2, [r3, #0]
		offset += sizeof((structAssociate->msgID));
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	60fb      	str	r3, [r7, #12]

		memcpy(&(structAssociate->rate), UBXMessage->load->buffer + offset, sizeof(structAssociate->rate));
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	3302      	adds	r3, #2
 8000ce8:	687a      	ldr	r2, [r7, #4]
 8000cea:	f8d2 20cc 	ldr.w	r2, [r2, #204]	@ 0xcc
 8000cee:	6811      	ldr	r1, [r2, #0]
 8000cf0:	68fa      	ldr	r2, [r7, #12]
 8000cf2:	440a      	add	r2, r1
 8000cf4:	7812      	ldrb	r2, [r2, #0]
 8000cf6:	701a      	strb	r2, [r3, #0]
		offset += sizeof((structAssociate->rate));
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	60fb      	str	r3, [r7, #12]

		int len = snprintf(UBXMessage->bufferDebug,  (size_t)UART_DEBUG_BUFFER_SIZE,
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	1d1c      	adds	r4, r3, #4
				"\r\n__debug_PollMsg___\r\n"
				"msgClass: %u\r\n"
				"msgID: %u\r\n"
				"rate :%u\r\n",
				bytes_to_endian(structAssociate->msgClass,sizeof(structAssociate->msgClass),'l'),
 8000d02:	683b      	ldr	r3, [r7, #0]
		int len = snprintf(UBXMessage->bufferDebug,  (size_t)UART_DEBUG_BUFFER_SIZE,
 8000d04:	226c      	movs	r2, #108	@ 0x6c
 8000d06:	2101      	movs	r1, #1
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f000 f825 	bl	8000d58 <bytes_to_endian>
 8000d0e:	4606      	mov	r6, r0
				bytes_to_endian(structAssociate->msgID,sizeof(structAssociate->msgID),'l'),
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	3301      	adds	r3, #1
		int len = snprintf(UBXMessage->bufferDebug,  (size_t)UART_DEBUG_BUFFER_SIZE,
 8000d14:	226c      	movs	r2, #108	@ 0x6c
 8000d16:	2101      	movs	r1, #1
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f000 f81d 	bl	8000d58 <bytes_to_endian>
 8000d1e:	4605      	mov	r5, r0
				bytes_to_endian(structAssociate->rate,sizeof(structAssociate->rate),'l')
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	3302      	adds	r3, #2
		int len = snprintf(UBXMessage->bufferDebug,  (size_t)UART_DEBUG_BUFFER_SIZE,
 8000d24:	226c      	movs	r2, #108	@ 0x6c
 8000d26:	2101      	movs	r1, #1
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f000 f815 	bl	8000d58 <bytes_to_endian>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	9301      	str	r3, [sp, #4]
 8000d32:	9500      	str	r5, [sp, #0]
 8000d34:	4633      	mov	r3, r6
 8000d36:	4a07      	ldr	r2, [pc, #28]	@ (8000d54 <debug_PollMessage+0xb0>)
 8000d38:	21c8      	movs	r1, #200	@ 0xc8
 8000d3a:	4620      	mov	r0, r4
 8000d3c:	f00f f8b6 	bl	800feac <sniprintf>
 8000d40:	60b8      	str	r0, [r7, #8]
		);
		fill_unuse_memory(UBXMessage,len);
 8000d42:	68b9      	ldr	r1, [r7, #8]
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f000 f8da 	bl	8000efe <fill_unuse_memory>

}
 8000d4a:	bf00      	nop
 8000d4c:	3714      	adds	r7, #20
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d52:	bf00      	nop
 8000d54:	08010900 	.word	0x08010900

08000d58 <bytes_to_endian>:




unsigned int bytes_to_endian(uint8_t attr[], size_t length, char type_endian) {
 8000d58:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000d5c:	b097      	sub	sp, #92	@ 0x5c
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8000d62:	63b9      	str	r1, [r7, #56]	@ 0x38
 8000d64:	4613      	mov	r3, r2
 8000d66:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint64_t result = 0;
 8000d6a:	f04f 0200 	mov.w	r2, #0
 8000d6e:	f04f 0300 	mov.w	r3, #0
 8000d72:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	if (type_endian == 'l') { // little-endian
 8000d76:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000d7a:	2b6c      	cmp	r3, #108	@ 0x6c
 8000d7c:	d136      	bne.n	8000dec <bytes_to_endian+0x94>
		for (size_t i = 0; i < length; ++i) {
 8000d7e:	2300      	movs	r3, #0
 8000d80:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000d82:	e02e      	b.n	8000de2 <bytes_to_endian+0x8a>
			result |= ((uint64_t)attr[i]) << (i * 8);
 8000d84:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000d86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000d88:	4413      	add	r3, r2
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	2200      	movs	r2, #0
 8000d90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000d92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000d94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000d96:	00db      	lsls	r3, r3, #3
 8000d98:	f1a3 0120 	sub.w	r1, r3, #32
 8000d9c:	f1c3 0220 	rsb	r2, r3, #32
 8000da0:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8000da4:	4628      	mov	r0, r5
 8000da6:	fa00 fb03 	lsl.w	fp, r0, r3
 8000daa:	4620      	mov	r0, r4
 8000dac:	fa00 f101 	lsl.w	r1, r0, r1
 8000db0:	ea4b 0b01 	orr.w	fp, fp, r1
 8000db4:	4621      	mov	r1, r4
 8000db6:	fa21 f202 	lsr.w	r2, r1, r2
 8000dba:	ea4b 0b02 	orr.w	fp, fp, r2
 8000dbe:	4622      	mov	r2, r4
 8000dc0:	fa02 fa03 	lsl.w	sl, r2, r3
 8000dc4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8000dc8:	ea42 010a 	orr.w	r1, r2, sl
 8000dcc:	6139      	str	r1, [r7, #16]
 8000dce:	ea43 030b 	orr.w	r3, r3, fp
 8000dd2:	617b      	str	r3, [r7, #20]
 8000dd4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8000dd8:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
		for (size_t i = 0; i < length; ++i) {
 8000ddc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000dde:	3301      	adds	r3, #1
 8000de0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000de2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000de6:	429a      	cmp	r2, r3
 8000de8:	d3cc      	bcc.n	8000d84 <bytes_to_endian+0x2c>
 8000dea:	e081      	b.n	8000ef0 <bytes_to_endian+0x198>
		}
	} else if (type_endian == 'b') { // big-endian
 8000dec:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000df0:	2b62      	cmp	r3, #98	@ 0x62
 8000df2:	d138      	bne.n	8000e66 <bytes_to_endian+0x10e>
		for (size_t i = 0; i < length; ++i) {
 8000df4:	2300      	movs	r3, #0
 8000df6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000df8:	e030      	b.n	8000e5c <bytes_to_endian+0x104>
			result |= ((uint64_t)attr[i]) << ((sizeof(uint64_t) - i - 1) * 8);
 8000dfa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000dfc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000dfe:	4413      	add	r3, r2
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	2200      	movs	r2, #0
 8000e06:	623b      	str	r3, [r7, #32]
 8000e08:	627a      	str	r2, [r7, #36]	@ 0x24
 8000e0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000e0c:	f1c3 0307 	rsb	r3, r3, #7
 8000e10:	00db      	lsls	r3, r3, #3
 8000e12:	f1a3 0120 	sub.w	r1, r3, #32
 8000e16:	f1c3 0220 	rsb	r2, r3, #32
 8000e1a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8000e1e:	4628      	mov	r0, r5
 8000e20:	fa00 f903 	lsl.w	r9, r0, r3
 8000e24:	4620      	mov	r0, r4
 8000e26:	fa00 f101 	lsl.w	r1, r0, r1
 8000e2a:	ea49 0901 	orr.w	r9, r9, r1
 8000e2e:	4621      	mov	r1, r4
 8000e30:	fa21 f202 	lsr.w	r2, r1, r2
 8000e34:	ea49 0902 	orr.w	r9, r9, r2
 8000e38:	4622      	mov	r2, r4
 8000e3a:	fa02 f803 	lsl.w	r8, r2, r3
 8000e3e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8000e42:	ea42 0108 	orr.w	r1, r2, r8
 8000e46:	60b9      	str	r1, [r7, #8]
 8000e48:	ea43 0309 	orr.w	r3, r3, r9
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8000e52:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
		for (size_t i = 0; i < length; ++i) {
 8000e56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000e58:	3301      	adds	r3, #1
 8000e5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000e5c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d3ca      	bcc.n	8000dfa <bytes_to_endian+0xa2>
 8000e64:	e044      	b.n	8000ef0 <bytes_to_endian+0x198>
		}
	}
	else if (type_endian == '2'){ //little-endiand 2's complements
 8000e66:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000e6a:	2b32      	cmp	r3, #50	@ 0x32
 8000e6c:	d140      	bne.n	8000ef0 <bytes_to_endian+0x198>
		if (attr[length - 1] & 0x80) { // Check if the most significant bit (MSB) is 1 (indicating negative number)
 8000e6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000e70:	3b01      	subs	r3, #1
 8000e72:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000e74:	4413      	add	r3, r2
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	b25b      	sxtb	r3, r3
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	da05      	bge.n	8000e8a <bytes_to_endian+0x132>
			result = -1; // Initialize result to all 1s for negative number
 8000e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8000e82:	f04f 33ff 	mov.w	r3, #4294967295
 8000e86:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
		}
		for (size_t i = 0; i < length; ++i) {
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8000e8e:	e02b      	b.n	8000ee8 <bytes_to_endian+0x190>
			result |= ((uint64_t)attr[i]) << (i * 8);
 8000e90:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000e92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000e94:	4413      	add	r3, r2
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	61bb      	str	r3, [r7, #24]
 8000e9e:	61fa      	str	r2, [r7, #28]
 8000ea0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000ea2:	00db      	lsls	r3, r3, #3
 8000ea4:	f1a3 0120 	sub.w	r1, r3, #32
 8000ea8:	f1c3 0220 	rsb	r2, r3, #32
 8000eac:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8000eb0:	4648      	mov	r0, r9
 8000eb2:	fa00 f503 	lsl.w	r5, r0, r3
 8000eb6:	4640      	mov	r0, r8
 8000eb8:	fa00 f101 	lsl.w	r1, r0, r1
 8000ebc:	430d      	orrs	r5, r1
 8000ebe:	4641      	mov	r1, r8
 8000ec0:	fa21 f202 	lsr.w	r2, r1, r2
 8000ec4:	4315      	orrs	r5, r2
 8000ec6:	4642      	mov	r2, r8
 8000ec8:	fa02 f403 	lsl.w	r4, r2, r3
 8000ecc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8000ed0:	ea42 0104 	orr.w	r1, r2, r4
 8000ed4:	6039      	str	r1, [r7, #0]
 8000ed6:	432b      	orrs	r3, r5
 8000ed8:	607b      	str	r3, [r7, #4]
 8000eda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ede:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
		for (size_t i = 0; i < length; ++i) {
 8000ee2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	647b      	str	r3, [r7, #68]	@ 0x44
 8000ee8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d3cf      	bcc.n	8000e90 <bytes_to_endian+0x138>
		}
	}
	return result;
 8000ef0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	375c      	adds	r7, #92	@ 0x5c
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000efc:	4770      	bx	lr

08000efe <fill_unuse_memory>:
void fill_unuse_memory(UBXMessage_parsed* UBXMessage,int len_use){
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b082      	sub	sp, #8
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
 8000f06:	6039      	str	r1, [r7, #0]
	if (len_use < sizeof(UBXMessage->bufferDebug)) {
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	2bc7      	cmp	r3, #199	@ 0xc7
 8000f0c:	d80a      	bhi.n	8000f24 <fill_unuse_memory+0x26>
		memset(UBXMessage->bufferDebug + len_use, '/', sizeof(UBXMessage->bufferDebug) - len_use);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	1d1a      	adds	r2, r3, #4
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	18d0      	adds	r0, r2, r3
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	212f      	movs	r1, #47	@ 0x2f
 8000f20:	f00f f818 	bl	800ff54 <memset>
	}
}
 8000f24:	bf00      	nop
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <array_to_hex_string>:
char* array_to_hex_string(const uint8_t* array, size_t length) {
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]
	// Taille maximale pour le buffer
	static char hex_string[UART_RX_BUFFER_SIZE * 2 + 1];
	for (size_t i = 0; i < length; ++i) {
 8000f36:	2300      	movs	r3, #0
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	e00e      	b.n	8000f5a <array_to_hex_string+0x2e>
		sprintf(hex_string + (i * 2), "%02x", array[i]);
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	4a0d      	ldr	r2, [pc, #52]	@ (8000f78 <array_to_hex_string+0x4c>)
 8000f42:	1898      	adds	r0, r3, r2
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	4413      	add	r3, r2
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	490b      	ldr	r1, [pc, #44]	@ (8000f7c <array_to_hex_string+0x50>)
 8000f50:	f00e ffe0 	bl	800ff14 <siprintf>
	for (size_t i = 0; i < length; ++i) {
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	3301      	adds	r3, #1
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	68fa      	ldr	r2, [r7, #12]
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	d3ec      	bcc.n	8000f3c <array_to_hex_string+0x10>
	}
	hex_string[length * 2] = '\0';
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	4a04      	ldr	r2, [pc, #16]	@ (8000f78 <array_to_hex_string+0x4c>)
 8000f68:	2100      	movs	r1, #0
 8000f6a:	54d1      	strb	r1, [r2, r3]
	return hex_string;
 8000f6c:	4b02      	ldr	r3, [pc, #8]	@ (8000f78 <array_to_hex_string+0x4c>)
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	200003f0 	.word	0x200003f0
 8000f7c:	0801093c 	.word	0x0801093c

08000f80 <LORACom_Init>:
#include "LORA/LORACom.h"
#include "LORA/RFM9x.h"
LORACom_HandleTypeDef hLORACom;

void LORACom_Init(SPI_HandleTypeDef* hspi,UART_HandleTypeDef* huartDebug)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
	hLORACom.hspi = hspi;
 8000f8a:	4a06      	ldr	r2, [pc, #24]	@ (8000fa4 <LORACom_Init+0x24>)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6013      	str	r3, [r2, #0]
	hLORACom.huartDebug = huartDebug;
 8000f90:	4a04      	ldr	r2, [pc, #16]	@ (8000fa4 <LORACom_Init+0x24>)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	6053      	str	r3, [r2, #4]

	LORACom_SPIActivate(&hLORACom);
 8000f96:	4803      	ldr	r0, [pc, #12]	@ (8000fa4 <LORACom_Init+0x24>)
 8000f98:	f000 f806 	bl	8000fa8 <LORACom_SPIActivate>
}
 8000f9c:	bf00      	nop
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20000584 	.word	0x20000584

08000fa8 <LORACom_SPIActivate>:
void LORACom_SPIActivate(LORACom_HandleTypeDef* hLORA){
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
	HAL_SPI_Receive_IT(hLORA->hspi, hLORA->RxBuffer, MAX_SPI_SIZE);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6818      	ldr	r0, [r3, #0]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3308      	adds	r3, #8
 8000fb8:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	f005 f975 	bl	80062ac <HAL_SPI_Receive_IT>
}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <LORA_Send>:
void LORA_Send(LORA_Header* header, uint8_t* payload){
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b0c2      	sub	sp, #264	@ 0x108
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000fd4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000fd8:	6018      	str	r0, [r3, #0]
 8000fda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000fde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000fe2:	6019      	str	r1, [r3, #0]
    uint8_t buffer[RFM9x_FIFO_SIZE];

    // Ajouter l'en-tête
    buffer[0] = header->recipient;
 8000fe4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000fe8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	781a      	ldrb	r2, [r3, #0]
 8000ff0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000ff4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000ff8:	701a      	strb	r2, [r3, #0]
    buffer[1] = header->sender;
 8000ffa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000ffe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	785a      	ldrb	r2, [r3, #1]
 8001006:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800100a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800100e:	705a      	strb	r2, [r3, #1]
    buffer[2] = header->type;
 8001010:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001014:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	789a      	ldrb	r2, [r3, #2]
 800101c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001020:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001024:	709a      	strb	r2, [r3, #2]
    buffer[3] = header->len_payload;
 8001026:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800102a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	78da      	ldrb	r2, [r3, #3]
 8001032:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001036:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800103a:	70da      	strb	r2, [r3, #3]

    // Ajouter la charge utile
    memcpy(buffer + 4 , payload, header->len_payload);
 800103c:	f107 0308 	add.w	r3, r7, #8
 8001040:	3304      	adds	r3, #4
 8001042:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8001046:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800104a:	6812      	ldr	r2, [r2, #0]
 800104c:	78d2      	ldrb	r2, [r2, #3]
 800104e:	4610      	mov	r0, r2
 8001050:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8001054:	f5a2 7184 	sub.w	r1, r2, #264	@ 0x108
 8001058:	4602      	mov	r2, r0
 800105a:	6809      	ldr	r1, [r1, #0]
 800105c:	4618      	mov	r0, r3
 800105e:	f00f f81b 	bl	8010098 <memcpy>
    RFM9x_Send(buffer, header->len_payload + 4);
 8001062:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001066:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	78db      	ldrb	r3, [r3, #3]
 800106e:	3304      	adds	r3, #4
 8001070:	b2da      	uxtb	r2, r3
 8001072:	f107 0308 	add.w	r3, r7, #8
 8001076:	4611      	mov	r1, r2
 8001078:	4618      	mov	r0, r3
 800107a:	f000 f895 	bl	80011a8 <RFM9x_Send>
    RFM9x_SetMode_Receive();
 800107e:	f000 f94e 	bl	800131e <RFM9x_SetMode_Receive>
}
 8001082:	bf00      	nop
 8001084:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <LORA_debug>:


void LORA_debug(char* flag, uint8_t* value)
{
 800108c:	b590      	push	{r4, r7, lr}
 800108e:	b0b7      	sub	sp, #220	@ 0xdc
 8001090:	af02      	add	r7, sp, #8
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
	char message[200];
	if (value != NULL){
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d009      	beq.n	80010b0 <LORA_debug+0x24>
		snprintf(message, sizeof(message),"%s: %s\r\n",flag,value);
 800109c:	f107 0008 	add.w	r0, r7, #8
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	4a10      	ldr	r2, [pc, #64]	@ (80010e8 <LORA_debug+0x5c>)
 80010a8:	21c8      	movs	r1, #200	@ 0xc8
 80010aa:	f00e feff 	bl	800feac <sniprintf>
 80010ae:	e006      	b.n	80010be <LORA_debug+0x32>
	}
	else {
		snprintf(message,sizeof(message), "%s\r\n",flag);
 80010b0:	f107 0008 	add.w	r0, r7, #8
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a0d      	ldr	r2, [pc, #52]	@ (80010ec <LORA_debug+0x60>)
 80010b8:	21c8      	movs	r1, #200	@ 0xc8
 80010ba:	f00e fef7 	bl	800feac <sniprintf>
	}
    HAL_UART_Transmit(hLORACom.huartDebug, (uint8_t*)message, strlen(message),HAL_MAX_DELAY);
 80010be:	4b0c      	ldr	r3, [pc, #48]	@ (80010f0 <LORA_debug+0x64>)
 80010c0:	685c      	ldr	r4, [r3, #4]
 80010c2:	f107 0308 	add.w	r3, r7, #8
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff f892 	bl	80001f0 <strlen>
 80010cc:	4603      	mov	r3, r0
 80010ce:	b29a      	uxth	r2, r3
 80010d0:	f107 0108 	add.w	r1, r7, #8
 80010d4:	f04f 33ff 	mov.w	r3, #4294967295
 80010d8:	4620      	mov	r0, r4
 80010da:	f006 f8eb 	bl	80072b4 <HAL_UART_Transmit>
}
 80010de:	bf00      	nop
 80010e0:	37d4      	adds	r7, #212	@ 0xd4
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd90      	pop	{r4, r7, pc}
 80010e6:	bf00      	nop
 80010e8:	08010944 	.word	0x08010944
 80010ec:	08010950 	.word	0x08010950
 80010f0:	20000584 	.word	0x20000584

080010f4 <RFM9x_Init>:
/* Private function prototypes -----------------------------------------------*/
/* User code -----------------------------------------------------------------*/


void RFM9x_Init( void )
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
	// Assert Reset low on the RFM9x
	RF_TestSpi();
 80010fa:	f000 f99d 	bl	8001438 <RF_TestSpi>
	HAL_GPIO_WritePin(RFM_RST_GPIO_Port, RFM_RST_Pin, GPIO_PIN_RESET);
 80010fe:	2200      	movs	r2, #0
 8001100:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001104:	4826      	ldr	r0, [pc, #152]	@ (80011a0 <RFM9x_Init+0xac>)
 8001106:	f002 ff4b 	bl	8003fa0 <HAL_GPIO_WritePin>
	//Delay_ms(10);
	HAL_GPIO_WritePin(RFM_RST_GPIO_Port, RFM_RST_Pin, GPIO_PIN_SET);
 800110a:	2201      	movs	r2, #1
 800110c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001110:	4823      	ldr	r0, [pc, #140]	@ (80011a0 <RFM9x_Init+0xac>)
 8001112:	f002 ff45 	bl	8003fa0 <HAL_GPIO_WritePin>
	//Delay_ms(10);
	RF_TestSpi();
 8001116:	f000 f98f 	bl	8001438 <RF_TestSpi>
	// Set sleep mode, so we can also set RFM9x mode:
	RFM9x_WriteReg(RFM9x_REG_01_OP_MODE, RFM9x_MODE_SLEEP | RFM9x_LONG_RANGE_MODE);
 800111a:	2180      	movs	r1, #128	@ 0x80
 800111c:	2001      	movs	r0, #1
 800111e:	f000 f94f 	bl	80013c0 <RFM9x_WriteReg>

	// Wait for sleep mode to take over from say, CAD
	//HDelay_ms(10);

	// Check we are in sleep mode, with RFM9x set
	if (RFM9x_ReadReg(RFM9x_REG_01_OP_MODE) != (RFM9x_MODE_SLEEP | RFM9x_LONG_RANGE_MODE))
 8001122:	2001      	movs	r0, #1
 8001124:	f000 f90c 	bl	8001340 <RFM9x_ReadReg>
	{
		//	TODO: Throw RFM9x init error
	}
	// Either Rx or Tx can use the entire 256 byte FIFO, but not at same time
	RFM9x_WriteReg(RFM9x_REG_0E_FIFO_TX_BASE_ADDR, 0x00);
 8001128:	2100      	movs	r1, #0
 800112a:	200e      	movs	r0, #14
 800112c:	f000 f948 	bl	80013c0 <RFM9x_WriteReg>
	RFM9x_WriteReg(RFM9x_REG_0F_FIFO_RX_BASE_ADDR, 0x80);
 8001130:	2180      	movs	r1, #128	@ 0x80
 8001132:	200f      	movs	r0, #15
 8001134:	f000 f944 	bl	80013c0 <RFM9x_WriteReg>

	// BW = 7: 125 kHz
	// CodingRate = 1:  4/5 code rate
	// ImplicitHeaderModeOn = 1, Implicit Header mode
	RFM9x_WriteReg(RFM9x_REG_1D_MODEM_CONFIG1, 0x72);
 8001138:	2172      	movs	r1, #114	@ 0x72
 800113a:	201d      	movs	r0, #29
 800113c:	f000 f940 	bl	80013c0 <RFM9x_WriteReg>
	// SymbTimeout[9:8] = 0
	//RFM9x_WriteReg(RFM9x_REG_1E_MODEM_CONFIG2, 0x74);

	// LowDataRateOptimize = 1 : Enabled; mandated for when the symbol length exceeds 16ms
	// AgcAutoOn = 0 : LNA gain set by register LnaGain
	RFM9x_WriteReg(RFM9x_REG_26_MODEM_CONFIG3, 0x04);
 8001140:	2104      	movs	r1, #4
 8001142:	2026      	movs	r0, #38	@ 0x26
 8001144:	f000 f93c 	bl	80013c0 <RFM9x_WriteReg>

	// Preamble Length = 16;
	RFM9x_WriteReg(RFM9x_REG_20_PREAMBLE_MSB, 0x00);
 8001148:	2100      	movs	r1, #0
 800114a:	2020      	movs	r0, #32
 800114c:	f000 f938 	bl	80013c0 <RFM9x_WriteReg>
	RFM9x_WriteReg(RFM9x_REG_21_PREAMBLE_LSB, 0x10);
 8001150:	2110      	movs	r1, #16
 8001152:	2021      	movs	r0, #33	@ 0x21
 8001154:	f000 f934 	bl	80013c0 <RFM9x_WriteReg>
	//   FRF[23:0] = Freq / Fstep
	//   Fstep = Fxosc / 2^^19
	// where:
	//   Freq = 433 MHz
	//   Fxosc = 32 MHz
	uint32_t frf = (uint32_t) ( 433000000.0 / (32000000.0 / 524288.0) ) ;
 8001158:	4b12      	ldr	r3, [pc, #72]	@ (80011a4 <RFM9x_Init+0xb0>)
 800115a:	607b      	str	r3, [r7, #4]
	RFM9x_WriteReg(RFM9x_REG_06_FRF_MSB, (frf >> 16) & 0xff);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	0c1b      	lsrs	r3, r3, #16
 8001160:	b2db      	uxtb	r3, r3
 8001162:	4619      	mov	r1, r3
 8001164:	2006      	movs	r0, #6
 8001166:	f000 f92b 	bl	80013c0 <RFM9x_WriteReg>
	RFM9x_WriteReg(RFM9x_REG_07_FRF_MID, (frf >> 8) & 0xff);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	0a1b      	lsrs	r3, r3, #8
 800116e:	b2db      	uxtb	r3, r3
 8001170:	4619      	mov	r1, r3
 8001172:	2007      	movs	r0, #7
 8001174:	f000 f924 	bl	80013c0 <RFM9x_WriteReg>
	RFM9x_WriteReg(RFM9x_REG_08_FRF_LSB, frf & 0xff);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	b2db      	uxtb	r3, r3
 800117c:	4619      	mov	r1, r3
 800117e:	2008      	movs	r0, #8
 8001180:	f000 f91e 	bl	80013c0 <RFM9x_WriteReg>

	// PaDac = 4 : Disables the +20dBm option on PA_BOOST pin
	RFM9x_WriteReg(RFM9x_REG_4D_PA_DAC, 0x04);
 8001184:	2104      	movs	r1, #4
 8001186:	204d      	movs	r0, #77	@ 0x4d
 8001188:	f000 f91a 	bl	80013c0 <RFM9x_WriteReg>

	// PaSelect = 1 : PA_BOOST pin (instead of RFO pin).
	// MaxPower = 0 : Pmax=10.8+0.6*MaxPower [dBm]
	// Output Power = 8 : 10dBm from Pout=17-(15-OutputPower) if PaSelect = 1. RadioHead says this is 13 dBm, though
	//RFM9x_WriteReg(RFM9x_REG_09_PA_CONFIG, 0x88);
	RFM9x_WriteReg(RFM9x_REG_09_PA_CONFIG, 0xcf);
 800118c:	21cf      	movs	r1, #207	@ 0xcf
 800118e:	2009      	movs	r0, #9
 8001190:	f000 f916 	bl	80013c0 <RFM9x_WriteReg>

	//On decide que le Lora est par defaut en mode ECOUTE
	RFM9x_SetMode_Receive();
 8001194:	f000 f8c3 	bl	800131e <RFM9x_SetMode_Receive>
}
 8001198:	bf00      	nop
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	48001000 	.word	0x48001000
 80011a4:	006c4000 	.word	0x006c4000

080011a8 <RFM9x_Send>:


void RFM9x_Send(uint8_t* data, uint8_t len)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	460b      	mov	r3, r1
 80011b2:	70fb      	strb	r3, [r7, #3]
		if (!waitCAD()){
			return 0;  // Check channel activity
		}
	}*/
	// Position at the beginning of the FIFO
	RFM9x_WriteReg(RFM9x_REG_0D_FIFO_ADDR_PTR, 0);
 80011b4:	2100      	movs	r1, #0
 80011b6:	200d      	movs	r0, #13
 80011b8:	f000 f902 	bl	80013c0 <RFM9x_WriteReg>

	// The payload data
	for(int i=0; i < len; i++)
 80011bc:	2300      	movs	r3, #0
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	e00a      	b.n	80011d8 <RFM9x_Send+0x30>
	{
		RFM9x_WriteReg(RFM9x_REG_00_FIFO, data[i]);
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	4413      	add	r3, r2
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	4619      	mov	r1, r3
 80011cc:	2000      	movs	r0, #0
 80011ce:	f000 f8f7 	bl	80013c0 <RFM9x_WriteReg>
	for(int i=0; i < len; i++)
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	3301      	adds	r3, #1
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	78fb      	ldrb	r3, [r7, #3]
 80011da:	68fa      	ldr	r2, [r7, #12]
 80011dc:	429a      	cmp	r2, r3
 80011de:	dbf0      	blt.n	80011c2 <RFM9x_Send+0x1a>
	}
	// The message length
	RFM9x_WriteReg(RFM9x_REG_22_PAYLOAD_LENGTH, len);
 80011e0:	78fb      	ldrb	r3, [r7, #3]
 80011e2:	4619      	mov	r1, r3
 80011e4:	2022      	movs	r0, #34	@ 0x22
 80011e6:	f000 f8eb 	bl	80013c0 <RFM9x_WriteReg>

	// Start the transmitter
	RFM9x_WriteReg(RFM9x_REG_01_OP_MODE, RFM9x_MODE_TX);
 80011ea:	2103      	movs	r1, #3
 80011ec:	2001      	movs	r0, #1
 80011ee:	f000 f8e7 	bl	80013c0 <RFM9x_WriteReg>
	vTaskDelay(5);
 80011f2:	2005      	movs	r0, #5
 80011f4:	f00a f822 	bl	800b23c <vTaskDelay>
	// Interrupt on DIO0 for TxDone
	RFM9x_WriteReg(RFM9x_REG_40_DIO_MAPPING1, 0x40);
 80011f8:	2140      	movs	r1, #64	@ 0x40
 80011fa:	2040      	movs	r0, #64	@ 0x40
 80011fc:	f000 f8e0 	bl	80013c0 <RFM9x_WriteReg>
	vTaskDelay(1);
 8001200:	2001      	movs	r0, #1
 8001202:	f00a f81b 	bl	800b23c <vTaskDelay>

	//LORA_debug_hexa("\r\nRFM9x SEND", (uint8_t*)data,len);
}
 8001206:	bf00      	nop
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <RFM9x_Receive>:
			return 0;
		}
	}
	return 1;  // No activity detected
}*/
void RFM9x_Receive(LORA_Message* LORA_Receive_Message){
 800120e:	b590      	push	{r4, r7, lr}
 8001210:	b087      	sub	sp, #28
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
	// Number of bytes received
	uint8_t start = RFM9x_ReadReg(RFM9x_REG_10_FIFO_RX_CURRENT_ADDR);
 8001216:	2010      	movs	r0, #16
 8001218:	f000 f892 	bl	8001340 <RFM9x_ReadReg>
 800121c:	4603      	mov	r3, r0
 800121e:	74fb      	strb	r3, [r7, #19]
	uint8_t len = RFM9x_ReadReg(RFM9x_REG_13_RX_NB_BYTES);
 8001220:	2013      	movs	r0, #19
 8001222:	f000 f88d 	bl	8001340 <RFM9x_ReadReg>
 8001226:	4603      	mov	r3, r0
 8001228:	74bb      	strb	r3, [r7, #18]

	if (len<4){
 800122a:	7cbb      	ldrb	r3, [r7, #18]
 800122c:	2b03      	cmp	r3, #3
 800122e:	d809      	bhi.n	8001244 <RFM9x_Receive+0x36>
		LORA_Receive_Message->RxNbrBytes=0;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2200      	movs	r2, #0
 8001234:	709a      	strb	r2, [r3, #2]
		RFM9x_WriteReg( RFM9x_REG_12_IRQ_FLAGS, 0xFF );
 8001236:	21ff      	movs	r1, #255	@ 0xff
 8001238:	2012      	movs	r0, #18
 800123a:	f000 f8c1 	bl	80013c0 <RFM9x_WriteReg>
		RFM9x_SetMode_Receive();
 800123e:	f000 f86e 	bl	800131e <RFM9x_SetMode_Receive>
		return;
 8001242:	e069      	b.n	8001318 <RFM9x_Receive+0x10a>
	}
	// get the read data
	if (len > (RFM9x_FIFO_SIZE)) len = RFM9x_FIFO_SIZE;

	RFM9x_WriteReg(RFM9x_REG_0D_FIFO_ADDR_PTR, start);
 8001244:	7cfb      	ldrb	r3, [r7, #19]
 8001246:	4619      	mov	r1, r3
 8001248:	200d      	movs	r0, #13
 800124a:	f000 f8b9 	bl	80013c0 <RFM9x_WriteReg>
	uint8_t* data = (uint8_t*)pvPortMalloc(RFM9x_FIFO_SIZE * sizeof(uint8_t));
 800124e:	20ff      	movs	r0, #255	@ 0xff
 8001250:	f00b fce4 	bl	800cc1c <pvPortMalloc>
 8001254:	60f8      	str	r0, [r7, #12]
	for (int i = 0; i < len; i++)
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
 800125a:	e00a      	b.n	8001272 <RFM9x_Receive+0x64>
	{
		data[i] = RFM9x_ReadReg(RFM9x_REG_00_FIFO);
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	68fa      	ldr	r2, [r7, #12]
 8001260:	18d4      	adds	r4, r2, r3
 8001262:	2000      	movs	r0, #0
 8001264:	f000 f86c 	bl	8001340 <RFM9x_ReadReg>
 8001268:	4603      	mov	r3, r0
 800126a:	7023      	strb	r3, [r4, #0]
	for (int i = 0; i < len; i++)
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	3301      	adds	r3, #1
 8001270:	617b      	str	r3, [r7, #20]
 8001272:	7cbb      	ldrb	r3, [r7, #18]
 8001274:	697a      	ldr	r2, [r7, #20]
 8001276:	429a      	cmp	r2, r3
 8001278:	dbf0      	blt.n	800125c <RFM9x_Receive+0x4e>
	}
	LORA_Receive_Message->IRQFlags=RFM9x_ReadReg(RFM9x_REG_12_IRQ_FLAGS);
 800127a:	2012      	movs	r0, #18
 800127c:	f000 f860 	bl	8001340 <RFM9x_ReadReg>
 8001280:	4603      	mov	r3, r0
 8001282:	461a      	mov	r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	701a      	strb	r2, [r3, #0]
	LORA_Receive_Message->RxCurrAddr=start;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	7cfa      	ldrb	r2, [r7, #19]
 800128c:	705a      	strb	r2, [r3, #1]
	LORA_Receive_Message->RxNbrBytes=len;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	7cba      	ldrb	r2, [r7, #18]
 8001292:	709a      	strb	r2, [r3, #2]
	LORA_Receive_Message->SNR=RFM9x_ReadReg(RFM9x_REG_19_PKT_SNR_VALUE);
 8001294:	2019      	movs	r0, #25
 8001296:	f000 f853 	bl	8001340 <RFM9x_ReadReg>
 800129a:	4603      	mov	r3, r0
 800129c:	461a      	mov	r2, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	70da      	strb	r2, [r3, #3]
	LORA_Receive_Message->RSSI = RFM9x_ReadReg(RFM9x_REG_1A_PKT_RSSI_VALUE);
 80012a2:	201a      	movs	r0, #26
 80012a4:	f000 f84c 	bl	8001340 <RFM9x_ReadReg>
 80012a8:	4603      	mov	r3, r0
 80012aa:	461a      	mov	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	711a      	strb	r2, [r3, #4]

	LORA_Receive_Message->header = (LORA_Header*)pvPortMalloc(sizeof(uint8_t)*sizeof(LORA_Header));
 80012b0:	2004      	movs	r0, #4
 80012b2:	f00b fcb3 	bl	800cc1c <pvPortMalloc>
 80012b6:	4602      	mov	r2, r0
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	609a      	str	r2, [r3, #8]
	LORA_Receive_Message->header->recipient=data[0];
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	68fa      	ldr	r2, [r7, #12]
 80012c2:	7812      	ldrb	r2, [r2, #0]
 80012c4:	701a      	strb	r2, [r3, #0]
	LORA_Receive_Message->header->sender=data[1];
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	68fa      	ldr	r2, [r7, #12]
 80012cc:	7852      	ldrb	r2, [r2, #1]
 80012ce:	705a      	strb	r2, [r3, #1]
	LORA_Receive_Message->header->type=data[2];
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	68fa      	ldr	r2, [r7, #12]
 80012d6:	7892      	ldrb	r2, [r2, #2]
 80012d8:	709a      	strb	r2, [r3, #2]
	LORA_Receive_Message->header->len_payload=data[3];
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	68fa      	ldr	r2, [r7, #12]
 80012e0:	78d2      	ldrb	r2, [r2, #3]
 80012e2:	70da      	strb	r2, [r3, #3]
	HAL_UART_Transmit(hGNSSCom.huartDebug, (uint8_t*)debug_msg, strlen(debug_msg), HAL_MAX_DELAY);

	sprintf(debug_msg, "Received Payload Length: %d\r\n", LORA_Receive_Message->header->len_payload);
	HAL_UART_Transmit(hGNSSCom.huartDebug, (uint8_t*)debug_msg, strlen(debug_msg), HAL_MAX_DELAY);
*/
	LORA_Receive_Message->payload = (uint8_t*)pvPortMalloc(sizeof(uint8_t)*(len-4));
 80012e4:	7cbb      	ldrb	r3, [r7, #18]
 80012e6:	3b04      	subs	r3, #4
 80012e8:	4618      	mov	r0, r3
 80012ea:	f00b fc97 	bl	800cc1c <pvPortMalloc>
 80012ee:	4602      	mov	r2, r0
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	60da      	str	r2, [r3, #12]
	memcpy(LORA_Receive_Message->payload, data+4, len-4);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	68d8      	ldr	r0, [r3, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	1d19      	adds	r1, r3, #4
 80012fc:	7cbb      	ldrb	r3, [r7, #18]
 80012fe:	3b04      	subs	r3, #4
 8001300:	461a      	mov	r2, r3
 8001302:	f00e fec9 	bl	8010098 <memcpy>
	vPortFree(data);
 8001306:	68f8      	ldr	r0, [r7, #12]
 8001308:	f00b fd6e 	bl	800cde8 <vPortFree>

	// clear all the IRQ flags
	RFM9x_WriteReg( RFM9x_REG_12_IRQ_FLAGS, 0xFF );
 800130c:	21ff      	movs	r1, #255	@ 0xff
 800130e:	2012      	movs	r0, #18
 8001310:	f000 f856 	bl	80013c0 <RFM9x_WriteReg>
	RFM9x_SetMode_Receive();
 8001314:	f000 f803 	bl	800131e <RFM9x_SetMode_Receive>
}
 8001318:	371c      	adds	r7, #28
 800131a:	46bd      	mov	sp, r7
 800131c:	bd90      	pop	{r4, r7, pc}

0800131e <RFM9x_SetMode_Receive>:
void RFM9x_SetMode_Receive(void){
 800131e:	b580      	push	{r7, lr}
 8001320:	af00      	add	r7, sp, #0
	// Set sleep mode, so we can also set RFM9x mode:
	RFM9x_WriteReg(RFM9x_REG_01_OP_MODE, RFM9x_MODE_SLEEP | RFM9x_LONG_RANGE_MODE);
 8001322:	2180      	movs	r1, #128	@ 0x80
 8001324:	2001      	movs	r0, #1
 8001326:	f000 f84b 	bl	80013c0 <RFM9x_WriteReg>
	// Configurer le mode réception continue
	RFM9x_WriteReg(RFM9x_REG_01_OP_MODE, RFM9x_MODE_RXCONTINUOUS);
 800132a:	2105      	movs	r1, #5
 800132c:	2001      	movs	r0, #1
 800132e:	f000 f847 	bl	80013c0 <RFM9x_WriteReg>
	// Configurer l'interruption sur DIO0 pour RxDone
	RFM9x_WriteReg(RFM9x_REG_40_DIO_MAPPING1, 0x00); // Interrupt on RxDone
 8001332:	2100      	movs	r1, #0
 8001334:	2040      	movs	r0, #64	@ 0x40
 8001336:	f000 f843 	bl	80013c0 <RFM9x_WriteReg>
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <RFM9x_ReadReg>:
	// set to clear all the IRQ bits
	RFM9x_WriteReg( RFM9x_REG_12_IRQ_FLAGS, 0xFF );
}

uint8_t RFM9x_ReadReg( uint8_t reg )
{
 8001340:	b590      	push	{r4, r7, lr}
 8001342:	b089      	sub	sp, #36	@ 0x24
 8001344:	af02      	add	r7, sp, #8
 8001346:	4603      	mov	r3, r0
 8001348:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status;

	// clear reg msb for read
	reg &= 0x7f;
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001350:	71fb      	strb	r3, [r7, #7]

	// buffers to transmit/receive
	uint8_t txData[] = {reg, 0x00};
 8001352:	79fb      	ldrb	r3, [r7, #7]
 8001354:	743b      	strb	r3, [r7, #16]
 8001356:	2300      	movs	r3, #0
 8001358:	747b      	strb	r3, [r7, #17]
	uint8_t rxData[] = {0x00, 0x00};
 800135a:	2300      	movs	r3, #0
 800135c:	81bb      	strh	r3, [r7, #12]
	const uint16_t	size = sizeof(txData);
 800135e:	2302      	movs	r3, #2
 8001360:	82bb      	strh	r3, [r7, #20]

	// default data value if error
	uint8_t data = 0x00;
 8001362:	2300      	movs	r3, #0
 8001364:	75fb      	strb	r3, [r7, #23]

	// Set nCS low (active)
	HAL_GPIO_WritePin(RFM_SPI_nCS_GPIO_Port, RFM_SPI_nCS_Pin, GPIO_PIN_RESET);
 8001366:	2200      	movs	r2, #0
 8001368:	2101      	movs	r1, #1
 800136a:	4812      	ldr	r0, [pc, #72]	@ (80013b4 <RFM9x_ReadReg+0x74>)
 800136c:	f002 fe18 	bl	8003fa0 <HAL_GPIO_WritePin>

	// write 8 bit reg and read 8 bit data
	status = HAL_SPI_TransmitReceive(hLORACom.hspi, txData, rxData, size, HAL_MAX_DELAY);
 8001370:	4b11      	ldr	r3, [pc, #68]	@ (80013b8 <RFM9x_ReadReg+0x78>)
 8001372:	6818      	ldr	r0, [r3, #0]
 8001374:	8abb      	ldrh	r3, [r7, #20]
 8001376:	f107 020c 	add.w	r2, r7, #12
 800137a:	f107 0110 	add.w	r1, r7, #16
 800137e:	f04f 34ff 	mov.w	r4, #4294967295
 8001382:	9400      	str	r4, [sp, #0]
 8001384:	f004 fd70 	bl	8005e68 <HAL_SPI_TransmitReceive>
 8001388:	4603      	mov	r3, r0
 800138a:	74fb      	strb	r3, [r7, #19]

	if (status == HAL_OK)
 800138c:	7cfb      	ldrb	r3, [r7, #19]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d102      	bne.n	8001398 <RFM9x_ReadReg+0x58>
	{
		//second byte is the register value
		data = rxData[1];
 8001392:	7b7b      	ldrb	r3, [r7, #13]
 8001394:	75fb      	strb	r3, [r7, #23]
 8001396:	e003      	b.n	80013a0 <RFM9x_ReadReg+0x60>
	}
	else
	{
		LORA_debug("*HAL_ERROR*", NULL);
 8001398:	2100      	movs	r1, #0
 800139a:	4808      	ldr	r0, [pc, #32]	@ (80013bc <RFM9x_ReadReg+0x7c>)
 800139c:	f7ff fe76 	bl	800108c <LORA_debug>

	}

	// Set nCS high (inactive)
	HAL_GPIO_WritePin(RFM_SPI_nCS_GPIO_Port, RFM_SPI_nCS_Pin, GPIO_PIN_SET);
 80013a0:	2201      	movs	r2, #1
 80013a2:	2101      	movs	r1, #1
 80013a4:	4803      	ldr	r0, [pc, #12]	@ (80013b4 <RFM9x_ReadReg+0x74>)
 80013a6:	f002 fdfb 	bl	8003fa0 <HAL_GPIO_WritePin>

	return data;
 80013aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	371c      	adds	r7, #28
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd90      	pop	{r4, r7, pc}
 80013b4:	48000c00 	.word	0x48000c00
 80013b8:	20000584 	.word	0x20000584
 80013bc:	0801096c 	.word	0x0801096c

080013c0 <RFM9x_WriteReg>:

void RFM9x_WriteReg( uint8_t reg, uint8_t data )
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	460a      	mov	r2, r1
 80013ca:	71fb      	strb	r3, [r7, #7]
 80013cc:	4613      	mov	r3, r2
 80013ce:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef status;

	//print2("RFM9x WR", reg, data );

	//set the reg msb for write
	reg |= 0x80;
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80013d6:	71fb      	strb	r3, [r7, #7]

	// Transmit buffer
	uint8_t txData[2] = {reg, data};
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	723b      	strb	r3, [r7, #8]
 80013dc:	79bb      	ldrb	r3, [r7, #6]
 80013de:	727b      	strb	r3, [r7, #9]
	const uint16_t size = sizeof(txData);
 80013e0:	2302      	movs	r3, #2
 80013e2:	81fb      	strh	r3, [r7, #14]


	// Set nCS low (active)
	HAL_GPIO_WritePin(RFM_SPI_nCS_GPIO_Port, RFM_SPI_nCS_Pin, GPIO_PIN_RESET);
 80013e4:	2200      	movs	r2, #0
 80013e6:	2101      	movs	r1, #1
 80013e8:	4810      	ldr	r0, [pc, #64]	@ (800142c <RFM9x_WriteReg+0x6c>)
 80013ea:	f002 fdd9 	bl	8003fa0 <HAL_GPIO_WritePin>

	// write 8 bit reg and read 8 bit data
	status = HAL_SPI_Transmit(hLORACom.hspi, txData, size, HAL_MAX_DELAY);
 80013ee:	4b10      	ldr	r3, [pc, #64]	@ (8001430 <RFM9x_WriteReg+0x70>)
 80013f0:	6818      	ldr	r0, [r3, #0]
 80013f2:	89fa      	ldrh	r2, [r7, #14]
 80013f4:	f107 0108 	add.w	r1, r7, #8
 80013f8:	f04f 33ff 	mov.w	r3, #4294967295
 80013fc:	f004 fbbf 	bl	8005b7e <HAL_SPI_Transmit>
 8001400:	4603      	mov	r3, r0
 8001402:	737b      	strb	r3, [r7, #13]

	if (status != HAL_OK)
 8001404:	7b7b      	ldrb	r3, [r7, #13]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d007      	beq.n	800141a <RFM9x_WriteReg+0x5a>
	{
		HAL_UART_Transmit(hLORACom.huartDebug, (uint8_t *) &"*HAL_ERROR*\r\n", 13, HAL_MAX_DELAY);
 800140a:	4b09      	ldr	r3, [pc, #36]	@ (8001430 <RFM9x_WriteReg+0x70>)
 800140c:	6858      	ldr	r0, [r3, #4]
 800140e:	f04f 33ff 	mov.w	r3, #4294967295
 8001412:	220d      	movs	r2, #13
 8001414:	4907      	ldr	r1, [pc, #28]	@ (8001434 <RFM9x_WriteReg+0x74>)
 8001416:	f005 ff4d 	bl	80072b4 <HAL_UART_Transmit>
	}

	//HACK: Wait for SPI transfer to complete
	//HAL_Delay(1);
	// Set nCS high (inactive)
	HAL_GPIO_WritePin(RFM_SPI_nCS_GPIO_Port, RFM_SPI_nCS_Pin, GPIO_PIN_SET);
 800141a:	2201      	movs	r2, #1
 800141c:	2101      	movs	r1, #1
 800141e:	4803      	ldr	r0, [pc, #12]	@ (800142c <RFM9x_WriteReg+0x6c>)
 8001420:	f002 fdbe 	bl	8003fa0 <HAL_GPIO_WritePin>
}
 8001424:	bf00      	nop
 8001426:	3710      	adds	r7, #16
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	48000c00 	.word	0x48000c00
 8001430:	20000584 	.word	0x20000584
 8001434:	08010978 	.word	0x08010978

08001438 <RF_TestSpi>:

	return;
}
// Debug Routines
void RF_TestSpi( void )
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t v;
	print("\r\n----TEST----");
 800143e:	4816      	ldr	r0, [pc, #88]	@ (8001498 <RF_TestSpi+0x60>)
 8001440:	f000 f858 	bl	80014f4 <print>
	for(i=0; i<8; i++)
 8001444:	2300      	movs	r3, #0
 8001446:	71fb      	strb	r3, [r7, #7]
 8001448:	e01b      	b.n	8001482 <RF_TestSpi+0x4a>
	{
		v = (1 << i);
 800144a:	79fb      	ldrb	r3, [r7, #7]
 800144c:	2201      	movs	r2, #1
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	71bb      	strb	r3, [r7, #6]
		print1("Write", v);
 8001454:	79bb      	ldrb	r3, [r7, #6]
 8001456:	4619      	mov	r1, r3
 8001458:	4810      	ldr	r0, [pc, #64]	@ (800149c <RF_TestSpi+0x64>)
 800145a:	f000 f825 	bl	80014a8 <print1>
		RFM9x_WriteReg(RFM9x_REG_40_DIO_MAPPING1, v);
 800145e:	79bb      	ldrb	r3, [r7, #6]
 8001460:	4619      	mov	r1, r3
 8001462:	2040      	movs	r0, #64	@ 0x40
 8001464:	f7ff ffac 	bl	80013c0 <RFM9x_WriteReg>
		//Delay_ms(1);
		v =RFM9x_ReadReg(RFM9x_REG_40_DIO_MAPPING1);
 8001468:	2040      	movs	r0, #64	@ 0x40
 800146a:	f7ff ff69 	bl	8001340 <RFM9x_ReadReg>
 800146e:	4603      	mov	r3, r0
 8001470:	71bb      	strb	r3, [r7, #6]
		print1("Read ", v);
 8001472:	79bb      	ldrb	r3, [r7, #6]
 8001474:	4619      	mov	r1, r3
 8001476:	480a      	ldr	r0, [pc, #40]	@ (80014a0 <RF_TestSpi+0x68>)
 8001478:	f000 f816 	bl	80014a8 <print1>
	for(i=0; i<8; i++)
 800147c:	79fb      	ldrb	r3, [r7, #7]
 800147e:	3301      	adds	r3, #1
 8001480:	71fb      	strb	r3, [r7, #7]
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	2b07      	cmp	r3, #7
 8001486:	d9e0      	bls.n	800144a <RF_TestSpi+0x12>
		//Delay_ms(1);
	}
	print("------------");
 8001488:	4806      	ldr	r0, [pc, #24]	@ (80014a4 <RF_TestSpi+0x6c>)
 800148a:	f000 f833 	bl	80014f4 <print>
	return;
 800148e:	bf00      	nop
}
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	08010988 	.word	0x08010988
 800149c:	08010998 	.word	0x08010998
 80014a0:	080109a0 	.word	0x080109a0
 80014a4:	080109a8 	.word	0x080109a8

080014a8 <print1>:
void print1(const char *text, uint8_t x)
{	char msg[50];
 80014a8:	b590      	push	{r4, r7, lr}
 80014aa:	b091      	sub	sp, #68	@ 0x44
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	460b      	mov	r3, r1
 80014b2:	70fb      	strb	r3, [r7, #3]
sprintf(msg, "%s 0x%02X\r\n", text, (int) x );
 80014b4:	78fb      	ldrb	r3, [r7, #3]
 80014b6:	f107 000c 	add.w	r0, r7, #12
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	490b      	ldr	r1, [pc, #44]	@ (80014ec <print1+0x44>)
 80014be:	f00e fd29 	bl	800ff14 <siprintf>
HAL_UART_Transmit(hLORACom.huartDebug, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);
 80014c2:	4b0b      	ldr	r3, [pc, #44]	@ (80014f0 <print1+0x48>)
 80014c4:	685c      	ldr	r4, [r3, #4]
 80014c6:	f107 030c 	add.w	r3, r7, #12
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7fe fe90 	bl	80001f0 <strlen>
 80014d0:	4603      	mov	r3, r0
 80014d2:	b29a      	uxth	r2, r3
 80014d4:	f107 010c 	add.w	r1, r7, #12
 80014d8:	f04f 33ff 	mov.w	r3, #4294967295
 80014dc:	4620      	mov	r0, r4
 80014de:	f005 fee9 	bl	80072b4 <HAL_UART_Transmit>
}
 80014e2:	bf00      	nop
 80014e4:	3744      	adds	r7, #68	@ 0x44
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd90      	pop	{r4, r7, pc}
 80014ea:	bf00      	nop
 80014ec:	080109b8 	.word	0x080109b8
 80014f0:	20000584 	.word	0x20000584

080014f4 <print>:
void print(const char *text)
{char msg[50];
 80014f4:	b590      	push	{r4, r7, lr}
 80014f6:	b091      	sub	sp, #68	@ 0x44
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
sprintf(msg, "%s\r\n", text );
 80014fc:	f107 030c 	add.w	r3, r7, #12
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	490c      	ldr	r1, [pc, #48]	@ (8001534 <print+0x40>)
 8001504:	4618      	mov	r0, r3
 8001506:	f00e fd05 	bl	800ff14 <siprintf>
HAL_UART_Transmit(hLORACom.huartDebug, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);
 800150a:	4b0b      	ldr	r3, [pc, #44]	@ (8001538 <print+0x44>)
 800150c:	685c      	ldr	r4, [r3, #4]
 800150e:	f107 030c 	add.w	r3, r7, #12
 8001512:	4618      	mov	r0, r3
 8001514:	f7fe fe6c 	bl	80001f0 <strlen>
 8001518:	4603      	mov	r3, r0
 800151a:	b29a      	uxth	r2, r3
 800151c:	f107 010c 	add.w	r1, r7, #12
 8001520:	f04f 33ff 	mov.w	r3, #4294967295
 8001524:	4620      	mov	r0, r4
 8001526:	f005 fec5 	bl	80072b4 <HAL_UART_Transmit>
}
 800152a:	bf00      	nop
 800152c:	3744      	adds	r7, #68	@ 0x44
 800152e:	46bd      	mov	sp, r7
 8001530:	bd90      	pop	{r4, r7, pc}
 8001532:	bf00      	nop
 8001534:	080109c4 	.word	0x080109c4
 8001538:	20000584 	.word	0x20000584

0800153c <commandToGNSS>:
 *      Author: romain.pace
 */

#include "RTOS_subfunctions/commandToGNSS.h"

void commandToGNSS(void){
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
	GNSStoPollQ_t transmitToGnss;
	xQueueReceive(GNSS_toPollHandle, &transmitToGnss, osWaitForever);
 8001542:	4b1a      	ldr	r3, [pc, #104]	@ (80015ac <commandToGNSS+0x70>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	1d39      	adds	r1, r7, #4
 8001548:	f04f 32ff 	mov.w	r2, #4294967295
 800154c:	4618      	mov	r0, r3
 800154e:	f008 fdad 	bl	800a0ac <xQueueReceive>
	//Attendre avant d'envoyer le message
	osSemaphoreWait(GNSS_UART_AccessHandle, osWaitForever);
 8001552:	4b17      	ldr	r3, [pc, #92]	@ (80015b0 <commandToGNSS+0x74>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f04f 31ff 	mov.w	r1, #4294967295
 800155a:	4618      	mov	r0, r3
 800155c:	f007 fea6 	bl	80092ac <osSemaphoreWait>
	while(hGNSSCom.huart->gState != HAL_UART_STATE_READY
 8001560:	e002      	b.n	8001568 <commandToGNSS+0x2c>
			){
		vTaskDelay(1);}
 8001562:	2001      	movs	r0, #1
 8001564:	f009 fe6a 	bl	800b23c <vTaskDelay>
	while(hGNSSCom.huart->gState != HAL_UART_STATE_READY
 8001568:	4b12      	ldr	r3, [pc, #72]	@ (80015b4 <commandToGNSS+0x78>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800156e:	2b20      	cmp	r3, #32
 8001570:	d1f7      	bne.n	8001562 <commandToGNSS+0x26>
	HAL_StatusTypeDef statut = HAL_UART_Transmit(hGNSSCom.huart, transmitToGnss.command, transmitToGnss.size,HAL_MAX_DELAY);
 8001572:	4b10      	ldr	r3, [pc, #64]	@ (80015b4 <commandToGNSS+0x78>)
 8001574:	6818      	ldr	r0, [r3, #0]
 8001576:	6879      	ldr	r1, [r7, #4]
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	b29a      	uxth	r2, r3
 800157c:	f04f 33ff 	mov.w	r3, #4294967295
 8001580:	f005 fe98 	bl	80072b4 <HAL_UART_Transmit>
 8001584:	4603      	mov	r3, r0
 8001586:	73fb      	strb	r3, [r7, #15]
	ITM_Port32(28)=333;
 8001588:	4b0b      	ldr	r3, [pc, #44]	@ (80015b8 <commandToGNSS+0x7c>)
 800158a:	f240 124d 	movw	r2, #333	@ 0x14d
 800158e:	601a      	str	r2, [r3, #0]
	if (statut!= HAL_OK){
 8001590:	7bfb      	ldrb	r3, [r7, #15]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <commandToGNSS+0x5e>
		Error_Handler();
 8001596:	f001 f9ab 	bl	80028f0 <Error_Handler>
	}
	osSemaphoreRelease(GNSS_UART_AccessHandle);
 800159a:	4b05      	ldr	r3, [pc, #20]	@ (80015b0 <commandToGNSS+0x74>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4618      	mov	r0, r3
 80015a0:	f007 fed2 	bl	8009348 <osSemaphoreRelease>
}
 80015a4:	bf00      	nop
 80015a6:	3710      	adds	r7, #16
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20000920 	.word	0x20000920
 80015b0:	20000930 	.word	0x20000930
 80015b4:	20000238 	.word	0x20000238
 80015b8:	e0000070 	.word	0xe0000070

080015bc <request_commandToGNSS>:
void request_commandToGNSS(GNSStoPollQ_t transmitToGnss){
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	463b      	mov	r3, r7
 80015c4:	e883 0003 	stmia.w	r3, {r0, r1}
	xQueueSendToBack(GNSS_toPollHandle,&transmitToGnss,100);
 80015c8:	4b06      	ldr	r3, [pc, #24]	@ (80015e4 <request_commandToGNSS+0x28>)
 80015ca:	6818      	ldr	r0, [r3, #0]
 80015cc:	4639      	mov	r1, r7
 80015ce:	2300      	movs	r3, #0
 80015d0:	2264      	movs	r2, #100	@ 0x64
 80015d2:	f008 f9f1 	bl	80099b8 <xQueueGenericSend>
	ITM_Port32(28)=222;
 80015d6:	4b04      	ldr	r3, [pc, #16]	@ (80015e8 <request_commandToGNSS+0x2c>)
 80015d8:	22de      	movs	r2, #222	@ 0xde
 80015da:	601a      	str	r2, [r3, #0]
}
 80015dc:	bf00      	nop
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20000920 	.word	0x20000920
 80015e8:	e0000070 	.word	0xe0000070

080015ec <debug>:
 *      Author: romain.pace
 */

#include "RTOS_subfunctions/debug.h"

void debug(void){
 80015ec:	b590      	push	{r4, r7, lr}
 80015ee:	f2ad 4d14 	subw	sp, sp, #1044	@ 0x414
 80015f2:	af02      	add	r7, sp, #8
	char buffer[1024];
	UARTdebugQ_t UARTdebug;

	xQueueReceive(UARTdebugHandle, &UARTdebug, osWaitForever);
 80015f4:	4b21      	ldr	r3, [pc, #132]	@ (800167c <debug+0x90>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4639      	mov	r1, r7
 80015fa:	f04f 32ff 	mov.w	r2, #4294967295
 80015fe:	4618      	mov	r0, r3
 8001600:	f008 fd54 	bl	800a0ac <xQueueReceive>

	snprintf(buffer, sizeof(buffer), "%s%s%s", UARTdebug.color, UARTdebug.message, ANSI_COLOR_RESET);
 8001604:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8001608:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 800160c:	685a      	ldr	r2, [r3, #4]
 800160e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8001612:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f107 0008 	add.w	r0, r7, #8
 800161c:	4918      	ldr	r1, [pc, #96]	@ (8001680 <debug+0x94>)
 800161e:	9101      	str	r1, [sp, #4]
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	4613      	mov	r3, r2
 8001624:	4a17      	ldr	r2, [pc, #92]	@ (8001684 <debug+0x98>)
 8001626:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800162a:	f00e fc3f 	bl	800feac <sniprintf>
	HAL_UART_Transmit_IT(hGNSSCom.huartDebug, (uint8_t*)buffer, strlen(buffer));
 800162e:	4b16      	ldr	r3, [pc, #88]	@ (8001688 <debug+0x9c>)
 8001630:	685c      	ldr	r4, [r3, #4]
 8001632:	f107 0308 	add.w	r3, r7, #8
 8001636:	4618      	mov	r0, r3
 8001638:	f7fe fdda 	bl	80001f0 <strlen>
 800163c:	4603      	mov	r3, r0
 800163e:	b29a      	uxth	r2, r3
 8001640:	f107 0308 	add.w	r3, r7, #8
 8001644:	4619      	mov	r1, r3
 8001646:	4620      	mov	r0, r4
 8001648:	f005 febe 	bl	80073c8 <HAL_UART_Transmit_IT>
	vPortFree(UARTdebug.message);
 800164c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8001650:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4618      	mov	r0, r3
 8001658:	f00b fbc6 	bl	800cde8 <vPortFree>
	vPortFree(UARTdebug.color);
 800165c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8001660:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	4618      	mov	r0, r3
 8001668:	f00b fbbe 	bl	800cde8 <vPortFree>
	vTaskDelay(1);
 800166c:	2001      	movs	r0, #1
 800166e:	f009 fde5 	bl	800b23c <vTaskDelay>

}
 8001672:	bf00      	nop
 8001674:	f207 470c 	addw	r7, r7, #1036	@ 0x40c
 8001678:	46bd      	mov	sp, r7
 800167a:	bd90      	pop	{r4, r7, pc}
 800167c:	2000091c 	.word	0x2000091c
 8001680:	080109d4 	.word	0x080109d4
 8001684:	080109cc 	.word	0x080109cc
 8001688:	20000238 	.word	0x20000238

0800168c <UART_Transmit_With_Color>:

void UART_Transmit_With_Color(char *data, char *color) {
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
	UARTdebugQ_t UARTdebug;

	// Allouer de la mémoire pour le message et la couleur
	UARTdebug.message = pvPortMalloc(strlen(data) + 1);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f7fe fdaa 	bl	80001f0 <strlen>
 800169c:	4603      	mov	r3, r0
 800169e:	3301      	adds	r3, #1
 80016a0:	4618      	mov	r0, r3
 80016a2:	f00b fabb 	bl	800cc1c <pvPortMalloc>
 80016a6:	4603      	mov	r3, r0
 80016a8:	60bb      	str	r3, [r7, #8]
	UARTdebug.color = pvPortMalloc(strlen(color) + 1);
 80016aa:	6838      	ldr	r0, [r7, #0]
 80016ac:	f7fe fda0 	bl	80001f0 <strlen>
 80016b0:	4603      	mov	r3, r0
 80016b2:	3301      	adds	r3, #1
 80016b4:	4618      	mov	r0, r3
 80016b6:	f00b fab1 	bl	800cc1c <pvPortMalloc>
 80016ba:	4603      	mov	r3, r0
 80016bc:	60fb      	str	r3, [r7, #12]

	if (UARTdebug.message != NULL && UARTdebug.color != NULL) {
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d016      	beq.n	80016f2 <UART_Transmit_With_Color+0x66>
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d013      	beq.n	80016f2 <UART_Transmit_With_Color+0x66>
		// Copier les données
		strcpy(UARTdebug.message, data);
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	6879      	ldr	r1, [r7, #4]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f00e fcda 	bl	8010088 <strcpy>
		strcpy(UARTdebug.color, color);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	6839      	ldr	r1, [r7, #0]
 80016d8:	4618      	mov	r0, r3
 80016da:	f00e fcd5 	bl	8010088 <strcpy>

		xQueueSendToBack(UARTdebugHandle, &UARTdebug, osWaitForever);
 80016de:	4b10      	ldr	r3, [pc, #64]	@ (8001720 <UART_Transmit_With_Color+0x94>)
 80016e0:	6818      	ldr	r0, [r3, #0]
 80016e2:	f107 0108 	add.w	r1, r7, #8
 80016e6:	2300      	movs	r3, #0
 80016e8:	f04f 32ff 	mov.w	r2, #4294967295
 80016ec:	f008 f964 	bl	80099b8 <xQueueGenericSend>
		if (UARTdebug.color == NULL) {
			vPortFree(UARTdebug.color);
			Error_Handler();
		}
	}
}
 80016f0:	e011      	b.n	8001716 <UART_Transmit_With_Color+0x8a>
		if (UARTdebug.message == NULL) {
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d105      	bne.n	8001704 <UART_Transmit_With_Color+0x78>
			vPortFree(UARTdebug.message);
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f00b fb74 	bl	800cde8 <vPortFree>
			Error_Handler();
 8001700:	f001 f8f6 	bl	80028f0 <Error_Handler>
		if (UARTdebug.color == NULL) {
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d105      	bne.n	8001716 <UART_Transmit_With_Color+0x8a>
			vPortFree(UARTdebug.color);
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	4618      	mov	r0, r3
 800170e:	f00b fb6b 	bl	800cde8 <vPortFree>
			Error_Handler();
 8001712:	f001 f8ed 	bl	80028f0 <Error_Handler>
}
 8001716:	bf00      	nop
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	2000091c 	.word	0x2000091c

08001724 <uint8_array_to_hex_string>:
void uint8_array_to_hex_string(char* hexString, uint8_t* array, size_t len) {
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
	// Allouer de la mémoire pour la chaîne hexadécimale (2 caractères par octet + 1 pour le '\0')

	// Parcourir le tableau et convertir chaque octet en hexadécimal
	for (size_t i = 0; i < len; i++) {
 8001730:	2300      	movs	r3, #0
 8001732:	617b      	str	r3, [r7, #20]
 8001734:	e00e      	b.n	8001754 <uint8_array_to_hex_string+0x30>
		snprintf(hexString + (i * 2), 3, "%02X", array[i]);
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	68fa      	ldr	r2, [r7, #12]
 800173c:	18d0      	adds	r0, r2, r3
 800173e:	68ba      	ldr	r2, [r7, #8]
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	4413      	add	r3, r2
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	4a0a      	ldr	r2, [pc, #40]	@ (8001770 <uint8_array_to_hex_string+0x4c>)
 8001748:	2103      	movs	r1, #3
 800174a:	f00e fbaf 	bl	800feac <sniprintf>
	for (size_t i = 0; i < len; i++) {
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	3301      	adds	r3, #1
 8001752:	617b      	str	r3, [r7, #20]
 8001754:	697a      	ldr	r2, [r7, #20]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	429a      	cmp	r2, r3
 800175a:	d3ec      	bcc.n	8001736 <uint8_array_to_hex_string+0x12>
	}

	// Ajouter le caractère de fin de chaîne
	hexString[len * 2] = '\0';
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	68fa      	ldr	r2, [r7, #12]
 8001762:	4413      	add	r3, r2
 8001764:	2200      	movs	r2, #0
 8001766:	701a      	strb	r2, [r3, #0]

}
 8001768:	bf00      	nop
 800176a:	3718      	adds	r7, #24
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	080109dc 	.word	0x080109dc

08001774 <fakeuseSD>:
#include "RTOS_subfunctions/fakeuseSD.h"

GNSSReturnQ_t gnssReturn;
GNSStoPollQ_t pollTimeUTC = {pollUBXTimeUTC, sizeof(pollUBXTimeUTC)};

void fakeuseSD(void){
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af00      	add	r7, sp, #0
	GNSSRequestQ_t requestFromSD = {
			.Request_TIME = xTaskGetTickCount(),
 800177a:	f009 fec5 	bl	800b508 <xTaskGetTickCount>
 800177e:	4603      	mov	r3, r0
	GNSSRequestQ_t requestFromSD = {
 8001780:	603b      	str	r3, [r7, #0]
 8001782:	2301      	movs	r3, #1
 8001784:	713b      	strb	r3, [r7, #4]
 8001786:	2321      	movs	r3, #33	@ 0x21
 8001788:	717b      	strb	r3, [r7, #5]
 800178a:	4b43      	ldr	r3, [pc, #268]	@ (8001898 <fakeuseSD+0x124>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	60bb      	str	r3, [r7, #8]
 8001790:	4b42      	ldr	r3, [pc, #264]	@ (800189c <fakeuseSD+0x128>)
 8001792:	60fb      	str	r3, [r7, #12]
			.applicantSemaphore = SD_Access_GNSS_ReturnHandle,
			.applicantName = "SD_REQUEST"
	};


	xQueueSendToBack(GNSS_RequestHandle,&requestFromSD,osWaitForever);
 8001794:	4b42      	ldr	r3, [pc, #264]	@ (80018a0 <fakeuseSD+0x12c>)
 8001796:	6818      	ldr	r0, [r3, #0]
 8001798:	4639      	mov	r1, r7
 800179a:	2300      	movs	r3, #0
 800179c:	f04f 32ff 	mov.w	r2, #4294967295
 80017a0:	f008 f90a 	bl	80099b8 <xQueueGenericSend>
	UART_Transmit_With_Color("\r\t\t\n...UBXMessage --FROM-- SD Polling...\r\n",ANSI_COLOR_YELLOW);
 80017a4:	493f      	ldr	r1, [pc, #252]	@ (80018a4 <fakeuseSD+0x130>)
 80017a6:	4840      	ldr	r0, [pc, #256]	@ (80018a8 <fakeuseSD+0x134>)
 80017a8:	f7ff ff70 	bl	800168c <UART_Transmit_With_Color>

	ITM_Port32(29)=111;
 80017ac:	4b3f      	ldr	r3, [pc, #252]	@ (80018ac <fakeuseSD+0x138>)
 80017ae:	226f      	movs	r2, #111	@ 0x6f
 80017b0:	601a      	str	r2, [r3, #0]

	request_commandToGNSS(pollTimeUTC);
 80017b2:	4b3f      	ldr	r3, [pc, #252]	@ (80018b0 <fakeuseSD+0x13c>)
 80017b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80017b8:	f7ff ff00 	bl	80015bc <request_commandToGNSS>

	ITM_Port32(29)=444;
 80017bc:	4b3b      	ldr	r3, [pc, #236]	@ (80018ac <fakeuseSD+0x138>)
 80017be:	f44f 72de 	mov.w	r2, #444	@ 0x1bc
 80017c2:	601a      	str	r2, [r3, #0]

	int32_t eventSD = osSemaphoreWait(SD_Access_GNSS_ReturnHandle, 100);
 80017c4:	4b34      	ldr	r3, [pc, #208]	@ (8001898 <fakeuseSD+0x124>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2164      	movs	r1, #100	@ 0x64
 80017ca:	4618      	mov	r0, r3
 80017cc:	f007 fd6e 	bl	80092ac <osSemaphoreWait>
 80017d0:	6178      	str	r0, [r7, #20]

	if (eventSD == osOK){
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d153      	bne.n	8001880 <fakeuseSD+0x10c>
		xQueueReceive(GNSS_ReturnHandle, &gnssReturn, portMAX_DELAY);
 80017d8:	4b36      	ldr	r3, [pc, #216]	@ (80018b4 <fakeuseSD+0x140>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f04f 32ff 	mov.w	r2, #4294967295
 80017e0:	4935      	ldr	r1, [pc, #212]	@ (80018b8 <fakeuseSD+0x144>)
 80017e2:	4618      	mov	r0, r3
 80017e4:	f008 fc62 	bl	800a0ac <xQueueReceive>
		ITM_Port32(29)=555;
 80017e8:	4b30      	ldr	r3, [pc, #192]	@ (80018ac <fakeuseSD+0x138>)
 80017ea:	f240 222b 	movw	r2, #555	@ 0x22b
 80017ee:	601a      	str	r2, [r3, #0]
		char* hexString_SD = (char*)pvPortMalloc(gnssReturn.bufferReturn->size * 2 + 1);
 80017f0:	4b31      	ldr	r3, [pc, #196]	@ (80018b8 <fakeuseSD+0x144>)
 80017f2:	691b      	ldr	r3, [r3, #16]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	3301      	adds	r3, #1
 80017fa:	4618      	mov	r0, r3
 80017fc:	f00b fa0e 	bl	800cc1c <pvPortMalloc>
 8001800:	6138      	str	r0, [r7, #16]
		if (hexString_SD == NULL) Error_Handler();
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d101      	bne.n	800180c <fakeuseSD+0x98>
 8001808:	f001 f872 	bl	80028f0 <Error_Handler>

		if (gnssReturn.statut == OK)
 800180c:	4b2a      	ldr	r3, [pc, #168]	@ (80018b8 <fakeuseSD+0x144>)
 800180e:	7b1b      	ldrb	r3, [r3, #12]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d116      	bne.n	8001842 <fakeuseSD+0xce>
		{
			UART_Transmit_With_Color("\n\r\t\t...UBXMessage --SEND-- SD Polling...",ANSI_COLOR_YELLOW);
 8001814:	4923      	ldr	r1, [pc, #140]	@ (80018a4 <fakeuseSD+0x130>)
 8001816:	4829      	ldr	r0, [pc, #164]	@ (80018bc <fakeuseSD+0x148>)
 8001818:	f7ff ff38 	bl	800168c <UART_Transmit_With_Color>
			UART_Transmit_With_Color("\t---SUCCESS---\r\n",ANSI_COLOR_GREEN);
 800181c:	4928      	ldr	r1, [pc, #160]	@ (80018c0 <fakeuseSD+0x14c>)
 800181e:	4829      	ldr	r0, [pc, #164]	@ (80018c4 <fakeuseSD+0x150>)
 8001820:	f7ff ff34 	bl	800168c <UART_Transmit_With_Color>
			uint8_array_to_hex_string(hexString_SD, gnssReturn.bufferReturn->buffer, gnssReturn.bufferReturn->size);
 8001824:	4b24      	ldr	r3, [pc, #144]	@ (80018b8 <fakeuseSD+0x144>)
 8001826:	691b      	ldr	r3, [r3, #16]
 8001828:	6819      	ldr	r1, [r3, #0]
 800182a:	4b23      	ldr	r3, [pc, #140]	@ (80018b8 <fakeuseSD+0x144>)
 800182c:	691b      	ldr	r3, [r3, #16]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	461a      	mov	r2, r3
 8001832:	6938      	ldr	r0, [r7, #16]
 8001834:	f7ff ff76 	bl	8001724 <uint8_array_to_hex_string>
			UART_Transmit_With_Color(hexString_SD,ANSI_COLOR_YELLOW);
 8001838:	491a      	ldr	r1, [pc, #104]	@ (80018a4 <fakeuseSD+0x130>)
 800183a:	6938      	ldr	r0, [r7, #16]
 800183c:	f7ff ff26 	bl	800168c <UART_Transmit_With_Color>
 8001840:	e007      	b.n	8001852 <fakeuseSD+0xde>
		}
		else
		{
			UART_Transmit_With_Color("\r\t\t\n...UBXMessage --FROM-- SD Polling...",ANSI_COLOR_YELLOW);
 8001842:	4918      	ldr	r1, [pc, #96]	@ (80018a4 <fakeuseSD+0x130>)
 8001844:	4820      	ldr	r0, [pc, #128]	@ (80018c8 <fakeuseSD+0x154>)
 8001846:	f7ff ff21 	bl	800168c <UART_Transmit_With_Color>
			UART_Transmit_With_Color("\t---NOT FOUND---\r\n",ANSI_COLOR_RED);
 800184a:	4920      	ldr	r1, [pc, #128]	@ (80018cc <fakeuseSD+0x158>)
 800184c:	4820      	ldr	r0, [pc, #128]	@ (80018d0 <fakeuseSD+0x15c>)
 800184e:	f7ff ff1d 	bl	800168c <UART_Transmit_With_Color>
		}
		vPortFree(hexString_SD);
 8001852:	6938      	ldr	r0, [r7, #16]
 8001854:	f00b fac8 	bl	800cde8 <vPortFree>
		freeBuffer(gnssReturn.itemFromUBX_Q.UBXMessage->load);
 8001858:	4b17      	ldr	r3, [pc, #92]	@ (80018b8 <fakeuseSD+0x144>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8001860:	4618      	mov	r0, r3
 8001862:	f7fe fef5 	bl	8000650 <freeBuffer>
		freeBuffer(gnssReturn.itemFromUBX_Q.UBXMessage->brute);
 8001866:	4b14      	ldr	r3, [pc, #80]	@ (80018b8 <fakeuseSD+0x144>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800186e:	4618      	mov	r0, r3
 8001870:	f7fe feee 	bl	8000650 <freeBuffer>
		vPortFree(gnssReturn.itemFromUBX_Q.UBXMessage);
 8001874:	4b10      	ldr	r3, [pc, #64]	@ (80018b8 <fakeuseSD+0x144>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4618      	mov	r0, r3
 800187a:	f00b fab5 	bl	800cde8 <vPortFree>
	else
	{
		UART_Transmit_With_Color("\r\t\t\n...UBXMessage --FROM-- SD Polling...",ANSI_COLOR_YELLOW);
		UART_Transmit_With_Color("\t---SEMAPHORE ISSUE---\r\n\n",ANSI_COLOR_RED);
	}
}
 800187e:	e007      	b.n	8001890 <fakeuseSD+0x11c>
		UART_Transmit_With_Color("\r\t\t\n...UBXMessage --FROM-- SD Polling...",ANSI_COLOR_YELLOW);
 8001880:	4908      	ldr	r1, [pc, #32]	@ (80018a4 <fakeuseSD+0x130>)
 8001882:	4811      	ldr	r0, [pc, #68]	@ (80018c8 <fakeuseSD+0x154>)
 8001884:	f7ff ff02 	bl	800168c <UART_Transmit_With_Color>
		UART_Transmit_With_Color("\t---SEMAPHORE ISSUE---\r\n\n",ANSI_COLOR_RED);
 8001888:	4910      	ldr	r1, [pc, #64]	@ (80018cc <fakeuseSD+0x158>)
 800188a:	4812      	ldr	r0, [pc, #72]	@ (80018d4 <fakeuseSD+0x160>)
 800188c:	f7ff fefe 	bl	800168c <UART_Transmit_With_Color>
}
 8001890:	bf00      	nop
 8001892:	3718      	adds	r7, #24
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	20000928 	.word	0x20000928
 800189c:	080109e4 	.word	0x080109e4
 80018a0:	20000914 	.word	0x20000914
 80018a4:	080109f0 	.word	0x080109f0
 80018a8:	080109f8 	.word	0x080109f8
 80018ac:	e0000074 	.word	0xe0000074
 80018b0:	200001b4 	.word	0x200001b4
 80018b4:	20000918 	.word	0x20000918
 80018b8:	200008ac 	.word	0x200008ac
 80018bc:	08010a24 	.word	0x08010a24
 80018c0:	08010a50 	.word	0x08010a50
 80018c4:	08010a58 	.word	0x08010a58
 80018c8:	08010a6c 	.word	0x08010a6c
 80018cc:	08010a98 	.word	0x08010a98
 80018d0:	08010aa0 	.word	0x08010aa0
 80018d4:	08010ab4 	.word	0x08010ab4

080018d8 <matcher>:
 */

#include "RTOS_subfunctions/matcher.h"
GNSSRequestQ_t gnssRequest;

void matcher(void){
 80018d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018da:	b097      	sub	sp, #92	@ 0x5c
 80018dc:	af00      	add	r7, sp, #0
	if(uxQueueMessagesWaiting(UBXQueueHandle)>0){
 80018de:	4b52      	ldr	r3, [pc, #328]	@ (8001a28 <matcher+0x150>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f009 f80c 	bl	800a900 <uxQueueMessagesWaiting>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f000 8095 	beq.w	8001a1a <matcher+0x142>
		UBXMessageQ_t itemFromUBX_Q;
		UBXMessage_parsed* ubxFromQueueMatching=NULL;
 80018f0:	2300      	movs	r3, #0
 80018f2:	657b      	str	r3, [r7, #84]	@ 0x54
		GNSSReturnQ_t gnssReturn;
		char* TIME_delta = (char*)pvPortMalloc(sizeof(TickType_t) * sizeof(char));
 80018f4:	2004      	movs	r0, #4
 80018f6:	f00b f991 	bl	800cc1c <pvPortMalloc>
 80018fa:	6538      	str	r0, [r7, #80]	@ 0x50
		if(TIME_delta == NULL) Error_Handler();
 80018fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d101      	bne.n	8001906 <matcher+0x2e>
 8001902:	f000 fff5 	bl	80028f0 <Error_Handler>

		xQueueReceive(GNSS_RequestHandle, &gnssRequest, osWaitForever);
 8001906:	4b49      	ldr	r3, [pc, #292]	@ (8001a2c <matcher+0x154>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f04f 32ff 	mov.w	r2, #4294967295
 800190e:	4948      	ldr	r1, [pc, #288]	@ (8001a30 <matcher+0x158>)
 8001910:	4618      	mov	r0, r3
 8001912:	f008 fbcb 	bl	800a0ac <xQueueReceive>

		UART_Transmit_With_Color( "\r...[INFO] Semaphore in MATCHER...--TAKE--\t\t", ANSI_COLOR_RESET);
 8001916:	4947      	ldr	r1, [pc, #284]	@ (8001a34 <matcher+0x15c>)
 8001918:	4847      	ldr	r0, [pc, #284]	@ (8001a38 <matcher+0x160>)
 800191a:	f7ff feb7 	bl	800168c <UART_Transmit_With_Color>
		UART_Transmit_With_Color( gnssRequest.applicantName, ANSI_COLOR_RESET);
 800191e:	4b44      	ldr	r3, [pc, #272]	@ (8001a30 <matcher+0x158>)
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	4944      	ldr	r1, [pc, #272]	@ (8001a34 <matcher+0x15c>)
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff feb1 	bl	800168c <UART_Transmit_With_Color>
		//Parcourir UBXQueue
		//Matcher avec Class et ID --> sortir le payload
		//UBXMessage_parsed* ubxFromQueueMatching = findItemQueueWithoutCopy(UBXQueueHandle, gnssRequest);
		//UBXMessage_parsed* ubxFromQueueMatching = findAndRemoveItemFromQueue(UBXQueueHandle, gnssRequest);
		xQueueReceive(UBXQueueHandle,&itemFromUBX_Q,100);
 800192a:	4b3f      	ldr	r3, [pc, #252]	@ (8001a28 <matcher+0x150>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8001932:	2264      	movs	r2, #100	@ 0x64
 8001934:	4618      	mov	r0, r3
 8001936:	f008 fbb9 	bl	800a0ac <xQueueReceive>
		ubxFromQueueMatching = itemFromUBX_Q.UBXMessage;
 800193a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800193c:	657b      	str	r3, [r7, #84]	@ 0x54
		///////

		if (ubxFromQueueMatching->brute != NULL){
 800193e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001940:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d01c      	beq.n	8001982 <matcher+0xaa>
			gnssReturn = (GNSSReturnQ_t){
				.itemFromUBX_Q = itemFromUBX_Q,
						.Request_TIME = gnssRequest.Request_TIME,
 8001948:	4b39      	ldr	r3, [pc, #228]	@ (8001a30 <matcher+0x158>)
 800194a:	681c      	ldr	r4, [r3, #0]
						.Return_TIME = xTaskGetTickCount(),
 800194c:	f009 fddc 	bl	800b508 <xTaskGetTickCount>
						.statut = OK,
						.CLASS = gnssRequest.CLASS,
 8001950:	4b37      	ldr	r3, [pc, #220]	@ (8001a30 <matcher+0x158>)
 8001952:	791e      	ldrb	r6, [r3, #4]
						.ID = gnssRequest.ID,
 8001954:	4b36      	ldr	r3, [pc, #216]	@ (8001a30 <matcher+0x158>)
 8001956:	795d      	ldrb	r5, [r3, #5]
						.bufferReturn = ubxFromQueueMatching->brute,
 8001958:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800195a:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
						.applicantName = gnssRequest.applicantName
 800195e:	4b34      	ldr	r3, [pc, #208]	@ (8001a30 <matcher+0x158>)
 8001960:	68db      	ldr	r3, [r3, #12]
			gnssReturn = (GNSSReturnQ_t){
 8001962:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8001964:	6379      	str	r1, [r7, #52]	@ 0x34
 8001966:	63bc      	str	r4, [r7, #56]	@ 0x38
 8001968:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800196a:	2100      	movs	r1, #0
 800196c:	f887 1040 	strb.w	r1, [r7, #64]	@ 0x40
 8001970:	4631      	mov	r1, r6
 8001972:	f887 1041 	strb.w	r1, [r7, #65]	@ 0x41
 8001976:	4629      	mov	r1, r5
 8001978:	f887 1042 	strb.w	r1, [r7, #66]	@ 0x42
 800197c:	647a      	str	r2, [r7, #68]	@ 0x44
 800197e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001980:	e020      	b.n	80019c4 <matcher+0xec>
			};

		}else{
			UART_Transmit_With_Color("\r\t\t\n...MATCHER... ---FAILED---\t\t",ANSI_COLOR_RED);
 8001982:	492e      	ldr	r1, [pc, #184]	@ (8001a3c <matcher+0x164>)
 8001984:	482e      	ldr	r0, [pc, #184]	@ (8001a40 <matcher+0x168>)
 8001986:	f7ff fe81 	bl	800168c <UART_Transmit_With_Color>
			UART_Transmit_With_Color(gnssRequest.applicantName,ANSI_COLOR_RED);
 800198a:	4b29      	ldr	r3, [pc, #164]	@ (8001a30 <matcher+0x158>)
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	492b      	ldr	r1, [pc, #172]	@ (8001a3c <matcher+0x164>)
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff fe7b 	bl	800168c <UART_Transmit_With_Color>

			gnssReturn = (GNSSReturnQ_t){
				.itemFromUBX_Q = itemFromUBX_Q,
						.Request_TIME = gnssRequest.Request_TIME,
 8001996:	4b26      	ldr	r3, [pc, #152]	@ (8001a30 <matcher+0x158>)
 8001998:	681c      	ldr	r4, [r3, #0]
						.Return_TIME = xTaskGetTickCount(),
 800199a:	f009 fdb5 	bl	800b508 <xTaskGetTickCount>
 800199e:	4601      	mov	r1, r0
						.statut = Error,
						.CLASS = 0,
						.ID = 0,
						.bufferReturn = (DynamicBuffer*)NULL,
						.applicantName = gnssRequest.applicantName
 80019a0:	4b23      	ldr	r3, [pc, #140]	@ (8001a30 <matcher+0x158>)
 80019a2:	68db      	ldr	r3, [r3, #12]
			gnssReturn = (GNSSReturnQ_t){
 80019a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80019a6:	637a      	str	r2, [r7, #52]	@ 0x34
 80019a8:	63bc      	str	r4, [r7, #56]	@ 0x38
 80019aa:	63f9      	str	r1, [r7, #60]	@ 0x3c
 80019ac:	2201      	movs	r2, #1
 80019ae:	f887 2040 	strb.w	r2, [r7, #64]	@ 0x40
 80019b2:	2200      	movs	r2, #0
 80019b4:	f887 2041 	strb.w	r2, [r7, #65]	@ 0x41
 80019b8:	2200      	movs	r2, #0
 80019ba:	f887 2042 	strb.w	r2, [r7, #66]	@ 0x42
 80019be:	2200      	movs	r2, #0
 80019c0:	647a      	str	r2, [r7, #68]	@ 0x44
 80019c2:	64bb      	str	r3, [r7, #72]	@ 0x48
			};
		}
		sprintf(TIME_delta, "%lu",((gnssReturn.Return_TIME-gnssReturn.Request_TIME)*(uint32_t)(1000.000/configTICK_RATE_HZ)));
 80019c4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80019c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	461a      	mov	r2, r3
 80019cc:	491d      	ldr	r1, [pc, #116]	@ (8001a44 <matcher+0x16c>)
 80019ce:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80019d0:	f00e faa0 	bl	800ff14 <siprintf>
		UART_Transmit_With_Color( "\n\r...[INFO] Delta Time: Request & Return (ms)...\t\t", ANSI_COLOR_RESET);
 80019d4:	4917      	ldr	r1, [pc, #92]	@ (8001a34 <matcher+0x15c>)
 80019d6:	481c      	ldr	r0, [pc, #112]	@ (8001a48 <matcher+0x170>)
 80019d8:	f7ff fe58 	bl	800168c <UART_Transmit_With_Color>
		UART_Transmit_With_Color(TIME_delta,ANSI_COLOR_GREEN);
 80019dc:	491b      	ldr	r1, [pc, #108]	@ (8001a4c <matcher+0x174>)
 80019de:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80019e0:	f7ff fe54 	bl	800168c <UART_Transmit_With_Color>
		UART_Transmit_With_Color( "\n\r...[INFO] Semaphore in MATCHER...--RELEASE--\t\t", ANSI_COLOR_RESET);
 80019e4:	4913      	ldr	r1, [pc, #76]	@ (8001a34 <matcher+0x15c>)
 80019e6:	481a      	ldr	r0, [pc, #104]	@ (8001a50 <matcher+0x178>)
 80019e8:	f7ff fe50 	bl	800168c <UART_Transmit_With_Color>
		UART_Transmit_With_Color( gnssRequest.applicantName, ANSI_COLOR_RESET);
 80019ec:	4b10      	ldr	r3, [pc, #64]	@ (8001a30 <matcher+0x158>)
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	4910      	ldr	r1, [pc, #64]	@ (8001a34 <matcher+0x15c>)
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff fe4a 	bl	800168c <UART_Transmit_With_Color>

		vPortFree(TIME_delta); //UART Transmit color stocke toutes les info messages ainsi que couleur
 80019f8:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80019fa:	f00b f9f5 	bl	800cde8 <vPortFree>

		xQueueSendToBack(GNSS_ReturnHandle,&gnssReturn,portMAX_DELAY);
 80019fe:	4b15      	ldr	r3, [pc, #84]	@ (8001a54 <matcher+0x17c>)
 8001a00:	6818      	ldr	r0, [r3, #0]
 8001a02:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8001a06:	2300      	movs	r3, #0
 8001a08:	f04f 32ff 	mov.w	r2, #4294967295
 8001a0c:	f007 ffd4 	bl	80099b8 <xQueueGenericSend>

		osSemaphoreRelease(gnssRequest.applicantSemaphore);
 8001a10:	4b07      	ldr	r3, [pc, #28]	@ (8001a30 <matcher+0x158>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f007 fc97 	bl	8009348 <osSemaphoreRelease>

	}
	vTaskDelay(1);
 8001a1a:	2001      	movs	r0, #1
 8001a1c:	f009 fc0e 	bl	800b23c <vTaskDelay>


}
 8001a20:	bf00      	nop
 8001a22:	375c      	adds	r7, #92	@ 0x5c
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a28:	20000910 	.word	0x20000910
 8001a2c:	20000914 	.word	0x20000914
 8001a30:	200008c4 	.word	0x200008c4
 8001a34:	08010ad0 	.word	0x08010ad0
 8001a38:	08010ad8 	.word	0x08010ad8
 8001a3c:	08010b08 	.word	0x08010b08
 8001a40:	08010b10 	.word	0x08010b10
 8001a44:	08010b34 	.word	0x08010b34
 8001a48:	08010b38 	.word	0x08010b38
 8001a4c:	08010b6c 	.word	0x08010b6c
 8001a50:	08010b74 	.word	0x08010b74
 8001a54:	20000918 	.word	0x20000918

08001a58 <receivedLora>:
 *      Author: romain.pace
 */

#include "RTOS_subfunctions/receveivedLora.h"

void receivedLora(void){
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
	osSemaphoreWait(xSem_LORAReceive_startHandle, osWaitForever);
 8001a5e:	4b1b      	ldr	r3, [pc, #108]	@ (8001acc <receivedLora+0x74>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f04f 31ff 	mov.w	r1, #4294967295
 8001a66:	4618      	mov	r0, r3
 8001a68:	f007 fc20 	bl	80092ac <osSemaphoreWait>

	LORA_Message* LORA_Receive_Message = (LORA_Message*)pvPortMalloc(sizeof(LORA_Message));
 8001a6c:	2010      	movs	r0, #16
 8001a6e:	f00b f8d5 	bl	800cc1c <pvPortMalloc>
 8001a72:	6078      	str	r0, [r7, #4]
	RFM9x_Receive(LORA_Receive_Message);
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f7ff fbca 	bl	800120e <RFM9x_Receive>
	if (!LORA_Receive_Message->RxNbrBytes){ITM_Port32(31)=66;} //Si on recoit du bruit
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	789b      	ldrb	r3, [r3, #2]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d103      	bne.n	8001a8a <receivedLora+0x32>
 8001a82:	4b13      	ldr	r3, [pc, #76]	@ (8001ad0 <receivedLora+0x78>)
 8001a84:	2242      	movs	r2, #66	@ 0x42
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	e018      	b.n	8001abc <receivedLora+0x64>

	else if (LORA_Receive_Message->header->recipient == MODULE_BROADCAST_ADDRESS
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	2bff      	cmp	r3, #255	@ 0xff
 8001a92:	d004      	beq.n	8001a9e <receivedLora+0x46>
			||LORA_Receive_Message->header->recipient == MODULE_SOURCE_ADDRESS){
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d10e      	bne.n	8001abc <receivedLora+0x64>


		switch (LORA_Receive_Message->header->type){
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	789b      	ldrb	r3, [r3, #2]
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d002      	beq.n	8001aae <receivedLora+0x56>
 8001aa8:	2b03      	cmp	r3, #3
 8001aaa:	d003      	beq.n	8001ab4 <receivedLora+0x5c>
		case PACKET_TYPE_POLL:
			PACKET_TYPE_POLL_fct(LORA_Receive_Message);
			break;

		default:
			break;
 8001aac:	e006      	b.n	8001abc <receivedLora+0x64>
			PACKET_TYPE_ACK_fct();
 8001aae:	f000 f8e1 	bl	8001c74 <PACKET_TYPE_ACK_fct>
			break;
 8001ab2:	e003      	b.n	8001abc <receivedLora+0x64>
			PACKET_TYPE_POLL_fct(LORA_Receive_Message);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f000 f80d 	bl	8001ad4 <PACKET_TYPE_POLL_fct>
			break;
 8001aba:	bf00      	nop
		}
	}
	vPortFree(LORA_Receive_Message);
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f00b f993 	bl	800cde8 <vPortFree>
}
 8001ac2:	bf00      	nop
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20000924 	.word	0x20000924
 8001ad0:	e000007c 	.word	0xe000007c

08001ad4 <PACKET_TYPE_POLL_fct>:

void PACKET_TYPE_POLL_fct(LORA_Message* LORA_Receive_Message){
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b092      	sub	sp, #72	@ 0x48
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
	GNSSReturnQ_t gnssReturn;
	GNSStoPollQ_t poll = {(const uint8_t*) LORA_Receive_Message->payload,
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	623b      	str	r3, [r7, #32]
			(size_t) LORA_Receive_Message->header->len_payload};
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	78db      	ldrb	r3, [r3, #3]
	GNSStoPollQ_t poll = {(const uint8_t*) LORA_Receive_Message->payload,
 8001ae8:	627b      	str	r3, [r7, #36]	@ 0x24

	GNSSRequestQ_t requestFromLora = {
			.Request_TIME= xTaskGetTickCount(),
 8001aea:	f009 fd0d 	bl	800b508 <xTaskGetTickCount>
 8001aee:	4603      	mov	r3, r0
	GNSSRequestQ_t requestFromLora = {
 8001af0:	613b      	str	r3, [r7, #16]
			.CLASS = LORA_Receive_Message->payload[2],
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	68db      	ldr	r3, [r3, #12]
	GNSSRequestQ_t requestFromLora = {
 8001af6:	789b      	ldrb	r3, [r3, #2]
 8001af8:	753b      	strb	r3, [r7, #20]
			.ID = LORA_Receive_Message->payload[3],
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	68db      	ldr	r3, [r3, #12]
	GNSSRequestQ_t requestFromLora = {
 8001afe:	78db      	ldrb	r3, [r3, #3]
 8001b00:	757b      	strb	r3, [r7, #21]
 8001b02:	4b4e      	ldr	r3, [pc, #312]	@ (8001c3c <PACKET_TYPE_POLL_fct+0x168>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	61bb      	str	r3, [r7, #24]
 8001b08:	4b4d      	ldr	r3, [pc, #308]	@ (8001c40 <PACKET_TYPE_POLL_fct+0x16c>)
 8001b0a:	61fb      	str	r3, [r7, #28]
			.applicantSemaphore = LORA_Access_GNSS_ReturnHandle,
			.applicantName = "LORAPolling_REQUEST"
	};

	LORA_Header* headerSend =(LORA_Header*) pvPortMalloc(sizeof(LORA_Header));
 8001b0c:	2004      	movs	r0, #4
 8001b0e:	f00b f885 	bl	800cc1c <pvPortMalloc>
 8001b12:	6478      	str	r0, [r7, #68]	@ 0x44

	xQueueSendToBack(GNSS_RequestHandle,&requestFromLora,osWaitForever);
 8001b14:	4b4b      	ldr	r3, [pc, #300]	@ (8001c44 <PACKET_TYPE_POLL_fct+0x170>)
 8001b16:	6818      	ldr	r0, [r3, #0]
 8001b18:	f107 0110 	add.w	r1, r7, #16
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	f04f 32ff 	mov.w	r2, #4294967295
 8001b22:	f007 ff49 	bl	80099b8 <xQueueGenericSend>
	UART_Transmit_With_Color("\r\t\t\n...UBXMessage --FROM-- LORA Polling...\r\n",ANSI_COLOR_MAGENTA);
 8001b26:	4948      	ldr	r1, [pc, #288]	@ (8001c48 <PACKET_TYPE_POLL_fct+0x174>)
 8001b28:	4848      	ldr	r0, [pc, #288]	@ (8001c4c <PACKET_TYPE_POLL_fct+0x178>)
 8001b2a:	f7ff fdaf 	bl	800168c <UART_Transmit_With_Color>
	ITM_Port32(30)=111;
 8001b2e:	4b48      	ldr	r3, [pc, #288]	@ (8001c50 <PACKET_TYPE_POLL_fct+0x17c>)
 8001b30:	226f      	movs	r2, #111	@ 0x6f
 8001b32:	601a      	str	r2, [r3, #0]
	request_commandToGNSS(poll); //On envoie un message vers GNSS
 8001b34:	f107 0320 	add.w	r3, r7, #32
 8001b38:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001b3c:	f7ff fd3e 	bl	80015bc <request_commandToGNSS>
	ITM_Port32(30)=444;
 8001b40:	4b43      	ldr	r3, [pc, #268]	@ (8001c50 <PACKET_TYPE_POLL_fct+0x17c>)
 8001b42:	f44f 72de 	mov.w	r2, #444	@ 0x1bc
 8001b46:	601a      	str	r2, [r3, #0]
	if (osSemaphoreWait(LORA_Access_GNSS_ReturnHandle, 100)==osOK){
 8001b48:	4b3c      	ldr	r3, [pc, #240]	@ (8001c3c <PACKET_TYPE_POLL_fct+0x168>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2164      	movs	r1, #100	@ 0x64
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f007 fbac 	bl	80092ac <osSemaphoreWait>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d163      	bne.n	8001c22 <PACKET_TYPE_POLL_fct+0x14e>
		xQueueReceive(GNSS_ReturnHandle, &gnssReturn, osWaitForever);
 8001b5a:	4b3e      	ldr	r3, [pc, #248]	@ (8001c54 <PACKET_TYPE_POLL_fct+0x180>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8001b62:	f04f 32ff 	mov.w	r2, #4294967295
 8001b66:	4618      	mov	r0, r3
 8001b68:	f008 faa0 	bl	800a0ac <xQueueReceive>
		ITM_Port32(30)=555;
 8001b6c:	4b38      	ldr	r3, [pc, #224]	@ (8001c50 <PACKET_TYPE_POLL_fct+0x17c>)
 8001b6e:	f240 222b 	movw	r2, #555	@ 0x22b
 8001b72:	601a      	str	r2, [r3, #0]
		if (gnssReturn.statut==OK){
 8001b74:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d146      	bne.n	8001c0a <PACKET_TYPE_POLL_fct+0x136>
			*headerSend = (LORA_Header){
				.recipient = 0xFE,
				.sender = MODULE_SOURCE_ADDRESS,
				.type = PACKET_TYPE_POLL,
				.len_payload = (size_t)gnssReturn.bufferReturn->size};
 8001b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b7e:	685b      	ldr	r3, [r3, #4]
			*headerSend = (LORA_Header){
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b84:	21fe      	movs	r1, #254	@ 0xfe
 8001b86:	7019      	strb	r1, [r3, #0]
 8001b88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	7059      	strb	r1, [r3, #1]
 8001b8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b90:	2103      	movs	r1, #3
 8001b92:	7099      	strb	r1, [r3, #2]
 8001b94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b96:	70da      	strb	r2, [r3, #3]

			LORA_Send(headerSend, (uint8_t*)gnssReturn.bufferReturn->buffer);
 8001b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001ba0:	f7ff fa13 	bl	8000fca <LORA_Send>
			vPortFree(headerSend);
 8001ba4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001ba6:	f00b f91f 	bl	800cde8 <vPortFree>

			UART_Transmit_With_Color("\r\t\t\n...UBXMessage --SEND-- LORA Polling...",ANSI_COLOR_MAGENTA);
 8001baa:	4927      	ldr	r1, [pc, #156]	@ (8001c48 <PACKET_TYPE_POLL_fct+0x174>)
 8001bac:	482a      	ldr	r0, [pc, #168]	@ (8001c58 <PACKET_TYPE_POLL_fct+0x184>)
 8001bae:	f7ff fd6d 	bl	800168c <UART_Transmit_With_Color>
			UART_Transmit_With_Color("\t---SUCCESS---\r\n",ANSI_COLOR_GREEN);
 8001bb2:	492a      	ldr	r1, [pc, #168]	@ (8001c5c <PACKET_TYPE_POLL_fct+0x188>)
 8001bb4:	482a      	ldr	r0, [pc, #168]	@ (8001c60 <PACKET_TYPE_POLL_fct+0x18c>)
 8001bb6:	f7ff fd69 	bl	800168c <UART_Transmit_With_Color>
			char* hexString_LORA = (char*)pvPortMalloc(gnssReturn.bufferReturn->size * 2 + 1);
 8001bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f00b f82a 	bl	800cc1c <pvPortMalloc>
 8001bc8:	6438      	str	r0, [r7, #64]	@ 0x40
			uint8_array_to_hex_string(hexString_LORA, gnssReturn.bufferReturn->buffer, gnssReturn.bufferReturn->size);
 8001bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bcc:	6819      	ldr	r1, [r3, #0]
 8001bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001bd6:	f7ff fda5 	bl	8001724 <uint8_array_to_hex_string>
			UART_Transmit_With_Color(hexString_LORA,ANSI_COLOR_MAGENTA);
 8001bda:	491b      	ldr	r1, [pc, #108]	@ (8001c48 <PACKET_TYPE_POLL_fct+0x174>)
 8001bdc:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001bde:	f7ff fd55 	bl	800168c <UART_Transmit_With_Color>
			vPortFree(hexString_LORA);
 8001be2:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001be4:	f00b f900 	bl	800cde8 <vPortFree>

			freeBuffer(gnssReturn.itemFromUBX_Q.UBXMessage->load);
 8001be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bea:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7fe fd2e 	bl	8000650 <freeBuffer>
			freeBuffer(gnssReturn.itemFromUBX_Q.UBXMessage->brute);
 8001bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bf6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7fe fd28 	bl	8000650 <freeBuffer>
			vPortFree(gnssReturn.itemFromUBX_Q.UBXMessage);
 8001c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c02:	4618      	mov	r0, r3
 8001c04:	f00b f8f0 	bl	800cde8 <vPortFree>
	}
	else{
		UART_Transmit_With_Color("\r\t\t\n...UBXMessage --SEND-- LORA Polling...",ANSI_COLOR_MAGENTA);
		UART_Transmit_With_Color("\t---ISSUE SEMAPHORE--\r\n",ANSI_COLOR_RED);
	}
}
 8001c08:	e013      	b.n	8001c32 <PACKET_TYPE_POLL_fct+0x15e>
			ITM_Port32(31)=99;
 8001c0a:	4b16      	ldr	r3, [pc, #88]	@ (8001c64 <PACKET_TYPE_POLL_fct+0x190>)
 8001c0c:	2263      	movs	r2, #99	@ 0x63
 8001c0e:	601a      	str	r2, [r3, #0]
			UART_Transmit_With_Color("\r\t\t\n...UBXMessage --SEND-- LORA Polling...",ANSI_COLOR_MAGENTA);
 8001c10:	490d      	ldr	r1, [pc, #52]	@ (8001c48 <PACKET_TYPE_POLL_fct+0x174>)
 8001c12:	4811      	ldr	r0, [pc, #68]	@ (8001c58 <PACKET_TYPE_POLL_fct+0x184>)
 8001c14:	f7ff fd3a 	bl	800168c <UART_Transmit_With_Color>
			UART_Transmit_With_Color("\t---NOT FOUND--\r\n",ANSI_COLOR_RED);
 8001c18:	4913      	ldr	r1, [pc, #76]	@ (8001c68 <PACKET_TYPE_POLL_fct+0x194>)
 8001c1a:	4814      	ldr	r0, [pc, #80]	@ (8001c6c <PACKET_TYPE_POLL_fct+0x198>)
 8001c1c:	f7ff fd36 	bl	800168c <UART_Transmit_With_Color>
}
 8001c20:	e007      	b.n	8001c32 <PACKET_TYPE_POLL_fct+0x15e>
		UART_Transmit_With_Color("\r\t\t\n...UBXMessage --SEND-- LORA Polling...",ANSI_COLOR_MAGENTA);
 8001c22:	4909      	ldr	r1, [pc, #36]	@ (8001c48 <PACKET_TYPE_POLL_fct+0x174>)
 8001c24:	480c      	ldr	r0, [pc, #48]	@ (8001c58 <PACKET_TYPE_POLL_fct+0x184>)
 8001c26:	f7ff fd31 	bl	800168c <UART_Transmit_With_Color>
		UART_Transmit_With_Color("\t---ISSUE SEMAPHORE--\r\n",ANSI_COLOR_RED);
 8001c2a:	490f      	ldr	r1, [pc, #60]	@ (8001c68 <PACKET_TYPE_POLL_fct+0x194>)
 8001c2c:	4810      	ldr	r0, [pc, #64]	@ (8001c70 <PACKET_TYPE_POLL_fct+0x19c>)
 8001c2e:	f7ff fd2d 	bl	800168c <UART_Transmit_With_Color>
}
 8001c32:	bf00      	nop
 8001c34:	3748      	adds	r7, #72	@ 0x48
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	2000092c 	.word	0x2000092c
 8001c40:	08010ba8 	.word	0x08010ba8
 8001c44:	20000914 	.word	0x20000914
 8001c48:	08010bbc 	.word	0x08010bbc
 8001c4c:	08010bc4 	.word	0x08010bc4
 8001c50:	e0000078 	.word	0xe0000078
 8001c54:	20000918 	.word	0x20000918
 8001c58:	08010bf4 	.word	0x08010bf4
 8001c5c:	08010c20 	.word	0x08010c20
 8001c60:	08010c28 	.word	0x08010c28
 8001c64:	e000007c 	.word	0xe000007c
 8001c68:	08010c3c 	.word	0x08010c3c
 8001c6c:	08010c44 	.word	0x08010c44
 8001c70:	08010c58 	.word	0x08010c58

08001c74 <PACKET_TYPE_ACK_fct>:
void PACKET_TYPE_ACK_fct(void){
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
	//Lora send un messsage vide
	LORA_Header* headerSend =(LORA_Header*) pvPortMalloc(sizeof(LORA_Header));
 8001c7a:	2004      	movs	r0, #4
 8001c7c:	f00a ffce 	bl	800cc1c <pvPortMalloc>
 8001c80:	6078      	str	r0, [r7, #4]

	*headerSend = (LORA_Header){
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a06      	ldr	r2, [pc, #24]	@ (8001ca0 <PACKET_TYPE_ACK_fct+0x2c>)
 8001c86:	6810      	ldr	r0, [r2, #0]
 8001c88:	6018      	str	r0, [r3, #0]
		.recipient = 0xFE,
				.sender = MODULE_SOURCE_ADDRESS,
				.type = PACKET_TYPE_ACK,
				.len_payload = sizeof(NULL)
	};
	LORA_Send(headerSend, NULL);
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f7ff f99c 	bl	8000fca <LORA_Send>
	vPortFree(headerSend);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f00b f8a8 	bl	800cde8 <vPortFree>

}
 8001c98:	bf00      	nop
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	08010c70 	.word	0x08010c70

08001ca4 <uartbyteToGnssMessage>:
uint16_t payloadIndex = 0;

UBXMessage_parsed* messageUBX = NULL;


void uartbyteToGnssMessage(void){
 8001ca4:	b590      	push	{r4, r7, lr}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
	if (xQueueReceive(UARTbyteHandle, &uartMsg, portMAX_DELAY) == pdTRUE) {
 8001caa:	4b93      	ldr	r3, [pc, #588]	@ (8001ef8 <uartbyteToGnssMessage+0x254>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f04f 32ff 	mov.w	r2, #4294967295
 8001cb2:	4992      	ldr	r1, [pc, #584]	@ (8001efc <uartbyteToGnssMessage+0x258>)
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f008 f9f9 	bl	800a0ac <xQueueReceive>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	f040 8191 	bne.w	8001fe4 <uartbyteToGnssMessage+0x340>
		uint8_t receivedByte = uartMsg.data;
 8001cc2:	4b8e      	ldr	r3, [pc, #568]	@ (8001efc <uartbyteToGnssMessage+0x258>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	71fb      	strb	r3, [r7, #7]
		// Machine à états pour traiter les messages
		switch (state) {
 8001cc8:	4b8d      	ldr	r3, [pc, #564]	@ (8001f00 <uartbyteToGnssMessage+0x25c>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	2b06      	cmp	r3, #6
 8001cce:	f200 8182 	bhi.w	8001fd6 <uartbyteToGnssMessage+0x332>
 8001cd2:	a201      	add	r2, pc, #4	@ (adr r2, 8001cd8 <uartbyteToGnssMessage+0x34>)
 8001cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cd8:	08001cf5 	.word	0x08001cf5
 8001cdc:	08001d1b 	.word	0x08001d1b
 8001ce0:	08001d3b 	.word	0x08001d3b
 8001ce4:	08001d6f 	.word	0x08001d6f
 8001ce8:	08001d7f 	.word	0x08001d7f
 8001cec:	08001d91 	.word	0x08001d91
 8001cf0:	08001f21 	.word	0x08001f21
		case WAIT_FOR_SYNC_1:
			if (receivedByte == HEADER_UBX_1) {
 8001cf4:	79fb      	ldrb	r3, [r7, #7]
 8001cf6:	2bb5      	cmp	r3, #181	@ 0xb5
 8001cf8:	f040 8171 	bne.w	8001fde <uartbyteToGnssMessage+0x33a>
				ITM_Port32(31)=1111;
 8001cfc:	4b81      	ldr	r3, [pc, #516]	@ (8001f04 <uartbyteToGnssMessage+0x260>)
 8001cfe:	f240 4257 	movw	r2, #1111	@ 0x457
 8001d02:	601a      	str	r2, [r3, #0]
				osSemaphoreWait(GNSS_UART_AccessHandle, osWaitForever);
 8001d04:	4b80      	ldr	r3, [pc, #512]	@ (8001f08 <uartbyteToGnssMessage+0x264>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f04f 31ff 	mov.w	r1, #4294967295
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f007 facd 	bl	80092ac <osSemaphoreWait>
				state = WAIT_FOR_SYNC_2;
 8001d12:	4b7b      	ldr	r3, [pc, #492]	@ (8001f00 <uartbyteToGnssMessage+0x25c>)
 8001d14:	2201      	movs	r2, #1
 8001d16:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001d18:	e161      	b.n	8001fde <uartbyteToGnssMessage+0x33a>

		case WAIT_FOR_SYNC_2:
			if (receivedByte == HEADER_UBX_2) state = WAIT_FOR_CLASS;
 8001d1a:	79fb      	ldrb	r3, [r7, #7]
 8001d1c:	2b62      	cmp	r3, #98	@ 0x62
 8001d1e:	d103      	bne.n	8001d28 <uartbyteToGnssMessage+0x84>
 8001d20:	4b77      	ldr	r3, [pc, #476]	@ (8001f00 <uartbyteToGnssMessage+0x25c>)
 8001d22:	2202      	movs	r2, #2
 8001d24:	701a      	strb	r2, [r3, #0]
			else {
				state = WAIT_FOR_SYNC_1;
				osSemaphoreRelease(GNSS_UART_AccessHandle);
				}
			break;
 8001d26:	e15d      	b.n	8001fe4 <uartbyteToGnssMessage+0x340>
				state = WAIT_FOR_SYNC_1;
 8001d28:	4b75      	ldr	r3, [pc, #468]	@ (8001f00 <uartbyteToGnssMessage+0x25c>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	701a      	strb	r2, [r3, #0]
				osSemaphoreRelease(GNSS_UART_AccessHandle);
 8001d2e:	4b76      	ldr	r3, [pc, #472]	@ (8001f08 <uartbyteToGnssMessage+0x264>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f007 fb08 	bl	8009348 <osSemaphoreRelease>
			break;
 8001d38:	e154      	b.n	8001fe4 <uartbyteToGnssMessage+0x340>

		case WAIT_FOR_CLASS:
			if(messageUBX != NULL) Error_Handler();
 8001d3a:	4b74      	ldr	r3, [pc, #464]	@ (8001f0c <uartbyteToGnssMessage+0x268>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <uartbyteToGnssMessage+0xa2>
 8001d42:	f000 fdd5 	bl	80028f0 <Error_Handler>
			messageUBX = (UBXMessage_parsed*) pvPortMalloc(sizeof(UBXMessage_parsed));
 8001d46:	20d4      	movs	r0, #212	@ 0xd4
 8001d48:	f00a ff68 	bl	800cc1c <pvPortMalloc>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	4a6f      	ldr	r2, [pc, #444]	@ (8001f0c <uartbyteToGnssMessage+0x268>)
 8001d50:	6013      	str	r3, [r2, #0]
			if (messageUBX == NULL) Error_Handler();
 8001d52:	4b6e      	ldr	r3, [pc, #440]	@ (8001f0c <uartbyteToGnssMessage+0x268>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <uartbyteToGnssMessage+0xba>
 8001d5a:	f000 fdc9 	bl	80028f0 <Error_Handler>
			messageUBX->CLASS = receivedByte;
 8001d5e:	4b6b      	ldr	r3, [pc, #428]	@ (8001f0c <uartbyteToGnssMessage+0x268>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	79fa      	ldrb	r2, [r7, #7]
 8001d64:	701a      	strb	r2, [r3, #0]
			state = WAIT_FOR_ID;
 8001d66:	4b66      	ldr	r3, [pc, #408]	@ (8001f00 <uartbyteToGnssMessage+0x25c>)
 8001d68:	2203      	movs	r2, #3
 8001d6a:	701a      	strb	r2, [r3, #0]
			break;
 8001d6c:	e13a      	b.n	8001fe4 <uartbyteToGnssMessage+0x340>

		case WAIT_FOR_ID:
			messageUBX->ID = receivedByte;
 8001d6e:	4b67      	ldr	r3, [pc, #412]	@ (8001f0c <uartbyteToGnssMessage+0x268>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	79fa      	ldrb	r2, [r7, #7]
 8001d74:	705a      	strb	r2, [r3, #1]
			state = WAIT_FOR_LENGTH_1;
 8001d76:	4b62      	ldr	r3, [pc, #392]	@ (8001f00 <uartbyteToGnssMessage+0x25c>)
 8001d78:	2204      	movs	r2, #4
 8001d7a:	701a      	strb	r2, [r3, #0]
			break;
 8001d7c:	e132      	b.n	8001fe4 <uartbyteToGnssMessage+0x340>

		case WAIT_FOR_LENGTH_1:
			messageUBX->len_payload = receivedByte;
 8001d7e:	4b63      	ldr	r3, [pc, #396]	@ (8001f0c <uartbyteToGnssMessage+0x268>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	79fa      	ldrb	r2, [r7, #7]
 8001d84:	b292      	uxth	r2, r2
 8001d86:	805a      	strh	r2, [r3, #2]
			state = WAIT_FOR_LENGTH_2;
 8001d88:	4b5d      	ldr	r3, [pc, #372]	@ (8001f00 <uartbyteToGnssMessage+0x25c>)
 8001d8a:	2205      	movs	r2, #5
 8001d8c:	701a      	strb	r2, [r3, #0]
			break;
 8001d8e:	e129      	b.n	8001fe4 <uartbyteToGnssMessage+0x340>
		case WAIT_FOR_LENGTH_2:
			ITM_Port32(31)=6666;
 8001d90:	4b5c      	ldr	r3, [pc, #368]	@ (8001f04 <uartbyteToGnssMessage+0x260>)
 8001d92:	f641 220a 	movw	r2, #6666	@ 0x1a0a
 8001d96:	601a      	str	r2, [r3, #0]
			messageUBX->len_payload |= receivedByte << 8;
 8001d98:	4b5c      	ldr	r3, [pc, #368]	@ (8001f0c <uartbyteToGnssMessage+0x268>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	885b      	ldrh	r3, [r3, #2]
 8001d9e:	b21a      	sxth	r2, r3
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	021b      	lsls	r3, r3, #8
 8001da4:	b21b      	sxth	r3, r3
 8001da6:	4313      	orrs	r3, r2
 8001da8:	b21a      	sxth	r2, r3
 8001daa:	4b58      	ldr	r3, [pc, #352]	@ (8001f0c <uartbyteToGnssMessage+0x268>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	b292      	uxth	r2, r2
 8001db0:	805a      	strh	r2, [r3, #2]
			if (messageUBX->len_payload > 0 && messageUBX->len_payload <= UART_MAX_BUFFER_SIZE) {
 8001db2:	4b56      	ldr	r3, [pc, #344]	@ (8001f0c <uartbyteToGnssMessage+0x268>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	885b      	ldrh	r3, [r3, #2]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	f000 8089 	beq.w	8001ed0 <uartbyteToGnssMessage+0x22c>
 8001dbe:	4b53      	ldr	r3, [pc, #332]	@ (8001f0c <uartbyteToGnssMessage+0x268>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	885b      	ldrh	r3, [r3, #2]
 8001dc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001dc8:	f200 8082 	bhi.w	8001ed0 <uartbyteToGnssMessage+0x22c>
				messageUBX->load = initializeBuffer(messageUBX->len_payload);
 8001dcc:	4b4f      	ldr	r3, [pc, #316]	@ (8001f0c <uartbyteToGnssMessage+0x268>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	885b      	ldrh	r3, [r3, #2]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	4b4d      	ldr	r3, [pc, #308]	@ (8001f0c <uartbyteToGnssMessage+0x268>)
 8001dd6:	681c      	ldr	r4, [r3, #0]
 8001dd8:	4610      	mov	r0, r2
 8001dda:	f7fe fc15 	bl	8000608 <initializeBuffer>
 8001dde:	4603      	mov	r3, r0
 8001de0:	f8c4 30cc 	str.w	r3, [r4, #204]	@ 0xcc
				messageUBX->brute = initializeBuffer(messageUBX->len_payload+8);
 8001de4:	4b49      	ldr	r3, [pc, #292]	@ (8001f0c <uartbyteToGnssMessage+0x268>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	885b      	ldrh	r3, [r3, #2]
 8001dea:	3308      	adds	r3, #8
 8001dec:	461a      	mov	r2, r3
 8001dee:	4b47      	ldr	r3, [pc, #284]	@ (8001f0c <uartbyteToGnssMessage+0x268>)
 8001df0:	681c      	ldr	r4, [r3, #0]
 8001df2:	4610      	mov	r0, r2
 8001df4:	f7fe fc08 	bl	8000608 <initializeBuffer>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	f8c4 30d0 	str.w	r3, [r4, #208]	@ 0xd0
				if (messageUBX->load == NULL || messageUBX->brute == NULL) {
 8001dfe:	4b43      	ldr	r3, [pc, #268]	@ (8001f0c <uartbyteToGnssMessage+0x268>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d005      	beq.n	8001e16 <uartbyteToGnssMessage+0x172>
 8001e0a:	4b40      	ldr	r3, [pc, #256]	@ (8001f0c <uartbyteToGnssMessage+0x268>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d11a      	bne.n	8001e4c <uartbyteToGnssMessage+0x1a8>
					// Erreur d'allocation de mémoire
					UART_Transmit_With_Color("\r\t\t\n...UARTByte --ALLOCATION-- FAILED...\r\n",ANSI_COLOR_RED);
 8001e16:	493e      	ldr	r1, [pc, #248]	@ (8001f10 <uartbyteToGnssMessage+0x26c>)
 8001e18:	483e      	ldr	r0, [pc, #248]	@ (8001f14 <uartbyteToGnssMessage+0x270>)
 8001e1a:	f7ff fc37 	bl	800168c <UART_Transmit_With_Color>
					freeBuffer(messageUBX->load);
 8001e1e:	4b3b      	ldr	r3, [pc, #236]	@ (8001f0c <uartbyteToGnssMessage+0x268>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7fe fc12 	bl	8000650 <freeBuffer>
					freeBuffer(messageUBX->brute);
 8001e2c:	4b37      	ldr	r3, [pc, #220]	@ (8001f0c <uartbyteToGnssMessage+0x268>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7fe fc0b 	bl	8000650 <freeBuffer>
					vPortFree(messageUBX);
 8001e3a:	4b34      	ldr	r3, [pc, #208]	@ (8001f0c <uartbyteToGnssMessage+0x268>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f00a ffd2 	bl	800cde8 <vPortFree>
					state = WAIT_FOR_SYNC_1;
 8001e44:	4b2e      	ldr	r3, [pc, #184]	@ (8001f00 <uartbyteToGnssMessage+0x25c>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	701a      	strb	r2, [r3, #0]
				if (messageUBX->load == NULL || messageUBX->brute == NULL) {
 8001e4a:	e053      	b.n	8001ef4 <uartbyteToGnssMessage+0x250>
				} else {
					payloadIndex = 0;
 8001e4c:	4b32      	ldr	r3, [pc, #200]	@ (8001f18 <uartbyteToGnssMessage+0x274>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	801a      	strh	r2, [r3, #0]
					messageUBX->brute->buffer[0]=0xb5;
 8001e52:	4b2e      	ldr	r3, [pc, #184]	@ (8001f0c <uartbyteToGnssMessage+0x268>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	22b5      	movs	r2, #181	@ 0xb5
 8001e5e:	701a      	strb	r2, [r3, #0]
					messageUBX->brute->buffer[1]=0x62;
 8001e60:	4b2a      	ldr	r3, [pc, #168]	@ (8001f0c <uartbyteToGnssMessage+0x268>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	2262      	movs	r2, #98	@ 0x62
 8001e6e:	701a      	strb	r2, [r3, #0]
					messageUBX->brute->buffer[2]=messageUBX->CLASS;
 8001e70:	4b26      	ldr	r3, [pc, #152]	@ (8001f0c <uartbyteToGnssMessage+0x268>)
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	4b25      	ldr	r3, [pc, #148]	@ (8001f0c <uartbyteToGnssMessage+0x268>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	3302      	adds	r3, #2
 8001e80:	7812      	ldrb	r2, [r2, #0]
 8001e82:	701a      	strb	r2, [r3, #0]
					messageUBX->brute->buffer[3]=messageUBX->ID;
 8001e84:	4b21      	ldr	r3, [pc, #132]	@ (8001f0c <uartbyteToGnssMessage+0x268>)
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	4b20      	ldr	r3, [pc, #128]	@ (8001f0c <uartbyteToGnssMessage+0x268>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	3303      	adds	r3, #3
 8001e94:	7852      	ldrb	r2, [r2, #1]
 8001e96:	701a      	strb	r2, [r3, #0]
					messageUBX->brute->buffer[4]=messageUBX->len_payload & 0x00FF;
 8001e98:	4b1c      	ldr	r3, [pc, #112]	@ (8001f0c <uartbyteToGnssMessage+0x268>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	885a      	ldrh	r2, [r3, #2]
 8001e9e:	4b1b      	ldr	r3, [pc, #108]	@ (8001f0c <uartbyteToGnssMessage+0x268>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	3304      	adds	r3, #4
 8001eaa:	b2d2      	uxtb	r2, r2
 8001eac:	701a      	strb	r2, [r3, #0]
					messageUBX->brute->buffer[5]=messageUBX->len_payload >> 8;
 8001eae:	4b17      	ldr	r3, [pc, #92]	@ (8001f0c <uartbyteToGnssMessage+0x268>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	885b      	ldrh	r3, [r3, #2]
 8001eb4:	0a1b      	lsrs	r3, r3, #8
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	4b14      	ldr	r3, [pc, #80]	@ (8001f0c <uartbyteToGnssMessage+0x268>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	3305      	adds	r3, #5
 8001ec4:	b2d2      	uxtb	r2, r2
 8001ec6:	701a      	strb	r2, [r3, #0]
					state = RECEIVE_MESSAGE;
 8001ec8:	4b0d      	ldr	r3, [pc, #52]	@ (8001f00 <uartbyteToGnssMessage+0x25c>)
 8001eca:	2206      	movs	r2, #6
 8001ecc:	701a      	strb	r2, [r3, #0]
				if (messageUBX->load == NULL || messageUBX->brute == NULL) {
 8001ece:	e011      	b.n	8001ef4 <uartbyteToGnssMessage+0x250>
				}
			} else {
				// Longueur invalide
				UART_Transmit_With_Color("\r\t\t\n...UARTByte --INVALID LENGTH-- FAILED...\r\n",ANSI_COLOR_RED);
 8001ed0:	490f      	ldr	r1, [pc, #60]	@ (8001f10 <uartbyteToGnssMessage+0x26c>)
 8001ed2:	4812      	ldr	r0, [pc, #72]	@ (8001f1c <uartbyteToGnssMessage+0x278>)
 8001ed4:	f7ff fbda 	bl	800168c <UART_Transmit_With_Color>
				vPortFree(messageUBX);
 8001ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8001f0c <uartbyteToGnssMessage+0x268>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f00a ff83 	bl	800cde8 <vPortFree>
				osSemaphoreRelease(GNSS_UART_AccessHandle);
 8001ee2:	4b09      	ldr	r3, [pc, #36]	@ (8001f08 <uartbyteToGnssMessage+0x264>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f007 fa2e 	bl	8009348 <osSemaphoreRelease>
				state = WAIT_FOR_SYNC_1;
 8001eec:	4b04      	ldr	r3, [pc, #16]	@ (8001f00 <uartbyteToGnssMessage+0x25c>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001ef2:	e077      	b.n	8001fe4 <uartbyteToGnssMessage+0x340>
 8001ef4:	e076      	b.n	8001fe4 <uartbyteToGnssMessage+0x340>
 8001ef6:	bf00      	nop
 8001ef8:	2000090c 	.word	0x2000090c
 8001efc:	200008d4 	.word	0x200008d4
 8001f00:	200008d5 	.word	0x200008d5
 8001f04:	e000007c 	.word	0xe000007c
 8001f08:	20000930 	.word	0x20000930
 8001f0c:	200008d8 	.word	0x200008d8
 8001f10:	08010c74 	.word	0x08010c74
 8001f14:	08010c7c 	.word	0x08010c7c
 8001f18:	200008d6 	.word	0x200008d6
 8001f1c:	08010ca8 	.word	0x08010ca8
		case RECEIVE_MESSAGE:
			payloadIndex++ ;
 8001f20:	4b32      	ldr	r3, [pc, #200]	@ (8001fec <uartbyteToGnssMessage+0x348>)
 8001f22:	881b      	ldrh	r3, [r3, #0]
 8001f24:	3301      	adds	r3, #1
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	4b30      	ldr	r3, [pc, #192]	@ (8001fec <uartbyteToGnssMessage+0x348>)
 8001f2a:	801a      	strh	r2, [r3, #0]
			if (payloadIndex < messageUBX->len_payload){
 8001f2c:	4b30      	ldr	r3, [pc, #192]	@ (8001ff0 <uartbyteToGnssMessage+0x34c>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	885a      	ldrh	r2, [r3, #2]
 8001f32:	4b2e      	ldr	r3, [pc, #184]	@ (8001fec <uartbyteToGnssMessage+0x348>)
 8001f34:	881b      	ldrh	r3, [r3, #0]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d909      	bls.n	8001f4e <uartbyteToGnssMessage+0x2aa>
				messageUBX->load->buffer[payloadIndex] = receivedByte;
 8001f3a:	4b2d      	ldr	r3, [pc, #180]	@ (8001ff0 <uartbyteToGnssMessage+0x34c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a29      	ldr	r2, [pc, #164]	@ (8001fec <uartbyteToGnssMessage+0x348>)
 8001f46:	8812      	ldrh	r2, [r2, #0]
 8001f48:	4413      	add	r3, r2
 8001f4a:	79fa      	ldrb	r2, [r7, #7]
 8001f4c:	701a      	strb	r2, [r3, #0]
			}
			if (payloadIndex <= messageUBX->len_payload + 2){
 8001f4e:	4b27      	ldr	r3, [pc, #156]	@ (8001fec <uartbyteToGnssMessage+0x348>)
 8001f50:	881b      	ldrh	r3, [r3, #0]
 8001f52:	461a      	mov	r2, r3
 8001f54:	4b26      	ldr	r3, [pc, #152]	@ (8001ff0 <uartbyteToGnssMessage+0x34c>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	885b      	ldrh	r3, [r3, #2]
 8001f5a:	3302      	adds	r3, #2
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	dc0a      	bgt.n	8001f76 <uartbyteToGnssMessage+0x2d2>
				messageUBX->brute->buffer[6 + payloadIndex] = receivedByte;
 8001f60:	4b23      	ldr	r3, [pc, #140]	@ (8001ff0 <uartbyteToGnssMessage+0x34c>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a20      	ldr	r2, [pc, #128]	@ (8001fec <uartbyteToGnssMessage+0x348>)
 8001f6c:	8812      	ldrh	r2, [r2, #0]
 8001f6e:	3206      	adds	r2, #6
 8001f70:	4413      	add	r3, r2
 8001f72:	79fa      	ldrb	r2, [r7, #7]
 8001f74:	701a      	strb	r2, [r3, #0]
			}
			if  (payloadIndex == messageUBX->len_payload + 2){
 8001f76:	4b1d      	ldr	r3, [pc, #116]	@ (8001fec <uartbyteToGnssMessage+0x348>)
 8001f78:	881b      	ldrh	r3, [r3, #0]
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ff0 <uartbyteToGnssMessage+0x34c>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	885b      	ldrh	r3, [r3, #2]
 8001f82:	3302      	adds	r3, #2
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d12c      	bne.n	8001fe2 <uartbyteToGnssMessage+0x33e>

				UBXMessageQ_t gnssMsg = { .UBXMessage = messageUBX };
 8001f88:	4b19      	ldr	r3, [pc, #100]	@ (8001ff0 <uartbyteToGnssMessage+0x34c>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	603b      	str	r3, [r7, #0]
				if (xQueueSendToBack(UBXQueueHandle, &gnssMsg, portMAX_DELAY) != pdTRUE) {
 8001f8e:	4b19      	ldr	r3, [pc, #100]	@ (8001ff4 <uartbyteToGnssMessage+0x350>)
 8001f90:	6818      	ldr	r0, [r3, #0]
 8001f92:	4639      	mov	r1, r7
 8001f94:	2300      	movs	r3, #0
 8001f96:	f04f 32ff 	mov.w	r2, #4294967295
 8001f9a:	f007 fd0d 	bl	80099b8 <xQueueGenericSend>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d004      	beq.n	8001fae <uartbyteToGnssMessage+0x30a>
					// Erreur d'envoi dans la queue
					UART_Transmit_With_Color("\r\t\t\n...UARTByte --SendQueue-- FAILED...\r\n",ANSI_COLOR_RED);
 8001fa4:	4914      	ldr	r1, [pc, #80]	@ (8001ff8 <uartbyteToGnssMessage+0x354>)
 8001fa6:	4815      	ldr	r0, [pc, #84]	@ (8001ffc <uartbyteToGnssMessage+0x358>)
 8001fa8:	f7ff fb70 	bl	800168c <UART_Transmit_With_Color>
 8001fac:	e003      	b.n	8001fb6 <uartbyteToGnssMessage+0x312>

				}else{
					UART_Transmit_With_Color("\r\n...[INFO] UARTByte --SendQueue-- SUCCESS...\r\n",ANSI_COLOR_RESET);
 8001fae:	4914      	ldr	r1, [pc, #80]	@ (8002000 <uartbyteToGnssMessage+0x35c>)
 8001fb0:	4814      	ldr	r0, [pc, #80]	@ (8002004 <uartbyteToGnssMessage+0x360>)
 8001fb2:	f7ff fb6b 	bl	800168c <UART_Transmit_With_Color>
				}
				ITM_Port32(31)=9999;
 8001fb6:	4b14      	ldr	r3, [pc, #80]	@ (8002008 <uartbyteToGnssMessage+0x364>)
 8001fb8:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001fbc:	601a      	str	r2, [r3, #0]
				messageUBX = NULL;
 8001fbe:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff0 <uartbyteToGnssMessage+0x34c>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
				//freeBuffer(messageUBX->load);
				//freeBuffer(messageUBX->brute);
				//vPortFree(messageUBX);
				//messageUBX = NULL;

				state = WAIT_FOR_SYNC_1;
 8001fc4:	4b11      	ldr	r3, [pc, #68]	@ (800200c <uartbyteToGnssMessage+0x368>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	701a      	strb	r2, [r3, #0]
				osSemaphoreRelease(GNSS_UART_AccessHandle);
 8001fca:	4b11      	ldr	r3, [pc, #68]	@ (8002010 <uartbyteToGnssMessage+0x36c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f007 f9ba 	bl	8009348 <osSemaphoreRelease>
			}
			break;
 8001fd4:	e005      	b.n	8001fe2 <uartbyteToGnssMessage+0x33e>
		default:
			state = WAIT_FOR_SYNC_1;
 8001fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800200c <uartbyteToGnssMessage+0x368>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	701a      	strb	r2, [r3, #0]
			break;
 8001fdc:	e002      	b.n	8001fe4 <uartbyteToGnssMessage+0x340>
			break;
 8001fde:	bf00      	nop
 8001fe0:	e000      	b.n	8001fe4 <uartbyteToGnssMessage+0x340>
			break;
 8001fe2:	bf00      	nop
		}
	}
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd90      	pop	{r4, r7, pc}
 8001fec:	200008d6 	.word	0x200008d6
 8001ff0:	200008d8 	.word	0x200008d8
 8001ff4:	20000910 	.word	0x20000910
 8001ff8:	08010c74 	.word	0x08010c74
 8001ffc:	08010cd8 	.word	0x08010cd8
 8002000:	08010d04 	.word	0x08010d04
 8002004:	08010d0c 	.word	0x08010d0c
 8002008:	e000007c 	.word	0xe000007c
 800200c:	200008d5 	.word	0x200008d5
 8002010:	20000930 	.word	0x20000930

08002014 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b08a      	sub	sp, #40	@ 0x28
 8002018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800201a:	1d3b      	adds	r3, r7, #4
 800201c:	2224      	movs	r2, #36	@ 0x24
 800201e:	2100      	movs	r1, #0
 8002020:	4618      	mov	r0, r3
 8002022:	f00d ff97 	bl	800ff54 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8002026:	4b17      	ldr	r3, [pc, #92]	@ (8002084 <MX_DAC1_Init+0x70>)
 8002028:	4a17      	ldr	r2, [pc, #92]	@ (8002088 <MX_DAC1_Init+0x74>)
 800202a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800202c:	4815      	ldr	r0, [pc, #84]	@ (8002084 <MX_DAC1_Init+0x70>)
 800202e:	f001 faf5 	bl	800361c <HAL_DAC_Init>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8002038:	f000 fc5a 	bl	80028f0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800203c:	2300      	movs	r3, #0
 800203e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002040:	2300      	movs	r3, #0
 8002042:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002044:	2300      	movs	r3, #0
 8002046:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8002048:	2300      	movs	r3, #0
 800204a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800204c:	2300      	movs	r3, #0
 800204e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002050:	1d3b      	adds	r3, r7, #4
 8002052:	2200      	movs	r2, #0
 8002054:	4619      	mov	r1, r3
 8002056:	480b      	ldr	r0, [pc, #44]	@ (8002084 <MX_DAC1_Init+0x70>)
 8002058:	f001 fb02 	bl	8003660 <HAL_DAC_ConfigChannel>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8002062:	f000 fc45 	bl	80028f0 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8002066:	1d3b      	adds	r3, r7, #4
 8002068:	2210      	movs	r2, #16
 800206a:	4619      	mov	r1, r3
 800206c:	4805      	ldr	r0, [pc, #20]	@ (8002084 <MX_DAC1_Init+0x70>)
 800206e:	f001 faf7 	bl	8003660 <HAL_DAC_ConfigChannel>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8002078:	f000 fc3a 	bl	80028f0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800207c:	bf00      	nop
 800207e:	3728      	adds	r7, #40	@ 0x28
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	200008dc 	.word	0x200008dc
 8002088:	40007400 	.word	0x40007400

0800208c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b08a      	sub	sp, #40	@ 0x28
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002094:	f107 0314 	add.w	r3, r7, #20
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	605a      	str	r2, [r3, #4]
 800209e:	609a      	str	r2, [r3, #8]
 80020a0:	60da      	str	r2, [r3, #12]
 80020a2:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a15      	ldr	r2, [pc, #84]	@ (8002100 <HAL_DAC_MspInit+0x74>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d124      	bne.n	80020f8 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80020ae:	4b15      	ldr	r3, [pc, #84]	@ (8002104 <HAL_DAC_MspInit+0x78>)
 80020b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020b2:	4a14      	ldr	r2, [pc, #80]	@ (8002104 <HAL_DAC_MspInit+0x78>)
 80020b4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80020b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80020ba:	4b12      	ldr	r3, [pc, #72]	@ (8002104 <HAL_DAC_MspInit+0x78>)
 80020bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80020c2:	613b      	str	r3, [r7, #16]
 80020c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020c6:	4b0f      	ldr	r3, [pc, #60]	@ (8002104 <HAL_DAC_MspInit+0x78>)
 80020c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ca:	4a0e      	ldr	r2, [pc, #56]	@ (8002104 <HAL_DAC_MspInit+0x78>)
 80020cc:	f043 0301 	orr.w	r3, r3, #1
 80020d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020d2:	4b0c      	ldr	r3, [pc, #48]	@ (8002104 <HAL_DAC_MspInit+0x78>)
 80020d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = STM_DAC_TRIG_Pin|STM_DAC_CS_Pin;
 80020de:	2330      	movs	r3, #48	@ 0x30
 80020e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020e2:	2303      	movs	r3, #3
 80020e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e6:	2300      	movs	r3, #0
 80020e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ea:	f107 0314 	add.w	r3, r7, #20
 80020ee:	4619      	mov	r1, r3
 80020f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020f4:	f001 fdc2 	bl	8003c7c <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 80020f8:	bf00      	nop
 80020fa:	3728      	adds	r7, #40	@ 0x28
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40007400 	.word	0x40007400
 8002104:	40021000 	.word	0x40021000

08002108 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800210e:	4b0c      	ldr	r3, [pc, #48]	@ (8002140 <MX_DMA_Init+0x38>)
 8002110:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002112:	4a0b      	ldr	r2, [pc, #44]	@ (8002140 <MX_DMA_Init+0x38>)
 8002114:	f043 0301 	orr.w	r3, r3, #1
 8002118:	6493      	str	r3, [r2, #72]	@ 0x48
 800211a:	4b09      	ldr	r3, [pc, #36]	@ (8002140 <MX_DMA_Init+0x38>)
 800211c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	607b      	str	r3, [r7, #4]
 8002124:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8002126:	2200      	movs	r2, #0
 8002128:	2105      	movs	r1, #5
 800212a:	200c      	movs	r0, #12
 800212c:	f001 fa4c 	bl	80035c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002130:	200c      	movs	r0, #12
 8002132:	f001 fa65 	bl	8003600 <HAL_NVIC_EnableIRQ>

}
 8002136:	bf00      	nop
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40021000 	.word	0x40021000

08002144 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
}
 8002148:	bf00      	nop
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <getRunTimeCounterValue>:
extern volatile unsigned long ulHighFrequencyTimerTicks;
__weak unsigned long getRunTimeCounterValue(void)
{
 8002152:	b480      	push	{r7}
 8002154:	af00      	add	r7, sp, #0
	return 0;
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
	...

08002164 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	4a07      	ldr	r2, [pc, #28]	@ (8002190 <vApplicationGetIdleTaskMemory+0x2c>)
 8002174:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	4a06      	ldr	r2, [pc, #24]	@ (8002194 <vApplicationGetIdleTaskMemory+0x30>)
 800217a:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002182:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 8002184:	bf00      	nop
 8002186:	3714      	adds	r7, #20
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	2000093c 	.word	0x2000093c
 8002194:	200009e8 	.word	0x200009e8

08002198 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
	*ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	4a07      	ldr	r2, [pc, #28]	@ (80021c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80021a8:	601a      	str	r2, [r3, #0]
	*ppxTimerTaskStackBuffer = &xTimerStack[0];
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	4a06      	ldr	r2, [pc, #24]	@ (80021c8 <vApplicationGetTimerTaskMemory+0x30>)
 80021ae:	601a      	str	r2, [r3, #0]
	*pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021b6:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 80021b8:	bf00      	nop
 80021ba:	3714      	adds	r7, #20
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	200011e8 	.word	0x200011e8
 80021c8:	20001294 	.word	0x20001294

080021cc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80021cc:	b5b0      	push	{r4, r5, r7, lr}
 80021ce:	b0d2      	sub	sp, #328	@ 0x148
 80021d0:	af00      	add	r7, sp, #0
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of xSem_LORAReceive_start */
  osSemaphoreDef(xSem_LORAReceive_start);
 80021d2:	2300      	movs	r3, #0
 80021d4:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 80021d8:	2300      	movs	r3, #0
 80021da:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
  xSem_LORAReceive_startHandle = osSemaphoreCreate(osSemaphore(xSem_LORAReceive_start), 1);
 80021de:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80021e2:	2101      	movs	r1, #1
 80021e4:	4618      	mov	r0, r3
 80021e6:	f007 f82e 	bl	8009246 <osSemaphoreCreate>
 80021ea:	4603      	mov	r3, r0
 80021ec:	4a8d      	ldr	r2, [pc, #564]	@ (8002424 <MX_FREERTOS_Init+0x258>)
 80021ee:	6013      	str	r3, [r2, #0]

  /* definition and creation of SD_Access_GNSS_Return */
  osSemaphoreDef(SD_Access_GNSS_Return);
 80021f0:	2300      	movs	r3, #0
 80021f2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80021f6:	2300      	movs	r3, #0
 80021f8:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
  SD_Access_GNSS_ReturnHandle = osSemaphoreCreate(osSemaphore(SD_Access_GNSS_Return), 1);
 80021fc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002200:	2101      	movs	r1, #1
 8002202:	4618      	mov	r0, r3
 8002204:	f007 f81f 	bl	8009246 <osSemaphoreCreate>
 8002208:	4603      	mov	r3, r0
 800220a:	4a87      	ldr	r2, [pc, #540]	@ (8002428 <MX_FREERTOS_Init+0x25c>)
 800220c:	6013      	str	r3, [r2, #0]

  /* definition and creation of LORA_Access_GNSS_Return */
  osSemaphoreDef(LORA_Access_GNSS_Return);
 800220e:	2300      	movs	r3, #0
 8002210:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8002214:	2300      	movs	r3, #0
 8002216:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  LORA_Access_GNSS_ReturnHandle = osSemaphoreCreate(osSemaphore(LORA_Access_GNSS_Return), 1);
 800221a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800221e:	2101      	movs	r1, #1
 8002220:	4618      	mov	r0, r3
 8002222:	f007 f810 	bl	8009246 <osSemaphoreCreate>
 8002226:	4603      	mov	r3, r0
 8002228:	4a80      	ldr	r2, [pc, #512]	@ (800242c <MX_FREERTOS_Init+0x260>)
 800222a:	6013      	str	r3, [r2, #0]

  /* definition and creation of GNSS_UART_Access */
  osSemaphoreDef(GNSS_UART_Access);
 800222c:	2300      	movs	r3, #0
 800222e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002232:	2300      	movs	r3, #0
 8002234:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  GNSS_UART_AccessHandle = osSemaphoreCreate(osSemaphore(GNSS_UART_Access), 1);
 8002238:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800223c:	2101      	movs	r1, #1
 800223e:	4618      	mov	r0, r3
 8002240:	f007 f801 	bl	8009246 <osSemaphoreCreate>
 8002244:	4603      	mov	r3, r0
 8002246:	4a7a      	ldr	r2, [pc, #488]	@ (8002430 <MX_FREERTOS_Init+0x264>)
 8002248:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of UARTbyte */
  osMessageQDef(UARTbyte, 1, uint8_t);
 800224a:	4b7a      	ldr	r3, [pc, #488]	@ (8002434 <MX_FREERTOS_Init+0x268>)
 800224c:	f507 748c 	add.w	r4, r7, #280	@ 0x118
 8002250:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002252:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  UARTbyteHandle = osMessageCreate(osMessageQ(UARTbyte), NULL);
 8002256:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800225a:	2100      	movs	r1, #0
 800225c:	4618      	mov	r0, r3
 800225e:	f007 f906 	bl	800946e <osMessageCreate>
 8002262:	4603      	mov	r3, r0
 8002264:	4a74      	ldr	r2, [pc, #464]	@ (8002438 <MX_FREERTOS_Init+0x26c>)
 8002266:	6013      	str	r3, [r2, #0]

  /* definition and creation of UBXQueue */
  osMessageQDef(UBXQueue, 16, UBXMessageQ_t);
 8002268:	4b74      	ldr	r3, [pc, #464]	@ (800243c <MX_FREERTOS_Init+0x270>)
 800226a:	f507 7484 	add.w	r4, r7, #264	@ 0x108
 800226e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002270:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  UBXQueueHandle = osMessageCreate(osMessageQ(UBXQueue), NULL);
 8002274:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002278:	2100      	movs	r1, #0
 800227a:	4618      	mov	r0, r3
 800227c:	f007 f8f7 	bl	800946e <osMessageCreate>
 8002280:	4603      	mov	r3, r0
 8002282:	4a6f      	ldr	r2, [pc, #444]	@ (8002440 <MX_FREERTOS_Init+0x274>)
 8002284:	6013      	str	r3, [r2, #0]

  /* definition and creation of GNSS_Request */
  osMessageQDef(GNSS_Request, 16, GNSSRequestQ_t);
 8002286:	4b6f      	ldr	r3, [pc, #444]	@ (8002444 <MX_FREERTOS_Init+0x278>)
 8002288:	f107 04f8 	add.w	r4, r7, #248	@ 0xf8
 800228c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800228e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  GNSS_RequestHandle = osMessageCreate(osMessageQ(GNSS_Request), NULL);
 8002292:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8002296:	2100      	movs	r1, #0
 8002298:	4618      	mov	r0, r3
 800229a:	f007 f8e8 	bl	800946e <osMessageCreate>
 800229e:	4603      	mov	r3, r0
 80022a0:	4a69      	ldr	r2, [pc, #420]	@ (8002448 <MX_FREERTOS_Init+0x27c>)
 80022a2:	6013      	str	r3, [r2, #0]

  /* definition and creation of GNSS_Return */
  osMessageQDef(GNSS_Return, 16, GNSSReturnQ_t);
 80022a4:	4b69      	ldr	r3, [pc, #420]	@ (800244c <MX_FREERTOS_Init+0x280>)
 80022a6:	f107 04e8 	add.w	r4, r7, #232	@ 0xe8
 80022aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  GNSS_ReturnHandle = osMessageCreate(osMessageQ(GNSS_Return), NULL);
 80022b0:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 80022b4:	2100      	movs	r1, #0
 80022b6:	4618      	mov	r0, r3
 80022b8:	f007 f8d9 	bl	800946e <osMessageCreate>
 80022bc:	4603      	mov	r3, r0
 80022be:	4a64      	ldr	r2, [pc, #400]	@ (8002450 <MX_FREERTOS_Init+0x284>)
 80022c0:	6013      	str	r3, [r2, #0]

  /* definition and creation of UARTdebug */
  osMessageQDef(UARTdebug, 128, UARTdebugQ_t);
 80022c2:	4b64      	ldr	r3, [pc, #400]	@ (8002454 <MX_FREERTOS_Init+0x288>)
 80022c4:	f107 04d8 	add.w	r4, r7, #216	@ 0xd8
 80022c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  UARTdebugHandle = osMessageCreate(osMessageQ(UARTdebug), NULL);
 80022ce:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 80022d2:	2100      	movs	r1, #0
 80022d4:	4618      	mov	r0, r3
 80022d6:	f007 f8ca 	bl	800946e <osMessageCreate>
 80022da:	4603      	mov	r3, r0
 80022dc:	4a5e      	ldr	r2, [pc, #376]	@ (8002458 <MX_FREERTOS_Init+0x28c>)
 80022de:	6013      	str	r3, [r2, #0]

  /* definition and creation of GNSS_toPoll */
  osMessageQDef(GNSS_toPoll, 16, GNSStoPollQ_t);
 80022e0:	4b5e      	ldr	r3, [pc, #376]	@ (800245c <MX_FREERTOS_Init+0x290>)
 80022e2:	f107 04c8 	add.w	r4, r7, #200	@ 0xc8
 80022e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  GNSS_toPollHandle = osMessageCreate(osMessageQ(GNSS_toPoll), NULL);
 80022ec:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 80022f0:	2100      	movs	r1, #0
 80022f2:	4618      	mov	r0, r3
 80022f4:	f007 f8bb 	bl	800946e <osMessageCreate>
 80022f8:	4603      	mov	r3, r0
 80022fa:	4a59      	ldr	r2, [pc, #356]	@ (8002460 <MX_FREERTOS_Init+0x294>)
 80022fc:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of InitTask */
  osThreadDef(InitTask, StartInitTask, osPriorityRealtime, 0, 1024);
 80022fe:	4b59      	ldr	r3, [pc, #356]	@ (8002464 <MX_FREERTOS_Init+0x298>)
 8002300:	f107 04ac 	add.w	r4, r7, #172	@ 0xac
 8002304:	461d      	mov	r5, r3
 8002306:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002308:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800230a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800230e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  InitTaskHandle = osThreadCreate(osThread(InitTask), NULL);
 8002312:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002316:	2100      	movs	r1, #0
 8002318:	4618      	mov	r0, r3
 800231a:	f006 ff3c 	bl	8009196 <osThreadCreate>
 800231e:	4603      	mov	r3, r0
 8002320:	4a51      	ldr	r2, [pc, #324]	@ (8002468 <MX_FREERTOS_Init+0x29c>)
 8002322:	6013      	str	r3, [r2, #0]

  /* definition and creation of ReceivedLORA */
  osThreadDef(ReceivedLORA, ReceivedLORATask, osPriorityNormal, 0, 5120);
 8002324:	4b51      	ldr	r3, [pc, #324]	@ (800246c <MX_FREERTOS_Init+0x2a0>)
 8002326:	f107 0490 	add.w	r4, r7, #144	@ 0x90
 800232a:	461d      	mov	r5, r3
 800232c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800232e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002330:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002334:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ReceivedLORAHandle = osThreadCreate(osThread(ReceivedLORA), NULL);
 8002338:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800233c:	2100      	movs	r1, #0
 800233e:	4618      	mov	r0, r3
 8002340:	f006 ff29 	bl	8009196 <osThreadCreate>
 8002344:	4603      	mov	r3, r0
 8002346:	4a4a      	ldr	r2, [pc, #296]	@ (8002470 <MX_FREERTOS_Init+0x2a4>)
 8002348:	6013      	str	r3, [r2, #0]

  /* definition and creation of UARTbyte_to_GN */
  osThreadDef(UARTbyte_to_GN, UARTbyte_to_GNSSMessage_Task, osPriorityHigh, 0, 2048);
 800234a:	4b4a      	ldr	r3, [pc, #296]	@ (8002474 <MX_FREERTOS_Init+0x2a8>)
 800234c:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 8002350:	461d      	mov	r5, r3
 8002352:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002354:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002356:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800235a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UARTbyte_to_GNHandle = osThreadCreate(osThread(UARTbyte_to_GN), NULL);
 800235e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002362:	2100      	movs	r1, #0
 8002364:	4618      	mov	r0, r3
 8002366:	f006 ff16 	bl	8009196 <osThreadCreate>
 800236a:	4603      	mov	r3, r0
 800236c:	4a42      	ldr	r2, [pc, #264]	@ (8002478 <MX_FREERTOS_Init+0x2ac>)
 800236e:	6013      	str	r3, [r2, #0]

  /* definition and creation of Matcher */
  osThreadDef(Matcher, MatcherTask, osPriorityNormal, 0, 1024);
 8002370:	4b42      	ldr	r3, [pc, #264]	@ (800247c <MX_FREERTOS_Init+0x2b0>)
 8002372:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8002376:	461d      	mov	r5, r3
 8002378:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800237a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800237c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002380:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MatcherHandle = osThreadCreate(osThread(Matcher), NULL);
 8002384:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002388:	2100      	movs	r1, #0
 800238a:	4618      	mov	r0, r3
 800238c:	f006 ff03 	bl	8009196 <osThreadCreate>
 8002390:	4603      	mov	r3, r0
 8002392:	4a3b      	ldr	r2, [pc, #236]	@ (8002480 <MX_FREERTOS_Init+0x2b4>)
 8002394:	6013      	str	r3, [r2, #0]

  /* definition and creation of Fake_SDuse */
  osThreadDef(Fake_SDuse, Fake_SDuse_Task, osPriorityNormal, 0, 2048);
 8002396:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800239a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800239e:	4a39      	ldr	r2, [pc, #228]	@ (8002484 <MX_FREERTOS_Init+0x2b8>)
 80023a0:	461c      	mov	r4, r3
 80023a2:	4615      	mov	r5, r2
 80023a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80023ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Fake_SDuseHandle = osThreadCreate(osThread(Fake_SDuse), NULL);
 80023b0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80023b4:	2100      	movs	r1, #0
 80023b6:	4618      	mov	r0, r3
 80023b8:	f006 feed 	bl	8009196 <osThreadCreate>
 80023bc:	4603      	mov	r3, r0
 80023be:	4a32      	ldr	r2, [pc, #200]	@ (8002488 <MX_FREERTOS_Init+0x2bc>)
 80023c0:	6013      	str	r3, [r2, #0]

  /* definition and creation of UartDebug */
  osThreadDef(UartDebug, UartDebugTask, osPriorityNormal, 0, 2048);
 80023c2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80023c6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80023ca:	4a30      	ldr	r2, [pc, #192]	@ (800248c <MX_FREERTOS_Init+0x2c0>)
 80023cc:	461c      	mov	r4, r3
 80023ce:	4615      	mov	r5, r2
 80023d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80023d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UartDebugHandle = osThreadCreate(osThread(UartDebug), NULL);
 80023dc:	f107 0320 	add.w	r3, r7, #32
 80023e0:	2100      	movs	r1, #0
 80023e2:	4618      	mov	r0, r3
 80023e4:	f006 fed7 	bl	8009196 <osThreadCreate>
 80023e8:	4603      	mov	r3, r0
 80023ea:	4a29      	ldr	r2, [pc, #164]	@ (8002490 <MX_FREERTOS_Init+0x2c4>)
 80023ec:	6013      	str	r3, [r2, #0]

  /* definition and creation of commandToGNSS */
  osThreadDef(commandToGNSS, commandToGNSSTask, osPriorityRealtime, 0, 512);
 80023ee:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80023f2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80023f6:	4a27      	ldr	r2, [pc, #156]	@ (8002494 <MX_FREERTOS_Init+0x2c8>)
 80023f8:	461c      	mov	r4, r3
 80023fa:	4615      	mov	r5, r2
 80023fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002400:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002404:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  commandToGNSSHandle = osThreadCreate(osThread(commandToGNSS), NULL);
 8002408:	1d3b      	adds	r3, r7, #4
 800240a:	2100      	movs	r1, #0
 800240c:	4618      	mov	r0, r3
 800240e:	f006 fec2 	bl	8009196 <osThreadCreate>
 8002412:	4603      	mov	r3, r0
 8002414:	4a20      	ldr	r2, [pc, #128]	@ (8002498 <MX_FREERTOS_Init+0x2cc>)
 8002416:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002418:	bf00      	nop
 800241a:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 800241e:	46bd      	mov	sp, r7
 8002420:	bdb0      	pop	{r4, r5, r7, pc}
 8002422:	bf00      	nop
 8002424:	20000924 	.word	0x20000924
 8002428:	20000928 	.word	0x20000928
 800242c:	2000092c 	.word	0x2000092c
 8002430:	20000930 	.word	0x20000930
 8002434:	08010d3c 	.word	0x08010d3c
 8002438:	2000090c 	.word	0x2000090c
 800243c:	08010d4c 	.word	0x08010d4c
 8002440:	20000910 	.word	0x20000910
 8002444:	08010d5c 	.word	0x08010d5c
 8002448:	20000914 	.word	0x20000914
 800244c:	08010d6c 	.word	0x08010d6c
 8002450:	20000918 	.word	0x20000918
 8002454:	08010d7c 	.word	0x08010d7c
 8002458:	2000091c 	.word	0x2000091c
 800245c:	08010d8c 	.word	0x08010d8c
 8002460:	20000920 	.word	0x20000920
 8002464:	08010da8 	.word	0x08010da8
 8002468:	200008f0 	.word	0x200008f0
 800246c:	08010dd4 	.word	0x08010dd4
 8002470:	200008f4 	.word	0x200008f4
 8002474:	08010e00 	.word	0x08010e00
 8002478:	200008f8 	.word	0x200008f8
 800247c:	08010e24 	.word	0x08010e24
 8002480:	200008fc 	.word	0x200008fc
 8002484:	08010e4c 	.word	0x08010e4c
 8002488:	20000900 	.word	0x20000900
 800248c:	08010e74 	.word	0x08010e74
 8002490:	20000904 	.word	0x20000904
 8002494:	08010ea0 	.word	0x08010ea0
 8002498:	20000908 	.word	0x20000908

0800249c <StartInitTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartInitTask */
void StartInitTask(void const * argument)
{
 800249c:	b590      	push	{r4, r7, lr}
 800249e:	b08b      	sub	sp, #44	@ 0x2c
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartInitTask */
	MX_USB_OTG_FS_PCD_Init();
 80024a4:	f000 fe88 	bl	80031b8 <MX_USB_OTG_FS_PCD_Init>

	const char startMessage[] = "\r\nStarting...\r\n";
 80024a8:	4b24      	ldr	r3, [pc, #144]	@ (800253c <StartInitTask+0xa0>)
 80024aa:	f107 0418 	add.w	r4, r7, #24
 80024ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	const char initDoneMessage[] = "\r\nInit Done\r\n\n";
 80024b4:	4b22      	ldr	r3, [pc, #136]	@ (8002540 <StartInitTask+0xa4>)
 80024b6:	f107 0408 	add.w	r4, r7, #8
 80024ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024bc:	c407      	stmia	r4!, {r0, r1, r2}
 80024be:	8023      	strh	r3, [r4, #0]
 80024c0:	3402      	adds	r4, #2
 80024c2:	0c1b      	lsrs	r3, r3, #16
 80024c4:	7023      	strb	r3, [r4, #0]

	HAL_UART_Transmit(&huart1, (uint8_t *)startMessage, sizeof(startMessage), 10);
 80024c6:	f107 0118 	add.w	r1, r7, #24
 80024ca:	230a      	movs	r3, #10
 80024cc:	2210      	movs	r2, #16
 80024ce:	481d      	ldr	r0, [pc, #116]	@ (8002544 <StartInitTask+0xa8>)
 80024d0:	f004 fef0 	bl	80072b4 <HAL_UART_Transmit>

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4,GPIO_PIN_SET);
 80024d4:	2201      	movs	r2, #1
 80024d6:	2110      	movs	r1, #16
 80024d8:	481b      	ldr	r0, [pc, #108]	@ (8002548 <StartInitTask+0xac>)
 80024da:	f001 fd61 	bl	8003fa0 <HAL_GPIO_WritePin>
	GNSSCom_Init(&huart3,&huart1);
 80024de:	4919      	ldr	r1, [pc, #100]	@ (8002544 <StartInitTask+0xa8>)
 80024e0:	481a      	ldr	r0, [pc, #104]	@ (800254c <StartInitTask+0xb0>)
 80024e2:	f7fe f855 	bl	8000590 <GNSSCom_Init>
	LORACom_Init(&hspi2, &huart1);
 80024e6:	4917      	ldr	r1, [pc, #92]	@ (8002544 <StartInitTask+0xa8>)
 80024e8:	4819      	ldr	r0, [pc, #100]	@ (8002550 <StartInitTask+0xb4>)
 80024ea:	f7fe fd49 	bl	8000f80 <LORACom_Init>
	RFM9x_Init();
 80024ee:	f7fe fe01 	bl	80010f4 <RFM9x_Init>
	initPool(&poolUBX,2048);
 80024f2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80024f6:	4817      	ldr	r0, [pc, #92]	@ (8002554 <StartInitTask+0xb8>)
 80024f8:	f000 f878 	bl	80025ec <initPool>
	initPool(&poolDebug,2048);
 80024fc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002500:	4815      	ldr	r0, [pc, #84]	@ (8002558 <StartInitTask+0xbc>)
 8002502:	f000 f873 	bl	80025ec <initPool>
	HAL_UART_Transmit(&huart1, (uint8_t *)initDoneMessage, sizeof(initDoneMessage), 10);
 8002506:	f107 0108 	add.w	r1, r7, #8
 800250a:	230a      	movs	r3, #10
 800250c:	220f      	movs	r2, #15
 800250e:	480d      	ldr	r0, [pc, #52]	@ (8002544 <StartInitTask+0xa8>)
 8002510:	f004 fed0 	bl	80072b4 <HAL_UART_Transmit>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8002514:	b662      	cpsie	i
}
 8002516:	bf00      	nop
	__enable_irq();

	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_5);
 8002518:	2110      	movs	r1, #16
 800251a:	480b      	ldr	r0, [pc, #44]	@ (8002548 <StartInitTask+0xac>)
 800251c:	f001 fd58 	bl	8003fd0 <HAL_GPIO_TogglePin>
 8002520:	2120      	movs	r1, #32
 8002522:	4809      	ldr	r0, [pc, #36]	@ (8002548 <StartInitTask+0xac>)
 8002524:	f001 fd54 	bl	8003fd0 <HAL_GPIO_TogglePin>
	osThreadTerminate(InitTaskHandle);
 8002528:	4b0c      	ldr	r3, [pc, #48]	@ (800255c <StartInitTask+0xc0>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4618      	mov	r0, r3
 800252e:	f006 fe7e 	bl	800922e <osThreadTerminate>
  /* USER CODE END StartInitTask */
}
 8002532:	bf00      	nop
 8002534:	372c      	adds	r7, #44	@ 0x2c
 8002536:	46bd      	mov	sp, r7
 8002538:	bd90      	pop	{r4, r7, pc}
 800253a:	bf00      	nop
 800253c:	08010ebc 	.word	0x08010ebc
 8002540:	08010ecc 	.word	0x08010ecc
 8002544:	200023ac 	.word	0x200023ac
 8002548:	48001000 	.word	0x48001000
 800254c:	200024bc 	.word	0x200024bc
 8002550:	200022f8 	.word	0x200022f8
 8002554:	20000934 	.word	0x20000934
 8002558:	20000938 	.word	0x20000938
 800255c:	200008f0 	.word	0x200008f0

08002560 <ReceivedLORATask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ReceivedLORATask */
void ReceivedLORATask(void const * argument)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ReceivedLORATask */
	/* Infinite loop */
	for(;;)
	{
		receivedLora();
 8002568:	f7ff fa76 	bl	8001a58 <receivedLora>
		vTaskDelay(1);
 800256c:	2001      	movs	r0, #1
 800256e:	f008 fe65 	bl	800b23c <vTaskDelay>
		receivedLora();
 8002572:	bf00      	nop
 8002574:	e7f8      	b.n	8002568 <ReceivedLORATask+0x8>

08002576 <UARTbyte_to_GNSSMessage_Task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_UARTbyte_to_GNSSMessage_Task */
void UARTbyte_to_GNSSMessage_Task(void const * argument)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b082      	sub	sp, #8
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]


	/* Infinite loop */
	for(;;)
	{
		uartbyteToGnssMessage();
 800257e:	f7ff fb91 	bl	8001ca4 <uartbyteToGnssMessage>
 8002582:	e7fc      	b.n	800257e <UARTbyte_to_GNSSMessage_Task+0x8>

08002584 <MatcherTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_MatcherTask */
void MatcherTask(void const * argument)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MatcherTask */
	/* Infinite loop */
	for(;;)
	{
		matcher();
 800258c:	f7ff f9a4 	bl	80018d8 <matcher>
		vTaskDelay(1);
 8002590:	2001      	movs	r0, #1
 8002592:	f008 fe53 	bl	800b23c <vTaskDelay>
		matcher();
 8002596:	bf00      	nop
 8002598:	e7f8      	b.n	800258c <MatcherTask+0x8>

0800259a <Fake_SDuse_Task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Fake_SDuse_Task */
void Fake_SDuse_Task(void const * argument)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b084      	sub	sp, #16
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Fake_SDuse_Task */
	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 80025a2:	f008 ffb1 	bl	800b508 <xTaskGetTickCount>
 80025a6:	4603      	mov	r3, r0
 80025a8:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	for(;;)
	{

		fakeuseSD();
 80025aa:	f7ff f8e3 	bl	8001774 <fakeuseSD>
		vTaskDelayUntil(&xLastWakeTime,1000);
 80025ae:	f107 030c 	add.w	r3, r7, #12
 80025b2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80025b6:	4618      	mov	r0, r3
 80025b8:	f008 fdbc 	bl	800b134 <vTaskDelayUntil>
		fakeuseSD();
 80025bc:	bf00      	nop
 80025be:	e7f4      	b.n	80025aa <Fake_SDuse_Task+0x10>

080025c0 <UartDebugTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_UartDebugTask */
void UartDebugTask(void const * argument)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UartDebugTask */
	/* Infinite loop */
	for(;;)
	{
		debug();
 80025c8:	f7ff f810 	bl	80015ec <debug>
		vTaskDelay(1);
 80025cc:	2001      	movs	r0, #1
 80025ce:	f008 fe35 	bl	800b23c <vTaskDelay>
		debug();
 80025d2:	bf00      	nop
 80025d4:	e7f8      	b.n	80025c8 <UartDebugTask+0x8>

080025d6 <commandToGNSSTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_commandToGNSSTask */
void commandToGNSSTask(void const * argument)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b082      	sub	sp, #8
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN commandToGNSSTask */
	/* Infinite loop */
	for(;;)
	{
		commandToGNSS();
 80025de:	f7fe ffad 	bl	800153c <commandToGNSS>
		vTaskDelay(1);
 80025e2:	2001      	movs	r0, #1
 80025e4:	f008 fe2a 	bl	800b23c <vTaskDelay>
		commandToGNSS();
 80025e8:	bf00      	nop
 80025ea:	e7f8      	b.n	80025de <commandToGNSSTask+0x8>

080025ec <initPool>:
  /* USER CODE END commandToGNSSTask */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void initPool(osPoolId* poolId, int POOL_SIZE) {
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
    osPoolDef_t poolDef = {POOL_SIZE, sizeof(UBXMessage_parsed), NULL};
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	60fb      	str	r3, [r7, #12]
 80025fa:	23d4      	movs	r3, #212	@ 0xd4
 80025fc:	613b      	str	r3, [r7, #16]
 80025fe:	2300      	movs	r3, #0
 8002600:	617b      	str	r3, [r7, #20]
    *poolId = osPoolCreate(&poolDef);
 8002602:	f107 030c 	add.w	r3, r7, #12
 8002606:	4618      	mov	r0, r3
 8002608:	f006 fed4 	bl	80093b4 <osPoolCreate>
 800260c:	4602      	mov	r2, r0
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	601a      	str	r2, [r3, #0]
    if (*poolId == NULL) {
        // Gérer l'erreur d'initialisation du pool
    }
}
 8002612:	bf00      	nop
 8002614:	3718      	adds	r7, #24
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
	...

0800261c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b08c      	sub	sp, #48	@ 0x30
 8002620:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002622:	f107 031c 	add.w	r3, r7, #28
 8002626:	2200      	movs	r2, #0
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	605a      	str	r2, [r3, #4]
 800262c:	609a      	str	r2, [r3, #8]
 800262e:	60da      	str	r2, [r3, #12]
 8002630:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002632:	4b69      	ldr	r3, [pc, #420]	@ (80027d8 <MX_GPIO_Init+0x1bc>)
 8002634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002636:	4a68      	ldr	r2, [pc, #416]	@ (80027d8 <MX_GPIO_Init+0x1bc>)
 8002638:	f043 0310 	orr.w	r3, r3, #16
 800263c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800263e:	4b66      	ldr	r3, [pc, #408]	@ (80027d8 <MX_GPIO_Init+0x1bc>)
 8002640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002642:	f003 0310 	and.w	r3, r3, #16
 8002646:	61bb      	str	r3, [r7, #24]
 8002648:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800264a:	4b63      	ldr	r3, [pc, #396]	@ (80027d8 <MX_GPIO_Init+0x1bc>)
 800264c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800264e:	4a62      	ldr	r2, [pc, #392]	@ (80027d8 <MX_GPIO_Init+0x1bc>)
 8002650:	f043 0304 	orr.w	r3, r3, #4
 8002654:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002656:	4b60      	ldr	r3, [pc, #384]	@ (80027d8 <MX_GPIO_Init+0x1bc>)
 8002658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800265a:	f003 0304 	and.w	r3, r3, #4
 800265e:	617b      	str	r3, [r7, #20]
 8002660:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002662:	4b5d      	ldr	r3, [pc, #372]	@ (80027d8 <MX_GPIO_Init+0x1bc>)
 8002664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002666:	4a5c      	ldr	r2, [pc, #368]	@ (80027d8 <MX_GPIO_Init+0x1bc>)
 8002668:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800266c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800266e:	4b5a      	ldr	r3, [pc, #360]	@ (80027d8 <MX_GPIO_Init+0x1bc>)
 8002670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002676:	613b      	str	r3, [r7, #16]
 8002678:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800267a:	4b57      	ldr	r3, [pc, #348]	@ (80027d8 <MX_GPIO_Init+0x1bc>)
 800267c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800267e:	4a56      	ldr	r2, [pc, #344]	@ (80027d8 <MX_GPIO_Init+0x1bc>)
 8002680:	f043 0301 	orr.w	r3, r3, #1
 8002684:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002686:	4b54      	ldr	r3, [pc, #336]	@ (80027d8 <MX_GPIO_Init+0x1bc>)
 8002688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	60fb      	str	r3, [r7, #12]
 8002690:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002692:	4b51      	ldr	r3, [pc, #324]	@ (80027d8 <MX_GPIO_Init+0x1bc>)
 8002694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002696:	4a50      	ldr	r2, [pc, #320]	@ (80027d8 <MX_GPIO_Init+0x1bc>)
 8002698:	f043 0302 	orr.w	r3, r3, #2
 800269c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800269e:	4b4e      	ldr	r3, [pc, #312]	@ (80027d8 <MX_GPIO_Init+0x1bc>)
 80026a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	60bb      	str	r3, [r7, #8]
 80026a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026aa:	4b4b      	ldr	r3, [pc, #300]	@ (80027d8 <MX_GPIO_Init+0x1bc>)
 80026ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ae:	4a4a      	ldr	r2, [pc, #296]	@ (80027d8 <MX_GPIO_Init+0x1bc>)
 80026b0:	f043 0308 	orr.w	r3, r3, #8
 80026b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026b6:	4b48      	ldr	r3, [pc, #288]	@ (80027d8 <MX_GPIO_Init+0x1bc>)
 80026b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ba:	f003 0308 	and.w	r3, r3, #8
 80026be:	607b      	str	r3, [r7, #4]
 80026c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, PROC_M2_Pin|PROC_RESET_FPGA_Pin|UI_LED_R_Pin|UI_LED_G_Pin
 80026c2:	2200      	movs	r2, #0
 80026c4:	f240 113f 	movw	r1, #319	@ 0x13f
 80026c8:	4844      	ldr	r0, [pc, #272]	@ (80027dc <MX_GPIO_Init+0x1c0>)
 80026ca:	f001 fc69 	bl	8003fa0 <HAL_GPIO_WritePin>
                          |RFM_RST_Pin|PROC_M0_Pin|PROC_M1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UI_LED_B_GPIO_Port, UI_LED_B_Pin, GPIO_PIN_RESET);
 80026ce:	2200      	movs	r2, #0
 80026d0:	2102      	movs	r1, #2
 80026d2:	4843      	ldr	r0, [pc, #268]	@ (80027e0 <MX_GPIO_Init+0x1c4>)
 80026d4:	f001 fc64 	bl	8003fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RFM_EN_GPIO_Port, RFM_EN_Pin, GPIO_PIN_SET);
 80026d8:	2201      	movs	r2, #1
 80026da:	2180      	movs	r1, #128	@ 0x80
 80026dc:	483f      	ldr	r0, [pc, #252]	@ (80027dc <MX_GPIO_Init+0x1c0>)
 80026de:	f001 fc5f 	bl	8003fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CLK_64M_EN_Pin|STM_ACQ_TRIG_SRC0_Pin|STM_ACQ_TRIG_SRC1_Pin|RFM_SPI_nCS_Pin, GPIO_PIN_RESET);
 80026e2:	2200      	movs	r2, #0
 80026e4:	f24c 4101 	movw	r1, #50177	@ 0xc401
 80026e8:	483e      	ldr	r0, [pc, #248]	@ (80027e4 <MX_GPIO_Init+0x1c8>)
 80026ea:	f001 fc59 	bl	8003fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ACQ_POW_EN_Pin|GPS_RESET_Pin, GPIO_PIN_SET);
 80026ee:	2201      	movs	r2, #1
 80026f0:	f44f 6108 	mov.w	r1, #2176	@ 0x880
 80026f4:	483b      	ldr	r0, [pc, #236]	@ (80027e4 <MX_GPIO_Init+0x1c8>)
 80026f6:	f001 fc53 	bl	8003fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = PROC_M2_Pin|PROC_RESET_FPGA_Pin|UI_LED_R_Pin|UI_LED_G_Pin
 80026fa:	f240 13bf 	movw	r3, #447	@ 0x1bf
 80026fe:	61fb      	str	r3, [r7, #28]
                          |RFM_EN_Pin|RFM_RST_Pin|PROC_M0_Pin|PROC_M1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002700:	2301      	movs	r3, #1
 8002702:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002704:	2300      	movs	r3, #0
 8002706:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002708:	2300      	movs	r3, #0
 800270a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800270c:	f107 031c 	add.w	r3, r7, #28
 8002710:	4619      	mov	r1, r3
 8002712:	4832      	ldr	r0, [pc, #200]	@ (80027dc <MX_GPIO_Init+0x1c0>)
 8002714:	f001 fab2 	bl	8003c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UI_WakeUp_Pin;
 8002718:	2340      	movs	r3, #64	@ 0x40
 800271a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800271c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002720:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002722:	2300      	movs	r3, #0
 8002724:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(UI_WakeUp_GPIO_Port, &GPIO_InitStruct);
 8002726:	f107 031c 	add.w	r3, r7, #28
 800272a:	4619      	mov	r1, r3
 800272c:	482b      	ldr	r0, [pc, #172]	@ (80027dc <MX_GPIO_Init+0x1c0>)
 800272e:	f001 faa5 	bl	8003c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPS_PROC_TIME_INT_Pin|PROC_FPGA_BUSY_Pin|SD_DETECT_INT_Pin;
 8002732:	f242 03a0 	movw	r3, #8352	@ 0x20a0
 8002736:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002738:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800273c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273e:	2300      	movs	r3, #0
 8002740:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002742:	f107 031c 	add.w	r3, r7, #28
 8002746:	4619      	mov	r1, r3
 8002748:	4827      	ldr	r0, [pc, #156]	@ (80027e8 <MX_GPIO_Init+0x1cc>)
 800274a:	f001 fa97 	bl	8003c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_VBUS_DETECT_WU_Pin|UI_ARM_Pin;
 800274e:	2305      	movs	r3, #5
 8002750:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002752:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002756:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002758:	2300      	movs	r3, #0
 800275a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800275c:	f107 031c 	add.w	r3, r7, #28
 8002760:	4619      	mov	r1, r3
 8002762:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002766:	f001 fa89 	bl	8003c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UI_LED_B_Pin;
 800276a:	2302      	movs	r3, #2
 800276c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800276e:	2301      	movs	r3, #1
 8002770:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002772:	2300      	movs	r3, #0
 8002774:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002776:	2300      	movs	r3, #0
 8002778:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(UI_LED_B_GPIO_Port, &GPIO_InitStruct);
 800277a:	f107 031c 	add.w	r3, r7, #28
 800277e:	4619      	mov	r1, r3
 8002780:	4817      	ldr	r0, [pc, #92]	@ (80027e0 <MX_GPIO_Init+0x1c4>)
 8002782:	f001 fa7b 	bl	8003c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = CLK_64M_EN_Pin|ACQ_POW_EN_Pin|STM_ACQ_TRIG_SRC0_Pin|STM_ACQ_TRIG_SRC1_Pin
 8002786:	f64c 4381 	movw	r3, #52353	@ 0xcc81
 800278a:	61fb      	str	r3, [r7, #28]
                          |RFM_SPI_nCS_Pin|GPS_RESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800278c:	2301      	movs	r3, #1
 800278e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002790:	2300      	movs	r3, #0
 8002792:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002794:	2300      	movs	r3, #0
 8002796:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002798:	f107 031c 	add.w	r3, r7, #28
 800279c:	4619      	mov	r1, r3
 800279e:	4811      	ldr	r0, [pc, #68]	@ (80027e4 <MX_GPIO_Init+0x1c8>)
 80027a0:	f001 fa6c 	bl	8003c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RFM_IRQ_Pin;
 80027a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80027a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80027aa:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80027ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b0:	2300      	movs	r3, #0
 80027b2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(RFM_IRQ_GPIO_Port, &GPIO_InitStruct);
 80027b4:	f107 031c 	add.w	r3, r7, #28
 80027b8:	4619      	mov	r1, r3
 80027ba:	4809      	ldr	r0, [pc, #36]	@ (80027e0 <MX_GPIO_Init+0x1c4>)
 80027bc:	f001 fa5e 	bl	8003c7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80027c0:	2200      	movs	r2, #0
 80027c2:	2105      	movs	r1, #5
 80027c4:	2017      	movs	r0, #23
 80027c6:	f000 feff 	bl	80035c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80027ca:	2017      	movs	r0, #23
 80027cc:	f000 ff18 	bl	8003600 <HAL_NVIC_EnableIRQ>

}
 80027d0:	bf00      	nop
 80027d2:	3730      	adds	r7, #48	@ 0x30
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	40021000 	.word	0x40021000
 80027dc:	48001000 	.word	0x48001000
 80027e0:	48000400 	.word	0x48000400
 80027e4:	48000c00 	.word	0x48000c00
 80027e8:	48000800 	.word	0x48000800

080027ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80027f0:	f000 fdd5 	bl	800339e <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027f4:	f000 f81b 	bl	800282e <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  xTraceEnable(TRC_START);
 80027f8:	2001      	movs	r0, #1
 80027fa:	f00d f821 	bl	800f840 <xTraceEnable>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027fe:	f7ff ff0d 	bl	800261c <MX_GPIO_Init>
  MX_DMA_Init();
 8002802:	f7ff fc81 	bl	8002108 <MX_DMA_Init>
  MX_DAC1_Init();
 8002806:	f7ff fc05 	bl	8002014 <MX_DAC1_Init>
  MX_SPI1_Init();
 800280a:	f000 f877 	bl	80028fc <MX_SPI1_Init>
  MX_SPI2_Init();
 800280e:	f000 f8b3 	bl	8002978 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8002812:	f000 fad3 	bl	8002dbc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002816:	f000 fb05 	bl	8002e24 <MX_USART2_UART_Init>
  //MX_USB_OTG_FS_PCD_Init();
  MX_USART3_UART_Init();
 800281a:	f000 fb33 	bl	8002e84 <MX_USART3_UART_Init>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800281e:	b672      	cpsid	i
}
 8002820:	bf00      	nop
	__disable_irq(); //On evite toute interruption durant l'init de FreeRTOS

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8002822:	f7ff fcd3 	bl	80021cc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002826:	f006 fcaf 	bl	8009188 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 800282a:	bf00      	nop
 800282c:	e7fd      	b.n	800282a <main+0x3e>

0800282e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b096      	sub	sp, #88	@ 0x58
 8002832:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002834:	f107 0314 	add.w	r3, r7, #20
 8002838:	2244      	movs	r2, #68	@ 0x44
 800283a:	2100      	movs	r1, #0
 800283c:	4618      	mov	r0, r3
 800283e:	f00d fb89 	bl	800ff54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002842:	463b      	mov	r3, r7
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	605a      	str	r2, [r3, #4]
 800284a:	609a      	str	r2, [r3, #8]
 800284c:	60da      	str	r2, [r3, #12]
 800284e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002850:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002854:	f001 fd50 	bl	80042f8 <HAL_PWREx_ControlVoltageScaling>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800285e:	f000 f847 	bl	80028f0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002862:	2301      	movs	r3, #1
 8002864:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002866:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800286a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800286c:	2302      	movs	r3, #2
 800286e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002870:	2303      	movs	r3, #3
 8002872:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8002874:	2302      	movs	r3, #2
 8002876:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002878:	230a      	movs	r3, #10
 800287a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800287c:	2302      	movs	r3, #2
 800287e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002880:	2302      	movs	r3, #2
 8002882:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002884:	2302      	movs	r3, #2
 8002886:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002888:	f107 0314 	add.w	r3, r7, #20
 800288c:	4618      	mov	r0, r3
 800288e:	f001 fd99 	bl	80043c4 <HAL_RCC_OscConfig>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8002898:	f000 f82a 	bl	80028f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800289c:	230f      	movs	r3, #15
 800289e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028a0:	2303      	movs	r3, #3
 80028a2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028a4:	2300      	movs	r3, #0
 80028a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80028a8:	2300      	movs	r3, #0
 80028aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028ac:	2300      	movs	r3, #0
 80028ae:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80028b0:	463b      	mov	r3, r7
 80028b2:	2104      	movs	r1, #4
 80028b4:	4618      	mov	r0, r3
 80028b6:	f002 f99f 	bl	8004bf8 <HAL_RCC_ClockConfig>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80028c0:	f000 f816 	bl	80028f0 <Error_Handler>
  }
}
 80028c4:	bf00      	nop
 80028c6:	3758      	adds	r7, #88	@ 0x58
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a04      	ldr	r2, [pc, #16]	@ (80028ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d101      	bne.n	80028e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80028de:	f000 fd77 	bl	80033d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80028e2:	bf00      	nop
 80028e4:	3708      	adds	r7, #8
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	40012c00 	.word	0x40012c00

080028f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80028f4:	b672      	cpsid	i
}
 80028f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80028f8:	bf00      	nop
 80028fa:	e7fd      	b.n	80028f8 <Error_Handler+0x8>

080028fc <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002900:	4b1b      	ldr	r3, [pc, #108]	@ (8002970 <MX_SPI1_Init+0x74>)
 8002902:	4a1c      	ldr	r2, [pc, #112]	@ (8002974 <MX_SPI1_Init+0x78>)
 8002904:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002906:	4b1a      	ldr	r3, [pc, #104]	@ (8002970 <MX_SPI1_Init+0x74>)
 8002908:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800290c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800290e:	4b18      	ldr	r3, [pc, #96]	@ (8002970 <MX_SPI1_Init+0x74>)
 8002910:	2200      	movs	r2, #0
 8002912:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8002914:	4b16      	ldr	r3, [pc, #88]	@ (8002970 <MX_SPI1_Init+0x74>)
 8002916:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800291a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800291c:	4b14      	ldr	r3, [pc, #80]	@ (8002970 <MX_SPI1_Init+0x74>)
 800291e:	2200      	movs	r2, #0
 8002920:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002922:	4b13      	ldr	r3, [pc, #76]	@ (8002970 <MX_SPI1_Init+0x74>)
 8002924:	2200      	movs	r2, #0
 8002926:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002928:	4b11      	ldr	r3, [pc, #68]	@ (8002970 <MX_SPI1_Init+0x74>)
 800292a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800292e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002930:	4b0f      	ldr	r3, [pc, #60]	@ (8002970 <MX_SPI1_Init+0x74>)
 8002932:	2200      	movs	r2, #0
 8002934:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002936:	4b0e      	ldr	r3, [pc, #56]	@ (8002970 <MX_SPI1_Init+0x74>)
 8002938:	2200      	movs	r2, #0
 800293a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800293c:	4b0c      	ldr	r3, [pc, #48]	@ (8002970 <MX_SPI1_Init+0x74>)
 800293e:	2200      	movs	r2, #0
 8002940:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002942:	4b0b      	ldr	r3, [pc, #44]	@ (8002970 <MX_SPI1_Init+0x74>)
 8002944:	2200      	movs	r2, #0
 8002946:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002948:	4b09      	ldr	r3, [pc, #36]	@ (8002970 <MX_SPI1_Init+0x74>)
 800294a:	2207      	movs	r2, #7
 800294c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800294e:	4b08      	ldr	r3, [pc, #32]	@ (8002970 <MX_SPI1_Init+0x74>)
 8002950:	2200      	movs	r2, #0
 8002952:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002954:	4b06      	ldr	r3, [pc, #24]	@ (8002970 <MX_SPI1_Init+0x74>)
 8002956:	2208      	movs	r2, #8
 8002958:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800295a:	4805      	ldr	r0, [pc, #20]	@ (8002970 <MX_SPI1_Init+0x74>)
 800295c:	f003 f86c 	bl	8005a38 <HAL_SPI_Init>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002966:	f7ff ffc3 	bl	80028f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800296a:	bf00      	nop
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	20002294 	.word	0x20002294
 8002974:	40013000 	.word	0x40013000

08002978 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800297c:	4b1b      	ldr	r3, [pc, #108]	@ (80029ec <MX_SPI2_Init+0x74>)
 800297e:	4a1c      	ldr	r2, [pc, #112]	@ (80029f0 <MX_SPI2_Init+0x78>)
 8002980:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002982:	4b1a      	ldr	r3, [pc, #104]	@ (80029ec <MX_SPI2_Init+0x74>)
 8002984:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002988:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800298a:	4b18      	ldr	r3, [pc, #96]	@ (80029ec <MX_SPI2_Init+0x74>)
 800298c:	2200      	movs	r2, #0
 800298e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002990:	4b16      	ldr	r3, [pc, #88]	@ (80029ec <MX_SPI2_Init+0x74>)
 8002992:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002996:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002998:	4b14      	ldr	r3, [pc, #80]	@ (80029ec <MX_SPI2_Init+0x74>)
 800299a:	2200      	movs	r2, #0
 800299c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800299e:	4b13      	ldr	r3, [pc, #76]	@ (80029ec <MX_SPI2_Init+0x74>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80029a4:	4b11      	ldr	r3, [pc, #68]	@ (80029ec <MX_SPI2_Init+0x74>)
 80029a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029aa:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80029ac:	4b0f      	ldr	r3, [pc, #60]	@ (80029ec <MX_SPI2_Init+0x74>)
 80029ae:	2220      	movs	r2, #32
 80029b0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80029b2:	4b0e      	ldr	r3, [pc, #56]	@ (80029ec <MX_SPI2_Init+0x74>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80029b8:	4b0c      	ldr	r3, [pc, #48]	@ (80029ec <MX_SPI2_Init+0x74>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029be:	4b0b      	ldr	r3, [pc, #44]	@ (80029ec <MX_SPI2_Init+0x74>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80029c4:	4b09      	ldr	r3, [pc, #36]	@ (80029ec <MX_SPI2_Init+0x74>)
 80029c6:	2207      	movs	r2, #7
 80029c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80029ca:	4b08      	ldr	r3, [pc, #32]	@ (80029ec <MX_SPI2_Init+0x74>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80029d0:	4b06      	ldr	r3, [pc, #24]	@ (80029ec <MX_SPI2_Init+0x74>)
 80029d2:	2208      	movs	r2, #8
 80029d4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80029d6:	4805      	ldr	r0, [pc, #20]	@ (80029ec <MX_SPI2_Init+0x74>)
 80029d8:	f003 f82e 	bl	8005a38 <HAL_SPI_Init>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80029e2:	f7ff ff85 	bl	80028f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80029e6:	bf00      	nop
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	200022f8 	.word	0x200022f8
 80029f0:	40003800 	.word	0x40003800

080029f4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b08c      	sub	sp, #48	@ 0x30
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029fc:	f107 031c 	add.w	r3, r7, #28
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	605a      	str	r2, [r3, #4]
 8002a06:	609a      	str	r2, [r3, #8]
 8002a08:	60da      	str	r2, [r3, #12]
 8002a0a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a2e      	ldr	r2, [pc, #184]	@ (8002acc <HAL_SPI_MspInit+0xd8>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d129      	bne.n	8002a6a <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a16:	4b2e      	ldr	r3, [pc, #184]	@ (8002ad0 <HAL_SPI_MspInit+0xdc>)
 8002a18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a1a:	4a2d      	ldr	r2, [pc, #180]	@ (8002ad0 <HAL_SPI_MspInit+0xdc>)
 8002a1c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002a20:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a22:	4b2b      	ldr	r3, [pc, #172]	@ (8002ad0 <HAL_SPI_MspInit+0xdc>)
 8002a24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a26:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a2a:	61bb      	str	r3, [r7, #24]
 8002a2c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a2e:	4b28      	ldr	r3, [pc, #160]	@ (8002ad0 <HAL_SPI_MspInit+0xdc>)
 8002a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a32:	4a27      	ldr	r2, [pc, #156]	@ (8002ad0 <HAL_SPI_MspInit+0xdc>)
 8002a34:	f043 0310 	orr.w	r3, r3, #16
 8002a38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a3a:	4b25      	ldr	r3, [pc, #148]	@ (8002ad0 <HAL_SPI_MspInit+0xdc>)
 8002a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a3e:	f003 0310 	and.w	r3, r3, #16
 8002a42:	617b      	str	r3, [r7, #20]
 8002a44:	697b      	ldr	r3, [r7, #20]
    PE12     ------> SPI1_NSS
    PE13     ------> SPI1_SCK
    PE14     ------> SPI1_MISO
    PE15     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = PROC_nCS_Pin|PROC_SCLK_Pin|PROC_MISO_Pin|PROC_MOSI_Pin;
 8002a46:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8002a4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a50:	2300      	movs	r3, #0
 8002a52:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a54:	2303      	movs	r3, #3
 8002a56:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002a58:	2305      	movs	r3, #5
 8002a5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a5c:	f107 031c 	add.w	r3, r7, #28
 8002a60:	4619      	mov	r1, r3
 8002a62:	481c      	ldr	r0, [pc, #112]	@ (8002ad4 <HAL_SPI_MspInit+0xe0>)
 8002a64:	f001 f90a 	bl	8003c7c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002a68:	e02c      	b.n	8002ac4 <HAL_SPI_MspInit+0xd0>
  else if(spiHandle->Instance==SPI2)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a1a      	ldr	r2, [pc, #104]	@ (8002ad8 <HAL_SPI_MspInit+0xe4>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d127      	bne.n	8002ac4 <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002a74:	4b16      	ldr	r3, [pc, #88]	@ (8002ad0 <HAL_SPI_MspInit+0xdc>)
 8002a76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a78:	4a15      	ldr	r2, [pc, #84]	@ (8002ad0 <HAL_SPI_MspInit+0xdc>)
 8002a7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a80:	4b13      	ldr	r3, [pc, #76]	@ (8002ad0 <HAL_SPI_MspInit+0xdc>)
 8002a82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a88:	613b      	str	r3, [r7, #16]
 8002a8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a8c:	4b10      	ldr	r3, [pc, #64]	@ (8002ad0 <HAL_SPI_MspInit+0xdc>)
 8002a8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a90:	4a0f      	ldr	r2, [pc, #60]	@ (8002ad0 <HAL_SPI_MspInit+0xdc>)
 8002a92:	f043 0308 	orr.w	r3, r3, #8
 8002a96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a98:	4b0d      	ldr	r3, [pc, #52]	@ (8002ad0 <HAL_SPI_MspInit+0xdc>)
 8002a9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a9c:	f003 0308 	and.w	r3, r3, #8
 8002aa0:	60fb      	str	r3, [r7, #12]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RFM_SPI_SCK_Pin|RFM_SPI_MISO_Pin|RFM_SPI_MOSI_Pin;
 8002aa4:	231a      	movs	r3, #26
 8002aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aac:	2300      	movs	r3, #0
 8002aae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002ab4:	2305      	movs	r3, #5
 8002ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ab8:	f107 031c 	add.w	r3, r7, #28
 8002abc:	4619      	mov	r1, r3
 8002abe:	4807      	ldr	r0, [pc, #28]	@ (8002adc <HAL_SPI_MspInit+0xe8>)
 8002ac0:	f001 f8dc 	bl	8003c7c <HAL_GPIO_Init>
}
 8002ac4:	bf00      	nop
 8002ac6:	3730      	adds	r7, #48	@ 0x30
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	40013000 	.word	0x40013000
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	48001000 	.word	0x48001000
 8002ad8:	40003800 	.word	0x40003800
 8002adc:	48000c00 	.word	0x48000c00

08002ae0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ae6:	4b11      	ldr	r3, [pc, #68]	@ (8002b2c <HAL_MspInit+0x4c>)
 8002ae8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002aea:	4a10      	ldr	r2, [pc, #64]	@ (8002b2c <HAL_MspInit+0x4c>)
 8002aec:	f043 0301 	orr.w	r3, r3, #1
 8002af0:	6613      	str	r3, [r2, #96]	@ 0x60
 8002af2:	4b0e      	ldr	r3, [pc, #56]	@ (8002b2c <HAL_MspInit+0x4c>)
 8002af4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	607b      	str	r3, [r7, #4]
 8002afc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002afe:	4b0b      	ldr	r3, [pc, #44]	@ (8002b2c <HAL_MspInit+0x4c>)
 8002b00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b02:	4a0a      	ldr	r2, [pc, #40]	@ (8002b2c <HAL_MspInit+0x4c>)
 8002b04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b08:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b0a:	4b08      	ldr	r3, [pc, #32]	@ (8002b2c <HAL_MspInit+0x4c>)
 8002b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b12:	603b      	str	r3, [r7, #0]
 8002b14:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002b16:	2200      	movs	r2, #0
 8002b18:	210f      	movs	r1, #15
 8002b1a:	f06f 0001 	mvn.w	r0, #1
 8002b1e:	f000 fd53 	bl	80035c8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b22:	bf00      	nop
 8002b24:	3708      	adds	r7, #8
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	40021000 	.word	0x40021000

08002b30 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b08c      	sub	sp, #48	@ 0x30
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002b3e:	4b2e      	ldr	r3, [pc, #184]	@ (8002bf8 <HAL_InitTick+0xc8>)
 8002b40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b42:	4a2d      	ldr	r2, [pc, #180]	@ (8002bf8 <HAL_InitTick+0xc8>)
 8002b44:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002b48:	6613      	str	r3, [r2, #96]	@ 0x60
 8002b4a:	4b2b      	ldr	r3, [pc, #172]	@ (8002bf8 <HAL_InitTick+0xc8>)
 8002b4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b4e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b52:	60bb      	str	r3, [r7, #8]
 8002b54:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002b56:	f107 020c 	add.w	r2, r7, #12
 8002b5a:	f107 0310 	add.w	r3, r7, #16
 8002b5e:	4611      	mov	r1, r2
 8002b60:	4618      	mov	r0, r3
 8002b62:	f002 fa0d 	bl	8004f80 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002b66:	f002 f9f5 	bl	8004f54 <HAL_RCC_GetPCLK2Freq>
 8002b6a:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b6e:	4a23      	ldr	r2, [pc, #140]	@ (8002bfc <HAL_InitTick+0xcc>)
 8002b70:	fba2 2303 	umull	r2, r3, r2, r3
 8002b74:	0c9b      	lsrs	r3, r3, #18
 8002b76:	3b01      	subs	r3, #1
 8002b78:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002b7a:	4b21      	ldr	r3, [pc, #132]	@ (8002c00 <HAL_InitTick+0xd0>)
 8002b7c:	4a21      	ldr	r2, [pc, #132]	@ (8002c04 <HAL_InitTick+0xd4>)
 8002b7e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002b80:	4b1f      	ldr	r3, [pc, #124]	@ (8002c00 <HAL_InitTick+0xd0>)
 8002b82:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002b86:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002b88:	4a1d      	ldr	r2, [pc, #116]	@ (8002c00 <HAL_InitTick+0xd0>)
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b8c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002b8e:	4b1c      	ldr	r3, [pc, #112]	@ (8002c00 <HAL_InitTick+0xd0>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b94:	4b1a      	ldr	r3, [pc, #104]	@ (8002c00 <HAL_InitTick+0xd0>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b9a:	4b19      	ldr	r3, [pc, #100]	@ (8002c00 <HAL_InitTick+0xd0>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002ba0:	4817      	ldr	r0, [pc, #92]	@ (8002c00 <HAL_InitTick+0xd0>)
 8002ba2:	f004 f885 	bl	8006cb0 <HAL_TIM_Base_Init>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002bac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d11b      	bne.n	8002bec <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002bb4:	4812      	ldr	r0, [pc, #72]	@ (8002c00 <HAL_InitTick+0xd0>)
 8002bb6:	f004 f8dd 	bl	8006d74 <HAL_TIM_Base_Start_IT>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002bc0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d111      	bne.n	8002bec <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002bc8:	2019      	movs	r0, #25
 8002bca:	f000 fd19 	bl	8003600 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2b0f      	cmp	r3, #15
 8002bd2:	d808      	bhi.n	8002be6 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	6879      	ldr	r1, [r7, #4]
 8002bd8:	2019      	movs	r0, #25
 8002bda:	f000 fcf5 	bl	80035c8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002bde:	4a0a      	ldr	r2, [pc, #40]	@ (8002c08 <HAL_InitTick+0xd8>)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6013      	str	r3, [r2, #0]
 8002be4:	e002      	b.n	8002bec <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002bec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3730      	adds	r7, #48	@ 0x30
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	431bde83 	.word	0x431bde83
 8002c00:	2000235c 	.word	0x2000235c
 8002c04:	40012c00 	.word	0x40012c00
 8002c08:	200001c0 	.word	0x200001c0

08002c0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8002c10:	bf00      	nop
 8002c12:	e7fd      	b.n	8002c10 <NMI_Handler+0x4>

08002c14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c18:	bf00      	nop
 8002c1a:	e7fd      	b.n	8002c18 <HardFault_Handler+0x4>

08002c1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c20:	bf00      	nop
 8002c22:	e7fd      	b.n	8002c20 <MemManage_Handler+0x4>

08002c24 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c28:	bf00      	nop
 8002c2a:	e7fd      	b.n	8002c28 <BusFault_Handler+0x4>

08002c2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c30:	bf00      	nop
 8002c32:	e7fd      	b.n	8002c30 <UsageFault_Handler+0x4>

08002c34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c38:	bf00      	nop
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
	...

08002c44 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002c48:	4802      	ldr	r0, [pc, #8]	@ (8002c54 <DMA1_Channel2_IRQHandler+0x10>)
 8002c4a:	f000 ff68 	bl	8003b1e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002c4e:	bf00      	nop
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	20002544 	.word	0x20002544

08002c58 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(RFM_IRQ_Pin) != RESET){
 8002c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c90 <EXTI9_5_IRQHandler+0x38>)
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d004      	beq.n	8002c72 <EXTI9_5_IRQHandler+0x1a>
		osSemaphoreRelease(xSem_LORAReceive_startHandle);
 8002c68:	4b0a      	ldr	r3, [pc, #40]	@ (8002c94 <EXTI9_5_IRQHandler+0x3c>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f006 fb6b 	bl	8009348 <osSemaphoreRelease>
	}

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PROC_FPGA_BUSY_Pin);
 8002c72:	2020      	movs	r0, #32
 8002c74:	f001 f9c6 	bl	8004004 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(UI_WakeUp_Pin);
 8002c78:	2040      	movs	r0, #64	@ 0x40
 8002c7a:	f001 f9c3 	bl	8004004 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SD_DETECT_INT_Pin);
 8002c7e:	2080      	movs	r0, #128	@ 0x80
 8002c80:	f001 f9c0 	bl	8004004 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RFM_IRQ_Pin);
 8002c84:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002c88:	f001 f9bc 	bl	8004004 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002c8c:	bf00      	nop
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	40010400 	.word	0x40010400
 8002c94:	20000924 	.word	0x20000924

08002c98 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002c9c:	4802      	ldr	r0, [pc, #8]	@ (8002ca8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002c9e:	f004 f8d9 	bl	8006e54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002ca2:	bf00      	nop
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	2000235c 	.word	0x2000235c

08002cac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002cb0:	4802      	ldr	r0, [pc, #8]	@ (8002cbc <USART1_IRQHandler+0x10>)
 8002cb2:	f004 fc33 	bl	800751c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002cb6:	bf00      	nop
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	200023ac 	.word	0x200023ac

08002cc0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002cc4:	4802      	ldr	r0, [pc, #8]	@ (8002cd0 <USART2_IRQHandler+0x10>)
 8002cc6:	f004 fc29 	bl	800751c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002cca:	bf00      	nop
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	20002434 	.word	0x20002434

08002cd4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	uint8_t receivedByte = (uint8_t)(huart3.Instance->RDR & 0x00FF);
 8002cda:	4b11      	ldr	r3, [pc, #68]	@ (8002d20 <USART3_IRQHandler+0x4c>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	71fb      	strb	r3, [r7, #7]

	// Envoyer l'octet reçu à la file d'attente pour traitement ultérieur
	UARTMessageQ_t uartMsg = { .data = receivedByte };
 8002ce4:	79fb      	ldrb	r3, [r7, #7]
 8002ce6:	713b      	strb	r3, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	603b      	str	r3, [r7, #0]
	xQueueSendFromISR(UARTbyteHandle, &uartMsg, &xHigherPriorityTaskWoken);
 8002cec:	4b0d      	ldr	r3, [pc, #52]	@ (8002d24 <USART3_IRQHandler+0x50>)
 8002cee:	6818      	ldr	r0, [r3, #0]
 8002cf0:	463a      	mov	r2, r7
 8002cf2:	1d39      	adds	r1, r7, #4
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	f007 f81b 	bl	8009d30 <xQueueGenericSendFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d007      	beq.n	8002d10 <USART3_IRQHandler+0x3c>
 8002d00:	4b09      	ldr	r3, [pc, #36]	@ (8002d28 <USART3_IRQHandler+0x54>)
 8002d02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d06:	601a      	str	r2, [r3, #0]
 8002d08:	f3bf 8f4f 	dsb	sy
 8002d0c:	f3bf 8f6f 	isb	sy
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002d10:	4803      	ldr	r0, [pc, #12]	@ (8002d20 <USART3_IRQHandler+0x4c>)
 8002d12:	f004 fc03 	bl	800751c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002d16:	bf00      	nop
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	200024bc 	.word	0x200024bc
 8002d24:	2000090c 	.word	0x2000090c
 8002d28:	e000ed04 	.word	0xe000ed04

08002d2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d34:	4a14      	ldr	r2, [pc, #80]	@ (8002d88 <_sbrk+0x5c>)
 8002d36:	4b15      	ldr	r3, [pc, #84]	@ (8002d8c <_sbrk+0x60>)
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end) // @suppress("Symbol is not resolved")
 8002d40:	4b13      	ldr	r3, [pc, #76]	@ (8002d90 <_sbrk+0x64>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d102      	bne.n	8002d4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d48:	4b11      	ldr	r3, [pc, #68]	@ (8002d90 <_sbrk+0x64>)
 8002d4a:	4a12      	ldr	r2, [pc, #72]	@ (8002d94 <_sbrk+0x68>)
 8002d4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d4e:	4b10      	ldr	r3, [pc, #64]	@ (8002d90 <_sbrk+0x64>)
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4413      	add	r3, r2
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d207      	bcs.n	8002d6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d5c:	f00d f968 	bl	8010030 <__errno>
 8002d60:	4603      	mov	r3, r0
 8002d62:	220c      	movs	r2, #12
 8002d64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d66:	f04f 33ff 	mov.w	r3, #4294967295
 8002d6a:	e009      	b.n	8002d80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d6c:	4b08      	ldr	r3, [pc, #32]	@ (8002d90 <_sbrk+0x64>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d72:	4b07      	ldr	r3, [pc, #28]	@ (8002d90 <_sbrk+0x64>)
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4413      	add	r3, r2
 8002d7a:	4a05      	ldr	r2, [pc, #20]	@ (8002d90 <_sbrk+0x64>)
 8002d7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3718      	adds	r7, #24
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	20050000 	.word	0x20050000
 8002d8c:	00000400 	.word	0x00000400
 8002d90:	200023a8 	.word	0x200023a8
 8002d94:	20017570 	.word	0x20017570

08002d98 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002d9c:	4b06      	ldr	r3, [pc, #24]	@ (8002db8 <SystemInit+0x20>)
 8002d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002da2:	4a05      	ldr	r2, [pc, #20]	@ (8002db8 <SystemInit+0x20>)
 8002da4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002da8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002dac:	bf00      	nop
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	e000ed00 	.word	0xe000ed00

08002dbc <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002dc0:	4b15      	ldr	r3, [pc, #84]	@ (8002e18 <MX_USART1_UART_Init+0x5c>)
 8002dc2:	4a16      	ldr	r2, [pc, #88]	@ (8002e1c <MX_USART1_UART_Init+0x60>)
 8002dc4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000 ;
 8002dc6:	4b14      	ldr	r3, [pc, #80]	@ (8002e18 <MX_USART1_UART_Init+0x5c>)
 8002dc8:	4a15      	ldr	r2, [pc, #84]	@ (8002e20 <MX_USART1_UART_Init+0x64>)
 8002dca:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002dcc:	4b12      	ldr	r3, [pc, #72]	@ (8002e18 <MX_USART1_UART_Init+0x5c>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002dd2:	4b11      	ldr	r3, [pc, #68]	@ (8002e18 <MX_USART1_UART_Init+0x5c>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002dd8:	4b0f      	ldr	r3, [pc, #60]	@ (8002e18 <MX_USART1_UART_Init+0x5c>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002dde:	4b0e      	ldr	r3, [pc, #56]	@ (8002e18 <MX_USART1_UART_Init+0x5c>)
 8002de0:	220c      	movs	r2, #12
 8002de2:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002de4:	4b0c      	ldr	r3, [pc, #48]	@ (8002e18 <MX_USART1_UART_Init+0x5c>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002dea:	4b0b      	ldr	r3, [pc, #44]	@ (8002e18 <MX_USART1_UART_Init+0x5c>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002df0:	4b09      	ldr	r3, [pc, #36]	@ (8002e18 <MX_USART1_UART_Init+0x5c>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8002df6:	4b08      	ldr	r3, [pc, #32]	@ (8002e18 <MX_USART1_UART_Init+0x5c>)
 8002df8:	2208      	movs	r2, #8
 8002dfa:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8002dfc:	4b06      	ldr	r3, [pc, #24]	@ (8002e18 <MX_USART1_UART_Init+0x5c>)
 8002dfe:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002e02:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e04:	4804      	ldr	r0, [pc, #16]	@ (8002e18 <MX_USART1_UART_Init+0x5c>)
 8002e06:	f004 fa07 	bl	8007218 <HAL_UART_Init>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002e10:	f7ff fd6e 	bl	80028f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002e14:	bf00      	nop
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	200023ac 	.word	0x200023ac
 8002e1c:	40013800 	.word	0x40013800
 8002e20:	001e8480 	.word	0x001e8480

08002e24 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002e28:	4b14      	ldr	r3, [pc, #80]	@ (8002e7c <MX_USART2_UART_Init+0x58>)
 8002e2a:	4a15      	ldr	r2, [pc, #84]	@ (8002e80 <MX_USART2_UART_Init+0x5c>)
 8002e2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002e2e:	4b13      	ldr	r3, [pc, #76]	@ (8002e7c <MX_USART2_UART_Init+0x58>)
 8002e30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002e34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e36:	4b11      	ldr	r3, [pc, #68]	@ (8002e7c <MX_USART2_UART_Init+0x58>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e3c:	4b0f      	ldr	r3, [pc, #60]	@ (8002e7c <MX_USART2_UART_Init+0x58>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e42:	4b0e      	ldr	r3, [pc, #56]	@ (8002e7c <MX_USART2_UART_Init+0x58>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e48:	4b0c      	ldr	r3, [pc, #48]	@ (8002e7c <MX_USART2_UART_Init+0x58>)
 8002e4a:	220c      	movs	r2, #12
 8002e4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e4e:	4b0b      	ldr	r3, [pc, #44]	@ (8002e7c <MX_USART2_UART_Init+0x58>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e54:	4b09      	ldr	r3, [pc, #36]	@ (8002e7c <MX_USART2_UART_Init+0x58>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e5a:	4b08      	ldr	r3, [pc, #32]	@ (8002e7c <MX_USART2_UART_Init+0x58>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e60:	4b06      	ldr	r3, [pc, #24]	@ (8002e7c <MX_USART2_UART_Init+0x58>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e66:	4805      	ldr	r0, [pc, #20]	@ (8002e7c <MX_USART2_UART_Init+0x58>)
 8002e68:	f004 f9d6 	bl	8007218 <HAL_UART_Init>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002e72:	f7ff fd3d 	bl	80028f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002e76:	bf00      	nop
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	20002434 	.word	0x20002434
 8002e80:	40004400 	.word	0x40004400

08002e84 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002e88:	4b14      	ldr	r3, [pc, #80]	@ (8002edc <MX_USART3_UART_Init+0x58>)
 8002e8a:	4a15      	ldr	r2, [pc, #84]	@ (8002ee0 <MX_USART3_UART_Init+0x5c>)
 8002e8c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8002e8e:	4b13      	ldr	r3, [pc, #76]	@ (8002edc <MX_USART3_UART_Init+0x58>)
 8002e90:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8002e94:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002e96:	4b11      	ldr	r3, [pc, #68]	@ (8002edc <MX_USART3_UART_Init+0x58>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002e9c:	4b0f      	ldr	r3, [pc, #60]	@ (8002edc <MX_USART3_UART_Init+0x58>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8002edc <MX_USART3_UART_Init+0x58>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8002edc <MX_USART3_UART_Init+0x58>)
 8002eaa:	220c      	movs	r2, #12
 8002eac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eae:	4b0b      	ldr	r3, [pc, #44]	@ (8002edc <MX_USART3_UART_Init+0x58>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002eb4:	4b09      	ldr	r3, [pc, #36]	@ (8002edc <MX_USART3_UART_Init+0x58>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002eba:	4b08      	ldr	r3, [pc, #32]	@ (8002edc <MX_USART3_UART_Init+0x58>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ec0:	4b06      	ldr	r3, [pc, #24]	@ (8002edc <MX_USART3_UART_Init+0x58>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002ec6:	4805      	ldr	r0, [pc, #20]	@ (8002edc <MX_USART3_UART_Init+0x58>)
 8002ec8:	f004 f9a6 	bl	8007218 <HAL_UART_Init>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002ed2:	f7ff fd0d 	bl	80028f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002ed6:	bf00      	nop
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	200024bc 	.word	0x200024bc
 8002ee0:	40004800 	.word	0x40004800

08002ee4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b0b2      	sub	sp, #200	@ 0xc8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eec:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	601a      	str	r2, [r3, #0]
 8002ef4:	605a      	str	r2, [r3, #4]
 8002ef6:	609a      	str	r2, [r3, #8]
 8002ef8:	60da      	str	r2, [r3, #12]
 8002efa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002efc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002f00:	228c      	movs	r2, #140	@ 0x8c
 8002f02:	2100      	movs	r1, #0
 8002f04:	4618      	mov	r0, r3
 8002f06:	f00d f825 	bl	800ff54 <memset>
  if(uartHandle->Instance==USART1)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a95      	ldr	r2, [pc, #596]	@ (8003164 <HAL_UART_MspInit+0x280>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d166      	bne.n	8002fe2 <HAL_UART_MspInit+0xfe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002f14:	2301      	movs	r3, #1
 8002f16:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f1c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002f20:	4618      	mov	r0, r3
 8002f22:	f002 f8bf 	bl	80050a4 <HAL_RCCEx_PeriphCLKConfig>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002f2c:	f7ff fce0 	bl	80028f0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f30:	4b8d      	ldr	r3, [pc, #564]	@ (8003168 <HAL_UART_MspInit+0x284>)
 8002f32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f34:	4a8c      	ldr	r2, [pc, #560]	@ (8003168 <HAL_UART_MspInit+0x284>)
 8002f36:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f3a:	6613      	str	r3, [r2, #96]	@ 0x60
 8002f3c:	4b8a      	ldr	r3, [pc, #552]	@ (8003168 <HAL_UART_MspInit+0x284>)
 8002f3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f44:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f48:	4b87      	ldr	r3, [pc, #540]	@ (8003168 <HAL_UART_MspInit+0x284>)
 8002f4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f4c:	4a86      	ldr	r2, [pc, #536]	@ (8003168 <HAL_UART_MspInit+0x284>)
 8002f4e:	f043 0301 	orr.w	r3, r3, #1
 8002f52:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f54:	4b84      	ldr	r3, [pc, #528]	@ (8003168 <HAL_UART_MspInit+0x284>)
 8002f56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f58:	f003 0301 	and.w	r3, r3, #1
 8002f5c:	623b      	str	r3, [r7, #32]
 8002f5e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f60:	4b81      	ldr	r3, [pc, #516]	@ (8003168 <HAL_UART_MspInit+0x284>)
 8002f62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f64:	4a80      	ldr	r2, [pc, #512]	@ (8003168 <HAL_UART_MspInit+0x284>)
 8002f66:	f043 0302 	orr.w	r3, r3, #2
 8002f6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f6c:	4b7e      	ldr	r3, [pc, #504]	@ (8003168 <HAL_UART_MspInit+0x284>)
 8002f6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	61fb      	str	r3, [r7, #28]
 8002f76:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STM_VCP_RX_Pin;
 8002f78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f80:	2302      	movs	r3, #2
 8002f82:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f86:	2300      	movs	r3, #0
 8002f88:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f92:	2307      	movs	r3, #7
 8002f94:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(STM_VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002f98:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fa2:	f000 fe6b 	bl	8003c7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STM_VCP_TX_Pin;
 8002fa6:	2340      	movs	r3, #64	@ 0x40
 8002fa8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fac:	2302      	movs	r3, #2
 8002fae:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002fbe:	2307      	movs	r3, #7
 8002fc0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(STM_VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002fc4:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002fc8:	4619      	mov	r1, r3
 8002fca:	4868      	ldr	r0, [pc, #416]	@ (800316c <HAL_UART_MspInit+0x288>)
 8002fcc:	f000 fe56 	bl	8003c7c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	2105      	movs	r1, #5
 8002fd4:	2025      	movs	r0, #37	@ 0x25
 8002fd6:	f000 faf7 	bl	80035c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002fda:	2025      	movs	r0, #37	@ 0x25
 8002fdc:	f000 fb10 	bl	8003600 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002fe0:	e0bc      	b.n	800315c <HAL_UART_MspInit+0x278>
  else if(uartHandle->Instance==USART2)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a62      	ldr	r2, [pc, #392]	@ (8003170 <HAL_UART_MspInit+0x28c>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d143      	bne.n	8003074 <HAL_UART_MspInit+0x190>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002fec:	2302      	movs	r3, #2
 8002fee:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ff4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f002 f853 	bl	80050a4 <HAL_RCCEx_PeriphCLKConfig>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <HAL_UART_MspInit+0x124>
      Error_Handler();
 8003004:	f7ff fc74 	bl	80028f0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003008:	4b57      	ldr	r3, [pc, #348]	@ (8003168 <HAL_UART_MspInit+0x284>)
 800300a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800300c:	4a56      	ldr	r2, [pc, #344]	@ (8003168 <HAL_UART_MspInit+0x284>)
 800300e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003012:	6593      	str	r3, [r2, #88]	@ 0x58
 8003014:	4b54      	ldr	r3, [pc, #336]	@ (8003168 <HAL_UART_MspInit+0x284>)
 8003016:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003018:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800301c:	61bb      	str	r3, [r7, #24]
 800301e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003020:	4b51      	ldr	r3, [pc, #324]	@ (8003168 <HAL_UART_MspInit+0x284>)
 8003022:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003024:	4a50      	ldr	r2, [pc, #320]	@ (8003168 <HAL_UART_MspInit+0x284>)
 8003026:	f043 0308 	orr.w	r3, r3, #8
 800302a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800302c:	4b4e      	ldr	r3, [pc, #312]	@ (8003168 <HAL_UART_MspInit+0x284>)
 800302e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003030:	f003 0308 	and.w	r3, r3, #8
 8003034:	617b      	str	r3, [r7, #20]
 8003036:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPS_RTCM3_RX_STM_TX_Pin|GPS_RTCM3_TX_STM_RX_Pin;
 8003038:	2360      	movs	r3, #96	@ 0x60
 800303a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800303e:	2302      	movs	r3, #2
 8003040:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003044:	2300      	movs	r3, #0
 8003046:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800304a:	2303      	movs	r3, #3
 800304c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003050:	2307      	movs	r3, #7
 8003052:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003056:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800305a:	4619      	mov	r1, r3
 800305c:	4845      	ldr	r0, [pc, #276]	@ (8003174 <HAL_UART_MspInit+0x290>)
 800305e:	f000 fe0d 	bl	8003c7c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003062:	2200      	movs	r2, #0
 8003064:	2105      	movs	r1, #5
 8003066:	2026      	movs	r0, #38	@ 0x26
 8003068:	f000 faae 	bl	80035c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800306c:	2026      	movs	r0, #38	@ 0x26
 800306e:	f000 fac7 	bl	8003600 <HAL_NVIC_EnableIRQ>
}
 8003072:	e073      	b.n	800315c <HAL_UART_MspInit+0x278>
  else if(uartHandle->Instance==USART3)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a3f      	ldr	r2, [pc, #252]	@ (8003178 <HAL_UART_MspInit+0x294>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d16e      	bne.n	800315c <HAL_UART_MspInit+0x278>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800307e:	2304      	movs	r3, #4
 8003080:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003082:	2300      	movs	r3, #0
 8003084:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003086:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800308a:	4618      	mov	r0, r3
 800308c:	f002 f80a 	bl	80050a4 <HAL_RCCEx_PeriphCLKConfig>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <HAL_UART_MspInit+0x1b6>
      Error_Handler();
 8003096:	f7ff fc2b 	bl	80028f0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800309a:	4b33      	ldr	r3, [pc, #204]	@ (8003168 <HAL_UART_MspInit+0x284>)
 800309c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800309e:	4a32      	ldr	r2, [pc, #200]	@ (8003168 <HAL_UART_MspInit+0x284>)
 80030a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80030a6:	4b30      	ldr	r3, [pc, #192]	@ (8003168 <HAL_UART_MspInit+0x284>)
 80030a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030ae:	613b      	str	r3, [r7, #16]
 80030b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80030b2:	4b2d      	ldr	r3, [pc, #180]	@ (8003168 <HAL_UART_MspInit+0x284>)
 80030b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030b6:	4a2c      	ldr	r2, [pc, #176]	@ (8003168 <HAL_UART_MspInit+0x284>)
 80030b8:	f043 0308 	orr.w	r3, r3, #8
 80030bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030be:	4b2a      	ldr	r3, [pc, #168]	@ (8003168 <HAL_UART_MspInit+0x284>)
 80030c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030c2:	f003 0308 	and.w	r3, r3, #8
 80030c6:	60fb      	str	r3, [r7, #12]
 80030c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPS_TX_STM_Pin|GPS_RX_STM_Pin;
 80030ca:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80030ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030d2:	2302      	movs	r3, #2
 80030d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d8:	2300      	movs	r3, #0
 80030da:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030de:	2303      	movs	r3, #3
 80030e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80030e4:	2307      	movs	r3, #7
 80030e6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030ea:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80030ee:	4619      	mov	r1, r3
 80030f0:	4820      	ldr	r0, [pc, #128]	@ (8003174 <HAL_UART_MspInit+0x290>)
 80030f2:	f000 fdc3 	bl	8003c7c <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel2;
 80030f6:	4b21      	ldr	r3, [pc, #132]	@ (800317c <HAL_UART_MspInit+0x298>)
 80030f8:	4a21      	ldr	r2, [pc, #132]	@ (8003180 <HAL_UART_MspInit+0x29c>)
 80030fa:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_2;
 80030fc:	4b1f      	ldr	r3, [pc, #124]	@ (800317c <HAL_UART_MspInit+0x298>)
 80030fe:	2202      	movs	r2, #2
 8003100:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003102:	4b1e      	ldr	r3, [pc, #120]	@ (800317c <HAL_UART_MspInit+0x298>)
 8003104:	2210      	movs	r2, #16
 8003106:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003108:	4b1c      	ldr	r3, [pc, #112]	@ (800317c <HAL_UART_MspInit+0x298>)
 800310a:	2200      	movs	r2, #0
 800310c:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800310e:	4b1b      	ldr	r3, [pc, #108]	@ (800317c <HAL_UART_MspInit+0x298>)
 8003110:	2280      	movs	r2, #128	@ 0x80
 8003112:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003114:	4b19      	ldr	r3, [pc, #100]	@ (800317c <HAL_UART_MspInit+0x298>)
 8003116:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800311a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800311c:	4b17      	ldr	r3, [pc, #92]	@ (800317c <HAL_UART_MspInit+0x298>)
 800311e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003122:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003124:	4b15      	ldr	r3, [pc, #84]	@ (800317c <HAL_UART_MspInit+0x298>)
 8003126:	2200      	movs	r2, #0
 8003128:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800312a:	4b14      	ldr	r3, [pc, #80]	@ (800317c <HAL_UART_MspInit+0x298>)
 800312c:	2200      	movs	r2, #0
 800312e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003130:	4812      	ldr	r0, [pc, #72]	@ (800317c <HAL_UART_MspInit+0x298>)
 8003132:	f000 fbbd 	bl	80038b0 <HAL_DMA_Init>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d001      	beq.n	8003140 <HAL_UART_MspInit+0x25c>
      Error_Handler();
 800313c:	f7ff fbd8 	bl	80028f0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a0e      	ldr	r2, [pc, #56]	@ (800317c <HAL_UART_MspInit+0x298>)
 8003144:	671a      	str	r2, [r3, #112]	@ 0x70
 8003146:	4a0d      	ldr	r2, [pc, #52]	@ (800317c <HAL_UART_MspInit+0x298>)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800314c:	2200      	movs	r2, #0
 800314e:	2105      	movs	r1, #5
 8003150:	2027      	movs	r0, #39	@ 0x27
 8003152:	f000 fa39 	bl	80035c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003156:	2027      	movs	r0, #39	@ 0x27
 8003158:	f000 fa52 	bl	8003600 <HAL_NVIC_EnableIRQ>
}
 800315c:	bf00      	nop
 800315e:	37c8      	adds	r7, #200	@ 0xc8
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	40013800 	.word	0x40013800
 8003168:	40021000 	.word	0x40021000
 800316c:	48000400 	.word	0x48000400
 8003170:	40004400 	.word	0x40004400
 8003174:	48000c00 	.word	0x48000c00
 8003178:	40004800 	.word	0x40004800
 800317c:	20002544 	.word	0x20002544
 8003180:	4002001c 	.word	0x4002001c

08003184 <HAL_UART_TxCpltCallback>:
  /* USER CODE END USART3_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == hGNSSCom.huart->Instance){
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	4b06      	ldr	r3, [pc, #24]	@ (80031ac <HAL_UART_TxCpltCallback+0x28>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	429a      	cmp	r2, r3
 8003198:	d103      	bne.n	80031a2 <HAL_UART_TxCpltCallback+0x1e>
		UART_Transmit_With_Color("[INFO]...FIN TRANSMISSION DMA GNSS...", ANSI_COLOR_RESET);
 800319a:	4905      	ldr	r1, [pc, #20]	@ (80031b0 <HAL_UART_TxCpltCallback+0x2c>)
 800319c:	4805      	ldr	r0, [pc, #20]	@ (80031b4 <HAL_UART_TxCpltCallback+0x30>)
 800319e:	f7fe fa75 	bl	800168c <UART_Transmit_With_Color>
	}
}
 80031a2:	bf00      	nop
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	20000238 	.word	0x20000238
 80031b0:	08010edc 	.word	0x08010edc
 80031b4:	08010ee4 	.word	0x08010ee4

080031b8 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80031bc:	4b14      	ldr	r3, [pc, #80]	@ (8003210 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031be:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80031c2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80031c4:	4b12      	ldr	r3, [pc, #72]	@ (8003210 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031c6:	2206      	movs	r2, #6
 80031c8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80031ca:	4b11      	ldr	r3, [pc, #68]	@ (8003210 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031cc:	2202      	movs	r2, #2
 80031ce:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80031d0:	4b0f      	ldr	r3, [pc, #60]	@ (8003210 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031d2:	2202      	movs	r2, #2
 80031d4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80031d6:	4b0e      	ldr	r3, [pc, #56]	@ (8003210 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031d8:	2200      	movs	r2, #0
 80031da:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80031dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003210 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031de:	2200      	movs	r2, #0
 80031e0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80031e2:	4b0b      	ldr	r3, [pc, #44]	@ (8003210 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80031e8:	4b09      	ldr	r3, [pc, #36]	@ (8003210 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031ea:	2201      	movs	r2, #1
 80031ec:	629a      	str	r2, [r3, #40]	@ 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80031ee:	4b08      	ldr	r3, [pc, #32]	@ (8003210 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80031f4:	4b06      	ldr	r3, [pc, #24]	@ (8003210 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031f6:	2201      	movs	r2, #1
 80031f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80031fa:	4805      	ldr	r0, [pc, #20]	@ (8003210 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031fc:	f000 ff25 	bl	800404a <HAL_PCD_Init>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8003206:	f7ff fb73 	bl	80028f0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800320a:	bf00      	nop
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	2000258c 	.word	0x2000258c

08003214 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b0ae      	sub	sp, #184	@ 0xb8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800321c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003220:	2200      	movs	r2, #0
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	605a      	str	r2, [r3, #4]
 8003226:	609a      	str	r2, [r3, #8]
 8003228:	60da      	str	r2, [r3, #12]
 800322a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800322c:	f107 0318 	add.w	r3, r7, #24
 8003230:	228c      	movs	r2, #140	@ 0x8c
 8003232:	2100      	movs	r1, #0
 8003234:	4618      	mov	r0, r3
 8003236:	f00c fe8d 	bl	800ff54 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003242:	d17c      	bne.n	800333e <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003244:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003248:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800324a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800324e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8003252:	2303      	movs	r3, #3
 8003254:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 8003256:	2302      	movs	r3, #2
 8003258:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 800325a:	230c      	movs	r3, #12
 800325c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800325e:	2302      	movs	r3, #2
 8003260:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 8003262:	2304      	movs	r3, #4
 8003264:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8003266:	2302      	movs	r3, #2
 8003268:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800326a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800326e:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003270:	f107 0318 	add.w	r3, r7, #24
 8003274:	4618      	mov	r0, r3
 8003276:	f001 ff15 	bl	80050a4 <HAL_RCCEx_PeriphCLKConfig>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d001      	beq.n	8003284 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8003280:	f7ff fb36 	bl	80028f0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003284:	4b30      	ldr	r3, [pc, #192]	@ (8003348 <HAL_PCD_MspInit+0x134>)
 8003286:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003288:	4a2f      	ldr	r2, [pc, #188]	@ (8003348 <HAL_PCD_MspInit+0x134>)
 800328a:	f043 0301 	orr.w	r3, r3, #1
 800328e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003290:	4b2d      	ldr	r3, [pc, #180]	@ (8003348 <HAL_PCD_MspInit+0x134>)
 8003292:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	617b      	str	r3, [r7, #20]
 800329a:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_VBUS_DETECT_Pin;
 800329c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80032a0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032a4:	2300      	movs	r3, #0
 80032a6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032aa:	2300      	movs	r3, #0
 80032ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_DETECT_GPIO_Port, &GPIO_InitStruct);
 80032b0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80032b4:	4619      	mov	r1, r3
 80032b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80032ba:	f000 fcdf 	bl	8003c7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_D_N_Pin|USB_D_P_Pin;
 80032be:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80032c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032c6:	2302      	movs	r3, #2
 80032c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032cc:	2300      	movs	r3, #0
 80032ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032d2:	2303      	movs	r3, #3
 80032d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80032d8:	230a      	movs	r3, #10
 80032da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032de:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80032e2:	4619      	mov	r1, r3
 80032e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80032e8:	f000 fcc8 	bl	8003c7c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80032ec:	4b16      	ldr	r3, [pc, #88]	@ (8003348 <HAL_PCD_MspInit+0x134>)
 80032ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032f0:	4a15      	ldr	r2, [pc, #84]	@ (8003348 <HAL_PCD_MspInit+0x134>)
 80032f2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80032f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032f8:	4b13      	ldr	r3, [pc, #76]	@ (8003348 <HAL_PCD_MspInit+0x134>)
 80032fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003300:	613b      	str	r3, [r7, #16]
 8003302:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003304:	4b10      	ldr	r3, [pc, #64]	@ (8003348 <HAL_PCD_MspInit+0x134>)
 8003306:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003308:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d114      	bne.n	800333a <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003310:	4b0d      	ldr	r3, [pc, #52]	@ (8003348 <HAL_PCD_MspInit+0x134>)
 8003312:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003314:	4a0c      	ldr	r2, [pc, #48]	@ (8003348 <HAL_PCD_MspInit+0x134>)
 8003316:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800331a:	6593      	str	r3, [r2, #88]	@ 0x58
 800331c:	4b0a      	ldr	r3, [pc, #40]	@ (8003348 <HAL_PCD_MspInit+0x134>)
 800331e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003320:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003324:	60fb      	str	r3, [r7, #12]
 8003326:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8003328:	f001 f83c 	bl	80043a4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800332c:	4b06      	ldr	r3, [pc, #24]	@ (8003348 <HAL_PCD_MspInit+0x134>)
 800332e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003330:	4a05      	ldr	r2, [pc, #20]	@ (8003348 <HAL_PCD_MspInit+0x134>)
 8003332:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003336:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8003338:	e001      	b.n	800333e <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 800333a:	f001 f833 	bl	80043a4 <HAL_PWREx_EnableVddUSB>
}
 800333e:	bf00      	nop
 8003340:	37b8      	adds	r7, #184	@ 0xb8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	40021000 	.word	0x40021000

0800334c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800334c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003384 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003350:	f7ff fd22 	bl	8002d98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003354:	480c      	ldr	r0, [pc, #48]	@ (8003388 <LoopForever+0x6>)
  ldr r1, =_edata
 8003356:	490d      	ldr	r1, [pc, #52]	@ (800338c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003358:	4a0d      	ldr	r2, [pc, #52]	@ (8003390 <LoopForever+0xe>)
  movs r3, #0
 800335a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800335c:	e002      	b.n	8003364 <LoopCopyDataInit>

0800335e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800335e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003360:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003362:	3304      	adds	r3, #4

08003364 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003364:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003366:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003368:	d3f9      	bcc.n	800335e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800336a:	4a0a      	ldr	r2, [pc, #40]	@ (8003394 <LoopForever+0x12>)
  ldr r4, =_ebss
 800336c:	4c0a      	ldr	r4, [pc, #40]	@ (8003398 <LoopForever+0x16>)
  movs r3, #0
 800336e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003370:	e001      	b.n	8003376 <LoopFillZerobss>

08003372 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003372:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003374:	3204      	adds	r2, #4

08003376 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003376:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003378:	d3fb      	bcc.n	8003372 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800337a:	f00c fe5f 	bl	801003c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800337e:	f7ff fa35 	bl	80027ec <main>

08003382 <LoopForever>:

LoopForever:
    b LoopForever
 8003382:	e7fe      	b.n	8003382 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003384:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003388:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800338c:	2000021c 	.word	0x2000021c
  ldr r2, =_sidata
 8003390:	080111e4 	.word	0x080111e4
  ldr r2, =_sbss
 8003394:	2000021c 	.word	0x2000021c
  ldr r4, =_ebss
 8003398:	2001756c 	.word	0x2001756c

0800339c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800339c:	e7fe      	b.n	800339c <ADC1_2_IRQHandler>

0800339e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800339e:	b580      	push	{r7, lr}
 80033a0:	b082      	sub	sp, #8
 80033a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80033a4:	2300      	movs	r3, #0
 80033a6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033a8:	2003      	movs	r0, #3
 80033aa:	f000 f902 	bl	80035b2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80033ae:	200f      	movs	r0, #15
 80033b0:	f7ff fbbe 	bl	8002b30 <HAL_InitTick>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d002      	beq.n	80033c0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	71fb      	strb	r3, [r7, #7]
 80033be:	e001      	b.n	80033c4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80033c0:	f7ff fb8e 	bl	8002ae0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80033c4:	79fb      	ldrb	r3, [r7, #7]
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
	...

080033d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033d0:	b480      	push	{r7}
 80033d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80033d4:	4b06      	ldr	r3, [pc, #24]	@ (80033f0 <HAL_IncTick+0x20>)
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	461a      	mov	r2, r3
 80033da:	4b06      	ldr	r3, [pc, #24]	@ (80033f4 <HAL_IncTick+0x24>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4413      	add	r3, r2
 80033e0:	4a04      	ldr	r2, [pc, #16]	@ (80033f4 <HAL_IncTick+0x24>)
 80033e2:	6013      	str	r3, [r2, #0]
}
 80033e4:	bf00      	nop
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	200001c4 	.word	0x200001c4
 80033f4:	20002a98 	.word	0x20002a98

080033f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
  return uwTick;
 80033fc:	4b03      	ldr	r3, [pc, #12]	@ (800340c <HAL_GetTick+0x14>)
 80033fe:	681b      	ldr	r3, [r3, #0]
}
 8003400:	4618      	mov	r0, r3
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	20002a98 	.word	0x20002a98

08003410 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003418:	f7ff ffee 	bl	80033f8 <HAL_GetTick>
 800341c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003428:	d005      	beq.n	8003436 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800342a:	4b0a      	ldr	r3, [pc, #40]	@ (8003454 <HAL_Delay+0x44>)
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	461a      	mov	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	4413      	add	r3, r2
 8003434:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003436:	bf00      	nop
 8003438:	f7ff ffde 	bl	80033f8 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	429a      	cmp	r2, r3
 8003446:	d8f7      	bhi.n	8003438 <HAL_Delay+0x28>
  {
  }
}
 8003448:	bf00      	nop
 800344a:	bf00      	nop
 800344c:	3710      	adds	r7, #16
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	200001c4 	.word	0x200001c4

08003458 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003458:	b480      	push	{r7}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f003 0307 	and.w	r3, r3, #7
 8003466:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003468:	4b0c      	ldr	r3, [pc, #48]	@ (800349c <__NVIC_SetPriorityGrouping+0x44>)
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800346e:	68ba      	ldr	r2, [r7, #8]
 8003470:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003474:	4013      	ands	r3, r2
 8003476:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003480:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003484:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003488:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800348a:	4a04      	ldr	r2, [pc, #16]	@ (800349c <__NVIC_SetPriorityGrouping+0x44>)
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	60d3      	str	r3, [r2, #12]
}
 8003490:	bf00      	nop
 8003492:	3714      	adds	r7, #20
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr
 800349c:	e000ed00 	.word	0xe000ed00

080034a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034a0:	b480      	push	{r7}
 80034a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034a4:	4b04      	ldr	r3, [pc, #16]	@ (80034b8 <__NVIC_GetPriorityGrouping+0x18>)
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	0a1b      	lsrs	r3, r3, #8
 80034aa:	f003 0307 	and.w	r3, r3, #7
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr
 80034b8:	e000ed00 	.word	0xe000ed00

080034bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	4603      	mov	r3, r0
 80034c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	db0b      	blt.n	80034e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034ce:	79fb      	ldrb	r3, [r7, #7]
 80034d0:	f003 021f 	and.w	r2, r3, #31
 80034d4:	4907      	ldr	r1, [pc, #28]	@ (80034f4 <__NVIC_EnableIRQ+0x38>)
 80034d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034da:	095b      	lsrs	r3, r3, #5
 80034dc:	2001      	movs	r0, #1
 80034de:	fa00 f202 	lsl.w	r2, r0, r2
 80034e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034e6:	bf00      	nop
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	e000e100 	.word	0xe000e100

080034f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	4603      	mov	r3, r0
 8003500:	6039      	str	r1, [r7, #0]
 8003502:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003508:	2b00      	cmp	r3, #0
 800350a:	db0a      	blt.n	8003522 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	b2da      	uxtb	r2, r3
 8003510:	490c      	ldr	r1, [pc, #48]	@ (8003544 <__NVIC_SetPriority+0x4c>)
 8003512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003516:	0112      	lsls	r2, r2, #4
 8003518:	b2d2      	uxtb	r2, r2
 800351a:	440b      	add	r3, r1
 800351c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003520:	e00a      	b.n	8003538 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	b2da      	uxtb	r2, r3
 8003526:	4908      	ldr	r1, [pc, #32]	@ (8003548 <__NVIC_SetPriority+0x50>)
 8003528:	79fb      	ldrb	r3, [r7, #7]
 800352a:	f003 030f 	and.w	r3, r3, #15
 800352e:	3b04      	subs	r3, #4
 8003530:	0112      	lsls	r2, r2, #4
 8003532:	b2d2      	uxtb	r2, r2
 8003534:	440b      	add	r3, r1
 8003536:	761a      	strb	r2, [r3, #24]
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr
 8003544:	e000e100 	.word	0xe000e100
 8003548:	e000ed00 	.word	0xe000ed00

0800354c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800354c:	b480      	push	{r7}
 800354e:	b089      	sub	sp, #36	@ 0x24
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f003 0307 	and.w	r3, r3, #7
 800355e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	f1c3 0307 	rsb	r3, r3, #7
 8003566:	2b04      	cmp	r3, #4
 8003568:	bf28      	it	cs
 800356a:	2304      	movcs	r3, #4
 800356c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	3304      	adds	r3, #4
 8003572:	2b06      	cmp	r3, #6
 8003574:	d902      	bls.n	800357c <NVIC_EncodePriority+0x30>
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	3b03      	subs	r3, #3
 800357a:	e000      	b.n	800357e <NVIC_EncodePriority+0x32>
 800357c:	2300      	movs	r3, #0
 800357e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003580:	f04f 32ff 	mov.w	r2, #4294967295
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	fa02 f303 	lsl.w	r3, r2, r3
 800358a:	43da      	mvns	r2, r3
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	401a      	ands	r2, r3
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003594:	f04f 31ff 	mov.w	r1, #4294967295
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	fa01 f303 	lsl.w	r3, r1, r3
 800359e:	43d9      	mvns	r1, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035a4:	4313      	orrs	r3, r2
         );
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3724      	adds	r7, #36	@ 0x24
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr

080035b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b082      	sub	sp, #8
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f7ff ff4c 	bl	8003458 <__NVIC_SetPriorityGrouping>
}
 80035c0:	bf00      	nop
 80035c2:	3708      	adds	r7, #8
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	4603      	mov	r3, r0
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
 80035d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80035d6:	2300      	movs	r3, #0
 80035d8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80035da:	f7ff ff61 	bl	80034a0 <__NVIC_GetPriorityGrouping>
 80035de:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	68b9      	ldr	r1, [r7, #8]
 80035e4:	6978      	ldr	r0, [r7, #20]
 80035e6:	f7ff ffb1 	bl	800354c <NVIC_EncodePriority>
 80035ea:	4602      	mov	r2, r0
 80035ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035f0:	4611      	mov	r1, r2
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7ff ff80 	bl	80034f8 <__NVIC_SetPriority>
}
 80035f8:	bf00      	nop
 80035fa:	3718      	adds	r7, #24
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	4603      	mov	r3, r0
 8003608:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800360a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800360e:	4618      	mov	r0, r3
 8003610:	f7ff ff54 	bl	80034bc <__NVIC_EnableIRQ>
}
 8003614:	bf00      	nop
 8003616:	3708      	adds	r7, #8
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e014      	b.n	8003658 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	791b      	ldrb	r3, [r3, #4]
 8003632:	b2db      	uxtb	r3, r3
 8003634:	2b00      	cmp	r3, #0
 8003636:	d105      	bne.n	8003644 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f7fe fd24 	bl	800208c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2202      	movs	r2, #2
 8003648:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3708      	adds	r7, #8
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b088      	sub	sp, #32
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800366c:	2300      	movs	r3, #0
 800366e:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	795b      	ldrb	r3, [r3, #5]
 8003674:	2b01      	cmp	r3, #1
 8003676:	d101      	bne.n	800367c <HAL_DAC_ConfigChannel+0x1c>
 8003678:	2302      	movs	r3, #2
 800367a:	e114      	b.n	80038a6 <HAL_DAC_ConfigChannel+0x246>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2201      	movs	r2, #1
 8003680:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2202      	movs	r2, #2
 8003686:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2b04      	cmp	r3, #4
 800368e:	f040 8081 	bne.w	8003794 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003692:	f7ff feb1 	bl	80033f8 <HAL_GetTick>
 8003696:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d140      	bne.n	8003720 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800369e:	e018      	b.n	80036d2 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80036a0:	f7ff feaa 	bl	80033f8 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d911      	bls.n	80036d2 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00a      	beq.n	80036d2 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	f043 0208 	orr.w	r2, r3, #8
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2203      	movs	r2, #3
 80036cc:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e0e9      	b.n	80038a6 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d1df      	bne.n	80036a0 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 80036e0:	2001      	movs	r0, #1
 80036e2:	f7ff fe95 	bl	8003410 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68ba      	ldr	r2, [r7, #8]
 80036ec:	6992      	ldr	r2, [r2, #24]
 80036ee:	641a      	str	r2, [r3, #64]	@ 0x40
 80036f0:	e023      	b.n	800373a <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80036f2:	f7ff fe81 	bl	80033f8 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d90f      	bls.n	8003720 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003706:	2b00      	cmp	r3, #0
 8003708:	da0a      	bge.n	8003720 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	f043 0208 	orr.w	r2, r3, #8
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2203      	movs	r2, #3
 800371a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e0c2      	b.n	80038a6 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003726:	2b00      	cmp	r3, #0
 8003728:	dbe3      	blt.n	80036f2 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 800372a:	2001      	movs	r0, #1
 800372c:	f7ff fe70 	bl	8003410 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68ba      	ldr	r2, [r7, #8]
 8003736:	6992      	ldr	r2, [r2, #24]
 8003738:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f003 0310 	and.w	r3, r3, #16
 8003746:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800374a:	fa01 f303 	lsl.w	r3, r1, r3
 800374e:	43db      	mvns	r3, r3
 8003750:	ea02 0103 	and.w	r1, r2, r3
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	69da      	ldr	r2, [r3, #28]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f003 0310 	and.w	r3, r3, #16
 800375e:	409a      	lsls	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	430a      	orrs	r2, r1
 8003766:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f003 0310 	and.w	r3, r3, #16
 8003774:	21ff      	movs	r1, #255	@ 0xff
 8003776:	fa01 f303 	lsl.w	r3, r1, r3
 800377a:	43db      	mvns	r3, r3
 800377c:	ea02 0103 	and.w	r1, r2, r3
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	6a1a      	ldr	r2, [r3, #32]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f003 0310 	and.w	r3, r3, #16
 800378a:	409a      	lsls	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	430a      	orrs	r2, r1
 8003792:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	2b01      	cmp	r3, #1
 800379a:	d11d      	bne.n	80037d8 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037a2:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f003 0310 	and.w	r3, r3, #16
 80037aa:	221f      	movs	r2, #31
 80037ac:	fa02 f303 	lsl.w	r3, r2, r3
 80037b0:	43db      	mvns	r3, r3
 80037b2:	69ba      	ldr	r2, [r7, #24]
 80037b4:	4013      	ands	r3, r2
 80037b6:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	695b      	ldr	r3, [r3, #20]
 80037bc:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f003 0310 	and.w	r3, r3, #16
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	69ba      	ldr	r2, [r7, #24]
 80037d6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037de:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f003 0310 	and.w	r3, r3, #16
 80037e6:	2207      	movs	r2, #7
 80037e8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ec:	43db      	mvns	r3, r3
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	4013      	ands	r3, r2
 80037f2:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	431a      	orrs	r2, r3
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	4313      	orrs	r3, r2
 8003804:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f003 0310 	and.w	r3, r3, #16
 800380c:	697a      	ldr	r2, [r7, #20]
 800380e:	fa02 f303 	lsl.w	r3, r2, r3
 8003812:	69ba      	ldr	r2, [r7, #24]
 8003814:	4313      	orrs	r3, r2
 8003816:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	6819      	ldr	r1, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f003 0310 	and.w	r3, r3, #16
 800382c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003830:	fa02 f303 	lsl.w	r3, r2, r3
 8003834:	43da      	mvns	r2, r3
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	400a      	ands	r2, r1
 800383c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f003 0310 	and.w	r3, r3, #16
 800384c:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8003850:	fa02 f303 	lsl.w	r3, r2, r3
 8003854:	43db      	mvns	r3, r3
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	4013      	ands	r3, r2
 800385a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f003 0310 	and.w	r3, r3, #16
 8003868:	697a      	ldr	r2, [r7, #20]
 800386a:	fa02 f303 	lsl.w	r3, r2, r3
 800386e:	69ba      	ldr	r2, [r7, #24]
 8003870:	4313      	orrs	r3, r2
 8003872:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6819      	ldr	r1, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f003 0310 	and.w	r3, r3, #16
 8003888:	22c0      	movs	r2, #192	@ 0xc0
 800388a:	fa02 f303 	lsl.w	r3, r2, r3
 800388e:	43da      	mvns	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	400a      	ands	r2, r1
 8003896:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2201      	movs	r2, #1
 800389c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3720      	adds	r7, #32
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
	...

080038b0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b085      	sub	sp, #20
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d101      	bne.n	80038c2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e098      	b.n	80039f4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	461a      	mov	r2, r3
 80038c8:	4b4d      	ldr	r3, [pc, #308]	@ (8003a00 <HAL_DMA_Init+0x150>)
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d80f      	bhi.n	80038ee <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	461a      	mov	r2, r3
 80038d4:	4b4b      	ldr	r3, [pc, #300]	@ (8003a04 <HAL_DMA_Init+0x154>)
 80038d6:	4413      	add	r3, r2
 80038d8:	4a4b      	ldr	r2, [pc, #300]	@ (8003a08 <HAL_DMA_Init+0x158>)
 80038da:	fba2 2303 	umull	r2, r3, r2, r3
 80038de:	091b      	lsrs	r3, r3, #4
 80038e0:	009a      	lsls	r2, r3, #2
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a48      	ldr	r2, [pc, #288]	@ (8003a0c <HAL_DMA_Init+0x15c>)
 80038ea:	641a      	str	r2, [r3, #64]	@ 0x40
 80038ec:	e00e      	b.n	800390c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	461a      	mov	r2, r3
 80038f4:	4b46      	ldr	r3, [pc, #280]	@ (8003a10 <HAL_DMA_Init+0x160>)
 80038f6:	4413      	add	r3, r2
 80038f8:	4a43      	ldr	r2, [pc, #268]	@ (8003a08 <HAL_DMA_Init+0x158>)
 80038fa:	fba2 2303 	umull	r2, r3, r2, r3
 80038fe:	091b      	lsrs	r3, r3, #4
 8003900:	009a      	lsls	r2, r3, #2
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a42      	ldr	r2, [pc, #264]	@ (8003a14 <HAL_DMA_Init+0x164>)
 800390a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2202      	movs	r2, #2
 8003910:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003922:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003926:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003930:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800393c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003948:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003950:	68fa      	ldr	r2, [r7, #12]
 8003952:	4313      	orrs	r3, r2
 8003954:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003966:	d039      	beq.n	80039dc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800396c:	4a27      	ldr	r2, [pc, #156]	@ (8003a0c <HAL_DMA_Init+0x15c>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d11a      	bne.n	80039a8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003972:	4b29      	ldr	r3, [pc, #164]	@ (8003a18 <HAL_DMA_Init+0x168>)
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800397a:	f003 031c 	and.w	r3, r3, #28
 800397e:	210f      	movs	r1, #15
 8003980:	fa01 f303 	lsl.w	r3, r1, r3
 8003984:	43db      	mvns	r3, r3
 8003986:	4924      	ldr	r1, [pc, #144]	@ (8003a18 <HAL_DMA_Init+0x168>)
 8003988:	4013      	ands	r3, r2
 800398a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800398c:	4b22      	ldr	r3, [pc, #136]	@ (8003a18 <HAL_DMA_Init+0x168>)
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6859      	ldr	r1, [r3, #4]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003998:	f003 031c 	and.w	r3, r3, #28
 800399c:	fa01 f303 	lsl.w	r3, r1, r3
 80039a0:	491d      	ldr	r1, [pc, #116]	@ (8003a18 <HAL_DMA_Init+0x168>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	600b      	str	r3, [r1, #0]
 80039a6:	e019      	b.n	80039dc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80039a8:	4b1c      	ldr	r3, [pc, #112]	@ (8003a1c <HAL_DMA_Init+0x16c>)
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039b0:	f003 031c 	and.w	r3, r3, #28
 80039b4:	210f      	movs	r1, #15
 80039b6:	fa01 f303 	lsl.w	r3, r1, r3
 80039ba:	43db      	mvns	r3, r3
 80039bc:	4917      	ldr	r1, [pc, #92]	@ (8003a1c <HAL_DMA_Init+0x16c>)
 80039be:	4013      	ands	r3, r2
 80039c0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80039c2:	4b16      	ldr	r3, [pc, #88]	@ (8003a1c <HAL_DMA_Init+0x16c>)
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6859      	ldr	r1, [r3, #4]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ce:	f003 031c 	and.w	r3, r3, #28
 80039d2:	fa01 f303 	lsl.w	r3, r1, r3
 80039d6:	4911      	ldr	r1, [pc, #68]	@ (8003a1c <HAL_DMA_Init+0x16c>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2201      	movs	r2, #1
 80039e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3714      	adds	r7, #20
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr
 8003a00:	40020407 	.word	0x40020407
 8003a04:	bffdfff8 	.word	0xbffdfff8
 8003a08:	cccccccd 	.word	0xcccccccd
 8003a0c:	40020000 	.word	0x40020000
 8003a10:	bffdfbf8 	.word	0xbffdfbf8
 8003a14:	40020400 	.word	0x40020400
 8003a18:	400200a8 	.word	0x400200a8
 8003a1c:	400204a8 	.word	0x400204a8

08003a20 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d008      	beq.n	8003a4a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2204      	movs	r2, #4
 8003a3c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e022      	b.n	8003a90 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f022 020e 	bic.w	r2, r2, #14
 8003a58:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f022 0201 	bic.w	r2, r2, #1
 8003a68:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a6e:	f003 021c 	and.w	r2, r3, #28
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a76:	2101      	movs	r1, #1
 8003a78:	fa01 f202 	lsl.w	r2, r1, r2
 8003a7c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8003a8e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3714      	adds	r7, #20
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d005      	beq.n	8003ac0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2204      	movs	r2, #4
 8003ab8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	73fb      	strb	r3, [r7, #15]
 8003abe:	e029      	b.n	8003b14 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f022 020e 	bic.w	r2, r2, #14
 8003ace:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 0201 	bic.w	r2, r2, #1
 8003ade:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ae4:	f003 021c 	and.w	r2, r3, #28
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aec:	2101      	movs	r1, #1
 8003aee:	fa01 f202 	lsl.w	r2, r1, r2
 8003af2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d003      	beq.n	8003b14 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	4798      	blx	r3
    }
  }
  return status;
 8003b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}

08003b1e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b084      	sub	sp, #16
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b3a:	f003 031c 	and.w	r3, r3, #28
 8003b3e:	2204      	movs	r2, #4
 8003b40:	409a      	lsls	r2, r3
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	4013      	ands	r3, r2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d026      	beq.n	8003b98 <HAL_DMA_IRQHandler+0x7a>
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	f003 0304 	and.w	r3, r3, #4
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d021      	beq.n	8003b98 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0320 	and.w	r3, r3, #32
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d107      	bne.n	8003b72 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f022 0204 	bic.w	r2, r2, #4
 8003b70:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b76:	f003 021c 	and.w	r2, r3, #28
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b7e:	2104      	movs	r1, #4
 8003b80:	fa01 f202 	lsl.w	r2, r1, r2
 8003b84:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d071      	beq.n	8003c72 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003b96:	e06c      	b.n	8003c72 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b9c:	f003 031c 	and.w	r3, r3, #28
 8003ba0:	2202      	movs	r2, #2
 8003ba2:	409a      	lsls	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d02e      	beq.n	8003c0a <HAL_DMA_IRQHandler+0xec>
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d029      	beq.n	8003c0a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0320 	and.w	r3, r3, #32
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d10b      	bne.n	8003bdc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f022 020a 	bic.w	r2, r2, #10
 8003bd2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003be0:	f003 021c 	and.w	r2, r3, #28
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be8:	2102      	movs	r1, #2
 8003bea:	fa01 f202 	lsl.w	r2, r1, r2
 8003bee:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d038      	beq.n	8003c72 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003c08:	e033      	b.n	8003c72 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c0e:	f003 031c 	and.w	r3, r3, #28
 8003c12:	2208      	movs	r2, #8
 8003c14:	409a      	lsls	r2, r3
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	4013      	ands	r3, r2
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d02a      	beq.n	8003c74 <HAL_DMA_IRQHandler+0x156>
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	f003 0308 	and.w	r3, r3, #8
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d025      	beq.n	8003c74 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f022 020e 	bic.w	r2, r2, #14
 8003c36:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c3c:	f003 021c 	and.w	r2, r3, #28
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c44:	2101      	movs	r1, #1
 8003c46:	fa01 f202 	lsl.w	r2, r1, r2
 8003c4a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d004      	beq.n	8003c74 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003c72:	bf00      	nop
 8003c74:	bf00      	nop
}
 8003c76:	3710      	adds	r7, #16
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b087      	sub	sp, #28
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c86:	2300      	movs	r3, #0
 8003c88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c8a:	e166      	b.n	8003f5a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	2101      	movs	r1, #1
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	fa01 f303 	lsl.w	r3, r1, r3
 8003c98:	4013      	ands	r3, r2
 8003c9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	f000 8158 	beq.w	8003f54 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f003 0303 	and.w	r3, r3, #3
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d005      	beq.n	8003cbc <HAL_GPIO_Init+0x40>
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f003 0303 	and.w	r3, r3, #3
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d130      	bne.n	8003d1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	005b      	lsls	r3, r3, #1
 8003cc6:	2203      	movs	r2, #3
 8003cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ccc:	43db      	mvns	r3, r3
 8003cce:	693a      	ldr	r2, [r7, #16]
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	68da      	ldr	r2, [r3, #12]
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	005b      	lsls	r3, r3, #1
 8003cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfa:	43db      	mvns	r3, r3
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	4013      	ands	r3, r2
 8003d00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	091b      	lsrs	r3, r3, #4
 8003d08:	f003 0201 	and.w	r2, r3, #1
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	693a      	ldr	r2, [r7, #16]
 8003d1c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f003 0303 	and.w	r3, r3, #3
 8003d26:	2b03      	cmp	r3, #3
 8003d28:	d017      	beq.n	8003d5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	005b      	lsls	r3, r3, #1
 8003d34:	2203      	movs	r2, #3
 8003d36:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3a:	43db      	mvns	r3, r3
 8003d3c:	693a      	ldr	r2, [r7, #16]
 8003d3e:	4013      	ands	r3, r2
 8003d40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	689a      	ldr	r2, [r3, #8]
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	005b      	lsls	r3, r3, #1
 8003d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	693a      	ldr	r2, [r7, #16]
 8003d58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f003 0303 	and.w	r3, r3, #3
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d123      	bne.n	8003dae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	08da      	lsrs	r2, r3, #3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	3208      	adds	r2, #8
 8003d6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	f003 0307 	and.w	r3, r3, #7
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	220f      	movs	r2, #15
 8003d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d82:	43db      	mvns	r3, r3
 8003d84:	693a      	ldr	r2, [r7, #16]
 8003d86:	4013      	ands	r3, r2
 8003d88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	691a      	ldr	r2, [r3, #16]
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	f003 0307 	and.w	r3, r3, #7
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	08da      	lsrs	r2, r3, #3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	3208      	adds	r2, #8
 8003da8:	6939      	ldr	r1, [r7, #16]
 8003daa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	005b      	lsls	r3, r3, #1
 8003db8:	2203      	movs	r2, #3
 8003dba:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbe:	43db      	mvns	r3, r3
 8003dc0:	693a      	ldr	r2, [r7, #16]
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f003 0203 	and.w	r2, r3, #3
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	005b      	lsls	r3, r3, #1
 8003dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	f000 80b2 	beq.w	8003f54 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003df0:	4b61      	ldr	r3, [pc, #388]	@ (8003f78 <HAL_GPIO_Init+0x2fc>)
 8003df2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003df4:	4a60      	ldr	r2, [pc, #384]	@ (8003f78 <HAL_GPIO_Init+0x2fc>)
 8003df6:	f043 0301 	orr.w	r3, r3, #1
 8003dfa:	6613      	str	r3, [r2, #96]	@ 0x60
 8003dfc:	4b5e      	ldr	r3, [pc, #376]	@ (8003f78 <HAL_GPIO_Init+0x2fc>)
 8003dfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e00:	f003 0301 	and.w	r3, r3, #1
 8003e04:	60bb      	str	r3, [r7, #8]
 8003e06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003e08:	4a5c      	ldr	r2, [pc, #368]	@ (8003f7c <HAL_GPIO_Init+0x300>)
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	089b      	lsrs	r3, r3, #2
 8003e0e:	3302      	adds	r3, #2
 8003e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	f003 0303 	and.w	r3, r3, #3
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	220f      	movs	r2, #15
 8003e20:	fa02 f303 	lsl.w	r3, r2, r3
 8003e24:	43db      	mvns	r3, r3
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	4013      	ands	r3, r2
 8003e2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003e32:	d02b      	beq.n	8003e8c <HAL_GPIO_Init+0x210>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4a52      	ldr	r2, [pc, #328]	@ (8003f80 <HAL_GPIO_Init+0x304>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d025      	beq.n	8003e88 <HAL_GPIO_Init+0x20c>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a51      	ldr	r2, [pc, #324]	@ (8003f84 <HAL_GPIO_Init+0x308>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d01f      	beq.n	8003e84 <HAL_GPIO_Init+0x208>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a50      	ldr	r2, [pc, #320]	@ (8003f88 <HAL_GPIO_Init+0x30c>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d019      	beq.n	8003e80 <HAL_GPIO_Init+0x204>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a4f      	ldr	r2, [pc, #316]	@ (8003f8c <HAL_GPIO_Init+0x310>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d013      	beq.n	8003e7c <HAL_GPIO_Init+0x200>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a4e      	ldr	r2, [pc, #312]	@ (8003f90 <HAL_GPIO_Init+0x314>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d00d      	beq.n	8003e78 <HAL_GPIO_Init+0x1fc>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a4d      	ldr	r2, [pc, #308]	@ (8003f94 <HAL_GPIO_Init+0x318>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d007      	beq.n	8003e74 <HAL_GPIO_Init+0x1f8>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a4c      	ldr	r2, [pc, #304]	@ (8003f98 <HAL_GPIO_Init+0x31c>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d101      	bne.n	8003e70 <HAL_GPIO_Init+0x1f4>
 8003e6c:	2307      	movs	r3, #7
 8003e6e:	e00e      	b.n	8003e8e <HAL_GPIO_Init+0x212>
 8003e70:	2308      	movs	r3, #8
 8003e72:	e00c      	b.n	8003e8e <HAL_GPIO_Init+0x212>
 8003e74:	2306      	movs	r3, #6
 8003e76:	e00a      	b.n	8003e8e <HAL_GPIO_Init+0x212>
 8003e78:	2305      	movs	r3, #5
 8003e7a:	e008      	b.n	8003e8e <HAL_GPIO_Init+0x212>
 8003e7c:	2304      	movs	r3, #4
 8003e7e:	e006      	b.n	8003e8e <HAL_GPIO_Init+0x212>
 8003e80:	2303      	movs	r3, #3
 8003e82:	e004      	b.n	8003e8e <HAL_GPIO_Init+0x212>
 8003e84:	2302      	movs	r3, #2
 8003e86:	e002      	b.n	8003e8e <HAL_GPIO_Init+0x212>
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e000      	b.n	8003e8e <HAL_GPIO_Init+0x212>
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	697a      	ldr	r2, [r7, #20]
 8003e90:	f002 0203 	and.w	r2, r2, #3
 8003e94:	0092      	lsls	r2, r2, #2
 8003e96:	4093      	lsls	r3, r2
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003e9e:	4937      	ldr	r1, [pc, #220]	@ (8003f7c <HAL_GPIO_Init+0x300>)
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	089b      	lsrs	r3, r3, #2
 8003ea4:	3302      	adds	r3, #2
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003eac:	4b3b      	ldr	r3, [pc, #236]	@ (8003f9c <HAL_GPIO_Init+0x320>)
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	43db      	mvns	r3, r3
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	4013      	ands	r3, r2
 8003eba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d003      	beq.n	8003ed0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003ec8:	693a      	ldr	r2, [r7, #16]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ed0:	4a32      	ldr	r2, [pc, #200]	@ (8003f9c <HAL_GPIO_Init+0x320>)
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003ed6:	4b31      	ldr	r3, [pc, #196]	@ (8003f9c <HAL_GPIO_Init+0x320>)
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	43db      	mvns	r3, r3
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d003      	beq.n	8003efa <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003efa:	4a28      	ldr	r2, [pc, #160]	@ (8003f9c <HAL_GPIO_Init+0x320>)
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003f00:	4b26      	ldr	r3, [pc, #152]	@ (8003f9c <HAL_GPIO_Init+0x320>)
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	43db      	mvns	r3, r3
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d003      	beq.n	8003f24 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003f24:	4a1d      	ldr	r2, [pc, #116]	@ (8003f9c <HAL_GPIO_Init+0x320>)
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003f2a:	4b1c      	ldr	r3, [pc, #112]	@ (8003f9c <HAL_GPIO_Init+0x320>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	43db      	mvns	r3, r3
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	4013      	ands	r3, r2
 8003f38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d003      	beq.n	8003f4e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003f46:	693a      	ldr	r2, [r7, #16]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003f4e:	4a13      	ldr	r2, [pc, #76]	@ (8003f9c <HAL_GPIO_Init+0x320>)
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	3301      	adds	r3, #1
 8003f58:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	fa22 f303 	lsr.w	r3, r2, r3
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	f47f ae91 	bne.w	8003c8c <HAL_GPIO_Init+0x10>
  }
}
 8003f6a:	bf00      	nop
 8003f6c:	bf00      	nop
 8003f6e:	371c      	adds	r7, #28
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr
 8003f78:	40021000 	.word	0x40021000
 8003f7c:	40010000 	.word	0x40010000
 8003f80:	48000400 	.word	0x48000400
 8003f84:	48000800 	.word	0x48000800
 8003f88:	48000c00 	.word	0x48000c00
 8003f8c:	48001000 	.word	0x48001000
 8003f90:	48001400 	.word	0x48001400
 8003f94:	48001800 	.word	0x48001800
 8003f98:	48001c00 	.word	0x48001c00
 8003f9c:	40010400 	.word	0x40010400

08003fa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	460b      	mov	r3, r1
 8003faa:	807b      	strh	r3, [r7, #2]
 8003fac:	4613      	mov	r3, r2
 8003fae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003fb0:	787b      	ldrb	r3, [r7, #1]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d003      	beq.n	8003fbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003fb6:	887a      	ldrh	r2, [r7, #2]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003fbc:	e002      	b.n	8003fc4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003fbe:	887a      	ldrh	r2, [r7, #2]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	460b      	mov	r3, r1
 8003fda:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	695b      	ldr	r3, [r3, #20]
 8003fe0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003fe2:	887a      	ldrh	r2, [r7, #2]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	041a      	lsls	r2, r3, #16
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	43d9      	mvns	r1, r3
 8003fee:	887b      	ldrh	r3, [r7, #2]
 8003ff0:	400b      	ands	r3, r1
 8003ff2:	431a      	orrs	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	619a      	str	r2, [r3, #24]
}
 8003ff8:	bf00      	nop
 8003ffa:	3714      	adds	r7, #20
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	4603      	mov	r3, r0
 800400c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800400e:	4b08      	ldr	r3, [pc, #32]	@ (8004030 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004010:	695a      	ldr	r2, [r3, #20]
 8004012:	88fb      	ldrh	r3, [r7, #6]
 8004014:	4013      	ands	r3, r2
 8004016:	2b00      	cmp	r3, #0
 8004018:	d006      	beq.n	8004028 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800401a:	4a05      	ldr	r2, [pc, #20]	@ (8004030 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800401c:	88fb      	ldrh	r3, [r7, #6]
 800401e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004020:	88fb      	ldrh	r3, [r7, #6]
 8004022:	4618      	mov	r0, r3
 8004024:	f000 f806 	bl	8004034 <HAL_GPIO_EXTI_Callback>
  }
}
 8004028:	bf00      	nop
 800402a:	3708      	adds	r7, #8
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	40010400 	.word	0x40010400

08004034 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	4603      	mov	r3, r0
 800403c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800403e:	bf00      	nop
 8004040:	370c      	adds	r7, #12
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr

0800404a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800404a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800404c:	b08f      	sub	sp, #60	@ 0x3c
 800404e:	af0a      	add	r7, sp, #40	@ 0x28
 8004050:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d101      	bne.n	800405c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e116      	b.n	800428a <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b00      	cmp	r3, #0
 800406c:	d106      	bne.n	800407c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f7ff f8cc 	bl	8003214 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2203      	movs	r2, #3
 8004080:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004088:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800408c:	2b00      	cmp	r3, #0
 800408e:	d102      	bne.n	8004096 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4618      	mov	r0, r3
 800409c:	f004 fdca 	bl	8008c34 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	603b      	str	r3, [r7, #0]
 80040a6:	687e      	ldr	r6, [r7, #4]
 80040a8:	466d      	mov	r5, sp
 80040aa:	f106 0410 	add.w	r4, r6, #16
 80040ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80040ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80040be:	1d33      	adds	r3, r6, #4
 80040c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040c2:	6838      	ldr	r0, [r7, #0]
 80040c4:	f004 fd8a 	bl	8008bdc <USB_CoreInit>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d005      	beq.n	80040da <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2202      	movs	r2, #2
 80040d2:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e0d7      	b.n	800428a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2100      	movs	r1, #0
 80040e0:	4618      	mov	r0, r3
 80040e2:	f004 fdb8 	bl	8008c56 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040e6:	2300      	movs	r3, #0
 80040e8:	73fb      	strb	r3, [r7, #15]
 80040ea:	e04a      	b.n	8004182 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80040ec:	7bfa      	ldrb	r2, [r7, #15]
 80040ee:	6879      	ldr	r1, [r7, #4]
 80040f0:	4613      	mov	r3, r2
 80040f2:	00db      	lsls	r3, r3, #3
 80040f4:	4413      	add	r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	440b      	add	r3, r1
 80040fa:	333d      	adds	r3, #61	@ 0x3d
 80040fc:	2201      	movs	r2, #1
 80040fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004100:	7bfa      	ldrb	r2, [r7, #15]
 8004102:	6879      	ldr	r1, [r7, #4]
 8004104:	4613      	mov	r3, r2
 8004106:	00db      	lsls	r3, r3, #3
 8004108:	4413      	add	r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	440b      	add	r3, r1
 800410e:	333c      	adds	r3, #60	@ 0x3c
 8004110:	7bfa      	ldrb	r2, [r7, #15]
 8004112:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004114:	7bfa      	ldrb	r2, [r7, #15]
 8004116:	7bfb      	ldrb	r3, [r7, #15]
 8004118:	b298      	uxth	r0, r3
 800411a:	6879      	ldr	r1, [r7, #4]
 800411c:	4613      	mov	r3, r2
 800411e:	00db      	lsls	r3, r3, #3
 8004120:	4413      	add	r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	440b      	add	r3, r1
 8004126:	3356      	adds	r3, #86	@ 0x56
 8004128:	4602      	mov	r2, r0
 800412a:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800412c:	7bfa      	ldrb	r2, [r7, #15]
 800412e:	6879      	ldr	r1, [r7, #4]
 8004130:	4613      	mov	r3, r2
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	4413      	add	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	440b      	add	r3, r1
 800413a:	3340      	adds	r3, #64	@ 0x40
 800413c:	2200      	movs	r2, #0
 800413e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004140:	7bfa      	ldrb	r2, [r7, #15]
 8004142:	6879      	ldr	r1, [r7, #4]
 8004144:	4613      	mov	r3, r2
 8004146:	00db      	lsls	r3, r3, #3
 8004148:	4413      	add	r3, r2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	440b      	add	r3, r1
 800414e:	3344      	adds	r3, #68	@ 0x44
 8004150:	2200      	movs	r2, #0
 8004152:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004154:	7bfa      	ldrb	r2, [r7, #15]
 8004156:	6879      	ldr	r1, [r7, #4]
 8004158:	4613      	mov	r3, r2
 800415a:	00db      	lsls	r3, r3, #3
 800415c:	4413      	add	r3, r2
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	440b      	add	r3, r1
 8004162:	3348      	adds	r3, #72	@ 0x48
 8004164:	2200      	movs	r2, #0
 8004166:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004168:	7bfa      	ldrb	r2, [r7, #15]
 800416a:	6879      	ldr	r1, [r7, #4]
 800416c:	4613      	mov	r3, r2
 800416e:	00db      	lsls	r3, r3, #3
 8004170:	4413      	add	r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	440b      	add	r3, r1
 8004176:	334c      	adds	r3, #76	@ 0x4c
 8004178:	2200      	movs	r2, #0
 800417a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800417c:	7bfb      	ldrb	r3, [r7, #15]
 800417e:	3301      	adds	r3, #1
 8004180:	73fb      	strb	r3, [r7, #15]
 8004182:	7bfa      	ldrb	r2, [r7, #15]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	429a      	cmp	r2, r3
 800418a:	d3af      	bcc.n	80040ec <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800418c:	2300      	movs	r3, #0
 800418e:	73fb      	strb	r3, [r7, #15]
 8004190:	e044      	b.n	800421c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004192:	7bfa      	ldrb	r2, [r7, #15]
 8004194:	6879      	ldr	r1, [r7, #4]
 8004196:	4613      	mov	r3, r2
 8004198:	00db      	lsls	r3, r3, #3
 800419a:	4413      	add	r3, r2
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	440b      	add	r3, r1
 80041a0:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 80041a4:	2200      	movs	r2, #0
 80041a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80041a8:	7bfa      	ldrb	r2, [r7, #15]
 80041aa:	6879      	ldr	r1, [r7, #4]
 80041ac:	4613      	mov	r3, r2
 80041ae:	00db      	lsls	r3, r3, #3
 80041b0:	4413      	add	r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	440b      	add	r3, r1
 80041b6:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 80041ba:	7bfa      	ldrb	r2, [r7, #15]
 80041bc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80041be:	7bfa      	ldrb	r2, [r7, #15]
 80041c0:	6879      	ldr	r1, [r7, #4]
 80041c2:	4613      	mov	r3, r2
 80041c4:	00db      	lsls	r3, r3, #3
 80041c6:	4413      	add	r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	440b      	add	r3, r1
 80041cc:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80041d0:	2200      	movs	r2, #0
 80041d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80041d4:	7bfa      	ldrb	r2, [r7, #15]
 80041d6:	6879      	ldr	r1, [r7, #4]
 80041d8:	4613      	mov	r3, r2
 80041da:	00db      	lsls	r3, r3, #3
 80041dc:	4413      	add	r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	440b      	add	r3, r1
 80041e2:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 80041e6:	2200      	movs	r2, #0
 80041e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80041ea:	7bfa      	ldrb	r2, [r7, #15]
 80041ec:	6879      	ldr	r1, [r7, #4]
 80041ee:	4613      	mov	r3, r2
 80041f0:	00db      	lsls	r3, r3, #3
 80041f2:	4413      	add	r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	440b      	add	r3, r1
 80041f8:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 80041fc:	2200      	movs	r2, #0
 80041fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004200:	7bfa      	ldrb	r2, [r7, #15]
 8004202:	6879      	ldr	r1, [r7, #4]
 8004204:	4613      	mov	r3, r2
 8004206:	00db      	lsls	r3, r3, #3
 8004208:	4413      	add	r3, r2
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	440b      	add	r3, r1
 800420e:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8004212:	2200      	movs	r2, #0
 8004214:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004216:	7bfb      	ldrb	r3, [r7, #15]
 8004218:	3301      	adds	r3, #1
 800421a:	73fb      	strb	r3, [r7, #15]
 800421c:	7bfa      	ldrb	r2, [r7, #15]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	429a      	cmp	r2, r3
 8004224:	d3b5      	bcc.n	8004192 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	603b      	str	r3, [r7, #0]
 800422c:	687e      	ldr	r6, [r7, #4]
 800422e:	466d      	mov	r5, sp
 8004230:	f106 0410 	add.w	r4, r6, #16
 8004234:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004236:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004238:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800423a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800423c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004240:	e885 0003 	stmia.w	r5, {r0, r1}
 8004244:	1d33      	adds	r3, r6, #4
 8004246:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004248:	6838      	ldr	r0, [r7, #0]
 800424a:	f004 fd51 	bl	8008cf0 <USB_DevInit>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d005      	beq.n	8004260 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2202      	movs	r2, #2
 8004258:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e014      	b.n	800428a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004274:	2b01      	cmp	r3, #1
 8004276:	d102      	bne.n	800427e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f000 f80a 	bl	8004292 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4618      	mov	r0, r3
 8004284:	f004 fef3 	bl	800906e <USB_DevDisconnect>

  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3714      	adds	r7, #20
 800428e:	46bd      	mov	sp, r7
 8004290:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004292 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004292:	b480      	push	{r7}
 8004294:	b085      	sub	sp, #20
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	699b      	ldr	r3, [r3, #24]
 80042b4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042c4:	f043 0303 	orr.w	r3, r3, #3
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3714      	adds	r7, #20
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
	...

080042dc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80042dc:	b480      	push	{r7}
 80042de:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80042e0:	4b04      	ldr	r3, [pc, #16]	@ (80042f4 <HAL_PWREx_GetVoltageRange+0x18>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	40007000 	.word	0x40007000

080042f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b085      	sub	sp, #20
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004306:	d130      	bne.n	800436a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004308:	4b23      	ldr	r3, [pc, #140]	@ (8004398 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004310:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004314:	d038      	beq.n	8004388 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004316:	4b20      	ldr	r3, [pc, #128]	@ (8004398 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800431e:	4a1e      	ldr	r2, [pc, #120]	@ (8004398 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004320:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004324:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004326:	4b1d      	ldr	r3, [pc, #116]	@ (800439c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2232      	movs	r2, #50	@ 0x32
 800432c:	fb02 f303 	mul.w	r3, r2, r3
 8004330:	4a1b      	ldr	r2, [pc, #108]	@ (80043a0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004332:	fba2 2303 	umull	r2, r3, r2, r3
 8004336:	0c9b      	lsrs	r3, r3, #18
 8004338:	3301      	adds	r3, #1
 800433a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800433c:	e002      	b.n	8004344 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	3b01      	subs	r3, #1
 8004342:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004344:	4b14      	ldr	r3, [pc, #80]	@ (8004398 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004346:	695b      	ldr	r3, [r3, #20]
 8004348:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800434c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004350:	d102      	bne.n	8004358 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1f2      	bne.n	800433e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004358:	4b0f      	ldr	r3, [pc, #60]	@ (8004398 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800435a:	695b      	ldr	r3, [r3, #20]
 800435c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004360:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004364:	d110      	bne.n	8004388 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e00f      	b.n	800438a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800436a:	4b0b      	ldr	r3, [pc, #44]	@ (8004398 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004372:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004376:	d007      	beq.n	8004388 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004378:	4b07      	ldr	r3, [pc, #28]	@ (8004398 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004380:	4a05      	ldr	r2, [pc, #20]	@ (8004398 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004382:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004386:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	3714      	adds	r7, #20
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	40007000 	.word	0x40007000
 800439c:	200001bc 	.word	0x200001bc
 80043a0:	431bde83 	.word	0x431bde83

080043a4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80043a4:	b480      	push	{r7}
 80043a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80043a8:	4b05      	ldr	r3, [pc, #20]	@ (80043c0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	4a04      	ldr	r2, [pc, #16]	@ (80043c0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80043ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80043b2:	6053      	str	r3, [r2, #4]
}
 80043b4:	bf00      	nop
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	40007000 	.word	0x40007000

080043c4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b088      	sub	sp, #32
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d102      	bne.n	80043d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	f000 bc08 	b.w	8004be8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043d8:	4b96      	ldr	r3, [pc, #600]	@ (8004634 <HAL_RCC_OscConfig+0x270>)
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f003 030c 	and.w	r3, r3, #12
 80043e0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043e2:	4b94      	ldr	r3, [pc, #592]	@ (8004634 <HAL_RCC_OscConfig+0x270>)
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	f003 0303 	and.w	r3, r3, #3
 80043ea:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0310 	and.w	r3, r3, #16
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f000 80e4 	beq.w	80045c2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d007      	beq.n	8004410 <HAL_RCC_OscConfig+0x4c>
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	2b0c      	cmp	r3, #12
 8004404:	f040 808b 	bne.w	800451e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	2b01      	cmp	r3, #1
 800440c:	f040 8087 	bne.w	800451e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004410:	4b88      	ldr	r3, [pc, #544]	@ (8004634 <HAL_RCC_OscConfig+0x270>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0302 	and.w	r3, r3, #2
 8004418:	2b00      	cmp	r3, #0
 800441a:	d005      	beq.n	8004428 <HAL_RCC_OscConfig+0x64>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	699b      	ldr	r3, [r3, #24]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d101      	bne.n	8004428 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e3df      	b.n	8004be8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a1a      	ldr	r2, [r3, #32]
 800442c:	4b81      	ldr	r3, [pc, #516]	@ (8004634 <HAL_RCC_OscConfig+0x270>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0308 	and.w	r3, r3, #8
 8004434:	2b00      	cmp	r3, #0
 8004436:	d004      	beq.n	8004442 <HAL_RCC_OscConfig+0x7e>
 8004438:	4b7e      	ldr	r3, [pc, #504]	@ (8004634 <HAL_RCC_OscConfig+0x270>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004440:	e005      	b.n	800444e <HAL_RCC_OscConfig+0x8a>
 8004442:	4b7c      	ldr	r3, [pc, #496]	@ (8004634 <HAL_RCC_OscConfig+0x270>)
 8004444:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004448:	091b      	lsrs	r3, r3, #4
 800444a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800444e:	4293      	cmp	r3, r2
 8004450:	d223      	bcs.n	800449a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	4618      	mov	r0, r3
 8004458:	f000 fdc4 	bl	8004fe4 <RCC_SetFlashLatencyFromMSIRange>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d001      	beq.n	8004466 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e3c0      	b.n	8004be8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004466:	4b73      	ldr	r3, [pc, #460]	@ (8004634 <HAL_RCC_OscConfig+0x270>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a72      	ldr	r2, [pc, #456]	@ (8004634 <HAL_RCC_OscConfig+0x270>)
 800446c:	f043 0308 	orr.w	r3, r3, #8
 8004470:	6013      	str	r3, [r2, #0]
 8004472:	4b70      	ldr	r3, [pc, #448]	@ (8004634 <HAL_RCC_OscConfig+0x270>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a1b      	ldr	r3, [r3, #32]
 800447e:	496d      	ldr	r1, [pc, #436]	@ (8004634 <HAL_RCC_OscConfig+0x270>)
 8004480:	4313      	orrs	r3, r2
 8004482:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004484:	4b6b      	ldr	r3, [pc, #428]	@ (8004634 <HAL_RCC_OscConfig+0x270>)
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	69db      	ldr	r3, [r3, #28]
 8004490:	021b      	lsls	r3, r3, #8
 8004492:	4968      	ldr	r1, [pc, #416]	@ (8004634 <HAL_RCC_OscConfig+0x270>)
 8004494:	4313      	orrs	r3, r2
 8004496:	604b      	str	r3, [r1, #4]
 8004498:	e025      	b.n	80044e6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800449a:	4b66      	ldr	r3, [pc, #408]	@ (8004634 <HAL_RCC_OscConfig+0x270>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a65      	ldr	r2, [pc, #404]	@ (8004634 <HAL_RCC_OscConfig+0x270>)
 80044a0:	f043 0308 	orr.w	r3, r3, #8
 80044a4:	6013      	str	r3, [r2, #0]
 80044a6:	4b63      	ldr	r3, [pc, #396]	@ (8004634 <HAL_RCC_OscConfig+0x270>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a1b      	ldr	r3, [r3, #32]
 80044b2:	4960      	ldr	r1, [pc, #384]	@ (8004634 <HAL_RCC_OscConfig+0x270>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044b8:	4b5e      	ldr	r3, [pc, #376]	@ (8004634 <HAL_RCC_OscConfig+0x270>)
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	69db      	ldr	r3, [r3, #28]
 80044c4:	021b      	lsls	r3, r3, #8
 80044c6:	495b      	ldr	r1, [pc, #364]	@ (8004634 <HAL_RCC_OscConfig+0x270>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d109      	bne.n	80044e6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a1b      	ldr	r3, [r3, #32]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f000 fd84 	bl	8004fe4 <RCC_SetFlashLatencyFromMSIRange>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e380      	b.n	8004be8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80044e6:	f000 fc87 	bl	8004df8 <HAL_RCC_GetSysClockFreq>
 80044ea:	4602      	mov	r2, r0
 80044ec:	4b51      	ldr	r3, [pc, #324]	@ (8004634 <HAL_RCC_OscConfig+0x270>)
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	091b      	lsrs	r3, r3, #4
 80044f2:	f003 030f 	and.w	r3, r3, #15
 80044f6:	4950      	ldr	r1, [pc, #320]	@ (8004638 <HAL_RCC_OscConfig+0x274>)
 80044f8:	5ccb      	ldrb	r3, [r1, r3]
 80044fa:	f003 031f 	and.w	r3, r3, #31
 80044fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004502:	4a4e      	ldr	r2, [pc, #312]	@ (800463c <HAL_RCC_OscConfig+0x278>)
 8004504:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004506:	4b4e      	ldr	r3, [pc, #312]	@ (8004640 <HAL_RCC_OscConfig+0x27c>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4618      	mov	r0, r3
 800450c:	f7fe fb10 	bl	8002b30 <HAL_InitTick>
 8004510:	4603      	mov	r3, r0
 8004512:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004514:	7bfb      	ldrb	r3, [r7, #15]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d052      	beq.n	80045c0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800451a:	7bfb      	ldrb	r3, [r7, #15]
 800451c:	e364      	b.n	8004be8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d032      	beq.n	800458c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004526:	4b43      	ldr	r3, [pc, #268]	@ (8004634 <HAL_RCC_OscConfig+0x270>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a42      	ldr	r2, [pc, #264]	@ (8004634 <HAL_RCC_OscConfig+0x270>)
 800452c:	f043 0301 	orr.w	r3, r3, #1
 8004530:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004532:	f7fe ff61 	bl	80033f8 <HAL_GetTick>
 8004536:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004538:	e008      	b.n	800454c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800453a:	f7fe ff5d 	bl	80033f8 <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	2b02      	cmp	r3, #2
 8004546:	d901      	bls.n	800454c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e34d      	b.n	8004be8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800454c:	4b39      	ldr	r3, [pc, #228]	@ (8004634 <HAL_RCC_OscConfig+0x270>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	2b00      	cmp	r3, #0
 8004556:	d0f0      	beq.n	800453a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004558:	4b36      	ldr	r3, [pc, #216]	@ (8004634 <HAL_RCC_OscConfig+0x270>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a35      	ldr	r2, [pc, #212]	@ (8004634 <HAL_RCC_OscConfig+0x270>)
 800455e:	f043 0308 	orr.w	r3, r3, #8
 8004562:	6013      	str	r3, [r2, #0]
 8004564:	4b33      	ldr	r3, [pc, #204]	@ (8004634 <HAL_RCC_OscConfig+0x270>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a1b      	ldr	r3, [r3, #32]
 8004570:	4930      	ldr	r1, [pc, #192]	@ (8004634 <HAL_RCC_OscConfig+0x270>)
 8004572:	4313      	orrs	r3, r2
 8004574:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004576:	4b2f      	ldr	r3, [pc, #188]	@ (8004634 <HAL_RCC_OscConfig+0x270>)
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	69db      	ldr	r3, [r3, #28]
 8004582:	021b      	lsls	r3, r3, #8
 8004584:	492b      	ldr	r1, [pc, #172]	@ (8004634 <HAL_RCC_OscConfig+0x270>)
 8004586:	4313      	orrs	r3, r2
 8004588:	604b      	str	r3, [r1, #4]
 800458a:	e01a      	b.n	80045c2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800458c:	4b29      	ldr	r3, [pc, #164]	@ (8004634 <HAL_RCC_OscConfig+0x270>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a28      	ldr	r2, [pc, #160]	@ (8004634 <HAL_RCC_OscConfig+0x270>)
 8004592:	f023 0301 	bic.w	r3, r3, #1
 8004596:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004598:	f7fe ff2e 	bl	80033f8 <HAL_GetTick>
 800459c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800459e:	e008      	b.n	80045b2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045a0:	f7fe ff2a 	bl	80033f8 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e31a      	b.n	8004be8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80045b2:	4b20      	ldr	r3, [pc, #128]	@ (8004634 <HAL_RCC_OscConfig+0x270>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1f0      	bne.n	80045a0 <HAL_RCC_OscConfig+0x1dc>
 80045be:	e000      	b.n	80045c2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80045c0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d073      	beq.n	80046b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	2b08      	cmp	r3, #8
 80045d2:	d005      	beq.n	80045e0 <HAL_RCC_OscConfig+0x21c>
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	2b0c      	cmp	r3, #12
 80045d8:	d10e      	bne.n	80045f8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	2b03      	cmp	r3, #3
 80045de:	d10b      	bne.n	80045f8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045e0:	4b14      	ldr	r3, [pc, #80]	@ (8004634 <HAL_RCC_OscConfig+0x270>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d063      	beq.n	80046b4 <HAL_RCC_OscConfig+0x2f0>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d15f      	bne.n	80046b4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e2f7      	b.n	8004be8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004600:	d106      	bne.n	8004610 <HAL_RCC_OscConfig+0x24c>
 8004602:	4b0c      	ldr	r3, [pc, #48]	@ (8004634 <HAL_RCC_OscConfig+0x270>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a0b      	ldr	r2, [pc, #44]	@ (8004634 <HAL_RCC_OscConfig+0x270>)
 8004608:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800460c:	6013      	str	r3, [r2, #0]
 800460e:	e025      	b.n	800465c <HAL_RCC_OscConfig+0x298>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004618:	d114      	bne.n	8004644 <HAL_RCC_OscConfig+0x280>
 800461a:	4b06      	ldr	r3, [pc, #24]	@ (8004634 <HAL_RCC_OscConfig+0x270>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a05      	ldr	r2, [pc, #20]	@ (8004634 <HAL_RCC_OscConfig+0x270>)
 8004620:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004624:	6013      	str	r3, [r2, #0]
 8004626:	4b03      	ldr	r3, [pc, #12]	@ (8004634 <HAL_RCC_OscConfig+0x270>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a02      	ldr	r2, [pc, #8]	@ (8004634 <HAL_RCC_OscConfig+0x270>)
 800462c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004630:	6013      	str	r3, [r2, #0]
 8004632:	e013      	b.n	800465c <HAL_RCC_OscConfig+0x298>
 8004634:	40021000 	.word	0x40021000
 8004638:	08011158 	.word	0x08011158
 800463c:	200001bc 	.word	0x200001bc
 8004640:	200001c0 	.word	0x200001c0
 8004644:	4ba0      	ldr	r3, [pc, #640]	@ (80048c8 <HAL_RCC_OscConfig+0x504>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a9f      	ldr	r2, [pc, #636]	@ (80048c8 <HAL_RCC_OscConfig+0x504>)
 800464a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800464e:	6013      	str	r3, [r2, #0]
 8004650:	4b9d      	ldr	r3, [pc, #628]	@ (80048c8 <HAL_RCC_OscConfig+0x504>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a9c      	ldr	r2, [pc, #624]	@ (80048c8 <HAL_RCC_OscConfig+0x504>)
 8004656:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800465a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d013      	beq.n	800468c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004664:	f7fe fec8 	bl	80033f8 <HAL_GetTick>
 8004668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800466a:	e008      	b.n	800467e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800466c:	f7fe fec4 	bl	80033f8 <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	2b64      	cmp	r3, #100	@ 0x64
 8004678:	d901      	bls.n	800467e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e2b4      	b.n	8004be8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800467e:	4b92      	ldr	r3, [pc, #584]	@ (80048c8 <HAL_RCC_OscConfig+0x504>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d0f0      	beq.n	800466c <HAL_RCC_OscConfig+0x2a8>
 800468a:	e014      	b.n	80046b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800468c:	f7fe feb4 	bl	80033f8 <HAL_GetTick>
 8004690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004692:	e008      	b.n	80046a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004694:	f7fe feb0 	bl	80033f8 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	2b64      	cmp	r3, #100	@ 0x64
 80046a0:	d901      	bls.n	80046a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e2a0      	b.n	8004be8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046a6:	4b88      	ldr	r3, [pc, #544]	@ (80048c8 <HAL_RCC_OscConfig+0x504>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1f0      	bne.n	8004694 <HAL_RCC_OscConfig+0x2d0>
 80046b2:	e000      	b.n	80046b6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0302 	and.w	r3, r3, #2
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d060      	beq.n	8004784 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	2b04      	cmp	r3, #4
 80046c6:	d005      	beq.n	80046d4 <HAL_RCC_OscConfig+0x310>
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	2b0c      	cmp	r3, #12
 80046cc:	d119      	bne.n	8004702 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	d116      	bne.n	8004702 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046d4:	4b7c      	ldr	r3, [pc, #496]	@ (80048c8 <HAL_RCC_OscConfig+0x504>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d005      	beq.n	80046ec <HAL_RCC_OscConfig+0x328>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d101      	bne.n	80046ec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e27d      	b.n	8004be8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046ec:	4b76      	ldr	r3, [pc, #472]	@ (80048c8 <HAL_RCC_OscConfig+0x504>)
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	061b      	lsls	r3, r3, #24
 80046fa:	4973      	ldr	r1, [pc, #460]	@ (80048c8 <HAL_RCC_OscConfig+0x504>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004700:	e040      	b.n	8004784 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d023      	beq.n	8004752 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800470a:	4b6f      	ldr	r3, [pc, #444]	@ (80048c8 <HAL_RCC_OscConfig+0x504>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a6e      	ldr	r2, [pc, #440]	@ (80048c8 <HAL_RCC_OscConfig+0x504>)
 8004710:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004714:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004716:	f7fe fe6f 	bl	80033f8 <HAL_GetTick>
 800471a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800471c:	e008      	b.n	8004730 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800471e:	f7fe fe6b 	bl	80033f8 <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	2b02      	cmp	r3, #2
 800472a:	d901      	bls.n	8004730 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e25b      	b.n	8004be8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004730:	4b65      	ldr	r3, [pc, #404]	@ (80048c8 <HAL_RCC_OscConfig+0x504>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004738:	2b00      	cmp	r3, #0
 800473a:	d0f0      	beq.n	800471e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800473c:	4b62      	ldr	r3, [pc, #392]	@ (80048c8 <HAL_RCC_OscConfig+0x504>)
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	061b      	lsls	r3, r3, #24
 800474a:	495f      	ldr	r1, [pc, #380]	@ (80048c8 <HAL_RCC_OscConfig+0x504>)
 800474c:	4313      	orrs	r3, r2
 800474e:	604b      	str	r3, [r1, #4]
 8004750:	e018      	b.n	8004784 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004752:	4b5d      	ldr	r3, [pc, #372]	@ (80048c8 <HAL_RCC_OscConfig+0x504>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a5c      	ldr	r2, [pc, #368]	@ (80048c8 <HAL_RCC_OscConfig+0x504>)
 8004758:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800475c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800475e:	f7fe fe4b 	bl	80033f8 <HAL_GetTick>
 8004762:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004764:	e008      	b.n	8004778 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004766:	f7fe fe47 	bl	80033f8 <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	2b02      	cmp	r3, #2
 8004772:	d901      	bls.n	8004778 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	e237      	b.n	8004be8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004778:	4b53      	ldr	r3, [pc, #332]	@ (80048c8 <HAL_RCC_OscConfig+0x504>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004780:	2b00      	cmp	r3, #0
 8004782:	d1f0      	bne.n	8004766 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0308 	and.w	r3, r3, #8
 800478c:	2b00      	cmp	r3, #0
 800478e:	d03c      	beq.n	800480a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	695b      	ldr	r3, [r3, #20]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d01c      	beq.n	80047d2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004798:	4b4b      	ldr	r3, [pc, #300]	@ (80048c8 <HAL_RCC_OscConfig+0x504>)
 800479a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800479e:	4a4a      	ldr	r2, [pc, #296]	@ (80048c8 <HAL_RCC_OscConfig+0x504>)
 80047a0:	f043 0301 	orr.w	r3, r3, #1
 80047a4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047a8:	f7fe fe26 	bl	80033f8 <HAL_GetTick>
 80047ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80047ae:	e008      	b.n	80047c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047b0:	f7fe fe22 	bl	80033f8 <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d901      	bls.n	80047c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e212      	b.n	8004be8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80047c2:	4b41      	ldr	r3, [pc, #260]	@ (80048c8 <HAL_RCC_OscConfig+0x504>)
 80047c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047c8:	f003 0302 	and.w	r3, r3, #2
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d0ef      	beq.n	80047b0 <HAL_RCC_OscConfig+0x3ec>
 80047d0:	e01b      	b.n	800480a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047d2:	4b3d      	ldr	r3, [pc, #244]	@ (80048c8 <HAL_RCC_OscConfig+0x504>)
 80047d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047d8:	4a3b      	ldr	r2, [pc, #236]	@ (80048c8 <HAL_RCC_OscConfig+0x504>)
 80047da:	f023 0301 	bic.w	r3, r3, #1
 80047de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047e2:	f7fe fe09 	bl	80033f8 <HAL_GetTick>
 80047e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047e8:	e008      	b.n	80047fc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047ea:	f7fe fe05 	bl	80033f8 <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d901      	bls.n	80047fc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e1f5      	b.n	8004be8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047fc:	4b32      	ldr	r3, [pc, #200]	@ (80048c8 <HAL_RCC_OscConfig+0x504>)
 80047fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1ef      	bne.n	80047ea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0304 	and.w	r3, r3, #4
 8004812:	2b00      	cmp	r3, #0
 8004814:	f000 80a6 	beq.w	8004964 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004818:	2300      	movs	r3, #0
 800481a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800481c:	4b2a      	ldr	r3, [pc, #168]	@ (80048c8 <HAL_RCC_OscConfig+0x504>)
 800481e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004820:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d10d      	bne.n	8004844 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004828:	4b27      	ldr	r3, [pc, #156]	@ (80048c8 <HAL_RCC_OscConfig+0x504>)
 800482a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800482c:	4a26      	ldr	r2, [pc, #152]	@ (80048c8 <HAL_RCC_OscConfig+0x504>)
 800482e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004832:	6593      	str	r3, [r2, #88]	@ 0x58
 8004834:	4b24      	ldr	r3, [pc, #144]	@ (80048c8 <HAL_RCC_OscConfig+0x504>)
 8004836:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004838:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800483c:	60bb      	str	r3, [r7, #8]
 800483e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004840:	2301      	movs	r3, #1
 8004842:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004844:	4b21      	ldr	r3, [pc, #132]	@ (80048cc <HAL_RCC_OscConfig+0x508>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800484c:	2b00      	cmp	r3, #0
 800484e:	d118      	bne.n	8004882 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004850:	4b1e      	ldr	r3, [pc, #120]	@ (80048cc <HAL_RCC_OscConfig+0x508>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a1d      	ldr	r2, [pc, #116]	@ (80048cc <HAL_RCC_OscConfig+0x508>)
 8004856:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800485a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800485c:	f7fe fdcc 	bl	80033f8 <HAL_GetTick>
 8004860:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004862:	e008      	b.n	8004876 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004864:	f7fe fdc8 	bl	80033f8 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	2b02      	cmp	r3, #2
 8004870:	d901      	bls.n	8004876 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e1b8      	b.n	8004be8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004876:	4b15      	ldr	r3, [pc, #84]	@ (80048cc <HAL_RCC_OscConfig+0x508>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800487e:	2b00      	cmp	r3, #0
 8004880:	d0f0      	beq.n	8004864 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	2b01      	cmp	r3, #1
 8004888:	d108      	bne.n	800489c <HAL_RCC_OscConfig+0x4d8>
 800488a:	4b0f      	ldr	r3, [pc, #60]	@ (80048c8 <HAL_RCC_OscConfig+0x504>)
 800488c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004890:	4a0d      	ldr	r2, [pc, #52]	@ (80048c8 <HAL_RCC_OscConfig+0x504>)
 8004892:	f043 0301 	orr.w	r3, r3, #1
 8004896:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800489a:	e029      	b.n	80048f0 <HAL_RCC_OscConfig+0x52c>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	2b05      	cmp	r3, #5
 80048a2:	d115      	bne.n	80048d0 <HAL_RCC_OscConfig+0x50c>
 80048a4:	4b08      	ldr	r3, [pc, #32]	@ (80048c8 <HAL_RCC_OscConfig+0x504>)
 80048a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048aa:	4a07      	ldr	r2, [pc, #28]	@ (80048c8 <HAL_RCC_OscConfig+0x504>)
 80048ac:	f043 0304 	orr.w	r3, r3, #4
 80048b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80048b4:	4b04      	ldr	r3, [pc, #16]	@ (80048c8 <HAL_RCC_OscConfig+0x504>)
 80048b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048ba:	4a03      	ldr	r2, [pc, #12]	@ (80048c8 <HAL_RCC_OscConfig+0x504>)
 80048bc:	f043 0301 	orr.w	r3, r3, #1
 80048c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80048c4:	e014      	b.n	80048f0 <HAL_RCC_OscConfig+0x52c>
 80048c6:	bf00      	nop
 80048c8:	40021000 	.word	0x40021000
 80048cc:	40007000 	.word	0x40007000
 80048d0:	4b9d      	ldr	r3, [pc, #628]	@ (8004b48 <HAL_RCC_OscConfig+0x784>)
 80048d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048d6:	4a9c      	ldr	r2, [pc, #624]	@ (8004b48 <HAL_RCC_OscConfig+0x784>)
 80048d8:	f023 0301 	bic.w	r3, r3, #1
 80048dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80048e0:	4b99      	ldr	r3, [pc, #612]	@ (8004b48 <HAL_RCC_OscConfig+0x784>)
 80048e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048e6:	4a98      	ldr	r2, [pc, #608]	@ (8004b48 <HAL_RCC_OscConfig+0x784>)
 80048e8:	f023 0304 	bic.w	r3, r3, #4
 80048ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d016      	beq.n	8004926 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048f8:	f7fe fd7e 	bl	80033f8 <HAL_GetTick>
 80048fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048fe:	e00a      	b.n	8004916 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004900:	f7fe fd7a 	bl	80033f8 <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800490e:	4293      	cmp	r3, r2
 8004910:	d901      	bls.n	8004916 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e168      	b.n	8004be8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004916:	4b8c      	ldr	r3, [pc, #560]	@ (8004b48 <HAL_RCC_OscConfig+0x784>)
 8004918:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800491c:	f003 0302 	and.w	r3, r3, #2
 8004920:	2b00      	cmp	r3, #0
 8004922:	d0ed      	beq.n	8004900 <HAL_RCC_OscConfig+0x53c>
 8004924:	e015      	b.n	8004952 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004926:	f7fe fd67 	bl	80033f8 <HAL_GetTick>
 800492a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800492c:	e00a      	b.n	8004944 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800492e:	f7fe fd63 	bl	80033f8 <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	f241 3288 	movw	r2, #5000	@ 0x1388
 800493c:	4293      	cmp	r3, r2
 800493e:	d901      	bls.n	8004944 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	e151      	b.n	8004be8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004944:	4b80      	ldr	r3, [pc, #512]	@ (8004b48 <HAL_RCC_OscConfig+0x784>)
 8004946:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800494a:	f003 0302 	and.w	r3, r3, #2
 800494e:	2b00      	cmp	r3, #0
 8004950:	d1ed      	bne.n	800492e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004952:	7ffb      	ldrb	r3, [r7, #31]
 8004954:	2b01      	cmp	r3, #1
 8004956:	d105      	bne.n	8004964 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004958:	4b7b      	ldr	r3, [pc, #492]	@ (8004b48 <HAL_RCC_OscConfig+0x784>)
 800495a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800495c:	4a7a      	ldr	r2, [pc, #488]	@ (8004b48 <HAL_RCC_OscConfig+0x784>)
 800495e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004962:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0320 	and.w	r3, r3, #32
 800496c:	2b00      	cmp	r3, #0
 800496e:	d03c      	beq.n	80049ea <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004974:	2b00      	cmp	r3, #0
 8004976:	d01c      	beq.n	80049b2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004978:	4b73      	ldr	r3, [pc, #460]	@ (8004b48 <HAL_RCC_OscConfig+0x784>)
 800497a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800497e:	4a72      	ldr	r2, [pc, #456]	@ (8004b48 <HAL_RCC_OscConfig+0x784>)
 8004980:	f043 0301 	orr.w	r3, r3, #1
 8004984:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004988:	f7fe fd36 	bl	80033f8 <HAL_GetTick>
 800498c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800498e:	e008      	b.n	80049a2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004990:	f7fe fd32 	bl	80033f8 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	2b02      	cmp	r3, #2
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e122      	b.n	8004be8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80049a2:	4b69      	ldr	r3, [pc, #420]	@ (8004b48 <HAL_RCC_OscConfig+0x784>)
 80049a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80049a8:	f003 0302 	and.w	r3, r3, #2
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d0ef      	beq.n	8004990 <HAL_RCC_OscConfig+0x5cc>
 80049b0:	e01b      	b.n	80049ea <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80049b2:	4b65      	ldr	r3, [pc, #404]	@ (8004b48 <HAL_RCC_OscConfig+0x784>)
 80049b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80049b8:	4a63      	ldr	r2, [pc, #396]	@ (8004b48 <HAL_RCC_OscConfig+0x784>)
 80049ba:	f023 0301 	bic.w	r3, r3, #1
 80049be:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049c2:	f7fe fd19 	bl	80033f8 <HAL_GetTick>
 80049c6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80049c8:	e008      	b.n	80049dc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049ca:	f7fe fd15 	bl	80033f8 <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d901      	bls.n	80049dc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e105      	b.n	8004be8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80049dc:	4b5a      	ldr	r3, [pc, #360]	@ (8004b48 <HAL_RCC_OscConfig+0x784>)
 80049de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80049e2:	f003 0302 	and.w	r3, r3, #2
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1ef      	bne.n	80049ca <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	f000 80f9 	beq.w	8004be6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	f040 80cf 	bne.w	8004b9c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80049fe:	4b52      	ldr	r3, [pc, #328]	@ (8004b48 <HAL_RCC_OscConfig+0x784>)
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	f003 0203 	and.w	r2, r3, #3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d12c      	bne.n	8004a6c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d123      	bne.n	8004a6c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a2e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d11b      	bne.n	8004a6c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a3e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d113      	bne.n	8004a6c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a4e:	085b      	lsrs	r3, r3, #1
 8004a50:	3b01      	subs	r3, #1
 8004a52:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d109      	bne.n	8004a6c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a62:	085b      	lsrs	r3, r3, #1
 8004a64:	3b01      	subs	r3, #1
 8004a66:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d071      	beq.n	8004b50 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	2b0c      	cmp	r3, #12
 8004a70:	d068      	beq.n	8004b44 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004a72:	4b35      	ldr	r3, [pc, #212]	@ (8004b48 <HAL_RCC_OscConfig+0x784>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d105      	bne.n	8004a8a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004a7e:	4b32      	ldr	r3, [pc, #200]	@ (8004b48 <HAL_RCC_OscConfig+0x784>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d001      	beq.n	8004a8e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e0ac      	b.n	8004be8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004a8e:	4b2e      	ldr	r3, [pc, #184]	@ (8004b48 <HAL_RCC_OscConfig+0x784>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a2d      	ldr	r2, [pc, #180]	@ (8004b48 <HAL_RCC_OscConfig+0x784>)
 8004a94:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a98:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a9a:	f7fe fcad 	bl	80033f8 <HAL_GetTick>
 8004a9e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004aa0:	e008      	b.n	8004ab4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aa2:	f7fe fca9 	bl	80033f8 <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d901      	bls.n	8004ab4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e099      	b.n	8004be8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ab4:	4b24      	ldr	r3, [pc, #144]	@ (8004b48 <HAL_RCC_OscConfig+0x784>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1f0      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ac0:	4b21      	ldr	r3, [pc, #132]	@ (8004b48 <HAL_RCC_OscConfig+0x784>)
 8004ac2:	68da      	ldr	r2, [r3, #12]
 8004ac4:	4b21      	ldr	r3, [pc, #132]	@ (8004b4c <HAL_RCC_OscConfig+0x788>)
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004ad0:	3a01      	subs	r2, #1
 8004ad2:	0112      	lsls	r2, r2, #4
 8004ad4:	4311      	orrs	r1, r2
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004ada:	0212      	lsls	r2, r2, #8
 8004adc:	4311      	orrs	r1, r2
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004ae2:	0852      	lsrs	r2, r2, #1
 8004ae4:	3a01      	subs	r2, #1
 8004ae6:	0552      	lsls	r2, r2, #21
 8004ae8:	4311      	orrs	r1, r2
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004aee:	0852      	lsrs	r2, r2, #1
 8004af0:	3a01      	subs	r2, #1
 8004af2:	0652      	lsls	r2, r2, #25
 8004af4:	4311      	orrs	r1, r2
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004afa:	06d2      	lsls	r2, r2, #27
 8004afc:	430a      	orrs	r2, r1
 8004afe:	4912      	ldr	r1, [pc, #72]	@ (8004b48 <HAL_RCC_OscConfig+0x784>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004b04:	4b10      	ldr	r3, [pc, #64]	@ (8004b48 <HAL_RCC_OscConfig+0x784>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a0f      	ldr	r2, [pc, #60]	@ (8004b48 <HAL_RCC_OscConfig+0x784>)
 8004b0a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b0e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b10:	4b0d      	ldr	r3, [pc, #52]	@ (8004b48 <HAL_RCC_OscConfig+0x784>)
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	4a0c      	ldr	r2, [pc, #48]	@ (8004b48 <HAL_RCC_OscConfig+0x784>)
 8004b16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b1a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b1c:	f7fe fc6c 	bl	80033f8 <HAL_GetTick>
 8004b20:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b22:	e008      	b.n	8004b36 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b24:	f7fe fc68 	bl	80033f8 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d901      	bls.n	8004b36 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e058      	b.n	8004be8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b36:	4b04      	ldr	r3, [pc, #16]	@ (8004b48 <HAL_RCC_OscConfig+0x784>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d0f0      	beq.n	8004b24 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b42:	e050      	b.n	8004be6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e04f      	b.n	8004be8 <HAL_RCC_OscConfig+0x824>
 8004b48:	40021000 	.word	0x40021000
 8004b4c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b50:	4b27      	ldr	r3, [pc, #156]	@ (8004bf0 <HAL_RCC_OscConfig+0x82c>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d144      	bne.n	8004be6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004b5c:	4b24      	ldr	r3, [pc, #144]	@ (8004bf0 <HAL_RCC_OscConfig+0x82c>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a23      	ldr	r2, [pc, #140]	@ (8004bf0 <HAL_RCC_OscConfig+0x82c>)
 8004b62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b66:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b68:	4b21      	ldr	r3, [pc, #132]	@ (8004bf0 <HAL_RCC_OscConfig+0x82c>)
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	4a20      	ldr	r2, [pc, #128]	@ (8004bf0 <HAL_RCC_OscConfig+0x82c>)
 8004b6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b72:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004b74:	f7fe fc40 	bl	80033f8 <HAL_GetTick>
 8004b78:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b7a:	e008      	b.n	8004b8e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b7c:	f7fe fc3c 	bl	80033f8 <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d901      	bls.n	8004b8e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e02c      	b.n	8004be8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b8e:	4b18      	ldr	r3, [pc, #96]	@ (8004bf0 <HAL_RCC_OscConfig+0x82c>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d0f0      	beq.n	8004b7c <HAL_RCC_OscConfig+0x7b8>
 8004b9a:	e024      	b.n	8004be6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	2b0c      	cmp	r3, #12
 8004ba0:	d01f      	beq.n	8004be2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ba2:	4b13      	ldr	r3, [pc, #76]	@ (8004bf0 <HAL_RCC_OscConfig+0x82c>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a12      	ldr	r2, [pc, #72]	@ (8004bf0 <HAL_RCC_OscConfig+0x82c>)
 8004ba8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004bac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bae:	f7fe fc23 	bl	80033f8 <HAL_GetTick>
 8004bb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bb4:	e008      	b.n	8004bc8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bb6:	f7fe fc1f 	bl	80033f8 <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d901      	bls.n	8004bc8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e00f      	b.n	8004be8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bc8:	4b09      	ldr	r3, [pc, #36]	@ (8004bf0 <HAL_RCC_OscConfig+0x82c>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d1f0      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004bd4:	4b06      	ldr	r3, [pc, #24]	@ (8004bf0 <HAL_RCC_OscConfig+0x82c>)
 8004bd6:	68da      	ldr	r2, [r3, #12]
 8004bd8:	4905      	ldr	r1, [pc, #20]	@ (8004bf0 <HAL_RCC_OscConfig+0x82c>)
 8004bda:	4b06      	ldr	r3, [pc, #24]	@ (8004bf4 <HAL_RCC_OscConfig+0x830>)
 8004bdc:	4013      	ands	r3, r2
 8004bde:	60cb      	str	r3, [r1, #12]
 8004be0:	e001      	b.n	8004be6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e000      	b.n	8004be8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004be6:	2300      	movs	r3, #0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3720      	adds	r7, #32
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	40021000 	.word	0x40021000
 8004bf4:	feeefffc 	.word	0xfeeefffc

08004bf8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d101      	bne.n	8004c0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e0e7      	b.n	8004ddc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c0c:	4b75      	ldr	r3, [pc, #468]	@ (8004de4 <HAL_RCC_ClockConfig+0x1ec>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0307 	and.w	r3, r3, #7
 8004c14:	683a      	ldr	r2, [r7, #0]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d910      	bls.n	8004c3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c1a:	4b72      	ldr	r3, [pc, #456]	@ (8004de4 <HAL_RCC_ClockConfig+0x1ec>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f023 0207 	bic.w	r2, r3, #7
 8004c22:	4970      	ldr	r1, [pc, #448]	@ (8004de4 <HAL_RCC_ClockConfig+0x1ec>)
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c2a:	4b6e      	ldr	r3, [pc, #440]	@ (8004de4 <HAL_RCC_ClockConfig+0x1ec>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0307 	and.w	r3, r3, #7
 8004c32:	683a      	ldr	r2, [r7, #0]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d001      	beq.n	8004c3c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e0cf      	b.n	8004ddc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0302 	and.w	r3, r3, #2
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d010      	beq.n	8004c6a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	689a      	ldr	r2, [r3, #8]
 8004c4c:	4b66      	ldr	r3, [pc, #408]	@ (8004de8 <HAL_RCC_ClockConfig+0x1f0>)
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d908      	bls.n	8004c6a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c58:	4b63      	ldr	r3, [pc, #396]	@ (8004de8 <HAL_RCC_ClockConfig+0x1f0>)
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	4960      	ldr	r1, [pc, #384]	@ (8004de8 <HAL_RCC_ClockConfig+0x1f0>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0301 	and.w	r3, r3, #1
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d04c      	beq.n	8004d10 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	2b03      	cmp	r3, #3
 8004c7c:	d107      	bne.n	8004c8e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c7e:	4b5a      	ldr	r3, [pc, #360]	@ (8004de8 <HAL_RCC_ClockConfig+0x1f0>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d121      	bne.n	8004cce <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e0a6      	b.n	8004ddc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d107      	bne.n	8004ca6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c96:	4b54      	ldr	r3, [pc, #336]	@ (8004de8 <HAL_RCC_ClockConfig+0x1f0>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d115      	bne.n	8004cce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e09a      	b.n	8004ddc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d107      	bne.n	8004cbe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004cae:	4b4e      	ldr	r3, [pc, #312]	@ (8004de8 <HAL_RCC_ClockConfig+0x1f0>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0302 	and.w	r3, r3, #2
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d109      	bne.n	8004cce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e08e      	b.n	8004ddc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cbe:	4b4a      	ldr	r3, [pc, #296]	@ (8004de8 <HAL_RCC_ClockConfig+0x1f0>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d101      	bne.n	8004cce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e086      	b.n	8004ddc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004cce:	4b46      	ldr	r3, [pc, #280]	@ (8004de8 <HAL_RCC_ClockConfig+0x1f0>)
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f023 0203 	bic.w	r2, r3, #3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	4943      	ldr	r1, [pc, #268]	@ (8004de8 <HAL_RCC_ClockConfig+0x1f0>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ce0:	f7fe fb8a 	bl	80033f8 <HAL_GetTick>
 8004ce4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ce6:	e00a      	b.n	8004cfe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ce8:	f7fe fb86 	bl	80033f8 <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d901      	bls.n	8004cfe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e06e      	b.n	8004ddc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cfe:	4b3a      	ldr	r3, [pc, #232]	@ (8004de8 <HAL_RCC_ClockConfig+0x1f0>)
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f003 020c 	and.w	r2, r3, #12
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d1eb      	bne.n	8004ce8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0302 	and.w	r3, r3, #2
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d010      	beq.n	8004d3e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	689a      	ldr	r2, [r3, #8]
 8004d20:	4b31      	ldr	r3, [pc, #196]	@ (8004de8 <HAL_RCC_ClockConfig+0x1f0>)
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d208      	bcs.n	8004d3e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d2c:	4b2e      	ldr	r3, [pc, #184]	@ (8004de8 <HAL_RCC_ClockConfig+0x1f0>)
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	492b      	ldr	r1, [pc, #172]	@ (8004de8 <HAL_RCC_ClockConfig+0x1f0>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d3e:	4b29      	ldr	r3, [pc, #164]	@ (8004de4 <HAL_RCC_ClockConfig+0x1ec>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0307 	and.w	r3, r3, #7
 8004d46:	683a      	ldr	r2, [r7, #0]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d210      	bcs.n	8004d6e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d4c:	4b25      	ldr	r3, [pc, #148]	@ (8004de4 <HAL_RCC_ClockConfig+0x1ec>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f023 0207 	bic.w	r2, r3, #7
 8004d54:	4923      	ldr	r1, [pc, #140]	@ (8004de4 <HAL_RCC_ClockConfig+0x1ec>)
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d5c:	4b21      	ldr	r3, [pc, #132]	@ (8004de4 <HAL_RCC_ClockConfig+0x1ec>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0307 	and.w	r3, r3, #7
 8004d64:	683a      	ldr	r2, [r7, #0]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d001      	beq.n	8004d6e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e036      	b.n	8004ddc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0304 	and.w	r3, r3, #4
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d008      	beq.n	8004d8c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d7a:	4b1b      	ldr	r3, [pc, #108]	@ (8004de8 <HAL_RCC_ClockConfig+0x1f0>)
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	4918      	ldr	r1, [pc, #96]	@ (8004de8 <HAL_RCC_ClockConfig+0x1f0>)
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0308 	and.w	r3, r3, #8
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d009      	beq.n	8004dac <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d98:	4b13      	ldr	r3, [pc, #76]	@ (8004de8 <HAL_RCC_ClockConfig+0x1f0>)
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	00db      	lsls	r3, r3, #3
 8004da6:	4910      	ldr	r1, [pc, #64]	@ (8004de8 <HAL_RCC_ClockConfig+0x1f0>)
 8004da8:	4313      	orrs	r3, r2
 8004daa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004dac:	f000 f824 	bl	8004df8 <HAL_RCC_GetSysClockFreq>
 8004db0:	4602      	mov	r2, r0
 8004db2:	4b0d      	ldr	r3, [pc, #52]	@ (8004de8 <HAL_RCC_ClockConfig+0x1f0>)
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	091b      	lsrs	r3, r3, #4
 8004db8:	f003 030f 	and.w	r3, r3, #15
 8004dbc:	490b      	ldr	r1, [pc, #44]	@ (8004dec <HAL_RCC_ClockConfig+0x1f4>)
 8004dbe:	5ccb      	ldrb	r3, [r1, r3]
 8004dc0:	f003 031f 	and.w	r3, r3, #31
 8004dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8004dc8:	4a09      	ldr	r2, [pc, #36]	@ (8004df0 <HAL_RCC_ClockConfig+0x1f8>)
 8004dca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004dcc:	4b09      	ldr	r3, [pc, #36]	@ (8004df4 <HAL_RCC_ClockConfig+0x1fc>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f7fd fead 	bl	8002b30 <HAL_InitTick>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	72fb      	strb	r3, [r7, #11]

  return status;
 8004dda:	7afb      	ldrb	r3, [r7, #11]
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3710      	adds	r7, #16
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	40022000 	.word	0x40022000
 8004de8:	40021000 	.word	0x40021000
 8004dec:	08011158 	.word	0x08011158
 8004df0:	200001bc 	.word	0x200001bc
 8004df4:	200001c0 	.word	0x200001c0

08004df8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b089      	sub	sp, #36	@ 0x24
 8004dfc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	61fb      	str	r3, [r7, #28]
 8004e02:	2300      	movs	r3, #0
 8004e04:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e06:	4b3e      	ldr	r3, [pc, #248]	@ (8004f00 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f003 030c 	and.w	r3, r3, #12
 8004e0e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e10:	4b3b      	ldr	r3, [pc, #236]	@ (8004f00 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	f003 0303 	and.w	r3, r3, #3
 8004e18:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d005      	beq.n	8004e2c <HAL_RCC_GetSysClockFreq+0x34>
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	2b0c      	cmp	r3, #12
 8004e24:	d121      	bne.n	8004e6a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d11e      	bne.n	8004e6a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004e2c:	4b34      	ldr	r3, [pc, #208]	@ (8004f00 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0308 	and.w	r3, r3, #8
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d107      	bne.n	8004e48 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004e38:	4b31      	ldr	r3, [pc, #196]	@ (8004f00 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e3e:	0a1b      	lsrs	r3, r3, #8
 8004e40:	f003 030f 	and.w	r3, r3, #15
 8004e44:	61fb      	str	r3, [r7, #28]
 8004e46:	e005      	b.n	8004e54 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004e48:	4b2d      	ldr	r3, [pc, #180]	@ (8004f00 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	091b      	lsrs	r3, r3, #4
 8004e4e:	f003 030f 	and.w	r3, r3, #15
 8004e52:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004e54:	4a2b      	ldr	r2, [pc, #172]	@ (8004f04 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e5c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d10d      	bne.n	8004e80 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e68:	e00a      	b.n	8004e80 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	2b04      	cmp	r3, #4
 8004e6e:	d102      	bne.n	8004e76 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004e70:	4b25      	ldr	r3, [pc, #148]	@ (8004f08 <HAL_RCC_GetSysClockFreq+0x110>)
 8004e72:	61bb      	str	r3, [r7, #24]
 8004e74:	e004      	b.n	8004e80 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	2b08      	cmp	r3, #8
 8004e7a:	d101      	bne.n	8004e80 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004e7c:	4b23      	ldr	r3, [pc, #140]	@ (8004f0c <HAL_RCC_GetSysClockFreq+0x114>)
 8004e7e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	2b0c      	cmp	r3, #12
 8004e84:	d134      	bne.n	8004ef0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e86:	4b1e      	ldr	r3, [pc, #120]	@ (8004f00 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	f003 0303 	and.w	r3, r3, #3
 8004e8e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d003      	beq.n	8004e9e <HAL_RCC_GetSysClockFreq+0xa6>
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	2b03      	cmp	r3, #3
 8004e9a:	d003      	beq.n	8004ea4 <HAL_RCC_GetSysClockFreq+0xac>
 8004e9c:	e005      	b.n	8004eaa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004e9e:	4b1a      	ldr	r3, [pc, #104]	@ (8004f08 <HAL_RCC_GetSysClockFreq+0x110>)
 8004ea0:	617b      	str	r3, [r7, #20]
      break;
 8004ea2:	e005      	b.n	8004eb0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004ea4:	4b19      	ldr	r3, [pc, #100]	@ (8004f0c <HAL_RCC_GetSysClockFreq+0x114>)
 8004ea6:	617b      	str	r3, [r7, #20]
      break;
 8004ea8:	e002      	b.n	8004eb0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	617b      	str	r3, [r7, #20]
      break;
 8004eae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004eb0:	4b13      	ldr	r3, [pc, #76]	@ (8004f00 <HAL_RCC_GetSysClockFreq+0x108>)
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	091b      	lsrs	r3, r3, #4
 8004eb6:	f003 0307 	and.w	r3, r3, #7
 8004eba:	3301      	adds	r3, #1
 8004ebc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004ebe:	4b10      	ldr	r3, [pc, #64]	@ (8004f00 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	0a1b      	lsrs	r3, r3, #8
 8004ec4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ec8:	697a      	ldr	r2, [r7, #20]
 8004eca:	fb03 f202 	mul.w	r2, r3, r2
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8004f00 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	0e5b      	lsrs	r3, r3, #25
 8004edc:	f003 0303 	and.w	r3, r3, #3
 8004ee0:	3301      	adds	r3, #1
 8004ee2:	005b      	lsls	r3, r3, #1
 8004ee4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004ee6:	697a      	ldr	r2, [r7, #20]
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004ef0:	69bb      	ldr	r3, [r7, #24]
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3724      	adds	r7, #36	@ 0x24
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	40021000 	.word	0x40021000
 8004f04:	08011170 	.word	0x08011170
 8004f08:	00f42400 	.word	0x00f42400
 8004f0c:	01e84800 	.word	0x01e84800

08004f10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f10:	b480      	push	{r7}
 8004f12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f14:	4b03      	ldr	r3, [pc, #12]	@ (8004f24 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f16:	681b      	ldr	r3, [r3, #0]
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop
 8004f24:	200001bc 	.word	0x200001bc

08004f28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004f2c:	f7ff fff0 	bl	8004f10 <HAL_RCC_GetHCLKFreq>
 8004f30:	4602      	mov	r2, r0
 8004f32:	4b06      	ldr	r3, [pc, #24]	@ (8004f4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	0a1b      	lsrs	r3, r3, #8
 8004f38:	f003 0307 	and.w	r3, r3, #7
 8004f3c:	4904      	ldr	r1, [pc, #16]	@ (8004f50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f3e:	5ccb      	ldrb	r3, [r1, r3]
 8004f40:	f003 031f 	and.w	r3, r3, #31
 8004f44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	40021000 	.word	0x40021000
 8004f50:	08011168 	.word	0x08011168

08004f54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004f58:	f7ff ffda 	bl	8004f10 <HAL_RCC_GetHCLKFreq>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	4b06      	ldr	r3, [pc, #24]	@ (8004f78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	0adb      	lsrs	r3, r3, #11
 8004f64:	f003 0307 	and.w	r3, r3, #7
 8004f68:	4904      	ldr	r1, [pc, #16]	@ (8004f7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004f6a:	5ccb      	ldrb	r3, [r1, r3]
 8004f6c:	f003 031f 	and.w	r3, r3, #31
 8004f70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	40021000 	.word	0x40021000
 8004f7c:	08011168 	.word	0x08011168

08004f80 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	220f      	movs	r2, #15
 8004f8e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004f90:	4b12      	ldr	r3, [pc, #72]	@ (8004fdc <HAL_RCC_GetClockConfig+0x5c>)
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f003 0203 	and.w	r2, r3, #3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004f9c:	4b0f      	ldr	r3, [pc, #60]	@ (8004fdc <HAL_RCC_GetClockConfig+0x5c>)
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8004fdc <HAL_RCC_GetClockConfig+0x5c>)
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004fb4:	4b09      	ldr	r3, [pc, #36]	@ (8004fdc <HAL_RCC_GetClockConfig+0x5c>)
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	08db      	lsrs	r3, r3, #3
 8004fba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004fc2:	4b07      	ldr	r3, [pc, #28]	@ (8004fe0 <HAL_RCC_GetClockConfig+0x60>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0207 	and.w	r2, r3, #7
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	601a      	str	r2, [r3, #0]
}
 8004fce:	bf00      	nop
 8004fd0:	370c      	adds	r7, #12
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	40021000 	.word	0x40021000
 8004fe0:	40022000 	.word	0x40022000

08004fe4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b086      	sub	sp, #24
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004fec:	2300      	movs	r3, #0
 8004fee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004ff0:	4b2a      	ldr	r3, [pc, #168]	@ (800509c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ff4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d003      	beq.n	8005004 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004ffc:	f7ff f96e 	bl	80042dc <HAL_PWREx_GetVoltageRange>
 8005000:	6178      	str	r0, [r7, #20]
 8005002:	e014      	b.n	800502e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005004:	4b25      	ldr	r3, [pc, #148]	@ (800509c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005006:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005008:	4a24      	ldr	r2, [pc, #144]	@ (800509c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800500a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800500e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005010:	4b22      	ldr	r3, [pc, #136]	@ (800509c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005012:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005014:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005018:	60fb      	str	r3, [r7, #12]
 800501a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800501c:	f7ff f95e 	bl	80042dc <HAL_PWREx_GetVoltageRange>
 8005020:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005022:	4b1e      	ldr	r3, [pc, #120]	@ (800509c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005026:	4a1d      	ldr	r2, [pc, #116]	@ (800509c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005028:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800502c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005034:	d10b      	bne.n	800504e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2b80      	cmp	r3, #128	@ 0x80
 800503a:	d919      	bls.n	8005070 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2ba0      	cmp	r3, #160	@ 0xa0
 8005040:	d902      	bls.n	8005048 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005042:	2302      	movs	r3, #2
 8005044:	613b      	str	r3, [r7, #16]
 8005046:	e013      	b.n	8005070 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005048:	2301      	movs	r3, #1
 800504a:	613b      	str	r3, [r7, #16]
 800504c:	e010      	b.n	8005070 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2b80      	cmp	r3, #128	@ 0x80
 8005052:	d902      	bls.n	800505a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005054:	2303      	movs	r3, #3
 8005056:	613b      	str	r3, [r7, #16]
 8005058:	e00a      	b.n	8005070 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2b80      	cmp	r3, #128	@ 0x80
 800505e:	d102      	bne.n	8005066 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005060:	2302      	movs	r3, #2
 8005062:	613b      	str	r3, [r7, #16]
 8005064:	e004      	b.n	8005070 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2b70      	cmp	r3, #112	@ 0x70
 800506a:	d101      	bne.n	8005070 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800506c:	2301      	movs	r3, #1
 800506e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005070:	4b0b      	ldr	r3, [pc, #44]	@ (80050a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f023 0207 	bic.w	r2, r3, #7
 8005078:	4909      	ldr	r1, [pc, #36]	@ (80050a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	4313      	orrs	r3, r2
 800507e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005080:	4b07      	ldr	r3, [pc, #28]	@ (80050a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 0307 	and.w	r3, r3, #7
 8005088:	693a      	ldr	r2, [r7, #16]
 800508a:	429a      	cmp	r2, r3
 800508c:	d001      	beq.n	8005092 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e000      	b.n	8005094 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3718      	adds	r7, #24
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	40021000 	.word	0x40021000
 80050a0:	40022000 	.word	0x40022000

080050a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b086      	sub	sp, #24
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80050ac:	2300      	movs	r3, #0
 80050ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80050b0:	2300      	movs	r3, #0
 80050b2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d041      	beq.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80050c4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80050c8:	d02a      	beq.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80050ca:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80050ce:	d824      	bhi.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80050d0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80050d4:	d008      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80050d6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80050da:	d81e      	bhi.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d00a      	beq.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80050e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80050e4:	d010      	beq.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80050e6:	e018      	b.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80050e8:	4b86      	ldr	r3, [pc, #536]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	4a85      	ldr	r2, [pc, #532]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050f2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80050f4:	e015      	b.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	3304      	adds	r3, #4
 80050fa:	2100      	movs	r1, #0
 80050fc:	4618      	mov	r0, r3
 80050fe:	f000 facd 	bl	800569c <RCCEx_PLLSAI1_Config>
 8005102:	4603      	mov	r3, r0
 8005104:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005106:	e00c      	b.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	3320      	adds	r3, #32
 800510c:	2100      	movs	r1, #0
 800510e:	4618      	mov	r0, r3
 8005110:	f000 fbb6 	bl	8005880 <RCCEx_PLLSAI2_Config>
 8005114:	4603      	mov	r3, r0
 8005116:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005118:	e003      	b.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	74fb      	strb	r3, [r7, #19]
      break;
 800511e:	e000      	b.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005120:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005122:	7cfb      	ldrb	r3, [r7, #19]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d10b      	bne.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005128:	4b76      	ldr	r3, [pc, #472]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800512a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800512e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005136:	4973      	ldr	r1, [pc, #460]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005138:	4313      	orrs	r3, r2
 800513a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800513e:	e001      	b.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005140:	7cfb      	ldrb	r3, [r7, #19]
 8005142:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800514c:	2b00      	cmp	r3, #0
 800514e:	d041      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005154:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005158:	d02a      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800515a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800515e:	d824      	bhi.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005160:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005164:	d008      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005166:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800516a:	d81e      	bhi.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x106>
 800516c:	2b00      	cmp	r3, #0
 800516e:	d00a      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005170:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005174:	d010      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005176:	e018      	b.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005178:	4b62      	ldr	r3, [pc, #392]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	4a61      	ldr	r2, [pc, #388]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800517e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005182:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005184:	e015      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	3304      	adds	r3, #4
 800518a:	2100      	movs	r1, #0
 800518c:	4618      	mov	r0, r3
 800518e:	f000 fa85 	bl	800569c <RCCEx_PLLSAI1_Config>
 8005192:	4603      	mov	r3, r0
 8005194:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005196:	e00c      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	3320      	adds	r3, #32
 800519c:	2100      	movs	r1, #0
 800519e:	4618      	mov	r0, r3
 80051a0:	f000 fb6e 	bl	8005880 <RCCEx_PLLSAI2_Config>
 80051a4:	4603      	mov	r3, r0
 80051a6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80051a8:	e003      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	74fb      	strb	r3, [r7, #19]
      break;
 80051ae:	e000      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80051b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051b2:	7cfb      	ldrb	r3, [r7, #19]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d10b      	bne.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80051b8:	4b52      	ldr	r3, [pc, #328]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051be:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051c6:	494f      	ldr	r1, [pc, #316]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051c8:	4313      	orrs	r3, r2
 80051ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80051ce:	e001      	b.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051d0:	7cfb      	ldrb	r3, [r7, #19]
 80051d2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	f000 80a0 	beq.w	8005322 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051e2:	2300      	movs	r3, #0
 80051e4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80051e6:	4b47      	ldr	r3, [pc, #284]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d101      	bne.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80051f2:	2301      	movs	r3, #1
 80051f4:	e000      	b.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80051f6:	2300      	movs	r3, #0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00d      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051fc:	4b41      	ldr	r3, [pc, #260]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005200:	4a40      	ldr	r2, [pc, #256]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005202:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005206:	6593      	str	r3, [r2, #88]	@ 0x58
 8005208:	4b3e      	ldr	r3, [pc, #248]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800520a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800520c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005210:	60bb      	str	r3, [r7, #8]
 8005212:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005214:	2301      	movs	r3, #1
 8005216:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005218:	4b3b      	ldr	r3, [pc, #236]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a3a      	ldr	r2, [pc, #232]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800521e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005222:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005224:	f7fe f8e8 	bl	80033f8 <HAL_GetTick>
 8005228:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800522a:	e009      	b.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800522c:	f7fe f8e4 	bl	80033f8 <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	2b02      	cmp	r3, #2
 8005238:	d902      	bls.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	74fb      	strb	r3, [r7, #19]
        break;
 800523e:	e005      	b.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005240:	4b31      	ldr	r3, [pc, #196]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005248:	2b00      	cmp	r3, #0
 800524a:	d0ef      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800524c:	7cfb      	ldrb	r3, [r7, #19]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d15c      	bne.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005252:	4b2c      	ldr	r3, [pc, #176]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005254:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005258:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800525c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d01f      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800526a:	697a      	ldr	r2, [r7, #20]
 800526c:	429a      	cmp	r2, r3
 800526e:	d019      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005270:	4b24      	ldr	r3, [pc, #144]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005272:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005276:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800527a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800527c:	4b21      	ldr	r3, [pc, #132]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800527e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005282:	4a20      	ldr	r2, [pc, #128]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005284:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005288:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800528c:	4b1d      	ldr	r3, [pc, #116]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800528e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005292:	4a1c      	ldr	r2, [pc, #112]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005294:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005298:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800529c:	4a19      	ldr	r2, [pc, #100]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	f003 0301 	and.w	r3, r3, #1
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d016      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ae:	f7fe f8a3 	bl	80033f8 <HAL_GetTick>
 80052b2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052b4:	e00b      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052b6:	f7fe f89f 	bl	80033f8 <HAL_GetTick>
 80052ba:	4602      	mov	r2, r0
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d902      	bls.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	74fb      	strb	r3, [r7, #19]
            break;
 80052cc:	e006      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052ce:	4b0d      	ldr	r3, [pc, #52]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052d4:	f003 0302 	and.w	r3, r3, #2
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d0ec      	beq.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80052dc:	7cfb      	ldrb	r3, [r7, #19]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d10c      	bne.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052e2:	4b08      	ldr	r3, [pc, #32]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052f2:	4904      	ldr	r1, [pc, #16]	@ (8005304 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80052fa:	e009      	b.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80052fc:	7cfb      	ldrb	r3, [r7, #19]
 80052fe:	74bb      	strb	r3, [r7, #18]
 8005300:	e006      	b.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005302:	bf00      	nop
 8005304:	40021000 	.word	0x40021000
 8005308:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800530c:	7cfb      	ldrb	r3, [r7, #19]
 800530e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005310:	7c7b      	ldrb	r3, [r7, #17]
 8005312:	2b01      	cmp	r3, #1
 8005314:	d105      	bne.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005316:	4ba6      	ldr	r3, [pc, #664]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005318:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800531a:	4aa5      	ldr	r2, [pc, #660]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800531c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005320:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0301 	and.w	r3, r3, #1
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00a      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800532e:	4ba0      	ldr	r3, [pc, #640]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005330:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005334:	f023 0203 	bic.w	r2, r3, #3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800533c:	499c      	ldr	r1, [pc, #624]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800533e:	4313      	orrs	r3, r2
 8005340:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0302 	and.w	r3, r3, #2
 800534c:	2b00      	cmp	r3, #0
 800534e:	d00a      	beq.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005350:	4b97      	ldr	r3, [pc, #604]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005352:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005356:	f023 020c 	bic.w	r2, r3, #12
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800535e:	4994      	ldr	r1, [pc, #592]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005360:	4313      	orrs	r3, r2
 8005362:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0304 	and.w	r3, r3, #4
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00a      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005372:	4b8f      	ldr	r3, [pc, #572]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005374:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005378:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005380:	498b      	ldr	r1, [pc, #556]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005382:	4313      	orrs	r3, r2
 8005384:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0308 	and.w	r3, r3, #8
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00a      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005394:	4b86      	ldr	r3, [pc, #536]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800539a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053a2:	4983      	ldr	r1, [pc, #524]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80053a4:	4313      	orrs	r3, r2
 80053a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0310 	and.w	r3, r3, #16
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00a      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80053b6:	4b7e      	ldr	r3, [pc, #504]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80053b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053c4:	497a      	ldr	r1, [pc, #488]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80053c6:	4313      	orrs	r3, r2
 80053c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0320 	and.w	r3, r3, #32
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00a      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80053d8:	4b75      	ldr	r3, [pc, #468]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80053da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053de:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053e6:	4972      	ldr	r1, [pc, #456]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00a      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80053fa:	4b6d      	ldr	r3, [pc, #436]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80053fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005400:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005408:	4969      	ldr	r1, [pc, #420]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800540a:	4313      	orrs	r3, r2
 800540c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00a      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800541c:	4b64      	ldr	r3, [pc, #400]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800541e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005422:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800542a:	4961      	ldr	r1, [pc, #388]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800542c:	4313      	orrs	r3, r2
 800542e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00a      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800543e:	4b5c      	ldr	r3, [pc, #368]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005440:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005444:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800544c:	4958      	ldr	r1, [pc, #352]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800544e:	4313      	orrs	r3, r2
 8005450:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800545c:	2b00      	cmp	r3, #0
 800545e:	d00a      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005460:	4b53      	ldr	r3, [pc, #332]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005462:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005466:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800546e:	4950      	ldr	r1, [pc, #320]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005470:	4313      	orrs	r3, r2
 8005472:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00a      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005482:	4b4b      	ldr	r3, [pc, #300]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005484:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005488:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005490:	4947      	ldr	r1, [pc, #284]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005492:	4313      	orrs	r3, r2
 8005494:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d00a      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80054a4:	4b42      	ldr	r3, [pc, #264]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80054a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80054aa:	f023 0203 	bic.w	r2, r3, #3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054b2:	493f      	ldr	r1, [pc, #252]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80054b4:	4313      	orrs	r3, r2
 80054b6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d028      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054c6:	4b3a      	ldr	r3, [pc, #232]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80054c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054cc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054d4:	4936      	ldr	r1, [pc, #216]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80054e4:	d106      	bne.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054e6:	4b32      	ldr	r3, [pc, #200]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	4a31      	ldr	r2, [pc, #196]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80054ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80054f0:	60d3      	str	r3, [r2, #12]
 80054f2:	e011      	b.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80054fc:	d10c      	bne.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	3304      	adds	r3, #4
 8005502:	2101      	movs	r1, #1
 8005504:	4618      	mov	r0, r3
 8005506:	f000 f8c9 	bl	800569c <RCCEx_PLLSAI1_Config>
 800550a:	4603      	mov	r3, r0
 800550c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800550e:	7cfb      	ldrb	r3, [r7, #19]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d001      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8005514:	7cfb      	ldrb	r3, [r7, #19]
 8005516:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005520:	2b00      	cmp	r3, #0
 8005522:	d028      	beq.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005524:	4b22      	ldr	r3, [pc, #136]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005526:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800552a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005532:	491f      	ldr	r1, [pc, #124]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005534:	4313      	orrs	r3, r2
 8005536:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800553e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005542:	d106      	bne.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005544:	4b1a      	ldr	r3, [pc, #104]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	4a19      	ldr	r2, [pc, #100]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800554a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800554e:	60d3      	str	r3, [r2, #12]
 8005550:	e011      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005556:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800555a:	d10c      	bne.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	3304      	adds	r3, #4
 8005560:	2101      	movs	r1, #1
 8005562:	4618      	mov	r0, r3
 8005564:	f000 f89a 	bl	800569c <RCCEx_PLLSAI1_Config>
 8005568:	4603      	mov	r3, r0
 800556a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800556c:	7cfb      	ldrb	r3, [r7, #19]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d001      	beq.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8005572:	7cfb      	ldrb	r3, [r7, #19]
 8005574:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800557e:	2b00      	cmp	r3, #0
 8005580:	d02a      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005582:	4b0b      	ldr	r3, [pc, #44]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005584:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005588:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005590:	4907      	ldr	r1, [pc, #28]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005592:	4313      	orrs	r3, r2
 8005594:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800559c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80055a0:	d108      	bne.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055a2:	4b03      	ldr	r3, [pc, #12]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	4a02      	ldr	r2, [pc, #8]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80055a8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80055ac:	60d3      	str	r3, [r2, #12]
 80055ae:	e013      	b.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x534>
 80055b0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80055b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80055bc:	d10c      	bne.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	3304      	adds	r3, #4
 80055c2:	2101      	movs	r1, #1
 80055c4:	4618      	mov	r0, r3
 80055c6:	f000 f869 	bl	800569c <RCCEx_PLLSAI1_Config>
 80055ca:	4603      	mov	r3, r0
 80055cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055ce:	7cfb      	ldrb	r3, [r7, #19]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d001      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 80055d4:	7cfb      	ldrb	r3, [r7, #19]
 80055d6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d02f      	beq.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80055e4:	4b2c      	ldr	r3, [pc, #176]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80055e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055ea:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80055f2:	4929      	ldr	r1, [pc, #164]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80055f4:	4313      	orrs	r3, r2
 80055f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80055fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005602:	d10d      	bne.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	3304      	adds	r3, #4
 8005608:	2102      	movs	r1, #2
 800560a:	4618      	mov	r0, r3
 800560c:	f000 f846 	bl	800569c <RCCEx_PLLSAI1_Config>
 8005610:	4603      	mov	r3, r0
 8005612:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005614:	7cfb      	ldrb	r3, [r7, #19]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d014      	beq.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800561a:	7cfb      	ldrb	r3, [r7, #19]
 800561c:	74bb      	strb	r3, [r7, #18]
 800561e:	e011      	b.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005624:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005628:	d10c      	bne.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	3320      	adds	r3, #32
 800562e:	2102      	movs	r1, #2
 8005630:	4618      	mov	r0, r3
 8005632:	f000 f925 	bl	8005880 <RCCEx_PLLSAI2_Config>
 8005636:	4603      	mov	r3, r0
 8005638:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800563a:	7cfb      	ldrb	r3, [r7, #19]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d001      	beq.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8005640:	7cfb      	ldrb	r3, [r7, #19]
 8005642:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800564c:	2b00      	cmp	r3, #0
 800564e:	d00b      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005650:	4b11      	ldr	r3, [pc, #68]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005652:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005656:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005660:	490d      	ldr	r1, [pc, #52]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005662:	4313      	orrs	r3, r2
 8005664:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d00b      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005674:	4b08      	ldr	r3, [pc, #32]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800567a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005684:	4904      	ldr	r1, [pc, #16]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005686:	4313      	orrs	r3, r2
 8005688:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800568c:	7cbb      	ldrb	r3, [r7, #18]
}
 800568e:	4618      	mov	r0, r3
 8005690:	3718      	adds	r7, #24
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	40021000 	.word	0x40021000

0800569c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056a6:	2300      	movs	r3, #0
 80056a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80056aa:	4b74      	ldr	r3, [pc, #464]	@ (800587c <RCCEx_PLLSAI1_Config+0x1e0>)
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	f003 0303 	and.w	r3, r3, #3
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d018      	beq.n	80056e8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80056b6:	4b71      	ldr	r3, [pc, #452]	@ (800587c <RCCEx_PLLSAI1_Config+0x1e0>)
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	f003 0203 	and.w	r2, r3, #3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d10d      	bne.n	80056e2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
       ||
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d009      	beq.n	80056e2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80056ce:	4b6b      	ldr	r3, [pc, #428]	@ (800587c <RCCEx_PLLSAI1_Config+0x1e0>)
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	091b      	lsrs	r3, r3, #4
 80056d4:	f003 0307 	and.w	r3, r3, #7
 80056d8:	1c5a      	adds	r2, r3, #1
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	685b      	ldr	r3, [r3, #4]
       ||
 80056de:	429a      	cmp	r2, r3
 80056e0:	d047      	beq.n	8005772 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	73fb      	strb	r3, [r7, #15]
 80056e6:	e044      	b.n	8005772 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2b03      	cmp	r3, #3
 80056ee:	d018      	beq.n	8005722 <RCCEx_PLLSAI1_Config+0x86>
 80056f0:	2b03      	cmp	r3, #3
 80056f2:	d825      	bhi.n	8005740 <RCCEx_PLLSAI1_Config+0xa4>
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d002      	beq.n	80056fe <RCCEx_PLLSAI1_Config+0x62>
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d009      	beq.n	8005710 <RCCEx_PLLSAI1_Config+0x74>
 80056fc:	e020      	b.n	8005740 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80056fe:	4b5f      	ldr	r3, [pc, #380]	@ (800587c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 0302 	and.w	r3, r3, #2
 8005706:	2b00      	cmp	r3, #0
 8005708:	d11d      	bne.n	8005746 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800570e:	e01a      	b.n	8005746 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005710:	4b5a      	ldr	r3, [pc, #360]	@ (800587c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005718:	2b00      	cmp	r3, #0
 800571a:	d116      	bne.n	800574a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005720:	e013      	b.n	800574a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005722:	4b56      	ldr	r3, [pc, #344]	@ (800587c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800572a:	2b00      	cmp	r3, #0
 800572c:	d10f      	bne.n	800574e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800572e:	4b53      	ldr	r3, [pc, #332]	@ (800587c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d109      	bne.n	800574e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800573e:	e006      	b.n	800574e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	73fb      	strb	r3, [r7, #15]
      break;
 8005744:	e004      	b.n	8005750 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005746:	bf00      	nop
 8005748:	e002      	b.n	8005750 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800574a:	bf00      	nop
 800574c:	e000      	b.n	8005750 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800574e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005750:	7bfb      	ldrb	r3, [r7, #15]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d10d      	bne.n	8005772 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005756:	4b49      	ldr	r3, [pc, #292]	@ (800587c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6819      	ldr	r1, [r3, #0]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	3b01      	subs	r3, #1
 8005768:	011b      	lsls	r3, r3, #4
 800576a:	430b      	orrs	r3, r1
 800576c:	4943      	ldr	r1, [pc, #268]	@ (800587c <RCCEx_PLLSAI1_Config+0x1e0>)
 800576e:	4313      	orrs	r3, r2
 8005770:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005772:	7bfb      	ldrb	r3, [r7, #15]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d17c      	bne.n	8005872 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005778:	4b40      	ldr	r3, [pc, #256]	@ (800587c <RCCEx_PLLSAI1_Config+0x1e0>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a3f      	ldr	r2, [pc, #252]	@ (800587c <RCCEx_PLLSAI1_Config+0x1e0>)
 800577e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005782:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005784:	f7fd fe38 	bl	80033f8 <HAL_GetTick>
 8005788:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800578a:	e009      	b.n	80057a0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800578c:	f7fd fe34 	bl	80033f8 <HAL_GetTick>
 8005790:	4602      	mov	r2, r0
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	2b02      	cmp	r3, #2
 8005798:	d902      	bls.n	80057a0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	73fb      	strb	r3, [r7, #15]
        break;
 800579e:	e005      	b.n	80057ac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80057a0:	4b36      	ldr	r3, [pc, #216]	@ (800587c <RCCEx_PLLSAI1_Config+0x1e0>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d1ef      	bne.n	800578c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80057ac:	7bfb      	ldrb	r3, [r7, #15]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d15f      	bne.n	8005872 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d110      	bne.n	80057da <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80057b8:	4b30      	ldr	r3, [pc, #192]	@ (800587c <RCCEx_PLLSAI1_Config+0x1e0>)
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80057c0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	6892      	ldr	r2, [r2, #8]
 80057c8:	0211      	lsls	r1, r2, #8
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	68d2      	ldr	r2, [r2, #12]
 80057ce:	06d2      	lsls	r2, r2, #27
 80057d0:	430a      	orrs	r2, r1
 80057d2:	492a      	ldr	r1, [pc, #168]	@ (800587c <RCCEx_PLLSAI1_Config+0x1e0>)
 80057d4:	4313      	orrs	r3, r2
 80057d6:	610b      	str	r3, [r1, #16]
 80057d8:	e027      	b.n	800582a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d112      	bne.n	8005806 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80057e0:	4b26      	ldr	r3, [pc, #152]	@ (800587c <RCCEx_PLLSAI1_Config+0x1e0>)
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80057e8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	6892      	ldr	r2, [r2, #8]
 80057f0:	0211      	lsls	r1, r2, #8
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	6912      	ldr	r2, [r2, #16]
 80057f6:	0852      	lsrs	r2, r2, #1
 80057f8:	3a01      	subs	r2, #1
 80057fa:	0552      	lsls	r2, r2, #21
 80057fc:	430a      	orrs	r2, r1
 80057fe:	491f      	ldr	r1, [pc, #124]	@ (800587c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005800:	4313      	orrs	r3, r2
 8005802:	610b      	str	r3, [r1, #16]
 8005804:	e011      	b.n	800582a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005806:	4b1d      	ldr	r3, [pc, #116]	@ (800587c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800580e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	6892      	ldr	r2, [r2, #8]
 8005816:	0211      	lsls	r1, r2, #8
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	6952      	ldr	r2, [r2, #20]
 800581c:	0852      	lsrs	r2, r2, #1
 800581e:	3a01      	subs	r2, #1
 8005820:	0652      	lsls	r2, r2, #25
 8005822:	430a      	orrs	r2, r1
 8005824:	4915      	ldr	r1, [pc, #84]	@ (800587c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005826:	4313      	orrs	r3, r2
 8005828:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800582a:	4b14      	ldr	r3, [pc, #80]	@ (800587c <RCCEx_PLLSAI1_Config+0x1e0>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a13      	ldr	r2, [pc, #76]	@ (800587c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005830:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005834:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005836:	f7fd fddf 	bl	80033f8 <HAL_GetTick>
 800583a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800583c:	e009      	b.n	8005852 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800583e:	f7fd fddb 	bl	80033f8 <HAL_GetTick>
 8005842:	4602      	mov	r2, r0
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	2b02      	cmp	r3, #2
 800584a:	d902      	bls.n	8005852 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	73fb      	strb	r3, [r7, #15]
          break;
 8005850:	e005      	b.n	800585e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005852:	4b0a      	ldr	r3, [pc, #40]	@ (800587c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d0ef      	beq.n	800583e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800585e:	7bfb      	ldrb	r3, [r7, #15]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d106      	bne.n	8005872 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005864:	4b05      	ldr	r3, [pc, #20]	@ (800587c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005866:	691a      	ldr	r2, [r3, #16]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	699b      	ldr	r3, [r3, #24]
 800586c:	4903      	ldr	r1, [pc, #12]	@ (800587c <RCCEx_PLLSAI1_Config+0x1e0>)
 800586e:	4313      	orrs	r3, r2
 8005870:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005872:	7bfb      	ldrb	r3, [r7, #15]
}
 8005874:	4618      	mov	r0, r3
 8005876:	3710      	adds	r7, #16
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}
 800587c:	40021000 	.word	0x40021000

08005880 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800588a:	2300      	movs	r3, #0
 800588c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800588e:	4b69      	ldr	r3, [pc, #420]	@ (8005a34 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	f003 0303 	and.w	r3, r3, #3
 8005896:	2b00      	cmp	r3, #0
 8005898:	d018      	beq.n	80058cc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800589a:	4b66      	ldr	r3, [pc, #408]	@ (8005a34 <RCCEx_PLLSAI2_Config+0x1b4>)
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	f003 0203 	and.w	r2, r3, #3
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d10d      	bne.n	80058c6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
       ||
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d009      	beq.n	80058c6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80058b2:	4b60      	ldr	r3, [pc, #384]	@ (8005a34 <RCCEx_PLLSAI2_Config+0x1b4>)
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	091b      	lsrs	r3, r3, #4
 80058b8:	f003 0307 	and.w	r3, r3, #7
 80058bc:	1c5a      	adds	r2, r3, #1
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	685b      	ldr	r3, [r3, #4]
       ||
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d047      	beq.n	8005956 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	73fb      	strb	r3, [r7, #15]
 80058ca:	e044      	b.n	8005956 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2b03      	cmp	r3, #3
 80058d2:	d018      	beq.n	8005906 <RCCEx_PLLSAI2_Config+0x86>
 80058d4:	2b03      	cmp	r3, #3
 80058d6:	d825      	bhi.n	8005924 <RCCEx_PLLSAI2_Config+0xa4>
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d002      	beq.n	80058e2 <RCCEx_PLLSAI2_Config+0x62>
 80058dc:	2b02      	cmp	r3, #2
 80058de:	d009      	beq.n	80058f4 <RCCEx_PLLSAI2_Config+0x74>
 80058e0:	e020      	b.n	8005924 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80058e2:	4b54      	ldr	r3, [pc, #336]	@ (8005a34 <RCCEx_PLLSAI2_Config+0x1b4>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 0302 	and.w	r3, r3, #2
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d11d      	bne.n	800592a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058f2:	e01a      	b.n	800592a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80058f4:	4b4f      	ldr	r3, [pc, #316]	@ (8005a34 <RCCEx_PLLSAI2_Config+0x1b4>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d116      	bne.n	800592e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005904:	e013      	b.n	800592e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005906:	4b4b      	ldr	r3, [pc, #300]	@ (8005a34 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800590e:	2b00      	cmp	r3, #0
 8005910:	d10f      	bne.n	8005932 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005912:	4b48      	ldr	r3, [pc, #288]	@ (8005a34 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800591a:	2b00      	cmp	r3, #0
 800591c:	d109      	bne.n	8005932 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005922:	e006      	b.n	8005932 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	73fb      	strb	r3, [r7, #15]
      break;
 8005928:	e004      	b.n	8005934 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800592a:	bf00      	nop
 800592c:	e002      	b.n	8005934 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800592e:	bf00      	nop
 8005930:	e000      	b.n	8005934 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005932:	bf00      	nop
    }

    if(status == HAL_OK)
 8005934:	7bfb      	ldrb	r3, [r7, #15]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d10d      	bne.n	8005956 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800593a:	4b3e      	ldr	r3, [pc, #248]	@ (8005a34 <RCCEx_PLLSAI2_Config+0x1b4>)
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6819      	ldr	r1, [r3, #0]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	3b01      	subs	r3, #1
 800594c:	011b      	lsls	r3, r3, #4
 800594e:	430b      	orrs	r3, r1
 8005950:	4938      	ldr	r1, [pc, #224]	@ (8005a34 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005952:	4313      	orrs	r3, r2
 8005954:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005956:	7bfb      	ldrb	r3, [r7, #15]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d166      	bne.n	8005a2a <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800595c:	4b35      	ldr	r3, [pc, #212]	@ (8005a34 <RCCEx_PLLSAI2_Config+0x1b4>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a34      	ldr	r2, [pc, #208]	@ (8005a34 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005962:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005966:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005968:	f7fd fd46 	bl	80033f8 <HAL_GetTick>
 800596c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800596e:	e009      	b.n	8005984 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005970:	f7fd fd42 	bl	80033f8 <HAL_GetTick>
 8005974:	4602      	mov	r2, r0
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	2b02      	cmp	r3, #2
 800597c:	d902      	bls.n	8005984 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800597e:	2303      	movs	r3, #3
 8005980:	73fb      	strb	r3, [r7, #15]
        break;
 8005982:	e005      	b.n	8005990 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005984:	4b2b      	ldr	r3, [pc, #172]	@ (8005a34 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800598c:	2b00      	cmp	r3, #0
 800598e:	d1ef      	bne.n	8005970 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005990:	7bfb      	ldrb	r3, [r7, #15]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d149      	bne.n	8005a2a <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d110      	bne.n	80059be <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800599c:	4b25      	ldr	r3, [pc, #148]	@ (8005a34 <RCCEx_PLLSAI2_Config+0x1b4>)
 800599e:	695b      	ldr	r3, [r3, #20]
 80059a0:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80059a4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	6892      	ldr	r2, [r2, #8]
 80059ac:	0211      	lsls	r1, r2, #8
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	68d2      	ldr	r2, [r2, #12]
 80059b2:	06d2      	lsls	r2, r2, #27
 80059b4:	430a      	orrs	r2, r1
 80059b6:	491f      	ldr	r1, [pc, #124]	@ (8005a34 <RCCEx_PLLSAI2_Config+0x1b4>)
 80059b8:	4313      	orrs	r3, r2
 80059ba:	614b      	str	r3, [r1, #20]
 80059bc:	e011      	b.n	80059e2 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80059be:	4b1d      	ldr	r3, [pc, #116]	@ (8005a34 <RCCEx_PLLSAI2_Config+0x1b4>)
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80059c6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	6892      	ldr	r2, [r2, #8]
 80059ce:	0211      	lsls	r1, r2, #8
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	6912      	ldr	r2, [r2, #16]
 80059d4:	0852      	lsrs	r2, r2, #1
 80059d6:	3a01      	subs	r2, #1
 80059d8:	0652      	lsls	r2, r2, #25
 80059da:	430a      	orrs	r2, r1
 80059dc:	4915      	ldr	r1, [pc, #84]	@ (8005a34 <RCCEx_PLLSAI2_Config+0x1b4>)
 80059de:	4313      	orrs	r3, r2
 80059e0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80059e2:	4b14      	ldr	r3, [pc, #80]	@ (8005a34 <RCCEx_PLLSAI2_Config+0x1b4>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a13      	ldr	r2, [pc, #76]	@ (8005a34 <RCCEx_PLLSAI2_Config+0x1b4>)
 80059e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059ec:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059ee:	f7fd fd03 	bl	80033f8 <HAL_GetTick>
 80059f2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80059f4:	e009      	b.n	8005a0a <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80059f6:	f7fd fcff 	bl	80033f8 <HAL_GetTick>
 80059fa:	4602      	mov	r2, r0
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	1ad3      	subs	r3, r2, r3
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d902      	bls.n	8005a0a <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8005a04:	2303      	movs	r3, #3
 8005a06:	73fb      	strb	r3, [r7, #15]
          break;
 8005a08:	e005      	b.n	8005a16 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005a0a:	4b0a      	ldr	r3, [pc, #40]	@ (8005a34 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d0ef      	beq.n	80059f6 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8005a16:	7bfb      	ldrb	r3, [r7, #15]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d106      	bne.n	8005a2a <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005a1c:	4b05      	ldr	r3, [pc, #20]	@ (8005a34 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005a1e:	695a      	ldr	r2, [r3, #20]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	695b      	ldr	r3, [r3, #20]
 8005a24:	4903      	ldr	r1, [pc, #12]	@ (8005a34 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005a26:	4313      	orrs	r3, r2
 8005a28:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3710      	adds	r7, #16
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	40021000 	.word	0x40021000

08005a38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b084      	sub	sp, #16
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d101      	bne.n	8005a4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e095      	b.n	8005b76 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d108      	bne.n	8005a64 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a5a:	d009      	beq.n	8005a70 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	61da      	str	r2, [r3, #28]
 8005a62:	e005      	b.n	8005a70 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d106      	bne.n	8005a90 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f7fc ffb2 	bl	80029f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2202      	movs	r2, #2
 8005a94:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005aa6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005ab0:	d902      	bls.n	8005ab8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	60fb      	str	r3, [r7, #12]
 8005ab6:	e002      	b.n	8005abe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005ab8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005abc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005ac6:	d007      	beq.n	8005ad8 <HAL_SPI_Init+0xa0>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005ad0:	d002      	beq.n	8005ad8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005ae8:	431a      	orrs	r2, r3
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	f003 0302 	and.w	r3, r3, #2
 8005af2:	431a      	orrs	r2, r3
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	695b      	ldr	r3, [r3, #20]
 8005af8:	f003 0301 	and.w	r3, r3, #1
 8005afc:	431a      	orrs	r2, r3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	699b      	ldr	r3, [r3, #24]
 8005b02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b06:	431a      	orrs	r2, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	69db      	ldr	r3, [r3, #28]
 8005b0c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b10:	431a      	orrs	r2, r3
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a1b      	ldr	r3, [r3, #32]
 8005b16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b1a:	ea42 0103 	orr.w	r1, r2, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b22:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	430a      	orrs	r2, r1
 8005b2c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	0c1b      	lsrs	r3, r3, #16
 8005b34:	f003 0204 	and.w	r2, r3, #4
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b3c:	f003 0310 	and.w	r3, r3, #16
 8005b40:	431a      	orrs	r2, r3
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b46:	f003 0308 	and.w	r3, r3, #8
 8005b4a:	431a      	orrs	r2, r3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005b54:	ea42 0103 	orr.w	r1, r2, r3
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	430a      	orrs	r2, r1
 8005b64:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3710      	adds	r7, #16
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}

08005b7e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b7e:	b580      	push	{r7, lr}
 8005b80:	b088      	sub	sp, #32
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	60f8      	str	r0, [r7, #12]
 8005b86:	60b9      	str	r1, [r7, #8]
 8005b88:	603b      	str	r3, [r7, #0]
 8005b8a:	4613      	mov	r3, r2
 8005b8c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d101      	bne.n	8005ba0 <HAL_SPI_Transmit+0x22>
 8005b9c:	2302      	movs	r3, #2
 8005b9e:	e15f      	b.n	8005e60 <HAL_SPI_Transmit+0x2e2>
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ba8:	f7fd fc26 	bl	80033f8 <HAL_GetTick>
 8005bac:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005bae:	88fb      	ldrh	r3, [r7, #6]
 8005bb0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d002      	beq.n	8005bc4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005bbe:	2302      	movs	r3, #2
 8005bc0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005bc2:	e148      	b.n	8005e56 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d002      	beq.n	8005bd0 <HAL_SPI_Transmit+0x52>
 8005bca:	88fb      	ldrh	r3, [r7, #6]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d102      	bne.n	8005bd6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005bd4:	e13f      	b.n	8005e56 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2203      	movs	r2, #3
 8005bda:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2200      	movs	r2, #0
 8005be2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	68ba      	ldr	r2, [r7, #8]
 8005be8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	88fa      	ldrh	r2, [r7, #6]
 8005bee:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	88fa      	ldrh	r2, [r7, #6]
 8005bf4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2200      	movs	r2, #0
 8005c16:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c20:	d10f      	bne.n	8005c42 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c30:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005c40:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c4c:	2b40      	cmp	r3, #64	@ 0x40
 8005c4e:	d007      	beq.n	8005c60 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c5e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005c68:	d94f      	bls.n	8005d0a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d002      	beq.n	8005c78 <HAL_SPI_Transmit+0xfa>
 8005c72:	8afb      	ldrh	r3, [r7, #22]
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d142      	bne.n	8005cfe <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c7c:	881a      	ldrh	r2, [r3, #0]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c88:	1c9a      	adds	r2, r3, #2
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	3b01      	subs	r3, #1
 8005c96:	b29a      	uxth	r2, r3
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005c9c:	e02f      	b.n	8005cfe <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	f003 0302 	and.w	r3, r3, #2
 8005ca8:	2b02      	cmp	r3, #2
 8005caa:	d112      	bne.n	8005cd2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cb0:	881a      	ldrh	r2, [r3, #0]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cbc:	1c9a      	adds	r2, r3, #2
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	3b01      	subs	r3, #1
 8005cca:	b29a      	uxth	r2, r3
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005cd0:	e015      	b.n	8005cfe <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cd2:	f7fd fb91 	bl	80033f8 <HAL_GetTick>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	1ad3      	subs	r3, r2, r3
 8005cdc:	683a      	ldr	r2, [r7, #0]
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d803      	bhi.n	8005cea <HAL_SPI_Transmit+0x16c>
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce8:	d102      	bne.n	8005cf0 <HAL_SPI_Transmit+0x172>
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d106      	bne.n	8005cfe <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005cfc:	e0ab      	b.n	8005e56 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d1ca      	bne.n	8005c9e <HAL_SPI_Transmit+0x120>
 8005d08:	e080      	b.n	8005e0c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d002      	beq.n	8005d18 <HAL_SPI_Transmit+0x19a>
 8005d12:	8afb      	ldrh	r3, [r7, #22]
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d174      	bne.n	8005e02 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d912      	bls.n	8005d48 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d26:	881a      	ldrh	r2, [r3, #0]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d32:	1c9a      	adds	r2, r3, #2
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	3b02      	subs	r3, #2
 8005d40:	b29a      	uxth	r2, r3
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005d46:	e05c      	b.n	8005e02 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	330c      	adds	r3, #12
 8005d52:	7812      	ldrb	r2, [r2, #0]
 8005d54:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d5a:	1c5a      	adds	r2, r3, #1
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	3b01      	subs	r3, #1
 8005d68:	b29a      	uxth	r2, r3
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005d6e:	e048      	b.n	8005e02 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	f003 0302 	and.w	r3, r3, #2
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	d12b      	bne.n	8005dd6 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d912      	bls.n	8005dae <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d8c:	881a      	ldrh	r2, [r3, #0]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d98:	1c9a      	adds	r2, r3, #2
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	3b02      	subs	r3, #2
 8005da6:	b29a      	uxth	r2, r3
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005dac:	e029      	b.n	8005e02 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	330c      	adds	r3, #12
 8005db8:	7812      	ldrb	r2, [r2, #0]
 8005dba:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dc0:	1c5a      	adds	r2, r3, #1
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	3b01      	subs	r3, #1
 8005dce:	b29a      	uxth	r2, r3
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005dd4:	e015      	b.n	8005e02 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005dd6:	f7fd fb0f 	bl	80033f8 <HAL_GetTick>
 8005dda:	4602      	mov	r2, r0
 8005ddc:	69bb      	ldr	r3, [r7, #24]
 8005dde:	1ad3      	subs	r3, r2, r3
 8005de0:	683a      	ldr	r2, [r7, #0]
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d803      	bhi.n	8005dee <HAL_SPI_Transmit+0x270>
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dec:	d102      	bne.n	8005df4 <HAL_SPI_Transmit+0x276>
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d106      	bne.n	8005e02 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8005df4:	2303      	movs	r3, #3
 8005df6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005e00:	e029      	b.n	8005e56 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d1b1      	bne.n	8005d70 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e0c:	69ba      	ldr	r2, [r7, #24]
 8005e0e:	6839      	ldr	r1, [r7, #0]
 8005e10:	68f8      	ldr	r0, [r7, #12]
 8005e12:	f000 fe95 	bl	8006b40 <SPI_EndRxTxTransaction>
 8005e16:	4603      	mov	r3, r0
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d002      	beq.n	8005e22 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2220      	movs	r2, #32
 8005e20:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d10a      	bne.n	8005e40 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	613b      	str	r3, [r7, #16]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	613b      	str	r3, [r7, #16]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	613b      	str	r3, [r7, #16]
 8005e3e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d002      	beq.n	8005e4e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	77fb      	strb	r3, [r7, #31]
 8005e4c:	e003      	b.n	8005e56 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2201      	movs	r2, #1
 8005e52:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005e5e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3720      	adds	r7, #32
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b08a      	sub	sp, #40	@ 0x28
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	607a      	str	r2, [r7, #4]
 8005e74:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005e76:	2301      	movs	r3, #1
 8005e78:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d101      	bne.n	8005e8e <HAL_SPI_TransmitReceive+0x26>
 8005e8a:	2302      	movs	r3, #2
 8005e8c:	e20a      	b.n	80062a4 <HAL_SPI_TransmitReceive+0x43c>
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2201      	movs	r2, #1
 8005e92:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e96:	f7fd faaf 	bl	80033f8 <HAL_GetTick>
 8005e9a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005ea2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005eaa:	887b      	ldrh	r3, [r7, #2]
 8005eac:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005eae:	887b      	ldrh	r3, [r7, #2]
 8005eb0:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005eb2:	7efb      	ldrb	r3, [r7, #27]
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d00e      	beq.n	8005ed6 <HAL_SPI_TransmitReceive+0x6e>
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ebe:	d106      	bne.n	8005ece <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d102      	bne.n	8005ece <HAL_SPI_TransmitReceive+0x66>
 8005ec8:	7efb      	ldrb	r3, [r7, #27]
 8005eca:	2b04      	cmp	r3, #4
 8005ecc:	d003      	beq.n	8005ed6 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005ece:	2302      	movs	r3, #2
 8005ed0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8005ed4:	e1e0      	b.n	8006298 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d005      	beq.n	8005ee8 <HAL_SPI_TransmitReceive+0x80>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d002      	beq.n	8005ee8 <HAL_SPI_TransmitReceive+0x80>
 8005ee2:	887b      	ldrh	r3, [r7, #2]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d103      	bne.n	8005ef0 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8005eee:	e1d3      	b.n	8006298 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	2b04      	cmp	r3, #4
 8005efa:	d003      	beq.n	8005f04 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2205      	movs	r2, #5
 8005f00:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2200      	movs	r2, #0
 8005f08:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	887a      	ldrh	r2, [r7, #2]
 8005f14:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	887a      	ldrh	r2, [r7, #2]
 8005f1c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	68ba      	ldr	r2, [r7, #8]
 8005f24:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	887a      	ldrh	r2, [r7, #2]
 8005f2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	887a      	ldrh	r2, [r7, #2]
 8005f30:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2200      	movs	r2, #0
 8005f36:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005f46:	d802      	bhi.n	8005f4e <HAL_SPI_TransmitReceive+0xe6>
 8005f48:	8a3b      	ldrh	r3, [r7, #16]
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d908      	bls.n	8005f60 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	685a      	ldr	r2, [r3, #4]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005f5c:	605a      	str	r2, [r3, #4]
 8005f5e:	e007      	b.n	8005f70 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	685a      	ldr	r2, [r3, #4]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005f6e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f7a:	2b40      	cmp	r3, #64	@ 0x40
 8005f7c:	d007      	beq.n	8005f8e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f8c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005f96:	f240 8081 	bls.w	800609c <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d002      	beq.n	8005fa8 <HAL_SPI_TransmitReceive+0x140>
 8005fa2:	8a7b      	ldrh	r3, [r7, #18]
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d16d      	bne.n	8006084 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fac:	881a      	ldrh	r2, [r3, #0]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fb8:	1c9a      	adds	r2, r3, #2
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	3b01      	subs	r3, #1
 8005fc6:	b29a      	uxth	r2, r3
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fcc:	e05a      	b.n	8006084 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	f003 0302 	and.w	r3, r3, #2
 8005fd8:	2b02      	cmp	r3, #2
 8005fda:	d11b      	bne.n	8006014 <HAL_SPI_TransmitReceive+0x1ac>
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d016      	beq.n	8006014 <HAL_SPI_TransmitReceive+0x1ac>
 8005fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d113      	bne.n	8006014 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ff0:	881a      	ldrh	r2, [r3, #0]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ffc:	1c9a      	adds	r2, r3, #2
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006006:	b29b      	uxth	r3, r3
 8006008:	3b01      	subs	r3, #1
 800600a:	b29a      	uxth	r2, r3
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006010:	2300      	movs	r3, #0
 8006012:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	f003 0301 	and.w	r3, r3, #1
 800601e:	2b01      	cmp	r3, #1
 8006020:	d11c      	bne.n	800605c <HAL_SPI_TransmitReceive+0x1f4>
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006028:	b29b      	uxth	r3, r3
 800602a:	2b00      	cmp	r3, #0
 800602c:	d016      	beq.n	800605c <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	68da      	ldr	r2, [r3, #12]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006038:	b292      	uxth	r2, r2
 800603a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006040:	1c9a      	adds	r2, r3, #2
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800604c:	b29b      	uxth	r3, r3
 800604e:	3b01      	subs	r3, #1
 8006050:	b29a      	uxth	r2, r3
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006058:	2301      	movs	r3, #1
 800605a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800605c:	f7fd f9cc 	bl	80033f8 <HAL_GetTick>
 8006060:	4602      	mov	r2, r0
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006068:	429a      	cmp	r2, r3
 800606a:	d80b      	bhi.n	8006084 <HAL_SPI_TransmitReceive+0x21c>
 800606c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800606e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006072:	d007      	beq.n	8006084 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8006074:	2303      	movs	r3, #3
 8006076:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2201      	movs	r2, #1
 800607e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8006082:	e109      	b.n	8006298 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006088:	b29b      	uxth	r3, r3
 800608a:	2b00      	cmp	r3, #0
 800608c:	d19f      	bne.n	8005fce <HAL_SPI_TransmitReceive+0x166>
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006094:	b29b      	uxth	r3, r3
 8006096:	2b00      	cmp	r3, #0
 8006098:	d199      	bne.n	8005fce <HAL_SPI_TransmitReceive+0x166>
 800609a:	e0e3      	b.n	8006264 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d003      	beq.n	80060ac <HAL_SPI_TransmitReceive+0x244>
 80060a4:	8a7b      	ldrh	r3, [r7, #18]
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	f040 80cf 	bne.w	800624a <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d912      	bls.n	80060dc <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060ba:	881a      	ldrh	r2, [r3, #0]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060c6:	1c9a      	adds	r2, r3, #2
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	3b02      	subs	r3, #2
 80060d4:	b29a      	uxth	r2, r3
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80060da:	e0b6      	b.n	800624a <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	330c      	adds	r3, #12
 80060e6:	7812      	ldrb	r2, [r2, #0]
 80060e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060ee:	1c5a      	adds	r2, r3, #1
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	3b01      	subs	r3, #1
 80060fc:	b29a      	uxth	r2, r3
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006102:	e0a2      	b.n	800624a <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	f003 0302 	and.w	r3, r3, #2
 800610e:	2b02      	cmp	r3, #2
 8006110:	d134      	bne.n	800617c <HAL_SPI_TransmitReceive+0x314>
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006116:	b29b      	uxth	r3, r3
 8006118:	2b00      	cmp	r3, #0
 800611a:	d02f      	beq.n	800617c <HAL_SPI_TransmitReceive+0x314>
 800611c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800611e:	2b01      	cmp	r3, #1
 8006120:	d12c      	bne.n	800617c <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006126:	b29b      	uxth	r3, r3
 8006128:	2b01      	cmp	r3, #1
 800612a:	d912      	bls.n	8006152 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006130:	881a      	ldrh	r2, [r3, #0]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800613c:	1c9a      	adds	r2, r3, #2
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006146:	b29b      	uxth	r3, r3
 8006148:	3b02      	subs	r3, #2
 800614a:	b29a      	uxth	r2, r3
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006150:	e012      	b.n	8006178 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	330c      	adds	r3, #12
 800615c:	7812      	ldrb	r2, [r2, #0]
 800615e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006164:	1c5a      	adds	r2, r3, #1
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800616e:	b29b      	uxth	r3, r3
 8006170:	3b01      	subs	r3, #1
 8006172:	b29a      	uxth	r2, r3
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006178:	2300      	movs	r3, #0
 800617a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	f003 0301 	and.w	r3, r3, #1
 8006186:	2b01      	cmp	r3, #1
 8006188:	d148      	bne.n	800621c <HAL_SPI_TransmitReceive+0x3b4>
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006190:	b29b      	uxth	r3, r3
 8006192:	2b00      	cmp	r3, #0
 8006194:	d042      	beq.n	800621c <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800619c:	b29b      	uxth	r3, r3
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d923      	bls.n	80061ea <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	68da      	ldr	r2, [r3, #12]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ac:	b292      	uxth	r2, r2
 80061ae:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061b4:	1c9a      	adds	r2, r3, #2
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	3b02      	subs	r3, #2
 80061c4:	b29a      	uxth	r2, r3
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d81f      	bhi.n	8006218 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	685a      	ldr	r2, [r3, #4]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80061e6:	605a      	str	r2, [r3, #4]
 80061e8:	e016      	b.n	8006218 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f103 020c 	add.w	r2, r3, #12
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061f6:	7812      	ldrb	r2, [r2, #0]
 80061f8:	b2d2      	uxtb	r2, r2
 80061fa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006200:	1c5a      	adds	r2, r3, #1
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800620c:	b29b      	uxth	r3, r3
 800620e:	3b01      	subs	r3, #1
 8006210:	b29a      	uxth	r2, r3
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006218:	2301      	movs	r3, #1
 800621a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800621c:	f7fd f8ec 	bl	80033f8 <HAL_GetTick>
 8006220:	4602      	mov	r2, r0
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	1ad3      	subs	r3, r2, r3
 8006226:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006228:	429a      	cmp	r2, r3
 800622a:	d803      	bhi.n	8006234 <HAL_SPI_TransmitReceive+0x3cc>
 800622c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800622e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006232:	d102      	bne.n	800623a <HAL_SPI_TransmitReceive+0x3d2>
 8006234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006236:	2b00      	cmp	r3, #0
 8006238:	d107      	bne.n	800624a <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800623a:	2303      	movs	r3, #3
 800623c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8006248:	e026      	b.n	8006298 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800624e:	b29b      	uxth	r3, r3
 8006250:	2b00      	cmp	r3, #0
 8006252:	f47f af57 	bne.w	8006104 <HAL_SPI_TransmitReceive+0x29c>
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800625c:	b29b      	uxth	r3, r3
 800625e:	2b00      	cmp	r3, #0
 8006260:	f47f af50 	bne.w	8006104 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006264:	69fa      	ldr	r2, [r7, #28]
 8006266:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006268:	68f8      	ldr	r0, [r7, #12]
 800626a:	f000 fc69 	bl	8006b40 <SPI_EndRxTxTransaction>
 800626e:	4603      	mov	r3, r0
 8006270:	2b00      	cmp	r3, #0
 8006272:	d005      	beq.n	8006280 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2220      	movs	r2, #32
 800627e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006284:	2b00      	cmp	r3, #0
 8006286:	d003      	beq.n	8006290 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800628e:	e003      	b.n	8006298 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2200      	movs	r2, #0
 800629c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80062a0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3728      	adds	r7, #40	@ 0x28
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b086      	sub	sp, #24
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	60b9      	str	r1, [r7, #8]
 80062b6:	4613      	mov	r3, r2
 80062b8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80062ba:	2300      	movs	r3, #0
 80062bc:	75fb      	strb	r3, [r7, #23]


  if (hspi->State != HAL_SPI_STATE_READY)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d002      	beq.n	80062d0 <HAL_SPI_Receive_IT+0x24>
  {
    errorcode = HAL_BUSY;
 80062ca:	2302      	movs	r3, #2
 80062cc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80062ce:	e092      	b.n	80063f6 <HAL_SPI_Receive_IT+0x14a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d110      	bne.n	80062fa <HAL_SPI_Receive_IT+0x4e>
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80062e0:	d10b      	bne.n	80062fa <HAL_SPI_Receive_IT+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2204      	movs	r2, #4
 80062e6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80062ea:	88fb      	ldrh	r3, [r7, #6]
 80062ec:	68ba      	ldr	r2, [r7, #8]
 80062ee:	68b9      	ldr	r1, [r7, #8]
 80062f0:	68f8      	ldr	r0, [r7, #12]
 80062f2:	f000 f889 	bl	8006408 <HAL_SPI_TransmitReceive_IT>
 80062f6:	4603      	mov	r3, r0
 80062f8:	e07e      	b.n	80063f8 <HAL_SPI_Receive_IT+0x14c>
  }


  if ((pData == NULL) || (Size == 0U))
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d002      	beq.n	8006306 <HAL_SPI_Receive_IT+0x5a>
 8006300:	88fb      	ldrh	r3, [r7, #6]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d102      	bne.n	800630c <HAL_SPI_Receive_IT+0x60>
  {
    errorcode = HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	75fb      	strb	r3, [r7, #23]
    goto error;
 800630a:	e074      	b.n	80063f6 <HAL_SPI_Receive_IT+0x14a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006312:	2b01      	cmp	r3, #1
 8006314:	d101      	bne.n	800631a <HAL_SPI_Receive_IT+0x6e>
 8006316:	2302      	movs	r3, #2
 8006318:	e06e      	b.n	80063f8 <HAL_SPI_Receive_IT+0x14c>
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2201      	movs	r2, #1
 800631e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2204      	movs	r2, #4
 8006326:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2200      	movs	r2, #0
 800632e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	68ba      	ldr	r2, [r7, #8]
 8006334:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	88fa      	ldrh	r2, [r7, #6]
 800633a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	88fa      	ldrh	r2, [r7, #6]
 8006342:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2200      	movs	r2, #0
 800634a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2200      	movs	r2, #0
 8006350:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2200      	movs	r2, #0
 8006356:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2200      	movs	r2, #0
 800635c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006366:	d90b      	bls.n	8006380 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	685a      	ldr	r2, [r3, #4]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006376:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	4a21      	ldr	r2, [pc, #132]	@ (8006400 <HAL_SPI_Receive_IT+0x154>)
 800637c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800637e:	e00a      	b.n	8006396 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	685a      	ldr	r2, [r3, #4]
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800638e:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	4a1c      	ldr	r2, [pc, #112]	@ (8006404 <HAL_SPI_Receive_IT+0x158>)
 8006394:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800639e:	d10f      	bne.n	80063c0 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80063ae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80063be:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063ca:	2b40      	cmp	r3, #64	@ 0x40
 80063cc:	d007      	beq.n	80063de <HAL_SPI_Receive_IT+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80063dc:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	685a      	ldr	r2, [r3, #4]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80063f4:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 80063f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3718      	adds	r7, #24
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	08006807 	.word	0x08006807
 8006404:	080067b7 	.word	0x080067b7

08006408 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8006408:	b480      	push	{r7}
 800640a:	b087      	sub	sp, #28
 800640c:	af00      	add	r7, sp, #0
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	60b9      	str	r1, [r7, #8]
 8006412:	607a      	str	r2, [r7, #4]
 8006414:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006416:	2300      	movs	r3, #0
 8006418:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006420:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006428:	7dbb      	ldrb	r3, [r7, #22]
 800642a:	2b01      	cmp	r3, #1
 800642c:	d00d      	beq.n	800644a <HAL_SPI_TransmitReceive_IT+0x42>
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006434:	d106      	bne.n	8006444 <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d102      	bne.n	8006444 <HAL_SPI_TransmitReceive_IT+0x3c>
 800643e:	7dbb      	ldrb	r3, [r7, #22]
 8006440:	2b04      	cmp	r3, #4
 8006442:	d002      	beq.n	800644a <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 8006444:	2302      	movs	r3, #2
 8006446:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006448:	e07d      	b.n	8006546 <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d005      	beq.n	800645c <HAL_SPI_TransmitReceive_IT+0x54>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d002      	beq.n	800645c <HAL_SPI_TransmitReceive_IT+0x54>
 8006456:	887b      	ldrh	r3, [r7, #2]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d102      	bne.n	8006462 <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006460:	e071      	b.n	8006546 <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006468:	2b01      	cmp	r3, #1
 800646a:	d101      	bne.n	8006470 <HAL_SPI_TransmitReceive_IT+0x68>
 800646c:	2302      	movs	r3, #2
 800646e:	e06b      	b.n	8006548 <HAL_SPI_TransmitReceive_IT+0x140>
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800647e:	b2db      	uxtb	r3, r3
 8006480:	2b04      	cmp	r3, #4
 8006482:	d003      	beq.n	800648c <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2205      	movs	r2, #5
 8006488:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2200      	movs	r2, #0
 8006490:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	68ba      	ldr	r2, [r7, #8]
 8006496:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	887a      	ldrh	r2, [r7, #2]
 800649c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	887a      	ldrh	r2, [r7, #2]
 80064a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	887a      	ldrh	r2, [r7, #2]
 80064ae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	887a      	ldrh	r2, [r7, #2]
 80064b6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80064c2:	d906      	bls.n	80064d2 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	4a23      	ldr	r2, [pc, #140]	@ (8006554 <HAL_SPI_TransmitReceive_IT+0x14c>)
 80064c8:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	4a22      	ldr	r2, [pc, #136]	@ (8006558 <HAL_SPI_TransmitReceive_IT+0x150>)
 80064ce:	651a      	str	r2, [r3, #80]	@ 0x50
 80064d0:	e005      	b.n	80064de <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	4a21      	ldr	r2, [pc, #132]	@ (800655c <HAL_SPI_TransmitReceive_IT+0x154>)
 80064d6:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	4a21      	ldr	r2, [pc, #132]	@ (8006560 <HAL_SPI_TransmitReceive_IT+0x158>)
 80064dc:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	68db      	ldr	r3, [r3, #12]
 80064e2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80064e6:	d802      	bhi.n	80064ee <HAL_SPI_TransmitReceive_IT+0xe6>
 80064e8:	887b      	ldrh	r3, [r7, #2]
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d908      	bls.n	8006500 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	685a      	ldr	r2, [r3, #4]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80064fc:	605a      	str	r2, [r3, #4]
 80064fe:	e007      	b.n	8006510 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	685a      	ldr	r2, [r3, #4]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800650e:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800651a:	2b40      	cmp	r3, #64	@ 0x40
 800651c:	d007      	beq.n	800652e <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800652c:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2200      	movs	r2, #0
 8006532:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	685a      	ldr	r2, [r3, #4]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8006544:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8006546:	7dfb      	ldrb	r3, [r7, #23]
}
 8006548:	4618      	mov	r0, r3
 800654a:	371c      	adds	r7, #28
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr
 8006554:	080066f1 	.word	0x080066f1
 8006558:	08006757 	.word	0x08006757
 800655c:	080065a1 	.word	0x080065a1
 8006560:	0800665f 	.word	0x0800665f

08006564 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800656c:	bf00      	nop
 800656e:	370c      	adds	r7, #12
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006580:	bf00      	nop
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006594:	bf00      	nop
 8006596:	370c      	adds	r7, #12
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b082      	sub	sp, #8
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d923      	bls.n	80065fc <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	68da      	ldr	r2, [r3, #12]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065be:	b292      	uxth	r2, r2
 80065c0:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065c6:	1c9a      	adds	r2, r3, #2
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount -= 2U;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	3b02      	subs	r3, #2
 80065d6:	b29a      	uxth	r2, r3
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    if (hspi->RxXferCount == 1U)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d11f      	bne.n	800662a <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	685a      	ldr	r2, [r3, #4]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80065f8:	605a      	str	r2, [r3, #4]
 80065fa:	e016      	b.n	800662a <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f103 020c 	add.w	r2, r3, #12
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006608:	7812      	ldrb	r2, [r2, #0]
 800660a:	b2d2      	uxtb	r2, r2
 800660c:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006612:	1c5a      	adds	r2, r3, #1
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount--;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800661e:	b29b      	uxth	r3, r3
 8006620:	3b01      	subs	r3, #1
 8006622:	b29a      	uxth	r2, r3
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006630:	b29b      	uxth	r3, r3
 8006632:	2b00      	cmp	r3, #0
 8006634:	d10f      	bne.n	8006656 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	685a      	ldr	r2, [r3, #4]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006644:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800664a:	b29b      	uxth	r3, r3
 800664c:	2b00      	cmp	r3, #0
 800664e:	d102      	bne.n	8006656 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 fabb 	bl	8006bcc <SPI_CloseRxTx_ISR>
    }
  }
}
 8006656:	bf00      	nop
 8006658:	3708      	adds	r7, #8
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}

0800665e <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800665e:	b580      	push	{r7, lr}
 8006660:	b082      	sub	sp, #8
 8006662:	af00      	add	r7, sp, #0
 8006664:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800666a:	b29b      	uxth	r3, r3
 800666c:	2b01      	cmp	r3, #1
 800666e:	d912      	bls.n	8006696 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006674:	881a      	ldrh	r2, [r3, #0]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006680:	1c9a      	adds	r2, r3, #2
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount -= 2U;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800668a:	b29b      	uxth	r3, r3
 800668c:	3b02      	subs	r3, #2
 800668e:	b29a      	uxth	r2, r3
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006694:	e012      	b.n	80066bc <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	330c      	adds	r3, #12
 80066a0:	7812      	ldrb	r2, [r2, #0]
 80066a2:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066a8:	1c5a      	adds	r2, r3, #1
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount--;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	3b01      	subs	r3, #1
 80066b6:	b29a      	uxth	r2, r3
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d110      	bne.n	80066e8 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	685a      	ldr	r2, [r3, #4]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80066d4:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80066dc:	b29b      	uxth	r3, r3
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d102      	bne.n	80066e8 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 fa72 	bl	8006bcc <SPI_CloseRxTx_ISR>
    }
  }
}
 80066e8:	bf00      	nop
 80066ea:	3708      	adds	r7, #8
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b082      	sub	sp, #8
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	68da      	ldr	r2, [r3, #12]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006702:	b292      	uxth	r2, r2
 8006704:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800670a:	1c9a      	adds	r2, r3, #2
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006716:	b29b      	uxth	r3, r3
 8006718:	3b01      	subs	r3, #1
 800671a:	b29a      	uxth	r2, r3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  if (hspi->RxXferCount == 0U)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006728:	b29b      	uxth	r3, r3
 800672a:	2b00      	cmp	r3, #0
 800672c:	d10f      	bne.n	800674e <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	685a      	ldr	r2, [r3, #4]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800673c:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006742:	b29b      	uxth	r3, r3
 8006744:	2b00      	cmp	r3, #0
 8006746:	d102      	bne.n	800674e <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f000 fa3f 	bl	8006bcc <SPI_CloseRxTx_ISR>
    }
  }
}
 800674e:	bf00      	nop
 8006750:	3708      	adds	r7, #8
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}

08006756 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006756:	b580      	push	{r7, lr}
 8006758:	b082      	sub	sp, #8
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006762:	881a      	ldrh	r2, [r3, #0]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800676e:	1c9a      	adds	r2, r3, #2
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006778:	b29b      	uxth	r3, r3
 800677a:	3b01      	subs	r3, #1
 800677c:	b29a      	uxth	r2, r3
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006786:	b29b      	uxth	r3, r3
 8006788:	2b00      	cmp	r3, #0
 800678a:	d110      	bne.n	80067ae <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	685a      	ldr	r2, [r3, #4]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800679a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d102      	bne.n	80067ae <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f000 fa0f 	bl	8006bcc <SPI_CloseRxTx_ISR>
    }
  }
}
 80067ae:	bf00      	nop
 80067b0:	3708      	adds	r7, #8
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}

080067b6 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80067b6:	b580      	push	{r7, lr}
 80067b8:	b082      	sub	sp, #8
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f103 020c 	add.w	r2, r3, #12
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ca:	7812      	ldrb	r2, [r2, #0]
 80067cc:	b2d2      	uxtb	r2, r2
 80067ce:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067d4:	1c5a      	adds	r2, r3, #1
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	3b01      	subs	r3, #1
 80067e4:	b29a      	uxth	r2, r3
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d102      	bne.n	80067fe <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f000 fa29 	bl	8006c50 <SPI_CloseRx_ISR>
  }
}
 80067fe:	bf00      	nop
 8006800:	3708      	adds	r7, #8
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}

08006806 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006806:	b580      	push	{r7, lr}
 8006808:	b082      	sub	sp, #8
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	68da      	ldr	r2, [r3, #12]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006818:	b292      	uxth	r2, r2
 800681a:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006820:	1c9a      	adds	r2, r3, #2
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800682c:	b29b      	uxth	r3, r3
 800682e:	3b01      	subs	r3, #1
 8006830:	b29a      	uxth	r2, r3
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800683e:	b29b      	uxth	r3, r3
 8006840:	2b00      	cmp	r3, #0
 8006842:	d102      	bne.n	800684a <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f000 fa03 	bl	8006c50 <SPI_CloseRx_ISR>
  }
}
 800684a:	bf00      	nop
 800684c:	3708      	adds	r7, #8
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
	...

08006854 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b088      	sub	sp, #32
 8006858:	af00      	add	r7, sp, #0
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	60b9      	str	r1, [r7, #8]
 800685e:	603b      	str	r3, [r7, #0]
 8006860:	4613      	mov	r3, r2
 8006862:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006864:	f7fc fdc8 	bl	80033f8 <HAL_GetTick>
 8006868:	4602      	mov	r2, r0
 800686a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800686c:	1a9b      	subs	r3, r3, r2
 800686e:	683a      	ldr	r2, [r7, #0]
 8006870:	4413      	add	r3, r2
 8006872:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006874:	f7fc fdc0 	bl	80033f8 <HAL_GetTick>
 8006878:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800687a:	4b39      	ldr	r3, [pc, #228]	@ (8006960 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	015b      	lsls	r3, r3, #5
 8006880:	0d1b      	lsrs	r3, r3, #20
 8006882:	69fa      	ldr	r2, [r7, #28]
 8006884:	fb02 f303 	mul.w	r3, r2, r3
 8006888:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800688a:	e054      	b.n	8006936 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006892:	d050      	beq.n	8006936 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006894:	f7fc fdb0 	bl	80033f8 <HAL_GetTick>
 8006898:	4602      	mov	r2, r0
 800689a:	69bb      	ldr	r3, [r7, #24]
 800689c:	1ad3      	subs	r3, r2, r3
 800689e:	69fa      	ldr	r2, [r7, #28]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d902      	bls.n	80068aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80068a4:	69fb      	ldr	r3, [r7, #28]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d13d      	bne.n	8006926 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	685a      	ldr	r2, [r3, #4]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80068b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80068c2:	d111      	bne.n	80068e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80068cc:	d004      	beq.n	80068d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068d6:	d107      	bne.n	80068e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80068e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068f0:	d10f      	bne.n	8006912 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006900:	601a      	str	r2, [r3, #0]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006910:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2201      	movs	r2, #1
 8006916:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2200      	movs	r2, #0
 800691e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006922:	2303      	movs	r3, #3
 8006924:	e017      	b.n	8006956 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d101      	bne.n	8006930 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800692c:	2300      	movs	r3, #0
 800692e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	3b01      	subs	r3, #1
 8006934:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	689a      	ldr	r2, [r3, #8]
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	4013      	ands	r3, r2
 8006940:	68ba      	ldr	r2, [r7, #8]
 8006942:	429a      	cmp	r2, r3
 8006944:	bf0c      	ite	eq
 8006946:	2301      	moveq	r3, #1
 8006948:	2300      	movne	r3, #0
 800694a:	b2db      	uxtb	r3, r3
 800694c:	461a      	mov	r2, r3
 800694e:	79fb      	ldrb	r3, [r7, #7]
 8006950:	429a      	cmp	r2, r3
 8006952:	d19b      	bne.n	800688c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	3720      	adds	r7, #32
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop
 8006960:	200001bc 	.word	0x200001bc

08006964 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b08a      	sub	sp, #40	@ 0x28
 8006968:	af00      	add	r7, sp, #0
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	607a      	str	r2, [r7, #4]
 8006970:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006972:	2300      	movs	r3, #0
 8006974:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006976:	f7fc fd3f 	bl	80033f8 <HAL_GetTick>
 800697a:	4602      	mov	r2, r0
 800697c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800697e:	1a9b      	subs	r3, r3, r2
 8006980:	683a      	ldr	r2, [r7, #0]
 8006982:	4413      	add	r3, r2
 8006984:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006986:	f7fc fd37 	bl	80033f8 <HAL_GetTick>
 800698a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	330c      	adds	r3, #12
 8006992:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006994:	4b3d      	ldr	r3, [pc, #244]	@ (8006a8c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	4613      	mov	r3, r2
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	4413      	add	r3, r2
 800699e:	00da      	lsls	r2, r3, #3
 80069a0:	1ad3      	subs	r3, r2, r3
 80069a2:	0d1b      	lsrs	r3, r3, #20
 80069a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069a6:	fb02 f303 	mul.w	r3, r2, r3
 80069aa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80069ac:	e060      	b.n	8006a70 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80069b4:	d107      	bne.n	80069c6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d104      	bne.n	80069c6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80069bc:	69fb      	ldr	r3, [r7, #28]
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	b2db      	uxtb	r3, r3
 80069c2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80069c4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069cc:	d050      	beq.n	8006a70 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80069ce:	f7fc fd13 	bl	80033f8 <HAL_GetTick>
 80069d2:	4602      	mov	r2, r0
 80069d4:	6a3b      	ldr	r3, [r7, #32]
 80069d6:	1ad3      	subs	r3, r2, r3
 80069d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069da:	429a      	cmp	r2, r3
 80069dc:	d902      	bls.n	80069e4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80069de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d13d      	bne.n	8006a60 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	685a      	ldr	r2, [r3, #4]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80069f2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80069fc:	d111      	bne.n	8006a22 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a06:	d004      	beq.n	8006a12 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a10:	d107      	bne.n	8006a22 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a20:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a2a:	d10f      	bne.n	8006a4c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006a3a:	601a      	str	r2, [r3, #0]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006a4a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2200      	movs	r2, #0
 8006a58:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006a5c:	2303      	movs	r3, #3
 8006a5e:	e010      	b.n	8006a82 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006a60:	69bb      	ldr	r3, [r7, #24]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d101      	bne.n	8006a6a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006a66:	2300      	movs	r3, #0
 8006a68:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	3b01      	subs	r3, #1
 8006a6e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	689a      	ldr	r2, [r3, #8]
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	4013      	ands	r3, r2
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d196      	bne.n	80069ae <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006a80:	2300      	movs	r3, #0
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3728      	adds	r7, #40	@ 0x28
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
 8006a8a:	bf00      	nop
 8006a8c:	200001bc 	.word	0x200001bc

08006a90 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b086      	sub	sp, #24
 8006a94:	af02      	add	r7, sp, #8
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006aa4:	d111      	bne.n	8006aca <SPI_EndRxTransaction+0x3a>
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006aae:	d004      	beq.n	8006aba <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ab8:	d107      	bne.n	8006aca <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ac8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	9300      	str	r3, [sp, #0]
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	2180      	movs	r1, #128	@ 0x80
 8006ad4:	68f8      	ldr	r0, [r7, #12]
 8006ad6:	f7ff febd 	bl	8006854 <SPI_WaitFlagStateUntilTimeout>
 8006ada:	4603      	mov	r3, r0
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d007      	beq.n	8006af0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ae4:	f043 0220 	orr.w	r2, r3, #32
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006aec:	2303      	movs	r3, #3
 8006aee:	e023      	b.n	8006b38 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006af8:	d11d      	bne.n	8006b36 <SPI_EndRxTransaction+0xa6>
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b02:	d004      	beq.n	8006b0e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b0c:	d113      	bne.n	8006b36 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	9300      	str	r3, [sp, #0]
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006b1a:	68f8      	ldr	r0, [r7, #12]
 8006b1c:	f7ff ff22 	bl	8006964 <SPI_WaitFifoStateUntilTimeout>
 8006b20:	4603      	mov	r3, r0
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d007      	beq.n	8006b36 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b2a:	f043 0220 	orr.w	r2, r3, #32
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8006b32:	2303      	movs	r3, #3
 8006b34:	e000      	b.n	8006b38 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006b36:	2300      	movs	r3, #0
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3710      	adds	r7, #16
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}

08006b40 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b086      	sub	sp, #24
 8006b44:	af02      	add	r7, sp, #8
 8006b46:	60f8      	str	r0, [r7, #12]
 8006b48:	60b9      	str	r1, [r7, #8]
 8006b4a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	9300      	str	r3, [sp, #0]
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006b58:	68f8      	ldr	r0, [r7, #12]
 8006b5a:	f7ff ff03 	bl	8006964 <SPI_WaitFifoStateUntilTimeout>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d007      	beq.n	8006b74 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b68:	f043 0220 	orr.w	r2, r3, #32
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006b70:	2303      	movs	r3, #3
 8006b72:	e027      	b.n	8006bc4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	9300      	str	r3, [sp, #0]
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	2180      	movs	r1, #128	@ 0x80
 8006b7e:	68f8      	ldr	r0, [r7, #12]
 8006b80:	f7ff fe68 	bl	8006854 <SPI_WaitFlagStateUntilTimeout>
 8006b84:	4603      	mov	r3, r0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d007      	beq.n	8006b9a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b8e:	f043 0220 	orr.w	r2, r3, #32
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006b96:	2303      	movs	r3, #3
 8006b98:	e014      	b.n	8006bc4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	9300      	str	r3, [sp, #0]
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006ba6:	68f8      	ldr	r0, [r7, #12]
 8006ba8:	f7ff fedc 	bl	8006964 <SPI_WaitFifoStateUntilTimeout>
 8006bac:	4603      	mov	r3, r0
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d007      	beq.n	8006bc2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bb6:	f043 0220 	orr.w	r2, r3, #32
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006bbe:	2303      	movs	r3, #3
 8006bc0:	e000      	b.n	8006bc4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006bc2:	2300      	movs	r3, #0
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3710      	adds	r7, #16
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006bd4:	f7fc fc10 	bl	80033f8 <HAL_GetTick>
 8006bd8:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	685a      	ldr	r2, [r3, #4]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f022 0220 	bic.w	r2, r2, #32
 8006be8:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006bea:	68fa      	ldr	r2, [r7, #12]
 8006bec:	2164      	movs	r1, #100	@ 0x64
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f7ff ffa6 	bl	8006b40 <SPI_EndRxTxTransaction>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d005      	beq.n	8006c06 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bfe:	f043 0220 	orr.w	r2, r3, #32
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	661a      	str	r2, [r3, #96]	@ 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d115      	bne.n	8006c3a <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	2b04      	cmp	r3, #4
 8006c18:	d107      	bne.n	8006c2a <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f7ff fc9e 	bl	8006564 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8006c28:	e00e      	b.n	8006c48 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f7ff fca0 	bl	8006578 <HAL_SPI_TxRxCpltCallback>
}
 8006c38:	e006      	b.n	8006c48 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f7ff fca2 	bl	800658c <HAL_SPI_ErrorCallback>
}
 8006c48:	bf00      	nop
 8006c4a:	3710      	adds	r7, #16
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b082      	sub	sp, #8
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	685a      	ldr	r2, [r3, #4]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006c66:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8006c68:	f7fc fbc6 	bl	80033f8 <HAL_GetTick>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	461a      	mov	r2, r3
 8006c70:	2164      	movs	r1, #100	@ 0x64
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f7ff ff0c 	bl	8006a90 <SPI_EndRxTransaction>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d005      	beq.n	8006c8a <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c82:	f043 0220 	orr.w	r2, r3, #32
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	661a      	str	r2, [r3, #96]	@ 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d103      	bne.n	8006ca2 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f7ff fc62 	bl	8006564 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8006ca0:	e002      	b.n	8006ca8 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f7ff fc72 	bl	800658c <HAL_SPI_ErrorCallback>
}
 8006ca8:	bf00      	nop
 8006caa:	3708      	adds	r7, #8
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b082      	sub	sp, #8
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d101      	bne.n	8006cc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e049      	b.n	8006d56 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d106      	bne.n	8006cdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 f841 	bl	8006d5e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2202      	movs	r2, #2
 8006ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	3304      	adds	r3, #4
 8006cec:	4619      	mov	r1, r3
 8006cee:	4610      	mov	r0, r2
 8006cf0:	f000 f9da 	bl	80070a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2201      	movs	r2, #1
 8006d08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2201      	movs	r2, #1
 8006d18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2201      	movs	r2, #1
 8006d28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2201      	movs	r2, #1
 8006d38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2201      	movs	r2, #1
 8006d48:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3708      	adds	r7, #8
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006d5e:	b480      	push	{r7}
 8006d60:	b083      	sub	sp, #12
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006d66:	bf00      	nop
 8006d68:	370c      	adds	r7, #12
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr
	...

08006d74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b085      	sub	sp, #20
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d001      	beq.n	8006d8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	e04f      	b.n	8006e2c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2202      	movs	r2, #2
 8006d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	68da      	ldr	r2, [r3, #12]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f042 0201 	orr.w	r2, r2, #1
 8006da2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a23      	ldr	r2, [pc, #140]	@ (8006e38 <HAL_TIM_Base_Start_IT+0xc4>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d01d      	beq.n	8006dea <HAL_TIM_Base_Start_IT+0x76>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006db6:	d018      	beq.n	8006dea <HAL_TIM_Base_Start_IT+0x76>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a1f      	ldr	r2, [pc, #124]	@ (8006e3c <HAL_TIM_Base_Start_IT+0xc8>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d013      	beq.n	8006dea <HAL_TIM_Base_Start_IT+0x76>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a1e      	ldr	r2, [pc, #120]	@ (8006e40 <HAL_TIM_Base_Start_IT+0xcc>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d00e      	beq.n	8006dea <HAL_TIM_Base_Start_IT+0x76>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a1c      	ldr	r2, [pc, #112]	@ (8006e44 <HAL_TIM_Base_Start_IT+0xd0>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d009      	beq.n	8006dea <HAL_TIM_Base_Start_IT+0x76>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a1b      	ldr	r2, [pc, #108]	@ (8006e48 <HAL_TIM_Base_Start_IT+0xd4>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d004      	beq.n	8006dea <HAL_TIM_Base_Start_IT+0x76>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a19      	ldr	r2, [pc, #100]	@ (8006e4c <HAL_TIM_Base_Start_IT+0xd8>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d115      	bne.n	8006e16 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	689a      	ldr	r2, [r3, #8]
 8006df0:	4b17      	ldr	r3, [pc, #92]	@ (8006e50 <HAL_TIM_Base_Start_IT+0xdc>)
 8006df2:	4013      	ands	r3, r2
 8006df4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2b06      	cmp	r3, #6
 8006dfa:	d015      	beq.n	8006e28 <HAL_TIM_Base_Start_IT+0xb4>
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e02:	d011      	beq.n	8006e28 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f042 0201 	orr.w	r2, r2, #1
 8006e12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e14:	e008      	b.n	8006e28 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f042 0201 	orr.w	r2, r2, #1
 8006e24:	601a      	str	r2, [r3, #0]
 8006e26:	e000      	b.n	8006e2a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e28:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006e2a:	2300      	movs	r3, #0
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3714      	adds	r7, #20
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr
 8006e38:	40012c00 	.word	0x40012c00
 8006e3c:	40000400 	.word	0x40000400
 8006e40:	40000800 	.word	0x40000800
 8006e44:	40000c00 	.word	0x40000c00
 8006e48:	40013400 	.word	0x40013400
 8006e4c:	40014000 	.word	0x40014000
 8006e50:	00010007 	.word	0x00010007

08006e54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	68db      	ldr	r3, [r3, #12]
 8006e62:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	691b      	ldr	r3, [r3, #16]
 8006e6a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	f003 0302 	and.w	r3, r3, #2
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d020      	beq.n	8006eb8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f003 0302 	and.w	r3, r3, #2
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d01b      	beq.n	8006eb8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f06f 0202 	mvn.w	r2, #2
 8006e88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	699b      	ldr	r3, [r3, #24]
 8006e96:	f003 0303 	and.w	r3, r3, #3
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d003      	beq.n	8006ea6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 f8e4 	bl	800706c <HAL_TIM_IC_CaptureCallback>
 8006ea4:	e005      	b.n	8006eb2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 f8d6 	bl	8007058 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 f8e7 	bl	8007080 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	f003 0304 	and.w	r3, r3, #4
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d020      	beq.n	8006f04 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f003 0304 	and.w	r3, r3, #4
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d01b      	beq.n	8006f04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f06f 0204 	mvn.w	r2, #4
 8006ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2202      	movs	r2, #2
 8006eda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	699b      	ldr	r3, [r3, #24]
 8006ee2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d003      	beq.n	8006ef2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 f8be 	bl	800706c <HAL_TIM_IC_CaptureCallback>
 8006ef0:	e005      	b.n	8006efe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 f8b0 	bl	8007058 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f000 f8c1 	bl	8007080 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	f003 0308 	and.w	r3, r3, #8
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d020      	beq.n	8006f50 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f003 0308 	and.w	r3, r3, #8
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d01b      	beq.n	8006f50 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f06f 0208 	mvn.w	r2, #8
 8006f20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2204      	movs	r2, #4
 8006f26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	69db      	ldr	r3, [r3, #28]
 8006f2e:	f003 0303 	and.w	r3, r3, #3
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d003      	beq.n	8006f3e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 f898 	bl	800706c <HAL_TIM_IC_CaptureCallback>
 8006f3c:	e005      	b.n	8006f4a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f000 f88a 	bl	8007058 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f000 f89b 	bl	8007080 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	f003 0310 	and.w	r3, r3, #16
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d020      	beq.n	8006f9c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	f003 0310 	and.w	r3, r3, #16
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d01b      	beq.n	8006f9c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f06f 0210 	mvn.w	r2, #16
 8006f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2208      	movs	r2, #8
 8006f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	69db      	ldr	r3, [r3, #28]
 8006f7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d003      	beq.n	8006f8a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f000 f872 	bl	800706c <HAL_TIM_IC_CaptureCallback>
 8006f88:	e005      	b.n	8006f96 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 f864 	bl	8007058 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f000 f875 	bl	8007080 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	f003 0301 	and.w	r3, r3, #1
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d00c      	beq.n	8006fc0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f003 0301 	and.w	r3, r3, #1
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d007      	beq.n	8006fc0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f06f 0201 	mvn.w	r2, #1
 8006fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f7fb fc86 	bl	80028cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d00c      	beq.n	8006fe4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d007      	beq.n	8006fe4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 f906 	bl	80071f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00c      	beq.n	8007008 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d007      	beq.n	8007008 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 f8fe 	bl	8007204 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800700e:	2b00      	cmp	r3, #0
 8007010:	d00c      	beq.n	800702c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007018:	2b00      	cmp	r3, #0
 800701a:	d007      	beq.n	800702c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 f834 	bl	8007094 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	f003 0320 	and.w	r3, r3, #32
 8007032:	2b00      	cmp	r3, #0
 8007034:	d00c      	beq.n	8007050 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f003 0320 	and.w	r3, r3, #32
 800703c:	2b00      	cmp	r3, #0
 800703e:	d007      	beq.n	8007050 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f06f 0220 	mvn.w	r2, #32
 8007048:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 f8c6 	bl	80071dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007050:	bf00      	nop
 8007052:	3710      	adds	r7, #16
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007058:	b480      	push	{r7}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007060:	bf00      	nop
 8007062:	370c      	adds	r7, #12
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr

0800706c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800706c:	b480      	push	{r7}
 800706e:	b083      	sub	sp, #12
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007074:	bf00      	nop
 8007076:	370c      	adds	r7, #12
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr

08007080 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007080:	b480      	push	{r7}
 8007082:	b083      	sub	sp, #12
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007088:	bf00      	nop
 800708a:	370c      	adds	r7, #12
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800709c:	bf00      	nop
 800709e:	370c      	adds	r7, #12
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b085      	sub	sp, #20
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	4a40      	ldr	r2, [pc, #256]	@ (80071bc <TIM_Base_SetConfig+0x114>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d013      	beq.n	80070e8 <TIM_Base_SetConfig+0x40>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070c6:	d00f      	beq.n	80070e8 <TIM_Base_SetConfig+0x40>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	4a3d      	ldr	r2, [pc, #244]	@ (80071c0 <TIM_Base_SetConfig+0x118>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d00b      	beq.n	80070e8 <TIM_Base_SetConfig+0x40>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	4a3c      	ldr	r2, [pc, #240]	@ (80071c4 <TIM_Base_SetConfig+0x11c>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d007      	beq.n	80070e8 <TIM_Base_SetConfig+0x40>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	4a3b      	ldr	r2, [pc, #236]	@ (80071c8 <TIM_Base_SetConfig+0x120>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d003      	beq.n	80070e8 <TIM_Base_SetConfig+0x40>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	4a3a      	ldr	r2, [pc, #232]	@ (80071cc <TIM_Base_SetConfig+0x124>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d108      	bne.n	80070fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	68fa      	ldr	r2, [r7, #12]
 80070f6:	4313      	orrs	r3, r2
 80070f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	4a2f      	ldr	r2, [pc, #188]	@ (80071bc <TIM_Base_SetConfig+0x114>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d01f      	beq.n	8007142 <TIM_Base_SetConfig+0x9a>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007108:	d01b      	beq.n	8007142 <TIM_Base_SetConfig+0x9a>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	4a2c      	ldr	r2, [pc, #176]	@ (80071c0 <TIM_Base_SetConfig+0x118>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d017      	beq.n	8007142 <TIM_Base_SetConfig+0x9a>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	4a2b      	ldr	r2, [pc, #172]	@ (80071c4 <TIM_Base_SetConfig+0x11c>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d013      	beq.n	8007142 <TIM_Base_SetConfig+0x9a>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	4a2a      	ldr	r2, [pc, #168]	@ (80071c8 <TIM_Base_SetConfig+0x120>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d00f      	beq.n	8007142 <TIM_Base_SetConfig+0x9a>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	4a29      	ldr	r2, [pc, #164]	@ (80071cc <TIM_Base_SetConfig+0x124>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d00b      	beq.n	8007142 <TIM_Base_SetConfig+0x9a>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4a28      	ldr	r2, [pc, #160]	@ (80071d0 <TIM_Base_SetConfig+0x128>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d007      	beq.n	8007142 <TIM_Base_SetConfig+0x9a>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	4a27      	ldr	r2, [pc, #156]	@ (80071d4 <TIM_Base_SetConfig+0x12c>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d003      	beq.n	8007142 <TIM_Base_SetConfig+0x9a>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	4a26      	ldr	r2, [pc, #152]	@ (80071d8 <TIM_Base_SetConfig+0x130>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d108      	bne.n	8007154 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007148:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	68fa      	ldr	r2, [r7, #12]
 8007150:	4313      	orrs	r3, r2
 8007152:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	695b      	ldr	r3, [r3, #20]
 800715e:	4313      	orrs	r3, r2
 8007160:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	68fa      	ldr	r2, [r7, #12]
 8007166:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	689a      	ldr	r2, [r3, #8]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	4a10      	ldr	r2, [pc, #64]	@ (80071bc <TIM_Base_SetConfig+0x114>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d00f      	beq.n	80071a0 <TIM_Base_SetConfig+0xf8>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	4a12      	ldr	r2, [pc, #72]	@ (80071cc <TIM_Base_SetConfig+0x124>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d00b      	beq.n	80071a0 <TIM_Base_SetConfig+0xf8>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	4a11      	ldr	r2, [pc, #68]	@ (80071d0 <TIM_Base_SetConfig+0x128>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d007      	beq.n	80071a0 <TIM_Base_SetConfig+0xf8>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	4a10      	ldr	r2, [pc, #64]	@ (80071d4 <TIM_Base_SetConfig+0x12c>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d003      	beq.n	80071a0 <TIM_Base_SetConfig+0xf8>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	4a0f      	ldr	r2, [pc, #60]	@ (80071d8 <TIM_Base_SetConfig+0x130>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d103      	bne.n	80071a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	691a      	ldr	r2, [r3, #16]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2201      	movs	r2, #1
 80071ac:	615a      	str	r2, [r3, #20]
}
 80071ae:	bf00      	nop
 80071b0:	3714      	adds	r7, #20
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr
 80071ba:	bf00      	nop
 80071bc:	40012c00 	.word	0x40012c00
 80071c0:	40000400 	.word	0x40000400
 80071c4:	40000800 	.word	0x40000800
 80071c8:	40000c00 	.word	0x40000c00
 80071cc:	40013400 	.word	0x40013400
 80071d0:	40014000 	.word	0x40014000
 80071d4:	40014400 	.word	0x40014400
 80071d8:	40014800 	.word	0x40014800

080071dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80071dc:	b480      	push	{r7}
 80071de:	b083      	sub	sp, #12
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80071e4:	bf00      	nop
 80071e6:	370c      	adds	r7, #12
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr

080071f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b083      	sub	sp, #12
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80071f8:	bf00      	nop
 80071fa:	370c      	adds	r7, #12
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007204:	b480      	push	{r7}
 8007206:	b083      	sub	sp, #12
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800720c:	bf00      	nop
 800720e:	370c      	adds	r7, #12
 8007210:	46bd      	mov	sp, r7
 8007212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007216:	4770      	bx	lr

08007218 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b082      	sub	sp, #8
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d101      	bne.n	800722a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	e040      	b.n	80072ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800722e:	2b00      	cmp	r3, #0
 8007230:	d106      	bne.n	8007240 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2200      	movs	r2, #0
 8007236:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f7fb fe52 	bl	8002ee4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2224      	movs	r2, #36	@ 0x24
 8007244:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f022 0201 	bic.w	r2, r2, #1
 8007254:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800725a:	2b00      	cmp	r3, #0
 800725c:	d002      	beq.n	8007264 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 ff1e 	bl	80080a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 fc63 	bl	8007b30 <UART_SetConfig>
 800726a:	4603      	mov	r3, r0
 800726c:	2b01      	cmp	r3, #1
 800726e:	d101      	bne.n	8007274 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007270:	2301      	movs	r3, #1
 8007272:	e01b      	b.n	80072ac <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	685a      	ldr	r2, [r3, #4]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007282:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	689a      	ldr	r2, [r3, #8]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007292:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f042 0201 	orr.w	r2, r2, #1
 80072a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f000 ff9d 	bl	80081e4 <UART_CheckIdleState>
 80072aa:	4603      	mov	r3, r0
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3708      	adds	r7, #8
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b08a      	sub	sp, #40	@ 0x28
 80072b8:	af02      	add	r7, sp, #8
 80072ba:	60f8      	str	r0, [r7, #12]
 80072bc:	60b9      	str	r1, [r7, #8]
 80072be:	603b      	str	r3, [r7, #0]
 80072c0:	4613      	mov	r3, r2
 80072c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80072c8:	2b20      	cmp	r3, #32
 80072ca:	d177      	bne.n	80073bc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d002      	beq.n	80072d8 <HAL_UART_Transmit+0x24>
 80072d2:	88fb      	ldrh	r3, [r7, #6]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d101      	bne.n	80072dc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	e070      	b.n	80073be <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2200      	movs	r2, #0
 80072e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2221      	movs	r2, #33	@ 0x21
 80072e8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80072ea:	f7fc f885 	bl	80033f8 <HAL_GetTick>
 80072ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	88fa      	ldrh	r2, [r7, #6]
 80072f4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	88fa      	ldrh	r2, [r7, #6]
 80072fc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007308:	d108      	bne.n	800731c <HAL_UART_Transmit+0x68>
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	691b      	ldr	r3, [r3, #16]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d104      	bne.n	800731c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007312:	2300      	movs	r3, #0
 8007314:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	61bb      	str	r3, [r7, #24]
 800731a:	e003      	b.n	8007324 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007320:	2300      	movs	r3, #0
 8007322:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007324:	e02f      	b.n	8007386 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	9300      	str	r3, [sp, #0]
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	2200      	movs	r2, #0
 800732e:	2180      	movs	r1, #128	@ 0x80
 8007330:	68f8      	ldr	r0, [r7, #12]
 8007332:	f000 ffff 	bl	8008334 <UART_WaitOnFlagUntilTimeout>
 8007336:	4603      	mov	r3, r0
 8007338:	2b00      	cmp	r3, #0
 800733a:	d004      	beq.n	8007346 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2220      	movs	r2, #32
 8007340:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8007342:	2303      	movs	r3, #3
 8007344:	e03b      	b.n	80073be <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8007346:	69fb      	ldr	r3, [r7, #28]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d10b      	bne.n	8007364 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800734c:	69bb      	ldr	r3, [r7, #24]
 800734e:	881a      	ldrh	r2, [r3, #0]
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007358:	b292      	uxth	r2, r2
 800735a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800735c:	69bb      	ldr	r3, [r7, #24]
 800735e:	3302      	adds	r3, #2
 8007360:	61bb      	str	r3, [r7, #24]
 8007362:	e007      	b.n	8007374 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	781a      	ldrb	r2, [r3, #0]
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800736e:	69fb      	ldr	r3, [r7, #28]
 8007370:	3301      	adds	r3, #1
 8007372:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800737a:	b29b      	uxth	r3, r3
 800737c:	3b01      	subs	r3, #1
 800737e:	b29a      	uxth	r2, r3
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800738c:	b29b      	uxth	r3, r3
 800738e:	2b00      	cmp	r3, #0
 8007390:	d1c9      	bne.n	8007326 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	9300      	str	r3, [sp, #0]
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	2200      	movs	r2, #0
 800739a:	2140      	movs	r1, #64	@ 0x40
 800739c:	68f8      	ldr	r0, [r7, #12]
 800739e:	f000 ffc9 	bl	8008334 <UART_WaitOnFlagUntilTimeout>
 80073a2:	4603      	mov	r3, r0
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d004      	beq.n	80073b2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2220      	movs	r2, #32
 80073ac:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80073ae:	2303      	movs	r3, #3
 80073b0:	e005      	b.n	80073be <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2220      	movs	r2, #32
 80073b6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80073b8:	2300      	movs	r3, #0
 80073ba:	e000      	b.n	80073be <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80073bc:	2302      	movs	r3, #2
  }
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3720      	adds	r7, #32
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
	...

080073c8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b08b      	sub	sp, #44	@ 0x2c
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	60b9      	str	r1, [r7, #8]
 80073d2:	4613      	mov	r3, r2
 80073d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80073da:	2b20      	cmp	r3, #32
 80073dc:	d147      	bne.n	800746e <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d002      	beq.n	80073ea <HAL_UART_Transmit_IT+0x22>
 80073e4:	88fb      	ldrh	r3, [r7, #6]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d101      	bne.n	80073ee <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80073ea:	2301      	movs	r3, #1
 80073ec:	e040      	b.n	8007470 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	68ba      	ldr	r2, [r7, #8]
 80073f2:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	88fa      	ldrh	r2, [r7, #6]
 80073f8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	88fa      	ldrh	r2, [r7, #6]
 8007400:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2200      	movs	r2, #0
 8007408:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2200      	movs	r2, #0
 800740e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2221      	movs	r2, #33	@ 0x21
 8007416:	67da      	str	r2, [r3, #124]	@ 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007420:	d107      	bne.n	8007432 <HAL_UART_Transmit_IT+0x6a>
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	691b      	ldr	r3, [r3, #16]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d103      	bne.n	8007432 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	4a13      	ldr	r2, [pc, #76]	@ (800747c <HAL_UART_Transmit_IT+0xb4>)
 800742e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8007430:	e002      	b.n	8007438 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	4a12      	ldr	r2, [pc, #72]	@ (8007480 <HAL_UART_Transmit_IT+0xb8>)
 8007436:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	e853 3f00 	ldrex	r3, [r3]
 8007444:	613b      	str	r3, [r7, #16]
   return(result);
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800744c:	627b      	str	r3, [r7, #36]	@ 0x24
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	461a      	mov	r2, r3
 8007454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007456:	623b      	str	r3, [r7, #32]
 8007458:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800745a:	69f9      	ldr	r1, [r7, #28]
 800745c:	6a3a      	ldr	r2, [r7, #32]
 800745e:	e841 2300 	strex	r3, r2, [r1]
 8007462:	61bb      	str	r3, [r7, #24]
   return(result);
 8007464:	69bb      	ldr	r3, [r7, #24]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d1e6      	bne.n	8007438 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800746a:	2300      	movs	r3, #0
 800746c:	e000      	b.n	8007470 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800746e:	2302      	movs	r3, #2
  }
}
 8007470:	4618      	mov	r0, r3
 8007472:	372c      	adds	r7, #44	@ 0x2c
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr
 800747c:	0800873b 	.word	0x0800873b
 8007480:	08008685 	.word	0x08008685

08007484 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b08a      	sub	sp, #40	@ 0x28
 8007488:	af00      	add	r7, sp, #0
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	60b9      	str	r1, [r7, #8]
 800748e:	4613      	mov	r3, r2
 8007490:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007498:	2b20      	cmp	r3, #32
 800749a:	d137      	bne.n	800750c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d002      	beq.n	80074a8 <HAL_UART_Receive_IT+0x24>
 80074a2:	88fb      	ldrh	r3, [r7, #6]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d101      	bne.n	80074ac <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80074a8:	2301      	movs	r3, #1
 80074aa:	e030      	b.n	800750e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2200      	movs	r2, #0
 80074b0:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a18      	ldr	r2, [pc, #96]	@ (8007518 <HAL_UART_Receive_IT+0x94>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d01f      	beq.n	80074fc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d018      	beq.n	80074fc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	e853 3f00 	ldrex	r3, [r3]
 80074d6:	613b      	str	r3, [r7, #16]
   return(result);
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80074de:	627b      	str	r3, [r7, #36]	@ 0x24
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	461a      	mov	r2, r3
 80074e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e8:	623b      	str	r3, [r7, #32]
 80074ea:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ec:	69f9      	ldr	r1, [r7, #28]
 80074ee:	6a3a      	ldr	r2, [r7, #32]
 80074f0:	e841 2300 	strex	r3, r2, [r1]
 80074f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80074f6:	69bb      	ldr	r3, [r7, #24]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d1e6      	bne.n	80074ca <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80074fc:	88fb      	ldrh	r3, [r7, #6]
 80074fe:	461a      	mov	r2, r3
 8007500:	68b9      	ldr	r1, [r7, #8]
 8007502:	68f8      	ldr	r0, [r7, #12]
 8007504:	f000 ff7e 	bl	8008404 <UART_Start_Receive_IT>
 8007508:	4603      	mov	r3, r0
 800750a:	e000      	b.n	800750e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800750c:	2302      	movs	r3, #2
  }
}
 800750e:	4618      	mov	r0, r3
 8007510:	3728      	adds	r7, #40	@ 0x28
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}
 8007516:	bf00      	nop
 8007518:	40008000 	.word	0x40008000

0800751c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b0ba      	sub	sp, #232	@ 0xe8
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	69db      	ldr	r3, [r3, #28]
 800752a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007542:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007546:	f640 030f 	movw	r3, #2063	@ 0x80f
 800754a:	4013      	ands	r3, r2
 800754c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007550:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007554:	2b00      	cmp	r3, #0
 8007556:	d115      	bne.n	8007584 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800755c:	f003 0320 	and.w	r3, r3, #32
 8007560:	2b00      	cmp	r3, #0
 8007562:	d00f      	beq.n	8007584 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007568:	f003 0320 	and.w	r3, r3, #32
 800756c:	2b00      	cmp	r3, #0
 800756e:	d009      	beq.n	8007584 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007574:	2b00      	cmp	r3, #0
 8007576:	f000 82ae 	beq.w	8007ad6 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	4798      	blx	r3
      }
      return;
 8007582:	e2a8      	b.n	8007ad6 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007584:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007588:	2b00      	cmp	r3, #0
 800758a:	f000 8117 	beq.w	80077bc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800758e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007592:	f003 0301 	and.w	r3, r3, #1
 8007596:	2b00      	cmp	r3, #0
 8007598:	d106      	bne.n	80075a8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800759a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800759e:	4b85      	ldr	r3, [pc, #532]	@ (80077b4 <HAL_UART_IRQHandler+0x298>)
 80075a0:	4013      	ands	r3, r2
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	f000 810a 	beq.w	80077bc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80075a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075ac:	f003 0301 	and.w	r3, r3, #1
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d011      	beq.n	80075d8 <HAL_UART_IRQHandler+0xbc>
 80075b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d00b      	beq.n	80075d8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2201      	movs	r2, #1
 80075c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80075ce:	f043 0201 	orr.w	r2, r3, #1
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075dc:	f003 0302 	and.w	r3, r3, #2
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d011      	beq.n	8007608 <HAL_UART_IRQHandler+0xec>
 80075e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80075e8:	f003 0301 	and.w	r3, r3, #1
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d00b      	beq.n	8007608 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	2202      	movs	r2, #2
 80075f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80075fe:	f043 0204 	orr.w	r2, r3, #4
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800760c:	f003 0304 	and.w	r3, r3, #4
 8007610:	2b00      	cmp	r3, #0
 8007612:	d011      	beq.n	8007638 <HAL_UART_IRQHandler+0x11c>
 8007614:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007618:	f003 0301 	and.w	r3, r3, #1
 800761c:	2b00      	cmp	r3, #0
 800761e:	d00b      	beq.n	8007638 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	2204      	movs	r2, #4
 8007626:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800762e:	f043 0202 	orr.w	r2, r3, #2
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800763c:	f003 0308 	and.w	r3, r3, #8
 8007640:	2b00      	cmp	r3, #0
 8007642:	d017      	beq.n	8007674 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007644:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007648:	f003 0320 	and.w	r3, r3, #32
 800764c:	2b00      	cmp	r3, #0
 800764e:	d105      	bne.n	800765c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007650:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007654:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007658:	2b00      	cmp	r3, #0
 800765a:	d00b      	beq.n	8007674 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	2208      	movs	r2, #8
 8007662:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800766a:	f043 0208 	orr.w	r2, r3, #8
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007674:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007678:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800767c:	2b00      	cmp	r3, #0
 800767e:	d012      	beq.n	80076a6 <HAL_UART_IRQHandler+0x18a>
 8007680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007684:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007688:	2b00      	cmp	r3, #0
 800768a:	d00c      	beq.n	80076a6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007694:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800769c:	f043 0220 	orr.w	r2, r3, #32
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	f000 8214 	beq.w	8007ada <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80076b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076b6:	f003 0320 	and.w	r3, r3, #32
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d00d      	beq.n	80076da <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80076be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076c2:	f003 0320 	and.w	r3, r3, #32
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d007      	beq.n	80076da <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d003      	beq.n	80076da <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076e0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076ee:	2b40      	cmp	r3, #64	@ 0x40
 80076f0:	d005      	beq.n	80076fe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80076f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80076f6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d04f      	beq.n	800779e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 ff46 	bl	8008590 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800770e:	2b40      	cmp	r3, #64	@ 0x40
 8007710:	d141      	bne.n	8007796 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	3308      	adds	r3, #8
 8007718:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800771c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007720:	e853 3f00 	ldrex	r3, [r3]
 8007724:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007728:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800772c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007730:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	3308      	adds	r3, #8
 800773a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800773e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007742:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007746:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800774a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800774e:	e841 2300 	strex	r3, r2, [r1]
 8007752:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007756:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800775a:	2b00      	cmp	r3, #0
 800775c:	d1d9      	bne.n	8007712 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007762:	2b00      	cmp	r3, #0
 8007764:	d013      	beq.n	800778e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800776a:	4a13      	ldr	r2, [pc, #76]	@ (80077b8 <HAL_UART_IRQHandler+0x29c>)
 800776c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007772:	4618      	mov	r0, r3
 8007774:	f7fc f992 	bl	8003a9c <HAL_DMA_Abort_IT>
 8007778:	4603      	mov	r3, r0
 800777a:	2b00      	cmp	r3, #0
 800777c:	d017      	beq.n	80077ae <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007788:	4610      	mov	r0, r2
 800778a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800778c:	e00f      	b.n	80077ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 f9b8 	bl	8007b04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007794:	e00b      	b.n	80077ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 f9b4 	bl	8007b04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800779c:	e007      	b.n	80077ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 f9b0 	bl	8007b04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2200      	movs	r2, #0
 80077a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80077ac:	e195      	b.n	8007ada <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077ae:	bf00      	nop
    return;
 80077b0:	e193      	b.n	8007ada <HAL_UART_IRQHandler+0x5be>
 80077b2:	bf00      	nop
 80077b4:	04000120 	.word	0x04000120
 80077b8:	08008659 	.word	0x08008659

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	f040 814e 	bne.w	8007a62 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80077c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077ca:	f003 0310 	and.w	r3, r3, #16
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	f000 8147 	beq.w	8007a62 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80077d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077d8:	f003 0310 	and.w	r3, r3, #16
 80077dc:	2b00      	cmp	r3, #0
 80077de:	f000 8140 	beq.w	8007a62 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	2210      	movs	r2, #16
 80077e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077f4:	2b40      	cmp	r3, #64	@ 0x40
 80077f6:	f040 80b8 	bne.w	800796a <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007806:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800780a:	2b00      	cmp	r3, #0
 800780c:	f000 8167 	beq.w	8007ade <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007816:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800781a:	429a      	cmp	r2, r3
 800781c:	f080 815f 	bcs.w	8007ade <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007826:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f003 0320 	and.w	r3, r3, #32
 8007836:	2b00      	cmp	r3, #0
 8007838:	f040 8086 	bne.w	8007948 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007844:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007848:	e853 3f00 	ldrex	r3, [r3]
 800784c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007850:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007854:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007858:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	461a      	mov	r2, r3
 8007862:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007866:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800786a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800786e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007872:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007876:	e841 2300 	strex	r3, r2, [r1]
 800787a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800787e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007882:	2b00      	cmp	r3, #0
 8007884:	d1da      	bne.n	800783c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	3308      	adds	r3, #8
 800788c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800788e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007890:	e853 3f00 	ldrex	r3, [r3]
 8007894:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007896:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007898:	f023 0301 	bic.w	r3, r3, #1
 800789c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	3308      	adds	r3, #8
 80078a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80078aa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80078ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80078b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80078b6:	e841 2300 	strex	r3, r2, [r1]
 80078ba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80078bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d1e1      	bne.n	8007886 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	3308      	adds	r3, #8
 80078c8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80078cc:	e853 3f00 	ldrex	r3, [r3]
 80078d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80078d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80078d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	3308      	adds	r3, #8
 80078e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80078e6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80078e8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80078ec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80078ee:	e841 2300 	strex	r3, r2, [r1]
 80078f2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80078f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d1e3      	bne.n	80078c2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2220      	movs	r2, #32
 80078fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800790e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007910:	e853 3f00 	ldrex	r3, [r3]
 8007914:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007916:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007918:	f023 0310 	bic.w	r3, r3, #16
 800791c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	461a      	mov	r2, r3
 8007926:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800792a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800792c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800792e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007930:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007932:	e841 2300 	strex	r3, r2, [r1]
 8007936:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007938:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800793a:	2b00      	cmp	r3, #0
 800793c:	d1e4      	bne.n	8007908 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007942:	4618      	mov	r0, r3
 8007944:	f7fc f86c 	bl	8003a20 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2202      	movs	r2, #2
 800794c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800795a:	b29b      	uxth	r3, r3
 800795c:	1ad3      	subs	r3, r2, r3
 800795e:	b29b      	uxth	r3, r3
 8007960:	4619      	mov	r1, r3
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 f8d8 	bl	8007b18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007968:	e0b9      	b.n	8007ade <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007976:	b29b      	uxth	r3, r3
 8007978:	1ad3      	subs	r3, r2, r3
 800797a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007984:	b29b      	uxth	r3, r3
 8007986:	2b00      	cmp	r3, #0
 8007988:	f000 80ab 	beq.w	8007ae2 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 800798c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007990:	2b00      	cmp	r3, #0
 8007992:	f000 80a6 	beq.w	8007ae2 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800799c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800799e:	e853 3f00 	ldrex	r3, [r3]
 80079a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80079a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80079aa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	461a      	mov	r2, r3
 80079b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80079b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80079ba:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80079be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80079c0:	e841 2300 	strex	r3, r2, [r1]
 80079c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80079c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d1e4      	bne.n	8007996 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	3308      	adds	r3, #8
 80079d2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079d6:	e853 3f00 	ldrex	r3, [r3]
 80079da:	623b      	str	r3, [r7, #32]
   return(result);
 80079dc:	6a3b      	ldr	r3, [r7, #32]
 80079de:	f023 0301 	bic.w	r3, r3, #1
 80079e2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	3308      	adds	r3, #8
 80079ec:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80079f0:	633a      	str	r2, [r7, #48]	@ 0x30
 80079f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80079f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079f8:	e841 2300 	strex	r3, r2, [r1]
 80079fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80079fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d1e3      	bne.n	80079cc <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2220      	movs	r2, #32
 8007a08:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2200      	movs	r2, #0
 8007a16:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	e853 3f00 	ldrex	r3, [r3]
 8007a24:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	f023 0310 	bic.w	r3, r3, #16
 8007a2c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	461a      	mov	r2, r3
 8007a36:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007a3a:	61fb      	str	r3, [r7, #28]
 8007a3c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a3e:	69b9      	ldr	r1, [r7, #24]
 8007a40:	69fa      	ldr	r2, [r7, #28]
 8007a42:	e841 2300 	strex	r3, r2, [r1]
 8007a46:	617b      	str	r3, [r7, #20]
   return(result);
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d1e4      	bne.n	8007a18 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2202      	movs	r2, #2
 8007a52:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007a58:	4619      	mov	r1, r3
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 f85c 	bl	8007b18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007a60:	e03f      	b.n	8007ae2 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d00e      	beq.n	8007a8c <HAL_UART_IRQHandler+0x570>
 8007a6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d008      	beq.n	8007a8c <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007a82:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f001 f89f 	bl	8008bc8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a8a:	e02d      	b.n	8007ae8 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007a8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d00e      	beq.n	8007ab6 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d008      	beq.n	8007ab6 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d01c      	beq.n	8007ae6 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	4798      	blx	r3
    }
    return;
 8007ab4:	e017      	b.n	8007ae6 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007aba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d012      	beq.n	8007ae8 <HAL_UART_IRQHandler+0x5cc>
 8007ac2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ac6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d00c      	beq.n	8007ae8 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 fe93 	bl	80087fa <UART_EndTransmit_IT>
    return;
 8007ad4:	e008      	b.n	8007ae8 <HAL_UART_IRQHandler+0x5cc>
      return;
 8007ad6:	bf00      	nop
 8007ad8:	e006      	b.n	8007ae8 <HAL_UART_IRQHandler+0x5cc>
    return;
 8007ada:	bf00      	nop
 8007adc:	e004      	b.n	8007ae8 <HAL_UART_IRQHandler+0x5cc>
      return;
 8007ade:	bf00      	nop
 8007ae0:	e002      	b.n	8007ae8 <HAL_UART_IRQHandler+0x5cc>
      return;
 8007ae2:	bf00      	nop
 8007ae4:	e000      	b.n	8007ae8 <HAL_UART_IRQHandler+0x5cc>
    return;
 8007ae6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007ae8:	37e8      	adds	r7, #232	@ 0xe8
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
 8007aee:	bf00      	nop

08007af0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007af8:	bf00      	nop
 8007afa:	370c      	adds	r7, #12
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr

08007b04 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b083      	sub	sp, #12
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007b0c:	bf00      	nop
 8007b0e:	370c      	adds	r7, #12
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	460b      	mov	r3, r1
 8007b22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b24:	bf00      	nop
 8007b26:	370c      	adds	r7, #12
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr

08007b30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b34:	b08a      	sub	sp, #40	@ 0x28
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	689a      	ldr	r2, [r3, #8]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	691b      	ldr	r3, [r3, #16]
 8007b48:	431a      	orrs	r2, r3
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	695b      	ldr	r3, [r3, #20]
 8007b4e:	431a      	orrs	r2, r3
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	69db      	ldr	r3, [r3, #28]
 8007b54:	4313      	orrs	r3, r2
 8007b56:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	4ba4      	ldr	r3, [pc, #656]	@ (8007df0 <UART_SetConfig+0x2c0>)
 8007b60:	4013      	ands	r3, r2
 8007b62:	68fa      	ldr	r2, [r7, #12]
 8007b64:	6812      	ldr	r2, [r2, #0]
 8007b66:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007b68:	430b      	orrs	r3, r1
 8007b6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	68da      	ldr	r2, [r3, #12]
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	430a      	orrs	r2, r1
 8007b80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	699b      	ldr	r3, [r3, #24]
 8007b86:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a99      	ldr	r2, [pc, #612]	@ (8007df4 <UART_SetConfig+0x2c4>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d004      	beq.n	8007b9c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	6a1b      	ldr	r3, [r3, #32]
 8007b96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bac:	430a      	orrs	r2, r1
 8007bae:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a90      	ldr	r2, [pc, #576]	@ (8007df8 <UART_SetConfig+0x2c8>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d126      	bne.n	8007c08 <UART_SetConfig+0xd8>
 8007bba:	4b90      	ldr	r3, [pc, #576]	@ (8007dfc <UART_SetConfig+0x2cc>)
 8007bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bc0:	f003 0303 	and.w	r3, r3, #3
 8007bc4:	2b03      	cmp	r3, #3
 8007bc6:	d81b      	bhi.n	8007c00 <UART_SetConfig+0xd0>
 8007bc8:	a201      	add	r2, pc, #4	@ (adr r2, 8007bd0 <UART_SetConfig+0xa0>)
 8007bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bce:	bf00      	nop
 8007bd0:	08007be1 	.word	0x08007be1
 8007bd4:	08007bf1 	.word	0x08007bf1
 8007bd8:	08007be9 	.word	0x08007be9
 8007bdc:	08007bf9 	.word	0x08007bf9
 8007be0:	2301      	movs	r3, #1
 8007be2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007be6:	e116      	b.n	8007e16 <UART_SetConfig+0x2e6>
 8007be8:	2302      	movs	r3, #2
 8007bea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007bee:	e112      	b.n	8007e16 <UART_SetConfig+0x2e6>
 8007bf0:	2304      	movs	r3, #4
 8007bf2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007bf6:	e10e      	b.n	8007e16 <UART_SetConfig+0x2e6>
 8007bf8:	2308      	movs	r3, #8
 8007bfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007bfe:	e10a      	b.n	8007e16 <UART_SetConfig+0x2e6>
 8007c00:	2310      	movs	r3, #16
 8007c02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c06:	e106      	b.n	8007e16 <UART_SetConfig+0x2e6>
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a7c      	ldr	r2, [pc, #496]	@ (8007e00 <UART_SetConfig+0x2d0>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d138      	bne.n	8007c84 <UART_SetConfig+0x154>
 8007c12:	4b7a      	ldr	r3, [pc, #488]	@ (8007dfc <UART_SetConfig+0x2cc>)
 8007c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c18:	f003 030c 	and.w	r3, r3, #12
 8007c1c:	2b0c      	cmp	r3, #12
 8007c1e:	d82d      	bhi.n	8007c7c <UART_SetConfig+0x14c>
 8007c20:	a201      	add	r2, pc, #4	@ (adr r2, 8007c28 <UART_SetConfig+0xf8>)
 8007c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c26:	bf00      	nop
 8007c28:	08007c5d 	.word	0x08007c5d
 8007c2c:	08007c7d 	.word	0x08007c7d
 8007c30:	08007c7d 	.word	0x08007c7d
 8007c34:	08007c7d 	.word	0x08007c7d
 8007c38:	08007c6d 	.word	0x08007c6d
 8007c3c:	08007c7d 	.word	0x08007c7d
 8007c40:	08007c7d 	.word	0x08007c7d
 8007c44:	08007c7d 	.word	0x08007c7d
 8007c48:	08007c65 	.word	0x08007c65
 8007c4c:	08007c7d 	.word	0x08007c7d
 8007c50:	08007c7d 	.word	0x08007c7d
 8007c54:	08007c7d 	.word	0x08007c7d
 8007c58:	08007c75 	.word	0x08007c75
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c62:	e0d8      	b.n	8007e16 <UART_SetConfig+0x2e6>
 8007c64:	2302      	movs	r3, #2
 8007c66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c6a:	e0d4      	b.n	8007e16 <UART_SetConfig+0x2e6>
 8007c6c:	2304      	movs	r3, #4
 8007c6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c72:	e0d0      	b.n	8007e16 <UART_SetConfig+0x2e6>
 8007c74:	2308      	movs	r3, #8
 8007c76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c7a:	e0cc      	b.n	8007e16 <UART_SetConfig+0x2e6>
 8007c7c:	2310      	movs	r3, #16
 8007c7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c82:	e0c8      	b.n	8007e16 <UART_SetConfig+0x2e6>
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a5e      	ldr	r2, [pc, #376]	@ (8007e04 <UART_SetConfig+0x2d4>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d125      	bne.n	8007cda <UART_SetConfig+0x1aa>
 8007c8e:	4b5b      	ldr	r3, [pc, #364]	@ (8007dfc <UART_SetConfig+0x2cc>)
 8007c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c94:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007c98:	2b30      	cmp	r3, #48	@ 0x30
 8007c9a:	d016      	beq.n	8007cca <UART_SetConfig+0x19a>
 8007c9c:	2b30      	cmp	r3, #48	@ 0x30
 8007c9e:	d818      	bhi.n	8007cd2 <UART_SetConfig+0x1a2>
 8007ca0:	2b20      	cmp	r3, #32
 8007ca2:	d00a      	beq.n	8007cba <UART_SetConfig+0x18a>
 8007ca4:	2b20      	cmp	r3, #32
 8007ca6:	d814      	bhi.n	8007cd2 <UART_SetConfig+0x1a2>
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d002      	beq.n	8007cb2 <UART_SetConfig+0x182>
 8007cac:	2b10      	cmp	r3, #16
 8007cae:	d008      	beq.n	8007cc2 <UART_SetConfig+0x192>
 8007cb0:	e00f      	b.n	8007cd2 <UART_SetConfig+0x1a2>
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007cb8:	e0ad      	b.n	8007e16 <UART_SetConfig+0x2e6>
 8007cba:	2302      	movs	r3, #2
 8007cbc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007cc0:	e0a9      	b.n	8007e16 <UART_SetConfig+0x2e6>
 8007cc2:	2304      	movs	r3, #4
 8007cc4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007cc8:	e0a5      	b.n	8007e16 <UART_SetConfig+0x2e6>
 8007cca:	2308      	movs	r3, #8
 8007ccc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007cd0:	e0a1      	b.n	8007e16 <UART_SetConfig+0x2e6>
 8007cd2:	2310      	movs	r3, #16
 8007cd4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007cd8:	e09d      	b.n	8007e16 <UART_SetConfig+0x2e6>
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a4a      	ldr	r2, [pc, #296]	@ (8007e08 <UART_SetConfig+0x2d8>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d125      	bne.n	8007d30 <UART_SetConfig+0x200>
 8007ce4:	4b45      	ldr	r3, [pc, #276]	@ (8007dfc <UART_SetConfig+0x2cc>)
 8007ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cea:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007cee:	2bc0      	cmp	r3, #192	@ 0xc0
 8007cf0:	d016      	beq.n	8007d20 <UART_SetConfig+0x1f0>
 8007cf2:	2bc0      	cmp	r3, #192	@ 0xc0
 8007cf4:	d818      	bhi.n	8007d28 <UART_SetConfig+0x1f8>
 8007cf6:	2b80      	cmp	r3, #128	@ 0x80
 8007cf8:	d00a      	beq.n	8007d10 <UART_SetConfig+0x1e0>
 8007cfa:	2b80      	cmp	r3, #128	@ 0x80
 8007cfc:	d814      	bhi.n	8007d28 <UART_SetConfig+0x1f8>
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d002      	beq.n	8007d08 <UART_SetConfig+0x1d8>
 8007d02:	2b40      	cmp	r3, #64	@ 0x40
 8007d04:	d008      	beq.n	8007d18 <UART_SetConfig+0x1e8>
 8007d06:	e00f      	b.n	8007d28 <UART_SetConfig+0x1f8>
 8007d08:	2300      	movs	r3, #0
 8007d0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d0e:	e082      	b.n	8007e16 <UART_SetConfig+0x2e6>
 8007d10:	2302      	movs	r3, #2
 8007d12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d16:	e07e      	b.n	8007e16 <UART_SetConfig+0x2e6>
 8007d18:	2304      	movs	r3, #4
 8007d1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d1e:	e07a      	b.n	8007e16 <UART_SetConfig+0x2e6>
 8007d20:	2308      	movs	r3, #8
 8007d22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d26:	e076      	b.n	8007e16 <UART_SetConfig+0x2e6>
 8007d28:	2310      	movs	r3, #16
 8007d2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d2e:	e072      	b.n	8007e16 <UART_SetConfig+0x2e6>
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a35      	ldr	r2, [pc, #212]	@ (8007e0c <UART_SetConfig+0x2dc>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d12a      	bne.n	8007d90 <UART_SetConfig+0x260>
 8007d3a:	4b30      	ldr	r3, [pc, #192]	@ (8007dfc <UART_SetConfig+0x2cc>)
 8007d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d40:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d44:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d48:	d01a      	beq.n	8007d80 <UART_SetConfig+0x250>
 8007d4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d4e:	d81b      	bhi.n	8007d88 <UART_SetConfig+0x258>
 8007d50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d54:	d00c      	beq.n	8007d70 <UART_SetConfig+0x240>
 8007d56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d5a:	d815      	bhi.n	8007d88 <UART_SetConfig+0x258>
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d003      	beq.n	8007d68 <UART_SetConfig+0x238>
 8007d60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d64:	d008      	beq.n	8007d78 <UART_SetConfig+0x248>
 8007d66:	e00f      	b.n	8007d88 <UART_SetConfig+0x258>
 8007d68:	2300      	movs	r3, #0
 8007d6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d6e:	e052      	b.n	8007e16 <UART_SetConfig+0x2e6>
 8007d70:	2302      	movs	r3, #2
 8007d72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d76:	e04e      	b.n	8007e16 <UART_SetConfig+0x2e6>
 8007d78:	2304      	movs	r3, #4
 8007d7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d7e:	e04a      	b.n	8007e16 <UART_SetConfig+0x2e6>
 8007d80:	2308      	movs	r3, #8
 8007d82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d86:	e046      	b.n	8007e16 <UART_SetConfig+0x2e6>
 8007d88:	2310      	movs	r3, #16
 8007d8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d8e:	e042      	b.n	8007e16 <UART_SetConfig+0x2e6>
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a17      	ldr	r2, [pc, #92]	@ (8007df4 <UART_SetConfig+0x2c4>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d13a      	bne.n	8007e10 <UART_SetConfig+0x2e0>
 8007d9a:	4b18      	ldr	r3, [pc, #96]	@ (8007dfc <UART_SetConfig+0x2cc>)
 8007d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007da0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007da4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007da8:	d01a      	beq.n	8007de0 <UART_SetConfig+0x2b0>
 8007daa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007dae:	d81b      	bhi.n	8007de8 <UART_SetConfig+0x2b8>
 8007db0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007db4:	d00c      	beq.n	8007dd0 <UART_SetConfig+0x2a0>
 8007db6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007dba:	d815      	bhi.n	8007de8 <UART_SetConfig+0x2b8>
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d003      	beq.n	8007dc8 <UART_SetConfig+0x298>
 8007dc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007dc4:	d008      	beq.n	8007dd8 <UART_SetConfig+0x2a8>
 8007dc6:	e00f      	b.n	8007de8 <UART_SetConfig+0x2b8>
 8007dc8:	2300      	movs	r3, #0
 8007dca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007dce:	e022      	b.n	8007e16 <UART_SetConfig+0x2e6>
 8007dd0:	2302      	movs	r3, #2
 8007dd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007dd6:	e01e      	b.n	8007e16 <UART_SetConfig+0x2e6>
 8007dd8:	2304      	movs	r3, #4
 8007dda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007dde:	e01a      	b.n	8007e16 <UART_SetConfig+0x2e6>
 8007de0:	2308      	movs	r3, #8
 8007de2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007de6:	e016      	b.n	8007e16 <UART_SetConfig+0x2e6>
 8007de8:	2310      	movs	r3, #16
 8007dea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007dee:	e012      	b.n	8007e16 <UART_SetConfig+0x2e6>
 8007df0:	efff69f3 	.word	0xefff69f3
 8007df4:	40008000 	.word	0x40008000
 8007df8:	40013800 	.word	0x40013800
 8007dfc:	40021000 	.word	0x40021000
 8007e00:	40004400 	.word	0x40004400
 8007e04:	40004800 	.word	0x40004800
 8007e08:	40004c00 	.word	0x40004c00
 8007e0c:	40005000 	.word	0x40005000
 8007e10:	2310      	movs	r3, #16
 8007e12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a9f      	ldr	r2, [pc, #636]	@ (8008098 <UART_SetConfig+0x568>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d17a      	bne.n	8007f16 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e20:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007e24:	2b08      	cmp	r3, #8
 8007e26:	d824      	bhi.n	8007e72 <UART_SetConfig+0x342>
 8007e28:	a201      	add	r2, pc, #4	@ (adr r2, 8007e30 <UART_SetConfig+0x300>)
 8007e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e2e:	bf00      	nop
 8007e30:	08007e55 	.word	0x08007e55
 8007e34:	08007e73 	.word	0x08007e73
 8007e38:	08007e5d 	.word	0x08007e5d
 8007e3c:	08007e73 	.word	0x08007e73
 8007e40:	08007e63 	.word	0x08007e63
 8007e44:	08007e73 	.word	0x08007e73
 8007e48:	08007e73 	.word	0x08007e73
 8007e4c:	08007e73 	.word	0x08007e73
 8007e50:	08007e6b 	.word	0x08007e6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e54:	f7fd f868 	bl	8004f28 <HAL_RCC_GetPCLK1Freq>
 8007e58:	61f8      	str	r0, [r7, #28]
        break;
 8007e5a:	e010      	b.n	8007e7e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e5c:	4b8f      	ldr	r3, [pc, #572]	@ (800809c <UART_SetConfig+0x56c>)
 8007e5e:	61fb      	str	r3, [r7, #28]
        break;
 8007e60:	e00d      	b.n	8007e7e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e62:	f7fc ffc9 	bl	8004df8 <HAL_RCC_GetSysClockFreq>
 8007e66:	61f8      	str	r0, [r7, #28]
        break;
 8007e68:	e009      	b.n	8007e7e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e6e:	61fb      	str	r3, [r7, #28]
        break;
 8007e70:	e005      	b.n	8007e7e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007e72:	2300      	movs	r3, #0
 8007e74:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007e76:	2301      	movs	r3, #1
 8007e78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007e7c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007e7e:	69fb      	ldr	r3, [r7, #28]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	f000 80fb 	beq.w	800807c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	685a      	ldr	r2, [r3, #4]
 8007e8a:	4613      	mov	r3, r2
 8007e8c:	005b      	lsls	r3, r3, #1
 8007e8e:	4413      	add	r3, r2
 8007e90:	69fa      	ldr	r2, [r7, #28]
 8007e92:	429a      	cmp	r2, r3
 8007e94:	d305      	bcc.n	8007ea2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007e9c:	69fa      	ldr	r2, [r7, #28]
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d903      	bls.n	8007eaa <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007ea8:	e0e8      	b.n	800807c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007eaa:	69fb      	ldr	r3, [r7, #28]
 8007eac:	2200      	movs	r2, #0
 8007eae:	461c      	mov	r4, r3
 8007eb0:	4615      	mov	r5, r2
 8007eb2:	f04f 0200 	mov.w	r2, #0
 8007eb6:	f04f 0300 	mov.w	r3, #0
 8007eba:	022b      	lsls	r3, r5, #8
 8007ebc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007ec0:	0222      	lsls	r2, r4, #8
 8007ec2:	68f9      	ldr	r1, [r7, #12]
 8007ec4:	6849      	ldr	r1, [r1, #4]
 8007ec6:	0849      	lsrs	r1, r1, #1
 8007ec8:	2000      	movs	r0, #0
 8007eca:	4688      	mov	r8, r1
 8007ecc:	4681      	mov	r9, r0
 8007ece:	eb12 0a08 	adds.w	sl, r2, r8
 8007ed2:	eb43 0b09 	adc.w	fp, r3, r9
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	2200      	movs	r2, #0
 8007edc:	603b      	str	r3, [r7, #0]
 8007ede:	607a      	str	r2, [r7, #4]
 8007ee0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ee4:	4650      	mov	r0, sl
 8007ee6:	4659      	mov	r1, fp
 8007ee8:	f7f8 f9da 	bl	80002a0 <__aeabi_uldivmod>
 8007eec:	4602      	mov	r2, r0
 8007eee:	460b      	mov	r3, r1
 8007ef0:	4613      	mov	r3, r2
 8007ef2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007ef4:	69bb      	ldr	r3, [r7, #24]
 8007ef6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007efa:	d308      	bcc.n	8007f0e <UART_SetConfig+0x3de>
 8007efc:	69bb      	ldr	r3, [r7, #24]
 8007efe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f02:	d204      	bcs.n	8007f0e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	69ba      	ldr	r2, [r7, #24]
 8007f0a:	60da      	str	r2, [r3, #12]
 8007f0c:	e0b6      	b.n	800807c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007f0e:	2301      	movs	r3, #1
 8007f10:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007f14:	e0b2      	b.n	800807c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	69db      	ldr	r3, [r3, #28]
 8007f1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f1e:	d15e      	bne.n	8007fde <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007f20:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007f24:	2b08      	cmp	r3, #8
 8007f26:	d828      	bhi.n	8007f7a <UART_SetConfig+0x44a>
 8007f28:	a201      	add	r2, pc, #4	@ (adr r2, 8007f30 <UART_SetConfig+0x400>)
 8007f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f2e:	bf00      	nop
 8007f30:	08007f55 	.word	0x08007f55
 8007f34:	08007f5d 	.word	0x08007f5d
 8007f38:	08007f65 	.word	0x08007f65
 8007f3c:	08007f7b 	.word	0x08007f7b
 8007f40:	08007f6b 	.word	0x08007f6b
 8007f44:	08007f7b 	.word	0x08007f7b
 8007f48:	08007f7b 	.word	0x08007f7b
 8007f4c:	08007f7b 	.word	0x08007f7b
 8007f50:	08007f73 	.word	0x08007f73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f54:	f7fc ffe8 	bl	8004f28 <HAL_RCC_GetPCLK1Freq>
 8007f58:	61f8      	str	r0, [r7, #28]
        break;
 8007f5a:	e014      	b.n	8007f86 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f5c:	f7fc fffa 	bl	8004f54 <HAL_RCC_GetPCLK2Freq>
 8007f60:	61f8      	str	r0, [r7, #28]
        break;
 8007f62:	e010      	b.n	8007f86 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f64:	4b4d      	ldr	r3, [pc, #308]	@ (800809c <UART_SetConfig+0x56c>)
 8007f66:	61fb      	str	r3, [r7, #28]
        break;
 8007f68:	e00d      	b.n	8007f86 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f6a:	f7fc ff45 	bl	8004df8 <HAL_RCC_GetSysClockFreq>
 8007f6e:	61f8      	str	r0, [r7, #28]
        break;
 8007f70:	e009      	b.n	8007f86 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f76:	61fb      	str	r3, [r7, #28]
        break;
 8007f78:	e005      	b.n	8007f86 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007f84:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007f86:	69fb      	ldr	r3, [r7, #28]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d077      	beq.n	800807c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007f8c:	69fb      	ldr	r3, [r7, #28]
 8007f8e:	005a      	lsls	r2, r3, #1
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	085b      	lsrs	r3, r3, #1
 8007f96:	441a      	add	r2, r3
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fa0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fa2:	69bb      	ldr	r3, [r7, #24]
 8007fa4:	2b0f      	cmp	r3, #15
 8007fa6:	d916      	bls.n	8007fd6 <UART_SetConfig+0x4a6>
 8007fa8:	69bb      	ldr	r3, [r7, #24]
 8007faa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007fae:	d212      	bcs.n	8007fd6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007fb0:	69bb      	ldr	r3, [r7, #24]
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	f023 030f 	bic.w	r3, r3, #15
 8007fb8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007fba:	69bb      	ldr	r3, [r7, #24]
 8007fbc:	085b      	lsrs	r3, r3, #1
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	f003 0307 	and.w	r3, r3, #7
 8007fc4:	b29a      	uxth	r2, r3
 8007fc6:	8afb      	ldrh	r3, [r7, #22]
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	8afa      	ldrh	r2, [r7, #22]
 8007fd2:	60da      	str	r2, [r3, #12]
 8007fd4:	e052      	b.n	800807c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007fdc:	e04e      	b.n	800807c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007fde:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007fe2:	2b08      	cmp	r3, #8
 8007fe4:	d827      	bhi.n	8008036 <UART_SetConfig+0x506>
 8007fe6:	a201      	add	r2, pc, #4	@ (adr r2, 8007fec <UART_SetConfig+0x4bc>)
 8007fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fec:	08008011 	.word	0x08008011
 8007ff0:	08008019 	.word	0x08008019
 8007ff4:	08008021 	.word	0x08008021
 8007ff8:	08008037 	.word	0x08008037
 8007ffc:	08008027 	.word	0x08008027
 8008000:	08008037 	.word	0x08008037
 8008004:	08008037 	.word	0x08008037
 8008008:	08008037 	.word	0x08008037
 800800c:	0800802f 	.word	0x0800802f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008010:	f7fc ff8a 	bl	8004f28 <HAL_RCC_GetPCLK1Freq>
 8008014:	61f8      	str	r0, [r7, #28]
        break;
 8008016:	e014      	b.n	8008042 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008018:	f7fc ff9c 	bl	8004f54 <HAL_RCC_GetPCLK2Freq>
 800801c:	61f8      	str	r0, [r7, #28]
        break;
 800801e:	e010      	b.n	8008042 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008020:	4b1e      	ldr	r3, [pc, #120]	@ (800809c <UART_SetConfig+0x56c>)
 8008022:	61fb      	str	r3, [r7, #28]
        break;
 8008024:	e00d      	b.n	8008042 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008026:	f7fc fee7 	bl	8004df8 <HAL_RCC_GetSysClockFreq>
 800802a:	61f8      	str	r0, [r7, #28]
        break;
 800802c:	e009      	b.n	8008042 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800802e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008032:	61fb      	str	r3, [r7, #28]
        break;
 8008034:	e005      	b.n	8008042 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8008036:	2300      	movs	r3, #0
 8008038:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800803a:	2301      	movs	r3, #1
 800803c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008040:	bf00      	nop
    }

    if (pclk != 0U)
 8008042:	69fb      	ldr	r3, [r7, #28]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d019      	beq.n	800807c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	085a      	lsrs	r2, r3, #1
 800804e:	69fb      	ldr	r3, [r7, #28]
 8008050:	441a      	add	r2, r3
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	fbb2 f3f3 	udiv	r3, r2, r3
 800805a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800805c:	69bb      	ldr	r3, [r7, #24]
 800805e:	2b0f      	cmp	r3, #15
 8008060:	d909      	bls.n	8008076 <UART_SetConfig+0x546>
 8008062:	69bb      	ldr	r3, [r7, #24]
 8008064:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008068:	d205      	bcs.n	8008076 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800806a:	69bb      	ldr	r3, [r7, #24]
 800806c:	b29a      	uxth	r2, r3
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	60da      	str	r2, [r3, #12]
 8008074:	e002      	b.n	800807c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008076:	2301      	movs	r3, #1
 8008078:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2200      	movs	r2, #0
 8008080:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2200      	movs	r2, #0
 8008086:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008088:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800808c:	4618      	mov	r0, r3
 800808e:	3728      	adds	r7, #40	@ 0x28
 8008090:	46bd      	mov	sp, r7
 8008092:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008096:	bf00      	nop
 8008098:	40008000 	.word	0x40008000
 800809c:	00f42400 	.word	0x00f42400

080080a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b083      	sub	sp, #12
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080ac:	f003 0308 	and.w	r3, r3, #8
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d00a      	beq.n	80080ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	430a      	orrs	r2, r1
 80080c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080ce:	f003 0301 	and.w	r3, r3, #1
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d00a      	beq.n	80080ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	430a      	orrs	r2, r1
 80080ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080f0:	f003 0302 	and.w	r3, r3, #2
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d00a      	beq.n	800810e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	430a      	orrs	r2, r1
 800810c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008112:	f003 0304 	and.w	r3, r3, #4
 8008116:	2b00      	cmp	r3, #0
 8008118:	d00a      	beq.n	8008130 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	430a      	orrs	r2, r1
 800812e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008134:	f003 0310 	and.w	r3, r3, #16
 8008138:	2b00      	cmp	r3, #0
 800813a:	d00a      	beq.n	8008152 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	689b      	ldr	r3, [r3, #8]
 8008142:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	430a      	orrs	r2, r1
 8008150:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008156:	f003 0320 	and.w	r3, r3, #32
 800815a:	2b00      	cmp	r3, #0
 800815c:	d00a      	beq.n	8008174 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	430a      	orrs	r2, r1
 8008172:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800817c:	2b00      	cmp	r3, #0
 800817e:	d01a      	beq.n	80081b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	430a      	orrs	r2, r1
 8008194:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800819a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800819e:	d10a      	bne.n	80081b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	430a      	orrs	r2, r1
 80081b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d00a      	beq.n	80081d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	430a      	orrs	r2, r1
 80081d6:	605a      	str	r2, [r3, #4]
  }
}
 80081d8:	bf00      	nop
 80081da:	370c      	adds	r7, #12
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr

080081e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b098      	sub	sp, #96	@ 0x60
 80081e8:	af02      	add	r7, sp, #8
 80081ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2200      	movs	r2, #0
 80081f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80081f4:	f7fb f900 	bl	80033f8 <HAL_GetTick>
 80081f8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f003 0308 	and.w	r3, r3, #8
 8008204:	2b08      	cmp	r3, #8
 8008206:	d12e      	bne.n	8008266 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008208:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800820c:	9300      	str	r3, [sp, #0]
 800820e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008210:	2200      	movs	r2, #0
 8008212:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 f88c 	bl	8008334 <UART_WaitOnFlagUntilTimeout>
 800821c:	4603      	mov	r3, r0
 800821e:	2b00      	cmp	r3, #0
 8008220:	d021      	beq.n	8008266 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800822a:	e853 3f00 	ldrex	r3, [r3]
 800822e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008230:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008232:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008236:	653b      	str	r3, [r7, #80]	@ 0x50
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	461a      	mov	r2, r3
 800823e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008240:	647b      	str	r3, [r7, #68]	@ 0x44
 8008242:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008244:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008246:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008248:	e841 2300 	strex	r3, r2, [r1]
 800824c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800824e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008250:	2b00      	cmp	r3, #0
 8008252:	d1e6      	bne.n	8008222 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2220      	movs	r2, #32
 8008258:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2200      	movs	r2, #0
 800825e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008262:	2303      	movs	r3, #3
 8008264:	e062      	b.n	800832c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f003 0304 	and.w	r3, r3, #4
 8008270:	2b04      	cmp	r3, #4
 8008272:	d149      	bne.n	8008308 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008274:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008278:	9300      	str	r3, [sp, #0]
 800827a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800827c:	2200      	movs	r2, #0
 800827e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 f856 	bl	8008334 <UART_WaitOnFlagUntilTimeout>
 8008288:	4603      	mov	r3, r0
 800828a:	2b00      	cmp	r3, #0
 800828c:	d03c      	beq.n	8008308 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008296:	e853 3f00 	ldrex	r3, [r3]
 800829a:	623b      	str	r3, [r7, #32]
   return(result);
 800829c:	6a3b      	ldr	r3, [r7, #32]
 800829e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80082a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	461a      	mov	r2, r3
 80082aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80082ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80082b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082b4:	e841 2300 	strex	r3, r2, [r1]
 80082b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80082ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d1e6      	bne.n	800828e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	3308      	adds	r3, #8
 80082c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	e853 3f00 	ldrex	r3, [r3]
 80082ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f023 0301 	bic.w	r3, r3, #1
 80082d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	3308      	adds	r3, #8
 80082de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80082e0:	61fa      	str	r2, [r7, #28]
 80082e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082e4:	69b9      	ldr	r1, [r7, #24]
 80082e6:	69fa      	ldr	r2, [r7, #28]
 80082e8:	e841 2300 	strex	r3, r2, [r1]
 80082ec:	617b      	str	r3, [r7, #20]
   return(result);
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d1e5      	bne.n	80082c0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2220      	movs	r2, #32
 80082f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2200      	movs	r2, #0
 8008300:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008304:	2303      	movs	r3, #3
 8008306:	e011      	b.n	800832c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2220      	movs	r2, #32
 800830c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2220      	movs	r2, #32
 8008312:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2200      	movs	r2, #0
 800831a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2200      	movs	r2, #0
 8008326:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800832a:	2300      	movs	r3, #0
}
 800832c:	4618      	mov	r0, r3
 800832e:	3758      	adds	r7, #88	@ 0x58
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b084      	sub	sp, #16
 8008338:	af00      	add	r7, sp, #0
 800833a:	60f8      	str	r0, [r7, #12]
 800833c:	60b9      	str	r1, [r7, #8]
 800833e:	603b      	str	r3, [r7, #0]
 8008340:	4613      	mov	r3, r2
 8008342:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008344:	e049      	b.n	80083da <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008346:	69bb      	ldr	r3, [r7, #24]
 8008348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800834c:	d045      	beq.n	80083da <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800834e:	f7fb f853 	bl	80033f8 <HAL_GetTick>
 8008352:	4602      	mov	r2, r0
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	1ad3      	subs	r3, r2, r3
 8008358:	69ba      	ldr	r2, [r7, #24]
 800835a:	429a      	cmp	r2, r3
 800835c:	d302      	bcc.n	8008364 <UART_WaitOnFlagUntilTimeout+0x30>
 800835e:	69bb      	ldr	r3, [r7, #24]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d101      	bne.n	8008368 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008364:	2303      	movs	r3, #3
 8008366:	e048      	b.n	80083fa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f003 0304 	and.w	r3, r3, #4
 8008372:	2b00      	cmp	r3, #0
 8008374:	d031      	beq.n	80083da <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	69db      	ldr	r3, [r3, #28]
 800837c:	f003 0308 	and.w	r3, r3, #8
 8008380:	2b08      	cmp	r3, #8
 8008382:	d110      	bne.n	80083a6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	2208      	movs	r2, #8
 800838a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800838c:	68f8      	ldr	r0, [r7, #12]
 800838e:	f000 f8ff 	bl	8008590 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2208      	movs	r2, #8
 8008396:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2200      	movs	r2, #0
 800839e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80083a2:	2301      	movs	r3, #1
 80083a4:	e029      	b.n	80083fa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	69db      	ldr	r3, [r3, #28]
 80083ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80083b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80083b4:	d111      	bne.n	80083da <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80083be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80083c0:	68f8      	ldr	r0, [r7, #12]
 80083c2:	f000 f8e5 	bl	8008590 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2220      	movs	r2, #32
 80083ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2200      	movs	r2, #0
 80083d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80083d6:	2303      	movs	r3, #3
 80083d8:	e00f      	b.n	80083fa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	69da      	ldr	r2, [r3, #28]
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	4013      	ands	r3, r2
 80083e4:	68ba      	ldr	r2, [r7, #8]
 80083e6:	429a      	cmp	r2, r3
 80083e8:	bf0c      	ite	eq
 80083ea:	2301      	moveq	r3, #1
 80083ec:	2300      	movne	r3, #0
 80083ee:	b2db      	uxtb	r3, r3
 80083f0:	461a      	mov	r2, r3
 80083f2:	79fb      	ldrb	r3, [r7, #7]
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d0a6      	beq.n	8008346 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80083f8:	2300      	movs	r3, #0
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3710      	adds	r7, #16
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
	...

08008404 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008404:	b480      	push	{r7}
 8008406:	b097      	sub	sp, #92	@ 0x5c
 8008408:	af00      	add	r7, sp, #0
 800840a:	60f8      	str	r0, [r7, #12]
 800840c:	60b9      	str	r1, [r7, #8]
 800840e:	4613      	mov	r3, r2
 8008410:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	68ba      	ldr	r2, [r7, #8]
 8008416:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	88fa      	ldrh	r2, [r7, #6]
 800841c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	88fa      	ldrh	r2, [r7, #6]
 8008424:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2200      	movs	r2, #0
 800842c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	689b      	ldr	r3, [r3, #8]
 8008432:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008436:	d10e      	bne.n	8008456 <UART_Start_Receive_IT+0x52>
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	691b      	ldr	r3, [r3, #16]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d105      	bne.n	800844c <UART_Start_Receive_IT+0x48>
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008446:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800844a:	e02d      	b.n	80084a8 <UART_Start_Receive_IT+0xa4>
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	22ff      	movs	r2, #255	@ 0xff
 8008450:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008454:	e028      	b.n	80084a8 <UART_Start_Receive_IT+0xa4>
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	689b      	ldr	r3, [r3, #8]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d10d      	bne.n	800847a <UART_Start_Receive_IT+0x76>
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	691b      	ldr	r3, [r3, #16]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d104      	bne.n	8008470 <UART_Start_Receive_IT+0x6c>
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	22ff      	movs	r2, #255	@ 0xff
 800846a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800846e:	e01b      	b.n	80084a8 <UART_Start_Receive_IT+0xa4>
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	227f      	movs	r2, #127	@ 0x7f
 8008474:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008478:	e016      	b.n	80084a8 <UART_Start_Receive_IT+0xa4>
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	689b      	ldr	r3, [r3, #8]
 800847e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008482:	d10d      	bne.n	80084a0 <UART_Start_Receive_IT+0x9c>
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	691b      	ldr	r3, [r3, #16]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d104      	bne.n	8008496 <UART_Start_Receive_IT+0x92>
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	227f      	movs	r2, #127	@ 0x7f
 8008490:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008494:	e008      	b.n	80084a8 <UART_Start_Receive_IT+0xa4>
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	223f      	movs	r2, #63	@ 0x3f
 800849a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800849e:	e003      	b.n	80084a8 <UART_Start_Receive_IT+0xa4>
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2200      	movs	r2, #0
 80084ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2222      	movs	r2, #34	@ 0x22
 80084b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	3308      	adds	r3, #8
 80084be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084c2:	e853 3f00 	ldrex	r3, [r3]
 80084c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80084c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084ca:	f043 0301 	orr.w	r3, r3, #1
 80084ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	3308      	adds	r3, #8
 80084d6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80084d8:	64ba      	str	r2, [r7, #72]	@ 0x48
 80084da:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084dc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80084de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80084e0:	e841 2300 	strex	r3, r2, [r1]
 80084e4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80084e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d1e5      	bne.n	80084b8 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	689b      	ldr	r3, [r3, #8]
 80084f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084f4:	d107      	bne.n	8008506 <UART_Start_Receive_IT+0x102>
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	691b      	ldr	r3, [r3, #16]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d103      	bne.n	8008506 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	4a21      	ldr	r2, [pc, #132]	@ (8008588 <UART_Start_Receive_IT+0x184>)
 8008502:	669a      	str	r2, [r3, #104]	@ 0x68
 8008504:	e002      	b.n	800850c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	4a20      	ldr	r2, [pc, #128]	@ (800858c <UART_Start_Receive_IT+0x188>)
 800850a:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	691b      	ldr	r3, [r3, #16]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d019      	beq.n	8008548 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800851a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800851c:	e853 3f00 	ldrex	r3, [r3]
 8008520:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008524:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8008528:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	461a      	mov	r2, r3
 8008530:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008532:	637b      	str	r3, [r7, #52]	@ 0x34
 8008534:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008536:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008538:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800853a:	e841 2300 	strex	r3, r2, [r1]
 800853e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008542:	2b00      	cmp	r3, #0
 8008544:	d1e6      	bne.n	8008514 <UART_Start_Receive_IT+0x110>
 8008546:	e018      	b.n	800857a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	e853 3f00 	ldrex	r3, [r3]
 8008554:	613b      	str	r3, [r7, #16]
   return(result);
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	f043 0320 	orr.w	r3, r3, #32
 800855c:	653b      	str	r3, [r7, #80]	@ 0x50
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	461a      	mov	r2, r3
 8008564:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008566:	623b      	str	r3, [r7, #32]
 8008568:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800856a:	69f9      	ldr	r1, [r7, #28]
 800856c:	6a3a      	ldr	r2, [r7, #32]
 800856e:	e841 2300 	strex	r3, r2, [r1]
 8008572:	61bb      	str	r3, [r7, #24]
   return(result);
 8008574:	69bb      	ldr	r3, [r7, #24]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d1e6      	bne.n	8008548 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800857a:	2300      	movs	r3, #0
}
 800857c:	4618      	mov	r0, r3
 800857e:	375c      	adds	r7, #92	@ 0x5c
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr
 8008588:	08008a0d 	.word	0x08008a0d
 800858c:	08008851 	.word	0x08008851

08008590 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008590:	b480      	push	{r7}
 8008592:	b095      	sub	sp, #84	@ 0x54
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800859e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085a0:	e853 3f00 	ldrex	r3, [r3]
 80085a4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80085a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80085ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	461a      	mov	r2, r3
 80085b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80085b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80085b8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80085bc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80085be:	e841 2300 	strex	r3, r2, [r1]
 80085c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80085c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d1e6      	bne.n	8008598 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	3308      	adds	r3, #8
 80085d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d2:	6a3b      	ldr	r3, [r7, #32]
 80085d4:	e853 3f00 	ldrex	r3, [r3]
 80085d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80085da:	69fb      	ldr	r3, [r7, #28]
 80085dc:	f023 0301 	bic.w	r3, r3, #1
 80085e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	3308      	adds	r3, #8
 80085e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80085ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80085ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80085f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80085f2:	e841 2300 	strex	r3, r2, [r1]
 80085f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80085f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d1e5      	bne.n	80085ca <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008602:	2b01      	cmp	r3, #1
 8008604:	d118      	bne.n	8008638 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	e853 3f00 	ldrex	r3, [r3]
 8008612:	60bb      	str	r3, [r7, #8]
   return(result);
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	f023 0310 	bic.w	r3, r3, #16
 800861a:	647b      	str	r3, [r7, #68]	@ 0x44
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	461a      	mov	r2, r3
 8008622:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008624:	61bb      	str	r3, [r7, #24]
 8008626:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008628:	6979      	ldr	r1, [r7, #20]
 800862a:	69ba      	ldr	r2, [r7, #24]
 800862c:	e841 2300 	strex	r3, r2, [r1]
 8008630:	613b      	str	r3, [r7, #16]
   return(result);
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d1e6      	bne.n	8008606 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2220      	movs	r2, #32
 800863c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2200      	movs	r2, #0
 8008644:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2200      	movs	r2, #0
 800864a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800864c:	bf00      	nop
 800864e:	3754      	adds	r7, #84	@ 0x54
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr

08008658 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b084      	sub	sp, #16
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008664:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	2200      	movs	r2, #0
 800866a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2200      	movs	r2, #0
 8008672:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008676:	68f8      	ldr	r0, [r7, #12]
 8008678:	f7ff fa44 	bl	8007b04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800867c:	bf00      	nop
 800867e:	3710      	adds	r7, #16
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008684:	b480      	push	{r7}
 8008686:	b08f      	sub	sp, #60	@ 0x3c
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008690:	2b21      	cmp	r3, #33	@ 0x21
 8008692:	d14c      	bne.n	800872e <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800869a:	b29b      	uxth	r3, r3
 800869c:	2b00      	cmp	r3, #0
 800869e:	d132      	bne.n	8008706 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a6:	6a3b      	ldr	r3, [r7, #32]
 80086a8:	e853 3f00 	ldrex	r3, [r3]
 80086ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80086ae:	69fb      	ldr	r3, [r7, #28]
 80086b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80086b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	461a      	mov	r2, r3
 80086bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80086c0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80086c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80086c6:	e841 2300 	strex	r3, r2, [r1]
 80086ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80086cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d1e6      	bne.n	80086a0 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	e853 3f00 	ldrex	r3, [r3]
 80086de:	60bb      	str	r3, [r7, #8]
   return(result);
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	461a      	mov	r2, r3
 80086ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086f0:	61bb      	str	r3, [r7, #24]
 80086f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f4:	6979      	ldr	r1, [r7, #20]
 80086f6:	69ba      	ldr	r2, [r7, #24]
 80086f8:	e841 2300 	strex	r3, r2, [r1]
 80086fc:	613b      	str	r3, [r7, #16]
   return(result);
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d1e6      	bne.n	80086d2 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008704:	e013      	b.n	800872e <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800870a:	781a      	ldrb	r2, [r3, #0]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008716:	1c5a      	adds	r2, r3, #1
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008722:	b29b      	uxth	r3, r3
 8008724:	3b01      	subs	r3, #1
 8008726:	b29a      	uxth	r2, r3
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800872e:	bf00      	nop
 8008730:	373c      	adds	r7, #60	@ 0x3c
 8008732:	46bd      	mov	sp, r7
 8008734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008738:	4770      	bx	lr

0800873a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800873a:	b480      	push	{r7}
 800873c:	b091      	sub	sp, #68	@ 0x44
 800873e:	af00      	add	r7, sp, #0
 8008740:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008746:	2b21      	cmp	r3, #33	@ 0x21
 8008748:	d151      	bne.n	80087ee <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008750:	b29b      	uxth	r3, r3
 8008752:	2b00      	cmp	r3, #0
 8008754:	d132      	bne.n	80087bc <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800875c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800875e:	e853 3f00 	ldrex	r3, [r3]
 8008762:	623b      	str	r3, [r7, #32]
   return(result);
 8008764:	6a3b      	ldr	r3, [r7, #32]
 8008766:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800876a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	461a      	mov	r2, r3
 8008772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008774:	633b      	str	r3, [r7, #48]	@ 0x30
 8008776:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008778:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800877a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800877c:	e841 2300 	strex	r3, r2, [r1]
 8008780:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008784:	2b00      	cmp	r3, #0
 8008786:	d1e6      	bne.n	8008756 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	e853 3f00 	ldrex	r3, [r3]
 8008794:	60fb      	str	r3, [r7, #12]
   return(result);
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800879c:	637b      	str	r3, [r7, #52]	@ 0x34
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	461a      	mov	r2, r3
 80087a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087a6:	61fb      	str	r3, [r7, #28]
 80087a8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087aa:	69b9      	ldr	r1, [r7, #24]
 80087ac:	69fa      	ldr	r2, [r7, #28]
 80087ae:	e841 2300 	strex	r3, r2, [r1]
 80087b2:	617b      	str	r3, [r7, #20]
   return(result);
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d1e6      	bne.n	8008788 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80087ba:	e018      	b.n	80087ee <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80087c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80087c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087c4:	881a      	ldrh	r2, [r3, #0]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80087ce:	b292      	uxth	r2, r2
 80087d0:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80087d6:	1c9a      	adds	r2, r3, #2
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80087e2:	b29b      	uxth	r3, r3
 80087e4:	3b01      	subs	r3, #1
 80087e6:	b29a      	uxth	r2, r3
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 80087ee:	bf00      	nop
 80087f0:	3744      	adds	r7, #68	@ 0x44
 80087f2:	46bd      	mov	sp, r7
 80087f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f8:	4770      	bx	lr

080087fa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80087fa:	b580      	push	{r7, lr}
 80087fc:	b088      	sub	sp, #32
 80087fe:	af00      	add	r7, sp, #0
 8008800:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	e853 3f00 	ldrex	r3, [r3]
 800880e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008816:	61fb      	str	r3, [r7, #28]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	461a      	mov	r2, r3
 800881e:	69fb      	ldr	r3, [r7, #28]
 8008820:	61bb      	str	r3, [r7, #24]
 8008822:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008824:	6979      	ldr	r1, [r7, #20]
 8008826:	69ba      	ldr	r2, [r7, #24]
 8008828:	e841 2300 	strex	r3, r2, [r1]
 800882c:	613b      	str	r3, [r7, #16]
   return(result);
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d1e6      	bne.n	8008802 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2220      	movs	r2, #32
 8008838:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2200      	movs	r2, #0
 800883e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f7fa fc9f 	bl	8003184 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008846:	bf00      	nop
 8008848:	3720      	adds	r7, #32
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}
	...

08008850 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b09c      	sub	sp, #112	@ 0x70
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800885e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008868:	2b22      	cmp	r3, #34	@ 0x22
 800886a:	f040 80be 	bne.w	80089ea <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008874:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008878:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800887c:	b2d9      	uxtb	r1, r3
 800887e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008882:	b2da      	uxtb	r2, r3
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008888:	400a      	ands	r2, r1
 800888a:	b2d2      	uxtb	r2, r2
 800888c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008892:	1c5a      	adds	r2, r3, #1
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800889e:	b29b      	uxth	r3, r3
 80088a0:	3b01      	subs	r3, #1
 80088a2:	b29a      	uxth	r2, r3
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80088b0:	b29b      	uxth	r3, r3
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	f040 80a3 	bne.w	80089fe <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088c0:	e853 3f00 	ldrex	r3, [r3]
 80088c4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80088c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80088c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80088cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	461a      	mov	r2, r3
 80088d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80088d6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80088d8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088da:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80088dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80088de:	e841 2300 	strex	r3, r2, [r1]
 80088e2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80088e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d1e6      	bne.n	80088b8 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	3308      	adds	r3, #8
 80088f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088f4:	e853 3f00 	ldrex	r3, [r3]
 80088f8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80088fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088fc:	f023 0301 	bic.w	r3, r3, #1
 8008900:	667b      	str	r3, [r7, #100]	@ 0x64
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	3308      	adds	r3, #8
 8008908:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800890a:	647a      	str	r2, [r7, #68]	@ 0x44
 800890c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800890e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008910:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008912:	e841 2300 	strex	r3, r2, [r1]
 8008916:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008918:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800891a:	2b00      	cmp	r3, #0
 800891c:	d1e5      	bne.n	80088ea <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2220      	movs	r2, #32
 8008922:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2200      	movs	r2, #0
 800892a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2200      	movs	r2, #0
 8008930:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4a34      	ldr	r2, [pc, #208]	@ (8008a08 <UART_RxISR_8BIT+0x1b8>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d01f      	beq.n	800897c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	685b      	ldr	r3, [r3, #4]
 8008942:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008946:	2b00      	cmp	r3, #0
 8008948:	d018      	beq.n	800897c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008952:	e853 3f00 	ldrex	r3, [r3]
 8008956:	623b      	str	r3, [r7, #32]
   return(result);
 8008958:	6a3b      	ldr	r3, [r7, #32]
 800895a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800895e:	663b      	str	r3, [r7, #96]	@ 0x60
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	461a      	mov	r2, r3
 8008966:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008968:	633b      	str	r3, [r7, #48]	@ 0x30
 800896a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800896c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800896e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008970:	e841 2300 	strex	r3, r2, [r1]
 8008974:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008978:	2b00      	cmp	r3, #0
 800897a:	d1e6      	bne.n	800894a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008980:	2b01      	cmp	r3, #1
 8008982:	d12e      	bne.n	80089e2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2200      	movs	r2, #0
 8008988:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	e853 3f00 	ldrex	r3, [r3]
 8008996:	60fb      	str	r3, [r7, #12]
   return(result);
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f023 0310 	bic.w	r3, r3, #16
 800899e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	461a      	mov	r2, r3
 80089a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80089a8:	61fb      	str	r3, [r7, #28]
 80089aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ac:	69b9      	ldr	r1, [r7, #24]
 80089ae:	69fa      	ldr	r2, [r7, #28]
 80089b0:	e841 2300 	strex	r3, r2, [r1]
 80089b4:	617b      	str	r3, [r7, #20]
   return(result);
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d1e6      	bne.n	800898a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	69db      	ldr	r3, [r3, #28]
 80089c2:	f003 0310 	and.w	r3, r3, #16
 80089c6:	2b10      	cmp	r3, #16
 80089c8:	d103      	bne.n	80089d2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	2210      	movs	r2, #16
 80089d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80089d8:	4619      	mov	r1, r3
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f7ff f89c 	bl	8007b18 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80089e0:	e00d      	b.n	80089fe <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f7ff f884 	bl	8007af0 <HAL_UART_RxCpltCallback>
}
 80089e8:	e009      	b.n	80089fe <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	8b1b      	ldrh	r3, [r3, #24]
 80089f0:	b29a      	uxth	r2, r3
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f042 0208 	orr.w	r2, r2, #8
 80089fa:	b292      	uxth	r2, r2
 80089fc:	831a      	strh	r2, [r3, #24]
}
 80089fe:	bf00      	nop
 8008a00:	3770      	adds	r7, #112	@ 0x70
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
 8008a06:	bf00      	nop
 8008a08:	40008000 	.word	0x40008000

08008a0c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b09c      	sub	sp, #112	@ 0x70
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008a1a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a24:	2b22      	cmp	r3, #34	@ 0x22
 8008a26:	f040 80be 	bne.w	8008ba6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008a30:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a38:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008a3a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8008a3e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008a42:	4013      	ands	r3, r2
 8008a44:	b29a      	uxth	r2, r3
 8008a46:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008a48:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a4e:	1c9a      	adds	r2, r3, #2
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008a5a:	b29b      	uxth	r3, r3
 8008a5c:	3b01      	subs	r3, #1
 8008a5e:	b29a      	uxth	r2, r3
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008a6c:	b29b      	uxth	r3, r3
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	f040 80a3 	bne.w	8008bba <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a7c:	e853 3f00 	ldrex	r3, [r3]
 8008a80:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008a82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a84:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a88:	667b      	str	r3, [r7, #100]	@ 0x64
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	461a      	mov	r2, r3
 8008a90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008a92:	657b      	str	r3, [r7, #84]	@ 0x54
 8008a94:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a96:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008a98:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008a9a:	e841 2300 	strex	r3, r2, [r1]
 8008a9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008aa0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d1e6      	bne.n	8008a74 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	3308      	adds	r3, #8
 8008aac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ab0:	e853 3f00 	ldrex	r3, [r3]
 8008ab4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ab8:	f023 0301 	bic.w	r3, r3, #1
 8008abc:	663b      	str	r3, [r7, #96]	@ 0x60
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	3308      	adds	r3, #8
 8008ac4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008ac6:	643a      	str	r2, [r7, #64]	@ 0x40
 8008ac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008acc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008ace:	e841 2300 	strex	r3, r2, [r1]
 8008ad2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008ad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d1e5      	bne.n	8008aa6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2220      	movs	r2, #32
 8008ade:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2200      	movs	r2, #0
 8008aec:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	4a34      	ldr	r2, [pc, #208]	@ (8008bc4 <UART_RxISR_16BIT+0x1b8>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d01f      	beq.n	8008b38 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d018      	beq.n	8008b38 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b0c:	6a3b      	ldr	r3, [r7, #32]
 8008b0e:	e853 3f00 	ldrex	r3, [r3]
 8008b12:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b14:	69fb      	ldr	r3, [r7, #28]
 8008b16:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008b1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	461a      	mov	r2, r3
 8008b22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008b24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b26:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b2c:	e841 2300 	strex	r3, r2, [r1]
 8008b30:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d1e6      	bne.n	8008b06 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	d12e      	bne.n	8008b9e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2200      	movs	r2, #0
 8008b44:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	e853 3f00 	ldrex	r3, [r3]
 8008b52:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	f023 0310 	bic.w	r3, r3, #16
 8008b5a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	461a      	mov	r2, r3
 8008b62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008b64:	61bb      	str	r3, [r7, #24]
 8008b66:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b68:	6979      	ldr	r1, [r7, #20]
 8008b6a:	69ba      	ldr	r2, [r7, #24]
 8008b6c:	e841 2300 	strex	r3, r2, [r1]
 8008b70:	613b      	str	r3, [r7, #16]
   return(result);
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d1e6      	bne.n	8008b46 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	69db      	ldr	r3, [r3, #28]
 8008b7e:	f003 0310 	and.w	r3, r3, #16
 8008b82:	2b10      	cmp	r3, #16
 8008b84:	d103      	bne.n	8008b8e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	2210      	movs	r2, #16
 8008b8c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008b94:	4619      	mov	r1, r3
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f7fe ffbe 	bl	8007b18 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008b9c:	e00d      	b.n	8008bba <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f7fe ffa6 	bl	8007af0 <HAL_UART_RxCpltCallback>
}
 8008ba4:	e009      	b.n	8008bba <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	8b1b      	ldrh	r3, [r3, #24]
 8008bac:	b29a      	uxth	r2, r3
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f042 0208 	orr.w	r2, r2, #8
 8008bb6:	b292      	uxth	r2, r2
 8008bb8:	831a      	strh	r2, [r3, #24]
}
 8008bba:	bf00      	nop
 8008bbc:	3770      	adds	r7, #112	@ 0x70
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}
 8008bc2:	bf00      	nop
 8008bc4:	40008000 	.word	0x40008000

08008bc8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b083      	sub	sp, #12
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008bd0:	bf00      	nop
 8008bd2:	370c      	adds	r7, #12
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bda:	4770      	bx	lr

08008bdc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008bdc:	b084      	sub	sp, #16
 8008bde:	b580      	push	{r7, lr}
 8008be0:	b084      	sub	sp, #16
 8008be2:	af00      	add	r7, sp, #0
 8008be4:	6078      	str	r0, [r7, #4]
 8008be6:	f107 001c 	add.w	r0, r7, #28
 8008bea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	68db      	ldr	r3, [r3, #12]
 8008bf2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 fa66 	bl	80090cc <USB_CoreReset>
 8008c00:	4603      	mov	r3, r0
 8008c02:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8008c04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d106      	bne.n	8008c18 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c0e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	639a      	str	r2, [r3, #56]	@ 0x38
 8008c16:	e005      	b.n	8008c24 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c1c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8008c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3710      	adds	r7, #16
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008c30:	b004      	add	sp, #16
 8008c32:	4770      	bx	lr

08008c34 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b083      	sub	sp, #12
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	689b      	ldr	r3, [r3, #8]
 8008c40:	f023 0201 	bic.w	r2, r3, #1
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008c48:	2300      	movs	r3, #0
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	370c      	adds	r7, #12
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c54:	4770      	bx	lr

08008c56 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8008c56:	b580      	push	{r7, lr}
 8008c58:	b084      	sub	sp, #16
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	6078      	str	r0, [r7, #4]
 8008c5e:	460b      	mov	r3, r1
 8008c60:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008c62:	2300      	movs	r3, #0
 8008c64:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	68db      	ldr	r3, [r3, #12]
 8008c6a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008c72:	78fb      	ldrb	r3, [r7, #3]
 8008c74:	2b01      	cmp	r3, #1
 8008c76:	d115      	bne.n	8008ca4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	68db      	ldr	r3, [r3, #12]
 8008c7c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008c84:	2001      	movs	r0, #1
 8008c86:	f7fa fbc3 	bl	8003410 <HAL_Delay>
      ms++;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	3301      	adds	r3, #1
 8008c8e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f000 fa0d 	bl	80090b0 <USB_GetMode>
 8008c96:	4603      	mov	r3, r0
 8008c98:	2b01      	cmp	r3, #1
 8008c9a:	d01e      	beq.n	8008cda <USB_SetCurrentMode+0x84>
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	2b31      	cmp	r3, #49	@ 0x31
 8008ca0:	d9f0      	bls.n	8008c84 <USB_SetCurrentMode+0x2e>
 8008ca2:	e01a      	b.n	8008cda <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008ca4:	78fb      	ldrb	r3, [r7, #3]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d115      	bne.n	8008cd6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	68db      	ldr	r3, [r3, #12]
 8008cae:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008cb6:	2001      	movs	r0, #1
 8008cb8:	f7fa fbaa 	bl	8003410 <HAL_Delay>
      ms++;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	3301      	adds	r3, #1
 8008cc0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 f9f4 	bl	80090b0 <USB_GetMode>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d005      	beq.n	8008cda <USB_SetCurrentMode+0x84>
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	2b31      	cmp	r3, #49	@ 0x31
 8008cd2:	d9f0      	bls.n	8008cb6 <USB_SetCurrentMode+0x60>
 8008cd4:	e001      	b.n	8008cda <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	e005      	b.n	8008ce6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	2b32      	cmp	r3, #50	@ 0x32
 8008cde:	d101      	bne.n	8008ce4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	e000      	b.n	8008ce6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008ce4:	2300      	movs	r3, #0
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3710      	adds	r7, #16
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}
	...

08008cf0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008cf0:	b084      	sub	sp, #16
 8008cf2:	b580      	push	{r7, lr}
 8008cf4:	b086      	sub	sp, #24
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	6078      	str	r0, [r7, #4]
 8008cfa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008cfe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008d02:	2300      	movs	r3, #0
 8008d04:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	613b      	str	r3, [r7, #16]
 8008d0e:	e009      	b.n	8008d24 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008d10:	687a      	ldr	r2, [r7, #4]
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	3340      	adds	r3, #64	@ 0x40
 8008d16:	009b      	lsls	r3, r3, #2
 8008d18:	4413      	add	r3, r2
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	3301      	adds	r3, #1
 8008d22:	613b      	str	r3, [r7, #16]
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	2b0e      	cmp	r3, #14
 8008d28:	d9f2      	bls.n	8008d10 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008d2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d11c      	bne.n	8008d6a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	68fa      	ldr	r2, [r7, #12]
 8008d3a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008d3e:	f043 0302 	orr.w	r3, r3, #2
 8008d42:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d48:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	601a      	str	r2, [r3, #0]
 8008d68:	e005      	b.n	8008d76 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d6e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008d7c:	461a      	mov	r2, r3
 8008d7e:	2300      	movs	r3, #0
 8008d80:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008d82:	2103      	movs	r1, #3
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f000 f959 	bl	800903c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008d8a:	2110      	movs	r1, #16
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f000 f8f1 	bl	8008f74 <USB_FlushTxFifo>
 8008d92:	4603      	mov	r3, r0
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d001      	beq.n	8008d9c <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8008d98:	2301      	movs	r3, #1
 8008d9a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f000 f91d 	bl	8008fdc <USB_FlushRxFifo>
 8008da2:	4603      	mov	r3, r0
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d001      	beq.n	8008dac <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8008da8:	2301      	movs	r3, #1
 8008daa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008db2:	461a      	mov	r2, r3
 8008db4:	2300      	movs	r3, #0
 8008db6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008dbe:	461a      	mov	r2, r3
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008dca:	461a      	mov	r2, r3
 8008dcc:	2300      	movs	r3, #0
 8008dce:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	613b      	str	r3, [r7, #16]
 8008dd4:	e043      	b.n	8008e5e <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	015a      	lsls	r2, r3, #5
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	4413      	add	r3, r2
 8008dde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008de8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008dec:	d118      	bne.n	8008e20 <USB_DevInit+0x130>
    {
      if (i == 0U)
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d10a      	bne.n	8008e0a <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	015a      	lsls	r2, r3, #5
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	4413      	add	r3, r2
 8008dfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e00:	461a      	mov	r2, r3
 8008e02:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008e06:	6013      	str	r3, [r2, #0]
 8008e08:	e013      	b.n	8008e32 <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	015a      	lsls	r2, r3, #5
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	4413      	add	r3, r2
 8008e12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e16:	461a      	mov	r2, r3
 8008e18:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008e1c:	6013      	str	r3, [r2, #0]
 8008e1e:	e008      	b.n	8008e32 <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	015a      	lsls	r2, r3, #5
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	4413      	add	r3, r2
 8008e28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	2300      	movs	r3, #0
 8008e30:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008e32:	693b      	ldr	r3, [r7, #16]
 8008e34:	015a      	lsls	r2, r3, #5
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	4413      	add	r3, r2
 8008e3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e3e:	461a      	mov	r2, r3
 8008e40:	2300      	movs	r3, #0
 8008e42:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	015a      	lsls	r2, r3, #5
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	4413      	add	r3, r2
 8008e4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e50:	461a      	mov	r2, r3
 8008e52:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008e56:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	3301      	adds	r3, #1
 8008e5c:	613b      	str	r3, [r7, #16]
 8008e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e60:	693a      	ldr	r2, [r7, #16]
 8008e62:	429a      	cmp	r2, r3
 8008e64:	d3b7      	bcc.n	8008dd6 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e66:	2300      	movs	r3, #0
 8008e68:	613b      	str	r3, [r7, #16]
 8008e6a:	e043      	b.n	8008ef4 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	015a      	lsls	r2, r3, #5
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	4413      	add	r3, r2
 8008e74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008e7e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008e82:	d118      	bne.n	8008eb6 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d10a      	bne.n	8008ea0 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	015a      	lsls	r2, r3, #5
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	4413      	add	r3, r2
 8008e92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e96:	461a      	mov	r2, r3
 8008e98:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008e9c:	6013      	str	r3, [r2, #0]
 8008e9e:	e013      	b.n	8008ec8 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008ea0:	693b      	ldr	r3, [r7, #16]
 8008ea2:	015a      	lsls	r2, r3, #5
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	4413      	add	r3, r2
 8008ea8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008eac:	461a      	mov	r2, r3
 8008eae:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008eb2:	6013      	str	r3, [r2, #0]
 8008eb4:	e008      	b.n	8008ec8 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	015a      	lsls	r2, r3, #5
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	4413      	add	r3, r2
 8008ebe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ec2:	461a      	mov	r2, r3
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	015a      	lsls	r2, r3, #5
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	4413      	add	r3, r2
 8008ed0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ed4:	461a      	mov	r2, r3
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	015a      	lsls	r2, r3, #5
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	4413      	add	r3, r2
 8008ee2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ee6:	461a      	mov	r2, r3
 8008ee8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008eec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	3301      	adds	r3, #1
 8008ef2:	613b      	str	r3, [r7, #16]
 8008ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ef6:	693a      	ldr	r2, [r7, #16]
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	d3b7      	bcc.n	8008e6c <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f02:	691b      	ldr	r3, [r3, #16]
 8008f04:	68fa      	ldr	r2, [r7, #12]
 8008f06:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008f0a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008f0e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2200      	movs	r2, #0
 8008f14:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008f1c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	699b      	ldr	r3, [r3, #24]
 8008f22:	f043 0210 	orr.w	r2, r3, #16
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	699a      	ldr	r2, [r3, #24]
 8008f2e:	4b10      	ldr	r3, [pc, #64]	@ (8008f70 <USB_DevInit+0x280>)
 8008f30:	4313      	orrs	r3, r2
 8008f32:	687a      	ldr	r2, [r7, #4]
 8008f34:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008f36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d005      	beq.n	8008f48 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	699b      	ldr	r3, [r3, #24]
 8008f40:	f043 0208 	orr.w	r2, r3, #8
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008f48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f4a:	2b01      	cmp	r3, #1
 8008f4c:	d107      	bne.n	8008f5e <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	699b      	ldr	r3, [r3, #24]
 8008f52:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008f56:	f043 0304 	orr.w	r3, r3, #4
 8008f5a:	687a      	ldr	r2, [r7, #4]
 8008f5c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008f5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	3718      	adds	r7, #24
 8008f64:	46bd      	mov	sp, r7
 8008f66:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008f6a:	b004      	add	sp, #16
 8008f6c:	4770      	bx	lr
 8008f6e:	bf00      	nop
 8008f70:	803c3800 	.word	0x803c3800

08008f74 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008f74:	b480      	push	{r7}
 8008f76:	b085      	sub	sp, #20
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
 8008f7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	3301      	adds	r3, #1
 8008f86:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	4a13      	ldr	r2, [pc, #76]	@ (8008fd8 <USB_FlushTxFifo+0x64>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d901      	bls.n	8008f94 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008f90:	2303      	movs	r3, #3
 8008f92:	e01b      	b.n	8008fcc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	691b      	ldr	r3, [r3, #16]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	daf2      	bge.n	8008f82 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	019b      	lsls	r3, r3, #6
 8008fa4:	f043 0220 	orr.w	r2, r3, #32
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	3301      	adds	r3, #1
 8008fb0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	4a08      	ldr	r2, [pc, #32]	@ (8008fd8 <USB_FlushTxFifo+0x64>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d901      	bls.n	8008fbe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008fba:	2303      	movs	r3, #3
 8008fbc:	e006      	b.n	8008fcc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	691b      	ldr	r3, [r3, #16]
 8008fc2:	f003 0320 	and.w	r3, r3, #32
 8008fc6:	2b20      	cmp	r3, #32
 8008fc8:	d0f0      	beq.n	8008fac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008fca:	2300      	movs	r3, #0
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3714      	adds	r7, #20
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr
 8008fd8:	00030d40 	.word	0x00030d40

08008fdc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b085      	sub	sp, #20
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	3301      	adds	r3, #1
 8008fec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	4a11      	ldr	r2, [pc, #68]	@ (8009038 <USB_FlushRxFifo+0x5c>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d901      	bls.n	8008ffa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008ff6:	2303      	movs	r3, #3
 8008ff8:	e018      	b.n	800902c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	691b      	ldr	r3, [r3, #16]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	daf2      	bge.n	8008fe8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009002:	2300      	movs	r3, #0
 8009004:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2210      	movs	r2, #16
 800900a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	3301      	adds	r3, #1
 8009010:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	4a08      	ldr	r2, [pc, #32]	@ (8009038 <USB_FlushRxFifo+0x5c>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d901      	bls.n	800901e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800901a:	2303      	movs	r3, #3
 800901c:	e006      	b.n	800902c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	691b      	ldr	r3, [r3, #16]
 8009022:	f003 0310 	and.w	r3, r3, #16
 8009026:	2b10      	cmp	r3, #16
 8009028:	d0f0      	beq.n	800900c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800902a:	2300      	movs	r3, #0
}
 800902c:	4618      	mov	r0, r3
 800902e:	3714      	adds	r7, #20
 8009030:	46bd      	mov	sp, r7
 8009032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009036:	4770      	bx	lr
 8009038:	00030d40 	.word	0x00030d40

0800903c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800903c:	b480      	push	{r7}
 800903e:	b085      	sub	sp, #20
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	460b      	mov	r3, r1
 8009046:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009052:	681a      	ldr	r2, [r3, #0]
 8009054:	78fb      	ldrb	r3, [r7, #3]
 8009056:	68f9      	ldr	r1, [r7, #12]
 8009058:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800905c:	4313      	orrs	r3, r2
 800905e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009060:	2300      	movs	r3, #0
}
 8009062:	4618      	mov	r0, r3
 8009064:	3714      	adds	r7, #20
 8009066:	46bd      	mov	sp, r7
 8009068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906c:	4770      	bx	lr

0800906e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800906e:	b480      	push	{r7}
 8009070:	b085      	sub	sp, #20
 8009072:	af00      	add	r7, sp, #0
 8009074:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	68fa      	ldr	r2, [r7, #12]
 8009084:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009088:	f023 0303 	bic.w	r3, r3, #3
 800908c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	68fa      	ldr	r2, [r7, #12]
 8009098:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800909c:	f043 0302 	orr.w	r3, r3, #2
 80090a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80090a2:	2300      	movs	r3, #0
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3714      	adds	r7, #20
 80090a8:	46bd      	mov	sp, r7
 80090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ae:	4770      	bx	lr

080090b0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b083      	sub	sp, #12
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	695b      	ldr	r3, [r3, #20]
 80090bc:	f003 0301 	and.w	r3, r3, #1
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	370c      	adds	r7, #12
 80090c4:	46bd      	mov	sp, r7
 80090c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ca:	4770      	bx	lr

080090cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80090cc:	b480      	push	{r7}
 80090ce:	b085      	sub	sp, #20
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80090d4:	2300      	movs	r3, #0
 80090d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	3301      	adds	r3, #1
 80090dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	4a13      	ldr	r2, [pc, #76]	@ (8009130 <USB_CoreReset+0x64>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d901      	bls.n	80090ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80090e6:	2303      	movs	r3, #3
 80090e8:	e01b      	b.n	8009122 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	691b      	ldr	r3, [r3, #16]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	daf2      	bge.n	80090d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80090f2:	2300      	movs	r3, #0
 80090f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	691b      	ldr	r3, [r3, #16]
 80090fa:	f043 0201 	orr.w	r2, r3, #1
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	3301      	adds	r3, #1
 8009106:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	4a09      	ldr	r2, [pc, #36]	@ (8009130 <USB_CoreReset+0x64>)
 800910c:	4293      	cmp	r3, r2
 800910e:	d901      	bls.n	8009114 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009110:	2303      	movs	r3, #3
 8009112:	e006      	b.n	8009122 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	691b      	ldr	r3, [r3, #16]
 8009118:	f003 0301 	and.w	r3, r3, #1
 800911c:	2b01      	cmp	r3, #1
 800911e:	d0f0      	beq.n	8009102 <USB_CoreReset+0x36>

  return HAL_OK;
 8009120:	2300      	movs	r3, #0
}
 8009122:	4618      	mov	r0, r3
 8009124:	3714      	adds	r7, #20
 8009126:	46bd      	mov	sp, r7
 8009128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912c:	4770      	bx	lr
 800912e:	bf00      	nop
 8009130:	00030d40 	.word	0x00030d40

08009134 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009134:	b480      	push	{r7}
 8009136:	b085      	sub	sp, #20
 8009138:	af00      	add	r7, sp, #0
 800913a:	4603      	mov	r3, r0
 800913c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800913e:	2300      	movs	r3, #0
 8009140:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009142:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009146:	2b84      	cmp	r3, #132	@ 0x84
 8009148:	d005      	beq.n	8009156 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800914a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	4413      	add	r3, r2
 8009152:	3303      	adds	r3, #3
 8009154:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009156:	68fb      	ldr	r3, [r7, #12]
}
 8009158:	4618      	mov	r0, r3
 800915a:	3714      	adds	r7, #20
 800915c:	46bd      	mov	sp, r7
 800915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009162:	4770      	bx	lr

08009164 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009164:	b480      	push	{r7}
 8009166:	b083      	sub	sp, #12
 8009168:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800916a:	f3ef 8305 	mrs	r3, IPSR
 800916e:	607b      	str	r3, [r7, #4]
  return(result);
 8009170:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009172:	2b00      	cmp	r3, #0
 8009174:	bf14      	ite	ne
 8009176:	2301      	movne	r3, #1
 8009178:	2300      	moveq	r3, #0
 800917a:	b2db      	uxtb	r3, r3
}
 800917c:	4618      	mov	r0, r3
 800917e:	370c      	adds	r7, #12
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr

08009188 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800918c:	f002 f890 	bl	800b2b0 <vTaskStartScheduler>
  
  return osOK;
 8009190:	2300      	movs	r3, #0
}
 8009192:	4618      	mov	r0, r3
 8009194:	bd80      	pop	{r7, pc}

08009196 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009196:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009198:	b089      	sub	sp, #36	@ 0x24
 800919a:	af04      	add	r7, sp, #16
 800919c:	6078      	str	r0, [r7, #4]
 800919e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	695b      	ldr	r3, [r3, #20]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d020      	beq.n	80091ea <osThreadCreate+0x54>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	699b      	ldr	r3, [r3, #24]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d01c      	beq.n	80091ea <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	685c      	ldr	r4, [r3, #4]
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	691e      	ldr	r6, [r3, #16]
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80091c2:	4618      	mov	r0, r3
 80091c4:	f7ff ffb6 	bl	8009134 <makeFreeRtosPriority>
 80091c8:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	695b      	ldr	r3, [r3, #20]
 80091ce:	687a      	ldr	r2, [r7, #4]
 80091d0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80091d2:	9202      	str	r2, [sp, #8]
 80091d4:	9301      	str	r3, [sp, #4]
 80091d6:	9100      	str	r1, [sp, #0]
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	4632      	mov	r2, r6
 80091dc:	4629      	mov	r1, r5
 80091de:	4620      	mov	r0, r4
 80091e0:	f001 fd36 	bl	800ac50 <xTaskCreateStatic>
 80091e4:	4603      	mov	r3, r0
 80091e6:	60fb      	str	r3, [r7, #12]
 80091e8:	e01c      	b.n	8009224 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	685c      	ldr	r4, [r3, #4]
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80091f6:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80091fe:	4618      	mov	r0, r3
 8009200:	f7ff ff98 	bl	8009134 <makeFreeRtosPriority>
 8009204:	4602      	mov	r2, r0
 8009206:	f107 030c 	add.w	r3, r7, #12
 800920a:	9301      	str	r3, [sp, #4]
 800920c:	9200      	str	r2, [sp, #0]
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	4632      	mov	r2, r6
 8009212:	4629      	mov	r1, r5
 8009214:	4620      	mov	r0, r4
 8009216:	f001 fd7b 	bl	800ad10 <xTaskCreate>
 800921a:	4603      	mov	r3, r0
 800921c:	2b01      	cmp	r3, #1
 800921e:	d001      	beq.n	8009224 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009220:	2300      	movs	r3, #0
 8009222:	e000      	b.n	8009226 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009224:	68fb      	ldr	r3, [r7, #12]
}
 8009226:	4618      	mov	r0, r3
 8009228:	3714      	adds	r7, #20
 800922a:	46bd      	mov	sp, r7
 800922c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800922e <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 800922e:	b580      	push	{r7, lr}
 8009230:	b082      	sub	sp, #8
 8009232:	af00      	add	r7, sp, #0
 8009234:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f001 fede 	bl	800aff8 <vTaskDelete>
  return osOK;
 800923c:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 800923e:	4618      	mov	r0, r3
 8009240:	3708      	adds	r7, #8
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}

08009246 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8009246:	b580      	push	{r7, lr}
 8009248:	b086      	sub	sp, #24
 800924a:	af02      	add	r7, sp, #8
 800924c:	6078      	str	r0, [r7, #4]
 800924e:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	685b      	ldr	r3, [r3, #4]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d00f      	beq.n	8009278 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	2b01      	cmp	r3, #1
 800925c:	d10a      	bne.n	8009274 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	685b      	ldr	r3, [r3, #4]
 8009262:	2203      	movs	r2, #3
 8009264:	9200      	str	r2, [sp, #0]
 8009266:	2200      	movs	r2, #0
 8009268:	2100      	movs	r1, #0
 800926a:	2001      	movs	r0, #1
 800926c:	f000 fa46 	bl	80096fc <xQueueGenericCreateStatic>
 8009270:	4603      	mov	r3, r0
 8009272:	e016      	b.n	80092a2 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8009274:	2300      	movs	r3, #0
 8009276:	e014      	b.n	80092a2 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	2b01      	cmp	r3, #1
 800927c:	d110      	bne.n	80092a0 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800927e:	2203      	movs	r2, #3
 8009280:	2100      	movs	r1, #0
 8009282:	2001      	movs	r0, #1
 8009284:	f000 fae0 	bl	8009848 <xQueueGenericCreate>
 8009288:	60f8      	str	r0, [r7, #12]
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d005      	beq.n	800929c <osSemaphoreCreate+0x56>
 8009290:	2300      	movs	r3, #0
 8009292:	2200      	movs	r2, #0
 8009294:	2100      	movs	r1, #0
 8009296:	68f8      	ldr	r0, [r7, #12]
 8009298:	f000 fb8e 	bl	80099b8 <xQueueGenericSend>
      return sema;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	e000      	b.n	80092a2 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80092a0:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	3710      	adds	r7, #16
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}
	...

080092ac <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b084      	sub	sp, #16
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80092b6:	2300      	movs	r3, #0
 80092b8:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d101      	bne.n	80092c4 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80092c0:	2380      	movs	r3, #128	@ 0x80
 80092c2:	e03a      	b.n	800933a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80092c4:	2300      	movs	r3, #0
 80092c6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092ce:	d103      	bne.n	80092d8 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80092d0:	f04f 33ff 	mov.w	r3, #4294967295
 80092d4:	60fb      	str	r3, [r7, #12]
 80092d6:	e009      	b.n	80092ec <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d006      	beq.n	80092ec <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d101      	bne.n	80092ec <osSemaphoreWait+0x40>
      ticks = 1;
 80092e8:	2301      	movs	r3, #1
 80092ea:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80092ec:	f7ff ff3a 	bl	8009164 <inHandlerMode>
 80092f0:	4603      	mov	r3, r0
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d017      	beq.n	8009326 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80092f6:	f107 0308 	add.w	r3, r7, #8
 80092fa:	461a      	mov	r2, r3
 80092fc:	2100      	movs	r1, #0
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f001 fa46 	bl	800a790 <xQueueReceiveFromISR>
 8009304:	4603      	mov	r3, r0
 8009306:	2b01      	cmp	r3, #1
 8009308:	d001      	beq.n	800930e <osSemaphoreWait+0x62>
      return osErrorOS;
 800930a:	23ff      	movs	r3, #255	@ 0xff
 800930c:	e015      	b.n	800933a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d011      	beq.n	8009338 <osSemaphoreWait+0x8c>
 8009314:	4b0b      	ldr	r3, [pc, #44]	@ (8009344 <osSemaphoreWait+0x98>)
 8009316:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800931a:	601a      	str	r2, [r3, #0]
 800931c:	f3bf 8f4f 	dsb	sy
 8009320:	f3bf 8f6f 	isb	sy
 8009324:	e008      	b.n	8009338 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8009326:	68f9      	ldr	r1, [r7, #12]
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f001 f861 	bl	800a3f0 <xQueueSemaphoreTake>
 800932e:	4603      	mov	r3, r0
 8009330:	2b01      	cmp	r3, #1
 8009332:	d001      	beq.n	8009338 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8009334:	23ff      	movs	r3, #255	@ 0xff
 8009336:	e000      	b.n	800933a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8009338:	2300      	movs	r3, #0
}
 800933a:	4618      	mov	r0, r3
 800933c:	3710      	adds	r7, #16
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}
 8009342:	bf00      	nop
 8009344:	e000ed04 	.word	0xe000ed04

08009348 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b084      	sub	sp, #16
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8009350:	2300      	movs	r3, #0
 8009352:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009354:	2300      	movs	r3, #0
 8009356:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8009358:	f7ff ff04 	bl	8009164 <inHandlerMode>
 800935c:	4603      	mov	r3, r0
 800935e:	2b00      	cmp	r3, #0
 8009360:	d016      	beq.n	8009390 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8009362:	f107 0308 	add.w	r3, r7, #8
 8009366:	4619      	mov	r1, r3
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f000 fdbf 	bl	8009eec <xQueueGiveFromISR>
 800936e:	4603      	mov	r3, r0
 8009370:	2b01      	cmp	r3, #1
 8009372:	d001      	beq.n	8009378 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8009374:	23ff      	movs	r3, #255	@ 0xff
 8009376:	e017      	b.n	80093a8 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d013      	beq.n	80093a6 <osSemaphoreRelease+0x5e>
 800937e:	4b0c      	ldr	r3, [pc, #48]	@ (80093b0 <osSemaphoreRelease+0x68>)
 8009380:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009384:	601a      	str	r2, [r3, #0]
 8009386:	f3bf 8f4f 	dsb	sy
 800938a:	f3bf 8f6f 	isb	sy
 800938e:	e00a      	b.n	80093a6 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8009390:	2300      	movs	r3, #0
 8009392:	2200      	movs	r2, #0
 8009394:	2100      	movs	r1, #0
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 fb0e 	bl	80099b8 <xQueueGenericSend>
 800939c:	4603      	mov	r3, r0
 800939e:	2b01      	cmp	r3, #1
 80093a0:	d001      	beq.n	80093a6 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80093a2:	23ff      	movs	r3, #255	@ 0xff
 80093a4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80093a6:	68fb      	ldr	r3, [r7, #12]
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	3710      	adds	r7, #16
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}
 80093b0:	e000ed04 	.word	0xe000ed04

080093b4 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b086      	sub	sp, #24
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	685b      	ldr	r3, [r3, #4]
 80093c0:	3303      	adds	r3, #3
 80093c2:	f023 0303 	bic.w	r3, r3, #3
 80093c6:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 80093c8:	2014      	movs	r0, #20
 80093ca:	f003 fc27 	bl	800cc1c <pvPortMalloc>
 80093ce:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 80093d0:	697b      	ldr	r3, [r7, #20]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d046      	beq.n	8009464 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681a      	ldr	r2, [r3, #0]
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 80093de:	68fa      	ldr	r2, [r7, #12]
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	2200      	movs	r2, #0
 80093e8:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	4618      	mov	r0, r3
 80093f0:	f003 fc14 	bl	800cc1c <pvPortMalloc>
 80093f4:	4602      	mov	r2, r0
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	685b      	ldr	r3, [r3, #4]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d02b      	beq.n	800945a <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	68fa      	ldr	r2, [r7, #12]
 8009408:	fb02 f303 	mul.w	r3, r2, r3
 800940c:	4618      	mov	r0, r3
 800940e:	f003 fc05 	bl	800cc1c <pvPortMalloc>
 8009412:	4602      	mov	r2, r0
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d011      	beq.n	8009444 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8009420:	2300      	movs	r3, #0
 8009422:	613b      	str	r3, [r7, #16]
 8009424:	e008      	b.n	8009438 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	685a      	ldr	r2, [r3, #4]
 800942a:	693b      	ldr	r3, [r7, #16]
 800942c:	4413      	add	r3, r2
 800942e:	2200      	movs	r2, #0
 8009430:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 8009432:	693b      	ldr	r3, [r7, #16]
 8009434:	3301      	adds	r3, #1
 8009436:	613b      	str	r3, [r7, #16]
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	693a      	ldr	r2, [r7, #16]
 800943e:	429a      	cmp	r2, r3
 8009440:	d3f1      	bcc.n	8009426 <osPoolCreate+0x72>
 8009442:	e00f      	b.n	8009464 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8009444:	697b      	ldr	r3, [r7, #20]
 8009446:	685b      	ldr	r3, [r3, #4]
 8009448:	4618      	mov	r0, r3
 800944a:	f003 fccd 	bl	800cde8 <vPortFree>
        vPortFree(thePool);
 800944e:	6978      	ldr	r0, [r7, #20]
 8009450:	f003 fcca 	bl	800cde8 <vPortFree>
        thePool = NULL;
 8009454:	2300      	movs	r3, #0
 8009456:	617b      	str	r3, [r7, #20]
 8009458:	e004      	b.n	8009464 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 800945a:	6978      	ldr	r0, [r7, #20]
 800945c:	f003 fcc4 	bl	800cde8 <vPortFree>
      thePool = NULL;
 8009460:	2300      	movs	r3, #0
 8009462:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8009464:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 8009466:	4618      	mov	r0, r3
 8009468:	3718      	adds	r7, #24
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}

0800946e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800946e:	b590      	push	{r4, r7, lr}
 8009470:	b085      	sub	sp, #20
 8009472:	af02      	add	r7, sp, #8
 8009474:	6078      	str	r0, [r7, #4]
 8009476:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	689b      	ldr	r3, [r3, #8]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d011      	beq.n	80094a4 <osMessageCreate+0x36>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	68db      	ldr	r3, [r3, #12]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d00d      	beq.n	80094a4 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6818      	ldr	r0, [r3, #0]
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6859      	ldr	r1, [r3, #4]
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	689a      	ldr	r2, [r3, #8]
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	68db      	ldr	r3, [r3, #12]
 8009498:	2400      	movs	r4, #0
 800949a:	9400      	str	r4, [sp, #0]
 800949c:	f000 f92e 	bl	80096fc <xQueueGenericCreateStatic>
 80094a0:	4603      	mov	r3, r0
 80094a2:	e008      	b.n	80094b6 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6818      	ldr	r0, [r3, #0]
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	685b      	ldr	r3, [r3, #4]
 80094ac:	2200      	movs	r2, #0
 80094ae:	4619      	mov	r1, r3
 80094b0:	f000 f9ca 	bl	8009848 <xQueueGenericCreate>
 80094b4:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	370c      	adds	r7, #12
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd90      	pop	{r4, r7, pc}

080094be <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80094be:	b480      	push	{r7}
 80094c0:	b083      	sub	sp, #12
 80094c2:	af00      	add	r7, sp, #0
 80094c4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f103 0208 	add.w	r2, r3, #8
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f04f 32ff 	mov.w	r2, #4294967295
 80094d6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f103 0208 	add.w	r2, r3, #8
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	f103 0208 	add.w	r2, r3, #8
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2200      	movs	r2, #0
 80094f0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80094f2:	bf00      	nop
 80094f4:	370c      	adds	r7, #12
 80094f6:	46bd      	mov	sp, r7
 80094f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fc:	4770      	bx	lr

080094fe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80094fe:	b480      	push	{r7}
 8009500:	b083      	sub	sp, #12
 8009502:	af00      	add	r7, sp, #0
 8009504:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2200      	movs	r2, #0
 800950a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800950c:	bf00      	nop
 800950e:	370c      	adds	r7, #12
 8009510:	46bd      	mov	sp, r7
 8009512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009516:	4770      	bx	lr

08009518 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009518:	b480      	push	{r7}
 800951a:	b085      	sub	sp, #20
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	685b      	ldr	r3, [r3, #4]
 8009526:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	68fa      	ldr	r2, [r7, #12]
 800952c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	689a      	ldr	r2, [r3, #8]
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	689b      	ldr	r3, [r3, #8]
 800953a:	683a      	ldr	r2, [r7, #0]
 800953c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	683a      	ldr	r2, [r7, #0]
 8009542:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	687a      	ldr	r2, [r7, #4]
 8009548:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	1c5a      	adds	r2, r3, #1
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	601a      	str	r2, [r3, #0]
}
 8009554:	bf00      	nop
 8009556:	3714      	adds	r7, #20
 8009558:	46bd      	mov	sp, r7
 800955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955e:	4770      	bx	lr

08009560 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009560:	b480      	push	{r7}
 8009562:	b085      	sub	sp, #20
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
 8009568:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009576:	d103      	bne.n	8009580 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	691b      	ldr	r3, [r3, #16]
 800957c:	60fb      	str	r3, [r7, #12]
 800957e:	e00c      	b.n	800959a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	3308      	adds	r3, #8
 8009584:	60fb      	str	r3, [r7, #12]
 8009586:	e002      	b.n	800958e <vListInsert+0x2e>
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	685b      	ldr	r3, [r3, #4]
 800958c:	60fb      	str	r3, [r7, #12]
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	685b      	ldr	r3, [r3, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	68ba      	ldr	r2, [r7, #8]
 8009596:	429a      	cmp	r2, r3
 8009598:	d2f6      	bcs.n	8009588 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	685a      	ldr	r2, [r3, #4]
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	685b      	ldr	r3, [r3, #4]
 80095a6:	683a      	ldr	r2, [r7, #0]
 80095a8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	68fa      	ldr	r2, [r7, #12]
 80095ae:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	683a      	ldr	r2, [r7, #0]
 80095b4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	687a      	ldr	r2, [r7, #4]
 80095ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	1c5a      	adds	r2, r3, #1
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	601a      	str	r2, [r3, #0]
}
 80095c6:	bf00      	nop
 80095c8:	3714      	adds	r7, #20
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr

080095d2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80095d2:	b480      	push	{r7}
 80095d4:	b085      	sub	sp, #20
 80095d6:	af00      	add	r7, sp, #0
 80095d8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	691b      	ldr	r3, [r3, #16]
 80095de:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	685b      	ldr	r3, [r3, #4]
 80095e4:	687a      	ldr	r2, [r7, #4]
 80095e6:	6892      	ldr	r2, [r2, #8]
 80095e8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	689b      	ldr	r3, [r3, #8]
 80095ee:	687a      	ldr	r2, [r7, #4]
 80095f0:	6852      	ldr	r2, [r2, #4]
 80095f2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	685b      	ldr	r3, [r3, #4]
 80095f8:	687a      	ldr	r2, [r7, #4]
 80095fa:	429a      	cmp	r2, r3
 80095fc:	d103      	bne.n	8009606 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	689a      	ldr	r2, [r3, #8]
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2200      	movs	r2, #0
 800960a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	1e5a      	subs	r2, r3, #1
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
}
 800961a:	4618      	mov	r0, r3
 800961c:	3714      	adds	r7, #20
 800961e:	46bd      	mov	sp, r7
 8009620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009624:	4770      	bx	lr
	...

08009628 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b084      	sub	sp, #16
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
 8009630:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d10b      	bne.n	8009654 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800963c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009640:	f383 8811 	msr	BASEPRI, r3
 8009644:	f3bf 8f6f 	isb	sy
 8009648:	f3bf 8f4f 	dsb	sy
 800964c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800964e:	bf00      	nop
 8009650:	bf00      	nop
 8009652:	e7fd      	b.n	8009650 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009654:	f003 f9ba 	bl	800c9cc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681a      	ldr	r2, [r3, #0]
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009660:	68f9      	ldr	r1, [r7, #12]
 8009662:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009664:	fb01 f303 	mul.w	r3, r1, r3
 8009668:	441a      	add	r2, r3
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	2200      	movs	r2, #0
 8009672:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681a      	ldr	r2, [r3, #0]
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681a      	ldr	r2, [r3, #0]
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009684:	3b01      	subs	r3, #1
 8009686:	68f9      	ldr	r1, [r7, #12]
 8009688:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800968a:	fb01 f303 	mul.w	r3, r1, r3
 800968e:	441a      	add	r2, r3
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	22ff      	movs	r2, #255	@ 0xff
 8009698:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	22ff      	movs	r2, #255	@ 0xff
 80096a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d114      	bne.n	80096d4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	691b      	ldr	r3, [r3, #16]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d01a      	beq.n	80096e8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	3310      	adds	r3, #16
 80096b6:	4618      	mov	r0, r3
 80096b8:	f002 f8f4 	bl	800b8a4 <xTaskRemoveFromEventList>
 80096bc:	4603      	mov	r3, r0
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d012      	beq.n	80096e8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80096c2:	4b0d      	ldr	r3, [pc, #52]	@ (80096f8 <xQueueGenericReset+0xd0>)
 80096c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80096c8:	601a      	str	r2, [r3, #0]
 80096ca:	f3bf 8f4f 	dsb	sy
 80096ce:	f3bf 8f6f 	isb	sy
 80096d2:	e009      	b.n	80096e8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	3310      	adds	r3, #16
 80096d8:	4618      	mov	r0, r3
 80096da:	f7ff fef0 	bl	80094be <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	3324      	adds	r3, #36	@ 0x24
 80096e2:	4618      	mov	r0, r3
 80096e4:	f7ff feeb 	bl	80094be <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80096e8:	f003 f9a2 	bl	800ca30 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80096ec:	2301      	movs	r3, #1
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3710      	adds	r7, #16
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}
 80096f6:	bf00      	nop
 80096f8:	e000ed04 	.word	0xe000ed04

080096fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b08e      	sub	sp, #56	@ 0x38
 8009700:	af02      	add	r7, sp, #8
 8009702:	60f8      	str	r0, [r7, #12]
 8009704:	60b9      	str	r1, [r7, #8]
 8009706:	607a      	str	r2, [r7, #4]
 8009708:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d10b      	bne.n	8009728 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009714:	f383 8811 	msr	BASEPRI, r3
 8009718:	f3bf 8f6f 	isb	sy
 800971c:	f3bf 8f4f 	dsb	sy
 8009720:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009722:	bf00      	nop
 8009724:	bf00      	nop
 8009726:	e7fd      	b.n	8009724 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d10b      	bne.n	8009746 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800972e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009732:	f383 8811 	msr	BASEPRI, r3
 8009736:	f3bf 8f6f 	isb	sy
 800973a:	f3bf 8f4f 	dsb	sy
 800973e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009740:	bf00      	nop
 8009742:	bf00      	nop
 8009744:	e7fd      	b.n	8009742 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d002      	beq.n	8009752 <xQueueGenericCreateStatic+0x56>
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d001      	beq.n	8009756 <xQueueGenericCreateStatic+0x5a>
 8009752:	2301      	movs	r3, #1
 8009754:	e000      	b.n	8009758 <xQueueGenericCreateStatic+0x5c>
 8009756:	2300      	movs	r3, #0
 8009758:	2b00      	cmp	r3, #0
 800975a:	d10b      	bne.n	8009774 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800975c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009760:	f383 8811 	msr	BASEPRI, r3
 8009764:	f3bf 8f6f 	isb	sy
 8009768:	f3bf 8f4f 	dsb	sy
 800976c:	623b      	str	r3, [r7, #32]
}
 800976e:	bf00      	nop
 8009770:	bf00      	nop
 8009772:	e7fd      	b.n	8009770 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d102      	bne.n	8009780 <xQueueGenericCreateStatic+0x84>
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d101      	bne.n	8009784 <xQueueGenericCreateStatic+0x88>
 8009780:	2301      	movs	r3, #1
 8009782:	e000      	b.n	8009786 <xQueueGenericCreateStatic+0x8a>
 8009784:	2300      	movs	r3, #0
 8009786:	2b00      	cmp	r3, #0
 8009788:	d10b      	bne.n	80097a2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800978a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800978e:	f383 8811 	msr	BASEPRI, r3
 8009792:	f3bf 8f6f 	isb	sy
 8009796:	f3bf 8f4f 	dsb	sy
 800979a:	61fb      	str	r3, [r7, #28]
}
 800979c:	bf00      	nop
 800979e:	bf00      	nop
 80097a0:	e7fd      	b.n	800979e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80097a2:	2350      	movs	r3, #80	@ 0x50
 80097a4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	2b50      	cmp	r3, #80	@ 0x50
 80097aa:	d00b      	beq.n	80097c4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80097ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097b0:	f383 8811 	msr	BASEPRI, r3
 80097b4:	f3bf 8f6f 	isb	sy
 80097b8:	f3bf 8f4f 	dsb	sy
 80097bc:	61bb      	str	r3, [r7, #24]
}
 80097be:	bf00      	nop
 80097c0:	bf00      	nop
 80097c2:	e7fd      	b.n	80097c0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80097c4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80097ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d00e      	beq.n	80097ee <xQueueGenericCreateStatic+0xf2>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80097d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097d2:	2201      	movs	r2, #1
 80097d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80097d8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80097dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097de:	9300      	str	r3, [sp, #0]
 80097e0:	4613      	mov	r3, r2
 80097e2:	687a      	ldr	r2, [r7, #4]
 80097e4:	68b9      	ldr	r1, [r7, #8]
 80097e6:	68f8      	ldr	r0, [r7, #12]
 80097e8:	f000 f892 	bl	8009910 <prvInitialiseNewQueue>
 80097ec:	e027      	b.n	800983e <xQueueGenericCreateStatic+0x142>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
 80097ee:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80097f2:	2b04      	cmp	r3, #4
 80097f4:	d823      	bhi.n	800983e <xQueueGenericCreateStatic+0x142>
 80097f6:	a201      	add	r2, pc, #4	@ (adr r2, 80097fc <xQueueGenericCreateStatic+0x100>)
 80097f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097fc:	08009811 	.word	0x08009811
 8009800:	08009829 	.word	0x08009829
 8009804:	0800983f 	.word	0x0800983f
 8009808:	0800981d 	.word	0x0800981d
 800980c:	08009835 	.word	0x08009835
 8009810:	68fa      	ldr	r2, [r7, #12]
 8009812:	2100      	movs	r1, #0
 8009814:	2041      	movs	r0, #65	@ 0x41
 8009816:	f004 f979 	bl	800db0c <xTraceEventCreate2>
 800981a:	e010      	b.n	800983e <xQueueGenericCreateStatic+0x142>
 800981c:	2200      	movs	r2, #0
 800981e:	2100      	movs	r1, #0
 8009820:	2042      	movs	r0, #66	@ 0x42
 8009822:	f004 f973 	bl	800db0c <xTraceEventCreate2>
 8009826:	e00a      	b.n	800983e <xQueueGenericCreateStatic+0x142>
 8009828:	2200      	movs	r2, #0
 800982a:	2100      	movs	r1, #0
 800982c:	2043      	movs	r0, #67	@ 0x43
 800982e:	f004 f96d 	bl	800db0c <xTraceEventCreate2>
 8009832:	e004      	b.n	800983e <xQueueGenericCreateStatic+0x142>
 8009834:	2200      	movs	r2, #0
 8009836:	2100      	movs	r1, #0
 8009838:	2047      	movs	r0, #71	@ 0x47
 800983a:	f004 f967 	bl	800db0c <xTraceEventCreate2>
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800983e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009840:	4618      	mov	r0, r3
 8009842:	3730      	adds	r7, #48	@ 0x30
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}

08009848 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009848:	b580      	push	{r7, lr}
 800984a:	b08a      	sub	sp, #40	@ 0x28
 800984c:	af02      	add	r7, sp, #8
 800984e:	60f8      	str	r0, [r7, #12]
 8009850:	60b9      	str	r1, [r7, #8]
 8009852:	4613      	mov	r3, r2
 8009854:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d10b      	bne.n	8009874 <xQueueGenericCreate+0x2c>
	__asm volatile
 800985c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009860:	f383 8811 	msr	BASEPRI, r3
 8009864:	f3bf 8f6f 	isb	sy
 8009868:	f3bf 8f4f 	dsb	sy
 800986c:	613b      	str	r3, [r7, #16]
}
 800986e:	bf00      	nop
 8009870:	bf00      	nop
 8009872:	e7fd      	b.n	8009870 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	68ba      	ldr	r2, [r7, #8]
 8009878:	fb02 f303 	mul.w	r3, r2, r3
 800987c:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800987e:	69fb      	ldr	r3, [r7, #28]
 8009880:	3350      	adds	r3, #80	@ 0x50
 8009882:	4618      	mov	r0, r3
 8009884:	f003 f9ca 	bl	800cc1c <pvPortMalloc>
 8009888:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800988a:	69bb      	ldr	r3, [r7, #24]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d012      	beq.n	80098b6 <xQueueGenericCreate+0x6e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009890:	69bb      	ldr	r3, [r7, #24]
 8009892:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	3350      	adds	r3, #80	@ 0x50
 8009898:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800989a:	69bb      	ldr	r3, [r7, #24]
 800989c:	2200      	movs	r2, #0
 800989e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80098a2:	79fa      	ldrb	r2, [r7, #7]
 80098a4:	69bb      	ldr	r3, [r7, #24]
 80098a6:	9300      	str	r3, [sp, #0]
 80098a8:	4613      	mov	r3, r2
 80098aa:	697a      	ldr	r2, [r7, #20]
 80098ac:	68b9      	ldr	r1, [r7, #8]
 80098ae:	68f8      	ldr	r0, [r7, #12]
 80098b0:	f000 f82e 	bl	8009910 <prvInitialiseNewQueue>
 80098b4:	e027      	b.n	8009906 <xQueueGenericCreate+0xbe>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
 80098b6:	79fb      	ldrb	r3, [r7, #7]
 80098b8:	2b04      	cmp	r3, #4
 80098ba:	d824      	bhi.n	8009906 <xQueueGenericCreate+0xbe>
 80098bc:	a201      	add	r2, pc, #4	@ (adr r2, 80098c4 <xQueueGenericCreate+0x7c>)
 80098be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098c2:	bf00      	nop
 80098c4:	080098d9 	.word	0x080098d9
 80098c8:	080098f1 	.word	0x080098f1
 80098cc:	08009907 	.word	0x08009907
 80098d0:	080098e5 	.word	0x080098e5
 80098d4:	080098fd 	.word	0x080098fd
 80098d8:	68fa      	ldr	r2, [r7, #12]
 80098da:	2100      	movs	r1, #0
 80098dc:	2041      	movs	r0, #65	@ 0x41
 80098de:	f004 f915 	bl	800db0c <xTraceEventCreate2>
 80098e2:	e010      	b.n	8009906 <xQueueGenericCreate+0xbe>
 80098e4:	2200      	movs	r2, #0
 80098e6:	2100      	movs	r1, #0
 80098e8:	2042      	movs	r0, #66	@ 0x42
 80098ea:	f004 f90f 	bl	800db0c <xTraceEventCreate2>
 80098ee:	e00a      	b.n	8009906 <xQueueGenericCreate+0xbe>
 80098f0:	2200      	movs	r2, #0
 80098f2:	2100      	movs	r1, #0
 80098f4:	2043      	movs	r0, #67	@ 0x43
 80098f6:	f004 f909 	bl	800db0c <xTraceEventCreate2>
 80098fa:	e004      	b.n	8009906 <xQueueGenericCreate+0xbe>
 80098fc:	2200      	movs	r2, #0
 80098fe:	2100      	movs	r1, #0
 8009900:	2047      	movs	r0, #71	@ 0x47
 8009902:	f004 f903 	bl	800db0c <xTraceEventCreate2>
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009906:	69bb      	ldr	r3, [r7, #24]
	}
 8009908:	4618      	mov	r0, r3
 800990a:	3720      	adds	r7, #32
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}

08009910 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b084      	sub	sp, #16
 8009914:	af00      	add	r7, sp, #0
 8009916:	60f8      	str	r0, [r7, #12]
 8009918:	60b9      	str	r1, [r7, #8]
 800991a:	607a      	str	r2, [r7, #4]
 800991c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d103      	bne.n	800992c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009924:	69bb      	ldr	r3, [r7, #24]
 8009926:	69ba      	ldr	r2, [r7, #24]
 8009928:	601a      	str	r2, [r3, #0]
 800992a:	e002      	b.n	8009932 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800992c:	69bb      	ldr	r3, [r7, #24]
 800992e:	687a      	ldr	r2, [r7, #4]
 8009930:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009932:	69bb      	ldr	r3, [r7, #24]
 8009934:	68fa      	ldr	r2, [r7, #12]
 8009936:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009938:	69bb      	ldr	r3, [r7, #24]
 800993a:	68ba      	ldr	r2, [r7, #8]
 800993c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800993e:	2101      	movs	r1, #1
 8009940:	69b8      	ldr	r0, [r7, #24]
 8009942:	f7ff fe71 	bl	8009628 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009946:	69bb      	ldr	r3, [r7, #24]
 8009948:	78fa      	ldrb	r2, [r7, #3]
 800994a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 800994e:	69bb      	ldr	r3, [r7, #24]
 8009950:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8009954:	2b04      	cmp	r3, #4
 8009956:	d828      	bhi.n	80099aa <prvInitialiseNewQueue+0x9a>
 8009958:	a201      	add	r2, pc, #4	@ (adr r2, 8009960 <prvInitialiseNewQueue+0x50>)
 800995a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800995e:	bf00      	nop
 8009960:	08009975 	.word	0x08009975
 8009964:	08009991 	.word	0x08009991
 8009968:	080099ab 	.word	0x080099ab
 800996c:	08009983 	.word	0x08009983
 8009970:	0800999f 	.word	0x0800999f
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	4a0f      	ldr	r2, [pc, #60]	@ (80099b4 <prvInitialiseNewQueue+0xa4>)
 8009978:	69b9      	ldr	r1, [r7, #24]
 800997a:	2011      	movs	r0, #17
 800997c:	f005 fb6e 	bl	800f05c <xTraceObjectRegisterWithoutHandle>
 8009980:	e013      	b.n	80099aa <prvInitialiseNewQueue+0x9a>
 8009982:	2300      	movs	r3, #0
 8009984:	4a0b      	ldr	r2, [pc, #44]	@ (80099b4 <prvInitialiseNewQueue+0xa4>)
 8009986:	69b9      	ldr	r1, [r7, #24]
 8009988:	2012      	movs	r0, #18
 800998a:	f005 fb67 	bl	800f05c <xTraceObjectRegisterWithoutHandle>
 800998e:	e00c      	b.n	80099aa <prvInitialiseNewQueue+0x9a>
 8009990:	2300      	movs	r3, #0
 8009992:	4a08      	ldr	r2, [pc, #32]	@ (80099b4 <prvInitialiseNewQueue+0xa4>)
 8009994:	69b9      	ldr	r1, [r7, #24]
 8009996:	2013      	movs	r0, #19
 8009998:	f005 fb60 	bl	800f05c <xTraceObjectRegisterWithoutHandle>
 800999c:	e005      	b.n	80099aa <prvInitialiseNewQueue+0x9a>
 800999e:	2300      	movs	r3, #0
 80099a0:	4a04      	ldr	r2, [pc, #16]	@ (80099b4 <prvInitialiseNewQueue+0xa4>)
 80099a2:	69b9      	ldr	r1, [r7, #24]
 80099a4:	2017      	movs	r0, #23
 80099a6:	f005 fb59 	bl	800f05c <xTraceObjectRegisterWithoutHandle>
}
 80099aa:	bf00      	nop
 80099ac:	3710      	adds	r7, #16
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}
 80099b2:	bf00      	nop
 80099b4:	08010f0c 	.word	0x08010f0c

080099b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b08e      	sub	sp, #56	@ 0x38
 80099bc:	af00      	add	r7, sp, #0
 80099be:	60f8      	str	r0, [r7, #12]
 80099c0:	60b9      	str	r1, [r7, #8]
 80099c2:	607a      	str	r2, [r7, #4]
 80099c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80099c6:	2300      	movs	r3, #0
 80099c8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80099ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d10b      	bne.n	80099ec <xQueueGenericSend+0x34>
	__asm volatile
 80099d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099d8:	f383 8811 	msr	BASEPRI, r3
 80099dc:	f3bf 8f6f 	isb	sy
 80099e0:	f3bf 8f4f 	dsb	sy
 80099e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80099e6:	bf00      	nop
 80099e8:	bf00      	nop
 80099ea:	e7fd      	b.n	80099e8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d103      	bne.n	80099fa <xQueueGenericSend+0x42>
 80099f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d101      	bne.n	80099fe <xQueueGenericSend+0x46>
 80099fa:	2301      	movs	r3, #1
 80099fc:	e000      	b.n	8009a00 <xQueueGenericSend+0x48>
 80099fe:	2300      	movs	r3, #0
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d10b      	bne.n	8009a1c <xQueueGenericSend+0x64>
	__asm volatile
 8009a04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a08:	f383 8811 	msr	BASEPRI, r3
 8009a0c:	f3bf 8f6f 	isb	sy
 8009a10:	f3bf 8f4f 	dsb	sy
 8009a14:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009a16:	bf00      	nop
 8009a18:	bf00      	nop
 8009a1a:	e7fd      	b.n	8009a18 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	2b02      	cmp	r3, #2
 8009a20:	d103      	bne.n	8009a2a <xQueueGenericSend+0x72>
 8009a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a26:	2b01      	cmp	r3, #1
 8009a28:	d101      	bne.n	8009a2e <xQueueGenericSend+0x76>
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	e000      	b.n	8009a30 <xQueueGenericSend+0x78>
 8009a2e:	2300      	movs	r3, #0
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d10b      	bne.n	8009a4c <xQueueGenericSend+0x94>
	__asm volatile
 8009a34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a38:	f383 8811 	msr	BASEPRI, r3
 8009a3c:	f3bf 8f6f 	isb	sy
 8009a40:	f3bf 8f4f 	dsb	sy
 8009a44:	623b      	str	r3, [r7, #32]
}
 8009a46:	bf00      	nop
 8009a48:	bf00      	nop
 8009a4a:	e7fd      	b.n	8009a48 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009a4c:	f002 f8f4 	bl	800bc38 <xTaskGetSchedulerState>
 8009a50:	4603      	mov	r3, r0
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d102      	bne.n	8009a5c <xQueueGenericSend+0xa4>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d101      	bne.n	8009a60 <xQueueGenericSend+0xa8>
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	e000      	b.n	8009a62 <xQueueGenericSend+0xaa>
 8009a60:	2300      	movs	r3, #0
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d10b      	bne.n	8009a7e <xQueueGenericSend+0xc6>
	__asm volatile
 8009a66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a6a:	f383 8811 	msr	BASEPRI, r3
 8009a6e:	f3bf 8f6f 	isb	sy
 8009a72:	f3bf 8f4f 	dsb	sy
 8009a76:	61fb      	str	r3, [r7, #28]
}
 8009a78:	bf00      	nop
 8009a7a:	bf00      	nop
 8009a7c:	e7fd      	b.n	8009a7a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009a7e:	f002 ffa5 	bl	800c9cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a8a:	429a      	cmp	r2, r3
 8009a8c:	d302      	bcc.n	8009a94 <xQueueGenericSend+0xdc>
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	2b02      	cmp	r3, #2
 8009a92:	d15d      	bne.n	8009b50 <xQueueGenericSend+0x198>
			{
				traceQUEUE_SEND( pxQueue );
 8009a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a96:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8009a9a:	2b04      	cmp	r3, #4
 8009a9c:	d82e      	bhi.n	8009afc <xQueueGenericSend+0x144>
 8009a9e:	a201      	add	r2, pc, #4	@ (adr r2, 8009aa4 <xQueueGenericSend+0xec>)
 8009aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aa4:	08009ab9 	.word	0x08009ab9
 8009aa8:	08009ae7 	.word	0x08009ae7
 8009aac:	08009ad5 	.word	0x08009ad5
 8009ab0:	08009ad5 	.word	0x08009ad5
 8009ab4:	08009af3 	.word	0x08009af3
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d101      	bne.n	8009ac2 <xQueueGenericSend+0x10a>
 8009abe:	2050      	movs	r0, #80	@ 0x50
 8009ac0:	e000      	b.n	8009ac4 <xQueueGenericSend+0x10c>
 8009ac2:	20c0      	movs	r0, #192	@ 0xc0
 8009ac4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009aca:	3301      	adds	r3, #1
 8009acc:	461a      	mov	r2, r3
 8009ace:	f004 f81d 	bl	800db0c <xTraceEventCreate2>
 8009ad2:	e013      	b.n	8009afc <xQueueGenericSend+0x144>
 8009ad4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ada:	3301      	adds	r3, #1
 8009adc:	461a      	mov	r2, r3
 8009ade:	2051      	movs	r0, #81	@ 0x51
 8009ae0:	f004 f814 	bl	800db0c <xTraceEventCreate2>
 8009ae4:	e00a      	b.n	8009afc <xQueueGenericSend+0x144>
 8009ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ae8:	4619      	mov	r1, r3
 8009aea:	2052      	movs	r0, #82	@ 0x52
 8009aec:	f003 ff8e 	bl	800da0c <xTraceEventCreate1>
 8009af0:	e004      	b.n	8009afc <xQueueGenericSend+0x144>
 8009af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009af4:	4619      	mov	r1, r3
 8009af6:	20c5      	movs	r0, #197	@ 0xc5
 8009af8:	f003 ff88 	bl	800da0c <xTraceEventCreate1>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009afc:	683a      	ldr	r2, [r7, #0]
 8009afe:	68b9      	ldr	r1, [r7, #8]
 8009b00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009b02:	f000 ff34 	bl	800a96e <prvCopyDataToQueue>
 8009b06:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d010      	beq.n	8009b32 <xQueueGenericSend+0x17a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b12:	3324      	adds	r3, #36	@ 0x24
 8009b14:	4618      	mov	r0, r3
 8009b16:	f001 fec5 	bl	800b8a4 <xTaskRemoveFromEventList>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d013      	beq.n	8009b48 <xQueueGenericSend+0x190>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009b20:	4b82      	ldr	r3, [pc, #520]	@ (8009d2c <xQueueGenericSend+0x374>)
 8009b22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b26:	601a      	str	r2, [r3, #0]
 8009b28:	f3bf 8f4f 	dsb	sy
 8009b2c:	f3bf 8f6f 	isb	sy
 8009b30:	e00a      	b.n	8009b48 <xQueueGenericSend+0x190>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009b32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d007      	beq.n	8009b48 <xQueueGenericSend+0x190>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009b38:	4b7c      	ldr	r3, [pc, #496]	@ (8009d2c <xQueueGenericSend+0x374>)
 8009b3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b3e:	601a      	str	r2, [r3, #0]
 8009b40:	f3bf 8f4f 	dsb	sy
 8009b44:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009b48:	f002 ff72 	bl	800ca30 <vPortExitCritical>
				return pdPASS;
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	e0e8      	b.n	8009d22 <xQueueGenericSend+0x36a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d130      	bne.n	8009bb8 <xQueueGenericSend+0x200>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009b56:	f002 ff6b 	bl	800ca30 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 8009b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b5c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8009b60:	2b04      	cmp	r3, #4
 8009b62:	d827      	bhi.n	8009bb4 <xQueueGenericSend+0x1fc>
 8009b64:	a201      	add	r2, pc, #4	@ (adr r2, 8009b6c <xQueueGenericSend+0x1b4>)
 8009b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b6a:	bf00      	nop
 8009b6c:	08009b81 	.word	0x08009b81
 8009b70:	08009bab 	.word	0x08009bab
 8009b74:	08009b9b 	.word	0x08009b9b
 8009b78:	08009b9b 	.word	0x08009b9b
 8009b7c:	08009bab 	.word	0x08009bab
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d101      	bne.n	8009b8a <xQueueGenericSend+0x1d2>
 8009b86:	2053      	movs	r0, #83	@ 0x53
 8009b88:	e000      	b.n	8009b8c <xQueueGenericSend+0x1d4>
 8009b8a:	20c1      	movs	r0, #193	@ 0xc1
 8009b8c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b92:	461a      	mov	r2, r3
 8009b94:	f003 ffba 	bl	800db0c <xTraceEventCreate2>
 8009b98:	e00c      	b.n	8009bb4 <xQueueGenericSend+0x1fc>
 8009b9a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ba0:	461a      	mov	r2, r3
 8009ba2:	2054      	movs	r0, #84	@ 0x54
 8009ba4:	f003 ffb2 	bl	800db0c <xTraceEventCreate2>
 8009ba8:	e004      	b.n	8009bb4 <xQueueGenericSend+0x1fc>
 8009baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bac:	4619      	mov	r1, r3
 8009bae:	2055      	movs	r0, #85	@ 0x55
 8009bb0:	f003 ff2c 	bl	800da0c <xTraceEventCreate1>
					return errQUEUE_FULL;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	e0b4      	b.n	8009d22 <xQueueGenericSend+0x36a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009bb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d106      	bne.n	8009bcc <xQueueGenericSend+0x214>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009bbe:	f107 0314 	add.w	r3, r7, #20
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f001 fed6 	bl	800b974 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009bc8:	2301      	movs	r3, #1
 8009bca:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009bcc:	f002 ff30 	bl	800ca30 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009bd0:	f001 fbea 	bl	800b3a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009bd4:	f002 fefa 	bl	800c9cc <vPortEnterCritical>
 8009bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bda:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009bde:	b25b      	sxtb	r3, r3
 8009be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009be4:	d103      	bne.n	8009bee <xQueueGenericSend+0x236>
 8009be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009be8:	2200      	movs	r2, #0
 8009bea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bf0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009bf4:	b25b      	sxtb	r3, r3
 8009bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bfa:	d103      	bne.n	8009c04 <xQueueGenericSend+0x24c>
 8009bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bfe:	2200      	movs	r2, #0
 8009c00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009c04:	f002 ff14 	bl	800ca30 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009c08:	1d3a      	adds	r2, r7, #4
 8009c0a:	f107 0314 	add.w	r3, r7, #20
 8009c0e:	4611      	mov	r1, r2
 8009c10:	4618      	mov	r0, r3
 8009c12:	f001 fec5 	bl	800b9a0 <xTaskCheckForTimeOut>
 8009c16:	4603      	mov	r3, r0
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d150      	bne.n	8009cbe <xQueueGenericSend+0x306>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009c1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009c1e:	f000 ff9e 	bl	800ab5e <prvIsQueueFull>
 8009c22:	4603      	mov	r3, r0
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d044      	beq.n	8009cb2 <xQueueGenericSend+0x2fa>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 8009c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c2a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8009c2e:	2b04      	cmp	r3, #4
 8009c30:	d826      	bhi.n	8009c80 <xQueueGenericSend+0x2c8>
 8009c32:	a201      	add	r2, pc, #4	@ (adr r2, 8009c38 <xQueueGenericSend+0x280>)
 8009c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c38:	08009c4d 	.word	0x08009c4d
 8009c3c:	08009c77 	.word	0x08009c77
 8009c40:	08009c67 	.word	0x08009c67
 8009c44:	08009c67 	.word	0x08009c67
 8009c48:	08009c77 	.word	0x08009c77
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d101      	bne.n	8009c56 <xQueueGenericSend+0x29e>
 8009c52:	2056      	movs	r0, #86	@ 0x56
 8009c54:	e000      	b.n	8009c58 <xQueueGenericSend+0x2a0>
 8009c56:	20c2      	movs	r0, #194	@ 0xc2
 8009c58:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c5e:	461a      	mov	r2, r3
 8009c60:	f003 ff54 	bl	800db0c <xTraceEventCreate2>
 8009c64:	e00c      	b.n	8009c80 <xQueueGenericSend+0x2c8>
 8009c66:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c6c:	461a      	mov	r2, r3
 8009c6e:	2057      	movs	r0, #87	@ 0x57
 8009c70:	f003 ff4c 	bl	800db0c <xTraceEventCreate2>
 8009c74:	e004      	b.n	8009c80 <xQueueGenericSend+0x2c8>
 8009c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c78:	4619      	mov	r1, r3
 8009c7a:	2058      	movs	r0, #88	@ 0x58
 8009c7c:	f003 fec6 	bl	800da0c <xTraceEventCreate1>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c82:	3310      	adds	r3, #16
 8009c84:	687a      	ldr	r2, [r7, #4]
 8009c86:	4611      	mov	r1, r2
 8009c88:	4618      	mov	r0, r3
 8009c8a:	f001 fdaf 	bl	800b7ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009c8e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009c90:	f000 fefd 	bl	800aa8e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009c94:	f001 fb96 	bl	800b3c4 <xTaskResumeAll>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	f47f aeef 	bne.w	8009a7e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8009ca0:	4b22      	ldr	r3, [pc, #136]	@ (8009d2c <xQueueGenericSend+0x374>)
 8009ca2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ca6:	601a      	str	r2, [r3, #0]
 8009ca8:	f3bf 8f4f 	dsb	sy
 8009cac:	f3bf 8f6f 	isb	sy
 8009cb0:	e6e5      	b.n	8009a7e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009cb2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009cb4:	f000 feeb 	bl	800aa8e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009cb8:	f001 fb84 	bl	800b3c4 <xTaskResumeAll>
 8009cbc:	e6df      	b.n	8009a7e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009cbe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009cc0:	f000 fee5 	bl	800aa8e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009cc4:	f001 fb7e 	bl	800b3c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 8009cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cca:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8009cce:	2b04      	cmp	r3, #4
 8009cd0:	d826      	bhi.n	8009d20 <xQueueGenericSend+0x368>
 8009cd2:	a201      	add	r2, pc, #4	@ (adr r2, 8009cd8 <xQueueGenericSend+0x320>)
 8009cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cd8:	08009ced 	.word	0x08009ced
 8009cdc:	08009d17 	.word	0x08009d17
 8009ce0:	08009d07 	.word	0x08009d07
 8009ce4:	08009d07 	.word	0x08009d07
 8009ce8:	08009d17 	.word	0x08009d17
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d101      	bne.n	8009cf6 <xQueueGenericSend+0x33e>
 8009cf2:	2053      	movs	r0, #83	@ 0x53
 8009cf4:	e000      	b.n	8009cf8 <xQueueGenericSend+0x340>
 8009cf6:	20c1      	movs	r0, #193	@ 0xc1
 8009cf8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cfe:	461a      	mov	r2, r3
 8009d00:	f003 ff04 	bl	800db0c <xTraceEventCreate2>
 8009d04:	e00c      	b.n	8009d20 <xQueueGenericSend+0x368>
 8009d06:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d0c:	461a      	mov	r2, r3
 8009d0e:	2054      	movs	r0, #84	@ 0x54
 8009d10:	f003 fefc 	bl	800db0c <xTraceEventCreate2>
 8009d14:	e004      	b.n	8009d20 <xQueueGenericSend+0x368>
 8009d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d18:	4619      	mov	r1, r3
 8009d1a:	2055      	movs	r0, #85	@ 0x55
 8009d1c:	f003 fe76 	bl	800da0c <xTraceEventCreate1>
			return errQUEUE_FULL;
 8009d20:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3738      	adds	r7, #56	@ 0x38
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}
 8009d2a:	bf00      	nop
 8009d2c:	e000ed04 	.word	0xe000ed04

08009d30 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b090      	sub	sp, #64	@ 0x40
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	60f8      	str	r0, [r7, #12]
 8009d38:	60b9      	str	r1, [r7, #8]
 8009d3a:	607a      	str	r2, [r7, #4]
 8009d3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d10b      	bne.n	8009d60 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d4c:	f383 8811 	msr	BASEPRI, r3
 8009d50:	f3bf 8f6f 	isb	sy
 8009d54:	f3bf 8f4f 	dsb	sy
 8009d58:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009d5a:	bf00      	nop
 8009d5c:	bf00      	nop
 8009d5e:	e7fd      	b.n	8009d5c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d103      	bne.n	8009d6e <xQueueGenericSendFromISR+0x3e>
 8009d66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d101      	bne.n	8009d72 <xQueueGenericSendFromISR+0x42>
 8009d6e:	2301      	movs	r3, #1
 8009d70:	e000      	b.n	8009d74 <xQueueGenericSendFromISR+0x44>
 8009d72:	2300      	movs	r3, #0
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d10b      	bne.n	8009d90 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009d78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d7c:	f383 8811 	msr	BASEPRI, r3
 8009d80:	f3bf 8f6f 	isb	sy
 8009d84:	f3bf 8f4f 	dsb	sy
 8009d88:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009d8a:	bf00      	nop
 8009d8c:	bf00      	nop
 8009d8e:	e7fd      	b.n	8009d8c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	2b02      	cmp	r3, #2
 8009d94:	d103      	bne.n	8009d9e <xQueueGenericSendFromISR+0x6e>
 8009d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d9a:	2b01      	cmp	r3, #1
 8009d9c:	d101      	bne.n	8009da2 <xQueueGenericSendFromISR+0x72>
 8009d9e:	2301      	movs	r3, #1
 8009da0:	e000      	b.n	8009da4 <xQueueGenericSendFromISR+0x74>
 8009da2:	2300      	movs	r3, #0
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d10b      	bne.n	8009dc0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dac:	f383 8811 	msr	BASEPRI, r3
 8009db0:	f3bf 8f6f 	isb	sy
 8009db4:	f3bf 8f4f 	dsb	sy
 8009db8:	623b      	str	r3, [r7, #32]
}
 8009dba:	bf00      	nop
 8009dbc:	bf00      	nop
 8009dbe:	e7fd      	b.n	8009dbc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009dc0:	f002 feea 	bl	800cb98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009dc4:	f3ef 8211 	mrs	r2, BASEPRI
 8009dc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dcc:	f383 8811 	msr	BASEPRI, r3
 8009dd0:	f3bf 8f6f 	isb	sy
 8009dd4:	f3bf 8f4f 	dsb	sy
 8009dd8:	61fa      	str	r2, [r7, #28]
 8009dda:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009ddc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009dde:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009de2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009de6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009de8:	429a      	cmp	r2, r3
 8009dea:	d302      	bcc.n	8009df2 <xQueueGenericSendFromISR+0xc2>
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	2b02      	cmp	r3, #2
 8009df0:	d150      	bne.n	8009e94 <xQueueGenericSendFromISR+0x164>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009df2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009df4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009df8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e00:	62fb      	str	r3, [r7, #44]	@ 0x2c

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8009e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e04:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d005      	beq.n	8009e18 <xQueueGenericSendFromISR+0xe8>
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	db19      	blt.n	8009e44 <xQueueGenericSendFromISR+0x114>
 8009e10:	3b02      	subs	r3, #2
 8009e12:	2b01      	cmp	r3, #1
 8009e14:	d816      	bhi.n	8009e44 <xQueueGenericSendFromISR+0x114>
 8009e16:	e00d      	b.n	8009e34 <xQueueGenericSendFromISR+0x104>
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d101      	bne.n	8009e22 <xQueueGenericSendFromISR+0xf2>
 8009e1e:	2059      	movs	r0, #89	@ 0x59
 8009e20:	e000      	b.n	8009e24 <xQueueGenericSendFromISR+0xf4>
 8009e22:	20c3      	movs	r0, #195	@ 0xc3
 8009e24:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e2a:	3301      	adds	r3, #1
 8009e2c:	461a      	mov	r2, r3
 8009e2e:	f003 fe6d 	bl	800db0c <xTraceEventCreate2>
 8009e32:	e007      	b.n	8009e44 <xQueueGenericSendFromISR+0x114>
 8009e34:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e3a:	3301      	adds	r3, #1
 8009e3c:	461a      	mov	r2, r3
 8009e3e:	205a      	movs	r0, #90	@ 0x5a
 8009e40:	f003 fe64 	bl	800db0c <xTraceEventCreate2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009e44:	683a      	ldr	r2, [r7, #0]
 8009e46:	68b9      	ldr	r1, [r7, #8]
 8009e48:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009e4a:	f000 fd90 	bl	800a96e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009e4e:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e56:	d112      	bne.n	8009e7e <xQueueGenericSendFromISR+0x14e>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d016      	beq.n	8009e8e <xQueueGenericSendFromISR+0x15e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e62:	3324      	adds	r3, #36	@ 0x24
 8009e64:	4618      	mov	r0, r3
 8009e66:	f001 fd1d 	bl	800b8a4 <xTaskRemoveFromEventList>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d00e      	beq.n	8009e8e <xQueueGenericSendFromISR+0x15e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d00b      	beq.n	8009e8e <xQueueGenericSendFromISR+0x15e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2201      	movs	r2, #1
 8009e7a:	601a      	str	r2, [r3, #0]
 8009e7c:	e007      	b.n	8009e8e <xQueueGenericSendFromISR+0x15e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009e7e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009e82:	3301      	adds	r3, #1
 8009e84:	b2db      	uxtb	r3, r3
 8009e86:	b25a      	sxtb	r2, r3
 8009e88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009e8e:	2301      	movs	r3, #1
 8009e90:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009e92:	e020      	b.n	8009ed6 <xQueueGenericSendFromISR+0x1a6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8009e94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e96:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d005      	beq.n	8009eaa <xQueueGenericSendFromISR+0x17a>
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	db17      	blt.n	8009ed2 <xQueueGenericSendFromISR+0x1a2>
 8009ea2:	3b02      	subs	r3, #2
 8009ea4:	2b01      	cmp	r3, #1
 8009ea6:	d814      	bhi.n	8009ed2 <xQueueGenericSendFromISR+0x1a2>
 8009ea8:	e00c      	b.n	8009ec4 <xQueueGenericSendFromISR+0x194>
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d101      	bne.n	8009eb4 <xQueueGenericSendFromISR+0x184>
 8009eb0:	205c      	movs	r0, #92	@ 0x5c
 8009eb2:	e000      	b.n	8009eb6 <xQueueGenericSendFromISR+0x186>
 8009eb4:	20c4      	movs	r0, #196	@ 0xc4
 8009eb6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009eb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ebc:	461a      	mov	r2, r3
 8009ebe:	f003 fe25 	bl	800db0c <xTraceEventCreate2>
 8009ec2:	e006      	b.n	8009ed2 <xQueueGenericSendFromISR+0x1a2>
 8009ec4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009eca:	461a      	mov	r2, r3
 8009ecc:	205d      	movs	r0, #93	@ 0x5d
 8009ece:	f003 fe1d 	bl	800db0c <xTraceEventCreate2>
			xReturn = errQUEUE_FULL;
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ed6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ed8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009eda:	697b      	ldr	r3, [r7, #20]
 8009edc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009ee0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009ee2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	3740      	adds	r7, #64	@ 0x40
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}

08009eec <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b082      	sub	sp, #8
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
 8009ef4:	6039      	str	r1, [r7, #0]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	6839      	ldr	r1, [r7, #0]
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f000 f805 	bl	8009f0a <MyWrapper_xQueueGiveFromISR>
 8009f00:	4603      	mov	r3, r0
 8009f02:	4618      	mov	r0, r3
 8009f04:	3708      	adds	r7, #8
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}

08009f0a <MyWrapper_xQueueGiveFromISR>:
{
 8009f0a:	b580      	push	{r7, lr}
 8009f0c:	b090      	sub	sp, #64	@ 0x40
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	60f8      	str	r0, [r7, #12]
 8009f12:	60b9      	str	r1, [r7, #8]
 8009f14:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	63bb      	str	r3, [r7, #56]	@ 0x38
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d10b      	bne.n	8009f38 <MyWrapper_xQueueGiveFromISR+0x2e>
	__asm volatile
 8009f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f24:	f383 8811 	msr	BASEPRI, r3
 8009f28:	f3bf 8f6f 	isb	sy
 8009f2c:	f3bf 8f4f 	dsb	sy
 8009f30:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009f32:	bf00      	nop
 8009f34:	bf00      	nop
 8009f36:	e7fd      	b.n	8009f34 <MyWrapper_xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009f38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d00b      	beq.n	8009f58 <MyWrapper_xQueueGiveFromISR+0x4e>
	__asm volatile
 8009f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f44:	f383 8811 	msr	BASEPRI, r3
 8009f48:	f3bf 8f6f 	isb	sy
 8009f4c:	f3bf 8f4f 	dsb	sy
 8009f50:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009f52:	bf00      	nop
 8009f54:	bf00      	nop
 8009f56:	e7fd      	b.n	8009f54 <MyWrapper_xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d103      	bne.n	8009f68 <MyWrapper_xQueueGiveFromISR+0x5e>
 8009f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f62:	689b      	ldr	r3, [r3, #8]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d101      	bne.n	8009f6c <MyWrapper_xQueueGiveFromISR+0x62>
 8009f68:	2301      	movs	r3, #1
 8009f6a:	e000      	b.n	8009f6e <MyWrapper_xQueueGiveFromISR+0x64>
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d10b      	bne.n	8009f8a <MyWrapper_xQueueGiveFromISR+0x80>
	__asm volatile
 8009f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f76:	f383 8811 	msr	BASEPRI, r3
 8009f7a:	f3bf 8f6f 	isb	sy
 8009f7e:	f3bf 8f4f 	dsb	sy
 8009f82:	623b      	str	r3, [r7, #32]
}
 8009f84:	bf00      	nop
 8009f86:	bf00      	nop
 8009f88:	e7fd      	b.n	8009f86 <MyWrapper_xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009f8a:	f002 fe05 	bl	800cb98 <vPortValidateInterruptPriority>
	__asm volatile
 8009f8e:	f3ef 8211 	mrs	r2, BASEPRI
 8009f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f96:	f383 8811 	msr	BASEPRI, r3
 8009f9a:	f3bf 8f6f 	isb	sy
 8009f9e:	f3bf 8f4f 	dsb	sy
 8009fa2:	61fa      	str	r2, [r7, #28]
 8009fa4:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8009fa6:	69fb      	ldr	r3, [r7, #28]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009fa8:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fae:	633b      	str	r3, [r7, #48]	@ 0x30

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009fb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009fb6:	429a      	cmp	r2, r3
 8009fb8:	d24c      	bcs.n	800a054 <MyWrapper_xQueueGiveFromISR+0x14a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fbc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009fc0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8009fc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fc6:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d005      	beq.n	8009fda <MyWrapper_xQueueGiveFromISR+0xd0>
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	db19      	blt.n	800a006 <MyWrapper_xQueueGiveFromISR+0xfc>
 8009fd2:	3b02      	subs	r3, #2
 8009fd4:	2b01      	cmp	r3, #1
 8009fd6:	d816      	bhi.n	800a006 <MyWrapper_xQueueGiveFromISR+0xfc>
 8009fd8:	e00d      	b.n	8009ff6 <MyWrapper_xQueueGiveFromISR+0xec>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d101      	bne.n	8009fe4 <MyWrapper_xQueueGiveFromISR+0xda>
 8009fe0:	2059      	movs	r0, #89	@ 0x59
 8009fe2:	e000      	b.n	8009fe6 <MyWrapper_xQueueGiveFromISR+0xdc>
 8009fe4:	20c3      	movs	r0, #195	@ 0xc3
 8009fe6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009fe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fec:	3301      	adds	r3, #1
 8009fee:	461a      	mov	r2, r3
 8009ff0:	f003 fd8c 	bl	800db0c <xTraceEventCreate2>
 8009ff4:	e007      	b.n	800a006 <MyWrapper_xQueueGiveFromISR+0xfc>
 8009ff6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009ff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ffc:	3301      	adds	r3, #1
 8009ffe:	461a      	mov	r2, r3
 800a000:	205a      	movs	r0, #90	@ 0x5a
 800a002:	f003 fd83 	bl	800db0c <xTraceEventCreate2>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a008:	1c5a      	adds	r2, r3, #1
 800a00a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a00c:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a00e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800a012:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a016:	d112      	bne.n	800a03e <MyWrapper_xQueueGiveFromISR+0x134>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a01a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d016      	beq.n	800a04e <MyWrapper_xQueueGiveFromISR+0x144>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a022:	3324      	adds	r3, #36	@ 0x24
 800a024:	4618      	mov	r0, r3
 800a026:	f001 fc3d 	bl	800b8a4 <xTaskRemoveFromEventList>
 800a02a:	4603      	mov	r3, r0
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d00e      	beq.n	800a04e <MyWrapper_xQueueGiveFromISR+0x144>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d00b      	beq.n	800a04e <MyWrapper_xQueueGiveFromISR+0x144>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	2201      	movs	r2, #1
 800a03a:	601a      	str	r2, [r3, #0]
 800a03c:	e007      	b.n	800a04e <MyWrapper_xQueueGiveFromISR+0x144>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a03e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a042:	3301      	adds	r3, #1
 800a044:	b2db      	uxtb	r3, r3
 800a046:	b25a      	sxtb	r2, r3
 800a048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a04a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a04e:	2301      	movs	r3, #1
 800a050:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a052:	e020      	b.n	800a096 <MyWrapper_xQueueGiveFromISR+0x18c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800a054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a056:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d005      	beq.n	800a06a <MyWrapper_xQueueGiveFromISR+0x160>
 800a05e:	2b00      	cmp	r3, #0
 800a060:	db17      	blt.n	800a092 <MyWrapper_xQueueGiveFromISR+0x188>
 800a062:	3b02      	subs	r3, #2
 800a064:	2b01      	cmp	r3, #1
 800a066:	d814      	bhi.n	800a092 <MyWrapper_xQueueGiveFromISR+0x188>
 800a068:	e00c      	b.n	800a084 <MyWrapper_xQueueGiveFromISR+0x17a>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d101      	bne.n	800a074 <MyWrapper_xQueueGiveFromISR+0x16a>
 800a070:	205c      	movs	r0, #92	@ 0x5c
 800a072:	e000      	b.n	800a076 <MyWrapper_xQueueGiveFromISR+0x16c>
 800a074:	20c4      	movs	r0, #196	@ 0xc4
 800a076:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a07a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a07c:	461a      	mov	r2, r3
 800a07e:	f003 fd45 	bl	800db0c <xTraceEventCreate2>
 800a082:	e006      	b.n	800a092 <MyWrapper_xQueueGiveFromISR+0x188>
 800a084:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a08a:	461a      	mov	r2, r3
 800a08c:	205d      	movs	r0, #93	@ 0x5d
 800a08e:	f003 fd3d 	bl	800db0c <xTraceEventCreate2>
			xReturn = errQUEUE_FULL;
 800a092:	2300      	movs	r3, #0
 800a094:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a096:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a098:	617b      	str	r3, [r7, #20]
	__asm volatile
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	f383 8811 	msr	BASEPRI, r3
}
 800a0a0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a0a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	3740      	adds	r7, #64	@ 0x40
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}

0800a0ac <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b08c      	sub	sp, #48	@ 0x30
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	60f8      	str	r0, [r7, #12]
 800a0b4:	60b9      	str	r1, [r7, #8]
 800a0b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a0c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d10b      	bne.n	800a0de <xQueueReceive+0x32>
	__asm volatile
 800a0c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0ca:	f383 8811 	msr	BASEPRI, r3
 800a0ce:	f3bf 8f6f 	isb	sy
 800a0d2:	f3bf 8f4f 	dsb	sy
 800a0d6:	623b      	str	r3, [r7, #32]
}
 800a0d8:	bf00      	nop
 800a0da:	bf00      	nop
 800a0dc:	e7fd      	b.n	800a0da <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d103      	bne.n	800a0ec <xQueueReceive+0x40>
 800a0e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d101      	bne.n	800a0f0 <xQueueReceive+0x44>
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	e000      	b.n	800a0f2 <xQueueReceive+0x46>
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d10b      	bne.n	800a10e <xQueueReceive+0x62>
	__asm volatile
 800a0f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0fa:	f383 8811 	msr	BASEPRI, r3
 800a0fe:	f3bf 8f6f 	isb	sy
 800a102:	f3bf 8f4f 	dsb	sy
 800a106:	61fb      	str	r3, [r7, #28]
}
 800a108:	bf00      	nop
 800a10a:	bf00      	nop
 800a10c:	e7fd      	b.n	800a10a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a10e:	f001 fd93 	bl	800bc38 <xTaskGetSchedulerState>
 800a112:	4603      	mov	r3, r0
 800a114:	2b00      	cmp	r3, #0
 800a116:	d102      	bne.n	800a11e <xQueueReceive+0x72>
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d101      	bne.n	800a122 <xQueueReceive+0x76>
 800a11e:	2301      	movs	r3, #1
 800a120:	e000      	b.n	800a124 <xQueueReceive+0x78>
 800a122:	2300      	movs	r3, #0
 800a124:	2b00      	cmp	r3, #0
 800a126:	d10b      	bne.n	800a140 <xQueueReceive+0x94>
	__asm volatile
 800a128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a12c:	f383 8811 	msr	BASEPRI, r3
 800a130:	f3bf 8f6f 	isb	sy
 800a134:	f3bf 8f4f 	dsb	sy
 800a138:	61bb      	str	r3, [r7, #24]
}
 800a13a:	bf00      	nop
 800a13c:	bf00      	nop
 800a13e:	e7fd      	b.n	800a13c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a140:	f002 fc44 	bl	800c9cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a148:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a14a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d050      	beq.n	800a1f2 <xQueueReceive+0x146>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a150:	68b9      	ldr	r1, [r7, #8]
 800a152:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a154:	f000 fc75 	bl	800aa42 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 800a158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a15a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800a15e:	2b04      	cmp	r3, #4
 800a160:	d82b      	bhi.n	800a1ba <xQueueReceive+0x10e>
 800a162:	a201      	add	r2, pc, #4	@ (adr r2, 800a168 <xQueueReceive+0xbc>)
 800a164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a168:	0800a17d 	.word	0x0800a17d
 800a16c:	0800a1a1 	.word	0x0800a1a1
 800a170:	0800a18f 	.word	0x0800a18f
 800a174:	0800a18f 	.word	0x0800a18f
 800a178:	0800a1af 	.word	0x0800a1af
 800a17c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a17e:	687a      	ldr	r2, [r7, #4]
 800a180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a184:	3b01      	subs	r3, #1
 800a186:	2060      	movs	r0, #96	@ 0x60
 800a188:	f003 fd44 	bl	800dc14 <xTraceEventCreate3>
 800a18c:	e015      	b.n	800a1ba <xQueueReceive+0x10e>
 800a18e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a190:	687a      	ldr	r2, [r7, #4]
 800a192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a196:	3b01      	subs	r3, #1
 800a198:	2061      	movs	r0, #97	@ 0x61
 800a19a:	f003 fd3b 	bl	800dc14 <xTraceEventCreate3>
 800a19e:	e00c      	b.n	800a1ba <xQueueReceive+0x10e>
 800a1a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1a2:	687a      	ldr	r2, [r7, #4]
 800a1a4:	4619      	mov	r1, r3
 800a1a6:	2062      	movs	r0, #98	@ 0x62
 800a1a8:	f003 fcb0 	bl	800db0c <xTraceEventCreate2>
 800a1ac:	e005      	b.n	800a1ba <xQueueReceive+0x10e>
 800a1ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1b0:	687a      	ldr	r2, [r7, #4]
 800a1b2:	4619      	mov	r1, r3
 800a1b4:	20c7      	movs	r0, #199	@ 0xc7
 800a1b6:	f003 fca9 	bl	800db0c <xTraceEventCreate2>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a1ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1bc:	1e5a      	subs	r2, r3, #1
 800a1be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1c0:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a1c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1c4:	691b      	ldr	r3, [r3, #16]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d00f      	beq.n	800a1ea <xQueueReceive+0x13e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a1ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1cc:	3310      	adds	r3, #16
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f001 fb68 	bl	800b8a4 <xTaskRemoveFromEventList>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d007      	beq.n	800a1ea <xQueueReceive+0x13e>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a1da:	4b84      	ldr	r3, [pc, #528]	@ (800a3ec <xQueueReceive+0x340>)
 800a1dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a1e0:	601a      	str	r2, [r3, #0]
 800a1e2:	f3bf 8f4f 	dsb	sy
 800a1e6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a1ea:	f002 fc21 	bl	800ca30 <vPortExitCritical>
				return pdPASS;
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	e0f8      	b.n	800a3e4 <xQueueReceive+0x338>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d132      	bne.n	800a25e <xQueueReceive+0x1b2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a1f8:	f002 fc1a 	bl	800ca30 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 800a1fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1fe:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800a202:	2b04      	cmp	r3, #4
 800a204:	d829      	bhi.n	800a25a <xQueueReceive+0x1ae>
 800a206:	a201      	add	r2, pc, #4	@ (adr r2, 800a20c <xQueueReceive+0x160>)
 800a208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a20c:	0800a221 	.word	0x0800a221
 800a210:	0800a241 	.word	0x0800a241
 800a214:	0800a231 	.word	0x0800a231
 800a218:	0800a231 	.word	0x0800a231
 800a21c:	0800a24f 	.word	0x0800a24f
 800a220:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a222:	687a      	ldr	r2, [r7, #4]
 800a224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a228:	2063      	movs	r0, #99	@ 0x63
 800a22a:	f003 fcf3 	bl	800dc14 <xTraceEventCreate3>
 800a22e:	e014      	b.n	800a25a <xQueueReceive+0x1ae>
 800a230:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a232:	687a      	ldr	r2, [r7, #4]
 800a234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a238:	2064      	movs	r0, #100	@ 0x64
 800a23a:	f003 fceb 	bl	800dc14 <xTraceEventCreate3>
 800a23e:	e00c      	b.n	800a25a <xQueueReceive+0x1ae>
 800a240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a242:	687a      	ldr	r2, [r7, #4]
 800a244:	4619      	mov	r1, r3
 800a246:	2065      	movs	r0, #101	@ 0x65
 800a248:	f003 fc60 	bl	800db0c <xTraceEventCreate2>
 800a24c:	e005      	b.n	800a25a <xQueueReceive+0x1ae>
 800a24e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a250:	687a      	ldr	r2, [r7, #4]
 800a252:	4619      	mov	r1, r3
 800a254:	20c8      	movs	r0, #200	@ 0xc8
 800a256:	f003 fc59 	bl	800db0c <xTraceEventCreate2>
					return errQUEUE_EMPTY;
 800a25a:	2300      	movs	r3, #0
 800a25c:	e0c2      	b.n	800a3e4 <xQueueReceive+0x338>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a25e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a260:	2b00      	cmp	r3, #0
 800a262:	d106      	bne.n	800a272 <xQueueReceive+0x1c6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a264:	f107 0310 	add.w	r3, r7, #16
 800a268:	4618      	mov	r0, r3
 800a26a:	f001 fb83 	bl	800b974 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a26e:	2301      	movs	r3, #1
 800a270:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a272:	f002 fbdd 	bl	800ca30 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a276:	f001 f897 	bl	800b3a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a27a:	f002 fba7 	bl	800c9cc <vPortEnterCritical>
 800a27e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a280:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a284:	b25b      	sxtb	r3, r3
 800a286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a28a:	d103      	bne.n	800a294 <xQueueReceive+0x1e8>
 800a28c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a28e:	2200      	movs	r2, #0
 800a290:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a296:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a29a:	b25b      	sxtb	r3, r3
 800a29c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2a0:	d103      	bne.n	800a2aa <xQueueReceive+0x1fe>
 800a2a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a2aa:	f002 fbc1 	bl	800ca30 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a2ae:	1d3a      	adds	r2, r7, #4
 800a2b0:	f107 0310 	add.w	r3, r7, #16
 800a2b4:	4611      	mov	r1, r2
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f001 fb72 	bl	800b9a0 <xTaskCheckForTimeOut>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d154      	bne.n	800a36c <xQueueReceive+0x2c0>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a2c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a2c4:	f000 fc35 	bl	800ab32 <prvIsQueueEmpty>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d048      	beq.n	800a360 <xQueueReceive+0x2b4>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 800a2ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2d0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800a2d4:	2b04      	cmp	r3, #4
 800a2d6:	d82a      	bhi.n	800a32e <xQueueReceive+0x282>
 800a2d8:	a201      	add	r2, pc, #4	@ (adr r2, 800a2e0 <xQueueReceive+0x234>)
 800a2da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2de:	bf00      	nop
 800a2e0:	0800a2f5 	.word	0x0800a2f5
 800a2e4:	0800a315 	.word	0x0800a315
 800a2e8:	0800a305 	.word	0x0800a305
 800a2ec:	0800a305 	.word	0x0800a305
 800a2f0:	0800a323 	.word	0x0800a323
 800a2f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a2f6:	687a      	ldr	r2, [r7, #4]
 800a2f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2fc:	2066      	movs	r0, #102	@ 0x66
 800a2fe:	f003 fc89 	bl	800dc14 <xTraceEventCreate3>
 800a302:	e014      	b.n	800a32e <xQueueReceive+0x282>
 800a304:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a306:	687a      	ldr	r2, [r7, #4]
 800a308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a30a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a30c:	2067      	movs	r0, #103	@ 0x67
 800a30e:	f003 fc81 	bl	800dc14 <xTraceEventCreate3>
 800a312:	e00c      	b.n	800a32e <xQueueReceive+0x282>
 800a314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a316:	687a      	ldr	r2, [r7, #4]
 800a318:	4619      	mov	r1, r3
 800a31a:	2068      	movs	r0, #104	@ 0x68
 800a31c:	f003 fbf6 	bl	800db0c <xTraceEventCreate2>
 800a320:	e005      	b.n	800a32e <xQueueReceive+0x282>
 800a322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a324:	687a      	ldr	r2, [r7, #4]
 800a326:	4619      	mov	r1, r3
 800a328:	20f6      	movs	r0, #246	@ 0xf6
 800a32a:	f003 fbef 	bl	800db0c <xTraceEventCreate2>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a32e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a330:	3324      	adds	r3, #36	@ 0x24
 800a332:	687a      	ldr	r2, [r7, #4]
 800a334:	4611      	mov	r1, r2
 800a336:	4618      	mov	r0, r3
 800a338:	f001 fa58 	bl	800b7ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a33c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a33e:	f000 fba6 	bl	800aa8e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a342:	f001 f83f 	bl	800b3c4 <xTaskResumeAll>
 800a346:	4603      	mov	r3, r0
 800a348:	2b00      	cmp	r3, #0
 800a34a:	f47f aef9 	bne.w	800a140 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a34e:	4b27      	ldr	r3, [pc, #156]	@ (800a3ec <xQueueReceive+0x340>)
 800a350:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a354:	601a      	str	r2, [r3, #0]
 800a356:	f3bf 8f4f 	dsb	sy
 800a35a:	f3bf 8f6f 	isb	sy
 800a35e:	e6ef      	b.n	800a140 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a360:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a362:	f000 fb94 	bl	800aa8e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a366:	f001 f82d 	bl	800b3c4 <xTaskResumeAll>
 800a36a:	e6e9      	b.n	800a140 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a36c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a36e:	f000 fb8e 	bl	800aa8e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a372:	f001 f827 	bl	800b3c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a376:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a378:	f000 fbdb 	bl	800ab32 <prvIsQueueEmpty>
 800a37c:	4603      	mov	r3, r0
 800a37e:	2b00      	cmp	r3, #0
 800a380:	f43f aede 	beq.w	800a140 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 800a384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a386:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800a38a:	2b04      	cmp	r3, #4
 800a38c:	d829      	bhi.n	800a3e2 <xQueueReceive+0x336>
 800a38e:	a201      	add	r2, pc, #4	@ (adr r2, 800a394 <xQueueReceive+0x2e8>)
 800a390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a394:	0800a3a9 	.word	0x0800a3a9
 800a398:	0800a3c9 	.word	0x0800a3c9
 800a39c:	0800a3b9 	.word	0x0800a3b9
 800a3a0:	0800a3b9 	.word	0x0800a3b9
 800a3a4:	0800a3d7 	.word	0x0800a3d7
 800a3a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a3aa:	687a      	ldr	r2, [r7, #4]
 800a3ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3b0:	2063      	movs	r0, #99	@ 0x63
 800a3b2:	f003 fc2f 	bl	800dc14 <xTraceEventCreate3>
 800a3b6:	e014      	b.n	800a3e2 <xQueueReceive+0x336>
 800a3b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a3ba:	687a      	ldr	r2, [r7, #4]
 800a3bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3c0:	2064      	movs	r0, #100	@ 0x64
 800a3c2:	f003 fc27 	bl	800dc14 <xTraceEventCreate3>
 800a3c6:	e00c      	b.n	800a3e2 <xQueueReceive+0x336>
 800a3c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3ca:	687a      	ldr	r2, [r7, #4]
 800a3cc:	4619      	mov	r1, r3
 800a3ce:	2065      	movs	r0, #101	@ 0x65
 800a3d0:	f003 fb9c 	bl	800db0c <xTraceEventCreate2>
 800a3d4:	e005      	b.n	800a3e2 <xQueueReceive+0x336>
 800a3d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3d8:	687a      	ldr	r2, [r7, #4]
 800a3da:	4619      	mov	r1, r3
 800a3dc:	20c8      	movs	r0, #200	@ 0xc8
 800a3de:	f003 fb95 	bl	800db0c <xTraceEventCreate2>
				return errQUEUE_EMPTY;
 800a3e2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	3730      	adds	r7, #48	@ 0x30
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}
 800a3ec:	e000ed04 	.word	0xe000ed04

0800a3f0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b08e      	sub	sp, #56	@ 0x38
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
 800a3f8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	633b      	str	r3, [r7, #48]	@ 0x30
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a402:	2300      	movs	r3, #0
 800a404:	637b      	str	r3, [r7, #52]	@ 0x34
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d10b      	bne.n	800a424 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800a40c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a410:	f383 8811 	msr	BASEPRI, r3
 800a414:	f3bf 8f6f 	isb	sy
 800a418:	f3bf 8f4f 	dsb	sy
 800a41c:	623b      	str	r3, [r7, #32]
}
 800a41e:	bf00      	nop
 800a420:	bf00      	nop
 800a422:	e7fd      	b.n	800a420 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d00b      	beq.n	800a444 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800a42c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a430:	f383 8811 	msr	BASEPRI, r3
 800a434:	f3bf 8f6f 	isb	sy
 800a438:	f3bf 8f4f 	dsb	sy
 800a43c:	61fb      	str	r3, [r7, #28]
}
 800a43e:	bf00      	nop
 800a440:	bf00      	nop
 800a442:	e7fd      	b.n	800a440 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a444:	f001 fbf8 	bl	800bc38 <xTaskGetSchedulerState>
 800a448:	4603      	mov	r3, r0
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d102      	bne.n	800a454 <xQueueSemaphoreTake+0x64>
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d101      	bne.n	800a458 <xQueueSemaphoreTake+0x68>
 800a454:	2301      	movs	r3, #1
 800a456:	e000      	b.n	800a45a <xQueueSemaphoreTake+0x6a>
 800a458:	2300      	movs	r3, #0
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d10b      	bne.n	800a476 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800a45e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a462:	f383 8811 	msr	BASEPRI, r3
 800a466:	f3bf 8f6f 	isb	sy
 800a46a:	f3bf 8f4f 	dsb	sy
 800a46e:	61bb      	str	r3, [r7, #24]
}
 800a470:	bf00      	nop
 800a472:	bf00      	nop
 800a474:	e7fd      	b.n	800a472 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a476:	f002 faa9 	bl	800c9cc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a47a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a47c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a47e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a482:	2b00      	cmp	r3, #0
 800a484:	d056      	beq.n	800a534 <xQueueSemaphoreTake+0x144>
			{
				traceQUEUE_RECEIVE( pxQueue );
 800a486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a488:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800a48c:	2b04      	cmp	r3, #4
 800a48e:	d82c      	bhi.n	800a4ea <xQueueSemaphoreTake+0xfa>
 800a490:	a201      	add	r2, pc, #4	@ (adr r2, 800a498 <xQueueSemaphoreTake+0xa8>)
 800a492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a496:	bf00      	nop
 800a498:	0800a4ad 	.word	0x0800a4ad
 800a49c:	0800a4d1 	.word	0x0800a4d1
 800a4a0:	0800a4bf 	.word	0x0800a4bf
 800a4a4:	0800a4bf 	.word	0x0800a4bf
 800a4a8:	0800a4df 	.word	0x0800a4df
 800a4ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a4ae:	683a      	ldr	r2, [r7, #0]
 800a4b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4b4:	3b01      	subs	r3, #1
 800a4b6:	2060      	movs	r0, #96	@ 0x60
 800a4b8:	f003 fbac 	bl	800dc14 <xTraceEventCreate3>
 800a4bc:	e015      	b.n	800a4ea <xQueueSemaphoreTake+0xfa>
 800a4be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a4c0:	683a      	ldr	r2, [r7, #0]
 800a4c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4c6:	3b01      	subs	r3, #1
 800a4c8:	2061      	movs	r0, #97	@ 0x61
 800a4ca:	f003 fba3 	bl	800dc14 <xTraceEventCreate3>
 800a4ce:	e00c      	b.n	800a4ea <xQueueSemaphoreTake+0xfa>
 800a4d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4d2:	683a      	ldr	r2, [r7, #0]
 800a4d4:	4619      	mov	r1, r3
 800a4d6:	2062      	movs	r0, #98	@ 0x62
 800a4d8:	f003 fb18 	bl	800db0c <xTraceEventCreate2>
 800a4dc:	e005      	b.n	800a4ea <xQueueSemaphoreTake+0xfa>
 800a4de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4e0:	683a      	ldr	r2, [r7, #0]
 800a4e2:	4619      	mov	r1, r3
 800a4e4:	20c7      	movs	r0, #199	@ 0xc7
 800a4e6:	f003 fb11 	bl	800db0c <xTraceEventCreate2>

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a4ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4ec:	1e5a      	subs	r2, r3, #1
 800a4ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4f0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a4f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d104      	bne.n	800a504 <xQueueSemaphoreTake+0x114>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a4fa:	f001 fd6f 	bl	800bfdc <pvTaskIncrementMutexHeldCount>
 800a4fe:	4602      	mov	r2, r0
 800a500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a502:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a506:	691b      	ldr	r3, [r3, #16]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d00f      	beq.n	800a52c <xQueueSemaphoreTake+0x13c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a50c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a50e:	3310      	adds	r3, #16
 800a510:	4618      	mov	r0, r3
 800a512:	f001 f9c7 	bl	800b8a4 <xTaskRemoveFromEventList>
 800a516:	4603      	mov	r3, r0
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d007      	beq.n	800a52c <xQueueSemaphoreTake+0x13c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a51c:	4b9b      	ldr	r3, [pc, #620]	@ (800a78c <xQueueSemaphoreTake+0x39c>)
 800a51e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a522:	601a      	str	r2, [r3, #0]
 800a524:	f3bf 8f4f 	dsb	sy
 800a528:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a52c:	f002 fa80 	bl	800ca30 <vPortExitCritical>
				return pdPASS;
 800a530:	2301      	movs	r3, #1
 800a532:	e127      	b.n	800a784 <xQueueSemaphoreTake+0x394>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d141      	bne.n	800a5be <xQueueSemaphoreTake+0x1ce>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a53a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d00b      	beq.n	800a558 <xQueueSemaphoreTake+0x168>
	__asm volatile
 800a540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a544:	f383 8811 	msr	BASEPRI, r3
 800a548:	f3bf 8f6f 	isb	sy
 800a54c:	f3bf 8f4f 	dsb	sy
 800a550:	617b      	str	r3, [r7, #20]
}
 800a552:	bf00      	nop
 800a554:	bf00      	nop
 800a556:	e7fd      	b.n	800a554 <xQueueSemaphoreTake+0x164>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a558:	f002 fa6a 	bl	800ca30 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 800a55c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a55e:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800a562:	2b04      	cmp	r3, #4
 800a564:	d829      	bhi.n	800a5ba <xQueueSemaphoreTake+0x1ca>
 800a566:	a201      	add	r2, pc, #4	@ (adr r2, 800a56c <xQueueSemaphoreTake+0x17c>)
 800a568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a56c:	0800a581 	.word	0x0800a581
 800a570:	0800a5a1 	.word	0x0800a5a1
 800a574:	0800a591 	.word	0x0800a591
 800a578:	0800a591 	.word	0x0800a591
 800a57c:	0800a5af 	.word	0x0800a5af
 800a580:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a582:	683a      	ldr	r2, [r7, #0]
 800a584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a588:	2063      	movs	r0, #99	@ 0x63
 800a58a:	f003 fb43 	bl	800dc14 <xTraceEventCreate3>
 800a58e:	e014      	b.n	800a5ba <xQueueSemaphoreTake+0x1ca>
 800a590:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a592:	683a      	ldr	r2, [r7, #0]
 800a594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a598:	2064      	movs	r0, #100	@ 0x64
 800a59a:	f003 fb3b 	bl	800dc14 <xTraceEventCreate3>
 800a59e:	e00c      	b.n	800a5ba <xQueueSemaphoreTake+0x1ca>
 800a5a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5a2:	683a      	ldr	r2, [r7, #0]
 800a5a4:	4619      	mov	r1, r3
 800a5a6:	2065      	movs	r0, #101	@ 0x65
 800a5a8:	f003 fab0 	bl	800db0c <xTraceEventCreate2>
 800a5ac:	e005      	b.n	800a5ba <xQueueSemaphoreTake+0x1ca>
 800a5ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5b0:	683a      	ldr	r2, [r7, #0]
 800a5b2:	4619      	mov	r1, r3
 800a5b4:	20c8      	movs	r0, #200	@ 0xc8
 800a5b6:	f003 faa9 	bl	800db0c <xTraceEventCreate2>
					return errQUEUE_EMPTY;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	e0e2      	b.n	800a784 <xQueueSemaphoreTake+0x394>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a5be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d106      	bne.n	800a5d2 <xQueueSemaphoreTake+0x1e2>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a5c4:	f107 030c 	add.w	r3, r7, #12
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f001 f9d3 	bl	800b974 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	633b      	str	r3, [r7, #48]	@ 0x30
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a5d2:	f002 fa2d 	bl	800ca30 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a5d6:	f000 fee7 	bl	800b3a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a5da:	f002 f9f7 	bl	800c9cc <vPortEnterCritical>
 800a5de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a5e4:	b25b      	sxtb	r3, r3
 800a5e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5ea:	d103      	bne.n	800a5f4 <xQueueSemaphoreTake+0x204>
 800a5ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a5f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a5fa:	b25b      	sxtb	r3, r3
 800a5fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a600:	d103      	bne.n	800a60a <xQueueSemaphoreTake+0x21a>
 800a602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a604:	2200      	movs	r2, #0
 800a606:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a60a:	f002 fa11 	bl	800ca30 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a60e:	463a      	mov	r2, r7
 800a610:	f107 030c 	add.w	r3, r7, #12
 800a614:	4611      	mov	r1, r2
 800a616:	4618      	mov	r0, r3
 800a618:	f001 f9c2 	bl	800b9a0 <xTaskCheckForTimeOut>
 800a61c:	4603      	mov	r3, r0
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d162      	bne.n	800a6e8 <xQueueSemaphoreTake+0x2f8>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a622:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a624:	f000 fa85 	bl	800ab32 <prvIsQueueEmpty>
 800a628:	4603      	mov	r3, r0
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d056      	beq.n	800a6dc <xQueueSemaphoreTake+0x2ec>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 800a62e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a630:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800a634:	2b04      	cmp	r3, #4
 800a636:	d82a      	bhi.n	800a68e <xQueueSemaphoreTake+0x29e>
 800a638:	a201      	add	r2, pc, #4	@ (adr r2, 800a640 <xQueueSemaphoreTake+0x250>)
 800a63a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a63e:	bf00      	nop
 800a640:	0800a655 	.word	0x0800a655
 800a644:	0800a675 	.word	0x0800a675
 800a648:	0800a665 	.word	0x0800a665
 800a64c:	0800a665 	.word	0x0800a665
 800a650:	0800a683 	.word	0x0800a683
 800a654:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a656:	683a      	ldr	r2, [r7, #0]
 800a658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a65a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a65c:	2066      	movs	r0, #102	@ 0x66
 800a65e:	f003 fad9 	bl	800dc14 <xTraceEventCreate3>
 800a662:	e014      	b.n	800a68e <xQueueSemaphoreTake+0x29e>
 800a664:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a666:	683a      	ldr	r2, [r7, #0]
 800a668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a66a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a66c:	2067      	movs	r0, #103	@ 0x67
 800a66e:	f003 fad1 	bl	800dc14 <xTraceEventCreate3>
 800a672:	e00c      	b.n	800a68e <xQueueSemaphoreTake+0x29e>
 800a674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a676:	683a      	ldr	r2, [r7, #0]
 800a678:	4619      	mov	r1, r3
 800a67a:	2068      	movs	r0, #104	@ 0x68
 800a67c:	f003 fa46 	bl	800db0c <xTraceEventCreate2>
 800a680:	e005      	b.n	800a68e <xQueueSemaphoreTake+0x29e>
 800a682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a684:	683a      	ldr	r2, [r7, #0]
 800a686:	4619      	mov	r1, r3
 800a688:	20f6      	movs	r0, #246	@ 0xf6
 800a68a:	f003 fa3f 	bl	800db0c <xTraceEventCreate2>

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a68e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d109      	bne.n	800a6aa <xQueueSemaphoreTake+0x2ba>
					{
						taskENTER_CRITICAL();
 800a696:	f002 f999 	bl	800c9cc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a69a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a69c:	689b      	ldr	r3, [r3, #8]
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f001 fae8 	bl	800bc74 <xTaskPriorityInherit>
 800a6a4:	6378      	str	r0, [r7, #52]	@ 0x34
						}
						taskEXIT_CRITICAL();
 800a6a6:	f002 f9c3 	bl	800ca30 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a6aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6ac:	3324      	adds	r3, #36	@ 0x24
 800a6ae:	683a      	ldr	r2, [r7, #0]
 800a6b0:	4611      	mov	r1, r2
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f001 f89a 	bl	800b7ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a6b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a6ba:	f000 f9e8 	bl	800aa8e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a6be:	f000 fe81 	bl	800b3c4 <xTaskResumeAll>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	f47f aed6 	bne.w	800a476 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800a6ca:	4b30      	ldr	r3, [pc, #192]	@ (800a78c <xQueueSemaphoreTake+0x39c>)
 800a6cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a6d0:	601a      	str	r2, [r3, #0]
 800a6d2:	f3bf 8f4f 	dsb	sy
 800a6d6:	f3bf 8f6f 	isb	sy
 800a6da:	e6cc      	b.n	800a476 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a6dc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a6de:	f000 f9d6 	bl	800aa8e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a6e2:	f000 fe6f 	bl	800b3c4 <xTaskResumeAll>
 800a6e6:	e6c6      	b.n	800a476 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a6e8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a6ea:	f000 f9d0 	bl	800aa8e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a6ee:	f000 fe69 	bl	800b3c4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a6f2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a6f4:	f000 fa1d 	bl	800ab32 <prvIsQueueEmpty>
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	f43f aebb 	beq.w	800a476 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a700:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a702:	2b00      	cmp	r3, #0
 800a704:	d00d      	beq.n	800a722 <xQueueSemaphoreTake+0x332>
					{
						taskENTER_CRITICAL();
 800a706:	f002 f961 	bl	800c9cc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a70a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a70c:	f000 f917 	bl	800a93e <prvGetDisinheritPriorityAfterTimeout>
 800a710:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a714:	689b      	ldr	r3, [r3, #8]
 800a716:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a718:	4618      	mov	r0, r3
 800a71a:	f001 fbc1 	bl	800bea0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a71e:	f002 f987 	bl	800ca30 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
 800a722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a724:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800a728:	2b04      	cmp	r3, #4
 800a72a:	d82a      	bhi.n	800a782 <xQueueSemaphoreTake+0x392>
 800a72c:	a201      	add	r2, pc, #4	@ (adr r2, 800a734 <xQueueSemaphoreTake+0x344>)
 800a72e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a732:	bf00      	nop
 800a734:	0800a749 	.word	0x0800a749
 800a738:	0800a769 	.word	0x0800a769
 800a73c:	0800a759 	.word	0x0800a759
 800a740:	0800a759 	.word	0x0800a759
 800a744:	0800a777 	.word	0x0800a777
 800a748:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a74a:	683a      	ldr	r2, [r7, #0]
 800a74c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a74e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a750:	2063      	movs	r0, #99	@ 0x63
 800a752:	f003 fa5f 	bl	800dc14 <xTraceEventCreate3>
 800a756:	e014      	b.n	800a782 <xQueueSemaphoreTake+0x392>
 800a758:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a75a:	683a      	ldr	r2, [r7, #0]
 800a75c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a75e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a760:	2064      	movs	r0, #100	@ 0x64
 800a762:	f003 fa57 	bl	800dc14 <xTraceEventCreate3>
 800a766:	e00c      	b.n	800a782 <xQueueSemaphoreTake+0x392>
 800a768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a76a:	683a      	ldr	r2, [r7, #0]
 800a76c:	4619      	mov	r1, r3
 800a76e:	2065      	movs	r0, #101	@ 0x65
 800a770:	f003 f9cc 	bl	800db0c <xTraceEventCreate2>
 800a774:	e005      	b.n	800a782 <xQueueSemaphoreTake+0x392>
 800a776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a778:	683a      	ldr	r2, [r7, #0]
 800a77a:	4619      	mov	r1, r3
 800a77c:	20c8      	movs	r0, #200	@ 0xc8
 800a77e:	f003 f9c5 	bl	800db0c <xTraceEventCreate2>
				return errQUEUE_EMPTY;
 800a782:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a784:	4618      	mov	r0, r3
 800a786:	3738      	adds	r7, #56	@ 0x38
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}
 800a78c:	e000ed04 	.word	0xe000ed04

0800a790 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b08e      	sub	sp, #56	@ 0x38
 800a794:	af00      	add	r7, sp, #0
 800a796:	60f8      	str	r0, [r7, #12]
 800a798:	60b9      	str	r1, [r7, #8]
 800a79a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a7a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d10b      	bne.n	800a7be <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800a7a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7aa:	f383 8811 	msr	BASEPRI, r3
 800a7ae:	f3bf 8f6f 	isb	sy
 800a7b2:	f3bf 8f4f 	dsb	sy
 800a7b6:	623b      	str	r3, [r7, #32]
}
 800a7b8:	bf00      	nop
 800a7ba:	bf00      	nop
 800a7bc:	e7fd      	b.n	800a7ba <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a7be:	68bb      	ldr	r3, [r7, #8]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d103      	bne.n	800a7cc <xQueueReceiveFromISR+0x3c>
 800a7c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d101      	bne.n	800a7d0 <xQueueReceiveFromISR+0x40>
 800a7cc:	2301      	movs	r3, #1
 800a7ce:	e000      	b.n	800a7d2 <xQueueReceiveFromISR+0x42>
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d10b      	bne.n	800a7ee <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800a7d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7da:	f383 8811 	msr	BASEPRI, r3
 800a7de:	f3bf 8f6f 	isb	sy
 800a7e2:	f3bf 8f4f 	dsb	sy
 800a7e6:	61fb      	str	r3, [r7, #28]
}
 800a7e8:	bf00      	nop
 800a7ea:	bf00      	nop
 800a7ec:	e7fd      	b.n	800a7ea <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a7ee:	f002 f9d3 	bl	800cb98 <vPortValidateInterruptPriority>
	__asm volatile
 800a7f2:	f3ef 8211 	mrs	r2, BASEPRI
 800a7f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7fa:	f383 8811 	msr	BASEPRI, r3
 800a7fe:	f3bf 8f6f 	isb	sy
 800a802:	f3bf 8f4f 	dsb	sy
 800a806:	61ba      	str	r2, [r7, #24]
 800a808:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a80a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a80c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a80e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a812:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a816:	2b00      	cmp	r3, #0
 800a818:	d04b      	beq.n	800a8b2 <xQueueReceiveFromISR+0x122>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a81a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a81c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a820:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 800a824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a826:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d005      	beq.n	800a83a <xQueueReceiveFromISR+0xaa>
 800a82e:	2b00      	cmp	r3, #0
 800a830:	db14      	blt.n	800a85c <xQueueReceiveFromISR+0xcc>
 800a832:	3b02      	subs	r3, #2
 800a834:	2b01      	cmp	r3, #1
 800a836:	d811      	bhi.n	800a85c <xQueueReceiveFromISR+0xcc>
 800a838:	e008      	b.n	800a84c <xQueueReceiveFromISR+0xbc>
 800a83a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a83c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a83e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a840:	3b01      	subs	r3, #1
 800a842:	461a      	mov	r2, r3
 800a844:	2069      	movs	r0, #105	@ 0x69
 800a846:	f003 f961 	bl	800db0c <xTraceEventCreate2>
 800a84a:	e007      	b.n	800a85c <xQueueReceiveFromISR+0xcc>
 800a84c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a84e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a852:	3b01      	subs	r3, #1
 800a854:	461a      	mov	r2, r3
 800a856:	206a      	movs	r0, #106	@ 0x6a
 800a858:	f003 f958 	bl	800db0c <xTraceEventCreate2>

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a85c:	68b9      	ldr	r1, [r7, #8]
 800a85e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a860:	f000 f8ef 	bl	800aa42 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a866:	1e5a      	subs	r2, r3, #1
 800a868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a86a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a86c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a870:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a874:	d112      	bne.n	800a89c <xQueueReceiveFromISR+0x10c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a878:	691b      	ldr	r3, [r3, #16]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d016      	beq.n	800a8ac <xQueueReceiveFromISR+0x11c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a87e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a880:	3310      	adds	r3, #16
 800a882:	4618      	mov	r0, r3
 800a884:	f001 f80e 	bl	800b8a4 <xTaskRemoveFromEventList>
 800a888:	4603      	mov	r3, r0
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d00e      	beq.n	800a8ac <xQueueReceiveFromISR+0x11c>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d00b      	beq.n	800a8ac <xQueueReceiveFromISR+0x11c>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2201      	movs	r2, #1
 800a898:	601a      	str	r2, [r3, #0]
 800a89a:	e007      	b.n	800a8ac <xQueueReceiveFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a89c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a8a0:	3301      	adds	r3, #1
 800a8a2:	b2db      	uxtb	r3, r3
 800a8a4:	b25a      	sxtb	r2, r3
 800a8a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8b0:	e01b      	b.n	800a8ea <xQueueReceiveFromISR+0x15a>
		}
		else
		{
			xReturn = pdFAIL;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	637b      	str	r3, [r7, #52]	@ 0x34
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 800a8b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8b8:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d005      	beq.n	800a8cc <xQueueReceiveFromISR+0x13c>
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	db12      	blt.n	800a8ea <xQueueReceiveFromISR+0x15a>
 800a8c4:	3b02      	subs	r3, #2
 800a8c6:	2b01      	cmp	r3, #1
 800a8c8:	d80f      	bhi.n	800a8ea <xQueueReceiveFromISR+0x15a>
 800a8ca:	e007      	b.n	800a8dc <xQueueReceiveFromISR+0x14c>
 800a8cc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a8ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8d2:	461a      	mov	r2, r3
 800a8d4:	206c      	movs	r0, #108	@ 0x6c
 800a8d6:	f003 f919 	bl	800db0c <xTraceEventCreate2>
 800a8da:	e006      	b.n	800a8ea <xQueueReceiveFromISR+0x15a>
 800a8dc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a8de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8e2:	461a      	mov	r2, r3
 800a8e4:	206d      	movs	r0, #109	@ 0x6d
 800a8e6:	f003 f911 	bl	800db0c <xTraceEventCreate2>
 800a8ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8ec:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	f383 8811 	msr	BASEPRI, r3
}
 800a8f4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a8f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	3738      	adds	r7, #56	@ 0x38
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}

0800a900 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b084      	sub	sp, #16
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d10b      	bne.n	800a926 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 800a90e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a912:	f383 8811 	msr	BASEPRI, r3
 800a916:	f3bf 8f6f 	isb	sy
 800a91a:	f3bf 8f4f 	dsb	sy
 800a91e:	60bb      	str	r3, [r7, #8]
}
 800a920:	bf00      	nop
 800a922:	bf00      	nop
 800a924:	e7fd      	b.n	800a922 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800a926:	f002 f851 	bl	800c9cc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a92e:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800a930:	f002 f87e 	bl	800ca30 <vPortExitCritical>

	return uxReturn;
 800a934:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800a936:	4618      	mov	r0, r3
 800a938:	3710      	adds	r7, #16
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}

0800a93e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a93e:	b480      	push	{r7}
 800a940:	b085      	sub	sp, #20
 800a942:	af00      	add	r7, sp, #0
 800a944:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d006      	beq.n	800a95c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	f1c3 0307 	rsb	r3, r3, #7
 800a958:	60fb      	str	r3, [r7, #12]
 800a95a:	e001      	b.n	800a960 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a95c:	2300      	movs	r3, #0
 800a95e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a960:	68fb      	ldr	r3, [r7, #12]
	}
 800a962:	4618      	mov	r0, r3
 800a964:	3714      	adds	r7, #20
 800a966:	46bd      	mov	sp, r7
 800a968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96c:	4770      	bx	lr

0800a96e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a96e:	b580      	push	{r7, lr}
 800a970:	b086      	sub	sp, #24
 800a972:	af00      	add	r7, sp, #0
 800a974:	60f8      	str	r0, [r7, #12]
 800a976:	60b9      	str	r1, [r7, #8]
 800a978:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a97a:	2300      	movs	r3, #0
 800a97c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a982:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d10d      	bne.n	800a9a8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d14d      	bne.n	800aa30 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	689b      	ldr	r3, [r3, #8]
 800a998:	4618      	mov	r0, r3
 800a99a:	f001 f9ed 	bl	800bd78 <xTaskPriorityDisinherit>
 800a99e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	609a      	str	r2, [r3, #8]
 800a9a6:	e043      	b.n	800aa30 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d119      	bne.n	800a9e2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	6858      	ldr	r0, [r3, #4]
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9b6:	461a      	mov	r2, r3
 800a9b8:	68b9      	ldr	r1, [r7, #8]
 800a9ba:	f005 fb6d 	bl	8010098 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	685a      	ldr	r2, [r3, #4]
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9c6:	441a      	add	r2, r3
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	685a      	ldr	r2, [r3, #4]
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	689b      	ldr	r3, [r3, #8]
 800a9d4:	429a      	cmp	r2, r3
 800a9d6:	d32b      	bcc.n	800aa30 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	681a      	ldr	r2, [r3, #0]
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	605a      	str	r2, [r3, #4]
 800a9e0:	e026      	b.n	800aa30 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	68d8      	ldr	r0, [r3, #12]
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9ea:	461a      	mov	r2, r3
 800a9ec:	68b9      	ldr	r1, [r7, #8]
 800a9ee:	f005 fb53 	bl	8010098 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	68da      	ldr	r2, [r3, #12]
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9fa:	425b      	negs	r3, r3
 800a9fc:	441a      	add	r2, r3
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	68da      	ldr	r2, [r3, #12]
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	429a      	cmp	r2, r3
 800aa0c:	d207      	bcs.n	800aa1e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	689a      	ldr	r2, [r3, #8]
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa16:	425b      	negs	r3, r3
 800aa18:	441a      	add	r2, r3
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2b02      	cmp	r3, #2
 800aa22:	d105      	bne.n	800aa30 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aa24:	693b      	ldr	r3, [r7, #16]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d002      	beq.n	800aa30 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800aa2a:	693b      	ldr	r3, [r7, #16]
 800aa2c:	3b01      	subs	r3, #1
 800aa2e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800aa30:	693b      	ldr	r3, [r7, #16]
 800aa32:	1c5a      	adds	r2, r3, #1
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800aa38:	697b      	ldr	r3, [r7, #20]
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3718      	adds	r7, #24
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}

0800aa42 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800aa42:	b580      	push	{r7, lr}
 800aa44:	b082      	sub	sp, #8
 800aa46:	af00      	add	r7, sp, #0
 800aa48:	6078      	str	r0, [r7, #4]
 800aa4a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d018      	beq.n	800aa86 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	68da      	ldr	r2, [r3, #12]
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa5c:	441a      	add	r2, r3
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	68da      	ldr	r2, [r3, #12]
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	689b      	ldr	r3, [r3, #8]
 800aa6a:	429a      	cmp	r2, r3
 800aa6c:	d303      	bcc.n	800aa76 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681a      	ldr	r2, [r3, #0]
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	68d9      	ldr	r1, [r3, #12]
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa7e:	461a      	mov	r2, r3
 800aa80:	6838      	ldr	r0, [r7, #0]
 800aa82:	f005 fb09 	bl	8010098 <memcpy>
	}
}
 800aa86:	bf00      	nop
 800aa88:	3708      	adds	r7, #8
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}

0800aa8e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800aa8e:	b580      	push	{r7, lr}
 800aa90:	b084      	sub	sp, #16
 800aa92:	af00      	add	r7, sp, #0
 800aa94:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800aa96:	f001 ff99 	bl	800c9cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aaa0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aaa2:	e011      	b.n	800aac8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d012      	beq.n	800aad2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	3324      	adds	r3, #36	@ 0x24
 800aab0:	4618      	mov	r0, r3
 800aab2:	f000 fef7 	bl	800b8a4 <xTaskRemoveFromEventList>
 800aab6:	4603      	mov	r3, r0
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d001      	beq.n	800aac0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800aabc:	f000 ffd4 	bl	800ba68 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800aac0:	7bfb      	ldrb	r3, [r7, #15]
 800aac2:	3b01      	subs	r3, #1
 800aac4:	b2db      	uxtb	r3, r3
 800aac6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aac8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	dce9      	bgt.n	800aaa4 <prvUnlockQueue+0x16>
 800aad0:	e000      	b.n	800aad4 <prvUnlockQueue+0x46>
					break;
 800aad2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	22ff      	movs	r2, #255	@ 0xff
 800aad8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800aadc:	f001 ffa8 	bl	800ca30 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800aae0:	f001 ff74 	bl	800c9cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aaea:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aaec:	e011      	b.n	800ab12 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	691b      	ldr	r3, [r3, #16]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d012      	beq.n	800ab1c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	3310      	adds	r3, #16
 800aafa:	4618      	mov	r0, r3
 800aafc:	f000 fed2 	bl	800b8a4 <xTaskRemoveFromEventList>
 800ab00:	4603      	mov	r3, r0
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d001      	beq.n	800ab0a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ab06:	f000 ffaf 	bl	800ba68 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ab0a:	7bbb      	ldrb	r3, [r7, #14]
 800ab0c:	3b01      	subs	r3, #1
 800ab0e:	b2db      	uxtb	r3, r3
 800ab10:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ab12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	dce9      	bgt.n	800aaee <prvUnlockQueue+0x60>
 800ab1a:	e000      	b.n	800ab1e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ab1c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	22ff      	movs	r2, #255	@ 0xff
 800ab22:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ab26:	f001 ff83 	bl	800ca30 <vPortExitCritical>
}
 800ab2a:	bf00      	nop
 800ab2c:	3710      	adds	r7, #16
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bd80      	pop	{r7, pc}

0800ab32 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ab32:	b580      	push	{r7, lr}
 800ab34:	b084      	sub	sp, #16
 800ab36:	af00      	add	r7, sp, #0
 800ab38:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ab3a:	f001 ff47 	bl	800c9cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d102      	bne.n	800ab4c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ab46:	2301      	movs	r3, #1
 800ab48:	60fb      	str	r3, [r7, #12]
 800ab4a:	e001      	b.n	800ab50 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ab50:	f001 ff6e 	bl	800ca30 <vPortExitCritical>

	return xReturn;
 800ab54:	68fb      	ldr	r3, [r7, #12]
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	3710      	adds	r7, #16
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}

0800ab5e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ab5e:	b580      	push	{r7, lr}
 800ab60:	b084      	sub	sp, #16
 800ab62:	af00      	add	r7, sp, #0
 800ab64:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ab66:	f001 ff31 	bl	800c9cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab72:	429a      	cmp	r2, r3
 800ab74:	d102      	bne.n	800ab7c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ab76:	2301      	movs	r3, #1
 800ab78:	60fb      	str	r3, [r7, #12]
 800ab7a:	e001      	b.n	800ab80 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ab80:	f001 ff56 	bl	800ca30 <vPortExitCritical>

	return xReturn;
 800ab84:	68fb      	ldr	r3, [r7, #12]
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	3710      	adds	r7, #16
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd80      	pop	{r7, pc}
	...

0800ab90 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b084      	sub	sp, #16
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
 800ab98:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	60fb      	str	r3, [r7, #12]
 800ab9e:	e018      	b.n	800abd2 <vQueueAddToRegistry+0x42>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800aba0:	4a10      	ldr	r2, [pc, #64]	@ (800abe4 <vQueueAddToRegistry+0x54>)
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d10f      	bne.n	800abcc <vQueueAddToRegistry+0x3c>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800abac:	490d      	ldr	r1, [pc, #52]	@ (800abe4 <vQueueAddToRegistry+0x54>)
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	683a      	ldr	r2, [r7, #0]
 800abb2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800abb6:	4a0b      	ldr	r2, [pc, #44]	@ (800abe4 <vQueueAddToRegistry+0x54>)
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	00db      	lsls	r3, r3, #3
 800abbc:	4413      	add	r3, r2
 800abbe:	687a      	ldr	r2, [r7, #4]
 800abc0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800abc2:	6839      	ldr	r1, [r7, #0]
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	f004 fa96 	bl	800f0f6 <xTraceObjectSetNameWithoutHandle>
				break;
 800abca:	e006      	b.n	800abda <vQueueAddToRegistry+0x4a>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	3301      	adds	r3, #1
 800abd0:	60fb      	str	r3, [r7, #12]
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	2b07      	cmp	r3, #7
 800abd6:	d9e3      	bls.n	800aba0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800abd8:	bf00      	nop
 800abda:	bf00      	nop
 800abdc:	3710      	adds	r7, #16
 800abde:	46bd      	mov	sp, r7
 800abe0:	bd80      	pop	{r7, pc}
 800abe2:	bf00      	nop
 800abe4:	20002a9c 	.word	0x20002a9c

0800abe8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b086      	sub	sp, #24
 800abec:	af00      	add	r7, sp, #0
 800abee:	60f8      	str	r0, [r7, #12]
 800abf0:	60b9      	str	r1, [r7, #8]
 800abf2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800abf8:	f001 fee8 	bl	800c9cc <vPortEnterCritical>
 800abfc:	697b      	ldr	r3, [r7, #20]
 800abfe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ac02:	b25b      	sxtb	r3, r3
 800ac04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac08:	d103      	bne.n	800ac12 <vQueueWaitForMessageRestricted+0x2a>
 800ac0a:	697b      	ldr	r3, [r7, #20]
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ac12:	697b      	ldr	r3, [r7, #20]
 800ac14:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ac18:	b25b      	sxtb	r3, r3
 800ac1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac1e:	d103      	bne.n	800ac28 <vQueueWaitForMessageRestricted+0x40>
 800ac20:	697b      	ldr	r3, [r7, #20]
 800ac22:	2200      	movs	r2, #0
 800ac24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ac28:	f001 ff02 	bl	800ca30 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ac2c:	697b      	ldr	r3, [r7, #20]
 800ac2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d106      	bne.n	800ac42 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ac34:	697b      	ldr	r3, [r7, #20]
 800ac36:	3324      	adds	r3, #36	@ 0x24
 800ac38:	687a      	ldr	r2, [r7, #4]
 800ac3a:	68b9      	ldr	r1, [r7, #8]
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	f000 fdfb 	bl	800b838 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ac42:	6978      	ldr	r0, [r7, #20]
 800ac44:	f7ff ff23 	bl	800aa8e <prvUnlockQueue>
	}
 800ac48:	bf00      	nop
 800ac4a:	3718      	adds	r7, #24
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}

0800ac50 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b08e      	sub	sp, #56	@ 0x38
 800ac54:	af04      	add	r7, sp, #16
 800ac56:	60f8      	str	r0, [r7, #12]
 800ac58:	60b9      	str	r1, [r7, #8]
 800ac5a:	607a      	str	r2, [r7, #4]
 800ac5c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ac5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d10b      	bne.n	800ac7c <xTaskCreateStatic+0x2c>
	__asm volatile
 800ac64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac68:	f383 8811 	msr	BASEPRI, r3
 800ac6c:	f3bf 8f6f 	isb	sy
 800ac70:	f3bf 8f4f 	dsb	sy
 800ac74:	623b      	str	r3, [r7, #32]
}
 800ac76:	bf00      	nop
 800ac78:	bf00      	nop
 800ac7a:	e7fd      	b.n	800ac78 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ac7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d10b      	bne.n	800ac9a <xTaskCreateStatic+0x4a>
	__asm volatile
 800ac82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac86:	f383 8811 	msr	BASEPRI, r3
 800ac8a:	f3bf 8f6f 	isb	sy
 800ac8e:	f3bf 8f4f 	dsb	sy
 800ac92:	61fb      	str	r3, [r7, #28]
}
 800ac94:	bf00      	nop
 800ac96:	bf00      	nop
 800ac98:	e7fd      	b.n	800ac96 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ac9a:	23ac      	movs	r3, #172	@ 0xac
 800ac9c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ac9e:	693b      	ldr	r3, [r7, #16]
 800aca0:	2bac      	cmp	r3, #172	@ 0xac
 800aca2:	d00b      	beq.n	800acbc <xTaskCreateStatic+0x6c>
	__asm volatile
 800aca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aca8:	f383 8811 	msr	BASEPRI, r3
 800acac:	f3bf 8f6f 	isb	sy
 800acb0:	f3bf 8f4f 	dsb	sy
 800acb4:	61bb      	str	r3, [r7, #24]
}
 800acb6:	bf00      	nop
 800acb8:	bf00      	nop
 800acba:	e7fd      	b.n	800acb8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800acbc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800acbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d01e      	beq.n	800ad02 <xTaskCreateStatic+0xb2>
 800acc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d01b      	beq.n	800ad02 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800acca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800accc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800acce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acd0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800acd2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800acd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acd6:	2202      	movs	r2, #2
 800acd8:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800acdc:	2300      	movs	r3, #0
 800acde:	9303      	str	r3, [sp, #12]
 800ace0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ace2:	9302      	str	r3, [sp, #8]
 800ace4:	f107 0314 	add.w	r3, r7, #20
 800ace8:	9301      	str	r3, [sp, #4]
 800acea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acec:	9300      	str	r3, [sp, #0]
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	687a      	ldr	r2, [r7, #4]
 800acf2:	68b9      	ldr	r1, [r7, #8]
 800acf4:	68f8      	ldr	r0, [r7, #12]
 800acf6:	f000 f851 	bl	800ad9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800acfa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800acfc:	f000 f8f8 	bl	800aef0 <prvAddNewTaskToReadyList>
 800ad00:	e001      	b.n	800ad06 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800ad02:	2300      	movs	r3, #0
 800ad04:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ad06:	697b      	ldr	r3, [r7, #20]
	}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3728      	adds	r7, #40	@ 0x28
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}

0800ad10 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b08c      	sub	sp, #48	@ 0x30
 800ad14:	af04      	add	r7, sp, #16
 800ad16:	60f8      	str	r0, [r7, #12]
 800ad18:	60b9      	str	r1, [r7, #8]
 800ad1a:	603b      	str	r3, [r7, #0]
 800ad1c:	4613      	mov	r3, r2
 800ad1e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ad20:	88fb      	ldrh	r3, [r7, #6]
 800ad22:	009b      	lsls	r3, r3, #2
 800ad24:	4618      	mov	r0, r3
 800ad26:	f001 ff79 	bl	800cc1c <pvPortMalloc>
 800ad2a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ad2c:	697b      	ldr	r3, [r7, #20]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d00e      	beq.n	800ad50 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ad32:	20ac      	movs	r0, #172	@ 0xac
 800ad34:	f001 ff72 	bl	800cc1c <pvPortMalloc>
 800ad38:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ad3a:	69fb      	ldr	r3, [r7, #28]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d003      	beq.n	800ad48 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ad40:	69fb      	ldr	r3, [r7, #28]
 800ad42:	697a      	ldr	r2, [r7, #20]
 800ad44:	631a      	str	r2, [r3, #48]	@ 0x30
 800ad46:	e005      	b.n	800ad54 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ad48:	6978      	ldr	r0, [r7, #20]
 800ad4a:	f002 f84d 	bl	800cde8 <vPortFree>
 800ad4e:	e001      	b.n	800ad54 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ad50:	2300      	movs	r3, #0
 800ad52:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ad54:	69fb      	ldr	r3, [r7, #28]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d017      	beq.n	800ad8a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ad5a:	69fb      	ldr	r3, [r7, #28]
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ad62:	88fa      	ldrh	r2, [r7, #6]
 800ad64:	2300      	movs	r3, #0
 800ad66:	9303      	str	r3, [sp, #12]
 800ad68:	69fb      	ldr	r3, [r7, #28]
 800ad6a:	9302      	str	r3, [sp, #8]
 800ad6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad6e:	9301      	str	r3, [sp, #4]
 800ad70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad72:	9300      	str	r3, [sp, #0]
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	68b9      	ldr	r1, [r7, #8]
 800ad78:	68f8      	ldr	r0, [r7, #12]
 800ad7a:	f000 f80f 	bl	800ad9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ad7e:	69f8      	ldr	r0, [r7, #28]
 800ad80:	f000 f8b6 	bl	800aef0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ad84:	2301      	movs	r3, #1
 800ad86:	61bb      	str	r3, [r7, #24]
 800ad88:	e002      	b.n	800ad90 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ad8a:	f04f 33ff 	mov.w	r3, #4294967295
 800ad8e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ad90:	69bb      	ldr	r3, [r7, #24]
	}
 800ad92:	4618      	mov	r0, r3
 800ad94:	3720      	adds	r7, #32
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}
	...

0800ad9c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b088      	sub	sp, #32
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	60f8      	str	r0, [r7, #12]
 800ada4:	60b9      	str	r1, [r7, #8]
 800ada6:	607a      	str	r2, [r7, #4]
 800ada8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800adaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adac:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	009b      	lsls	r3, r3, #2
 800adb2:	461a      	mov	r2, r3
 800adb4:	21a5      	movs	r1, #165	@ 0xa5
 800adb6:	f005 f8cd 	bl	800ff54 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800adba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adbc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800adc4:	3b01      	subs	r3, #1
 800adc6:	009b      	lsls	r3, r3, #2
 800adc8:	4413      	add	r3, r2
 800adca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800adcc:	69bb      	ldr	r3, [r7, #24]
 800adce:	f023 0307 	bic.w	r3, r3, #7
 800add2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800add4:	69bb      	ldr	r3, [r7, #24]
 800add6:	f003 0307 	and.w	r3, r3, #7
 800adda:	2b00      	cmp	r3, #0
 800addc:	d00b      	beq.n	800adf6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800adde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ade2:	f383 8811 	msr	BASEPRI, r3
 800ade6:	f3bf 8f6f 	isb	sy
 800adea:	f3bf 8f4f 	dsb	sy
 800adee:	617b      	str	r3, [r7, #20]
}
 800adf0:	bf00      	nop
 800adf2:	bf00      	nop
 800adf4:	e7fd      	b.n	800adf2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d01f      	beq.n	800ae3c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800adfc:	2300      	movs	r3, #0
 800adfe:	61fb      	str	r3, [r7, #28]
 800ae00:	e012      	b.n	800ae28 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ae02:	68ba      	ldr	r2, [r7, #8]
 800ae04:	69fb      	ldr	r3, [r7, #28]
 800ae06:	4413      	add	r3, r2
 800ae08:	7819      	ldrb	r1, [r3, #0]
 800ae0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae0c:	69fb      	ldr	r3, [r7, #28]
 800ae0e:	4413      	add	r3, r2
 800ae10:	3334      	adds	r3, #52	@ 0x34
 800ae12:	460a      	mov	r2, r1
 800ae14:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ae16:	68ba      	ldr	r2, [r7, #8]
 800ae18:	69fb      	ldr	r3, [r7, #28]
 800ae1a:	4413      	add	r3, r2
 800ae1c:	781b      	ldrb	r3, [r3, #0]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d006      	beq.n	800ae30 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ae22:	69fb      	ldr	r3, [r7, #28]
 800ae24:	3301      	adds	r3, #1
 800ae26:	61fb      	str	r3, [r7, #28]
 800ae28:	69fb      	ldr	r3, [r7, #28]
 800ae2a:	2b0f      	cmp	r3, #15
 800ae2c:	d9e9      	bls.n	800ae02 <prvInitialiseNewTask+0x66>
 800ae2e:	e000      	b.n	800ae32 <prvInitialiseNewTask+0x96>
			{
				break;
 800ae30:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ae32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae34:	2200      	movs	r2, #0
 800ae36:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ae3a:	e003      	b.n	800ae44 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ae3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae3e:	2200      	movs	r2, #0
 800ae40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ae44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae46:	2b06      	cmp	r3, #6
 800ae48:	d901      	bls.n	800ae4e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ae4a:	2306      	movs	r3, #6
 800ae4c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ae4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ae52:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ae54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ae58:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ae5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ae60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae62:	3304      	adds	r3, #4
 800ae64:	4618      	mov	r0, r3
 800ae66:	f7fe fb4a 	bl	80094fe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ae6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae6c:	3318      	adds	r3, #24
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f7fe fb45 	bl	80094fe <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ae74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae78:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae7c:	f1c3 0207 	rsb	r2, r3, #7
 800ae80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae82:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ae84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae88:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800ae8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ae90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae92:	2200      	movs	r2, #0
 800ae94:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ae98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800aea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aea2:	3358      	adds	r3, #88	@ 0x58
 800aea4:	224c      	movs	r2, #76	@ 0x4c
 800aea6:	2100      	movs	r1, #0
 800aea8:	4618      	mov	r0, r3
 800aeaa:	f005 f853 	bl	800ff54 <memset>
 800aeae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeb0:	4a0c      	ldr	r2, [pc, #48]	@ (800aee4 <prvInitialiseNewTask+0x148>)
 800aeb2:	65da      	str	r2, [r3, #92]	@ 0x5c
 800aeb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeb6:	4a0c      	ldr	r2, [pc, #48]	@ (800aee8 <prvInitialiseNewTask+0x14c>)
 800aeb8:	661a      	str	r2, [r3, #96]	@ 0x60
 800aeba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aebc:	4a0b      	ldr	r2, [pc, #44]	@ (800aeec <prvInitialiseNewTask+0x150>)
 800aebe:	665a      	str	r2, [r3, #100]	@ 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800aec0:	683a      	ldr	r2, [r7, #0]
 800aec2:	68f9      	ldr	r1, [r7, #12]
 800aec4:	69b8      	ldr	r0, [r7, #24]
 800aec6:	f001 fc41 	bl	800c74c <pxPortInitialiseStack>
 800aeca:	4602      	mov	r2, r0
 800aecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aece:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800aed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d002      	beq.n	800aedc <prvInitialiseNewTask+0x140>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800aed6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aed8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aeda:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aedc:	bf00      	nop
 800aede:	3720      	adds	r7, #32
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}
 800aee4:	2001742c 	.word	0x2001742c
 800aee8:	20017494 	.word	0x20017494
 800aeec:	200174fc 	.word	0x200174fc

0800aef0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b082      	sub	sp, #8
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800aef8:	f001 fd68 	bl	800c9cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800aefc:	4b37      	ldr	r3, [pc, #220]	@ (800afdc <prvAddNewTaskToReadyList+0xec>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	3301      	adds	r3, #1
 800af02:	4a36      	ldr	r2, [pc, #216]	@ (800afdc <prvAddNewTaskToReadyList+0xec>)
 800af04:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800af06:	4b36      	ldr	r3, [pc, #216]	@ (800afe0 <prvAddNewTaskToReadyList+0xf0>)
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d109      	bne.n	800af22 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800af0e:	4a34      	ldr	r2, [pc, #208]	@ (800afe0 <prvAddNewTaskToReadyList+0xf0>)
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800af14:	4b31      	ldr	r3, [pc, #196]	@ (800afdc <prvAddNewTaskToReadyList+0xec>)
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	2b01      	cmp	r3, #1
 800af1a:	d110      	bne.n	800af3e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800af1c:	f000 fdc8 	bl	800bab0 <prvInitialiseTaskLists>
 800af20:	e00d      	b.n	800af3e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800af22:	4b30      	ldr	r3, [pc, #192]	@ (800afe4 <prvAddNewTaskToReadyList+0xf4>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d109      	bne.n	800af3e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800af2a:	4b2d      	ldr	r3, [pc, #180]	@ (800afe0 <prvAddNewTaskToReadyList+0xf0>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af34:	429a      	cmp	r2, r3
 800af36:	d802      	bhi.n	800af3e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800af38:	4a29      	ldr	r2, [pc, #164]	@ (800afe0 <prvAddNewTaskToReadyList+0xf0>)
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800af3e:	4b2a      	ldr	r3, [pc, #168]	@ (800afe8 <prvAddNewTaskToReadyList+0xf8>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	3301      	adds	r3, #1
 800af44:	4a28      	ldr	r2, [pc, #160]	@ (800afe8 <prvAddNewTaskToReadyList+0xf8>)
 800af46:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800af48:	4b27      	ldr	r3, [pc, #156]	@ (800afe8 <prvAddNewTaskToReadyList+0xf8>)
 800af4a:	681a      	ldr	r2, [r3, #0]
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d00d      	beq.n	800af72 <prvAddNewTaskToReadyList+0x82>
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d00a      	beq.n	800af72 <prvAddNewTaskToReadyList+0x82>
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af66:	6879      	ldr	r1, [r7, #4]
 800af68:	2010      	movs	r0, #16
 800af6a:	f004 f877 	bl	800f05c <xTraceObjectRegisterWithoutHandle>
 800af6e:	4603      	mov	r3, r0
 800af70:	2b00      	cmp	r3, #0

		prvAddTaskToReadyList( pxNewTCB );
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	4619      	mov	r1, r3
 800af76:	2030      	movs	r0, #48	@ 0x30
 800af78:	f002 fd48 	bl	800da0c <xTraceEventCreate1>
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af80:	2201      	movs	r2, #1
 800af82:	409a      	lsls	r2, r3
 800af84:	4b19      	ldr	r3, [pc, #100]	@ (800afec <prvAddNewTaskToReadyList+0xfc>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	4313      	orrs	r3, r2
 800af8a:	4a18      	ldr	r2, [pc, #96]	@ (800afec <prvAddNewTaskToReadyList+0xfc>)
 800af8c:	6013      	str	r3, [r2, #0]
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af92:	4613      	mov	r3, r2
 800af94:	009b      	lsls	r3, r3, #2
 800af96:	4413      	add	r3, r2
 800af98:	009b      	lsls	r3, r3, #2
 800af9a:	4a15      	ldr	r2, [pc, #84]	@ (800aff0 <prvAddNewTaskToReadyList+0x100>)
 800af9c:	441a      	add	r2, r3
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	3304      	adds	r3, #4
 800afa2:	4619      	mov	r1, r3
 800afa4:	4610      	mov	r0, r2
 800afa6:	f7fe fab7 	bl	8009518 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800afaa:	f001 fd41 	bl	800ca30 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800afae:	4b0d      	ldr	r3, [pc, #52]	@ (800afe4 <prvAddNewTaskToReadyList+0xf4>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d00e      	beq.n	800afd4 <prvAddNewTaskToReadyList+0xe4>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800afb6:	4b0a      	ldr	r3, [pc, #40]	@ (800afe0 <prvAddNewTaskToReadyList+0xf0>)
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afc0:	429a      	cmp	r2, r3
 800afc2:	d207      	bcs.n	800afd4 <prvAddNewTaskToReadyList+0xe4>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800afc4:	4b0b      	ldr	r3, [pc, #44]	@ (800aff4 <prvAddNewTaskToReadyList+0x104>)
 800afc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800afca:	601a      	str	r2, [r3, #0]
 800afcc:	f3bf 8f4f 	dsb	sy
 800afd0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800afd4:	bf00      	nop
 800afd6:	3708      	adds	r7, #8
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}
 800afdc:	20002bdc 	.word	0x20002bdc
 800afe0:	20002adc 	.word	0x20002adc
 800afe4:	20002be8 	.word	0x20002be8
 800afe8:	20002bf8 	.word	0x20002bf8
 800afec:	20002be4 	.word	0x20002be4
 800aff0:	20002ae0 	.word	0x20002ae0
 800aff4:	e000ed04 	.word	0xe000ed04

0800aff8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b084      	sub	sp, #16
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800b000:	f001 fce4 	bl	800c9cc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d102      	bne.n	800b010 <vTaskDelete+0x18>
 800b00a:	4b40      	ldr	r3, [pc, #256]	@ (800b10c <vTaskDelete+0x114>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	e000      	b.n	800b012 <vTaskDelete+0x1a>
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	3304      	adds	r3, #4
 800b018:	4618      	mov	r0, r3
 800b01a:	f7fe fada 	bl	80095d2 <uxListRemove>
 800b01e:	4603      	mov	r3, r0
 800b020:	2b00      	cmp	r3, #0
 800b022:	d115      	bne.n	800b050 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b028:	4939      	ldr	r1, [pc, #228]	@ (800b110 <vTaskDelete+0x118>)
 800b02a:	4613      	mov	r3, r2
 800b02c:	009b      	lsls	r3, r3, #2
 800b02e:	4413      	add	r3, r2
 800b030:	009b      	lsls	r3, r3, #2
 800b032:	440b      	add	r3, r1
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d10a      	bne.n	800b050 <vTaskDelete+0x58>
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b03e:	2201      	movs	r2, #1
 800b040:	fa02 f303 	lsl.w	r3, r2, r3
 800b044:	43da      	mvns	r2, r3
 800b046:	4b33      	ldr	r3, [pc, #204]	@ (800b114 <vTaskDelete+0x11c>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	4013      	ands	r3, r2
 800b04c:	4a31      	ldr	r2, [pc, #196]	@ (800b114 <vTaskDelete+0x11c>)
 800b04e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b054:	2b00      	cmp	r3, #0
 800b056:	d004      	beq.n	800b062 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	3318      	adds	r3, #24
 800b05c:	4618      	mov	r0, r3
 800b05e:	f7fe fab8 	bl	80095d2 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800b062:	4b2d      	ldr	r3, [pc, #180]	@ (800b118 <vTaskDelete+0x120>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	3301      	adds	r3, #1
 800b068:	4a2b      	ldr	r2, [pc, #172]	@ (800b118 <vTaskDelete+0x120>)
 800b06a:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800b06c:	4b27      	ldr	r3, [pc, #156]	@ (800b10c <vTaskDelete+0x114>)
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	68fa      	ldr	r2, [r7, #12]
 800b072:	429a      	cmp	r2, r3
 800b074:	d112      	bne.n	800b09c <vTaskDelete+0xa4>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	3304      	adds	r3, #4
 800b07a:	4619      	mov	r1, r3
 800b07c:	4827      	ldr	r0, [pc, #156]	@ (800b11c <vTaskDelete+0x124>)
 800b07e:	f7fe fa4b 	bl	8009518 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800b082:	4b27      	ldr	r3, [pc, #156]	@ (800b120 <vTaskDelete+0x128>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	3301      	adds	r3, #1
 800b088:	4a25      	ldr	r2, [pc, #148]	@ (800b120 <vTaskDelete+0x128>)
 800b08a:	6013      	str	r3, [r2, #0]

				/* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
				portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
				traceTASK_DELETE( pxTCB );
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b090:	461a      	mov	r2, r3
 800b092:	68f9      	ldr	r1, [r7, #12]
 800b094:	2020      	movs	r0, #32
 800b096:	f003 fffa 	bl	800f08e <xTraceObjectUnregisterWithoutHandle>
 800b09a:	e010      	b.n	800b0be <vTaskDelete+0xc6>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800b09c:	4b21      	ldr	r3, [pc, #132]	@ (800b124 <vTaskDelete+0x12c>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	3b01      	subs	r3, #1
 800b0a2:	4a20      	ldr	r2, [pc, #128]	@ (800b124 <vTaskDelete+0x12c>)
 800b0a4:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0aa:	461a      	mov	r2, r3
 800b0ac:	68f9      	ldr	r1, [r7, #12]
 800b0ae:	2020      	movs	r0, #32
 800b0b0:	f003 ffed 	bl	800f08e <xTraceObjectUnregisterWithoutHandle>
				prvDeleteTCB( pxTCB );
 800b0b4:	68f8      	ldr	r0, [r7, #12]
 800b0b6:	f000 fd69 	bl	800bb8c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800b0ba:	f000 fd9d 	bl	800bbf8 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800b0be:	f001 fcb7 	bl	800ca30 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800b0c2:	4b19      	ldr	r3, [pc, #100]	@ (800b128 <vTaskDelete+0x130>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d01c      	beq.n	800b104 <vTaskDelete+0x10c>
		{
			if( pxTCB == pxCurrentTCB )
 800b0ca:	4b10      	ldr	r3, [pc, #64]	@ (800b10c <vTaskDelete+0x114>)
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	68fa      	ldr	r2, [r7, #12]
 800b0d0:	429a      	cmp	r2, r3
 800b0d2:	d117      	bne.n	800b104 <vTaskDelete+0x10c>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800b0d4:	4b15      	ldr	r3, [pc, #84]	@ (800b12c <vTaskDelete+0x134>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d00b      	beq.n	800b0f4 <vTaskDelete+0xfc>
	__asm volatile
 800b0dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0e0:	f383 8811 	msr	BASEPRI, r3
 800b0e4:	f3bf 8f6f 	isb	sy
 800b0e8:	f3bf 8f4f 	dsb	sy
 800b0ec:	60bb      	str	r3, [r7, #8]
}
 800b0ee:	bf00      	nop
 800b0f0:	bf00      	nop
 800b0f2:	e7fd      	b.n	800b0f0 <vTaskDelete+0xf8>
				portYIELD_WITHIN_API();
 800b0f4:	4b0e      	ldr	r3, [pc, #56]	@ (800b130 <vTaskDelete+0x138>)
 800b0f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b0fa:	601a      	str	r2, [r3, #0]
 800b0fc:	f3bf 8f4f 	dsb	sy
 800b100:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b104:	bf00      	nop
 800b106:	3710      	adds	r7, #16
 800b108:	46bd      	mov	sp, r7
 800b10a:	bd80      	pop	{r7, pc}
 800b10c:	20002adc 	.word	0x20002adc
 800b110:	20002ae0 	.word	0x20002ae0
 800b114:	20002be4 	.word	0x20002be4
 800b118:	20002bf8 	.word	0x20002bf8
 800b11c:	20002bb0 	.word	0x20002bb0
 800b120:	20002bc4 	.word	0x20002bc4
 800b124:	20002bdc 	.word	0x20002bdc
 800b128:	20002be8 	.word	0x20002be8
 800b12c:	20002c04 	.word	0x20002c04
 800b130:	e000ed04 	.word	0xe000ed04

0800b134 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800b134:	b580      	push	{r7, lr}
 800b136:	b08a      	sub	sp, #40	@ 0x28
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
 800b13c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800b13e:	2300      	movs	r3, #0
 800b140:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d10b      	bne.n	800b160 <vTaskDelayUntil+0x2c>
	__asm volatile
 800b148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b14c:	f383 8811 	msr	BASEPRI, r3
 800b150:	f3bf 8f6f 	isb	sy
 800b154:	f3bf 8f4f 	dsb	sy
 800b158:	617b      	str	r3, [r7, #20]
}
 800b15a:	bf00      	nop
 800b15c:	bf00      	nop
 800b15e:	e7fd      	b.n	800b15c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d10b      	bne.n	800b17e <vTaskDelayUntil+0x4a>
	__asm volatile
 800b166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b16a:	f383 8811 	msr	BASEPRI, r3
 800b16e:	f3bf 8f6f 	isb	sy
 800b172:	f3bf 8f4f 	dsb	sy
 800b176:	613b      	str	r3, [r7, #16]
}
 800b178:	bf00      	nop
 800b17a:	bf00      	nop
 800b17c:	e7fd      	b.n	800b17a <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 800b17e:	4b2c      	ldr	r3, [pc, #176]	@ (800b230 <vTaskDelayUntil+0xfc>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d00b      	beq.n	800b19e <vTaskDelayUntil+0x6a>
	__asm volatile
 800b186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b18a:	f383 8811 	msr	BASEPRI, r3
 800b18e:	f3bf 8f6f 	isb	sy
 800b192:	f3bf 8f4f 	dsb	sy
 800b196:	60fb      	str	r3, [r7, #12]
}
 800b198:	bf00      	nop
 800b19a:	bf00      	nop
 800b19c:	e7fd      	b.n	800b19a <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 800b19e:	f000 f903 	bl	800b3a8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800b1a2:	4b24      	ldr	r3, [pc, #144]	@ (800b234 <vTaskDelayUntil+0x100>)
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	683a      	ldr	r2, [r7, #0]
 800b1ae:	4413      	add	r3, r2
 800b1b0:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	6a3a      	ldr	r2, [r7, #32]
 800b1b8:	429a      	cmp	r2, r3
 800b1ba:	d20b      	bcs.n	800b1d4 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	69fa      	ldr	r2, [r7, #28]
 800b1c2:	429a      	cmp	r2, r3
 800b1c4:	d211      	bcs.n	800b1ea <vTaskDelayUntil+0xb6>
 800b1c6:	69fa      	ldr	r2, [r7, #28]
 800b1c8:	6a3b      	ldr	r3, [r7, #32]
 800b1ca:	429a      	cmp	r2, r3
 800b1cc:	d90d      	bls.n	800b1ea <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	627b      	str	r3, [r7, #36]	@ 0x24
 800b1d2:	e00a      	b.n	800b1ea <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	69fa      	ldr	r2, [r7, #28]
 800b1da:	429a      	cmp	r2, r3
 800b1dc:	d303      	bcc.n	800b1e6 <vTaskDelayUntil+0xb2>
 800b1de:	69fa      	ldr	r2, [r7, #28]
 800b1e0:	6a3b      	ldr	r3, [r7, #32]
 800b1e2:	429a      	cmp	r2, r3
 800b1e4:	d901      	bls.n	800b1ea <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800b1e6:	2301      	movs	r3, #1
 800b1e8:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	69fa      	ldr	r2, [r7, #28]
 800b1ee:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800b1f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d00a      	beq.n	800b20c <vTaskDelayUntil+0xd8>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );
 800b1f6:	69f9      	ldr	r1, [r7, #28]
 800b1f8:	2079      	movs	r0, #121	@ 0x79
 800b1fa:	f002 fc07 	bl	800da0c <xTraceEventCreate1>

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800b1fe:	69fa      	ldr	r2, [r7, #28]
 800b200:	6a3b      	ldr	r3, [r7, #32]
 800b202:	1ad3      	subs	r3, r2, r3
 800b204:	2100      	movs	r1, #0
 800b206:	4618      	mov	r0, r3
 800b208:	f000 fefc 	bl	800c004 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800b20c:	f000 f8da 	bl	800b3c4 <xTaskResumeAll>
 800b210:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b212:	69bb      	ldr	r3, [r7, #24]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d107      	bne.n	800b228 <vTaskDelayUntil+0xf4>
		{
			portYIELD_WITHIN_API();
 800b218:	4b07      	ldr	r3, [pc, #28]	@ (800b238 <vTaskDelayUntil+0x104>)
 800b21a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b21e:	601a      	str	r2, [r3, #0]
 800b220:	f3bf 8f4f 	dsb	sy
 800b224:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b228:	bf00      	nop
 800b22a:	3728      	adds	r7, #40	@ 0x28
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd80      	pop	{r7, pc}
 800b230:	20002c04 	.word	0x20002c04
 800b234:	20002be0 	.word	0x20002be0
 800b238:	e000ed04 	.word	0xe000ed04

0800b23c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b084      	sub	sp, #16
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b244:	2300      	movs	r3, #0
 800b246:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d01c      	beq.n	800b288 <vTaskDelay+0x4c>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b24e:	4b16      	ldr	r3, [pc, #88]	@ (800b2a8 <vTaskDelay+0x6c>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d00b      	beq.n	800b26e <vTaskDelay+0x32>
	__asm volatile
 800b256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b25a:	f383 8811 	msr	BASEPRI, r3
 800b25e:	f3bf 8f6f 	isb	sy
 800b262:	f3bf 8f4f 	dsb	sy
 800b266:	60bb      	str	r3, [r7, #8]
}
 800b268:	bf00      	nop
 800b26a:	bf00      	nop
 800b26c:	e7fd      	b.n	800b26a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b26e:	f000 f89b 	bl	800b3a8 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 800b272:	6879      	ldr	r1, [r7, #4]
 800b274:	207a      	movs	r0, #122	@ 0x7a
 800b276:	f002 fbc9 	bl	800da0c <xTraceEventCreate1>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b27a:	2100      	movs	r1, #0
 800b27c:	6878      	ldr	r0, [r7, #4]
 800b27e:	f000 fec1 	bl	800c004 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b282:	f000 f89f 	bl	800b3c4 <xTaskResumeAll>
 800b286:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d107      	bne.n	800b29e <vTaskDelay+0x62>
		{
			portYIELD_WITHIN_API();
 800b28e:	4b07      	ldr	r3, [pc, #28]	@ (800b2ac <vTaskDelay+0x70>)
 800b290:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b294:	601a      	str	r2, [r3, #0]
 800b296:	f3bf 8f4f 	dsb	sy
 800b29a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b29e:	bf00      	nop
 800b2a0:	3710      	adds	r7, #16
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}
 800b2a6:	bf00      	nop
 800b2a8:	20002c04 	.word	0x20002c04
 800b2ac:	e000ed04 	.word	0xe000ed04

0800b2b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b08a      	sub	sp, #40	@ 0x28
 800b2b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b2be:	463a      	mov	r2, r7
 800b2c0:	1d39      	adds	r1, r7, #4
 800b2c2:	f107 0308 	add.w	r3, r7, #8
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	f7f6 ff4c 	bl	8002164 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b2cc:	6839      	ldr	r1, [r7, #0]
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	68ba      	ldr	r2, [r7, #8]
 800b2d2:	9202      	str	r2, [sp, #8]
 800b2d4:	9301      	str	r3, [sp, #4]
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	9300      	str	r3, [sp, #0]
 800b2da:	2300      	movs	r3, #0
 800b2dc:	460a      	mov	r2, r1
 800b2de:	492a      	ldr	r1, [pc, #168]	@ (800b388 <vTaskStartScheduler+0xd8>)
 800b2e0:	482a      	ldr	r0, [pc, #168]	@ (800b38c <vTaskStartScheduler+0xdc>)
 800b2e2:	f7ff fcb5 	bl	800ac50 <xTaskCreateStatic>
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	4a29      	ldr	r2, [pc, #164]	@ (800b390 <vTaskStartScheduler+0xe0>)
 800b2ea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b2ec:	4b28      	ldr	r3, [pc, #160]	@ (800b390 <vTaskStartScheduler+0xe0>)
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d002      	beq.n	800b2fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b2f4:	2301      	movs	r3, #1
 800b2f6:	617b      	str	r3, [r7, #20]
 800b2f8:	e001      	b.n	800b2fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b2fe:	697b      	ldr	r3, [r7, #20]
 800b300:	2b01      	cmp	r3, #1
 800b302:	d102      	bne.n	800b30a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b304:	f000 fee4 	bl	800c0d0 <xTimerCreateTimerTask>
 800b308:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b30a:	697b      	ldr	r3, [r7, #20]
 800b30c:	2b01      	cmp	r3, #1
 800b30e:	d126      	bne.n	800b35e <vTaskStartScheduler+0xae>
	__asm volatile
 800b310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b314:	f383 8811 	msr	BASEPRI, r3
 800b318:	f3bf 8f6f 	isb	sy
 800b31c:	f3bf 8f4f 	dsb	sy
 800b320:	613b      	str	r3, [r7, #16]
}
 800b322:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b324:	4b1b      	ldr	r3, [pc, #108]	@ (800b394 <vTaskStartScheduler+0xe4>)
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	3358      	adds	r3, #88	@ 0x58
 800b32a:	4a1b      	ldr	r2, [pc, #108]	@ (800b398 <vTaskStartScheduler+0xe8>)
 800b32c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b32e:	4b1b      	ldr	r3, [pc, #108]	@ (800b39c <vTaskStartScheduler+0xec>)
 800b330:	f04f 32ff 	mov.w	r2, #4294967295
 800b334:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b336:	4b1a      	ldr	r3, [pc, #104]	@ (800b3a0 <vTaskStartScheduler+0xf0>)
 800b338:	2201      	movs	r2, #1
 800b33a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b33c:	4b19      	ldr	r3, [pc, #100]	@ (800b3a4 <vTaskStartScheduler+0xf4>)
 800b33e:	2200      	movs	r2, #0
 800b340:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800b342:	f7f6 feff 	bl	8002144 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();
 800b346:	4b13      	ldr	r3, [pc, #76]	@ (800b394 <vTaskStartScheduler+0xe4>)
 800b348:	681a      	ldr	r2, [r3, #0]
 800b34a:	4b12      	ldr	r3, [pc, #72]	@ (800b394 <vTaskStartScheduler+0xe4>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b350:	4619      	mov	r1, r3
 800b352:	4610      	mov	r0, r2
 800b354:	f004 fc66 	bl	800fc24 <xTraceTaskSwitch>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b358:	f001 fa82 	bl	800c860 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b35c:	e00f      	b.n	800b37e <vTaskStartScheduler+0xce>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b35e:	697b      	ldr	r3, [r7, #20]
 800b360:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b364:	d10b      	bne.n	800b37e <vTaskStartScheduler+0xce>
	__asm volatile
 800b366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b36a:	f383 8811 	msr	BASEPRI, r3
 800b36e:	f3bf 8f6f 	isb	sy
 800b372:	f3bf 8f4f 	dsb	sy
 800b376:	60fb      	str	r3, [r7, #12]
}
 800b378:	bf00      	nop
 800b37a:	bf00      	nop
 800b37c:	e7fd      	b.n	800b37a <vTaskStartScheduler+0xca>
}
 800b37e:	bf00      	nop
 800b380:	3718      	adds	r7, #24
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}
 800b386:	bf00      	nop
 800b388:	08010f10 	.word	0x08010f10
 800b38c:	0800ba81 	.word	0x0800ba81
 800b390:	20002c00 	.word	0x20002c00
 800b394:	20002adc 	.word	0x20002adc
 800b398:	200001cc 	.word	0x200001cc
 800b39c:	20002bfc 	.word	0x20002bfc
 800b3a0:	20002be8 	.word	0x20002be8
 800b3a4:	20002be0 	.word	0x20002be0

0800b3a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b3a8:	b480      	push	{r7}
 800b3aa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b3ac:	4b04      	ldr	r3, [pc, #16]	@ (800b3c0 <vTaskSuspendAll+0x18>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	3301      	adds	r3, #1
 800b3b2:	4a03      	ldr	r2, [pc, #12]	@ (800b3c0 <vTaskSuspendAll+0x18>)
 800b3b4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b3b6:	bf00      	nop
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3be:	4770      	bx	lr
 800b3c0:	20002c04 	.word	0x20002c04

0800b3c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b084      	sub	sp, #16
 800b3c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b3d2:	4b44      	ldr	r3, [pc, #272]	@ (800b4e4 <xTaskResumeAll+0x120>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d10b      	bne.n	800b3f2 <xTaskResumeAll+0x2e>
	__asm volatile
 800b3da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3de:	f383 8811 	msr	BASEPRI, r3
 800b3e2:	f3bf 8f6f 	isb	sy
 800b3e6:	f3bf 8f4f 	dsb	sy
 800b3ea:	603b      	str	r3, [r7, #0]
}
 800b3ec:	bf00      	nop
 800b3ee:	bf00      	nop
 800b3f0:	e7fd      	b.n	800b3ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b3f2:	f001 faeb 	bl	800c9cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b3f6:	4b3b      	ldr	r3, [pc, #236]	@ (800b4e4 <xTaskResumeAll+0x120>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	3b01      	subs	r3, #1
 800b3fc:	4a39      	ldr	r2, [pc, #228]	@ (800b4e4 <xTaskResumeAll+0x120>)
 800b3fe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b400:	4b38      	ldr	r3, [pc, #224]	@ (800b4e4 <xTaskResumeAll+0x120>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d166      	bne.n	800b4d6 <xTaskResumeAll+0x112>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b408:	4b37      	ldr	r3, [pc, #220]	@ (800b4e8 <xTaskResumeAll+0x124>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d062      	beq.n	800b4d6 <xTaskResumeAll+0x112>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b410:	e033      	b.n	800b47a <xTaskResumeAll+0xb6>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b412:	4b36      	ldr	r3, [pc, #216]	@ (800b4ec <xTaskResumeAll+0x128>)
 800b414:	68db      	ldr	r3, [r3, #12]
 800b416:	68db      	ldr	r3, [r3, #12]
 800b418:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	3318      	adds	r3, #24
 800b41e:	4618      	mov	r0, r3
 800b420:	f7fe f8d7 	bl	80095d2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	3304      	adds	r3, #4
 800b428:	4618      	mov	r0, r3
 800b42a:	f7fe f8d2 	bl	80095d2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	4619      	mov	r1, r3
 800b432:	2030      	movs	r0, #48	@ 0x30
 800b434:	f002 faea 	bl	800da0c <xTraceEventCreate1>
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b43c:	2201      	movs	r2, #1
 800b43e:	409a      	lsls	r2, r3
 800b440:	4b2b      	ldr	r3, [pc, #172]	@ (800b4f0 <xTaskResumeAll+0x12c>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	4313      	orrs	r3, r2
 800b446:	4a2a      	ldr	r2, [pc, #168]	@ (800b4f0 <xTaskResumeAll+0x12c>)
 800b448:	6013      	str	r3, [r2, #0]
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b44e:	4613      	mov	r3, r2
 800b450:	009b      	lsls	r3, r3, #2
 800b452:	4413      	add	r3, r2
 800b454:	009b      	lsls	r3, r3, #2
 800b456:	4a27      	ldr	r2, [pc, #156]	@ (800b4f4 <xTaskResumeAll+0x130>)
 800b458:	441a      	add	r2, r3
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	3304      	adds	r3, #4
 800b45e:	4619      	mov	r1, r3
 800b460:	4610      	mov	r0, r2
 800b462:	f7fe f859 	bl	8009518 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b46a:	4b23      	ldr	r3, [pc, #140]	@ (800b4f8 <xTaskResumeAll+0x134>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b470:	429a      	cmp	r2, r3
 800b472:	d302      	bcc.n	800b47a <xTaskResumeAll+0xb6>
					{
						xYieldPending = pdTRUE;
 800b474:	4b21      	ldr	r3, [pc, #132]	@ (800b4fc <xTaskResumeAll+0x138>)
 800b476:	2201      	movs	r2, #1
 800b478:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b47a:	4b1c      	ldr	r3, [pc, #112]	@ (800b4ec <xTaskResumeAll+0x128>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d1c7      	bne.n	800b412 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d001      	beq.n	800b48c <xTaskResumeAll+0xc8>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b488:	f000 fbb6 	bl	800bbf8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b48c:	4b1c      	ldr	r3, [pc, #112]	@ (800b500 <xTaskResumeAll+0x13c>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d010      	beq.n	800b4ba <xTaskResumeAll+0xf6>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b498:	f000 f846 	bl	800b528 <xTaskIncrementTick>
 800b49c:	4603      	mov	r3, r0
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d002      	beq.n	800b4a8 <xTaskResumeAll+0xe4>
							{
								xYieldPending = pdTRUE;
 800b4a2:	4b16      	ldr	r3, [pc, #88]	@ (800b4fc <xTaskResumeAll+0x138>)
 800b4a4:	2201      	movs	r2, #1
 800b4a6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	3b01      	subs	r3, #1
 800b4ac:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d1f1      	bne.n	800b498 <xTaskResumeAll+0xd4>

						xPendedTicks = 0;
 800b4b4:	4b12      	ldr	r3, [pc, #72]	@ (800b500 <xTaskResumeAll+0x13c>)
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b4ba:	4b10      	ldr	r3, [pc, #64]	@ (800b4fc <xTaskResumeAll+0x138>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d009      	beq.n	800b4d6 <xTaskResumeAll+0x112>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b4c2:	2301      	movs	r3, #1
 800b4c4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b4c6:	4b0f      	ldr	r3, [pc, #60]	@ (800b504 <xTaskResumeAll+0x140>)
 800b4c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b4cc:	601a      	str	r2, [r3, #0]
 800b4ce:	f3bf 8f4f 	dsb	sy
 800b4d2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b4d6:	f001 faab 	bl	800ca30 <vPortExitCritical>

	return xAlreadyYielded;
 800b4da:	68bb      	ldr	r3, [r7, #8]
}
 800b4dc:	4618      	mov	r0, r3
 800b4de:	3710      	adds	r7, #16
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	bd80      	pop	{r7, pc}
 800b4e4:	20002c04 	.word	0x20002c04
 800b4e8:	20002bdc 	.word	0x20002bdc
 800b4ec:	20002b9c 	.word	0x20002b9c
 800b4f0:	20002be4 	.word	0x20002be4
 800b4f4:	20002ae0 	.word	0x20002ae0
 800b4f8:	20002adc 	.word	0x20002adc
 800b4fc:	20002bf0 	.word	0x20002bf0
 800b500:	20002bec 	.word	0x20002bec
 800b504:	e000ed04 	.word	0xe000ed04

0800b508 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b508:	b480      	push	{r7}
 800b50a:	b083      	sub	sp, #12
 800b50c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b50e:	4b05      	ldr	r3, [pc, #20]	@ (800b524 <xTaskGetTickCount+0x1c>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b514:	687b      	ldr	r3, [r7, #4]
}
 800b516:	4618      	mov	r0, r3
 800b518:	370c      	adds	r7, #12
 800b51a:	46bd      	mov	sp, r7
 800b51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b520:	4770      	bx	lr
 800b522:	bf00      	nop
 800b524:	20002be0 	.word	0x20002be0

0800b528 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b086      	sub	sp, #24
 800b52c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b52e:	2300      	movs	r3, #0
 800b530:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
 800b532:	4b5e      	ldr	r3, [pc, #376]	@ (800b6ac <xTaskIncrementTick+0x184>)
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	2b01      	cmp	r3, #1
 800b538:	d003      	beq.n	800b542 <xTaskIncrementTick+0x1a>
 800b53a:	4b5d      	ldr	r3, [pc, #372]	@ (800b6b0 <xTaskIncrementTick+0x188>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d105      	bne.n	800b54e <xTaskIncrementTick+0x26>
 800b542:	4b5c      	ldr	r3, [pc, #368]	@ (800b6b4 <xTaskIncrementTick+0x18c>)
 800b544:	681a      	ldr	r2, [r3, #0]
 800b546:	4b5c      	ldr	r3, [pc, #368]	@ (800b6b8 <xTaskIncrementTick+0x190>)
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	3201      	adds	r2, #1
 800b54c:	619a      	str	r2, [r3, #24]
 800b54e:	4b57      	ldr	r3, [pc, #348]	@ (800b6ac <xTaskIncrementTick+0x184>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d106      	bne.n	800b564 <xTaskIncrementTick+0x3c>
 800b556:	4b57      	ldr	r3, [pc, #348]	@ (800b6b4 <xTaskIncrementTick+0x18c>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	3301      	adds	r3, #1
 800b55c:	4619      	mov	r1, r3
 800b55e:	2031      	movs	r0, #49	@ 0x31
 800b560:	f002 fa54 	bl	800da0c <xTraceEventCreate1>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b564:	4b51      	ldr	r3, [pc, #324]	@ (800b6ac <xTaskIncrementTick+0x184>)
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	f040 8094 	bne.w	800b696 <xTaskIncrementTick+0x16e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b56e:	4b51      	ldr	r3, [pc, #324]	@ (800b6b4 <xTaskIncrementTick+0x18c>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	3301      	adds	r3, #1
 800b574:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b576:	4a4f      	ldr	r2, [pc, #316]	@ (800b6b4 <xTaskIncrementTick+0x18c>)
 800b578:	693b      	ldr	r3, [r7, #16]
 800b57a:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b57c:	693b      	ldr	r3, [r7, #16]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d121      	bne.n	800b5c6 <xTaskIncrementTick+0x9e>
		{
			taskSWITCH_DELAYED_LISTS();
 800b582:	4b4e      	ldr	r3, [pc, #312]	@ (800b6bc <xTaskIncrementTick+0x194>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d00b      	beq.n	800b5a4 <xTaskIncrementTick+0x7c>
	__asm volatile
 800b58c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b590:	f383 8811 	msr	BASEPRI, r3
 800b594:	f3bf 8f6f 	isb	sy
 800b598:	f3bf 8f4f 	dsb	sy
 800b59c:	603b      	str	r3, [r7, #0]
}
 800b59e:	bf00      	nop
 800b5a0:	bf00      	nop
 800b5a2:	e7fd      	b.n	800b5a0 <xTaskIncrementTick+0x78>
 800b5a4:	4b45      	ldr	r3, [pc, #276]	@ (800b6bc <xTaskIncrementTick+0x194>)
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	60fb      	str	r3, [r7, #12]
 800b5aa:	4b45      	ldr	r3, [pc, #276]	@ (800b6c0 <xTaskIncrementTick+0x198>)
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	4a43      	ldr	r2, [pc, #268]	@ (800b6bc <xTaskIncrementTick+0x194>)
 800b5b0:	6013      	str	r3, [r2, #0]
 800b5b2:	4a43      	ldr	r2, [pc, #268]	@ (800b6c0 <xTaskIncrementTick+0x198>)
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	6013      	str	r3, [r2, #0]
 800b5b8:	4b42      	ldr	r3, [pc, #264]	@ (800b6c4 <xTaskIncrementTick+0x19c>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	3301      	adds	r3, #1
 800b5be:	4a41      	ldr	r2, [pc, #260]	@ (800b6c4 <xTaskIncrementTick+0x19c>)
 800b5c0:	6013      	str	r3, [r2, #0]
 800b5c2:	f000 fb19 	bl	800bbf8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b5c6:	4b40      	ldr	r3, [pc, #256]	@ (800b6c8 <xTaskIncrementTick+0x1a0>)
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	693a      	ldr	r2, [r7, #16]
 800b5cc:	429a      	cmp	r2, r3
 800b5ce:	d34d      	bcc.n	800b66c <xTaskIncrementTick+0x144>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b5d0:	4b3a      	ldr	r3, [pc, #232]	@ (800b6bc <xTaskIncrementTick+0x194>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d104      	bne.n	800b5e4 <xTaskIncrementTick+0xbc>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b5da:	4b3b      	ldr	r3, [pc, #236]	@ (800b6c8 <xTaskIncrementTick+0x1a0>)
 800b5dc:	f04f 32ff 	mov.w	r2, #4294967295
 800b5e0:	601a      	str	r2, [r3, #0]
					break;
 800b5e2:	e043      	b.n	800b66c <xTaskIncrementTick+0x144>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5e4:	4b35      	ldr	r3, [pc, #212]	@ (800b6bc <xTaskIncrementTick+0x194>)
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	68db      	ldr	r3, [r3, #12]
 800b5ea:	68db      	ldr	r3, [r3, #12]
 800b5ec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b5ee:	68bb      	ldr	r3, [r7, #8]
 800b5f0:	685b      	ldr	r3, [r3, #4]
 800b5f2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b5f4:	693a      	ldr	r2, [r7, #16]
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	429a      	cmp	r2, r3
 800b5fa:	d203      	bcs.n	800b604 <xTaskIncrementTick+0xdc>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b5fc:	4a32      	ldr	r2, [pc, #200]	@ (800b6c8 <xTaskIncrementTick+0x1a0>)
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b602:	e033      	b.n	800b66c <xTaskIncrementTick+0x144>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	3304      	adds	r3, #4
 800b608:	4618      	mov	r0, r3
 800b60a:	f7fd ffe2 	bl	80095d2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b60e:	68bb      	ldr	r3, [r7, #8]
 800b610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b612:	2b00      	cmp	r3, #0
 800b614:	d004      	beq.n	800b620 <xTaskIncrementTick+0xf8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b616:	68bb      	ldr	r3, [r7, #8]
 800b618:	3318      	adds	r3, #24
 800b61a:	4618      	mov	r0, r3
 800b61c:	f7fd ffd9 	bl	80095d2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b620:	68bb      	ldr	r3, [r7, #8]
 800b622:	4619      	mov	r1, r3
 800b624:	2030      	movs	r0, #48	@ 0x30
 800b626:	f002 f9f1 	bl	800da0c <xTraceEventCreate1>
 800b62a:	68bb      	ldr	r3, [r7, #8]
 800b62c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b62e:	2201      	movs	r2, #1
 800b630:	409a      	lsls	r2, r3
 800b632:	4b26      	ldr	r3, [pc, #152]	@ (800b6cc <xTaskIncrementTick+0x1a4>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	4313      	orrs	r3, r2
 800b638:	4a24      	ldr	r2, [pc, #144]	@ (800b6cc <xTaskIncrementTick+0x1a4>)
 800b63a:	6013      	str	r3, [r2, #0]
 800b63c:	68bb      	ldr	r3, [r7, #8]
 800b63e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b640:	4613      	mov	r3, r2
 800b642:	009b      	lsls	r3, r3, #2
 800b644:	4413      	add	r3, r2
 800b646:	009b      	lsls	r3, r3, #2
 800b648:	4a21      	ldr	r2, [pc, #132]	@ (800b6d0 <xTaskIncrementTick+0x1a8>)
 800b64a:	441a      	add	r2, r3
 800b64c:	68bb      	ldr	r3, [r7, #8]
 800b64e:	3304      	adds	r3, #4
 800b650:	4619      	mov	r1, r3
 800b652:	4610      	mov	r0, r2
 800b654:	f7fd ff60 	bl	8009518 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b65c:	4b1d      	ldr	r3, [pc, #116]	@ (800b6d4 <xTaskIncrementTick+0x1ac>)
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b662:	429a      	cmp	r2, r3
 800b664:	d3b4      	bcc.n	800b5d0 <xTaskIncrementTick+0xa8>
						{
							xSwitchRequired = pdTRUE;
 800b666:	2301      	movs	r3, #1
 800b668:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b66a:	e7b1      	b.n	800b5d0 <xTaskIncrementTick+0xa8>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b66c:	4b19      	ldr	r3, [pc, #100]	@ (800b6d4 <xTaskIncrementTick+0x1ac>)
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b672:	4917      	ldr	r1, [pc, #92]	@ (800b6d0 <xTaskIncrementTick+0x1a8>)
 800b674:	4613      	mov	r3, r2
 800b676:	009b      	lsls	r3, r3, #2
 800b678:	4413      	add	r3, r2
 800b67a:	009b      	lsls	r3, r3, #2
 800b67c:	440b      	add	r3, r1
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	2b01      	cmp	r3, #1
 800b682:	d901      	bls.n	800b688 <xTaskIncrementTick+0x160>
			{
				xSwitchRequired = pdTRUE;
 800b684:	2301      	movs	r3, #1
 800b686:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b688:	4b13      	ldr	r3, [pc, #76]	@ (800b6d8 <xTaskIncrementTick+0x1b0>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d007      	beq.n	800b6a0 <xTaskIncrementTick+0x178>
			{
				xSwitchRequired = pdTRUE;
 800b690:	2301      	movs	r3, #1
 800b692:	617b      	str	r3, [r7, #20]
 800b694:	e004      	b.n	800b6a0 <xTaskIncrementTick+0x178>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b696:	4b06      	ldr	r3, [pc, #24]	@ (800b6b0 <xTaskIncrementTick+0x188>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	3301      	adds	r3, #1
 800b69c:	4a04      	ldr	r2, [pc, #16]	@ (800b6b0 <xTaskIncrementTick+0x188>)
 800b69e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b6a0:	697b      	ldr	r3, [r7, #20]
}
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	3718      	adds	r7, #24
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bd80      	pop	{r7, pc}
 800b6aa:	bf00      	nop
 800b6ac:	20002c04 	.word	0x20002c04
 800b6b0:	20002bec 	.word	0x20002bec
 800b6b4:	20002be0 	.word	0x20002be0
 800b6b8:	20017420 	.word	0x20017420
 800b6bc:	20002b94 	.word	0x20002b94
 800b6c0:	20002b98 	.word	0x20002b98
 800b6c4:	20002bf4 	.word	0x20002bf4
 800b6c8:	20002bfc 	.word	0x20002bfc
 800b6cc:	20002be4 	.word	0x20002be4
 800b6d0:	20002ae0 	.word	0x20002ae0
 800b6d4:	20002adc 	.word	0x20002adc
 800b6d8:	20002bf0 	.word	0x20002bf0

0800b6dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b086      	sub	sp, #24
 800b6e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b6e2:	4b3a      	ldr	r3, [pc, #232]	@ (800b7cc <vTaskSwitchContext+0xf0>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d003      	beq.n	800b6f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b6ea:	4b39      	ldr	r3, [pc, #228]	@ (800b7d0 <vTaskSwitchContext+0xf4>)
 800b6ec:	2201      	movs	r2, #1
 800b6ee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b6f0:	e067      	b.n	800b7c2 <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 800b6f2:	4b37      	ldr	r3, [pc, #220]	@ (800b7d0 <vTaskSwitchContext+0xf4>)
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800b6f8:	f7f6 fd2b 	bl	8002152 <getRunTimeCounterValue>
 800b6fc:	4603      	mov	r3, r0
 800b6fe:	4a35      	ldr	r2, [pc, #212]	@ (800b7d4 <vTaskSwitchContext+0xf8>)
 800b700:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800b702:	4b34      	ldr	r3, [pc, #208]	@ (800b7d4 <vTaskSwitchContext+0xf8>)
 800b704:	681a      	ldr	r2, [r3, #0]
 800b706:	4b34      	ldr	r3, [pc, #208]	@ (800b7d8 <vTaskSwitchContext+0xfc>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	429a      	cmp	r2, r3
 800b70c:	d909      	bls.n	800b722 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800b70e:	4b33      	ldr	r3, [pc, #204]	@ (800b7dc <vTaskSwitchContext+0x100>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b714:	4a2f      	ldr	r2, [pc, #188]	@ (800b7d4 <vTaskSwitchContext+0xf8>)
 800b716:	6810      	ldr	r0, [r2, #0]
 800b718:	4a2f      	ldr	r2, [pc, #188]	@ (800b7d8 <vTaskSwitchContext+0xfc>)
 800b71a:	6812      	ldr	r2, [r2, #0]
 800b71c:	1a82      	subs	r2, r0, r2
 800b71e:	440a      	add	r2, r1
 800b720:	655a      	str	r2, [r3, #84]	@ 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800b722:	4b2c      	ldr	r3, [pc, #176]	@ (800b7d4 <vTaskSwitchContext+0xf8>)
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	4a2c      	ldr	r2, [pc, #176]	@ (800b7d8 <vTaskSwitchContext+0xfc>)
 800b728:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b72a:	4b2d      	ldr	r3, [pc, #180]	@ (800b7e0 <vTaskSwitchContext+0x104>)
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	fab3 f383 	clz	r3, r3
 800b736:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b738:	7afb      	ldrb	r3, [r7, #11]
 800b73a:	f1c3 031f 	rsb	r3, r3, #31
 800b73e:	617b      	str	r3, [r7, #20]
 800b740:	4928      	ldr	r1, [pc, #160]	@ (800b7e4 <vTaskSwitchContext+0x108>)
 800b742:	697a      	ldr	r2, [r7, #20]
 800b744:	4613      	mov	r3, r2
 800b746:	009b      	lsls	r3, r3, #2
 800b748:	4413      	add	r3, r2
 800b74a:	009b      	lsls	r3, r3, #2
 800b74c:	440b      	add	r3, r1
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d10b      	bne.n	800b76c <vTaskSwitchContext+0x90>
	__asm volatile
 800b754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b758:	f383 8811 	msr	BASEPRI, r3
 800b75c:	f3bf 8f6f 	isb	sy
 800b760:	f3bf 8f4f 	dsb	sy
 800b764:	607b      	str	r3, [r7, #4]
}
 800b766:	bf00      	nop
 800b768:	bf00      	nop
 800b76a:	e7fd      	b.n	800b768 <vTaskSwitchContext+0x8c>
 800b76c:	697a      	ldr	r2, [r7, #20]
 800b76e:	4613      	mov	r3, r2
 800b770:	009b      	lsls	r3, r3, #2
 800b772:	4413      	add	r3, r2
 800b774:	009b      	lsls	r3, r3, #2
 800b776:	4a1b      	ldr	r2, [pc, #108]	@ (800b7e4 <vTaskSwitchContext+0x108>)
 800b778:	4413      	add	r3, r2
 800b77a:	613b      	str	r3, [r7, #16]
 800b77c:	693b      	ldr	r3, [r7, #16]
 800b77e:	685b      	ldr	r3, [r3, #4]
 800b780:	685a      	ldr	r2, [r3, #4]
 800b782:	693b      	ldr	r3, [r7, #16]
 800b784:	605a      	str	r2, [r3, #4]
 800b786:	693b      	ldr	r3, [r7, #16]
 800b788:	685a      	ldr	r2, [r3, #4]
 800b78a:	693b      	ldr	r3, [r7, #16]
 800b78c:	3308      	adds	r3, #8
 800b78e:	429a      	cmp	r2, r3
 800b790:	d104      	bne.n	800b79c <vTaskSwitchContext+0xc0>
 800b792:	693b      	ldr	r3, [r7, #16]
 800b794:	685b      	ldr	r3, [r3, #4]
 800b796:	685a      	ldr	r2, [r3, #4]
 800b798:	693b      	ldr	r3, [r7, #16]
 800b79a:	605a      	str	r2, [r3, #4]
 800b79c:	693b      	ldr	r3, [r7, #16]
 800b79e:	685b      	ldr	r3, [r3, #4]
 800b7a0:	68db      	ldr	r3, [r3, #12]
 800b7a2:	4a0e      	ldr	r2, [pc, #56]	@ (800b7dc <vTaskSwitchContext+0x100>)
 800b7a4:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 800b7a6:	4b0d      	ldr	r3, [pc, #52]	@ (800b7dc <vTaskSwitchContext+0x100>)
 800b7a8:	681a      	ldr	r2, [r3, #0]
 800b7aa:	4b0c      	ldr	r3, [pc, #48]	@ (800b7dc <vTaskSwitchContext+0x100>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7b0:	4619      	mov	r1, r3
 800b7b2:	4610      	mov	r0, r2
 800b7b4:	f004 fa36 	bl	800fc24 <xTraceTaskSwitch>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b7b8:	4b08      	ldr	r3, [pc, #32]	@ (800b7dc <vTaskSwitchContext+0x100>)
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	3358      	adds	r3, #88	@ 0x58
 800b7be:	4a0a      	ldr	r2, [pc, #40]	@ (800b7e8 <vTaskSwitchContext+0x10c>)
 800b7c0:	6013      	str	r3, [r2, #0]
}
 800b7c2:	bf00      	nop
 800b7c4:	3718      	adds	r7, #24
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd80      	pop	{r7, pc}
 800b7ca:	bf00      	nop
 800b7cc:	20002c04 	.word	0x20002c04
 800b7d0:	20002bf0 	.word	0x20002bf0
 800b7d4:	20002c0c 	.word	0x20002c0c
 800b7d8:	20002c08 	.word	0x20002c08
 800b7dc:	20002adc 	.word	0x20002adc
 800b7e0:	20002be4 	.word	0x20002be4
 800b7e4:	20002ae0 	.word	0x20002ae0
 800b7e8:	200001cc 	.word	0x200001cc

0800b7ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b084      	sub	sp, #16
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
 800b7f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d10b      	bne.n	800b814 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b7fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b800:	f383 8811 	msr	BASEPRI, r3
 800b804:	f3bf 8f6f 	isb	sy
 800b808:	f3bf 8f4f 	dsb	sy
 800b80c:	60fb      	str	r3, [r7, #12]
}
 800b80e:	bf00      	nop
 800b810:	bf00      	nop
 800b812:	e7fd      	b.n	800b810 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b814:	4b07      	ldr	r3, [pc, #28]	@ (800b834 <vTaskPlaceOnEventList+0x48>)
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	3318      	adds	r3, #24
 800b81a:	4619      	mov	r1, r3
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	f7fd fe9f 	bl	8009560 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b822:	2101      	movs	r1, #1
 800b824:	6838      	ldr	r0, [r7, #0]
 800b826:	f000 fbed 	bl	800c004 <prvAddCurrentTaskToDelayedList>
}
 800b82a:	bf00      	nop
 800b82c:	3710      	adds	r7, #16
 800b82e:	46bd      	mov	sp, r7
 800b830:	bd80      	pop	{r7, pc}
 800b832:	bf00      	nop
 800b834:	20002adc 	.word	0x20002adc

0800b838 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b086      	sub	sp, #24
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	60f8      	str	r0, [r7, #12]
 800b840:	60b9      	str	r1, [r7, #8]
 800b842:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d10b      	bne.n	800b862 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b84a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b84e:	f383 8811 	msr	BASEPRI, r3
 800b852:	f3bf 8f6f 	isb	sy
 800b856:	f3bf 8f4f 	dsb	sy
 800b85a:	617b      	str	r3, [r7, #20]
}
 800b85c:	bf00      	nop
 800b85e:	bf00      	nop
 800b860:	e7fd      	b.n	800b85e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b862:	4b0e      	ldr	r3, [pc, #56]	@ (800b89c <vTaskPlaceOnEventListRestricted+0x64>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	3318      	adds	r3, #24
 800b868:	4619      	mov	r1, r3
 800b86a:	68f8      	ldr	r0, [r7, #12]
 800b86c:	f7fd fe54 	bl	8009518 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d002      	beq.n	800b87c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b876:	f04f 33ff 	mov.w	r3, #4294967295
 800b87a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800b87c:	4b08      	ldr	r3, [pc, #32]	@ (800b8a0 <vTaskPlaceOnEventListRestricted+0x68>)
 800b87e:	681a      	ldr	r2, [r3, #0]
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	4413      	add	r3, r2
 800b884:	4619      	mov	r1, r3
 800b886:	2079      	movs	r0, #121	@ 0x79
 800b888:	f002 f8c0 	bl	800da0c <xTraceEventCreate1>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b88c:	6879      	ldr	r1, [r7, #4]
 800b88e:	68b8      	ldr	r0, [r7, #8]
 800b890:	f000 fbb8 	bl	800c004 <prvAddCurrentTaskToDelayedList>
	}
 800b894:	bf00      	nop
 800b896:	3718      	adds	r7, #24
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}
 800b89c:	20002adc 	.word	0x20002adc
 800b8a0:	20002be0 	.word	0x20002be0

0800b8a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b086      	sub	sp, #24
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	68db      	ldr	r3, [r3, #12]
 800b8b0:	68db      	ldr	r3, [r3, #12]
 800b8b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b8b4:	693b      	ldr	r3, [r7, #16]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d10b      	bne.n	800b8d2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b8ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8be:	f383 8811 	msr	BASEPRI, r3
 800b8c2:	f3bf 8f6f 	isb	sy
 800b8c6:	f3bf 8f4f 	dsb	sy
 800b8ca:	60fb      	str	r3, [r7, #12]
}
 800b8cc:	bf00      	nop
 800b8ce:	bf00      	nop
 800b8d0:	e7fd      	b.n	800b8ce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b8d2:	693b      	ldr	r3, [r7, #16]
 800b8d4:	3318      	adds	r3, #24
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f7fd fe7b 	bl	80095d2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b8dc:	4b1f      	ldr	r3, [pc, #124]	@ (800b95c <xTaskRemoveFromEventList+0xb8>)
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d121      	bne.n	800b928 <xTaskRemoveFromEventList+0x84>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b8e4:	693b      	ldr	r3, [r7, #16]
 800b8e6:	3304      	adds	r3, #4
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	f7fd fe72 	bl	80095d2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b8ee:	693b      	ldr	r3, [r7, #16]
 800b8f0:	4619      	mov	r1, r3
 800b8f2:	2030      	movs	r0, #48	@ 0x30
 800b8f4:	f002 f88a 	bl	800da0c <xTraceEventCreate1>
 800b8f8:	693b      	ldr	r3, [r7, #16]
 800b8fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8fc:	2201      	movs	r2, #1
 800b8fe:	409a      	lsls	r2, r3
 800b900:	4b17      	ldr	r3, [pc, #92]	@ (800b960 <xTaskRemoveFromEventList+0xbc>)
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	4313      	orrs	r3, r2
 800b906:	4a16      	ldr	r2, [pc, #88]	@ (800b960 <xTaskRemoveFromEventList+0xbc>)
 800b908:	6013      	str	r3, [r2, #0]
 800b90a:	693b      	ldr	r3, [r7, #16]
 800b90c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b90e:	4613      	mov	r3, r2
 800b910:	009b      	lsls	r3, r3, #2
 800b912:	4413      	add	r3, r2
 800b914:	009b      	lsls	r3, r3, #2
 800b916:	4a13      	ldr	r2, [pc, #76]	@ (800b964 <xTaskRemoveFromEventList+0xc0>)
 800b918:	441a      	add	r2, r3
 800b91a:	693b      	ldr	r3, [r7, #16]
 800b91c:	3304      	adds	r3, #4
 800b91e:	4619      	mov	r1, r3
 800b920:	4610      	mov	r0, r2
 800b922:	f7fd fdf9 	bl	8009518 <vListInsertEnd>
 800b926:	e005      	b.n	800b934 <xTaskRemoveFromEventList+0x90>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b928:	693b      	ldr	r3, [r7, #16]
 800b92a:	3318      	adds	r3, #24
 800b92c:	4619      	mov	r1, r3
 800b92e:	480e      	ldr	r0, [pc, #56]	@ (800b968 <xTaskRemoveFromEventList+0xc4>)
 800b930:	f7fd fdf2 	bl	8009518 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b934:	693b      	ldr	r3, [r7, #16]
 800b936:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b938:	4b0c      	ldr	r3, [pc, #48]	@ (800b96c <xTaskRemoveFromEventList+0xc8>)
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b93e:	429a      	cmp	r2, r3
 800b940:	d905      	bls.n	800b94e <xTaskRemoveFromEventList+0xaa>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b942:	2301      	movs	r3, #1
 800b944:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b946:	4b0a      	ldr	r3, [pc, #40]	@ (800b970 <xTaskRemoveFromEventList+0xcc>)
 800b948:	2201      	movs	r2, #1
 800b94a:	601a      	str	r2, [r3, #0]
 800b94c:	e001      	b.n	800b952 <xTaskRemoveFromEventList+0xae>
	}
	else
	{
		xReturn = pdFALSE;
 800b94e:	2300      	movs	r3, #0
 800b950:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b952:	697b      	ldr	r3, [r7, #20]
}
 800b954:	4618      	mov	r0, r3
 800b956:	3718      	adds	r7, #24
 800b958:	46bd      	mov	sp, r7
 800b95a:	bd80      	pop	{r7, pc}
 800b95c:	20002c04 	.word	0x20002c04
 800b960:	20002be4 	.word	0x20002be4
 800b964:	20002ae0 	.word	0x20002ae0
 800b968:	20002b9c 	.word	0x20002b9c
 800b96c:	20002adc 	.word	0x20002adc
 800b970:	20002bf0 	.word	0x20002bf0

0800b974 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b974:	b480      	push	{r7}
 800b976:	b083      	sub	sp, #12
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b97c:	4b06      	ldr	r3, [pc, #24]	@ (800b998 <vTaskInternalSetTimeOutState+0x24>)
 800b97e:	681a      	ldr	r2, [r3, #0]
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b984:	4b05      	ldr	r3, [pc, #20]	@ (800b99c <vTaskInternalSetTimeOutState+0x28>)
 800b986:	681a      	ldr	r2, [r3, #0]
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	605a      	str	r2, [r3, #4]
}
 800b98c:	bf00      	nop
 800b98e:	370c      	adds	r7, #12
 800b990:	46bd      	mov	sp, r7
 800b992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b996:	4770      	bx	lr
 800b998:	20002bf4 	.word	0x20002bf4
 800b99c:	20002be0 	.word	0x20002be0

0800b9a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b088      	sub	sp, #32
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
 800b9a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d10b      	bne.n	800b9c8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b9b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9b4:	f383 8811 	msr	BASEPRI, r3
 800b9b8:	f3bf 8f6f 	isb	sy
 800b9bc:	f3bf 8f4f 	dsb	sy
 800b9c0:	613b      	str	r3, [r7, #16]
}
 800b9c2:	bf00      	nop
 800b9c4:	bf00      	nop
 800b9c6:	e7fd      	b.n	800b9c4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d10b      	bne.n	800b9e6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b9ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9d2:	f383 8811 	msr	BASEPRI, r3
 800b9d6:	f3bf 8f6f 	isb	sy
 800b9da:	f3bf 8f4f 	dsb	sy
 800b9de:	60fb      	str	r3, [r7, #12]
}
 800b9e0:	bf00      	nop
 800b9e2:	bf00      	nop
 800b9e4:	e7fd      	b.n	800b9e2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b9e6:	f000 fff1 	bl	800c9cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b9ea:	4b1d      	ldr	r3, [pc, #116]	@ (800ba60 <xTaskCheckForTimeOut+0xc0>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	685b      	ldr	r3, [r3, #4]
 800b9f4:	69ba      	ldr	r2, [r7, #24]
 800b9f6:	1ad3      	subs	r3, r2, r3
 800b9f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba02:	d102      	bne.n	800ba0a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ba04:	2300      	movs	r3, #0
 800ba06:	61fb      	str	r3, [r7, #28]
 800ba08:	e023      	b.n	800ba52 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681a      	ldr	r2, [r3, #0]
 800ba0e:	4b15      	ldr	r3, [pc, #84]	@ (800ba64 <xTaskCheckForTimeOut+0xc4>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	429a      	cmp	r2, r3
 800ba14:	d007      	beq.n	800ba26 <xTaskCheckForTimeOut+0x86>
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	685b      	ldr	r3, [r3, #4]
 800ba1a:	69ba      	ldr	r2, [r7, #24]
 800ba1c:	429a      	cmp	r2, r3
 800ba1e:	d302      	bcc.n	800ba26 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ba20:	2301      	movs	r3, #1
 800ba22:	61fb      	str	r3, [r7, #28]
 800ba24:	e015      	b.n	800ba52 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	697a      	ldr	r2, [r7, #20]
 800ba2c:	429a      	cmp	r2, r3
 800ba2e:	d20b      	bcs.n	800ba48 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ba30:	683b      	ldr	r3, [r7, #0]
 800ba32:	681a      	ldr	r2, [r3, #0]
 800ba34:	697b      	ldr	r3, [r7, #20]
 800ba36:	1ad2      	subs	r2, r2, r3
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ba3c:	6878      	ldr	r0, [r7, #4]
 800ba3e:	f7ff ff99 	bl	800b974 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ba42:	2300      	movs	r3, #0
 800ba44:	61fb      	str	r3, [r7, #28]
 800ba46:	e004      	b.n	800ba52 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ba4e:	2301      	movs	r3, #1
 800ba50:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ba52:	f000 ffed 	bl	800ca30 <vPortExitCritical>

	return xReturn;
 800ba56:	69fb      	ldr	r3, [r7, #28]
}
 800ba58:	4618      	mov	r0, r3
 800ba5a:	3720      	adds	r7, #32
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	bd80      	pop	{r7, pc}
 800ba60:	20002be0 	.word	0x20002be0
 800ba64:	20002bf4 	.word	0x20002bf4

0800ba68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ba68:	b480      	push	{r7}
 800ba6a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ba6c:	4b03      	ldr	r3, [pc, #12]	@ (800ba7c <vTaskMissedYield+0x14>)
 800ba6e:	2201      	movs	r2, #1
 800ba70:	601a      	str	r2, [r3, #0]
}
 800ba72:	bf00      	nop
 800ba74:	46bd      	mov	sp, r7
 800ba76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7a:	4770      	bx	lr
 800ba7c:	20002bf0 	.word	0x20002bf0

0800ba80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b082      	sub	sp, #8
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ba88:	f000 f852 	bl	800bb30 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ba8c:	4b06      	ldr	r3, [pc, #24]	@ (800baa8 <prvIdleTask+0x28>)
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	2b01      	cmp	r3, #1
 800ba92:	d9f9      	bls.n	800ba88 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ba94:	4b05      	ldr	r3, [pc, #20]	@ (800baac <prvIdleTask+0x2c>)
 800ba96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ba9a:	601a      	str	r2, [r3, #0]
 800ba9c:	f3bf 8f4f 	dsb	sy
 800baa0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800baa4:	e7f0      	b.n	800ba88 <prvIdleTask+0x8>
 800baa6:	bf00      	nop
 800baa8:	20002ae0 	.word	0x20002ae0
 800baac:	e000ed04 	.word	0xe000ed04

0800bab0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b082      	sub	sp, #8
 800bab4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bab6:	2300      	movs	r3, #0
 800bab8:	607b      	str	r3, [r7, #4]
 800baba:	e00c      	b.n	800bad6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800babc:	687a      	ldr	r2, [r7, #4]
 800babe:	4613      	mov	r3, r2
 800bac0:	009b      	lsls	r3, r3, #2
 800bac2:	4413      	add	r3, r2
 800bac4:	009b      	lsls	r3, r3, #2
 800bac6:	4a12      	ldr	r2, [pc, #72]	@ (800bb10 <prvInitialiseTaskLists+0x60>)
 800bac8:	4413      	add	r3, r2
 800baca:	4618      	mov	r0, r3
 800bacc:	f7fd fcf7 	bl	80094be <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	3301      	adds	r3, #1
 800bad4:	607b      	str	r3, [r7, #4]
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	2b06      	cmp	r3, #6
 800bada:	d9ef      	bls.n	800babc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800badc:	480d      	ldr	r0, [pc, #52]	@ (800bb14 <prvInitialiseTaskLists+0x64>)
 800bade:	f7fd fcee 	bl	80094be <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bae2:	480d      	ldr	r0, [pc, #52]	@ (800bb18 <prvInitialiseTaskLists+0x68>)
 800bae4:	f7fd fceb 	bl	80094be <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bae8:	480c      	ldr	r0, [pc, #48]	@ (800bb1c <prvInitialiseTaskLists+0x6c>)
 800baea:	f7fd fce8 	bl	80094be <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800baee:	480c      	ldr	r0, [pc, #48]	@ (800bb20 <prvInitialiseTaskLists+0x70>)
 800baf0:	f7fd fce5 	bl	80094be <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800baf4:	480b      	ldr	r0, [pc, #44]	@ (800bb24 <prvInitialiseTaskLists+0x74>)
 800baf6:	f7fd fce2 	bl	80094be <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bafa:	4b0b      	ldr	r3, [pc, #44]	@ (800bb28 <prvInitialiseTaskLists+0x78>)
 800bafc:	4a05      	ldr	r2, [pc, #20]	@ (800bb14 <prvInitialiseTaskLists+0x64>)
 800bafe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bb00:	4b0a      	ldr	r3, [pc, #40]	@ (800bb2c <prvInitialiseTaskLists+0x7c>)
 800bb02:	4a05      	ldr	r2, [pc, #20]	@ (800bb18 <prvInitialiseTaskLists+0x68>)
 800bb04:	601a      	str	r2, [r3, #0]
}
 800bb06:	bf00      	nop
 800bb08:	3708      	adds	r7, #8
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}
 800bb0e:	bf00      	nop
 800bb10:	20002ae0 	.word	0x20002ae0
 800bb14:	20002b6c 	.word	0x20002b6c
 800bb18:	20002b80 	.word	0x20002b80
 800bb1c:	20002b9c 	.word	0x20002b9c
 800bb20:	20002bb0 	.word	0x20002bb0
 800bb24:	20002bc8 	.word	0x20002bc8
 800bb28:	20002b94 	.word	0x20002b94
 800bb2c:	20002b98 	.word	0x20002b98

0800bb30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b082      	sub	sp, #8
 800bb34:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bb36:	e019      	b.n	800bb6c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bb38:	f000 ff48 	bl	800c9cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb3c:	4b10      	ldr	r3, [pc, #64]	@ (800bb80 <prvCheckTasksWaitingTermination+0x50>)
 800bb3e:	68db      	ldr	r3, [r3, #12]
 800bb40:	68db      	ldr	r3, [r3, #12]
 800bb42:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	3304      	adds	r3, #4
 800bb48:	4618      	mov	r0, r3
 800bb4a:	f7fd fd42 	bl	80095d2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bb4e:	4b0d      	ldr	r3, [pc, #52]	@ (800bb84 <prvCheckTasksWaitingTermination+0x54>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	3b01      	subs	r3, #1
 800bb54:	4a0b      	ldr	r2, [pc, #44]	@ (800bb84 <prvCheckTasksWaitingTermination+0x54>)
 800bb56:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bb58:	4b0b      	ldr	r3, [pc, #44]	@ (800bb88 <prvCheckTasksWaitingTermination+0x58>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	3b01      	subs	r3, #1
 800bb5e:	4a0a      	ldr	r2, [pc, #40]	@ (800bb88 <prvCheckTasksWaitingTermination+0x58>)
 800bb60:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bb62:	f000 ff65 	bl	800ca30 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	f000 f810 	bl	800bb8c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bb6c:	4b06      	ldr	r3, [pc, #24]	@ (800bb88 <prvCheckTasksWaitingTermination+0x58>)
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d1e1      	bne.n	800bb38 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bb74:	bf00      	nop
 800bb76:	bf00      	nop
 800bb78:	3708      	adds	r7, #8
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}
 800bb7e:	bf00      	nop
 800bb80:	20002bb0 	.word	0x20002bb0
 800bb84:	20002bdc 	.word	0x20002bdc
 800bb88:	20002bc4 	.word	0x20002bc4

0800bb8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b084      	sub	sp, #16
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	3358      	adds	r3, #88	@ 0x58
 800bb98:	4618      	mov	r0, r3
 800bb9a:	f004 f9e3 	bl	800ff64 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d108      	bne.n	800bbba <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbac:	4618      	mov	r0, r3
 800bbae:	f001 f91b 	bl	800cde8 <vPortFree>
				vPortFree( pxTCB );
 800bbb2:	6878      	ldr	r0, [r7, #4]
 800bbb4:	f001 f918 	bl	800cde8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bbb8:	e019      	b.n	800bbee <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800bbc0:	2b01      	cmp	r3, #1
 800bbc2:	d103      	bne.n	800bbcc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800bbc4:	6878      	ldr	r0, [r7, #4]
 800bbc6:	f001 f90f 	bl	800cde8 <vPortFree>
	}
 800bbca:	e010      	b.n	800bbee <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800bbd2:	2b02      	cmp	r3, #2
 800bbd4:	d00b      	beq.n	800bbee <prvDeleteTCB+0x62>
	__asm volatile
 800bbd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbda:	f383 8811 	msr	BASEPRI, r3
 800bbde:	f3bf 8f6f 	isb	sy
 800bbe2:	f3bf 8f4f 	dsb	sy
 800bbe6:	60fb      	str	r3, [r7, #12]
}
 800bbe8:	bf00      	nop
 800bbea:	bf00      	nop
 800bbec:	e7fd      	b.n	800bbea <prvDeleteTCB+0x5e>
	}
 800bbee:	bf00      	nop
 800bbf0:	3710      	adds	r7, #16
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}
	...

0800bbf8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bbf8:	b480      	push	{r7}
 800bbfa:	b083      	sub	sp, #12
 800bbfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bbfe:	4b0c      	ldr	r3, [pc, #48]	@ (800bc30 <prvResetNextTaskUnblockTime+0x38>)
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d104      	bne.n	800bc12 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bc08:	4b0a      	ldr	r3, [pc, #40]	@ (800bc34 <prvResetNextTaskUnblockTime+0x3c>)
 800bc0a:	f04f 32ff 	mov.w	r2, #4294967295
 800bc0e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bc10:	e008      	b.n	800bc24 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc12:	4b07      	ldr	r3, [pc, #28]	@ (800bc30 <prvResetNextTaskUnblockTime+0x38>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	68db      	ldr	r3, [r3, #12]
 800bc18:	68db      	ldr	r3, [r3, #12]
 800bc1a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	685b      	ldr	r3, [r3, #4]
 800bc20:	4a04      	ldr	r2, [pc, #16]	@ (800bc34 <prvResetNextTaskUnblockTime+0x3c>)
 800bc22:	6013      	str	r3, [r2, #0]
}
 800bc24:	bf00      	nop
 800bc26:	370c      	adds	r7, #12
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2e:	4770      	bx	lr
 800bc30:	20002b94 	.word	0x20002b94
 800bc34:	20002bfc 	.word	0x20002bfc

0800bc38 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bc38:	b480      	push	{r7}
 800bc3a:	b083      	sub	sp, #12
 800bc3c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bc3e:	4b0b      	ldr	r3, [pc, #44]	@ (800bc6c <xTaskGetSchedulerState+0x34>)
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d102      	bne.n	800bc4c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bc46:	2301      	movs	r3, #1
 800bc48:	607b      	str	r3, [r7, #4]
 800bc4a:	e008      	b.n	800bc5e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc4c:	4b08      	ldr	r3, [pc, #32]	@ (800bc70 <xTaskGetSchedulerState+0x38>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d102      	bne.n	800bc5a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bc54:	2302      	movs	r3, #2
 800bc56:	607b      	str	r3, [r7, #4]
 800bc58:	e001      	b.n	800bc5e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bc5e:	687b      	ldr	r3, [r7, #4]
	}
 800bc60:	4618      	mov	r0, r3
 800bc62:	370c      	adds	r7, #12
 800bc64:	46bd      	mov	sp, r7
 800bc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6a:	4770      	bx	lr
 800bc6c:	20002be8 	.word	0x20002be8
 800bc70:	20002c04 	.word	0x20002c04

0800bc74 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b084      	sub	sp, #16
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bc80:	2300      	movs	r3, #0
 800bc82:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d06b      	beq.n	800bd62 <xTaskPriorityInherit+0xee>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bc8a:	68bb      	ldr	r3, [r7, #8]
 800bc8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc8e:	4b37      	ldr	r3, [pc, #220]	@ (800bd6c <xTaskPriorityInherit+0xf8>)
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc94:	429a      	cmp	r2, r3
 800bc96:	d25b      	bcs.n	800bd50 <xTaskPriorityInherit+0xdc>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	699b      	ldr	r3, [r3, #24]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	db06      	blt.n	800bcae <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bca0:	4b32      	ldr	r3, [pc, #200]	@ (800bd6c <xTaskPriorityInherit+0xf8>)
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bca6:	f1c3 0207 	rsb	r2, r3, #7
 800bcaa:	68bb      	ldr	r3, [r7, #8]
 800bcac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bcae:	68bb      	ldr	r3, [r7, #8]
 800bcb0:	6959      	ldr	r1, [r3, #20]
 800bcb2:	68bb      	ldr	r3, [r7, #8]
 800bcb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bcb6:	4613      	mov	r3, r2
 800bcb8:	009b      	lsls	r3, r3, #2
 800bcba:	4413      	add	r3, r2
 800bcbc:	009b      	lsls	r3, r3, #2
 800bcbe:	4a2c      	ldr	r2, [pc, #176]	@ (800bd70 <xTaskPriorityInherit+0xfc>)
 800bcc0:	4413      	add	r3, r2
 800bcc2:	4299      	cmp	r1, r3
 800bcc4:	d134      	bne.n	800bd30 <xTaskPriorityInherit+0xbc>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bcc6:	68bb      	ldr	r3, [r7, #8]
 800bcc8:	3304      	adds	r3, #4
 800bcca:	4618      	mov	r0, r3
 800bccc:	f7fd fc81 	bl	80095d2 <uxListRemove>
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d10a      	bne.n	800bcec <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800bcd6:	68bb      	ldr	r3, [r7, #8]
 800bcd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcda:	2201      	movs	r2, #1
 800bcdc:	fa02 f303 	lsl.w	r3, r2, r3
 800bce0:	43da      	mvns	r2, r3
 800bce2:	4b24      	ldr	r3, [pc, #144]	@ (800bd74 <xTaskPriorityInherit+0x100>)
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	4013      	ands	r3, r2
 800bce8:	4a22      	ldr	r2, [pc, #136]	@ (800bd74 <xTaskPriorityInherit+0x100>)
 800bcea:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bcec:	4b1f      	ldr	r3, [pc, #124]	@ (800bd6c <xTaskPriorityInherit+0xf8>)
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bcf2:	68bb      	ldr	r3, [r7, #8]
 800bcf4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bcf6:	68bb      	ldr	r3, [r7, #8]
 800bcf8:	4619      	mov	r1, r3
 800bcfa:	2030      	movs	r0, #48	@ 0x30
 800bcfc:	f001 fe86 	bl	800da0c <xTraceEventCreate1>
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd04:	2201      	movs	r2, #1
 800bd06:	409a      	lsls	r2, r3
 800bd08:	4b1a      	ldr	r3, [pc, #104]	@ (800bd74 <xTaskPriorityInherit+0x100>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	4313      	orrs	r3, r2
 800bd0e:	4a19      	ldr	r2, [pc, #100]	@ (800bd74 <xTaskPriorityInherit+0x100>)
 800bd10:	6013      	str	r3, [r2, #0]
 800bd12:	68bb      	ldr	r3, [r7, #8]
 800bd14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd16:	4613      	mov	r3, r2
 800bd18:	009b      	lsls	r3, r3, #2
 800bd1a:	4413      	add	r3, r2
 800bd1c:	009b      	lsls	r3, r3, #2
 800bd1e:	4a14      	ldr	r2, [pc, #80]	@ (800bd70 <xTaskPriorityInherit+0xfc>)
 800bd20:	441a      	add	r2, r3
 800bd22:	68bb      	ldr	r3, [r7, #8]
 800bd24:	3304      	adds	r3, #4
 800bd26:	4619      	mov	r1, r3
 800bd28:	4610      	mov	r0, r2
 800bd2a:	f7fd fbf5 	bl	8009518 <vListInsertEnd>
 800bd2e:	e004      	b.n	800bd3a <xTaskPriorityInherit+0xc6>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bd30:	4b0e      	ldr	r3, [pc, #56]	@ (800bd6c <xTaskPriorityInherit+0xf8>)
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd36:	68bb      	ldr	r3, [r7, #8]
 800bd38:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 800bd3a:	68b9      	ldr	r1, [r7, #8]
 800bd3c:	4b0b      	ldr	r3, [pc, #44]	@ (800bd6c <xTaskPriorityInherit+0xf8>)
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd42:	461a      	mov	r2, r3
 800bd44:	2005      	movs	r0, #5
 800bd46:	f001 fee1 	bl	800db0c <xTraceEventCreate2>

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bd4a:	2301      	movs	r3, #1
 800bd4c:	60fb      	str	r3, [r7, #12]
 800bd4e:	e008      	b.n	800bd62 <xTaskPriorityInherit+0xee>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bd50:	68bb      	ldr	r3, [r7, #8]
 800bd52:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bd54:	4b05      	ldr	r3, [pc, #20]	@ (800bd6c <xTaskPriorityInherit+0xf8>)
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd5a:	429a      	cmp	r2, r3
 800bd5c:	d201      	bcs.n	800bd62 <xTaskPriorityInherit+0xee>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bd5e:	2301      	movs	r3, #1
 800bd60:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bd62:	68fb      	ldr	r3, [r7, #12]
	}
 800bd64:	4618      	mov	r0, r3
 800bd66:	3710      	adds	r7, #16
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	bd80      	pop	{r7, pc}
 800bd6c:	20002adc 	.word	0x20002adc
 800bd70:	20002ae0 	.word	0x20002ae0
 800bd74:	20002be4 	.word	0x20002be4

0800bd78 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b086      	sub	sp, #24
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bd84:	2300      	movs	r3, #0
 800bd86:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d07c      	beq.n	800be88 <xTaskPriorityDisinherit+0x110>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bd8e:	4b41      	ldr	r3, [pc, #260]	@ (800be94 <xTaskPriorityDisinherit+0x11c>)
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	693a      	ldr	r2, [r7, #16]
 800bd94:	429a      	cmp	r2, r3
 800bd96:	d00b      	beq.n	800bdb0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800bd98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd9c:	f383 8811 	msr	BASEPRI, r3
 800bda0:	f3bf 8f6f 	isb	sy
 800bda4:	f3bf 8f4f 	dsb	sy
 800bda8:	60fb      	str	r3, [r7, #12]
}
 800bdaa:	bf00      	nop
 800bdac:	bf00      	nop
 800bdae:	e7fd      	b.n	800bdac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bdb0:	693b      	ldr	r3, [r7, #16]
 800bdb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d10b      	bne.n	800bdd0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800bdb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdbc:	f383 8811 	msr	BASEPRI, r3
 800bdc0:	f3bf 8f6f 	isb	sy
 800bdc4:	f3bf 8f4f 	dsb	sy
 800bdc8:	60bb      	str	r3, [r7, #8]
}
 800bdca:	bf00      	nop
 800bdcc:	bf00      	nop
 800bdce:	e7fd      	b.n	800bdcc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800bdd0:	693b      	ldr	r3, [r7, #16]
 800bdd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bdd4:	1e5a      	subs	r2, r3, #1
 800bdd6:	693b      	ldr	r3, [r7, #16]
 800bdd8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bdda:	693b      	ldr	r3, [r7, #16]
 800bddc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bdde:	693b      	ldr	r3, [r7, #16]
 800bde0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bde2:	429a      	cmp	r2, r3
 800bde4:	d050      	beq.n	800be88 <xTaskPriorityDisinherit+0x110>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bde6:	693b      	ldr	r3, [r7, #16]
 800bde8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d14c      	bne.n	800be88 <xTaskPriorityDisinherit+0x110>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bdee:	693b      	ldr	r3, [r7, #16]
 800bdf0:	3304      	adds	r3, #4
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	f7fd fbed 	bl	80095d2 <uxListRemove>
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d115      	bne.n	800be2a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800bdfe:	693b      	ldr	r3, [r7, #16]
 800be00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be02:	4925      	ldr	r1, [pc, #148]	@ (800be98 <xTaskPriorityDisinherit+0x120>)
 800be04:	4613      	mov	r3, r2
 800be06:	009b      	lsls	r3, r3, #2
 800be08:	4413      	add	r3, r2
 800be0a:	009b      	lsls	r3, r3, #2
 800be0c:	440b      	add	r3, r1
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d10a      	bne.n	800be2a <xTaskPriorityDisinherit+0xb2>
 800be14:	693b      	ldr	r3, [r7, #16]
 800be16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be18:	2201      	movs	r2, #1
 800be1a:	fa02 f303 	lsl.w	r3, r2, r3
 800be1e:	43da      	mvns	r2, r3
 800be20:	4b1e      	ldr	r3, [pc, #120]	@ (800be9c <xTaskPriorityDisinherit+0x124>)
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	4013      	ands	r3, r2
 800be26:	4a1d      	ldr	r2, [pc, #116]	@ (800be9c <xTaskPriorityDisinherit+0x124>)
 800be28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800be2a:	6939      	ldr	r1, [r7, #16]
 800be2c:	693b      	ldr	r3, [r7, #16]
 800be2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800be30:	461a      	mov	r2, r3
 800be32:	2006      	movs	r0, #6
 800be34:	f001 fe6a 	bl	800db0c <xTraceEventCreate2>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800be38:	693b      	ldr	r3, [r7, #16]
 800be3a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800be3c:	693b      	ldr	r3, [r7, #16]
 800be3e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be40:	693b      	ldr	r3, [r7, #16]
 800be42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be44:	f1c3 0207 	rsb	r2, r3, #7
 800be48:	693b      	ldr	r3, [r7, #16]
 800be4a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800be4c:	693b      	ldr	r3, [r7, #16]
 800be4e:	4619      	mov	r1, r3
 800be50:	2030      	movs	r0, #48	@ 0x30
 800be52:	f001 fddb 	bl	800da0c <xTraceEventCreate1>
 800be56:	693b      	ldr	r3, [r7, #16]
 800be58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be5a:	2201      	movs	r2, #1
 800be5c:	409a      	lsls	r2, r3
 800be5e:	4b0f      	ldr	r3, [pc, #60]	@ (800be9c <xTaskPriorityDisinherit+0x124>)
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	4313      	orrs	r3, r2
 800be64:	4a0d      	ldr	r2, [pc, #52]	@ (800be9c <xTaskPriorityDisinherit+0x124>)
 800be66:	6013      	str	r3, [r2, #0]
 800be68:	693b      	ldr	r3, [r7, #16]
 800be6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be6c:	4613      	mov	r3, r2
 800be6e:	009b      	lsls	r3, r3, #2
 800be70:	4413      	add	r3, r2
 800be72:	009b      	lsls	r3, r3, #2
 800be74:	4a08      	ldr	r2, [pc, #32]	@ (800be98 <xTaskPriorityDisinherit+0x120>)
 800be76:	441a      	add	r2, r3
 800be78:	693b      	ldr	r3, [r7, #16]
 800be7a:	3304      	adds	r3, #4
 800be7c:	4619      	mov	r1, r3
 800be7e:	4610      	mov	r0, r2
 800be80:	f7fd fb4a 	bl	8009518 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800be84:	2301      	movs	r3, #1
 800be86:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800be88:	697b      	ldr	r3, [r7, #20]
	}
 800be8a:	4618      	mov	r0, r3
 800be8c:	3718      	adds	r7, #24
 800be8e:	46bd      	mov	sp, r7
 800be90:	bd80      	pop	{r7, pc}
 800be92:	bf00      	nop
 800be94:	20002adc 	.word	0x20002adc
 800be98:	20002ae0 	.word	0x20002ae0
 800be9c:	20002be4 	.word	0x20002be4

0800bea0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b088      	sub	sp, #32
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
 800bea8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800beae:	2301      	movs	r3, #1
 800beb0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	f000 8086 	beq.w	800bfc6 <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800beba:	69bb      	ldr	r3, [r7, #24]
 800bebc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d10b      	bne.n	800beda <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 800bec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bec6:	f383 8811 	msr	BASEPRI, r3
 800beca:	f3bf 8f6f 	isb	sy
 800bece:	f3bf 8f4f 	dsb	sy
 800bed2:	60fb      	str	r3, [r7, #12]
}
 800bed4:	bf00      	nop
 800bed6:	bf00      	nop
 800bed8:	e7fd      	b.n	800bed6 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800beda:	69bb      	ldr	r3, [r7, #24]
 800bedc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bede:	683a      	ldr	r2, [r7, #0]
 800bee0:	429a      	cmp	r2, r3
 800bee2:	d902      	bls.n	800beea <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	61fb      	str	r3, [r7, #28]
 800bee8:	e002      	b.n	800bef0 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800beea:	69bb      	ldr	r3, [r7, #24]
 800beec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800beee:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bef0:	69bb      	ldr	r3, [r7, #24]
 800bef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bef4:	69fa      	ldr	r2, [r7, #28]
 800bef6:	429a      	cmp	r2, r3
 800bef8:	d065      	beq.n	800bfc6 <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800befa:	69bb      	ldr	r3, [r7, #24]
 800befc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800befe:	697a      	ldr	r2, [r7, #20]
 800bf00:	429a      	cmp	r2, r3
 800bf02:	d160      	bne.n	800bfc6 <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bf04:	4b32      	ldr	r3, [pc, #200]	@ (800bfd0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	69ba      	ldr	r2, [r7, #24]
 800bf0a:	429a      	cmp	r2, r3
 800bf0c:	d10b      	bne.n	800bf26 <vTaskPriorityDisinheritAfterTimeout+0x86>
	__asm volatile
 800bf0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf12:	f383 8811 	msr	BASEPRI, r3
 800bf16:	f3bf 8f6f 	isb	sy
 800bf1a:	f3bf 8f4f 	dsb	sy
 800bf1e:	60bb      	str	r3, [r7, #8]
}
 800bf20:	bf00      	nop
 800bf22:	bf00      	nop
 800bf24:	e7fd      	b.n	800bf22 <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800bf26:	69b9      	ldr	r1, [r7, #24]
 800bf28:	69bb      	ldr	r3, [r7, #24]
 800bf2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bf2c:	461a      	mov	r2, r3
 800bf2e:	2006      	movs	r0, #6
 800bf30:	f001 fdec 	bl	800db0c <xTraceEventCreate2>
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bf34:	69bb      	ldr	r3, [r7, #24]
 800bf36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf38:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bf3a:	69bb      	ldr	r3, [r7, #24]
 800bf3c:	69fa      	ldr	r2, [r7, #28]
 800bf3e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bf40:	69bb      	ldr	r3, [r7, #24]
 800bf42:	699b      	ldr	r3, [r3, #24]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	db04      	blt.n	800bf52 <vTaskPriorityDisinheritAfterTimeout+0xb2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf48:	69fb      	ldr	r3, [r7, #28]
 800bf4a:	f1c3 0207 	rsb	r2, r3, #7
 800bf4e:	69bb      	ldr	r3, [r7, #24]
 800bf50:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bf52:	69bb      	ldr	r3, [r7, #24]
 800bf54:	6959      	ldr	r1, [r3, #20]
 800bf56:	693a      	ldr	r2, [r7, #16]
 800bf58:	4613      	mov	r3, r2
 800bf5a:	009b      	lsls	r3, r3, #2
 800bf5c:	4413      	add	r3, r2
 800bf5e:	009b      	lsls	r3, r3, #2
 800bf60:	4a1c      	ldr	r2, [pc, #112]	@ (800bfd4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800bf62:	4413      	add	r3, r2
 800bf64:	4299      	cmp	r1, r3
 800bf66:	d12e      	bne.n	800bfc6 <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf68:	69bb      	ldr	r3, [r7, #24]
 800bf6a:	3304      	adds	r3, #4
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f7fd fb30 	bl	80095d2 <uxListRemove>
 800bf72:	4603      	mov	r3, r0
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d10a      	bne.n	800bf8e <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800bf78:	69bb      	ldr	r3, [r7, #24]
 800bf7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf7c:	2201      	movs	r2, #1
 800bf7e:	fa02 f303 	lsl.w	r3, r2, r3
 800bf82:	43da      	mvns	r2, r3
 800bf84:	4b14      	ldr	r3, [pc, #80]	@ (800bfd8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	4013      	ands	r3, r2
 800bf8a:	4a13      	ldr	r2, [pc, #76]	@ (800bfd8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800bf8c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bf8e:	69bb      	ldr	r3, [r7, #24]
 800bf90:	4619      	mov	r1, r3
 800bf92:	2030      	movs	r0, #48	@ 0x30
 800bf94:	f001 fd3a 	bl	800da0c <xTraceEventCreate1>
 800bf98:	69bb      	ldr	r3, [r7, #24]
 800bf9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf9c:	2201      	movs	r2, #1
 800bf9e:	409a      	lsls	r2, r3
 800bfa0:	4b0d      	ldr	r3, [pc, #52]	@ (800bfd8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	4313      	orrs	r3, r2
 800bfa6:	4a0c      	ldr	r2, [pc, #48]	@ (800bfd8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800bfa8:	6013      	str	r3, [r2, #0]
 800bfaa:	69bb      	ldr	r3, [r7, #24]
 800bfac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bfae:	4613      	mov	r3, r2
 800bfb0:	009b      	lsls	r3, r3, #2
 800bfb2:	4413      	add	r3, r2
 800bfb4:	009b      	lsls	r3, r3, #2
 800bfb6:	4a07      	ldr	r2, [pc, #28]	@ (800bfd4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800bfb8:	441a      	add	r2, r3
 800bfba:	69bb      	ldr	r3, [r7, #24]
 800bfbc:	3304      	adds	r3, #4
 800bfbe:	4619      	mov	r1, r3
 800bfc0:	4610      	mov	r0, r2
 800bfc2:	f7fd faa9 	bl	8009518 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bfc6:	bf00      	nop
 800bfc8:	3720      	adds	r7, #32
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	bd80      	pop	{r7, pc}
 800bfce:	bf00      	nop
 800bfd0:	20002adc 	.word	0x20002adc
 800bfd4:	20002ae0 	.word	0x20002ae0
 800bfd8:	20002be4 	.word	0x20002be4

0800bfdc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bfdc:	b480      	push	{r7}
 800bfde:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bfe0:	4b07      	ldr	r3, [pc, #28]	@ (800c000 <pvTaskIncrementMutexHeldCount+0x24>)
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d004      	beq.n	800bff2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bfe8:	4b05      	ldr	r3, [pc, #20]	@ (800c000 <pvTaskIncrementMutexHeldCount+0x24>)
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bfee:	3201      	adds	r2, #1
 800bff0:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800bff2:	4b03      	ldr	r3, [pc, #12]	@ (800c000 <pvTaskIncrementMutexHeldCount+0x24>)
 800bff4:	681b      	ldr	r3, [r3, #0]
	}
 800bff6:	4618      	mov	r0, r3
 800bff8:	46bd      	mov	sp, r7
 800bffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffe:	4770      	bx	lr
 800c000:	20002adc 	.word	0x20002adc

0800c004 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b084      	sub	sp, #16
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
 800c00c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c00e:	4b29      	ldr	r3, [pc, #164]	@ (800c0b4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c014:	4b28      	ldr	r3, [pc, #160]	@ (800c0b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	3304      	adds	r3, #4
 800c01a:	4618      	mov	r0, r3
 800c01c:	f7fd fad9 	bl	80095d2 <uxListRemove>
 800c020:	4603      	mov	r3, r0
 800c022:	2b00      	cmp	r3, #0
 800c024:	d10b      	bne.n	800c03e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c026:	4b24      	ldr	r3, [pc, #144]	@ (800c0b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c02c:	2201      	movs	r2, #1
 800c02e:	fa02 f303 	lsl.w	r3, r2, r3
 800c032:	43da      	mvns	r2, r3
 800c034:	4b21      	ldr	r3, [pc, #132]	@ (800c0bc <prvAddCurrentTaskToDelayedList+0xb8>)
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	4013      	ands	r3, r2
 800c03a:	4a20      	ldr	r2, [pc, #128]	@ (800c0bc <prvAddCurrentTaskToDelayedList+0xb8>)
 800c03c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c044:	d10a      	bne.n	800c05c <prvAddCurrentTaskToDelayedList+0x58>
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d007      	beq.n	800c05c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c04c:	4b1a      	ldr	r3, [pc, #104]	@ (800c0b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	3304      	adds	r3, #4
 800c052:	4619      	mov	r1, r3
 800c054:	481a      	ldr	r0, [pc, #104]	@ (800c0c0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c056:	f7fd fa5f 	bl	8009518 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c05a:	e026      	b.n	800c0aa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c05c:	68fa      	ldr	r2, [r7, #12]
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	4413      	add	r3, r2
 800c062:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c064:	4b14      	ldr	r3, [pc, #80]	@ (800c0b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	68ba      	ldr	r2, [r7, #8]
 800c06a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c06c:	68ba      	ldr	r2, [r7, #8]
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	429a      	cmp	r2, r3
 800c072:	d209      	bcs.n	800c088 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c074:	4b13      	ldr	r3, [pc, #76]	@ (800c0c4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c076:	681a      	ldr	r2, [r3, #0]
 800c078:	4b0f      	ldr	r3, [pc, #60]	@ (800c0b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	3304      	adds	r3, #4
 800c07e:	4619      	mov	r1, r3
 800c080:	4610      	mov	r0, r2
 800c082:	f7fd fa6d 	bl	8009560 <vListInsert>
}
 800c086:	e010      	b.n	800c0aa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c088:	4b0f      	ldr	r3, [pc, #60]	@ (800c0c8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c08a:	681a      	ldr	r2, [r3, #0]
 800c08c:	4b0a      	ldr	r3, [pc, #40]	@ (800c0b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	3304      	adds	r3, #4
 800c092:	4619      	mov	r1, r3
 800c094:	4610      	mov	r0, r2
 800c096:	f7fd fa63 	bl	8009560 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c09a:	4b0c      	ldr	r3, [pc, #48]	@ (800c0cc <prvAddCurrentTaskToDelayedList+0xc8>)
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	68ba      	ldr	r2, [r7, #8]
 800c0a0:	429a      	cmp	r2, r3
 800c0a2:	d202      	bcs.n	800c0aa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c0a4:	4a09      	ldr	r2, [pc, #36]	@ (800c0cc <prvAddCurrentTaskToDelayedList+0xc8>)
 800c0a6:	68bb      	ldr	r3, [r7, #8]
 800c0a8:	6013      	str	r3, [r2, #0]
}
 800c0aa:	bf00      	nop
 800c0ac:	3710      	adds	r7, #16
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	bd80      	pop	{r7, pc}
 800c0b2:	bf00      	nop
 800c0b4:	20002be0 	.word	0x20002be0
 800c0b8:	20002adc 	.word	0x20002adc
 800c0bc:	20002be4 	.word	0x20002be4
 800c0c0:	20002bc8 	.word	0x20002bc8
 800c0c4:	20002b98 	.word	0x20002b98
 800c0c8:	20002b94 	.word	0x20002b94
 800c0cc:	20002bfc 	.word	0x20002bfc

0800c0d0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b08a      	sub	sp, #40	@ 0x28
 800c0d4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c0da:	f000 faf7 	bl	800c6cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c0de:	4b1d      	ldr	r3, [pc, #116]	@ (800c154 <xTimerCreateTimerTask+0x84>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d021      	beq.n	800c12a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c0ee:	1d3a      	adds	r2, r7, #4
 800c0f0:	f107 0108 	add.w	r1, r7, #8
 800c0f4:	f107 030c 	add.w	r3, r7, #12
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	f7f6 f84d 	bl	8002198 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c0fe:	6879      	ldr	r1, [r7, #4]
 800c100:	68bb      	ldr	r3, [r7, #8]
 800c102:	68fa      	ldr	r2, [r7, #12]
 800c104:	9202      	str	r2, [sp, #8]
 800c106:	9301      	str	r3, [sp, #4]
 800c108:	2302      	movs	r3, #2
 800c10a:	9300      	str	r3, [sp, #0]
 800c10c:	2300      	movs	r3, #0
 800c10e:	460a      	mov	r2, r1
 800c110:	4911      	ldr	r1, [pc, #68]	@ (800c158 <xTimerCreateTimerTask+0x88>)
 800c112:	4812      	ldr	r0, [pc, #72]	@ (800c15c <xTimerCreateTimerTask+0x8c>)
 800c114:	f7fe fd9c 	bl	800ac50 <xTaskCreateStatic>
 800c118:	4603      	mov	r3, r0
 800c11a:	4a11      	ldr	r2, [pc, #68]	@ (800c160 <xTimerCreateTimerTask+0x90>)
 800c11c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c11e:	4b10      	ldr	r3, [pc, #64]	@ (800c160 <xTimerCreateTimerTask+0x90>)
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d001      	beq.n	800c12a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c126:	2301      	movs	r3, #1
 800c128:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c12a:	697b      	ldr	r3, [r7, #20]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d10b      	bne.n	800c148 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800c130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c134:	f383 8811 	msr	BASEPRI, r3
 800c138:	f3bf 8f6f 	isb	sy
 800c13c:	f3bf 8f4f 	dsb	sy
 800c140:	613b      	str	r3, [r7, #16]
}
 800c142:	bf00      	nop
 800c144:	bf00      	nop
 800c146:	e7fd      	b.n	800c144 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c148:	697b      	ldr	r3, [r7, #20]
}
 800c14a:	4618      	mov	r0, r3
 800c14c:	3718      	adds	r7, #24
 800c14e:	46bd      	mov	sp, r7
 800c150:	bd80      	pop	{r7, pc}
 800c152:	bf00      	nop
 800c154:	20002c40 	.word	0x20002c40
 800c158:	08010f40 	.word	0x08010f40
 800c15c:	0800c29d 	.word	0x0800c29d
 800c160:	20002c44 	.word	0x20002c44

0800c164 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b08a      	sub	sp, #40	@ 0x28
 800c168:	af00      	add	r7, sp, #0
 800c16a:	60f8      	str	r0, [r7, #12]
 800c16c:	60b9      	str	r1, [r7, #8]
 800c16e:	607a      	str	r2, [r7, #4]
 800c170:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c172:	2300      	movs	r3, #0
 800c174:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d10b      	bne.n	800c194 <xTimerGenericCommand+0x30>
	__asm volatile
 800c17c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c180:	f383 8811 	msr	BASEPRI, r3
 800c184:	f3bf 8f6f 	isb	sy
 800c188:	f3bf 8f4f 	dsb	sy
 800c18c:	623b      	str	r3, [r7, #32]
}
 800c18e:	bf00      	nop
 800c190:	bf00      	nop
 800c192:	e7fd      	b.n	800c190 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c194:	4b19      	ldr	r3, [pc, #100]	@ (800c1fc <xTimerGenericCommand+0x98>)
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d02a      	beq.n	800c1f2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c19c:	68bb      	ldr	r3, [r7, #8]
 800c19e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c1a8:	68bb      	ldr	r3, [r7, #8]
 800c1aa:	2b05      	cmp	r3, #5
 800c1ac:	dc18      	bgt.n	800c1e0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c1ae:	f7ff fd43 	bl	800bc38 <xTaskGetSchedulerState>
 800c1b2:	4603      	mov	r3, r0
 800c1b4:	2b02      	cmp	r3, #2
 800c1b6:	d109      	bne.n	800c1cc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c1b8:	4b10      	ldr	r3, [pc, #64]	@ (800c1fc <xTimerGenericCommand+0x98>)
 800c1ba:	6818      	ldr	r0, [r3, #0]
 800c1bc:	f107 0114 	add.w	r1, r7, #20
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c1c4:	f7fd fbf8 	bl	80099b8 <xQueueGenericSend>
 800c1c8:	6278      	str	r0, [r7, #36]	@ 0x24
 800c1ca:	e012      	b.n	800c1f2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c1cc:	4b0b      	ldr	r3, [pc, #44]	@ (800c1fc <xTimerGenericCommand+0x98>)
 800c1ce:	6818      	ldr	r0, [r3, #0]
 800c1d0:	f107 0114 	add.w	r1, r7, #20
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	f7fd fbee 	bl	80099b8 <xQueueGenericSend>
 800c1dc:	6278      	str	r0, [r7, #36]	@ 0x24
 800c1de:	e008      	b.n	800c1f2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c1e0:	4b06      	ldr	r3, [pc, #24]	@ (800c1fc <xTimerGenericCommand+0x98>)
 800c1e2:	6818      	ldr	r0, [r3, #0]
 800c1e4:	f107 0114 	add.w	r1, r7, #20
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	683a      	ldr	r2, [r7, #0]
 800c1ec:	f7fd fda0 	bl	8009d30 <xQueueGenericSendFromISR>
 800c1f0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c1f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	3728      	adds	r7, #40	@ 0x28
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	bd80      	pop	{r7, pc}
 800c1fc:	20002c40 	.word	0x20002c40

0800c200 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b088      	sub	sp, #32
 800c204:	af02      	add	r7, sp, #8
 800c206:	6078      	str	r0, [r7, #4]
 800c208:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c20a:	4b23      	ldr	r3, [pc, #140]	@ (800c298 <prvProcessExpiredTimer+0x98>)
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	68db      	ldr	r3, [r3, #12]
 800c210:	68db      	ldr	r3, [r3, #12]
 800c212:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c214:	697b      	ldr	r3, [r7, #20]
 800c216:	3304      	adds	r3, #4
 800c218:	4618      	mov	r0, r3
 800c21a:	f7fd f9da 	bl	80095d2 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c21e:	697b      	ldr	r3, [r7, #20]
 800c220:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c224:	f003 0304 	and.w	r3, r3, #4
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d023      	beq.n	800c274 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c22c:	697b      	ldr	r3, [r7, #20]
 800c22e:	699a      	ldr	r2, [r3, #24]
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	18d1      	adds	r1, r2, r3
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	683a      	ldr	r2, [r7, #0]
 800c238:	6978      	ldr	r0, [r7, #20]
 800c23a:	f000 f8d5 	bl	800c3e8 <prvInsertTimerInActiveList>
 800c23e:	4603      	mov	r3, r0
 800c240:	2b00      	cmp	r3, #0
 800c242:	d020      	beq.n	800c286 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c244:	2300      	movs	r3, #0
 800c246:	9300      	str	r3, [sp, #0]
 800c248:	2300      	movs	r3, #0
 800c24a:	687a      	ldr	r2, [r7, #4]
 800c24c:	2100      	movs	r1, #0
 800c24e:	6978      	ldr	r0, [r7, #20]
 800c250:	f7ff ff88 	bl	800c164 <xTimerGenericCommand>
 800c254:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c256:	693b      	ldr	r3, [r7, #16]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d114      	bne.n	800c286 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800c25c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c260:	f383 8811 	msr	BASEPRI, r3
 800c264:	f3bf 8f6f 	isb	sy
 800c268:	f3bf 8f4f 	dsb	sy
 800c26c:	60fb      	str	r3, [r7, #12]
}
 800c26e:	bf00      	nop
 800c270:	bf00      	nop
 800c272:	e7fd      	b.n	800c270 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c274:	697b      	ldr	r3, [r7, #20]
 800c276:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c27a:	f023 0301 	bic.w	r3, r3, #1
 800c27e:	b2da      	uxtb	r2, r3
 800c280:	697b      	ldr	r3, [r7, #20]
 800c282:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c286:	697b      	ldr	r3, [r7, #20]
 800c288:	6a1b      	ldr	r3, [r3, #32]
 800c28a:	6978      	ldr	r0, [r7, #20]
 800c28c:	4798      	blx	r3
}
 800c28e:	bf00      	nop
 800c290:	3718      	adds	r7, #24
 800c292:	46bd      	mov	sp, r7
 800c294:	bd80      	pop	{r7, pc}
 800c296:	bf00      	nop
 800c298:	20002c38 	.word	0x20002c38

0800c29c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b084      	sub	sp, #16
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c2a4:	f107 0308 	add.w	r3, r7, #8
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	f000 f859 	bl	800c360 <prvGetNextExpireTime>
 800c2ae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c2b0:	68bb      	ldr	r3, [r7, #8]
 800c2b2:	4619      	mov	r1, r3
 800c2b4:	68f8      	ldr	r0, [r7, #12]
 800c2b6:	f000 f805 	bl	800c2c4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c2ba:	f000 f8d7 	bl	800c46c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c2be:	bf00      	nop
 800c2c0:	e7f0      	b.n	800c2a4 <prvTimerTask+0x8>
	...

0800c2c4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b084      	sub	sp, #16
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
 800c2cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c2ce:	f7ff f86b 	bl	800b3a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c2d2:	f107 0308 	add.w	r3, r7, #8
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	f000 f866 	bl	800c3a8 <prvSampleTimeNow>
 800c2dc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c2de:	68bb      	ldr	r3, [r7, #8]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d130      	bne.n	800c346 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c2e4:	683b      	ldr	r3, [r7, #0]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d10a      	bne.n	800c300 <prvProcessTimerOrBlockTask+0x3c>
 800c2ea:	687a      	ldr	r2, [r7, #4]
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	429a      	cmp	r2, r3
 800c2f0:	d806      	bhi.n	800c300 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c2f2:	f7ff f867 	bl	800b3c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c2f6:	68f9      	ldr	r1, [r7, #12]
 800c2f8:	6878      	ldr	r0, [r7, #4]
 800c2fa:	f7ff ff81 	bl	800c200 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c2fe:	e024      	b.n	800c34a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c300:	683b      	ldr	r3, [r7, #0]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d008      	beq.n	800c318 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c306:	4b13      	ldr	r3, [pc, #76]	@ (800c354 <prvProcessTimerOrBlockTask+0x90>)
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d101      	bne.n	800c314 <prvProcessTimerOrBlockTask+0x50>
 800c310:	2301      	movs	r3, #1
 800c312:	e000      	b.n	800c316 <prvProcessTimerOrBlockTask+0x52>
 800c314:	2300      	movs	r3, #0
 800c316:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c318:	4b0f      	ldr	r3, [pc, #60]	@ (800c358 <prvProcessTimerOrBlockTask+0x94>)
 800c31a:	6818      	ldr	r0, [r3, #0]
 800c31c:	687a      	ldr	r2, [r7, #4]
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	1ad3      	subs	r3, r2, r3
 800c322:	683a      	ldr	r2, [r7, #0]
 800c324:	4619      	mov	r1, r3
 800c326:	f7fe fc5f 	bl	800abe8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c32a:	f7ff f84b 	bl	800b3c4 <xTaskResumeAll>
 800c32e:	4603      	mov	r3, r0
 800c330:	2b00      	cmp	r3, #0
 800c332:	d10a      	bne.n	800c34a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c334:	4b09      	ldr	r3, [pc, #36]	@ (800c35c <prvProcessTimerOrBlockTask+0x98>)
 800c336:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c33a:	601a      	str	r2, [r3, #0]
 800c33c:	f3bf 8f4f 	dsb	sy
 800c340:	f3bf 8f6f 	isb	sy
}
 800c344:	e001      	b.n	800c34a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c346:	f7ff f83d 	bl	800b3c4 <xTaskResumeAll>
}
 800c34a:	bf00      	nop
 800c34c:	3710      	adds	r7, #16
 800c34e:	46bd      	mov	sp, r7
 800c350:	bd80      	pop	{r7, pc}
 800c352:	bf00      	nop
 800c354:	20002c3c 	.word	0x20002c3c
 800c358:	20002c40 	.word	0x20002c40
 800c35c:	e000ed04 	.word	0xe000ed04

0800c360 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c360:	b480      	push	{r7}
 800c362:	b085      	sub	sp, #20
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c368:	4b0e      	ldr	r3, [pc, #56]	@ (800c3a4 <prvGetNextExpireTime+0x44>)
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d101      	bne.n	800c376 <prvGetNextExpireTime+0x16>
 800c372:	2201      	movs	r2, #1
 800c374:	e000      	b.n	800c378 <prvGetNextExpireTime+0x18>
 800c376:	2200      	movs	r2, #0
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d105      	bne.n	800c390 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c384:	4b07      	ldr	r3, [pc, #28]	@ (800c3a4 <prvGetNextExpireTime+0x44>)
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	68db      	ldr	r3, [r3, #12]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	60fb      	str	r3, [r7, #12]
 800c38e:	e001      	b.n	800c394 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c390:	2300      	movs	r3, #0
 800c392:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c394:	68fb      	ldr	r3, [r7, #12]
}
 800c396:	4618      	mov	r0, r3
 800c398:	3714      	adds	r7, #20
 800c39a:	46bd      	mov	sp, r7
 800c39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a0:	4770      	bx	lr
 800c3a2:	bf00      	nop
 800c3a4:	20002c38 	.word	0x20002c38

0800c3a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b084      	sub	sp, #16
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c3b0:	f7ff f8aa 	bl	800b508 <xTaskGetTickCount>
 800c3b4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c3b6:	4b0b      	ldr	r3, [pc, #44]	@ (800c3e4 <prvSampleTimeNow+0x3c>)
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	68fa      	ldr	r2, [r7, #12]
 800c3bc:	429a      	cmp	r2, r3
 800c3be:	d205      	bcs.n	800c3cc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c3c0:	f000 f91e 	bl	800c600 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2201      	movs	r2, #1
 800c3c8:	601a      	str	r2, [r3, #0]
 800c3ca:	e002      	b.n	800c3d2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c3d2:	4a04      	ldr	r2, [pc, #16]	@ (800c3e4 <prvSampleTimeNow+0x3c>)
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c3d8:	68fb      	ldr	r3, [r7, #12]
}
 800c3da:	4618      	mov	r0, r3
 800c3dc:	3710      	adds	r7, #16
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bd80      	pop	{r7, pc}
 800c3e2:	bf00      	nop
 800c3e4:	20002c48 	.word	0x20002c48

0800c3e8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b086      	sub	sp, #24
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	60f8      	str	r0, [r7, #12]
 800c3f0:	60b9      	str	r1, [r7, #8]
 800c3f2:	607a      	str	r2, [r7, #4]
 800c3f4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	68ba      	ldr	r2, [r7, #8]
 800c3fe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	68fa      	ldr	r2, [r7, #12]
 800c404:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c406:	68ba      	ldr	r2, [r7, #8]
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	429a      	cmp	r2, r3
 800c40c:	d812      	bhi.n	800c434 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c40e:	687a      	ldr	r2, [r7, #4]
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	1ad2      	subs	r2, r2, r3
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	699b      	ldr	r3, [r3, #24]
 800c418:	429a      	cmp	r2, r3
 800c41a:	d302      	bcc.n	800c422 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c41c:	2301      	movs	r3, #1
 800c41e:	617b      	str	r3, [r7, #20]
 800c420:	e01b      	b.n	800c45a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c422:	4b10      	ldr	r3, [pc, #64]	@ (800c464 <prvInsertTimerInActiveList+0x7c>)
 800c424:	681a      	ldr	r2, [r3, #0]
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	3304      	adds	r3, #4
 800c42a:	4619      	mov	r1, r3
 800c42c:	4610      	mov	r0, r2
 800c42e:	f7fd f897 	bl	8009560 <vListInsert>
 800c432:	e012      	b.n	800c45a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c434:	687a      	ldr	r2, [r7, #4]
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	429a      	cmp	r2, r3
 800c43a:	d206      	bcs.n	800c44a <prvInsertTimerInActiveList+0x62>
 800c43c:	68ba      	ldr	r2, [r7, #8]
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	429a      	cmp	r2, r3
 800c442:	d302      	bcc.n	800c44a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c444:	2301      	movs	r3, #1
 800c446:	617b      	str	r3, [r7, #20]
 800c448:	e007      	b.n	800c45a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c44a:	4b07      	ldr	r3, [pc, #28]	@ (800c468 <prvInsertTimerInActiveList+0x80>)
 800c44c:	681a      	ldr	r2, [r3, #0]
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	3304      	adds	r3, #4
 800c452:	4619      	mov	r1, r3
 800c454:	4610      	mov	r0, r2
 800c456:	f7fd f883 	bl	8009560 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c45a:	697b      	ldr	r3, [r7, #20]
}
 800c45c:	4618      	mov	r0, r3
 800c45e:	3718      	adds	r7, #24
 800c460:	46bd      	mov	sp, r7
 800c462:	bd80      	pop	{r7, pc}
 800c464:	20002c3c 	.word	0x20002c3c
 800c468:	20002c38 	.word	0x20002c38

0800c46c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b08c      	sub	sp, #48	@ 0x30
 800c470:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c472:	e0b2      	b.n	800c5da <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c474:	68bb      	ldr	r3, [r7, #8]
 800c476:	2b00      	cmp	r3, #0
 800c478:	f2c0 80af 	blt.w	800c5da <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c47c:	693b      	ldr	r3, [r7, #16]
 800c47e:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c482:	695b      	ldr	r3, [r3, #20]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d004      	beq.n	800c492 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c48a:	3304      	adds	r3, #4
 800c48c:	4618      	mov	r0, r3
 800c48e:	f7fd f8a0 	bl	80095d2 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c492:	1d3b      	adds	r3, r7, #4
 800c494:	4618      	mov	r0, r3
 800c496:	f7ff ff87 	bl	800c3a8 <prvSampleTimeNow>
 800c49a:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800c49c:	68bb      	ldr	r3, [r7, #8]
 800c49e:	2b09      	cmp	r3, #9
 800c4a0:	f200 8098 	bhi.w	800c5d4 <prvProcessReceivedCommands+0x168>
 800c4a4:	a201      	add	r2, pc, #4	@ (adr r2, 800c4ac <prvProcessReceivedCommands+0x40>)
 800c4a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4aa:	bf00      	nop
 800c4ac:	0800c4d5 	.word	0x0800c4d5
 800c4b0:	0800c4d5 	.word	0x0800c4d5
 800c4b4:	0800c4d5 	.word	0x0800c4d5
 800c4b8:	0800c54b 	.word	0x0800c54b
 800c4bc:	0800c55f 	.word	0x0800c55f
 800c4c0:	0800c5ab 	.word	0x0800c5ab
 800c4c4:	0800c4d5 	.word	0x0800c4d5
 800c4c8:	0800c4d5 	.word	0x0800c4d5
 800c4cc:	0800c54b 	.word	0x0800c54b
 800c4d0:	0800c55f 	.word	0x0800c55f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c4d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c4da:	f043 0301 	orr.w	r3, r3, #1
 800c4de:	b2da      	uxtb	r2, r3
 800c4e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c4e6:	68fa      	ldr	r2, [r7, #12]
 800c4e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4ea:	699b      	ldr	r3, [r3, #24]
 800c4ec:	18d1      	adds	r1, r2, r3
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	6a3a      	ldr	r2, [r7, #32]
 800c4f2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c4f4:	f7ff ff78 	bl	800c3e8 <prvInsertTimerInActiveList>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d06c      	beq.n	800c5d8 <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c4fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c500:	6a1b      	ldr	r3, [r3, #32]
 800c502:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c504:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c508:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c50c:	f003 0304 	and.w	r3, r3, #4
 800c510:	2b00      	cmp	r3, #0
 800c512:	d061      	beq.n	800c5d8 <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c514:	68fa      	ldr	r2, [r7, #12]
 800c516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c518:	699b      	ldr	r3, [r3, #24]
 800c51a:	441a      	add	r2, r3
 800c51c:	2300      	movs	r3, #0
 800c51e:	9300      	str	r3, [sp, #0]
 800c520:	2300      	movs	r3, #0
 800c522:	2100      	movs	r1, #0
 800c524:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c526:	f7ff fe1d 	bl	800c164 <xTimerGenericCommand>
 800c52a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800c52c:	69fb      	ldr	r3, [r7, #28]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d152      	bne.n	800c5d8 <prvProcessReceivedCommands+0x16c>
	__asm volatile
 800c532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c536:	f383 8811 	msr	BASEPRI, r3
 800c53a:	f3bf 8f6f 	isb	sy
 800c53e:	f3bf 8f4f 	dsb	sy
 800c542:	61bb      	str	r3, [r7, #24]
}
 800c544:	bf00      	nop
 800c546:	bf00      	nop
 800c548:	e7fd      	b.n	800c546 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c54a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c54c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c550:	f023 0301 	bic.w	r3, r3, #1
 800c554:	b2da      	uxtb	r2, r3
 800c556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c558:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c55c:	e03d      	b.n	800c5da <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c55e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c560:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c564:	f043 0301 	orr.w	r3, r3, #1
 800c568:	b2da      	uxtb	r2, r3
 800c56a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c56c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c570:	68fa      	ldr	r2, [r7, #12]
 800c572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c574:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c578:	699b      	ldr	r3, [r3, #24]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d10b      	bne.n	800c596 <prvProcessReceivedCommands+0x12a>
	__asm volatile
 800c57e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c582:	f383 8811 	msr	BASEPRI, r3
 800c586:	f3bf 8f6f 	isb	sy
 800c58a:	f3bf 8f4f 	dsb	sy
 800c58e:	617b      	str	r3, [r7, #20]
}
 800c590:	bf00      	nop
 800c592:	bf00      	nop
 800c594:	e7fd      	b.n	800c592 <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c598:	699a      	ldr	r2, [r3, #24]
 800c59a:	6a3b      	ldr	r3, [r7, #32]
 800c59c:	18d1      	adds	r1, r2, r3
 800c59e:	6a3b      	ldr	r3, [r7, #32]
 800c5a0:	6a3a      	ldr	r2, [r7, #32]
 800c5a2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c5a4:	f7ff ff20 	bl	800c3e8 <prvInsertTimerInActiveList>
					break;
 800c5a8:	e017      	b.n	800c5da <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c5aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c5b0:	f003 0302 	and.w	r3, r3, #2
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d103      	bne.n	800c5c0 <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 800c5b8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c5ba:	f000 fc15 	bl	800cde8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c5be:	e00c      	b.n	800c5da <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c5c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c5c6:	f023 0301 	bic.w	r3, r3, #1
 800c5ca:	b2da      	uxtb	r2, r3
 800c5cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c5d2:	e002      	b.n	800c5da <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 800c5d4:	bf00      	nop
 800c5d6:	e000      	b.n	800c5da <prvProcessReceivedCommands+0x16e>
					break;
 800c5d8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c5da:	4b08      	ldr	r3, [pc, #32]	@ (800c5fc <prvProcessReceivedCommands+0x190>)
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	f107 0108 	add.w	r1, r7, #8
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	f7fd fd61 	bl	800a0ac <xQueueReceive>
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	f47f af41 	bne.w	800c474 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c5f2:	bf00      	nop
 800c5f4:	bf00      	nop
 800c5f6:	3728      	adds	r7, #40	@ 0x28
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	bd80      	pop	{r7, pc}
 800c5fc:	20002c40 	.word	0x20002c40

0800c600 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b088      	sub	sp, #32
 800c604:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c606:	e049      	b.n	800c69c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c608:	4b2e      	ldr	r3, [pc, #184]	@ (800c6c4 <prvSwitchTimerLists+0xc4>)
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	68db      	ldr	r3, [r3, #12]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c612:	4b2c      	ldr	r3, [pc, #176]	@ (800c6c4 <prvSwitchTimerLists+0xc4>)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	68db      	ldr	r3, [r3, #12]
 800c618:	68db      	ldr	r3, [r3, #12]
 800c61a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	3304      	adds	r3, #4
 800c620:	4618      	mov	r0, r3
 800c622:	f7fc ffd6 	bl	80095d2 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	6a1b      	ldr	r3, [r3, #32]
 800c62a:	68f8      	ldr	r0, [r7, #12]
 800c62c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c634:	f003 0304 	and.w	r3, r3, #4
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d02f      	beq.n	800c69c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	699b      	ldr	r3, [r3, #24]
 800c640:	693a      	ldr	r2, [r7, #16]
 800c642:	4413      	add	r3, r2
 800c644:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c646:	68ba      	ldr	r2, [r7, #8]
 800c648:	693b      	ldr	r3, [r7, #16]
 800c64a:	429a      	cmp	r2, r3
 800c64c:	d90e      	bls.n	800c66c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	68ba      	ldr	r2, [r7, #8]
 800c652:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	68fa      	ldr	r2, [r7, #12]
 800c658:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c65a:	4b1a      	ldr	r3, [pc, #104]	@ (800c6c4 <prvSwitchTimerLists+0xc4>)
 800c65c:	681a      	ldr	r2, [r3, #0]
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	3304      	adds	r3, #4
 800c662:	4619      	mov	r1, r3
 800c664:	4610      	mov	r0, r2
 800c666:	f7fc ff7b 	bl	8009560 <vListInsert>
 800c66a:	e017      	b.n	800c69c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c66c:	2300      	movs	r3, #0
 800c66e:	9300      	str	r3, [sp, #0]
 800c670:	2300      	movs	r3, #0
 800c672:	693a      	ldr	r2, [r7, #16]
 800c674:	2100      	movs	r1, #0
 800c676:	68f8      	ldr	r0, [r7, #12]
 800c678:	f7ff fd74 	bl	800c164 <xTimerGenericCommand>
 800c67c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d10b      	bne.n	800c69c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c688:	f383 8811 	msr	BASEPRI, r3
 800c68c:	f3bf 8f6f 	isb	sy
 800c690:	f3bf 8f4f 	dsb	sy
 800c694:	603b      	str	r3, [r7, #0]
}
 800c696:	bf00      	nop
 800c698:	bf00      	nop
 800c69a:	e7fd      	b.n	800c698 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c69c:	4b09      	ldr	r3, [pc, #36]	@ (800c6c4 <prvSwitchTimerLists+0xc4>)
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d1b0      	bne.n	800c608 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c6a6:	4b07      	ldr	r3, [pc, #28]	@ (800c6c4 <prvSwitchTimerLists+0xc4>)
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c6ac:	4b06      	ldr	r3, [pc, #24]	@ (800c6c8 <prvSwitchTimerLists+0xc8>)
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	4a04      	ldr	r2, [pc, #16]	@ (800c6c4 <prvSwitchTimerLists+0xc4>)
 800c6b2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c6b4:	4a04      	ldr	r2, [pc, #16]	@ (800c6c8 <prvSwitchTimerLists+0xc8>)
 800c6b6:	697b      	ldr	r3, [r7, #20]
 800c6b8:	6013      	str	r3, [r2, #0]
}
 800c6ba:	bf00      	nop
 800c6bc:	3718      	adds	r7, #24
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}
 800c6c2:	bf00      	nop
 800c6c4:	20002c38 	.word	0x20002c38
 800c6c8:	20002c3c 	.word	0x20002c3c

0800c6cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b082      	sub	sp, #8
 800c6d0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c6d2:	f000 f97b 	bl	800c9cc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c6d6:	4b15      	ldr	r3, [pc, #84]	@ (800c72c <prvCheckForValidListAndQueue+0x60>)
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d120      	bne.n	800c720 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c6de:	4814      	ldr	r0, [pc, #80]	@ (800c730 <prvCheckForValidListAndQueue+0x64>)
 800c6e0:	f7fc feed 	bl	80094be <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c6e4:	4813      	ldr	r0, [pc, #76]	@ (800c734 <prvCheckForValidListAndQueue+0x68>)
 800c6e6:	f7fc feea 	bl	80094be <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c6ea:	4b13      	ldr	r3, [pc, #76]	@ (800c738 <prvCheckForValidListAndQueue+0x6c>)
 800c6ec:	4a10      	ldr	r2, [pc, #64]	@ (800c730 <prvCheckForValidListAndQueue+0x64>)
 800c6ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c6f0:	4b12      	ldr	r3, [pc, #72]	@ (800c73c <prvCheckForValidListAndQueue+0x70>)
 800c6f2:	4a10      	ldr	r2, [pc, #64]	@ (800c734 <prvCheckForValidListAndQueue+0x68>)
 800c6f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	9300      	str	r3, [sp, #0]
 800c6fa:	4b11      	ldr	r3, [pc, #68]	@ (800c740 <prvCheckForValidListAndQueue+0x74>)
 800c6fc:	4a11      	ldr	r2, [pc, #68]	@ (800c744 <prvCheckForValidListAndQueue+0x78>)
 800c6fe:	210c      	movs	r1, #12
 800c700:	200a      	movs	r0, #10
 800c702:	f7fc fffb 	bl	80096fc <xQueueGenericCreateStatic>
 800c706:	4603      	mov	r3, r0
 800c708:	4a08      	ldr	r2, [pc, #32]	@ (800c72c <prvCheckForValidListAndQueue+0x60>)
 800c70a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c70c:	4b07      	ldr	r3, [pc, #28]	@ (800c72c <prvCheckForValidListAndQueue+0x60>)
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d005      	beq.n	800c720 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c714:	4b05      	ldr	r3, [pc, #20]	@ (800c72c <prvCheckForValidListAndQueue+0x60>)
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	490b      	ldr	r1, [pc, #44]	@ (800c748 <prvCheckForValidListAndQueue+0x7c>)
 800c71a:	4618      	mov	r0, r3
 800c71c:	f7fe fa38 	bl	800ab90 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c720:	f000 f986 	bl	800ca30 <vPortExitCritical>
}
 800c724:	bf00      	nop
 800c726:	46bd      	mov	sp, r7
 800c728:	bd80      	pop	{r7, pc}
 800c72a:	bf00      	nop
 800c72c:	20002c40 	.word	0x20002c40
 800c730:	20002c10 	.word	0x20002c10
 800c734:	20002c24 	.word	0x20002c24
 800c738:	20002c38 	.word	0x20002c38
 800c73c:	20002c3c 	.word	0x20002c3c
 800c740:	20002cc4 	.word	0x20002cc4
 800c744:	20002c4c 	.word	0x20002c4c
 800c748:	08010f48 	.word	0x08010f48

0800c74c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c74c:	b480      	push	{r7}
 800c74e:	b085      	sub	sp, #20
 800c750:	af00      	add	r7, sp, #0
 800c752:	60f8      	str	r0, [r7, #12]
 800c754:	60b9      	str	r1, [r7, #8]
 800c756:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	3b04      	subs	r3, #4
 800c75c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c764:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	3b04      	subs	r3, #4
 800c76a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c76c:	68bb      	ldr	r3, [r7, #8]
 800c76e:	f023 0201 	bic.w	r2, r3, #1
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	3b04      	subs	r3, #4
 800c77a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c77c:	4a0c      	ldr	r2, [pc, #48]	@ (800c7b0 <pxPortInitialiseStack+0x64>)
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	3b14      	subs	r3, #20
 800c786:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c788:	687a      	ldr	r2, [r7, #4]
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	3b04      	subs	r3, #4
 800c792:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	f06f 0202 	mvn.w	r2, #2
 800c79a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	3b20      	subs	r3, #32
 800c7a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c7a2:	68fb      	ldr	r3, [r7, #12]
}
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	3714      	adds	r7, #20
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ae:	4770      	bx	lr
 800c7b0:	0800c7b5 	.word	0x0800c7b5

0800c7b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c7b4:	b480      	push	{r7}
 800c7b6:	b085      	sub	sp, #20
 800c7b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c7be:	4b13      	ldr	r3, [pc, #76]	@ (800c80c <prvTaskExitError+0x58>)
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7c6:	d00b      	beq.n	800c7e0 <prvTaskExitError+0x2c>
	__asm volatile
 800c7c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7cc:	f383 8811 	msr	BASEPRI, r3
 800c7d0:	f3bf 8f6f 	isb	sy
 800c7d4:	f3bf 8f4f 	dsb	sy
 800c7d8:	60fb      	str	r3, [r7, #12]
}
 800c7da:	bf00      	nop
 800c7dc:	bf00      	nop
 800c7de:	e7fd      	b.n	800c7dc <prvTaskExitError+0x28>
	__asm volatile
 800c7e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7e4:	f383 8811 	msr	BASEPRI, r3
 800c7e8:	f3bf 8f6f 	isb	sy
 800c7ec:	f3bf 8f4f 	dsb	sy
 800c7f0:	60bb      	str	r3, [r7, #8]
}
 800c7f2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c7f4:	bf00      	nop
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d0fc      	beq.n	800c7f6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c7fc:	bf00      	nop
 800c7fe:	bf00      	nop
 800c800:	3714      	adds	r7, #20
 800c802:	46bd      	mov	sp, r7
 800c804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c808:	4770      	bx	lr
 800c80a:	bf00      	nop
 800c80c:	200001c8 	.word	0x200001c8

0800c810 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c810:	4b07      	ldr	r3, [pc, #28]	@ (800c830 <pxCurrentTCBConst2>)
 800c812:	6819      	ldr	r1, [r3, #0]
 800c814:	6808      	ldr	r0, [r1, #0]
 800c816:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c81a:	f380 8809 	msr	PSP, r0
 800c81e:	f3bf 8f6f 	isb	sy
 800c822:	f04f 0000 	mov.w	r0, #0
 800c826:	f380 8811 	msr	BASEPRI, r0
 800c82a:	4770      	bx	lr
 800c82c:	f3af 8000 	nop.w

0800c830 <pxCurrentTCBConst2>:
 800c830:	20002adc 	.word	0x20002adc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c834:	bf00      	nop
 800c836:	bf00      	nop

0800c838 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c838:	4808      	ldr	r0, [pc, #32]	@ (800c85c <prvPortStartFirstTask+0x24>)
 800c83a:	6800      	ldr	r0, [r0, #0]
 800c83c:	6800      	ldr	r0, [r0, #0]
 800c83e:	f380 8808 	msr	MSP, r0
 800c842:	f04f 0000 	mov.w	r0, #0
 800c846:	f380 8814 	msr	CONTROL, r0
 800c84a:	b662      	cpsie	i
 800c84c:	b661      	cpsie	f
 800c84e:	f3bf 8f4f 	dsb	sy
 800c852:	f3bf 8f6f 	isb	sy
 800c856:	df00      	svc	0
 800c858:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c85a:	bf00      	nop
 800c85c:	e000ed08 	.word	0xe000ed08

0800c860 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c860:	b580      	push	{r7, lr}
 800c862:	b088      	sub	sp, #32
 800c864:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c866:	4b50      	ldr	r3, [pc, #320]	@ (800c9a8 <xPortStartScheduler+0x148>)
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	4a50      	ldr	r2, [pc, #320]	@ (800c9ac <xPortStartScheduler+0x14c>)
 800c86c:	4293      	cmp	r3, r2
 800c86e:	d10b      	bne.n	800c888 <xPortStartScheduler+0x28>
	__asm volatile
 800c870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c874:	f383 8811 	msr	BASEPRI, r3
 800c878:	f3bf 8f6f 	isb	sy
 800c87c:	f3bf 8f4f 	dsb	sy
 800c880:	61bb      	str	r3, [r7, #24]
}
 800c882:	bf00      	nop
 800c884:	bf00      	nop
 800c886:	e7fd      	b.n	800c884 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c888:	4b47      	ldr	r3, [pc, #284]	@ (800c9a8 <xPortStartScheduler+0x148>)
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	4a48      	ldr	r2, [pc, #288]	@ (800c9b0 <xPortStartScheduler+0x150>)
 800c88e:	4293      	cmp	r3, r2
 800c890:	d10b      	bne.n	800c8aa <xPortStartScheduler+0x4a>
	__asm volatile
 800c892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c896:	f383 8811 	msr	BASEPRI, r3
 800c89a:	f3bf 8f6f 	isb	sy
 800c89e:	f3bf 8f4f 	dsb	sy
 800c8a2:	617b      	str	r3, [r7, #20]
}
 800c8a4:	bf00      	nop
 800c8a6:	bf00      	nop
 800c8a8:	e7fd      	b.n	800c8a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c8aa:	4b42      	ldr	r3, [pc, #264]	@ (800c9b4 <xPortStartScheduler+0x154>)
 800c8ac:	61fb      	str	r3, [r7, #28]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c8ae:	69fb      	ldr	r3, [r7, #28]
 800c8b0:	781b      	ldrb	r3, [r3, #0]
 800c8b2:	b2db      	uxtb	r3, r3
 800c8b4:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c8b6:	69fb      	ldr	r3, [r7, #28]
 800c8b8:	22ff      	movs	r2, #255	@ 0xff
 800c8ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c8bc:	69fb      	ldr	r3, [r7, #28]
 800c8be:	781b      	ldrb	r3, [r3, #0]
 800c8c0:	b2db      	uxtb	r3, r3
 800c8c2:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c8c4:	79fb      	ldrb	r3, [r7, #7]
 800c8c6:	b2db      	uxtb	r3, r3
 800c8c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c8cc:	b2da      	uxtb	r2, r3
 800c8ce:	4b3a      	ldr	r3, [pc, #232]	@ (800c9b8 <xPortStartScheduler+0x158>)
 800c8d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c8d2:	4b3a      	ldr	r3, [pc, #232]	@ (800c9bc <xPortStartScheduler+0x15c>)
 800c8d4:	2207      	movs	r2, #7
 800c8d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c8d8:	e009      	b.n	800c8ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c8da:	4b38      	ldr	r3, [pc, #224]	@ (800c9bc <xPortStartScheduler+0x15c>)
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	3b01      	subs	r3, #1
 800c8e0:	4a36      	ldr	r2, [pc, #216]	@ (800c9bc <xPortStartScheduler+0x15c>)
 800c8e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c8e4:	79fb      	ldrb	r3, [r7, #7]
 800c8e6:	b2db      	uxtb	r3, r3
 800c8e8:	005b      	lsls	r3, r3, #1
 800c8ea:	b2db      	uxtb	r3, r3
 800c8ec:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c8ee:	79fb      	ldrb	r3, [r7, #7]
 800c8f0:	b2db      	uxtb	r3, r3
 800c8f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c8f6:	2b80      	cmp	r3, #128	@ 0x80
 800c8f8:	d0ef      	beq.n	800c8da <xPortStartScheduler+0x7a>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 800c8fa:	4b30      	ldr	r3, [pc, #192]	@ (800c9bc <xPortStartScheduler+0x15c>)
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	f1c3 0307 	rsb	r3, r3, #7
 800c902:	2b04      	cmp	r3, #4
 800c904:	d00b      	beq.n	800c91e <xPortStartScheduler+0xbe>
	__asm volatile
 800c906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c90a:	f383 8811 	msr	BASEPRI, r3
 800c90e:	f3bf 8f6f 	isb	sy
 800c912:	f3bf 8f4f 	dsb	sy
 800c916:	613b      	str	r3, [r7, #16]
}
 800c918:	bf00      	nop
 800c91a:	bf00      	nop
 800c91c:	e7fd      	b.n	800c91a <xPortStartScheduler+0xba>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c91e:	4b27      	ldr	r3, [pc, #156]	@ (800c9bc <xPortStartScheduler+0x15c>)
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	f1c3 0307 	rsb	r3, r3, #7
 800c926:	2b04      	cmp	r3, #4
 800c928:	d00b      	beq.n	800c942 <xPortStartScheduler+0xe2>
	__asm volatile
 800c92a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c92e:	f383 8811 	msr	BASEPRI, r3
 800c932:	f3bf 8f6f 	isb	sy
 800c936:	f3bf 8f4f 	dsb	sy
 800c93a:	60fb      	str	r3, [r7, #12]
}
 800c93c:	bf00      	nop
 800c93e:	bf00      	nop
 800c940:	e7fd      	b.n	800c93e <xPortStartScheduler+0xde>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c942:	4b1e      	ldr	r3, [pc, #120]	@ (800c9bc <xPortStartScheduler+0x15c>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	021b      	lsls	r3, r3, #8
 800c948:	4a1c      	ldr	r2, [pc, #112]	@ (800c9bc <xPortStartScheduler+0x15c>)
 800c94a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c94c:	4b1b      	ldr	r3, [pc, #108]	@ (800c9bc <xPortStartScheduler+0x15c>)
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c954:	4a19      	ldr	r2, [pc, #100]	@ (800c9bc <xPortStartScheduler+0x15c>)
 800c956:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c958:	68bb      	ldr	r3, [r7, #8]
 800c95a:	b2da      	uxtb	r2, r3
 800c95c:	69fb      	ldr	r3, [r7, #28]
 800c95e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c960:	4b17      	ldr	r3, [pc, #92]	@ (800c9c0 <xPortStartScheduler+0x160>)
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	4a16      	ldr	r2, [pc, #88]	@ (800c9c0 <xPortStartScheduler+0x160>)
 800c966:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c96a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c96c:	4b14      	ldr	r3, [pc, #80]	@ (800c9c0 <xPortStartScheduler+0x160>)
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	4a13      	ldr	r2, [pc, #76]	@ (800c9c0 <xPortStartScheduler+0x160>)
 800c972:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c976:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c978:	f000 f8e0 	bl	800cb3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c97c:	4b11      	ldr	r3, [pc, #68]	@ (800c9c4 <xPortStartScheduler+0x164>)
 800c97e:	2200      	movs	r2, #0
 800c980:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c982:	f000 f8ff 	bl	800cb84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c986:	4b10      	ldr	r3, [pc, #64]	@ (800c9c8 <xPortStartScheduler+0x168>)
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	4a0f      	ldr	r2, [pc, #60]	@ (800c9c8 <xPortStartScheduler+0x168>)
 800c98c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c990:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c992:	f7ff ff51 	bl	800c838 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c996:	f7fe fea1 	bl	800b6dc <vTaskSwitchContext>
	prvTaskExitError();
 800c99a:	f7ff ff0b 	bl	800c7b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c99e:	2300      	movs	r3, #0
}
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	3720      	adds	r7, #32
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	bd80      	pop	{r7, pc}
 800c9a8:	e000ed00 	.word	0xe000ed00
 800c9ac:	410fc271 	.word	0x410fc271
 800c9b0:	410fc270 	.word	0x410fc270
 800c9b4:	e000e400 	.word	0xe000e400
 800c9b8:	20002d14 	.word	0x20002d14
 800c9bc:	20002d18 	.word	0x20002d18
 800c9c0:	e000ed20 	.word	0xe000ed20
 800c9c4:	200001c8 	.word	0x200001c8
 800c9c8:	e000ef34 	.word	0xe000ef34

0800c9cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c9cc:	b480      	push	{r7}
 800c9ce:	b083      	sub	sp, #12
 800c9d0:	af00      	add	r7, sp, #0
	__asm volatile
 800c9d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9d6:	f383 8811 	msr	BASEPRI, r3
 800c9da:	f3bf 8f6f 	isb	sy
 800c9de:	f3bf 8f4f 	dsb	sy
 800c9e2:	607b      	str	r3, [r7, #4]
}
 800c9e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c9e6:	4b10      	ldr	r3, [pc, #64]	@ (800ca28 <vPortEnterCritical+0x5c>)
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	3301      	adds	r3, #1
 800c9ec:	4a0e      	ldr	r2, [pc, #56]	@ (800ca28 <vPortEnterCritical+0x5c>)
 800c9ee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c9f0:	4b0d      	ldr	r3, [pc, #52]	@ (800ca28 <vPortEnterCritical+0x5c>)
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	2b01      	cmp	r3, #1
 800c9f6:	d110      	bne.n	800ca1a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c9f8:	4b0c      	ldr	r3, [pc, #48]	@ (800ca2c <vPortEnterCritical+0x60>)
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	b2db      	uxtb	r3, r3
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d00b      	beq.n	800ca1a <vPortEnterCritical+0x4e>
	__asm volatile
 800ca02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca06:	f383 8811 	msr	BASEPRI, r3
 800ca0a:	f3bf 8f6f 	isb	sy
 800ca0e:	f3bf 8f4f 	dsb	sy
 800ca12:	603b      	str	r3, [r7, #0]
}
 800ca14:	bf00      	nop
 800ca16:	bf00      	nop
 800ca18:	e7fd      	b.n	800ca16 <vPortEnterCritical+0x4a>
	}
}
 800ca1a:	bf00      	nop
 800ca1c:	370c      	adds	r7, #12
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca24:	4770      	bx	lr
 800ca26:	bf00      	nop
 800ca28:	200001c8 	.word	0x200001c8
 800ca2c:	e000ed04 	.word	0xe000ed04

0800ca30 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ca30:	b480      	push	{r7}
 800ca32:	b083      	sub	sp, #12
 800ca34:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ca36:	4b12      	ldr	r3, [pc, #72]	@ (800ca80 <vPortExitCritical+0x50>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d10b      	bne.n	800ca56 <vPortExitCritical+0x26>
	__asm volatile
 800ca3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca42:	f383 8811 	msr	BASEPRI, r3
 800ca46:	f3bf 8f6f 	isb	sy
 800ca4a:	f3bf 8f4f 	dsb	sy
 800ca4e:	607b      	str	r3, [r7, #4]
}
 800ca50:	bf00      	nop
 800ca52:	bf00      	nop
 800ca54:	e7fd      	b.n	800ca52 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ca56:	4b0a      	ldr	r3, [pc, #40]	@ (800ca80 <vPortExitCritical+0x50>)
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	3b01      	subs	r3, #1
 800ca5c:	4a08      	ldr	r2, [pc, #32]	@ (800ca80 <vPortExitCritical+0x50>)
 800ca5e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ca60:	4b07      	ldr	r3, [pc, #28]	@ (800ca80 <vPortExitCritical+0x50>)
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d105      	bne.n	800ca74 <vPortExitCritical+0x44>
 800ca68:	2300      	movs	r3, #0
 800ca6a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ca6c:	683b      	ldr	r3, [r7, #0]
 800ca6e:	f383 8811 	msr	BASEPRI, r3
}
 800ca72:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ca74:	bf00      	nop
 800ca76:	370c      	adds	r7, #12
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7e:	4770      	bx	lr
 800ca80:	200001c8 	.word	0x200001c8
	...

0800ca90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ca90:	f3ef 8009 	mrs	r0, PSP
 800ca94:	f3bf 8f6f 	isb	sy
 800ca98:	4b15      	ldr	r3, [pc, #84]	@ (800caf0 <pxCurrentTCBConst>)
 800ca9a:	681a      	ldr	r2, [r3, #0]
 800ca9c:	f01e 0f10 	tst.w	lr, #16
 800caa0:	bf08      	it	eq
 800caa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800caa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caaa:	6010      	str	r0, [r2, #0]
 800caac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cab0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800cab4:	f380 8811 	msr	BASEPRI, r0
 800cab8:	f3bf 8f4f 	dsb	sy
 800cabc:	f3bf 8f6f 	isb	sy
 800cac0:	f7fe fe0c 	bl	800b6dc <vTaskSwitchContext>
 800cac4:	f04f 0000 	mov.w	r0, #0
 800cac8:	f380 8811 	msr	BASEPRI, r0
 800cacc:	bc09      	pop	{r0, r3}
 800cace:	6819      	ldr	r1, [r3, #0]
 800cad0:	6808      	ldr	r0, [r1, #0]
 800cad2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cad6:	f01e 0f10 	tst.w	lr, #16
 800cada:	bf08      	it	eq
 800cadc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cae0:	f380 8809 	msr	PSP, r0
 800cae4:	f3bf 8f6f 	isb	sy
 800cae8:	4770      	bx	lr
 800caea:	bf00      	nop
 800caec:	f3af 8000 	nop.w

0800caf0 <pxCurrentTCBConst>:
 800caf0:	20002adc 	.word	0x20002adc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800caf4:	bf00      	nop
 800caf6:	bf00      	nop

0800caf8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b082      	sub	sp, #8
 800cafc:	af00      	add	r7, sp, #0
	__asm volatile
 800cafe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb02:	f383 8811 	msr	BASEPRI, r3
 800cb06:	f3bf 8f6f 	isb	sy
 800cb0a:	f3bf 8f4f 	dsb	sy
 800cb0e:	607b      	str	r3, [r7, #4]
}
 800cb10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cb12:	f7fe fd09 	bl	800b528 <xTaskIncrementTick>
 800cb16:	4603      	mov	r3, r0
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d003      	beq.n	800cb24 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cb1c:	4b06      	ldr	r3, [pc, #24]	@ (800cb38 <SysTick_Handler+0x40>)
 800cb1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cb22:	601a      	str	r2, [r3, #0]
 800cb24:	2300      	movs	r3, #0
 800cb26:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	f383 8811 	msr	BASEPRI, r3
}
 800cb2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cb30:	bf00      	nop
 800cb32:	3708      	adds	r7, #8
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}
 800cb38:	e000ed04 	.word	0xe000ed04

0800cb3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cb3c:	b480      	push	{r7}
 800cb3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cb40:	4b0b      	ldr	r3, [pc, #44]	@ (800cb70 <vPortSetupTimerInterrupt+0x34>)
 800cb42:	2200      	movs	r2, #0
 800cb44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cb46:	4b0b      	ldr	r3, [pc, #44]	@ (800cb74 <vPortSetupTimerInterrupt+0x38>)
 800cb48:	2200      	movs	r2, #0
 800cb4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cb4c:	4b0a      	ldr	r3, [pc, #40]	@ (800cb78 <vPortSetupTimerInterrupt+0x3c>)
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	4a0a      	ldr	r2, [pc, #40]	@ (800cb7c <vPortSetupTimerInterrupt+0x40>)
 800cb52:	fba2 2303 	umull	r2, r3, r2, r3
 800cb56:	099b      	lsrs	r3, r3, #6
 800cb58:	4a09      	ldr	r2, [pc, #36]	@ (800cb80 <vPortSetupTimerInterrupt+0x44>)
 800cb5a:	3b01      	subs	r3, #1
 800cb5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cb5e:	4b04      	ldr	r3, [pc, #16]	@ (800cb70 <vPortSetupTimerInterrupt+0x34>)
 800cb60:	2207      	movs	r2, #7
 800cb62:	601a      	str	r2, [r3, #0]
}
 800cb64:	bf00      	nop
 800cb66:	46bd      	mov	sp, r7
 800cb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6c:	4770      	bx	lr
 800cb6e:	bf00      	nop
 800cb70:	e000e010 	.word	0xe000e010
 800cb74:	e000e018 	.word	0xe000e018
 800cb78:	200001bc 	.word	0x200001bc
 800cb7c:	10624dd3 	.word	0x10624dd3
 800cb80:	e000e014 	.word	0xe000e014

0800cb84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cb84:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800cb94 <vPortEnableVFP+0x10>
 800cb88:	6801      	ldr	r1, [r0, #0]
 800cb8a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800cb8e:	6001      	str	r1, [r0, #0]
 800cb90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cb92:	bf00      	nop
 800cb94:	e000ed88 	.word	0xe000ed88

0800cb98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cb98:	b480      	push	{r7}
 800cb9a:	b085      	sub	sp, #20
 800cb9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cb9e:	f3ef 8305 	mrs	r3, IPSR
 800cba2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	2b0f      	cmp	r3, #15
 800cba8:	d915      	bls.n	800cbd6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cbaa:	4a18      	ldr	r2, [pc, #96]	@ (800cc0c <vPortValidateInterruptPriority+0x74>)
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	4413      	add	r3, r2
 800cbb0:	781b      	ldrb	r3, [r3, #0]
 800cbb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cbb4:	4b16      	ldr	r3, [pc, #88]	@ (800cc10 <vPortValidateInterruptPriority+0x78>)
 800cbb6:	781b      	ldrb	r3, [r3, #0]
 800cbb8:	7afa      	ldrb	r2, [r7, #11]
 800cbba:	429a      	cmp	r2, r3
 800cbbc:	d20b      	bcs.n	800cbd6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800cbbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbc2:	f383 8811 	msr	BASEPRI, r3
 800cbc6:	f3bf 8f6f 	isb	sy
 800cbca:	f3bf 8f4f 	dsb	sy
 800cbce:	607b      	str	r3, [r7, #4]
}
 800cbd0:	bf00      	nop
 800cbd2:	bf00      	nop
 800cbd4:	e7fd      	b.n	800cbd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cbd6:	4b0f      	ldr	r3, [pc, #60]	@ (800cc14 <vPortValidateInterruptPriority+0x7c>)
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800cbde:	4b0e      	ldr	r3, [pc, #56]	@ (800cc18 <vPortValidateInterruptPriority+0x80>)
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	429a      	cmp	r2, r3
 800cbe4:	d90b      	bls.n	800cbfe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800cbe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbea:	f383 8811 	msr	BASEPRI, r3
 800cbee:	f3bf 8f6f 	isb	sy
 800cbf2:	f3bf 8f4f 	dsb	sy
 800cbf6:	603b      	str	r3, [r7, #0]
}
 800cbf8:	bf00      	nop
 800cbfa:	bf00      	nop
 800cbfc:	e7fd      	b.n	800cbfa <vPortValidateInterruptPriority+0x62>
	}
 800cbfe:	bf00      	nop
 800cc00:	3714      	adds	r7, #20
 800cc02:	46bd      	mov	sp, r7
 800cc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc08:	4770      	bx	lr
 800cc0a:	bf00      	nop
 800cc0c:	e000e3f0 	.word	0xe000e3f0
 800cc10:	20002d14 	.word	0x20002d14
 800cc14:	e000ed0c 	.word	0xe000ed0c
 800cc18:	20002d18 	.word	0x20002d18

0800cc1c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b08a      	sub	sp, #40	@ 0x28
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cc24:	2300      	movs	r3, #0
 800cc26:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cc28:	f7fe fbbe 	bl	800b3a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cc2c:	4b66      	ldr	r3, [pc, #408]	@ (800cdc8 <pvPortMalloc+0x1ac>)
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d101      	bne.n	800cc38 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cc34:	f000 f952 	bl	800cedc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cc38:	4b64      	ldr	r3, [pc, #400]	@ (800cdcc <pvPortMalloc+0x1b0>)
 800cc3a:	681a      	ldr	r2, [r3, #0]
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	4013      	ands	r3, r2
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	f040 8095 	bne.w	800cd70 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d01e      	beq.n	800cc8a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800cc4c:	2208      	movs	r2, #8
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	4413      	add	r3, r2
 800cc52:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	f003 0307 	and.w	r3, r3, #7
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d015      	beq.n	800cc8a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	f023 0307 	bic.w	r3, r3, #7
 800cc64:	3308      	adds	r3, #8
 800cc66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	f003 0307 	and.w	r3, r3, #7
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d00b      	beq.n	800cc8a <pvPortMalloc+0x6e>
	__asm volatile
 800cc72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc76:	f383 8811 	msr	BASEPRI, r3
 800cc7a:	f3bf 8f6f 	isb	sy
 800cc7e:	f3bf 8f4f 	dsb	sy
 800cc82:	617b      	str	r3, [r7, #20]
}
 800cc84:	bf00      	nop
 800cc86:	bf00      	nop
 800cc88:	e7fd      	b.n	800cc86 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d06f      	beq.n	800cd70 <pvPortMalloc+0x154>
 800cc90:	4b4f      	ldr	r3, [pc, #316]	@ (800cdd0 <pvPortMalloc+0x1b4>)
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	687a      	ldr	r2, [r7, #4]
 800cc96:	429a      	cmp	r2, r3
 800cc98:	d86a      	bhi.n	800cd70 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cc9a:	4b4e      	ldr	r3, [pc, #312]	@ (800cdd4 <pvPortMalloc+0x1b8>)
 800cc9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cc9e:	4b4d      	ldr	r3, [pc, #308]	@ (800cdd4 <pvPortMalloc+0x1b8>)
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cca4:	e004      	b.n	800ccb0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800cca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cca8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ccaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ccb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccb2:	685b      	ldr	r3, [r3, #4]
 800ccb4:	687a      	ldr	r2, [r7, #4]
 800ccb6:	429a      	cmp	r2, r3
 800ccb8:	d903      	bls.n	800ccc2 <pvPortMalloc+0xa6>
 800ccba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d1f1      	bne.n	800cca6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ccc2:	4b41      	ldr	r3, [pc, #260]	@ (800cdc8 <pvPortMalloc+0x1ac>)
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ccc8:	429a      	cmp	r2, r3
 800ccca:	d051      	beq.n	800cd70 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cccc:	6a3b      	ldr	r3, [r7, #32]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	2208      	movs	r2, #8
 800ccd2:	4413      	add	r3, r2
 800ccd4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ccd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccd8:	681a      	ldr	r2, [r3, #0]
 800ccda:	6a3b      	ldr	r3, [r7, #32]
 800ccdc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ccde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cce0:	685a      	ldr	r2, [r3, #4]
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	1ad2      	subs	r2, r2, r3
 800cce6:	2308      	movs	r3, #8
 800cce8:	005b      	lsls	r3, r3, #1
 800ccea:	429a      	cmp	r2, r3
 800ccec:	d920      	bls.n	800cd30 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ccee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	4413      	add	r3, r2
 800ccf4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ccf6:	69bb      	ldr	r3, [r7, #24]
 800ccf8:	f003 0307 	and.w	r3, r3, #7
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d00b      	beq.n	800cd18 <pvPortMalloc+0xfc>
	__asm volatile
 800cd00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd04:	f383 8811 	msr	BASEPRI, r3
 800cd08:	f3bf 8f6f 	isb	sy
 800cd0c:	f3bf 8f4f 	dsb	sy
 800cd10:	613b      	str	r3, [r7, #16]
}
 800cd12:	bf00      	nop
 800cd14:	bf00      	nop
 800cd16:	e7fd      	b.n	800cd14 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cd18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd1a:	685a      	ldr	r2, [r3, #4]
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	1ad2      	subs	r2, r2, r3
 800cd20:	69bb      	ldr	r3, [r7, #24]
 800cd22:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cd24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd26:	687a      	ldr	r2, [r7, #4]
 800cd28:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cd2a:	69b8      	ldr	r0, [r7, #24]
 800cd2c:	f000 f938 	bl	800cfa0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cd30:	4b27      	ldr	r3, [pc, #156]	@ (800cdd0 <pvPortMalloc+0x1b4>)
 800cd32:	681a      	ldr	r2, [r3, #0]
 800cd34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd36:	685b      	ldr	r3, [r3, #4]
 800cd38:	1ad3      	subs	r3, r2, r3
 800cd3a:	4a25      	ldr	r2, [pc, #148]	@ (800cdd0 <pvPortMalloc+0x1b4>)
 800cd3c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cd3e:	4b24      	ldr	r3, [pc, #144]	@ (800cdd0 <pvPortMalloc+0x1b4>)
 800cd40:	681a      	ldr	r2, [r3, #0]
 800cd42:	4b25      	ldr	r3, [pc, #148]	@ (800cdd8 <pvPortMalloc+0x1bc>)
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	429a      	cmp	r2, r3
 800cd48:	d203      	bcs.n	800cd52 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cd4a:	4b21      	ldr	r3, [pc, #132]	@ (800cdd0 <pvPortMalloc+0x1b4>)
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	4a22      	ldr	r2, [pc, #136]	@ (800cdd8 <pvPortMalloc+0x1bc>)
 800cd50:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cd52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd54:	685a      	ldr	r2, [r3, #4]
 800cd56:	4b1d      	ldr	r3, [pc, #116]	@ (800cdcc <pvPortMalloc+0x1b0>)
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	431a      	orrs	r2, r3
 800cd5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd5e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cd60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd62:	2200      	movs	r2, #0
 800cd64:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cd66:	4b1d      	ldr	r3, [pc, #116]	@ (800cddc <pvPortMalloc+0x1c0>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	3301      	adds	r3, #1
 800cd6c:	4a1b      	ldr	r2, [pc, #108]	@ (800cddc <pvPortMalloc+0x1c0>)
 800cd6e:	6013      	str	r3, [r2, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
 800cd70:	4b1b      	ldr	r3, [pc, #108]	@ (800cde0 <pvPortMalloc+0x1c4>)
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	f003 0301 	and.w	r3, r3, #1
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d00c      	beq.n	800cd96 <pvPortMalloc+0x17a>
 800cd7c:	4b19      	ldr	r3, [pc, #100]	@ (800cde4 <pvPortMalloc+0x1c8>)
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	685b      	ldr	r3, [r3, #4]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d007      	beq.n	800cd96 <pvPortMalloc+0x17a>
 800cd86:	f001 fff7 	bl	800ed78 <xTraceKernelPortGetSystemHeapHandle>
 800cd8a:	4603      	mov	r3, r0
 800cd8c:	687a      	ldr	r2, [r7, #4]
 800cd8e:	69f9      	ldr	r1, [r7, #28]
 800cd90:	4618      	mov	r0, r3
 800cd92:	f001 fee7 	bl	800eb64 <xTraceHeapAlloc>
	}
	( void ) xTaskResumeAll();
 800cd96:	f7fe fb15 	bl	800b3c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cd9a:	69fb      	ldr	r3, [r7, #28]
 800cd9c:	f003 0307 	and.w	r3, r3, #7
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d00b      	beq.n	800cdbc <pvPortMalloc+0x1a0>
	__asm volatile
 800cda4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cda8:	f383 8811 	msr	BASEPRI, r3
 800cdac:	f3bf 8f6f 	isb	sy
 800cdb0:	f3bf 8f4f 	dsb	sy
 800cdb4:	60fb      	str	r3, [r7, #12]
}
 800cdb6:	bf00      	nop
 800cdb8:	bf00      	nop
 800cdba:	e7fd      	b.n	800cdb8 <pvPortMalloc+0x19c>
	return pvReturn;
 800cdbc:	69fb      	ldr	r3, [r7, #28]
}
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	3728      	adds	r7, #40	@ 0x28
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	bd80      	pop	{r7, pc}
 800cdc6:	bf00      	nop
 800cdc8:	20012d24 	.word	0x20012d24
 800cdcc:	20012d38 	.word	0x20012d38
 800cdd0:	20012d28 	.word	0x20012d28
 800cdd4:	20012d1c 	.word	0x20012d1c
 800cdd8:	20012d2c 	.word	0x20012d2c
 800cddc:	20012d30 	.word	0x20012d30
 800cde0:	20017418 	.word	0x20017418
 800cde4:	20017410 	.word	0x20017410

0800cde8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b086      	sub	sp, #24
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d062      	beq.n	800cec0 <vPortFree+0xd8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cdfa:	2308      	movs	r3, #8
 800cdfc:	425b      	negs	r3, r3
 800cdfe:	697a      	ldr	r2, [r7, #20]
 800ce00:	4413      	add	r3, r2
 800ce02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ce04:	697b      	ldr	r3, [r7, #20]
 800ce06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ce08:	693b      	ldr	r3, [r7, #16]
 800ce0a:	685a      	ldr	r2, [r3, #4]
 800ce0c:	4b2e      	ldr	r3, [pc, #184]	@ (800cec8 <vPortFree+0xe0>)
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	4013      	ands	r3, r2
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d10b      	bne.n	800ce2e <vPortFree+0x46>
	__asm volatile
 800ce16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce1a:	f383 8811 	msr	BASEPRI, r3
 800ce1e:	f3bf 8f6f 	isb	sy
 800ce22:	f3bf 8f4f 	dsb	sy
 800ce26:	60fb      	str	r3, [r7, #12]
}
 800ce28:	bf00      	nop
 800ce2a:	bf00      	nop
 800ce2c:	e7fd      	b.n	800ce2a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ce2e:	693b      	ldr	r3, [r7, #16]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d00b      	beq.n	800ce4e <vPortFree+0x66>
	__asm volatile
 800ce36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce3a:	f383 8811 	msr	BASEPRI, r3
 800ce3e:	f3bf 8f6f 	isb	sy
 800ce42:	f3bf 8f4f 	dsb	sy
 800ce46:	60bb      	str	r3, [r7, #8]
}
 800ce48:	bf00      	nop
 800ce4a:	bf00      	nop
 800ce4c:	e7fd      	b.n	800ce4a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ce4e:	693b      	ldr	r3, [r7, #16]
 800ce50:	685a      	ldr	r2, [r3, #4]
 800ce52:	4b1d      	ldr	r3, [pc, #116]	@ (800cec8 <vPortFree+0xe0>)
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	4013      	ands	r3, r2
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d031      	beq.n	800cec0 <vPortFree+0xd8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ce5c:	693b      	ldr	r3, [r7, #16]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d12d      	bne.n	800cec0 <vPortFree+0xd8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ce64:	693b      	ldr	r3, [r7, #16]
 800ce66:	685a      	ldr	r2, [r3, #4]
 800ce68:	4b17      	ldr	r3, [pc, #92]	@ (800cec8 <vPortFree+0xe0>)
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	43db      	mvns	r3, r3
 800ce6e:	401a      	ands	r2, r3
 800ce70:	693b      	ldr	r3, [r7, #16]
 800ce72:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ce74:	f7fe fa98 	bl	800b3a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ce78:	693b      	ldr	r3, [r7, #16]
 800ce7a:	685a      	ldr	r2, [r3, #4]
 800ce7c:	4b13      	ldr	r3, [pc, #76]	@ (800cecc <vPortFree+0xe4>)
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	4413      	add	r3, r2
 800ce82:	4a12      	ldr	r2, [pc, #72]	@ (800cecc <vPortFree+0xe4>)
 800ce84:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
 800ce86:	4b12      	ldr	r3, [pc, #72]	@ (800ced0 <vPortFree+0xe8>)
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	f003 0301 	and.w	r3, r3, #1
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d00c      	beq.n	800ceac <vPortFree+0xc4>
 800ce92:	4b10      	ldr	r3, [pc, #64]	@ (800ced4 <vPortFree+0xec>)
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	685b      	ldr	r3, [r3, #4]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d007      	beq.n	800ceac <vPortFree+0xc4>
 800ce9c:	f001 ff6c 	bl	800ed78 <xTraceKernelPortGetSystemHeapHandle>
 800cea0:	693b      	ldr	r3, [r7, #16]
 800cea2:	685b      	ldr	r3, [r3, #4]
 800cea4:	461a      	mov	r2, r3
 800cea6:	6879      	ldr	r1, [r7, #4]
 800cea8:	f001 fe90 	bl	800ebcc <xTraceHeapFree>
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ceac:	6938      	ldr	r0, [r7, #16]
 800ceae:	f000 f877 	bl	800cfa0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ceb2:	4b09      	ldr	r3, [pc, #36]	@ (800ced8 <vPortFree+0xf0>)
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	3301      	adds	r3, #1
 800ceb8:	4a07      	ldr	r2, [pc, #28]	@ (800ced8 <vPortFree+0xf0>)
 800ceba:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cebc:	f7fe fa82 	bl	800b3c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cec0:	bf00      	nop
 800cec2:	3718      	adds	r7, #24
 800cec4:	46bd      	mov	sp, r7
 800cec6:	bd80      	pop	{r7, pc}
 800cec8:	20012d38 	.word	0x20012d38
 800cecc:	20012d28 	.word	0x20012d28
 800ced0:	20017418 	.word	0x20017418
 800ced4:	20017410 	.word	0x20017410
 800ced8:	20012d34 	.word	0x20012d34

0800cedc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cedc:	b480      	push	{r7}
 800cede:	b085      	sub	sp, #20
 800cee0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cee2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800cee6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cee8:	4b27      	ldr	r3, [pc, #156]	@ (800cf88 <prvHeapInit+0xac>)
 800ceea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	f003 0307 	and.w	r3, r3, #7
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d00c      	beq.n	800cf10 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	3307      	adds	r3, #7
 800cefa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	f023 0307 	bic.w	r3, r3, #7
 800cf02:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cf04:	68ba      	ldr	r2, [r7, #8]
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	1ad3      	subs	r3, r2, r3
 800cf0a:	4a1f      	ldr	r2, [pc, #124]	@ (800cf88 <prvHeapInit+0xac>)
 800cf0c:	4413      	add	r3, r2
 800cf0e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cf14:	4a1d      	ldr	r2, [pc, #116]	@ (800cf8c <prvHeapInit+0xb0>)
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cf1a:	4b1c      	ldr	r3, [pc, #112]	@ (800cf8c <prvHeapInit+0xb0>)
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	68ba      	ldr	r2, [r7, #8]
 800cf24:	4413      	add	r3, r2
 800cf26:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cf28:	2208      	movs	r2, #8
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	1a9b      	subs	r3, r3, r2
 800cf2e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	f023 0307 	bic.w	r3, r3, #7
 800cf36:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	4a15      	ldr	r2, [pc, #84]	@ (800cf90 <prvHeapInit+0xb4>)
 800cf3c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cf3e:	4b14      	ldr	r3, [pc, #80]	@ (800cf90 <prvHeapInit+0xb4>)
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	2200      	movs	r2, #0
 800cf44:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cf46:	4b12      	ldr	r3, [pc, #72]	@ (800cf90 <prvHeapInit+0xb4>)
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cf52:	683b      	ldr	r3, [r7, #0]
 800cf54:	68fa      	ldr	r2, [r7, #12]
 800cf56:	1ad2      	subs	r2, r2, r3
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cf5c:	4b0c      	ldr	r3, [pc, #48]	@ (800cf90 <prvHeapInit+0xb4>)
 800cf5e:	681a      	ldr	r2, [r3, #0]
 800cf60:	683b      	ldr	r3, [r7, #0]
 800cf62:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cf64:	683b      	ldr	r3, [r7, #0]
 800cf66:	685b      	ldr	r3, [r3, #4]
 800cf68:	4a0a      	ldr	r2, [pc, #40]	@ (800cf94 <prvHeapInit+0xb8>)
 800cf6a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cf6c:	683b      	ldr	r3, [r7, #0]
 800cf6e:	685b      	ldr	r3, [r3, #4]
 800cf70:	4a09      	ldr	r2, [pc, #36]	@ (800cf98 <prvHeapInit+0xbc>)
 800cf72:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cf74:	4b09      	ldr	r3, [pc, #36]	@ (800cf9c <prvHeapInit+0xc0>)
 800cf76:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800cf7a:	601a      	str	r2, [r3, #0]
}
 800cf7c:	bf00      	nop
 800cf7e:	3714      	adds	r7, #20
 800cf80:	46bd      	mov	sp, r7
 800cf82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf86:	4770      	bx	lr
 800cf88:	20002d1c 	.word	0x20002d1c
 800cf8c:	20012d1c 	.word	0x20012d1c
 800cf90:	20012d24 	.word	0x20012d24
 800cf94:	20012d2c 	.word	0x20012d2c
 800cf98:	20012d28 	.word	0x20012d28
 800cf9c:	20012d38 	.word	0x20012d38

0800cfa0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cfa0:	b480      	push	{r7}
 800cfa2:	b085      	sub	sp, #20
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cfa8:	4b28      	ldr	r3, [pc, #160]	@ (800d04c <prvInsertBlockIntoFreeList+0xac>)
 800cfaa:	60fb      	str	r3, [r7, #12]
 800cfac:	e002      	b.n	800cfb4 <prvInsertBlockIntoFreeList+0x14>
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	60fb      	str	r3, [r7, #12]
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	687a      	ldr	r2, [r7, #4]
 800cfba:	429a      	cmp	r2, r3
 800cfbc:	d8f7      	bhi.n	800cfae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	685b      	ldr	r3, [r3, #4]
 800cfc6:	68ba      	ldr	r2, [r7, #8]
 800cfc8:	4413      	add	r3, r2
 800cfca:	687a      	ldr	r2, [r7, #4]
 800cfcc:	429a      	cmp	r2, r3
 800cfce:	d108      	bne.n	800cfe2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	685a      	ldr	r2, [r3, #4]
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	685b      	ldr	r3, [r3, #4]
 800cfd8:	441a      	add	r2, r3
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	685b      	ldr	r3, [r3, #4]
 800cfea:	68ba      	ldr	r2, [r7, #8]
 800cfec:	441a      	add	r2, r3
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	429a      	cmp	r2, r3
 800cff4:	d118      	bne.n	800d028 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	681a      	ldr	r2, [r3, #0]
 800cffa:	4b15      	ldr	r3, [pc, #84]	@ (800d050 <prvInsertBlockIntoFreeList+0xb0>)
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	429a      	cmp	r2, r3
 800d000:	d00d      	beq.n	800d01e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	685a      	ldr	r2, [r3, #4]
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	685b      	ldr	r3, [r3, #4]
 800d00c:	441a      	add	r2, r3
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	681a      	ldr	r2, [r3, #0]
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	601a      	str	r2, [r3, #0]
 800d01c:	e008      	b.n	800d030 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d01e:	4b0c      	ldr	r3, [pc, #48]	@ (800d050 <prvInsertBlockIntoFreeList+0xb0>)
 800d020:	681a      	ldr	r2, [r3, #0]
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	601a      	str	r2, [r3, #0]
 800d026:	e003      	b.n	800d030 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	681a      	ldr	r2, [r3, #0]
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d030:	68fa      	ldr	r2, [r7, #12]
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	429a      	cmp	r2, r3
 800d036:	d002      	beq.n	800d03e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	687a      	ldr	r2, [r7, #4]
 800d03c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d03e:	bf00      	nop
 800d040:	3714      	adds	r7, #20
 800d042:	46bd      	mov	sp, r7
 800d044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d048:	4770      	bx	lr
 800d04a:	bf00      	nop
 800d04c:	20012d1c 	.word	0x20012d1c
 800d050:	20012d24 	.word	0x20012d24

0800d054 <xTraceStreamPortInitialize>:
RecorderData* RecorderDataPtr TRC_CFG_RECORDER_DATA_ATTRIBUTE; /*cstat !MISRAC2004-8.7 !MISRAC2004-8.10 !MISRAC2012-Rule-8.4 !MISRAC2012-Rule-8.7 !MISRAC2012-Rule-8.9_b Suppress global object check*/

TraceStreamPortData_t* pxStreamPortData TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceStreamPortInitialize(TraceStreamPortBuffer_t* pxBuffer)
{
 800d054:	b580      	push	{r7, lr}
 800d056:	b084      	sub	sp, #16
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
	TraceRingBuffer_t* pxRingBuffer;

	TRC_ASSERT_EQUAL_SIZE(TraceStreamPortBuffer_t, TraceStreamPortData_t);
	
	if (pxBuffer == (void*)0)
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d101      	bne.n	800d066 <xTraceStreamPortInitialize+0x12>
	{
		return TRC_FAIL;
 800d062:	2301      	movs	r3, #1
 800d064:	e0a9      	b.n	800d1ba <xTraceStreamPortInitialize+0x166>
	}

	pxStreamPortData = (TraceStreamPortData_t*)pxBuffer; /*cstat !MISRAC2004-11.4 !MISRAC2012-Rule-11.3 Suppress conversion between pointer types checks*/
 800d066:	4a57      	ldr	r2, [pc, #348]	@ (800d1c4 <xTraceStreamPortInitialize+0x170>)
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	6013      	str	r3, [r2, #0]
	pxRingBuffer = &pxStreamPortData->xRingBuffer;
 800d06c:	4b55      	ldr	r3, [pc, #340]	@ (800d1c4 <xTraceStreamPortInitialize+0x170>)
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	3304      	adds	r3, #4
 800d072:	60fb      	str	r3, [r7, #12]
	RecorderDataPtr = pxRingBuffer;
 800d074:	4a54      	ldr	r2, [pc, #336]	@ (800d1c8 <xTraceStreamPortInitialize+0x174>)
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	6013      	str	r3, [r2, #0]

	pxRingBuffer->xEventBuffer.uxSize = sizeof(pxRingBuffer->xEventBuffer.uiBuffer);
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800d080:	f8c3 2ad8 	str.w	r2, [r3, #2776]	@ 0xad8
	
#if (TRC_CFG_STREAM_PORT_RINGBUFFER_MODE == TRC_STREAM_PORT_RINGBUFFER_MODE_OVERWRITE_WHEN_FULL)
	if (xTraceMultiCoreEventBufferInitialize(&pxStreamPortData->xMultiCoreEventBuffer, TRC_EVENT_BUFFER_OPTION_OVERWRITE, pxRingBuffer->xEventBuffer.uiBuffer, sizeof(pxRingBuffer->xEventBuffer.uiBuffer)) == TRC_FAIL)
 800d084:	4b4f      	ldr	r3, [pc, #316]	@ (800d1c4 <xTraceStreamPortInitialize+0x170>)
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	4618      	mov	r0, r3
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	f603 22dc 	addw	r2, r3, #2780	@ 0xadc
 800d090:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800d094:	2101      	movs	r1, #1
 800d096:	f001 fe7b 	bl	800ed90 <xTraceMultiCoreEventBufferInitialize>
 800d09a:	4603      	mov	r3, r0
 800d09c:	2b01      	cmp	r3, #1
 800d09e:	d101      	bne.n	800d0a4 <xTraceStreamPortInitialize+0x50>
	{
		return TRC_FAIL;
 800d0a0:	2301      	movs	r3, #1
 800d0a2:	e08a      	b.n	800d1ba <xTraceStreamPortInitialize+0x166>
	{
		return TRC_FAIL;
	}
#endif

	if (xTraceHeaderInitialize(&pxRingBuffer->xHeaderBuffer) == TRC_FAIL)
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	3310      	adds	r3, #16
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	f002 fb3b 	bl	800f724 <xTraceHeaderInitialize>
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	2b01      	cmp	r3, #1
 800d0b2:	d101      	bne.n	800d0b8 <xTraceStreamPortInitialize+0x64>
	{
		return TRC_FAIL;
 800d0b4:	2301      	movs	r3, #1
 800d0b6:	e080      	b.n	800d1ba <xTraceStreamPortInitialize+0x166>
	}
	
	if (xTraceEntryTableInitialize(&pxRingBuffer->xEntryTable) == TRC_FAIL)
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	334c      	adds	r3, #76	@ 0x4c
 800d0bc:	4618      	mov	r0, r3
 800d0be:	f000 f971 	bl	800d3a4 <xTraceEntryTableInitialize>
 800d0c2:	4603      	mov	r3, r0
 800d0c4:	2b01      	cmp	r3, #1
 800d0c6:	d101      	bne.n	800d0cc <xTraceStreamPortInitialize+0x78>
	{
		return TRC_FAIL;
 800d0c8:	2301      	movs	r3, #1
 800d0ca:	e076      	b.n	800d1ba <xTraceStreamPortInitialize+0x166>
	}
	
	if (xTraceTimestampInitialize(&pxRingBuffer->xTimestampInfo) == TRC_FAIL)
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	3330      	adds	r3, #48	@ 0x30
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	f002 fdf7 	bl	800fcc4 <xTraceTimestampInitialize>
 800d0d6:	4603      	mov	r3, r0
 800d0d8:	2b01      	cmp	r3, #1
 800d0da:	d101      	bne.n	800d0e0 <xTraceStreamPortInitialize+0x8c>
	{
		return TRC_FAIL;
 800d0dc:	2301      	movs	r3, #1
 800d0de:	e06c      	b.n	800d1ba <xTraceStreamPortInitialize+0x166>
	}

	pxRingBuffer->END_MARKERS[0] = 0x0AU;
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800d0e6:	220a      	movs	r2, #10
 800d0e8:	f883 22dc 	strb.w	r2, [r3, #732]	@ 0x2dc
	pxRingBuffer->END_MARKERS[1] = 0x0BU;
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800d0f2:	220b      	movs	r2, #11
 800d0f4:	f883 22dd 	strb.w	r2, [r3, #733]	@ 0x2dd
	pxRingBuffer->END_MARKERS[2] = 0x0CU;
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800d0fe:	220c      	movs	r2, #12
 800d100:	f883 22de 	strb.w	r2, [r3, #734]	@ 0x2de
	pxRingBuffer->END_MARKERS[3] = 0x0DU;
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800d10a:	220d      	movs	r2, #13
 800d10c:	f883 22df 	strb.w	r2, [r3, #735]	@ 0x2df
	
	pxRingBuffer->END_MARKERS[4] = 0x71U;
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800d116:	2271      	movs	r2, #113	@ 0x71
 800d118:	f883 22e0 	strb.w	r2, [r3, #736]	@ 0x2e0
	pxRingBuffer->END_MARKERS[5] = 0x72U;
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800d122:	2272      	movs	r2, #114	@ 0x72
 800d124:	f883 22e1 	strb.w	r2, [r3, #737]	@ 0x2e1
	pxRingBuffer->END_MARKERS[6] = 0x73U;
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800d12e:	2273      	movs	r2, #115	@ 0x73
 800d130:	f883 22e2 	strb.w	r2, [r3, #738]	@ 0x2e2
	pxRingBuffer->END_MARKERS[7] = 0x74U;
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800d13a:	2274      	movs	r2, #116	@ 0x74
 800d13c:	f883 22e3 	strb.w	r2, [r3, #739]	@ 0x2e3
	
	pxRingBuffer->END_MARKERS[8] = 0xF1U;
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800d146:	22f1      	movs	r2, #241	@ 0xf1
 800d148:	f883 22e4 	strb.w	r2, [r3, #740]	@ 0x2e4
	pxRingBuffer->END_MARKERS[9] = 0xF2U;
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800d152:	22f2      	movs	r2, #242	@ 0xf2
 800d154:	f883 22e5 	strb.w	r2, [r3, #741]	@ 0x2e5
	pxRingBuffer->END_MARKERS[10] = 0xF3U;
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800d15e:	22f3      	movs	r2, #243	@ 0xf3
 800d160:	f883 22e6 	strb.w	r2, [r3, #742]	@ 0x2e6
	pxRingBuffer->END_MARKERS[11] = 0xF4U;
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800d16a:	22f4      	movs	r2, #244	@ 0xf4
 800d16c:	f883 22e7 	strb.w	r2, [r3, #743]	@ 0x2e7

	pxRingBuffer->START_MARKERS[0] = 0x05U;
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	2205      	movs	r2, #5
 800d174:	711a      	strb	r2, [r3, #4]
	pxRingBuffer->START_MARKERS[1] = 0x06U;
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	2206      	movs	r2, #6
 800d17a:	715a      	strb	r2, [r3, #5]
	pxRingBuffer->START_MARKERS[2] = 0x07U;
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	2207      	movs	r2, #7
 800d180:	719a      	strb	r2, [r3, #6]
	pxRingBuffer->START_MARKERS[3] = 0x08U;
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	2208      	movs	r2, #8
 800d186:	71da      	strb	r2, [r3, #7]
	
	pxRingBuffer->START_MARKERS[4] = 0x75U;
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	2275      	movs	r2, #117	@ 0x75
 800d18c:	721a      	strb	r2, [r3, #8]
	pxRingBuffer->START_MARKERS[5] = 0x76U;
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	2276      	movs	r2, #118	@ 0x76
 800d192:	725a      	strb	r2, [r3, #9]
	pxRingBuffer->START_MARKERS[6] = 0x77U;
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	2277      	movs	r2, #119	@ 0x77
 800d198:	729a      	strb	r2, [r3, #10]
	pxRingBuffer->START_MARKERS[7] = 0x78U;
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	2278      	movs	r2, #120	@ 0x78
 800d19e:	72da      	strb	r2, [r3, #11]
	
	pxRingBuffer->START_MARKERS[8] = 0xF5U;
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	22f5      	movs	r2, #245	@ 0xf5
 800d1a4:	731a      	strb	r2, [r3, #12]
	pxRingBuffer->START_MARKERS[9] = 0xF6U;
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	22f6      	movs	r2, #246	@ 0xf6
 800d1aa:	735a      	strb	r2, [r3, #13]
	pxRingBuffer->START_MARKERS[10] = 0xF7U;
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	22f7      	movs	r2, #247	@ 0xf7
 800d1b0:	739a      	strb	r2, [r3, #14]
	pxRingBuffer->START_MARKERS[11] = 0xF8U;
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	22f8      	movs	r2, #248	@ 0xf8
 800d1b6:	73da      	strb	r2, [r3, #15]
	
	return TRC_SUCCESS;
 800d1b8:	2300      	movs	r3, #0
}
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	3710      	adds	r7, #16
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	bd80      	pop	{r7, pc}
 800d1c2:	bf00      	nop
 800d1c4:	20012d40 	.word	0x20012d40
 800d1c8:	20012d3c 	.word	0x20012d3c

0800d1cc <xTraceStreamPortOnTraceBegin>:

traceResult xTraceStreamPortOnTraceBegin(void)
{
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	af00      	add	r7, sp, #0
	return xTraceMultiCoreEventBufferClear(&pxStreamPortData->xMultiCoreEventBuffer);
 800d1d0:	4b03      	ldr	r3, [pc, #12]	@ (800d1e0 <xTraceStreamPortOnTraceBegin+0x14>)
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	f001 fe13 	bl	800ee00 <xTraceMultiCoreEventBufferClear>
 800d1da:	4603      	mov	r3, r0
}
 800d1dc:	4618      	mov	r0, r3
 800d1de:	bd80      	pop	{r7, pc}
 800d1e0:	20012d40 	.word	0x20012d40

0800d1e4 <xTraceCounterInitialize>:
#if (TRC_USE_TRACEALYZER_RECORDER == 1) && (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

static TraceCounterData_t *pxCounterData TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceCounterInitialize(TraceCounterData_t *pxBuffer)
{
 800d1e4:	b480      	push	{r7}
 800d1e6:	b083      	sub	sp, #12
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
	TRC_ASSERT(pxBuffer != (void*)0);

	pxCounterData = pxBuffer;
 800d1ec:	4a09      	ldr	r2, [pc, #36]	@ (800d214 <xTraceCounterInitialize+0x30>)
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	6013      	str	r3, [r2, #0]
	
	pxCounterData->xCallbackFunction = 0;
 800d1f2:	4b08      	ldr	r3, [pc, #32]	@ (800d214 <xTraceCounterInitialize+0x30>)
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	601a      	str	r2, [r3, #0]
	
	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_COUNTER);
 800d1fa:	4b07      	ldr	r3, [pc, #28]	@ (800d218 <xTraceCounterInitialize+0x34>)
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800d202:	4a05      	ldr	r2, [pc, #20]	@ (800d218 <xTraceCounterInitialize+0x34>)
 800d204:	6013      	str	r3, [r2, #0]
	
	return TRC_SUCCESS;
 800d206:	2300      	movs	r3, #0
}
 800d208:	4618      	mov	r0, r3
 800d20a:	370c      	adds	r7, #12
 800d20c:	46bd      	mov	sp, r7
 800d20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d212:	4770      	bx	lr
 800d214:	20012d44 	.word	0x20012d44
 800d218:	20017418 	.word	0x20017418

0800d21c <xTraceDiagnosticsInitialize>:
#if (TRC_USE_TRACEALYZER_RECORDER == 1) && (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

static TraceDiagnosticsData_t *pxDiagnostics TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceDiagnosticsInitialize(TraceDiagnosticsData_t *pxBuffer)
{
 800d21c:	b480      	push	{r7}
 800d21e:	b085      	sub	sp, #20
 800d220:	af00      	add	r7, sp, #0
 800d222:	6078      	str	r0, [r7, #4]
	uint32_t i;
	
	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxDiagnostics = pxBuffer;
 800d224:	4a0f      	ldr	r2, [pc, #60]	@ (800d264 <xTraceDiagnosticsInitialize+0x48>)
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	6013      	str	r3, [r2, #0]

	for (i = 0u; i < (TRC_DIAGNOSTICS_COUNT); i++)
 800d22a:	2300      	movs	r3, #0
 800d22c:	60fb      	str	r3, [r7, #12]
 800d22e:	e008      	b.n	800d242 <xTraceDiagnosticsInitialize+0x26>
	{
		pxDiagnostics->metrics[i] = 0;
 800d230:	4b0c      	ldr	r3, [pc, #48]	@ (800d264 <xTraceDiagnosticsInitialize+0x48>)
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	68fa      	ldr	r2, [r7, #12]
 800d236:	2100      	movs	r1, #0
 800d238:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0u; i < (TRC_DIAGNOSTICS_COUNT); i++)
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	3301      	adds	r3, #1
 800d240:	60fb      	str	r3, [r7, #12]
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	2b04      	cmp	r3, #4
 800d246:	d9f3      	bls.n	800d230 <xTraceDiagnosticsInitialize+0x14>
	}

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_DIAGNOSTICS);
 800d248:	4b07      	ldr	r3, [pc, #28]	@ (800d268 <xTraceDiagnosticsInitialize+0x4c>)
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	f043 0308 	orr.w	r3, r3, #8
 800d250:	4a05      	ldr	r2, [pc, #20]	@ (800d268 <xTraceDiagnosticsInitialize+0x4c>)
 800d252:	6013      	str	r3, [r2, #0]

	return TRC_SUCCESS;
 800d254:	2300      	movs	r3, #0
}
 800d256:	4618      	mov	r0, r3
 800d258:	3714      	adds	r7, #20
 800d25a:	46bd      	mov	sp, r7
 800d25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d260:	4770      	bx	lr
 800d262:	bf00      	nop
 800d264:	20012d48 	.word	0x20012d48
 800d268:	20017418 	.word	0x20017418

0800d26c <xTraceDiagnosticsAdd>:

	return TRC_SUCCESS;
}

traceResult xTraceDiagnosticsAdd(TraceDiagnosticsType_t xType, TraceBaseType_t xValue)
{
 800d26c:	b480      	push	{r7}
 800d26e:	b083      	sub	sp, #12
 800d270:	af00      	add	r7, sp, #0
 800d272:	4603      	mov	r3, r0
 800d274:	6039      	str	r1, [r7, #0]
 800d276:	71fb      	strb	r3, [r7, #7]
	TRC_ASSERT(xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_DIAGNOSTICS));

	/* This should never fail */
	TRC_ASSERT((TraceUnsignedBaseType_t)xType < TRC_DIAGNOSTICS_COUNT);

	pxDiagnostics->metrics[(TraceUnsignedBaseType_t)xType] += xValue;
 800d278:	4b09      	ldr	r3, [pc, #36]	@ (800d2a0 <xTraceDiagnosticsAdd+0x34>)
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	79fa      	ldrb	r2, [r7, #7]
 800d27e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800d282:	4b07      	ldr	r3, [pc, #28]	@ (800d2a0 <xTraceDiagnosticsAdd+0x34>)
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	79fa      	ldrb	r2, [r7, #7]
 800d288:	6839      	ldr	r1, [r7, #0]
 800d28a:	4401      	add	r1, r0
 800d28c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	return TRC_SUCCESS;
 800d290:	2300      	movs	r3, #0
}
 800d292:	4618      	mov	r0, r3
 800d294:	370c      	adds	r7, #12
 800d296:	46bd      	mov	sp, r7
 800d298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29c:	4770      	bx	lr
 800d29e:	bf00      	nop
 800d2a0:	20012d48 	.word	0x20012d48

0800d2a4 <xTraceDiagnosticsIncrease>:

traceResult xTraceDiagnosticsIncrease(TraceDiagnosticsType_t xType)
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b082      	sub	sp, #8
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	4603      	mov	r3, r0
 800d2ac:	71fb      	strb	r3, [r7, #7]
	return xTraceDiagnosticsAdd(xType, 1);
 800d2ae:	79fb      	ldrb	r3, [r7, #7]
 800d2b0:	2101      	movs	r1, #1
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	f7ff ffda 	bl	800d26c <xTraceDiagnosticsAdd>
 800d2b8:	4603      	mov	r3, r0
}
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	3708      	adds	r7, #8
 800d2be:	46bd      	mov	sp, r7
 800d2c0:	bd80      	pop	{r7, pc}
	...

0800d2c4 <xTraceDiagnosticsSetIfHigher>:
{
	return xTraceDiagnosticsAdd(xType, -1);
}

traceResult xTraceDiagnosticsSetIfHigher(TraceDiagnosticsType_t xType, TraceBaseType_t xValue)
{
 800d2c4:	b480      	push	{r7}
 800d2c6:	b083      	sub	sp, #12
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	6039      	str	r1, [r7, #0]
 800d2ce:	71fb      	strb	r3, [r7, #7]
	TRC_ASSERT(xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_DIAGNOSTICS));

	/* This should never fail */
	TRC_ASSERT((TraceUnsignedBaseType_t)xType < TRC_DIAGNOSTICS_COUNT);

	if (xValue > pxDiagnostics->metrics[xType])
 800d2d0:	4b0a      	ldr	r3, [pc, #40]	@ (800d2fc <xTraceDiagnosticsSetIfHigher+0x38>)
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	79fa      	ldrb	r2, [r7, #7]
 800d2d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2da:	683a      	ldr	r2, [r7, #0]
 800d2dc:	429a      	cmp	r2, r3
 800d2de:	dd05      	ble.n	800d2ec <xTraceDiagnosticsSetIfHigher+0x28>
	{
		pxDiagnostics->metrics[(TraceUnsignedBaseType_t)xType] = xValue;
 800d2e0:	4b06      	ldr	r3, [pc, #24]	@ (800d2fc <xTraceDiagnosticsSetIfHigher+0x38>)
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	79fa      	ldrb	r2, [r7, #7]
 800d2e6:	6839      	ldr	r1, [r7, #0]
 800d2e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

	return TRC_SUCCESS;
 800d2ec:	2300      	movs	r3, #0
}
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	370c      	adds	r7, #12
 800d2f2:	46bd      	mov	sp, r7
 800d2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f8:	4770      	bx	lr
 800d2fa:	bf00      	nop
 800d2fc:	20012d48 	.word	0x20012d48

0800d300 <xTraceDiagnosticsCheckStatus>:

	return TRC_SUCCESS;
}

traceResult xTraceDiagnosticsCheckStatus(void)
{
 800d300:	b580      	push	{r7, lr}
 800d302:	af00      	add	r7, sp, #0
	/* It is probably good if we always check this */
	if (xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_DIAGNOSTICS) == 0U)
 800d304:	4b1d      	ldr	r3, [pc, #116]	@ (800d37c <xTraceDiagnosticsCheckStatus+0x7c>)
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	f003 0308 	and.w	r3, r3, #8
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d101      	bne.n	800d314 <xTraceDiagnosticsCheckStatus+0x14>
	{
		return TRC_FAIL;
 800d310:	2301      	movs	r3, #1
 800d312:	e030      	b.n	800d376 <xTraceDiagnosticsCheckStatus+0x76>
	}

	if (pxDiagnostics->metrics[TRC_DIAGNOSTICS_ENTRY_SLOTS_NO_ROOM] > 0)
 800d314:	4b1a      	ldr	r3, [pc, #104]	@ (800d380 <xTraceDiagnosticsCheckStatus+0x80>)
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	685b      	ldr	r3, [r3, #4]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	dd06      	ble.n	800d32c <xTraceDiagnosticsCheckStatus+0x2c>
	{
		(void)xTraceWarning(TRC_WARNING_ENTRY_TABLE_SLOTS);
 800d31e:	2008      	movs	r0, #8
 800d320:	f000 fa0e 	bl	800d740 <xTraceWarning>
		pxDiagnostics->metrics[TRC_DIAGNOSTICS_ENTRY_SLOTS_NO_ROOM] = 0;
 800d324:	4b16      	ldr	r3, [pc, #88]	@ (800d380 <xTraceDiagnosticsCheckStatus+0x80>)
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	2200      	movs	r2, #0
 800d32a:	605a      	str	r2, [r3, #4]
	}

	if (pxDiagnostics->metrics[TRC_DIAGNOSTICS_ENTRY_SYMBOL_LONGEST_LENGTH] > (TRC_CFG_ENTRY_SYMBOL_MAX_LENGTH))
 800d32c:	4b14      	ldr	r3, [pc, #80]	@ (800d380 <xTraceDiagnosticsCheckStatus+0x80>)
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	2b1c      	cmp	r3, #28
 800d334:	dd06      	ble.n	800d344 <xTraceDiagnosticsCheckStatus+0x44>
	{
		(void)xTraceWarning(TRC_WARNING_ENTRY_SYMBOL_MAX_LENGTH);
 800d336:	2009      	movs	r0, #9
 800d338:	f000 fa02 	bl	800d740 <xTraceWarning>
		pxDiagnostics->metrics[TRC_DIAGNOSTICS_ENTRY_SYMBOL_LONGEST_LENGTH] = 0;
 800d33c:	4b10      	ldr	r3, [pc, #64]	@ (800d380 <xTraceDiagnosticsCheckStatus+0x80>)
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	2200      	movs	r2, #0
 800d342:	601a      	str	r2, [r3, #0]
	}

	if (pxDiagnostics->metrics[TRC_DIAGNOSTICS_BLOB_MAX_BYTES_TRUNCATED] > 0)
 800d344:	4b0e      	ldr	r3, [pc, #56]	@ (800d380 <xTraceDiagnosticsCheckStatus+0x80>)
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	689b      	ldr	r3, [r3, #8]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	dd06      	ble.n	800d35c <xTraceDiagnosticsCheckStatus+0x5c>
	{
		(void)xTraceWarning(TRC_WARNING_EVENT_SIZE_TRUNCATED);
 800d34e:	200a      	movs	r0, #10
 800d350:	f000 f9f6 	bl	800d740 <xTraceWarning>
		pxDiagnostics->metrics[TRC_DIAGNOSTICS_BLOB_MAX_BYTES_TRUNCATED] = 0;
 800d354:	4b0a      	ldr	r3, [pc, #40]	@ (800d380 <xTraceDiagnosticsCheckStatus+0x80>)
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	2200      	movs	r2, #0
 800d35a:	609a      	str	r2, [r3, #8]
	}

	if (pxDiagnostics->metrics[TRC_DIAGNOSTICS_STACK_MONITOR_NO_SLOTS] > 0)
 800d35c:	4b08      	ldr	r3, [pc, #32]	@ (800d380 <xTraceDiagnosticsCheckStatus+0x80>)
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	68db      	ldr	r3, [r3, #12]
 800d362:	2b00      	cmp	r3, #0
 800d364:	dd06      	ble.n	800d374 <xTraceDiagnosticsCheckStatus+0x74>
	{
		(void)xTraceWarning(TRC_WARNING_STACKMON_NO_SLOTS);
 800d366:	200e      	movs	r0, #14
 800d368:	f000 f9ea 	bl	800d740 <xTraceWarning>
		pxDiagnostics->metrics[TRC_DIAGNOSTICS_STACK_MONITOR_NO_SLOTS] = 0;
 800d36c:	4b04      	ldr	r3, [pc, #16]	@ (800d380 <xTraceDiagnosticsCheckStatus+0x80>)
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	2200      	movs	r2, #0
 800d372:	60da      	str	r2, [r3, #12]
	}

	return TRC_SUCCESS;
 800d374:	2300      	movs	r3, #0
}
 800d376:	4618      	mov	r0, r3
 800d378:	bd80      	pop	{r7, pc}
 800d37a:	bf00      	nop
 800d37c:	20017418 	.word	0x20017418
 800d380:	20012d48 	.word	0x20012d48

0800d384 <xTraceEntryIndexTableInitialize>:
/* Variables */
static TraceEntryTable_t *pxEntryTable TRC_CFG_RECORDER_DATA_ATTRIBUTE;
static TraceEntryIndexTable_t *pxIndexTable TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceEntryIndexTableInitialize(TraceEntryIndexTable_t* const pxBuffer)
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b082      	sub	sp, #8
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxIndexTable = pxBuffer;
 800d38c:	4a04      	ldr	r2, [pc, #16]	@ (800d3a0 <xTraceEntryIndexTableInitialize+0x1c>)
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	6013      	str	r3, [r2, #0]
	
	return prvEntryIndexInitialize();
 800d392:	f000 f95f 	bl	800d654 <prvEntryIndexInitialize>
 800d396:	4603      	mov	r3, r0
}
 800d398:	4618      	mov	r0, r3
 800d39a:	3708      	adds	r7, #8
 800d39c:	46bd      	mov	sp, r7
 800d39e:	bd80      	pop	{r7, pc}
 800d3a0:	20012d50 	.word	0x20012d50

0800d3a4 <xTraceEntryTableInitialize>:

traceResult xTraceEntryTableInitialize(TraceEntryTable_t* const pxBuffer)
{
 800d3a4:	b480      	push	{r7}
 800d3a6:	b085      	sub	sp, #20
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
	TRC_ASSERT(pxBuffer != (void*)0);

	/* This should never fail */
	TRC_ASSERT((TRC_ENTRY_TABLE_SLOTS) != 0);

	pxEntryTable = pxBuffer;
 800d3ac:	4a28      	ldr	r2, [pc, #160]	@ (800d450 <xTraceEntryTableInitialize+0xac>)
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	6013      	str	r3, [r2, #0]

	pxEntryTable->uxSlots = (TraceUnsignedBaseType_t)(TRC_ENTRY_TABLE_SLOTS);
 800d3b2:	4b27      	ldr	r3, [pc, #156]	@ (800d450 <xTraceEntryTableInitialize+0xac>)
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	2238      	movs	r2, #56	@ 0x38
 800d3b8:	601a      	str	r2, [r3, #0]
	pxEntryTable->uxEntrySymbolLength = (TraceUnsignedBaseType_t)(TRC_ENTRY_TABLE_SLOT_SYMBOL_SIZE);
 800d3ba:	4b25      	ldr	r3, [pc, #148]	@ (800d450 <xTraceEntryTableInitialize+0xac>)
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	221c      	movs	r2, #28
 800d3c0:	605a      	str	r2, [r3, #4]
	pxEntryTable->uxEntryStateCount = (TraceUnsignedBaseType_t)(TRC_ENTRY_TABLE_STATE_COUNT);
 800d3c2:	4b23      	ldr	r3, [pc, #140]	@ (800d450 <xTraceEntryTableInitialize+0xac>)
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	2203      	movs	r2, #3
 800d3c8:	609a      	str	r2, [r3, #8]

	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_SLOTS); i++)
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	60fb      	str	r3, [r7, #12]
 800d3ce:	e02f      	b.n	800d430 <xTraceEntryTableInitialize+0x8c>
	{
		pxEntryTable->axEntries[i].pvAddress = 0;
 800d3d0:	4b1f      	ldr	r3, [pc, #124]	@ (800d450 <xTraceEntryTableInitialize+0xac>)
 800d3d2:	6819      	ldr	r1, [r3, #0]
 800d3d4:	68fa      	ldr	r2, [r7, #12]
 800d3d6:	4613      	mov	r3, r2
 800d3d8:	005b      	lsls	r3, r3, #1
 800d3da:	4413      	add	r3, r2
 800d3dc:	011b      	lsls	r3, r3, #4
 800d3de:	440b      	add	r3, r1
 800d3e0:	330c      	adds	r3, #12
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	601a      	str	r2, [r3, #0]
		for (j = 0u; j < TRC_ENTRY_TABLE_STATE_COUNT; j++)
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	60bb      	str	r3, [r7, #8]
 800d3ea:	e010      	b.n	800d40e <xTraceEntryTableInitialize+0x6a>
		{
			pxEntryTable->axEntries[i].xStates[j] = (TraceUnsignedBaseType_t)0;
 800d3ec:	4b18      	ldr	r3, [pc, #96]	@ (800d450 <xTraceEntryTableInitialize+0xac>)
 800d3ee:	6819      	ldr	r1, [r3, #0]
 800d3f0:	68fa      	ldr	r2, [r7, #12]
 800d3f2:	4613      	mov	r3, r2
 800d3f4:	005b      	lsls	r3, r3, #1
 800d3f6:	4413      	add	r3, r2
 800d3f8:	009b      	lsls	r3, r3, #2
 800d3fa:	68ba      	ldr	r2, [r7, #8]
 800d3fc:	4413      	add	r3, r2
 800d3fe:	3302      	adds	r3, #2
 800d400:	009b      	lsls	r3, r3, #2
 800d402:	440b      	add	r3, r1
 800d404:	2200      	movs	r2, #0
 800d406:	609a      	str	r2, [r3, #8]
		for (j = 0u; j < TRC_ENTRY_TABLE_STATE_COUNT; j++)
 800d408:	68bb      	ldr	r3, [r7, #8]
 800d40a:	3301      	adds	r3, #1
 800d40c:	60bb      	str	r3, [r7, #8]
 800d40e:	68bb      	ldr	r3, [r7, #8]
 800d410:	2b02      	cmp	r3, #2
 800d412:	d9eb      	bls.n	800d3ec <xTraceEntryTableInitialize+0x48>
		}
		pxEntryTable->axEntries[i].szSymbol[0] = (char)0; /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 800d414:	4b0e      	ldr	r3, [pc, #56]	@ (800d450 <xTraceEntryTableInitialize+0xac>)
 800d416:	6819      	ldr	r1, [r3, #0]
 800d418:	68fa      	ldr	r2, [r7, #12]
 800d41a:	4613      	mov	r3, r2
 800d41c:	005b      	lsls	r3, r3, #1
 800d41e:	4413      	add	r3, r2
 800d420:	011b      	lsls	r3, r3, #4
 800d422:	440b      	add	r3, r1
 800d424:	3320      	adds	r3, #32
 800d426:	2200      	movs	r2, #0
 800d428:	701a      	strb	r2, [r3, #0]
	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_SLOTS); i++)
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	3301      	adds	r3, #1
 800d42e:	60fb      	str	r3, [r7, #12]
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	2b37      	cmp	r3, #55	@ 0x37
 800d434:	d9cc      	bls.n	800d3d0 <xTraceEntryTableInitialize+0x2c>
	}

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_ENTRY);
 800d436:	4b07      	ldr	r3, [pc, #28]	@ (800d454 <xTraceEntryTableInitialize+0xb0>)
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	f043 0310 	orr.w	r3, r3, #16
 800d43e:	4a05      	ldr	r2, [pc, #20]	@ (800d454 <xTraceEntryTableInitialize+0xb0>)
 800d440:	6013      	str	r3, [r2, #0]

	return TRC_SUCCESS;
 800d442:	2300      	movs	r3, #0
}
 800d444:	4618      	mov	r0, r3
 800d446:	3714      	adds	r7, #20
 800d448:	46bd      	mov	sp, r7
 800d44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44e:	4770      	bx	lr
 800d450:	20012d4c 	.word	0x20012d4c
 800d454:	20017418 	.word	0x20017418

0800d458 <xTraceEntryCreate>:

traceResult xTraceEntryCreate(TraceEntryHandle_t *pxEntryHandle)
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b08a      	sub	sp, #40	@ 0x28
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
	TraceEntry_t *pxEntry;

	TRACE_ALLOC_CRITICAL_SECTION();

	/* We always check this */
	if (xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_ENTRY) == 0U)
 800d460:	4b2b      	ldr	r3, [pc, #172]	@ (800d510 <xTraceEntryCreate+0xb8>)
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	f003 0310 	and.w	r3, r3, #16
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d101      	bne.n	800d470 <xTraceEntryCreate+0x18>
	{
		return TRC_FAIL;
 800d46c:	2301      	movs	r3, #1
 800d46e:	e04b      	b.n	800d508 <xTraceEntryCreate+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d470:	f3ef 8310 	mrs	r3, PRIMASK
 800d474:	617b      	str	r3, [r7, #20]
  return(result);
 800d476:	697b      	ldr	r3, [r7, #20]
	}

	/* This should never fail */
	TRC_ASSERT(pxEntryHandle != (void*)0);

	TRACE_ENTER_CRITICAL_SECTION();
 800d478:	623b      	str	r3, [r7, #32]
 800d47a:	2301      	movs	r3, #1
 800d47c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d47e:	69bb      	ldr	r3, [r7, #24]
 800d480:	f383 8810 	msr	PRIMASK, r3
}
 800d484:	bf00      	nop

	if (prvEntryIndexTake(&xIndex) != TRC_SUCCESS)
 800d486:	f107 030b 	add.w	r3, r7, #11
 800d48a:	4618      	mov	r0, r3
 800d48c:	f000 f904 	bl	800d698 <prvEntryIndexTake>
 800d490:	4603      	mov	r3, r0
 800d492:	2b00      	cmp	r3, #0
 800d494:	d00a      	beq.n	800d4ac <xTraceEntryCreate+0x54>
	{
		(void)xTraceDiagnosticsIncrease(TRC_DIAGNOSTICS_ENTRY_SLOTS_NO_ROOM);
 800d496:	2001      	movs	r0, #1
 800d498:	f7ff ff04 	bl	800d2a4 <xTraceDiagnosticsIncrease>
 800d49c:	6a3b      	ldr	r3, [r7, #32]
 800d49e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d4a0:	693b      	ldr	r3, [r7, #16]
 800d4a2:	f383 8810 	msr	PRIMASK, r3
}
 800d4a6:	bf00      	nop

		TRACE_EXIT_CRITICAL_SECTION();

		return TRC_FAIL;
 800d4a8:	2301      	movs	r3, #1
 800d4aa:	e02d      	b.n	800d508 <xTraceEntryCreate+0xb0>
	}

	pxEntry = &pxEntryTable->axEntries[xIndex];
 800d4ac:	4b19      	ldr	r3, [pc, #100]	@ (800d514 <xTraceEntryCreate+0xbc>)
 800d4ae:	681a      	ldr	r2, [r3, #0]
 800d4b0:	7afb      	ldrb	r3, [r7, #11]
 800d4b2:	4619      	mov	r1, r3
 800d4b4:	460b      	mov	r3, r1
 800d4b6:	005b      	lsls	r3, r3, #1
 800d4b8:	440b      	add	r3, r1
 800d4ba:	011b      	lsls	r3, r3, #4
 800d4bc:	3308      	adds	r3, #8
 800d4be:	4413      	add	r3, r2
 800d4c0:	3304      	adds	r3, #4
 800d4c2:	61fb      	str	r3, [r7, #28]
	
	pxEntry->pvAddress = (void*)pxEntry; /* We set a temporary address */
 800d4c4:	69fb      	ldr	r3, [r7, #28]
 800d4c6:	69fa      	ldr	r2, [r7, #28]
 800d4c8:	601a      	str	r2, [r3, #0]

	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_STATE_COUNT); i++)
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	627b      	str	r3, [r7, #36]	@ 0x24
 800d4ce:	e008      	b.n	800d4e2 <xTraceEntryCreate+0x8a>
	{
		pxEntry->xStates[i] = (TraceUnsignedBaseType_t)0;
 800d4d0:	69fa      	ldr	r2, [r7, #28]
 800d4d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4d4:	009b      	lsls	r3, r3, #2
 800d4d6:	4413      	add	r3, r2
 800d4d8:	2200      	movs	r2, #0
 800d4da:	605a      	str	r2, [r3, #4]
	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_STATE_COUNT); i++)
 800d4dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4de:	3301      	adds	r3, #1
 800d4e0:	627b      	str	r3, [r7, #36]	@ 0x24
 800d4e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4e4:	2b02      	cmp	r3, #2
 800d4e6:	d9f3      	bls.n	800d4d0 <xTraceEntryCreate+0x78>
	}

	pxEntry->uiOptions = 0u;
 800d4e8:	69fb      	ldr	r3, [r7, #28]
 800d4ea:	2200      	movs	r2, #0
 800d4ec:	611a      	str	r2, [r3, #16]
	pxEntry->szSymbol[0] = (char)0; /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 800d4ee:	69fb      	ldr	r3, [r7, #28]
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	751a      	strb	r2, [r3, #20]

	*pxEntryHandle = (TraceEntryHandle_t)pxEntry;
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	69fa      	ldr	r2, [r7, #28]
 800d4f8:	601a      	str	r2, [r3, #0]
 800d4fa:	6a3b      	ldr	r3, [r7, #32]
 800d4fc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	f383 8810 	msr	PRIMASK, r3
}
 800d504:	bf00      	nop

	TRACE_EXIT_CRITICAL_SECTION();

	return TRC_SUCCESS;
 800d506:	2300      	movs	r3, #0
}
 800d508:	4618      	mov	r0, r3
 800d50a:	3728      	adds	r7, #40	@ 0x28
 800d50c:	46bd      	mov	sp, r7
 800d50e:	bd80      	pop	{r7, pc}
 800d510:	20017418 	.word	0x20017418
 800d514:	20012d4c 	.word	0x20012d4c

0800d518 <xTraceEntryDelete>:

traceResult xTraceEntryDelete(TraceEntryHandle_t xEntryHandle)
{
 800d518:	b480      	push	{r7}
 800d51a:	b089      	sub	sp, #36	@ 0x24
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
	TRC_ASSERT(VALIDATE_ENTRY_HANDLE(xEntryHandle)); /*cstat !MISRAC2004-17.3 !MISRAC2012-Rule-18.3 Suppress pointer comparison check*/

	/* Calculate the index based on the entry address */
	/* Does not need to be locked. */
	/* This should never fail */
	xIndex = CALCULATE_ENTRY_INDEX(xEntryHandle); /*cstat !MISRAC2004-11.3 !MISRAC2012-Rule-11.4 Suppress conversion from pointer to integer check*/ /*cstat !MISRAC2004-17.2 !MISRAC2012-Rule-18.2 !MISRAC2012-Rule-18.4 Suppress pointer comparison check*/
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	4a1e      	ldr	r2, [pc, #120]	@ (800d59c <xTraceEntryDelete+0x84>)
 800d524:	6812      	ldr	r2, [r2, #0]
 800d526:	320c      	adds	r2, #12
 800d528:	1a9b      	subs	r3, r3, r2
 800d52a:	4a1d      	ldr	r2, [pc, #116]	@ (800d5a0 <xTraceEntryDelete+0x88>)
 800d52c:	fba2 2303 	umull	r2, r3, r2, r3
 800d530:	095b      	lsrs	r3, r3, #5
 800d532:	77fb      	strb	r3, [r7, #31]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d534:	f3ef 8310 	mrs	r3, PRIMASK
 800d538:	613b      	str	r3, [r7, #16]
  return(result);
 800d53a:	693b      	ldr	r3, [r7, #16]

	TRC_ASSERT((uint32_t)xIndex < (uint32_t)(TRC_ENTRY_TABLE_SLOTS));

	TRACE_ENTER_CRITICAL_SECTION();
 800d53c:	61bb      	str	r3, [r7, #24]
 800d53e:	2301      	movs	r3, #1
 800d540:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d542:	697b      	ldr	r3, [r7, #20]
 800d544:	f383 8810 	msr	PRIMASK, r3
}
 800d548:	bf00      	nop

	if (((TraceEntry_t*)xEntryHandle)->pvAddress == 0)
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d107      	bne.n	800d562 <xTraceEntryDelete+0x4a>
 800d552:	69bb      	ldr	r3, [r7, #24]
 800d554:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	f383 8810 	msr	PRIMASK, r3
}
 800d55c:	bf00      	nop
	{
		/* Someone else has deleted this already? */
		TRACE_EXIT_CRITICAL_SECTION();

		return TRC_FAIL;
 800d55e:	2301      	movs	r3, #1
 800d560:	e015      	b.n	800d58e <xTraceEntryDelete+0x76>
	}

	/* A valid address, so we assume it is OK. */
	/* We clear the address field which is used on host to see if entries are active. */
	((TraceEntry_t*)xEntryHandle)->pvAddress = 0;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	2200      	movs	r2, #0
 800d566:	601a      	str	r2, [r3, #0]

	/* Give back the index */
	GIVE_ENTRY_INDEX(xIndex);
 800d568:	4b0e      	ldr	r3, [pc, #56]	@ (800d5a4 <xTraceEntryDelete+0x8c>)
 800d56a:	681a      	ldr	r2, [r3, #0]
 800d56c:	4b0d      	ldr	r3, [pc, #52]	@ (800d5a4 <xTraceEntryDelete+0x8c>)
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d572:	7ff9      	ldrb	r1, [r7, #31]
 800d574:	54d1      	strb	r1, [r2, r3]
 800d576:	4b0b      	ldr	r3, [pc, #44]	@ (800d5a4 <xTraceEntryDelete+0x8c>)
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d57c:	3201      	adds	r2, #1
 800d57e:	639a      	str	r2, [r3, #56]	@ 0x38
 800d580:	69bb      	ldr	r3, [r7, #24]
 800d582:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d584:	68bb      	ldr	r3, [r7, #8]
 800d586:	f383 8810 	msr	PRIMASK, r3
}
 800d58a:	bf00      	nop

	TRACE_EXIT_CRITICAL_SECTION();

	return TRC_SUCCESS;
 800d58c:	2300      	movs	r3, #0
}
 800d58e:	4618      	mov	r0, r3
 800d590:	3724      	adds	r7, #36	@ 0x24
 800d592:	46bd      	mov	sp, r7
 800d594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d598:	4770      	bx	lr
 800d59a:	bf00      	nop
 800d59c:	20012d4c 	.word	0x20012d4c
 800d5a0:	aaaaaaab 	.word	0xaaaaaaab
 800d5a4:	20012d50 	.word	0x20012d50

0800d5a8 <xTraceEntryFind>:

traceResult xTraceEntryFind(const void* const pvAddress, TraceEntryHandle_t* pxEntryHandle)
{
 800d5a8:	b480      	push	{r7}
 800d5aa:	b085      	sub	sp, #20
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
 800d5b0:	6039      	str	r1, [r7, #0]
	TRC_ASSERT(pxEntryHandle != (void*)0);

	/* This should never fail */
	TRC_ASSERT(pvAddress != (void*)0);

	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_SLOTS); i++)
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	60fb      	str	r3, [r7, #12]
 800d5b6:	e017      	b.n	800d5e8 <xTraceEntryFind+0x40>
	{
		pxEntry = &pxEntryTable->axEntries[i];
 800d5b8:	4b10      	ldr	r3, [pc, #64]	@ (800d5fc <xTraceEntryFind+0x54>)
 800d5ba:	6819      	ldr	r1, [r3, #0]
 800d5bc:	68fa      	ldr	r2, [r7, #12]
 800d5be:	4613      	mov	r3, r2
 800d5c0:	005b      	lsls	r3, r3, #1
 800d5c2:	4413      	add	r3, r2
 800d5c4:	011b      	lsls	r3, r3, #4
 800d5c6:	3308      	adds	r3, #8
 800d5c8:	440b      	add	r3, r1
 800d5ca:	3304      	adds	r3, #4
 800d5cc:	60bb      	str	r3, [r7, #8]
		if (pxEntry->pvAddress == pvAddress)
 800d5ce:	68bb      	ldr	r3, [r7, #8]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	687a      	ldr	r2, [r7, #4]
 800d5d4:	429a      	cmp	r2, r3
 800d5d6:	d104      	bne.n	800d5e2 <xTraceEntryFind+0x3a>
		{
			*pxEntryHandle = (TraceEntryHandle_t)pxEntry;
 800d5d8:	683b      	ldr	r3, [r7, #0]
 800d5da:	68ba      	ldr	r2, [r7, #8]
 800d5dc:	601a      	str	r2, [r3, #0]

			return TRC_SUCCESS;
 800d5de:	2300      	movs	r3, #0
 800d5e0:	e006      	b.n	800d5f0 <xTraceEntryFind+0x48>
	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_SLOTS); i++)
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	3301      	adds	r3, #1
 800d5e6:	60fb      	str	r3, [r7, #12]
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	2b37      	cmp	r3, #55	@ 0x37
 800d5ec:	d9e4      	bls.n	800d5b8 <xTraceEntryFind+0x10>
		}
	}

	return TRC_FAIL;
 800d5ee:	2301      	movs	r3, #1
}
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	3714      	adds	r7, #20
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fa:	4770      	bx	lr
 800d5fc:	20012d4c 	.word	0x20012d4c

0800d600 <xTraceEntrySetSymbol>:

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceEntrySetSymbol(const TraceEntryHandle_t xEntryHandle, const char* szSymbol, uint32_t uiLength)
{
 800d600:	b580      	push	{r7, lr}
 800d602:	b084      	sub	sp, #16
 800d604:	af00      	add	r7, sp, #0
 800d606:	60f8      	str	r0, [r7, #12]
 800d608:	60b9      	str	r1, [r7, #8]
 800d60a:	607a      	str	r2, [r7, #4]
	/* This should never fail */
	TRC_ASSERT(xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_ENTRY));

	if (szSymbol == (void*)0)
 800d60c:	68bb      	ldr	r3, [r7, #8]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d103      	bne.n	800d61a <xTraceEntrySetSymbol+0x1a>
	{
		szSymbol = ""; /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 800d612:	4b0f      	ldr	r3, [pc, #60]	@ (800d650 <xTraceEntrySetSymbol+0x50>)
 800d614:	60bb      	str	r3, [r7, #8]
		uiLength = 0u; /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 800d616:	2300      	movs	r3, #0
 800d618:	607b      	str	r3, [r7, #4]
	}

	/* Remember the longest symbol name */
	(void)xTraceDiagnosticsSetIfHigher(TRC_DIAGNOSTICS_ENTRY_SYMBOL_LONGEST_LENGTH, (int32_t)uiLength);
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	4619      	mov	r1, r3
 800d61e:	2000      	movs	r0, #0
 800d620:	f7ff fe50 	bl	800d2c4 <xTraceDiagnosticsSetIfHigher>

	if (uiLength >= (uint32_t)(TRC_ENTRY_TABLE_SYMBOL_LENGTH))
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	2b1b      	cmp	r3, #27
 800d628:	d902      	bls.n	800d630 <xTraceEntrySetSymbol+0x30>
	{
		/* No room for null termination. Set to max. */
		uiLength = (uint32_t)(TRC_ENTRY_TABLE_SYMBOL_LENGTH); /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 800d62a:	231c      	movs	r3, #28
 800d62c:	607b      	str	r3, [r7, #4]
 800d62e:	e002      	b.n	800d636 <xTraceEntrySetSymbol+0x36>
	}
	else
	{
		/* Include null termination by increasing the size by 1 */
		uiLength = uiLength + 1u; /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	3301      	adds	r3, #1
 800d634:	607b      	str	r3, [r7, #4]
	/* Does not need to be locked. */
	/* This should never fail */
	TRC_ASSERT(VALIDATE_ENTRY_HANDLE(xEntryHandle)); /*cstat !MISRAC2004-17.3 !MISRAC2012-Rule-18.3 Suppress pointer comparison check*/

	/* This will also copy the null termination, if possible */
	memcpy(((TraceEntry_t*)xEntryHandle)->szSymbol, szSymbol, uiLength);
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	3314      	adds	r3, #20
 800d63a:	687a      	ldr	r2, [r7, #4]
 800d63c:	68b9      	ldr	r1, [r7, #8]
 800d63e:	4618      	mov	r0, r3
 800d640:	f002 fd2a 	bl	8010098 <memcpy>

	return TRC_SUCCESS;
 800d644:	2300      	movs	r3, #0
}
 800d646:	4618      	mov	r0, r3
 800d648:	3710      	adds	r7, #16
 800d64a:	46bd      	mov	sp, r7
 800d64c:	bd80      	pop	{r7, pc}
 800d64e:	bf00      	nop
 800d650:	08010f50 	.word	0x08010f50

0800d654 <prvEntryIndexInitialize>:
#endif /* ((TRC_CFG_USE_TRACE_ASSERT) == 1) */

/* PRIVATE FUNCTIONS */

static traceResult prvEntryIndexInitialize(void)
{
 800d654:	b480      	push	{r7}
 800d656:	b083      	sub	sp, #12
 800d658:	af00      	add	r7, sp, #0
	uint32_t i;

	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_SLOTS); i++)
 800d65a:	2300      	movs	r3, #0
 800d65c:	607b      	str	r3, [r7, #4]
 800d65e:	e00a      	b.n	800d676 <prvEntryIndexInitialize+0x22>
	{
		pxIndexTable->axFreeIndexes[i] = (TraceEntryIndex_t)i;
 800d660:	4b0c      	ldr	r3, [pc, #48]	@ (800d694 <prvEntryIndexInitialize+0x40>)
 800d662:	681a      	ldr	r2, [r3, #0]
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	b2d9      	uxtb	r1, r3
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	4413      	add	r3, r2
 800d66c:	460a      	mov	r2, r1
 800d66e:	701a      	strb	r2, [r3, #0]
	for (i = 0u; i < (uint32_t)(TRC_ENTRY_TABLE_SLOTS); i++)
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	3301      	adds	r3, #1
 800d674:	607b      	str	r3, [r7, #4]
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	2b37      	cmp	r3, #55	@ 0x37
 800d67a:	d9f1      	bls.n	800d660 <prvEntryIndexInitialize+0xc>
	}

	pxIndexTable->uiFreeIndexCount = TRC_ENTRY_TABLE_SLOTS;
 800d67c:	4b05      	ldr	r3, [pc, #20]	@ (800d694 <prvEntryIndexInitialize+0x40>)
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	2238      	movs	r2, #56	@ 0x38
 800d682:	639a      	str	r2, [r3, #56]	@ 0x38

	return TRC_SUCCESS;
 800d684:	2300      	movs	r3, #0
}
 800d686:	4618      	mov	r0, r3
 800d688:	370c      	adds	r7, #12
 800d68a:	46bd      	mov	sp, r7
 800d68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d690:	4770      	bx	lr
 800d692:	bf00      	nop
 800d694:	20012d50 	.word	0x20012d50

0800d698 <prvEntryIndexTake>:

static traceResult prvEntryIndexTake(TraceEntryIndex_t *pxIndex)
{
 800d698:	b480      	push	{r7}
 800d69a:	b085      	sub	sp, #20
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	6078      	str	r0, [r7, #4]
	/* Critical Section must be active! */
	TraceEntryIndex_t xIndex;

	if (pxIndexTable->uiFreeIndexCount == 0u)
 800d6a0:	4b14      	ldr	r3, [pc, #80]	@ (800d6f4 <prvEntryIndexTake+0x5c>)
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d101      	bne.n	800d6ae <prvEntryIndexTake+0x16>
	{
		return TRC_FAIL;
 800d6aa:	2301      	movs	r3, #1
 800d6ac:	e01c      	b.n	800d6e8 <prvEntryIndexTake+0x50>
	}

	/* Always take the first item */
	xIndex = pxIndexTable->axFreeIndexes[0];
 800d6ae:	4b11      	ldr	r3, [pc, #68]	@ (800d6f4 <prvEntryIndexTake+0x5c>)
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	781b      	ldrb	r3, [r3, #0]
 800d6b4:	73fb      	strb	r3, [r7, #15]
	pxIndexTable->uiFreeIndexCount--;
 800d6b6:	4b0f      	ldr	r3, [pc, #60]	@ (800d6f4 <prvEntryIndexTake+0x5c>)
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d6bc:	3a01      	subs	r2, #1
 800d6be:	639a      	str	r2, [r3, #56]	@ 0x38

	/* Move the last item to the first slot, to avoid holes */
	pxIndexTable->axFreeIndexes[0] = pxIndexTable->axFreeIndexes[pxIndexTable->uiFreeIndexCount];
 800d6c0:	4b0c      	ldr	r3, [pc, #48]	@ (800d6f4 <prvEntryIndexTake+0x5c>)
 800d6c2:	6819      	ldr	r1, [r3, #0]
 800d6c4:	4b0b      	ldr	r3, [pc, #44]	@ (800d6f4 <prvEntryIndexTake+0x5c>)
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d6ca:	4b0a      	ldr	r3, [pc, #40]	@ (800d6f4 <prvEntryIndexTake+0x5c>)
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	5c8a      	ldrb	r2, [r1, r2]
 800d6d0:	701a      	strb	r2, [r3, #0]

#if (TRC_ENTRY_TABLE_SLOTS > 256)
	pxIndexTable->axFreeIndexes[pxIndexTable->uiFreeIndexCount] = UINT16_MAX;
#else
	pxIndexTable->axFreeIndexes[pxIndexTable->uiFreeIndexCount] = UINT8_MAX;
 800d6d2:	4b08      	ldr	r3, [pc, #32]	@ (800d6f4 <prvEntryIndexTake+0x5c>)
 800d6d4:	681a      	ldr	r2, [r3, #0]
 800d6d6:	4b07      	ldr	r3, [pc, #28]	@ (800d6f4 <prvEntryIndexTake+0x5c>)
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d6dc:	21ff      	movs	r1, #255	@ 0xff
 800d6de:	54d1      	strb	r1, [r2, r3]
#endif

	*pxIndex = xIndex;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	7bfa      	ldrb	r2, [r7, #15]
 800d6e4:	701a      	strb	r2, [r3, #0]
	return TRC_SUCCESS;
 800d6e6:	2300      	movs	r3, #0
}
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	3714      	adds	r7, #20
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f2:	4770      	bx	lr
 800d6f4:	20012d50 	.word	0x20012d50

0800d6f8 <xTraceErrorInitialize>:
static traceResult prvTraceErrorGetDescription(uint32_t uiErrorCode, const char** pszDesc);

static TraceErrorData_t* pxErrorInfo TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceErrorInitialize(TraceErrorData_t* pxBuffer)
{
 800d6f8:	b480      	push	{r7}
 800d6fa:	b083      	sub	sp, #12
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxErrorInfo = pxBuffer;
 800d700:	4a0d      	ldr	r2, [pc, #52]	@ (800d738 <xTraceErrorInitialize+0x40>)
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	6013      	str	r3, [r2, #0]

	pxErrorInfo->uiErrorAndWarningFlags = 0u;
 800d706:	4b0c      	ldr	r3, [pc, #48]	@ (800d738 <xTraceErrorInitialize+0x40>)
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	2200      	movs	r2, #0
 800d70c:	601a      	str	r2, [r3, #0]
	pxErrorInfo->uiErrorCode = 0u;
 800d70e:	4b0a      	ldr	r3, [pc, #40]	@ (800d738 <xTraceErrorInitialize+0x40>)
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	2200      	movs	r2, #0
 800d714:	605a      	str	r2, [r3, #4]
	pxErrorInfo->xWarningChannel = 0;
 800d716:	4b08      	ldr	r3, [pc, #32]	@ (800d738 <xTraceErrorInitialize+0x40>)
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	2200      	movs	r2, #0
 800d71c:	609a      	str	r2, [r3, #8]

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_ERROR);
 800d71e:	4b07      	ldr	r3, [pc, #28]	@ (800d73c <xTraceErrorInitialize+0x44>)
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	f043 0320 	orr.w	r3, r3, #32
 800d726:	4a05      	ldr	r2, [pc, #20]	@ (800d73c <xTraceErrorInitialize+0x44>)
 800d728:	6013      	str	r3, [r2, #0]

	return TRC_SUCCESS;
 800d72a:	2300      	movs	r3, #0
}
 800d72c:	4618      	mov	r0, r3
 800d72e:	370c      	adds	r7, #12
 800d730:	46bd      	mov	sp, r7
 800d732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d736:	4770      	bx	lr
 800d738:	20012d54 	.word	0x20012d54
 800d73c:	20017418 	.word	0x20017418

0800d740 <xTraceWarning>:

traceResult xTraceWarning(uint32_t uiErrorCode)
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b082      	sub	sp, #8
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
	/* Probably good to verify this */
	if (xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_ERROR) == 0U)
 800d748:	4b12      	ldr	r3, [pc, #72]	@ (800d794 <xTraceWarning+0x54>)
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	f003 0320 	and.w	r3, r3, #32
 800d750:	2b00      	cmp	r3, #0
 800d752:	d101      	bne.n	800d758 <xTraceWarning+0x18>
	{
		/* If not initialized */
		return TRC_FAIL;
 800d754:	2301      	movs	r3, #1
 800d756:	e019      	b.n	800d78c <xTraceWarning+0x4c>
	}
	
	if (GET_ERROR_WARNING_FLAG(uiErrorCode) == 0u)
 800d758:	4b0f      	ldr	r3, [pc, #60]	@ (800d798 <xTraceWarning+0x58>)
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	681a      	ldr	r2, [r3, #0]
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	3b01      	subs	r3, #1
 800d762:	fa22 f303 	lsr.w	r3, r2, r3
 800d766:	f003 0301 	and.w	r3, r3, #1
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d10d      	bne.n	800d78a <xTraceWarning+0x4a>
	{
		/* Will never reach this point more than once per warning type, since we verify if uiErrorAndWarningFlags[uiErrorCode] has already been set */
		SET_ERROR_WARNING_FLAG(uiErrorCode);
 800d76e:	4b0a      	ldr	r3, [pc, #40]	@ (800d798 <xTraceWarning+0x58>)
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	6819      	ldr	r1, [r3, #0]
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	3b01      	subs	r3, #1
 800d778:	2201      	movs	r2, #1
 800d77a:	409a      	lsls	r2, r3
 800d77c:	4b06      	ldr	r3, [pc, #24]	@ (800d798 <xTraceWarning+0x58>)
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	430a      	orrs	r2, r1
 800d782:	601a      	str	r2, [r3, #0]

		(void)prvTraceErrorPrint(uiErrorCode);
 800d784:	6878      	ldr	r0, [r7, #4]
 800d786:	f000 f847 	bl	800d818 <prvTraceErrorPrint>
	}

	return TRC_SUCCESS;
 800d78a:	2300      	movs	r3, #0
}
 800d78c:	4618      	mov	r0, r3
 800d78e:	3708      	adds	r7, #8
 800d790:	46bd      	mov	sp, r7
 800d792:	bd80      	pop	{r7, pc}
 800d794:	20017418 	.word	0x20017418
 800d798:	20012d54 	.word	0x20012d54

0800d79c <xTraceError>:

traceResult xTraceError(uint32_t uiErrorCode)
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b082      	sub	sp, #8
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
	/* Probably good to verify this */
	if (xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_ERROR) == 0U)
 800d7a4:	4b19      	ldr	r3, [pc, #100]	@ (800d80c <xTraceError+0x70>)
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	f003 0320 	and.w	r3, r3, #32
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d101      	bne.n	800d7b4 <xTraceError+0x18>
	{
		return TRC_FAIL;
 800d7b0:	2301      	movs	r3, #1
 800d7b2:	e027      	b.n	800d804 <xTraceError+0x68>
	}

	if (pxErrorInfo->uiErrorCode == TRC_ERROR_NONE)
 800d7b4:	4b16      	ldr	r3, [pc, #88]	@ (800d810 <xTraceError+0x74>)
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	685b      	ldr	r3, [r3, #4]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d121      	bne.n	800d802 <xTraceError+0x66>
	{
		/* Will never reach this point more than once, since we verify if uiErrorCode has already been set */
		SET_ERROR_WARNING_FLAG(uiErrorCode);
 800d7be:	4b14      	ldr	r3, [pc, #80]	@ (800d810 <xTraceError+0x74>)
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	6819      	ldr	r1, [r3, #0]
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	3b01      	subs	r3, #1
 800d7c8:	2201      	movs	r2, #1
 800d7ca:	409a      	lsls	r2, r3
 800d7cc:	4b10      	ldr	r3, [pc, #64]	@ (800d810 <xTraceError+0x74>)
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	430a      	orrs	r2, r1
 800d7d2:	601a      	str	r2, [r3, #0]
		pxErrorInfo->uiErrorCode = uiErrorCode;
 800d7d4:	4b0e      	ldr	r3, [pc, #56]	@ (800d810 <xTraceError+0x74>)
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	687a      	ldr	r2, [r7, #4]
 800d7da:	605a      	str	r2, [r3, #4]

		if (prvTraceErrorPrint(uiErrorCode) == TRC_FAIL)
 800d7dc:	6878      	ldr	r0, [r7, #4]
 800d7de:	f000 f81b 	bl	800d818 <prvTraceErrorPrint>
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	2b01      	cmp	r3, #1
 800d7e6:	d103      	bne.n	800d7f0 <xTraceError+0x54>
		{
			(void)xTraceDisable();
 800d7e8:	f002 f880 	bl	800f8ec <xTraceDisable>
			
			return TRC_FAIL;
 800d7ec:	2301      	movs	r3, #1
 800d7ee:	e009      	b.n	800d804 <xTraceError+0x68>
		}
		
		(void)xTracePrint(pxErrorInfo->xWarningChannel, "Recorder stopped in xTraceError(...)!");
 800d7f0:	4b07      	ldr	r3, [pc, #28]	@ (800d810 <xTraceError+0x74>)
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	689b      	ldr	r3, [r3, #8]
 800d7f6:	4907      	ldr	r1, [pc, #28]	@ (800d814 <xTraceError+0x78>)
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	f001 fcf1 	bl	800f1e0 <xTracePrint>
		(void)xTraceDisable();
 800d7fe:	f002 f875 	bl	800f8ec <xTraceDisable>
	}

	return TRC_SUCCESS;
 800d802:	2300      	movs	r3, #0
}
 800d804:	4618      	mov	r0, r3
 800d806:	3708      	adds	r7, #8
 800d808:	46bd      	mov	sp, r7
 800d80a:	bd80      	pop	{r7, pc}
 800d80c:	20017418 	.word	0x20017418
 800d810:	20012d54 	.word	0x20012d54
 800d814:	08010f54 	.word	0x08010f54

0800d818 <prvTraceErrorPrint>:

	return TRC_SUCCESS;
}

static traceResult prvTraceErrorPrint(uint32_t uiErrorCode)
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b086      	sub	sp, #24
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	6078      	str	r0, [r7, #4]
	TraceStringHandle_t xFileName;
	
	/* Note: the error messages are short, in order to fit in a User Event.
	Instead, the users can read more in the below comments.*/

	if (pxErrorInfo->xWarningChannel == 0)
 800d820:	4b1d      	ldr	r3, [pc, #116]	@ (800d898 <prvTraceErrorPrint+0x80>)
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	689b      	ldr	r3, [r3, #8]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d10b      	bne.n	800d842 <prvTraceErrorPrint+0x2a>
		* The abbreviation #WFR is used instead of the longer full name,
		* to avoid truncation by small slots in the symbol table.
		* This is translated in Tracealyzer and shown as the full name,
		* "Warnings from Recorder".
		 */
		if (xTraceStringRegister("#WFR", &pxErrorInfo->xWarningChannel) == TRC_FAIL)
 800d82a:	4b1b      	ldr	r3, [pc, #108]	@ (800d898 <prvTraceErrorPrint+0x80>)
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	3308      	adds	r3, #8
 800d830:	4619      	mov	r1, r3
 800d832:	481a      	ldr	r0, [pc, #104]	@ (800d89c <prvTraceErrorPrint+0x84>)
 800d834:	f002 f996 	bl	800fb64 <xTraceStringRegister>
 800d838:	4603      	mov	r3, r0
 800d83a:	2b01      	cmp	r3, #1
 800d83c:	d101      	bne.n	800d842 <prvTraceErrorPrint+0x2a>
		{
			return TRC_FAIL;
 800d83e:	2301      	movs	r3, #1
 800d840:	e025      	b.n	800d88e <prvTraceErrorPrint+0x76>
		}
	}

	(void)prvTraceErrorGetDescription(uiErrorCode, &szDesc);
 800d842:	f107 0314 	add.w	r3, r7, #20
 800d846:	4619      	mov	r1, r3
 800d848:	6878      	ldr	r0, [r7, #4]
 800d84a:	f000 f82b 	bl	800d8a4 <prvTraceErrorGetDescription>

	switch (uiErrorCode)
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	2b01      	cmp	r3, #1
 800d852:	d011      	beq.n	800d878 <prvTraceErrorPrint+0x60>
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d010      	beq.n	800d87c <prvTraceErrorPrint+0x64>
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	3b02      	subs	r3, #2
 800d85e:	2b0c      	cmp	r3, #12
 800d860:	d80c      	bhi.n	800d87c <prvTraceErrorPrint+0x64>
	case TRC_ERROR_EVENT_CODE_TOO_LARGE:
	case TRC_ERROR_ISR_NESTING_OVERFLOW:
	case TRC_ERROR_DWT_NOT_SUPPORTED:
	case TRC_ERROR_DWT_CYCCNT_NOT_SUPPORTED:
	case TRC_ERROR_TZCTRLTASK_NOT_CREATED:
		(void)xTracePrint(pxErrorInfo->xWarningChannel, szDesc);
 800d862:	4b0d      	ldr	r3, [pc, #52]	@ (800d898 <prvTraceErrorPrint+0x80>)
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	689b      	ldr	r3, [r3, #8]
 800d868:	697a      	ldr	r2, [r7, #20]
 800d86a:	4611      	mov	r1, r2
 800d86c:	4618      	mov	r0, r3
 800d86e:	f001 fcb7 	bl	800f1e0 <xTracePrint>
		break;
 800d872:	bf00      	nop
		(void)xTracePrintF(pxErrorInfo->xWarningChannel, "Unknown error code: 0x%08X", uiErrorCode);
		
		return TRC_FAIL;
	}

	return TRC_SUCCESS;
 800d874:	2300      	movs	r3, #0
 800d876:	e00a      	b.n	800d88e <prvTraceErrorPrint+0x76>
			return TRC_FAIL;
 800d878:	2301      	movs	r3, #1
 800d87a:	e008      	b.n	800d88e <prvTraceErrorPrint+0x76>
		(void)xTracePrintF(pxErrorInfo->xWarningChannel, "Unknown error code: 0x%08X", uiErrorCode);
 800d87c:	4b06      	ldr	r3, [pc, #24]	@ (800d898 <prvTraceErrorPrint+0x80>)
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	689b      	ldr	r3, [r3, #8]
 800d882:	687a      	ldr	r2, [r7, #4]
 800d884:	4906      	ldr	r1, [pc, #24]	@ (800d8a0 <prvTraceErrorPrint+0x88>)
 800d886:	4618      	mov	r0, r3
 800d888:	f001 fce0 	bl	800f24c <xTracePrintF>
		return TRC_FAIL;
 800d88c:	2301      	movs	r3, #1
}
 800d88e:	4618      	mov	r0, r3
 800d890:	3718      	adds	r7, #24
 800d892:	46bd      	mov	sp, r7
 800d894:	bd80      	pop	{r7, pc}
 800d896:	bf00      	nop
 800d898:	20012d54 	.word	0x20012d54
 800d89c:	08010f7c 	.word	0x08010f7c
 800d8a0:	08010f84 	.word	0x08010f84

0800d8a4 <prvTraceErrorGetDescription>:

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
static traceResult prvTraceErrorGetDescription(uint32_t uiErrorCode, const char** pszDesc)
{
 800d8a4:	b480      	push	{r7}
 800d8a6:	b083      	sub	sp, #12
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
 800d8ac:	6039      	str	r1, [r7, #0]
	/* Note: the error messages are short, in order to fit in a User Event.
	Instead, the users can read more in the below comments.*/

	switch (uiErrorCode)
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	2b0e      	cmp	r3, #14
 800d8b2:	d85b      	bhi.n	800d96c <prvTraceErrorGetDescription+0xc8>
 800d8b4:	a201      	add	r2, pc, #4	@ (adr r2, 800d8bc <prvTraceErrorGetDescription+0x18>)
 800d8b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8ba:	bf00      	nop
 800d8bc:	0800d8f9 	.word	0x0800d8f9
 800d8c0:	0800d965 	.word	0x0800d965
 800d8c4:	0800d93d 	.word	0x0800d93d
 800d8c8:	0800d945 	.word	0x0800d945
 800d8cc:	0800d94d 	.word	0x0800d94d
 800d8d0:	0800d955 	.word	0x0800d955
 800d8d4:	0800d95d 	.word	0x0800d95d
 800d8d8:	0800d935 	.word	0x0800d935
 800d8dc:	0800d8fd 	.word	0x0800d8fd
 800d8e0:	0800d905 	.word	0x0800d905
 800d8e4:	0800d90d 	.word	0x0800d90d
 800d8e8:	0800d915 	.word	0x0800d915
 800d8ec:	0800d91d 	.word	0x0800d91d
 800d8f0:	0800d925 	.word	0x0800d925
 800d8f4:	0800d92d 	.word	0x0800d92d
	{
	case TRC_ERROR_NONE:
		return TRC_FAIL;
 800d8f8:	2301      	movs	r3, #1
 800d8fa:	e03c      	b.n	800d976 <prvTraceErrorGetDescription+0xd2>
	case TRC_WARNING_ENTRY_TABLE_SLOTS:
		/* There were not enough symbol table slots for storing symbol names.
		The number of missing slots is counted by pxDiagnostics->metrics[TRC_DIAGNOSTICS_ENTRY_SLOTS_NO_ROOM]. Inspect this
		variable and increase TRC_CFG_ENTRY_SLOTS by at least that value. */

		*pszDesc = "Exceeded TRC_CFG_ENTRY_SLOTS";
 800d8fc:	683b      	ldr	r3, [r7, #0]
 800d8fe:	4a21      	ldr	r2, [pc, #132]	@ (800d984 <prvTraceErrorGetDescription+0xe0>)
 800d900:	601a      	str	r2, [r3, #0]
		break;
 800d902:	e037      	b.n	800d974 <prvTraceErrorGetDescription+0xd0>
		/* A symbol name exceeded TRC_CFG_ENTRY_SYMBOL_MAX_LENGTH in length.
		Make sure the symbol names are at most TRC_CFG_SYMBOL_MAX_LENGTH,
		or inspect uiLongestSymbolName in trcEntryTable and increase
		TRC_CFG_ENTRY_SYMBOL_MAX_LENGTH to at least this value. */

		*pszDesc = "Exceeded TRC_CFG_ENTRY_SYMBOL_MAX_LENGTH";
 800d904:	683b      	ldr	r3, [r7, #0]
 800d906:	4a20      	ldr	r2, [pc, #128]	@ (800d988 <prvTraceErrorGetDescription+0xe4>)
 800d908:	601a      	str	r2, [r3, #0]
		break;
 800d90a:	e033      	b.n	800d974 <prvTraceErrorGetDescription+0xd0>
		- xTraceStringRegister

		A trace event may store a maximum of 56 bytes payload, including
		data arguments and string characters. */

		*pszDesc = "Event size exceeded";
 800d90c:	683b      	ldr	r3, [r7, #0]
 800d90e:	4a1f      	ldr	r2, [pc, #124]	@ (800d98c <prvTraceErrorGetDescription+0xe8>)
 800d910:	601a      	str	r2, [r3, #0]
		break;
 800d912:	e02f      	b.n	800d974 <prvTraceErrorGetDescription+0xd0>

	case TRC_WARNING_STREAM_PORT_READ:
		/* TRC_STREAM_PORT_READ_DATA is expected to return 0 when completed successfully.
		This means there is an error in the communication with host/Tracealyzer. */

		*pszDesc = "TRC_STREAM_PORT_READ_DATA returned error";
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	4a1e      	ldr	r2, [pc, #120]	@ (800d990 <prvTraceErrorGetDescription+0xec>)
 800d918:	601a      	str	r2, [r3, #0]
		break;
 800d91a:	e02b      	b.n	800d974 <prvTraceErrorGetDescription+0xd0>

	case TRC_WARNING_STREAM_PORT_WRITE:
		/* TRC_STREAM_PORT_WRITE_DATA is expected to return 0 when completed successfully.
		This means there is an error in the communication with host/Tracealyzer. */

		*pszDesc = "TRC_STREAM_PORT_WRITE_DATA returned error";
 800d91c:	683b      	ldr	r3, [r7, #0]
 800d91e:	4a1d      	ldr	r2, [pc, #116]	@ (800d994 <prvTraceErrorGetDescription+0xf0>)
 800d920:	601a      	str	r2, [r3, #0]
		break;
 800d922:	e027      	b.n	800d974 <prvTraceErrorGetDescription+0xd0>

	case TRC_WARNING_STREAM_PORT_INITIAL_BLOCKING:
		/* Blocking occurred during xTraceEnable. This happens if the trace buffer is
		smaller than the initial transmission (trace header, object table, and symbol table). */

		*pszDesc = "Blocking in xTraceEnable";
 800d924:	683b      	ldr	r3, [r7, #0]
 800d926:	4a1c      	ldr	r2, [pc, #112]	@ (800d998 <prvTraceErrorGetDescription+0xf4>)
 800d928:	601a      	str	r2, [r3, #0]
		break;
 800d92a:	e023      	b.n	800d974 <prvTraceErrorGetDescription+0xd0>

	case TRC_WARNING_STACKMON_NO_SLOTS:
		/* Some tasks did not fit in the stack monitor. Increase the slot count. */

		*pszDesc = "No slots left in Stack Monitor";
 800d92c:	683b      	ldr	r3, [r7, #0]
 800d92e:	4a1b      	ldr	r2, [pc, #108]	@ (800d99c <prvTraceErrorGetDescription+0xf8>)
 800d930:	601a      	str	r2, [r3, #0]
		break;
 800d932:	e01f      	b.n	800d974 <prvTraceErrorGetDescription+0xd0>

	case TRC_ERROR_STREAM_PORT_WRITE:
		/* TRC_STREAM_PORT_WRITE_DATA is expected to return 0 when completed successfully.
		This means there is an error in the communication with host/Tracealyzer. */

		*pszDesc = "TRC_STREAM_PORT_WRITE_DATA returned error";
 800d934:	683b      	ldr	r3, [r7, #0]
 800d936:	4a17      	ldr	r2, [pc, #92]	@ (800d994 <prvTraceErrorGetDescription+0xf0>)
 800d938:	601a      	str	r2, [r3, #0]
		break;
 800d93a:	e01b      	b.n	800d974 <prvTraceErrorGetDescription+0xd0>

	case TRC_ERROR_EVENT_CODE_TOO_LARGE:
		/* The highest allowed event code is 4095, anything higher is an unexpected error.
		Please contact support@percepio.com for assistance.*/

		*pszDesc = "Invalid event code";
 800d93c:	683b      	ldr	r3, [r7, #0]
 800d93e:	4a18      	ldr	r2, [pc, #96]	@ (800d9a0 <prvTraceErrorGetDescription+0xfc>)
 800d940:	601a      	str	r2, [r3, #0]
		break;
 800d942:	e017      	b.n	800d974 <prvTraceErrorGetDescription+0xd0>
	case TRC_ERROR_ISR_NESTING_OVERFLOW:
		/* Nesting of ISR trace calls exceeded the limit (TRC_CFG_MAX_ISR_NESTING).
		If this is unlikely, make sure that you call vTraceStoreISRExit in the end
		of all ISR handlers. Or increase TRC_CFG_MAX_ISR_NESTING. */

		*pszDesc = "Exceeded ISR nesting";
 800d944:	683b      	ldr	r3, [r7, #0]
 800d946:	4a17      	ldr	r2, [pc, #92]	@ (800d9a4 <prvTraceErrorGetDescription+0x100>)
 800d948:	601a      	str	r2, [r3, #0]
		break;
 800d94a:	e013      	b.n	800d974 <prvTraceErrorGetDescription+0xd0>
		/* On ARM Cortex-M only - failed to initialize DWT Cycle Counter since not supported by this chip.
		DWT timestamping is selected automatically for ART Cortex-M3, M4 and higher, based on the __CORTEX_M
		macro normally set by ARM's CMSIS library, since typically available. You can however select
		SysTick timestamping instead by defining adding "#define TRC_CFG_ARM_CM_USE_SYSTICK".*/

		*pszDesc = "DWT not supported";
 800d94c:	683b      	ldr	r3, [r7, #0]
 800d94e:	4a16      	ldr	r2, [pc, #88]	@ (800d9a8 <prvTraceErrorGetDescription+0x104>)
 800d950:	601a      	str	r2, [r3, #0]
		break;
 800d952:	e00f      	b.n	800d974 <prvTraceErrorGetDescription+0xd0>
		/* On ARM Cortex-M only - failed to initialize DWT Cycle Counter since not supported by this chip.
		DWT timestamping is selected automatically for ART Cortex-M3, M4 and higher, based on the __CORTEX_M
		macro normally set by ARM's CMSIS library, since typically available. You can however select
		SysTick timestamping instead by defining adding "#define TRC_CFG_ARM_CM_USE_SYSTICK".*/

		*pszDesc = "DWT_CYCCNT not supported";
 800d954:	683b      	ldr	r3, [r7, #0]
 800d956:	4a15      	ldr	r2, [pc, #84]	@ (800d9ac <prvTraceErrorGetDescription+0x108>)
 800d958:	601a      	str	r2, [r3, #0]
		break;
 800d95a:	e00b      	b.n	800d974 <prvTraceErrorGetDescription+0xd0>

	case TRC_ERROR_TZCTRLTASK_NOT_CREATED:
		/* xTraceEnable failed creating the trace control task (TzCtrl) - incorrect parameters (priority?)
		or insufficient heap size? */
		*pszDesc = "Could not create TzCtrl";
 800d95c:	683b      	ldr	r3, [r7, #0]
 800d95e:	4a14      	ldr	r2, [pc, #80]	@ (800d9b0 <prvTraceErrorGetDescription+0x10c>)
 800d960:	601a      	str	r2, [r3, #0]
		break;
 800d962:	e007      	b.n	800d974 <prvTraceErrorGetDescription+0xd0>

	case TRC_ERROR_ASSERT:
		/* A TRC_ASSERT has triggered */
		*pszDesc = "ASSERT: %s (%d)";
 800d964:	683b      	ldr	r3, [r7, #0]
 800d966:	4a13      	ldr	r2, [pc, #76]	@ (800d9b4 <prvTraceErrorGetDescription+0x110>)
 800d968:	601a      	str	r2, [r3, #0]
		break;
 800d96a:	e003      	b.n	800d974 <prvTraceErrorGetDescription+0xd0>

	default:
		/* An unknown error occurred */
		*pszDesc = "Unknown error code: 0x%08X";
 800d96c:	683b      	ldr	r3, [r7, #0]
 800d96e:	4a12      	ldr	r2, [pc, #72]	@ (800d9b8 <prvTraceErrorGetDescription+0x114>)
 800d970:	601a      	str	r2, [r3, #0]
		break;
 800d972:	bf00      	nop
	}

	return TRC_SUCCESS;
 800d974:	2300      	movs	r3, #0
}
 800d976:	4618      	mov	r0, r3
 800d978:	370c      	adds	r7, #12
 800d97a:	46bd      	mov	sp, r7
 800d97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d980:	4770      	bx	lr
 800d982:	bf00      	nop
 800d984:	08010fa0 	.word	0x08010fa0
 800d988:	08010fc0 	.word	0x08010fc0
 800d98c:	08010fec 	.word	0x08010fec
 800d990:	08011000 	.word	0x08011000
 800d994:	0801102c 	.word	0x0801102c
 800d998:	08011058 	.word	0x08011058
 800d99c:	08011074 	.word	0x08011074
 800d9a0:	08011094 	.word	0x08011094
 800d9a4:	080110a8 	.word	0x080110a8
 800d9a8:	080110c0 	.word	0x080110c0
 800d9ac:	080110d4 	.word	0x080110d4
 800d9b0:	080110f0 	.word	0x080110f0
 800d9b4:	08011108 	.word	0x08011108
 800d9b8:	08010f84 	.word	0x08010f84

0800d9bc <xTraceEventInitialize>:
	memcpy(&((uint8_t*)pxEventData)[sizeof(TraceEvent6_t)], __pvData, __uxSize);

TraceEventDataTable_t *pxTraceEventDataTable TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceEventInitialize(TraceEventDataTable_t* pxBuffer)
{
 800d9bc:	b480      	push	{r7}
 800d9be:	b085      	sub	sp, #20
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	6078      	str	r0, [r7, #4]
	uint32_t i;

	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxTraceEventDataTable = pxBuffer;
 800d9c4:	4a0f      	ldr	r2, [pc, #60]	@ (800da04 <xTraceEventInitialize+0x48>)
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	6013      	str	r3, [r2, #0]

	for (i = 0u; i < (uint32_t)(TRC_CFG_CORE_COUNT); i++)
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	60fb      	str	r3, [r7, #12]
 800d9ce:	e008      	b.n	800d9e2 <xTraceEventInitialize+0x26>
	{
		pxTraceEventDataTable->coreEventData[i].eventCounter = 0u;
 800d9d0:	4b0c      	ldr	r3, [pc, #48]	@ (800da04 <xTraceEventInitialize+0x48>)
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	68fa      	ldr	r2, [r7, #12]
 800d9d6:	2100      	movs	r1, #0
 800d9d8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	for (i = 0u; i < (uint32_t)(TRC_CFG_CORE_COUNT); i++)
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	3301      	adds	r3, #1
 800d9e0:	60fb      	str	r3, [r7, #12]
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d0f3      	beq.n	800d9d0 <xTraceEventInitialize+0x14>
	}

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_EVENT);
 800d9e8:	4b07      	ldr	r3, [pc, #28]	@ (800da08 <xTraceEventInitialize+0x4c>)
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d9f0:	4a05      	ldr	r2, [pc, #20]	@ (800da08 <xTraceEventInitialize+0x4c>)
 800d9f2:	6013      	str	r3, [r2, #0]

	return TRC_SUCCESS;
 800d9f4:	2300      	movs	r3, #0
}
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	3714      	adds	r7, #20
 800d9fa:	46bd      	mov	sp, r7
 800d9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da00:	4770      	bx	lr
 800da02:	bf00      	nop
 800da04:	20012d58 	.word	0x20012d58
 800da08:	20017418 	.word	0x20017418

0800da0c <xTraceEventCreate1>:

	return TRC_SUCCESS;
}

traceResult xTraceEventCreate1(uint32_t uiEventCode, TraceUnsignedBaseType_t uxParam1)
{
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b08a      	sub	sp, #40	@ 0x28
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
 800da14:	6039      	str	r1, [r7, #0]
	TraceEvent1_t* pxEventData = (void*)0;
 800da16:	2300      	movs	r3, #0
 800da18:	613b      	str	r3, [r7, #16]
	int32_t iBytesCommitted = 0;
 800da1a:	2300      	movs	r3, #0
 800da1c:	60fb      	str	r3, [r7, #12]

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_EVENT_BEGIN(sizeof(TraceEvent1_t));
 800da1e:	4b35      	ldr	r3, [pc, #212]	@ (800daf4 <xTraceEventCreate1+0xe8>)
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	f003 0301 	and.w	r3, r3, #1
 800da26:	2b00      	cmp	r3, #0
 800da28:	d004      	beq.n	800da34 <xTraceEventCreate1+0x28>
 800da2a:	4b33      	ldr	r3, [pc, #204]	@ (800daf8 <xTraceEventCreate1+0xec>)
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	685b      	ldr	r3, [r3, #4]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d101      	bne.n	800da38 <xTraceEventCreate1+0x2c>
 800da34:	2301      	movs	r3, #1
 800da36:	e058      	b.n	800daea <xTraceEventCreate1+0xde>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da38:	f3ef 8310 	mrs	r3, PRIMASK
 800da3c:	61fb      	str	r3, [r7, #28]
  return(result);
 800da3e:	69fb      	ldr	r3, [r7, #28]
 800da40:	627b      	str	r3, [r7, #36]	@ 0x24
 800da42:	2301      	movs	r3, #1
 800da44:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800da46:	6a3b      	ldr	r3, [r7, #32]
 800da48:	f383 8810 	msr	PRIMASK, r3
}
 800da4c:	bf00      	nop
 800da4e:	4b2b      	ldr	r3, [pc, #172]	@ (800dafc <xTraceEventCreate1+0xf0>)
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	681a      	ldr	r2, [r3, #0]
 800da54:	3201      	adds	r2, #1
 800da56:	601a      	str	r2, [r3, #0]
 800da58:	4b29      	ldr	r3, [pc, #164]	@ (800db00 <xTraceEventCreate1+0xf4>)
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	f107 0210 	add.w	r2, r7, #16
 800da62:	210c      	movs	r1, #12
 800da64:	4618      	mov	r0, r3
 800da66:	f000 febd 	bl	800e7e4 <xTraceEventBufferAlloc>
 800da6a:	4603      	mov	r3, r0
 800da6c:	2b01      	cmp	r3, #1
 800da6e:	d107      	bne.n	800da80 <xTraceEventCreate1+0x74>
 800da70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da72:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800da74:	69bb      	ldr	r3, [r7, #24]
 800da76:	f383 8810 	msr	PRIMASK, r3
}
 800da7a:	bf00      	nop
 800da7c:	2301      	movs	r3, #1
 800da7e:	e034      	b.n	800daea <xTraceEventCreate1+0xde>
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	b29a      	uxth	r2, r3
 800da84:	693b      	ldr	r3, [r7, #16]
 800da86:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800da8a:	b292      	uxth	r2, r2
 800da8c:	801a      	strh	r2, [r3, #0]
 800da8e:	4b1b      	ldr	r3, [pc, #108]	@ (800dafc <xTraceEventCreate1+0xf0>)
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	681a      	ldr	r2, [r3, #0]
 800da94:	693b      	ldr	r3, [r7, #16]
 800da96:	b292      	uxth	r2, r2
 800da98:	805a      	strh	r2, [r3, #2]
 800da9a:	4a1a      	ldr	r2, [pc, #104]	@ (800db04 <xTraceEventCreate1+0xf8>)
 800da9c:	693b      	ldr	r3, [r7, #16]
 800da9e:	6812      	ldr	r2, [r2, #0]
 800daa0:	605a      	str	r2, [r3, #4]
 800daa2:	693b      	ldr	r3, [r7, #16]
 800daa4:	685a      	ldr	r2, [r3, #4]
 800daa6:	4b18      	ldr	r3, [pc, #96]	@ (800db08 <xTraceEventCreate1+0xfc>)
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	695b      	ldr	r3, [r3, #20]
 800daac:	429a      	cmp	r2, r3
 800daae:	d204      	bcs.n	800daba <xTraceEventCreate1+0xae>
 800dab0:	4b15      	ldr	r3, [pc, #84]	@ (800db08 <xTraceEventCreate1+0xfc>)
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	68da      	ldr	r2, [r3, #12]
 800dab6:	3201      	adds	r2, #1
 800dab8:	60da      	str	r2, [r3, #12]
 800daba:	693a      	ldr	r2, [r7, #16]
 800dabc:	4b12      	ldr	r3, [pc, #72]	@ (800db08 <xTraceEventCreate1+0xfc>)
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	6852      	ldr	r2, [r2, #4]
 800dac2:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_1(uxParam1);
 800dac4:	693b      	ldr	r3, [r7, #16]
 800dac6:	683a      	ldr	r2, [r7, #0]
 800dac8:	609a      	str	r2, [r3, #8]

	TRACE_EVENT_END(sizeof(TraceEvent1_t));
 800daca:	4b0d      	ldr	r3, [pc, #52]	@ (800db00 <xTraceEventCreate1+0xf4>)
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	6818      	ldr	r0, [r3, #0]
 800dad0:	6939      	ldr	r1, [r7, #16]
 800dad2:	f107 030c 	add.w	r3, r7, #12
 800dad6:	220c      	movs	r2, #12
 800dad8:	f000 ff9c 	bl	800ea14 <xTraceEventBufferAllocCommit>
 800dadc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dade:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dae0:	697b      	ldr	r3, [r7, #20]
 800dae2:	f383 8810 	msr	PRIMASK, r3
}
 800dae6:	bf00      	nop

	return TRC_SUCCESS;
 800dae8:	2300      	movs	r3, #0
}
 800daea:	4618      	mov	r0, r3
 800daec:	3728      	adds	r7, #40	@ 0x28
 800daee:	46bd      	mov	sp, r7
 800daf0:	bd80      	pop	{r7, pc}
 800daf2:	bf00      	nop
 800daf4:	20017418 	.word	0x20017418
 800daf8:	20017410 	.word	0x20017410
 800dafc:	20012d58 	.word	0x20012d58
 800db00:	20012d40 	.word	0x20012d40
 800db04:	e0001004 	.word	0xe0001004
 800db08:	20017420 	.word	0x20017420

0800db0c <xTraceEventCreate2>:

traceResult xTraceEventCreate2(uint32_t uiEventCode, TraceUnsignedBaseType_t uxParam1, TraceUnsignedBaseType_t uxParam2)
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b08c      	sub	sp, #48	@ 0x30
 800db10:	af00      	add	r7, sp, #0
 800db12:	60f8      	str	r0, [r7, #12]
 800db14:	60b9      	str	r1, [r7, #8]
 800db16:	607a      	str	r2, [r7, #4]
	TraceEvent2_t* pxEventData = (void*)0;
 800db18:	2300      	movs	r3, #0
 800db1a:	61bb      	str	r3, [r7, #24]
	int32_t iBytesCommitted = 0;
 800db1c:	2300      	movs	r3, #0
 800db1e:	617b      	str	r3, [r7, #20]

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_EVENT_BEGIN(sizeof(TraceEvent2_t));
 800db20:	4b36      	ldr	r3, [pc, #216]	@ (800dbfc <xTraceEventCreate2+0xf0>)
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	f003 0301 	and.w	r3, r3, #1
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d004      	beq.n	800db36 <xTraceEventCreate2+0x2a>
 800db2c:	4b34      	ldr	r3, [pc, #208]	@ (800dc00 <xTraceEventCreate2+0xf4>)
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	685b      	ldr	r3, [r3, #4]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d101      	bne.n	800db3a <xTraceEventCreate2+0x2e>
 800db36:	2301      	movs	r3, #1
 800db38:	e05b      	b.n	800dbf2 <xTraceEventCreate2+0xe6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db3a:	f3ef 8310 	mrs	r3, PRIMASK
 800db3e:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800db40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800db44:	2301      	movs	r3, #1
 800db46:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db4a:	f383 8810 	msr	PRIMASK, r3
}
 800db4e:	bf00      	nop
 800db50:	4b2c      	ldr	r3, [pc, #176]	@ (800dc04 <xTraceEventCreate2+0xf8>)
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	681a      	ldr	r2, [r3, #0]
 800db56:	3201      	adds	r2, #1
 800db58:	601a      	str	r2, [r3, #0]
 800db5a:	4b2b      	ldr	r3, [pc, #172]	@ (800dc08 <xTraceEventCreate2+0xfc>)
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	f107 0218 	add.w	r2, r7, #24
 800db64:	2110      	movs	r1, #16
 800db66:	4618      	mov	r0, r3
 800db68:	f000 fe3c 	bl	800e7e4 <xTraceEventBufferAlloc>
 800db6c:	4603      	mov	r3, r0
 800db6e:	2b01      	cmp	r3, #1
 800db70:	d107      	bne.n	800db82 <xTraceEventCreate2+0x76>
 800db72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db74:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db76:	6a3b      	ldr	r3, [r7, #32]
 800db78:	f383 8810 	msr	PRIMASK, r3
}
 800db7c:	bf00      	nop
 800db7e:	2301      	movs	r3, #1
 800db80:	e037      	b.n	800dbf2 <xTraceEventCreate2+0xe6>
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	b29a      	uxth	r2, r3
 800db86:	69bb      	ldr	r3, [r7, #24]
 800db88:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800db8c:	b292      	uxth	r2, r2
 800db8e:	801a      	strh	r2, [r3, #0]
 800db90:	4b1c      	ldr	r3, [pc, #112]	@ (800dc04 <xTraceEventCreate2+0xf8>)
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	681a      	ldr	r2, [r3, #0]
 800db96:	69bb      	ldr	r3, [r7, #24]
 800db98:	b292      	uxth	r2, r2
 800db9a:	805a      	strh	r2, [r3, #2]
 800db9c:	4a1b      	ldr	r2, [pc, #108]	@ (800dc0c <xTraceEventCreate2+0x100>)
 800db9e:	69bb      	ldr	r3, [r7, #24]
 800dba0:	6812      	ldr	r2, [r2, #0]
 800dba2:	605a      	str	r2, [r3, #4]
 800dba4:	69bb      	ldr	r3, [r7, #24]
 800dba6:	685a      	ldr	r2, [r3, #4]
 800dba8:	4b19      	ldr	r3, [pc, #100]	@ (800dc10 <xTraceEventCreate2+0x104>)
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	695b      	ldr	r3, [r3, #20]
 800dbae:	429a      	cmp	r2, r3
 800dbb0:	d204      	bcs.n	800dbbc <xTraceEventCreate2+0xb0>
 800dbb2:	4b17      	ldr	r3, [pc, #92]	@ (800dc10 <xTraceEventCreate2+0x104>)
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	68da      	ldr	r2, [r3, #12]
 800dbb8:	3201      	adds	r2, #1
 800dbba:	60da      	str	r2, [r3, #12]
 800dbbc:	69ba      	ldr	r2, [r7, #24]
 800dbbe:	4b14      	ldr	r3, [pc, #80]	@ (800dc10 <xTraceEventCreate2+0x104>)
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	6852      	ldr	r2, [r2, #4]
 800dbc4:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_2(uxParam1, uxParam2);
 800dbc6:	69bb      	ldr	r3, [r7, #24]
 800dbc8:	68ba      	ldr	r2, [r7, #8]
 800dbca:	609a      	str	r2, [r3, #8]
 800dbcc:	69bb      	ldr	r3, [r7, #24]
 800dbce:	687a      	ldr	r2, [r7, #4]
 800dbd0:	60da      	str	r2, [r3, #12]

	TRACE_EVENT_END(sizeof(TraceEvent2_t));
 800dbd2:	4b0d      	ldr	r3, [pc, #52]	@ (800dc08 <xTraceEventCreate2+0xfc>)
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	6818      	ldr	r0, [r3, #0]
 800dbd8:	69b9      	ldr	r1, [r7, #24]
 800dbda:	f107 0314 	add.w	r3, r7, #20
 800dbde:	2210      	movs	r2, #16
 800dbe0:	f000 ff18 	bl	800ea14 <xTraceEventBufferAllocCommit>
 800dbe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbe6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dbe8:	69fb      	ldr	r3, [r7, #28]
 800dbea:	f383 8810 	msr	PRIMASK, r3
}
 800dbee:	bf00      	nop

	return TRC_SUCCESS;
 800dbf0:	2300      	movs	r3, #0
}
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	3730      	adds	r7, #48	@ 0x30
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	bd80      	pop	{r7, pc}
 800dbfa:	bf00      	nop
 800dbfc:	20017418 	.word	0x20017418
 800dc00:	20017410 	.word	0x20017410
 800dc04:	20012d58 	.word	0x20012d58
 800dc08:	20012d40 	.word	0x20012d40
 800dc0c:	e0001004 	.word	0xe0001004
 800dc10:	20017420 	.word	0x20017420

0800dc14 <xTraceEventCreate3>:

traceResult xTraceEventCreate3(uint32_t uiEventCode, TraceUnsignedBaseType_t uxParam1, TraceUnsignedBaseType_t uxParam2, TraceUnsignedBaseType_t uxParam3)
{
 800dc14:	b580      	push	{r7, lr}
 800dc16:	b08c      	sub	sp, #48	@ 0x30
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	60f8      	str	r0, [r7, #12]
 800dc1c:	60b9      	str	r1, [r7, #8]
 800dc1e:	607a      	str	r2, [r7, #4]
 800dc20:	603b      	str	r3, [r7, #0]
	TraceEvent3_t* pxEventData = (void*)0;
 800dc22:	2300      	movs	r3, #0
 800dc24:	61bb      	str	r3, [r7, #24]
	int32_t iBytesCommitted = 0;
 800dc26:	2300      	movs	r3, #0
 800dc28:	617b      	str	r3, [r7, #20]

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_EVENT_BEGIN(sizeof(TraceEvent3_t));
 800dc2a:	4b38      	ldr	r3, [pc, #224]	@ (800dd0c <xTraceEventCreate3+0xf8>)
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	f003 0301 	and.w	r3, r3, #1
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d004      	beq.n	800dc40 <xTraceEventCreate3+0x2c>
 800dc36:	4b36      	ldr	r3, [pc, #216]	@ (800dd10 <xTraceEventCreate3+0xfc>)
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	685b      	ldr	r3, [r3, #4]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d101      	bne.n	800dc44 <xTraceEventCreate3+0x30>
 800dc40:	2301      	movs	r3, #1
 800dc42:	e05e      	b.n	800dd02 <xTraceEventCreate3+0xee>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc44:	f3ef 8310 	mrs	r3, PRIMASK
 800dc48:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800dc4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dc4e:	2301      	movs	r3, #1
 800dc50:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc54:	f383 8810 	msr	PRIMASK, r3
}
 800dc58:	bf00      	nop
 800dc5a:	4b2e      	ldr	r3, [pc, #184]	@ (800dd14 <xTraceEventCreate3+0x100>)
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	681a      	ldr	r2, [r3, #0]
 800dc60:	3201      	adds	r2, #1
 800dc62:	601a      	str	r2, [r3, #0]
 800dc64:	4b2c      	ldr	r3, [pc, #176]	@ (800dd18 <xTraceEventCreate3+0x104>)
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	f107 0218 	add.w	r2, r7, #24
 800dc6e:	2114      	movs	r1, #20
 800dc70:	4618      	mov	r0, r3
 800dc72:	f000 fdb7 	bl	800e7e4 <xTraceEventBufferAlloc>
 800dc76:	4603      	mov	r3, r0
 800dc78:	2b01      	cmp	r3, #1
 800dc7a:	d107      	bne.n	800dc8c <xTraceEventCreate3+0x78>
 800dc7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc7e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc80:	6a3b      	ldr	r3, [r7, #32]
 800dc82:	f383 8810 	msr	PRIMASK, r3
}
 800dc86:	bf00      	nop
 800dc88:	2301      	movs	r3, #1
 800dc8a:	e03a      	b.n	800dd02 <xTraceEventCreate3+0xee>
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	b29a      	uxth	r2, r3
 800dc90:	69bb      	ldr	r3, [r7, #24]
 800dc92:	f442 5240 	orr.w	r2, r2, #12288	@ 0x3000
 800dc96:	b292      	uxth	r2, r2
 800dc98:	801a      	strh	r2, [r3, #0]
 800dc9a:	4b1e      	ldr	r3, [pc, #120]	@ (800dd14 <xTraceEventCreate3+0x100>)
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	681a      	ldr	r2, [r3, #0]
 800dca0:	69bb      	ldr	r3, [r7, #24]
 800dca2:	b292      	uxth	r2, r2
 800dca4:	805a      	strh	r2, [r3, #2]
 800dca6:	4a1d      	ldr	r2, [pc, #116]	@ (800dd1c <xTraceEventCreate3+0x108>)
 800dca8:	69bb      	ldr	r3, [r7, #24]
 800dcaa:	6812      	ldr	r2, [r2, #0]
 800dcac:	605a      	str	r2, [r3, #4]
 800dcae:	69bb      	ldr	r3, [r7, #24]
 800dcb0:	685a      	ldr	r2, [r3, #4]
 800dcb2:	4b1b      	ldr	r3, [pc, #108]	@ (800dd20 <xTraceEventCreate3+0x10c>)
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	695b      	ldr	r3, [r3, #20]
 800dcb8:	429a      	cmp	r2, r3
 800dcba:	d204      	bcs.n	800dcc6 <xTraceEventCreate3+0xb2>
 800dcbc:	4b18      	ldr	r3, [pc, #96]	@ (800dd20 <xTraceEventCreate3+0x10c>)
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	68da      	ldr	r2, [r3, #12]
 800dcc2:	3201      	adds	r2, #1
 800dcc4:	60da      	str	r2, [r3, #12]
 800dcc6:	69ba      	ldr	r2, [r7, #24]
 800dcc8:	4b15      	ldr	r3, [pc, #84]	@ (800dd20 <xTraceEventCreate3+0x10c>)
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	6852      	ldr	r2, [r2, #4]
 800dcce:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_3(uxParam1, uxParam2, uxParam3);
 800dcd0:	69bb      	ldr	r3, [r7, #24]
 800dcd2:	68ba      	ldr	r2, [r7, #8]
 800dcd4:	609a      	str	r2, [r3, #8]
 800dcd6:	69bb      	ldr	r3, [r7, #24]
 800dcd8:	687a      	ldr	r2, [r7, #4]
 800dcda:	60da      	str	r2, [r3, #12]
 800dcdc:	69bb      	ldr	r3, [r7, #24]
 800dcde:	683a      	ldr	r2, [r7, #0]
 800dce0:	611a      	str	r2, [r3, #16]

	TRACE_EVENT_END(sizeof(TraceEvent3_t));
 800dce2:	4b0d      	ldr	r3, [pc, #52]	@ (800dd18 <xTraceEventCreate3+0x104>)
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	6818      	ldr	r0, [r3, #0]
 800dce8:	69b9      	ldr	r1, [r7, #24]
 800dcea:	f107 0314 	add.w	r3, r7, #20
 800dcee:	2214      	movs	r2, #20
 800dcf0:	f000 fe90 	bl	800ea14 <xTraceEventBufferAllocCommit>
 800dcf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcf6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dcf8:	69fb      	ldr	r3, [r7, #28]
 800dcfa:	f383 8810 	msr	PRIMASK, r3
}
 800dcfe:	bf00      	nop

	return TRC_SUCCESS;
 800dd00:	2300      	movs	r3, #0
}
 800dd02:	4618      	mov	r0, r3
 800dd04:	3730      	adds	r7, #48	@ 0x30
 800dd06:	46bd      	mov	sp, r7
 800dd08:	bd80      	pop	{r7, pc}
 800dd0a:	bf00      	nop
 800dd0c:	20017418 	.word	0x20017418
 800dd10:	20017410 	.word	0x20017410
 800dd14:	20012d58 	.word	0x20012d58
 800dd18:	20012d40 	.word	0x20012d40
 800dd1c:	e0001004 	.word	0xe0001004
 800dd20:	20017420 	.word	0x20017420

0800dd24 <xTraceEventCreate4>:

traceResult xTraceEventCreate4(uint32_t uiEventCode, TraceUnsignedBaseType_t uxParam1, TraceUnsignedBaseType_t uxParam2, TraceUnsignedBaseType_t uxParam3, TraceUnsignedBaseType_t uxParam4)
{
 800dd24:	b580      	push	{r7, lr}
 800dd26:	b08c      	sub	sp, #48	@ 0x30
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	60f8      	str	r0, [r7, #12]
 800dd2c:	60b9      	str	r1, [r7, #8]
 800dd2e:	607a      	str	r2, [r7, #4]
 800dd30:	603b      	str	r3, [r7, #0]
	TraceEvent4_t* pxEventData = (void*)0;
 800dd32:	2300      	movs	r3, #0
 800dd34:	61bb      	str	r3, [r7, #24]
	int32_t iBytesCommitted = 0;
 800dd36:	2300      	movs	r3, #0
 800dd38:	617b      	str	r3, [r7, #20]

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_EVENT_BEGIN(sizeof(TraceEvent4_t));
 800dd3a:	4b39      	ldr	r3, [pc, #228]	@ (800de20 <xTraceEventCreate4+0xfc>)
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	f003 0301 	and.w	r3, r3, #1
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d004      	beq.n	800dd50 <xTraceEventCreate4+0x2c>
 800dd46:	4b37      	ldr	r3, [pc, #220]	@ (800de24 <xTraceEventCreate4+0x100>)
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	685b      	ldr	r3, [r3, #4]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d101      	bne.n	800dd54 <xTraceEventCreate4+0x30>
 800dd50:	2301      	movs	r3, #1
 800dd52:	e061      	b.n	800de18 <xTraceEventCreate4+0xf4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dd54:	f3ef 8310 	mrs	r3, PRIMASK
 800dd58:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800dd5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dd5e:	2301      	movs	r3, #1
 800dd60:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd64:	f383 8810 	msr	PRIMASK, r3
}
 800dd68:	bf00      	nop
 800dd6a:	4b2f      	ldr	r3, [pc, #188]	@ (800de28 <xTraceEventCreate4+0x104>)
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	681a      	ldr	r2, [r3, #0]
 800dd70:	3201      	adds	r2, #1
 800dd72:	601a      	str	r2, [r3, #0]
 800dd74:	4b2d      	ldr	r3, [pc, #180]	@ (800de2c <xTraceEventCreate4+0x108>)
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	f107 0218 	add.w	r2, r7, #24
 800dd7e:	2118      	movs	r1, #24
 800dd80:	4618      	mov	r0, r3
 800dd82:	f000 fd2f 	bl	800e7e4 <xTraceEventBufferAlloc>
 800dd86:	4603      	mov	r3, r0
 800dd88:	2b01      	cmp	r3, #1
 800dd8a:	d107      	bne.n	800dd9c <xTraceEventCreate4+0x78>
 800dd8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd8e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd90:	6a3b      	ldr	r3, [r7, #32]
 800dd92:	f383 8810 	msr	PRIMASK, r3
}
 800dd96:	bf00      	nop
 800dd98:	2301      	movs	r3, #1
 800dd9a:	e03d      	b.n	800de18 <xTraceEventCreate4+0xf4>
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	b29a      	uxth	r2, r3
 800dda0:	69bb      	ldr	r3, [r7, #24]
 800dda2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800dda6:	b292      	uxth	r2, r2
 800dda8:	801a      	strh	r2, [r3, #0]
 800ddaa:	4b1f      	ldr	r3, [pc, #124]	@ (800de28 <xTraceEventCreate4+0x104>)
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	681a      	ldr	r2, [r3, #0]
 800ddb0:	69bb      	ldr	r3, [r7, #24]
 800ddb2:	b292      	uxth	r2, r2
 800ddb4:	805a      	strh	r2, [r3, #2]
 800ddb6:	4a1e      	ldr	r2, [pc, #120]	@ (800de30 <xTraceEventCreate4+0x10c>)
 800ddb8:	69bb      	ldr	r3, [r7, #24]
 800ddba:	6812      	ldr	r2, [r2, #0]
 800ddbc:	605a      	str	r2, [r3, #4]
 800ddbe:	69bb      	ldr	r3, [r7, #24]
 800ddc0:	685a      	ldr	r2, [r3, #4]
 800ddc2:	4b1c      	ldr	r3, [pc, #112]	@ (800de34 <xTraceEventCreate4+0x110>)
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	695b      	ldr	r3, [r3, #20]
 800ddc8:	429a      	cmp	r2, r3
 800ddca:	d204      	bcs.n	800ddd6 <xTraceEventCreate4+0xb2>
 800ddcc:	4b19      	ldr	r3, [pc, #100]	@ (800de34 <xTraceEventCreate4+0x110>)
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	68da      	ldr	r2, [r3, #12]
 800ddd2:	3201      	adds	r2, #1
 800ddd4:	60da      	str	r2, [r3, #12]
 800ddd6:	69ba      	ldr	r2, [r7, #24]
 800ddd8:	4b16      	ldr	r3, [pc, #88]	@ (800de34 <xTraceEventCreate4+0x110>)
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	6852      	ldr	r2, [r2, #4]
 800ddde:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_4(uxParam1, uxParam2, uxParam3, uxParam4);
 800dde0:	69bb      	ldr	r3, [r7, #24]
 800dde2:	68ba      	ldr	r2, [r7, #8]
 800dde4:	609a      	str	r2, [r3, #8]
 800dde6:	69bb      	ldr	r3, [r7, #24]
 800dde8:	687a      	ldr	r2, [r7, #4]
 800ddea:	60da      	str	r2, [r3, #12]
 800ddec:	69bb      	ldr	r3, [r7, #24]
 800ddee:	683a      	ldr	r2, [r7, #0]
 800ddf0:	611a      	str	r2, [r3, #16]
 800ddf2:	69bb      	ldr	r3, [r7, #24]
 800ddf4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ddf6:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_END(sizeof(TraceEvent4_t));
 800ddf8:	4b0c      	ldr	r3, [pc, #48]	@ (800de2c <xTraceEventCreate4+0x108>)
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	6818      	ldr	r0, [r3, #0]
 800ddfe:	69b9      	ldr	r1, [r7, #24]
 800de00:	f107 0314 	add.w	r3, r7, #20
 800de04:	2218      	movs	r2, #24
 800de06:	f000 fe05 	bl	800ea14 <xTraceEventBufferAllocCommit>
 800de0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de0c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de0e:	69fb      	ldr	r3, [r7, #28]
 800de10:	f383 8810 	msr	PRIMASK, r3
}
 800de14:	bf00      	nop

	return TRC_SUCCESS;
 800de16:	2300      	movs	r3, #0
}
 800de18:	4618      	mov	r0, r3
 800de1a:	3730      	adds	r7, #48	@ 0x30
 800de1c:	46bd      	mov	sp, r7
 800de1e:	bd80      	pop	{r7, pc}
 800de20:	20017418 	.word	0x20017418
 800de24:	20017410 	.word	0x20017410
 800de28:	20012d58 	.word	0x20012d58
 800de2c:	20012d40 	.word	0x20012d40
 800de30:	e0001004 	.word	0xe0001004
 800de34:	20017420 	.word	0x20017420

0800de38 <xTraceEventCreateDataOffline0>:

	return TRC_SUCCESS;
}

traceResult xTraceEventCreateDataOffline0(uint32_t uiEventCode, const TraceUnsignedBaseType_t* const puxData, TraceUnsignedBaseType_t uxSize)
{
 800de38:	b580      	push	{r7, lr}
 800de3a:	b08c      	sub	sp, #48	@ 0x30
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	60f8      	str	r0, [r7, #12]
 800de40:	60b9      	str	r1, [r7, #8]
 800de42:	607a      	str	r2, [r7, #4]
	TraceEvent0_t* pxEventData = (void*)0;
 800de44:	2300      	movs	r3, #0
 800de46:	61bb      	str	r3, [r7, #24]
	int32_t iBytesCommitted = 0;
 800de48:	2300      	movs	r3, #0
 800de4a:	617b      	str	r3, [r7, #20]

	TRACE_ALLOC_CRITICAL_SECTION();

	/* Align payload size and truncate in case it is too big */
	uxSize = TRC_ALIGN_CEIL(uxSize, sizeof(TraceUnsignedBaseType_t));
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	3303      	adds	r3, #3
 800de50:	f023 0303 	bic.w	r3, r3, #3
 800de54:	607b      	str	r3, [r7, #4]
	if (sizeof(TraceEvent0_t) + uxSize > TRC_MAX_BLOB_SIZE)
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	3308      	adds	r3, #8
 800de5a:	2b40      	cmp	r3, #64	@ 0x40
 800de5c:	d901      	bls.n	800de62 <xTraceEventCreateDataOffline0+0x2a>
	{
		uxSize = TRC_MAX_BLOB_SIZE - sizeof(TraceEvent0_t);
 800de5e:	2338      	movs	r3, #56	@ 0x38
 800de60:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800de62:	f3ef 8310 	mrs	r3, PRIMASK
 800de66:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800de68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}

	TRACE_EVENT_BEGIN_OFFLINE(sizeof(TraceEvent0_t) + uxSize);
 800de6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800de6c:	2301      	movs	r3, #1
 800de6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de72:	f383 8810 	msr	PRIMASK, r3
}
 800de76:	bf00      	nop
 800de78:	4b2e      	ldr	r3, [pc, #184]	@ (800df34 <xTraceEventCreateDataOffline0+0xfc>)
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	681a      	ldr	r2, [r3, #0]
 800de7e:	3201      	adds	r2, #1
 800de80:	601a      	str	r2, [r3, #0]
 800de82:	4b2d      	ldr	r3, [pc, #180]	@ (800df38 <xTraceEventCreateDataOffline0+0x100>)
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	6818      	ldr	r0, [r3, #0]
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	3308      	adds	r3, #8
 800de8c:	f107 0218 	add.w	r2, r7, #24
 800de90:	4619      	mov	r1, r3
 800de92:	f000 fca7 	bl	800e7e4 <xTraceEventBufferAlloc>
 800de96:	4603      	mov	r3, r0
 800de98:	2b01      	cmp	r3, #1
 800de9a:	d107      	bne.n	800deac <xTraceEventCreateDataOffline0+0x74>
 800de9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de9e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dea0:	6a3b      	ldr	r3, [r7, #32]
 800dea2:	f383 8810 	msr	PRIMASK, r3
}
 800dea6:	bf00      	nop
 800dea8:	2301      	movs	r3, #1
 800deaa:	e03f      	b.n	800df2c <xTraceEventCreateDataOffline0+0xf4>
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	b21a      	sxth	r2, r3
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	089b      	lsrs	r3, r3, #2
 800deb4:	b29b      	uxth	r3, r3
 800deb6:	031b      	lsls	r3, r3, #12
 800deb8:	b21b      	sxth	r3, r3
 800deba:	4313      	orrs	r3, r2
 800debc:	b21a      	sxth	r2, r3
 800debe:	69bb      	ldr	r3, [r7, #24]
 800dec0:	b292      	uxth	r2, r2
 800dec2:	801a      	strh	r2, [r3, #0]
 800dec4:	4b1b      	ldr	r3, [pc, #108]	@ (800df34 <xTraceEventCreateDataOffline0+0xfc>)
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	681a      	ldr	r2, [r3, #0]
 800deca:	69bb      	ldr	r3, [r7, #24]
 800decc:	b292      	uxth	r2, r2
 800dece:	805a      	strh	r2, [r3, #2]
 800ded0:	4a1a      	ldr	r2, [pc, #104]	@ (800df3c <xTraceEventCreateDataOffline0+0x104>)
 800ded2:	69bb      	ldr	r3, [r7, #24]
 800ded4:	6812      	ldr	r2, [r2, #0]
 800ded6:	605a      	str	r2, [r3, #4]
 800ded8:	69bb      	ldr	r3, [r7, #24]
 800deda:	685a      	ldr	r2, [r3, #4]
 800dedc:	4b18      	ldr	r3, [pc, #96]	@ (800df40 <xTraceEventCreateDataOffline0+0x108>)
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	695b      	ldr	r3, [r3, #20]
 800dee2:	429a      	cmp	r2, r3
 800dee4:	d204      	bcs.n	800def0 <xTraceEventCreateDataOffline0+0xb8>
 800dee6:	4b16      	ldr	r3, [pc, #88]	@ (800df40 <xTraceEventCreateDataOffline0+0x108>)
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	68da      	ldr	r2, [r3, #12]
 800deec:	3201      	adds	r2, #1
 800deee:	60da      	str	r2, [r3, #12]
 800def0:	69ba      	ldr	r2, [r7, #24]
 800def2:	4b13      	ldr	r3, [pc, #76]	@ (800df40 <xTraceEventCreateDataOffline0+0x108>)
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	6852      	ldr	r2, [r2, #4]
 800def8:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_0_DATA(puxData, uxSize);
 800defa:	69bb      	ldr	r3, [r7, #24]
 800defc:	3308      	adds	r3, #8
 800defe:	687a      	ldr	r2, [r7, #4]
 800df00:	68b9      	ldr	r1, [r7, #8]
 800df02:	4618      	mov	r0, r3
 800df04:	f002 f8c8 	bl	8010098 <memcpy>

	TRACE_EVENT_END(sizeof(TraceEvent0_t) + uxSize);
 800df08:	4b0b      	ldr	r3, [pc, #44]	@ (800df38 <xTraceEventCreateDataOffline0+0x100>)
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	6818      	ldr	r0, [r3, #0]
 800df0e:	69b9      	ldr	r1, [r7, #24]
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	f103 0208 	add.w	r2, r3, #8
 800df16:	f107 0314 	add.w	r3, r7, #20
 800df1a:	f000 fd7b 	bl	800ea14 <xTraceEventBufferAllocCommit>
 800df1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df20:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df22:	69fb      	ldr	r3, [r7, #28]
 800df24:	f383 8810 	msr	PRIMASK, r3
}
 800df28:	bf00      	nop

	return TRC_SUCCESS;
 800df2a:	2300      	movs	r3, #0
}
 800df2c:	4618      	mov	r0, r3
 800df2e:	3730      	adds	r7, #48	@ 0x30
 800df30:	46bd      	mov	sp, r7
 800df32:	bd80      	pop	{r7, pc}
 800df34:	20012d58 	.word	0x20012d58
 800df38:	20012d40 	.word	0x20012d40
 800df3c:	e0001004 	.word	0xe0001004
 800df40:	20017420 	.word	0x20017420

0800df44 <xTraceEventCreateData1>:
	uint32_t uiEventCode,
	TraceUnsignedBaseType_t uxParam1,
	const TraceUnsignedBaseType_t* const puxData,
	TraceUnsignedBaseType_t uxSize
)
{
 800df44:	b580      	push	{r7, lr}
 800df46:	b08c      	sub	sp, #48	@ 0x30
 800df48:	af00      	add	r7, sp, #0
 800df4a:	60f8      	str	r0, [r7, #12]
 800df4c:	60b9      	str	r1, [r7, #8]
 800df4e:	607a      	str	r2, [r7, #4]
 800df50:	603b      	str	r3, [r7, #0]
	TraceEvent1_t* pxEventData = (void*)0;
 800df52:	2300      	movs	r3, #0
 800df54:	61bb      	str	r3, [r7, #24]
	int32_t iBytesCommitted = 0;
 800df56:	2300      	movs	r3, #0
 800df58:	617b      	str	r3, [r7, #20]

	TRACE_ALLOC_CRITICAL_SECTION();

	/* Align payload size and truncate in case it is too big */
	uxSize = TRC_ALIGN_CEIL(uxSize, sizeof(TraceUnsignedBaseType_t));
 800df5a:	683b      	ldr	r3, [r7, #0]
 800df5c:	3303      	adds	r3, #3
 800df5e:	f023 0303 	bic.w	r3, r3, #3
 800df62:	603b      	str	r3, [r7, #0]
	if (sizeof(TraceEvent1_t) + uxSize > TRC_MAX_BLOB_SIZE)
 800df64:	683b      	ldr	r3, [r7, #0]
 800df66:	330c      	adds	r3, #12
 800df68:	2b40      	cmp	r3, #64	@ 0x40
 800df6a:	d901      	bls.n	800df70 <xTraceEventCreateData1+0x2c>
	{
		uxSize = TRC_MAX_BLOB_SIZE - sizeof(TraceEvent1_t);
 800df6c:	2334      	movs	r3, #52	@ 0x34
 800df6e:	603b      	str	r3, [r7, #0]
	}

	TRACE_EVENT_BEGIN(sizeof(TraceEvent1_t) + uxSize);
 800df70:	4b3c      	ldr	r3, [pc, #240]	@ (800e064 <xTraceEventCreateData1+0x120>)
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	f003 0301 	and.w	r3, r3, #1
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d004      	beq.n	800df86 <xTraceEventCreateData1+0x42>
 800df7c:	4b3a      	ldr	r3, [pc, #232]	@ (800e068 <xTraceEventCreateData1+0x124>)
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	685b      	ldr	r3, [r3, #4]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d101      	bne.n	800df8a <xTraceEventCreateData1+0x46>
 800df86:	2301      	movs	r3, #1
 800df88:	e068      	b.n	800e05c <xTraceEventCreateData1+0x118>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800df8a:	f3ef 8310 	mrs	r3, PRIMASK
 800df8e:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800df90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800df94:	2301      	movs	r3, #1
 800df96:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df9a:	f383 8810 	msr	PRIMASK, r3
}
 800df9e:	bf00      	nop
 800dfa0:	4b32      	ldr	r3, [pc, #200]	@ (800e06c <xTraceEventCreateData1+0x128>)
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	681a      	ldr	r2, [r3, #0]
 800dfa6:	3201      	adds	r2, #1
 800dfa8:	601a      	str	r2, [r3, #0]
 800dfaa:	4b31      	ldr	r3, [pc, #196]	@ (800e070 <xTraceEventCreateData1+0x12c>)
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	6818      	ldr	r0, [r3, #0]
 800dfb0:	683b      	ldr	r3, [r7, #0]
 800dfb2:	330c      	adds	r3, #12
 800dfb4:	f107 0218 	add.w	r2, r7, #24
 800dfb8:	4619      	mov	r1, r3
 800dfba:	f000 fc13 	bl	800e7e4 <xTraceEventBufferAlloc>
 800dfbe:	4603      	mov	r3, r0
 800dfc0:	2b01      	cmp	r3, #1
 800dfc2:	d107      	bne.n	800dfd4 <xTraceEventCreateData1+0x90>
 800dfc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfc6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dfc8:	6a3b      	ldr	r3, [r7, #32]
 800dfca:	f383 8810 	msr	PRIMASK, r3
}
 800dfce:	bf00      	nop
 800dfd0:	2301      	movs	r3, #1
 800dfd2:	e043      	b.n	800e05c <xTraceEventCreateData1+0x118>
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	b21a      	sxth	r2, r3
 800dfd8:	683b      	ldr	r3, [r7, #0]
 800dfda:	3304      	adds	r3, #4
 800dfdc:	089b      	lsrs	r3, r3, #2
 800dfde:	b29b      	uxth	r3, r3
 800dfe0:	031b      	lsls	r3, r3, #12
 800dfe2:	b21b      	sxth	r3, r3
 800dfe4:	4313      	orrs	r3, r2
 800dfe6:	b21a      	sxth	r2, r3
 800dfe8:	69bb      	ldr	r3, [r7, #24]
 800dfea:	b292      	uxth	r2, r2
 800dfec:	801a      	strh	r2, [r3, #0]
 800dfee:	4b1f      	ldr	r3, [pc, #124]	@ (800e06c <xTraceEventCreateData1+0x128>)
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	681a      	ldr	r2, [r3, #0]
 800dff4:	69bb      	ldr	r3, [r7, #24]
 800dff6:	b292      	uxth	r2, r2
 800dff8:	805a      	strh	r2, [r3, #2]
 800dffa:	4a1e      	ldr	r2, [pc, #120]	@ (800e074 <xTraceEventCreateData1+0x130>)
 800dffc:	69bb      	ldr	r3, [r7, #24]
 800dffe:	6812      	ldr	r2, [r2, #0]
 800e000:	605a      	str	r2, [r3, #4]
 800e002:	69bb      	ldr	r3, [r7, #24]
 800e004:	685a      	ldr	r2, [r3, #4]
 800e006:	4b1c      	ldr	r3, [pc, #112]	@ (800e078 <xTraceEventCreateData1+0x134>)
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	695b      	ldr	r3, [r3, #20]
 800e00c:	429a      	cmp	r2, r3
 800e00e:	d204      	bcs.n	800e01a <xTraceEventCreateData1+0xd6>
 800e010:	4b19      	ldr	r3, [pc, #100]	@ (800e078 <xTraceEventCreateData1+0x134>)
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	68da      	ldr	r2, [r3, #12]
 800e016:	3201      	adds	r2, #1
 800e018:	60da      	str	r2, [r3, #12]
 800e01a:	69ba      	ldr	r2, [r7, #24]
 800e01c:	4b16      	ldr	r3, [pc, #88]	@ (800e078 <xTraceEventCreateData1+0x134>)
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	6852      	ldr	r2, [r2, #4]
 800e022:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_1_DATA(uxParam1, puxData, uxSize);
 800e024:	69bb      	ldr	r3, [r7, #24]
 800e026:	68ba      	ldr	r2, [r7, #8]
 800e028:	609a      	str	r2, [r3, #8]
 800e02a:	69bb      	ldr	r3, [r7, #24]
 800e02c:	330c      	adds	r3, #12
 800e02e:	683a      	ldr	r2, [r7, #0]
 800e030:	6879      	ldr	r1, [r7, #4]
 800e032:	4618      	mov	r0, r3
 800e034:	f002 f830 	bl	8010098 <memcpy>

	TRACE_EVENT_END(sizeof(TraceEvent1_t) + uxSize);
 800e038:	4b0d      	ldr	r3, [pc, #52]	@ (800e070 <xTraceEventCreateData1+0x12c>)
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	6818      	ldr	r0, [r3, #0]
 800e03e:	69b9      	ldr	r1, [r7, #24]
 800e040:	683b      	ldr	r3, [r7, #0]
 800e042:	f103 020c 	add.w	r2, r3, #12
 800e046:	f107 0314 	add.w	r3, r7, #20
 800e04a:	f000 fce3 	bl	800ea14 <xTraceEventBufferAllocCommit>
 800e04e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e050:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e052:	69fb      	ldr	r3, [r7, #28]
 800e054:	f383 8810 	msr	PRIMASK, r3
}
 800e058:	bf00      	nop

	return TRC_SUCCESS;
 800e05a:	2300      	movs	r3, #0
}
 800e05c:	4618      	mov	r0, r3
 800e05e:	3730      	adds	r7, #48	@ 0x30
 800e060:	46bd      	mov	sp, r7
 800e062:	bd80      	pop	{r7, pc}
 800e064:	20017418 	.word	0x20017418
 800e068:	20017410 	.word	0x20017410
 800e06c:	20012d58 	.word	0x20012d58
 800e070:	20012d40 	.word	0x20012d40
 800e074:	e0001004 	.word	0xe0001004
 800e078:	20017420 	.word	0x20017420

0800e07c <xTraceEventCreateData2>:
	TraceUnsignedBaseType_t uxParam1,
	TraceUnsignedBaseType_t uxParam2,
	const TraceUnsignedBaseType_t* const puxData,
	TraceUnsignedBaseType_t uxSize
)
{
 800e07c:	b580      	push	{r7, lr}
 800e07e:	b08c      	sub	sp, #48	@ 0x30
 800e080:	af00      	add	r7, sp, #0
 800e082:	60f8      	str	r0, [r7, #12]
 800e084:	60b9      	str	r1, [r7, #8]
 800e086:	607a      	str	r2, [r7, #4]
 800e088:	603b      	str	r3, [r7, #0]
	TraceEvent2_t* pxEventData = (void*)0;
 800e08a:	2300      	movs	r3, #0
 800e08c:	61bb      	str	r3, [r7, #24]
	int32_t iBytesCommitted = 0;
 800e08e:	2300      	movs	r3, #0
 800e090:	617b      	str	r3, [r7, #20]

	TRACE_ALLOC_CRITICAL_SECTION();

	/* Align payload size and truncate in case it is too big */
	uxSize = TRC_ALIGN_CEIL(uxSize, sizeof(TraceUnsignedBaseType_t));
 800e092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e094:	3303      	adds	r3, #3
 800e096:	f023 0303 	bic.w	r3, r3, #3
 800e09a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (sizeof(TraceEvent2_t) + uxSize > TRC_MAX_BLOB_SIZE)
 800e09c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e09e:	3310      	adds	r3, #16
 800e0a0:	2b40      	cmp	r3, #64	@ 0x40
 800e0a2:	d901      	bls.n	800e0a8 <xTraceEventCreateData2+0x2c>
	{
		uxSize = TRC_MAX_BLOB_SIZE - sizeof(TraceEvent2_t);
 800e0a4:	2330      	movs	r3, #48	@ 0x30
 800e0a6:	63bb      	str	r3, [r7, #56]	@ 0x38
	}

	TRACE_EVENT_BEGIN(sizeof(TraceEvent2_t) + uxSize);
 800e0a8:	4b3e      	ldr	r3, [pc, #248]	@ (800e1a4 <xTraceEventCreateData2+0x128>)
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	f003 0301 	and.w	r3, r3, #1
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d004      	beq.n	800e0be <xTraceEventCreateData2+0x42>
 800e0b4:	4b3c      	ldr	r3, [pc, #240]	@ (800e1a8 <xTraceEventCreateData2+0x12c>)
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	685b      	ldr	r3, [r3, #4]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d101      	bne.n	800e0c2 <xTraceEventCreateData2+0x46>
 800e0be:	2301      	movs	r3, #1
 800e0c0:	e06b      	b.n	800e19a <xTraceEventCreateData2+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e0c2:	f3ef 8310 	mrs	r3, PRIMASK
 800e0c6:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800e0c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e0cc:	2301      	movs	r3, #1
 800e0ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e0d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0d2:	f383 8810 	msr	PRIMASK, r3
}
 800e0d6:	bf00      	nop
 800e0d8:	4b34      	ldr	r3, [pc, #208]	@ (800e1ac <xTraceEventCreateData2+0x130>)
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	681a      	ldr	r2, [r3, #0]
 800e0de:	3201      	adds	r2, #1
 800e0e0:	601a      	str	r2, [r3, #0]
 800e0e2:	4b33      	ldr	r3, [pc, #204]	@ (800e1b0 <xTraceEventCreateData2+0x134>)
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	6818      	ldr	r0, [r3, #0]
 800e0e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0ea:	3310      	adds	r3, #16
 800e0ec:	f107 0218 	add.w	r2, r7, #24
 800e0f0:	4619      	mov	r1, r3
 800e0f2:	f000 fb77 	bl	800e7e4 <xTraceEventBufferAlloc>
 800e0f6:	4603      	mov	r3, r0
 800e0f8:	2b01      	cmp	r3, #1
 800e0fa:	d107      	bne.n	800e10c <xTraceEventCreateData2+0x90>
 800e0fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0fe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e100:	6a3b      	ldr	r3, [r7, #32]
 800e102:	f383 8810 	msr	PRIMASK, r3
}
 800e106:	bf00      	nop
 800e108:	2301      	movs	r3, #1
 800e10a:	e046      	b.n	800e19a <xTraceEventCreateData2+0x11e>
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	b21a      	sxth	r2, r3
 800e110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e112:	3308      	adds	r3, #8
 800e114:	089b      	lsrs	r3, r3, #2
 800e116:	b29b      	uxth	r3, r3
 800e118:	031b      	lsls	r3, r3, #12
 800e11a:	b21b      	sxth	r3, r3
 800e11c:	4313      	orrs	r3, r2
 800e11e:	b21a      	sxth	r2, r3
 800e120:	69bb      	ldr	r3, [r7, #24]
 800e122:	b292      	uxth	r2, r2
 800e124:	801a      	strh	r2, [r3, #0]
 800e126:	4b21      	ldr	r3, [pc, #132]	@ (800e1ac <xTraceEventCreateData2+0x130>)
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	681a      	ldr	r2, [r3, #0]
 800e12c:	69bb      	ldr	r3, [r7, #24]
 800e12e:	b292      	uxth	r2, r2
 800e130:	805a      	strh	r2, [r3, #2]
 800e132:	4a20      	ldr	r2, [pc, #128]	@ (800e1b4 <xTraceEventCreateData2+0x138>)
 800e134:	69bb      	ldr	r3, [r7, #24]
 800e136:	6812      	ldr	r2, [r2, #0]
 800e138:	605a      	str	r2, [r3, #4]
 800e13a:	69bb      	ldr	r3, [r7, #24]
 800e13c:	685a      	ldr	r2, [r3, #4]
 800e13e:	4b1e      	ldr	r3, [pc, #120]	@ (800e1b8 <xTraceEventCreateData2+0x13c>)
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	695b      	ldr	r3, [r3, #20]
 800e144:	429a      	cmp	r2, r3
 800e146:	d204      	bcs.n	800e152 <xTraceEventCreateData2+0xd6>
 800e148:	4b1b      	ldr	r3, [pc, #108]	@ (800e1b8 <xTraceEventCreateData2+0x13c>)
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	68da      	ldr	r2, [r3, #12]
 800e14e:	3201      	adds	r2, #1
 800e150:	60da      	str	r2, [r3, #12]
 800e152:	69ba      	ldr	r2, [r7, #24]
 800e154:	4b18      	ldr	r3, [pc, #96]	@ (800e1b8 <xTraceEventCreateData2+0x13c>)
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	6852      	ldr	r2, [r2, #4]
 800e15a:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_2_DATA(uxParam1, uxParam2, puxData, uxSize);
 800e15c:	69bb      	ldr	r3, [r7, #24]
 800e15e:	68ba      	ldr	r2, [r7, #8]
 800e160:	609a      	str	r2, [r3, #8]
 800e162:	69bb      	ldr	r3, [r7, #24]
 800e164:	687a      	ldr	r2, [r7, #4]
 800e166:	60da      	str	r2, [r3, #12]
 800e168:	69bb      	ldr	r3, [r7, #24]
 800e16a:	3310      	adds	r3, #16
 800e16c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e16e:	6839      	ldr	r1, [r7, #0]
 800e170:	4618      	mov	r0, r3
 800e172:	f001 ff91 	bl	8010098 <memcpy>

	TRACE_EVENT_END(sizeof(TraceEvent2_t) + uxSize);
 800e176:	4b0e      	ldr	r3, [pc, #56]	@ (800e1b0 <xTraceEventCreateData2+0x134>)
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	6818      	ldr	r0, [r3, #0]
 800e17c:	69b9      	ldr	r1, [r7, #24]
 800e17e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e180:	f103 0210 	add.w	r2, r3, #16
 800e184:	f107 0314 	add.w	r3, r7, #20
 800e188:	f000 fc44 	bl	800ea14 <xTraceEventBufferAllocCommit>
 800e18c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e18e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e190:	69fb      	ldr	r3, [r7, #28]
 800e192:	f383 8810 	msr	PRIMASK, r3
}
 800e196:	bf00      	nop

	return TRC_SUCCESS;
 800e198:	2300      	movs	r3, #0
}
 800e19a:	4618      	mov	r0, r3
 800e19c:	3730      	adds	r7, #48	@ 0x30
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	bd80      	pop	{r7, pc}
 800e1a2:	bf00      	nop
 800e1a4:	20017418 	.word	0x20017418
 800e1a8:	20017410 	.word	0x20017410
 800e1ac:	20012d58 	.word	0x20012d58
 800e1b0:	20012d40 	.word	0x20012d40
 800e1b4:	e0001004 	.word	0xe0001004
 800e1b8:	20017420 	.word	0x20017420

0800e1bc <xTraceEventCreateData3>:
	TraceUnsignedBaseType_t uxParam2,
	TraceUnsignedBaseType_t uxParam3,
	const TraceUnsignedBaseType_t* const puxData,
	TraceUnsignedBaseType_t uxSize
)
{
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b08c      	sub	sp, #48	@ 0x30
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	60f8      	str	r0, [r7, #12]
 800e1c4:	60b9      	str	r1, [r7, #8]
 800e1c6:	607a      	str	r2, [r7, #4]
 800e1c8:	603b      	str	r3, [r7, #0]
	TraceEvent3_t* pxEventData = (void*)0;
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	61bb      	str	r3, [r7, #24]
	int32_t iBytesCommitted = 0;
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	617b      	str	r3, [r7, #20]

	TRACE_ALLOC_CRITICAL_SECTION();

	/* Align payload size and truncate in case it is too big */
	uxSize = TRC_ALIGN_CEIL(uxSize, sizeof(TraceUnsignedBaseType_t));
 800e1d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e1d4:	3303      	adds	r3, #3
 800e1d6:	f023 0303 	bic.w	r3, r3, #3
 800e1da:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (sizeof(TraceEvent3_t) + uxSize > TRC_MAX_BLOB_SIZE)
 800e1dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e1de:	3314      	adds	r3, #20
 800e1e0:	2b40      	cmp	r3, #64	@ 0x40
 800e1e2:	d901      	bls.n	800e1e8 <xTraceEventCreateData3+0x2c>
	{
		uxSize = TRC_MAX_BLOB_SIZE - sizeof(TraceEvent3_t);
 800e1e4:	232c      	movs	r3, #44	@ 0x2c
 800e1e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	}

	TRACE_EVENT_BEGIN(sizeof(TraceEvent3_t) + uxSize);
 800e1e8:	4b3f      	ldr	r3, [pc, #252]	@ (800e2e8 <xTraceEventCreateData3+0x12c>)
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	f003 0301 	and.w	r3, r3, #1
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d004      	beq.n	800e1fe <xTraceEventCreateData3+0x42>
 800e1f4:	4b3d      	ldr	r3, [pc, #244]	@ (800e2ec <xTraceEventCreateData3+0x130>)
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	685b      	ldr	r3, [r3, #4]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d101      	bne.n	800e202 <xTraceEventCreateData3+0x46>
 800e1fe:	2301      	movs	r3, #1
 800e200:	e06e      	b.n	800e2e0 <xTraceEventCreateData3+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e202:	f3ef 8310 	mrs	r3, PRIMASK
 800e206:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800e208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e20a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e20c:	2301      	movs	r3, #1
 800e20e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e212:	f383 8810 	msr	PRIMASK, r3
}
 800e216:	bf00      	nop
 800e218:	4b35      	ldr	r3, [pc, #212]	@ (800e2f0 <xTraceEventCreateData3+0x134>)
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	681a      	ldr	r2, [r3, #0]
 800e21e:	3201      	adds	r2, #1
 800e220:	601a      	str	r2, [r3, #0]
 800e222:	4b34      	ldr	r3, [pc, #208]	@ (800e2f4 <xTraceEventCreateData3+0x138>)
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	6818      	ldr	r0, [r3, #0]
 800e228:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e22a:	3314      	adds	r3, #20
 800e22c:	f107 0218 	add.w	r2, r7, #24
 800e230:	4619      	mov	r1, r3
 800e232:	f000 fad7 	bl	800e7e4 <xTraceEventBufferAlloc>
 800e236:	4603      	mov	r3, r0
 800e238:	2b01      	cmp	r3, #1
 800e23a:	d107      	bne.n	800e24c <xTraceEventCreateData3+0x90>
 800e23c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e23e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e240:	6a3b      	ldr	r3, [r7, #32]
 800e242:	f383 8810 	msr	PRIMASK, r3
}
 800e246:	bf00      	nop
 800e248:	2301      	movs	r3, #1
 800e24a:	e049      	b.n	800e2e0 <xTraceEventCreateData3+0x124>
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	b21a      	sxth	r2, r3
 800e250:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e252:	330c      	adds	r3, #12
 800e254:	089b      	lsrs	r3, r3, #2
 800e256:	b29b      	uxth	r3, r3
 800e258:	031b      	lsls	r3, r3, #12
 800e25a:	b21b      	sxth	r3, r3
 800e25c:	4313      	orrs	r3, r2
 800e25e:	b21a      	sxth	r2, r3
 800e260:	69bb      	ldr	r3, [r7, #24]
 800e262:	b292      	uxth	r2, r2
 800e264:	801a      	strh	r2, [r3, #0]
 800e266:	4b22      	ldr	r3, [pc, #136]	@ (800e2f0 <xTraceEventCreateData3+0x134>)
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	681a      	ldr	r2, [r3, #0]
 800e26c:	69bb      	ldr	r3, [r7, #24]
 800e26e:	b292      	uxth	r2, r2
 800e270:	805a      	strh	r2, [r3, #2]
 800e272:	4a21      	ldr	r2, [pc, #132]	@ (800e2f8 <xTraceEventCreateData3+0x13c>)
 800e274:	69bb      	ldr	r3, [r7, #24]
 800e276:	6812      	ldr	r2, [r2, #0]
 800e278:	605a      	str	r2, [r3, #4]
 800e27a:	69bb      	ldr	r3, [r7, #24]
 800e27c:	685a      	ldr	r2, [r3, #4]
 800e27e:	4b1f      	ldr	r3, [pc, #124]	@ (800e2fc <xTraceEventCreateData3+0x140>)
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	695b      	ldr	r3, [r3, #20]
 800e284:	429a      	cmp	r2, r3
 800e286:	d204      	bcs.n	800e292 <xTraceEventCreateData3+0xd6>
 800e288:	4b1c      	ldr	r3, [pc, #112]	@ (800e2fc <xTraceEventCreateData3+0x140>)
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	68da      	ldr	r2, [r3, #12]
 800e28e:	3201      	adds	r2, #1
 800e290:	60da      	str	r2, [r3, #12]
 800e292:	69ba      	ldr	r2, [r7, #24]
 800e294:	4b19      	ldr	r3, [pc, #100]	@ (800e2fc <xTraceEventCreateData3+0x140>)
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	6852      	ldr	r2, [r2, #4]
 800e29a:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_3_DATA(uxParam1, uxParam2, uxParam3, puxData, uxSize);
 800e29c:	69bb      	ldr	r3, [r7, #24]
 800e29e:	68ba      	ldr	r2, [r7, #8]
 800e2a0:	609a      	str	r2, [r3, #8]
 800e2a2:	69bb      	ldr	r3, [r7, #24]
 800e2a4:	687a      	ldr	r2, [r7, #4]
 800e2a6:	60da      	str	r2, [r3, #12]
 800e2a8:	69bb      	ldr	r3, [r7, #24]
 800e2aa:	683a      	ldr	r2, [r7, #0]
 800e2ac:	611a      	str	r2, [r3, #16]
 800e2ae:	69bb      	ldr	r3, [r7, #24]
 800e2b0:	3314      	adds	r3, #20
 800e2b2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e2b4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	f001 feee 	bl	8010098 <memcpy>

	TRACE_EVENT_END(sizeof(TraceEvent3_t) + uxSize);
 800e2bc:	4b0d      	ldr	r3, [pc, #52]	@ (800e2f4 <xTraceEventCreateData3+0x138>)
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	6818      	ldr	r0, [r3, #0]
 800e2c2:	69b9      	ldr	r1, [r7, #24]
 800e2c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e2c6:	f103 0214 	add.w	r2, r3, #20
 800e2ca:	f107 0314 	add.w	r3, r7, #20
 800e2ce:	f000 fba1 	bl	800ea14 <xTraceEventBufferAllocCommit>
 800e2d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2d4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e2d6:	69fb      	ldr	r3, [r7, #28]
 800e2d8:	f383 8810 	msr	PRIMASK, r3
}
 800e2dc:	bf00      	nop

	return TRC_SUCCESS;
 800e2de:	2300      	movs	r3, #0
}
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	3730      	adds	r7, #48	@ 0x30
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	bd80      	pop	{r7, pc}
 800e2e8:	20017418 	.word	0x20017418
 800e2ec:	20017410 	.word	0x20017410
 800e2f0:	20012d58 	.word	0x20012d58
 800e2f4:	20012d40 	.word	0x20012d40
 800e2f8:	e0001004 	.word	0xe0001004
 800e2fc:	20017420 	.word	0x20017420

0800e300 <xTraceEventCreateData4>:
	TraceUnsignedBaseType_t uxParam3,
	TraceUnsignedBaseType_t uxParam4,
	const TraceUnsignedBaseType_t* const puxData,
	TraceUnsignedBaseType_t uxSize
)
{
 800e300:	b580      	push	{r7, lr}
 800e302:	b08c      	sub	sp, #48	@ 0x30
 800e304:	af00      	add	r7, sp, #0
 800e306:	60f8      	str	r0, [r7, #12]
 800e308:	60b9      	str	r1, [r7, #8]
 800e30a:	607a      	str	r2, [r7, #4]
 800e30c:	603b      	str	r3, [r7, #0]
	TraceEvent4_t* pxEventData = (void*)0;
 800e30e:	2300      	movs	r3, #0
 800e310:	61bb      	str	r3, [r7, #24]
	int32_t iBytesCommitted = 0;
 800e312:	2300      	movs	r3, #0
 800e314:	617b      	str	r3, [r7, #20]

	TRACE_ALLOC_CRITICAL_SECTION();

	/* Align payload size and truncate in case it is too big */
	uxSize = TRC_ALIGN_CEIL(uxSize, sizeof(TraceUnsignedBaseType_t));
 800e316:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e318:	3303      	adds	r3, #3
 800e31a:	f023 0303 	bic.w	r3, r3, #3
 800e31e:	643b      	str	r3, [r7, #64]	@ 0x40
	if (sizeof(TraceEvent4_t) + uxSize > TRC_MAX_BLOB_SIZE)
 800e320:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e322:	3318      	adds	r3, #24
 800e324:	2b40      	cmp	r3, #64	@ 0x40
 800e326:	d901      	bls.n	800e32c <xTraceEventCreateData4+0x2c>
	{
		uxSize = TRC_MAX_BLOB_SIZE - sizeof(TraceEvent4_t);
 800e328:	2328      	movs	r3, #40	@ 0x28
 800e32a:	643b      	str	r3, [r7, #64]	@ 0x40
	}

	TRACE_EVENT_BEGIN(sizeof(TraceEvent4_t) + uxSize);
 800e32c:	4b41      	ldr	r3, [pc, #260]	@ (800e434 <xTraceEventCreateData4+0x134>)
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	f003 0301 	and.w	r3, r3, #1
 800e334:	2b00      	cmp	r3, #0
 800e336:	d004      	beq.n	800e342 <xTraceEventCreateData4+0x42>
 800e338:	4b3f      	ldr	r3, [pc, #252]	@ (800e438 <xTraceEventCreateData4+0x138>)
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	685b      	ldr	r3, [r3, #4]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d101      	bne.n	800e346 <xTraceEventCreateData4+0x46>
 800e342:	2301      	movs	r3, #1
 800e344:	e071      	b.n	800e42a <xTraceEventCreateData4+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e346:	f3ef 8310 	mrs	r3, PRIMASK
 800e34a:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800e34c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e34e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e350:	2301      	movs	r3, #1
 800e352:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e356:	f383 8810 	msr	PRIMASK, r3
}
 800e35a:	bf00      	nop
 800e35c:	4b37      	ldr	r3, [pc, #220]	@ (800e43c <xTraceEventCreateData4+0x13c>)
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	681a      	ldr	r2, [r3, #0]
 800e362:	3201      	adds	r2, #1
 800e364:	601a      	str	r2, [r3, #0]
 800e366:	4b36      	ldr	r3, [pc, #216]	@ (800e440 <xTraceEventCreateData4+0x140>)
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	6818      	ldr	r0, [r3, #0]
 800e36c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e36e:	3318      	adds	r3, #24
 800e370:	f107 0218 	add.w	r2, r7, #24
 800e374:	4619      	mov	r1, r3
 800e376:	f000 fa35 	bl	800e7e4 <xTraceEventBufferAlloc>
 800e37a:	4603      	mov	r3, r0
 800e37c:	2b01      	cmp	r3, #1
 800e37e:	d107      	bne.n	800e390 <xTraceEventCreateData4+0x90>
 800e380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e382:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e384:	6a3b      	ldr	r3, [r7, #32]
 800e386:	f383 8810 	msr	PRIMASK, r3
}
 800e38a:	bf00      	nop
 800e38c:	2301      	movs	r3, #1
 800e38e:	e04c      	b.n	800e42a <xTraceEventCreateData4+0x12a>
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	b21a      	sxth	r2, r3
 800e394:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e396:	3310      	adds	r3, #16
 800e398:	089b      	lsrs	r3, r3, #2
 800e39a:	b29b      	uxth	r3, r3
 800e39c:	031b      	lsls	r3, r3, #12
 800e39e:	b21b      	sxth	r3, r3
 800e3a0:	4313      	orrs	r3, r2
 800e3a2:	b21a      	sxth	r2, r3
 800e3a4:	69bb      	ldr	r3, [r7, #24]
 800e3a6:	b292      	uxth	r2, r2
 800e3a8:	801a      	strh	r2, [r3, #0]
 800e3aa:	4b24      	ldr	r3, [pc, #144]	@ (800e43c <xTraceEventCreateData4+0x13c>)
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	681a      	ldr	r2, [r3, #0]
 800e3b0:	69bb      	ldr	r3, [r7, #24]
 800e3b2:	b292      	uxth	r2, r2
 800e3b4:	805a      	strh	r2, [r3, #2]
 800e3b6:	4a23      	ldr	r2, [pc, #140]	@ (800e444 <xTraceEventCreateData4+0x144>)
 800e3b8:	69bb      	ldr	r3, [r7, #24]
 800e3ba:	6812      	ldr	r2, [r2, #0]
 800e3bc:	605a      	str	r2, [r3, #4]
 800e3be:	69bb      	ldr	r3, [r7, #24]
 800e3c0:	685a      	ldr	r2, [r3, #4]
 800e3c2:	4b21      	ldr	r3, [pc, #132]	@ (800e448 <xTraceEventCreateData4+0x148>)
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	695b      	ldr	r3, [r3, #20]
 800e3c8:	429a      	cmp	r2, r3
 800e3ca:	d204      	bcs.n	800e3d6 <xTraceEventCreateData4+0xd6>
 800e3cc:	4b1e      	ldr	r3, [pc, #120]	@ (800e448 <xTraceEventCreateData4+0x148>)
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	68da      	ldr	r2, [r3, #12]
 800e3d2:	3201      	adds	r2, #1
 800e3d4:	60da      	str	r2, [r3, #12]
 800e3d6:	69ba      	ldr	r2, [r7, #24]
 800e3d8:	4b1b      	ldr	r3, [pc, #108]	@ (800e448 <xTraceEventCreateData4+0x148>)
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	6852      	ldr	r2, [r2, #4]
 800e3de:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_4_DATA(uxParam1, uxParam2, uxParam3, uxParam4, puxData, uxSize);
 800e3e0:	69bb      	ldr	r3, [r7, #24]
 800e3e2:	68ba      	ldr	r2, [r7, #8]
 800e3e4:	609a      	str	r2, [r3, #8]
 800e3e6:	69bb      	ldr	r3, [r7, #24]
 800e3e8:	687a      	ldr	r2, [r7, #4]
 800e3ea:	60da      	str	r2, [r3, #12]
 800e3ec:	69bb      	ldr	r3, [r7, #24]
 800e3ee:	683a      	ldr	r2, [r7, #0]
 800e3f0:	611a      	str	r2, [r3, #16]
 800e3f2:	69bb      	ldr	r3, [r7, #24]
 800e3f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e3f6:	615a      	str	r2, [r3, #20]
 800e3f8:	69bb      	ldr	r3, [r7, #24]
 800e3fa:	3318      	adds	r3, #24
 800e3fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e3fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e400:	4618      	mov	r0, r3
 800e402:	f001 fe49 	bl	8010098 <memcpy>

	TRACE_EVENT_END(sizeof(TraceEvent4_t) + uxSize);
 800e406:	4b0e      	ldr	r3, [pc, #56]	@ (800e440 <xTraceEventCreateData4+0x140>)
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	6818      	ldr	r0, [r3, #0]
 800e40c:	69b9      	ldr	r1, [r7, #24]
 800e40e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e410:	f103 0218 	add.w	r2, r3, #24
 800e414:	f107 0314 	add.w	r3, r7, #20
 800e418:	f000 fafc 	bl	800ea14 <xTraceEventBufferAllocCommit>
 800e41c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e41e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e420:	69fb      	ldr	r3, [r7, #28]
 800e422:	f383 8810 	msr	PRIMASK, r3
}
 800e426:	bf00      	nop

	return TRC_SUCCESS;
 800e428:	2300      	movs	r3, #0
}
 800e42a:	4618      	mov	r0, r3
 800e42c:	3730      	adds	r7, #48	@ 0x30
 800e42e:	46bd      	mov	sp, r7
 800e430:	bd80      	pop	{r7, pc}
 800e432:	bf00      	nop
 800e434:	20017418 	.word	0x20017418
 800e438:	20017410 	.word	0x20017410
 800e43c:	20012d58 	.word	0x20012d58
 800e440:	20012d40 	.word	0x20012d40
 800e444:	e0001004 	.word	0xe0001004
 800e448:	20017420 	.word	0x20017420

0800e44c <xTraceEventCreateData5>:
	TraceUnsignedBaseType_t uxParam4,
	TraceUnsignedBaseType_t uxParam5,
	const TraceUnsignedBaseType_t* const puxData,
	TraceUnsignedBaseType_t uxSize
)
{
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b08c      	sub	sp, #48	@ 0x30
 800e450:	af00      	add	r7, sp, #0
 800e452:	60f8      	str	r0, [r7, #12]
 800e454:	60b9      	str	r1, [r7, #8]
 800e456:	607a      	str	r2, [r7, #4]
 800e458:	603b      	str	r3, [r7, #0]
	TraceEvent5_t* pxEventData = (void*)0;
 800e45a:	2300      	movs	r3, #0
 800e45c:	61bb      	str	r3, [r7, #24]
	int32_t iBytesCommitted = 0;
 800e45e:	2300      	movs	r3, #0
 800e460:	617b      	str	r3, [r7, #20]

	TRACE_ALLOC_CRITICAL_SECTION();

	/* Align payload size and truncate in case it is too big */
	uxSize = TRC_ALIGN_CEIL(uxSize, sizeof(TraceUnsignedBaseType_t));
 800e462:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e464:	3303      	adds	r3, #3
 800e466:	f023 0303 	bic.w	r3, r3, #3
 800e46a:	647b      	str	r3, [r7, #68]	@ 0x44
	if (sizeof(TraceEvent5_t) + uxSize > TRC_MAX_BLOB_SIZE)
 800e46c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e46e:	331c      	adds	r3, #28
 800e470:	2b40      	cmp	r3, #64	@ 0x40
 800e472:	d901      	bls.n	800e478 <xTraceEventCreateData5+0x2c>
	{
		uxSize = TRC_MAX_BLOB_SIZE - sizeof(TraceEvent5_t);
 800e474:	2324      	movs	r3, #36	@ 0x24
 800e476:	647b      	str	r3, [r7, #68]	@ 0x44
	}

	TRACE_EVENT_BEGIN(sizeof(TraceEvent5_t) + uxSize);
 800e478:	4b42      	ldr	r3, [pc, #264]	@ (800e584 <xTraceEventCreateData5+0x138>)
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	f003 0301 	and.w	r3, r3, #1
 800e480:	2b00      	cmp	r3, #0
 800e482:	d004      	beq.n	800e48e <xTraceEventCreateData5+0x42>
 800e484:	4b40      	ldr	r3, [pc, #256]	@ (800e588 <xTraceEventCreateData5+0x13c>)
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	685b      	ldr	r3, [r3, #4]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d101      	bne.n	800e492 <xTraceEventCreateData5+0x46>
 800e48e:	2301      	movs	r3, #1
 800e490:	e074      	b.n	800e57c <xTraceEventCreateData5+0x130>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e492:	f3ef 8310 	mrs	r3, PRIMASK
 800e496:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800e498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e49a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e49c:	2301      	movs	r3, #1
 800e49e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e4a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4a2:	f383 8810 	msr	PRIMASK, r3
}
 800e4a6:	bf00      	nop
 800e4a8:	4b38      	ldr	r3, [pc, #224]	@ (800e58c <xTraceEventCreateData5+0x140>)
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	681a      	ldr	r2, [r3, #0]
 800e4ae:	3201      	adds	r2, #1
 800e4b0:	601a      	str	r2, [r3, #0]
 800e4b2:	4b37      	ldr	r3, [pc, #220]	@ (800e590 <xTraceEventCreateData5+0x144>)
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	6818      	ldr	r0, [r3, #0]
 800e4b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e4ba:	331c      	adds	r3, #28
 800e4bc:	f107 0218 	add.w	r2, r7, #24
 800e4c0:	4619      	mov	r1, r3
 800e4c2:	f000 f98f 	bl	800e7e4 <xTraceEventBufferAlloc>
 800e4c6:	4603      	mov	r3, r0
 800e4c8:	2b01      	cmp	r3, #1
 800e4ca:	d107      	bne.n	800e4dc <xTraceEventCreateData5+0x90>
 800e4cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4ce:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e4d0:	6a3b      	ldr	r3, [r7, #32]
 800e4d2:	f383 8810 	msr	PRIMASK, r3
}
 800e4d6:	bf00      	nop
 800e4d8:	2301      	movs	r3, #1
 800e4da:	e04f      	b.n	800e57c <xTraceEventCreateData5+0x130>
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	b21a      	sxth	r2, r3
 800e4e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e4e2:	3314      	adds	r3, #20
 800e4e4:	089b      	lsrs	r3, r3, #2
 800e4e6:	b29b      	uxth	r3, r3
 800e4e8:	031b      	lsls	r3, r3, #12
 800e4ea:	b21b      	sxth	r3, r3
 800e4ec:	4313      	orrs	r3, r2
 800e4ee:	b21a      	sxth	r2, r3
 800e4f0:	69bb      	ldr	r3, [r7, #24]
 800e4f2:	b292      	uxth	r2, r2
 800e4f4:	801a      	strh	r2, [r3, #0]
 800e4f6:	4b25      	ldr	r3, [pc, #148]	@ (800e58c <xTraceEventCreateData5+0x140>)
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	681a      	ldr	r2, [r3, #0]
 800e4fc:	69bb      	ldr	r3, [r7, #24]
 800e4fe:	b292      	uxth	r2, r2
 800e500:	805a      	strh	r2, [r3, #2]
 800e502:	4a24      	ldr	r2, [pc, #144]	@ (800e594 <xTraceEventCreateData5+0x148>)
 800e504:	69bb      	ldr	r3, [r7, #24]
 800e506:	6812      	ldr	r2, [r2, #0]
 800e508:	605a      	str	r2, [r3, #4]
 800e50a:	69bb      	ldr	r3, [r7, #24]
 800e50c:	685a      	ldr	r2, [r3, #4]
 800e50e:	4b22      	ldr	r3, [pc, #136]	@ (800e598 <xTraceEventCreateData5+0x14c>)
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	695b      	ldr	r3, [r3, #20]
 800e514:	429a      	cmp	r2, r3
 800e516:	d204      	bcs.n	800e522 <xTraceEventCreateData5+0xd6>
 800e518:	4b1f      	ldr	r3, [pc, #124]	@ (800e598 <xTraceEventCreateData5+0x14c>)
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	68da      	ldr	r2, [r3, #12]
 800e51e:	3201      	adds	r2, #1
 800e520:	60da      	str	r2, [r3, #12]
 800e522:	69ba      	ldr	r2, [r7, #24]
 800e524:	4b1c      	ldr	r3, [pc, #112]	@ (800e598 <xTraceEventCreateData5+0x14c>)
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	6852      	ldr	r2, [r2, #4]
 800e52a:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_5_DATA(uxParam1, uxParam2, uxParam3, uxParam4, uxParam5, puxData, uxSize);
 800e52c:	69bb      	ldr	r3, [r7, #24]
 800e52e:	68ba      	ldr	r2, [r7, #8]
 800e530:	609a      	str	r2, [r3, #8]
 800e532:	69bb      	ldr	r3, [r7, #24]
 800e534:	687a      	ldr	r2, [r7, #4]
 800e536:	60da      	str	r2, [r3, #12]
 800e538:	69bb      	ldr	r3, [r7, #24]
 800e53a:	683a      	ldr	r2, [r7, #0]
 800e53c:	611a      	str	r2, [r3, #16]
 800e53e:	69bb      	ldr	r3, [r7, #24]
 800e540:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e542:	615a      	str	r2, [r3, #20]
 800e544:	69bb      	ldr	r3, [r7, #24]
 800e546:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e548:	619a      	str	r2, [r3, #24]
 800e54a:	69bb      	ldr	r3, [r7, #24]
 800e54c:	331c      	adds	r3, #28
 800e54e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e550:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e552:	4618      	mov	r0, r3
 800e554:	f001 fda0 	bl	8010098 <memcpy>

	TRACE_EVENT_END(sizeof(TraceEvent5_t) + uxSize);
 800e558:	4b0d      	ldr	r3, [pc, #52]	@ (800e590 <xTraceEventCreateData5+0x144>)
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	6818      	ldr	r0, [r3, #0]
 800e55e:	69b9      	ldr	r1, [r7, #24]
 800e560:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e562:	f103 021c 	add.w	r2, r3, #28
 800e566:	f107 0314 	add.w	r3, r7, #20
 800e56a:	f000 fa53 	bl	800ea14 <xTraceEventBufferAllocCommit>
 800e56e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e570:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e572:	69fb      	ldr	r3, [r7, #28]
 800e574:	f383 8810 	msr	PRIMASK, r3
}
 800e578:	bf00      	nop

	return TRC_SUCCESS;
 800e57a:	2300      	movs	r3, #0
}
 800e57c:	4618      	mov	r0, r3
 800e57e:	3730      	adds	r7, #48	@ 0x30
 800e580:	46bd      	mov	sp, r7
 800e582:	bd80      	pop	{r7, pc}
 800e584:	20017418 	.word	0x20017418
 800e588:	20017410 	.word	0x20017410
 800e58c:	20012d58 	.word	0x20012d58
 800e590:	20012d40 	.word	0x20012d40
 800e594:	e0001004 	.word	0xe0001004
 800e598:	20017420 	.word	0x20017420

0800e59c <xTraceEventCreateData6>:
	TraceUnsignedBaseType_t uxParam5,
	TraceUnsignedBaseType_t uxParam6,
	const TraceUnsignedBaseType_t* const puxData,
	TraceUnsignedBaseType_t uxSize
)
{
 800e59c:	b580      	push	{r7, lr}
 800e59e:	b08c      	sub	sp, #48	@ 0x30
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	60f8      	str	r0, [r7, #12]
 800e5a4:	60b9      	str	r1, [r7, #8]
 800e5a6:	607a      	str	r2, [r7, #4]
 800e5a8:	603b      	str	r3, [r7, #0]
	TraceEvent6_t* pxEventData = (void*)0;
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	61bb      	str	r3, [r7, #24]
	int32_t iBytesCommitted = 0;
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	617b      	str	r3, [r7, #20]

	TRACE_ALLOC_CRITICAL_SECTION();

	/* Align payload size and truncate in case it is too big */
	uxSize = TRC_ALIGN_CEIL(uxSize, sizeof(TraceUnsignedBaseType_t));
 800e5b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e5b4:	3303      	adds	r3, #3
 800e5b6:	f023 0303 	bic.w	r3, r3, #3
 800e5ba:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (sizeof(TraceEvent6_t) + uxSize > TRC_MAX_BLOB_SIZE)
 800e5bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e5be:	3320      	adds	r3, #32
 800e5c0:	2b40      	cmp	r3, #64	@ 0x40
 800e5c2:	d901      	bls.n	800e5c8 <xTraceEventCreateData6+0x2c>
	{
		uxSize = TRC_MAX_BLOB_SIZE - sizeof(TraceEvent6_t);
 800e5c4:	2320      	movs	r3, #32
 800e5c6:	64bb      	str	r3, [r7, #72]	@ 0x48
	}

	TRACE_EVENT_BEGIN(sizeof(TraceEvent6_t) + uxSize);
 800e5c8:	4b44      	ldr	r3, [pc, #272]	@ (800e6dc <xTraceEventCreateData6+0x140>)
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	f003 0301 	and.w	r3, r3, #1
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d004      	beq.n	800e5de <xTraceEventCreateData6+0x42>
 800e5d4:	4b42      	ldr	r3, [pc, #264]	@ (800e6e0 <xTraceEventCreateData6+0x144>)
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	685b      	ldr	r3, [r3, #4]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d101      	bne.n	800e5e2 <xTraceEventCreateData6+0x46>
 800e5de:	2301      	movs	r3, #1
 800e5e0:	e077      	b.n	800e6d2 <xTraceEventCreateData6+0x136>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e5e2:	f3ef 8310 	mrs	r3, PRIMASK
 800e5e6:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800e5e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e5ec:	2301      	movs	r3, #1
 800e5ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e5f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5f2:	f383 8810 	msr	PRIMASK, r3
}
 800e5f6:	bf00      	nop
 800e5f8:	4b3a      	ldr	r3, [pc, #232]	@ (800e6e4 <xTraceEventCreateData6+0x148>)
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	681a      	ldr	r2, [r3, #0]
 800e5fe:	3201      	adds	r2, #1
 800e600:	601a      	str	r2, [r3, #0]
 800e602:	4b39      	ldr	r3, [pc, #228]	@ (800e6e8 <xTraceEventCreateData6+0x14c>)
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	6818      	ldr	r0, [r3, #0]
 800e608:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e60a:	3320      	adds	r3, #32
 800e60c:	f107 0218 	add.w	r2, r7, #24
 800e610:	4619      	mov	r1, r3
 800e612:	f000 f8e7 	bl	800e7e4 <xTraceEventBufferAlloc>
 800e616:	4603      	mov	r3, r0
 800e618:	2b01      	cmp	r3, #1
 800e61a:	d107      	bne.n	800e62c <xTraceEventCreateData6+0x90>
 800e61c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e61e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e620:	6a3b      	ldr	r3, [r7, #32]
 800e622:	f383 8810 	msr	PRIMASK, r3
}
 800e626:	bf00      	nop
 800e628:	2301      	movs	r3, #1
 800e62a:	e052      	b.n	800e6d2 <xTraceEventCreateData6+0x136>
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	b21a      	sxth	r2, r3
 800e630:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e632:	3318      	adds	r3, #24
 800e634:	089b      	lsrs	r3, r3, #2
 800e636:	b29b      	uxth	r3, r3
 800e638:	031b      	lsls	r3, r3, #12
 800e63a:	b21b      	sxth	r3, r3
 800e63c:	4313      	orrs	r3, r2
 800e63e:	b21a      	sxth	r2, r3
 800e640:	69bb      	ldr	r3, [r7, #24]
 800e642:	b292      	uxth	r2, r2
 800e644:	801a      	strh	r2, [r3, #0]
 800e646:	4b27      	ldr	r3, [pc, #156]	@ (800e6e4 <xTraceEventCreateData6+0x148>)
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	681a      	ldr	r2, [r3, #0]
 800e64c:	69bb      	ldr	r3, [r7, #24]
 800e64e:	b292      	uxth	r2, r2
 800e650:	805a      	strh	r2, [r3, #2]
 800e652:	4a26      	ldr	r2, [pc, #152]	@ (800e6ec <xTraceEventCreateData6+0x150>)
 800e654:	69bb      	ldr	r3, [r7, #24]
 800e656:	6812      	ldr	r2, [r2, #0]
 800e658:	605a      	str	r2, [r3, #4]
 800e65a:	69bb      	ldr	r3, [r7, #24]
 800e65c:	685a      	ldr	r2, [r3, #4]
 800e65e:	4b24      	ldr	r3, [pc, #144]	@ (800e6f0 <xTraceEventCreateData6+0x154>)
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	695b      	ldr	r3, [r3, #20]
 800e664:	429a      	cmp	r2, r3
 800e666:	d204      	bcs.n	800e672 <xTraceEventCreateData6+0xd6>
 800e668:	4b21      	ldr	r3, [pc, #132]	@ (800e6f0 <xTraceEventCreateData6+0x154>)
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	68da      	ldr	r2, [r3, #12]
 800e66e:	3201      	adds	r2, #1
 800e670:	60da      	str	r2, [r3, #12]
 800e672:	69ba      	ldr	r2, [r7, #24]
 800e674:	4b1e      	ldr	r3, [pc, #120]	@ (800e6f0 <xTraceEventCreateData6+0x154>)
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	6852      	ldr	r2, [r2, #4]
 800e67a:	615a      	str	r2, [r3, #20]

	TRACE_EVENT_ADD_6_DATA(uxParam1, uxParam2, uxParam3, uxParam4, uxParam5, uxParam6, puxData, uxSize);
 800e67c:	69bb      	ldr	r3, [r7, #24]
 800e67e:	68ba      	ldr	r2, [r7, #8]
 800e680:	609a      	str	r2, [r3, #8]
 800e682:	69bb      	ldr	r3, [r7, #24]
 800e684:	687a      	ldr	r2, [r7, #4]
 800e686:	60da      	str	r2, [r3, #12]
 800e688:	69bb      	ldr	r3, [r7, #24]
 800e68a:	683a      	ldr	r2, [r7, #0]
 800e68c:	611a      	str	r2, [r3, #16]
 800e68e:	69bb      	ldr	r3, [r7, #24]
 800e690:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e692:	615a      	str	r2, [r3, #20]
 800e694:	69bb      	ldr	r3, [r7, #24]
 800e696:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e698:	619a      	str	r2, [r3, #24]
 800e69a:	69bb      	ldr	r3, [r7, #24]
 800e69c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e69e:	61da      	str	r2, [r3, #28]
 800e6a0:	69bb      	ldr	r3, [r7, #24]
 800e6a2:	3320      	adds	r3, #32
 800e6a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e6a6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	f001 fcf5 	bl	8010098 <memcpy>

	TRACE_EVENT_END(sizeof(TraceEvent6_t) + uxSize);
 800e6ae:	4b0e      	ldr	r3, [pc, #56]	@ (800e6e8 <xTraceEventCreateData6+0x14c>)
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	6818      	ldr	r0, [r3, #0]
 800e6b4:	69b9      	ldr	r1, [r7, #24]
 800e6b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e6b8:	f103 0220 	add.w	r2, r3, #32
 800e6bc:	f107 0314 	add.w	r3, r7, #20
 800e6c0:	f000 f9a8 	bl	800ea14 <xTraceEventBufferAllocCommit>
 800e6c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6c6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e6c8:	69fb      	ldr	r3, [r7, #28]
 800e6ca:	f383 8810 	msr	PRIMASK, r3
}
 800e6ce:	bf00      	nop

	return TRC_SUCCESS;
 800e6d0:	2300      	movs	r3, #0
}
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	3730      	adds	r7, #48	@ 0x30
 800e6d6:	46bd      	mov	sp, r7
 800e6d8:	bd80      	pop	{r7, pc}
 800e6da:	bf00      	nop
 800e6dc:	20017418 	.word	0x20017418
 800e6e0:	20017410 	.word	0x20017410
 800e6e4:	20012d58 	.word	0x20012d58
 800e6e8:	20012d40 	.word	0x20012d40
 800e6ec:	e0001004 	.word	0xe0001004
 800e6f0:	20017420 	.word	0x20017420

0800e6f4 <xTraceEventGetSize>:

traceResult xTraceEventGetSize(const void* const pvAddress, uint32_t* puiSize)
{
 800e6f4:	b480      	push	{r7}
 800e6f6:	b083      	sub	sp, #12
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	6078      	str	r0, [r7, #4]
 800e6fc:	6039      	str	r1, [r7, #0]
	TRC_ASSERT(puiSize != (void*)0);

	/* This should never fail */
	TRC_ASSERT((sizeof(TraceEvent0_t) + ((uint32_t)(uint16_t)(TRC_EVENT_GET_PARAM_COUNT(((const TraceEvent0_t*)pvAddress)->EventID)) * sizeof(uint32_t))) <= (uint32_t)(TRC_MAX_BLOB_SIZE)); /*cstat !MISRAC2012-Rule-11.5 Suppress pointer checks*/
	
	return TRC_EVENT_GET_SIZE(pvAddress, puiSize);
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	881b      	ldrh	r3, [r3, #0]
 800e702:	0b1b      	lsrs	r3, r3, #12
 800e704:	b29b      	uxth	r3, r3
 800e706:	f003 030f 	and.w	r3, r3, #15
 800e70a:	3302      	adds	r3, #2
 800e70c:	009a      	lsls	r2, r3, #2
 800e70e:	683b      	ldr	r3, [r7, #0]
 800e710:	601a      	str	r2, [r3, #0]
 800e712:	2300      	movs	r3, #0
}
 800e714:	4618      	mov	r0, r3
 800e716:	370c      	adds	r7, #12
 800e718:	46bd      	mov	sp, r7
 800e71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71e:	4770      	bx	lr

0800e720 <xTraceEventBufferInitialize>:

#if (TRC_USE_TRACEALYZER_RECORDER == 1) && (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

traceResult xTraceEventBufferInitialize(TraceEventBuffer_t* pxTraceEventBuffer, uint32_t uiOptions,
	uint8_t* puiBuffer, uint32_t uiSize)
{
 800e720:	b480      	push	{r7}
 800e722:	b085      	sub	sp, #20
 800e724:	af00      	add	r7, sp, #0
 800e726:	60f8      	str	r0, [r7, #12]
 800e728:	60b9      	str	r1, [r7, #8]
 800e72a:	607a      	str	r2, [r7, #4]
 800e72c:	603b      	str	r3, [r7, #0]
	TRC_ASSERT(puiBuffer != (void*)0);

	/* This should never fail */
	TRC_ASSERT(uiSize != 0u);

	pxTraceEventBuffer->uiOptions = uiOptions;
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	68ba      	ldr	r2, [r7, #8]
 800e732:	60da      	str	r2, [r3, #12]
	pxTraceEventBuffer->uiHead = 0u;
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	2200      	movs	r2, #0
 800e738:	601a      	str	r2, [r3, #0]
	pxTraceEventBuffer->uiTail = 0u;
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	2200      	movs	r2, #0
 800e73e:	605a      	str	r2, [r3, #4]
	pxTraceEventBuffer->uiSize = uiSize;
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	683a      	ldr	r2, [r7, #0]
 800e744:	609a      	str	r2, [r3, #8]
	pxTraceEventBuffer->uiFree = uiSize;
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	683a      	ldr	r2, [r7, #0]
 800e74a:	615a      	str	r2, [r3, #20]
	pxTraceEventBuffer->puiBuffer = puiBuffer;
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	687a      	ldr	r2, [r7, #4]
 800e750:	629a      	str	r2, [r3, #40]	@ 0x28
	pxTraceEventBuffer->uiSlack = 0u;
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	2200      	movs	r2, #0
 800e756:	619a      	str	r2, [r3, #24]
	pxTraceEventBuffer->uiNextHead = 0u;
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	2200      	movs	r2, #0
 800e75c:	61da      	str	r2, [r3, #28]
	pxTraceEventBuffer->uiTimerWraparounds = 0u;
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	2200      	movs	r2, #0
 800e762:	621a      	str	r2, [r3, #32]

	(void)xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_EVENT_BUFFER);
 800e764:	4b06      	ldr	r3, [pc, #24]	@ (800e780 <xTraceEventBufferInitialize+0x60>)
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e76c:	4a04      	ldr	r2, [pc, #16]	@ (800e780 <xTraceEventBufferInitialize+0x60>)
 800e76e:	6013      	str	r3, [r2, #0]

	return TRC_SUCCESS;
 800e770:	2300      	movs	r3, #0
}
 800e772:	4618      	mov	r0, r3
 800e774:	3714      	adds	r7, #20
 800e776:	46bd      	mov	sp, r7
 800e778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e77c:	4770      	bx	lr
 800e77e:	bf00      	nop
 800e780:	20017418 	.word	0x20017418

0800e784 <prvTraceEventBufferAllocPop>:

	return TRC_SUCCESS;
}

static traceResult prvTraceEventBufferAllocPop(TraceEventBuffer_t *pxTraceEventBuffer)
{
 800e784:	b580      	push	{r7, lr}
 800e786:	b084      	sub	sp, #16
 800e788:	af00      	add	r7, sp, #0
 800e78a:	6078      	str	r0, [r7, #4]
	uint32_t uiFreeSize = 0u;
 800e78c:	2300      	movs	r3, #0
 800e78e:	60fb      	str	r3, [r7, #12]

	/* Check if tail is in, or at the start of the slack area. We do not want to call
	 * a free when in the slack area since it would read garbage data and free would
	 * become undefined.
	 */
	if (pxTraceEventBuffer->uiTail >= (pxTraceEventBuffer->uiSize - pxTraceEventBuffer->uiSlack))
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	685a      	ldr	r2, [r3, #4]
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	6899      	ldr	r1, [r3, #8]
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	699b      	ldr	r3, [r3, #24]
 800e79c:	1acb      	subs	r3, r1, r3
 800e79e:	429a      	cmp	r2, r3
 800e7a0:	d303      	bcc.n	800e7aa <prvTraceEventBufferAllocPop+0x26>
	{
		/* Tail was in the slack area, wrap back to the start of the buffer. */
		pxTraceEventBuffer->uiTail = 0u;
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	2200      	movs	r2, #0
 800e7a6:	605a      	str	r2, [r3, #4]
 800e7a8:	e017      	b.n	800e7da <prvTraceEventBufferAllocPop+0x56>
	}
	else
	{
		/* Get size of event we are freeing (this should never fail) */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEventGetSize(((void*)&(pxTraceEventBuffer->puiBuffer[pxTraceEventBuffer->uiTail])), &uiFreeSize) == TRC_SUCCESS); /*cstat !MISRAC2004-17.4_b We need to access a specific part of the buffer*/
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	685b      	ldr	r3, [r3, #4]
 800e7b2:	4413      	add	r3, r2
 800e7b4:	f107 020c 	add.w	r2, r7, #12
 800e7b8:	4611      	mov	r1, r2
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	f7ff ff9a 	bl	800e6f4 <xTraceEventGetSize>

		/* Update tail to point to the new last event */
		pxTraceEventBuffer->uiTail = (pxTraceEventBuffer->uiTail + uiFreeSize) % pxTraceEventBuffer->uiSize;
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	685a      	ldr	r2, [r3, #4]
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	4413      	add	r3, r2
 800e7c8:	687a      	ldr	r2, [r7, #4]
 800e7ca:	6892      	ldr	r2, [r2, #8]
 800e7cc:	fbb3 f1f2 	udiv	r1, r3, r2
 800e7d0:	fb01 f202 	mul.w	r2, r1, r2
 800e7d4:	1a9a      	subs	r2, r3, r2
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	605a      	str	r2, [r3, #4]
	}

	return TRC_SUCCESS;
 800e7da:	2300      	movs	r3, #0
}
 800e7dc:	4618      	mov	r0, r3
 800e7de:	3710      	adds	r7, #16
 800e7e0:	46bd      	mov	sp, r7
 800e7e2:	bd80      	pop	{r7, pc}

0800e7e4 <xTraceEventBufferAlloc>:

traceResult xTraceEventBufferAlloc(TraceEventBuffer_t *pxTraceEventBuffer, uint32_t uiSize, void **ppvData)
{
 800e7e4:	b580      	push	{r7, lr}
 800e7e6:	b088      	sub	sp, #32
 800e7e8:	af00      	add	r7, sp, #0
 800e7ea:	60f8      	str	r0, [r7, #12]
 800e7ec:	60b9      	str	r1, [r7, #8]
 800e7ee:	607a      	str	r2, [r7, #4]
	TRC_ASSERT(pxTraceEventBuffer != (void*)0);
	
	/* This should never fail */
	TRC_ASSERT(ppvData != (void*)0);

	uiBufferSize = pxTraceEventBuffer->uiSize;
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	689b      	ldr	r3, [r3, #8]
 800e7f4:	61fb      	str	r3, [r7, #28]

	/* Handle overwrite buffer allocation, since this kind of allocation modifies
	 * both head and tail it should only be used for internal buffers without any
	 * flushing calls (Streaming Ringbuffer)
	 */
	if (pxTraceEventBuffer->uiOptions == TRC_EVENT_BUFFER_OPTION_OVERWRITE)
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	68db      	ldr	r3, [r3, #12]
 800e7fa:	2b01      	cmp	r3, #1
 800e7fc:	f040 8093 	bne.w	800e926 <xTraceEventBufferAlloc+0x142>
	{
		if (pxTraceEventBuffer->uiHead >= pxTraceEventBuffer->uiTail)
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	681a      	ldr	r2, [r3, #0]
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	685b      	ldr	r3, [r3, #4]
 800e808:	429a      	cmp	r2, r3
 800e80a:	d341      	bcc.n	800e890 <xTraceEventBufferAlloc+0xac>
		{
			/* Do we have enough space to directly allocate from the buffer? */
			if ((uiBufferSize - pxTraceEventBuffer->uiHead) > uiSize)
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	69fa      	ldr	r2, [r7, #28]
 800e812:	1ad3      	subs	r3, r2, r3
 800e814:	68ba      	ldr	r2, [r7, #8]
 800e816:	429a      	cmp	r2, r3
 800e818:	d214      	bcs.n	800e844 <xTraceEventBufferAlloc+0x60>
			{
				*ppvData = &pxTraceEventBuffer->puiBuffer[pxTraceEventBuffer->uiHead]; /*cstat !MISRAC2004-17.4_b We need to access a specific part of the buffer*/
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	441a      	add	r2, r3
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	601a      	str	r2, [r3, #0]
				pxTraceEventBuffer->uiNextHead = (pxTraceEventBuffer->uiHead  + uiSize) % uiBufferSize;
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	681a      	ldr	r2, [r3, #0]
 800e82c:	68bb      	ldr	r3, [r7, #8]
 800e82e:	4413      	add	r3, r2
 800e830:	69fa      	ldr	r2, [r7, #28]
 800e832:	fbb3 f2f2 	udiv	r2, r3, r2
 800e836:	69f9      	ldr	r1, [r7, #28]
 800e838:	fb01 f202 	mul.w	r2, r1, r2
 800e83c:	1a9a      	subs	r2, r3, r2
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	61da      	str	r2, [r3, #28]
 800e842:	e0e2      	b.n	800ea0a <xTraceEventBufferAlloc+0x226>
			{
				/* Free space until there is enough space for a contiguous
				 * allocation */
				do
				{
					(void)prvTraceEventBufferAllocPop(pxTraceEventBuffer);
 800e844:	68f8      	ldr	r0, [r7, #12]
 800e846:	f7ff ff9d 	bl	800e784 <prvTraceEventBufferAllocPop>
					uiFreeSpace = pxTraceEventBuffer->uiTail - sizeof(uint32_t);
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	685b      	ldr	r3, [r3, #4]
 800e84e:	3b04      	subs	r3, #4
 800e850:	613b      	str	r3, [r7, #16]
				} while (uiFreeSpace < uiSize);
 800e852:	693a      	ldr	r2, [r7, #16]
 800e854:	68bb      	ldr	r3, [r7, #8]
 800e856:	429a      	cmp	r2, r3
 800e858:	d3f4      	bcc.n	800e844 <xTraceEventBufferAlloc+0x60>

				/* Calculate slack from the wrapping */
				pxTraceEventBuffer->uiSlack = uiBufferSize - pxTraceEventBuffer->uiHead;
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	69fa      	ldr	r2, [r7, #28]
 800e860:	1ad2      	subs	r2, r2, r3
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	619a      	str	r2, [r3, #24]

				/* Wrap head */
				pxTraceEventBuffer->uiHead = 0u;
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	2200      	movs	r2, #0
 800e86a:	601a      	str	r2, [r3, #0]

				/* Allocate data */
				*ppvData = pxTraceEventBuffer->puiBuffer;
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	601a      	str	r2, [r3, #0]

				pxTraceEventBuffer->uiNextHead = (pxTraceEventBuffer->uiHead  + uiSize) % uiBufferSize;
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	681a      	ldr	r2, [r3, #0]
 800e878:	68bb      	ldr	r3, [r7, #8]
 800e87a:	4413      	add	r3, r2
 800e87c:	69fa      	ldr	r2, [r7, #28]
 800e87e:	fbb3 f2f2 	udiv	r2, r3, r2
 800e882:	69f9      	ldr	r1, [r7, #28]
 800e884:	fb01 f202 	mul.w	r2, r1, r2
 800e888:	1a9a      	subs	r2, r3, r2
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	61da      	str	r2, [r3, #28]
 800e88e:	e0bc      	b.n	800ea0a <xTraceEventBufferAlloc+0x226>
			}
		}
		else
		{
			uiFreeSpace = pxTraceEventBuffer->uiTail - pxTraceEventBuffer->uiHead - sizeof(uint32_t);
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	685a      	ldr	r2, [r3, #4]
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	1ad3      	subs	r3, r2, r3
 800e89a:	3b04      	subs	r3, #4
 800e89c:	613b      	str	r3, [r7, #16]

			/* Check if we have to free space */
			if (uiFreeSpace < uiSize)
 800e89e:	693a      	ldr	r2, [r7, #16]
 800e8a0:	68bb      	ldr	r3, [r7, #8]
 800e8a2:	429a      	cmp	r2, r3
 800e8a4:	d231      	bcs.n	800e90a <xTraceEventBufferAlloc+0x126>
			{
				/* Check if this is a wrapping alloc */
				if ((pxTraceEventBuffer->uiSize - pxTraceEventBuffer->uiHead) < uiSize)
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	689a      	ldr	r2, [r3, #8]
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	1ad3      	subs	r3, r2, r3
 800e8b0:	68ba      	ldr	r2, [r7, #8]
 800e8b2:	429a      	cmp	r2, r3
 800e8b4:	d910      	bls.n	800e8d8 <xTraceEventBufferAlloc+0xf4>
					/* To avoid uiHead and uiTail from becoming the same we want to
					 * pop any events that would make uiTail equal uiHead before
					 * wrapping the head. */
					do
					{
						(void)prvTraceEventBufferAllocPop(pxTraceEventBuffer);
 800e8b6:	68f8      	ldr	r0, [r7, #12]
 800e8b8:	f7ff ff64 	bl	800e784 <prvTraceEventBufferAllocPop>
					} while (pxTraceEventBuffer->uiTail == 0u);
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	685b      	ldr	r3, [r3, #4]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d0f8      	beq.n	800e8b6 <xTraceEventBufferAlloc+0xd2>

					pxTraceEventBuffer->uiSlack = pxTraceEventBuffer->uiSize - pxTraceEventBuffer->uiHead;
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	689a      	ldr	r2, [r3, #8]
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	1ad2      	subs	r2, r2, r3
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	619a      	str	r2, [r3, #24]
					pxTraceEventBuffer->uiHead = 0u;
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	2200      	movs	r2, #0
 800e8d6:	601a      	str	r2, [r3, #0]
				}
				
				do
				{
					(void)prvTraceEventBufferAllocPop(pxTraceEventBuffer);
 800e8d8:	68f8      	ldr	r0, [r7, #12]
 800e8da:	f7ff ff53 	bl	800e784 <prvTraceEventBufferAllocPop>
					uiFreeSpace = pxTraceEventBuffer->uiTail - pxTraceEventBuffer->uiHead - sizeof(uint32_t);
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	685a      	ldr	r2, [r3, #4]
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	1ad3      	subs	r3, r2, r3
 800e8e8:	3b04      	subs	r3, #4
 800e8ea:	613b      	str	r3, [r7, #16]
				} while (uiFreeSpace < uiSize);
 800e8ec:	693a      	ldr	r2, [r7, #16]
 800e8ee:	68bb      	ldr	r3, [r7, #8]
 800e8f0:	429a      	cmp	r2, r3
 800e8f2:	d3f1      	bcc.n	800e8d8 <xTraceEventBufferAlloc+0xf4>

				if (pxTraceEventBuffer->uiTail == 0u)
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	685b      	ldr	r3, [r3, #4]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d106      	bne.n	800e90a <xTraceEventBufferAlloc+0x126>
				{
					*ppvData = &pxTraceEventBuffer->puiBuffer[pxTraceEventBuffer->uiHead]; /*cstat !MISRAC2004-17.4_b We need to access a specific part of the buffer*/
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	441a      	add	r2, r3
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	601a      	str	r2, [r3, #0]
				}
			}

			/* Alloc data */
			*ppvData = &pxTraceEventBuffer->puiBuffer[pxTraceEventBuffer->uiHead]; /*cstat !MISRAC2004-17.4_b We need to access a specific part of the buffer*/
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	441a      	add	r2, r3
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	601a      	str	r2, [r3, #0]

			pxTraceEventBuffer->uiNextHead = (pxTraceEventBuffer->uiHead + uiSize);
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	681a      	ldr	r2, [r3, #0]
 800e91c:	68bb      	ldr	r3, [r7, #8]
 800e91e:	441a      	add	r2, r3
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	61da      	str	r2, [r3, #28]
 800e924:	e071      	b.n	800ea0a <xTraceEventBufferAlloc+0x226>
	else
	{
		/* Since a consumer could potentially update tail (free) during the procedure
		 * we have to save it here to avoid problems with it changing during this call.
		 */
		uiHead = pxTraceEventBuffer->uiHead;
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	61bb      	str	r3, [r7, #24]
		uiTail = pxTraceEventBuffer->uiTail;
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	685b      	ldr	r3, [r3, #4]
 800e930:	617b      	str	r3, [r7, #20]

		if (uiHead >= uiTail)
 800e932:	69ba      	ldr	r2, [r7, #24]
 800e934:	697b      	ldr	r3, [r7, #20]
 800e936:	429a      	cmp	r2, r3
 800e938:	d34d      	bcc.n	800e9d6 <xTraceEventBufferAlloc+0x1f2>
		{
			uiFreeSpace = (uiBufferSize - uiHead - sizeof(uint32_t)) + uiTail;
 800e93a:	69fa      	ldr	r2, [r7, #28]
 800e93c:	69bb      	ldr	r3, [r7, #24]
 800e93e:	1ad2      	subs	r2, r2, r3
 800e940:	697b      	ldr	r3, [r7, #20]
 800e942:	4413      	add	r3, r2
 800e944:	3b04      	subs	r3, #4
 800e946:	613b      	str	r3, [r7, #16]

			if (uiFreeSpace < uiSize)
 800e948:	693a      	ldr	r2, [r7, #16]
 800e94a:	68bb      	ldr	r3, [r7, #8]
 800e94c:	429a      	cmp	r2, r3
 800e94e:	d204      	bcs.n	800e95a <xTraceEventBufferAlloc+0x176>
			{
				*ppvData = 0;
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	2200      	movs	r2, #0
 800e954:	601a      	str	r2, [r3, #0]

				return TRC_FAIL;
 800e956:	2301      	movs	r3, #1
 800e958:	e058      	b.n	800ea0c <xTraceEventBufferAlloc+0x228>
			}

			/* Copy data */
			if ((uiBufferSize - uiHead) > uiSize)
 800e95a:	69fa      	ldr	r2, [r7, #28]
 800e95c:	69bb      	ldr	r3, [r7, #24]
 800e95e:	1ad3      	subs	r3, r2, r3
 800e960:	68ba      	ldr	r2, [r7, #8]
 800e962:	429a      	cmp	r2, r3
 800e964:	d213      	bcs.n	800e98e <xTraceEventBufferAlloc+0x1aa>
			{
				*ppvData = &pxTraceEventBuffer->puiBuffer[pxTraceEventBuffer->uiHead]; /*cstat !MISRAC2004-17.4_b We need to access a specific part of the buffer*/
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	441a      	add	r2, r3
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	601a      	str	r2, [r3, #0]

				pxTraceEventBuffer->uiNextHead = (uiHead + uiSize) % uiBufferSize;
 800e974:	69ba      	ldr	r2, [r7, #24]
 800e976:	68bb      	ldr	r3, [r7, #8]
 800e978:	4413      	add	r3, r2
 800e97a:	69fa      	ldr	r2, [r7, #28]
 800e97c:	fbb3 f2f2 	udiv	r2, r3, r2
 800e980:	69f9      	ldr	r1, [r7, #28]
 800e982:	fb01 f202 	mul.w	r2, r1, r2
 800e986:	1a9a      	subs	r2, r3, r2
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	61da      	str	r2, [r3, #28]
 800e98c:	e03d      	b.n	800ea0a <xTraceEventBufferAlloc+0x226>
			}
			else
			{
				uiFreeSpace = uiTail;
 800e98e:	697b      	ldr	r3, [r7, #20]
 800e990:	613b      	str	r3, [r7, #16]

				if (uiFreeSpace < uiSize)
 800e992:	693a      	ldr	r2, [r7, #16]
 800e994:	68bb      	ldr	r3, [r7, #8]
 800e996:	429a      	cmp	r2, r3
 800e998:	d204      	bcs.n	800e9a4 <xTraceEventBufferAlloc+0x1c0>
				{
					*ppvData = 0;
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	2200      	movs	r2, #0
 800e99e:	601a      	str	r2, [r3, #0]

					return TRC_FAIL;
 800e9a0:	2301      	movs	r3, #1
 800e9a2:	e033      	b.n	800ea0c <xTraceEventBufferAlloc+0x228>
				}

				/* Calculate slack */
				pxTraceEventBuffer->uiSlack = uiBufferSize - uiHead;
 800e9a4:	69fa      	ldr	r2, [r7, #28]
 800e9a6:	69bb      	ldr	r3, [r7, #24]
 800e9a8:	1ad2      	subs	r2, r2, r3
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	619a      	str	r2, [r3, #24]

				*ppvData = pxTraceEventBuffer->puiBuffer;
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	601a      	str	r2, [r3, #0]

				pxTraceEventBuffer->uiNextHead = (uiHead + pxTraceEventBuffer->uiSlack + uiSize) % uiBufferSize;
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	699a      	ldr	r2, [r3, #24]
 800e9ba:	69bb      	ldr	r3, [r7, #24]
 800e9bc:	441a      	add	r2, r3
 800e9be:	68bb      	ldr	r3, [r7, #8]
 800e9c0:	4413      	add	r3, r2
 800e9c2:	69fa      	ldr	r2, [r7, #28]
 800e9c4:	fbb3 f2f2 	udiv	r2, r3, r2
 800e9c8:	69f9      	ldr	r1, [r7, #28]
 800e9ca:	fb01 f202 	mul.w	r2, r1, r2
 800e9ce:	1a9a      	subs	r2, r3, r2
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	61da      	str	r2, [r3, #28]
 800e9d4:	e019      	b.n	800ea0a <xTraceEventBufferAlloc+0x226>
			}
		}
		else
		{
			uiFreeSpace = uiTail - uiHead - sizeof(uint32_t);
 800e9d6:	697a      	ldr	r2, [r7, #20]
 800e9d8:	69bb      	ldr	r3, [r7, #24]
 800e9da:	1ad3      	subs	r3, r2, r3
 800e9dc:	3b04      	subs	r3, #4
 800e9de:	613b      	str	r3, [r7, #16]

			if (uiFreeSpace < uiSize)
 800e9e0:	693a      	ldr	r2, [r7, #16]
 800e9e2:	68bb      	ldr	r3, [r7, #8]
 800e9e4:	429a      	cmp	r2, r3
 800e9e6:	d204      	bcs.n	800e9f2 <xTraceEventBufferAlloc+0x20e>
			{
				*ppvData = 0;
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	2200      	movs	r2, #0
 800e9ec:	601a      	str	r2, [r3, #0]

				return TRC_FAIL;
 800e9ee:	2301      	movs	r3, #1
 800e9f0:	e00c      	b.n	800ea0c <xTraceEventBufferAlloc+0x228>
			}

			/* Alloc data */
			*ppvData = &pxTraceEventBuffer->puiBuffer[pxTraceEventBuffer->uiHead]; /*cstat !MISRAC2004-17.4_b We need to access a specific part of the buffer*/
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	441a      	add	r2, r3
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	601a      	str	r2, [r3, #0]

			pxTraceEventBuffer->uiNextHead = (uiHead + uiSize);
 800ea00:	69ba      	ldr	r2, [r7, #24]
 800ea02:	68bb      	ldr	r3, [r7, #8]
 800ea04:	441a      	add	r2, r3
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	61da      	str	r2, [r3, #28]
		}
	}

	return TRC_SUCCESS;
 800ea0a:	2300      	movs	r3, #0
}
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	3720      	adds	r7, #32
 800ea10:	46bd      	mov	sp, r7
 800ea12:	bd80      	pop	{r7, pc}

0800ea14 <xTraceEventBufferAllocCommit>:

traceResult xTraceEventBufferAllocCommit(TraceEventBuffer_t *pxTraceEventBuffer, const void *pvData, uint32_t uiSize, int32_t *piBytesWritten)
{
 800ea14:	b480      	push	{r7}
 800ea16:	b085      	sub	sp, #20
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	60f8      	str	r0, [r7, #12]
 800ea1c:	60b9      	str	r1, [r7, #8]
 800ea1e:	607a      	str	r2, [r7, #4]
 800ea20:	603b      	str	r3, [r7, #0]
	(void)pvData;

	/* This should never fail */
	TRC_ASSERT_ALWAYS_EVALUATE(xTraceTimestampGetWraparounds(&pxTraceEventBuffer->uiTimerWraparounds) == TRC_SUCCESS);
 800ea22:	4b09      	ldr	r3, [pc, #36]	@ (800ea48 <xTraceEventBufferAllocCommit+0x34>)
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	68da      	ldr	r2, [r3, #12]
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	621a      	str	r2, [r3, #32]

	/* Advance head location */
	pxTraceEventBuffer->uiHead = pxTraceEventBuffer->uiNextHead;
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	69da      	ldr	r2, [r3, #28]
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	601a      	str	r2, [r3, #0]

	/* Update bytes written */
	*piBytesWritten = (int32_t)uiSize;
 800ea34:	687a      	ldr	r2, [r7, #4]
 800ea36:	683b      	ldr	r3, [r7, #0]
 800ea38:	601a      	str	r2, [r3, #0]

	return TRC_SUCCESS;
 800ea3a:	2300      	movs	r3, #0
}
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	3714      	adds	r7, #20
 800ea40:	46bd      	mov	sp, r7
 800ea42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea46:	4770      	bx	lr
 800ea48:	20017420 	.word	0x20017420

0800ea4c <xTraceEventBufferClear>:

	return TRC_SUCCESS;
}

traceResult xTraceEventBufferClear(TraceEventBuffer_t* pxTraceEventBuffer)
{
 800ea4c:	b480      	push	{r7}
 800ea4e:	b083      	sub	sp, #12
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	6078      	str	r0, [r7, #4]
	/* This should never fail */
	TRC_ASSERT(pxTraceEventBuffer != (void*)0);

	pxTraceEventBuffer->uiHead = 0u;
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	2200      	movs	r2, #0
 800ea58:	601a      	str	r2, [r3, #0]
	pxTraceEventBuffer->uiTail = 0u;
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	2200      	movs	r2, #0
 800ea5e:	605a      	str	r2, [r3, #4]
	pxTraceEventBuffer->uiFree = pxTraceEventBuffer->uiSize;
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	689a      	ldr	r2, [r3, #8]
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	615a      	str	r2, [r3, #20]
	pxTraceEventBuffer->uiSlack = 0u;
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	2200      	movs	r2, #0
 800ea6c:	619a      	str	r2, [r3, #24]
	pxTraceEventBuffer->uiNextHead = 0u;
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	2200      	movs	r2, #0
 800ea72:	61da      	str	r2, [r3, #28]

	return TRC_SUCCESS;
 800ea74:	2300      	movs	r3, #0
}
 800ea76:	4618      	mov	r0, r3
 800ea78:	370c      	adds	r7, #12
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea80:	4770      	bx	lr
	...

0800ea84 <xTraceExtensionInitialize>:
		)

static TraceExtensionData_t *pxExtensionData TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceExtensionInitialize(TraceExtensionData_t* const pxBuffer)
{
 800ea84:	b480      	push	{r7}
 800ea86:	b083      	sub	sp, #12
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	6078      	str	r0, [r7, #4]
	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);
	
	pxExtensionData = pxBuffer;
 800ea8c:	4a09      	ldr	r2, [pc, #36]	@ (800eab4 <xTraceExtensionInitialize+0x30>)
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	6013      	str	r3, [r2, #0]
	
	pxExtensionData->uxNextFreeExtensionEventId = TRC_EXTENSION_BASE_EVENT_ID;
 800ea92:	4b08      	ldr	r3, [pc, #32]	@ (800eab4 <xTraceExtensionInitialize+0x30>)
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	22fd      	movs	r2, #253	@ 0xfd
 800ea98:	601a      	str	r2, [r3, #0]
	
	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_EXTENSION);
 800ea9a:	4b07      	ldr	r3, [pc, #28]	@ (800eab8 <xTraceExtensionInitialize+0x34>)
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800eaa2:	4a05      	ldr	r2, [pc, #20]	@ (800eab8 <xTraceExtensionInitialize+0x34>)
 800eaa4:	6013      	str	r3, [r2, #0]
	
	return TRC_SUCCESS;
 800eaa6:	2300      	movs	r3, #0
}
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	370c      	adds	r7, #12
 800eaac:	46bd      	mov	sp, r7
 800eaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab2:	4770      	bx	lr
 800eab4:	20012d5c 	.word	0x20012d5c
 800eab8:	20017418 	.word	0x20017418

0800eabc <xTraceHardwarePortInitCortexM>:
#if (((TRC_CFG_HARDWARE_PORT == TRC_HARDWARE_PORT_ARM_Cortex_M) || (TRC_CFG_HARDWARE_PORT == TRC_HARDWARE_PORT_ARM_Cortex_M_NRF_SD)) && (defined (__CORTEX_M) && (__CORTEX_M >= 0x03)))
#if (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)
#ifndef TRC_CFG_ARM_CM_USE_SYSTICK

void xTraceHardwarePortInitCortexM(void)
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	af00      	add	r7, sp, #0
	/* Make sure the DWT registers are unlocked, in case the debugger doesn't do this. */
	TRC_REG_ITM_LOCKACCESS = TRC_ITM_LOCKACCESS_UNLOCK;
 800eac0:	4b13      	ldr	r3, [pc, #76]	@ (800eb10 <xTraceHardwarePortInitCortexM+0x54>)
 800eac2:	4a14      	ldr	r2, [pc, #80]	@ (800eb14 <xTraceHardwarePortInitCortexM+0x58>)
 800eac4:	601a      	str	r2, [r3, #0]

	/* Make sure DWT is enabled is enabled, if supported */
	TRC_REG_DEMCR |= TRC_DEMCR_TRCENA;
 800eac6:	4b14      	ldr	r3, [pc, #80]	@ (800eb18 <xTraceHardwarePortInitCortexM+0x5c>)
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	4a13      	ldr	r2, [pc, #76]	@ (800eb18 <xTraceHardwarePortInitCortexM+0x5c>)
 800eacc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ead0:	6013      	str	r3, [r2, #0]

	do
	{
		/* Verify that DWT is supported */
		if (TRC_REG_DEMCR == 0)
 800ead2:	4b11      	ldr	r3, [pc, #68]	@ (800eb18 <xTraceHardwarePortInitCortexM+0x5c>)
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d103      	bne.n	800eae2 <xTraceHardwarePortInitCortexM+0x26>
			In that case, define the macro TRC_CFG_ARM_CM_USE_SYSTICK in your build
			to use SysTick timestamping instead, or define your own timestamping by
			setting TRC_CFG_HARDWARE_PORT to TRC_HARDWARE_PORT_APPLICATION_DEFINED
			and make the necessary definitions, as explained in trcHardwarePort.h.*/

			xTraceError(TRC_ERROR_DWT_NOT_SUPPORTED);
 800eada:	2004      	movs	r0, #4
 800eadc:	f7fe fe5e 	bl	800d79c <xTraceError>
			break;
 800eae0:	e013      	b.n	800eb0a <xTraceHardwarePortInitCortexM+0x4e>
		}

		/* Verify that DWT_CYCCNT is supported */
		if (TRC_REG_DWT_CTRL & TRC_DWT_CTRL_NOCYCCNT)
 800eae2:	4b0e      	ldr	r3, [pc, #56]	@ (800eb1c <xTraceHardwarePortInitCortexM+0x60>)
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d003      	beq.n	800eaf6 <xTraceHardwarePortInitCortexM+0x3a>
			In that case, define the macro TRC_CFG_ARM_CM_USE_SYSTICK in your build
			to use SysTick timestamping instead, or define your own timestamping by
			setting TRC_CFG_HARDWARE_PORT to TRC_HARDWARE_PORT_APPLICATION_DEFINED
			and make the necessary definitions, as explained in trcHardwarePort.h.*/

			xTraceError(TRC_ERROR_DWT_CYCCNT_NOT_SUPPORTED);
 800eaee:	2005      	movs	r0, #5
 800eaf0:	f7fe fe54 	bl	800d79c <xTraceError>
			break;
 800eaf4:	e009      	b.n	800eb0a <xTraceHardwarePortInitCortexM+0x4e>
		}

		/* Reset the cycle counter */
		TRC_REG_DWT_CYCCNT = 0;
 800eaf6:	4b0a      	ldr	r3, [pc, #40]	@ (800eb20 <xTraceHardwarePortInitCortexM+0x64>)
 800eaf8:	2200      	movs	r2, #0
 800eafa:	601a      	str	r2, [r3, #0]

		/* Enable the cycle counter */
		TRC_REG_DWT_CTRL |= TRC_DWT_CTRL_CYCCNTENA;
 800eafc:	4b07      	ldr	r3, [pc, #28]	@ (800eb1c <xTraceHardwarePortInitCortexM+0x60>)
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	4a06      	ldr	r2, [pc, #24]	@ (800eb1c <xTraceHardwarePortInitCortexM+0x60>)
 800eb02:	f043 0301 	orr.w	r3, r3, #1
 800eb06:	6013      	str	r3, [r2, #0]

	} while (0);	/* breaks above jump here */
}
 800eb08:	bf00      	nop
 800eb0a:	bf00      	nop
 800eb0c:	bd80      	pop	{r7, pc}
 800eb0e:	bf00      	nop
 800eb10:	e0001fb0 	.word	0xe0001fb0
 800eb14:	c5acce55 	.word	0xc5acce55
 800eb18:	e000edfc 	.word	0xe000edfc
 800eb1c:	e0001000 	.word	0xe0001000
 800eb20:	e0001004 	.word	0xe0001004

0800eb24 <xTraceHeapCreate>:

#if (TRC_USE_TRACEALYZER_RECORDER == 1) && (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING) && (TRC_USE_HEAPS == 1)

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceHeapCreate(const char *szName, TraceUnsignedBaseType_t uxCurrent, TraceUnsignedBaseType_t uxHighWaterMark, TraceUnsignedBaseType_t uxMax, TraceHeapHandle_t *pxHeapHandle)
{
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b08c      	sub	sp, #48	@ 0x30
 800eb28:	af04      	add	r7, sp, #16
 800eb2a:	60f8      	str	r0, [r7, #12]
 800eb2c:	60b9      	str	r1, [r7, #8]
 800eb2e:	607a      	str	r2, [r7, #4]
 800eb30:	603b      	str	r3, [r7, #0]
	TraceUnsignedBaseType_t uxStates[3];

	uxStates[TRC_HEAP_STATE_INDEX_CURRENT] = uxCurrent;
 800eb32:	68bb      	ldr	r3, [r7, #8]
 800eb34:	617b      	str	r3, [r7, #20]
	uxStates[TRC_HEAP_STATE_INDEX_HIGHWATERMARK] = uxHighWaterMark;
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	61bb      	str	r3, [r7, #24]
	uxStates[TRC_HEAP_STATE_INDEX_MAX] = uxMax;
 800eb3a:	683b      	ldr	r3, [r7, #0]
 800eb3c:	61fb      	str	r3, [r7, #28]

	return xTraceObjectRegisterInternal(PSF_EVENT_HEAP_CREATE, (void*)0, szName, 3u, uxStates, TRC_ENTRY_OPTION_HEAP, (TraceObjectHandle_t*)pxHeapHandle);
 800eb3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb40:	9302      	str	r3, [sp, #8]
 800eb42:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800eb46:	9301      	str	r3, [sp, #4]
 800eb48:	f107 0314 	add.w	r3, r7, #20
 800eb4c:	9300      	str	r3, [sp, #0]
 800eb4e:	2303      	movs	r3, #3
 800eb50:	68fa      	ldr	r2, [r7, #12]
 800eb52:	2100      	movs	r1, #0
 800eb54:	20f2      	movs	r0, #242	@ 0xf2
 800eb56:	f000 f96d 	bl	800ee34 <xTraceObjectRegisterInternal>
 800eb5a:	4603      	mov	r3, r0
}
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	3720      	adds	r7, #32
 800eb60:	46bd      	mov	sp, r7
 800eb62:	bd80      	pop	{r7, pc}

0800eb64 <xTraceHeapAlloc>:

traceResult xTraceHeapAlloc(TraceHeapHandle_t xHeapHandle, void *pvAddress, TraceUnsignedBaseType_t uxSize)
{
 800eb64:	b580      	push	{r7, lr}
 800eb66:	b086      	sub	sp, #24
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	60f8      	str	r0, [r7, #12]
 800eb6c:	60b9      	str	r1, [r7, #8]
 800eb6e:	607a      	str	r2, [r7, #4]
	TraceUnsignedBaseType_t uxCurrent, uxHighWaterMark;
	
	if (xHeapHandle == 0)
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d101      	bne.n	800eb7a <xTraceHeapAlloc+0x16>
	{
		/* This can happen */
		return TRC_FAIL;
 800eb76:	2301      	movs	r3, #1
 800eb78:	e024      	b.n	800ebc4 <xTraceHeapAlloc+0x60>
	}

	/* If the address is null we assume this was a failed alloc attempt */
	if (pvAddress != (void*)0)
 800eb7a:	68bb      	ldr	r3, [r7, #8]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d015      	beq.n	800ebac <xTraceHeapAlloc+0x48>
	{
		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntryGetState(xHeapHandle, TRC_HEAP_STATE_INDEX_CURRENT, &uxCurrent) == TRC_SUCCESS);
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	685b      	ldr	r3, [r3, #4]
 800eb84:	617b      	str	r3, [r7, #20]

		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntryGetState(xHeapHandle, TRC_HEAP_STATE_INDEX_HIGHWATERMARK, &uxHighWaterMark) == TRC_SUCCESS);
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	689b      	ldr	r3, [r3, #8]
 800eb8a:	613b      	str	r3, [r7, #16]

		uxCurrent += uxSize;
 800eb8c:	697a      	ldr	r2, [r7, #20]
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	4413      	add	r3, r2
 800eb92:	617b      	str	r3, [r7, #20]

		if (uxCurrent > uxHighWaterMark)
 800eb94:	697a      	ldr	r2, [r7, #20]
 800eb96:	693b      	ldr	r3, [r7, #16]
 800eb98:	429a      	cmp	r2, r3
 800eb9a:	d904      	bls.n	800eba6 <xTraceHeapAlloc+0x42>
		{
			uxHighWaterMark = uxCurrent;
 800eb9c:	697b      	ldr	r3, [r7, #20]
 800eb9e:	613b      	str	r3, [r7, #16]
			/* This should never fail */
			TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntrySetState(xHeapHandle, TRC_HEAP_STATE_INDEX_HIGHWATERMARK, uxHighWaterMark) == TRC_SUCCESS);
 800eba0:	693a      	ldr	r2, [r7, #16]
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	609a      	str	r2, [r3, #8]
		}

		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntrySetState(xHeapHandle, TRC_HEAP_STATE_INDEX_CURRENT, uxCurrent) == TRC_SUCCESS);
 800eba6:	697a      	ldr	r2, [r7, #20]
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	605a      	str	r2, [r3, #4]
	}

	(void)xTraceEventCreate2((pvAddress != (void*)0) ? PSF_EVENT_MALLOC : PSF_EVENT_MALLOC_FAILED, (TraceUnsignedBaseType_t)pvAddress, uxSize);  /*cstat !MISRAC2004-11.3 !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6 Suppress conversion from pointer to integer check*/
 800ebac:	68bb      	ldr	r3, [r7, #8]
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d001      	beq.n	800ebb6 <xTraceHeapAlloc+0x52>
 800ebb2:	2338      	movs	r3, #56	@ 0x38
 800ebb4:	e000      	b.n	800ebb8 <xTraceHeapAlloc+0x54>
 800ebb6:	23e9      	movs	r3, #233	@ 0xe9
 800ebb8:	68b9      	ldr	r1, [r7, #8]
 800ebba:	687a      	ldr	r2, [r7, #4]
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	f7fe ffa5 	bl	800db0c <xTraceEventCreate2>

	return TRC_SUCCESS;
 800ebc2:	2300      	movs	r3, #0
}
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	3718      	adds	r7, #24
 800ebc8:	46bd      	mov	sp, r7
 800ebca:	bd80      	pop	{r7, pc}

0800ebcc <xTraceHeapFree>:

traceResult xTraceHeapFree(TraceHeapHandle_t xHeapHandle, void *pvAddress, TraceUnsignedBaseType_t uxSize)
{
 800ebcc:	b580      	push	{r7, lr}
 800ebce:	b086      	sub	sp, #24
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	60f8      	str	r0, [r7, #12]
 800ebd4:	60b9      	str	r1, [r7, #8]
 800ebd6:	607a      	str	r2, [r7, #4]
	TraceUnsignedBaseType_t uxCurrent;

	if (xHeapHandle == 0)
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d101      	bne.n	800ebe2 <xTraceHeapFree+0x16>
	{
		/* This can happen */
		return TRC_FAIL;
 800ebde:	2301      	movs	r3, #1
 800ebe0:	e018      	b.n	800ec14 <xTraceHeapFree+0x48>
	}

	/* If the address is null we assume this was a failed alloc attempt */
	if (pvAddress != (void*)0)
 800ebe2:	68bb      	ldr	r3, [r7, #8]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d009      	beq.n	800ebfc <xTraceHeapFree+0x30>
	{
		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntryGetState(xHeapHandle, TRC_HEAP_STATE_INDEX_CURRENT, &uxCurrent) == TRC_SUCCESS);
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	685b      	ldr	r3, [r3, #4]
 800ebec:	617b      	str	r3, [r7, #20]

		uxCurrent -= uxSize;
 800ebee:	697a      	ldr	r2, [r7, #20]
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	1ad3      	subs	r3, r2, r3
 800ebf4:	617b      	str	r3, [r7, #20]

		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntrySetState(xHeapHandle, TRC_HEAP_STATE_INDEX_CURRENT, uxCurrent) == TRC_SUCCESS);
 800ebf6:	697a      	ldr	r2, [r7, #20]
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	605a      	str	r2, [r3, #4]
	}

	(void)xTraceEventCreate2((pvAddress != (void*)0) ? PSF_EVENT_FREE : PSF_EVENT_FREE_FAILED, (TraceUnsignedBaseType_t)pvAddress, uxSize);  /*cstat !MISRAC2004-11.3 !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6 Suppress conversion from pointer to integer check*/
 800ebfc:	68bb      	ldr	r3, [r7, #8]
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d001      	beq.n	800ec06 <xTraceHeapFree+0x3a>
 800ec02:	2339      	movs	r3, #57	@ 0x39
 800ec04:	e000      	b.n	800ec08 <xTraceHeapFree+0x3c>
 800ec06:	23ea      	movs	r3, #234	@ 0xea
 800ec08:	68b9      	ldr	r1, [r7, #8]
 800ec0a:	687a      	ldr	r2, [r7, #4]
 800ec0c:	4618      	mov	r0, r3
 800ec0e:	f7fe ff7d 	bl	800db0c <xTraceEventCreate2>

	return TRC_SUCCESS;
 800ec12:	2300      	movs	r3, #0
}
 800ec14:	4618      	mov	r0, r3
 800ec16:	3718      	adds	r7, #24
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	bd80      	pop	{r7, pc}

0800ec1c <xTraceISRInitialize>:
#if (TRC_USE_TRACEALYZER_RECORDER == 1) && (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

TraceISRData_t* pxTraceISRData TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceISRInitialize(TraceISRData_t *pxBuffer)
{
 800ec1c:	b480      	push	{r7}
 800ec1e:	b087      	sub	sp, #28
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	6078      	str	r0, [r7, #4]
	uint32_t uiStackIndex;

	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxTraceISRData = pxBuffer;
 800ec24:	4a1b      	ldr	r2, [pc, #108]	@ (800ec94 <xTraceISRInitialize+0x78>)
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	6013      	str	r3, [r2, #0]

	for (uiCoreIndex = 0u; uiCoreIndex < (uint32_t)(TRC_CFG_CORE_COUNT); uiCoreIndex++)
 800ec2a:	2300      	movs	r3, #0
 800ec2c:	617b      	str	r3, [r7, #20]
 800ec2e:	e020      	b.n	800ec72 <xTraceISRInitialize+0x56>
	{
		TraceISRCoreData_t* pxCoreData = &pxTraceISRData->cores[uiCoreIndex];
 800ec30:	4b18      	ldr	r3, [pc, #96]	@ (800ec94 <xTraceISRInitialize+0x78>)
 800ec32:	6819      	ldr	r1, [r3, #0]
 800ec34:	697a      	ldr	r2, [r7, #20]
 800ec36:	4613      	mov	r3, r2
 800ec38:	009b      	lsls	r3, r3, #2
 800ec3a:	4413      	add	r3, r2
 800ec3c:	00db      	lsls	r3, r3, #3
 800ec3e:	440b      	add	r3, r1
 800ec40:	60fb      	str	r3, [r7, #12]

		/* Initialize ISR stack */
		for (uiStackIndex = 0u; uiStackIndex < (uint32_t)(TRC_CFG_MAX_ISR_NESTING); uiStackIndex++)
 800ec42:	2300      	movs	r3, #0
 800ec44:	613b      	str	r3, [r7, #16]
 800ec46:	e007      	b.n	800ec58 <xTraceISRInitialize+0x3c>
		{
			pxCoreData->handleStack[uiStackIndex] = 0;
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	693a      	ldr	r2, [r7, #16]
 800ec4c:	2100      	movs	r1, #0
 800ec4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (uiStackIndex = 0u; uiStackIndex < (uint32_t)(TRC_CFG_MAX_ISR_NESTING); uiStackIndex++)
 800ec52:	693b      	ldr	r3, [r7, #16]
 800ec54:	3301      	adds	r3, #1
 800ec56:	613b      	str	r3, [r7, #16]
 800ec58:	693b      	ldr	r3, [r7, #16]
 800ec5a:	2b07      	cmp	r3, #7
 800ec5c:	d9f4      	bls.n	800ec48 <xTraceISRInitialize+0x2c>
		}
		
		pxCoreData->stackIndex = -1;
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	f04f 32ff 	mov.w	r2, #4294967295
 800ec64:	621a      	str	r2, [r3, #32]
		pxCoreData->isPendingContextSwitch = 0u;
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	2200      	movs	r2, #0
 800ec6a:	625a      	str	r2, [r3, #36]	@ 0x24
	for (uiCoreIndex = 0u; uiCoreIndex < (uint32_t)(TRC_CFG_CORE_COUNT); uiCoreIndex++)
 800ec6c:	697b      	ldr	r3, [r7, #20]
 800ec6e:	3301      	adds	r3, #1
 800ec70:	617b      	str	r3, [r7, #20]
 800ec72:	697b      	ldr	r3, [r7, #20]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d0db      	beq.n	800ec30 <xTraceISRInitialize+0x14>
	}
	
	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_ISR);
 800ec78:	4b07      	ldr	r3, [pc, #28]	@ (800ec98 <xTraceISRInitialize+0x7c>)
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800ec80:	4a05      	ldr	r2, [pc, #20]	@ (800ec98 <xTraceISRInitialize+0x7c>)
 800ec82:	6013      	str	r3, [r2, #0]

	return TRC_SUCCESS;
 800ec84:	2300      	movs	r3, #0
}
 800ec86:	4618      	mov	r0, r3
 800ec88:	371c      	adds	r7, #28
 800ec8a:	46bd      	mov	sp, r7
 800ec8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec90:	4770      	bx	lr
 800ec92:	bf00      	nop
 800ec94:	20012d60 	.word	0x20012d60
 800ec98:	20017418 	.word	0x20017418

0800ec9c <xTraceKernelPortInitialize>:
static TraceKernelPortData_t* pxKernelPortData TRC_CFG_RECORDER_DATA_ATTRIBUTE;

#define TRC_PORT_MALLOC(size) pvPortMalloc(size)

traceResult xTraceKernelPortInitialize(TraceKernelPortDataBuffer_t* pxBuffer)
{
 800ec9c:	b480      	push	{r7}
 800ec9e:	b083      	sub	sp, #12
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	6078      	str	r0, [r7, #4]
	TRC_ASSERT_EQUAL_SIZE(TraceKernelPortDataBuffer_t, TraceKernelPortData_t);
	
	if (pxBuffer == 0)
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d101      	bne.n	800ecae <xTraceKernelPortInitialize+0x12>
	{
		return TRC_FAIL;
 800ecaa:	2301      	movs	r3, #1
 800ecac:	e00b      	b.n	800ecc6 <xTraceKernelPortInitialize+0x2a>
	}
	
	pxKernelPortData = (TraceKernelPortData_t*)pxBuffer;
 800ecae:	4a09      	ldr	r2, [pc, #36]	@ (800ecd4 <xTraceKernelPortInitialize+0x38>)
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	6013      	str	r3, [r2, #0]

	pxKernelPortData->xSystemHeapHandle = 0;
 800ecb4:	4b07      	ldr	r3, [pc, #28]	@ (800ecd4 <xTraceKernelPortInitialize+0x38>)
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	2200      	movs	r2, #0
 800ecba:	601a      	str	r2, [r3, #0]
	pxKernelPortData->xTzCtrlHandle = 0;
 800ecbc:	4b05      	ldr	r3, [pc, #20]	@ (800ecd4 <xTraceKernelPortInitialize+0x38>)
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	605a      	str	r2, [r3, #4]
	
	return TRC_SUCCESS;
 800ecc4:	2300      	movs	r3, #0
}
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	370c      	adds	r7, #12
 800ecca:	46bd      	mov	sp, r7
 800eccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd0:	4770      	bx	lr
 800ecd2:	bf00      	nop
 800ecd4:	20013e10 	.word	0x20013e10

0800ecd8 <xTraceKernelPortEnable>:

traceResult xTraceKernelPortEnable(void)
{
 800ecd8:	b590      	push	{r4, r7, lr}
 800ecda:	b085      	sub	sp, #20
 800ecdc:	af04      	add	r7, sp, #16
		xTraceEntrySetOptions(xIdleHandle, TRC_ENTRY_OPTION_IDLE_NAME);
	}
#endif
	
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
	if (pxKernelPortData->xSystemHeapHandle == 0)
 800ecde:	4b1a      	ldr	r3, [pc, #104]	@ (800ed48 <xTraceKernelPortEnable+0x70>)
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d109      	bne.n	800ecfc <xTraceKernelPortEnable+0x24>
	{
#if defined(configTOTAL_HEAP_SIZE)
		xTraceHeapCreate("System Heap", 0, 0, configTOTAL_HEAP_SIZE, &pxKernelPortData->xSystemHeapHandle);
 800ece8:	4b17      	ldr	r3, [pc, #92]	@ (800ed48 <xTraceKernelPortEnable+0x70>)
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	9300      	str	r3, [sp, #0]
 800ecee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800ecf2:	2200      	movs	r2, #0
 800ecf4:	2100      	movs	r1, #0
 800ecf6:	4815      	ldr	r0, [pc, #84]	@ (800ed4c <xTraceKernelPortEnable+0x74>)
 800ecf8:	f7ff ff14 	bl	800eb24 <xTraceHeapCreate>
		xTraceHeapCreate("System Heap", 0, 0, (TRC_CFG_TOTAL_HEAP_SIZE), &pxKernelPortData->xSystemHeapHandle);
#endif
	}
#endif
	
	if (pxKernelPortData->xTzCtrlHandle == 0)
 800ecfc:	4b12      	ldr	r3, [pc, #72]	@ (800ed48 <xTraceKernelPortEnable+0x70>)
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	685b      	ldr	r3, [r3, #4]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d11a      	bne.n	800ed3c <xTraceKernelPortEnable+0x64>
	{
		/* Creates the TzCtrl task - receives trace commands (start, stop, ...) */
#if defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1)
		pxKernelPortData->xTzCtrlHandle = xTaskCreateStatic(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, 0, TRC_CFG_CTRL_TASK_PRIORITY, stackTzCtrl, &tcbTzCtrl);
 800ed06:	4b10      	ldr	r3, [pc, #64]	@ (800ed48 <xTraceKernelPortEnable+0x70>)
 800ed08:	681c      	ldr	r4, [r3, #0]
 800ed0a:	4b11      	ldr	r3, [pc, #68]	@ (800ed50 <xTraceKernelPortEnable+0x78>)
 800ed0c:	9302      	str	r3, [sp, #8]
 800ed0e:	4b11      	ldr	r3, [pc, #68]	@ (800ed54 <xTraceKernelPortEnable+0x7c>)
 800ed10:	9301      	str	r3, [sp, #4]
 800ed12:	2301      	movs	r3, #1
 800ed14:	9300      	str	r3, [sp, #0]
 800ed16:	2300      	movs	r3, #0
 800ed18:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800ed1c:	490e      	ldr	r1, [pc, #56]	@ (800ed58 <xTraceKernelPortEnable+0x80>)
 800ed1e:	480f      	ldr	r0, [pc, #60]	@ (800ed5c <xTraceKernelPortEnable+0x84>)
 800ed20:	f7fb ff96 	bl	800ac50 <xTaskCreateStatic>
 800ed24:	4603      	mov	r3, r0
 800ed26:	6063      	str	r3, [r4, #4]
#else
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, 0, TRC_CFG_CTRL_TASK_PRIORITY, &pxKernelPortData->xTzCtrlHandle);
#endif

		if (pxKernelPortData->xTzCtrlHandle == 0)
 800ed28:	4b07      	ldr	r3, [pc, #28]	@ (800ed48 <xTraceKernelPortEnable+0x70>)
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	685b      	ldr	r3, [r3, #4]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d104      	bne.n	800ed3c <xTraceKernelPortEnable+0x64>
		{
			xTraceError(TRC_ERROR_TZCTRLTASK_NOT_CREATED);
 800ed32:	2006      	movs	r0, #6
 800ed34:	f7fe fd32 	bl	800d79c <xTraceError>

			return TRC_FAIL;
 800ed38:	2301      	movs	r3, #1
 800ed3a:	e000      	b.n	800ed3e <xTraceKernelPortEnable+0x66>
		}
	}
	
	return TRC_SUCCESS;
 800ed3c:	2300      	movs	r3, #0
}
 800ed3e:	4618      	mov	r0, r3
 800ed40:	3704      	adds	r7, #4
 800ed42:	46bd      	mov	sp, r7
 800ed44:	bd90      	pop	{r4, r7, pc}
 800ed46:	bf00      	nop
 800ed48:	20013e10 	.word	0x20013e10
 800ed4c:	08011118 	.word	0x08011118
 800ed50:	20013d64 	.word	0x20013d64
 800ed54:	20012d64 	.word	0x20012d64
 800ed58:	08011124 	.word	0x08011124
 800ed5c:	0800ed61 	.word	0x0800ed61

0800ed60 <TzCtrl>:

static portTASK_FUNCTION(TzCtrl, pvParameters)
{
 800ed60:	b580      	push	{r7, lr}
 800ed62:	b082      	sub	sp, #8
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	6078      	str	r0, [r7, #4]
	(void)pvParameters;

	while (1)
	{
		xTraceTzCtrl();
 800ed68:	f000 fdc8 	bl	800f8fc <xTraceTzCtrl>

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
 800ed6c:	200a      	movs	r0, #10
 800ed6e:	f7fc fa65 	bl	800b23c <vTaskDelay>
		xTraceTzCtrl();
 800ed72:	bf00      	nop
 800ed74:	e7f8      	b.n	800ed68 <TzCtrl+0x8>
	...

0800ed78 <xTraceKernelPortGetSystemHeapHandle>:
#endif

#endif

TraceHeapHandle_t xTraceKernelPortGetSystemHeapHandle(void)
{
 800ed78:	b480      	push	{r7}
 800ed7a:	af00      	add	r7, sp, #0
	return pxKernelPortData->xSystemHeapHandle;
 800ed7c:	4b03      	ldr	r3, [pc, #12]	@ (800ed8c <xTraceKernelPortGetSystemHeapHandle+0x14>)
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	681b      	ldr	r3, [r3, #0]
}
 800ed82:	4618      	mov	r0, r3
 800ed84:	46bd      	mov	sp, r7
 800ed86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed8a:	4770      	bx	lr
 800ed8c:	20013e10 	.word	0x20013e10

0800ed90 <xTraceMultiCoreEventBufferInitialize>:

#if (TRC_USE_TRACEALYZER_RECORDER == 1) && (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

traceResult xTraceMultiCoreEventBufferInitialize(TraceMultiCoreEventBuffer_t* const pxTraceMultiCoreEventBuffer, uint32_t uiOptions,
	uint8_t* puiBuffer, uint32_t uiSize)
{
 800ed90:	b580      	push	{r7, lr}
 800ed92:	b086      	sub	sp, #24
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	60f8      	str	r0, [r7, #12]
 800ed98:	60b9      	str	r1, [r7, #8]
 800ed9a:	607a      	str	r2, [r7, #4]
 800ed9c:	603b      	str	r3, [r7, #0]
	TRC_ASSERT(pxTraceMultiCoreEventBuffer != (void*)0);

	/* This should never fail */
	TRC_ASSERT(puiBuffer != (void*)0);

	uiBufferSizePerCore = ((uiSize / (uint32_t)(TRC_CFG_CORE_COUNT)) / sizeof(TraceUnsignedBaseType_t)) * sizeof(TraceUnsignedBaseType_t); /* BaseType aligned */
 800ed9e:	683b      	ldr	r3, [r7, #0]
 800eda0:	f023 0303 	bic.w	r3, r3, #3
 800eda4:	613b      	str	r3, [r7, #16]

	/* This should never fail */
	TRC_ASSERT(uiBufferSizePerCore != 0u);

	for (i = 0u; i < (uint32_t)(TRC_CFG_CORE_COUNT); i++)
 800eda6:	2300      	movs	r3, #0
 800eda8:	617b      	str	r3, [r7, #20]
 800edaa:	e021      	b.n	800edf0 <xTraceMultiCoreEventBufferInitialize+0x60>
	{
		/* Set the event buffer pointers to point into the allocated space we have been given, this ensures
		 * a flat memory layout necessary for usage in streaming snaphot. */
		pxTraceMultiCoreEventBuffer->xEventBuffer[i] = (TraceEventBuffer_t*)(&puiBuffer[i * uiBufferSizePerCore]); /*cstat !MISRAC2004-11.4 !MISRAC2012-Rule-11.3 Suppress conversion between pointer types checks*/ /*cstat !MISRAC2004-17.4_b We need to access a spcific point in the buffer*/
 800edac:	697b      	ldr	r3, [r7, #20]
 800edae:	693a      	ldr	r2, [r7, #16]
 800edb0:	fb02 f303 	mul.w	r3, r2, r3
 800edb4:	687a      	ldr	r2, [r7, #4]
 800edb6:	18d1      	adds	r1, r2, r3
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	697a      	ldr	r2, [r7, #20]
 800edbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		/* Initialize the event buffer structure with its memory buffer placed following its own structure data. */
		/* We need to check this */
		if (xTraceEventBufferInitialize(pxTraceMultiCoreEventBuffer->xEventBuffer[i], uiOptions,
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	697a      	ldr	r2, [r7, #20]
 800edc4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
			&puiBuffer[(i * uiBufferSizePerCore) + sizeof(TraceEventBuffer_t)], /*cstat !MISRAC2004-17.4_b We need to access a specific point in the buffer*/
 800edc8:	697b      	ldr	r3, [r7, #20]
 800edca:	693a      	ldr	r2, [r7, #16]
 800edcc:	fb02 f303 	mul.w	r3, r2, r3
 800edd0:	332c      	adds	r3, #44	@ 0x2c
		if (xTraceEventBufferInitialize(pxTraceMultiCoreEventBuffer->xEventBuffer[i], uiOptions,
 800edd2:	687a      	ldr	r2, [r7, #4]
 800edd4:	441a      	add	r2, r3
 800edd6:	693b      	ldr	r3, [r7, #16]
 800edd8:	3b2c      	subs	r3, #44	@ 0x2c
 800edda:	68b9      	ldr	r1, [r7, #8]
 800eddc:	f7ff fca0 	bl	800e720 <xTraceEventBufferInitialize>
 800ede0:	4603      	mov	r3, r0
 800ede2:	2b01      	cmp	r3, #1
 800ede4:	d101      	bne.n	800edea <xTraceMultiCoreEventBufferInitialize+0x5a>
			uiBufferSizePerCore - sizeof(TraceEventBuffer_t)) == TRC_FAIL)
		{
			return TRC_FAIL;
 800ede6:	2301      	movs	r3, #1
 800ede8:	e006      	b.n	800edf8 <xTraceMultiCoreEventBufferInitialize+0x68>
	for (i = 0u; i < (uint32_t)(TRC_CFG_CORE_COUNT); i++)
 800edea:	697b      	ldr	r3, [r7, #20]
 800edec:	3301      	adds	r3, #1
 800edee:	617b      	str	r3, [r7, #20]
 800edf0:	697b      	ldr	r3, [r7, #20]
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d0da      	beq.n	800edac <xTraceMultiCoreEventBufferInitialize+0x1c>
		}
	}

	return TRC_SUCCESS;
 800edf6:	2300      	movs	r3, #0
}
 800edf8:	4618      	mov	r0, r3
 800edfa:	3718      	adds	r7, #24
 800edfc:	46bd      	mov	sp, r7
 800edfe:	bd80      	pop	{r7, pc}

0800ee00 <xTraceMultiCoreEventBufferClear>:

	return TRC_SUCCESS;
}

traceResult xTraceMultiCoreEventBufferClear(const TraceMultiCoreEventBuffer_t* const pxTraceMultiCoreEventBuffer)
{
 800ee00:	b580      	push	{r7, lr}
 800ee02:	b084      	sub	sp, #16
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	6078      	str	r0, [r7, #4]
	uint32_t uiCoreId;

	/* This should never fail */
	TRC_ASSERT(pxTraceMultiCoreEventBuffer != (void*)0);

	for (uiCoreId = 0u; uiCoreId < (uint32_t)(TRC_CFG_CORE_COUNT); uiCoreId++)
 800ee08:	2300      	movs	r3, #0
 800ee0a:	60fb      	str	r3, [r7, #12]
 800ee0c:	e009      	b.n	800ee22 <xTraceMultiCoreEventBufferClear+0x22>
	{
		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEventBufferClear(pxTraceMultiCoreEventBuffer->xEventBuffer[uiCoreId]) == TRC_SUCCESS);
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	68fa      	ldr	r2, [r7, #12]
 800ee12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee16:	4618      	mov	r0, r3
 800ee18:	f7ff fe18 	bl	800ea4c <xTraceEventBufferClear>
	for (uiCoreId = 0u; uiCoreId < (uint32_t)(TRC_CFG_CORE_COUNT); uiCoreId++)
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	3301      	adds	r3, #1
 800ee20:	60fb      	str	r3, [r7, #12]
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d0f2      	beq.n	800ee0e <xTraceMultiCoreEventBufferClear+0xe>
	}

	return TRC_SUCCESS;
 800ee28:	2300      	movs	r3, #0
}
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	3710      	adds	r7, #16
 800ee2e:	46bd      	mov	sp, r7
 800ee30:	bd80      	pop	{r7, pc}
	...

0800ee34 <xTraceObjectRegisterInternal>:

traceResult prvTraceObjectSendNameEvent(void* pvObject, const char* szName, uint32_t uiLength);

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceObjectRegisterInternal(uint32_t uiEventCode, void* const pvObject, const char* szName, TraceUnsignedBaseType_t uxStateCount, const TraceUnsignedBaseType_t uxStates[], TraceUnsignedBaseType_t uxOptions, TraceObjectHandle_t* pxObjectHandle)
{
 800ee34:	b580      	push	{r7, lr}
 800ee36:	b090      	sub	sp, #64	@ 0x40
 800ee38:	af02      	add	r7, sp, #8
 800ee3a:	60f8      	str	r0, [r7, #12]
 800ee3c:	60b9      	str	r1, [r7, #8]
 800ee3e:	607a      	str	r2, [r7, #4]
 800ee40:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ee42:	f3ef 8310 	mrs	r3, PRIMASK
 800ee46:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800ee48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
	TRC_ASSERT(pxObjectHandle != (void*)0);

	/* This should never fail */
	TRC_ASSERT(uxStateCount <= (uint32_t)(TRC_ENTRY_TABLE_STATE_COUNT));

	TRACE_ENTER_CRITICAL_SECTION();
 800ee4a:	633b      	str	r3, [r7, #48]	@ 0x30
 800ee4c:	2301      	movs	r3, #1
 800ee4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ee50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee52:	f383 8810 	msr	PRIMASK, r3
}
 800ee56:	bf00      	nop

	if (pvObject != (void*)0)
 800ee58:	68bb      	ldr	r3, [r7, #8]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d01a      	beq.n	800ee94 <xTraceObjectRegisterInternal+0x60>
	{
		/* An address was supplied */
		if (xTraceEntryCreateWithAddress(pvObject, &xEntryHandle) == TRC_FAIL)
 800ee5e:	f107 0318 	add.w	r3, r7, #24
 800ee62:	4618      	mov	r0, r3
 800ee64:	f7fe faf8 	bl	800d458 <xTraceEntryCreate>
 800ee68:	4603      	mov	r3, r0
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d104      	bne.n	800ee78 <xTraceObjectRegisterInternal+0x44>
 800ee6e:	69bb      	ldr	r3, [r7, #24]
 800ee70:	68ba      	ldr	r2, [r7, #8]
 800ee72:	601a      	str	r2, [r3, #0]
 800ee74:	2300      	movs	r3, #0
 800ee76:	e000      	b.n	800ee7a <xTraceObjectRegisterInternal+0x46>
 800ee78:	2301      	movs	r3, #1
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d007      	beq.n	800ee8e <xTraceObjectRegisterInternal+0x5a>
 800ee7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee80:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ee82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee84:	f383 8810 	msr	PRIMASK, r3
}
 800ee88:	bf00      	nop
		{
			TRACE_EXIT_CRITICAL_SECTION();

			return TRC_FAIL;
 800ee8a:	2301      	movs	r3, #1
 800ee8c:	e07f      	b.n	800ef8e <xTraceObjectRegisterInternal+0x15a>
		}
		
		pvAddress = pvObject;
 800ee8e:	68bb      	ldr	r3, [r7, #8]
 800ee90:	617b      	str	r3, [r7, #20]
 800ee92:	e012      	b.n	800eeba <xTraceObjectRegisterInternal+0x86>
	}
	else
	{
		/* No address was supplied */
		if (xTraceEntryCreate(&xEntryHandle) == TRC_FAIL)
 800ee94:	f107 0318 	add.w	r3, r7, #24
 800ee98:	4618      	mov	r0, r3
 800ee9a:	f7fe fadd 	bl	800d458 <xTraceEntryCreate>
 800ee9e:	4603      	mov	r3, r0
 800eea0:	2b01      	cmp	r3, #1
 800eea2:	d107      	bne.n	800eeb4 <xTraceObjectRegisterInternal+0x80>
 800eea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eea6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eea8:	6a3b      	ldr	r3, [r7, #32]
 800eeaa:	f383 8810 	msr	PRIMASK, r3
}
 800eeae:	bf00      	nop
		{
			TRACE_EXIT_CRITICAL_SECTION();

			return TRC_FAIL;
 800eeb0:	2301      	movs	r3, #1
 800eeb2:	e06c      	b.n	800ef8e <xTraceObjectRegisterInternal+0x15a>
		}

		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntryGetAddress(xEntryHandle, &pvAddress) == TRC_SUCCESS);
 800eeb4:	69bb      	ldr	r3, [r7, #24]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	617b      	str	r3, [r7, #20]
	}

	for (i = 0u; i < uxStateCount; i++)
 800eeba:	2300      	movs	r3, #0
 800eebc:	637b      	str	r3, [r7, #52]	@ 0x34
 800eebe:	e00c      	b.n	800eeda <xTraceObjectRegisterInternal+0xa6>
	{
		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntrySetState(xEntryHandle, (uint32_t)i, uxStates[i]) == TRC_SUCCESS);
 800eec0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eec2:	009b      	lsls	r3, r3, #2
 800eec4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800eec6:	4413      	add	r3, r2
 800eec8:	69b9      	ldr	r1, [r7, #24]
 800eeca:	681a      	ldr	r2, [r3, #0]
 800eecc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eece:	009b      	lsls	r3, r3, #2
 800eed0:	440b      	add	r3, r1
 800eed2:	605a      	str	r2, [r3, #4]
	for (i = 0u; i < uxStateCount; i++)
 800eed4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eed6:	3301      	adds	r3, #1
 800eed8:	637b      	str	r3, [r7, #52]	@ 0x34
 800eeda:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800eedc:	683b      	ldr	r3, [r7, #0]
 800eede:	429a      	cmp	r2, r3
 800eee0:	d3ee      	bcc.n	800eec0 <xTraceObjectRegisterInternal+0x8c>
	}

	/* This should never fail */
	TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntrySetOptions(xEntryHandle, (uint32_t)uxOptions) == TRC_SUCCESS);
 800eee2:	69bb      	ldr	r3, [r7, #24]
 800eee4:	6919      	ldr	r1, [r3, #16]
 800eee6:	69bb      	ldr	r3, [r7, #24]
 800eee8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800eeea:	430a      	orrs	r2, r1
 800eeec:	611a      	str	r2, [r3, #16]

	*pxObjectHandle = (TraceObjectHandle_t)xEntryHandle;
 800eeee:	69ba      	ldr	r2, [r7, #24]
 800eef0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eef2:	601a      	str	r2, [r3, #0]
 800eef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eef6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eef8:	69fb      	ldr	r3, [r7, #28]
 800eefa:	f383 8810 	msr	PRIMASK, r3
}
 800eefe:	bf00      	nop

	TRACE_EXIT_CRITICAL_SECTION();

	if ((szName != (void*)0) && (szName[0] != (char)0)) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d008      	beq.n	800ef18 <xTraceObjectRegisterInternal+0xe4>
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	781b      	ldrb	r3, [r3, #0]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d004      	beq.n	800ef18 <xTraceObjectRegisterInternal+0xe4>
	{
		/* Not a null or empty string */
		/* This will set the symbol and create an event for it */
		/* This should never fail */
		TRC_ASSERT_ALWAYS_EVALUATE(xTraceObjectSetName((TraceObjectHandle_t)xEntryHandle, szName) == TRC_SUCCESS);
 800ef0e:	69bb      	ldr	r3, [r7, #24]
 800ef10:	6879      	ldr	r1, [r7, #4]
 800ef12:	4618      	mov	r0, r3
 800ef14:	f000 f876 	bl	800f004 <xTraceObjectSetName>
	}

	switch (uxStateCount)
 800ef18:	683b      	ldr	r3, [r7, #0]
 800ef1a:	2b03      	cmp	r3, #3
 800ef1c:	d834      	bhi.n	800ef88 <xTraceObjectRegisterInternal+0x154>
 800ef1e:	a201      	add	r2, pc, #4	@ (adr r2, 800ef24 <xTraceObjectRegisterInternal+0xf0>)
 800ef20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef24:	0800ef35 	.word	0x0800ef35
 800ef28:	0800ef3f 	.word	0x0800ef3f
 800ef2c:	0800ef51 	.word	0x0800ef51
 800ef30:	0800ef67 	.word	0x0800ef67
	{
		case 0:
			xTraceEventCreate1(uiEventCode, (TraceUnsignedBaseType_t)pvAddress);
 800ef34:	697b      	ldr	r3, [r7, #20]
 800ef36:	4619      	mov	r1, r3
 800ef38:	68f8      	ldr	r0, [r7, #12]
 800ef3a:	f7fe fd67 	bl	800da0c <xTraceEventCreate1>
		case 1:
			xTraceEventCreate2(uiEventCode, (TraceUnsignedBaseType_t)pvAddress, uxStates[0]);
 800ef3e:	697b      	ldr	r3, [r7, #20]
 800ef40:	4619      	mov	r1, r3
 800ef42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	461a      	mov	r2, r3
 800ef48:	68f8      	ldr	r0, [r7, #12]
 800ef4a:	f7fe fddf 	bl	800db0c <xTraceEventCreate2>
			break;
 800ef4e:	e01d      	b.n	800ef8c <xTraceObjectRegisterInternal+0x158>
		case 2:
			xTraceEventCreate3(uiEventCode, (TraceUnsignedBaseType_t)pvAddress, uxStates[0], uxStates[1]);
 800ef50:	697b      	ldr	r3, [r7, #20]
 800ef52:	4619      	mov	r1, r3
 800ef54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ef56:	681a      	ldr	r2, [r3, #0]
 800ef58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ef5a:	3304      	adds	r3, #4
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	68f8      	ldr	r0, [r7, #12]
 800ef60:	f7fe fe58 	bl	800dc14 <xTraceEventCreate3>
			break;
 800ef64:	e012      	b.n	800ef8c <xTraceObjectRegisterInternal+0x158>
		case 3:
			xTraceEventCreate4(uiEventCode, (TraceUnsignedBaseType_t)pvAddress, uxStates[0], uxStates[1], uxStates[2]);
 800ef66:	697b      	ldr	r3, [r7, #20]
 800ef68:	4618      	mov	r0, r3
 800ef6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ef6c:	681a      	ldr	r2, [r3, #0]
 800ef6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ef70:	3304      	adds	r3, #4
 800ef72:	6819      	ldr	r1, [r3, #0]
 800ef74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ef76:	3308      	adds	r3, #8
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	9300      	str	r3, [sp, #0]
 800ef7c:	460b      	mov	r3, r1
 800ef7e:	4601      	mov	r1, r0
 800ef80:	68f8      	ldr	r0, [r7, #12]
 800ef82:	f7fe fecf 	bl	800dd24 <xTraceEventCreate4>
			break;
 800ef86:	e001      	b.n	800ef8c <xTraceObjectRegisterInternal+0x158>
		default:
			return TRC_FAIL;
 800ef88:	2301      	movs	r3, #1
 800ef8a:	e000      	b.n	800ef8e <xTraceObjectRegisterInternal+0x15a>
			break;
	}

	return TRC_SUCCESS;
 800ef8c:	2300      	movs	r3, #0
}
 800ef8e:	4618      	mov	r0, r3
 800ef90:	3738      	adds	r7, #56	@ 0x38
 800ef92:	46bd      	mov	sp, r7
 800ef94:	bd80      	pop	{r7, pc}
 800ef96:	bf00      	nop

0800ef98 <xTraceObjectUnregister>:
	TraceUnsignedBaseType_t auxStates[2] = { uxState1, uxState2 };
	return xTraceObjectRegisterInternal(uiEventCode, pvObject, szName, 2u, auxStates, 0u, pxObjectHandle);
}

traceResult xTraceObjectUnregister(TraceObjectHandle_t xObjectHandle, uint32_t uiEventCode, TraceUnsignedBaseType_t uxState)
{
 800ef98:	b580      	push	{r7, lr}
 800ef9a:	b088      	sub	sp, #32
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	60f8      	str	r0, [r7, #12]
 800efa0:	60b9      	str	r1, [r7, #8]
 800efa2:	607a      	str	r2, [r7, #4]
	void* pvObject = (void*)0;
 800efa4:	2300      	movs	r3, #0
 800efa6:	617b      	str	r3, [r7, #20]
	const char *szName = (void*)0; /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 800efa8:	2300      	movs	r3, #0
 800efaa:	613b      	str	r3, [r7, #16]

	/* If asserts are disabled this variable will not get used, this stops warnings. */
	(void)szName;

	/* This should never fail */
	TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntryGetAddress((TraceEntryHandle_t)xObjectHandle, &pvObject) == TRC_SUCCESS);
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	617b      	str	r3, [r7, #20]

	/* This should never fail */
	TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntryGetSymbol((TraceEntryHandle_t)xObjectHandle, &szName) == TRC_SUCCESS);
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	3314      	adds	r3, #20
 800efb6:	613b      	str	r3, [r7, #16]

#if (TRC_SEND_NAME_ONLY_ON_DELETE == 1)
	/* Send name event because this is a delete */

	for (i = 0u; (szName[i] != (char)0) && (i < 128u); i++) {} /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 800efb8:	2300      	movs	r3, #0
 800efba:	61fb      	str	r3, [r7, #28]
 800efbc:	e002      	b.n	800efc4 <xTraceObjectUnregister+0x2c>
 800efbe:	69fb      	ldr	r3, [r7, #28]
 800efc0:	3301      	adds	r3, #1
 800efc2:	61fb      	str	r3, [r7, #28]
 800efc4:	693a      	ldr	r2, [r7, #16]
 800efc6:	69fb      	ldr	r3, [r7, #28]
 800efc8:	4413      	add	r3, r2
 800efca:	781b      	ldrb	r3, [r3, #0]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d002      	beq.n	800efd6 <xTraceObjectUnregister+0x3e>
 800efd0:	69fb      	ldr	r3, [r7, #28]
 800efd2:	2b7f      	cmp	r3, #127	@ 0x7f
 800efd4:	d9f3      	bls.n	800efbe <xTraceObjectUnregister+0x26>

	uiLength = i;
 800efd6:	69fb      	ldr	r3, [r7, #28]
 800efd8:	61bb      	str	r3, [r7, #24]
	/* This should never fail */
	TRC_ASSERT_ALWAYS_EVALUATE(prvTraceObjectSendNameEvent(pvObject, szName, uiLength) == TRC_SUCCESS);
 800efda:	697b      	ldr	r3, [r7, #20]
 800efdc:	6939      	ldr	r1, [r7, #16]
 800efde:	69ba      	ldr	r2, [r7, #24]
 800efe0:	4618      	mov	r0, r3
 800efe2:	f000 f8ca 	bl	800f17a <prvTraceObjectSendNameEvent>
#endif /* (TRC_SEND_NAME_ONLY_ON_DELETE == 1) */

	/* Send the delete event, if possible */
	(void)xTraceEventCreate2(uiEventCode, (TraceUnsignedBaseType_t)(pvObject), uxState);  /*cstat !MISRAC2004-11.3 !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6 Suppress conversion from pointer to integer check*/
 800efe6:	697b      	ldr	r3, [r7, #20]
 800efe8:	687a      	ldr	r2, [r7, #4]
 800efea:	4619      	mov	r1, r3
 800efec:	68b8      	ldr	r0, [r7, #8]
 800efee:	f7fe fd8d 	bl	800db0c <xTraceEventCreate2>

	return xTraceEntryDelete(xObjectHandle);
 800eff2:	68f8      	ldr	r0, [r7, #12]
 800eff4:	f7fe fa90 	bl	800d518 <xTraceEntryDelete>
 800eff8:	4603      	mov	r3, r0
}
 800effa:	4618      	mov	r0, r3
 800effc:	3720      	adds	r7, #32
 800effe:	46bd      	mov	sp, r7
 800f000:	bd80      	pop	{r7, pc}
	...

0800f004 <xTraceObjectSetName>:

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceObjectSetName(TraceObjectHandle_t xObjectHandle, const char* szName)
{
 800f004:	b580      	push	{r7, lr}
 800f006:	b086      	sub	sp, #24
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
 800f00c:	6039      	str	r1, [r7, #0]
	void* pvObject = (void*)0;
 800f00e:	2300      	movs	r3, #0
 800f010:	60fb      	str	r3, [r7, #12]
	uint32_t i;

    /* If asserts are disabled this variable will not get used, this stops warnings. */
	(void)pvObject;

	if (szName == (void*)0)
 800f012:	683b      	ldr	r3, [r7, #0]
 800f014:	2b00      	cmp	r3, #0
 800f016:	d101      	bne.n	800f01c <xTraceObjectSetName+0x18>
	{
		szName = ""; /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 800f018:	4b0f      	ldr	r3, [pc, #60]	@ (800f058 <xTraceObjectSetName+0x54>)
 800f01a:	603b      	str	r3, [r7, #0]
	}

	/* This should never fail */
	TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntryGetAddress((TraceEntryHandle_t)xObjectHandle, &pvObject) == TRC_SUCCESS);
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	60fb      	str	r3, [r7, #12]

	for (i = 0u; (szName[i] != (char)0) && (i < 128u); i++) {} /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 800f022:	2300      	movs	r3, #0
 800f024:	617b      	str	r3, [r7, #20]
 800f026:	e002      	b.n	800f02e <xTraceObjectSetName+0x2a>
 800f028:	697b      	ldr	r3, [r7, #20]
 800f02a:	3301      	adds	r3, #1
 800f02c:	617b      	str	r3, [r7, #20]
 800f02e:	683a      	ldr	r2, [r7, #0]
 800f030:	697b      	ldr	r3, [r7, #20]
 800f032:	4413      	add	r3, r2
 800f034:	781b      	ldrb	r3, [r3, #0]
 800f036:	2b00      	cmp	r3, #0
 800f038:	d002      	beq.n	800f040 <xTraceObjectSetName+0x3c>
 800f03a:	697b      	ldr	r3, [r7, #20]
 800f03c:	2b7f      	cmp	r3, #127	@ 0x7f
 800f03e:	d9f3      	bls.n	800f028 <xTraceObjectSetName+0x24>

	uiLength = i;
 800f040:	697b      	ldr	r3, [r7, #20]
 800f042:	613b      	str	r3, [r7, #16]
	/* Send name event now since we don't do it on delete events */
	/* This should never fail */
	TRC_ASSERT_ALWAYS_EVALUATE(prvTraceObjectSendNameEvent(pvObject, szName, uiLength) == TRC_SUCCESS);
#endif /* (TRC_SEND_NAME_ONLY_ON_DELETE == 0) */

	return xTraceEntrySetSymbol((TraceEntryHandle_t)xObjectHandle, szName, uiLength);
 800f044:	693a      	ldr	r2, [r7, #16]
 800f046:	6839      	ldr	r1, [r7, #0]
 800f048:	6878      	ldr	r0, [r7, #4]
 800f04a:	f7fe fad9 	bl	800d600 <xTraceEntrySetSymbol>
 800f04e:	4603      	mov	r3, r0
}
 800f050:	4618      	mov	r0, r3
 800f052:	3718      	adds	r7, #24
 800f054:	46bd      	mov	sp, r7
 800f056:	bd80      	pop	{r7, pc}
 800f058:	0801112c 	.word	0x0801112c

0800f05c <xTraceObjectRegisterWithoutHandle>:

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceObjectRegisterWithoutHandle(uint32_t uiEventCode, void* pvObject, const char* szName, TraceUnsignedBaseType_t uxState)
{
 800f05c:	b580      	push	{r7, lr}
 800f05e:	b08a      	sub	sp, #40	@ 0x28
 800f060:	af04      	add	r7, sp, #16
 800f062:	60f8      	str	r0, [r7, #12]
 800f064:	60b9      	str	r1, [r7, #8]
 800f066:	607a      	str	r2, [r7, #4]
 800f068:	603b      	str	r3, [r7, #0]
	TraceObjectHandle_t xObjectHandle;

	return xTraceObjectRegisterInternal(uiEventCode, pvObject, szName, 1u, &uxState, 0u, &xObjectHandle);
 800f06a:	f107 0314 	add.w	r3, r7, #20
 800f06e:	9302      	str	r3, [sp, #8]
 800f070:	2300      	movs	r3, #0
 800f072:	9301      	str	r3, [sp, #4]
 800f074:	463b      	mov	r3, r7
 800f076:	9300      	str	r3, [sp, #0]
 800f078:	2301      	movs	r3, #1
 800f07a:	687a      	ldr	r2, [r7, #4]
 800f07c:	68b9      	ldr	r1, [r7, #8]
 800f07e:	68f8      	ldr	r0, [r7, #12]
 800f080:	f7ff fed8 	bl	800ee34 <xTraceObjectRegisterInternal>
 800f084:	4603      	mov	r3, r0
}
 800f086:	4618      	mov	r0, r3
 800f088:	3718      	adds	r7, #24
 800f08a:	46bd      	mov	sp, r7
 800f08c:	bd80      	pop	{r7, pc}

0800f08e <xTraceObjectUnregisterWithoutHandle>:
	
	return xTraceObjectRegisterInternal(uiEventCode, pvObject, szName, 2u, auxStates, 0u, &xObjectHandle);
}

traceResult xTraceObjectUnregisterWithoutHandle(uint32_t uiEventCode, void* pvObject, TraceUnsignedBaseType_t uxState)
{
 800f08e:	b580      	push	{r7, lr}
 800f090:	b08c      	sub	sp, #48	@ 0x30
 800f092:	af00      	add	r7, sp, #0
 800f094:	60f8      	str	r0, [r7, #12]
 800f096:	60b9      	str	r1, [r7, #8]
 800f098:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f09a:	f3ef 8310 	mrs	r3, PRIMASK
 800f09e:	623b      	str	r3, [r7, #32]
  return(result);
 800f0a0:	6a3b      	ldr	r3, [r7, #32]
	TraceEntryHandle_t xEntryHandle;
	traceResult xResult;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ENTER_CRITICAL_SECTION();
 800f0a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f0a4:	2301      	movs	r3, #1
 800f0a6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f0a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0aa:	f383 8810 	msr	PRIMASK, r3
}
 800f0ae:	bf00      	nop

	if (xTraceEntryFind(pvObject, &xEntryHandle) == TRC_FAIL)
 800f0b0:	f107 0314 	add.w	r3, r7, #20
 800f0b4:	4619      	mov	r1, r3
 800f0b6:	68b8      	ldr	r0, [r7, #8]
 800f0b8:	f7fe fa76 	bl	800d5a8 <xTraceEntryFind>
 800f0bc:	4603      	mov	r3, r0
 800f0be:	2b01      	cmp	r3, #1
 800f0c0:	d107      	bne.n	800f0d2 <xTraceObjectUnregisterWithoutHandle+0x44>
 800f0c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f0c6:	69fb      	ldr	r3, [r7, #28]
 800f0c8:	f383 8810 	msr	PRIMASK, r3
}
 800f0cc:	bf00      	nop
	{
		TRACE_EXIT_CRITICAL_SECTION();

		return TRC_FAIL;
 800f0ce:	2301      	movs	r3, #1
 800f0d0:	e00d      	b.n	800f0ee <xTraceObjectUnregisterWithoutHandle+0x60>
	}

	xResult = xTraceObjectUnregister((TraceObjectHandle_t)xEntryHandle, uiEventCode, uxState);
 800f0d2:	697b      	ldr	r3, [r7, #20]
 800f0d4:	687a      	ldr	r2, [r7, #4]
 800f0d6:	68f9      	ldr	r1, [r7, #12]
 800f0d8:	4618      	mov	r0, r3
 800f0da:	f7ff ff5d 	bl	800ef98 <xTraceObjectUnregister>
 800f0de:	62b8      	str	r0, [r7, #40]	@ 0x28
 800f0e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0e2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f0e4:	69bb      	ldr	r3, [r7, #24]
 800f0e6:	f383 8810 	msr	PRIMASK, r3
}
 800f0ea:	bf00      	nop

	TRACE_EXIT_CRITICAL_SECTION();

	return xResult;
 800f0ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	3730      	adds	r7, #48	@ 0x30
 800f0f2:	46bd      	mov	sp, r7
 800f0f4:	bd80      	pop	{r7, pc}

0800f0f6 <xTraceObjectSetNameWithoutHandle>:

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceObjectSetNameWithoutHandle(void* pvObject, const char* szName)
{
 800f0f6:	b580      	push	{r7, lr}
 800f0f8:	b08a      	sub	sp, #40	@ 0x28
 800f0fa:	af00      	add	r7, sp, #0
 800f0fc:	6078      	str	r0, [r7, #4]
 800f0fe:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f100:	f3ef 8310 	mrs	r3, PRIMASK
 800f104:	61bb      	str	r3, [r7, #24]
  return(result);
 800f106:	69bb      	ldr	r3, [r7, #24]
	TraceEntryHandle_t xEntryHandle;
	traceResult xResult;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ENTER_CRITICAL_SECTION();
 800f108:	627b      	str	r3, [r7, #36]	@ 0x24
 800f10a:	2301      	movs	r3, #1
 800f10c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f10e:	69fb      	ldr	r3, [r7, #28]
 800f110:	f383 8810 	msr	PRIMASK, r3
}
 800f114:	bf00      	nop

	if (xTraceEntryFind(pvObject, &xEntryHandle) == TRC_FAIL)
 800f116:	f107 030c 	add.w	r3, r7, #12
 800f11a:	4619      	mov	r1, r3
 800f11c:	6878      	ldr	r0, [r7, #4]
 800f11e:	f7fe fa43 	bl	800d5a8 <xTraceEntryFind>
 800f122:	4603      	mov	r3, r0
 800f124:	2b01      	cmp	r3, #1
 800f126:	d117      	bne.n	800f158 <xTraceObjectSetNameWithoutHandle+0x62>
	{
		/* No previous entry found. Create one. */
		if (xTraceEntryCreateWithAddress(pvObject, &xEntryHandle) == TRC_FAIL)
 800f128:	f107 030c 	add.w	r3, r7, #12
 800f12c:	4618      	mov	r0, r3
 800f12e:	f7fe f993 	bl	800d458 <xTraceEntryCreate>
 800f132:	4603      	mov	r3, r0
 800f134:	2b00      	cmp	r3, #0
 800f136:	d104      	bne.n	800f142 <xTraceObjectSetNameWithoutHandle+0x4c>
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	687a      	ldr	r2, [r7, #4]
 800f13c:	601a      	str	r2, [r3, #0]
 800f13e:	2300      	movs	r3, #0
 800f140:	e000      	b.n	800f144 <xTraceObjectSetNameWithoutHandle+0x4e>
 800f142:	2301      	movs	r3, #1
 800f144:	2b00      	cmp	r3, #0
 800f146:	d007      	beq.n	800f158 <xTraceObjectSetNameWithoutHandle+0x62>
 800f148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f14a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f14c:	697b      	ldr	r3, [r7, #20]
 800f14e:	f383 8810 	msr	PRIMASK, r3
}
 800f152:	bf00      	nop
		{
			TRACE_EXIT_CRITICAL_SECTION();

			return TRC_FAIL;
 800f154:	2301      	movs	r3, #1
 800f156:	e00c      	b.n	800f172 <xTraceObjectSetNameWithoutHandle+0x7c>
		}
	}

	xResult = xTraceObjectSetName((TraceObjectHandle_t)xEntryHandle, szName);
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	6839      	ldr	r1, [r7, #0]
 800f15c:	4618      	mov	r0, r3
 800f15e:	f7ff ff51 	bl	800f004 <xTraceObjectSetName>
 800f162:	6238      	str	r0, [r7, #32]
 800f164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f166:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f168:	693b      	ldr	r3, [r7, #16]
 800f16a:	f383 8810 	msr	PRIMASK, r3
}
 800f16e:	bf00      	nop

	TRACE_EXIT_CRITICAL_SECTION();

	return xResult;
 800f170:	6a3b      	ldr	r3, [r7, #32]
}
 800f172:	4618      	mov	r0, r3
 800f174:	3728      	adds	r7, #40	@ 0x28
 800f176:	46bd      	mov	sp, r7
 800f178:	bd80      	pop	{r7, pc}

0800f17a <prvTraceObjectSendNameEvent>:
	return xResult;
}

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult prvTraceObjectSendNameEvent(void* const pvObject, const char* szName, uint32_t uiLength)
{
 800f17a:	b580      	push	{r7, lr}
 800f17c:	b084      	sub	sp, #16
 800f17e:	af00      	add	r7, sp, #0
 800f180:	60f8      	str	r0, [r7, #12]
 800f182:	60b9      	str	r1, [r7, #8]
 800f184:	607a      	str	r2, [r7, #4]
	return xTraceEventCreateData1(PSF_EVENT_OBJ_NAME, (TraceUnsignedBaseType_t)pvObject, (TraceUnsignedBaseType_t*)szName, uiLength + 1); /* +1 for termination */
 800f186:	68f9      	ldr	r1, [r7, #12]
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	3301      	adds	r3, #1
 800f18c:	68ba      	ldr	r2, [r7, #8]
 800f18e:	2003      	movs	r0, #3
 800f190:	f7fe fed8 	bl	800df44 <xTraceEventCreateData1>
 800f194:	4603      	mov	r3, r0
}
 800f196:	4618      	mov	r0, r3
 800f198:	3710      	adds	r7, #16
 800f19a:	46bd      	mov	sp, r7
 800f19c:	bd80      	pop	{r7, pc}
	...

0800f1a0 <xTracePrintInitialize>:
static traceResult prvTraceVPrintF(const TraceStringHandle_t xChannel, const char* szFormat, uint32_t uiLength, uint32_t uiArgs, va_list* pxVariableList);

static TracePrintData_t *pxPrintData TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTracePrintInitialize(TracePrintData_t *pxBuffer)
{
 800f1a0:	b480      	push	{r7}
 800f1a2:	b083      	sub	sp, #12
 800f1a4:	af00      	add	r7, sp, #0
 800f1a6:	6078      	str	r0, [r7, #4]
	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxPrintData = pxBuffer;
 800f1a8:	4a0b      	ldr	r2, [pc, #44]	@ (800f1d8 <xTracePrintInitialize+0x38>)
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	6013      	str	r3, [r2, #0]

	pxPrintData->defaultChannel = 0;
 800f1ae:	4b0a      	ldr	r3, [pc, #40]	@ (800f1d8 <xTracePrintInitialize+0x38>)
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	2200      	movs	r2, #0
 800f1b4:	601a      	str	r2, [r3, #0]
	pxPrintData->consoleChannel = 0;
 800f1b6:	4b08      	ldr	r3, [pc, #32]	@ (800f1d8 <xTracePrintInitialize+0x38>)
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	2200      	movs	r2, #0
 800f1bc:	605a      	str	r2, [r3, #4]

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_PRINT);
 800f1be:	4b07      	ldr	r3, [pc, #28]	@ (800f1dc <xTracePrintInitialize+0x3c>)
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f1c6:	4a05      	ldr	r2, [pc, #20]	@ (800f1dc <xTracePrintInitialize+0x3c>)
 800f1c8:	6013      	str	r3, [r2, #0]
	
	return TRC_SUCCESS;
 800f1ca:	2300      	movs	r3, #0
}
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	370c      	adds	r7, #12
 800f1d0:	46bd      	mov	sp, r7
 800f1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d6:	4770      	bx	lr
 800f1d8:	20013e14 	.word	0x20013e14
 800f1dc:	20017418 	.word	0x20017418

0800f1e0 <xTracePrint>:

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTracePrint(TraceStringHandle_t xChannel, const char* szString)
{
 800f1e0:	b580      	push	{r7, lr}
 800f1e2:	b086      	sub	sp, #24
 800f1e4:	af02      	add	r7, sp, #8
 800f1e6:	6078      	str	r0, [r7, #4]
 800f1e8:	6039      	str	r1, [r7, #0]
	uint32_t uiLength;
	uint32_t i;
	
	/* We need to check this */
	if (xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_PRINT) == 0U)
 800f1ea:	4b16      	ldr	r3, [pc, #88]	@ (800f244 <xTracePrint+0x64>)
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d101      	bne.n	800f1fa <xTracePrint+0x1a>
	{
		return TRC_FAIL;
 800f1f6:	2301      	movs	r3, #1
 800f1f8:	e01f      	b.n	800f23a <xTracePrint+0x5a>
	}

	if (szString == (void*)0)
 800f1fa:	683b      	ldr	r3, [r7, #0]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d101      	bne.n	800f204 <xTracePrint+0x24>
	{
		szString = ""; /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 800f200:	4b11      	ldr	r3, [pc, #68]	@ (800f248 <xTracePrint+0x68>)
 800f202:	603b      	str	r3, [r7, #0]
	}

	for (i = 0u; (szString[i] != (char)0) && (i < 128u); i++) {} /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress char base type usage checks*/ /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 800f204:	2300      	movs	r3, #0
 800f206:	60fb      	str	r3, [r7, #12]
 800f208:	e002      	b.n	800f210 <xTracePrint+0x30>
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	3301      	adds	r3, #1
 800f20e:	60fb      	str	r3, [r7, #12]
 800f210:	683a      	ldr	r2, [r7, #0]
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	4413      	add	r3, r2
 800f216:	781b      	ldrb	r3, [r3, #0]
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d002      	beq.n	800f222 <xTracePrint+0x42>
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	2b7f      	cmp	r3, #127	@ 0x7f
 800f220:	d9f3      	bls.n	800f20a <xTracePrint+0x2a>

	uiLength = i + 1u; /* Null termination */
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	3301      	adds	r3, #1
 800f226:	60bb      	str	r3, [r7, #8]

	return prvTraceVPrintF(xChannel, szString, uiLength, 0u, (va_list*)0);  /*cstat !MISRAC2004-11.3 !MISRAC2012-Rule-11.4 Suppress conversion of pointer to integer check*/ /*cstat !MISRAC2012-Rule-11.9 Suppress NULL recommendation*/
 800f228:	2300      	movs	r3, #0
 800f22a:	9300      	str	r3, [sp, #0]
 800f22c:	2300      	movs	r3, #0
 800f22e:	68ba      	ldr	r2, [r7, #8]
 800f230:	6839      	ldr	r1, [r7, #0]
 800f232:	6878      	ldr	r0, [r7, #4]
 800f234:	f000 f880 	bl	800f338 <prvTraceVPrintF>
 800f238:	4603      	mov	r3, r0
}
 800f23a:	4618      	mov	r0, r3
 800f23c:	3710      	adds	r7, #16
 800f23e:	46bd      	mov	sp, r7
 800f240:	bd80      	pop	{r7, pc}
 800f242:	bf00      	nop
 800f244:	20017418 	.word	0x20017418
 800f248:	08011130 	.word	0x08011130

0800f24c <xTracePrintF>:
	return xResult;
}

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2004-16.1 Suppress variable parameter count check*/
traceResult xTracePrintF(TraceStringHandle_t xChannel, const char* szFormat, ...)
{
 800f24c:	b40e      	push	{r1, r2, r3}
 800f24e:	b580      	push	{r7, lr}
 800f250:	b085      	sub	sp, #20
 800f252:	af00      	add	r7, sp, #0
 800f254:	6078      	str	r0, [r7, #4]
	traceResult xResult;
	va_list xVariableList; /*cstat !MISRAC2012-Rule-17.1 Suppress stdarg usage check*/

	/* We need to check this */
	if (xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_PRINT) == 0U)
 800f256:	4b0d      	ldr	r3, [pc, #52]	@ (800f28c <xTracePrintF+0x40>)
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d101      	bne.n	800f266 <xTracePrintF+0x1a>
	{
		return TRC_FAIL;
 800f262:	2301      	movs	r3, #1
 800f264:	e00b      	b.n	800f27e <xTracePrintF+0x32>
	}

	va_start(xVariableList, szFormat);
 800f266:	f107 0320 	add.w	r3, r7, #32
 800f26a:	60bb      	str	r3, [r7, #8]
	xResult = xTraceVPrintF(xChannel, szFormat, &xVariableList);
 800f26c:	f107 0308 	add.w	r3, r7, #8
 800f270:	461a      	mov	r2, r3
 800f272:	69f9      	ldr	r1, [r7, #28]
 800f274:	6878      	ldr	r0, [r7, #4]
 800f276:	f000 f80b 	bl	800f290 <xTraceVPrintF>
 800f27a:	60f8      	str	r0, [r7, #12]
	va_end(xVariableList);

	return xResult;
 800f27c:	68fb      	ldr	r3, [r7, #12]
}
 800f27e:	4618      	mov	r0, r3
 800f280:	3714      	adds	r7, #20
 800f282:	46bd      	mov	sp, r7
 800f284:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f288:	b003      	add	sp, #12
 800f28a:	4770      	bx	lr
 800f28c:	20017418 	.word	0x20017418

0800f290 <xTraceVPrintF>:

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2012-Rule-17.1 Suppress stdarg usage check*/
traceResult xTraceVPrintF(TraceStringHandle_t xChannel, const char* szFormat, va_list* pxVariableList)
{
 800f290:	b580      	push	{r7, lr}
 800f292:	b08a      	sub	sp, #40	@ 0x28
 800f294:	af02      	add	r7, sp, #8
 800f296:	60f8      	str	r0, [r7, #12]
 800f298:	60b9      	str	r1, [r7, #8]
 800f29a:	607a      	str	r2, [r7, #4]
	uint32_t i;
	uint32_t uiArgs = 0u;
 800f29c:	2300      	movs	r3, #0
 800f29e:	61bb      	str	r3, [r7, #24]
	uint32_t uiLength;

	/* We need to check this */
	if (xTraceIsComponentInitialized(TRC_RECORDER_COMPONENT_PRINT) == 0U)
 800f2a0:	4b23      	ldr	r3, [pc, #140]	@ (800f330 <xTraceVPrintF+0xa0>)
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d101      	bne.n	800f2b0 <xTraceVPrintF+0x20>
	{
		return TRC_FAIL;
 800f2ac:	2301      	movs	r3, #1
 800f2ae:	e03b      	b.n	800f328 <xTraceVPrintF+0x98>
	}

	if (szFormat == (void*)0)
 800f2b0:	68bb      	ldr	r3, [r7, #8]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d101      	bne.n	800f2ba <xTraceVPrintF+0x2a>
	{
		szFormat = ""; /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 800f2b6:	4b1f      	ldr	r3, [pc, #124]	@ (800f334 <xTraceVPrintF+0xa4>)
 800f2b8:	60bb      	str	r3, [r7, #8]
	}

	/* Count the number of arguments in the format string (e.g., %d) */
	for (i = 0u; (szFormat[i] != (char)0) && (i < 128u); i++) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress char base type usage checks*/ /*cstat !MISRAC2012-Rule-14.2 Suppress malformed for loop due to i being incremented inside*/ /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 800f2ba:	2300      	movs	r3, #0
 800f2bc:	61fb      	str	r3, [r7, #28]
 800f2be:	e01e      	b.n	800f2fe <xTraceVPrintF+0x6e>
	{
		if (szFormat[i] == '%') /*cstat !MISRAC2004-17.4_b We need to access a specific character in the string*/
 800f2c0:	68ba      	ldr	r2, [r7, #8]
 800f2c2:	69fb      	ldr	r3, [r7, #28]
 800f2c4:	4413      	add	r3, r2
 800f2c6:	781b      	ldrb	r3, [r3, #0]
 800f2c8:	2b25      	cmp	r3, #37	@ 0x25
 800f2ca:	d115      	bne.n	800f2f8 <xTraceVPrintF+0x68>
		{
			if (szFormat[i + 1u] == (char)0) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2004-17.4_b We need to access a specific character in the string*/
 800f2cc:	69fb      	ldr	r3, [r7, #28]
 800f2ce:	3301      	adds	r3, #1
 800f2d0:	68ba      	ldr	r2, [r7, #8]
 800f2d2:	4413      	add	r3, r2
 800f2d4:	781b      	ldrb	r3, [r3, #0]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d00d      	beq.n	800f2f6 <xTraceVPrintF+0x66>
			{
				/* Found end of string, let for loop detect it */
				continue; /*cstat !MISRAC2004-14.5 Suppress continue usage check*/
			}

			if (szFormat[i + 1u] != '%') /*cstat !MISRAC2004-17.4_b We need to access a specific character in the string*/
 800f2da:	69fb      	ldr	r3, [r7, #28]
 800f2dc:	3301      	adds	r3, #1
 800f2de:	68ba      	ldr	r2, [r7, #8]
 800f2e0:	4413      	add	r3, r2
 800f2e2:	781b      	ldrb	r3, [r3, #0]
 800f2e4:	2b25      	cmp	r3, #37	@ 0x25
 800f2e6:	d002      	beq.n	800f2ee <xTraceVPrintF+0x5e>
			{
				uiArgs++;        /* Found an argument */
 800f2e8:	69bb      	ldr	r3, [r7, #24]
 800f2ea:	3301      	adds	r3, #1
 800f2ec:	61bb      	str	r3, [r7, #24]
			}

			/* Move past format specifier or non-argument '%' */
			i++; /*cstat !MISRAC2004-13.6 Suppress i increment inside for loop check*/
 800f2ee:	69fb      	ldr	r3, [r7, #28]
 800f2f0:	3301      	adds	r3, #1
 800f2f2:	61fb      	str	r3, [r7, #28]
 800f2f4:	e000      	b.n	800f2f8 <xTraceVPrintF+0x68>
				continue; /*cstat !MISRAC2004-14.5 Suppress continue usage check*/
 800f2f6:	bf00      	nop
	for (i = 0u; (szFormat[i] != (char)0) && (i < 128u); i++) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress char base type usage checks*/ /*cstat !MISRAC2012-Rule-14.2 Suppress malformed for loop due to i being incremented inside*/ /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 800f2f8:	69fb      	ldr	r3, [r7, #28]
 800f2fa:	3301      	adds	r3, #1
 800f2fc:	61fb      	str	r3, [r7, #28]
 800f2fe:	68ba      	ldr	r2, [r7, #8]
 800f300:	69fb      	ldr	r3, [r7, #28]
 800f302:	4413      	add	r3, r2
 800f304:	781b      	ldrb	r3, [r3, #0]
 800f306:	2b00      	cmp	r3, #0
 800f308:	d002      	beq.n	800f310 <xTraceVPrintF+0x80>
 800f30a:	69fb      	ldr	r3, [r7, #28]
 800f30c:	2b7f      	cmp	r3, #127	@ 0x7f
 800f30e:	d9d7      	bls.n	800f2c0 <xTraceVPrintF+0x30>
		}
	}

	uiLength = i + 1u; /* Null termination */
 800f310:	69fb      	ldr	r3, [r7, #28]
 800f312:	3301      	adds	r3, #1
 800f314:	617b      	str	r3, [r7, #20]

	return prvTraceVPrintF(xChannel, szFormat, uiLength, uiArgs, pxVariableList);
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	9300      	str	r3, [sp, #0]
 800f31a:	69bb      	ldr	r3, [r7, #24]
 800f31c:	697a      	ldr	r2, [r7, #20]
 800f31e:	68b9      	ldr	r1, [r7, #8]
 800f320:	68f8      	ldr	r0, [r7, #12]
 800f322:	f000 f809 	bl	800f338 <prvTraceVPrintF>
 800f326:	4603      	mov	r3, r0
}
 800f328:	4618      	mov	r0, r3
 800f32a:	3720      	adds	r7, #32
 800f32c:	46bd      	mov	sp, r7
 800f32e:	bd80      	pop	{r7, pc}
 800f330:	20017418 	.word	0x20017418
 800f334:	08011130 	.word	0x08011130

0800f338 <prvTraceVPrintF>:

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2012-Rule-17.1 Suppress stdarg usage check*/
static traceResult prvTraceVPrintF(TraceStringHandle_t xChannel, const char* szFormat, uint32_t uiLength, uint32_t uiArgs, va_list* pxVariableList)
{
 800f338:	b580      	push	{r7, lr}
 800f33a:	b092      	sub	sp, #72	@ 0x48
 800f33c:	af06      	add	r7, sp, #24
 800f33e:	60f8      	str	r0, [r7, #12]
 800f340:	60b9      	str	r1, [r7, #8]
 800f342:	607a      	str	r2, [r7, #4]
 800f344:	603b      	str	r3, [r7, #0]
	const uint32_t uiEventCode = PSF_EVENT_USER_EVENT + 1u + uiArgs; /* Add channel (1) */
 800f346:	683b      	ldr	r3, [r7, #0]
 800f348:	3391      	adds	r3, #145	@ 0x91
 800f34a:	62bb      	str	r3, [r7, #40]	@ 0x28
	TraceUnsignedBaseType_t uxParam2;
	TraceUnsignedBaseType_t uxParam3;
	TraceUnsignedBaseType_t uxParam4;
	TraceUnsignedBaseType_t uxParam5;

	if (xChannel == 0)
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d113      	bne.n	800f37a <prvTraceVPrintF+0x42>
	{
		if (pxPrintData->defaultChannel == 0)
 800f352:	4b73      	ldr	r3, [pc, #460]	@ (800f520 <prvTraceVPrintF+0x1e8>)
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d10a      	bne.n	800f372 <prvTraceVPrintF+0x3a>
		{
			/* Channel is not present */
			if (xTraceStringRegister("Default", &pxPrintData->defaultChannel) == TRC_FAIL)
 800f35c:	4b70      	ldr	r3, [pc, #448]	@ (800f520 <prvTraceVPrintF+0x1e8>)
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	4619      	mov	r1, r3
 800f362:	4870      	ldr	r0, [pc, #448]	@ (800f524 <prvTraceVPrintF+0x1ec>)
 800f364:	f000 fbfe 	bl	800fb64 <xTraceStringRegister>
 800f368:	4603      	mov	r3, r0
 800f36a:	2b01      	cmp	r3, #1
 800f36c:	d101      	bne.n	800f372 <prvTraceVPrintF+0x3a>
			{
				return TRC_FAIL;
 800f36e:	2301      	movs	r3, #1
 800f370:	e0d1      	b.n	800f516 <prvTraceVPrintF+0x1de>
			}
		}

		xChannel = pxPrintData->defaultChannel; /*cstat !MISRAC2012-Rule-17.8 Suppress modified function parameter check*/
 800f372:	4b6b      	ldr	r3, [pc, #428]	@ (800f520 <prvTraceVPrintF+0x1e8>)
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	60fb      	str	r3, [r7, #12]
	}

	switch (uiArgs)
 800f37a:	683b      	ldr	r3, [r7, #0]
 800f37c:	2b05      	cmp	r3, #5
 800f37e:	f200 80c6 	bhi.w	800f50e <prvTraceVPrintF+0x1d6>
 800f382:	a201      	add	r2, pc, #4	@ (adr r2, 800f388 <prvTraceVPrintF+0x50>)
 800f384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f388:	0800f3a1 	.word	0x0800f3a1
 800f38c:	0800f3b1 	.word	0x0800f3b1
 800f390:	0800f3d3 	.word	0x0800f3d3
 800f394:	0800f407 	.word	0x0800f407
 800f398:	0800f44d 	.word	0x0800f44d
 800f39c:	0800f4a5 	.word	0x0800f4a5
	{
		case 0:
			xResult = xTraceEventCreateData1(uiEventCode, (TraceUnsignedBaseType_t)xChannel, (TraceUnsignedBaseType_t*)szFormat, uiLength);
 800f3a0:	68f9      	ldr	r1, [r7, #12]
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	68ba      	ldr	r2, [r7, #8]
 800f3a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f3a8:	f7fe fdcc 	bl	800df44 <xTraceEventCreateData1>
 800f3ac:	62f8      	str	r0, [r7, #44]	@ 0x2c
			break;
 800f3ae:	e0b1      	b.n	800f514 <prvTraceVPrintF+0x1dc>
		case 1:
			uxParam1 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 800f3b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	1d19      	adds	r1, r3, #4
 800f3b6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f3b8:	6011      	str	r1, [r2, #0]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	627b      	str	r3, [r7, #36]	@ 0x24
			xResult = xTraceEventCreateData2(
 800f3be:	68f9      	ldr	r1, [r7, #12]
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	9300      	str	r3, [sp, #0]
 800f3c4:	68bb      	ldr	r3, [r7, #8]
 800f3c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f3c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f3ca:	f7fe fe57 	bl	800e07c <xTraceEventCreateData2>
 800f3ce:	62f8      	str	r0, [r7, #44]	@ 0x2c
				(TraceUnsignedBaseType_t)xChannel,
				uxParam1,
				(TraceUnsignedBaseType_t*)szFormat,
				uiLength
			);
			break;
 800f3d0:	e0a0      	b.n	800f514 <prvTraceVPrintF+0x1dc>
		case 2:
			uxParam1 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 800f3d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	1d19      	adds	r1, r3, #4
 800f3d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f3da:	6011      	str	r1, [r2, #0]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	627b      	str	r3, [r7, #36]	@ 0x24
			uxParam2 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 800f3e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	1d19      	adds	r1, r3, #4
 800f3e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f3e8:	6011      	str	r1, [r2, #0]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	623b      	str	r3, [r7, #32]
			xResult = xTraceEventCreateData3(
 800f3ee:	68f9      	ldr	r1, [r7, #12]
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	9301      	str	r3, [sp, #4]
 800f3f4:	68bb      	ldr	r3, [r7, #8]
 800f3f6:	9300      	str	r3, [sp, #0]
 800f3f8:	6a3b      	ldr	r3, [r7, #32]
 800f3fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f3fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f3fe:	f7fe fedd 	bl	800e1bc <xTraceEventCreateData3>
 800f402:	62f8      	str	r0, [r7, #44]	@ 0x2c
				uxParam1,
				uxParam2,
				(TraceUnsignedBaseType_t*)szFormat,
				uiLength
			);
			break;
 800f404:	e086      	b.n	800f514 <prvTraceVPrintF+0x1dc>
		case 3:
			uxParam1 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 800f406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	1d19      	adds	r1, r3, #4
 800f40c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f40e:	6011      	str	r1, [r2, #0]
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	627b      	str	r3, [r7, #36]	@ 0x24
			uxParam2 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 800f414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	1d19      	adds	r1, r3, #4
 800f41a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f41c:	6011      	str	r1, [r2, #0]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	623b      	str	r3, [r7, #32]
			uxParam3 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 800f422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	1d19      	adds	r1, r3, #4
 800f428:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f42a:	6011      	str	r1, [r2, #0]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	61fb      	str	r3, [r7, #28]
			xResult = xTraceEventCreateData4(
 800f430:	68f9      	ldr	r1, [r7, #12]
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	9302      	str	r3, [sp, #8]
 800f436:	68bb      	ldr	r3, [r7, #8]
 800f438:	9301      	str	r3, [sp, #4]
 800f43a:	69fb      	ldr	r3, [r7, #28]
 800f43c:	9300      	str	r3, [sp, #0]
 800f43e:	6a3b      	ldr	r3, [r7, #32]
 800f440:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f442:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f444:	f7fe ff5c 	bl	800e300 <xTraceEventCreateData4>
 800f448:	62f8      	str	r0, [r7, #44]	@ 0x2c
				uxParam2,
				uxParam3,
				(TraceUnsignedBaseType_t*)szFormat,
				uiLength
			);
			break;
 800f44a:	e063      	b.n	800f514 <prvTraceVPrintF+0x1dc>
		case 4:
			uxParam1 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 800f44c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	1d19      	adds	r1, r3, #4
 800f452:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f454:	6011      	str	r1, [r2, #0]
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	627b      	str	r3, [r7, #36]	@ 0x24
			uxParam2 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 800f45a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	1d19      	adds	r1, r3, #4
 800f460:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f462:	6011      	str	r1, [r2, #0]
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	623b      	str	r3, [r7, #32]
			uxParam3 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 800f468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	1d19      	adds	r1, r3, #4
 800f46e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f470:	6011      	str	r1, [r2, #0]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	61fb      	str	r3, [r7, #28]
			uxParam4 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 800f476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	1d19      	adds	r1, r3, #4
 800f47c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f47e:	6011      	str	r1, [r2, #0]
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	61bb      	str	r3, [r7, #24]
			xResult = xTraceEventCreateData5(
 800f484:	68f9      	ldr	r1, [r7, #12]
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	9303      	str	r3, [sp, #12]
 800f48a:	68bb      	ldr	r3, [r7, #8]
 800f48c:	9302      	str	r3, [sp, #8]
 800f48e:	69bb      	ldr	r3, [r7, #24]
 800f490:	9301      	str	r3, [sp, #4]
 800f492:	69fb      	ldr	r3, [r7, #28]
 800f494:	9300      	str	r3, [sp, #0]
 800f496:	6a3b      	ldr	r3, [r7, #32]
 800f498:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f49a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f49c:	f7fe ffd6 	bl	800e44c <xTraceEventCreateData5>
 800f4a0:	62f8      	str	r0, [r7, #44]	@ 0x2c
				uxParam3,
				uxParam4,
				(TraceUnsignedBaseType_t*)szFormat,
				uiLength
			);
			break;
 800f4a2:	e037      	b.n	800f514 <prvTraceVPrintF+0x1dc>
		case 5:
			uxParam1 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 800f4a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	1d19      	adds	r1, r3, #4
 800f4aa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f4ac:	6011      	str	r1, [r2, #0]
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	627b      	str	r3, [r7, #36]	@ 0x24
			uxParam2 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 800f4b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	1d19      	adds	r1, r3, #4
 800f4b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f4ba:	6011      	str	r1, [r2, #0]
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	623b      	str	r3, [r7, #32]
			uxParam3 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 800f4c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	1d19      	adds	r1, r3, #4
 800f4c6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f4c8:	6011      	str	r1, [r2, #0]
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	61fb      	str	r3, [r7, #28]
			uxParam4 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 800f4ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	1d19      	adds	r1, r3, #4
 800f4d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f4d6:	6011      	str	r1, [r2, #0]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	61bb      	str	r3, [r7, #24]
			uxParam5 = va_arg(*pxVariableList, TraceUnsignedBaseType_t);
 800f4dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	1d19      	adds	r1, r3, #4
 800f4e2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f4e4:	6011      	str	r1, [r2, #0]
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	617b      	str	r3, [r7, #20]
			xResult = xTraceEventCreateData6(
 800f4ea:	68f9      	ldr	r1, [r7, #12]
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	9304      	str	r3, [sp, #16]
 800f4f0:	68bb      	ldr	r3, [r7, #8]
 800f4f2:	9303      	str	r3, [sp, #12]
 800f4f4:	697b      	ldr	r3, [r7, #20]
 800f4f6:	9302      	str	r3, [sp, #8]
 800f4f8:	69bb      	ldr	r3, [r7, #24]
 800f4fa:	9301      	str	r3, [sp, #4]
 800f4fc:	69fb      	ldr	r3, [r7, #28]
 800f4fe:	9300      	str	r3, [sp, #0]
 800f500:	6a3b      	ldr	r3, [r7, #32]
 800f502:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f504:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f506:	f7ff f849 	bl	800e59c <xTraceEventCreateData6>
 800f50a:	62f8      	str	r0, [r7, #44]	@ 0x2c
				uxParam4,
				uxParam5,
				(TraceUnsignedBaseType_t*)szFormat,
				uiLength
			);
			break;
 800f50c:	e002      	b.n	800f514 <prvTraceVPrintF+0x1dc>
		default:
			xResult = TRC_FAIL;
 800f50e:	2301      	movs	r3, #1
 800f510:	62fb      	str	r3, [r7, #44]	@ 0x2c
			break;
 800f512:	bf00      	nop
	}

	return xResult;
 800f514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800f516:	4618      	mov	r0, r3
 800f518:	3730      	adds	r7, #48	@ 0x30
 800f51a:	46bd      	mov	sp, r7
 800f51c:	bd80      	pop	{r7, pc}
 800f51e:	bf00      	nop
 800f520:	20013e14 	.word	0x20013e14
 800f524:	08011144 	.word	0x08011144

0800f528 <xTraceStaticBufferInitialize>:
#if (TRC_USE_TRACEALYZER_RECORDER == 1) && (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

TraceStaticBufferTable_t *pxTraceStaticBufferTable TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceStaticBufferInitialize(TraceStaticBufferTable_t *pxBuffer)
{
 800f528:	b480      	push	{r7}
 800f52a:	b083      	sub	sp, #12
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	6078      	str	r0, [r7, #4]
	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxTraceStaticBufferTable = pxBuffer;
 800f530:	4a07      	ldr	r2, [pc, #28]	@ (800f550 <xTraceStaticBufferInitialize+0x28>)
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	6013      	str	r3, [r2, #0]

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_STATIC_BUFFER);
 800f536:	4b07      	ldr	r3, [pc, #28]	@ (800f554 <xTraceStaticBufferInitialize+0x2c>)
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800f53e:	4a05      	ldr	r2, [pc, #20]	@ (800f554 <xTraceStaticBufferInitialize+0x2c>)
 800f540:	6013      	str	r3, [r2, #0]
	
	return TRC_SUCCESS;
 800f542:	2300      	movs	r3, #0
}
 800f544:	4618      	mov	r0, r3
 800f546:	370c      	adds	r7, #12
 800f548:	46bd      	mov	sp, r7
 800f54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f54e:	4770      	bx	lr
 800f550:	20013e18 	.word	0x20013e18
 800f554:	20017418 	.word	0x20017418

0800f558 <xTraceInitialize>:
* trace recorder can be enabled, at which point make sure to call this function
* as early as possible.
* See TRC_CFG_RECORDER_DATA_INIT in trcConfig.h.
******************************************************************************/
traceResult xTraceInitialize(void)
{
 800f558:	b580      	push	{r7, lr}
 800f55a:	b082      	sub	sp, #8
 800f55c:	af00      	add	r7, sp, #0
	TRC_ASSERT_EQUAL_SIZE(TraceUnsignedBaseType_t, TraceBaseType_t);

	/* TraceUnsignedBaseType_t is used to store handles (addresses) */
	TRC_ASSERT_EQUAL_SIZE(TraceUnsignedBaseType_t, TraceHandleBaseType_t);
	
	if (RecorderInitialized != 0u)
 800f55e:	4b65      	ldr	r3, [pc, #404]	@ (800f6f4 <xTraceInitialize+0x19c>)
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	2b00      	cmp	r3, #0
 800f564:	d001      	beq.n	800f56a <xTraceInitialize+0x12>
	{
		return TRC_SUCCESS;
 800f566:	2300      	movs	r3, #0
 800f568:	e0c0      	b.n	800f6ec <xTraceInitialize+0x194>
	}

	TRC_PORT_SPECIFIC_INIT();
 800f56a:	f7ff faa7 	bl	800eabc <xTraceHardwarePortInitCortexM>
#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	pxTraceRecorderData = &xRecorderData;
 800f56e:	4b62      	ldr	r3, [pc, #392]	@ (800f6f8 <xTraceInitialize+0x1a0>)
 800f570:	4a62      	ldr	r2, [pc, #392]	@ (800f6fc <xTraceInitialize+0x1a4>)
 800f572:	601a      	str	r2, [r3, #0]
	/* Allocate data */
	pxTraceRecorderData = TRC_KERNEL_PORT_HEAP_MALLOC(sizeof(TraceRecorderData_t));
#endif

	/* These are set on init so they aren't overwritten by late initialization values. */
	pxTraceRecorderData->uiSessionCounter = 0u;
 800f574:	4b60      	ldr	r3, [pc, #384]	@ (800f6f8 <xTraceInitialize+0x1a0>)
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	2200      	movs	r2, #0
 800f57a:	601a      	str	r2, [r3, #0]
	pxTraceRecorderData->uiRecorderEnabled = 0u;
 800f57c:	4b5e      	ldr	r3, [pc, #376]	@ (800f6f8 <xTraceInitialize+0x1a0>)
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	2200      	movs	r2, #0
 800f582:	605a      	str	r2, [r3, #4]
	
	for (i = 0; i < TRC_CFG_CORE_COUNT; i++)
 800f584:	2300      	movs	r3, #0
 800f586:	607b      	str	r3, [r7, #4]
 800f588:	e009      	b.n	800f59e <xTraceInitialize+0x46>
	{
		pxTraceRecorderData->uxTraceSystemStates[i] = (TraceUnsignedBaseType_t)TRC_STATE_IN_STARTUP;
 800f58a:	4b5b      	ldr	r3, [pc, #364]	@ (800f6f8 <xTraceInitialize+0x1a0>)
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	687a      	ldr	r2, [r7, #4]
 800f590:	3202      	adds	r2, #2
 800f592:	2100      	movs	r1, #0
 800f594:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < TRC_CFG_CORE_COUNT; i++)
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	3301      	adds	r3, #1
 800f59c:	607b      	str	r3, [r7, #4]
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d0f2      	beq.n	800f58a <xTraceInitialize+0x32>
	}
	
	/*cstat !MISRAC2004-13.7_b Suppress always false check*/
	if (xTraceEntryIndexTableInitialize(&pxTraceRecorderData->xEntryIndexTableBuffer) == TRC_FAIL)
 800f5a4:	4b54      	ldr	r3, [pc, #336]	@ (800f6f8 <xTraceInitialize+0x1a0>)
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	3314      	adds	r3, #20
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	f7fd feea 	bl	800d384 <xTraceEntryIndexTableInitialize>
 800f5b0:	4603      	mov	r3, r0
 800f5b2:	2b01      	cmp	r3, #1
 800f5b4:	d101      	bne.n	800f5ba <xTraceInitialize+0x62>
	{
		return TRC_FAIL;
 800f5b6:	2301      	movs	r3, #1
 800f5b8:	e098      	b.n	800f6ec <xTraceInitialize+0x194>
	{
		return TRC_FAIL;
	}
#endif
	
	if (xTraceCounterInitialize(&pxTraceRecorderData->xCounterBuffer) == TRC_FAIL)
 800f5ba:	4b4f      	ldr	r3, [pc, #316]	@ (800f6f8 <xTraceInitialize+0x1a0>)
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	f503 5357 	add.w	r3, r3, #13760	@ 0x35c0
 800f5c2:	3330      	adds	r3, #48	@ 0x30
 800f5c4:	4618      	mov	r0, r3
 800f5c6:	f7fd fe0d 	bl	800d1e4 <xTraceCounterInitialize>
 800f5ca:	4603      	mov	r3, r0
 800f5cc:	2b01      	cmp	r3, #1
 800f5ce:	d101      	bne.n	800f5d4 <xTraceInitialize+0x7c>
	{
		return TRC_FAIL;
 800f5d0:	2301      	movs	r3, #1
 800f5d2:	e08b      	b.n	800f6ec <xTraceInitialize+0x194>
	{
		return TRC_FAIL;
	}

	/*cstat !MISRAC2004-13.7_b !MISRAC2012-Rule-14.3_b Suppress always false check*/
	if (xTraceStreamPortInitialize(&pxTraceRecorderData->xStreamPortBuffer) == TRC_FAIL)
 800f5d4:	4b48      	ldr	r3, [pc, #288]	@ (800f6f8 <xTraceInitialize+0x1a0>)
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	3354      	adds	r3, #84	@ 0x54
 800f5da:	4618      	mov	r0, r3
 800f5dc:	f7fd fd3a 	bl	800d054 <xTraceStreamPortInitialize>
 800f5e0:	4603      	mov	r3, r0
 800f5e2:	2b01      	cmp	r3, #1
 800f5e4:	d101      	bne.n	800f5ea <xTraceInitialize+0x92>
	{
		return TRC_FAIL;
 800f5e6:	2301      	movs	r3, #1
 800f5e8:	e080      	b.n	800f6ec <xTraceInitialize+0x194>
	if (xTraceAssertInitialize(&pxTraceRecorderData->xAssertBuffer) == TRC_FAIL)
	{
		return TRC_FAIL;
	}

	if (xTraceDiagnosticsInitialize(&pxTraceRecorderData->xDiagnosticsBuffer) == TRC_FAIL)
 800f5ea:	4b43      	ldr	r3, [pc, #268]	@ (800f6f8 <xTraceInitialize+0x1a0>)
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	f503 5357 	add.w	r3, r3, #13760	@ 0x35c0
 800f5f2:	3318      	adds	r3, #24
 800f5f4:	4618      	mov	r0, r3
 800f5f6:	f7fd fe11 	bl	800d21c <xTraceDiagnosticsInitialize>
 800f5fa:	4603      	mov	r3, r0
 800f5fc:	2b01      	cmp	r3, #1
 800f5fe:	d101      	bne.n	800f604 <xTraceInitialize+0xac>
	{
		return TRC_FAIL;
 800f600:	2301      	movs	r3, #1
 800f602:	e073      	b.n	800f6ec <xTraceInitialize+0x194>
	}

	/*cstat !MISRAC2004-13.7_b Suppress always false check*/
	if (xTraceExtensionInitialize(&pxTraceRecorderData->xExtensionBuffer) == TRC_FAIL)
 800f604:	4b3c      	ldr	r3, [pc, #240]	@ (800f6f8 <xTraceInitialize+0x1a0>)
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	f503 5357 	add.w	r3, r3, #13760	@ 0x35c0
 800f60c:	332c      	adds	r3, #44	@ 0x2c
 800f60e:	4618      	mov	r0, r3
 800f610:	f7ff fa38 	bl	800ea84 <xTraceExtensionInitialize>
 800f614:	4603      	mov	r3, r0
 800f616:	2b01      	cmp	r3, #1
 800f618:	d101      	bne.n	800f61e <xTraceInitialize+0xc6>
	{
		return TRC_FAIL;
 800f61a:	2301      	movs	r3, #1
 800f61c:	e066      	b.n	800f6ec <xTraceInitialize+0x194>
	}
	
	if (xTraceStaticBufferInitialize(&pxTraceRecorderData->xStaticBufferBuffer) == TRC_FAIL)
 800f61e:	4b36      	ldr	r3, [pc, #216]	@ (800f6f8 <xTraceInitialize+0x1a0>)
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	f503 534d 	add.w	r3, r3, #13120	@ 0x3340
 800f626:	3304      	adds	r3, #4
 800f628:	4618      	mov	r0, r3
 800f62a:	f7ff ff7d 	bl	800f528 <xTraceStaticBufferInitialize>
 800f62e:	4603      	mov	r3, r0
 800f630:	2b01      	cmp	r3, #1
 800f632:	d101      	bne.n	800f638 <xTraceInitialize+0xe0>
	{
		return TRC_FAIL;
 800f634:	2301      	movs	r3, #1
 800f636:	e059      	b.n	800f6ec <xTraceInitialize+0x194>
	}

	if (xTraceEventInitialize(&pxTraceRecorderData->xEventDataBuffer) == TRC_FAIL)
 800f638:	4b2f      	ldr	r3, [pc, #188]	@ (800f6f8 <xTraceInitialize+0x1a0>)
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	f503 5356 	add.w	r3, r3, #13696	@ 0x3580
 800f640:	3304      	adds	r3, #4
 800f642:	4618      	mov	r0, r3
 800f644:	f7fe f9ba 	bl	800d9bc <xTraceEventInitialize>
 800f648:	4603      	mov	r3, r0
 800f64a:	2b01      	cmp	r3, #1
 800f64c:	d101      	bne.n	800f652 <xTraceInitialize+0xfa>
	{
		return TRC_FAIL;
 800f64e:	2301      	movs	r3, #1
 800f650:	e04c      	b.n	800f6ec <xTraceInitialize+0x194>
	}
	
	if (xTracePrintInitialize(&pxTraceRecorderData->xPrintBuffer) == TRC_FAIL)
 800f652:	4b29      	ldr	r3, [pc, #164]	@ (800f6f8 <xTraceInitialize+0x1a0>)
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	f503 5356 	add.w	r3, r3, #13696	@ 0x3580
 800f65a:	330c      	adds	r3, #12
 800f65c:	4618      	mov	r0, r3
 800f65e:	f7ff fd9f 	bl	800f1a0 <xTracePrintInitialize>
 800f662:	4603      	mov	r3, r0
 800f664:	2b01      	cmp	r3, #1
 800f666:	d101      	bne.n	800f66c <xTraceInitialize+0x114>
	{
		return TRC_FAIL;
 800f668:	2301      	movs	r3, #1
 800f66a:	e03f      	b.n	800f6ec <xTraceInitialize+0x194>
	}
	
	if (xTraceErrorInitialize(&pxTraceRecorderData->xErrorBuffer) == TRC_FAIL)
 800f66c:	4b22      	ldr	r3, [pc, #136]	@ (800f6f8 <xTraceInitialize+0x1a0>)
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	f503 5356 	add.w	r3, r3, #13696	@ 0x3580
 800f674:	3314      	adds	r3, #20
 800f676:	4618      	mov	r0, r3
 800f678:	f7fe f83e 	bl	800d6f8 <xTraceErrorInitialize>
 800f67c:	4603      	mov	r3, r0
 800f67e:	2b01      	cmp	r3, #1
 800f680:	d101      	bne.n	800f686 <xTraceInitialize+0x12e>
	{
		return TRC_FAIL;
 800f682:	2301      	movs	r3, #1
 800f684:	e032      	b.n	800f6ec <xTraceInitialize+0x194>
	}

	if (xTraceISRInitialize(&pxTraceRecorderData->xISRBuffer) == TRC_FAIL)
 800f686:	4b1c      	ldr	r3, [pc, #112]	@ (800f6f8 <xTraceInitialize+0x1a0>)
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	f503 5356 	add.w	r3, r3, #13696	@ 0x3580
 800f68e:	3320      	adds	r3, #32
 800f690:	4618      	mov	r0, r3
 800f692:	f7ff fac3 	bl	800ec1c <xTraceISRInitialize>
 800f696:	4603      	mov	r3, r0
 800f698:	2b01      	cmp	r3, #1
 800f69a:	d101      	bne.n	800f6a0 <xTraceInitialize+0x148>
	{
		return TRC_FAIL;
 800f69c:	2301      	movs	r3, #1
 800f69e:	e025      	b.n	800f6ec <xTraceInitialize+0x194>
	}

	if (xTraceTaskInitialize(&pxTraceRecorderData->xTaskInfoBuffer) == TRC_FAIL)
 800f6a0:	4b15      	ldr	r3, [pc, #84]	@ (800f6f8 <xTraceInitialize+0x1a0>)
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	f503 5357 	add.w	r3, r3, #13760	@ 0x35c0
 800f6a8:	3310      	adds	r3, #16
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	f000 fa92 	bl	800fbd4 <xTraceTaskInitialize>
 800f6b0:	4603      	mov	r3, r0
 800f6b2:	2b01      	cmp	r3, #1
 800f6b4:	d101      	bne.n	800f6ba <xTraceInitialize+0x162>
	{
		return TRC_FAIL;
 800f6b6:	2301      	movs	r3, #1
 800f6b8:	e018      	b.n	800f6ec <xTraceInitialize+0x194>
	}

	/*cstat !MISRAC2004-13.7_b !MISRAC2012-Rule-14.3_b Suppress always false check*/
	if (xTraceKernelPortInitialize(&pxTraceRecorderData->xKernelPortBuffer) == TRC_FAIL)
 800f6ba:	4b0f      	ldr	r3, [pc, #60]	@ (800f6f8 <xTraceInitialize+0x1a0>)
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	f503 5357 	add.w	r3, r3, #13760	@ 0x35c0
 800f6c2:	3308      	adds	r3, #8
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	f7ff fae9 	bl	800ec9c <xTraceKernelPortInitialize>
 800f6ca:	4603      	mov	r3, r0
 800f6cc:	2b01      	cmp	r3, #1
 800f6ce:	d101      	bne.n	800f6d4 <xTraceInitialize+0x17c>
	{
		return TRC_FAIL;
 800f6d0:	2301      	movs	r3, #1
 800f6d2:	e00b      	b.n	800f6ec <xTraceInitialize+0x194>
	}

	pxTraceRecorderData->reserved = 0xFFFFFFFFUL;
 800f6d4:	4b08      	ldr	r3, [pc, #32]	@ (800f6f8 <xTraceInitialize+0x1a0>)
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	f04f 32ff 	mov.w	r2, #4294967295
 800f6dc:	60da      	str	r2, [r3, #12]

	(void)xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_CORE);
 800f6de:	4b05      	ldr	r3, [pc, #20]	@ (800f6f4 <xTraceInitialize+0x19c>)
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	f043 0301 	orr.w	r3, r3, #1
 800f6e6:	4a03      	ldr	r2, [pc, #12]	@ (800f6f4 <xTraceInitialize+0x19c>)
 800f6e8:	6013      	str	r3, [r2, #0]

	return TRC_SUCCESS;
 800f6ea:	2300      	movs	r3, #0
}
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	3708      	adds	r7, #8
 800f6f0:	46bd      	mov	sp, r7
 800f6f2:	bd80      	pop	{r7, pc}
 800f6f4:	20017418 	.word	0x20017418
 800f6f8:	20017410 	.word	0x20017410
 800f6fc:	20013e1c 	.word	0x20013e1c

0800f700 <prvVerifySizeAlignment>:

/* Do this in function to avoid unreachable code warnings */
traceResult prvVerifySizeAlignment(uint32_t ulSize)
{
 800f700:	b480      	push	{r7}
 800f702:	b083      	sub	sp, #12
 800f704:	af00      	add	r7, sp, #0
 800f706:	6078      	str	r0, [r7, #4]
	return (ulSize % sizeof(TraceUnsignedBaseType_t)) == 0 ? TRC_SUCCESS : TRC_FAIL;
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	f003 0303 	and.w	r3, r3, #3
 800f70e:	2b00      	cmp	r3, #0
 800f710:	bf14      	ite	ne
 800f712:	2301      	movne	r3, #1
 800f714:	2300      	moveq	r3, #0
 800f716:	b2db      	uxtb	r3, r3
}
 800f718:	4618      	mov	r0, r3
 800f71a:	370c      	adds	r7, #12
 800f71c:	46bd      	mov	sp, r7
 800f71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f722:	4770      	bx	lr

0800f724 <xTraceHeaderInitialize>:

traceResult xTraceHeaderInitialize(TraceHeaderBuffer_t *pxBuffer)
{
 800f724:	b580      	push	{r7, lr}
 800f726:	b084      	sub	sp, #16
 800f728:	af00      	add	r7, sp, #0
 800f72a:	6078      	str	r0, [r7, #4]
	uint32_t i;
	const char* platform_cfg = TRC_PLATFORM_CFG; /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 800f72c:	4b41      	ldr	r3, [pc, #260]	@ (800f834 <xTraceHeaderInitialize+0x110>)
 800f72e:	60bb      	str	r3, [r7, #8]

	TRC_ASSERT_EQUAL_SIZE(TraceHeaderBuffer_t, TraceHeader_t);

	if (pxBuffer == (void*)0)
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	2b00      	cmp	r3, #0
 800f734:	d101      	bne.n	800f73a <xTraceHeaderInitialize+0x16>
	{
		return TRC_FAIL;
 800f736:	2301      	movs	r3, #1
 800f738:	e078      	b.n	800f82c <xTraceHeaderInitialize+0x108>
	}

	if (prvVerifySizeAlignment(sizeof(TraceStreamPortBuffer_t)) == TRC_FAIL)
 800f73a:	f243 20f0 	movw	r0, #13040	@ 0x32f0
 800f73e:	f7ff ffdf 	bl	800f700 <prvVerifySizeAlignment>
 800f742:	4603      	mov	r3, r0
 800f744:	2b01      	cmp	r3, #1
 800f746:	d101      	bne.n	800f74c <xTraceHeaderInitialize+0x28>
	{
		/* TraceStreamPortBuffer_t size is not aligned to TraceUnsignedBaseType_t */
		return TRC_FAIL;
 800f748:	2301      	movs	r3, #1
 800f74a:	e06f      	b.n	800f82c <xTraceHeaderInitialize+0x108>
	}

	if (prvVerifySizeAlignment(sizeof(TraceEventDataTable_t)) == TRC_FAIL)
 800f74c:	2008      	movs	r0, #8
 800f74e:	f7ff ffd7 	bl	800f700 <prvVerifySizeAlignment>
 800f752:	4603      	mov	r3, r0
 800f754:	2b01      	cmp	r3, #1
 800f756:	d101      	bne.n	800f75c <xTraceHeaderInitialize+0x38>
	{
		/* TraceEventDataTable_t size is not aligned to TraceUnsignedBaseType_t */
		return TRC_FAIL;
 800f758:	2301      	movs	r3, #1
 800f75a:	e067      	b.n	800f82c <xTraceHeaderInitialize+0x108>
	}

	if (prvVerifySizeAlignment(sizeof(TraceKernelPortDataBuffer_t)) == TRC_FAIL)
 800f75c:	2008      	movs	r0, #8
 800f75e:	f7ff ffcf 	bl	800f700 <prvVerifySizeAlignment>
 800f762:	4603      	mov	r3, r0
 800f764:	2b01      	cmp	r3, #1
 800f766:	d101      	bne.n	800f76c <xTraceHeaderInitialize+0x48>
	{
		/* TraceKernelPortDataBuffer_t size is not aligned to TraceUnsignedBaseType_t */
		return TRC_FAIL;
 800f768:	2301      	movs	r3, #1
 800f76a:	e05f      	b.n	800f82c <xTraceHeaderInitialize+0x108>
	}

	pxHeader = (TraceHeader_t*)pxBuffer; /*cstat !MISRAC2004-11.4 !MISRAC2012-Rule-11.3 Suppress conversion between pointer types checks*/
 800f76c:	4a32      	ldr	r2, [pc, #200]	@ (800f838 <xTraceHeaderInitialize+0x114>)
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	6013      	str	r3, [r2, #0]

	pxHeader->uiPSF = TRACE_PSF_ENDIANESS_IDENTIFIER;
 800f772:	4b31      	ldr	r3, [pc, #196]	@ (800f838 <xTraceHeaderInitialize+0x114>)
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	4a31      	ldr	r2, [pc, #196]	@ (800f83c <xTraceHeaderInitialize+0x118>)
 800f778:	601a      	str	r2, [r3, #0]
	pxHeader->uiVersion = TRACE_FORMAT_VERSION;
 800f77a:	4b2f      	ldr	r3, [pc, #188]	@ (800f838 <xTraceHeaderInitialize+0x114>)
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	220e      	movs	r2, #14
 800f780:	809a      	strh	r2, [r3, #4]
	pxHeader->uiPlatform = TRACE_KERNEL_VERSION;
 800f782:	4b2d      	ldr	r3, [pc, #180]	@ (800f838 <xTraceHeaderInitialize+0x114>)
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	f641 22a1 	movw	r2, #6817	@ 0x1aa1
 800f78a:	80da      	strh	r2, [r3, #6]

	for (i = 0u; i < (uint32_t)(TRC_PLATFORM_CFG_LENGTH); i++)
 800f78c:	2300      	movs	r3, #0
 800f78e:	60fb      	str	r3, [r7, #12]
 800f790:	e013      	b.n	800f7ba <xTraceHeaderInitialize+0x96>
	{
		pxHeader->platformCfg[i] = platform_cfg[i]; /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 800f792:	68ba      	ldr	r2, [r7, #8]
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	4413      	add	r3, r2
 800f798:	4a27      	ldr	r2, [pc, #156]	@ (800f838 <xTraceHeaderInitialize+0x114>)
 800f79a:	6812      	ldr	r2, [r2, #0]
 800f79c:	7819      	ldrb	r1, [r3, #0]
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	4413      	add	r3, r2
 800f7a2:	3318      	adds	r3, #24
 800f7a4:	460a      	mov	r2, r1
 800f7a6:	701a      	strb	r2, [r3, #0]
		if (platform_cfg[i] == (char)0) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 800f7a8:	68ba      	ldr	r2, [r7, #8]
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	4413      	add	r3, r2
 800f7ae:	781b      	ldrb	r3, [r3, #0]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d006      	beq.n	800f7c2 <xTraceHeaderInitialize+0x9e>
	for (i = 0u; i < (uint32_t)(TRC_PLATFORM_CFG_LENGTH); i++)
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	3301      	adds	r3, #1
 800f7b8:	60fb      	str	r3, [r7, #12]
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	2b07      	cmp	r3, #7
 800f7be:	d9e8      	bls.n	800f792 <xTraceHeaderInitialize+0x6e>
 800f7c0:	e000      	b.n	800f7c4 <xTraceHeaderInitialize+0xa0>
		{
			break;
 800f7c2:	bf00      	nop
		}
	}
	pxHeader->uiPlatformCfgPatch = (uint16_t)TRC_PLATFORM_CFG_PATCH;
 800f7c4:	4b1c      	ldr	r3, [pc, #112]	@ (800f838 <xTraceHeaderInitialize+0x114>)
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	2200      	movs	r2, #0
 800f7ca:	829a      	strh	r2, [r3, #20]
	pxHeader->uiPlatformCfgMinor = (uint8_t)TRC_PLATFORM_CFG_MINOR;
 800f7cc:	4b1a      	ldr	r3, [pc, #104]	@ (800f838 <xTraceHeaderInitialize+0x114>)
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	2202      	movs	r2, #2
 800f7d2:	759a      	strb	r2, [r3, #22]
	pxHeader->uiPlatformCfgMajor = (uint8_t)TRC_PLATFORM_CFG_MAJOR;
 800f7d4:	4b18      	ldr	r3, [pc, #96]	@ (800f838 <xTraceHeaderInitialize+0x114>)
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	2201      	movs	r2, #1
 800f7da:	75da      	strb	r2, [r3, #23]
	pxHeader->uiNumCores = (uint32_t)TRC_CFG_CORE_COUNT;
 800f7dc:	4b16      	ldr	r3, [pc, #88]	@ (800f838 <xTraceHeaderInitialize+0x114>)
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	2201      	movs	r2, #1
 800f7e2:	60da      	str	r2, [r3, #12]
	
#ifdef TRC_STREAM_PORT_MULTISTREAM_SUPPORT
	pxHeader->uiNumCores |= 2 << 8;
#else
	pxHeader->uiNumCores |= 3 << 8;
 800f7e4:	4b14      	ldr	r3, [pc, #80]	@ (800f838 <xTraceHeaderInitialize+0x114>)
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	68da      	ldr	r2, [r3, #12]
 800f7ea:	4b13      	ldr	r3, [pc, #76]	@ (800f838 <xTraceHeaderInitialize+0x114>)
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800f7f2:	60da      	str	r2, [r3, #12]
#endif
	
	pxHeader->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
 800f7f4:	4b10      	ldr	r3, [pc, #64]	@ (800f838 <xTraceHeaderInitialize+0x114>)
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	2200      	movs	r2, #0
 800f7fa:	611a      	str	r2, [r3, #16]

	/* Lowest bit used for TRC_IRQ_PRIORITY_ORDER */
	pxHeader->uiOptions = (((uint32_t)(TRC_IRQ_PRIORITY_ORDER)) << 0);
 800f7fc:	4b0e      	ldr	r3, [pc, #56]	@ (800f838 <xTraceHeaderInitialize+0x114>)
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	2200      	movs	r2, #0
 800f802:	609a      	str	r2, [r3, #8]

	/* 3rd bit used for TRC_CFG_TEST_MODE */
	pxHeader->uiOptions |= (((uint32_t)(TRC_CFG_TEST_MODE)) << 2);
 800f804:	4b0c      	ldr	r3, [pc, #48]	@ (800f838 <xTraceHeaderInitialize+0x114>)
 800f806:	681a      	ldr	r2, [r3, #0]
 800f808:	4b0b      	ldr	r3, [pc, #44]	@ (800f838 <xTraceHeaderInitialize+0x114>)
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	6892      	ldr	r2, [r2, #8]
 800f80e:	609a      	str	r2, [r3, #8]

	/* 4th bit used for 64-bit*/
	if (prvIs64bit()) /* Call helper function to avoid "unreachable code" */
 800f810:	f000 f8b4 	bl	800f97c <prvIs64bit>
 800f814:	4603      	mov	r3, r0
 800f816:	2b00      	cmp	r3, #0
 800f818:	d007      	beq.n	800f82a <xTraceHeaderInitialize+0x106>
	{
		pxHeader->uiOptions |= (1 << 3);
 800f81a:	4b07      	ldr	r3, [pc, #28]	@ (800f838 <xTraceHeaderInitialize+0x114>)
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	689a      	ldr	r2, [r3, #8]
 800f820:	4b05      	ldr	r3, [pc, #20]	@ (800f838 <xTraceHeaderInitialize+0x114>)
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	f042 0208 	orr.w	r2, r2, #8
 800f828:	609a      	str	r2, [r3, #8]
	}

	return TRC_SUCCESS;
 800f82a:	2300      	movs	r3, #0
}
 800f82c:	4618      	mov	r0, r3
 800f82e:	3710      	adds	r7, #16
 800f830:	46bd      	mov	sp, r7
 800f832:	bd80      	pop	{r7, pc}
 800f834:	0801114c 	.word	0x0801114c
 800f838:	20017414 	.word	0x20017414
 800f83c:	50534600 	.word	0x50534600

0800f840 <xTraceEnable>:

traceResult xTraceEnable(uint32_t uiStartOption)
{
 800f840:	b580      	push	{r7, lr}
 800f842:	b086      	sub	sp, #24
 800f844:	af00      	add	r7, sp, #0
 800f846:	6078      	str	r0, [r7, #4]
	TraceCommand_t xCommand = { 0 };
 800f848:	f107 0310 	add.w	r3, r7, #16
 800f84c:	2200      	movs	r2, #0
 800f84e:	601a      	str	r2, [r3, #0]
 800f850:	605a      	str	r2, [r3, #4]
	int32_t iBytes;

	if (xTraceInitialize() == TRC_FAIL)
 800f852:	f7ff fe81 	bl	800f558 <xTraceInitialize>
 800f856:	4603      	mov	r3, r0
 800f858:	2b01      	cmp	r3, #1
 800f85a:	d101      	bne.n	800f860 <xTraceEnable+0x20>
	{
		return TRC_FAIL;
 800f85c:	2301      	movs	r3, #1
 800f85e:	e03f      	b.n	800f8e0 <xTraceEnable+0xa0>
	}

	/*cstat !MISRAC2004-13.7_b !MISRAC2012-Rule-14.3_b Suppress always false check*/
	if (xTraceStreamPortOnEnable(uiStartOption) == TRC_FAIL)
 800f860:	2300      	movs	r3, #0
 800f862:	2b01      	cmp	r3, #1
 800f864:	d101      	bne.n	800f86a <xTraceEnable+0x2a>
	{
		return TRC_FAIL;
 800f866:	2301      	movs	r3, #1
 800f868:	e03a      	b.n	800f8e0 <xTraceEnable+0xa0>
	}

	/*cstat !MISRAC2004-13.7_b !MISRAC2012-Rule-14.3_b Suppress always false check*/
	if (xTraceKernelPortEnable() == TRC_FAIL)
 800f86a:	f7ff fa35 	bl	800ecd8 <xTraceKernelPortEnable>
 800f86e:	4603      	mov	r3, r0
 800f870:	2b01      	cmp	r3, #1
 800f872:	d101      	bne.n	800f878 <xTraceEnable+0x38>
	{
		return TRC_FAIL;
 800f874:	2301      	movs	r3, #1
 800f876:	e033      	b.n	800f8e0 <xTraceEnable+0xa0>
	}

	if (uiStartOption == TRC_START_AWAIT_HOST)
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	2b02      	cmp	r3, #2
 800f87c:	d11d      	bne.n	800f8ba <xTraceEnable+0x7a>
	{
		/* We keep trying to read commands from host until the recorder has been started */
		do
		{
			iBytes = 0;
 800f87e:	2300      	movs	r3, #0
 800f880:	60fb      	str	r3, [r7, #12]

			if (xTraceStreamPortReadData(&xCommand, sizeof(TraceCommand_t), (int32_t*)&iBytes) == TRC_FAIL)
 800f882:	2300      	movs	r3, #0
 800f884:	2b01      	cmp	r3, #1
 800f886:	d102      	bne.n	800f88e <xTraceEnable+0x4e>
			{
				(void)xTraceWarning(TRC_WARNING_STREAM_PORT_READ);
 800f888:	200b      	movs	r0, #11
 800f88a:	f7fd ff59 	bl	800d740 <xTraceWarning>
			}

			if ((uint32_t)iBytes == sizeof(TraceCommand_t))
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	2b08      	cmp	r3, #8
 800f892:	d10c      	bne.n	800f8ae <xTraceEnable+0x6e>
			{
				if (prvIsValidCommand(&xCommand) != 0)
 800f894:	f107 0310 	add.w	r3, r7, #16
 800f898:	4618      	mov	r0, r3
 800f89a:	f000 f911 	bl	800fac0 <prvIsValidCommand>
 800f89e:	4603      	mov	r3, r0
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d004      	beq.n	800f8ae <xTraceEnable+0x6e>
				{
					prvProcessCommand(&xCommand);
 800f8a4:	f107 0310 	add.w	r3, r7, #16
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	f000 f944 	bl	800fb36 <prvProcessCommand>
				}
			}
		} while (pxTraceRecorderData->uiRecorderEnabled == 0u);
 800f8ae:	4b0e      	ldr	r3, [pc, #56]	@ (800f8e8 <xTraceEnable+0xa8>)
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	685b      	ldr	r3, [r3, #4]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d0e2      	beq.n	800f87e <xTraceEnable+0x3e>
 800f8b8:	e011      	b.n	800f8de <xTraceEnable+0x9e>
	}
	else if (uiStartOption == (uint32_t)(TRC_START))
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	2b01      	cmp	r3, #1
 800f8be:	d109      	bne.n	800f8d4 <xTraceEnable+0x94>
	{
		/* We start streaming directly - this assumes that the host interface is ready! */
		xCommand.cmdCode = CMD_SET_ACTIVE;
 800f8c0:	2301      	movs	r3, #1
 800f8c2:	743b      	strb	r3, [r7, #16]
		xCommand.param1 = 1u;
 800f8c4:	2301      	movs	r3, #1
 800f8c6:	747b      	strb	r3, [r7, #17]
		prvProcessCommand(&xCommand);
 800f8c8:	f107 0310 	add.w	r3, r7, #16
 800f8cc:	4618      	mov	r0, r3
 800f8ce:	f000 f932 	bl	800fb36 <prvProcessCommand>
 800f8d2:	e004      	b.n	800f8de <xTraceEnable+0x9e>
	}
	else if (uiStartOption == TRC_START_FROM_HOST)
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d001      	beq.n	800f8de <xTraceEnable+0x9e>
	{
		/* We prepare the system to receive commands from host, but let system resume execution until that happens */
	}
	else
	{
		return TRC_FAIL;
 800f8da:	2301      	movs	r3, #1
 800f8dc:	e000      	b.n	800f8e0 <xTraceEnable+0xa0>
	}

	return TRC_SUCCESS;
 800f8de:	2300      	movs	r3, #0
}
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	3718      	adds	r7, #24
 800f8e4:	46bd      	mov	sp, r7
 800f8e6:	bd80      	pop	{r7, pc}
 800f8e8:	20017410 	.word	0x20017410

0800f8ec <xTraceDisable>:

traceResult xTraceDisable(void)
{
 800f8ec:	b580      	push	{r7, lr}
 800f8ee:	af00      	add	r7, sp, #0
	prvSetRecorderDisabled();
 800f8f0:	f000 f898 	bl	800fa24 <prvSetRecorderDisabled>

	(void)xTraceStreamPortOnDisable();
	
	return TRC_SUCCESS;
 800f8f4:	2300      	movs	r3, #0
}
 800f8f6:	4618      	mov	r0, r3
 800f8f8:	bd80      	pop	{r7, pc}
	...

0800f8fc <xTraceTzCtrl>:
	
	return TRC_SUCCESS;
}

traceResult xTraceTzCtrl(void)
{
 800f8fc:	b580      	push	{r7, lr}
 800f8fe:	b084      	sub	sp, #16
 800f900:	af00      	add	r7, sp, #0
	TraceCommand_t xCommand = { 0 };
 800f902:	f107 0308 	add.w	r3, r7, #8
 800f906:	2200      	movs	r2, #0
 800f908:	601a      	str	r2, [r3, #0]
 800f90a:	605a      	str	r2, [r3, #4]
	int32_t iRxBytes;
	
	do
	{
		/* Listen for new commands */
		iRxBytes = 0;
 800f90c:	2300      	movs	r3, #0
 800f90e:	607b      	str	r3, [r7, #4]
		if (xTraceStreamPortReadData(&xCommand, sizeof(TraceCommand_t), &iRxBytes) == TRC_FAIL)
 800f910:	2300      	movs	r3, #0
 800f912:	2b01      	cmp	r3, #1
 800f914:	d103      	bne.n	800f91e <xTraceTzCtrl+0x22>
		{
			/* The connection has failed, stop tracing */
			(void)xTraceDisable();
 800f916:	f7ff ffe9 	bl	800f8ec <xTraceDisable>

			return TRC_FAIL;
 800f91a:	2301      	movs	r3, #1
 800f91c:	e025      	b.n	800f96a <xTraceTzCtrl+0x6e>
		}

		if ((uint32_t)iRxBytes == sizeof(TraceCommand_t))
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	2b08      	cmp	r3, #8
 800f922:	d10c      	bne.n	800f93e <xTraceTzCtrl+0x42>
		{
			if (prvIsValidCommand(&xCommand) != 0)
 800f924:	f107 0308 	add.w	r3, r7, #8
 800f928:	4618      	mov	r0, r3
 800f92a:	f000 f8c9 	bl	800fac0 <prvIsValidCommand>
 800f92e:	4603      	mov	r3, r0
 800f930:	2b00      	cmp	r3, #0
 800f932:	d004      	beq.n	800f93e <xTraceTzCtrl+0x42>
			{
				prvProcessCommand(&xCommand); /* Start or Stop currently... */
 800f934:	f107 0308 	add.w	r3, r7, #8
 800f938:	4618      	mov	r0, r3
 800f93a:	f000 f8fc 	bl	800fb36 <prvProcessCommand>
			}
		}

		if (xTraceIsRecorderEnabled())
 800f93e:	4b0d      	ldr	r3, [pc, #52]	@ (800f974 <xTraceTzCtrl+0x78>)
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	f003 0301 	and.w	r3, r3, #1
 800f946:	2b00      	cmp	r3, #0
		}

		/* If there was data sent or received (bytes != 0), loop around and repeat, if there is more data to send or receive.
		Otherwise, step out of this loop and sleep for a while. */

	} while (iRxBytes > 0);
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	dcde      	bgt.n	800f90c <xTraceTzCtrl+0x10>

	if (xTraceIsRecorderEnabled())
 800f94e:	4b09      	ldr	r3, [pc, #36]	@ (800f974 <xTraceTzCtrl+0x78>)
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	f003 0301 	and.w	r3, r3, #1
 800f956:	2b00      	cmp	r3, #0
 800f958:	d006      	beq.n	800f968 <xTraceTzCtrl+0x6c>
 800f95a:	4b07      	ldr	r3, [pc, #28]	@ (800f978 <xTraceTzCtrl+0x7c>)
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	685b      	ldr	r3, [r3, #4]
 800f960:	2b00      	cmp	r3, #0
 800f962:	d001      	beq.n	800f968 <xTraceTzCtrl+0x6c>
	{
		(void)xTraceDiagnosticsCheckStatus();
 800f964:	f7fd fccc 	bl	800d300 <xTraceDiagnosticsCheckStatus>
		(void)xTraceStackMonitorReport();
	}

	return TRC_SUCCESS;
 800f968:	2300      	movs	r3, #0
}
 800f96a:	4618      	mov	r0, r3
 800f96c:	3710      	adds	r7, #16
 800f96e:	46bd      	mov	sp, r7
 800f970:	bd80      	pop	{r7, pc}
 800f972:	bf00      	nop
 800f974:	20017418 	.word	0x20017418
 800f978:	20017410 	.word	0x20017410

0800f97c <prvIs64bit>:
/******************************************************************************/
/*** INTERNAL FUNCTIONS *******************************************************/
/******************************************************************************/

static TraceUnsignedBaseType_t prvIs64bit(void)
{
 800f97c:	b480      	push	{r7}
 800f97e:	af00      	add	r7, sp, #0
	return sizeof(TraceUnsignedBaseType_t) == 8;
 800f980:	2300      	movs	r3, #0
}
 800f982:	4618      	mov	r0, r3
 800f984:	46bd      	mov	sp, r7
 800f986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f98a:	4770      	bx	lr

0800f98c <prvSetRecorderEnabled>:

/* Internal function for starting/stopping the recorder. */
static void prvSetRecorderEnabled(void)
{
 800f98c:	b580      	push	{r7, lr}
 800f98e:	b086      	sub	sp, #24
 800f990:	af00      	add	r7, sp, #0
	TraceUnsignedBaseType_t uxTimestampFrequency = 0u;
 800f992:	2300      	movs	r3, #0
 800f994:	607b      	str	r3, [r7, #4]
	uint32_t uiTimestampPeriod = 0u;
 800f996:	2300      	movs	r3, #0
 800f998:	603b      	str	r3, [r7, #0]
	
	TRACE_ALLOC_CRITICAL_SECTION();
	
	if (pxTraceRecorderData->uiRecorderEnabled == 1u)
 800f99a:	4b1f      	ldr	r3, [pc, #124]	@ (800fa18 <prvSetRecorderEnabled+0x8c>)
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	685b      	ldr	r3, [r3, #4]
 800f9a0:	2b01      	cmp	r3, #1
 800f9a2:	d034      	beq.n	800fa0e <prvSetRecorderEnabled+0x82>
	{
		return;
	}

	(void)xTraceTimestampGetFrequency(&uxTimestampFrequency);
 800f9a4:	4b1d      	ldr	r3, [pc, #116]	@ (800fa1c <prvSetRecorderEnabled+0x90>)
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	689b      	ldr	r3, [r3, #8]
 800f9aa:	607b      	str	r3, [r7, #4]
	/* If not overridden using xTraceTimestampSetFrequency(...), use default value */
	if (uxTimestampFrequency == 0u)
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d104      	bne.n	800f9bc <prvSetRecorderEnabled+0x30>
	{
		(void)xTraceTimestampSetFrequency((TraceUnsignedBaseType_t)(TRC_HWTC_FREQ_HZ));
 800f9b2:	4b1a      	ldr	r3, [pc, #104]	@ (800fa1c <prvSetRecorderEnabled+0x90>)
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	4a1a      	ldr	r2, [pc, #104]	@ (800fa20 <prvSetRecorderEnabled+0x94>)
 800f9b8:	6812      	ldr	r2, [r2, #0]
 800f9ba:	609a      	str	r2, [r3, #8]
	}

	(void)xTraceTimestampGetPeriod(&uiTimestampPeriod);
 800f9bc:	4b17      	ldr	r3, [pc, #92]	@ (800fa1c <prvSetRecorderEnabled+0x90>)
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	685b      	ldr	r3, [r3, #4]
 800f9c2:	603b      	str	r3, [r7, #0]
	/* If not overridden using xTraceTimestampSetPeriod(...), use default value */
	if (uiTimestampPeriod == 0u)
 800f9c4:	683b      	ldr	r3, [r7, #0]
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d103      	bne.n	800f9d2 <prvSetRecorderEnabled+0x46>
	{
		(void)xTraceTimestampSetPeriod((TraceUnsignedBaseType_t)(TRC_HWTC_PERIOD));
 800f9ca:	4b14      	ldr	r3, [pc, #80]	@ (800fa1c <prvSetRecorderEnabled+0x90>)
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	2200      	movs	r2, #0
 800f9d0:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f9d2:	f3ef 8310 	mrs	r3, PRIMASK
 800f9d6:	60bb      	str	r3, [r7, #8]
  return(result);
 800f9d8:	68bb      	ldr	r3, [r7, #8]
	}

	TRACE_ENTER_CRITICAL_SECTION();
 800f9da:	617b      	str	r3, [r7, #20]
 800f9dc:	2301      	movs	r3, #1
 800f9de:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	f383 8810 	msr	PRIMASK, r3
}
 800f9e6:	bf00      	nop

	/* If the internal event buffer is used, we must clear it */
	(void)xTraceInternalEventBufferClear();
	
	(void)xTraceStreamPortOnTraceBegin();
 800f9e8:	f7fd fbf0 	bl	800d1cc <xTraceStreamPortOnTraceBegin>

	prvTraceStoreHeader();
	prvTraceStoreTimestampInfo();
	prvTraceStoreEntryTable();
	prvTraceStoreStartEvent();
 800f9ec:	f000 f840 	bl	800fa70 <prvTraceStoreStartEvent>

	pxTraceRecorderData->uiSessionCounter++;
 800f9f0:	4b09      	ldr	r3, [pc, #36]	@ (800fa18 <prvSetRecorderEnabled+0x8c>)
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	681a      	ldr	r2, [r3, #0]
 800f9f6:	3201      	adds	r2, #1
 800f9f8:	601a      	str	r2, [r3, #0]

	pxTraceRecorderData->uiRecorderEnabled = 1u;
 800f9fa:	4b07      	ldr	r3, [pc, #28]	@ (800fa18 <prvSetRecorderEnabled+0x8c>)
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	2201      	movs	r2, #1
 800fa00:	605a      	str	r2, [r3, #4]
 800fa02:	697b      	ldr	r3, [r7, #20]
 800fa04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fa06:	693b      	ldr	r3, [r7, #16]
 800fa08:	f383 8810 	msr	PRIMASK, r3
}
 800fa0c:	e000      	b.n	800fa10 <prvSetRecorderEnabled+0x84>
		return;
 800fa0e:	bf00      	nop

	TRACE_EXIT_CRITICAL_SECTION();
}
 800fa10:	3718      	adds	r7, #24
 800fa12:	46bd      	mov	sp, r7
 800fa14:	bd80      	pop	{r7, pc}
 800fa16:	bf00      	nop
 800fa18:	20017410 	.word	0x20017410
 800fa1c:	20017420 	.word	0x20017420
 800fa20:	200001bc 	.word	0x200001bc

0800fa24 <prvSetRecorderDisabled>:

static void prvSetRecorderDisabled(void)
{
 800fa24:	b480      	push	{r7}
 800fa26:	b085      	sub	sp, #20
 800fa28:	af00      	add	r7, sp, #0
	TRACE_ALLOC_CRITICAL_SECTION();

	if (pxTraceRecorderData->uiRecorderEnabled == 0u)
 800fa2a:	4b10      	ldr	r3, [pc, #64]	@ (800fa6c <prvSetRecorderDisabled+0x48>)
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	685b      	ldr	r3, [r3, #4]
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d014      	beq.n	800fa5e <prvSetRecorderDisabled+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fa34:	f3ef 8310 	mrs	r3, PRIMASK
 800fa38:	603b      	str	r3, [r7, #0]
  return(result);
 800fa3a:	683b      	ldr	r3, [r7, #0]
	{
		return;
	}

	TRACE_ENTER_CRITICAL_SECTION();
 800fa3c:	60fb      	str	r3, [r7, #12]
 800fa3e:	2301      	movs	r3, #1
 800fa40:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	f383 8810 	msr	PRIMASK, r3
}
 800fa48:	bf00      	nop
	
	pxTraceRecorderData->uiRecorderEnabled = 0u;
 800fa4a:	4b08      	ldr	r3, [pc, #32]	@ (800fa6c <prvSetRecorderDisabled+0x48>)
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	2200      	movs	r2, #0
 800fa50:	605a      	str	r2, [r3, #4]
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fa56:	68bb      	ldr	r3, [r7, #8]
 800fa58:	f383 8810 	msr	PRIMASK, r3
}
 800fa5c:	e000      	b.n	800fa60 <prvSetRecorderDisabled+0x3c>
		return;
 800fa5e:	bf00      	nop

	(void)xTraceStreamPortOnTraceEnd();

	TRACE_EXIT_CRITICAL_SECTION();
}
 800fa60:	3714      	adds	r7, #20
 800fa62:	46bd      	mov	sp, r7
 800fa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa68:	4770      	bx	lr
 800fa6a:	bf00      	nop
 800fa6c:	20017410 	.word	0x20017410

0800fa70 <prvTraceStoreStartEvent>:

}
#endif /* (TRC_EXTERNAL_BUFFERS == 0) */

static void prvTraceStoreStartEvent(void)
{
 800fa70:	b580      	push	{r7, lr}
 800fa72:	b084      	sub	sp, #16
 800fa74:	af00      	add	r7, sp, #0
	void* pvCurrentTask = (void*)0;
 800fa76:	2300      	movs	r3, #0
 800fa78:	60bb      	str	r3, [r7, #8]
	uint32_t i;

	TraceUnsignedBaseType_t xTraceTasks[TRC_CFG_CORE_COUNT];
	for (i = 0; i < (TRC_CFG_CORE_COUNT); i++)
 800fa7a:	2300      	movs	r3, #0
 800fa7c:	60fb      	str	r3, [r7, #12]
 800fa7e:	e010      	b.n	800faa2 <prvTraceStoreStartEvent+0x32>
	{
		(void)xTraceTaskGetCurrentOnCore(i, &pvCurrentTask);
 800fa80:	4b0e      	ldr	r3, [pc, #56]	@ (800fabc <prvTraceStoreStartEvent+0x4c>)
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	68fa      	ldr	r2, [r7, #12]
 800fa86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa8a:	60bb      	str	r3, [r7, #8]
		xTraceTasks[i] = (TraceUnsignedBaseType_t)pvCurrentTask;
 800fa8c:	68bb      	ldr	r3, [r7, #8]
 800fa8e:	461a      	mov	r2, r3
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	009b      	lsls	r3, r3, #2
 800fa94:	3310      	adds	r3, #16
 800fa96:	443b      	add	r3, r7
 800fa98:	f843 2c0c 	str.w	r2, [r3, #-12]
	for (i = 0; i < (TRC_CFG_CORE_COUNT); i++)
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	3301      	adds	r3, #1
 800faa0:	60fb      	str	r3, [r7, #12]
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d0eb      	beq.n	800fa80 <prvTraceStoreStartEvent+0x10>
	}

	(void)xTraceEventCreateDataOffline0(PSF_EVENT_TRACE_START, xTraceTasks, sizeof(xTraceTasks));
 800faa8:	1d3b      	adds	r3, r7, #4
 800faaa:	2204      	movs	r2, #4
 800faac:	4619      	mov	r1, r3
 800faae:	2001      	movs	r0, #1
 800fab0:	f7fe f9c2 	bl	800de38 <xTraceEventCreateDataOffline0>
}
 800fab4:	bf00      	nop
 800fab6:	3710      	adds	r7, #16
 800fab8:	46bd      	mov	sp, r7
 800faba:	bd80      	pop	{r7, pc}
 800fabc:	2001741c 	.word	0x2001741c

0800fac0 <prvIsValidCommand>:

/* Checks if the provided command is a valid command */
static int32_t prvIsValidCommand(const TraceCommand_t* const cmd)
{
 800fac0:	b480      	push	{r7}
 800fac2:	b085      	sub	sp, #20
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	6078      	str	r0, [r7, #4]
  	uint16_t checksum = (uint16_t)0xFFFFU - (uint16_t)(unsigned char)(cmd->cmdCode + /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	781a      	ldrb	r2, [r3, #0]
												cmd->param1 +
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	785b      	ldrb	r3, [r3, #1]
  	uint16_t checksum = (uint16_t)0xFFFFU - (uint16_t)(unsigned char)(cmd->cmdCode + /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 800fad0:	4413      	add	r3, r2
 800fad2:	b2da      	uxtb	r2, r3
												cmd->param2 +
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	789b      	ldrb	r3, [r3, #2]
												cmd->param1 +
 800fad8:	4413      	add	r3, r2
 800fada:	b2da      	uxtb	r2, r3
												cmd->param3 +
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	78db      	ldrb	r3, [r3, #3]
												cmd->param2 +
 800fae0:	4413      	add	r3, r2
 800fae2:	b2da      	uxtb	r2, r3
												cmd->param4 +
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	791b      	ldrb	r3, [r3, #4]
												cmd->param3 +
 800fae8:	4413      	add	r3, r2
 800faea:	b2da      	uxtb	r2, r3
												cmd->param5);
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	795b      	ldrb	r3, [r3, #5]
  	uint16_t checksum = (uint16_t)0xFFFFU - (uint16_t)(unsigned char)(cmd->cmdCode + /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 800faf0:	4413      	add	r3, r2
 800faf2:	b2db      	uxtb	r3, r3
 800faf4:	43db      	mvns	r3, r3
 800faf6:	81fb      	strh	r3, [r7, #14]

	if (cmd->checksumMSB != (unsigned char)(checksum >> 8)) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	79da      	ldrb	r2, [r3, #7]
 800fafc:	89fb      	ldrh	r3, [r7, #14]
 800fafe:	0a1b      	lsrs	r3, r3, #8
 800fb00:	b29b      	uxth	r3, r3
 800fb02:	b2db      	uxtb	r3, r3
 800fb04:	429a      	cmp	r2, r3
 800fb06:	d001      	beq.n	800fb0c <prvIsValidCommand+0x4c>
	{
		return 0;
 800fb08:	2300      	movs	r3, #0
 800fb0a:	e00e      	b.n	800fb2a <prvIsValidCommand+0x6a>
	}

	if (cmd->checksumLSB != (unsigned char)(checksum & 0xFFU)) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	799a      	ldrb	r2, [r3, #6]
 800fb10:	89fb      	ldrh	r3, [r7, #14]
 800fb12:	b2db      	uxtb	r3, r3
 800fb14:	429a      	cmp	r2, r3
 800fb16:	d001      	beq.n	800fb1c <prvIsValidCommand+0x5c>
	{
		return 0;
 800fb18:	2300      	movs	r3, #0
 800fb1a:	e006      	b.n	800fb2a <prvIsValidCommand+0x6a>
	}

	if (cmd->cmdCode > (unsigned char)(CMD_LAST_COMMAND)) /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	781b      	ldrb	r3, [r3, #0]
 800fb20:	2b01      	cmp	r3, #1
 800fb22:	d901      	bls.n	800fb28 <prvIsValidCommand+0x68>
	{
		return 0;
 800fb24:	2300      	movs	r3, #0
 800fb26:	e000      	b.n	800fb2a <prvIsValidCommand+0x6a>
	}

	return 1;
 800fb28:	2301      	movs	r3, #1
}
 800fb2a:	4618      	mov	r0, r3
 800fb2c:	3714      	adds	r7, #20
 800fb2e:	46bd      	mov	sp, r7
 800fb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb34:	4770      	bx	lr

0800fb36 <prvProcessCommand>:

/* Executed the received command (Start or Stop) */
static void prvProcessCommand(const TraceCommand_t* const cmd)
{
 800fb36:	b580      	push	{r7, lr}
 800fb38:	b082      	sub	sp, #8
 800fb3a:	af00      	add	r7, sp, #0
 800fb3c:	6078      	str	r0, [r7, #4]
  	switch(cmd->cmdCode)
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	781b      	ldrb	r3, [r3, #0]
 800fb42:	2b01      	cmp	r3, #1
 800fb44:	d109      	bne.n	800fb5a <prvProcessCommand+0x24>
	{
		case CMD_SET_ACTIVE:
			if (cmd->param1 == 1u)
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	785b      	ldrb	r3, [r3, #1]
 800fb4a:	2b01      	cmp	r3, #1
 800fb4c:	d102      	bne.n	800fb54 <prvProcessCommand+0x1e>
			{
				prvSetRecorderEnabled();
 800fb4e:	f7ff ff1d 	bl	800f98c <prvSetRecorderEnabled>
			}
			else
			{
				prvSetRecorderDisabled();
			}
		  	break;
 800fb52:	e003      	b.n	800fb5c <prvProcessCommand+0x26>
				prvSetRecorderDisabled();
 800fb54:	f7ff ff66 	bl	800fa24 <prvSetRecorderDisabled>
		  	break;
 800fb58:	e000      	b.n	800fb5c <prvProcessCommand+0x26>
		default:
		  	break;
 800fb5a:	bf00      	nop
	}
}
 800fb5c:	bf00      	nop
 800fb5e:	3708      	adds	r7, #8
 800fb60:	46bd      	mov	sp, r7
 800fb62:	bd80      	pop	{r7, pc}

0800fb64 <xTraceStringRegister>:

#if (TRC_USE_TRACEALYZER_RECORDER == 1) && (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

/*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/
traceResult xTraceStringRegister(const char* szString, TraceStringHandle_t *pString)
{
 800fb64:	b580      	push	{r7, lr}
 800fb66:	b086      	sub	sp, #24
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	6078      	str	r0, [r7, #4]
 800fb6c:	6039      	str	r1, [r7, #0]
	TraceEntryHandle_t xEntryHandle;
	int32_t i;
	uint32_t uiLength = 0u;
 800fb6e:	2300      	movs	r3, #0
 800fb70:	613b      	str	r3, [r7, #16]
	
	/* This should never fail */
	TRC_ASSERT(pString != (void*)0);

	/* We need to check this */
	if (xTraceEntryCreate(&xEntryHandle) == TRC_FAIL)
 800fb72:	f107 030c 	add.w	r3, r7, #12
 800fb76:	4618      	mov	r0, r3
 800fb78:	f7fd fc6e 	bl	800d458 <xTraceEntryCreate>
 800fb7c:	4603      	mov	r3, r0
 800fb7e:	2b01      	cmp	r3, #1
 800fb80:	d101      	bne.n	800fb86 <xTraceStringRegister+0x22>
	{
		return TRC_FAIL;
 800fb82:	2301      	movs	r3, #1
 800fb84:	e022      	b.n	800fbcc <xTraceStringRegister+0x68>
	}

	for (i = 0; (szString[i] != (char)0) && (i < (int32_t)(TRC_ENTRY_TABLE_SLOT_SYMBOL_SIZE)); i++) {} /*cstat !MISRAC2004-6.3 !MISRAC2012-Dir-4.6_a Suppress basic char type usage*/ /*cstat !MISRAC2004-17.4_b We need to access every character in the string*/
 800fb86:	2300      	movs	r3, #0
 800fb88:	617b      	str	r3, [r7, #20]
 800fb8a:	e002      	b.n	800fb92 <xTraceStringRegister+0x2e>
 800fb8c:	697b      	ldr	r3, [r7, #20]
 800fb8e:	3301      	adds	r3, #1
 800fb90:	617b      	str	r3, [r7, #20]
 800fb92:	697b      	ldr	r3, [r7, #20]
 800fb94:	687a      	ldr	r2, [r7, #4]
 800fb96:	4413      	add	r3, r2
 800fb98:	781b      	ldrb	r3, [r3, #0]
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d002      	beq.n	800fba4 <xTraceStringRegister+0x40>
 800fb9e:	697b      	ldr	r3, [r7, #20]
 800fba0:	2b1b      	cmp	r3, #27
 800fba2:	ddf3      	ble.n	800fb8c <xTraceStringRegister+0x28>

	uiLength = (uint32_t)i;
 800fba4:	697b      	ldr	r3, [r7, #20]
 800fba6:	613b      	str	r3, [r7, #16]

	/* The address to the available symbol table slot is the address we use */
	/* This should never fail */
	TRC_ASSERT_ALWAYS_EVALUATE(xTraceEntrySetSymbol(xEntryHandle, szString, uiLength) == TRC_SUCCESS);
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	693a      	ldr	r2, [r7, #16]
 800fbac:	6879      	ldr	r1, [r7, #4]
 800fbae:	4618      	mov	r0, r3
 800fbb0:	f7fd fd26 	bl	800d600 <xTraceEntrySetSymbol>

	*pString = (TraceStringHandle_t)xEntryHandle;
 800fbb4:	68fa      	ldr	r2, [r7, #12]
 800fbb6:	683b      	ldr	r3, [r7, #0]
 800fbb8:	601a      	str	r2, [r3, #0]

	return xTraceEventCreateData1(PSF_EVENT_OBJ_NAME, (TraceUnsignedBaseType_t)xEntryHandle, (TraceUnsignedBaseType_t*)szString, uiLength + 1);
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	4619      	mov	r1, r3
 800fbbe:	693b      	ldr	r3, [r7, #16]
 800fbc0:	3301      	adds	r3, #1
 800fbc2:	687a      	ldr	r2, [r7, #4]
 800fbc4:	2003      	movs	r0, #3
 800fbc6:	f7fe f9bd 	bl	800df44 <xTraceEventCreateData1>
 800fbca:	4603      	mov	r3, r0
}
 800fbcc:	4618      	mov	r0, r3
 800fbce:	3718      	adds	r7, #24
 800fbd0:	46bd      	mov	sp, r7
 800fbd2:	bd80      	pop	{r7, pc}

0800fbd4 <xTraceTaskInitialize>:
#define TRC_TASK_STATE_INDEX_PRIORITY		0u

TraceTaskData_t* pxTraceTaskData TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceTaskInitialize(TraceTaskData_t *pxBuffer)
{
 800fbd4:	b480      	push	{r7}
 800fbd6:	b085      	sub	sp, #20
 800fbd8:	af00      	add	r7, sp, #0
 800fbda:	6078      	str	r0, [r7, #4]
	int32_t i;

	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxTraceTaskData= pxBuffer;
 800fbdc:	4a0f      	ldr	r2, [pc, #60]	@ (800fc1c <xTraceTaskInitialize+0x48>)
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	6013      	str	r3, [r2, #0]

	for (i = 0; i < (TRC_CFG_CORE_COUNT); i++)
 800fbe2:	2300      	movs	r3, #0
 800fbe4:	60fb      	str	r3, [r7, #12]
 800fbe6:	e008      	b.n	800fbfa <xTraceTaskInitialize+0x26>
	{
		pxTraceTaskData->coreTasks[i] = TRACE_HANDLE_NO_TASK;  /*cstat !MISRAC2004-11.3 !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6 Suppress conversion from pointer to integer check*/
 800fbe8:	4b0c      	ldr	r3, [pc, #48]	@ (800fc1c <xTraceTaskInitialize+0x48>)
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	68fa      	ldr	r2, [r7, #12]
 800fbee:	2102      	movs	r1, #2
 800fbf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < (TRC_CFG_CORE_COUNT); i++)
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	3301      	adds	r3, #1
 800fbf8:	60fb      	str	r3, [r7, #12]
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	ddf3      	ble.n	800fbe8 <xTraceTaskInitialize+0x14>
	}

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_TASK);
 800fc00:	4b07      	ldr	r3, [pc, #28]	@ (800fc20 <xTraceTaskInitialize+0x4c>)
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fc08:	4a05      	ldr	r2, [pc, #20]	@ (800fc20 <xTraceTaskInitialize+0x4c>)
 800fc0a:	6013      	str	r3, [r2, #0]

	return TRC_SUCCESS;
 800fc0c:	2300      	movs	r3, #0
}
 800fc0e:	4618      	mov	r0, r3
 800fc10:	3714      	adds	r7, #20
 800fc12:	46bd      	mov	sp, r7
 800fc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc18:	4770      	bx	lr
 800fc1a:	bf00      	nop
 800fc1c:	2001741c 	.word	0x2001741c
 800fc20:	20017418 	.word	0x20017418

0800fc24 <xTraceTaskSwitch>:

	return TRC_SUCCESS;
}

traceResult xTraceTaskSwitch(void *pvTask, TraceUnsignedBaseType_t uxPriority)
{
 800fc24:	b580      	push	{r7, lr}
 800fc26:	b088      	sub	sp, #32
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	6078      	str	r0, [r7, #4]
 800fc2c:	6039      	str	r1, [r7, #0]
	traceResult xResult = TRC_FAIL;
 800fc2e:	2301      	movs	r3, #1
 800fc30:	61fb      	str	r3, [r7, #28]
	TRACE_ALLOC_CRITICAL_SECTION();
	
	(void)pvTask;
	(void)uxPriority;

	if (!xTraceIsRecorderInitialized())
 800fc32:	4b21      	ldr	r3, [pc, #132]	@ (800fcb8 <xTraceTaskSwitch+0x94>)
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	f003 0301 	and.w	r3, r3, #1
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d101      	bne.n	800fc42 <xTraceTaskSwitch+0x1e>
	{
		return xResult;
 800fc3e:	69fb      	ldr	r3, [r7, #28]
 800fc40:	e035      	b.n	800fcae <xTraceTaskSwitch+0x8a>
	}

	if (!xTraceIsRecorderEnabled())
 800fc42:	4b1d      	ldr	r3, [pc, #116]	@ (800fcb8 <xTraceTaskSwitch+0x94>)
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	f003 0301 	and.w	r3, r3, #1
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d004      	beq.n	800fc58 <xTraceTaskSwitch+0x34>
 800fc4e:	4b1b      	ldr	r3, [pc, #108]	@ (800fcbc <xTraceTaskSwitch+0x98>)
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	685b      	ldr	r3, [r3, #4]
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d105      	bne.n	800fc64 <xTraceTaskSwitch+0x40>
	{
		/* Make sure we store the current task, even while recorder isn't enabled */
		xTraceTaskSetCurrent(pvTask);
 800fc58:	4b19      	ldr	r3, [pc, #100]	@ (800fcc0 <xTraceTaskSwitch+0x9c>)
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	687a      	ldr	r2, [r7, #4]
 800fc5e:	601a      	str	r2, [r3, #0]

		return xResult;
 800fc60:	69fb      	ldr	r3, [r7, #28]
 800fc62:	e024      	b.n	800fcae <xTraceTaskSwitch+0x8a>
	}

	xTraceStateSet(TRC_STATE_IN_TASKSWITCH);
 800fc64:	4b15      	ldr	r3, [pc, #84]	@ (800fcbc <xTraceTaskSwitch+0x98>)
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	2201      	movs	r2, #1
 800fc6a:	609a      	str	r2, [r3, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fc6c:	f3ef 8310 	mrs	r3, PRIMASK
 800fc70:	60fb      	str	r3, [r7, #12]
  return(result);
 800fc72:	68fb      	ldr	r3, [r7, #12]

	TRACE_ENTER_CRITICAL_SECTION();
 800fc74:	61bb      	str	r3, [r7, #24]
 800fc76:	2301      	movs	r3, #1
 800fc78:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fc7a:	693b      	ldr	r3, [r7, #16]
 800fc7c:	f383 8810 	msr	PRIMASK, r3
}
 800fc80:	bf00      	nop
#if (TRC_KERNEL_PORT_KERNEL_CAN_SWITCH_TO_SAME_TASK == 1)
	xTraceTaskGetCurrent(&pvCurrent);
	if (pvCurrent != pvTask)
#endif
	{
		xTraceTaskSetCurrent(pvTask);
 800fc82:	4b0f      	ldr	r3, [pc, #60]	@ (800fcc0 <xTraceTaskSwitch+0x9c>)
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	687a      	ldr	r2, [r7, #4]
 800fc88:	601a      	str	r2, [r3, #0]

		xResult = xTraceEventCreate2(PSF_EVENT_TASK_ACTIVATE, (TraceUnsignedBaseType_t)pvTask, uxPriority);  /*cstat !MISRAC2004-11.3 !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6 Suppress conversion from pointer to integer check*/
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	683a      	ldr	r2, [r7, #0]
 800fc8e:	4619      	mov	r1, r3
 800fc90:	2037      	movs	r0, #55	@ 0x37
 800fc92:	f7fd ff3b 	bl	800db0c <xTraceEventCreate2>
 800fc96:	61f8      	str	r0, [r7, #28]
	}

	xTraceStateSet(TRC_STATE_IN_APPLICATION);
 800fc98:	4b08      	ldr	r3, [pc, #32]	@ (800fcbc <xTraceTaskSwitch+0x98>)
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	2202      	movs	r2, #2
 800fc9e:	609a      	str	r2, [r3, #8]
 800fca0:	69bb      	ldr	r3, [r7, #24]
 800fca2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fca4:	697b      	ldr	r3, [r7, #20]
 800fca6:	f383 8810 	msr	PRIMASK, r3
}
 800fcaa:	bf00      	nop

	TRACE_EXIT_CRITICAL_SECTION();

	return xResult;
 800fcac:	69fb      	ldr	r3, [r7, #28]
}
 800fcae:	4618      	mov	r0, r3
 800fcb0:	3720      	adds	r7, #32
 800fcb2:	46bd      	mov	sp, r7
 800fcb4:	bd80      	pop	{r7, pc}
 800fcb6:	bf00      	nop
 800fcb8:	20017418 	.word	0x20017418
 800fcbc:	20017410 	.word	0x20017410
 800fcc0:	2001741c 	.word	0x2001741c

0800fcc4 <xTraceTimestampInitialize>:
#if (TRC_USE_TRACEALYZER_RECORDER == 1) && (TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_STREAMING)

TraceTimestampData_t *pxTraceTimestamp TRC_CFG_RECORDER_DATA_ATTRIBUTE;

traceResult xTraceTimestampInitialize(TraceTimestampData_t *pxBuffer)
{
 800fcc4:	b480      	push	{r7}
 800fcc6:	b083      	sub	sp, #12
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	6078      	str	r0, [r7, #4]
	/* This should never fail */
	TRC_ASSERT(pxBuffer != (void*)0);

	pxTraceTimestamp = pxBuffer;
 800fccc:	4a16      	ldr	r2, [pc, #88]	@ (800fd28 <xTraceTimestampInitialize+0x64>)
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	6013      	str	r3, [r2, #0]

	/* These will be set when tracing is enabled */
	pxTraceTimestamp->frequency = 0u;
 800fcd2:	4b15      	ldr	r3, [pc, #84]	@ (800fd28 <xTraceTimestampInitialize+0x64>)
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	2200      	movs	r2, #0
 800fcd8:	609a      	str	r2, [r3, #8]
	pxTraceTimestamp->period = 0u;
 800fcda:	4b13      	ldr	r3, [pc, #76]	@ (800fd28 <xTraceTimestampInitialize+0x64>)
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	2200      	movs	r2, #0
 800fce0:	605a      	str	r2, [r3, #4]

	pxTraceTimestamp->osTickHz = TRC_TICK_RATE_HZ;
 800fce2:	4b11      	ldr	r3, [pc, #68]	@ (800fd28 <xTraceTimestampInitialize+0x64>)
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800fcea:	611a      	str	r2, [r3, #16]
	pxTraceTimestamp->osTickCount = 0u;
 800fcec:	4b0e      	ldr	r3, [pc, #56]	@ (800fd28 <xTraceTimestampInitialize+0x64>)
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	2200      	movs	r2, #0
 800fcf2:	619a      	str	r2, [r3, #24]
	pxTraceTimestamp->wraparounds = 0u;
 800fcf4:	4b0c      	ldr	r3, [pc, #48]	@ (800fd28 <xTraceTimestampInitialize+0x64>)
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	2200      	movs	r2, #0
 800fcfa:	60da      	str	r2, [r3, #12]
	pxTraceTimestamp->type = TRC_HWTC_TYPE;
 800fcfc:	4b0a      	ldr	r3, [pc, #40]	@ (800fd28 <xTraceTimestampInitialize+0x64>)
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	2201      	movs	r2, #1
 800fd02:	601a      	str	r2, [r3, #0]

#if (TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR || TRC_HWTC_TYPE == TRC_CUSTOM_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_INCR)
	pxTraceTimestamp->latestTimestamp = 0u;
 800fd04:	4b08      	ldr	r3, [pc, #32]	@ (800fd28 <xTraceTimestampInitialize+0x64>)
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	2200      	movs	r2, #0
 800fd0a:	615a      	str	r2, [r3, #20]
#elif (TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR || TRC_HWTC_TYPE == TRC_CUSTOM_TIMER_DECR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	pxTraceTimestamp->latestTimestamp = pxTraceTimestamp->period - 1u;
#endif

	xTraceSetComponentInitialized(TRC_RECORDER_COMPONENT_TIMESTAMP);
 800fd0c:	4b07      	ldr	r3, [pc, #28]	@ (800fd2c <xTraceTimestampInitialize+0x68>)
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800fd14:	4a05      	ldr	r2, [pc, #20]	@ (800fd2c <xTraceTimestampInitialize+0x68>)
 800fd16:	6013      	str	r3, [r2, #0]

	return TRC_SUCCESS;
 800fd18:	2300      	movs	r3, #0
}
 800fd1a:	4618      	mov	r0, r3
 800fd1c:	370c      	adds	r7, #12
 800fd1e:	46bd      	mov	sp, r7
 800fd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd24:	4770      	bx	lr
 800fd26:	bf00      	nop
 800fd28:	20017420 	.word	0x20017420
 800fd2c:	20017418 	.word	0x20017418

0800fd30 <malloc>:
 800fd30:	4b02      	ldr	r3, [pc, #8]	@ (800fd3c <malloc+0xc>)
 800fd32:	4601      	mov	r1, r0
 800fd34:	6818      	ldr	r0, [r3, #0]
 800fd36:	f000 b82d 	b.w	800fd94 <_malloc_r>
 800fd3a:	bf00      	nop
 800fd3c:	200001cc 	.word	0x200001cc

0800fd40 <free>:
 800fd40:	4b02      	ldr	r3, [pc, #8]	@ (800fd4c <free+0xc>)
 800fd42:	4601      	mov	r1, r0
 800fd44:	6818      	ldr	r0, [r3, #0]
 800fd46:	f000 b9b5 	b.w	80100b4 <_free_r>
 800fd4a:	bf00      	nop
 800fd4c:	200001cc 	.word	0x200001cc

0800fd50 <sbrk_aligned>:
 800fd50:	b570      	push	{r4, r5, r6, lr}
 800fd52:	4e0f      	ldr	r6, [pc, #60]	@ (800fd90 <sbrk_aligned+0x40>)
 800fd54:	460c      	mov	r4, r1
 800fd56:	6831      	ldr	r1, [r6, #0]
 800fd58:	4605      	mov	r5, r0
 800fd5a:	b911      	cbnz	r1, 800fd62 <sbrk_aligned+0x12>
 800fd5c:	f000 f958 	bl	8010010 <_sbrk_r>
 800fd60:	6030      	str	r0, [r6, #0]
 800fd62:	4621      	mov	r1, r4
 800fd64:	4628      	mov	r0, r5
 800fd66:	f000 f953 	bl	8010010 <_sbrk_r>
 800fd6a:	1c43      	adds	r3, r0, #1
 800fd6c:	d103      	bne.n	800fd76 <sbrk_aligned+0x26>
 800fd6e:	f04f 34ff 	mov.w	r4, #4294967295
 800fd72:	4620      	mov	r0, r4
 800fd74:	bd70      	pop	{r4, r5, r6, pc}
 800fd76:	1cc4      	adds	r4, r0, #3
 800fd78:	f024 0403 	bic.w	r4, r4, #3
 800fd7c:	42a0      	cmp	r0, r4
 800fd7e:	d0f8      	beq.n	800fd72 <sbrk_aligned+0x22>
 800fd80:	1a21      	subs	r1, r4, r0
 800fd82:	4628      	mov	r0, r5
 800fd84:	f000 f944 	bl	8010010 <_sbrk_r>
 800fd88:	3001      	adds	r0, #1
 800fd8a:	d1f2      	bne.n	800fd72 <sbrk_aligned+0x22>
 800fd8c:	e7ef      	b.n	800fd6e <sbrk_aligned+0x1e>
 800fd8e:	bf00      	nop
 800fd90:	20017424 	.word	0x20017424

0800fd94 <_malloc_r>:
 800fd94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd98:	1ccd      	adds	r5, r1, #3
 800fd9a:	f025 0503 	bic.w	r5, r5, #3
 800fd9e:	3508      	adds	r5, #8
 800fda0:	2d0c      	cmp	r5, #12
 800fda2:	bf38      	it	cc
 800fda4:	250c      	movcc	r5, #12
 800fda6:	2d00      	cmp	r5, #0
 800fda8:	4606      	mov	r6, r0
 800fdaa:	db01      	blt.n	800fdb0 <_malloc_r+0x1c>
 800fdac:	42a9      	cmp	r1, r5
 800fdae:	d904      	bls.n	800fdba <_malloc_r+0x26>
 800fdb0:	230c      	movs	r3, #12
 800fdb2:	6033      	str	r3, [r6, #0]
 800fdb4:	2000      	movs	r0, #0
 800fdb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fdba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fe90 <_malloc_r+0xfc>
 800fdbe:	f000 f869 	bl	800fe94 <__malloc_lock>
 800fdc2:	f8d8 3000 	ldr.w	r3, [r8]
 800fdc6:	461c      	mov	r4, r3
 800fdc8:	bb44      	cbnz	r4, 800fe1c <_malloc_r+0x88>
 800fdca:	4629      	mov	r1, r5
 800fdcc:	4630      	mov	r0, r6
 800fdce:	f7ff ffbf 	bl	800fd50 <sbrk_aligned>
 800fdd2:	1c43      	adds	r3, r0, #1
 800fdd4:	4604      	mov	r4, r0
 800fdd6:	d158      	bne.n	800fe8a <_malloc_r+0xf6>
 800fdd8:	f8d8 4000 	ldr.w	r4, [r8]
 800fddc:	4627      	mov	r7, r4
 800fdde:	2f00      	cmp	r7, #0
 800fde0:	d143      	bne.n	800fe6a <_malloc_r+0xd6>
 800fde2:	2c00      	cmp	r4, #0
 800fde4:	d04b      	beq.n	800fe7e <_malloc_r+0xea>
 800fde6:	6823      	ldr	r3, [r4, #0]
 800fde8:	4639      	mov	r1, r7
 800fdea:	4630      	mov	r0, r6
 800fdec:	eb04 0903 	add.w	r9, r4, r3
 800fdf0:	f000 f90e 	bl	8010010 <_sbrk_r>
 800fdf4:	4581      	cmp	r9, r0
 800fdf6:	d142      	bne.n	800fe7e <_malloc_r+0xea>
 800fdf8:	6821      	ldr	r1, [r4, #0]
 800fdfa:	1a6d      	subs	r5, r5, r1
 800fdfc:	4629      	mov	r1, r5
 800fdfe:	4630      	mov	r0, r6
 800fe00:	f7ff ffa6 	bl	800fd50 <sbrk_aligned>
 800fe04:	3001      	adds	r0, #1
 800fe06:	d03a      	beq.n	800fe7e <_malloc_r+0xea>
 800fe08:	6823      	ldr	r3, [r4, #0]
 800fe0a:	442b      	add	r3, r5
 800fe0c:	6023      	str	r3, [r4, #0]
 800fe0e:	f8d8 3000 	ldr.w	r3, [r8]
 800fe12:	685a      	ldr	r2, [r3, #4]
 800fe14:	bb62      	cbnz	r2, 800fe70 <_malloc_r+0xdc>
 800fe16:	f8c8 7000 	str.w	r7, [r8]
 800fe1a:	e00f      	b.n	800fe3c <_malloc_r+0xa8>
 800fe1c:	6822      	ldr	r2, [r4, #0]
 800fe1e:	1b52      	subs	r2, r2, r5
 800fe20:	d420      	bmi.n	800fe64 <_malloc_r+0xd0>
 800fe22:	2a0b      	cmp	r2, #11
 800fe24:	d917      	bls.n	800fe56 <_malloc_r+0xc2>
 800fe26:	1961      	adds	r1, r4, r5
 800fe28:	42a3      	cmp	r3, r4
 800fe2a:	6025      	str	r5, [r4, #0]
 800fe2c:	bf18      	it	ne
 800fe2e:	6059      	strne	r1, [r3, #4]
 800fe30:	6863      	ldr	r3, [r4, #4]
 800fe32:	bf08      	it	eq
 800fe34:	f8c8 1000 	streq.w	r1, [r8]
 800fe38:	5162      	str	r2, [r4, r5]
 800fe3a:	604b      	str	r3, [r1, #4]
 800fe3c:	4630      	mov	r0, r6
 800fe3e:	f000 f82f 	bl	800fea0 <__malloc_unlock>
 800fe42:	f104 000b 	add.w	r0, r4, #11
 800fe46:	1d23      	adds	r3, r4, #4
 800fe48:	f020 0007 	bic.w	r0, r0, #7
 800fe4c:	1ac2      	subs	r2, r0, r3
 800fe4e:	bf1c      	itt	ne
 800fe50:	1a1b      	subne	r3, r3, r0
 800fe52:	50a3      	strne	r3, [r4, r2]
 800fe54:	e7af      	b.n	800fdb6 <_malloc_r+0x22>
 800fe56:	6862      	ldr	r2, [r4, #4]
 800fe58:	42a3      	cmp	r3, r4
 800fe5a:	bf0c      	ite	eq
 800fe5c:	f8c8 2000 	streq.w	r2, [r8]
 800fe60:	605a      	strne	r2, [r3, #4]
 800fe62:	e7eb      	b.n	800fe3c <_malloc_r+0xa8>
 800fe64:	4623      	mov	r3, r4
 800fe66:	6864      	ldr	r4, [r4, #4]
 800fe68:	e7ae      	b.n	800fdc8 <_malloc_r+0x34>
 800fe6a:	463c      	mov	r4, r7
 800fe6c:	687f      	ldr	r7, [r7, #4]
 800fe6e:	e7b6      	b.n	800fdde <_malloc_r+0x4a>
 800fe70:	461a      	mov	r2, r3
 800fe72:	685b      	ldr	r3, [r3, #4]
 800fe74:	42a3      	cmp	r3, r4
 800fe76:	d1fb      	bne.n	800fe70 <_malloc_r+0xdc>
 800fe78:	2300      	movs	r3, #0
 800fe7a:	6053      	str	r3, [r2, #4]
 800fe7c:	e7de      	b.n	800fe3c <_malloc_r+0xa8>
 800fe7e:	230c      	movs	r3, #12
 800fe80:	6033      	str	r3, [r6, #0]
 800fe82:	4630      	mov	r0, r6
 800fe84:	f000 f80c 	bl	800fea0 <__malloc_unlock>
 800fe88:	e794      	b.n	800fdb4 <_malloc_r+0x20>
 800fe8a:	6005      	str	r5, [r0, #0]
 800fe8c:	e7d6      	b.n	800fe3c <_malloc_r+0xa8>
 800fe8e:	bf00      	nop
 800fe90:	20017428 	.word	0x20017428

0800fe94 <__malloc_lock>:
 800fe94:	4801      	ldr	r0, [pc, #4]	@ (800fe9c <__malloc_lock+0x8>)
 800fe96:	f000 b8f5 	b.w	8010084 <__retarget_lock_acquire_recursive>
 800fe9a:	bf00      	nop
 800fe9c:	20017568 	.word	0x20017568

0800fea0 <__malloc_unlock>:
 800fea0:	4801      	ldr	r0, [pc, #4]	@ (800fea8 <__malloc_unlock+0x8>)
 800fea2:	f000 b8f0 	b.w	8010086 <__retarget_lock_release_recursive>
 800fea6:	bf00      	nop
 800fea8:	20017568 	.word	0x20017568

0800feac <sniprintf>:
 800feac:	b40c      	push	{r2, r3}
 800feae:	b530      	push	{r4, r5, lr}
 800feb0:	4b17      	ldr	r3, [pc, #92]	@ (800ff10 <sniprintf+0x64>)
 800feb2:	1e0c      	subs	r4, r1, #0
 800feb4:	681d      	ldr	r5, [r3, #0]
 800feb6:	b09d      	sub	sp, #116	@ 0x74
 800feb8:	da08      	bge.n	800fecc <sniprintf+0x20>
 800feba:	238b      	movs	r3, #139	@ 0x8b
 800febc:	602b      	str	r3, [r5, #0]
 800febe:	f04f 30ff 	mov.w	r0, #4294967295
 800fec2:	b01d      	add	sp, #116	@ 0x74
 800fec4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fec8:	b002      	add	sp, #8
 800feca:	4770      	bx	lr
 800fecc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800fed0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800fed4:	bf14      	ite	ne
 800fed6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800feda:	4623      	moveq	r3, r4
 800fedc:	9304      	str	r3, [sp, #16]
 800fede:	9307      	str	r3, [sp, #28]
 800fee0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fee4:	9002      	str	r0, [sp, #8]
 800fee6:	9006      	str	r0, [sp, #24]
 800fee8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800feec:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800feee:	ab21      	add	r3, sp, #132	@ 0x84
 800fef0:	a902      	add	r1, sp, #8
 800fef2:	4628      	mov	r0, r5
 800fef4:	9301      	str	r3, [sp, #4]
 800fef6:	f000 f983 	bl	8010200 <_svfiprintf_r>
 800fefa:	1c43      	adds	r3, r0, #1
 800fefc:	bfbc      	itt	lt
 800fefe:	238b      	movlt	r3, #139	@ 0x8b
 800ff00:	602b      	strlt	r3, [r5, #0]
 800ff02:	2c00      	cmp	r4, #0
 800ff04:	d0dd      	beq.n	800fec2 <sniprintf+0x16>
 800ff06:	9b02      	ldr	r3, [sp, #8]
 800ff08:	2200      	movs	r2, #0
 800ff0a:	701a      	strb	r2, [r3, #0]
 800ff0c:	e7d9      	b.n	800fec2 <sniprintf+0x16>
 800ff0e:	bf00      	nop
 800ff10:	200001cc 	.word	0x200001cc

0800ff14 <siprintf>:
 800ff14:	b40e      	push	{r1, r2, r3}
 800ff16:	b500      	push	{lr}
 800ff18:	b09c      	sub	sp, #112	@ 0x70
 800ff1a:	ab1d      	add	r3, sp, #116	@ 0x74
 800ff1c:	9002      	str	r0, [sp, #8]
 800ff1e:	9006      	str	r0, [sp, #24]
 800ff20:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ff24:	4809      	ldr	r0, [pc, #36]	@ (800ff4c <siprintf+0x38>)
 800ff26:	9107      	str	r1, [sp, #28]
 800ff28:	9104      	str	r1, [sp, #16]
 800ff2a:	4909      	ldr	r1, [pc, #36]	@ (800ff50 <siprintf+0x3c>)
 800ff2c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ff30:	9105      	str	r1, [sp, #20]
 800ff32:	6800      	ldr	r0, [r0, #0]
 800ff34:	9301      	str	r3, [sp, #4]
 800ff36:	a902      	add	r1, sp, #8
 800ff38:	f000 f962 	bl	8010200 <_svfiprintf_r>
 800ff3c:	9b02      	ldr	r3, [sp, #8]
 800ff3e:	2200      	movs	r2, #0
 800ff40:	701a      	strb	r2, [r3, #0]
 800ff42:	b01c      	add	sp, #112	@ 0x70
 800ff44:	f85d eb04 	ldr.w	lr, [sp], #4
 800ff48:	b003      	add	sp, #12
 800ff4a:	4770      	bx	lr
 800ff4c:	200001cc 	.word	0x200001cc
 800ff50:	ffff0208 	.word	0xffff0208

0800ff54 <memset>:
 800ff54:	4402      	add	r2, r0
 800ff56:	4603      	mov	r3, r0
 800ff58:	4293      	cmp	r3, r2
 800ff5a:	d100      	bne.n	800ff5e <memset+0xa>
 800ff5c:	4770      	bx	lr
 800ff5e:	f803 1b01 	strb.w	r1, [r3], #1
 800ff62:	e7f9      	b.n	800ff58 <memset+0x4>

0800ff64 <_reclaim_reent>:
 800ff64:	4b29      	ldr	r3, [pc, #164]	@ (801000c <_reclaim_reent+0xa8>)
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	4283      	cmp	r3, r0
 800ff6a:	b570      	push	{r4, r5, r6, lr}
 800ff6c:	4604      	mov	r4, r0
 800ff6e:	d04b      	beq.n	8010008 <_reclaim_reent+0xa4>
 800ff70:	69c3      	ldr	r3, [r0, #28]
 800ff72:	b1ab      	cbz	r3, 800ffa0 <_reclaim_reent+0x3c>
 800ff74:	68db      	ldr	r3, [r3, #12]
 800ff76:	b16b      	cbz	r3, 800ff94 <_reclaim_reent+0x30>
 800ff78:	2500      	movs	r5, #0
 800ff7a:	69e3      	ldr	r3, [r4, #28]
 800ff7c:	68db      	ldr	r3, [r3, #12]
 800ff7e:	5959      	ldr	r1, [r3, r5]
 800ff80:	2900      	cmp	r1, #0
 800ff82:	d13b      	bne.n	800fffc <_reclaim_reent+0x98>
 800ff84:	3504      	adds	r5, #4
 800ff86:	2d80      	cmp	r5, #128	@ 0x80
 800ff88:	d1f7      	bne.n	800ff7a <_reclaim_reent+0x16>
 800ff8a:	69e3      	ldr	r3, [r4, #28]
 800ff8c:	4620      	mov	r0, r4
 800ff8e:	68d9      	ldr	r1, [r3, #12]
 800ff90:	f000 f890 	bl	80100b4 <_free_r>
 800ff94:	69e3      	ldr	r3, [r4, #28]
 800ff96:	6819      	ldr	r1, [r3, #0]
 800ff98:	b111      	cbz	r1, 800ffa0 <_reclaim_reent+0x3c>
 800ff9a:	4620      	mov	r0, r4
 800ff9c:	f000 f88a 	bl	80100b4 <_free_r>
 800ffa0:	6961      	ldr	r1, [r4, #20]
 800ffa2:	b111      	cbz	r1, 800ffaa <_reclaim_reent+0x46>
 800ffa4:	4620      	mov	r0, r4
 800ffa6:	f000 f885 	bl	80100b4 <_free_r>
 800ffaa:	69e1      	ldr	r1, [r4, #28]
 800ffac:	b111      	cbz	r1, 800ffb4 <_reclaim_reent+0x50>
 800ffae:	4620      	mov	r0, r4
 800ffb0:	f000 f880 	bl	80100b4 <_free_r>
 800ffb4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ffb6:	b111      	cbz	r1, 800ffbe <_reclaim_reent+0x5a>
 800ffb8:	4620      	mov	r0, r4
 800ffba:	f000 f87b 	bl	80100b4 <_free_r>
 800ffbe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ffc0:	b111      	cbz	r1, 800ffc8 <_reclaim_reent+0x64>
 800ffc2:	4620      	mov	r0, r4
 800ffc4:	f000 f876 	bl	80100b4 <_free_r>
 800ffc8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800ffca:	b111      	cbz	r1, 800ffd2 <_reclaim_reent+0x6e>
 800ffcc:	4620      	mov	r0, r4
 800ffce:	f000 f871 	bl	80100b4 <_free_r>
 800ffd2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ffd4:	b111      	cbz	r1, 800ffdc <_reclaim_reent+0x78>
 800ffd6:	4620      	mov	r0, r4
 800ffd8:	f000 f86c 	bl	80100b4 <_free_r>
 800ffdc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800ffde:	b111      	cbz	r1, 800ffe6 <_reclaim_reent+0x82>
 800ffe0:	4620      	mov	r0, r4
 800ffe2:	f000 f867 	bl	80100b4 <_free_r>
 800ffe6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ffe8:	b111      	cbz	r1, 800fff0 <_reclaim_reent+0x8c>
 800ffea:	4620      	mov	r0, r4
 800ffec:	f000 f862 	bl	80100b4 <_free_r>
 800fff0:	6a23      	ldr	r3, [r4, #32]
 800fff2:	b14b      	cbz	r3, 8010008 <_reclaim_reent+0xa4>
 800fff4:	4620      	mov	r0, r4
 800fff6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fffa:	4718      	bx	r3
 800fffc:	680e      	ldr	r6, [r1, #0]
 800fffe:	4620      	mov	r0, r4
 8010000:	f000 f858 	bl	80100b4 <_free_r>
 8010004:	4631      	mov	r1, r6
 8010006:	e7bb      	b.n	800ff80 <_reclaim_reent+0x1c>
 8010008:	bd70      	pop	{r4, r5, r6, pc}
 801000a:	bf00      	nop
 801000c:	200001cc 	.word	0x200001cc

08010010 <_sbrk_r>:
 8010010:	b538      	push	{r3, r4, r5, lr}
 8010012:	4d06      	ldr	r5, [pc, #24]	@ (801002c <_sbrk_r+0x1c>)
 8010014:	2300      	movs	r3, #0
 8010016:	4604      	mov	r4, r0
 8010018:	4608      	mov	r0, r1
 801001a:	602b      	str	r3, [r5, #0]
 801001c:	f7f2 fe86 	bl	8002d2c <_sbrk>
 8010020:	1c43      	adds	r3, r0, #1
 8010022:	d102      	bne.n	801002a <_sbrk_r+0x1a>
 8010024:	682b      	ldr	r3, [r5, #0]
 8010026:	b103      	cbz	r3, 801002a <_sbrk_r+0x1a>
 8010028:	6023      	str	r3, [r4, #0]
 801002a:	bd38      	pop	{r3, r4, r5, pc}
 801002c:	20017564 	.word	0x20017564

08010030 <__errno>:
 8010030:	4b01      	ldr	r3, [pc, #4]	@ (8010038 <__errno+0x8>)
 8010032:	6818      	ldr	r0, [r3, #0]
 8010034:	4770      	bx	lr
 8010036:	bf00      	nop
 8010038:	200001cc 	.word	0x200001cc

0801003c <__libc_init_array>:
 801003c:	b570      	push	{r4, r5, r6, lr}
 801003e:	4d0d      	ldr	r5, [pc, #52]	@ (8010074 <__libc_init_array+0x38>)
 8010040:	4c0d      	ldr	r4, [pc, #52]	@ (8010078 <__libc_init_array+0x3c>)
 8010042:	1b64      	subs	r4, r4, r5
 8010044:	10a4      	asrs	r4, r4, #2
 8010046:	2600      	movs	r6, #0
 8010048:	42a6      	cmp	r6, r4
 801004a:	d109      	bne.n	8010060 <__libc_init_array+0x24>
 801004c:	4d0b      	ldr	r5, [pc, #44]	@ (801007c <__libc_init_array+0x40>)
 801004e:	4c0c      	ldr	r4, [pc, #48]	@ (8010080 <__libc_init_array+0x44>)
 8010050:	f000 fbb0 	bl	80107b4 <_init>
 8010054:	1b64      	subs	r4, r4, r5
 8010056:	10a4      	asrs	r4, r4, #2
 8010058:	2600      	movs	r6, #0
 801005a:	42a6      	cmp	r6, r4
 801005c:	d105      	bne.n	801006a <__libc_init_array+0x2e>
 801005e:	bd70      	pop	{r4, r5, r6, pc}
 8010060:	f855 3b04 	ldr.w	r3, [r5], #4
 8010064:	4798      	blx	r3
 8010066:	3601      	adds	r6, #1
 8010068:	e7ee      	b.n	8010048 <__libc_init_array+0xc>
 801006a:	f855 3b04 	ldr.w	r3, [r5], #4
 801006e:	4798      	blx	r3
 8010070:	3601      	adds	r6, #1
 8010072:	e7f2      	b.n	801005a <__libc_init_array+0x1e>
 8010074:	080111dc 	.word	0x080111dc
 8010078:	080111dc 	.word	0x080111dc
 801007c:	080111dc 	.word	0x080111dc
 8010080:	080111e0 	.word	0x080111e0

08010084 <__retarget_lock_acquire_recursive>:
 8010084:	4770      	bx	lr

08010086 <__retarget_lock_release_recursive>:
 8010086:	4770      	bx	lr

08010088 <strcpy>:
 8010088:	4603      	mov	r3, r0
 801008a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801008e:	f803 2b01 	strb.w	r2, [r3], #1
 8010092:	2a00      	cmp	r2, #0
 8010094:	d1f9      	bne.n	801008a <strcpy+0x2>
 8010096:	4770      	bx	lr

08010098 <memcpy>:
 8010098:	440a      	add	r2, r1
 801009a:	4291      	cmp	r1, r2
 801009c:	f100 33ff 	add.w	r3, r0, #4294967295
 80100a0:	d100      	bne.n	80100a4 <memcpy+0xc>
 80100a2:	4770      	bx	lr
 80100a4:	b510      	push	{r4, lr}
 80100a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80100aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80100ae:	4291      	cmp	r1, r2
 80100b0:	d1f9      	bne.n	80100a6 <memcpy+0xe>
 80100b2:	bd10      	pop	{r4, pc}

080100b4 <_free_r>:
 80100b4:	b538      	push	{r3, r4, r5, lr}
 80100b6:	4605      	mov	r5, r0
 80100b8:	2900      	cmp	r1, #0
 80100ba:	d041      	beq.n	8010140 <_free_r+0x8c>
 80100bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80100c0:	1f0c      	subs	r4, r1, #4
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	bfb8      	it	lt
 80100c6:	18e4      	addlt	r4, r4, r3
 80100c8:	f7ff fee4 	bl	800fe94 <__malloc_lock>
 80100cc:	4a1d      	ldr	r2, [pc, #116]	@ (8010144 <_free_r+0x90>)
 80100ce:	6813      	ldr	r3, [r2, #0]
 80100d0:	b933      	cbnz	r3, 80100e0 <_free_r+0x2c>
 80100d2:	6063      	str	r3, [r4, #4]
 80100d4:	6014      	str	r4, [r2, #0]
 80100d6:	4628      	mov	r0, r5
 80100d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80100dc:	f7ff bee0 	b.w	800fea0 <__malloc_unlock>
 80100e0:	42a3      	cmp	r3, r4
 80100e2:	d908      	bls.n	80100f6 <_free_r+0x42>
 80100e4:	6820      	ldr	r0, [r4, #0]
 80100e6:	1821      	adds	r1, r4, r0
 80100e8:	428b      	cmp	r3, r1
 80100ea:	bf01      	itttt	eq
 80100ec:	6819      	ldreq	r1, [r3, #0]
 80100ee:	685b      	ldreq	r3, [r3, #4]
 80100f0:	1809      	addeq	r1, r1, r0
 80100f2:	6021      	streq	r1, [r4, #0]
 80100f4:	e7ed      	b.n	80100d2 <_free_r+0x1e>
 80100f6:	461a      	mov	r2, r3
 80100f8:	685b      	ldr	r3, [r3, #4]
 80100fa:	b10b      	cbz	r3, 8010100 <_free_r+0x4c>
 80100fc:	42a3      	cmp	r3, r4
 80100fe:	d9fa      	bls.n	80100f6 <_free_r+0x42>
 8010100:	6811      	ldr	r1, [r2, #0]
 8010102:	1850      	adds	r0, r2, r1
 8010104:	42a0      	cmp	r0, r4
 8010106:	d10b      	bne.n	8010120 <_free_r+0x6c>
 8010108:	6820      	ldr	r0, [r4, #0]
 801010a:	4401      	add	r1, r0
 801010c:	1850      	adds	r0, r2, r1
 801010e:	4283      	cmp	r3, r0
 8010110:	6011      	str	r1, [r2, #0]
 8010112:	d1e0      	bne.n	80100d6 <_free_r+0x22>
 8010114:	6818      	ldr	r0, [r3, #0]
 8010116:	685b      	ldr	r3, [r3, #4]
 8010118:	6053      	str	r3, [r2, #4]
 801011a:	4408      	add	r0, r1
 801011c:	6010      	str	r0, [r2, #0]
 801011e:	e7da      	b.n	80100d6 <_free_r+0x22>
 8010120:	d902      	bls.n	8010128 <_free_r+0x74>
 8010122:	230c      	movs	r3, #12
 8010124:	602b      	str	r3, [r5, #0]
 8010126:	e7d6      	b.n	80100d6 <_free_r+0x22>
 8010128:	6820      	ldr	r0, [r4, #0]
 801012a:	1821      	adds	r1, r4, r0
 801012c:	428b      	cmp	r3, r1
 801012e:	bf04      	itt	eq
 8010130:	6819      	ldreq	r1, [r3, #0]
 8010132:	685b      	ldreq	r3, [r3, #4]
 8010134:	6063      	str	r3, [r4, #4]
 8010136:	bf04      	itt	eq
 8010138:	1809      	addeq	r1, r1, r0
 801013a:	6021      	streq	r1, [r4, #0]
 801013c:	6054      	str	r4, [r2, #4]
 801013e:	e7ca      	b.n	80100d6 <_free_r+0x22>
 8010140:	bd38      	pop	{r3, r4, r5, pc}
 8010142:	bf00      	nop
 8010144:	20017428 	.word	0x20017428

08010148 <__ssputs_r>:
 8010148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801014c:	688e      	ldr	r6, [r1, #8]
 801014e:	461f      	mov	r7, r3
 8010150:	42be      	cmp	r6, r7
 8010152:	680b      	ldr	r3, [r1, #0]
 8010154:	4682      	mov	sl, r0
 8010156:	460c      	mov	r4, r1
 8010158:	4690      	mov	r8, r2
 801015a:	d82d      	bhi.n	80101b8 <__ssputs_r+0x70>
 801015c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010160:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010164:	d026      	beq.n	80101b4 <__ssputs_r+0x6c>
 8010166:	6965      	ldr	r5, [r4, #20]
 8010168:	6909      	ldr	r1, [r1, #16]
 801016a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801016e:	eba3 0901 	sub.w	r9, r3, r1
 8010172:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010176:	1c7b      	adds	r3, r7, #1
 8010178:	444b      	add	r3, r9
 801017a:	106d      	asrs	r5, r5, #1
 801017c:	429d      	cmp	r5, r3
 801017e:	bf38      	it	cc
 8010180:	461d      	movcc	r5, r3
 8010182:	0553      	lsls	r3, r2, #21
 8010184:	d527      	bpl.n	80101d6 <__ssputs_r+0x8e>
 8010186:	4629      	mov	r1, r5
 8010188:	f7ff fe04 	bl	800fd94 <_malloc_r>
 801018c:	4606      	mov	r6, r0
 801018e:	b360      	cbz	r0, 80101ea <__ssputs_r+0xa2>
 8010190:	6921      	ldr	r1, [r4, #16]
 8010192:	464a      	mov	r2, r9
 8010194:	f7ff ff80 	bl	8010098 <memcpy>
 8010198:	89a3      	ldrh	r3, [r4, #12]
 801019a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801019e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80101a2:	81a3      	strh	r3, [r4, #12]
 80101a4:	6126      	str	r6, [r4, #16]
 80101a6:	6165      	str	r5, [r4, #20]
 80101a8:	444e      	add	r6, r9
 80101aa:	eba5 0509 	sub.w	r5, r5, r9
 80101ae:	6026      	str	r6, [r4, #0]
 80101b0:	60a5      	str	r5, [r4, #8]
 80101b2:	463e      	mov	r6, r7
 80101b4:	42be      	cmp	r6, r7
 80101b6:	d900      	bls.n	80101ba <__ssputs_r+0x72>
 80101b8:	463e      	mov	r6, r7
 80101ba:	6820      	ldr	r0, [r4, #0]
 80101bc:	4632      	mov	r2, r6
 80101be:	4641      	mov	r1, r8
 80101c0:	f000 faa8 	bl	8010714 <memmove>
 80101c4:	68a3      	ldr	r3, [r4, #8]
 80101c6:	1b9b      	subs	r3, r3, r6
 80101c8:	60a3      	str	r3, [r4, #8]
 80101ca:	6823      	ldr	r3, [r4, #0]
 80101cc:	4433      	add	r3, r6
 80101ce:	6023      	str	r3, [r4, #0]
 80101d0:	2000      	movs	r0, #0
 80101d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101d6:	462a      	mov	r2, r5
 80101d8:	f000 fab6 	bl	8010748 <_realloc_r>
 80101dc:	4606      	mov	r6, r0
 80101de:	2800      	cmp	r0, #0
 80101e0:	d1e0      	bne.n	80101a4 <__ssputs_r+0x5c>
 80101e2:	6921      	ldr	r1, [r4, #16]
 80101e4:	4650      	mov	r0, sl
 80101e6:	f7ff ff65 	bl	80100b4 <_free_r>
 80101ea:	230c      	movs	r3, #12
 80101ec:	f8ca 3000 	str.w	r3, [sl]
 80101f0:	89a3      	ldrh	r3, [r4, #12]
 80101f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80101f6:	81a3      	strh	r3, [r4, #12]
 80101f8:	f04f 30ff 	mov.w	r0, #4294967295
 80101fc:	e7e9      	b.n	80101d2 <__ssputs_r+0x8a>
	...

08010200 <_svfiprintf_r>:
 8010200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010204:	4698      	mov	r8, r3
 8010206:	898b      	ldrh	r3, [r1, #12]
 8010208:	061b      	lsls	r3, r3, #24
 801020a:	b09d      	sub	sp, #116	@ 0x74
 801020c:	4607      	mov	r7, r0
 801020e:	460d      	mov	r5, r1
 8010210:	4614      	mov	r4, r2
 8010212:	d510      	bpl.n	8010236 <_svfiprintf_r+0x36>
 8010214:	690b      	ldr	r3, [r1, #16]
 8010216:	b973      	cbnz	r3, 8010236 <_svfiprintf_r+0x36>
 8010218:	2140      	movs	r1, #64	@ 0x40
 801021a:	f7ff fdbb 	bl	800fd94 <_malloc_r>
 801021e:	6028      	str	r0, [r5, #0]
 8010220:	6128      	str	r0, [r5, #16]
 8010222:	b930      	cbnz	r0, 8010232 <_svfiprintf_r+0x32>
 8010224:	230c      	movs	r3, #12
 8010226:	603b      	str	r3, [r7, #0]
 8010228:	f04f 30ff 	mov.w	r0, #4294967295
 801022c:	b01d      	add	sp, #116	@ 0x74
 801022e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010232:	2340      	movs	r3, #64	@ 0x40
 8010234:	616b      	str	r3, [r5, #20]
 8010236:	2300      	movs	r3, #0
 8010238:	9309      	str	r3, [sp, #36]	@ 0x24
 801023a:	2320      	movs	r3, #32
 801023c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010240:	f8cd 800c 	str.w	r8, [sp, #12]
 8010244:	2330      	movs	r3, #48	@ 0x30
 8010246:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80103e4 <_svfiprintf_r+0x1e4>
 801024a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801024e:	f04f 0901 	mov.w	r9, #1
 8010252:	4623      	mov	r3, r4
 8010254:	469a      	mov	sl, r3
 8010256:	f813 2b01 	ldrb.w	r2, [r3], #1
 801025a:	b10a      	cbz	r2, 8010260 <_svfiprintf_r+0x60>
 801025c:	2a25      	cmp	r2, #37	@ 0x25
 801025e:	d1f9      	bne.n	8010254 <_svfiprintf_r+0x54>
 8010260:	ebba 0b04 	subs.w	fp, sl, r4
 8010264:	d00b      	beq.n	801027e <_svfiprintf_r+0x7e>
 8010266:	465b      	mov	r3, fp
 8010268:	4622      	mov	r2, r4
 801026a:	4629      	mov	r1, r5
 801026c:	4638      	mov	r0, r7
 801026e:	f7ff ff6b 	bl	8010148 <__ssputs_r>
 8010272:	3001      	adds	r0, #1
 8010274:	f000 80a7 	beq.w	80103c6 <_svfiprintf_r+0x1c6>
 8010278:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801027a:	445a      	add	r2, fp
 801027c:	9209      	str	r2, [sp, #36]	@ 0x24
 801027e:	f89a 3000 	ldrb.w	r3, [sl]
 8010282:	2b00      	cmp	r3, #0
 8010284:	f000 809f 	beq.w	80103c6 <_svfiprintf_r+0x1c6>
 8010288:	2300      	movs	r3, #0
 801028a:	f04f 32ff 	mov.w	r2, #4294967295
 801028e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010292:	f10a 0a01 	add.w	sl, sl, #1
 8010296:	9304      	str	r3, [sp, #16]
 8010298:	9307      	str	r3, [sp, #28]
 801029a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801029e:	931a      	str	r3, [sp, #104]	@ 0x68
 80102a0:	4654      	mov	r4, sl
 80102a2:	2205      	movs	r2, #5
 80102a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80102a8:	484e      	ldr	r0, [pc, #312]	@ (80103e4 <_svfiprintf_r+0x1e4>)
 80102aa:	f7ef ffa9 	bl	8000200 <memchr>
 80102ae:	9a04      	ldr	r2, [sp, #16]
 80102b0:	b9d8      	cbnz	r0, 80102ea <_svfiprintf_r+0xea>
 80102b2:	06d0      	lsls	r0, r2, #27
 80102b4:	bf44      	itt	mi
 80102b6:	2320      	movmi	r3, #32
 80102b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80102bc:	0711      	lsls	r1, r2, #28
 80102be:	bf44      	itt	mi
 80102c0:	232b      	movmi	r3, #43	@ 0x2b
 80102c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80102c6:	f89a 3000 	ldrb.w	r3, [sl]
 80102ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80102cc:	d015      	beq.n	80102fa <_svfiprintf_r+0xfa>
 80102ce:	9a07      	ldr	r2, [sp, #28]
 80102d0:	4654      	mov	r4, sl
 80102d2:	2000      	movs	r0, #0
 80102d4:	f04f 0c0a 	mov.w	ip, #10
 80102d8:	4621      	mov	r1, r4
 80102da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80102de:	3b30      	subs	r3, #48	@ 0x30
 80102e0:	2b09      	cmp	r3, #9
 80102e2:	d94b      	bls.n	801037c <_svfiprintf_r+0x17c>
 80102e4:	b1b0      	cbz	r0, 8010314 <_svfiprintf_r+0x114>
 80102e6:	9207      	str	r2, [sp, #28]
 80102e8:	e014      	b.n	8010314 <_svfiprintf_r+0x114>
 80102ea:	eba0 0308 	sub.w	r3, r0, r8
 80102ee:	fa09 f303 	lsl.w	r3, r9, r3
 80102f2:	4313      	orrs	r3, r2
 80102f4:	9304      	str	r3, [sp, #16]
 80102f6:	46a2      	mov	sl, r4
 80102f8:	e7d2      	b.n	80102a0 <_svfiprintf_r+0xa0>
 80102fa:	9b03      	ldr	r3, [sp, #12]
 80102fc:	1d19      	adds	r1, r3, #4
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	9103      	str	r1, [sp, #12]
 8010302:	2b00      	cmp	r3, #0
 8010304:	bfbb      	ittet	lt
 8010306:	425b      	neglt	r3, r3
 8010308:	f042 0202 	orrlt.w	r2, r2, #2
 801030c:	9307      	strge	r3, [sp, #28]
 801030e:	9307      	strlt	r3, [sp, #28]
 8010310:	bfb8      	it	lt
 8010312:	9204      	strlt	r2, [sp, #16]
 8010314:	7823      	ldrb	r3, [r4, #0]
 8010316:	2b2e      	cmp	r3, #46	@ 0x2e
 8010318:	d10a      	bne.n	8010330 <_svfiprintf_r+0x130>
 801031a:	7863      	ldrb	r3, [r4, #1]
 801031c:	2b2a      	cmp	r3, #42	@ 0x2a
 801031e:	d132      	bne.n	8010386 <_svfiprintf_r+0x186>
 8010320:	9b03      	ldr	r3, [sp, #12]
 8010322:	1d1a      	adds	r2, r3, #4
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	9203      	str	r2, [sp, #12]
 8010328:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801032c:	3402      	adds	r4, #2
 801032e:	9305      	str	r3, [sp, #20]
 8010330:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80103f4 <_svfiprintf_r+0x1f4>
 8010334:	7821      	ldrb	r1, [r4, #0]
 8010336:	2203      	movs	r2, #3
 8010338:	4650      	mov	r0, sl
 801033a:	f7ef ff61 	bl	8000200 <memchr>
 801033e:	b138      	cbz	r0, 8010350 <_svfiprintf_r+0x150>
 8010340:	9b04      	ldr	r3, [sp, #16]
 8010342:	eba0 000a 	sub.w	r0, r0, sl
 8010346:	2240      	movs	r2, #64	@ 0x40
 8010348:	4082      	lsls	r2, r0
 801034a:	4313      	orrs	r3, r2
 801034c:	3401      	adds	r4, #1
 801034e:	9304      	str	r3, [sp, #16]
 8010350:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010354:	4824      	ldr	r0, [pc, #144]	@ (80103e8 <_svfiprintf_r+0x1e8>)
 8010356:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801035a:	2206      	movs	r2, #6
 801035c:	f7ef ff50 	bl	8000200 <memchr>
 8010360:	2800      	cmp	r0, #0
 8010362:	d036      	beq.n	80103d2 <_svfiprintf_r+0x1d2>
 8010364:	4b21      	ldr	r3, [pc, #132]	@ (80103ec <_svfiprintf_r+0x1ec>)
 8010366:	bb1b      	cbnz	r3, 80103b0 <_svfiprintf_r+0x1b0>
 8010368:	9b03      	ldr	r3, [sp, #12]
 801036a:	3307      	adds	r3, #7
 801036c:	f023 0307 	bic.w	r3, r3, #7
 8010370:	3308      	adds	r3, #8
 8010372:	9303      	str	r3, [sp, #12]
 8010374:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010376:	4433      	add	r3, r6
 8010378:	9309      	str	r3, [sp, #36]	@ 0x24
 801037a:	e76a      	b.n	8010252 <_svfiprintf_r+0x52>
 801037c:	fb0c 3202 	mla	r2, ip, r2, r3
 8010380:	460c      	mov	r4, r1
 8010382:	2001      	movs	r0, #1
 8010384:	e7a8      	b.n	80102d8 <_svfiprintf_r+0xd8>
 8010386:	2300      	movs	r3, #0
 8010388:	3401      	adds	r4, #1
 801038a:	9305      	str	r3, [sp, #20]
 801038c:	4619      	mov	r1, r3
 801038e:	f04f 0c0a 	mov.w	ip, #10
 8010392:	4620      	mov	r0, r4
 8010394:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010398:	3a30      	subs	r2, #48	@ 0x30
 801039a:	2a09      	cmp	r2, #9
 801039c:	d903      	bls.n	80103a6 <_svfiprintf_r+0x1a6>
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d0c6      	beq.n	8010330 <_svfiprintf_r+0x130>
 80103a2:	9105      	str	r1, [sp, #20]
 80103a4:	e7c4      	b.n	8010330 <_svfiprintf_r+0x130>
 80103a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80103aa:	4604      	mov	r4, r0
 80103ac:	2301      	movs	r3, #1
 80103ae:	e7f0      	b.n	8010392 <_svfiprintf_r+0x192>
 80103b0:	ab03      	add	r3, sp, #12
 80103b2:	9300      	str	r3, [sp, #0]
 80103b4:	462a      	mov	r2, r5
 80103b6:	4b0e      	ldr	r3, [pc, #56]	@ (80103f0 <_svfiprintf_r+0x1f0>)
 80103b8:	a904      	add	r1, sp, #16
 80103ba:	4638      	mov	r0, r7
 80103bc:	f3af 8000 	nop.w
 80103c0:	1c42      	adds	r2, r0, #1
 80103c2:	4606      	mov	r6, r0
 80103c4:	d1d6      	bne.n	8010374 <_svfiprintf_r+0x174>
 80103c6:	89ab      	ldrh	r3, [r5, #12]
 80103c8:	065b      	lsls	r3, r3, #25
 80103ca:	f53f af2d 	bmi.w	8010228 <_svfiprintf_r+0x28>
 80103ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80103d0:	e72c      	b.n	801022c <_svfiprintf_r+0x2c>
 80103d2:	ab03      	add	r3, sp, #12
 80103d4:	9300      	str	r3, [sp, #0]
 80103d6:	462a      	mov	r2, r5
 80103d8:	4b05      	ldr	r3, [pc, #20]	@ (80103f0 <_svfiprintf_r+0x1f0>)
 80103da:	a904      	add	r1, sp, #16
 80103dc:	4638      	mov	r0, r7
 80103de:	f000 f879 	bl	80104d4 <_printf_i>
 80103e2:	e7ed      	b.n	80103c0 <_svfiprintf_r+0x1c0>
 80103e4:	080111a0 	.word	0x080111a0
 80103e8:	080111aa 	.word	0x080111aa
 80103ec:	00000000 	.word	0x00000000
 80103f0:	08010149 	.word	0x08010149
 80103f4:	080111a6 	.word	0x080111a6

080103f8 <_printf_common>:
 80103f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80103fc:	4616      	mov	r6, r2
 80103fe:	4698      	mov	r8, r3
 8010400:	688a      	ldr	r2, [r1, #8]
 8010402:	690b      	ldr	r3, [r1, #16]
 8010404:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010408:	4293      	cmp	r3, r2
 801040a:	bfb8      	it	lt
 801040c:	4613      	movlt	r3, r2
 801040e:	6033      	str	r3, [r6, #0]
 8010410:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010414:	4607      	mov	r7, r0
 8010416:	460c      	mov	r4, r1
 8010418:	b10a      	cbz	r2, 801041e <_printf_common+0x26>
 801041a:	3301      	adds	r3, #1
 801041c:	6033      	str	r3, [r6, #0]
 801041e:	6823      	ldr	r3, [r4, #0]
 8010420:	0699      	lsls	r1, r3, #26
 8010422:	bf42      	ittt	mi
 8010424:	6833      	ldrmi	r3, [r6, #0]
 8010426:	3302      	addmi	r3, #2
 8010428:	6033      	strmi	r3, [r6, #0]
 801042a:	6825      	ldr	r5, [r4, #0]
 801042c:	f015 0506 	ands.w	r5, r5, #6
 8010430:	d106      	bne.n	8010440 <_printf_common+0x48>
 8010432:	f104 0a19 	add.w	sl, r4, #25
 8010436:	68e3      	ldr	r3, [r4, #12]
 8010438:	6832      	ldr	r2, [r6, #0]
 801043a:	1a9b      	subs	r3, r3, r2
 801043c:	42ab      	cmp	r3, r5
 801043e:	dc26      	bgt.n	801048e <_printf_common+0x96>
 8010440:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010444:	6822      	ldr	r2, [r4, #0]
 8010446:	3b00      	subs	r3, #0
 8010448:	bf18      	it	ne
 801044a:	2301      	movne	r3, #1
 801044c:	0692      	lsls	r2, r2, #26
 801044e:	d42b      	bmi.n	80104a8 <_printf_common+0xb0>
 8010450:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010454:	4641      	mov	r1, r8
 8010456:	4638      	mov	r0, r7
 8010458:	47c8      	blx	r9
 801045a:	3001      	adds	r0, #1
 801045c:	d01e      	beq.n	801049c <_printf_common+0xa4>
 801045e:	6823      	ldr	r3, [r4, #0]
 8010460:	6922      	ldr	r2, [r4, #16]
 8010462:	f003 0306 	and.w	r3, r3, #6
 8010466:	2b04      	cmp	r3, #4
 8010468:	bf02      	ittt	eq
 801046a:	68e5      	ldreq	r5, [r4, #12]
 801046c:	6833      	ldreq	r3, [r6, #0]
 801046e:	1aed      	subeq	r5, r5, r3
 8010470:	68a3      	ldr	r3, [r4, #8]
 8010472:	bf0c      	ite	eq
 8010474:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010478:	2500      	movne	r5, #0
 801047a:	4293      	cmp	r3, r2
 801047c:	bfc4      	itt	gt
 801047e:	1a9b      	subgt	r3, r3, r2
 8010480:	18ed      	addgt	r5, r5, r3
 8010482:	2600      	movs	r6, #0
 8010484:	341a      	adds	r4, #26
 8010486:	42b5      	cmp	r5, r6
 8010488:	d11a      	bne.n	80104c0 <_printf_common+0xc8>
 801048a:	2000      	movs	r0, #0
 801048c:	e008      	b.n	80104a0 <_printf_common+0xa8>
 801048e:	2301      	movs	r3, #1
 8010490:	4652      	mov	r2, sl
 8010492:	4641      	mov	r1, r8
 8010494:	4638      	mov	r0, r7
 8010496:	47c8      	blx	r9
 8010498:	3001      	adds	r0, #1
 801049a:	d103      	bne.n	80104a4 <_printf_common+0xac>
 801049c:	f04f 30ff 	mov.w	r0, #4294967295
 80104a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104a4:	3501      	adds	r5, #1
 80104a6:	e7c6      	b.n	8010436 <_printf_common+0x3e>
 80104a8:	18e1      	adds	r1, r4, r3
 80104aa:	1c5a      	adds	r2, r3, #1
 80104ac:	2030      	movs	r0, #48	@ 0x30
 80104ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80104b2:	4422      	add	r2, r4
 80104b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80104b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80104bc:	3302      	adds	r3, #2
 80104be:	e7c7      	b.n	8010450 <_printf_common+0x58>
 80104c0:	2301      	movs	r3, #1
 80104c2:	4622      	mov	r2, r4
 80104c4:	4641      	mov	r1, r8
 80104c6:	4638      	mov	r0, r7
 80104c8:	47c8      	blx	r9
 80104ca:	3001      	adds	r0, #1
 80104cc:	d0e6      	beq.n	801049c <_printf_common+0xa4>
 80104ce:	3601      	adds	r6, #1
 80104d0:	e7d9      	b.n	8010486 <_printf_common+0x8e>
	...

080104d4 <_printf_i>:
 80104d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80104d8:	7e0f      	ldrb	r7, [r1, #24]
 80104da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80104dc:	2f78      	cmp	r7, #120	@ 0x78
 80104de:	4691      	mov	r9, r2
 80104e0:	4680      	mov	r8, r0
 80104e2:	460c      	mov	r4, r1
 80104e4:	469a      	mov	sl, r3
 80104e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80104ea:	d807      	bhi.n	80104fc <_printf_i+0x28>
 80104ec:	2f62      	cmp	r7, #98	@ 0x62
 80104ee:	d80a      	bhi.n	8010506 <_printf_i+0x32>
 80104f0:	2f00      	cmp	r7, #0
 80104f2:	f000 80d2 	beq.w	801069a <_printf_i+0x1c6>
 80104f6:	2f58      	cmp	r7, #88	@ 0x58
 80104f8:	f000 80b9 	beq.w	801066e <_printf_i+0x19a>
 80104fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010500:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010504:	e03a      	b.n	801057c <_printf_i+0xa8>
 8010506:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801050a:	2b15      	cmp	r3, #21
 801050c:	d8f6      	bhi.n	80104fc <_printf_i+0x28>
 801050e:	a101      	add	r1, pc, #4	@ (adr r1, 8010514 <_printf_i+0x40>)
 8010510:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010514:	0801056d 	.word	0x0801056d
 8010518:	08010581 	.word	0x08010581
 801051c:	080104fd 	.word	0x080104fd
 8010520:	080104fd 	.word	0x080104fd
 8010524:	080104fd 	.word	0x080104fd
 8010528:	080104fd 	.word	0x080104fd
 801052c:	08010581 	.word	0x08010581
 8010530:	080104fd 	.word	0x080104fd
 8010534:	080104fd 	.word	0x080104fd
 8010538:	080104fd 	.word	0x080104fd
 801053c:	080104fd 	.word	0x080104fd
 8010540:	08010681 	.word	0x08010681
 8010544:	080105ab 	.word	0x080105ab
 8010548:	0801063b 	.word	0x0801063b
 801054c:	080104fd 	.word	0x080104fd
 8010550:	080104fd 	.word	0x080104fd
 8010554:	080106a3 	.word	0x080106a3
 8010558:	080104fd 	.word	0x080104fd
 801055c:	080105ab 	.word	0x080105ab
 8010560:	080104fd 	.word	0x080104fd
 8010564:	080104fd 	.word	0x080104fd
 8010568:	08010643 	.word	0x08010643
 801056c:	6833      	ldr	r3, [r6, #0]
 801056e:	1d1a      	adds	r2, r3, #4
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	6032      	str	r2, [r6, #0]
 8010574:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010578:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801057c:	2301      	movs	r3, #1
 801057e:	e09d      	b.n	80106bc <_printf_i+0x1e8>
 8010580:	6833      	ldr	r3, [r6, #0]
 8010582:	6820      	ldr	r0, [r4, #0]
 8010584:	1d19      	adds	r1, r3, #4
 8010586:	6031      	str	r1, [r6, #0]
 8010588:	0606      	lsls	r6, r0, #24
 801058a:	d501      	bpl.n	8010590 <_printf_i+0xbc>
 801058c:	681d      	ldr	r5, [r3, #0]
 801058e:	e003      	b.n	8010598 <_printf_i+0xc4>
 8010590:	0645      	lsls	r5, r0, #25
 8010592:	d5fb      	bpl.n	801058c <_printf_i+0xb8>
 8010594:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010598:	2d00      	cmp	r5, #0
 801059a:	da03      	bge.n	80105a4 <_printf_i+0xd0>
 801059c:	232d      	movs	r3, #45	@ 0x2d
 801059e:	426d      	negs	r5, r5
 80105a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80105a4:	4859      	ldr	r0, [pc, #356]	@ (801070c <_printf_i+0x238>)
 80105a6:	230a      	movs	r3, #10
 80105a8:	e011      	b.n	80105ce <_printf_i+0xfa>
 80105aa:	6821      	ldr	r1, [r4, #0]
 80105ac:	6833      	ldr	r3, [r6, #0]
 80105ae:	0608      	lsls	r0, r1, #24
 80105b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80105b4:	d402      	bmi.n	80105bc <_printf_i+0xe8>
 80105b6:	0649      	lsls	r1, r1, #25
 80105b8:	bf48      	it	mi
 80105ba:	b2ad      	uxthmi	r5, r5
 80105bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80105be:	4853      	ldr	r0, [pc, #332]	@ (801070c <_printf_i+0x238>)
 80105c0:	6033      	str	r3, [r6, #0]
 80105c2:	bf14      	ite	ne
 80105c4:	230a      	movne	r3, #10
 80105c6:	2308      	moveq	r3, #8
 80105c8:	2100      	movs	r1, #0
 80105ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80105ce:	6866      	ldr	r6, [r4, #4]
 80105d0:	60a6      	str	r6, [r4, #8]
 80105d2:	2e00      	cmp	r6, #0
 80105d4:	bfa2      	ittt	ge
 80105d6:	6821      	ldrge	r1, [r4, #0]
 80105d8:	f021 0104 	bicge.w	r1, r1, #4
 80105dc:	6021      	strge	r1, [r4, #0]
 80105de:	b90d      	cbnz	r5, 80105e4 <_printf_i+0x110>
 80105e0:	2e00      	cmp	r6, #0
 80105e2:	d04b      	beq.n	801067c <_printf_i+0x1a8>
 80105e4:	4616      	mov	r6, r2
 80105e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80105ea:	fb03 5711 	mls	r7, r3, r1, r5
 80105ee:	5dc7      	ldrb	r7, [r0, r7]
 80105f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80105f4:	462f      	mov	r7, r5
 80105f6:	42bb      	cmp	r3, r7
 80105f8:	460d      	mov	r5, r1
 80105fa:	d9f4      	bls.n	80105e6 <_printf_i+0x112>
 80105fc:	2b08      	cmp	r3, #8
 80105fe:	d10b      	bne.n	8010618 <_printf_i+0x144>
 8010600:	6823      	ldr	r3, [r4, #0]
 8010602:	07df      	lsls	r7, r3, #31
 8010604:	d508      	bpl.n	8010618 <_printf_i+0x144>
 8010606:	6923      	ldr	r3, [r4, #16]
 8010608:	6861      	ldr	r1, [r4, #4]
 801060a:	4299      	cmp	r1, r3
 801060c:	bfde      	ittt	le
 801060e:	2330      	movle	r3, #48	@ 0x30
 8010610:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010614:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010618:	1b92      	subs	r2, r2, r6
 801061a:	6122      	str	r2, [r4, #16]
 801061c:	f8cd a000 	str.w	sl, [sp]
 8010620:	464b      	mov	r3, r9
 8010622:	aa03      	add	r2, sp, #12
 8010624:	4621      	mov	r1, r4
 8010626:	4640      	mov	r0, r8
 8010628:	f7ff fee6 	bl	80103f8 <_printf_common>
 801062c:	3001      	adds	r0, #1
 801062e:	d14a      	bne.n	80106c6 <_printf_i+0x1f2>
 8010630:	f04f 30ff 	mov.w	r0, #4294967295
 8010634:	b004      	add	sp, #16
 8010636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801063a:	6823      	ldr	r3, [r4, #0]
 801063c:	f043 0320 	orr.w	r3, r3, #32
 8010640:	6023      	str	r3, [r4, #0]
 8010642:	4833      	ldr	r0, [pc, #204]	@ (8010710 <_printf_i+0x23c>)
 8010644:	2778      	movs	r7, #120	@ 0x78
 8010646:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801064a:	6823      	ldr	r3, [r4, #0]
 801064c:	6831      	ldr	r1, [r6, #0]
 801064e:	061f      	lsls	r7, r3, #24
 8010650:	f851 5b04 	ldr.w	r5, [r1], #4
 8010654:	d402      	bmi.n	801065c <_printf_i+0x188>
 8010656:	065f      	lsls	r7, r3, #25
 8010658:	bf48      	it	mi
 801065a:	b2ad      	uxthmi	r5, r5
 801065c:	6031      	str	r1, [r6, #0]
 801065e:	07d9      	lsls	r1, r3, #31
 8010660:	bf44      	itt	mi
 8010662:	f043 0320 	orrmi.w	r3, r3, #32
 8010666:	6023      	strmi	r3, [r4, #0]
 8010668:	b11d      	cbz	r5, 8010672 <_printf_i+0x19e>
 801066a:	2310      	movs	r3, #16
 801066c:	e7ac      	b.n	80105c8 <_printf_i+0xf4>
 801066e:	4827      	ldr	r0, [pc, #156]	@ (801070c <_printf_i+0x238>)
 8010670:	e7e9      	b.n	8010646 <_printf_i+0x172>
 8010672:	6823      	ldr	r3, [r4, #0]
 8010674:	f023 0320 	bic.w	r3, r3, #32
 8010678:	6023      	str	r3, [r4, #0]
 801067a:	e7f6      	b.n	801066a <_printf_i+0x196>
 801067c:	4616      	mov	r6, r2
 801067e:	e7bd      	b.n	80105fc <_printf_i+0x128>
 8010680:	6833      	ldr	r3, [r6, #0]
 8010682:	6825      	ldr	r5, [r4, #0]
 8010684:	6961      	ldr	r1, [r4, #20]
 8010686:	1d18      	adds	r0, r3, #4
 8010688:	6030      	str	r0, [r6, #0]
 801068a:	062e      	lsls	r6, r5, #24
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	d501      	bpl.n	8010694 <_printf_i+0x1c0>
 8010690:	6019      	str	r1, [r3, #0]
 8010692:	e002      	b.n	801069a <_printf_i+0x1c6>
 8010694:	0668      	lsls	r0, r5, #25
 8010696:	d5fb      	bpl.n	8010690 <_printf_i+0x1bc>
 8010698:	8019      	strh	r1, [r3, #0]
 801069a:	2300      	movs	r3, #0
 801069c:	6123      	str	r3, [r4, #16]
 801069e:	4616      	mov	r6, r2
 80106a0:	e7bc      	b.n	801061c <_printf_i+0x148>
 80106a2:	6833      	ldr	r3, [r6, #0]
 80106a4:	1d1a      	adds	r2, r3, #4
 80106a6:	6032      	str	r2, [r6, #0]
 80106a8:	681e      	ldr	r6, [r3, #0]
 80106aa:	6862      	ldr	r2, [r4, #4]
 80106ac:	2100      	movs	r1, #0
 80106ae:	4630      	mov	r0, r6
 80106b0:	f7ef fda6 	bl	8000200 <memchr>
 80106b4:	b108      	cbz	r0, 80106ba <_printf_i+0x1e6>
 80106b6:	1b80      	subs	r0, r0, r6
 80106b8:	6060      	str	r0, [r4, #4]
 80106ba:	6863      	ldr	r3, [r4, #4]
 80106bc:	6123      	str	r3, [r4, #16]
 80106be:	2300      	movs	r3, #0
 80106c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80106c4:	e7aa      	b.n	801061c <_printf_i+0x148>
 80106c6:	6923      	ldr	r3, [r4, #16]
 80106c8:	4632      	mov	r2, r6
 80106ca:	4649      	mov	r1, r9
 80106cc:	4640      	mov	r0, r8
 80106ce:	47d0      	blx	sl
 80106d0:	3001      	adds	r0, #1
 80106d2:	d0ad      	beq.n	8010630 <_printf_i+0x15c>
 80106d4:	6823      	ldr	r3, [r4, #0]
 80106d6:	079b      	lsls	r3, r3, #30
 80106d8:	d413      	bmi.n	8010702 <_printf_i+0x22e>
 80106da:	68e0      	ldr	r0, [r4, #12]
 80106dc:	9b03      	ldr	r3, [sp, #12]
 80106de:	4298      	cmp	r0, r3
 80106e0:	bfb8      	it	lt
 80106e2:	4618      	movlt	r0, r3
 80106e4:	e7a6      	b.n	8010634 <_printf_i+0x160>
 80106e6:	2301      	movs	r3, #1
 80106e8:	4632      	mov	r2, r6
 80106ea:	4649      	mov	r1, r9
 80106ec:	4640      	mov	r0, r8
 80106ee:	47d0      	blx	sl
 80106f0:	3001      	adds	r0, #1
 80106f2:	d09d      	beq.n	8010630 <_printf_i+0x15c>
 80106f4:	3501      	adds	r5, #1
 80106f6:	68e3      	ldr	r3, [r4, #12]
 80106f8:	9903      	ldr	r1, [sp, #12]
 80106fa:	1a5b      	subs	r3, r3, r1
 80106fc:	42ab      	cmp	r3, r5
 80106fe:	dcf2      	bgt.n	80106e6 <_printf_i+0x212>
 8010700:	e7eb      	b.n	80106da <_printf_i+0x206>
 8010702:	2500      	movs	r5, #0
 8010704:	f104 0619 	add.w	r6, r4, #25
 8010708:	e7f5      	b.n	80106f6 <_printf_i+0x222>
 801070a:	bf00      	nop
 801070c:	080111b1 	.word	0x080111b1
 8010710:	080111c2 	.word	0x080111c2

08010714 <memmove>:
 8010714:	4288      	cmp	r0, r1
 8010716:	b510      	push	{r4, lr}
 8010718:	eb01 0402 	add.w	r4, r1, r2
 801071c:	d902      	bls.n	8010724 <memmove+0x10>
 801071e:	4284      	cmp	r4, r0
 8010720:	4623      	mov	r3, r4
 8010722:	d807      	bhi.n	8010734 <memmove+0x20>
 8010724:	1e43      	subs	r3, r0, #1
 8010726:	42a1      	cmp	r1, r4
 8010728:	d008      	beq.n	801073c <memmove+0x28>
 801072a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801072e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010732:	e7f8      	b.n	8010726 <memmove+0x12>
 8010734:	4402      	add	r2, r0
 8010736:	4601      	mov	r1, r0
 8010738:	428a      	cmp	r2, r1
 801073a:	d100      	bne.n	801073e <memmove+0x2a>
 801073c:	bd10      	pop	{r4, pc}
 801073e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010742:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010746:	e7f7      	b.n	8010738 <memmove+0x24>

08010748 <_realloc_r>:
 8010748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801074c:	4680      	mov	r8, r0
 801074e:	4615      	mov	r5, r2
 8010750:	460c      	mov	r4, r1
 8010752:	b921      	cbnz	r1, 801075e <_realloc_r+0x16>
 8010754:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010758:	4611      	mov	r1, r2
 801075a:	f7ff bb1b 	b.w	800fd94 <_malloc_r>
 801075e:	b92a      	cbnz	r2, 801076c <_realloc_r+0x24>
 8010760:	f7ff fca8 	bl	80100b4 <_free_r>
 8010764:	2400      	movs	r4, #0
 8010766:	4620      	mov	r0, r4
 8010768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801076c:	f000 f81a 	bl	80107a4 <_malloc_usable_size_r>
 8010770:	4285      	cmp	r5, r0
 8010772:	4606      	mov	r6, r0
 8010774:	d802      	bhi.n	801077c <_realloc_r+0x34>
 8010776:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801077a:	d8f4      	bhi.n	8010766 <_realloc_r+0x1e>
 801077c:	4629      	mov	r1, r5
 801077e:	4640      	mov	r0, r8
 8010780:	f7ff fb08 	bl	800fd94 <_malloc_r>
 8010784:	4607      	mov	r7, r0
 8010786:	2800      	cmp	r0, #0
 8010788:	d0ec      	beq.n	8010764 <_realloc_r+0x1c>
 801078a:	42b5      	cmp	r5, r6
 801078c:	462a      	mov	r2, r5
 801078e:	4621      	mov	r1, r4
 8010790:	bf28      	it	cs
 8010792:	4632      	movcs	r2, r6
 8010794:	f7ff fc80 	bl	8010098 <memcpy>
 8010798:	4621      	mov	r1, r4
 801079a:	4640      	mov	r0, r8
 801079c:	f7ff fc8a 	bl	80100b4 <_free_r>
 80107a0:	463c      	mov	r4, r7
 80107a2:	e7e0      	b.n	8010766 <_realloc_r+0x1e>

080107a4 <_malloc_usable_size_r>:
 80107a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80107a8:	1f18      	subs	r0, r3, #4
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	bfbc      	itt	lt
 80107ae:	580b      	ldrlt	r3, [r1, r0]
 80107b0:	18c0      	addlt	r0, r0, r3
 80107b2:	4770      	bx	lr

080107b4 <_init>:
 80107b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107b6:	bf00      	nop
 80107b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80107ba:	bc08      	pop	{r3}
 80107bc:	469e      	mov	lr, r3
 80107be:	4770      	bx	lr

080107c0 <_fini>:
 80107c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107c2:	bf00      	nop
 80107c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80107c6:	bc08      	pop	{r3}
 80107c8:	469e      	mov	lr, r3
 80107ca:	4770      	bx	lr
