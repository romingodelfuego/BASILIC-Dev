
BASELIQ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fadc  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b38  0800fc90  0800fc90  00010c90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080107c8  080107c8  00012394  2**0
                  CONTENTS
  4 .ARM          00000008  080107c8  080107c8  000117c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080107d0  080107d0  00012394  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080107d0  080107d0  000117d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080107d4  080107d4  000117d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000394  20000000  080107d8  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012c68  20000394  08010b6c  00012394  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012ffc  08010b6c  00012ffc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00012394  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002cb2f  00000000  00000000  000123c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006bd9  00000000  00000000  0003eef3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002148  00000000  00000000  00045ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001977  00000000  00000000  00047c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00034ac7  00000000  00000000  0004958f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000311e6  00000000  00000000  0007e056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00115250  00000000  00000000  000af23c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001c448c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000099d0  00000000  00000000  001c44d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001cdea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000394 	.word	0x20000394
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800fc74 	.word	0x0800fc74

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000398 	.word	0x20000398
 80001ec:	0800fc74 	.word	0x0800fc74

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b96a 	b.w	8000eb4 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	460c      	mov	r4, r1
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d14e      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c04:	4694      	mov	ip, r2
 8000c06:	458c      	cmp	ip, r1
 8000c08:	4686      	mov	lr, r0
 8000c0a:	fab2 f282 	clz	r2, r2
 8000c0e:	d962      	bls.n	8000cd6 <__udivmoddi4+0xde>
 8000c10:	b14a      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c12:	f1c2 0320 	rsb	r3, r2, #32
 8000c16:	4091      	lsls	r1, r2
 8000c18:	fa20 f303 	lsr.w	r3, r0, r3
 8000c1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c20:	4319      	orrs	r1, r3
 8000c22:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c2a:	fa1f f68c 	uxth.w	r6, ip
 8000c2e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c36:	fb07 1114 	mls	r1, r7, r4, r1
 8000c3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3e:	fb04 f106 	mul.w	r1, r4, r6
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c4e:	f080 8112 	bcs.w	8000e76 <__udivmoddi4+0x27e>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 810f 	bls.w	8000e76 <__udivmoddi4+0x27e>
 8000c58:	3c02      	subs	r4, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a59      	subs	r1, r3, r1
 8000c5e:	fa1f f38e 	uxth.w	r3, lr
 8000c62:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c66:	fb07 1110 	mls	r1, r7, r0, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb00 f606 	mul.w	r6, r0, r6
 8000c72:	429e      	cmp	r6, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x94>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c7e:	f080 80fc 	bcs.w	8000e7a <__udivmoddi4+0x282>
 8000c82:	429e      	cmp	r6, r3
 8000c84:	f240 80f9 	bls.w	8000e7a <__udivmoddi4+0x282>
 8000c88:	4463      	add	r3, ip
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	1b9b      	subs	r3, r3, r6
 8000c8e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c92:	2100      	movs	r1, #0
 8000c94:	b11d      	cbz	r5, 8000c9e <__udivmoddi4+0xa6>
 8000c96:	40d3      	lsrs	r3, r2
 8000c98:	2200      	movs	r2, #0
 8000c9a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d905      	bls.n	8000cb2 <__udivmoddi4+0xba>
 8000ca6:	b10d      	cbz	r5, 8000cac <__udivmoddi4+0xb4>
 8000ca8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cac:	2100      	movs	r1, #0
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e7f5      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000cb2:	fab3 f183 	clz	r1, r3
 8000cb6:	2900      	cmp	r1, #0
 8000cb8:	d146      	bne.n	8000d48 <__udivmoddi4+0x150>
 8000cba:	42a3      	cmp	r3, r4
 8000cbc:	d302      	bcc.n	8000cc4 <__udivmoddi4+0xcc>
 8000cbe:	4290      	cmp	r0, r2
 8000cc0:	f0c0 80f0 	bcc.w	8000ea4 <__udivmoddi4+0x2ac>
 8000cc4:	1a86      	subs	r6, r0, r2
 8000cc6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cca:	2001      	movs	r0, #1
 8000ccc:	2d00      	cmp	r5, #0
 8000cce:	d0e6      	beq.n	8000c9e <__udivmoddi4+0xa6>
 8000cd0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cd4:	e7e3      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	f040 8090 	bne.w	8000dfc <__udivmoddi4+0x204>
 8000cdc:	eba1 040c 	sub.w	r4, r1, ip
 8000ce0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce4:	fa1f f78c 	uxth.w	r7, ip
 8000ce8:	2101      	movs	r1, #1
 8000cea:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cf6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cfa:	fb07 f006 	mul.w	r0, r7, r6
 8000cfe:	4298      	cmp	r0, r3
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x11c>
 8000d02:	eb1c 0303 	adds.w	r3, ip, r3
 8000d06:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x11a>
 8000d0c:	4298      	cmp	r0, r3
 8000d0e:	f200 80cd 	bhi.w	8000eac <__udivmoddi4+0x2b4>
 8000d12:	4626      	mov	r6, r4
 8000d14:	1a1c      	subs	r4, r3, r0
 8000d16:	fa1f f38e 	uxth.w	r3, lr
 8000d1a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d1e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d26:	fb00 f707 	mul.w	r7, r0, r7
 8000d2a:	429f      	cmp	r7, r3
 8000d2c:	d908      	bls.n	8000d40 <__udivmoddi4+0x148>
 8000d2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d32:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d36:	d202      	bcs.n	8000d3e <__udivmoddi4+0x146>
 8000d38:	429f      	cmp	r7, r3
 8000d3a:	f200 80b0 	bhi.w	8000e9e <__udivmoddi4+0x2a6>
 8000d3e:	4620      	mov	r0, r4
 8000d40:	1bdb      	subs	r3, r3, r7
 8000d42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d46:	e7a5      	b.n	8000c94 <__udivmoddi4+0x9c>
 8000d48:	f1c1 0620 	rsb	r6, r1, #32
 8000d4c:	408b      	lsls	r3, r1
 8000d4e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d52:	431f      	orrs	r7, r3
 8000d54:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d58:	fa04 f301 	lsl.w	r3, r4, r1
 8000d5c:	ea43 030c 	orr.w	r3, r3, ip
 8000d60:	40f4      	lsrs	r4, r6
 8000d62:	fa00 f801 	lsl.w	r8, r0, r1
 8000d66:	0c38      	lsrs	r0, r7, #16
 8000d68:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d6c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d70:	fa1f fc87 	uxth.w	ip, r7
 8000d74:	fb00 441e 	mls	r4, r0, lr, r4
 8000d78:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d7c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d80:	45a1      	cmp	r9, r4
 8000d82:	fa02 f201 	lsl.w	r2, r2, r1
 8000d86:	d90a      	bls.n	8000d9e <__udivmoddi4+0x1a6>
 8000d88:	193c      	adds	r4, r7, r4
 8000d8a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d8e:	f080 8084 	bcs.w	8000e9a <__udivmoddi4+0x2a2>
 8000d92:	45a1      	cmp	r9, r4
 8000d94:	f240 8081 	bls.w	8000e9a <__udivmoddi4+0x2a2>
 8000d98:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d9c:	443c      	add	r4, r7
 8000d9e:	eba4 0409 	sub.w	r4, r4, r9
 8000da2:	fa1f f983 	uxth.w	r9, r3
 8000da6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000daa:	fb00 4413 	mls	r4, r0, r3, r4
 8000dae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000db2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000db6:	45a4      	cmp	ip, r4
 8000db8:	d907      	bls.n	8000dca <__udivmoddi4+0x1d2>
 8000dba:	193c      	adds	r4, r7, r4
 8000dbc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dc0:	d267      	bcs.n	8000e92 <__udivmoddi4+0x29a>
 8000dc2:	45a4      	cmp	ip, r4
 8000dc4:	d965      	bls.n	8000e92 <__udivmoddi4+0x29a>
 8000dc6:	3b02      	subs	r3, #2
 8000dc8:	443c      	add	r4, r7
 8000dca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dce:	fba0 9302 	umull	r9, r3, r0, r2
 8000dd2:	eba4 040c 	sub.w	r4, r4, ip
 8000dd6:	429c      	cmp	r4, r3
 8000dd8:	46ce      	mov	lr, r9
 8000dda:	469c      	mov	ip, r3
 8000ddc:	d351      	bcc.n	8000e82 <__udivmoddi4+0x28a>
 8000dde:	d04e      	beq.n	8000e7e <__udivmoddi4+0x286>
 8000de0:	b155      	cbz	r5, 8000df8 <__udivmoddi4+0x200>
 8000de2:	ebb8 030e 	subs.w	r3, r8, lr
 8000de6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dea:	fa04 f606 	lsl.w	r6, r4, r6
 8000dee:	40cb      	lsrs	r3, r1
 8000df0:	431e      	orrs	r6, r3
 8000df2:	40cc      	lsrs	r4, r1
 8000df4:	e9c5 6400 	strd	r6, r4, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	e750      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000dfc:	f1c2 0320 	rsb	r3, r2, #32
 8000e00:	fa20 f103 	lsr.w	r1, r0, r3
 8000e04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e08:	fa24 f303 	lsr.w	r3, r4, r3
 8000e0c:	4094      	lsls	r4, r2
 8000e0e:	430c      	orrs	r4, r1
 8000e10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e18:	fa1f f78c 	uxth.w	r7, ip
 8000e1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e20:	fb08 3110 	mls	r1, r8, r0, r3
 8000e24:	0c23      	lsrs	r3, r4, #16
 8000e26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e2a:	fb00 f107 	mul.w	r1, r0, r7
 8000e2e:	4299      	cmp	r1, r3
 8000e30:	d908      	bls.n	8000e44 <__udivmoddi4+0x24c>
 8000e32:	eb1c 0303 	adds.w	r3, ip, r3
 8000e36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e3a:	d22c      	bcs.n	8000e96 <__udivmoddi4+0x29e>
 8000e3c:	4299      	cmp	r1, r3
 8000e3e:	d92a      	bls.n	8000e96 <__udivmoddi4+0x29e>
 8000e40:	3802      	subs	r0, #2
 8000e42:	4463      	add	r3, ip
 8000e44:	1a5b      	subs	r3, r3, r1
 8000e46:	b2a4      	uxth	r4, r4
 8000e48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e54:	fb01 f307 	mul.w	r3, r1, r7
 8000e58:	42a3      	cmp	r3, r4
 8000e5a:	d908      	bls.n	8000e6e <__udivmoddi4+0x276>
 8000e5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e64:	d213      	bcs.n	8000e8e <__udivmoddi4+0x296>
 8000e66:	42a3      	cmp	r3, r4
 8000e68:	d911      	bls.n	8000e8e <__udivmoddi4+0x296>
 8000e6a:	3902      	subs	r1, #2
 8000e6c:	4464      	add	r4, ip
 8000e6e:	1ae4      	subs	r4, r4, r3
 8000e70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e74:	e739      	b.n	8000cea <__udivmoddi4+0xf2>
 8000e76:	4604      	mov	r4, r0
 8000e78:	e6f0      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	e706      	b.n	8000c8c <__udivmoddi4+0x94>
 8000e7e:	45c8      	cmp	r8, r9
 8000e80:	d2ae      	bcs.n	8000de0 <__udivmoddi4+0x1e8>
 8000e82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e8a:	3801      	subs	r0, #1
 8000e8c:	e7a8      	b.n	8000de0 <__udivmoddi4+0x1e8>
 8000e8e:	4631      	mov	r1, r6
 8000e90:	e7ed      	b.n	8000e6e <__udivmoddi4+0x276>
 8000e92:	4603      	mov	r3, r0
 8000e94:	e799      	b.n	8000dca <__udivmoddi4+0x1d2>
 8000e96:	4630      	mov	r0, r6
 8000e98:	e7d4      	b.n	8000e44 <__udivmoddi4+0x24c>
 8000e9a:	46d6      	mov	lr, sl
 8000e9c:	e77f      	b.n	8000d9e <__udivmoddi4+0x1a6>
 8000e9e:	4463      	add	r3, ip
 8000ea0:	3802      	subs	r0, #2
 8000ea2:	e74d      	b.n	8000d40 <__udivmoddi4+0x148>
 8000ea4:	4606      	mov	r6, r0
 8000ea6:	4623      	mov	r3, r4
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	e70f      	b.n	8000ccc <__udivmoddi4+0xd4>
 8000eac:	3e02      	subs	r6, #2
 8000eae:	4463      	add	r3, ip
 8000eb0:	e730      	b.n	8000d14 <__udivmoddi4+0x11c>
 8000eb2:	bf00      	nop

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <GNSSCom_Init>:

GNSSCom_HandleTypeDef hGNSSCom;
OutputType type = ASCII;
OutputProtocol protocol = UBX;

void GNSSCom_Init(UART_HandleTypeDef* huart,UART_HandleTypeDef* huartDebug){
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]
	hGNSSCom.huart = huart;
 8000ec2:	4a0f      	ldr	r2, [pc, #60]	@ (8000f00 <GNSSCom_Init+0x48>)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6013      	str	r3, [r2, #0]
	hGNSSCom.huartDebug = huartDebug;
 8000ec8:	4a0d      	ldr	r2, [pc, #52]	@ (8000f00 <GNSSCom_Init+0x48>)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	6053      	str	r3, [r2, #4]

	hGNSSCom.Rx = initializeBuffer(UART_RX_BUFFER_SIZE);
 8000ece:	20c8      	movs	r0, #200	@ 0xc8
 8000ed0:	f000 f82e 	bl	8000f30 <initializeBuffer>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	4a0a      	ldr	r2, [pc, #40]	@ (8000f00 <GNSSCom_Init+0x48>)
 8000ed8:	6093      	str	r3, [r2, #8]
	memset(hGNSSCom.DebugBuffer, 0, UART_DEBUG_BUFFER_SIZE);
 8000eda:	22c8      	movs	r2, #200	@ 0xc8
 8000edc:	2100      	movs	r1, #0
 8000ede:	4809      	ldr	r0, [pc, #36]	@ (8000f04 <GNSSCom_Init+0x4c>)
 8000ee0:	f00c fe8d 	bl	800dbfe <memset>

	GNSSCom_UartActivate(&hGNSSCom);
 8000ee4:	4806      	ldr	r0, [pc, #24]	@ (8000f00 <GNSSCom_Init+0x48>)
 8000ee6:	f000 f80f 	bl	8000f08 <GNSSCom_UartActivate>
	HAL_Delay(5000); //En theorie il suffit d attendre la reception du premier msg UART pour envoyer
 8000eea:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000eee:	f002 ff21 	bl	8003d34 <HAL_Delay>
	GNSSCom_SetUp_Init();
 8000ef2:	f000 f87b 	bl	8000fec <GNSSCom_SetUp_Init>


}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	200003b0 	.word	0x200003b0
 8000f04:	200003bc 	.word	0x200003bc

08000f08 <GNSSCom_UartActivate>:
void GNSSCom_UartActivate(GNSSCom_HandleTypeDef* hGNSS){
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(hGNSS->huart, hGNSS->Rx->buffer, hGNSS->Rx->size);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6818      	ldr	r0, [r3, #0]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	6819      	ldr	r1, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	461a      	mov	r2, r3
 8000f24:	f006 ffc4 	bl	8007eb0 <HAL_UART_Receive_IT>
}
 8000f28:	bf00      	nop
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <initializeBuffer>:

DynamicBuffer* initializeBuffer(size_t initialSize) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
	DynamicBuffer *bufferDynamic = (DynamicBuffer *)pvPortMalloc(sizeof(DynamicBuffer));
 8000f38:	2008      	movs	r0, #8
 8000f3a:	f00b fdcf 	bl	800cadc <pvPortMalloc>
 8000f3e:	60f8      	str	r0, [r7, #12]
	if (bufferDynamic == NULL) {
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d101      	bne.n	8000f4a <initializeBuffer+0x1a>
		return NULL; // Échec de l'allocation mémoire
 8000f46:	2300      	movs	r3, #0
 8000f48:	e012      	b.n	8000f70 <initializeBuffer+0x40>
	}

	bufferDynamic->buffer = (uint8_t*)pvPortMalloc(initialSize);
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f00b fdc6 	bl	800cadc <pvPortMalloc>
 8000f50:	4602      	mov	r2, r0
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	601a      	str	r2, [r3, #0]
	if (bufferDynamic->buffer == NULL) {
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d104      	bne.n	8000f68 <initializeBuffer+0x38>
		vPortFree(bufferDynamic); // Libérer la mémoire allouée pour la structure
 8000f5e:	68f8      	ldr	r0, [r7, #12]
 8000f60:	f00b fe90 	bl	800cc84 <vPortFree>
		return NULL; // Échec de l'allocation mémoire
 8000f64:	2300      	movs	r3, #0
 8000f66:	e003      	b.n	8000f70 <initializeBuffer+0x40>
	}

	bufferDynamic->size = initialSize;
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	605a      	str	r2, [r3, #4]
	return bufferDynamic;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <freeBuffer>:
	if (newData != NULL) {
		bufferDynamic->buffer = newData;
		bufferDynamic->size = newSize;
	}
}
void freeBuffer(DynamicBuffer *bufferDynamic) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	vPortFree(bufferDynamic->buffer);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f00b fe7d 	bl	800cc84 <vPortFree>
	vPortFree(bufferDynamic);
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f00b fe7a 	bl	800cc84 <vPortFree>
}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <GNSSCom_Send_SetVal>:
void GNSSCom_Send_SetVal(CommandnSize toTransmit){
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	463b      	mov	r3, r7
 8000fa0:	e883 0003 	stmia.w	r3, {r0, r1}
	while (hGNSSCom.huart->gState != HAL_UART_STATE_READY){ITM_Port32(30)=99999999;}
 8000fa4:	e002      	b.n	8000fac <GNSSCom_Send_SetVal+0x14>
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe0 <GNSSCom_Send_SetVal+0x48>)
 8000fa8:	4a0e      	ldr	r2, [pc, #56]	@ (8000fe4 <GNSSCom_Send_SetVal+0x4c>)
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe8 <GNSSCom_Send_SetVal+0x50>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8000fb2:	2b20      	cmp	r3, #32
 8000fb4:	d1f7      	bne.n	8000fa6 <GNSSCom_Send_SetVal+0xe>
	HAL_StatusTypeDef statut = HAL_UART_Transmit(hGNSSCom.huart, toTransmit.command, toTransmit.size,HAL_MAX_DELAY);
 8000fb6:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe8 <GNSSCom_Send_SetVal+0x50>)
 8000fb8:	6818      	ldr	r0, [r3, #0]
 8000fba:	6839      	ldr	r1, [r7, #0]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	b29a      	uxth	r2, r3
 8000fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc4:	f006 feea 	bl	8007d9c <HAL_UART_Transmit>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	73fb      	strb	r3, [r7, #15]
	if (statut!= HAL_OK){
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <GNSSCom_Send_SetVal+0x3e>
		Error_Handler();
 8000fd2:	f002 f847 	bl	8003064 <Error_Handler>
	}
}
 8000fd6:	bf00      	nop
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	e0000078 	.word	0xe0000078
 8000fe4:	05f5e0ff 	.word	0x05f5e0ff
 8000fe8:	200003b0 	.word	0x200003b0

08000fec <GNSSCom_SetUp_Init>:
void GNSSCom_SetUp_Init(void){
 8000fec:	b5b0      	push	{r4, r5, r7, lr}
 8000fee:	b09a      	sub	sp, #104	@ 0x68
 8000ff0:	af00      	add	r7, sp, #0

	CommandnSize commands[] = {
 8000ff2:	4b50      	ldr	r3, [pc, #320]	@ (8001134 <GNSSCom_SetUp_Init+0x148>)
 8000ff4:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8000ff8:	461d      	mov	r5, r3
 8000ffa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ffc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ffe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001000:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001002:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001006:	e884 0003 	stmia.w	r4, {r0, r1}
			{commandUart1Ouput, sizeof(commandUart1Ouput)},
			//{commandUBXTimeUTC, sizeof(commandUBXTimeUTC)}
	};
	char message[50];

	for (int i = 0; i < sizeof(commands) / sizeof(commands[0]); ++i) {
 800100a:	2300      	movs	r3, #0
 800100c:	667b      	str	r3, [r7, #100]	@ 0x64
 800100e:	e088      	b.n	8001122 <GNSSCom_SetUp_Init+0x136>
		// Transmit debug message
		sprintf(message, "\r\t\t\n...UBXMessage%d...\r\n", i + 1);
 8001010:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001012:	1c5a      	adds	r2, r3, #1
 8001014:	463b      	mov	r3, r7
 8001016:	4948      	ldr	r1, [pc, #288]	@ (8001138 <GNSSCom_SetUp_Init+0x14c>)
 8001018:	4618      	mov	r0, r3
 800101a:	f00c fd8d 	bl	800db38 <siprintf>
		HAL_UART_Transmit(hGNSSCom.huartDebug, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 800101e:	4b47      	ldr	r3, [pc, #284]	@ (800113c <GNSSCom_SetUp_Init+0x150>)
 8001020:	685c      	ldr	r4, [r3, #4]
 8001022:	463b      	mov	r3, r7
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff f933 	bl	8000290 <strlen>
 800102a:	4603      	mov	r3, r0
 800102c:	b29a      	uxth	r2, r3
 800102e:	4639      	mov	r1, r7
 8001030:	f04f 33ff 	mov.w	r3, #4294967295
 8001034:	4620      	mov	r0, r4
 8001036:	f006 feb1 	bl	8007d9c <HAL_UART_Transmit>

		// Transmit command
		GNSSCom_Send_SetVal(commands[i]);
 800103a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	3368      	adds	r3, #104	@ 0x68
 8001040:	443b      	add	r3, r7
 8001042:	3b34      	subs	r3, #52	@ 0x34
 8001044:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001048:	f7ff ffa6 	bl	8000f98 <GNSSCom_Send_SetVal>

		// On fais croire que la commande a ete recu par le RX buffer : TIPS pour print en debug la commande
		memcpy(hGNSSCom.Rx->buffer, commands[i].command, commands[i].size);
 800104c:	4b3b      	ldr	r3, [pc, #236]	@ (800113c <GNSSCom_SetUp_Init+0x150>)
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	6818      	ldr	r0, [r3, #0]
 8001052:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001054:	00db      	lsls	r3, r3, #3
 8001056:	3368      	adds	r3, #104	@ 0x68
 8001058:	443b      	add	r3, r7
 800105a:	f853 1c34 	ldr.w	r1, [r3, #-52]
 800105e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001060:	00db      	lsls	r3, r3, #3
 8001062:	3368      	adds	r3, #104	@ 0x68
 8001064:	443b      	add	r3, r7
 8001066:	f853 3c30 	ldr.w	r3, [r3, #-48]
 800106a:	461a      	mov	r2, r3
 800106c:	f00c fead 	bl	800ddca <memcpy>

		GenericMessage* command_debug = GNSSCom_Receive(hGNSSCom.Rx->buffer,hGNSSCom.Rx->size);
 8001070:	4b32      	ldr	r3, [pc, #200]	@ (800113c <GNSSCom_SetUp_Init+0x150>)
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	4b31      	ldr	r3, [pc, #196]	@ (800113c <GNSSCom_SetUp_Init+0x150>)
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	4619      	mov	r1, r3
 800107e:	4610      	mov	r0, r2
 8001080:	f000 f860 	bl	8001144 <GNSSCom_Receive>
 8001084:	6638      	str	r0, [r7, #96]	@ 0x60
		if (command_debug->typeMessage == UBX){
 8001086:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	2b02      	cmp	r3, #2
 800108c:	d125      	bne.n	80010da <GNSSCom_SetUp_Init+0xee>
			UBXMessage_parsed* messageUBX=(UBXMessage_parsed*) command_debug->Message.UBXMessage;
 800108e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	65fb      	str	r3, [r7, #92]	@ 0x5c
			create_message_debug(messageUBX);
 8001094:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001096:	f000 f8ed 	bl	8001274 <create_message_debug>
			HAL_UART_Transmit(hGNSSCom.huartDebug,(uint8_t*) messageUBX->bufferDebug, sizeof(messageUBX->bufferDebug), HAL_MAX_DELAY);
 800109a:	4b28      	ldr	r3, [pc, #160]	@ (800113c <GNSSCom_SetUp_Init+0x150>)
 800109c:	6858      	ldr	r0, [r3, #4]
 800109e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80010a0:	1d19      	adds	r1, r3, #4
 80010a2:	f04f 33ff 	mov.w	r3, #4294967295
 80010a6:	22c8      	movs	r2, #200	@ 0xc8
 80010a8:	f006 fe78 	bl	8007d9c <HAL_UART_Transmit>
			freeBuffer(command_debug->Message.UBXMessage->brute);
 80010ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff5f 	bl	8000f78 <freeBuffer>
			freeBuffer(command_debug->Message.UBXMessage->load);
 80010ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff ff58 	bl	8000f78 <freeBuffer>
			free(command_debug->Message.UBXMessage);
 80010c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f00b ff01 	bl	800ced4 <free>
			free(command_debug);
 80010d2:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80010d4:	f00b fefe 	bl	800ced4 <free>
 80010d8:	e020      	b.n	800111c <GNSSCom_SetUp_Init+0x130>
		}
		else{
			sprintf(message, "\r\t\t\n...UBXMessage%d - FAILED...\r\n", i + 1);
 80010da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80010dc:	1c5a      	adds	r2, r3, #1
 80010de:	463b      	mov	r3, r7
 80010e0:	4917      	ldr	r1, [pc, #92]	@ (8001140 <GNSSCom_SetUp_Init+0x154>)
 80010e2:	4618      	mov	r0, r3
 80010e4:	f00c fd28 	bl	800db38 <siprintf>
			HAL_UART_Transmit(hGNSSCom.huartDebug, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 80010e8:	4b14      	ldr	r3, [pc, #80]	@ (800113c <GNSSCom_SetUp_Init+0x150>)
 80010ea:	685c      	ldr	r4, [r3, #4]
 80010ec:	463b      	mov	r3, r7
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff f8ce 	bl	8000290 <strlen>
 80010f4:	4603      	mov	r3, r0
 80010f6:	b29a      	uxth	r2, r3
 80010f8:	4639      	mov	r1, r7
 80010fa:	f04f 33ff 	mov.w	r3, #4294967295
 80010fe:	4620      	mov	r0, r4
 8001100:	f006 fe4c 	bl	8007d9c <HAL_UART_Transmit>
			if (command_debug->typeMessage == NMEA){
 8001104:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b01      	cmp	r3, #1
 800110a:	d107      	bne.n	800111c <GNSSCom_SetUp_Init+0x130>
				free(command_debug->Message.NMEAMessage);
 800110c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	4618      	mov	r0, r3
 8001112:	f00b fedf 	bl	800ced4 <free>
				free(command_debug);
 8001116:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8001118:	f00b fedc 	bl	800ced4 <free>
	for (int i = 0; i < sizeof(commands) / sizeof(commands[0]); ++i) {
 800111c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800111e:	3301      	adds	r3, #1
 8001120:	667b      	str	r3, [r7, #100]	@ 0x64
 8001122:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001124:	2b04      	cmp	r3, #4
 8001126:	f67f af73 	bls.w	8001010 <GNSSCom_SetUp_Init+0x24>
			}
		}
	}
}
 800112a:	bf00      	nop
 800112c:	bf00      	nop
 800112e:	3768      	adds	r7, #104	@ 0x68
 8001130:	46bd      	mov	sp, r7
 8001132:	bdb0      	pop	{r4, r5, r7, pc}
 8001134:	0800fcd0 	.word	0x0800fcd0
 8001138:	0800fc90 	.word	0x0800fc90
 800113c:	200003b0 	.word	0x200003b0
 8001140:	0800fcac 	.word	0x0800fcac

08001144 <GNSSCom_Receive>:

GenericMessage* GNSSCom_Receive(uint8_t* buffer,size_t size){
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
	GenericMessage* genericMessage=(GenericMessage*) malloc(sizeof(GenericMessage));
 800114e:	2008      	movs	r0, #8
 8001150:	f00b feb8 	bl	800cec4 <malloc>
 8001154:	4603      	mov	r3, r0
 8001156:	613b      	str	r3, [r7, #16]

	for (int i = 0; i < size; i++) {
 8001158:	2300      	movs	r3, #0
 800115a:	617b      	str	r3, [r7, #20]
 800115c:	e07f      	b.n	800125e <GNSSCom_Receive+0x11a>
		if (buffer[i] == HEADER_UBX_1 &&
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	687a      	ldr	r2, [r7, #4]
 8001162:	4413      	add	r3, r2
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	2bb5      	cmp	r3, #181	@ 0xb5
 8001168:	d163      	bne.n	8001232 <GNSSCom_Receive+0xee>
				buffer[i +1] == HEADER_UBX_2 ){
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	3301      	adds	r3, #1
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	4413      	add	r3, r2
 8001172:	781b      	ldrb	r3, [r3, #0]
		if (buffer[i] == HEADER_UBX_1 &&
 8001174:	2b62      	cmp	r3, #98	@ 0x62
 8001176:	d15c      	bne.n	8001232 <GNSSCom_Receive+0xee>
			genericMessage->typeMessage=UBX;
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	2202      	movs	r2, #2
 800117c:	701a      	strb	r2, [r3, #0]
			UBXMessage_parsed* UbxMessage =(UBXMessage_parsed*) malloc(sizeof(UBXMessage_parsed));
 800117e:	20d4      	movs	r0, #212	@ 0xd4
 8001180:	f00b fea0 	bl	800cec4 <malloc>
 8001184:	4603      	mov	r3, r0
 8001186:	60fb      	str	r3, [r7, #12]
			UbxMessage->CLASS = buffer[i + 2];
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	3302      	adds	r3, #2
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	4413      	add	r3, r2
 8001190:	781a      	ldrb	r2, [r3, #0]
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	701a      	strb	r2, [r3, #0]
			UbxMessage->ID = buffer[i + 3];
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	3303      	adds	r3, #3
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	4413      	add	r3, r2
 800119e:	781a      	ldrb	r2, [r3, #0]
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	705a      	strb	r2, [r3, #1]
			UbxMessage->len_payload = (buffer[i+5] << 8) |buffer[i+4];
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	3305      	adds	r3, #5
 80011a8:	687a      	ldr	r2, [r7, #4]
 80011aa:	4413      	add	r3, r2
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	021b      	lsls	r3, r3, #8
 80011b0:	b21a      	sxth	r2, r3
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	3304      	adds	r3, #4
 80011b6:	6879      	ldr	r1, [r7, #4]
 80011b8:	440b      	add	r3, r1
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	b21b      	sxth	r3, r3
 80011be:	4313      	orrs	r3, r2
 80011c0:	b21b      	sxth	r3, r3
 80011c2:	b29a      	uxth	r2, r3
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	805a      	strh	r2, [r3, #2]
			UbxMessage->load=initializeBuffer((size_t)UbxMessage->len_payload);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	885b      	ldrh	r3, [r3, #2]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff feaf 	bl	8000f30 <initializeBuffer>
 80011d2:	4602      	mov	r2, r0
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

			memcpy(UbxMessage->load->buffer, buffer + i + 6, UbxMessage->load->size);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80011e0:	6818      	ldr	r0, [r3, #0]
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	3306      	adds	r3, #6
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	18d1      	adds	r1, r2, r3
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	461a      	mov	r2, r3
 80011f4:	f00c fde9 	bl	800ddca <memcpy>

			UbxMessage->brute=initializeBuffer((size_t)UbxMessage->len_payload + 8);
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	885b      	ldrh	r3, [r3, #2]
 80011fc:	3308      	adds	r3, #8
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff fe96 	bl	8000f30 <initializeBuffer>
 8001204:	4602      	mov	r2, r0
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
			memcpy(UbxMessage->brute->buffer, buffer + i, UbxMessage->brute->size);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8001212:	6818      	ldr	r0, [r3, #0]
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	18d1      	adds	r1, r2, r3
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	461a      	mov	r2, r3
 8001224:	f00c fdd1 	bl	800ddca <memcpy>

			genericMessage->Message.UBXMessage = UbxMessage;
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	68fa      	ldr	r2, [r7, #12]
 800122c:	605a      	str	r2, [r3, #4]
			return genericMessage;
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	e01b      	b.n	800126a <GNSSCom_Receive+0x126>
		}

		else if(buffer[i] == HEADER_NMEA) {
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	4413      	add	r3, r2
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	2b24      	cmp	r3, #36	@ 0x24
 800123c:	d10c      	bne.n	8001258 <GNSSCom_Receive+0x114>
			NMEAMessage_parsed* NMEAMessage =(NMEAMessage_parsed*) malloc(sizeof(NMEAMessage_parsed));
 800123e:	2004      	movs	r0, #4
 8001240:	f00b fe40 	bl	800cec4 <malloc>
 8001244:	4603      	mov	r3, r0
 8001246:	60bb      	str	r3, [r7, #8]
			genericMessage->typeMessage= NMEA;
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	2201      	movs	r2, #1
 800124c:	701a      	strb	r2, [r3, #0]
			genericMessage->Message.NMEAMessage = NMEAMessage;
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	68ba      	ldr	r2, [r7, #8]
 8001252:	605a      	str	r2, [r3, #4]
			return genericMessage; //Temporaire
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	e008      	b.n	800126a <GNSSCom_Receive+0x126>
	for (int i = 0; i < size; i++) {
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	3301      	adds	r3, #1
 800125c:	617b      	str	r3, [r7, #20]
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	683a      	ldr	r2, [r7, #0]
 8001262:	429a      	cmp	r2, r3
 8001264:	f63f af7b 	bhi.w	800115e <GNSSCom_Receive+0x1a>
		}
	}
	return genericMessage;
 8001268:	693b      	ldr	r3, [r7, #16]
}
 800126a:	4618      	mov	r0, r3
 800126c:	3718      	adds	r7, #24
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <create_message_debug>:
	{0x06, 0x01,(void (*)(UBXMessage_parsed *, void *)) debug_PollMessage, &UBX_CFG_MSG_instance},
    // Add other mappings for other message types if necessary
};


void create_message_debug(UBXMessage_parsed* UBXMessage) {
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
    // Function pointer and variables to hold the matched mapping's values
    void (*get_func)(UBXMessage_parsed*, void *) = NULL;
 800127c:	2300      	movs	r3, #0
 800127e:	613b      	str	r3, [r7, #16]
    void* structAssociate = NULL;
 8001280:	2300      	movs	r3, #0
 8001282:	60fb      	str	r3, [r7, #12]

    // Loop through the message mappings to find a match
    for (int i = 0; i < sizeof(message_mappings) / sizeof(message_mappings[0]); i++) {
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]
 8001288:	e034      	b.n	80012f4 <create_message_debug+0x80>
        if (message_mappings[i].CLASS == UBXMessage->CLASS &&
 800128a:	491e      	ldr	r1, [pc, #120]	@ (8001304 <create_message_debug+0x90>)
 800128c:	697a      	ldr	r2, [r7, #20]
 800128e:	4613      	mov	r3, r2
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	4413      	add	r3, r2
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	440b      	add	r3, r1
 8001298:	781a      	ldrb	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d125      	bne.n	80012ee <create_message_debug+0x7a>
            message_mappings[i].ID == UBXMessage->ID) {
 80012a2:	4918      	ldr	r1, [pc, #96]	@ (8001304 <create_message_debug+0x90>)
 80012a4:	697a      	ldr	r2, [r7, #20]
 80012a6:	4613      	mov	r3, r2
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	4413      	add	r3, r2
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	440b      	add	r3, r1
 80012b0:	3301      	adds	r3, #1
 80012b2:	781a      	ldrb	r2, [r3, #0]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	785b      	ldrb	r3, [r3, #1]
        if (message_mappings[i].CLASS == UBXMessage->CLASS &&
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d118      	bne.n	80012ee <create_message_debug+0x7a>
            // Retrieve the corresponding get function and associated structure and variables
            get_func = message_mappings[i].get_func;
 80012bc:	4911      	ldr	r1, [pc, #68]	@ (8001304 <create_message_debug+0x90>)
 80012be:	697a      	ldr	r2, [r7, #20]
 80012c0:	4613      	mov	r3, r2
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	4413      	add	r3, r2
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	440b      	add	r3, r1
 80012ca:	3304      	adds	r3, #4
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	613b      	str	r3, [r7, #16]
            structAssociate = message_mappings[i].structAssociate; //Pour l'utilisation dans d'autres fonctions
 80012d0:	490c      	ldr	r1, [pc, #48]	@ (8001304 <create_message_debug+0x90>)
 80012d2:	697a      	ldr	r2, [r7, #20]
 80012d4:	4613      	mov	r3, r2
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	4413      	add	r3, r2
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	440b      	add	r3, r1
 80012de:	3308      	adds	r3, #8
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	60fb      	str	r3, [r7, #12]
            get_func(UBXMessage,structAssociate);
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	68f9      	ldr	r1, [r7, #12]
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	4798      	blx	r3

            //On adapte la taille du buffer pour les prochains messages
            //resizeBuffer(hGNSSCom.Rx,UBXMessage->len + 8);
            //On tronque le buffer
            // ->
            break;
 80012ec:	e006      	b.n	80012fc <create_message_debug+0x88>
    for (int i = 0; i < sizeof(message_mappings) / sizeof(message_mappings[0]); i++) {
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	3301      	adds	r3, #1
 80012f2:	617b      	str	r3, [r7, #20]
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d9c7      	bls.n	800128a <create_message_debug+0x16>
        }

    }
}
 80012fa:	bf00      	nop
 80012fc:	bf00      	nop
 80012fe:	3718      	adds	r7, #24
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20000188 	.word	0x20000188

08001308 <debug_UBX_NAV_TIMEUTC>:
 */

#include "GNSS/traductor.h"


void debug_UBX_NAV_TIMEUTC(UBXMessage_parsed* UBXMessage,UBX_NAV_TIMEUTC *structAssociate){
 8001308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800130c:	b094      	sub	sp, #80	@ 0x50
 800130e:	af0a      	add	r7, sp, #40	@ 0x28
 8001310:	61f8      	str	r0, [r7, #28]
 8001312:	61b9      	str	r1, [r7, #24]
	size_t offset = 0;
 8001314:	2300      	movs	r3, #0
 8001316:	627b      	str	r3, [r7, #36]	@ 0x24
	ITM_Port32(31)=21;
 8001318:	4b7b      	ldr	r3, [pc, #492]	@ (8001508 <debug_UBX_NAV_TIMEUTC+0x200>)
 800131a:	2215      	movs	r2, #21
 800131c:	601a      	str	r2, [r3, #0]
	memcpy(&(structAssociate->iTOW), UBXMessage->load->buffer + offset, sizeof(structAssociate->iTOW));
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	69fa      	ldr	r2, [r7, #28]
 8001322:	f8d2 20cc 	ldr.w	r2, [r2, #204]	@ 0xcc
 8001326:	6811      	ldr	r1, [r2, #0]
 8001328:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800132a:	440a      	add	r2, r1
 800132c:	6812      	ldr	r2, [r2, #0]
 800132e:	601a      	str	r2, [r3, #0]
	offset += sizeof(structAssociate->iTOW);
 8001330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001332:	3304      	adds	r3, #4
 8001334:	627b      	str	r3, [r7, #36]	@ 0x24

	memcpy(&(structAssociate->tAcc), UBXMessage->load->buffer + offset, sizeof(structAssociate->tAcc));
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	3304      	adds	r3, #4
 800133a:	69fa      	ldr	r2, [r7, #28]
 800133c:	f8d2 20cc 	ldr.w	r2, [r2, #204]	@ 0xcc
 8001340:	6811      	ldr	r1, [r2, #0]
 8001342:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001344:	440a      	add	r2, r1
 8001346:	6812      	ldr	r2, [r2, #0]
 8001348:	601a      	str	r2, [r3, #0]
	offset += sizeof(structAssociate->tAcc);
 800134a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800134c:	3304      	adds	r3, #4
 800134e:	627b      	str	r3, [r7, #36]	@ 0x24

	memcpy(&(structAssociate->nano), UBXMessage->load->buffer + offset, sizeof(structAssociate->nano));
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	3308      	adds	r3, #8
 8001354:	69fa      	ldr	r2, [r7, #28]
 8001356:	f8d2 20cc 	ldr.w	r2, [r2, #204]	@ 0xcc
 800135a:	6811      	ldr	r1, [r2, #0]
 800135c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800135e:	440a      	add	r2, r1
 8001360:	6812      	ldr	r2, [r2, #0]
 8001362:	601a      	str	r2, [r3, #0]
	offset += sizeof(structAssociate->nano);
 8001364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001366:	3304      	adds	r3, #4
 8001368:	627b      	str	r3, [r7, #36]	@ 0x24

	memcpy(&(structAssociate->year), UBXMessage->load->buffer + offset, sizeof(structAssociate->year));
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	330c      	adds	r3, #12
 800136e:	69fa      	ldr	r2, [r7, #28]
 8001370:	f8d2 20cc 	ldr.w	r2, [r2, #204]	@ 0xcc
 8001374:	6811      	ldr	r1, [r2, #0]
 8001376:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001378:	440a      	add	r2, r1
 800137a:	8812      	ldrh	r2, [r2, #0]
 800137c:	b292      	uxth	r2, r2
 800137e:	801a      	strh	r2, [r3, #0]
	offset += sizeof(structAssociate->year);
 8001380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001382:	3302      	adds	r3, #2
 8001384:	627b      	str	r3, [r7, #36]	@ 0x24

	memcpy(&(structAssociate->month), UBXMessage->load->buffer + offset, sizeof(structAssociate->month));
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	330e      	adds	r3, #14
 800138a:	69fa      	ldr	r2, [r7, #28]
 800138c:	f8d2 20cc 	ldr.w	r2, [r2, #204]	@ 0xcc
 8001390:	6811      	ldr	r1, [r2, #0]
 8001392:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001394:	440a      	add	r2, r1
 8001396:	7812      	ldrb	r2, [r2, #0]
 8001398:	701a      	strb	r2, [r3, #0]
	offset += sizeof(structAssociate->month);
 800139a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800139c:	3301      	adds	r3, #1
 800139e:	627b      	str	r3, [r7, #36]	@ 0x24

	memcpy(&(structAssociate->day), UBXMessage->load->buffer + offset, sizeof(structAssociate->day));
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	330f      	adds	r3, #15
 80013a4:	69fa      	ldr	r2, [r7, #28]
 80013a6:	f8d2 20cc 	ldr.w	r2, [r2, #204]	@ 0xcc
 80013aa:	6811      	ldr	r1, [r2, #0]
 80013ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013ae:	440a      	add	r2, r1
 80013b0:	7812      	ldrb	r2, [r2, #0]
 80013b2:	701a      	strb	r2, [r3, #0]
	offset += sizeof(structAssociate->day);
 80013b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013b6:	3301      	adds	r3, #1
 80013b8:	627b      	str	r3, [r7, #36]	@ 0x24

	memcpy(&(structAssociate->hour), UBXMessage->load->buffer + offset, sizeof(structAssociate->hour));
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	3310      	adds	r3, #16
 80013be:	69fa      	ldr	r2, [r7, #28]
 80013c0:	f8d2 20cc 	ldr.w	r2, [r2, #204]	@ 0xcc
 80013c4:	6811      	ldr	r1, [r2, #0]
 80013c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013c8:	440a      	add	r2, r1
 80013ca:	7812      	ldrb	r2, [r2, #0]
 80013cc:	701a      	strb	r2, [r3, #0]
	offset += sizeof(structAssociate->hour);
 80013ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013d0:	3301      	adds	r3, #1
 80013d2:	627b      	str	r3, [r7, #36]	@ 0x24

	memcpy(&(structAssociate->min), UBXMessage->load->buffer + offset, sizeof(structAssociate->min));
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	3311      	adds	r3, #17
 80013d8:	69fa      	ldr	r2, [r7, #28]
 80013da:	f8d2 20cc 	ldr.w	r2, [r2, #204]	@ 0xcc
 80013de:	6811      	ldr	r1, [r2, #0]
 80013e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013e2:	440a      	add	r2, r1
 80013e4:	7812      	ldrb	r2, [r2, #0]
 80013e6:	701a      	strb	r2, [r3, #0]
	offset += sizeof(structAssociate->min);
 80013e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ea:	3301      	adds	r3, #1
 80013ec:	627b      	str	r3, [r7, #36]	@ 0x24

	memcpy(&(structAssociate->sec), UBXMessage->load->buffer + offset, sizeof(structAssociate->sec));
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	3312      	adds	r3, #18
 80013f2:	69fa      	ldr	r2, [r7, #28]
 80013f4:	f8d2 20cc 	ldr.w	r2, [r2, #204]	@ 0xcc
 80013f8:	6811      	ldr	r1, [r2, #0]
 80013fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013fc:	440a      	add	r2, r1
 80013fe:	7812      	ldrb	r2, [r2, #0]
 8001400:	701a      	strb	r2, [r3, #0]
	offset += sizeof(structAssociate->sec);
 8001402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001404:	3301      	adds	r3, #1
 8001406:	627b      	str	r3, [r7, #36]	@ 0x24

	memcpy(&(structAssociate->valid), UBXMessage->load->buffer + offset, sizeof(structAssociate->valid));
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	3313      	adds	r3, #19
 800140c:	69fa      	ldr	r2, [r7, #28]
 800140e:	f8d2 20cc 	ldr.w	r2, [r2, #204]	@ 0xcc
 8001412:	6811      	ldr	r1, [r2, #0]
 8001414:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001416:	440a      	add	r2, r1
 8001418:	7812      	ldrb	r2, [r2, #0]
 800141a:	701a      	strb	r2, [r3, #0]
	offset += sizeof(structAssociate->valid);
 800141c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800141e:	3301      	adds	r3, #1
 8001420:	627b      	str	r3, [r7, #36]	@ 0x24

	int len =snprintf(UBXMessage->bufferDebug,  (size_t)UART_DEBUG_BUFFER_SIZE,
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	1d1d      	adds	r5, r3, #4
			"iTOW [ms]: %u\r\n"
			"tAcc [ns]: %u\r\n"
			"Date [YYYY-MM-DD]: %u-%u-%u\r\n"
			"Time [HH:MM:SS]: %u:%u:%u - %u [ns]\r\n"
			"valid: %u\r\n",
			bytes_to_endian(structAssociate->iTOW,sizeof(structAssociate->iTOW),'l'),
 8001426:	69bb      	ldr	r3, [r7, #24]
	int len =snprintf(UBXMessage->bufferDebug,  (size_t)UART_DEBUG_BUFFER_SIZE,
 8001428:	226c      	movs	r2, #108	@ 0x6c
 800142a:	2104      	movs	r1, #4
 800142c:	4618      	mov	r0, r3
 800142e:	f000 f927 	bl	8001680 <bytes_to_endian>
 8001432:	4680      	mov	r8, r0
			bytes_to_endian(structAssociate->tAcc,sizeof(structAssociate->tAcc),'l'),
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	3304      	adds	r3, #4
	int len =snprintf(UBXMessage->bufferDebug,  (size_t)UART_DEBUG_BUFFER_SIZE,
 8001438:	226c      	movs	r2, #108	@ 0x6c
 800143a:	2104      	movs	r1, #4
 800143c:	4618      	mov	r0, r3
 800143e:	f000 f91f 	bl	8001680 <bytes_to_endian>
 8001442:	4606      	mov	r6, r0
			bytes_to_endian(structAssociate->year,sizeof(structAssociate->year),'l'),
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	330c      	adds	r3, #12
	int len =snprintf(UBXMessage->bufferDebug,  (size_t)UART_DEBUG_BUFFER_SIZE,
 8001448:	226c      	movs	r2, #108	@ 0x6c
 800144a:	2102      	movs	r1, #2
 800144c:	4618      	mov	r0, r3
 800144e:	f000 f917 	bl	8001680 <bytes_to_endian>
 8001452:	6178      	str	r0, [r7, #20]
			bytes_to_endian(structAssociate->month,sizeof(structAssociate->month),'l'),
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	330e      	adds	r3, #14
	int len =snprintf(UBXMessage->bufferDebug,  (size_t)UART_DEBUG_BUFFER_SIZE,
 8001458:	226c      	movs	r2, #108	@ 0x6c
 800145a:	2101      	movs	r1, #1
 800145c:	4618      	mov	r0, r3
 800145e:	f000 f90f 	bl	8001680 <bytes_to_endian>
 8001462:	6138      	str	r0, [r7, #16]
			bytes_to_endian(structAssociate->day,sizeof(structAssociate->day),'l'),
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	330f      	adds	r3, #15
	int len =snprintf(UBXMessage->bufferDebug,  (size_t)UART_DEBUG_BUFFER_SIZE,
 8001468:	226c      	movs	r2, #108	@ 0x6c
 800146a:	2101      	movs	r1, #1
 800146c:	4618      	mov	r0, r3
 800146e:	f000 f907 	bl	8001680 <bytes_to_endian>
 8001472:	60f8      	str	r0, [r7, #12]
			bytes_to_endian(structAssociate->hour,sizeof(structAssociate->hour),'l'),
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	3310      	adds	r3, #16
	int len =snprintf(UBXMessage->bufferDebug,  (size_t)UART_DEBUG_BUFFER_SIZE,
 8001478:	226c      	movs	r2, #108	@ 0x6c
 800147a:	2101      	movs	r1, #1
 800147c:	4618      	mov	r0, r3
 800147e:	f000 f8ff 	bl	8001680 <bytes_to_endian>
 8001482:	60b8      	str	r0, [r7, #8]
			bytes_to_endian(structAssociate->min,sizeof(structAssociate->min),'l'),
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	3311      	adds	r3, #17
	int len =snprintf(UBXMessage->bufferDebug,  (size_t)UART_DEBUG_BUFFER_SIZE,
 8001488:	226c      	movs	r2, #108	@ 0x6c
 800148a:	2101      	movs	r1, #1
 800148c:	4618      	mov	r0, r3
 800148e:	f000 f8f7 	bl	8001680 <bytes_to_endian>
 8001492:	6078      	str	r0, [r7, #4]
			bytes_to_endian(structAssociate->sec,sizeof(structAssociate->sec),'l'),
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	3312      	adds	r3, #18
	int len =snprintf(UBXMessage->bufferDebug,  (size_t)UART_DEBUG_BUFFER_SIZE,
 8001498:	226c      	movs	r2, #108	@ 0x6c
 800149a:	2101      	movs	r1, #1
 800149c:	4618      	mov	r0, r3
 800149e:	f000 f8ef 	bl	8001680 <bytes_to_endian>
 80014a2:	6038      	str	r0, [r7, #0]
			bytes_to_endian(structAssociate->nano,sizeof(structAssociate->nano),'l'),
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	3308      	adds	r3, #8
	int len =snprintf(UBXMessage->bufferDebug,  (size_t)UART_DEBUG_BUFFER_SIZE,
 80014a8:	226c      	movs	r2, #108	@ 0x6c
 80014aa:	2104      	movs	r1, #4
 80014ac:	4618      	mov	r0, r3
 80014ae:	f000 f8e7 	bl	8001680 <bytes_to_endian>
 80014b2:	4604      	mov	r4, r0
			bytes_to_endian(structAssociate->valid,sizeof(structAssociate->valid),'l')
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	3313      	adds	r3, #19
	int len =snprintf(UBXMessage->bufferDebug,  (size_t)UART_DEBUG_BUFFER_SIZE,
 80014b8:	226c      	movs	r2, #108	@ 0x6c
 80014ba:	2101      	movs	r1, #1
 80014bc:	4618      	mov	r0, r3
 80014be:	f000 f8df 	bl	8001680 <bytes_to_endian>
 80014c2:	4603      	mov	r3, r0
 80014c4:	9308      	str	r3, [sp, #32]
 80014c6:	9407      	str	r4, [sp, #28]
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	9306      	str	r3, [sp, #24]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	9305      	str	r3, [sp, #20]
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	9304      	str	r3, [sp, #16]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	9303      	str	r3, [sp, #12]
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	9302      	str	r3, [sp, #8]
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	9301      	str	r3, [sp, #4]
 80014e0:	9600      	str	r6, [sp, #0]
 80014e2:	4643      	mov	r3, r8
 80014e4:	4a09      	ldr	r2, [pc, #36]	@ (800150c <debug_UBX_NAV_TIMEUTC+0x204>)
 80014e6:	21c8      	movs	r1, #200	@ 0xc8
 80014e8:	4628      	mov	r0, r5
 80014ea:	f00c faf1 	bl	800dad0 <sniprintf>
 80014ee:	6238      	str	r0, [r7, #32]
	);

	fill_unuse_memory(UBXMessage,len);
 80014f0:	6a39      	ldr	r1, [r7, #32]
 80014f2:	69f8      	ldr	r0, [r7, #28]
 80014f4:	f000 f997 	bl	8001826 <fill_unuse_memory>
	ITM_Port32(31)=20;
 80014f8:	4b03      	ldr	r3, [pc, #12]	@ (8001508 <debug_UBX_NAV_TIMEUTC+0x200>)
 80014fa:	2214      	movs	r2, #20
 80014fc:	601a      	str	r2, [r3, #0]
}
 80014fe:	bf00      	nop
 8001500:	3728      	adds	r7, #40	@ 0x28
 8001502:	46bd      	mov	sp, r7
 8001504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001508:	e000007c 	.word	0xe000007c
 800150c:	0800fcf8 	.word	0x0800fcf8

08001510 <debug_SetVal>:

void debug_SetVal(UBXMessage_parsed* UBXMessage,UBX_CFG_SETVAL* structAssociate){
 8001510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001512:	b087      	sub	sp, #28
 8001514:	af02      	add	r7, sp, #8
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]

	size_t offset = 0;
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]

	memcpy(&(structAssociate->version), UBXMessage->load->buffer + offset, sizeof(structAssociate->version));
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	f8d2 20cc 	ldr.w	r2, [r2, #204]	@ 0xcc
 8001526:	6811      	ldr	r1, [r2, #0]
 8001528:	68fa      	ldr	r2, [r7, #12]
 800152a:	440a      	add	r2, r1
 800152c:	7812      	ldrb	r2, [r2, #0]
 800152e:	701a      	strb	r2, [r3, #0]
	offset += sizeof((structAssociate->version));
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	3301      	adds	r3, #1
 8001534:	60fb      	str	r3, [r7, #12]

	memcpy(&(structAssociate->layers), UBXMessage->load->buffer + offset, sizeof(structAssociate->layers));
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	3301      	adds	r3, #1
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	f8d2 20cc 	ldr.w	r2, [r2, #204]	@ 0xcc
 8001540:	6811      	ldr	r1, [r2, #0]
 8001542:	68fa      	ldr	r2, [r7, #12]
 8001544:	440a      	add	r2, r1
 8001546:	7812      	ldrb	r2, [r2, #0]
 8001548:	701a      	strb	r2, [r3, #0]
	offset += sizeof((structAssociate->layers));
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	3301      	adds	r3, #1
 800154e:	60fb      	str	r3, [r7, #12]

	offset += sizeof((structAssociate->reserved));
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	3302      	adds	r3, #2
 8001554:	60fb      	str	r3, [r7, #12]

	memcpy(&(structAssociate->cfgData), UBXMessage->load->buffer + offset, sizeof(structAssociate->cfgData));
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	1d18      	adds	r0, r3, #4
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	4413      	add	r3, r2
 8001566:	22c8      	movs	r2, #200	@ 0xc8
 8001568:	4619      	mov	r1, r3
 800156a:	f00c fc2e 	bl	800ddca <memcpy>
	offset += sizeof((structAssociate->cfgData));
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	33c8      	adds	r3, #200	@ 0xc8
 8001572:	60fb      	str	r3, [r7, #12]
	//Diviser ici en flag
	//

	int len = snprintf(UBXMessage->bufferDebug, (size_t)UART_DEBUG_BUFFER_SIZE,
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	1d1c      	adds	r4, r3, #4
			"\r\n__debug_SetVal___\r\n"
			"version: %u\r\n"
			"layers: %u\r\n"
			"KeyId|Value: %s\r\n",
			bytes_to_endian(structAssociate->version,sizeof(structAssociate->version),'b'),
 8001578:	683b      	ldr	r3, [r7, #0]
	int len = snprintf(UBXMessage->bufferDebug, (size_t)UART_DEBUG_BUFFER_SIZE,
 800157a:	2262      	movs	r2, #98	@ 0x62
 800157c:	2101      	movs	r1, #1
 800157e:	4618      	mov	r0, r3
 8001580:	f000 f87e 	bl	8001680 <bytes_to_endian>
 8001584:	4606      	mov	r6, r0
			bytes_to_endian(structAssociate->layers,sizeof(structAssociate->layers),'l'),
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	3301      	adds	r3, #1
	int len = snprintf(UBXMessage->bufferDebug, (size_t)UART_DEBUG_BUFFER_SIZE,
 800158a:	226c      	movs	r2, #108	@ 0x6c
 800158c:	2101      	movs	r1, #1
 800158e:	4618      	mov	r0, r3
 8001590:	f000 f876 	bl	8001680 <bytes_to_endian>
 8001594:	4605      	mov	r5, r0
			array_to_hex_string(structAssociate->cfgData,sizeof(structAssociate->cfgData))
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	3304      	adds	r3, #4
	int len = snprintf(UBXMessage->bufferDebug, (size_t)UART_DEBUG_BUFFER_SIZE,
 800159a:	21c8      	movs	r1, #200	@ 0xc8
 800159c:	4618      	mov	r0, r3
 800159e:	f000 f959 	bl	8001854 <array_to_hex_string>
 80015a2:	4603      	mov	r3, r0
 80015a4:	9301      	str	r3, [sp, #4]
 80015a6:	9500      	str	r5, [sp, #0]
 80015a8:	4633      	mov	r3, r6
 80015aa:	4a07      	ldr	r2, [pc, #28]	@ (80015c8 <debug_SetVal+0xb8>)
 80015ac:	21c8      	movs	r1, #200	@ 0xc8
 80015ae:	4620      	mov	r0, r4
 80015b0:	f00c fa8e 	bl	800dad0 <sniprintf>
 80015b4:	60b8      	str	r0, [r7, #8]
	);
	fill_unuse_memory(UBXMessage,len);
 80015b6:	68b9      	ldr	r1, [r7, #8]
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f000 f934 	bl	8001826 <fill_unuse_memory>
}
 80015be:	bf00      	nop
 80015c0:	3714      	adds	r7, #20
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015c6:	bf00      	nop
 80015c8:	0800fd84 	.word	0x0800fd84

080015cc <debug_PollMessage>:
void debug_PollMessage(UBXMessage_parsed* UBXMessage,UBX_CFG_MSG* structAssociate){
 80015cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ce:	b087      	sub	sp, #28
 80015d0:	af02      	add	r7, sp, #8
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
	size_t offset = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]

		memcpy(&(structAssociate->msgClass), UBXMessage->load->buffer + offset, sizeof(structAssociate->msgClass));
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	f8d2 20cc 	ldr.w	r2, [r2, #204]	@ 0xcc
 80015e2:	6811      	ldr	r1, [r2, #0]
 80015e4:	68fa      	ldr	r2, [r7, #12]
 80015e6:	440a      	add	r2, r1
 80015e8:	7812      	ldrb	r2, [r2, #0]
 80015ea:	701a      	strb	r2, [r3, #0]
		offset += sizeof((structAssociate->msgClass));
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	3301      	adds	r3, #1
 80015f0:	60fb      	str	r3, [r7, #12]

		memcpy(&(structAssociate->msgID), UBXMessage->load->buffer + offset, sizeof(structAssociate->msgID));
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	3301      	adds	r3, #1
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	f8d2 20cc 	ldr.w	r2, [r2, #204]	@ 0xcc
 80015fc:	6811      	ldr	r1, [r2, #0]
 80015fe:	68fa      	ldr	r2, [r7, #12]
 8001600:	440a      	add	r2, r1
 8001602:	7812      	ldrb	r2, [r2, #0]
 8001604:	701a      	strb	r2, [r3, #0]
		offset += sizeof((structAssociate->msgID));
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	3301      	adds	r3, #1
 800160a:	60fb      	str	r3, [r7, #12]

		memcpy(&(structAssociate->rate), UBXMessage->load->buffer + offset, sizeof(structAssociate->rate));
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	3302      	adds	r3, #2
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	f8d2 20cc 	ldr.w	r2, [r2, #204]	@ 0xcc
 8001616:	6811      	ldr	r1, [r2, #0]
 8001618:	68fa      	ldr	r2, [r7, #12]
 800161a:	440a      	add	r2, r1
 800161c:	7812      	ldrb	r2, [r2, #0]
 800161e:	701a      	strb	r2, [r3, #0]
		offset += sizeof((structAssociate->rate));
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	3301      	adds	r3, #1
 8001624:	60fb      	str	r3, [r7, #12]

		int len = snprintf(UBXMessage->bufferDebug,  (size_t)UART_DEBUG_BUFFER_SIZE,
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	1d1c      	adds	r4, r3, #4
				"\r\n__debug_PollMsg___\r\n"
				"msgClass: %u\r\n"
				"msgID: %u\r\n"
				"rate :%u\r\n",
				bytes_to_endian(structAssociate->msgClass,sizeof(structAssociate->msgClass),'l'),
 800162a:	683b      	ldr	r3, [r7, #0]
		int len = snprintf(UBXMessage->bufferDebug,  (size_t)UART_DEBUG_BUFFER_SIZE,
 800162c:	226c      	movs	r2, #108	@ 0x6c
 800162e:	2101      	movs	r1, #1
 8001630:	4618      	mov	r0, r3
 8001632:	f000 f825 	bl	8001680 <bytes_to_endian>
 8001636:	4606      	mov	r6, r0
				bytes_to_endian(structAssociate->msgID,sizeof(structAssociate->msgID),'l'),
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	3301      	adds	r3, #1
		int len = snprintf(UBXMessage->bufferDebug,  (size_t)UART_DEBUG_BUFFER_SIZE,
 800163c:	226c      	movs	r2, #108	@ 0x6c
 800163e:	2101      	movs	r1, #1
 8001640:	4618      	mov	r0, r3
 8001642:	f000 f81d 	bl	8001680 <bytes_to_endian>
 8001646:	4605      	mov	r5, r0
				bytes_to_endian(structAssociate->rate,sizeof(structAssociate->rate),'l')
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	3302      	adds	r3, #2
		int len = snprintf(UBXMessage->bufferDebug,  (size_t)UART_DEBUG_BUFFER_SIZE,
 800164c:	226c      	movs	r2, #108	@ 0x6c
 800164e:	2101      	movs	r1, #1
 8001650:	4618      	mov	r0, r3
 8001652:	f000 f815 	bl	8001680 <bytes_to_endian>
 8001656:	4603      	mov	r3, r0
 8001658:	9301      	str	r3, [sp, #4]
 800165a:	9500      	str	r5, [sp, #0]
 800165c:	4633      	mov	r3, r6
 800165e:	4a07      	ldr	r2, [pc, #28]	@ (800167c <debug_PollMessage+0xb0>)
 8001660:	21c8      	movs	r1, #200	@ 0xc8
 8001662:	4620      	mov	r0, r4
 8001664:	f00c fa34 	bl	800dad0 <sniprintf>
 8001668:	60b8      	str	r0, [r7, #8]
		);
		fill_unuse_memory(UBXMessage,len);
 800166a:	68b9      	ldr	r1, [r7, #8]
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f000 f8da 	bl	8001826 <fill_unuse_memory>

}
 8001672:	bf00      	nop
 8001674:	3714      	adds	r7, #20
 8001676:	46bd      	mov	sp, r7
 8001678:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800167a:	bf00      	nop
 800167c:	0800fdc4 	.word	0x0800fdc4

08001680 <bytes_to_endian>:




unsigned int bytes_to_endian(uint8_t attr[], size_t length, char type_endian) {
 8001680:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001684:	b097      	sub	sp, #92	@ 0x5c
 8001686:	af00      	add	r7, sp, #0
 8001688:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800168a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800168c:	4613      	mov	r3, r2
 800168e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint64_t result = 0;
 8001692:	f04f 0200 	mov.w	r2, #0
 8001696:	f04f 0300 	mov.w	r3, #0
 800169a:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	if (type_endian == 'l') { // little-endian
 800169e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80016a2:	2b6c      	cmp	r3, #108	@ 0x6c
 80016a4:	d136      	bne.n	8001714 <bytes_to_endian+0x94>
		for (size_t i = 0; i < length; ++i) {
 80016a6:	2300      	movs	r3, #0
 80016a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80016aa:	e02e      	b.n	800170a <bytes_to_endian+0x8a>
			result |= ((uint64_t)attr[i]) << (i * 8);
 80016ac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80016ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80016b0:	4413      	add	r3, r2
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	2200      	movs	r2, #0
 80016b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80016ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80016bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80016be:	00db      	lsls	r3, r3, #3
 80016c0:	f1a3 0120 	sub.w	r1, r3, #32
 80016c4:	f1c3 0220 	rsb	r2, r3, #32
 80016c8:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 80016cc:	4628      	mov	r0, r5
 80016ce:	fa00 fb03 	lsl.w	fp, r0, r3
 80016d2:	4620      	mov	r0, r4
 80016d4:	fa00 f101 	lsl.w	r1, r0, r1
 80016d8:	ea4b 0b01 	orr.w	fp, fp, r1
 80016dc:	4621      	mov	r1, r4
 80016de:	fa21 f202 	lsr.w	r2, r1, r2
 80016e2:	ea4b 0b02 	orr.w	fp, fp, r2
 80016e6:	4622      	mov	r2, r4
 80016e8:	fa02 fa03 	lsl.w	sl, r2, r3
 80016ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80016f0:	ea42 010a 	orr.w	r1, r2, sl
 80016f4:	6139      	str	r1, [r7, #16]
 80016f6:	ea43 030b 	orr.w	r3, r3, fp
 80016fa:	617b      	str	r3, [r7, #20]
 80016fc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001700:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
		for (size_t i = 0; i < length; ++i) {
 8001704:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001706:	3301      	adds	r3, #1
 8001708:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800170a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800170c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800170e:	429a      	cmp	r2, r3
 8001710:	d3cc      	bcc.n	80016ac <bytes_to_endian+0x2c>
 8001712:	e081      	b.n	8001818 <bytes_to_endian+0x198>
		}
	} else if (type_endian == 'b') { // big-endian
 8001714:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001718:	2b62      	cmp	r3, #98	@ 0x62
 800171a:	d138      	bne.n	800178e <bytes_to_endian+0x10e>
		for (size_t i = 0; i < length; ++i) {
 800171c:	2300      	movs	r3, #0
 800171e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001720:	e030      	b.n	8001784 <bytes_to_endian+0x104>
			result |= ((uint64_t)attr[i]) << ((sizeof(uint64_t) - i - 1) * 8);
 8001722:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001724:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001726:	4413      	add	r3, r2
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	b2db      	uxtb	r3, r3
 800172c:	2200      	movs	r2, #0
 800172e:	623b      	str	r3, [r7, #32]
 8001730:	627a      	str	r2, [r7, #36]	@ 0x24
 8001732:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001734:	f1c3 0307 	rsb	r3, r3, #7
 8001738:	00db      	lsls	r3, r3, #3
 800173a:	f1a3 0120 	sub.w	r1, r3, #32
 800173e:	f1c3 0220 	rsb	r2, r3, #32
 8001742:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001746:	4628      	mov	r0, r5
 8001748:	fa00 f903 	lsl.w	r9, r0, r3
 800174c:	4620      	mov	r0, r4
 800174e:	fa00 f101 	lsl.w	r1, r0, r1
 8001752:	ea49 0901 	orr.w	r9, r9, r1
 8001756:	4621      	mov	r1, r4
 8001758:	fa21 f202 	lsr.w	r2, r1, r2
 800175c:	ea49 0902 	orr.w	r9, r9, r2
 8001760:	4622      	mov	r2, r4
 8001762:	fa02 f803 	lsl.w	r8, r2, r3
 8001766:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800176a:	ea42 0108 	orr.w	r1, r2, r8
 800176e:	60b9      	str	r1, [r7, #8]
 8001770:	ea43 0309 	orr.w	r3, r3, r9
 8001774:	60fb      	str	r3, [r7, #12]
 8001776:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800177a:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
		for (size_t i = 0; i < length; ++i) {
 800177e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001780:	3301      	adds	r3, #1
 8001782:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001784:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001788:	429a      	cmp	r2, r3
 800178a:	d3ca      	bcc.n	8001722 <bytes_to_endian+0xa2>
 800178c:	e044      	b.n	8001818 <bytes_to_endian+0x198>
		}
	}
	else if (type_endian == '2'){ //little-endiand 2's complements
 800178e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001792:	2b32      	cmp	r3, #50	@ 0x32
 8001794:	d140      	bne.n	8001818 <bytes_to_endian+0x198>
		if (attr[length - 1] & 0x80) { // Check if the most significant bit (MSB) is 1 (indicating negative number)
 8001796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001798:	3b01      	subs	r3, #1
 800179a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800179c:	4413      	add	r3, r2
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	b25b      	sxtb	r3, r3
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	da05      	bge.n	80017b2 <bytes_to_endian+0x132>
			result = -1; // Initialize result to all 1s for negative number
 80017a6:	f04f 32ff 	mov.w	r2, #4294967295
 80017aa:	f04f 33ff 	mov.w	r3, #4294967295
 80017ae:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
		}
		for (size_t i = 0; i < length; ++i) {
 80017b2:	2300      	movs	r3, #0
 80017b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80017b6:	e02b      	b.n	8001810 <bytes_to_endian+0x190>
			result |= ((uint64_t)attr[i]) << (i * 8);
 80017b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80017ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80017bc:	4413      	add	r3, r2
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	2200      	movs	r2, #0
 80017c4:	61bb      	str	r3, [r7, #24]
 80017c6:	61fa      	str	r2, [r7, #28]
 80017c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	f1a3 0120 	sub.w	r1, r3, #32
 80017d0:	f1c3 0220 	rsb	r2, r3, #32
 80017d4:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80017d8:	4648      	mov	r0, r9
 80017da:	fa00 f503 	lsl.w	r5, r0, r3
 80017de:	4640      	mov	r0, r8
 80017e0:	fa00 f101 	lsl.w	r1, r0, r1
 80017e4:	430d      	orrs	r5, r1
 80017e6:	4641      	mov	r1, r8
 80017e8:	fa21 f202 	lsr.w	r2, r1, r2
 80017ec:	4315      	orrs	r5, r2
 80017ee:	4642      	mov	r2, r8
 80017f0:	fa02 f403 	lsl.w	r4, r2, r3
 80017f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80017f8:	ea42 0104 	orr.w	r1, r2, r4
 80017fc:	6039      	str	r1, [r7, #0]
 80017fe:	432b      	orrs	r3, r5
 8001800:	607b      	str	r3, [r7, #4]
 8001802:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001806:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
		for (size_t i = 0; i < length; ++i) {
 800180a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800180c:	3301      	adds	r3, #1
 800180e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001810:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001814:	429a      	cmp	r2, r3
 8001816:	d3cf      	bcc.n	80017b8 <bytes_to_endian+0x138>
		}
	}
	return result;
 8001818:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 800181a:	4618      	mov	r0, r3
 800181c:	375c      	adds	r7, #92	@ 0x5c
 800181e:	46bd      	mov	sp, r7
 8001820:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001824:	4770      	bx	lr

08001826 <fill_unuse_memory>:
void fill_unuse_memory(UBXMessage_parsed* UBXMessage,int len_use){
 8001826:	b580      	push	{r7, lr}
 8001828:	b082      	sub	sp, #8
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
 800182e:	6039      	str	r1, [r7, #0]
	if (len_use < sizeof(UBXMessage->bufferDebug)) {
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	2bc7      	cmp	r3, #199	@ 0xc7
 8001834:	d80a      	bhi.n	800184c <fill_unuse_memory+0x26>
		memset(UBXMessage->bufferDebug + len_use, '/', sizeof(UBXMessage->bufferDebug) - len_use);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	1d1a      	adds	r2, r3, #4
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	18d0      	adds	r0, r2, r3
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 8001844:	461a      	mov	r2, r3
 8001846:	212f      	movs	r1, #47	@ 0x2f
 8001848:	f00c f9d9 	bl	800dbfe <memset>
	}
}
 800184c:	bf00      	nop
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <array_to_hex_string>:
char* array_to_hex_string(const uint8_t* array, size_t length) {
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
	// Taille maximale pour le buffer
	static char hex_string[UART_RX_BUFFER_SIZE * 2 + 1];
	for (size_t i = 0; i < length; ++i) {
 800185e:	2300      	movs	r3, #0
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	e00e      	b.n	8001882 <array_to_hex_string+0x2e>
		sprintf(hex_string + (i * 2), "%02x", array[i]);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	4a0d      	ldr	r2, [pc, #52]	@ (80018a0 <array_to_hex_string+0x4c>)
 800186a:	1898      	adds	r0, r3, r2
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	4413      	add	r3, r2
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	461a      	mov	r2, r3
 8001876:	490b      	ldr	r1, [pc, #44]	@ (80018a4 <array_to_hex_string+0x50>)
 8001878:	f00c f95e 	bl	800db38 <siprintf>
	for (size_t i = 0; i < length; ++i) {
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	3301      	adds	r3, #1
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	429a      	cmp	r2, r3
 8001888:	d3ec      	bcc.n	8001864 <array_to_hex_string+0x10>
	}
	hex_string[length * 2] = '\0';
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	4a04      	ldr	r2, [pc, #16]	@ (80018a0 <array_to_hex_string+0x4c>)
 8001890:	2100      	movs	r1, #0
 8001892:	54d1      	strb	r1, [r2, r3]
	return hex_string;
 8001894:	4b02      	ldr	r3, [pc, #8]	@ (80018a0 <array_to_hex_string+0x4c>)
}
 8001896:	4618      	mov	r0, r3
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20000568 	.word	0x20000568
 80018a4:	0800fe00 	.word	0x0800fe00

080018a8 <LORACom_Init>:
#include "LORA/LORACom.h"
#include "LORA/RFM9x.h"
LORACom_HandleTypeDef hLORACom;

void LORACom_Init(SPI_HandleTypeDef* hspi,UART_HandleTypeDef* huartDebug)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
	hLORACom.hspi = hspi;
 80018b2:	4a06      	ldr	r2, [pc, #24]	@ (80018cc <LORACom_Init+0x24>)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6013      	str	r3, [r2, #0]
	hLORACom.huartDebug = huartDebug;
 80018b8:	4a04      	ldr	r2, [pc, #16]	@ (80018cc <LORACom_Init+0x24>)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	6053      	str	r3, [r2, #4]

	LORACom_SPIActivate(&hLORACom);
 80018be:	4803      	ldr	r0, [pc, #12]	@ (80018cc <LORACom_Init+0x24>)
 80018c0:	f000 f806 	bl	80018d0 <LORACom_SPIActivate>
}
 80018c4:	bf00      	nop
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	200006fc 	.word	0x200006fc

080018d0 <LORACom_SPIActivate>:
void LORACom_SPIActivate(LORACom_HandleTypeDef* hLORA){
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
	HAL_SPI_Receive_IT(hLORA->hspi, hLORA->RxBuffer, MAX_SPI_SIZE);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6818      	ldr	r0, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3308      	adds	r3, #8
 80018e0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80018e4:	4619      	mov	r1, r3
 80018e6:	f005 f80b 	bl	8006900 <HAL_SPI_Receive_IT>
}
 80018ea:	bf00      	nop
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <LORA_Send>:
void LORA_Send(LORA_Header* header, uint8_t* payload){
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b0c2      	sub	sp, #264	@ 0x108
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80018fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001900:	6018      	str	r0, [r3, #0]
 8001902:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001906:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800190a:	6019      	str	r1, [r3, #0]
    uint8_t buffer[RFM9x_FIFO_SIZE];

    // Ajouter l'en-tête
    buffer[0] = header->recipient;
 800190c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001910:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	781a      	ldrb	r2, [r3, #0]
 8001918:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800191c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001920:	701a      	strb	r2, [r3, #0]
    buffer[1] = header->sender;
 8001922:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001926:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	785a      	ldrb	r2, [r3, #1]
 800192e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001932:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001936:	705a      	strb	r2, [r3, #1]
    buffer[2] = header->type;
 8001938:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800193c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	789a      	ldrb	r2, [r3, #2]
 8001944:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001948:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800194c:	709a      	strb	r2, [r3, #2]
    buffer[3] = header->len_payload;
 800194e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001952:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	78da      	ldrb	r2, [r3, #3]
 800195a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800195e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001962:	70da      	strb	r2, [r3, #3]

    // Ajouter la charge utile
    memcpy(buffer + 4 , payload, header->len_payload);
 8001964:	f107 0308 	add.w	r3, r7, #8
 8001968:	3304      	adds	r3, #4
 800196a:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800196e:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8001972:	6812      	ldr	r2, [r2, #0]
 8001974:	78d2      	ldrb	r2, [r2, #3]
 8001976:	4610      	mov	r0, r2
 8001978:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800197c:	f5a2 7184 	sub.w	r1, r2, #264	@ 0x108
 8001980:	4602      	mov	r2, r0
 8001982:	6809      	ldr	r1, [r1, #0]
 8001984:	4618      	mov	r0, r3
 8001986:	f00c fa20 	bl	800ddca <memcpy>
    RFM9x_Send(buffer, header->len_payload + 4);
 800198a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800198e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	78db      	ldrb	r3, [r3, #3]
 8001996:	3304      	adds	r3, #4
 8001998:	b2da      	uxtb	r2, r3
 800199a:	f107 0308 	add.w	r3, r7, #8
 800199e:	4611      	mov	r1, r2
 80019a0:	4618      	mov	r0, r3
 80019a2:	f000 f895 	bl	8001ad0 <RFM9x_Send>
    RFM9x_SetMode_Receive();
 80019a6:	f000 f94e 	bl	8001c46 <RFM9x_SetMode_Receive>
}
 80019aa:	bf00      	nop
 80019ac:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <LORA_debug>:


void LORA_debug(char* flag, uint8_t* value)
{
 80019b4:	b590      	push	{r4, r7, lr}
 80019b6:	b0b7      	sub	sp, #220	@ 0xdc
 80019b8:	af02      	add	r7, sp, #8
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
	char message[200];
	if (value != NULL){
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d009      	beq.n	80019d8 <LORA_debug+0x24>
		snprintf(message, sizeof(message),"%s: %s\r\n",flag,value);
 80019c4:	f107 0008 	add.w	r0, r7, #8
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	9300      	str	r3, [sp, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4a10      	ldr	r2, [pc, #64]	@ (8001a10 <LORA_debug+0x5c>)
 80019d0:	21c8      	movs	r1, #200	@ 0xc8
 80019d2:	f00c f87d 	bl	800dad0 <sniprintf>
 80019d6:	e006      	b.n	80019e6 <LORA_debug+0x32>
	}
	else {
		snprintf(message,sizeof(message), "%s\r\n",flag);
 80019d8:	f107 0008 	add.w	r0, r7, #8
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4a0d      	ldr	r2, [pc, #52]	@ (8001a14 <LORA_debug+0x60>)
 80019e0:	21c8      	movs	r1, #200	@ 0xc8
 80019e2:	f00c f875 	bl	800dad0 <sniprintf>
	}
    HAL_UART_Transmit(hLORACom.huartDebug, (uint8_t*)message, strlen(message),HAL_MAX_DELAY);
 80019e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001a18 <LORA_debug+0x64>)
 80019e8:	685c      	ldr	r4, [r3, #4]
 80019ea:	f107 0308 	add.w	r3, r7, #8
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7fe fc4e 	bl	8000290 <strlen>
 80019f4:	4603      	mov	r3, r0
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	f107 0108 	add.w	r1, r7, #8
 80019fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001a00:	4620      	mov	r0, r4
 8001a02:	f006 f9cb 	bl	8007d9c <HAL_UART_Transmit>
}
 8001a06:	bf00      	nop
 8001a08:	37d4      	adds	r7, #212	@ 0xd4
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd90      	pop	{r4, r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	0800fe08 	.word	0x0800fe08
 8001a14:	0800fe14 	.word	0x0800fe14
 8001a18:	200006fc 	.word	0x200006fc

08001a1c <RFM9x_Init>:
/* Private function prototypes -----------------------------------------------*/
/* User code -----------------------------------------------------------------*/


void RFM9x_Init( void )
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
	// Assert Reset low on the RFM9x
	RF_TestSpi();
 8001a22:	f000 f99d 	bl	8001d60 <RF_TestSpi>
	HAL_GPIO_WritePin(RFM_RST_GPIO_Port, RFM_RST_Pin, GPIO_PIN_RESET);
 8001a26:	2200      	movs	r2, #0
 8001a28:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a2c:	4826      	ldr	r0, [pc, #152]	@ (8001ac8 <RFM9x_Init+0xac>)
 8001a2e:	f002 fde1 	bl	80045f4 <HAL_GPIO_WritePin>
	//Delay_ms(10);
	HAL_GPIO_WritePin(RFM_RST_GPIO_Port, RFM_RST_Pin, GPIO_PIN_SET);
 8001a32:	2201      	movs	r2, #1
 8001a34:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a38:	4823      	ldr	r0, [pc, #140]	@ (8001ac8 <RFM9x_Init+0xac>)
 8001a3a:	f002 fddb 	bl	80045f4 <HAL_GPIO_WritePin>
	//Delay_ms(10);
	RF_TestSpi();
 8001a3e:	f000 f98f 	bl	8001d60 <RF_TestSpi>
	// Set sleep mode, so we can also set RFM9x mode:
	RFM9x_WriteReg(RFM9x_REG_01_OP_MODE, RFM9x_MODE_SLEEP | RFM9x_LONG_RANGE_MODE);
 8001a42:	2180      	movs	r1, #128	@ 0x80
 8001a44:	2001      	movs	r0, #1
 8001a46:	f000 f94f 	bl	8001ce8 <RFM9x_WriteReg>

	// Wait for sleep mode to take over from say, CAD
	//HDelay_ms(10);

	// Check we are in sleep mode, with RFM9x set
	if (RFM9x_ReadReg(RFM9x_REG_01_OP_MODE) != (RFM9x_MODE_SLEEP | RFM9x_LONG_RANGE_MODE))
 8001a4a:	2001      	movs	r0, #1
 8001a4c:	f000 f90c 	bl	8001c68 <RFM9x_ReadReg>
	{
		//	TODO: Throw RFM9x init error
	}
	// Either Rx or Tx can use the entire 256 byte FIFO, but not at same time
	RFM9x_WriteReg(RFM9x_REG_0E_FIFO_TX_BASE_ADDR, 0x00);
 8001a50:	2100      	movs	r1, #0
 8001a52:	200e      	movs	r0, #14
 8001a54:	f000 f948 	bl	8001ce8 <RFM9x_WriteReg>
	RFM9x_WriteReg(RFM9x_REG_0F_FIFO_RX_BASE_ADDR, 0x80);
 8001a58:	2180      	movs	r1, #128	@ 0x80
 8001a5a:	200f      	movs	r0, #15
 8001a5c:	f000 f944 	bl	8001ce8 <RFM9x_WriteReg>

	// BW = 7: 125 kHz
	// CodingRate = 1:  4/5 code rate
	// ImplicitHeaderModeOn = 1, Implicit Header mode
	RFM9x_WriteReg(RFM9x_REG_1D_MODEM_CONFIG1, 0x72);
 8001a60:	2172      	movs	r1, #114	@ 0x72
 8001a62:	201d      	movs	r0, #29
 8001a64:	f000 f940 	bl	8001ce8 <RFM9x_WriteReg>
	// SymbTimeout[9:8] = 0
	//RFM9x_WriteReg(RFM9x_REG_1E_MODEM_CONFIG2, 0x74);

	// LowDataRateOptimize = 1 : Enabled; mandated for when the symbol length exceeds 16ms
	// AgcAutoOn = 0 : LNA gain set by register LnaGain
	RFM9x_WriteReg(RFM9x_REG_26_MODEM_CONFIG3, 0x04);
 8001a68:	2104      	movs	r1, #4
 8001a6a:	2026      	movs	r0, #38	@ 0x26
 8001a6c:	f000 f93c 	bl	8001ce8 <RFM9x_WriteReg>

	// Preamble Length = 16;
	RFM9x_WriteReg(RFM9x_REG_20_PREAMBLE_MSB, 0x00);
 8001a70:	2100      	movs	r1, #0
 8001a72:	2020      	movs	r0, #32
 8001a74:	f000 f938 	bl	8001ce8 <RFM9x_WriteReg>
	RFM9x_WriteReg(RFM9x_REG_21_PREAMBLE_LSB, 0x10);
 8001a78:	2110      	movs	r1, #16
 8001a7a:	2021      	movs	r0, #33	@ 0x21
 8001a7c:	f000 f934 	bl	8001ce8 <RFM9x_WriteReg>
	//   FRF[23:0] = Freq / Fstep
	//   Fstep = Fxosc / 2^^19
	// where:
	//   Freq = 433 MHz
	//   Fxosc = 32 MHz
	uint32_t frf = (uint32_t) ( 433000000.0 / (32000000.0 / 524288.0) ) ;
 8001a80:	4b12      	ldr	r3, [pc, #72]	@ (8001acc <RFM9x_Init+0xb0>)
 8001a82:	607b      	str	r3, [r7, #4]
	RFM9x_WriteReg(RFM9x_REG_06_FRF_MSB, (frf >> 16) & 0xff);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	0c1b      	lsrs	r3, r3, #16
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	2006      	movs	r0, #6
 8001a8e:	f000 f92b 	bl	8001ce8 <RFM9x_WriteReg>
	RFM9x_WriteReg(RFM9x_REG_07_FRF_MID, (frf >> 8) & 0xff);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	0a1b      	lsrs	r3, r3, #8
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	4619      	mov	r1, r3
 8001a9a:	2007      	movs	r0, #7
 8001a9c:	f000 f924 	bl	8001ce8 <RFM9x_WriteReg>
	RFM9x_WriteReg(RFM9x_REG_08_FRF_LSB, frf & 0xff);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	2008      	movs	r0, #8
 8001aa8:	f000 f91e 	bl	8001ce8 <RFM9x_WriteReg>

	// PaDac = 4 : Disables the +20dBm option on PA_BOOST pin
	RFM9x_WriteReg(RFM9x_REG_4D_PA_DAC, 0x04);
 8001aac:	2104      	movs	r1, #4
 8001aae:	204d      	movs	r0, #77	@ 0x4d
 8001ab0:	f000 f91a 	bl	8001ce8 <RFM9x_WriteReg>

	// PaSelect = 1 : PA_BOOST pin (instead of RFO pin).
	// MaxPower = 0 : Pmax=10.8+0.6*MaxPower [dBm]
	// Output Power = 8 : 10dBm from Pout=17-(15-OutputPower) if PaSelect = 1. RadioHead says this is 13 dBm, though
	//RFM9x_WriteReg(RFM9x_REG_09_PA_CONFIG, 0x88);
	RFM9x_WriteReg(RFM9x_REG_09_PA_CONFIG, 0xcf);
 8001ab4:	21cf      	movs	r1, #207	@ 0xcf
 8001ab6:	2009      	movs	r0, #9
 8001ab8:	f000 f916 	bl	8001ce8 <RFM9x_WriteReg>

	//On decide que le Lora est par defaut en mode ECOUTE
	RFM9x_SetMode_Receive();
 8001abc:	f000 f8c3 	bl	8001c46 <RFM9x_SetMode_Receive>
}
 8001ac0:	bf00      	nop
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	48001000 	.word	0x48001000
 8001acc:	006c4000 	.word	0x006c4000

08001ad0 <RFM9x_Send>:


void RFM9x_Send(uint8_t* data, uint8_t len)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	460b      	mov	r3, r1
 8001ada:	70fb      	strb	r3, [r7, #3]
		if (!waitCAD()){
			return 0;  // Check channel activity
		}
	}*/
	// Position at the beginning of the FIFO
	RFM9x_WriteReg(RFM9x_REG_0D_FIFO_ADDR_PTR, 0);
 8001adc:	2100      	movs	r1, #0
 8001ade:	200d      	movs	r0, #13
 8001ae0:	f000 f902 	bl	8001ce8 <RFM9x_WriteReg>

	// The payload data
	for(int i=0; i < len; i++)
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	e00a      	b.n	8001b00 <RFM9x_Send+0x30>
	{
		RFM9x_WriteReg(RFM9x_REG_00_FIFO, data[i]);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	4413      	add	r3, r2
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	4619      	mov	r1, r3
 8001af4:	2000      	movs	r0, #0
 8001af6:	f000 f8f7 	bl	8001ce8 <RFM9x_WriteReg>
	for(int i=0; i < len; i++)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	3301      	adds	r3, #1
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	78fb      	ldrb	r3, [r7, #3]
 8001b02:	68fa      	ldr	r2, [r7, #12]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	dbf0      	blt.n	8001aea <RFM9x_Send+0x1a>
	}
	// The message length
	RFM9x_WriteReg(RFM9x_REG_22_PAYLOAD_LENGTH, len);
 8001b08:	78fb      	ldrb	r3, [r7, #3]
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	2022      	movs	r0, #34	@ 0x22
 8001b0e:	f000 f8eb 	bl	8001ce8 <RFM9x_WriteReg>

	// Start the transmitter
	RFM9x_WriteReg(RFM9x_REG_01_OP_MODE, RFM9x_MODE_TX);
 8001b12:	2103      	movs	r1, #3
 8001b14:	2001      	movs	r0, #1
 8001b16:	f000 f8e7 	bl	8001ce8 <RFM9x_WriteReg>
	vTaskDelay(5);
 8001b1a:	2005      	movs	r0, #5
 8001b1c:	f009 fb72 	bl	800b204 <vTaskDelay>
	// Interrupt on DIO0 for TxDone
	RFM9x_WriteReg(RFM9x_REG_40_DIO_MAPPING1, 0x40);
 8001b20:	2140      	movs	r1, #64	@ 0x40
 8001b22:	2040      	movs	r0, #64	@ 0x40
 8001b24:	f000 f8e0 	bl	8001ce8 <RFM9x_WriteReg>
	vTaskDelay(1);
 8001b28:	2001      	movs	r0, #1
 8001b2a:	f009 fb6b 	bl	800b204 <vTaskDelay>

	//LORA_debug_hexa("\r\nRFM9x SEND", (uint8_t*)data,len);
}
 8001b2e:	bf00      	nop
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <RFM9x_Receive>:
			return 0;
		}
	}
	return 1;  // No activity detected
}*/
void RFM9x_Receive(LORA_Message* LORA_Receive_Message){
 8001b36:	b590      	push	{r4, r7, lr}
 8001b38:	b087      	sub	sp, #28
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
	// Number of bytes received
	uint8_t start = RFM9x_ReadReg(RFM9x_REG_10_FIFO_RX_CURRENT_ADDR);
 8001b3e:	2010      	movs	r0, #16
 8001b40:	f000 f892 	bl	8001c68 <RFM9x_ReadReg>
 8001b44:	4603      	mov	r3, r0
 8001b46:	74fb      	strb	r3, [r7, #19]
	uint8_t len = RFM9x_ReadReg(RFM9x_REG_13_RX_NB_BYTES);
 8001b48:	2013      	movs	r0, #19
 8001b4a:	f000 f88d 	bl	8001c68 <RFM9x_ReadReg>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	74bb      	strb	r3, [r7, #18]

	if (len<4){
 8001b52:	7cbb      	ldrb	r3, [r7, #18]
 8001b54:	2b03      	cmp	r3, #3
 8001b56:	d809      	bhi.n	8001b6c <RFM9x_Receive+0x36>
		LORA_Receive_Message->RxNbrBytes=0;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	709a      	strb	r2, [r3, #2]
		RFM9x_WriteReg( RFM9x_REG_12_IRQ_FLAGS, 0xFF );
 8001b5e:	21ff      	movs	r1, #255	@ 0xff
 8001b60:	2012      	movs	r0, #18
 8001b62:	f000 f8c1 	bl	8001ce8 <RFM9x_WriteReg>
		RFM9x_SetMode_Receive();
 8001b66:	f000 f86e 	bl	8001c46 <RFM9x_SetMode_Receive>
		return;
 8001b6a:	e069      	b.n	8001c40 <RFM9x_Receive+0x10a>
	}
	// get the read data
	if (len > (RFM9x_FIFO_SIZE)) len = RFM9x_FIFO_SIZE;

	RFM9x_WriteReg(RFM9x_REG_0D_FIFO_ADDR_PTR, start);
 8001b6c:	7cfb      	ldrb	r3, [r7, #19]
 8001b6e:	4619      	mov	r1, r3
 8001b70:	200d      	movs	r0, #13
 8001b72:	f000 f8b9 	bl	8001ce8 <RFM9x_WriteReg>
	uint8_t* data = (uint8_t*)pvPortMalloc(RFM9x_FIFO_SIZE * sizeof(uint8_t));
 8001b76:	20ff      	movs	r0, #255	@ 0xff
 8001b78:	f00a ffb0 	bl	800cadc <pvPortMalloc>
 8001b7c:	60f8      	str	r0, [r7, #12]
	for (int i = 0; i < len; i++)
 8001b7e:	2300      	movs	r3, #0
 8001b80:	617b      	str	r3, [r7, #20]
 8001b82:	e00a      	b.n	8001b9a <RFM9x_Receive+0x64>
	{
		data[i] = RFM9x_ReadReg(RFM9x_REG_00_FIFO);
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	68fa      	ldr	r2, [r7, #12]
 8001b88:	18d4      	adds	r4, r2, r3
 8001b8a:	2000      	movs	r0, #0
 8001b8c:	f000 f86c 	bl	8001c68 <RFM9x_ReadReg>
 8001b90:	4603      	mov	r3, r0
 8001b92:	7023      	strb	r3, [r4, #0]
	for (int i = 0; i < len; i++)
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	3301      	adds	r3, #1
 8001b98:	617b      	str	r3, [r7, #20]
 8001b9a:	7cbb      	ldrb	r3, [r7, #18]
 8001b9c:	697a      	ldr	r2, [r7, #20]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	dbf0      	blt.n	8001b84 <RFM9x_Receive+0x4e>
	}
	LORA_Receive_Message->IRQFlags=RFM9x_ReadReg(RFM9x_REG_12_IRQ_FLAGS);
 8001ba2:	2012      	movs	r0, #18
 8001ba4:	f000 f860 	bl	8001c68 <RFM9x_ReadReg>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	461a      	mov	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	701a      	strb	r2, [r3, #0]
	LORA_Receive_Message->RxCurrAddr=start;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	7cfa      	ldrb	r2, [r7, #19]
 8001bb4:	705a      	strb	r2, [r3, #1]
	LORA_Receive_Message->RxNbrBytes=len;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	7cba      	ldrb	r2, [r7, #18]
 8001bba:	709a      	strb	r2, [r3, #2]
	LORA_Receive_Message->SNR=RFM9x_ReadReg(RFM9x_REG_19_PKT_SNR_VALUE);
 8001bbc:	2019      	movs	r0, #25
 8001bbe:	f000 f853 	bl	8001c68 <RFM9x_ReadReg>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	70da      	strb	r2, [r3, #3]
	LORA_Receive_Message->RSSI = RFM9x_ReadReg(RFM9x_REG_1A_PKT_RSSI_VALUE);
 8001bca:	201a      	movs	r0, #26
 8001bcc:	f000 f84c 	bl	8001c68 <RFM9x_ReadReg>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	711a      	strb	r2, [r3, #4]

	LORA_Receive_Message->header = (LORA_Header*)pvPortMalloc(sizeof(uint8_t)*sizeof(LORA_Header));
 8001bd8:	2004      	movs	r0, #4
 8001bda:	f00a ff7f 	bl	800cadc <pvPortMalloc>
 8001bde:	4602      	mov	r2, r0
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	609a      	str	r2, [r3, #8]
	LORA_Receive_Message->header->recipient=data[0];
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	68fa      	ldr	r2, [r7, #12]
 8001bea:	7812      	ldrb	r2, [r2, #0]
 8001bec:	701a      	strb	r2, [r3, #0]
	LORA_Receive_Message->header->sender=data[1];
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	7852      	ldrb	r2, [r2, #1]
 8001bf6:	705a      	strb	r2, [r3, #1]
	LORA_Receive_Message->header->type=data[2];
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	68fa      	ldr	r2, [r7, #12]
 8001bfe:	7892      	ldrb	r2, [r2, #2]
 8001c00:	709a      	strb	r2, [r3, #2]
	LORA_Receive_Message->header->len_payload=data[3];
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	78d2      	ldrb	r2, [r2, #3]
 8001c0a:	70da      	strb	r2, [r3, #3]
	HAL_UART_Transmit(hGNSSCom.huartDebug, (uint8_t*)debug_msg, strlen(debug_msg), HAL_MAX_DELAY);

	sprintf(debug_msg, "Received Payload Length: %d\r\n", LORA_Receive_Message->header->len_payload);
	HAL_UART_Transmit(hGNSSCom.huartDebug, (uint8_t*)debug_msg, strlen(debug_msg), HAL_MAX_DELAY);
*/
	LORA_Receive_Message->payload = (uint8_t*)pvPortMalloc(sizeof(uint8_t)*(len-4));
 8001c0c:	7cbb      	ldrb	r3, [r7, #18]
 8001c0e:	3b04      	subs	r3, #4
 8001c10:	4618      	mov	r0, r3
 8001c12:	f00a ff63 	bl	800cadc <pvPortMalloc>
 8001c16:	4602      	mov	r2, r0
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	60da      	str	r2, [r3, #12]
	memcpy(LORA_Receive_Message->payload, data+4, len-4);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	68d8      	ldr	r0, [r3, #12]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	1d19      	adds	r1, r3, #4
 8001c24:	7cbb      	ldrb	r3, [r7, #18]
 8001c26:	3b04      	subs	r3, #4
 8001c28:	461a      	mov	r2, r3
 8001c2a:	f00c f8ce 	bl	800ddca <memcpy>
	vPortFree(data);
 8001c2e:	68f8      	ldr	r0, [r7, #12]
 8001c30:	f00b f828 	bl	800cc84 <vPortFree>

	// clear all the IRQ flags
	RFM9x_WriteReg( RFM9x_REG_12_IRQ_FLAGS, 0xFF );
 8001c34:	21ff      	movs	r1, #255	@ 0xff
 8001c36:	2012      	movs	r0, #18
 8001c38:	f000 f856 	bl	8001ce8 <RFM9x_WriteReg>
	RFM9x_SetMode_Receive();
 8001c3c:	f000 f803 	bl	8001c46 <RFM9x_SetMode_Receive>
}
 8001c40:	371c      	adds	r7, #28
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd90      	pop	{r4, r7, pc}

08001c46 <RFM9x_SetMode_Receive>:
void RFM9x_SetMode_Receive(void){
 8001c46:	b580      	push	{r7, lr}
 8001c48:	af00      	add	r7, sp, #0
	// Set sleep mode, so we can also set RFM9x mode:
	RFM9x_WriteReg(RFM9x_REG_01_OP_MODE, RFM9x_MODE_SLEEP | RFM9x_LONG_RANGE_MODE);
 8001c4a:	2180      	movs	r1, #128	@ 0x80
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	f000 f84b 	bl	8001ce8 <RFM9x_WriteReg>
	// Configurer le mode réception continue
	RFM9x_WriteReg(RFM9x_REG_01_OP_MODE, RFM9x_MODE_RXCONTINUOUS);
 8001c52:	2105      	movs	r1, #5
 8001c54:	2001      	movs	r0, #1
 8001c56:	f000 f847 	bl	8001ce8 <RFM9x_WriteReg>
	// Configurer l'interruption sur DIO0 pour RxDone
	RFM9x_WriteReg(RFM9x_REG_40_DIO_MAPPING1, 0x00); // Interrupt on RxDone
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	2040      	movs	r0, #64	@ 0x40
 8001c5e:	f000 f843 	bl	8001ce8 <RFM9x_WriteReg>
}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
	...

08001c68 <RFM9x_ReadReg>:
	// set to clear all the IRQ bits
	RFM9x_WriteReg( RFM9x_REG_12_IRQ_FLAGS, 0xFF );
}

uint8_t RFM9x_ReadReg( uint8_t reg )
{
 8001c68:	b590      	push	{r4, r7, lr}
 8001c6a:	b089      	sub	sp, #36	@ 0x24
 8001c6c:	af02      	add	r7, sp, #8
 8001c6e:	4603      	mov	r3, r0
 8001c70:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status;

	// clear reg msb for read
	reg &= 0x7f;
 8001c72:	79fb      	ldrb	r3, [r7, #7]
 8001c74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001c78:	71fb      	strb	r3, [r7, #7]

	// buffers to transmit/receive
	uint8_t txData[] = {reg, 0x00};
 8001c7a:	79fb      	ldrb	r3, [r7, #7]
 8001c7c:	743b      	strb	r3, [r7, #16]
 8001c7e:	2300      	movs	r3, #0
 8001c80:	747b      	strb	r3, [r7, #17]
	uint8_t rxData[] = {0x00, 0x00};
 8001c82:	2300      	movs	r3, #0
 8001c84:	81bb      	strh	r3, [r7, #12]
	const uint16_t	size = sizeof(txData);
 8001c86:	2302      	movs	r3, #2
 8001c88:	82bb      	strh	r3, [r7, #20]

	// default data value if error
	uint8_t data = 0x00;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	75fb      	strb	r3, [r7, #23]

	// Set nCS low (active)
	HAL_GPIO_WritePin(RFM_SPI_nCS_GPIO_Port, RFM_SPI_nCS_Pin, GPIO_PIN_RESET);
 8001c8e:	2200      	movs	r2, #0
 8001c90:	2101      	movs	r1, #1
 8001c92:	4812      	ldr	r0, [pc, #72]	@ (8001cdc <RFM9x_ReadReg+0x74>)
 8001c94:	f002 fcae 	bl	80045f4 <HAL_GPIO_WritePin>

	// write 8 bit reg and read 8 bit data
	status = HAL_SPI_TransmitReceive(hLORACom.hspi, txData, rxData, size, HAL_MAX_DELAY);
 8001c98:	4b11      	ldr	r3, [pc, #68]	@ (8001ce0 <RFM9x_ReadReg+0x78>)
 8001c9a:	6818      	ldr	r0, [r3, #0]
 8001c9c:	8abb      	ldrh	r3, [r7, #20]
 8001c9e:	f107 020c 	add.w	r2, r7, #12
 8001ca2:	f107 0110 	add.w	r1, r7, #16
 8001ca6:	f04f 34ff 	mov.w	r4, #4294967295
 8001caa:	9400      	str	r4, [sp, #0]
 8001cac:	f004 fc06 	bl	80064bc <HAL_SPI_TransmitReceive>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	74fb      	strb	r3, [r7, #19]

	if (status == HAL_OK)
 8001cb4:	7cfb      	ldrb	r3, [r7, #19]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d102      	bne.n	8001cc0 <RFM9x_ReadReg+0x58>
	{
		//second byte is the register value
		data = rxData[1];
 8001cba:	7b7b      	ldrb	r3, [r7, #13]
 8001cbc:	75fb      	strb	r3, [r7, #23]
 8001cbe:	e003      	b.n	8001cc8 <RFM9x_ReadReg+0x60>
	}
	else
	{
		LORA_debug("*HAL_ERROR*", NULL);
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	4808      	ldr	r0, [pc, #32]	@ (8001ce4 <RFM9x_ReadReg+0x7c>)
 8001cc4:	f7ff fe76 	bl	80019b4 <LORA_debug>

	}

	// Set nCS high (inactive)
	HAL_GPIO_WritePin(RFM_SPI_nCS_GPIO_Port, RFM_SPI_nCS_Pin, GPIO_PIN_SET);
 8001cc8:	2201      	movs	r2, #1
 8001cca:	2101      	movs	r1, #1
 8001ccc:	4803      	ldr	r0, [pc, #12]	@ (8001cdc <RFM9x_ReadReg+0x74>)
 8001cce:	f002 fc91 	bl	80045f4 <HAL_GPIO_WritePin>

	return data;
 8001cd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	371c      	adds	r7, #28
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd90      	pop	{r4, r7, pc}
 8001cdc:	48000c00 	.word	0x48000c00
 8001ce0:	200006fc 	.word	0x200006fc
 8001ce4:	0800fe30 	.word	0x0800fe30

08001ce8 <RFM9x_WriteReg>:

void RFM9x_WriteReg( uint8_t reg, uint8_t data )
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	460a      	mov	r2, r1
 8001cf2:	71fb      	strb	r3, [r7, #7]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef status;

	//print2("RFM9x WR", reg, data );

	//set the reg msb for write
	reg |= 0x80;
 8001cf8:	79fb      	ldrb	r3, [r7, #7]
 8001cfa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001cfe:	71fb      	strb	r3, [r7, #7]

	// Transmit buffer
	uint8_t txData[2] = {reg, data};
 8001d00:	79fb      	ldrb	r3, [r7, #7]
 8001d02:	723b      	strb	r3, [r7, #8]
 8001d04:	79bb      	ldrb	r3, [r7, #6]
 8001d06:	727b      	strb	r3, [r7, #9]
	const uint16_t size = sizeof(txData);
 8001d08:	2302      	movs	r3, #2
 8001d0a:	81fb      	strh	r3, [r7, #14]


	// Set nCS low (active)
	HAL_GPIO_WritePin(RFM_SPI_nCS_GPIO_Port, RFM_SPI_nCS_Pin, GPIO_PIN_RESET);
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	2101      	movs	r1, #1
 8001d10:	4810      	ldr	r0, [pc, #64]	@ (8001d54 <RFM9x_WriteReg+0x6c>)
 8001d12:	f002 fc6f 	bl	80045f4 <HAL_GPIO_WritePin>

	// write 8 bit reg and read 8 bit data
	status = HAL_SPI_Transmit(hLORACom.hspi, txData, size, HAL_MAX_DELAY);
 8001d16:	4b10      	ldr	r3, [pc, #64]	@ (8001d58 <RFM9x_WriteReg+0x70>)
 8001d18:	6818      	ldr	r0, [r3, #0]
 8001d1a:	89fa      	ldrh	r2, [r7, #14]
 8001d1c:	f107 0108 	add.w	r1, r7, #8
 8001d20:	f04f 33ff 	mov.w	r3, #4294967295
 8001d24:	f004 fa55 	bl	80061d2 <HAL_SPI_Transmit>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	737b      	strb	r3, [r7, #13]

	if (status != HAL_OK)
 8001d2c:	7b7b      	ldrb	r3, [r7, #13]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d007      	beq.n	8001d42 <RFM9x_WriteReg+0x5a>
	{
		HAL_UART_Transmit(hLORACom.huartDebug, (uint8_t *) &"*HAL_ERROR*\r\n", 13, HAL_MAX_DELAY);
 8001d32:	4b09      	ldr	r3, [pc, #36]	@ (8001d58 <RFM9x_WriteReg+0x70>)
 8001d34:	6858      	ldr	r0, [r3, #4]
 8001d36:	f04f 33ff 	mov.w	r3, #4294967295
 8001d3a:	220d      	movs	r2, #13
 8001d3c:	4907      	ldr	r1, [pc, #28]	@ (8001d5c <RFM9x_WriteReg+0x74>)
 8001d3e:	f006 f82d 	bl	8007d9c <HAL_UART_Transmit>
	}

	//HACK: Wait for SPI transfer to complete
	//HAL_Delay(1);
	// Set nCS high (inactive)
	HAL_GPIO_WritePin(RFM_SPI_nCS_GPIO_Port, RFM_SPI_nCS_Pin, GPIO_PIN_SET);
 8001d42:	2201      	movs	r2, #1
 8001d44:	2101      	movs	r1, #1
 8001d46:	4803      	ldr	r0, [pc, #12]	@ (8001d54 <RFM9x_WriteReg+0x6c>)
 8001d48:	f002 fc54 	bl	80045f4 <HAL_GPIO_WritePin>
}
 8001d4c:	bf00      	nop
 8001d4e:	3710      	adds	r7, #16
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	48000c00 	.word	0x48000c00
 8001d58:	200006fc 	.word	0x200006fc
 8001d5c:	0800fe3c 	.word	0x0800fe3c

08001d60 <RF_TestSpi>:

	return;
}
// Debug Routines
void RF_TestSpi( void )
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t v;
	print("\r\n----TEST----");
 8001d66:	4816      	ldr	r0, [pc, #88]	@ (8001dc0 <RF_TestSpi+0x60>)
 8001d68:	f000 f858 	bl	8001e1c <print>
	for(i=0; i<8; i++)
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	71fb      	strb	r3, [r7, #7]
 8001d70:	e01b      	b.n	8001daa <RF_TestSpi+0x4a>
	{
		v = (1 << i);
 8001d72:	79fb      	ldrb	r3, [r7, #7]
 8001d74:	2201      	movs	r2, #1
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	71bb      	strb	r3, [r7, #6]
		print1("Write", v);
 8001d7c:	79bb      	ldrb	r3, [r7, #6]
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4810      	ldr	r0, [pc, #64]	@ (8001dc4 <RF_TestSpi+0x64>)
 8001d82:	f000 f825 	bl	8001dd0 <print1>
		RFM9x_WriteReg(RFM9x_REG_40_DIO_MAPPING1, v);
 8001d86:	79bb      	ldrb	r3, [r7, #6]
 8001d88:	4619      	mov	r1, r3
 8001d8a:	2040      	movs	r0, #64	@ 0x40
 8001d8c:	f7ff ffac 	bl	8001ce8 <RFM9x_WriteReg>
		//Delay_ms(1);
		v =RFM9x_ReadReg(RFM9x_REG_40_DIO_MAPPING1);
 8001d90:	2040      	movs	r0, #64	@ 0x40
 8001d92:	f7ff ff69 	bl	8001c68 <RFM9x_ReadReg>
 8001d96:	4603      	mov	r3, r0
 8001d98:	71bb      	strb	r3, [r7, #6]
		print1("Read ", v);
 8001d9a:	79bb      	ldrb	r3, [r7, #6]
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	480a      	ldr	r0, [pc, #40]	@ (8001dc8 <RF_TestSpi+0x68>)
 8001da0:	f000 f816 	bl	8001dd0 <print1>
	for(i=0; i<8; i++)
 8001da4:	79fb      	ldrb	r3, [r7, #7]
 8001da6:	3301      	adds	r3, #1
 8001da8:	71fb      	strb	r3, [r7, #7]
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	2b07      	cmp	r3, #7
 8001dae:	d9e0      	bls.n	8001d72 <RF_TestSpi+0x12>
		//Delay_ms(1);
	}
	print("------------");
 8001db0:	4806      	ldr	r0, [pc, #24]	@ (8001dcc <RF_TestSpi+0x6c>)
 8001db2:	f000 f833 	bl	8001e1c <print>
	return;
 8001db6:	bf00      	nop
}
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	0800fe4c 	.word	0x0800fe4c
 8001dc4:	0800fe5c 	.word	0x0800fe5c
 8001dc8:	0800fe64 	.word	0x0800fe64
 8001dcc:	0800fe6c 	.word	0x0800fe6c

08001dd0 <print1>:
void print1(const char *text, uint8_t x)
{	char msg[50];
 8001dd0:	b590      	push	{r4, r7, lr}
 8001dd2:	b091      	sub	sp, #68	@ 0x44
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	460b      	mov	r3, r1
 8001dda:	70fb      	strb	r3, [r7, #3]
sprintf(msg, "%s 0x%02X\r\n", text, (int) x );
 8001ddc:	78fb      	ldrb	r3, [r7, #3]
 8001dde:	f107 000c 	add.w	r0, r7, #12
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	490b      	ldr	r1, [pc, #44]	@ (8001e14 <print1+0x44>)
 8001de6:	f00b fea7 	bl	800db38 <siprintf>
HAL_UART_Transmit(hLORACom.huartDebug, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);
 8001dea:	4b0b      	ldr	r3, [pc, #44]	@ (8001e18 <print1+0x48>)
 8001dec:	685c      	ldr	r4, [r3, #4]
 8001dee:	f107 030c 	add.w	r3, r7, #12
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7fe fa4c 	bl	8000290 <strlen>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	f107 010c 	add.w	r1, r7, #12
 8001e00:	f04f 33ff 	mov.w	r3, #4294967295
 8001e04:	4620      	mov	r0, r4
 8001e06:	f005 ffc9 	bl	8007d9c <HAL_UART_Transmit>
}
 8001e0a:	bf00      	nop
 8001e0c:	3744      	adds	r7, #68	@ 0x44
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd90      	pop	{r4, r7, pc}
 8001e12:	bf00      	nop
 8001e14:	0800fe7c 	.word	0x0800fe7c
 8001e18:	200006fc 	.word	0x200006fc

08001e1c <print>:
void print(const char *text)
{char msg[50];
 8001e1c:	b590      	push	{r4, r7, lr}
 8001e1e:	b091      	sub	sp, #68	@ 0x44
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
sprintf(msg, "%s\r\n", text );
 8001e24:	f107 030c 	add.w	r3, r7, #12
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	490c      	ldr	r1, [pc, #48]	@ (8001e5c <print+0x40>)
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f00b fe83 	bl	800db38 <siprintf>
HAL_UART_Transmit(hLORACom.huartDebug, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);
 8001e32:	4b0b      	ldr	r3, [pc, #44]	@ (8001e60 <print+0x44>)
 8001e34:	685c      	ldr	r4, [r3, #4]
 8001e36:	f107 030c 	add.w	r3, r7, #12
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7fe fa28 	bl	8000290 <strlen>
 8001e40:	4603      	mov	r3, r0
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	f107 010c 	add.w	r1, r7, #12
 8001e48:	f04f 33ff 	mov.w	r3, #4294967295
 8001e4c:	4620      	mov	r0, r4
 8001e4e:	f005 ffa5 	bl	8007d9c <HAL_UART_Transmit>
}
 8001e52:	bf00      	nop
 8001e54:	3744      	adds	r7, #68	@ 0x44
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd90      	pop	{r4, r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	0800fe88 	.word	0x0800fe88
 8001e60:	200006fc 	.word	0x200006fc

08001e64 <commandToGNSS>:
 *      Author: romain.pace
 */

#include "RTOS_subfunctions/commandToGNSS.h"

void commandToGNSS(void){
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
	GNSStoPollQ_t transmitToGnss;
	xQueueReceive(GNSS_toPollHandle, &transmitToGnss, osWaitForever);
 8001e6a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ed4 <commandToGNSS+0x70>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	1d39      	adds	r1, r7, #4
 8001e70:	f04f 32ff 	mov.w	r2, #4294967295
 8001e74:	4618      	mov	r0, r3
 8001e76:	f008 fb5d 	bl	800a534 <xQueueReceive>
	//Attendre avant d'envoyer le message
	osSemaphoreWait(GNSS_UART_AccessHandle, osWaitForever);
 8001e7a:	4b17      	ldr	r3, [pc, #92]	@ (8001ed8 <commandToGNSS+0x74>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f04f 31ff 	mov.w	r1, #4294967295
 8001e82:	4618      	mov	r0, r3
 8001e84:	f007 fe80 	bl	8009b88 <osSemaphoreWait>
	while(hGNSSCom.huart->gState != HAL_UART_STATE_READY
 8001e88:	e002      	b.n	8001e90 <commandToGNSS+0x2c>
			){
		osDelay(1);}
 8001e8a:	2001      	movs	r0, #1
 8001e8c:	f007 fe35 	bl	8009afa <osDelay>
	while(hGNSSCom.huart->gState != HAL_UART_STATE_READY
 8001e90:	4b12      	ldr	r3, [pc, #72]	@ (8001edc <commandToGNSS+0x78>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001e96:	2b20      	cmp	r3, #32
 8001e98:	d1f7      	bne.n	8001e8a <commandToGNSS+0x26>
	HAL_StatusTypeDef statut = HAL_UART_Transmit(hGNSSCom.huart, transmitToGnss.command, transmitToGnss.size,HAL_MAX_DELAY);
 8001e9a:	4b10      	ldr	r3, [pc, #64]	@ (8001edc <commandToGNSS+0x78>)
 8001e9c:	6818      	ldr	r0, [r3, #0]
 8001e9e:	6879      	ldr	r1, [r7, #4]
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ea8:	f005 ff78 	bl	8007d9c <HAL_UART_Transmit>
 8001eac:	4603      	mov	r3, r0
 8001eae:	73fb      	strb	r3, [r7, #15]
	ITM_Port32(28)=333;
 8001eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee0 <commandToGNSS+0x7c>)
 8001eb2:	f240 124d 	movw	r2, #333	@ 0x14d
 8001eb6:	601a      	str	r2, [r3, #0]
	if (statut!= HAL_OK){
 8001eb8:	7bfb      	ldrb	r3, [r7, #15]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <commandToGNSS+0x5e>
		Error_Handler();
 8001ebe:	f001 f8d1 	bl	8003064 <Error_Handler>
	}
	osSemaphoreRelease(GNSS_UART_AccessHandle);
 8001ec2:	4b05      	ldr	r3, [pc, #20]	@ (8001ed8 <commandToGNSS+0x74>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f007 feac 	bl	8009c24 <osSemaphoreRelease>
}
 8001ecc:	bf00      	nop
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	20000a94 	.word	0x20000a94
 8001ed8:	20000aa4 	.word	0x20000aa4
 8001edc:	200003b0 	.word	0x200003b0
 8001ee0:	e0000070 	.word	0xe0000070

08001ee4 <request_commandToGNSS>:
void request_commandToGNSS(GNSStoPollQ_t transmitToGnss){
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	463b      	mov	r3, r7
 8001eec:	e883 0003 	stmia.w	r3, {r0, r1}
	xQueueSendToBack(GNSS_toPollHandle,&transmitToGnss,100);
 8001ef0:	4b06      	ldr	r3, [pc, #24]	@ (8001f0c <request_commandToGNSS+0x28>)
 8001ef2:	6818      	ldr	r0, [r3, #0]
 8001ef4:	4639      	mov	r1, r7
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	2264      	movs	r2, #100	@ 0x64
 8001efa:	f008 f8eb 	bl	800a0d4 <xQueueGenericSend>
	ITM_Port32(28)=222;
 8001efe:	4b04      	ldr	r3, [pc, #16]	@ (8001f10 <request_commandToGNSS+0x2c>)
 8001f00:	22de      	movs	r2, #222	@ 0xde
 8001f02:	601a      	str	r2, [r3, #0]
}
 8001f04:	bf00      	nop
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	20000a94 	.word	0x20000a94
 8001f10:	e0000070 	.word	0xe0000070

08001f14 <debug>:
 *      Author: romain.pace
 */

#include "RTOS_subfunctions/debug.h"

void debug(void){
 8001f14:	b590      	push	{r4, r7, lr}
 8001f16:	f2ad 4d14 	subw	sp, sp, #1044	@ 0x414
 8001f1a:	af02      	add	r7, sp, #8
	char buffer[1024];
	UARTdebugQ_t UARTdebug;

	xQueueReceive(UARTdebugHandle, &UARTdebug, osWaitForever);
 8001f1c:	4b18      	ldr	r3, [pc, #96]	@ (8001f80 <debug+0x6c>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4639      	mov	r1, r7
 8001f22:	f04f 32ff 	mov.w	r2, #4294967295
 8001f26:	4618      	mov	r0, r3
 8001f28:	f008 fb04 	bl	800a534 <xQueueReceive>

	snprintf(buffer, sizeof(buffer), "%s%s%s", UARTdebug.color, UARTdebug.message, ANSI_COLOR_RESET);
 8001f2c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8001f30:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 8001f34:	685a      	ldr	r2, [r3, #4]
 8001f36:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8001f3a:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f107 0008 	add.w	r0, r7, #8
 8001f44:	490f      	ldr	r1, [pc, #60]	@ (8001f84 <debug+0x70>)
 8001f46:	9101      	str	r1, [sp, #4]
 8001f48:	9300      	str	r3, [sp, #0]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	4a0e      	ldr	r2, [pc, #56]	@ (8001f88 <debug+0x74>)
 8001f4e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001f52:	f00b fdbd 	bl	800dad0 <sniprintf>
	HAL_UART_Transmit(hGNSSCom.huartDebug, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001f56:	4b0d      	ldr	r3, [pc, #52]	@ (8001f8c <debug+0x78>)
 8001f58:	685c      	ldr	r4, [r3, #4]
 8001f5a:	f107 0308 	add.w	r3, r7, #8
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7fe f996 	bl	8000290 <strlen>
 8001f64:	4603      	mov	r3, r0
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	f107 0108 	add.w	r1, r7, #8
 8001f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f70:	4620      	mov	r0, r4
 8001f72:	f005 ff13 	bl	8007d9c <HAL_UART_Transmit>

}
 8001f76:	bf00      	nop
 8001f78:	f207 470c 	addw	r7, r7, #1036	@ 0x40c
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd90      	pop	{r4, r7, pc}
 8001f80:	20000a90 	.word	0x20000a90
 8001f84:	0800fe98 	.word	0x0800fe98
 8001f88:	0800fe90 	.word	0x0800fe90
 8001f8c:	200003b0 	.word	0x200003b0

08001f90 <UART_Transmit_With_Color>:

void UART_Transmit_With_Color(char *data, char *color) {
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
	UARTdebugQ_t UARTdebug = {.message = data,
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	60bb      	str	r3, [r7, #8]
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	60fb      	str	r3, [r7, #12]
			.color=color};
	xQueueSendToBack(UARTdebugHandle,&UARTdebug,0);
 8001fa2:	4b06      	ldr	r3, [pc, #24]	@ (8001fbc <UART_Transmit_With_Color+0x2c>)
 8001fa4:	6818      	ldr	r0, [r3, #0]
 8001fa6:	f107 0108 	add.w	r1, r7, #8
 8001faa:	2300      	movs	r3, #0
 8001fac:	2200      	movs	r2, #0
 8001fae:	f008 f891 	bl	800a0d4 <xQueueGenericSend>
}
 8001fb2:	bf00      	nop
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20000a90 	.word	0x20000a90

08001fc0 <uint8_array_to_hex_string>:
void uint8_array_to_hex_string(char* hexString, uint8_t* array, size_t len) {
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
	// Allouer de la mémoire pour la chaîne hexadécimale (2 caractères par octet + 1 pour le '\0')

	// Parcourir le tableau et convertir chaque octet en hexadécimal
	for (size_t i = 0; i < len; i++) {
 8001fcc:	2300      	movs	r3, #0
 8001fce:	617b      	str	r3, [r7, #20]
 8001fd0:	e00e      	b.n	8001ff0 <uint8_array_to_hex_string+0x30>
		snprintf(hexString + (i * 2), 3, "%02X", array[i]);
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	18d0      	adds	r0, r2, r3
 8001fda:	68ba      	ldr	r2, [r7, #8]
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	4413      	add	r3, r2
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	4a0a      	ldr	r2, [pc, #40]	@ (800200c <uint8_array_to_hex_string+0x4c>)
 8001fe4:	2103      	movs	r1, #3
 8001fe6:	f00b fd73 	bl	800dad0 <sniprintf>
	for (size_t i = 0; i < len; i++) {
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	3301      	adds	r3, #1
 8001fee:	617b      	str	r3, [r7, #20]
 8001ff0:	697a      	ldr	r2, [r7, #20]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d3ec      	bcc.n	8001fd2 <uint8_array_to_hex_string+0x12>
	}

	// Ajouter le caractère de fin de chaîne
	hexString[len * 2] = '\0';
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	68fa      	ldr	r2, [r7, #12]
 8001ffe:	4413      	add	r3, r2
 8002000:	2200      	movs	r2, #0
 8002002:	701a      	strb	r2, [r3, #0]

}
 8002004:	bf00      	nop
 8002006:	3718      	adds	r7, #24
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	0800fea0 	.word	0x0800fea0

08002010 <fakeuseSD>:
#include "RTOS_subfunctions/fakeuseSD.h"

GNSSReturnQ_t gnssReturn;
GNSStoPollQ_t pollTimeUTC = {pollUBXTimeUTC, sizeof(pollUBXTimeUTC)};

void fakeuseSD(void){
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
	GNSSRequestQ_t requestFromSD = {
			.Request_TIME = xTaskGetTickCount(),
 8002016:	f009 fa49 	bl	800b4ac <xTaskGetTickCount>
 800201a:	4603      	mov	r3, r0
	GNSSRequestQ_t requestFromSD = {
 800201c:	603b      	str	r3, [r7, #0]
 800201e:	2301      	movs	r3, #1
 8002020:	713b      	strb	r3, [r7, #4]
 8002022:	2321      	movs	r3, #33	@ 0x21
 8002024:	717b      	strb	r3, [r7, #5]
 8002026:	4b39      	ldr	r3, [pc, #228]	@ (800210c <fakeuseSD+0xfc>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	60bb      	str	r3, [r7, #8]
 800202c:	4b38      	ldr	r3, [pc, #224]	@ (8002110 <fakeuseSD+0x100>)
 800202e:	60fb      	str	r3, [r7, #12]
			.CLASS = 0x01,
			.ID = 0x21,
			.applicantSemaphore = SD_Access_GNSS_ReturnHandle,
			.applicantName = "SD_REQUEST"
	};
	char* hexString_SD = (char*)pvPortMalloc(gnssReturn.bufferReturn->size * 2 + 1);
 8002030:	4b38      	ldr	r3, [pc, #224]	@ (8002114 <fakeuseSD+0x104>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	3301      	adds	r3, #1
 800203a:	4618      	mov	r0, r3
 800203c:	f00a fd4e 	bl	800cadc <pvPortMalloc>
 8002040:	6178      	str	r0, [r7, #20]

	xQueueSendToBack(GNSS_RequestHandle,&requestFromSD,osWaitForever);
 8002042:	4b35      	ldr	r3, [pc, #212]	@ (8002118 <fakeuseSD+0x108>)
 8002044:	6818      	ldr	r0, [r3, #0]
 8002046:	4639      	mov	r1, r7
 8002048:	2300      	movs	r3, #0
 800204a:	f04f 32ff 	mov.w	r2, #4294967295
 800204e:	f008 f841 	bl	800a0d4 <xQueueGenericSend>
	UART_Transmit_With_Color("\r\t\t\n...UBXMessage --FROM-- SD Polling...\r\n",ANSI_COLOR_YELLOW);
 8002052:	4932      	ldr	r1, [pc, #200]	@ (800211c <fakeuseSD+0x10c>)
 8002054:	4832      	ldr	r0, [pc, #200]	@ (8002120 <fakeuseSD+0x110>)
 8002056:	f7ff ff9b 	bl	8001f90 <UART_Transmit_With_Color>
	ITM_Port32(29)=111;
 800205a:	4b32      	ldr	r3, [pc, #200]	@ (8002124 <fakeuseSD+0x114>)
 800205c:	226f      	movs	r2, #111	@ 0x6f
 800205e:	601a      	str	r2, [r3, #0]

	request_commandToGNSS(pollTimeUTC);
 8002060:	4b31      	ldr	r3, [pc, #196]	@ (8002128 <fakeuseSD+0x118>)
 8002062:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002066:	f7ff ff3d 	bl	8001ee4 <request_commandToGNSS>
	ITM_Port32(29)=444;
 800206a:	4b2e      	ldr	r3, [pc, #184]	@ (8002124 <fakeuseSD+0x114>)
 800206c:	f44f 72de 	mov.w	r2, #444	@ 0x1bc
 8002070:	601a      	str	r2, [r3, #0]
	int32_t eventSD = osSemaphoreWait(SD_Access_GNSS_ReturnHandle, 100);
 8002072:	4b26      	ldr	r3, [pc, #152]	@ (800210c <fakeuseSD+0xfc>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2164      	movs	r1, #100	@ 0x64
 8002078:	4618      	mov	r0, r3
 800207a:	f007 fd85 	bl	8009b88 <osSemaphoreWait>
 800207e:	6138      	str	r0, [r7, #16]
	if (eventSD == osOK){
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d12f      	bne.n	80020e6 <fakeuseSD+0xd6>
		xQueueReceive(GNSS_ReturnHandle, &gnssReturn, portMAX_DELAY);
 8002086:	4b29      	ldr	r3, [pc, #164]	@ (800212c <fakeuseSD+0x11c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f04f 32ff 	mov.w	r2, #4294967295
 800208e:	4921      	ldr	r1, [pc, #132]	@ (8002114 <fakeuseSD+0x104>)
 8002090:	4618      	mov	r0, r3
 8002092:	f008 fa4f 	bl	800a534 <xQueueReceive>
		ITM_Port32(29)=555;
 8002096:	4b23      	ldr	r3, [pc, #140]	@ (8002124 <fakeuseSD+0x114>)
 8002098:	f240 222b 	movw	r2, #555	@ 0x22b
 800209c:	601a      	str	r2, [r3, #0]

		if (gnssReturn.statut == OK){
 800209e:	4b1d      	ldr	r3, [pc, #116]	@ (8002114 <fakeuseSD+0x104>)
 80020a0:	7a1b      	ldrb	r3, [r3, #8]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d116      	bne.n	80020d4 <fakeuseSD+0xc4>
			UART_Transmit_With_Color("\n\r\t\t...UBXMessage --SEND-- SD Polling...",ANSI_COLOR_YELLOW);
 80020a6:	491d      	ldr	r1, [pc, #116]	@ (800211c <fakeuseSD+0x10c>)
 80020a8:	4821      	ldr	r0, [pc, #132]	@ (8002130 <fakeuseSD+0x120>)
 80020aa:	f7ff ff71 	bl	8001f90 <UART_Transmit_With_Color>
			UART_Transmit_With_Color("\t---SUCCESS---\r\n",ANSI_COLOR_GREEN);
 80020ae:	4921      	ldr	r1, [pc, #132]	@ (8002134 <fakeuseSD+0x124>)
 80020b0:	4821      	ldr	r0, [pc, #132]	@ (8002138 <fakeuseSD+0x128>)
 80020b2:	f7ff ff6d 	bl	8001f90 <UART_Transmit_With_Color>
			uint8_array_to_hex_string(hexString_SD, gnssReturn.bufferReturn->buffer, gnssReturn.bufferReturn->size);
 80020b6:	4b17      	ldr	r3, [pc, #92]	@ (8002114 <fakeuseSD+0x104>)
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	6819      	ldr	r1, [r3, #0]
 80020bc:	4b15      	ldr	r3, [pc, #84]	@ (8002114 <fakeuseSD+0x104>)
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	461a      	mov	r2, r3
 80020c4:	6978      	ldr	r0, [r7, #20]
 80020c6:	f7ff ff7b 	bl	8001fc0 <uint8_array_to_hex_string>
			UART_Transmit_With_Color(hexString_SD,ANSI_COLOR_YELLOW);
 80020ca:	4914      	ldr	r1, [pc, #80]	@ (800211c <fakeuseSD+0x10c>)
 80020cc:	6978      	ldr	r0, [r7, #20]
 80020ce:	f7ff ff5f 	bl	8001f90 <UART_Transmit_With_Color>
 80020d2:	e010      	b.n	80020f6 <fakeuseSD+0xe6>
		}
		else{
			UART_Transmit_With_Color("\r\t\t\n...UBXMessage --FROM-- SD Polling...",ANSI_COLOR_YELLOW);
 80020d4:	4911      	ldr	r1, [pc, #68]	@ (800211c <fakeuseSD+0x10c>)
 80020d6:	4819      	ldr	r0, [pc, #100]	@ (800213c <fakeuseSD+0x12c>)
 80020d8:	f7ff ff5a 	bl	8001f90 <UART_Transmit_With_Color>
			UART_Transmit_With_Color("\t---NOT FOUND---\r\n",ANSI_COLOR_RED);
 80020dc:	4918      	ldr	r1, [pc, #96]	@ (8002140 <fakeuseSD+0x130>)
 80020de:	4819      	ldr	r0, [pc, #100]	@ (8002144 <fakeuseSD+0x134>)
 80020e0:	f7ff ff56 	bl	8001f90 <UART_Transmit_With_Color>
 80020e4:	e007      	b.n	80020f6 <fakeuseSD+0xe6>
		}

	}
	else {
		UART_Transmit_With_Color("\r\t\t\n...UBXMessage --FROM-- SD Polling...",ANSI_COLOR_YELLOW);
 80020e6:	490d      	ldr	r1, [pc, #52]	@ (800211c <fakeuseSD+0x10c>)
 80020e8:	4814      	ldr	r0, [pc, #80]	@ (800213c <fakeuseSD+0x12c>)
 80020ea:	f7ff ff51 	bl	8001f90 <UART_Transmit_With_Color>
		UART_Transmit_With_Color("\t---SEMAPHORE ISSUE---\r\n\n",ANSI_COLOR_RED);
 80020ee:	4914      	ldr	r1, [pc, #80]	@ (8002140 <fakeuseSD+0x130>)
 80020f0:	4815      	ldr	r0, [pc, #84]	@ (8002148 <fakeuseSD+0x138>)
 80020f2:	f7ff ff4d 	bl	8001f90 <UART_Transmit_With_Color>
	}
	vPortFree(hexString_SD);
 80020f6:	6978      	ldr	r0, [r7, #20]
 80020f8:	f00a fdc4 	bl	800cc84 <vPortFree>
	osDelay(1000);
 80020fc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002100:	f007 fcfb 	bl	8009afa <osDelay>

}
 8002104:	bf00      	nop
 8002106:	3718      	adds	r7, #24
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	20000a9c 	.word	0x20000a9c
 8002110:	0800fea8 	.word	0x0800fea8
 8002114:	20000a24 	.word	0x20000a24
 8002118:	20000a88 	.word	0x20000a88
 800211c:	0800feb4 	.word	0x0800feb4
 8002120:	0800febc 	.word	0x0800febc
 8002124:	e0000074 	.word	0xe0000074
 8002128:	200001b4 	.word	0x200001b4
 800212c:	20000a8c 	.word	0x20000a8c
 8002130:	0800fee8 	.word	0x0800fee8
 8002134:	0800ff14 	.word	0x0800ff14
 8002138:	0800ff1c 	.word	0x0800ff1c
 800213c:	0800ff30 	.word	0x0800ff30
 8002140:	0800ff5c 	.word	0x0800ff5c
 8002144:	0800ff64 	.word	0x0800ff64
 8002148:	0800ff78 	.word	0x0800ff78

0800214c <matcher>:
 */

#include "RTOS_subfunctions/matcher.h"
GNSSRequestQ_t gnssRequest;

void matcher(void){
 800214c:	b5b0      	push	{r4, r5, r7, lr}
 800214e:	b092      	sub	sp, #72	@ 0x48
 8002150:	af00      	add	r7, sp, #0
	if(uxQueueMessagesWaiting(UBXQueueHandle)>0){
 8002152:	4b4c      	ldr	r3, [pc, #304]	@ (8002284 <matcher+0x138>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4618      	mov	r0, r3
 8002158:	f008 fc60 	bl	800aa1c <uxQueueMessagesWaiting>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	f000 808c 	beq.w	800227c <matcher+0x130>
		UBXMessageQ_t item;
		UBXMessage_parsed* ubxFromQueueMatching=NULL;
 8002164:	2300      	movs	r3, #0
 8002166:	647b      	str	r3, [r7, #68]	@ 0x44
		GNSSReturnQ_t gnssReturn;
		char* TIME_delta = (char*)pvPortMalloc(sizeof(TickType_t) * sizeof(char));
 8002168:	2004      	movs	r0, #4
 800216a:	f00a fcb7 	bl	800cadc <pvPortMalloc>
 800216e:	6438      	str	r0, [r7, #64]	@ 0x40

		xQueueReceive(GNSS_RequestHandle, &gnssRequest, osWaitForever);
 8002170:	4b45      	ldr	r3, [pc, #276]	@ (8002288 <matcher+0x13c>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f04f 32ff 	mov.w	r2, #4294967295
 8002178:	4944      	ldr	r1, [pc, #272]	@ (800228c <matcher+0x140>)
 800217a:	4618      	mov	r0, r3
 800217c:	f008 f9da 	bl	800a534 <xQueueReceive>

		UART_Transmit_With_Color( "\r...[INFO] Semaphore in MATCHER...--TAKE--\t\t", ANSI_COLOR_RESET);
 8002180:	4943      	ldr	r1, [pc, #268]	@ (8002290 <matcher+0x144>)
 8002182:	4844      	ldr	r0, [pc, #272]	@ (8002294 <matcher+0x148>)
 8002184:	f7ff ff04 	bl	8001f90 <UART_Transmit_With_Color>
		UART_Transmit_With_Color( gnssRequest.applicantName, ANSI_COLOR_RESET);
 8002188:	4b40      	ldr	r3, [pc, #256]	@ (800228c <matcher+0x140>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	4940      	ldr	r1, [pc, #256]	@ (8002290 <matcher+0x144>)
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff fefe 	bl	8001f90 <UART_Transmit_With_Color>
		//Parcourir UBXQueue
		//Matcher avec Class et ID --> sortir le payload
		//UBXMessage_parsed* ubxFromQueueMatching = findItemQueueWithoutCopy(UBXQueueHandle, gnssRequest);
		//UBXMessage_parsed* ubxFromQueueMatching = findAndRemoveItemFromQueue(UBXQueueHandle, gnssRequest);
		xQueueReceive(UBXQueueHandle,&item,100);
 8002194:	4b3b      	ldr	r3, [pc, #236]	@ (8002284 <matcher+0x138>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800219c:	2264      	movs	r2, #100	@ 0x64
 800219e:	4618      	mov	r0, r3
 80021a0:	f008 f9c8 	bl	800a534 <xQueueReceive>
		ubxFromQueueMatching = item.receptionGNSS->Message.UBXMessage;
 80021a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	647b      	str	r3, [r7, #68]	@ 0x44
		///////

		if (ubxFromQueueMatching != NULL){
 80021aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d01b      	beq.n	80021e8 <matcher+0x9c>
			gnssReturn = (GNSSReturnQ_t){
				.Request_TIME = gnssRequest.Request_TIME,
 80021b0:	4b36      	ldr	r3, [pc, #216]	@ (800228c <matcher+0x140>)
 80021b2:	681c      	ldr	r4, [r3, #0]
						.Return_TIME = xTaskGetTickCount(),
 80021b4:	f009 f97a 	bl	800b4ac <xTaskGetTickCount>
 80021b8:	4601      	mov	r1, r0
						.statut = OK,
						.CLASS = gnssRequest.CLASS,
 80021ba:	4b34      	ldr	r3, [pc, #208]	@ (800228c <matcher+0x140>)
 80021bc:	791d      	ldrb	r5, [r3, #4]
						.ID = gnssRequest.ID,
 80021be:	4b33      	ldr	r3, [pc, #204]	@ (800228c <matcher+0x140>)
 80021c0:	7958      	ldrb	r0, [r3, #5]
						.bufferReturn = ubxFromQueueMatching->brute,
 80021c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021c4:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
						.applicantName = gnssRequest.applicantName
 80021c8:	4b30      	ldr	r3, [pc, #192]	@ (800228c <matcher+0x140>)
 80021ca:	68db      	ldr	r3, [r3, #12]
			gnssReturn = (GNSSReturnQ_t){
 80021cc:	62bc      	str	r4, [r7, #40]	@ 0x28
 80021ce:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80021d0:	2100      	movs	r1, #0
 80021d2:	f887 1030 	strb.w	r1, [r7, #48]	@ 0x30
 80021d6:	4629      	mov	r1, r5
 80021d8:	f887 1031 	strb.w	r1, [r7, #49]	@ 0x31
 80021dc:	4601      	mov	r1, r0
 80021de:	f887 1032 	strb.w	r1, [r7, #50]	@ 0x32
 80021e2:	637a      	str	r2, [r7, #52]	@ 0x34
 80021e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80021e6:	e01e      	b.n	8002226 <matcher+0xda>
			};

		}else{
			UART_Transmit_With_Color("\r\t\t\n...MATCHER... ---FAILED---\t\t",ANSI_COLOR_RED);
 80021e8:	492b      	ldr	r1, [pc, #172]	@ (8002298 <matcher+0x14c>)
 80021ea:	482c      	ldr	r0, [pc, #176]	@ (800229c <matcher+0x150>)
 80021ec:	f7ff fed0 	bl	8001f90 <UART_Transmit_With_Color>
			UART_Transmit_With_Color(gnssRequest.applicantName,ANSI_COLOR_RED);
 80021f0:	4b26      	ldr	r3, [pc, #152]	@ (800228c <matcher+0x140>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	4928      	ldr	r1, [pc, #160]	@ (8002298 <matcher+0x14c>)
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7ff feca 	bl	8001f90 <UART_Transmit_With_Color>

			gnssReturn = (GNSSReturnQ_t){
				.Request_TIME = gnssRequest.Request_TIME,
 80021fc:	4b23      	ldr	r3, [pc, #140]	@ (800228c <matcher+0x140>)
 80021fe:	681c      	ldr	r4, [r3, #0]
						.Return_TIME = xTaskGetTickCount(),
 8002200:	f009 f954 	bl	800b4ac <xTaskGetTickCount>
 8002204:	4602      	mov	r2, r0
						.statut = Error,
						.CLASS = 0,
						.ID = 0,
						.bufferReturn = (DynamicBuffer*)NULL,
						.applicantName = gnssRequest.applicantName
 8002206:	4b21      	ldr	r3, [pc, #132]	@ (800228c <matcher+0x140>)
 8002208:	68db      	ldr	r3, [r3, #12]
			gnssReturn = (GNSSReturnQ_t){
 800220a:	62bc      	str	r4, [r7, #40]	@ 0x28
 800220c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800220e:	2201      	movs	r2, #1
 8002210:	f887 2030 	strb.w	r2, [r7, #48]	@ 0x30
 8002214:	2200      	movs	r2, #0
 8002216:	f887 2031 	strb.w	r2, [r7, #49]	@ 0x31
 800221a:	2200      	movs	r2, #0
 800221c:	f887 2032 	strb.w	r2, [r7, #50]	@ 0x32
 8002220:	2200      	movs	r2, #0
 8002222:	637a      	str	r2, [r7, #52]	@ 0x34
 8002224:	63bb      	str	r3, [r7, #56]	@ 0x38
			};
		}
		sprintf(TIME_delta, "%lu",((gnssReturn.Return_TIME-gnssReturn.Request_TIME)*(uint32_t)(1000.000/configTICK_RATE_HZ)));
 8002226:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	461a      	mov	r2, r3
 800222e:	491c      	ldr	r1, [pc, #112]	@ (80022a0 <matcher+0x154>)
 8002230:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8002232:	f00b fc81 	bl	800db38 <siprintf>
		UART_Transmit_With_Color( "\n\r...[INFO] Delta Time: Request & Return (ms)...\t\t", ANSI_COLOR_RESET);
 8002236:	4916      	ldr	r1, [pc, #88]	@ (8002290 <matcher+0x144>)
 8002238:	481a      	ldr	r0, [pc, #104]	@ (80022a4 <matcher+0x158>)
 800223a:	f7ff fea9 	bl	8001f90 <UART_Transmit_With_Color>
		UART_Transmit_With_Color(TIME_delta,ANSI_COLOR_GREEN);
 800223e:	491a      	ldr	r1, [pc, #104]	@ (80022a8 <matcher+0x15c>)
 8002240:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8002242:	f7ff fea5 	bl	8001f90 <UART_Transmit_With_Color>
		UART_Transmit_With_Color( "\n\r...[INFO] Semaphore in MATCHER...--RELEASE--\t\t", ANSI_COLOR_RESET);
 8002246:	4912      	ldr	r1, [pc, #72]	@ (8002290 <matcher+0x144>)
 8002248:	4818      	ldr	r0, [pc, #96]	@ (80022ac <matcher+0x160>)
 800224a:	f7ff fea1 	bl	8001f90 <UART_Transmit_With_Color>
		UART_Transmit_With_Color( gnssRequest.applicantName, ANSI_COLOR_RESET);
 800224e:	4b0f      	ldr	r3, [pc, #60]	@ (800228c <matcher+0x140>)
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	490f      	ldr	r1, [pc, #60]	@ (8002290 <matcher+0x144>)
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff fe9b 	bl	8001f90 <UART_Transmit_With_Color>

		vPortFree(TIME_delta);
 800225a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800225c:	f00a fd12 	bl	800cc84 <vPortFree>

		xQueueSendToBack(GNSS_ReturnHandle,&gnssReturn,portMAX_DELAY);
 8002260:	4b13      	ldr	r3, [pc, #76]	@ (80022b0 <matcher+0x164>)
 8002262:	6818      	ldr	r0, [r3, #0]
 8002264:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8002268:	2300      	movs	r3, #0
 800226a:	f04f 32ff 	mov.w	r2, #4294967295
 800226e:	f007 ff31 	bl	800a0d4 <xQueueGenericSend>
		osSemaphoreRelease(gnssRequest.applicantSemaphore);
 8002272:	4b06      	ldr	r3, [pc, #24]	@ (800228c <matcher+0x140>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	4618      	mov	r0, r3
 8002278:	f007 fcd4 	bl	8009c24 <osSemaphoreRelease>


	}


}
 800227c:	bf00      	nop
 800227e:	3748      	adds	r7, #72	@ 0x48
 8002280:	46bd      	mov	sp, r7
 8002282:	bdb0      	pop	{r4, r5, r7, pc}
 8002284:	20000a84 	.word	0x20000a84
 8002288:	20000a88 	.word	0x20000a88
 800228c:	20000a38 	.word	0x20000a38
 8002290:	0800ff94 	.word	0x0800ff94
 8002294:	0800ff9c 	.word	0x0800ff9c
 8002298:	0800ffcc 	.word	0x0800ffcc
 800229c:	0800ffd4 	.word	0x0800ffd4
 80022a0:	0800fff8 	.word	0x0800fff8
 80022a4:	0800fffc 	.word	0x0800fffc
 80022a8:	08010030 	.word	0x08010030
 80022ac:	08010038 	.word	0x08010038
 80022b0:	20000a8c 	.word	0x20000a8c

080022b4 <receivedLora>:
 *      Author: romain.pace
 */

#include "RTOS_subfunctions/receveivedLora.h"

void receivedLora(void){
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
	osSemaphoreWait(xSem_LORAReceive_startHandle, osWaitForever);
 80022ba:	4b1c      	ldr	r3, [pc, #112]	@ (800232c <receivedLora+0x78>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f04f 31ff 	mov.w	r1, #4294967295
 80022c2:	4618      	mov	r0, r3
 80022c4:	f007 fc60 	bl	8009b88 <osSemaphoreWait>

	LORA_Message* LORA_Receive_Message = (LORA_Message*)pvPortMalloc(sizeof(LORA_Message));
 80022c8:	2010      	movs	r0, #16
 80022ca:	f00a fc07 	bl	800cadc <pvPortMalloc>
 80022ce:	6078      	str	r0, [r7, #4]
	RFM9x_Receive(LORA_Receive_Message);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f7ff fc30 	bl	8001b36 <RFM9x_Receive>
	if (!LORA_Receive_Message->RxNbrBytes){ITM_Port32(31)=66;} //Si on recoit du bruit
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	789b      	ldrb	r3, [r3, #2]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d103      	bne.n	80022e6 <receivedLora+0x32>
 80022de:	4b14      	ldr	r3, [pc, #80]	@ (8002330 <receivedLora+0x7c>)
 80022e0:	2242      	movs	r2, #66	@ 0x42
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	e018      	b.n	8002318 <receivedLora+0x64>

	else if (LORA_Receive_Message->header->recipient == MODULE_BROADCAST_ADDRESS
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	2bff      	cmp	r3, #255	@ 0xff
 80022ee:	d004      	beq.n	80022fa <receivedLora+0x46>
			||LORA_Receive_Message->header->recipient == MODULE_SOURCE_ADDRESS){
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d10e      	bne.n	8002318 <receivedLora+0x64>


		switch (LORA_Receive_Message->header->type){
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	789b      	ldrb	r3, [r3, #2]
 8002300:	2b02      	cmp	r3, #2
 8002302:	d002      	beq.n	800230a <receivedLora+0x56>
 8002304:	2b03      	cmp	r3, #3
 8002306:	d003      	beq.n	8002310 <receivedLora+0x5c>
		case PACKET_TYPE_POLL:
			PACKET_TYPE_POLL_fct( LORA_Receive_Message);
			break;

		default:
			break;
 8002308:	e006      	b.n	8002318 <receivedLora+0x64>
			PACKET_TYPE_ACK_fct();
 800230a:	f000 f8d3 	bl	80024b4 <PACKET_TYPE_ACK_fct>
			break;
 800230e:	e003      	b.n	8002318 <receivedLora+0x64>
			PACKET_TYPE_POLL_fct( LORA_Receive_Message);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f000 f80f 	bl	8002334 <PACKET_TYPE_POLL_fct>
			break;
 8002316:	bf00      	nop
		}
	}
	vPortFree(LORA_Receive_Message);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f00a fcb3 	bl	800cc84 <vPortFree>
	osDelay(100);
 800231e:	2064      	movs	r0, #100	@ 0x64
 8002320:	f007 fbeb 	bl	8009afa <osDelay>
}
 8002324:	bf00      	nop
 8002326:	3708      	adds	r7, #8
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	20000a98 	.word	0x20000a98
 8002330:	e000007c 	.word	0xe000007c

08002334 <PACKET_TYPE_POLL_fct>:

void PACKET_TYPE_POLL_fct(LORA_Message* LORA_Receive_Message){
 8002334:	b580      	push	{r7, lr}
 8002336:	b090      	sub	sp, #64	@ 0x40
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
	GNSSReturnQ_t gnssReturn;
	GNSStoPollQ_t poll = {(const uint8_t*) LORA_Receive_Message->payload,
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	61fb      	str	r3, [r7, #28]
			(size_t) LORA_Receive_Message->header->len_payload};
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	78db      	ldrb	r3, [r3, #3]
	GNSStoPollQ_t poll = {(const uint8_t*) LORA_Receive_Message->payload,
 8002348:	623b      	str	r3, [r7, #32]

	GNSSRequestQ_t requestFromLora = {
			.Request_TIME= xTaskGetTickCount(),
 800234a:	f009 f8af 	bl	800b4ac <xTaskGetTickCount>
 800234e:	4603      	mov	r3, r0
	GNSSRequestQ_t requestFromLora = {
 8002350:	60fb      	str	r3, [r7, #12]
			.CLASS = LORA_Receive_Message->payload[2],
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	68db      	ldr	r3, [r3, #12]
	GNSSRequestQ_t requestFromLora = {
 8002356:	789b      	ldrb	r3, [r3, #2]
 8002358:	743b      	strb	r3, [r7, #16]
			.ID = LORA_Receive_Message->payload[3],
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	68db      	ldr	r3, [r3, #12]
	GNSSRequestQ_t requestFromLora = {
 800235e:	78db      	ldrb	r3, [r3, #3]
 8002360:	747b      	strb	r3, [r7, #17]
 8002362:	4b46      	ldr	r3, [pc, #280]	@ (800247c <PACKET_TYPE_POLL_fct+0x148>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	617b      	str	r3, [r7, #20]
 8002368:	4b45      	ldr	r3, [pc, #276]	@ (8002480 <PACKET_TYPE_POLL_fct+0x14c>)
 800236a:	61bb      	str	r3, [r7, #24]
			.applicantSemaphore = LORA_Access_GNSS_ReturnHandle,
			.applicantName = "LORAPolling_REQUEST"};
	LORA_Header* headerSend =(LORA_Header*) pvPortMalloc(sizeof(LORA_Header));
 800236c:	2004      	movs	r0, #4
 800236e:	f00a fbb5 	bl	800cadc <pvPortMalloc>
 8002372:	63f8      	str	r0, [r7, #60]	@ 0x3c


	xQueueSendToBack(GNSS_RequestHandle,&requestFromLora,osWaitForever);
 8002374:	4b43      	ldr	r3, [pc, #268]	@ (8002484 <PACKET_TYPE_POLL_fct+0x150>)
 8002376:	6818      	ldr	r0, [r3, #0]
 8002378:	f107 010c 	add.w	r1, r7, #12
 800237c:	2300      	movs	r3, #0
 800237e:	f04f 32ff 	mov.w	r2, #4294967295
 8002382:	f007 fea7 	bl	800a0d4 <xQueueGenericSend>
	UART_Transmit_With_Color("\r\t\t\n...UBXMessage --FROM-- LORA Polling...\r\n",ANSI_COLOR_MAGENTA);
 8002386:	4940      	ldr	r1, [pc, #256]	@ (8002488 <PACKET_TYPE_POLL_fct+0x154>)
 8002388:	4840      	ldr	r0, [pc, #256]	@ (800248c <PACKET_TYPE_POLL_fct+0x158>)
 800238a:	f7ff fe01 	bl	8001f90 <UART_Transmit_With_Color>
	ITM_Port32(30)=111;
 800238e:	4b40      	ldr	r3, [pc, #256]	@ (8002490 <PACKET_TYPE_POLL_fct+0x15c>)
 8002390:	226f      	movs	r2, #111	@ 0x6f
 8002392:	601a      	str	r2, [r3, #0]
	request_commandToGNSS(poll); //On envoie un message vers GNSS
 8002394:	f107 031c 	add.w	r3, r7, #28
 8002398:	e893 0003 	ldmia.w	r3, {r0, r1}
 800239c:	f7ff fda2 	bl	8001ee4 <request_commandToGNSS>
	ITM_Port32(30)=444;
 80023a0:	4b3b      	ldr	r3, [pc, #236]	@ (8002490 <PACKET_TYPE_POLL_fct+0x15c>)
 80023a2:	f44f 72de 	mov.w	r2, #444	@ 0x1bc
 80023a6:	601a      	str	r2, [r3, #0]
	if (osSemaphoreWait(LORA_Access_GNSS_ReturnHandle, 100)==osOK){
 80023a8:	4b34      	ldr	r3, [pc, #208]	@ (800247c <PACKET_TYPE_POLL_fct+0x148>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2164      	movs	r1, #100	@ 0x64
 80023ae:	4618      	mov	r0, r3
 80023b0:	f007 fbea 	bl	8009b88 <osSemaphoreWait>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d153      	bne.n	8002462 <PACKET_TYPE_POLL_fct+0x12e>
		xQueueReceive(GNSS_ReturnHandle, &gnssReturn, osWaitForever);
 80023ba:	4b36      	ldr	r3, [pc, #216]	@ (8002494 <PACKET_TYPE_POLL_fct+0x160>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80023c2:	f04f 32ff 	mov.w	r2, #4294967295
 80023c6:	4618      	mov	r0, r3
 80023c8:	f008 f8b4 	bl	800a534 <xQueueReceive>
		ITM_Port32(30)=555;
 80023cc:	4b30      	ldr	r3, [pc, #192]	@ (8002490 <PACKET_TYPE_POLL_fct+0x15c>)
 80023ce:	f240 222b 	movw	r2, #555	@ 0x22b
 80023d2:	601a      	str	r2, [r3, #0]
		if (gnssReturn.statut==OK){
 80023d4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d136      	bne.n	800244a <PACKET_TYPE_POLL_fct+0x116>
			*headerSend = (LORA_Header){
				.recipient = 0xFE,
						.sender = MODULE_SOURCE_ADDRESS,
						.type = PACKET_TYPE_POLL,
						.len_payload = (size_t)gnssReturn.bufferReturn->size
 80023dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023de:	685b      	ldr	r3, [r3, #4]
			*headerSend = (LORA_Header){
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023e4:	21fe      	movs	r1, #254	@ 0xfe
 80023e6:	7019      	strb	r1, [r3, #0]
 80023e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023ea:	2101      	movs	r1, #1
 80023ec:	7059      	strb	r1, [r3, #1]
 80023ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023f0:	2103      	movs	r1, #3
 80023f2:	7099      	strb	r1, [r3, #2]
 80023f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023f6:	70da      	strb	r2, [r3, #3]
			};
			LORA_Send(headerSend, (uint8_t*)gnssReturn.bufferReturn->buffer);
 80023f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4619      	mov	r1, r3
 80023fe:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002400:	f7ff fa77 	bl	80018f2 <LORA_Send>
			vPortFree(headerSend);
 8002404:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002406:	f00a fc3d 	bl	800cc84 <vPortFree>

			UART_Transmit_With_Color("\r\t\t\n...UBXMessage --SEND-- LORA Polling...",ANSI_COLOR_MAGENTA);
 800240a:	491f      	ldr	r1, [pc, #124]	@ (8002488 <PACKET_TYPE_POLL_fct+0x154>)
 800240c:	4822      	ldr	r0, [pc, #136]	@ (8002498 <PACKET_TYPE_POLL_fct+0x164>)
 800240e:	f7ff fdbf 	bl	8001f90 <UART_Transmit_With_Color>
			UART_Transmit_With_Color("\t---SUCCESS---\r\n",ANSI_COLOR_GREEN);
 8002412:	4922      	ldr	r1, [pc, #136]	@ (800249c <PACKET_TYPE_POLL_fct+0x168>)
 8002414:	4822      	ldr	r0, [pc, #136]	@ (80024a0 <PACKET_TYPE_POLL_fct+0x16c>)
 8002416:	f7ff fdbb 	bl	8001f90 <UART_Transmit_With_Color>
			char* hexString_LORA = (char*)pvPortMalloc(gnssReturn.bufferReturn->size * 2 + 1);
 800241a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	3301      	adds	r3, #1
 8002422:	4618      	mov	r0, r3
 8002424:	f00a fb5a 	bl	800cadc <pvPortMalloc>
 8002428:	63b8      	str	r0, [r7, #56]	@ 0x38
			uint8_array_to_hex_string(hexString_LORA, gnssReturn.bufferReturn->buffer, gnssReturn.bufferReturn->size);
 800242a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800242c:	6819      	ldr	r1, [r3, #0]
 800242e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	461a      	mov	r2, r3
 8002434:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002436:	f7ff fdc3 	bl	8001fc0 <uint8_array_to_hex_string>
			UART_Transmit_With_Color(hexString_LORA,ANSI_COLOR_MAGENTA);
 800243a:	4913      	ldr	r1, [pc, #76]	@ (8002488 <PACKET_TYPE_POLL_fct+0x154>)
 800243c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800243e:	f7ff fda7 	bl	8001f90 <UART_Transmit_With_Color>
			vPortFree(hexString_LORA);
 8002442:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002444:	f00a fc1e 	bl	800cc84 <vPortFree>
	}
	else{
		UART_Transmit_With_Color("\r\t\t\n...UBXMessage --SEND-- LORA Polling...",ANSI_COLOR_MAGENTA);
		UART_Transmit_With_Color("\t---ISSUE SEMAPHORE--\r\n",ANSI_COLOR_RED);
	}
}
 8002448:	e013      	b.n	8002472 <PACKET_TYPE_POLL_fct+0x13e>
			ITM_Port32(31)=99;
 800244a:	4b16      	ldr	r3, [pc, #88]	@ (80024a4 <PACKET_TYPE_POLL_fct+0x170>)
 800244c:	2263      	movs	r2, #99	@ 0x63
 800244e:	601a      	str	r2, [r3, #0]
			UART_Transmit_With_Color("\r\t\t\n...UBXMessage --SEND-- LORA Polling...",ANSI_COLOR_MAGENTA);
 8002450:	490d      	ldr	r1, [pc, #52]	@ (8002488 <PACKET_TYPE_POLL_fct+0x154>)
 8002452:	4811      	ldr	r0, [pc, #68]	@ (8002498 <PACKET_TYPE_POLL_fct+0x164>)
 8002454:	f7ff fd9c 	bl	8001f90 <UART_Transmit_With_Color>
			UART_Transmit_With_Color("\t---NOT FOUND--\r\n",ANSI_COLOR_RED);
 8002458:	4913      	ldr	r1, [pc, #76]	@ (80024a8 <PACKET_TYPE_POLL_fct+0x174>)
 800245a:	4814      	ldr	r0, [pc, #80]	@ (80024ac <PACKET_TYPE_POLL_fct+0x178>)
 800245c:	f7ff fd98 	bl	8001f90 <UART_Transmit_With_Color>
}
 8002460:	e007      	b.n	8002472 <PACKET_TYPE_POLL_fct+0x13e>
		UART_Transmit_With_Color("\r\t\t\n...UBXMessage --SEND-- LORA Polling...",ANSI_COLOR_MAGENTA);
 8002462:	4909      	ldr	r1, [pc, #36]	@ (8002488 <PACKET_TYPE_POLL_fct+0x154>)
 8002464:	480c      	ldr	r0, [pc, #48]	@ (8002498 <PACKET_TYPE_POLL_fct+0x164>)
 8002466:	f7ff fd93 	bl	8001f90 <UART_Transmit_With_Color>
		UART_Transmit_With_Color("\t---ISSUE SEMAPHORE--\r\n",ANSI_COLOR_RED);
 800246a:	490f      	ldr	r1, [pc, #60]	@ (80024a8 <PACKET_TYPE_POLL_fct+0x174>)
 800246c:	4810      	ldr	r0, [pc, #64]	@ (80024b0 <PACKET_TYPE_POLL_fct+0x17c>)
 800246e:	f7ff fd8f 	bl	8001f90 <UART_Transmit_With_Color>
}
 8002472:	bf00      	nop
 8002474:	3740      	adds	r7, #64	@ 0x40
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	20000aa0 	.word	0x20000aa0
 8002480:	0801006c 	.word	0x0801006c
 8002484:	20000a88 	.word	0x20000a88
 8002488:	08010080 	.word	0x08010080
 800248c:	08010088 	.word	0x08010088
 8002490:	e0000078 	.word	0xe0000078
 8002494:	20000a8c 	.word	0x20000a8c
 8002498:	080100b8 	.word	0x080100b8
 800249c:	080100e4 	.word	0x080100e4
 80024a0:	080100ec 	.word	0x080100ec
 80024a4:	e000007c 	.word	0xe000007c
 80024a8:	08010100 	.word	0x08010100
 80024ac:	08010108 	.word	0x08010108
 80024b0:	0801011c 	.word	0x0801011c

080024b4 <PACKET_TYPE_ACK_fct>:
void PACKET_TYPE_ACK_fct(void){
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
	//Lora send un messsage vide
	LORA_Header* headerSend =(LORA_Header*) pvPortMalloc(sizeof(LORA_Header));
 80024ba:	2004      	movs	r0, #4
 80024bc:	f00a fb0e 	bl	800cadc <pvPortMalloc>
 80024c0:	6078      	str	r0, [r7, #4]

	*headerSend = (LORA_Header){
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a06      	ldr	r2, [pc, #24]	@ (80024e0 <PACKET_TYPE_ACK_fct+0x2c>)
 80024c6:	6810      	ldr	r0, [r2, #0]
 80024c8:	6018      	str	r0, [r3, #0]
		.recipient = 0xFE,
				.sender = MODULE_SOURCE_ADDRESS,
				.type = PACKET_TYPE_ACK,
				.len_payload = sizeof(NULL)
	};
	LORA_Send(headerSend, NULL);
 80024ca:	2100      	movs	r1, #0
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f7ff fa10 	bl	80018f2 <LORA_Send>
	vPortFree(headerSend);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f00a fbd6 	bl	800cc84 <vPortFree>

}
 80024d8:	bf00      	nop
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	08010134 	.word	0x08010134

080024e4 <uartbyteToGnssMessage>:
UARTMessageQ_t uartMsg;
UARTState state;
uint16_t payloadIndex = 0;
static UBXMessage_parsed* messageUBX = NULL;

void uartbyteToGnssMessage(void){
 80024e4:	b590      	push	{r4, r7, lr}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
	if (xQueueReceive(UARTbyteHandle, &uartMsg, portMAX_DELAY) == pdTRUE) {
 80024ea:	4b7c      	ldr	r3, [pc, #496]	@ (80026dc <uartbyteToGnssMessage+0x1f8>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f04f 32ff 	mov.w	r2, #4294967295
 80024f2:	497b      	ldr	r1, [pc, #492]	@ (80026e0 <uartbyteToGnssMessage+0x1fc>)
 80024f4:	4618      	mov	r0, r3
 80024f6:	f008 f81d 	bl	800a534 <xQueueReceive>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	f040 8183 	bne.w	8002808 <uartbyteToGnssMessage+0x324>
		uint8_t receivedByte = uartMsg.data;
 8002502:	4b77      	ldr	r3, [pc, #476]	@ (80026e0 <uartbyteToGnssMessage+0x1fc>)
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	73fb      	strb	r3, [r7, #15]
		// Machine à états pour traiter les messages
		switch (state) {
 8002508:	4b76      	ldr	r3, [pc, #472]	@ (80026e4 <uartbyteToGnssMessage+0x200>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2b06      	cmp	r3, #6
 800250e:	f200 8174 	bhi.w	80027fa <uartbyteToGnssMessage+0x316>
 8002512:	a201      	add	r2, pc, #4	@ (adr r2, 8002518 <uartbyteToGnssMessage+0x34>)
 8002514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002518:	08002535 	.word	0x08002535
 800251c:	0800255b 	.word	0x0800255b
 8002520:	08002571 	.word	0x08002571
 8002524:	08002595 	.word	0x08002595
 8002528:	080025a5 	.word	0x080025a5
 800252c:	080025b7 	.word	0x080025b7
 8002530:	08002705 	.word	0x08002705
		case WAIT_FOR_SYNC_1:
			if (receivedByte == HEADER_UBX_1) {
 8002534:	7bfb      	ldrb	r3, [r7, #15]
 8002536:	2bb5      	cmp	r3, #181	@ 0xb5
 8002538:	f040 8163 	bne.w	8002802 <uartbyteToGnssMessage+0x31e>
				ITM_Port32(31)=1111;
 800253c:	4b6a      	ldr	r3, [pc, #424]	@ (80026e8 <uartbyteToGnssMessage+0x204>)
 800253e:	f240 4257 	movw	r2, #1111	@ 0x457
 8002542:	601a      	str	r2, [r3, #0]
				osSemaphoreWait(GNSS_UART_AccessHandle, osWaitForever);
 8002544:	4b69      	ldr	r3, [pc, #420]	@ (80026ec <uartbyteToGnssMessage+0x208>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f04f 31ff 	mov.w	r1, #4294967295
 800254c:	4618      	mov	r0, r3
 800254e:	f007 fb1b 	bl	8009b88 <osSemaphoreWait>
				state = WAIT_FOR_SYNC_2;
 8002552:	4b64      	ldr	r3, [pc, #400]	@ (80026e4 <uartbyteToGnssMessage+0x200>)
 8002554:	2201      	movs	r2, #1
 8002556:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002558:	e153      	b.n	8002802 <uartbyteToGnssMessage+0x31e>

		case WAIT_FOR_SYNC_2:
			if (receivedByte == HEADER_UBX_2)
 800255a:	7bfb      	ldrb	r3, [r7, #15]
 800255c:	2b62      	cmp	r3, #98	@ 0x62
 800255e:	d103      	bne.n	8002568 <uartbyteToGnssMessage+0x84>
			{state = WAIT_FOR_CLASS;}
 8002560:	4b60      	ldr	r3, [pc, #384]	@ (80026e4 <uartbyteToGnssMessage+0x200>)
 8002562:	2202      	movs	r2, #2
 8002564:	701a      	strb	r2, [r3, #0]
			else
			{state = WAIT_FOR_SYNC_1;}
			break;
 8002566:	e14f      	b.n	8002808 <uartbyteToGnssMessage+0x324>
			{state = WAIT_FOR_SYNC_1;}
 8002568:	4b5e      	ldr	r3, [pc, #376]	@ (80026e4 <uartbyteToGnssMessage+0x200>)
 800256a:	2200      	movs	r2, #0
 800256c:	701a      	strb	r2, [r3, #0]
			break;
 800256e:	e14b      	b.n	8002808 <uartbyteToGnssMessage+0x324>

		case WAIT_FOR_CLASS:
			if (messageUBX ==NULL){
 8002570:	4b5f      	ldr	r3, [pc, #380]	@ (80026f0 <uartbyteToGnssMessage+0x20c>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d105      	bne.n	8002584 <uartbyteToGnssMessage+0xa0>
				messageUBX = (UBXMessage_parsed*) pvPortMalloc(sizeof(UBXMessage_parsed)) ;
 8002578:	20d4      	movs	r0, #212	@ 0xd4
 800257a:	f00a faaf 	bl	800cadc <pvPortMalloc>
 800257e:	4603      	mov	r3, r0
 8002580:	4a5b      	ldr	r2, [pc, #364]	@ (80026f0 <uartbyteToGnssMessage+0x20c>)
 8002582:	6013      	str	r3, [r2, #0]
			}
			messageUBX->CLASS = receivedByte;
 8002584:	4b5a      	ldr	r3, [pc, #360]	@ (80026f0 <uartbyteToGnssMessage+0x20c>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	7bfa      	ldrb	r2, [r7, #15]
 800258a:	701a      	strb	r2, [r3, #0]
			state = WAIT_FOR_ID;
 800258c:	4b55      	ldr	r3, [pc, #340]	@ (80026e4 <uartbyteToGnssMessage+0x200>)
 800258e:	2203      	movs	r2, #3
 8002590:	701a      	strb	r2, [r3, #0]
			break;
 8002592:	e139      	b.n	8002808 <uartbyteToGnssMessage+0x324>

		case WAIT_FOR_ID:
			messageUBX->ID = receivedByte;
 8002594:	4b56      	ldr	r3, [pc, #344]	@ (80026f0 <uartbyteToGnssMessage+0x20c>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	7bfa      	ldrb	r2, [r7, #15]
 800259a:	705a      	strb	r2, [r3, #1]
			state = WAIT_FOR_LENGTH_1;
 800259c:	4b51      	ldr	r3, [pc, #324]	@ (80026e4 <uartbyteToGnssMessage+0x200>)
 800259e:	2204      	movs	r2, #4
 80025a0:	701a      	strb	r2, [r3, #0]
			break;
 80025a2:	e131      	b.n	8002808 <uartbyteToGnssMessage+0x324>

		case WAIT_FOR_LENGTH_1:
			messageUBX->len_payload = receivedByte;
 80025a4:	4b52      	ldr	r3, [pc, #328]	@ (80026f0 <uartbyteToGnssMessage+0x20c>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	7bfa      	ldrb	r2, [r7, #15]
 80025aa:	b292      	uxth	r2, r2
 80025ac:	805a      	strh	r2, [r3, #2]
			state = WAIT_FOR_LENGTH_2;
 80025ae:	4b4d      	ldr	r3, [pc, #308]	@ (80026e4 <uartbyteToGnssMessage+0x200>)
 80025b0:	2205      	movs	r2, #5
 80025b2:	701a      	strb	r2, [r3, #0]
			break;
 80025b4:	e128      	b.n	8002808 <uartbyteToGnssMessage+0x324>
		case WAIT_FOR_LENGTH_2:
			ITM_Port32(31)=6666;
 80025b6:	4b4c      	ldr	r3, [pc, #304]	@ (80026e8 <uartbyteToGnssMessage+0x204>)
 80025b8:	f641 220a 	movw	r2, #6666	@ 0x1a0a
 80025bc:	601a      	str	r2, [r3, #0]
			messageUBX->len_payload |= receivedByte << 8;
 80025be:	4b4c      	ldr	r3, [pc, #304]	@ (80026f0 <uartbyteToGnssMessage+0x20c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	885b      	ldrh	r3, [r3, #2]
 80025c4:	b21a      	sxth	r2, r3
 80025c6:	7bfb      	ldrb	r3, [r7, #15]
 80025c8:	021b      	lsls	r3, r3, #8
 80025ca:	b21b      	sxth	r3, r3
 80025cc:	4313      	orrs	r3, r2
 80025ce:	b21a      	sxth	r2, r3
 80025d0:	4b47      	ldr	r3, [pc, #284]	@ (80026f0 <uartbyteToGnssMessage+0x20c>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	b292      	uxth	r2, r2
 80025d6:	805a      	strh	r2, [r3, #2]
			if (messageUBX->len_payload > 0 && messageUBX->len_payload <= UART_MAX_BUFFER_SIZE) {
 80025d8:	4b45      	ldr	r3, [pc, #276]	@ (80026f0 <uartbyteToGnssMessage+0x20c>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	885b      	ldrh	r3, [r3, #2]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d06e      	beq.n	80026c0 <uartbyteToGnssMessage+0x1dc>
 80025e2:	4b43      	ldr	r3, [pc, #268]	@ (80026f0 <uartbyteToGnssMessage+0x20c>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	885b      	ldrh	r3, [r3, #2]
 80025e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80025ec:	d868      	bhi.n	80026c0 <uartbyteToGnssMessage+0x1dc>
				messageUBX->load = initializeBuffer(messageUBX->len_payload);
 80025ee:	4b40      	ldr	r3, [pc, #256]	@ (80026f0 <uartbyteToGnssMessage+0x20c>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	885b      	ldrh	r3, [r3, #2]
 80025f4:	461a      	mov	r2, r3
 80025f6:	4b3e      	ldr	r3, [pc, #248]	@ (80026f0 <uartbyteToGnssMessage+0x20c>)
 80025f8:	681c      	ldr	r4, [r3, #0]
 80025fa:	4610      	mov	r0, r2
 80025fc:	f7fe fc98 	bl	8000f30 <initializeBuffer>
 8002600:	4603      	mov	r3, r0
 8002602:	f8c4 30cc 	str.w	r3, [r4, #204]	@ 0xcc
				messageUBX->brute = initializeBuffer(messageUBX->len_payload+8);
 8002606:	4b3a      	ldr	r3, [pc, #232]	@ (80026f0 <uartbyteToGnssMessage+0x20c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	885b      	ldrh	r3, [r3, #2]
 800260c:	3308      	adds	r3, #8
 800260e:	461a      	mov	r2, r3
 8002610:	4b37      	ldr	r3, [pc, #220]	@ (80026f0 <uartbyteToGnssMessage+0x20c>)
 8002612:	681c      	ldr	r4, [r3, #0]
 8002614:	4610      	mov	r0, r2
 8002616:	f7fe fc8b 	bl	8000f30 <initializeBuffer>
 800261a:	4603      	mov	r3, r0
 800261c:	f8c4 30d0 	str.w	r3, [r4, #208]	@ 0xd0
				if (messageUBX->load == NULL) {
 8002620:	4b33      	ldr	r3, [pc, #204]	@ (80026f0 <uartbyteToGnssMessage+0x20c>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8002628:	2b00      	cmp	r3, #0
 800262a:	d107      	bne.n	800263c <uartbyteToGnssMessage+0x158>
					// Erreur d'allocation de mémoire
					UART_Transmit_With_Color("\r\t\t\n...UARTByte --ALLOCATION-- FAILED...\r\n",ANSI_COLOR_RED);
 800262c:	4931      	ldr	r1, [pc, #196]	@ (80026f4 <uartbyteToGnssMessage+0x210>)
 800262e:	4832      	ldr	r0, [pc, #200]	@ (80026f8 <uartbyteToGnssMessage+0x214>)
 8002630:	f7ff fcae 	bl	8001f90 <UART_Transmit_With_Color>
					state = WAIT_FOR_SYNC_1;
 8002634:	4b2b      	ldr	r3, [pc, #172]	@ (80026e4 <uartbyteToGnssMessage+0x200>)
 8002636:	2200      	movs	r2, #0
 8002638:	701a      	strb	r2, [r3, #0]
				if (messageUBX->load == NULL) {
 800263a:	e04e      	b.n	80026da <uartbyteToGnssMessage+0x1f6>
				} else {
					payloadIndex = 0;
 800263c:	4b2f      	ldr	r3, [pc, #188]	@ (80026fc <uartbyteToGnssMessage+0x218>)
 800263e:	2200      	movs	r2, #0
 8002640:	801a      	strh	r2, [r3, #0]
					messageUBX->brute->buffer[0]=0xb5;
 8002642:	4b2b      	ldr	r3, [pc, #172]	@ (80026f0 <uartbyteToGnssMessage+0x20c>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	22b5      	movs	r2, #181	@ 0xb5
 800264e:	701a      	strb	r2, [r3, #0]
					messageUBX->brute->buffer[1]=0x62;
 8002650:	4b27      	ldr	r3, [pc, #156]	@ (80026f0 <uartbyteToGnssMessage+0x20c>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	3301      	adds	r3, #1
 800265c:	2262      	movs	r2, #98	@ 0x62
 800265e:	701a      	strb	r2, [r3, #0]
					messageUBX->brute->buffer[2]=messageUBX->CLASS;
 8002660:	4b23      	ldr	r3, [pc, #140]	@ (80026f0 <uartbyteToGnssMessage+0x20c>)
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	4b22      	ldr	r3, [pc, #136]	@ (80026f0 <uartbyteToGnssMessage+0x20c>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	3302      	adds	r3, #2
 8002670:	7812      	ldrb	r2, [r2, #0]
 8002672:	701a      	strb	r2, [r3, #0]
					messageUBX->brute->buffer[3]=messageUBX->ID;
 8002674:	4b1e      	ldr	r3, [pc, #120]	@ (80026f0 <uartbyteToGnssMessage+0x20c>)
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	4b1d      	ldr	r3, [pc, #116]	@ (80026f0 <uartbyteToGnssMessage+0x20c>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	3303      	adds	r3, #3
 8002684:	7852      	ldrb	r2, [r2, #1]
 8002686:	701a      	strb	r2, [r3, #0]
					messageUBX->brute->buffer[4]=messageUBX->len_payload & 0x00FF;
 8002688:	4b19      	ldr	r3, [pc, #100]	@ (80026f0 <uartbyteToGnssMessage+0x20c>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	885a      	ldrh	r2, [r3, #2]
 800268e:	4b18      	ldr	r3, [pc, #96]	@ (80026f0 <uartbyteToGnssMessage+0x20c>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	3304      	adds	r3, #4
 800269a:	b2d2      	uxtb	r2, r2
 800269c:	701a      	strb	r2, [r3, #0]
					messageUBX->brute->buffer[5]=messageUBX->len_payload >> 8;
 800269e:	4b14      	ldr	r3, [pc, #80]	@ (80026f0 <uartbyteToGnssMessage+0x20c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	885b      	ldrh	r3, [r3, #2]
 80026a4:	0a1b      	lsrs	r3, r3, #8
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	4b11      	ldr	r3, [pc, #68]	@ (80026f0 <uartbyteToGnssMessage+0x20c>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	3305      	adds	r3, #5
 80026b4:	b2d2      	uxtb	r2, r2
 80026b6:	701a      	strb	r2, [r3, #0]
					state = RECEIVE_MESSAGE;
 80026b8:	4b0a      	ldr	r3, [pc, #40]	@ (80026e4 <uartbyteToGnssMessage+0x200>)
 80026ba:	2206      	movs	r2, #6
 80026bc:	701a      	strb	r2, [r3, #0]
				if (messageUBX->load == NULL) {
 80026be:	e00c      	b.n	80026da <uartbyteToGnssMessage+0x1f6>
				}
			} else {
				// Longueur invalide
				UART_Transmit_With_Color("\r\t\t\n...UARTByte --INVALID LENGTH-- FAILED...\r\n",ANSI_COLOR_RED);
 80026c0:	490c      	ldr	r1, [pc, #48]	@ (80026f4 <uartbyteToGnssMessage+0x210>)
 80026c2:	480f      	ldr	r0, [pc, #60]	@ (8002700 <uartbyteToGnssMessage+0x21c>)
 80026c4:	f7ff fc64 	bl	8001f90 <UART_Transmit_With_Color>
				vPortFree(messageUBX);
 80026c8:	4b09      	ldr	r3, [pc, #36]	@ (80026f0 <uartbyteToGnssMessage+0x20c>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f00a fad9 	bl	800cc84 <vPortFree>
				state = WAIT_FOR_SYNC_1;
 80026d2:	4b04      	ldr	r3, [pc, #16]	@ (80026e4 <uartbyteToGnssMessage+0x200>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	701a      	strb	r2, [r3, #0]
			}
			break;
 80026d8:	e096      	b.n	8002808 <uartbyteToGnssMessage+0x324>
 80026da:	e095      	b.n	8002808 <uartbyteToGnssMessage+0x324>
 80026dc:	20000a80 	.word	0x20000a80
 80026e0:	20000a48 	.word	0x20000a48
 80026e4:	20000a49 	.word	0x20000a49
 80026e8:	e000007c 	.word	0xe000007c
 80026ec:	20000aa4 	.word	0x20000aa4
 80026f0:	20000a4c 	.word	0x20000a4c
 80026f4:	08010138 	.word	0x08010138
 80026f8:	08010140 	.word	0x08010140
 80026fc:	20000a4a 	.word	0x20000a4a
 8002700:	0801016c 	.word	0x0801016c
		case RECEIVE_MESSAGE:
			payloadIndex++ ;
 8002704:	4b42      	ldr	r3, [pc, #264]	@ (8002810 <uartbyteToGnssMessage+0x32c>)
 8002706:	881b      	ldrh	r3, [r3, #0]
 8002708:	3301      	adds	r3, #1
 800270a:	b29a      	uxth	r2, r3
 800270c:	4b40      	ldr	r3, [pc, #256]	@ (8002810 <uartbyteToGnssMessage+0x32c>)
 800270e:	801a      	strh	r2, [r3, #0]
			if (payloadIndex < messageUBX->len_payload){
 8002710:	4b40      	ldr	r3, [pc, #256]	@ (8002814 <uartbyteToGnssMessage+0x330>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	885a      	ldrh	r2, [r3, #2]
 8002716:	4b3e      	ldr	r3, [pc, #248]	@ (8002810 <uartbyteToGnssMessage+0x32c>)
 8002718:	881b      	ldrh	r3, [r3, #0]
 800271a:	429a      	cmp	r2, r3
 800271c:	d909      	bls.n	8002732 <uartbyteToGnssMessage+0x24e>
				messageUBX->load->buffer[payloadIndex] = receivedByte;
 800271e:	4b3d      	ldr	r3, [pc, #244]	@ (8002814 <uartbyteToGnssMessage+0x330>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a39      	ldr	r2, [pc, #228]	@ (8002810 <uartbyteToGnssMessage+0x32c>)
 800272a:	8812      	ldrh	r2, [r2, #0]
 800272c:	4413      	add	r3, r2
 800272e:	7bfa      	ldrb	r2, [r7, #15]
 8002730:	701a      	strb	r2, [r3, #0]
			}
			if (payloadIndex <= messageUBX->len_payload + 2){
 8002732:	4b37      	ldr	r3, [pc, #220]	@ (8002810 <uartbyteToGnssMessage+0x32c>)
 8002734:	881b      	ldrh	r3, [r3, #0]
 8002736:	461a      	mov	r2, r3
 8002738:	4b36      	ldr	r3, [pc, #216]	@ (8002814 <uartbyteToGnssMessage+0x330>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	885b      	ldrh	r3, [r3, #2]
 800273e:	3302      	adds	r3, #2
 8002740:	429a      	cmp	r2, r3
 8002742:	dc0a      	bgt.n	800275a <uartbyteToGnssMessage+0x276>
				messageUBX->brute->buffer[6 + payloadIndex] = receivedByte;
 8002744:	4b33      	ldr	r3, [pc, #204]	@ (8002814 <uartbyteToGnssMessage+0x330>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a30      	ldr	r2, [pc, #192]	@ (8002810 <uartbyteToGnssMessage+0x32c>)
 8002750:	8812      	ldrh	r2, [r2, #0]
 8002752:	3206      	adds	r2, #6
 8002754:	4413      	add	r3, r2
 8002756:	7bfa      	ldrb	r2, [r7, #15]
 8002758:	701a      	strb	r2, [r3, #0]
			}
			if  (payloadIndex == messageUBX->len_payload + 2){ // ON perd un byte ici !
 800275a:	4b2d      	ldr	r3, [pc, #180]	@ (8002810 <uartbyteToGnssMessage+0x32c>)
 800275c:	881b      	ldrh	r3, [r3, #0]
 800275e:	461a      	mov	r2, r3
 8002760:	4b2c      	ldr	r3, [pc, #176]	@ (8002814 <uartbyteToGnssMessage+0x330>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	885b      	ldrh	r3, [r3, #2]
 8002766:	3302      	adds	r3, #2
 8002768:	429a      	cmp	r2, r3
 800276a:	d14c      	bne.n	8002806 <uartbyteToGnssMessage+0x322>
				GenericMessage* receptionGNSS = (GenericMessage*)pvPortMalloc(sizeof(GenericMessage));
 800276c:	2008      	movs	r0, #8
 800276e:	f00a f9b5 	bl	800cadc <pvPortMalloc>
 8002772:	60b8      	str	r0, [r7, #8]

				receptionGNSS->typeMessage=UBX;
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	2202      	movs	r2, #2
 8002778:	701a      	strb	r2, [r3, #0]
				receptionGNSS->Message.UBXMessage = messageUBX;
 800277a:	4b26      	ldr	r3, [pc, #152]	@ (8002814 <uartbyteToGnssMessage+0x330>)
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	605a      	str	r2, [r3, #4]

				UBXMessageQ_t gnssMsg = { .receptionGNSS = receptionGNSS };
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	607b      	str	r3, [r7, #4]
				if (xQueueSendToBack(UBXQueueHandle, &gnssMsg, portMAX_DELAY) != pdTRUE) {
 8002786:	4b24      	ldr	r3, [pc, #144]	@ (8002818 <uartbyteToGnssMessage+0x334>)
 8002788:	6818      	ldr	r0, [r3, #0]
 800278a:	1d39      	adds	r1, r7, #4
 800278c:	2300      	movs	r3, #0
 800278e:	f04f 32ff 	mov.w	r2, #4294967295
 8002792:	f007 fc9f 	bl	800a0d4 <xQueueGenericSend>
 8002796:	4603      	mov	r3, r0
 8002798:	2b01      	cmp	r3, #1
 800279a:	d004      	beq.n	80027a6 <uartbyteToGnssMessage+0x2c2>
					// Erreur d'envoi dans la queue
					UART_Transmit_With_Color("\r\t\t\n...UARTByte --SendQueue-- FAILED...\r\n",ANSI_COLOR_RED);
 800279c:	491f      	ldr	r1, [pc, #124]	@ (800281c <uartbyteToGnssMessage+0x338>)
 800279e:	4820      	ldr	r0, [pc, #128]	@ (8002820 <uartbyteToGnssMessage+0x33c>)
 80027a0:	f7ff fbf6 	bl	8001f90 <UART_Transmit_With_Color>
 80027a4:	e003      	b.n	80027ae <uartbyteToGnssMessage+0x2ca>

				}else{
					UART_Transmit_With_Color("\r\n...[INFO] UARTByte --SendQueue-- SUCCESS...\r\n",ANSI_COLOR_RESET);
 80027a6:	491f      	ldr	r1, [pc, #124]	@ (8002824 <uartbyteToGnssMessage+0x340>)
 80027a8:	481f      	ldr	r0, [pc, #124]	@ (8002828 <uartbyteToGnssMessage+0x344>)
 80027aa:	f7ff fbf1 	bl	8001f90 <UART_Transmit_With_Color>
				}
				osSemaphoreRelease(GNSS_UART_AccessHandle);
 80027ae:	4b1f      	ldr	r3, [pc, #124]	@ (800282c <uartbyteToGnssMessage+0x348>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f007 fa36 	bl	8009c24 <osSemaphoreRelease>
				freeBuffer(messageUBX->load);
 80027b8:	4b16      	ldr	r3, [pc, #88]	@ (8002814 <uartbyteToGnssMessage+0x330>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7fe fbd9 	bl	8000f78 <freeBuffer>
				freeBuffer(messageUBX->brute);
 80027c6:	4b13      	ldr	r3, [pc, #76]	@ (8002814 <uartbyteToGnssMessage+0x330>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7fe fbd2 	bl	8000f78 <freeBuffer>
				vPortFree(messageUBX);
 80027d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002814 <uartbyteToGnssMessage+0x330>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4618      	mov	r0, r3
 80027da:	f00a fa53 	bl	800cc84 <vPortFree>
				messageUBX = NULL;
 80027de:	4b0d      	ldr	r3, [pc, #52]	@ (8002814 <uartbyteToGnssMessage+0x330>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]
				vPortFree(receptionGNSS);
 80027e4:	68b8      	ldr	r0, [r7, #8]
 80027e6:	f00a fa4d 	bl	800cc84 <vPortFree>
				state = WAIT_FOR_SYNC_1;
 80027ea:	4b11      	ldr	r3, [pc, #68]	@ (8002830 <uartbyteToGnssMessage+0x34c>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	701a      	strb	r2, [r3, #0]
				ITM_Port32(31)=9999;
 80027f0:	4b10      	ldr	r3, [pc, #64]	@ (8002834 <uartbyteToGnssMessage+0x350>)
 80027f2:	f242 720f 	movw	r2, #9999	@ 0x270f
 80027f6:	601a      	str	r2, [r3, #0]
			}
			break;
 80027f8:	e005      	b.n	8002806 <uartbyteToGnssMessage+0x322>
		default:
			state = WAIT_FOR_SYNC_1;
 80027fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002830 <uartbyteToGnssMessage+0x34c>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	701a      	strb	r2, [r3, #0]
			break;
 8002800:	e002      	b.n	8002808 <uartbyteToGnssMessage+0x324>
			break;
 8002802:	bf00      	nop
 8002804:	e000      	b.n	8002808 <uartbyteToGnssMessage+0x324>
			break;
 8002806:	bf00      	nop
		}
	}
}
 8002808:	bf00      	nop
 800280a:	3714      	adds	r7, #20
 800280c:	46bd      	mov	sp, r7
 800280e:	bd90      	pop	{r4, r7, pc}
 8002810:	20000a4a 	.word	0x20000a4a
 8002814:	20000a4c 	.word	0x20000a4c
 8002818:	20000a84 	.word	0x20000a84
 800281c:	08010138 	.word	0x08010138
 8002820:	0801019c 	.word	0x0801019c
 8002824:	080101c8 	.word	0x080101c8
 8002828:	080101d0 	.word	0x080101d0
 800282c:	20000aa4 	.word	0x20000aa4
 8002830:	20000a49 	.word	0x20000a49
 8002834:	e000007c 	.word	0xe000007c

08002838 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b08a      	sub	sp, #40	@ 0x28
 800283c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800283e:	1d3b      	adds	r3, r7, #4
 8002840:	2224      	movs	r2, #36	@ 0x24
 8002842:	2100      	movs	r1, #0
 8002844:	4618      	mov	r0, r3
 8002846:	f00b f9da 	bl	800dbfe <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800284a:	4b17      	ldr	r3, [pc, #92]	@ (80028a8 <MX_DAC1_Init+0x70>)
 800284c:	4a17      	ldr	r2, [pc, #92]	@ (80028ac <MX_DAC1_Init+0x74>)
 800284e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8002850:	4815      	ldr	r0, [pc, #84]	@ (80028a8 <MX_DAC1_Init+0x70>)
 8002852:	f001 fb75 	bl	8003f40 <HAL_DAC_Init>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800285c:	f000 fc02 	bl	8003064 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002860:	2300      	movs	r3, #0
 8002862:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002864:	2300      	movs	r3, #0
 8002866:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002868:	2300      	movs	r3, #0
 800286a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800286c:	2300      	movs	r3, #0
 800286e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8002870:	2300      	movs	r3, #0
 8002872:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002874:	1d3b      	adds	r3, r7, #4
 8002876:	2200      	movs	r2, #0
 8002878:	4619      	mov	r1, r3
 800287a:	480b      	ldr	r0, [pc, #44]	@ (80028a8 <MX_DAC1_Init+0x70>)
 800287c:	f001 fb82 	bl	8003f84 <HAL_DAC_ConfigChannel>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8002886:	f000 fbed 	bl	8003064 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800288a:	1d3b      	adds	r3, r7, #4
 800288c:	2210      	movs	r2, #16
 800288e:	4619      	mov	r1, r3
 8002890:	4805      	ldr	r0, [pc, #20]	@ (80028a8 <MX_DAC1_Init+0x70>)
 8002892:	f001 fb77 	bl	8003f84 <HAL_DAC_ConfigChannel>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 800289c:	f000 fbe2 	bl	8003064 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80028a0:	bf00      	nop
 80028a2:	3728      	adds	r7, #40	@ 0x28
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	20000a50 	.word	0x20000a50
 80028ac:	40007400 	.word	0x40007400

080028b0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b08a      	sub	sp, #40	@ 0x28
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b8:	f107 0314 	add.w	r3, r7, #20
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	605a      	str	r2, [r3, #4]
 80028c2:	609a      	str	r2, [r3, #8]
 80028c4:	60da      	str	r2, [r3, #12]
 80028c6:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a15      	ldr	r2, [pc, #84]	@ (8002924 <HAL_DAC_MspInit+0x74>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d124      	bne.n	800291c <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80028d2:	4b15      	ldr	r3, [pc, #84]	@ (8002928 <HAL_DAC_MspInit+0x78>)
 80028d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028d6:	4a14      	ldr	r2, [pc, #80]	@ (8002928 <HAL_DAC_MspInit+0x78>)
 80028d8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80028dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80028de:	4b12      	ldr	r3, [pc, #72]	@ (8002928 <HAL_DAC_MspInit+0x78>)
 80028e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80028e6:	613b      	str	r3, [r7, #16]
 80028e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ea:	4b0f      	ldr	r3, [pc, #60]	@ (8002928 <HAL_DAC_MspInit+0x78>)
 80028ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ee:	4a0e      	ldr	r2, [pc, #56]	@ (8002928 <HAL_DAC_MspInit+0x78>)
 80028f0:	f043 0301 	orr.w	r3, r3, #1
 80028f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028f6:	4b0c      	ldr	r3, [pc, #48]	@ (8002928 <HAL_DAC_MspInit+0x78>)
 80028f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	60fb      	str	r3, [r7, #12]
 8002900:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = STM_DAC_TRIG_Pin|STM_DAC_CS_Pin;
 8002902:	2330      	movs	r3, #48	@ 0x30
 8002904:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002906:	2303      	movs	r3, #3
 8002908:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290a:	2300      	movs	r3, #0
 800290c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800290e:	f107 0314 	add.w	r3, r7, #20
 8002912:	4619      	mov	r1, r3
 8002914:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002918:	f001 fcda 	bl	80042d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 800291c:	bf00      	nop
 800291e:	3728      	adds	r7, #40	@ 0x28
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40007400 	.word	0x40007400
 8002928:	40021000 	.word	0x40021000

0800292c <configureTimerForRunTimeStats>:
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim2);
 8002930:	4802      	ldr	r0, [pc, #8]	@ (800293c <configureTimerForRunTimeStats+0x10>)
 8002932:	f004 fd3f 	bl	80073b4 <HAL_TIM_Base_Start>
}
 8002936:	bf00      	nop
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	2000251c 	.word	0x2000251c

08002940 <getRunTimeCounterValue>:
extern volatile unsigned long ulHighFrequencyTimerTicks;
__weak unsigned long getRunTimeCounterValue(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
	return 0;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <vApplicationMallocFailedHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8002954:	bf00      	nop
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
	...

08002960 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002960:	b480      	push	{r7}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	4a07      	ldr	r2, [pc, #28]	@ (800298c <vApplicationGetIdleTaskMemory+0x2c>)
 8002970:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	4a06      	ldr	r2, [pc, #24]	@ (8002990 <vApplicationGetIdleTaskMemory+0x30>)
 8002976:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800297e:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 8002980:	bf00      	nop
 8002982:	3714      	adds	r7, #20
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr
 800298c:	20000aa8 	.word	0x20000aa8
 8002990:	20000b54 	.word	0x20000b54

08002994 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
	*ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	4a07      	ldr	r2, [pc, #28]	@ (80029c0 <vApplicationGetTimerTaskMemory+0x2c>)
 80029a4:	601a      	str	r2, [r3, #0]
	*ppxTimerTaskStackBuffer = &xTimerStack[0];
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	4a06      	ldr	r2, [pc, #24]	@ (80029c4 <vApplicationGetTimerTaskMemory+0x30>)
 80029aa:	601a      	str	r2, [r3, #0]
	*pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029b2:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 80029b4:	bf00      	nop
 80029b6:	3714      	adds	r7, #20
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	20001354 	.word	0x20001354
 80029c4:	20001400 	.word	0x20001400

080029c8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80029c8:	b5b0      	push	{r4, r5, r7, lr}
 80029ca:	b0d2      	sub	sp, #328	@ 0x148
 80029cc:	af00      	add	r7, sp, #0
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of xSem_LORAReceive_start */
  osSemaphoreDef(xSem_LORAReceive_start);
 80029ce:	2300      	movs	r3, #0
 80029d0:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 80029d4:	2300      	movs	r3, #0
 80029d6:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
  xSem_LORAReceive_startHandle = osSemaphoreCreate(osSemaphore(xSem_LORAReceive_start), 1);
 80029da:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80029de:	2101      	movs	r1, #1
 80029e0:	4618      	mov	r0, r3
 80029e2:	f007 f89e 	bl	8009b22 <osSemaphoreCreate>
 80029e6:	4603      	mov	r3, r0
 80029e8:	4a8d      	ldr	r2, [pc, #564]	@ (8002c20 <MX_FREERTOS_Init+0x258>)
 80029ea:	6013      	str	r3, [r2, #0]

  /* definition and creation of SD_Access_GNSS_Return */
  osSemaphoreDef(SD_Access_GNSS_Return);
 80029ec:	2300      	movs	r3, #0
 80029ee:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80029f2:	2300      	movs	r3, #0
 80029f4:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
  SD_Access_GNSS_ReturnHandle = osSemaphoreCreate(osSemaphore(SD_Access_GNSS_Return), 1);
 80029f8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80029fc:	2101      	movs	r1, #1
 80029fe:	4618      	mov	r0, r3
 8002a00:	f007 f88f 	bl	8009b22 <osSemaphoreCreate>
 8002a04:	4603      	mov	r3, r0
 8002a06:	4a87      	ldr	r2, [pc, #540]	@ (8002c24 <MX_FREERTOS_Init+0x25c>)
 8002a08:	6013      	str	r3, [r2, #0]

  /* definition and creation of LORA_Access_GNSS_Return */
  osSemaphoreDef(LORA_Access_GNSS_Return);
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8002a10:	2300      	movs	r3, #0
 8002a12:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  LORA_Access_GNSS_ReturnHandle = osSemaphoreCreate(osSemaphore(LORA_Access_GNSS_Return), 1);
 8002a16:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f007 f880 	bl	8009b22 <osSemaphoreCreate>
 8002a22:	4603      	mov	r3, r0
 8002a24:	4a80      	ldr	r2, [pc, #512]	@ (8002c28 <MX_FREERTOS_Init+0x260>)
 8002a26:	6013      	str	r3, [r2, #0]

  /* definition and creation of GNSS_UART_Access */
  osSemaphoreDef(GNSS_UART_Access);
 8002a28:	2300      	movs	r3, #0
 8002a2a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002a2e:	2300      	movs	r3, #0
 8002a30:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  GNSS_UART_AccessHandle = osSemaphoreCreate(osSemaphore(GNSS_UART_Access), 1);
 8002a34:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002a38:	2101      	movs	r1, #1
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f007 f871 	bl	8009b22 <osSemaphoreCreate>
 8002a40:	4603      	mov	r3, r0
 8002a42:	4a7a      	ldr	r2, [pc, #488]	@ (8002c2c <MX_FREERTOS_Init+0x264>)
 8002a44:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of UARTbyte */
  osMessageQDef(UARTbyte, 1, uint8_t);
 8002a46:	4b7a      	ldr	r3, [pc, #488]	@ (8002c30 <MX_FREERTOS_Init+0x268>)
 8002a48:	f507 748c 	add.w	r4, r7, #280	@ 0x118
 8002a4c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a4e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  UARTbyteHandle = osMessageCreate(osMessageQ(UARTbyte), NULL);
 8002a52:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002a56:	2100      	movs	r1, #0
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f007 f919 	bl	8009c90 <osMessageCreate>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	4a74      	ldr	r2, [pc, #464]	@ (8002c34 <MX_FREERTOS_Init+0x26c>)
 8002a62:	6013      	str	r3, [r2, #0]

  /* definition and creation of UBXQueue */
  osMessageQDef(UBXQueue, 16, UBXMessageQ_t);
 8002a64:	4b74      	ldr	r3, [pc, #464]	@ (8002c38 <MX_FREERTOS_Init+0x270>)
 8002a66:	f507 7484 	add.w	r4, r7, #264	@ 0x108
 8002a6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  UBXQueueHandle = osMessageCreate(osMessageQ(UBXQueue), NULL);
 8002a70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002a74:	2100      	movs	r1, #0
 8002a76:	4618      	mov	r0, r3
 8002a78:	f007 f90a 	bl	8009c90 <osMessageCreate>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	4a6f      	ldr	r2, [pc, #444]	@ (8002c3c <MX_FREERTOS_Init+0x274>)
 8002a80:	6013      	str	r3, [r2, #0]

  /* definition and creation of GNSS_Request */
  osMessageQDef(GNSS_Request, 16, GNSSRequestQ_t);
 8002a82:	4b6f      	ldr	r3, [pc, #444]	@ (8002c40 <MX_FREERTOS_Init+0x278>)
 8002a84:	f107 04f8 	add.w	r4, r7, #248	@ 0xf8
 8002a88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a8a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  GNSS_RequestHandle = osMessageCreate(osMessageQ(GNSS_Request), NULL);
 8002a8e:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8002a92:	2100      	movs	r1, #0
 8002a94:	4618      	mov	r0, r3
 8002a96:	f007 f8fb 	bl	8009c90 <osMessageCreate>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	4a69      	ldr	r2, [pc, #420]	@ (8002c44 <MX_FREERTOS_Init+0x27c>)
 8002a9e:	6013      	str	r3, [r2, #0]

  /* definition and creation of GNSS_Return */
  osMessageQDef(GNSS_Return, 16, GNSSReturnQ_t);
 8002aa0:	4b69      	ldr	r3, [pc, #420]	@ (8002c48 <MX_FREERTOS_Init+0x280>)
 8002aa2:	f107 04e8 	add.w	r4, r7, #232	@ 0xe8
 8002aa6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002aa8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  GNSS_ReturnHandle = osMessageCreate(osMessageQ(GNSS_Return), NULL);
 8002aac:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f007 f8ec 	bl	8009c90 <osMessageCreate>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	4a64      	ldr	r2, [pc, #400]	@ (8002c4c <MX_FREERTOS_Init+0x284>)
 8002abc:	6013      	str	r3, [r2, #0]

  /* definition and creation of UARTdebug */
  osMessageQDef(UARTdebug, 128, UARTdebugQ_t);
 8002abe:	4b64      	ldr	r3, [pc, #400]	@ (8002c50 <MX_FREERTOS_Init+0x288>)
 8002ac0:	f107 04d8 	add.w	r4, r7, #216	@ 0xd8
 8002ac4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ac6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  UARTdebugHandle = osMessageCreate(osMessageQ(UARTdebug), NULL);
 8002aca:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8002ace:	2100      	movs	r1, #0
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f007 f8dd 	bl	8009c90 <osMessageCreate>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	4a5e      	ldr	r2, [pc, #376]	@ (8002c54 <MX_FREERTOS_Init+0x28c>)
 8002ada:	6013      	str	r3, [r2, #0]

  /* definition and creation of GNSS_toPoll */
  osMessageQDef(GNSS_toPoll, 16, GNSStoPollQ_t);
 8002adc:	4b5e      	ldr	r3, [pc, #376]	@ (8002c58 <MX_FREERTOS_Init+0x290>)
 8002ade:	f107 04c8 	add.w	r4, r7, #200	@ 0xc8
 8002ae2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ae4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  GNSS_toPollHandle = osMessageCreate(osMessageQ(GNSS_toPoll), NULL);
 8002ae8:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8002aec:	2100      	movs	r1, #0
 8002aee:	4618      	mov	r0, r3
 8002af0:	f007 f8ce 	bl	8009c90 <osMessageCreate>
 8002af4:	4603      	mov	r3, r0
 8002af6:	4a59      	ldr	r2, [pc, #356]	@ (8002c5c <MX_FREERTOS_Init+0x294>)
 8002af8:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of InitTask */
  osThreadDef(InitTask, StartInitTask, osPriorityRealtime, 0, 1024);
 8002afa:	4b59      	ldr	r3, [pc, #356]	@ (8002c60 <MX_FREERTOS_Init+0x298>)
 8002afc:	f107 04ac 	add.w	r4, r7, #172	@ 0xac
 8002b00:	461d      	mov	r5, r3
 8002b02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b06:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002b0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  InitTaskHandle = osThreadCreate(osThread(InitTask), NULL);
 8002b0e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002b12:	2100      	movs	r1, #0
 8002b14:	4618      	mov	r0, r3
 8002b16:	f006 ff98 	bl	8009a4a <osThreadCreate>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	4a51      	ldr	r2, [pc, #324]	@ (8002c64 <MX_FREERTOS_Init+0x29c>)
 8002b1e:	6013      	str	r3, [r2, #0]

  /* definition and creation of ReceivedLORA */
  osThreadDef(ReceivedLORA, ReceivedLORATask, osPriorityNormal, 0, 2048);
 8002b20:	4b51      	ldr	r3, [pc, #324]	@ (8002c68 <MX_FREERTOS_Init+0x2a0>)
 8002b22:	f107 0490 	add.w	r4, r7, #144	@ 0x90
 8002b26:	461d      	mov	r5, r3
 8002b28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b2c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002b30:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ReceivedLORAHandle = osThreadCreate(osThread(ReceivedLORA), NULL);
 8002b34:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8002b38:	2100      	movs	r1, #0
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f006 ff85 	bl	8009a4a <osThreadCreate>
 8002b40:	4603      	mov	r3, r0
 8002b42:	4a4a      	ldr	r2, [pc, #296]	@ (8002c6c <MX_FREERTOS_Init+0x2a4>)
 8002b44:	6013      	str	r3, [r2, #0]

  /* definition and creation of UARTbyte_to_GN */
  osThreadDef(UARTbyte_to_GN, UARTbyte_to_GNSSMessage_Task, osPriorityHigh, 0, 512);
 8002b46:	4b4a      	ldr	r3, [pc, #296]	@ (8002c70 <MX_FREERTOS_Init+0x2a8>)
 8002b48:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 8002b4c:	461d      	mov	r5, r3
 8002b4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b52:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002b56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UARTbyte_to_GNHandle = osThreadCreate(osThread(UARTbyte_to_GN), NULL);
 8002b5a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002b5e:	2100      	movs	r1, #0
 8002b60:	4618      	mov	r0, r3
 8002b62:	f006 ff72 	bl	8009a4a <osThreadCreate>
 8002b66:	4603      	mov	r3, r0
 8002b68:	4a42      	ldr	r2, [pc, #264]	@ (8002c74 <MX_FREERTOS_Init+0x2ac>)
 8002b6a:	6013      	str	r3, [r2, #0]

  /* definition and creation of Matcher */
  osThreadDef(Matcher, MatcherTask, osPriorityNormal, 0, 1024);
 8002b6c:	4b42      	ldr	r3, [pc, #264]	@ (8002c78 <MX_FREERTOS_Init+0x2b0>)
 8002b6e:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8002b72:	461d      	mov	r5, r3
 8002b74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b78:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002b7c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MatcherHandle = osThreadCreate(osThread(Matcher), NULL);
 8002b80:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002b84:	2100      	movs	r1, #0
 8002b86:	4618      	mov	r0, r3
 8002b88:	f006 ff5f 	bl	8009a4a <osThreadCreate>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	4a3b      	ldr	r2, [pc, #236]	@ (8002c7c <MX_FREERTOS_Init+0x2b4>)
 8002b90:	6013      	str	r3, [r2, #0]

  /* definition and creation of Fake_SDuse */
  osThreadDef(Fake_SDuse, Fake_SDuse_Task, osPriorityNormal, 0, 512);
 8002b92:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002b96:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002b9a:	4a39      	ldr	r2, [pc, #228]	@ (8002c80 <MX_FREERTOS_Init+0x2b8>)
 8002b9c:	461c      	mov	r4, r3
 8002b9e:	4615      	mov	r5, r2
 8002ba0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ba2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ba4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002ba8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Fake_SDuseHandle = osThreadCreate(osThread(Fake_SDuse), NULL);
 8002bac:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f006 ff49 	bl	8009a4a <osThreadCreate>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	4a32      	ldr	r2, [pc, #200]	@ (8002c84 <MX_FREERTOS_Init+0x2bc>)
 8002bbc:	6013      	str	r3, [r2, #0]

  /* definition and creation of UartDebug */
  osThreadDef(UartDebug, UartDebugTask, osPriorityNormal, 0, 512);
 8002bbe:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002bc2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002bc6:	4a30      	ldr	r2, [pc, #192]	@ (8002c88 <MX_FREERTOS_Init+0x2c0>)
 8002bc8:	461c      	mov	r4, r3
 8002bca:	4615      	mov	r5, r2
 8002bcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bd0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002bd4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UartDebugHandle = osThreadCreate(osThread(UartDebug), NULL);
 8002bd8:	f107 0320 	add.w	r3, r7, #32
 8002bdc:	2100      	movs	r1, #0
 8002bde:	4618      	mov	r0, r3
 8002be0:	f006 ff33 	bl	8009a4a <osThreadCreate>
 8002be4:	4603      	mov	r3, r0
 8002be6:	4a29      	ldr	r2, [pc, #164]	@ (8002c8c <MX_FREERTOS_Init+0x2c4>)
 8002be8:	6013      	str	r3, [r2, #0]

  /* definition and creation of commandToGNSS */
  osThreadDef(commandToGNSS, commandToGNSSTask, osPriorityRealtime, 0, 512);
 8002bea:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002bee:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002bf2:	4a27      	ldr	r2, [pc, #156]	@ (8002c90 <MX_FREERTOS_Init+0x2c8>)
 8002bf4:	461c      	mov	r4, r3
 8002bf6:	4615      	mov	r5, r2
 8002bf8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bfc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002c00:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  commandToGNSSHandle = osThreadCreate(osThread(commandToGNSS), NULL);
 8002c04:	1d3b      	adds	r3, r7, #4
 8002c06:	2100      	movs	r1, #0
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f006 ff1e 	bl	8009a4a <osThreadCreate>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	4a20      	ldr	r2, [pc, #128]	@ (8002c94 <MX_FREERTOS_Init+0x2cc>)
 8002c12:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002c14:	bf00      	nop
 8002c16:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bdb0      	pop	{r4, r5, r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	20000a98 	.word	0x20000a98
 8002c24:	20000a9c 	.word	0x20000a9c
 8002c28:	20000aa0 	.word	0x20000aa0
 8002c2c:	20000aa4 	.word	0x20000aa4
 8002c30:	08010200 	.word	0x08010200
 8002c34:	20000a80 	.word	0x20000a80
 8002c38:	08010210 	.word	0x08010210
 8002c3c:	20000a84 	.word	0x20000a84
 8002c40:	08010220 	.word	0x08010220
 8002c44:	20000a88 	.word	0x20000a88
 8002c48:	08010230 	.word	0x08010230
 8002c4c:	20000a8c 	.word	0x20000a8c
 8002c50:	08010240 	.word	0x08010240
 8002c54:	20000a90 	.word	0x20000a90
 8002c58:	08010250 	.word	0x08010250
 8002c5c:	20000a94 	.word	0x20000a94
 8002c60:	0801026c 	.word	0x0801026c
 8002c64:	20000a64 	.word	0x20000a64
 8002c68:	08010298 	.word	0x08010298
 8002c6c:	20000a68 	.word	0x20000a68
 8002c70:	080102c4 	.word	0x080102c4
 8002c74:	20000a6c 	.word	0x20000a6c
 8002c78:	080102e8 	.word	0x080102e8
 8002c7c:	20000a70 	.word	0x20000a70
 8002c80:	08010310 	.word	0x08010310
 8002c84:	20000a74 	.word	0x20000a74
 8002c88:	08010338 	.word	0x08010338
 8002c8c:	20000a78 	.word	0x20000a78
 8002c90:	08010364 	.word	0x08010364
 8002c94:	20000a7c 	.word	0x20000a7c

08002c98 <StartInitTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartInitTask */
void StartInitTask(void const * argument)
{
 8002c98:	b590      	push	{r4, r7, lr}
 8002c9a:	b08b      	sub	sp, #44	@ 0x2c
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartInitTask */
	/* Infinite loop */
	//  for(;;)
	//  {
	const char startMessage[] = "\r\nStarting...\r\n";
 8002ca0:	4b1f      	ldr	r3, [pc, #124]	@ (8002d20 <StartInitTask+0x88>)
 8002ca2:	f107 0418 	add.w	r4, r7, #24
 8002ca6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ca8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	const char initDoneMessage[] = "\r\nInit Done\r\n\n";
 8002cac:	4b1d      	ldr	r3, [pc, #116]	@ (8002d24 <StartInitTask+0x8c>)
 8002cae:	f107 0408 	add.w	r4, r7, #8
 8002cb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002cb4:	c407      	stmia	r4!, {r0, r1, r2}
 8002cb6:	8023      	strh	r3, [r4, #0]
 8002cb8:	3402      	adds	r4, #2
 8002cba:	0c1b      	lsrs	r3, r3, #16
 8002cbc:	7023      	strb	r3, [r4, #0]

	HAL_UART_Transmit(&huart1, (uint8_t *)startMessage, sizeof(startMessage), 10);
 8002cbe:	f107 0118 	add.w	r1, r7, #24
 8002cc2:	230a      	movs	r3, #10
 8002cc4:	2210      	movs	r2, #16
 8002cc6:	4818      	ldr	r0, [pc, #96]	@ (8002d28 <StartInitTask+0x90>)
 8002cc8:	f005 f868 	bl	8007d9c <HAL_UART_Transmit>

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4,GPIO_PIN_SET);
 8002ccc:	2201      	movs	r2, #1
 8002cce:	2110      	movs	r1, #16
 8002cd0:	4816      	ldr	r0, [pc, #88]	@ (8002d2c <StartInitTask+0x94>)
 8002cd2:	f001 fc8f 	bl	80045f4 <HAL_GPIO_WritePin>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8002cd6:	b662      	cpsie	i
}
 8002cd8:	bf00      	nop
	__enable_irq();
	GNSSCom_Init(&huart3,&huart1);
 8002cda:	4913      	ldr	r1, [pc, #76]	@ (8002d28 <StartInitTask+0x90>)
 8002cdc:	4814      	ldr	r0, [pc, #80]	@ (8002d30 <StartInitTask+0x98>)
 8002cde:	f7fe f8eb 	bl	8000eb8 <GNSSCom_Init>
	LORACom_Init(&hspi2, &huart1);
 8002ce2:	4911      	ldr	r1, [pc, #68]	@ (8002d28 <StartInitTask+0x90>)
 8002ce4:	4813      	ldr	r0, [pc, #76]	@ (8002d34 <StartInitTask+0x9c>)
 8002ce6:	f7fe fddf 	bl	80018a8 <LORACom_Init>
	RFM9x_Init();
 8002cea:	f7fe fe97 	bl	8001a1c <RFM9x_Init>
	HAL_UART_Transmit(&huart1, (uint8_t *)initDoneMessage, sizeof(initDoneMessage), 10);
 8002cee:	f107 0108 	add.w	r1, r7, #8
 8002cf2:	230a      	movs	r3, #10
 8002cf4:	220f      	movs	r2, #15
 8002cf6:	480c      	ldr	r0, [pc, #48]	@ (8002d28 <StartInitTask+0x90>)
 8002cf8:	f005 f850 	bl	8007d9c <HAL_UART_Transmit>

	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_5);
 8002cfc:	2110      	movs	r1, #16
 8002cfe:	480b      	ldr	r0, [pc, #44]	@ (8002d2c <StartInitTask+0x94>)
 8002d00:	f001 fc90 	bl	8004624 <HAL_GPIO_TogglePin>
 8002d04:	2120      	movs	r1, #32
 8002d06:	4809      	ldr	r0, [pc, #36]	@ (8002d2c <StartInitTask+0x94>)
 8002d08:	f001 fc8c 	bl	8004624 <HAL_GPIO_TogglePin>
	osThreadTerminate(InitTaskHandle);
 8002d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8002d38 <StartInitTask+0xa0>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f006 fee6 	bl	8009ae2 <osThreadTerminate>
	//  }
  /* USER CODE END StartInitTask */
}
 8002d16:	bf00      	nop
 8002d18:	372c      	adds	r7, #44	@ 0x2c
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd90      	pop	{r4, r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	08010380 	.word	0x08010380
 8002d24:	08010390 	.word	0x08010390
 8002d28:	20002568 	.word	0x20002568
 8002d2c:	48001000 	.word	0x48001000
 8002d30:	20002678 	.word	0x20002678
 8002d34:	20002464 	.word	0x20002464
 8002d38:	20000a64 	.word	0x20000a64

08002d3c <ReceivedLORATask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ReceivedLORATask */
void ReceivedLORATask(void const * argument)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ReceivedLORATask */
	/* Infinite loop */
	for(;;)
	{
		receivedLora();
 8002d44:	f7ff fab6 	bl	80022b4 <receivedLora>
 8002d48:	e7fc      	b.n	8002d44 <ReceivedLORATask+0x8>

08002d4a <UARTbyte_to_GNSSMessage_Task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_UARTbyte_to_GNSSMessage_Task */
void UARTbyte_to_GNSSMessage_Task(void const * argument)
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b082      	sub	sp, #8
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]


	/* Infinite loop */
	for(;;)
	{
		uartbyteToGnssMessage();
 8002d52:	f7ff fbc7 	bl	80024e4 <uartbyteToGnssMessage>
 8002d56:	e7fc      	b.n	8002d52 <UARTbyte_to_GNSSMessage_Task+0x8>

08002d58 <MatcherTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_MatcherTask */
void MatcherTask(void const * argument)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MatcherTask */
	/* Infinite loop */
	for(;;)
	{
		matcher();
 8002d60:	f7ff f9f4 	bl	800214c <matcher>
 8002d64:	e7fc      	b.n	8002d60 <MatcherTask+0x8>

08002d66 <Fake_SDuse_Task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Fake_SDuse_Task */
void Fake_SDuse_Task(void const * argument)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b082      	sub	sp, #8
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]


	/* Infinite loop */
	for(;;)
	{
		fakeuseSD();
 8002d6e:	f7ff f94f 	bl	8002010 <fakeuseSD>
 8002d72:	e7fc      	b.n	8002d6e <Fake_SDuse_Task+0x8>

08002d74 <UartDebugTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_UartDebugTask */
void UartDebugTask(void const * argument)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UartDebugTask */
	/* Infinite loop */
	for(;;)
	{
		debug();
 8002d7c:	f7ff f8ca 	bl	8001f14 <debug>
 8002d80:	e7fc      	b.n	8002d7c <UartDebugTask+0x8>

08002d82 <commandToGNSSTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_commandToGNSSTask */
void commandToGNSSTask(void const * argument)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b082      	sub	sp, #8
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN commandToGNSSTask */
  /* Infinite loop */
  for(;;)
  {
	  commandToGNSS();
 8002d8a:	f7ff f86b 	bl	8001e64 <commandToGNSS>
 8002d8e:	e7fc      	b.n	8002d8a <commandToGNSSTask+0x8>

08002d90 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b08c      	sub	sp, #48	@ 0x30
 8002d94:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d96:	f107 031c 	add.w	r3, r7, #28
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	601a      	str	r2, [r3, #0]
 8002d9e:	605a      	str	r2, [r3, #4]
 8002da0:	609a      	str	r2, [r3, #8]
 8002da2:	60da      	str	r2, [r3, #12]
 8002da4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002da6:	4b69      	ldr	r3, [pc, #420]	@ (8002f4c <MX_GPIO_Init+0x1bc>)
 8002da8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002daa:	4a68      	ldr	r2, [pc, #416]	@ (8002f4c <MX_GPIO_Init+0x1bc>)
 8002dac:	f043 0310 	orr.w	r3, r3, #16
 8002db0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002db2:	4b66      	ldr	r3, [pc, #408]	@ (8002f4c <MX_GPIO_Init+0x1bc>)
 8002db4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002db6:	f003 0310 	and.w	r3, r3, #16
 8002dba:	61bb      	str	r3, [r7, #24]
 8002dbc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dbe:	4b63      	ldr	r3, [pc, #396]	@ (8002f4c <MX_GPIO_Init+0x1bc>)
 8002dc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dc2:	4a62      	ldr	r2, [pc, #392]	@ (8002f4c <MX_GPIO_Init+0x1bc>)
 8002dc4:	f043 0304 	orr.w	r3, r3, #4
 8002dc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002dca:	4b60      	ldr	r3, [pc, #384]	@ (8002f4c <MX_GPIO_Init+0x1bc>)
 8002dcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dce:	f003 0304 	and.w	r3, r3, #4
 8002dd2:	617b      	str	r3, [r7, #20]
 8002dd4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002dd6:	4b5d      	ldr	r3, [pc, #372]	@ (8002f4c <MX_GPIO_Init+0x1bc>)
 8002dd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dda:	4a5c      	ldr	r2, [pc, #368]	@ (8002f4c <MX_GPIO_Init+0x1bc>)
 8002ddc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002de0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002de2:	4b5a      	ldr	r3, [pc, #360]	@ (8002f4c <MX_GPIO_Init+0x1bc>)
 8002de4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002de6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dea:	613b      	str	r3, [r7, #16]
 8002dec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dee:	4b57      	ldr	r3, [pc, #348]	@ (8002f4c <MX_GPIO_Init+0x1bc>)
 8002df0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002df2:	4a56      	ldr	r2, [pc, #344]	@ (8002f4c <MX_GPIO_Init+0x1bc>)
 8002df4:	f043 0301 	orr.w	r3, r3, #1
 8002df8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002dfa:	4b54      	ldr	r3, [pc, #336]	@ (8002f4c <MX_GPIO_Init+0x1bc>)
 8002dfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	60fb      	str	r3, [r7, #12]
 8002e04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e06:	4b51      	ldr	r3, [pc, #324]	@ (8002f4c <MX_GPIO_Init+0x1bc>)
 8002e08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e0a:	4a50      	ldr	r2, [pc, #320]	@ (8002f4c <MX_GPIO_Init+0x1bc>)
 8002e0c:	f043 0302 	orr.w	r3, r3, #2
 8002e10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e12:	4b4e      	ldr	r3, [pc, #312]	@ (8002f4c <MX_GPIO_Init+0x1bc>)
 8002e14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	60bb      	str	r3, [r7, #8]
 8002e1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e1e:	4b4b      	ldr	r3, [pc, #300]	@ (8002f4c <MX_GPIO_Init+0x1bc>)
 8002e20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e22:	4a4a      	ldr	r2, [pc, #296]	@ (8002f4c <MX_GPIO_Init+0x1bc>)
 8002e24:	f043 0308 	orr.w	r3, r3, #8
 8002e28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e2a:	4b48      	ldr	r3, [pc, #288]	@ (8002f4c <MX_GPIO_Init+0x1bc>)
 8002e2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e2e:	f003 0308 	and.w	r3, r3, #8
 8002e32:	607b      	str	r3, [r7, #4]
 8002e34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, PROC_M2_Pin|PROC_RESET_FPGA_Pin|UI_LED_R_Pin|UI_LED_G_Pin
 8002e36:	2200      	movs	r2, #0
 8002e38:	f240 113f 	movw	r1, #319	@ 0x13f
 8002e3c:	4844      	ldr	r0, [pc, #272]	@ (8002f50 <MX_GPIO_Init+0x1c0>)
 8002e3e:	f001 fbd9 	bl	80045f4 <HAL_GPIO_WritePin>
                          |RFM_RST_Pin|PROC_M0_Pin|PROC_M1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UI_LED_B_GPIO_Port, UI_LED_B_Pin, GPIO_PIN_RESET);
 8002e42:	2200      	movs	r2, #0
 8002e44:	2102      	movs	r1, #2
 8002e46:	4843      	ldr	r0, [pc, #268]	@ (8002f54 <MX_GPIO_Init+0x1c4>)
 8002e48:	f001 fbd4 	bl	80045f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RFM_EN_GPIO_Port, RFM_EN_Pin, GPIO_PIN_SET);
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	2180      	movs	r1, #128	@ 0x80
 8002e50:	483f      	ldr	r0, [pc, #252]	@ (8002f50 <MX_GPIO_Init+0x1c0>)
 8002e52:	f001 fbcf 	bl	80045f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CLK_64M_EN_Pin|STM_ACQ_TRIG_SRC0_Pin|STM_ACQ_TRIG_SRC1_Pin|RFM_SPI_nCS_Pin, GPIO_PIN_RESET);
 8002e56:	2200      	movs	r2, #0
 8002e58:	f24c 4101 	movw	r1, #50177	@ 0xc401
 8002e5c:	483e      	ldr	r0, [pc, #248]	@ (8002f58 <MX_GPIO_Init+0x1c8>)
 8002e5e:	f001 fbc9 	bl	80045f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ACQ_POW_EN_Pin|GPS_RESET_Pin, GPIO_PIN_SET);
 8002e62:	2201      	movs	r2, #1
 8002e64:	f44f 6108 	mov.w	r1, #2176	@ 0x880
 8002e68:	483b      	ldr	r0, [pc, #236]	@ (8002f58 <MX_GPIO_Init+0x1c8>)
 8002e6a:	f001 fbc3 	bl	80045f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = PROC_M2_Pin|PROC_RESET_FPGA_Pin|UI_LED_R_Pin|UI_LED_G_Pin
 8002e6e:	f240 13bf 	movw	r3, #447	@ 0x1bf
 8002e72:	61fb      	str	r3, [r7, #28]
                          |RFM_EN_Pin|RFM_RST_Pin|PROC_M0_Pin|PROC_M1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e74:	2301      	movs	r3, #1
 8002e76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e80:	f107 031c 	add.w	r3, r7, #28
 8002e84:	4619      	mov	r1, r3
 8002e86:	4832      	ldr	r0, [pc, #200]	@ (8002f50 <MX_GPIO_Init+0x1c0>)
 8002e88:	f001 fa22 	bl	80042d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UI_WakeUp_Pin;
 8002e8c:	2340      	movs	r3, #64	@ 0x40
 8002e8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e90:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002e94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e96:	2300      	movs	r3, #0
 8002e98:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(UI_WakeUp_GPIO_Port, &GPIO_InitStruct);
 8002e9a:	f107 031c 	add.w	r3, r7, #28
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	482b      	ldr	r0, [pc, #172]	@ (8002f50 <MX_GPIO_Init+0x1c0>)
 8002ea2:	f001 fa15 	bl	80042d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPS_PROC_TIME_INT_Pin|PROC_FPGA_BUSY_Pin|SD_DETECT_INT_Pin;
 8002ea6:	f242 03a0 	movw	r3, #8352	@ 0x20a0
 8002eaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002eac:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002eb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002eb6:	f107 031c 	add.w	r3, r7, #28
 8002eba:	4619      	mov	r1, r3
 8002ebc:	4827      	ldr	r0, [pc, #156]	@ (8002f5c <MX_GPIO_Init+0x1cc>)
 8002ebe:	f001 fa07 	bl	80042d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_VBUS_DETECT_WU_Pin|UI_ARM_Pin;
 8002ec2:	2305      	movs	r3, #5
 8002ec4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ec6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002eca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ed0:	f107 031c 	add.w	r3, r7, #28
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002eda:	f001 f9f9 	bl	80042d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UI_LED_B_Pin;
 8002ede:	2302      	movs	r3, #2
 8002ee0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eea:	2300      	movs	r3, #0
 8002eec:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(UI_LED_B_GPIO_Port, &GPIO_InitStruct);
 8002eee:	f107 031c 	add.w	r3, r7, #28
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	4817      	ldr	r0, [pc, #92]	@ (8002f54 <MX_GPIO_Init+0x1c4>)
 8002ef6:	f001 f9eb 	bl	80042d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = CLK_64M_EN_Pin|ACQ_POW_EN_Pin|STM_ACQ_TRIG_SRC0_Pin|STM_ACQ_TRIG_SRC1_Pin
 8002efa:	f64c 4381 	movw	r3, #52353	@ 0xcc81
 8002efe:	61fb      	str	r3, [r7, #28]
                          |RFM_SPI_nCS_Pin|GPS_RESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f00:	2301      	movs	r3, #1
 8002f02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f04:	2300      	movs	r3, #0
 8002f06:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f0c:	f107 031c 	add.w	r3, r7, #28
 8002f10:	4619      	mov	r1, r3
 8002f12:	4811      	ldr	r0, [pc, #68]	@ (8002f58 <MX_GPIO_Init+0x1c8>)
 8002f14:	f001 f9dc 	bl	80042d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RFM_IRQ_Pin;
 8002f18:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002f1e:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8002f22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f24:	2300      	movs	r3, #0
 8002f26:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(RFM_IRQ_GPIO_Port, &GPIO_InitStruct);
 8002f28:	f107 031c 	add.w	r3, r7, #28
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	4809      	ldr	r0, [pc, #36]	@ (8002f54 <MX_GPIO_Init+0x1c4>)
 8002f30:	f001 f9ce 	bl	80042d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8002f34:	2200      	movs	r2, #0
 8002f36:	2105      	movs	r1, #5
 8002f38:	2017      	movs	r0, #23
 8002f3a:	f000 ffd7 	bl	8003eec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002f3e:	2017      	movs	r0, #23
 8002f40:	f000 fff0 	bl	8003f24 <HAL_NVIC_EnableIRQ>

}
 8002f44:	bf00      	nop
 8002f46:	3730      	adds	r7, #48	@ 0x30
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	40021000 	.word	0x40021000
 8002f50:	48001000 	.word	0x48001000
 8002f54:	48000400 	.word	0x48000400
 8002f58:	48000c00 	.word	0x48000c00
 8002f5c:	48000800 	.word	0x48000800

08002f60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f64:	f000 fead 	bl	8003cc2 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f68:	f000 f81a 	bl	8002fa0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f6c:	f7ff ff10 	bl	8002d90 <MX_GPIO_Init>
  MX_DAC1_Init();
 8002f70:	f7ff fc62 	bl	8002838 <MX_DAC1_Init>
  MX_SPI1_Init();
 8002f74:	f000 f87c 	bl	8003070 <MX_SPI1_Init>
  MX_SPI2_Init();
 8002f78:	f000 f8b8 	bl	80030ec <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8002f7c:	f000 fbde 	bl	800373c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002f80:	f000 fc10 	bl	80037a4 <MX_USART2_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8002f84:	f000 fdaa 	bl	8003adc <MX_USB_OTG_FS_PCD_Init>
  MX_USART3_UART_Init();
 8002f88:	f000 fc3c 	bl	8003804 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8002f8c:	f000 fb66 	bl	800365c <MX_TIM2_Init>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f90:	b672      	cpsid	i
}
 8002f92:	bf00      	nop
  /* USER CODE BEGIN 2 */
  __disable_irq(); //On evite toute interruption durant l'init de FreeRTOS
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8002f94:	f7ff fd18 	bl	80029c8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002f98:	f006 fd50 	bl	8009a3c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8002f9c:	bf00      	nop
 8002f9e:	e7fd      	b.n	8002f9c <main+0x3c>

08002fa0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b096      	sub	sp, #88	@ 0x58
 8002fa4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002fa6:	f107 0314 	add.w	r3, r7, #20
 8002faa:	2244      	movs	r2, #68	@ 0x44
 8002fac:	2100      	movs	r1, #0
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f00a fe25 	bl	800dbfe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002fb4:	463b      	mov	r3, r7
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	601a      	str	r2, [r3, #0]
 8002fba:	605a      	str	r2, [r3, #4]
 8002fbc:	609a      	str	r2, [r3, #8]
 8002fbe:	60da      	str	r2, [r3, #12]
 8002fc0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002fc2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002fc6:	f001 fcc1 	bl	800494c <HAL_PWREx_ControlVoltageScaling>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002fd0:	f000 f848 	bl	8003064 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002fd8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002fdc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002fde:	2302      	movs	r3, #2
 8002fe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002fea:	230a      	movs	r3, #10
 8002fec:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002fee:	2302      	movs	r3, #2
 8002ff0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ffa:	f107 0314 	add.w	r3, r7, #20
 8002ffe:	4618      	mov	r0, r3
 8003000:	f001 fd0a 	bl	8004a18 <HAL_RCC_OscConfig>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800300a:	f000 f82b 	bl	8003064 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800300e:	230f      	movs	r3, #15
 8003010:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003012:	2303      	movs	r3, #3
 8003014:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003016:	2300      	movs	r3, #0
 8003018:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800301a:	2300      	movs	r3, #0
 800301c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800301e:	2300      	movs	r3, #0
 8003020:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003022:	463b      	mov	r3, r7
 8003024:	2104      	movs	r1, #4
 8003026:	4618      	mov	r0, r3
 8003028:	f002 f910 	bl	800524c <HAL_RCC_ClockConfig>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8003032:	f000 f817 	bl	8003064 <Error_Handler>
  }
}
 8003036:	bf00      	nop
 8003038:	3758      	adds	r7, #88	@ 0x58
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
	...

08003040 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a04      	ldr	r2, [pc, #16]	@ (8003060 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d101      	bne.n	8003056 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003052:	f000 fe4f 	bl	8003cf4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003056:	bf00      	nop
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	40012c00 	.word	0x40012c00

08003064 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003068:	b672      	cpsid	i
}
 800306a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800306c:	bf00      	nop
 800306e:	e7fd      	b.n	800306c <Error_Handler+0x8>

08003070 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003074:	4b1b      	ldr	r3, [pc, #108]	@ (80030e4 <MX_SPI1_Init+0x74>)
 8003076:	4a1c      	ldr	r2, [pc, #112]	@ (80030e8 <MX_SPI1_Init+0x78>)
 8003078:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800307a:	4b1a      	ldr	r3, [pc, #104]	@ (80030e4 <MX_SPI1_Init+0x74>)
 800307c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003080:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003082:	4b18      	ldr	r3, [pc, #96]	@ (80030e4 <MX_SPI1_Init+0x74>)
 8003084:	2200      	movs	r2, #0
 8003086:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8003088:	4b16      	ldr	r3, [pc, #88]	@ (80030e4 <MX_SPI1_Init+0x74>)
 800308a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800308e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003090:	4b14      	ldr	r3, [pc, #80]	@ (80030e4 <MX_SPI1_Init+0x74>)
 8003092:	2200      	movs	r2, #0
 8003094:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003096:	4b13      	ldr	r3, [pc, #76]	@ (80030e4 <MX_SPI1_Init+0x74>)
 8003098:	2200      	movs	r2, #0
 800309a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800309c:	4b11      	ldr	r3, [pc, #68]	@ (80030e4 <MX_SPI1_Init+0x74>)
 800309e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80030a2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030a4:	4b0f      	ldr	r3, [pc, #60]	@ (80030e4 <MX_SPI1_Init+0x74>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80030aa:	4b0e      	ldr	r3, [pc, #56]	@ (80030e4 <MX_SPI1_Init+0x74>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80030b0:	4b0c      	ldr	r3, [pc, #48]	@ (80030e4 <MX_SPI1_Init+0x74>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030b6:	4b0b      	ldr	r3, [pc, #44]	@ (80030e4 <MX_SPI1_Init+0x74>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80030bc:	4b09      	ldr	r3, [pc, #36]	@ (80030e4 <MX_SPI1_Init+0x74>)
 80030be:	2207      	movs	r2, #7
 80030c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80030c2:	4b08      	ldr	r3, [pc, #32]	@ (80030e4 <MX_SPI1_Init+0x74>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80030c8:	4b06      	ldr	r3, [pc, #24]	@ (80030e4 <MX_SPI1_Init+0x74>)
 80030ca:	2208      	movs	r2, #8
 80030cc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80030ce:	4805      	ldr	r0, [pc, #20]	@ (80030e4 <MX_SPI1_Init+0x74>)
 80030d0:	f002 ffdc 	bl	800608c <HAL_SPI_Init>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80030da:	f7ff ffc3 	bl	8003064 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80030de:	bf00      	nop
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	20002400 	.word	0x20002400
 80030e8:	40013000 	.word	0x40013000

080030ec <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80030f0:	4b1b      	ldr	r3, [pc, #108]	@ (8003160 <MX_SPI2_Init+0x74>)
 80030f2:	4a1c      	ldr	r2, [pc, #112]	@ (8003164 <MX_SPI2_Init+0x78>)
 80030f4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80030f6:	4b1a      	ldr	r3, [pc, #104]	@ (8003160 <MX_SPI2_Init+0x74>)
 80030f8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80030fc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80030fe:	4b18      	ldr	r3, [pc, #96]	@ (8003160 <MX_SPI2_Init+0x74>)
 8003100:	2200      	movs	r2, #0
 8003102:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003104:	4b16      	ldr	r3, [pc, #88]	@ (8003160 <MX_SPI2_Init+0x74>)
 8003106:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800310a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800310c:	4b14      	ldr	r3, [pc, #80]	@ (8003160 <MX_SPI2_Init+0x74>)
 800310e:	2200      	movs	r2, #0
 8003110:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003112:	4b13      	ldr	r3, [pc, #76]	@ (8003160 <MX_SPI2_Init+0x74>)
 8003114:	2200      	movs	r2, #0
 8003116:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003118:	4b11      	ldr	r3, [pc, #68]	@ (8003160 <MX_SPI2_Init+0x74>)
 800311a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800311e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003120:	4b0f      	ldr	r3, [pc, #60]	@ (8003160 <MX_SPI2_Init+0x74>)
 8003122:	2220      	movs	r2, #32
 8003124:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003126:	4b0e      	ldr	r3, [pc, #56]	@ (8003160 <MX_SPI2_Init+0x74>)
 8003128:	2200      	movs	r2, #0
 800312a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800312c:	4b0c      	ldr	r3, [pc, #48]	@ (8003160 <MX_SPI2_Init+0x74>)
 800312e:	2200      	movs	r2, #0
 8003130:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003132:	4b0b      	ldr	r3, [pc, #44]	@ (8003160 <MX_SPI2_Init+0x74>)
 8003134:	2200      	movs	r2, #0
 8003136:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003138:	4b09      	ldr	r3, [pc, #36]	@ (8003160 <MX_SPI2_Init+0x74>)
 800313a:	2207      	movs	r2, #7
 800313c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800313e:	4b08      	ldr	r3, [pc, #32]	@ (8003160 <MX_SPI2_Init+0x74>)
 8003140:	2200      	movs	r2, #0
 8003142:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003144:	4b06      	ldr	r3, [pc, #24]	@ (8003160 <MX_SPI2_Init+0x74>)
 8003146:	2208      	movs	r2, #8
 8003148:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800314a:	4805      	ldr	r0, [pc, #20]	@ (8003160 <MX_SPI2_Init+0x74>)
 800314c:	f002 ff9e 	bl	800608c <HAL_SPI_Init>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8003156:	f7ff ff85 	bl	8003064 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800315a:	bf00      	nop
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	20002464 	.word	0x20002464
 8003164:	40003800 	.word	0x40003800

08003168 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b08c      	sub	sp, #48	@ 0x30
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003170:	f107 031c 	add.w	r3, r7, #28
 8003174:	2200      	movs	r2, #0
 8003176:	601a      	str	r2, [r3, #0]
 8003178:	605a      	str	r2, [r3, #4]
 800317a:	609a      	str	r2, [r3, #8]
 800317c:	60da      	str	r2, [r3, #12]
 800317e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a2e      	ldr	r2, [pc, #184]	@ (8003240 <HAL_SPI_MspInit+0xd8>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d129      	bne.n	80031de <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800318a:	4b2e      	ldr	r3, [pc, #184]	@ (8003244 <HAL_SPI_MspInit+0xdc>)
 800318c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800318e:	4a2d      	ldr	r2, [pc, #180]	@ (8003244 <HAL_SPI_MspInit+0xdc>)
 8003190:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003194:	6613      	str	r3, [r2, #96]	@ 0x60
 8003196:	4b2b      	ldr	r3, [pc, #172]	@ (8003244 <HAL_SPI_MspInit+0xdc>)
 8003198:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800319a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800319e:	61bb      	str	r3, [r7, #24]
 80031a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80031a2:	4b28      	ldr	r3, [pc, #160]	@ (8003244 <HAL_SPI_MspInit+0xdc>)
 80031a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031a6:	4a27      	ldr	r2, [pc, #156]	@ (8003244 <HAL_SPI_MspInit+0xdc>)
 80031a8:	f043 0310 	orr.w	r3, r3, #16
 80031ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031ae:	4b25      	ldr	r3, [pc, #148]	@ (8003244 <HAL_SPI_MspInit+0xdc>)
 80031b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031b2:	f003 0310 	and.w	r3, r3, #16
 80031b6:	617b      	str	r3, [r7, #20]
 80031b8:	697b      	ldr	r3, [r7, #20]
    PE12     ------> SPI1_NSS
    PE13     ------> SPI1_SCK
    PE14     ------> SPI1_MISO
    PE15     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = PROC_nCS_Pin|PROC_SCLK_Pin|PROC_MISO_Pin|PROC_MOSI_Pin;
 80031ba:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80031be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c0:	2302      	movs	r3, #2
 80031c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c4:	2300      	movs	r3, #0
 80031c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031c8:	2303      	movs	r3, #3
 80031ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80031cc:	2305      	movs	r3, #5
 80031ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80031d0:	f107 031c 	add.w	r3, r7, #28
 80031d4:	4619      	mov	r1, r3
 80031d6:	481c      	ldr	r0, [pc, #112]	@ (8003248 <HAL_SPI_MspInit+0xe0>)
 80031d8:	f001 f87a 	bl	80042d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80031dc:	e02c      	b.n	8003238 <HAL_SPI_MspInit+0xd0>
  else if(spiHandle->Instance==SPI2)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a1a      	ldr	r2, [pc, #104]	@ (800324c <HAL_SPI_MspInit+0xe4>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d127      	bne.n	8003238 <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80031e8:	4b16      	ldr	r3, [pc, #88]	@ (8003244 <HAL_SPI_MspInit+0xdc>)
 80031ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ec:	4a15      	ldr	r2, [pc, #84]	@ (8003244 <HAL_SPI_MspInit+0xdc>)
 80031ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80031f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80031f4:	4b13      	ldr	r3, [pc, #76]	@ (8003244 <HAL_SPI_MspInit+0xdc>)
 80031f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031fc:	613b      	str	r3, [r7, #16]
 80031fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003200:	4b10      	ldr	r3, [pc, #64]	@ (8003244 <HAL_SPI_MspInit+0xdc>)
 8003202:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003204:	4a0f      	ldr	r2, [pc, #60]	@ (8003244 <HAL_SPI_MspInit+0xdc>)
 8003206:	f043 0308 	orr.w	r3, r3, #8
 800320a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800320c:	4b0d      	ldr	r3, [pc, #52]	@ (8003244 <HAL_SPI_MspInit+0xdc>)
 800320e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003210:	f003 0308 	and.w	r3, r3, #8
 8003214:	60fb      	str	r3, [r7, #12]
 8003216:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RFM_SPI_SCK_Pin|RFM_SPI_MISO_Pin|RFM_SPI_MOSI_Pin;
 8003218:	231a      	movs	r3, #26
 800321a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800321c:	2302      	movs	r3, #2
 800321e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003220:	2300      	movs	r3, #0
 8003222:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003224:	2303      	movs	r3, #3
 8003226:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003228:	2305      	movs	r3, #5
 800322a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800322c:	f107 031c 	add.w	r3, r7, #28
 8003230:	4619      	mov	r1, r3
 8003232:	4807      	ldr	r0, [pc, #28]	@ (8003250 <HAL_SPI_MspInit+0xe8>)
 8003234:	f001 f84c 	bl	80042d0 <HAL_GPIO_Init>
}
 8003238:	bf00      	nop
 800323a:	3730      	adds	r7, #48	@ 0x30
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	40013000 	.word	0x40013000
 8003244:	40021000 	.word	0x40021000
 8003248:	48001000 	.word	0x48001000
 800324c:	40003800 	.word	0x40003800
 8003250:	48000c00 	.word	0x48000c00

08003254 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800325a:	4b11      	ldr	r3, [pc, #68]	@ (80032a0 <HAL_MspInit+0x4c>)
 800325c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800325e:	4a10      	ldr	r2, [pc, #64]	@ (80032a0 <HAL_MspInit+0x4c>)
 8003260:	f043 0301 	orr.w	r3, r3, #1
 8003264:	6613      	str	r3, [r2, #96]	@ 0x60
 8003266:	4b0e      	ldr	r3, [pc, #56]	@ (80032a0 <HAL_MspInit+0x4c>)
 8003268:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	607b      	str	r3, [r7, #4]
 8003270:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003272:	4b0b      	ldr	r3, [pc, #44]	@ (80032a0 <HAL_MspInit+0x4c>)
 8003274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003276:	4a0a      	ldr	r2, [pc, #40]	@ (80032a0 <HAL_MspInit+0x4c>)
 8003278:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800327c:	6593      	str	r3, [r2, #88]	@ 0x58
 800327e:	4b08      	ldr	r3, [pc, #32]	@ (80032a0 <HAL_MspInit+0x4c>)
 8003280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003282:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003286:	603b      	str	r3, [r7, #0]
 8003288:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800328a:	2200      	movs	r2, #0
 800328c:	210f      	movs	r1, #15
 800328e:	f06f 0001 	mvn.w	r0, #1
 8003292:	f000 fe2b 	bl	8003eec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003296:	bf00      	nop
 8003298:	3708      	adds	r7, #8
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	40021000 	.word	0x40021000

080032a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b08c      	sub	sp, #48	@ 0x30
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80032ac:	2300      	movs	r3, #0
 80032ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80032b2:	4b2e      	ldr	r3, [pc, #184]	@ (800336c <HAL_InitTick+0xc8>)
 80032b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032b6:	4a2d      	ldr	r2, [pc, #180]	@ (800336c <HAL_InitTick+0xc8>)
 80032b8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80032bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80032be:	4b2b      	ldr	r3, [pc, #172]	@ (800336c <HAL_InitTick+0xc8>)
 80032c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032c6:	60bb      	str	r3, [r7, #8]
 80032c8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80032ca:	f107 020c 	add.w	r2, r7, #12
 80032ce:	f107 0310 	add.w	r3, r7, #16
 80032d2:	4611      	mov	r1, r2
 80032d4:	4618      	mov	r0, r3
 80032d6:	f002 f97d 	bl	80055d4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80032da:	f002 f965 	bl	80055a8 <HAL_RCC_GetPCLK2Freq>
 80032de:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80032e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032e2:	4a23      	ldr	r2, [pc, #140]	@ (8003370 <HAL_InitTick+0xcc>)
 80032e4:	fba2 2303 	umull	r2, r3, r2, r3
 80032e8:	0c9b      	lsrs	r3, r3, #18
 80032ea:	3b01      	subs	r3, #1
 80032ec:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80032ee:	4b21      	ldr	r3, [pc, #132]	@ (8003374 <HAL_InitTick+0xd0>)
 80032f0:	4a21      	ldr	r2, [pc, #132]	@ (8003378 <HAL_InitTick+0xd4>)
 80032f2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80032f4:	4b1f      	ldr	r3, [pc, #124]	@ (8003374 <HAL_InitTick+0xd0>)
 80032f6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80032fa:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80032fc:	4a1d      	ldr	r2, [pc, #116]	@ (8003374 <HAL_InitTick+0xd0>)
 80032fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003300:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003302:	4b1c      	ldr	r3, [pc, #112]	@ (8003374 <HAL_InitTick+0xd0>)
 8003304:	2200      	movs	r2, #0
 8003306:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003308:	4b1a      	ldr	r3, [pc, #104]	@ (8003374 <HAL_InitTick+0xd0>)
 800330a:	2200      	movs	r2, #0
 800330c:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800330e:	4b19      	ldr	r3, [pc, #100]	@ (8003374 <HAL_InitTick+0xd0>)
 8003310:	2200      	movs	r2, #0
 8003312:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8003314:	4817      	ldr	r0, [pc, #92]	@ (8003374 <HAL_InitTick+0xd0>)
 8003316:	f003 fff5 	bl	8007304 <HAL_TIM_Base_Init>
 800331a:	4603      	mov	r3, r0
 800331c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8003320:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003324:	2b00      	cmp	r3, #0
 8003326:	d11b      	bne.n	8003360 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8003328:	4812      	ldr	r0, [pc, #72]	@ (8003374 <HAL_InitTick+0xd0>)
 800332a:	f004 f8ab 	bl	8007484 <HAL_TIM_Base_Start_IT>
 800332e:	4603      	mov	r3, r0
 8003330:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8003334:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003338:	2b00      	cmp	r3, #0
 800333a:	d111      	bne.n	8003360 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800333c:	2019      	movs	r0, #25
 800333e:	f000 fdf1 	bl	8003f24 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2b0f      	cmp	r3, #15
 8003346:	d808      	bhi.n	800335a <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8003348:	2200      	movs	r2, #0
 800334a:	6879      	ldr	r1, [r7, #4]
 800334c:	2019      	movs	r0, #25
 800334e:	f000 fdcd 	bl	8003eec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003352:	4a0a      	ldr	r2, [pc, #40]	@ (800337c <HAL_InitTick+0xd8>)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6013      	str	r3, [r2, #0]
 8003358:	e002      	b.n	8003360 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003360:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8003364:	4618      	mov	r0, r3
 8003366:	3730      	adds	r7, #48	@ 0x30
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	40021000 	.word	0x40021000
 8003370:	431bde83 	.word	0x431bde83
 8003374:	200024c8 	.word	0x200024c8
 8003378:	40012c00 	.word	0x40012c00
 800337c:	200001c0 	.word	0x200001c0

08003380 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8003384:	bf00      	nop
 8003386:	e7fd      	b.n	8003384 <NMI_Handler+0x4>

08003388 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800338c:	bf00      	nop
 800338e:	e7fd      	b.n	800338c <HardFault_Handler+0x4>

08003390 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003394:	bf00      	nop
 8003396:	e7fd      	b.n	8003394 <MemManage_Handler+0x4>

08003398 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800339c:	bf00      	nop
 800339e:	e7fd      	b.n	800339c <BusFault_Handler+0x4>

080033a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033a4:	bf00      	nop
 80033a6:	e7fd      	b.n	80033a4 <UsageFault_Handler+0x4>

080033a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033ac:	bf00      	nop
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
	...

080033b8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(RFM_IRQ_Pin) != RESET){
 80033bc:	4b0c      	ldr	r3, [pc, #48]	@ (80033f0 <EXTI9_5_IRQHandler+0x38>)
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d004      	beq.n	80033d2 <EXTI9_5_IRQHandler+0x1a>
		osSemaphoreRelease(xSem_LORAReceive_startHandle);
 80033c8:	4b0a      	ldr	r3, [pc, #40]	@ (80033f4 <EXTI9_5_IRQHandler+0x3c>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f006 fc29 	bl	8009c24 <osSemaphoreRelease>
	}

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PROC_FPGA_BUSY_Pin);
 80033d2:	2020      	movs	r0, #32
 80033d4:	f001 f940 	bl	8004658 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(UI_WakeUp_Pin);
 80033d8:	2040      	movs	r0, #64	@ 0x40
 80033da:	f001 f93d 	bl	8004658 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SD_DETECT_INT_Pin);
 80033de:	2080      	movs	r0, #128	@ 0x80
 80033e0:	f001 f93a 	bl	8004658 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RFM_IRQ_Pin);
 80033e4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80033e8:	f001 f936 	bl	8004658 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80033ec:	bf00      	nop
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	40010400 	.word	0x40010400
 80033f4:	20000a98 	.word	0x20000a98

080033f8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80033fc:	4802      	ldr	r0, [pc, #8]	@ (8003408 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80033fe:	f004 f8b1 	bl	8007564 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003402:	bf00      	nop
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	200024c8 	.word	0x200024c8

0800340c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003410:	4804      	ldr	r0, [pc, #16]	@ (8003424 <TIM2_IRQHandler+0x18>)
 8003412:	f004 f8a7 	bl	8007564 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
	ulHighFrequencyTimerTicks++;
 8003416:	4b04      	ldr	r3, [pc, #16]	@ (8003428 <TIM2_IRQHandler+0x1c>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	3301      	adds	r3, #1
 800341c:	4a02      	ldr	r2, [pc, #8]	@ (8003428 <TIM2_IRQHandler+0x1c>)
 800341e:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM2_IRQn 1 */
}
 8003420:	bf00      	nop
 8003422:	bd80      	pop	{r7, pc}
 8003424:	2000251c 	.word	0x2000251c
 8003428:	20002514 	.word	0x20002514

0800342c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003430:	4802      	ldr	r0, [pc, #8]	@ (800343c <USART1_IRQHandler+0x10>)
 8003432:	f004 fd89 	bl	8007f48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003436:	bf00      	nop
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	20002568 	.word	0x20002568

08003440 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003444:	4802      	ldr	r0, [pc, #8]	@ (8003450 <USART2_IRQHandler+0x10>)
 8003446:	f004 fd7f 	bl	8007f48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800344a:	bf00      	nop
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	200025f0 	.word	0x200025f0

08003454 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	uint8_t receivedByte = (uint8_t)(huart3.Instance->RDR & 0x00FF);
 800345a:	4b11      	ldr	r3, [pc, #68]	@ (80034a0 <USART3_IRQHandler+0x4c>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003460:	b29b      	uxth	r3, r3
 8003462:	71fb      	strb	r3, [r7, #7]

	// Envoyer l'octet reçu à la file d'attente pour traitement ultérieur
	UARTMessageQ_t uartMsg = { .data = receivedByte };
 8003464:	79fb      	ldrb	r3, [r7, #7]
 8003466:	713b      	strb	r3, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8003468:	2300      	movs	r3, #0
 800346a:	603b      	str	r3, [r7, #0]
	xQueueSendFromISR(UARTbyteHandle, &uartMsg, &xHigherPriorityTaskWoken);
 800346c:	4b0d      	ldr	r3, [pc, #52]	@ (80034a4 <USART3_IRQHandler+0x50>)
 800346e:	6818      	ldr	r0, [r3, #0]
 8003470:	463a      	mov	r2, r7
 8003472:	1d39      	adds	r1, r7, #4
 8003474:	2300      	movs	r3, #0
 8003476:	f006 ff2f 	bl	800a2d8 <xQueueGenericSendFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d007      	beq.n	8003490 <USART3_IRQHandler+0x3c>
 8003480:	4b09      	ldr	r3, [pc, #36]	@ (80034a8 <USART3_IRQHandler+0x54>)
 8003482:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003486:	601a      	str	r2, [r3, #0]
 8003488:	f3bf 8f4f 	dsb	sy
 800348c:	f3bf 8f6f 	isb	sy
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003490:	4803      	ldr	r0, [pc, #12]	@ (80034a0 <USART3_IRQHandler+0x4c>)
 8003492:	f004 fd59 	bl	8007f48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003496:	bf00      	nop
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	20002678 	.word	0x20002678
 80034a4:	20000a80 	.word	0x20000a80
 80034a8:	e000ed04 	.word	0xe000ed04

080034ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0
  return 1;
 80034b0:	2301      	movs	r3, #1
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <_kill>:

int _kill(int pid, int sig)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80034c6:	f00a fc53 	bl	800dd70 <__errno>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2216      	movs	r2, #22
 80034ce:	601a      	str	r2, [r3, #0]
  return -1;
 80034d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3708      	adds	r7, #8
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <_exit>:

void _exit (int status)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80034e4:	f04f 31ff 	mov.w	r1, #4294967295
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f7ff ffe7 	bl	80034bc <_kill>
  while (1) {}    /* Make sure we hang here */
 80034ee:	bf00      	nop
 80034f0:	e7fd      	b.n	80034ee <_exit+0x12>

080034f2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b086      	sub	sp, #24
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	60f8      	str	r0, [r7, #12]
 80034fa:	60b9      	str	r1, [r7, #8]
 80034fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034fe:	2300      	movs	r3, #0
 8003500:	617b      	str	r3, [r7, #20]
 8003502:	e00a      	b.n	800351a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003504:	f3af 8000 	nop.w
 8003508:	4601      	mov	r1, r0
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	1c5a      	adds	r2, r3, #1
 800350e:	60ba      	str	r2, [r7, #8]
 8003510:	b2ca      	uxtb	r2, r1
 8003512:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	3301      	adds	r3, #1
 8003518:	617b      	str	r3, [r7, #20]
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	429a      	cmp	r2, r3
 8003520:	dbf0      	blt.n	8003504 <_read+0x12>
  }

  return len;
 8003522:	687b      	ldr	r3, [r7, #4]
}
 8003524:	4618      	mov	r0, r3
 8003526:	3718      	adds	r7, #24
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003538:	2300      	movs	r3, #0
 800353a:	617b      	str	r3, [r7, #20]
 800353c:	e009      	b.n	8003552 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	1c5a      	adds	r2, r3, #1
 8003542:	60ba      	str	r2, [r7, #8]
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	4618      	mov	r0, r3
 8003548:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	3301      	adds	r3, #1
 8003550:	617b      	str	r3, [r7, #20]
 8003552:	697a      	ldr	r2, [r7, #20]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	429a      	cmp	r2, r3
 8003558:	dbf1      	blt.n	800353e <_write+0x12>
  }
  return len;
 800355a:	687b      	ldr	r3, [r7, #4]
}
 800355c:	4618      	mov	r0, r3
 800355e:	3718      	adds	r7, #24
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <_close>:

int _close(int file)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800356c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003570:	4618      	mov	r0, r3
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800358c:	605a      	str	r2, [r3, #4]
  return 0;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <_isatty>:

int _isatty(int file)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80035a4:	2301      	movs	r3, #1
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	370c      	adds	r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr

080035b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80035b2:	b480      	push	{r7}
 80035b4:	b085      	sub	sp, #20
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	60f8      	str	r0, [r7, #12]
 80035ba:	60b9      	str	r1, [r7, #8]
 80035bc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3714      	adds	r7, #20
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035d4:	4a14      	ldr	r2, [pc, #80]	@ (8003628 <_sbrk+0x5c>)
 80035d6:	4b15      	ldr	r3, [pc, #84]	@ (800362c <_sbrk+0x60>)
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end) // @suppress("Symbol is not resolved")
 80035e0:	4b13      	ldr	r3, [pc, #76]	@ (8003630 <_sbrk+0x64>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d102      	bne.n	80035ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035e8:	4b11      	ldr	r3, [pc, #68]	@ (8003630 <_sbrk+0x64>)
 80035ea:	4a12      	ldr	r2, [pc, #72]	@ (8003634 <_sbrk+0x68>)
 80035ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035ee:	4b10      	ldr	r3, [pc, #64]	@ (8003630 <_sbrk+0x64>)
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4413      	add	r3, r2
 80035f6:	693a      	ldr	r2, [r7, #16]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d207      	bcs.n	800360c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035fc:	f00a fbb8 	bl	800dd70 <__errno>
 8003600:	4603      	mov	r3, r0
 8003602:	220c      	movs	r2, #12
 8003604:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003606:	f04f 33ff 	mov.w	r3, #4294967295
 800360a:	e009      	b.n	8003620 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800360c:	4b08      	ldr	r3, [pc, #32]	@ (8003630 <_sbrk+0x64>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003612:	4b07      	ldr	r3, [pc, #28]	@ (8003630 <_sbrk+0x64>)
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4413      	add	r3, r2
 800361a:	4a05      	ldr	r2, [pc, #20]	@ (8003630 <_sbrk+0x64>)
 800361c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800361e:	68fb      	ldr	r3, [r7, #12]
}
 8003620:	4618      	mov	r0, r3
 8003622:	3718      	adds	r7, #24
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	20050000 	.word	0x20050000
 800362c:	00000400 	.word	0x00000400
 8003630:	20002518 	.word	0x20002518
 8003634:	20013000 	.word	0x20013000

08003638 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800363c:	4b06      	ldr	r3, [pc, #24]	@ (8003658 <SystemInit+0x20>)
 800363e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003642:	4a05      	ldr	r2, [pc, #20]	@ (8003658 <SystemInit+0x20>)
 8003644:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003648:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800364c:	bf00      	nop
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	e000ed00 	.word	0xe000ed00

0800365c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b088      	sub	sp, #32
 8003660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003662:	f107 0310 	add.w	r3, r7, #16
 8003666:	2200      	movs	r2, #0
 8003668:	601a      	str	r2, [r3, #0]
 800366a:	605a      	str	r2, [r3, #4]
 800366c:	609a      	str	r2, [r3, #8]
 800366e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003670:	1d3b      	adds	r3, r7, #4
 8003672:	2200      	movs	r2, #0
 8003674:	601a      	str	r2, [r3, #0]
 8003676:	605a      	str	r2, [r3, #4]
 8003678:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800367a:	4b1d      	ldr	r3, [pc, #116]	@ (80036f0 <MX_TIM2_Init+0x94>)
 800367c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003680:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003682:	4b1b      	ldr	r3, [pc, #108]	@ (80036f0 <MX_TIM2_Init+0x94>)
 8003684:	2200      	movs	r2, #0
 8003686:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003688:	4b19      	ldr	r3, [pc, #100]	@ (80036f0 <MX_TIM2_Init+0x94>)
 800368a:	2200      	movs	r2, #0
 800368c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 800368e:	4b18      	ldr	r3, [pc, #96]	@ (80036f0 <MX_TIM2_Init+0x94>)
 8003690:	2200      	movs	r2, #0
 8003692:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003694:	4b16      	ldr	r3, [pc, #88]	@ (80036f0 <MX_TIM2_Init+0x94>)
 8003696:	2200      	movs	r2, #0
 8003698:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800369a:	4b15      	ldr	r3, [pc, #84]	@ (80036f0 <MX_TIM2_Init+0x94>)
 800369c:	2200      	movs	r2, #0
 800369e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80036a0:	4813      	ldr	r0, [pc, #76]	@ (80036f0 <MX_TIM2_Init+0x94>)
 80036a2:	f003 fe2f 	bl	8007304 <HAL_TIM_Base_Init>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d001      	beq.n	80036b0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80036ac:	f7ff fcda 	bl	8003064 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80036b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80036b6:	f107 0310 	add.w	r3, r7, #16
 80036ba:	4619      	mov	r1, r3
 80036bc:	480c      	ldr	r0, [pc, #48]	@ (80036f0 <MX_TIM2_Init+0x94>)
 80036be:	f004 f853 	bl	8007768 <HAL_TIM_ConfigClockSource>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d001      	beq.n	80036cc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80036c8:	f7ff fccc 	bl	8003064 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036cc:	2300      	movs	r3, #0
 80036ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036d0:	2300      	movs	r3, #0
 80036d2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80036d4:	1d3b      	adds	r3, r7, #4
 80036d6:	4619      	mov	r1, r3
 80036d8:	4805      	ldr	r0, [pc, #20]	@ (80036f0 <MX_TIM2_Init+0x94>)
 80036da:	f004 fa6b 	bl	8007bb4 <HAL_TIMEx_MasterConfigSynchronization>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d001      	beq.n	80036e8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80036e4:	f7ff fcbe 	bl	8003064 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80036e8:	bf00      	nop
 80036ea:	3720      	adds	r7, #32
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	2000251c 	.word	0x2000251c

080036f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003704:	d113      	bne.n	800372e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003706:	4b0c      	ldr	r3, [pc, #48]	@ (8003738 <HAL_TIM_Base_MspInit+0x44>)
 8003708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800370a:	4a0b      	ldr	r2, [pc, #44]	@ (8003738 <HAL_TIM_Base_MspInit+0x44>)
 800370c:	f043 0301 	orr.w	r3, r3, #1
 8003710:	6593      	str	r3, [r2, #88]	@ 0x58
 8003712:	4b09      	ldr	r3, [pc, #36]	@ (8003738 <HAL_TIM_Base_MspInit+0x44>)
 8003714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	60fb      	str	r3, [r7, #12]
 800371c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800371e:	2200      	movs	r2, #0
 8003720:	2105      	movs	r1, #5
 8003722:	201c      	movs	r0, #28
 8003724:	f000 fbe2 	bl	8003eec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003728:	201c      	movs	r0, #28
 800372a:	f000 fbfb 	bl	8003f24 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800372e:	bf00      	nop
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	40021000 	.word	0x40021000

0800373c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003740:	4b16      	ldr	r3, [pc, #88]	@ (800379c <MX_USART1_UART_Init+0x60>)
 8003742:	4a17      	ldr	r2, [pc, #92]	@ (80037a0 <MX_USART1_UART_Init+0x64>)
 8003744:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600 ;
 8003746:	4b15      	ldr	r3, [pc, #84]	@ (800379c <MX_USART1_UART_Init+0x60>)
 8003748:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 800374c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800374e:	4b13      	ldr	r3, [pc, #76]	@ (800379c <MX_USART1_UART_Init+0x60>)
 8003750:	2200      	movs	r2, #0
 8003752:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003754:	4b11      	ldr	r3, [pc, #68]	@ (800379c <MX_USART1_UART_Init+0x60>)
 8003756:	2200      	movs	r2, #0
 8003758:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800375a:	4b10      	ldr	r3, [pc, #64]	@ (800379c <MX_USART1_UART_Init+0x60>)
 800375c:	2200      	movs	r2, #0
 800375e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003760:	4b0e      	ldr	r3, [pc, #56]	@ (800379c <MX_USART1_UART_Init+0x60>)
 8003762:	220c      	movs	r2, #12
 8003764:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003766:	4b0d      	ldr	r3, [pc, #52]	@ (800379c <MX_USART1_UART_Init+0x60>)
 8003768:	2200      	movs	r2, #0
 800376a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800376c:	4b0b      	ldr	r3, [pc, #44]	@ (800379c <MX_USART1_UART_Init+0x60>)
 800376e:	2200      	movs	r2, #0
 8003770:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003772:	4b0a      	ldr	r3, [pc, #40]	@ (800379c <MX_USART1_UART_Init+0x60>)
 8003774:	2200      	movs	r2, #0
 8003776:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8003778:	4b08      	ldr	r3, [pc, #32]	@ (800379c <MX_USART1_UART_Init+0x60>)
 800377a:	2208      	movs	r2, #8
 800377c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800377e:	4b07      	ldr	r3, [pc, #28]	@ (800379c <MX_USART1_UART_Init+0x60>)
 8003780:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003784:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003786:	4805      	ldr	r0, [pc, #20]	@ (800379c <MX_USART1_UART_Init+0x60>)
 8003788:	f004 faba 	bl	8007d00 <HAL_UART_Init>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8003792:	f7ff fc67 	bl	8003064 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003796:	bf00      	nop
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	20002568 	.word	0x20002568
 80037a0:	40013800 	.word	0x40013800

080037a4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80037a8:	4b14      	ldr	r3, [pc, #80]	@ (80037fc <MX_USART2_UART_Init+0x58>)
 80037aa:	4a15      	ldr	r2, [pc, #84]	@ (8003800 <MX_USART2_UART_Init+0x5c>)
 80037ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80037ae:	4b13      	ldr	r3, [pc, #76]	@ (80037fc <MX_USART2_UART_Init+0x58>)
 80037b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80037b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80037b6:	4b11      	ldr	r3, [pc, #68]	@ (80037fc <MX_USART2_UART_Init+0x58>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80037bc:	4b0f      	ldr	r3, [pc, #60]	@ (80037fc <MX_USART2_UART_Init+0x58>)
 80037be:	2200      	movs	r2, #0
 80037c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80037c2:	4b0e      	ldr	r3, [pc, #56]	@ (80037fc <MX_USART2_UART_Init+0x58>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80037c8:	4b0c      	ldr	r3, [pc, #48]	@ (80037fc <MX_USART2_UART_Init+0x58>)
 80037ca:	220c      	movs	r2, #12
 80037cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037ce:	4b0b      	ldr	r3, [pc, #44]	@ (80037fc <MX_USART2_UART_Init+0x58>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80037d4:	4b09      	ldr	r3, [pc, #36]	@ (80037fc <MX_USART2_UART_Init+0x58>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80037da:	4b08      	ldr	r3, [pc, #32]	@ (80037fc <MX_USART2_UART_Init+0x58>)
 80037dc:	2200      	movs	r2, #0
 80037de:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80037e0:	4b06      	ldr	r3, [pc, #24]	@ (80037fc <MX_USART2_UART_Init+0x58>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80037e6:	4805      	ldr	r0, [pc, #20]	@ (80037fc <MX_USART2_UART_Init+0x58>)
 80037e8:	f004 fa8a 	bl	8007d00 <HAL_UART_Init>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80037f2:	f7ff fc37 	bl	8003064 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80037f6:	bf00      	nop
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	200025f0 	.word	0x200025f0
 8003800:	40004400 	.word	0x40004400

08003804 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003808:	4b14      	ldr	r3, [pc, #80]	@ (800385c <MX_USART3_UART_Init+0x58>)
 800380a:	4a15      	ldr	r2, [pc, #84]	@ (8003860 <MX_USART3_UART_Init+0x5c>)
 800380c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 800380e:	4b13      	ldr	r3, [pc, #76]	@ (800385c <MX_USART3_UART_Init+0x58>)
 8003810:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8003814:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003816:	4b11      	ldr	r3, [pc, #68]	@ (800385c <MX_USART3_UART_Init+0x58>)
 8003818:	2200      	movs	r2, #0
 800381a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800381c:	4b0f      	ldr	r3, [pc, #60]	@ (800385c <MX_USART3_UART_Init+0x58>)
 800381e:	2200      	movs	r2, #0
 8003820:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003822:	4b0e      	ldr	r3, [pc, #56]	@ (800385c <MX_USART3_UART_Init+0x58>)
 8003824:	2200      	movs	r2, #0
 8003826:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003828:	4b0c      	ldr	r3, [pc, #48]	@ (800385c <MX_USART3_UART_Init+0x58>)
 800382a:	220c      	movs	r2, #12
 800382c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800382e:	4b0b      	ldr	r3, [pc, #44]	@ (800385c <MX_USART3_UART_Init+0x58>)
 8003830:	2200      	movs	r2, #0
 8003832:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003834:	4b09      	ldr	r3, [pc, #36]	@ (800385c <MX_USART3_UART_Init+0x58>)
 8003836:	2200      	movs	r2, #0
 8003838:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800383a:	4b08      	ldr	r3, [pc, #32]	@ (800385c <MX_USART3_UART_Init+0x58>)
 800383c:	2200      	movs	r2, #0
 800383e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003840:	4b06      	ldr	r3, [pc, #24]	@ (800385c <MX_USART3_UART_Init+0x58>)
 8003842:	2200      	movs	r2, #0
 8003844:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003846:	4805      	ldr	r0, [pc, #20]	@ (800385c <MX_USART3_UART_Init+0x58>)
 8003848:	f004 fa5a 	bl	8007d00 <HAL_UART_Init>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8003852:	f7ff fc07 	bl	8003064 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003856:	bf00      	nop
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	20002678 	.word	0x20002678
 8003860:	40004800 	.word	0x40004800

08003864 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b0b2      	sub	sp, #200	@ 0xc8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800386c:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8003870:	2200      	movs	r2, #0
 8003872:	601a      	str	r2, [r3, #0]
 8003874:	605a      	str	r2, [r3, #4]
 8003876:	609a      	str	r2, [r3, #8]
 8003878:	60da      	str	r2, [r3, #12]
 800387a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800387c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003880:	228c      	movs	r2, #140	@ 0x8c
 8003882:	2100      	movs	r1, #0
 8003884:	4618      	mov	r0, r3
 8003886:	f00a f9ba 	bl	800dbfe <memset>
  if(uartHandle->Instance==USART1)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a80      	ldr	r2, [pc, #512]	@ (8003a90 <HAL_UART_MspInit+0x22c>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d166      	bne.n	8003962 <HAL_UART_MspInit+0xfe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003894:	2301      	movs	r3, #1
 8003896:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003898:	2300      	movs	r3, #0
 800389a:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800389c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80038a0:	4618      	mov	r0, r3
 80038a2:	f001 ff29 	bl	80056f8 <HAL_RCCEx_PeriphCLKConfig>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d001      	beq.n	80038b0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80038ac:	f7ff fbda 	bl	8003064 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80038b0:	4b78      	ldr	r3, [pc, #480]	@ (8003a94 <HAL_UART_MspInit+0x230>)
 80038b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038b4:	4a77      	ldr	r2, [pc, #476]	@ (8003a94 <HAL_UART_MspInit+0x230>)
 80038b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80038ba:	6613      	str	r3, [r2, #96]	@ 0x60
 80038bc:	4b75      	ldr	r3, [pc, #468]	@ (8003a94 <HAL_UART_MspInit+0x230>)
 80038be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80038c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038c8:	4b72      	ldr	r3, [pc, #456]	@ (8003a94 <HAL_UART_MspInit+0x230>)
 80038ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038cc:	4a71      	ldr	r2, [pc, #452]	@ (8003a94 <HAL_UART_MspInit+0x230>)
 80038ce:	f043 0301 	orr.w	r3, r3, #1
 80038d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80038d4:	4b6f      	ldr	r3, [pc, #444]	@ (8003a94 <HAL_UART_MspInit+0x230>)
 80038d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038d8:	f003 0301 	and.w	r3, r3, #1
 80038dc:	623b      	str	r3, [r7, #32]
 80038de:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038e0:	4b6c      	ldr	r3, [pc, #432]	@ (8003a94 <HAL_UART_MspInit+0x230>)
 80038e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038e4:	4a6b      	ldr	r2, [pc, #428]	@ (8003a94 <HAL_UART_MspInit+0x230>)
 80038e6:	f043 0302 	orr.w	r3, r3, #2
 80038ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80038ec:	4b69      	ldr	r3, [pc, #420]	@ (8003a94 <HAL_UART_MspInit+0x230>)
 80038ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038f0:	f003 0302 	and.w	r3, r3, #2
 80038f4:	61fb      	str	r3, [r7, #28]
 80038f6:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STM_VCP_RX_Pin;
 80038f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80038fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003900:	2302      	movs	r3, #2
 8003902:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003906:	2300      	movs	r3, #0
 8003908:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800390c:	2303      	movs	r3, #3
 800390e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003912:	2307      	movs	r3, #7
 8003914:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(STM_VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8003918:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800391c:	4619      	mov	r1, r3
 800391e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003922:	f000 fcd5 	bl	80042d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STM_VCP_TX_Pin;
 8003926:	2340      	movs	r3, #64	@ 0x40
 8003928:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800392c:	2302      	movs	r3, #2
 800392e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003932:	2300      	movs	r3, #0
 8003934:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003938:	2303      	movs	r3, #3
 800393a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800393e:	2307      	movs	r3, #7
 8003940:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(STM_VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8003944:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8003948:	4619      	mov	r1, r3
 800394a:	4853      	ldr	r0, [pc, #332]	@ (8003a98 <HAL_UART_MspInit+0x234>)
 800394c:	f000 fcc0 	bl	80042d0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003950:	2200      	movs	r2, #0
 8003952:	2105      	movs	r1, #5
 8003954:	2025      	movs	r0, #37	@ 0x25
 8003956:	f000 fac9 	bl	8003eec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800395a:	2025      	movs	r0, #37	@ 0x25
 800395c:	f000 fae2 	bl	8003f24 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003960:	e091      	b.n	8003a86 <HAL_UART_MspInit+0x222>
  else if(uartHandle->Instance==USART2)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a4d      	ldr	r2, [pc, #308]	@ (8003a9c <HAL_UART_MspInit+0x238>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d143      	bne.n	80039f4 <HAL_UART_MspInit+0x190>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800396c:	2302      	movs	r3, #2
 800396e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003970:	2300      	movs	r3, #0
 8003972:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003974:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003978:	4618      	mov	r0, r3
 800397a:	f001 febd 	bl	80056f8 <HAL_RCCEx_PeriphCLKConfig>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <HAL_UART_MspInit+0x124>
      Error_Handler();
 8003984:	f7ff fb6e 	bl	8003064 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003988:	4b42      	ldr	r3, [pc, #264]	@ (8003a94 <HAL_UART_MspInit+0x230>)
 800398a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800398c:	4a41      	ldr	r2, [pc, #260]	@ (8003a94 <HAL_UART_MspInit+0x230>)
 800398e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003992:	6593      	str	r3, [r2, #88]	@ 0x58
 8003994:	4b3f      	ldr	r3, [pc, #252]	@ (8003a94 <HAL_UART_MspInit+0x230>)
 8003996:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003998:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800399c:	61bb      	str	r3, [r7, #24]
 800399e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80039a0:	4b3c      	ldr	r3, [pc, #240]	@ (8003a94 <HAL_UART_MspInit+0x230>)
 80039a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039a4:	4a3b      	ldr	r2, [pc, #236]	@ (8003a94 <HAL_UART_MspInit+0x230>)
 80039a6:	f043 0308 	orr.w	r3, r3, #8
 80039aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039ac:	4b39      	ldr	r3, [pc, #228]	@ (8003a94 <HAL_UART_MspInit+0x230>)
 80039ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039b0:	f003 0308 	and.w	r3, r3, #8
 80039b4:	617b      	str	r3, [r7, #20]
 80039b6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPS_RTCM3_RX_STM_TX_Pin|GPS_RTCM3_TX_STM_RX_Pin;
 80039b8:	2360      	movs	r3, #96	@ 0x60
 80039ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039be:	2302      	movs	r3, #2
 80039c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039c4:	2300      	movs	r3, #0
 80039c6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039ca:	2303      	movs	r3, #3
 80039cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80039d0:	2307      	movs	r3, #7
 80039d2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80039d6:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80039da:	4619      	mov	r1, r3
 80039dc:	4830      	ldr	r0, [pc, #192]	@ (8003aa0 <HAL_UART_MspInit+0x23c>)
 80039de:	f000 fc77 	bl	80042d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80039e2:	2200      	movs	r2, #0
 80039e4:	2105      	movs	r1, #5
 80039e6:	2026      	movs	r0, #38	@ 0x26
 80039e8:	f000 fa80 	bl	8003eec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80039ec:	2026      	movs	r0, #38	@ 0x26
 80039ee:	f000 fa99 	bl	8003f24 <HAL_NVIC_EnableIRQ>
}
 80039f2:	e048      	b.n	8003a86 <HAL_UART_MspInit+0x222>
  else if(uartHandle->Instance==USART3)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a2a      	ldr	r2, [pc, #168]	@ (8003aa4 <HAL_UART_MspInit+0x240>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d143      	bne.n	8003a86 <HAL_UART_MspInit+0x222>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80039fe:	2304      	movs	r3, #4
 8003a00:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003a02:	2300      	movs	r3, #0
 8003a04:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a06:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f001 fe74 	bl	80056f8 <HAL_RCCEx_PeriphCLKConfig>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <HAL_UART_MspInit+0x1b6>
      Error_Handler();
 8003a16:	f7ff fb25 	bl	8003064 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003a1a:	4b1e      	ldr	r3, [pc, #120]	@ (8003a94 <HAL_UART_MspInit+0x230>)
 8003a1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a1e:	4a1d      	ldr	r2, [pc, #116]	@ (8003a94 <HAL_UART_MspInit+0x230>)
 8003a20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a24:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a26:	4b1b      	ldr	r3, [pc, #108]	@ (8003a94 <HAL_UART_MspInit+0x230>)
 8003a28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a2a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a2e:	613b      	str	r3, [r7, #16]
 8003a30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a32:	4b18      	ldr	r3, [pc, #96]	@ (8003a94 <HAL_UART_MspInit+0x230>)
 8003a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a36:	4a17      	ldr	r2, [pc, #92]	@ (8003a94 <HAL_UART_MspInit+0x230>)
 8003a38:	f043 0308 	orr.w	r3, r3, #8
 8003a3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a3e:	4b15      	ldr	r3, [pc, #84]	@ (8003a94 <HAL_UART_MspInit+0x230>)
 8003a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a42:	f003 0308 	and.w	r3, r3, #8
 8003a46:	60fb      	str	r3, [r7, #12]
 8003a48:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPS_TX_STM_Pin|GPS_RX_STM_Pin;
 8003a4a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003a4e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a52:	2302      	movs	r3, #2
 8003a54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003a64:	2307      	movs	r3, #7
 8003a66:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a6a:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8003a6e:	4619      	mov	r1, r3
 8003a70:	480b      	ldr	r0, [pc, #44]	@ (8003aa0 <HAL_UART_MspInit+0x23c>)
 8003a72:	f000 fc2d 	bl	80042d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003a76:	2200      	movs	r2, #0
 8003a78:	2105      	movs	r1, #5
 8003a7a:	2027      	movs	r0, #39	@ 0x27
 8003a7c:	f000 fa36 	bl	8003eec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003a80:	2027      	movs	r0, #39	@ 0x27
 8003a82:	f000 fa4f 	bl	8003f24 <HAL_NVIC_EnableIRQ>
}
 8003a86:	bf00      	nop
 8003a88:	37c8      	adds	r7, #200	@ 0xc8
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	40013800 	.word	0x40013800
 8003a94:	40021000 	.word	0x40021000
 8003a98:	48000400 	.word	0x48000400
 8003a9c:	40004400 	.word	0x40004400
 8003aa0:	48000c00 	.word	0x48000c00
 8003aa4:	40004800 	.word	0x40004800

08003aa8 <HAL_UART_TxCpltCallback>:
  /* USER CODE END USART3_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
	if (huart->Instance == hGNSSCom.huart->Instance){
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	4b06      	ldr	r3, [pc, #24]	@ (8003ad0 <HAL_UART_TxCpltCallback+0x28>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d103      	bne.n	8003ac6 <HAL_UART_TxCpltCallback+0x1e>
		UART_Transmit_With_Color("[INFO]...FIN TRANSMISSION DMA GNSS...", ANSI_COLOR_RESET);
 8003abe:	4905      	ldr	r1, [pc, #20]	@ (8003ad4 <HAL_UART_TxCpltCallback+0x2c>)
 8003ac0:	4805      	ldr	r0, [pc, #20]	@ (8003ad8 <HAL_UART_TxCpltCallback+0x30>)
 8003ac2:	f7fe fa65 	bl	8001f90 <UART_Transmit_With_Color>
	}
}
 8003ac6:	bf00      	nop
 8003ac8:	3708      	adds	r7, #8
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	200003b0 	.word	0x200003b0
 8003ad4:	080103a0 	.word	0x080103a0
 8003ad8:	080103a8 	.word	0x080103a8

08003adc <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003ae0:	4b14      	ldr	r3, [pc, #80]	@ (8003b34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003ae2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8003ae6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8003ae8:	4b12      	ldr	r3, [pc, #72]	@ (8003b34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003aea:	2206      	movs	r2, #6
 8003aec:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8003aee:	4b11      	ldr	r3, [pc, #68]	@ (8003b34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003af0:	2202      	movs	r2, #2
 8003af2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003af4:	4b0f      	ldr	r3, [pc, #60]	@ (8003b34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003af6:	2202      	movs	r2, #2
 8003af8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8003afa:	4b0e      	ldr	r3, [pc, #56]	@ (8003b34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8003b00:	4b0c      	ldr	r3, [pc, #48]	@ (8003b34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8003b06:	4b0b      	ldr	r3, [pc, #44]	@ (8003b34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8003b0c:	4b09      	ldr	r3, [pc, #36]	@ (8003b34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003b0e:	2201      	movs	r2, #1
 8003b10:	629a      	str	r2, [r3, #40]	@ 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003b12:	4b08      	ldr	r3, [pc, #32]	@ (8003b34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	631a      	str	r2, [r3, #48]	@ 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8003b18:	4b06      	ldr	r3, [pc, #24]	@ (8003b34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003b1e:	4805      	ldr	r0, [pc, #20]	@ (8003b34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003b20:	f000 fdbd 	bl	800469e <HAL_PCD_Init>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8003b2a:	f7ff fa9b 	bl	8003064 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8003b2e:	bf00      	nop
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	20002700 	.word	0x20002700

08003b38 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b0ae      	sub	sp, #184	@ 0xb8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b40:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003b44:	2200      	movs	r2, #0
 8003b46:	601a      	str	r2, [r3, #0]
 8003b48:	605a      	str	r2, [r3, #4]
 8003b4a:	609a      	str	r2, [r3, #8]
 8003b4c:	60da      	str	r2, [r3, #12]
 8003b4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003b50:	f107 0318 	add.w	r3, r7, #24
 8003b54:	228c      	movs	r2, #140	@ 0x8c
 8003b56:	2100      	movs	r1, #0
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f00a f850 	bl	800dbfe <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b66:	d17c      	bne.n	8003c62 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003b68:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003b6c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8003b6e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003b72:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8003b76:	2303      	movs	r3, #3
 8003b78:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 8003b7e:	230c      	movs	r3, #12
 8003b80:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8003b82:	2302      	movs	r3, #2
 8003b84:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 8003b86:	2304      	movs	r3, #4
 8003b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8003b8e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003b92:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b94:	f107 0318 	add.w	r3, r7, #24
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f001 fdad 	bl	80056f8 <HAL_RCCEx_PeriphCLKConfig>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d001      	beq.n	8003ba8 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8003ba4:	f7ff fa5e 	bl	8003064 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ba8:	4b30      	ldr	r3, [pc, #192]	@ (8003c6c <HAL_PCD_MspInit+0x134>)
 8003baa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bac:	4a2f      	ldr	r2, [pc, #188]	@ (8003c6c <HAL_PCD_MspInit+0x134>)
 8003bae:	f043 0301 	orr.w	r3, r3, #1
 8003bb2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003bb4:	4b2d      	ldr	r3, [pc, #180]	@ (8003c6c <HAL_PCD_MspInit+0x134>)
 8003bb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	617b      	str	r3, [r7, #20]
 8003bbe:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_VBUS_DETECT_Pin;
 8003bc0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003bc4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_DETECT_GPIO_Port, &GPIO_InitStruct);
 8003bd4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003bd8:	4619      	mov	r1, r3
 8003bda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003bde:	f000 fb77 	bl	80042d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_D_N_Pin|USB_D_P_Pin;
 8003be2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003be6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bea:	2302      	movs	r3, #2
 8003bec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003bfc:	230a      	movs	r3, #10
 8003bfe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c02:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003c06:	4619      	mov	r1, r3
 8003c08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003c0c:	f000 fb60 	bl	80042d0 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003c10:	4b16      	ldr	r3, [pc, #88]	@ (8003c6c <HAL_PCD_MspInit+0x134>)
 8003c12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c14:	4a15      	ldr	r2, [pc, #84]	@ (8003c6c <HAL_PCD_MspInit+0x134>)
 8003c16:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003c1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c1c:	4b13      	ldr	r3, [pc, #76]	@ (8003c6c <HAL_PCD_MspInit+0x134>)
 8003c1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c24:	613b      	str	r3, [r7, #16]
 8003c26:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c28:	4b10      	ldr	r3, [pc, #64]	@ (8003c6c <HAL_PCD_MspInit+0x134>)
 8003c2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d114      	bne.n	8003c5e <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c34:	4b0d      	ldr	r3, [pc, #52]	@ (8003c6c <HAL_PCD_MspInit+0x134>)
 8003c36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c38:	4a0c      	ldr	r2, [pc, #48]	@ (8003c6c <HAL_PCD_MspInit+0x134>)
 8003c3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c40:	4b0a      	ldr	r3, [pc, #40]	@ (8003c6c <HAL_PCD_MspInit+0x134>)
 8003c42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c48:	60fb      	str	r3, [r7, #12]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8003c4c:	f000 fed4 	bl	80049f8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c50:	4b06      	ldr	r3, [pc, #24]	@ (8003c6c <HAL_PCD_MspInit+0x134>)
 8003c52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c54:	4a05      	ldr	r2, [pc, #20]	@ (8003c6c <HAL_PCD_MspInit+0x134>)
 8003c56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c5a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8003c5c:	e001      	b.n	8003c62 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8003c5e:	f000 fecb 	bl	80049f8 <HAL_PWREx_EnableVddUSB>
}
 8003c62:	bf00      	nop
 8003c64:	37b8      	adds	r7, #184	@ 0xb8
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	40021000 	.word	0x40021000

08003c70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003c70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003ca8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003c74:	f7ff fce0 	bl	8003638 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003c78:	480c      	ldr	r0, [pc, #48]	@ (8003cac <LoopForever+0x6>)
  ldr r1, =_edata
 8003c7a:	490d      	ldr	r1, [pc, #52]	@ (8003cb0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003c7c:	4a0d      	ldr	r2, [pc, #52]	@ (8003cb4 <LoopForever+0xe>)
  movs r3, #0
 8003c7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c80:	e002      	b.n	8003c88 <LoopCopyDataInit>

08003c82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c86:	3304      	adds	r3, #4

08003c88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c8c:	d3f9      	bcc.n	8003c82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c8e:	4a0a      	ldr	r2, [pc, #40]	@ (8003cb8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003c90:	4c0a      	ldr	r4, [pc, #40]	@ (8003cbc <LoopForever+0x16>)
  movs r3, #0
 8003c92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c94:	e001      	b.n	8003c9a <LoopFillZerobss>

08003c96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c98:	3204      	adds	r2, #4

08003c9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c9c:	d3fb      	bcc.n	8003c96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003c9e:	f00a f86d 	bl	800dd7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003ca2:	f7ff f95d 	bl	8002f60 <main>

08003ca6 <LoopForever>:

LoopForever:
    b LoopForever
 8003ca6:	e7fe      	b.n	8003ca6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003ca8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003cac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003cb0:	20000394 	.word	0x20000394
  ldr r2, =_sidata
 8003cb4:	080107d8 	.word	0x080107d8
  ldr r2, =_sbss
 8003cb8:	20000394 	.word	0x20000394
  ldr r4, =_ebss
 8003cbc:	20012ffc 	.word	0x20012ffc

08003cc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003cc0:	e7fe      	b.n	8003cc0 <ADC1_2_IRQHandler>

08003cc2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b082      	sub	sp, #8
 8003cc6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ccc:	2003      	movs	r0, #3
 8003cce:	f000 f902 	bl	8003ed6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003cd2:	200f      	movs	r0, #15
 8003cd4:	f7ff fae6 	bl	80032a4 <HAL_InitTick>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d002      	beq.n	8003ce4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	71fb      	strb	r3, [r7, #7]
 8003ce2:	e001      	b.n	8003ce8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003ce4:	f7ff fab6 	bl	8003254 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003ce8:	79fb      	ldrb	r3, [r7, #7]
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3708      	adds	r7, #8
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
	...

08003cf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003cf8:	4b06      	ldr	r3, [pc, #24]	@ (8003d14 <HAL_IncTick+0x20>)
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	4b06      	ldr	r3, [pc, #24]	@ (8003d18 <HAL_IncTick+0x24>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4413      	add	r3, r2
 8003d04:	4a04      	ldr	r2, [pc, #16]	@ (8003d18 <HAL_IncTick+0x24>)
 8003d06:	6013      	str	r3, [r2, #0]
}
 8003d08:	bf00      	nop
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	200001c4 	.word	0x200001c4
 8003d18:	20002c0c 	.word	0x20002c0c

08003d1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	af00      	add	r7, sp, #0
  return uwTick;
 8003d20:	4b03      	ldr	r3, [pc, #12]	@ (8003d30 <HAL_GetTick+0x14>)
 8003d22:	681b      	ldr	r3, [r3, #0]
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	20002c0c 	.word	0x20002c0c

08003d34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d3c:	f7ff ffee 	bl	8003d1c <HAL_GetTick>
 8003d40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d4c:	d005      	beq.n	8003d5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8003d78 <HAL_Delay+0x44>)
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	461a      	mov	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	4413      	add	r3, r2
 8003d58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d5a:	bf00      	nop
 8003d5c:	f7ff ffde 	bl	8003d1c <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d8f7      	bhi.n	8003d5c <HAL_Delay+0x28>
  {
  }
}
 8003d6c:	bf00      	nop
 8003d6e:	bf00      	nop
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	200001c4 	.word	0x200001c4

08003d7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b085      	sub	sp, #20
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f003 0307 	and.w	r3, r3, #7
 8003d8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d8c:	4b0c      	ldr	r3, [pc, #48]	@ (8003dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d92:	68ba      	ldr	r2, [r7, #8]
 8003d94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003d98:	4013      	ands	r3, r2
 8003d9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003da4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003da8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dae:	4a04      	ldr	r2, [pc, #16]	@ (8003dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	60d3      	str	r3, [r2, #12]
}
 8003db4:	bf00      	nop
 8003db6:	3714      	adds	r7, #20
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr
 8003dc0:	e000ed00 	.word	0xe000ed00

08003dc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003dc8:	4b04      	ldr	r3, [pc, #16]	@ (8003ddc <__NVIC_GetPriorityGrouping+0x18>)
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	0a1b      	lsrs	r3, r3, #8
 8003dce:	f003 0307 	and.w	r3, r3, #7
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr
 8003ddc:	e000ed00 	.word	0xe000ed00

08003de0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	4603      	mov	r3, r0
 8003de8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	db0b      	blt.n	8003e0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003df2:	79fb      	ldrb	r3, [r7, #7]
 8003df4:	f003 021f 	and.w	r2, r3, #31
 8003df8:	4907      	ldr	r1, [pc, #28]	@ (8003e18 <__NVIC_EnableIRQ+0x38>)
 8003dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dfe:	095b      	lsrs	r3, r3, #5
 8003e00:	2001      	movs	r0, #1
 8003e02:	fa00 f202 	lsl.w	r2, r0, r2
 8003e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003e0a:	bf00      	nop
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	e000e100 	.word	0xe000e100

08003e1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	4603      	mov	r3, r0
 8003e24:	6039      	str	r1, [r7, #0]
 8003e26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	db0a      	blt.n	8003e46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	b2da      	uxtb	r2, r3
 8003e34:	490c      	ldr	r1, [pc, #48]	@ (8003e68 <__NVIC_SetPriority+0x4c>)
 8003e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e3a:	0112      	lsls	r2, r2, #4
 8003e3c:	b2d2      	uxtb	r2, r2
 8003e3e:	440b      	add	r3, r1
 8003e40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e44:	e00a      	b.n	8003e5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	b2da      	uxtb	r2, r3
 8003e4a:	4908      	ldr	r1, [pc, #32]	@ (8003e6c <__NVIC_SetPriority+0x50>)
 8003e4c:	79fb      	ldrb	r3, [r7, #7]
 8003e4e:	f003 030f 	and.w	r3, r3, #15
 8003e52:	3b04      	subs	r3, #4
 8003e54:	0112      	lsls	r2, r2, #4
 8003e56:	b2d2      	uxtb	r2, r2
 8003e58:	440b      	add	r3, r1
 8003e5a:	761a      	strb	r2, [r3, #24]
}
 8003e5c:	bf00      	nop
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr
 8003e68:	e000e100 	.word	0xe000e100
 8003e6c:	e000ed00 	.word	0xe000ed00

08003e70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b089      	sub	sp, #36	@ 0x24
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f003 0307 	and.w	r3, r3, #7
 8003e82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	f1c3 0307 	rsb	r3, r3, #7
 8003e8a:	2b04      	cmp	r3, #4
 8003e8c:	bf28      	it	cs
 8003e8e:	2304      	movcs	r3, #4
 8003e90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	3304      	adds	r3, #4
 8003e96:	2b06      	cmp	r3, #6
 8003e98:	d902      	bls.n	8003ea0 <NVIC_EncodePriority+0x30>
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	3b03      	subs	r3, #3
 8003e9e:	e000      	b.n	8003ea2 <NVIC_EncodePriority+0x32>
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003eae:	43da      	mvns	r2, r3
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	401a      	ands	r2, r3
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003eb8:	f04f 31ff 	mov.w	r1, #4294967295
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8003ec2:	43d9      	mvns	r1, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ec8:	4313      	orrs	r3, r2
         );
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3724      	adds	r7, #36	@ 0x24
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr

08003ed6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b082      	sub	sp, #8
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f7ff ff4c 	bl	8003d7c <__NVIC_SetPriorityGrouping>
}
 8003ee4:	bf00      	nop
 8003ee6:	3708      	adds	r7, #8
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b086      	sub	sp, #24
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]
 8003ef8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003efa:	2300      	movs	r3, #0
 8003efc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003efe:	f7ff ff61 	bl	8003dc4 <__NVIC_GetPriorityGrouping>
 8003f02:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	68b9      	ldr	r1, [r7, #8]
 8003f08:	6978      	ldr	r0, [r7, #20]
 8003f0a:	f7ff ffb1 	bl	8003e70 <NVIC_EncodePriority>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f14:	4611      	mov	r1, r2
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7ff ff80 	bl	8003e1c <__NVIC_SetPriority>
}
 8003f1c:	bf00      	nop
 8003f1e:	3718      	adds	r7, #24
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7ff ff54 	bl	8003de0 <__NVIC_EnableIRQ>
}
 8003f38:	bf00      	nop
 8003f3a:	3708      	adds	r7, #8
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d101      	bne.n	8003f52 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e014      	b.n	8003f7c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	791b      	ldrb	r3, [r3, #4]
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d105      	bne.n	8003f68 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f7fe fca4 	bl	80028b0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2202      	movs	r2, #2
 8003f6c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3708      	adds	r7, #8
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b088      	sub	sp, #32
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8003f90:	2300      	movs	r3, #0
 8003f92:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	795b      	ldrb	r3, [r3, #5]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d101      	bne.n	8003fa0 <HAL_DAC_ConfigChannel+0x1c>
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	e114      	b.n	80041ca <HAL_DAC_ConfigChannel+0x246>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2202      	movs	r2, #2
 8003faa:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2b04      	cmp	r3, #4
 8003fb2:	f040 8081 	bne.w	80040b8 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003fb6:	f7ff feb1 	bl	8003d1c <HAL_GetTick>
 8003fba:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d140      	bne.n	8004044 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003fc2:	e018      	b.n	8003ff6 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003fc4:	f7ff feaa 	bl	8003d1c <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d911      	bls.n	8003ff6 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fd8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00a      	beq.n	8003ff6 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	f043 0208 	orr.w	r2, r3, #8
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2203      	movs	r2, #3
 8003ff0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e0e9      	b.n	80041ca <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ffc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1df      	bne.n	8003fc4 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8004004:	2001      	movs	r0, #1
 8004006:	f7ff fe95 	bl	8003d34 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68ba      	ldr	r2, [r7, #8]
 8004010:	6992      	ldr	r2, [r2, #24]
 8004012:	641a      	str	r2, [r3, #64]	@ 0x40
 8004014:	e023      	b.n	800405e <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004016:	f7ff fe81 	bl	8003d1c <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	2b01      	cmp	r3, #1
 8004022:	d90f      	bls.n	8004044 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800402a:	2b00      	cmp	r3, #0
 800402c:	da0a      	bge.n	8004044 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	f043 0208 	orr.w	r2, r3, #8
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2203      	movs	r2, #3
 800403e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e0c2      	b.n	80041ca <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800404a:	2b00      	cmp	r3, #0
 800404c:	dbe3      	blt.n	8004016 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 800404e:	2001      	movs	r0, #1
 8004050:	f7ff fe70 	bl	8003d34 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68ba      	ldr	r2, [r7, #8]
 800405a:	6992      	ldr	r2, [r2, #24]
 800405c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f003 0310 	and.w	r3, r3, #16
 800406a:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800406e:	fa01 f303 	lsl.w	r3, r1, r3
 8004072:	43db      	mvns	r3, r3
 8004074:	ea02 0103 	and.w	r1, r2, r3
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	69da      	ldr	r2, [r3, #28]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f003 0310 	and.w	r3, r3, #16
 8004082:	409a      	lsls	r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	430a      	orrs	r2, r1
 800408a:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f003 0310 	and.w	r3, r3, #16
 8004098:	21ff      	movs	r1, #255	@ 0xff
 800409a:	fa01 f303 	lsl.w	r3, r1, r3
 800409e:	43db      	mvns	r3, r3
 80040a0:	ea02 0103 	and.w	r1, r2, r3
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	6a1a      	ldr	r2, [r3, #32]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f003 0310 	and.w	r3, r3, #16
 80040ae:	409a      	lsls	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	430a      	orrs	r2, r1
 80040b6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d11d      	bne.n	80040fc <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040c6:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f003 0310 	and.w	r3, r3, #16
 80040ce:	221f      	movs	r2, #31
 80040d0:	fa02 f303 	lsl.w	r3, r2, r3
 80040d4:	43db      	mvns	r3, r3
 80040d6:	69ba      	ldr	r2, [r7, #24]
 80040d8:	4013      	ands	r3, r2
 80040da:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	695b      	ldr	r3, [r3, #20]
 80040e0:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f003 0310 	and.w	r3, r3, #16
 80040e8:	697a      	ldr	r2, [r7, #20]
 80040ea:	fa02 f303 	lsl.w	r3, r2, r3
 80040ee:	69ba      	ldr	r2, [r7, #24]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	69ba      	ldr	r2, [r7, #24]
 80040fa:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004102:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f003 0310 	and.w	r3, r3, #16
 800410a:	2207      	movs	r2, #7
 800410c:	fa02 f303 	lsl.w	r3, r2, r3
 8004110:	43db      	mvns	r3, r3
 8004112:	69ba      	ldr	r2, [r7, #24]
 8004114:	4013      	ands	r3, r2
 8004116:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	431a      	orrs	r2, r3
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	4313      	orrs	r3, r2
 8004128:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f003 0310 	and.w	r3, r3, #16
 8004130:	697a      	ldr	r2, [r7, #20]
 8004132:	fa02 f303 	lsl.w	r3, r2, r3
 8004136:	69ba      	ldr	r2, [r7, #24]
 8004138:	4313      	orrs	r3, r2
 800413a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	6819      	ldr	r1, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f003 0310 	and.w	r3, r3, #16
 8004150:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004154:	fa02 f303 	lsl.w	r3, r2, r3
 8004158:	43da      	mvns	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	400a      	ands	r2, r1
 8004160:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f003 0310 	and.w	r3, r3, #16
 8004170:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8004174:	fa02 f303 	lsl.w	r3, r2, r3
 8004178:	43db      	mvns	r3, r3
 800417a:	69ba      	ldr	r2, [r7, #24]
 800417c:	4013      	ands	r3, r2
 800417e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f003 0310 	and.w	r3, r3, #16
 800418c:	697a      	ldr	r2, [r7, #20]
 800418e:	fa02 f303 	lsl.w	r3, r2, r3
 8004192:	69ba      	ldr	r2, [r7, #24]
 8004194:	4313      	orrs	r3, r2
 8004196:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	69ba      	ldr	r2, [r7, #24]
 800419e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6819      	ldr	r1, [r3, #0]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f003 0310 	and.w	r3, r3, #16
 80041ac:	22c0      	movs	r2, #192	@ 0xc0
 80041ae:	fa02 f303 	lsl.w	r3, r2, r3
 80041b2:	43da      	mvns	r2, r3
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	400a      	ands	r2, r1
 80041ba:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2201      	movs	r2, #1
 80041c0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3720      	adds	r7, #32
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80041d2:	b480      	push	{r7}
 80041d4:	b085      	sub	sp, #20
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041da:	2300      	movs	r3, #0
 80041dc:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d008      	beq.n	80041fc <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2204      	movs	r2, #4
 80041ee:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e022      	b.n	8004242 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f022 020e 	bic.w	r2, r2, #14
 800420a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f022 0201 	bic.w	r2, r2, #1
 800421a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004220:	f003 021c 	and.w	r2, r3, #28
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004228:	2101      	movs	r1, #1
 800422a:	fa01 f202 	lsl.w	r2, r1, r2
 800422e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8004240:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004242:	4618      	mov	r0, r3
 8004244:	3714      	adds	r7, #20
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr

0800424e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800424e:	b580      	push	{r7, lr}
 8004250:	b084      	sub	sp, #16
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004256:	2300      	movs	r3, #0
 8004258:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004260:	b2db      	uxtb	r3, r3
 8004262:	2b02      	cmp	r3, #2
 8004264:	d005      	beq.n	8004272 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2204      	movs	r2, #4
 800426a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	73fb      	strb	r3, [r7, #15]
 8004270:	e029      	b.n	80042c6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f022 020e 	bic.w	r2, r2, #14
 8004280:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f022 0201 	bic.w	r2, r2, #1
 8004290:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004296:	f003 021c 	and.w	r2, r3, #28
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800429e:	2101      	movs	r1, #1
 80042a0:	fa01 f202 	lsl.w	r2, r1, r2
 80042a4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2201      	movs	r2, #1
 80042aa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d003      	beq.n	80042c6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	4798      	blx	r3
    }
  }
  return status;
 80042c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3710      	adds	r7, #16
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b087      	sub	sp, #28
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80042da:	2300      	movs	r3, #0
 80042dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042de:	e166      	b.n	80045ae <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	2101      	movs	r1, #1
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	fa01 f303 	lsl.w	r3, r1, r3
 80042ec:	4013      	ands	r3, r2
 80042ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	f000 8158 	beq.w	80045a8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f003 0303 	and.w	r3, r3, #3
 8004300:	2b01      	cmp	r3, #1
 8004302:	d005      	beq.n	8004310 <HAL_GPIO_Init+0x40>
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f003 0303 	and.w	r3, r3, #3
 800430c:	2b02      	cmp	r3, #2
 800430e:	d130      	bne.n	8004372 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	005b      	lsls	r3, r3, #1
 800431a:	2203      	movs	r2, #3
 800431c:	fa02 f303 	lsl.w	r3, r2, r3
 8004320:	43db      	mvns	r3, r3
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	4013      	ands	r3, r2
 8004326:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	68da      	ldr	r2, [r3, #12]
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	005b      	lsls	r3, r3, #1
 8004330:	fa02 f303 	lsl.w	r3, r2, r3
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	4313      	orrs	r3, r2
 8004338:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004346:	2201      	movs	r2, #1
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	fa02 f303 	lsl.w	r3, r2, r3
 800434e:	43db      	mvns	r3, r3
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	4013      	ands	r3, r2
 8004354:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	091b      	lsrs	r3, r3, #4
 800435c:	f003 0201 	and.w	r2, r3, #1
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	fa02 f303 	lsl.w	r3, r2, r3
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	4313      	orrs	r3, r2
 800436a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	693a      	ldr	r2, [r7, #16]
 8004370:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f003 0303 	and.w	r3, r3, #3
 800437a:	2b03      	cmp	r3, #3
 800437c:	d017      	beq.n	80043ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	005b      	lsls	r3, r3, #1
 8004388:	2203      	movs	r2, #3
 800438a:	fa02 f303 	lsl.w	r3, r2, r3
 800438e:	43db      	mvns	r3, r3
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	4013      	ands	r3, r2
 8004394:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	689a      	ldr	r2, [r3, #8]
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	005b      	lsls	r3, r3, #1
 800439e:	fa02 f303 	lsl.w	r3, r2, r3
 80043a2:	693a      	ldr	r2, [r7, #16]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f003 0303 	and.w	r3, r3, #3
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d123      	bne.n	8004402 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	08da      	lsrs	r2, r3, #3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	3208      	adds	r2, #8
 80043c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	f003 0307 	and.w	r3, r3, #7
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	220f      	movs	r2, #15
 80043d2:	fa02 f303 	lsl.w	r3, r2, r3
 80043d6:	43db      	mvns	r3, r3
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	4013      	ands	r3, r2
 80043dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	691a      	ldr	r2, [r3, #16]
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	f003 0307 	and.w	r3, r3, #7
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	fa02 f303 	lsl.w	r3, r2, r3
 80043ee:	693a      	ldr	r2, [r7, #16]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	08da      	lsrs	r2, r3, #3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	3208      	adds	r2, #8
 80043fc:	6939      	ldr	r1, [r7, #16]
 80043fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	005b      	lsls	r3, r3, #1
 800440c:	2203      	movs	r2, #3
 800440e:	fa02 f303 	lsl.w	r3, r2, r3
 8004412:	43db      	mvns	r3, r3
 8004414:	693a      	ldr	r2, [r7, #16]
 8004416:	4013      	ands	r3, r2
 8004418:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f003 0203 	and.w	r2, r3, #3
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	005b      	lsls	r3, r3, #1
 8004426:	fa02 f303 	lsl.w	r3, r2, r3
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	4313      	orrs	r3, r2
 800442e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	693a      	ldr	r2, [r7, #16]
 8004434:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800443e:	2b00      	cmp	r3, #0
 8004440:	f000 80b2 	beq.w	80045a8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004444:	4b61      	ldr	r3, [pc, #388]	@ (80045cc <HAL_GPIO_Init+0x2fc>)
 8004446:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004448:	4a60      	ldr	r2, [pc, #384]	@ (80045cc <HAL_GPIO_Init+0x2fc>)
 800444a:	f043 0301 	orr.w	r3, r3, #1
 800444e:	6613      	str	r3, [r2, #96]	@ 0x60
 8004450:	4b5e      	ldr	r3, [pc, #376]	@ (80045cc <HAL_GPIO_Init+0x2fc>)
 8004452:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004454:	f003 0301 	and.w	r3, r3, #1
 8004458:	60bb      	str	r3, [r7, #8]
 800445a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800445c:	4a5c      	ldr	r2, [pc, #368]	@ (80045d0 <HAL_GPIO_Init+0x300>)
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	089b      	lsrs	r3, r3, #2
 8004462:	3302      	adds	r3, #2
 8004464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004468:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	f003 0303 	and.w	r3, r3, #3
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	220f      	movs	r2, #15
 8004474:	fa02 f303 	lsl.w	r3, r2, r3
 8004478:	43db      	mvns	r3, r3
 800447a:	693a      	ldr	r2, [r7, #16]
 800447c:	4013      	ands	r3, r2
 800447e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004486:	d02b      	beq.n	80044e0 <HAL_GPIO_Init+0x210>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4a52      	ldr	r2, [pc, #328]	@ (80045d4 <HAL_GPIO_Init+0x304>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d025      	beq.n	80044dc <HAL_GPIO_Init+0x20c>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a51      	ldr	r2, [pc, #324]	@ (80045d8 <HAL_GPIO_Init+0x308>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d01f      	beq.n	80044d8 <HAL_GPIO_Init+0x208>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4a50      	ldr	r2, [pc, #320]	@ (80045dc <HAL_GPIO_Init+0x30c>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d019      	beq.n	80044d4 <HAL_GPIO_Init+0x204>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a4f      	ldr	r2, [pc, #316]	@ (80045e0 <HAL_GPIO_Init+0x310>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d013      	beq.n	80044d0 <HAL_GPIO_Init+0x200>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4a4e      	ldr	r2, [pc, #312]	@ (80045e4 <HAL_GPIO_Init+0x314>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d00d      	beq.n	80044cc <HAL_GPIO_Init+0x1fc>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a4d      	ldr	r2, [pc, #308]	@ (80045e8 <HAL_GPIO_Init+0x318>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d007      	beq.n	80044c8 <HAL_GPIO_Init+0x1f8>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a4c      	ldr	r2, [pc, #304]	@ (80045ec <HAL_GPIO_Init+0x31c>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d101      	bne.n	80044c4 <HAL_GPIO_Init+0x1f4>
 80044c0:	2307      	movs	r3, #7
 80044c2:	e00e      	b.n	80044e2 <HAL_GPIO_Init+0x212>
 80044c4:	2308      	movs	r3, #8
 80044c6:	e00c      	b.n	80044e2 <HAL_GPIO_Init+0x212>
 80044c8:	2306      	movs	r3, #6
 80044ca:	e00a      	b.n	80044e2 <HAL_GPIO_Init+0x212>
 80044cc:	2305      	movs	r3, #5
 80044ce:	e008      	b.n	80044e2 <HAL_GPIO_Init+0x212>
 80044d0:	2304      	movs	r3, #4
 80044d2:	e006      	b.n	80044e2 <HAL_GPIO_Init+0x212>
 80044d4:	2303      	movs	r3, #3
 80044d6:	e004      	b.n	80044e2 <HAL_GPIO_Init+0x212>
 80044d8:	2302      	movs	r3, #2
 80044da:	e002      	b.n	80044e2 <HAL_GPIO_Init+0x212>
 80044dc:	2301      	movs	r3, #1
 80044de:	e000      	b.n	80044e2 <HAL_GPIO_Init+0x212>
 80044e0:	2300      	movs	r3, #0
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	f002 0203 	and.w	r2, r2, #3
 80044e8:	0092      	lsls	r2, r2, #2
 80044ea:	4093      	lsls	r3, r2
 80044ec:	693a      	ldr	r2, [r7, #16]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80044f2:	4937      	ldr	r1, [pc, #220]	@ (80045d0 <HAL_GPIO_Init+0x300>)
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	089b      	lsrs	r3, r3, #2
 80044f8:	3302      	adds	r3, #2
 80044fa:	693a      	ldr	r2, [r7, #16]
 80044fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004500:	4b3b      	ldr	r3, [pc, #236]	@ (80045f0 <HAL_GPIO_Init+0x320>)
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	43db      	mvns	r3, r3
 800450a:	693a      	ldr	r2, [r7, #16]
 800450c:	4013      	ands	r3, r2
 800450e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d003      	beq.n	8004524 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	4313      	orrs	r3, r2
 8004522:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004524:	4a32      	ldr	r2, [pc, #200]	@ (80045f0 <HAL_GPIO_Init+0x320>)
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800452a:	4b31      	ldr	r3, [pc, #196]	@ (80045f0 <HAL_GPIO_Init+0x320>)
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	43db      	mvns	r3, r3
 8004534:	693a      	ldr	r2, [r7, #16]
 8004536:	4013      	ands	r3, r2
 8004538:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d003      	beq.n	800454e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8004546:	693a      	ldr	r2, [r7, #16]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	4313      	orrs	r3, r2
 800454c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800454e:	4a28      	ldr	r2, [pc, #160]	@ (80045f0 <HAL_GPIO_Init+0x320>)
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004554:	4b26      	ldr	r3, [pc, #152]	@ (80045f0 <HAL_GPIO_Init+0x320>)
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	43db      	mvns	r3, r3
 800455e:	693a      	ldr	r2, [r7, #16]
 8004560:	4013      	ands	r3, r2
 8004562:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d003      	beq.n	8004578 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	4313      	orrs	r3, r2
 8004576:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004578:	4a1d      	ldr	r2, [pc, #116]	@ (80045f0 <HAL_GPIO_Init+0x320>)
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800457e:	4b1c      	ldr	r3, [pc, #112]	@ (80045f0 <HAL_GPIO_Init+0x320>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	43db      	mvns	r3, r3
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	4013      	ands	r3, r2
 800458c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d003      	beq.n	80045a2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800459a:	693a      	ldr	r2, [r7, #16]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	4313      	orrs	r3, r2
 80045a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80045a2:	4a13      	ldr	r2, [pc, #76]	@ (80045f0 <HAL_GPIO_Init+0x320>)
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	3301      	adds	r3, #1
 80045ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	fa22 f303 	lsr.w	r3, r2, r3
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	f47f ae91 	bne.w	80042e0 <HAL_GPIO_Init+0x10>
  }
}
 80045be:	bf00      	nop
 80045c0:	bf00      	nop
 80045c2:	371c      	adds	r7, #28
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr
 80045cc:	40021000 	.word	0x40021000
 80045d0:	40010000 	.word	0x40010000
 80045d4:	48000400 	.word	0x48000400
 80045d8:	48000800 	.word	0x48000800
 80045dc:	48000c00 	.word	0x48000c00
 80045e0:	48001000 	.word	0x48001000
 80045e4:	48001400 	.word	0x48001400
 80045e8:	48001800 	.word	0x48001800
 80045ec:	48001c00 	.word	0x48001c00
 80045f0:	40010400 	.word	0x40010400

080045f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	460b      	mov	r3, r1
 80045fe:	807b      	strh	r3, [r7, #2]
 8004600:	4613      	mov	r3, r2
 8004602:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004604:	787b      	ldrb	r3, [r7, #1]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d003      	beq.n	8004612 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800460a:	887a      	ldrh	r2, [r7, #2]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004610:	e002      	b.n	8004618 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004612:	887a      	ldrh	r2, [r7, #2]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004618:	bf00      	nop
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	460b      	mov	r3, r1
 800462e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	695b      	ldr	r3, [r3, #20]
 8004634:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004636:	887a      	ldrh	r2, [r7, #2]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	4013      	ands	r3, r2
 800463c:	041a      	lsls	r2, r3, #16
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	43d9      	mvns	r1, r3
 8004642:	887b      	ldrh	r3, [r7, #2]
 8004644:	400b      	ands	r3, r1
 8004646:	431a      	orrs	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	619a      	str	r2, [r3, #24]
}
 800464c:	bf00      	nop
 800464e:	3714      	adds	r7, #20
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	4603      	mov	r3, r0
 8004660:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004662:	4b08      	ldr	r3, [pc, #32]	@ (8004684 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004664:	695a      	ldr	r2, [r3, #20]
 8004666:	88fb      	ldrh	r3, [r7, #6]
 8004668:	4013      	ands	r3, r2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d006      	beq.n	800467c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800466e:	4a05      	ldr	r2, [pc, #20]	@ (8004684 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004670:	88fb      	ldrh	r3, [r7, #6]
 8004672:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004674:	88fb      	ldrh	r3, [r7, #6]
 8004676:	4618      	mov	r0, r3
 8004678:	f000 f806 	bl	8004688 <HAL_GPIO_EXTI_Callback>
  }
}
 800467c:	bf00      	nop
 800467e:	3708      	adds	r7, #8
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}
 8004684:	40010400 	.word	0x40010400

08004688 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	4603      	mov	r3, r0
 8004690:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004692:	bf00      	nop
 8004694:	370c      	adds	r7, #12
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr

0800469e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800469e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046a0:	b08f      	sub	sp, #60	@ 0x3c
 80046a2:	af0a      	add	r7, sp, #40	@ 0x28
 80046a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d101      	bne.n	80046b0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e116      	b.n	80048de <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d106      	bne.n	80046d0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f7ff fa34 	bl	8003b38 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2203      	movs	r2, #3
 80046d4:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d102      	bne.n	80046ea <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4618      	mov	r0, r3
 80046f0:	f004 fefa 	bl	80094e8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	603b      	str	r3, [r7, #0]
 80046fa:	687e      	ldr	r6, [r7, #4]
 80046fc:	466d      	mov	r5, sp
 80046fe:	f106 0410 	add.w	r4, r6, #16
 8004702:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004704:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004706:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004708:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800470a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800470e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004712:	1d33      	adds	r3, r6, #4
 8004714:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004716:	6838      	ldr	r0, [r7, #0]
 8004718:	f004 feba 	bl	8009490 <USB_CoreInit>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d005      	beq.n	800472e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2202      	movs	r2, #2
 8004726:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e0d7      	b.n	80048de <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2100      	movs	r1, #0
 8004734:	4618      	mov	r0, r3
 8004736:	f004 fee8 	bl	800950a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800473a:	2300      	movs	r3, #0
 800473c:	73fb      	strb	r3, [r7, #15]
 800473e:	e04a      	b.n	80047d6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004740:	7bfa      	ldrb	r2, [r7, #15]
 8004742:	6879      	ldr	r1, [r7, #4]
 8004744:	4613      	mov	r3, r2
 8004746:	00db      	lsls	r3, r3, #3
 8004748:	4413      	add	r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	440b      	add	r3, r1
 800474e:	333d      	adds	r3, #61	@ 0x3d
 8004750:	2201      	movs	r2, #1
 8004752:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004754:	7bfa      	ldrb	r2, [r7, #15]
 8004756:	6879      	ldr	r1, [r7, #4]
 8004758:	4613      	mov	r3, r2
 800475a:	00db      	lsls	r3, r3, #3
 800475c:	4413      	add	r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	440b      	add	r3, r1
 8004762:	333c      	adds	r3, #60	@ 0x3c
 8004764:	7bfa      	ldrb	r2, [r7, #15]
 8004766:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004768:	7bfa      	ldrb	r2, [r7, #15]
 800476a:	7bfb      	ldrb	r3, [r7, #15]
 800476c:	b298      	uxth	r0, r3
 800476e:	6879      	ldr	r1, [r7, #4]
 8004770:	4613      	mov	r3, r2
 8004772:	00db      	lsls	r3, r3, #3
 8004774:	4413      	add	r3, r2
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	440b      	add	r3, r1
 800477a:	3356      	adds	r3, #86	@ 0x56
 800477c:	4602      	mov	r2, r0
 800477e:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004780:	7bfa      	ldrb	r2, [r7, #15]
 8004782:	6879      	ldr	r1, [r7, #4]
 8004784:	4613      	mov	r3, r2
 8004786:	00db      	lsls	r3, r3, #3
 8004788:	4413      	add	r3, r2
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	440b      	add	r3, r1
 800478e:	3340      	adds	r3, #64	@ 0x40
 8004790:	2200      	movs	r2, #0
 8004792:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004794:	7bfa      	ldrb	r2, [r7, #15]
 8004796:	6879      	ldr	r1, [r7, #4]
 8004798:	4613      	mov	r3, r2
 800479a:	00db      	lsls	r3, r3, #3
 800479c:	4413      	add	r3, r2
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	440b      	add	r3, r1
 80047a2:	3344      	adds	r3, #68	@ 0x44
 80047a4:	2200      	movs	r2, #0
 80047a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80047a8:	7bfa      	ldrb	r2, [r7, #15]
 80047aa:	6879      	ldr	r1, [r7, #4]
 80047ac:	4613      	mov	r3, r2
 80047ae:	00db      	lsls	r3, r3, #3
 80047b0:	4413      	add	r3, r2
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	440b      	add	r3, r1
 80047b6:	3348      	adds	r3, #72	@ 0x48
 80047b8:	2200      	movs	r2, #0
 80047ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80047bc:	7bfa      	ldrb	r2, [r7, #15]
 80047be:	6879      	ldr	r1, [r7, #4]
 80047c0:	4613      	mov	r3, r2
 80047c2:	00db      	lsls	r3, r3, #3
 80047c4:	4413      	add	r3, r2
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	440b      	add	r3, r1
 80047ca:	334c      	adds	r3, #76	@ 0x4c
 80047cc:	2200      	movs	r2, #0
 80047ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047d0:	7bfb      	ldrb	r3, [r7, #15]
 80047d2:	3301      	adds	r3, #1
 80047d4:	73fb      	strb	r3, [r7, #15]
 80047d6:	7bfa      	ldrb	r2, [r7, #15]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d3af      	bcc.n	8004740 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047e0:	2300      	movs	r3, #0
 80047e2:	73fb      	strb	r3, [r7, #15]
 80047e4:	e044      	b.n	8004870 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80047e6:	7bfa      	ldrb	r2, [r7, #15]
 80047e8:	6879      	ldr	r1, [r7, #4]
 80047ea:	4613      	mov	r3, r2
 80047ec:	00db      	lsls	r3, r3, #3
 80047ee:	4413      	add	r3, r2
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	440b      	add	r3, r1
 80047f4:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 80047f8:	2200      	movs	r2, #0
 80047fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80047fc:	7bfa      	ldrb	r2, [r7, #15]
 80047fe:	6879      	ldr	r1, [r7, #4]
 8004800:	4613      	mov	r3, r2
 8004802:	00db      	lsls	r3, r3, #3
 8004804:	4413      	add	r3, r2
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	440b      	add	r3, r1
 800480a:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 800480e:	7bfa      	ldrb	r2, [r7, #15]
 8004810:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004812:	7bfa      	ldrb	r2, [r7, #15]
 8004814:	6879      	ldr	r1, [r7, #4]
 8004816:	4613      	mov	r3, r2
 8004818:	00db      	lsls	r3, r3, #3
 800481a:	4413      	add	r3, r2
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	440b      	add	r3, r1
 8004820:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8004824:	2200      	movs	r2, #0
 8004826:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004828:	7bfa      	ldrb	r2, [r7, #15]
 800482a:	6879      	ldr	r1, [r7, #4]
 800482c:	4613      	mov	r3, r2
 800482e:	00db      	lsls	r3, r3, #3
 8004830:	4413      	add	r3, r2
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	440b      	add	r3, r1
 8004836:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 800483a:	2200      	movs	r2, #0
 800483c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800483e:	7bfa      	ldrb	r2, [r7, #15]
 8004840:	6879      	ldr	r1, [r7, #4]
 8004842:	4613      	mov	r3, r2
 8004844:	00db      	lsls	r3, r3, #3
 8004846:	4413      	add	r3, r2
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	440b      	add	r3, r1
 800484c:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8004850:	2200      	movs	r2, #0
 8004852:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004854:	7bfa      	ldrb	r2, [r7, #15]
 8004856:	6879      	ldr	r1, [r7, #4]
 8004858:	4613      	mov	r3, r2
 800485a:	00db      	lsls	r3, r3, #3
 800485c:	4413      	add	r3, r2
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	440b      	add	r3, r1
 8004862:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8004866:	2200      	movs	r2, #0
 8004868:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800486a:	7bfb      	ldrb	r3, [r7, #15]
 800486c:	3301      	adds	r3, #1
 800486e:	73fb      	strb	r3, [r7, #15]
 8004870:	7bfa      	ldrb	r2, [r7, #15]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	429a      	cmp	r2, r3
 8004878:	d3b5      	bcc.n	80047e6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	603b      	str	r3, [r7, #0]
 8004880:	687e      	ldr	r6, [r7, #4]
 8004882:	466d      	mov	r5, sp
 8004884:	f106 0410 	add.w	r4, r6, #16
 8004888:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800488a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800488c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800488e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004890:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004894:	e885 0003 	stmia.w	r5, {r0, r1}
 8004898:	1d33      	adds	r3, r6, #4
 800489a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800489c:	6838      	ldr	r0, [r7, #0]
 800489e:	f004 fe81 	bl	80095a4 <USB_DevInit>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d005      	beq.n	80048b4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2202      	movs	r2, #2
 80048ac:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e014      	b.n	80048de <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d102      	bne.n	80048d2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f000 f80a 	bl	80048e6 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4618      	mov	r0, r3
 80048d8:	f005 f823 	bl	8009922 <USB_DevDisconnect>

  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3714      	adds	r7, #20
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080048e6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80048e6:	b480      	push	{r7}
 80048e8:	b085      	sub	sp, #20
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004914:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004918:	f043 0303 	orr.w	r3, r3, #3
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3714      	adds	r7, #20
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
	...

08004930 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004930:	b480      	push	{r7}
 8004932:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004934:	4b04      	ldr	r3, [pc, #16]	@ (8004948 <HAL_PWREx_GetVoltageRange+0x18>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800493c:	4618      	mov	r0, r3
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	40007000 	.word	0x40007000

0800494c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800495a:	d130      	bne.n	80049be <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800495c:	4b23      	ldr	r3, [pc, #140]	@ (80049ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004964:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004968:	d038      	beq.n	80049dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800496a:	4b20      	ldr	r3, [pc, #128]	@ (80049ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004972:	4a1e      	ldr	r2, [pc, #120]	@ (80049ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004974:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004978:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800497a:	4b1d      	ldr	r3, [pc, #116]	@ (80049f0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	2232      	movs	r2, #50	@ 0x32
 8004980:	fb02 f303 	mul.w	r3, r2, r3
 8004984:	4a1b      	ldr	r2, [pc, #108]	@ (80049f4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004986:	fba2 2303 	umull	r2, r3, r2, r3
 800498a:	0c9b      	lsrs	r3, r3, #18
 800498c:	3301      	adds	r3, #1
 800498e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004990:	e002      	b.n	8004998 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	3b01      	subs	r3, #1
 8004996:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004998:	4b14      	ldr	r3, [pc, #80]	@ (80049ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800499a:	695b      	ldr	r3, [r3, #20]
 800499c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049a4:	d102      	bne.n	80049ac <HAL_PWREx_ControlVoltageScaling+0x60>
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d1f2      	bne.n	8004992 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80049ac:	4b0f      	ldr	r3, [pc, #60]	@ (80049ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049ae:	695b      	ldr	r3, [r3, #20]
 80049b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049b8:	d110      	bne.n	80049dc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e00f      	b.n	80049de <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80049be:	4b0b      	ldr	r3, [pc, #44]	@ (80049ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80049c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049ca:	d007      	beq.n	80049dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80049cc:	4b07      	ldr	r3, [pc, #28]	@ (80049ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80049d4:	4a05      	ldr	r2, [pc, #20]	@ (80049ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80049da:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3714      	adds	r7, #20
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop
 80049ec:	40007000 	.word	0x40007000
 80049f0:	200001bc 	.word	0x200001bc
 80049f4:	431bde83 	.word	0x431bde83

080049f8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80049f8:	b480      	push	{r7}
 80049fa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80049fc:	4b05      	ldr	r3, [pc, #20]	@ (8004a14 <HAL_PWREx_EnableVddUSB+0x1c>)
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	4a04      	ldr	r2, [pc, #16]	@ (8004a14 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004a02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004a06:	6053      	str	r3, [r2, #4]
}
 8004a08:	bf00      	nop
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	40007000 	.word	0x40007000

08004a18 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b088      	sub	sp, #32
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d102      	bne.n	8004a2c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	f000 bc08 	b.w	800523c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a2c:	4b96      	ldr	r3, [pc, #600]	@ (8004c88 <HAL_RCC_OscConfig+0x270>)
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f003 030c 	and.w	r3, r3, #12
 8004a34:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a36:	4b94      	ldr	r3, [pc, #592]	@ (8004c88 <HAL_RCC_OscConfig+0x270>)
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	f003 0303 	and.w	r3, r3, #3
 8004a3e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0310 	and.w	r3, r3, #16
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	f000 80e4 	beq.w	8004c16 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d007      	beq.n	8004a64 <HAL_RCC_OscConfig+0x4c>
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	2b0c      	cmp	r3, #12
 8004a58:	f040 808b 	bne.w	8004b72 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	f040 8087 	bne.w	8004b72 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a64:	4b88      	ldr	r3, [pc, #544]	@ (8004c88 <HAL_RCC_OscConfig+0x270>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0302 	and.w	r3, r3, #2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d005      	beq.n	8004a7c <HAL_RCC_OscConfig+0x64>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	699b      	ldr	r3, [r3, #24]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d101      	bne.n	8004a7c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e3df      	b.n	800523c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a1a      	ldr	r2, [r3, #32]
 8004a80:	4b81      	ldr	r3, [pc, #516]	@ (8004c88 <HAL_RCC_OscConfig+0x270>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0308 	and.w	r3, r3, #8
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d004      	beq.n	8004a96 <HAL_RCC_OscConfig+0x7e>
 8004a8c:	4b7e      	ldr	r3, [pc, #504]	@ (8004c88 <HAL_RCC_OscConfig+0x270>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a94:	e005      	b.n	8004aa2 <HAL_RCC_OscConfig+0x8a>
 8004a96:	4b7c      	ldr	r3, [pc, #496]	@ (8004c88 <HAL_RCC_OscConfig+0x270>)
 8004a98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a9c:	091b      	lsrs	r3, r3, #4
 8004a9e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d223      	bcs.n	8004aee <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a1b      	ldr	r3, [r3, #32]
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f000 fdc4 	bl	8005638 <RCC_SetFlashLatencyFromMSIRange>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d001      	beq.n	8004aba <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e3c0      	b.n	800523c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004aba:	4b73      	ldr	r3, [pc, #460]	@ (8004c88 <HAL_RCC_OscConfig+0x270>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a72      	ldr	r2, [pc, #456]	@ (8004c88 <HAL_RCC_OscConfig+0x270>)
 8004ac0:	f043 0308 	orr.w	r3, r3, #8
 8004ac4:	6013      	str	r3, [r2, #0]
 8004ac6:	4b70      	ldr	r3, [pc, #448]	@ (8004c88 <HAL_RCC_OscConfig+0x270>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a1b      	ldr	r3, [r3, #32]
 8004ad2:	496d      	ldr	r1, [pc, #436]	@ (8004c88 <HAL_RCC_OscConfig+0x270>)
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ad8:	4b6b      	ldr	r3, [pc, #428]	@ (8004c88 <HAL_RCC_OscConfig+0x270>)
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	69db      	ldr	r3, [r3, #28]
 8004ae4:	021b      	lsls	r3, r3, #8
 8004ae6:	4968      	ldr	r1, [pc, #416]	@ (8004c88 <HAL_RCC_OscConfig+0x270>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	604b      	str	r3, [r1, #4]
 8004aec:	e025      	b.n	8004b3a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004aee:	4b66      	ldr	r3, [pc, #408]	@ (8004c88 <HAL_RCC_OscConfig+0x270>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a65      	ldr	r2, [pc, #404]	@ (8004c88 <HAL_RCC_OscConfig+0x270>)
 8004af4:	f043 0308 	orr.w	r3, r3, #8
 8004af8:	6013      	str	r3, [r2, #0]
 8004afa:	4b63      	ldr	r3, [pc, #396]	@ (8004c88 <HAL_RCC_OscConfig+0x270>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a1b      	ldr	r3, [r3, #32]
 8004b06:	4960      	ldr	r1, [pc, #384]	@ (8004c88 <HAL_RCC_OscConfig+0x270>)
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b0c:	4b5e      	ldr	r3, [pc, #376]	@ (8004c88 <HAL_RCC_OscConfig+0x270>)
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	69db      	ldr	r3, [r3, #28]
 8004b18:	021b      	lsls	r3, r3, #8
 8004b1a:	495b      	ldr	r1, [pc, #364]	@ (8004c88 <HAL_RCC_OscConfig+0x270>)
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d109      	bne.n	8004b3a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a1b      	ldr	r3, [r3, #32]
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f000 fd84 	bl	8005638 <RCC_SetFlashLatencyFromMSIRange>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d001      	beq.n	8004b3a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e380      	b.n	800523c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004b3a:	f000 fc87 	bl	800544c <HAL_RCC_GetSysClockFreq>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	4b51      	ldr	r3, [pc, #324]	@ (8004c88 <HAL_RCC_OscConfig+0x270>)
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	091b      	lsrs	r3, r3, #4
 8004b46:	f003 030f 	and.w	r3, r3, #15
 8004b4a:	4950      	ldr	r1, [pc, #320]	@ (8004c8c <HAL_RCC_OscConfig+0x274>)
 8004b4c:	5ccb      	ldrb	r3, [r1, r3]
 8004b4e:	f003 031f 	and.w	r3, r3, #31
 8004b52:	fa22 f303 	lsr.w	r3, r2, r3
 8004b56:	4a4e      	ldr	r2, [pc, #312]	@ (8004c90 <HAL_RCC_OscConfig+0x278>)
 8004b58:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004b5a:	4b4e      	ldr	r3, [pc, #312]	@ (8004c94 <HAL_RCC_OscConfig+0x27c>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f7fe fba0 	bl	80032a4 <HAL_InitTick>
 8004b64:	4603      	mov	r3, r0
 8004b66:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004b68:	7bfb      	ldrb	r3, [r7, #15]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d052      	beq.n	8004c14 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004b6e:	7bfb      	ldrb	r3, [r7, #15]
 8004b70:	e364      	b.n	800523c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	699b      	ldr	r3, [r3, #24]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d032      	beq.n	8004be0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004b7a:	4b43      	ldr	r3, [pc, #268]	@ (8004c88 <HAL_RCC_OscConfig+0x270>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a42      	ldr	r2, [pc, #264]	@ (8004c88 <HAL_RCC_OscConfig+0x270>)
 8004b80:	f043 0301 	orr.w	r3, r3, #1
 8004b84:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b86:	f7ff f8c9 	bl	8003d1c <HAL_GetTick>
 8004b8a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b8c:	e008      	b.n	8004ba0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b8e:	f7ff f8c5 	bl	8003d1c <HAL_GetTick>
 8004b92:	4602      	mov	r2, r0
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d901      	bls.n	8004ba0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e34d      	b.n	800523c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ba0:	4b39      	ldr	r3, [pc, #228]	@ (8004c88 <HAL_RCC_OscConfig+0x270>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0302 	and.w	r3, r3, #2
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d0f0      	beq.n	8004b8e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004bac:	4b36      	ldr	r3, [pc, #216]	@ (8004c88 <HAL_RCC_OscConfig+0x270>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a35      	ldr	r2, [pc, #212]	@ (8004c88 <HAL_RCC_OscConfig+0x270>)
 8004bb2:	f043 0308 	orr.w	r3, r3, #8
 8004bb6:	6013      	str	r3, [r2, #0]
 8004bb8:	4b33      	ldr	r3, [pc, #204]	@ (8004c88 <HAL_RCC_OscConfig+0x270>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6a1b      	ldr	r3, [r3, #32]
 8004bc4:	4930      	ldr	r1, [pc, #192]	@ (8004c88 <HAL_RCC_OscConfig+0x270>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004bca:	4b2f      	ldr	r3, [pc, #188]	@ (8004c88 <HAL_RCC_OscConfig+0x270>)
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	69db      	ldr	r3, [r3, #28]
 8004bd6:	021b      	lsls	r3, r3, #8
 8004bd8:	492b      	ldr	r1, [pc, #172]	@ (8004c88 <HAL_RCC_OscConfig+0x270>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	604b      	str	r3, [r1, #4]
 8004bde:	e01a      	b.n	8004c16 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004be0:	4b29      	ldr	r3, [pc, #164]	@ (8004c88 <HAL_RCC_OscConfig+0x270>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a28      	ldr	r2, [pc, #160]	@ (8004c88 <HAL_RCC_OscConfig+0x270>)
 8004be6:	f023 0301 	bic.w	r3, r3, #1
 8004bea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004bec:	f7ff f896 	bl	8003d1c <HAL_GetTick>
 8004bf0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004bf2:	e008      	b.n	8004c06 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004bf4:	f7ff f892 	bl	8003d1c <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d901      	bls.n	8004c06 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e31a      	b.n	800523c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004c06:	4b20      	ldr	r3, [pc, #128]	@ (8004c88 <HAL_RCC_OscConfig+0x270>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d1f0      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x1dc>
 8004c12:	e000      	b.n	8004c16 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004c14:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0301 	and.w	r3, r3, #1
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d073      	beq.n	8004d0a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	2b08      	cmp	r3, #8
 8004c26:	d005      	beq.n	8004c34 <HAL_RCC_OscConfig+0x21c>
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	2b0c      	cmp	r3, #12
 8004c2c:	d10e      	bne.n	8004c4c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	2b03      	cmp	r3, #3
 8004c32:	d10b      	bne.n	8004c4c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c34:	4b14      	ldr	r3, [pc, #80]	@ (8004c88 <HAL_RCC_OscConfig+0x270>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d063      	beq.n	8004d08 <HAL_RCC_OscConfig+0x2f0>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d15f      	bne.n	8004d08 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e2f7      	b.n	800523c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c54:	d106      	bne.n	8004c64 <HAL_RCC_OscConfig+0x24c>
 8004c56:	4b0c      	ldr	r3, [pc, #48]	@ (8004c88 <HAL_RCC_OscConfig+0x270>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a0b      	ldr	r2, [pc, #44]	@ (8004c88 <HAL_RCC_OscConfig+0x270>)
 8004c5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c60:	6013      	str	r3, [r2, #0]
 8004c62:	e025      	b.n	8004cb0 <HAL_RCC_OscConfig+0x298>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c6c:	d114      	bne.n	8004c98 <HAL_RCC_OscConfig+0x280>
 8004c6e:	4b06      	ldr	r3, [pc, #24]	@ (8004c88 <HAL_RCC_OscConfig+0x270>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a05      	ldr	r2, [pc, #20]	@ (8004c88 <HAL_RCC_OscConfig+0x270>)
 8004c74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c78:	6013      	str	r3, [r2, #0]
 8004c7a:	4b03      	ldr	r3, [pc, #12]	@ (8004c88 <HAL_RCC_OscConfig+0x270>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a02      	ldr	r2, [pc, #8]	@ (8004c88 <HAL_RCC_OscConfig+0x270>)
 8004c80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c84:	6013      	str	r3, [r2, #0]
 8004c86:	e013      	b.n	8004cb0 <HAL_RCC_OscConfig+0x298>
 8004c88:	40021000 	.word	0x40021000
 8004c8c:	08010410 	.word	0x08010410
 8004c90:	200001bc 	.word	0x200001bc
 8004c94:	200001c0 	.word	0x200001c0
 8004c98:	4ba0      	ldr	r3, [pc, #640]	@ (8004f1c <HAL_RCC_OscConfig+0x504>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a9f      	ldr	r2, [pc, #636]	@ (8004f1c <HAL_RCC_OscConfig+0x504>)
 8004c9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ca2:	6013      	str	r3, [r2, #0]
 8004ca4:	4b9d      	ldr	r3, [pc, #628]	@ (8004f1c <HAL_RCC_OscConfig+0x504>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a9c      	ldr	r2, [pc, #624]	@ (8004f1c <HAL_RCC_OscConfig+0x504>)
 8004caa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004cae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d013      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb8:	f7ff f830 	bl	8003d1c <HAL_GetTick>
 8004cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cbe:	e008      	b.n	8004cd2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cc0:	f7ff f82c 	bl	8003d1c <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	2b64      	cmp	r3, #100	@ 0x64
 8004ccc:	d901      	bls.n	8004cd2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e2b4      	b.n	800523c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cd2:	4b92      	ldr	r3, [pc, #584]	@ (8004f1c <HAL_RCC_OscConfig+0x504>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d0f0      	beq.n	8004cc0 <HAL_RCC_OscConfig+0x2a8>
 8004cde:	e014      	b.n	8004d0a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce0:	f7ff f81c 	bl	8003d1c <HAL_GetTick>
 8004ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ce6:	e008      	b.n	8004cfa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ce8:	f7ff f818 	bl	8003d1c <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	2b64      	cmp	r3, #100	@ 0x64
 8004cf4:	d901      	bls.n	8004cfa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e2a0      	b.n	800523c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004cfa:	4b88      	ldr	r3, [pc, #544]	@ (8004f1c <HAL_RCC_OscConfig+0x504>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1f0      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x2d0>
 8004d06:	e000      	b.n	8004d0a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0302 	and.w	r3, r3, #2
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d060      	beq.n	8004dd8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	2b04      	cmp	r3, #4
 8004d1a:	d005      	beq.n	8004d28 <HAL_RCC_OscConfig+0x310>
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	2b0c      	cmp	r3, #12
 8004d20:	d119      	bne.n	8004d56 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d116      	bne.n	8004d56 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d28:	4b7c      	ldr	r3, [pc, #496]	@ (8004f1c <HAL_RCC_OscConfig+0x504>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d005      	beq.n	8004d40 <HAL_RCC_OscConfig+0x328>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d101      	bne.n	8004d40 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e27d      	b.n	800523c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d40:	4b76      	ldr	r3, [pc, #472]	@ (8004f1c <HAL_RCC_OscConfig+0x504>)
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	061b      	lsls	r3, r3, #24
 8004d4e:	4973      	ldr	r1, [pc, #460]	@ (8004f1c <HAL_RCC_OscConfig+0x504>)
 8004d50:	4313      	orrs	r3, r2
 8004d52:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d54:	e040      	b.n	8004dd8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d023      	beq.n	8004da6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d5e:	4b6f      	ldr	r3, [pc, #444]	@ (8004f1c <HAL_RCC_OscConfig+0x504>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a6e      	ldr	r2, [pc, #440]	@ (8004f1c <HAL_RCC_OscConfig+0x504>)
 8004d64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d6a:	f7fe ffd7 	bl	8003d1c <HAL_GetTick>
 8004d6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d70:	e008      	b.n	8004d84 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d72:	f7fe ffd3 	bl	8003d1c <HAL_GetTick>
 8004d76:	4602      	mov	r2, r0
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	2b02      	cmp	r3, #2
 8004d7e:	d901      	bls.n	8004d84 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	e25b      	b.n	800523c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d84:	4b65      	ldr	r3, [pc, #404]	@ (8004f1c <HAL_RCC_OscConfig+0x504>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d0f0      	beq.n	8004d72 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d90:	4b62      	ldr	r3, [pc, #392]	@ (8004f1c <HAL_RCC_OscConfig+0x504>)
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	061b      	lsls	r3, r3, #24
 8004d9e:	495f      	ldr	r1, [pc, #380]	@ (8004f1c <HAL_RCC_OscConfig+0x504>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	604b      	str	r3, [r1, #4]
 8004da4:	e018      	b.n	8004dd8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004da6:	4b5d      	ldr	r3, [pc, #372]	@ (8004f1c <HAL_RCC_OscConfig+0x504>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a5c      	ldr	r2, [pc, #368]	@ (8004f1c <HAL_RCC_OscConfig+0x504>)
 8004dac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004db0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db2:	f7fe ffb3 	bl	8003d1c <HAL_GetTick>
 8004db6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004db8:	e008      	b.n	8004dcc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dba:	f7fe ffaf 	bl	8003d1c <HAL_GetTick>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d901      	bls.n	8004dcc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	e237      	b.n	800523c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004dcc:	4b53      	ldr	r3, [pc, #332]	@ (8004f1c <HAL_RCC_OscConfig+0x504>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d1f0      	bne.n	8004dba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0308 	and.w	r3, r3, #8
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d03c      	beq.n	8004e5e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	695b      	ldr	r3, [r3, #20]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d01c      	beq.n	8004e26 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dec:	4b4b      	ldr	r3, [pc, #300]	@ (8004f1c <HAL_RCC_OscConfig+0x504>)
 8004dee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004df2:	4a4a      	ldr	r2, [pc, #296]	@ (8004f1c <HAL_RCC_OscConfig+0x504>)
 8004df4:	f043 0301 	orr.w	r3, r3, #1
 8004df8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dfc:	f7fe ff8e 	bl	8003d1c <HAL_GetTick>
 8004e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e02:	e008      	b.n	8004e16 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e04:	f7fe ff8a 	bl	8003d1c <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d901      	bls.n	8004e16 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e212      	b.n	800523c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e16:	4b41      	ldr	r3, [pc, #260]	@ (8004f1c <HAL_RCC_OscConfig+0x504>)
 8004e18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e1c:	f003 0302 	and.w	r3, r3, #2
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d0ef      	beq.n	8004e04 <HAL_RCC_OscConfig+0x3ec>
 8004e24:	e01b      	b.n	8004e5e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e26:	4b3d      	ldr	r3, [pc, #244]	@ (8004f1c <HAL_RCC_OscConfig+0x504>)
 8004e28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e2c:	4a3b      	ldr	r2, [pc, #236]	@ (8004f1c <HAL_RCC_OscConfig+0x504>)
 8004e2e:	f023 0301 	bic.w	r3, r3, #1
 8004e32:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e36:	f7fe ff71 	bl	8003d1c <HAL_GetTick>
 8004e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e3c:	e008      	b.n	8004e50 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e3e:	f7fe ff6d 	bl	8003d1c <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d901      	bls.n	8004e50 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e1f5      	b.n	800523c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e50:	4b32      	ldr	r3, [pc, #200]	@ (8004f1c <HAL_RCC_OscConfig+0x504>)
 8004e52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d1ef      	bne.n	8004e3e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0304 	and.w	r3, r3, #4
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	f000 80a6 	beq.w	8004fb8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004e70:	4b2a      	ldr	r3, [pc, #168]	@ (8004f1c <HAL_RCC_OscConfig+0x504>)
 8004e72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d10d      	bne.n	8004e98 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e7c:	4b27      	ldr	r3, [pc, #156]	@ (8004f1c <HAL_RCC_OscConfig+0x504>)
 8004e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e80:	4a26      	ldr	r2, [pc, #152]	@ (8004f1c <HAL_RCC_OscConfig+0x504>)
 8004e82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e86:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e88:	4b24      	ldr	r3, [pc, #144]	@ (8004f1c <HAL_RCC_OscConfig+0x504>)
 8004e8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e90:	60bb      	str	r3, [r7, #8]
 8004e92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e94:	2301      	movs	r3, #1
 8004e96:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e98:	4b21      	ldr	r3, [pc, #132]	@ (8004f20 <HAL_RCC_OscConfig+0x508>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d118      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ea4:	4b1e      	ldr	r3, [pc, #120]	@ (8004f20 <HAL_RCC_OscConfig+0x508>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a1d      	ldr	r2, [pc, #116]	@ (8004f20 <HAL_RCC_OscConfig+0x508>)
 8004eaa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004eae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004eb0:	f7fe ff34 	bl	8003d1c <HAL_GetTick>
 8004eb4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004eb6:	e008      	b.n	8004eca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eb8:	f7fe ff30 	bl	8003d1c <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d901      	bls.n	8004eca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e1b8      	b.n	800523c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004eca:	4b15      	ldr	r3, [pc, #84]	@ (8004f20 <HAL_RCC_OscConfig+0x508>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d0f0      	beq.n	8004eb8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d108      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x4d8>
 8004ede:	4b0f      	ldr	r3, [pc, #60]	@ (8004f1c <HAL_RCC_OscConfig+0x504>)
 8004ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ee4:	4a0d      	ldr	r2, [pc, #52]	@ (8004f1c <HAL_RCC_OscConfig+0x504>)
 8004ee6:	f043 0301 	orr.w	r3, r3, #1
 8004eea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004eee:	e029      	b.n	8004f44 <HAL_RCC_OscConfig+0x52c>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	2b05      	cmp	r3, #5
 8004ef6:	d115      	bne.n	8004f24 <HAL_RCC_OscConfig+0x50c>
 8004ef8:	4b08      	ldr	r3, [pc, #32]	@ (8004f1c <HAL_RCC_OscConfig+0x504>)
 8004efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004efe:	4a07      	ldr	r2, [pc, #28]	@ (8004f1c <HAL_RCC_OscConfig+0x504>)
 8004f00:	f043 0304 	orr.w	r3, r3, #4
 8004f04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004f08:	4b04      	ldr	r3, [pc, #16]	@ (8004f1c <HAL_RCC_OscConfig+0x504>)
 8004f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f0e:	4a03      	ldr	r2, [pc, #12]	@ (8004f1c <HAL_RCC_OscConfig+0x504>)
 8004f10:	f043 0301 	orr.w	r3, r3, #1
 8004f14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004f18:	e014      	b.n	8004f44 <HAL_RCC_OscConfig+0x52c>
 8004f1a:	bf00      	nop
 8004f1c:	40021000 	.word	0x40021000
 8004f20:	40007000 	.word	0x40007000
 8004f24:	4b9d      	ldr	r3, [pc, #628]	@ (800519c <HAL_RCC_OscConfig+0x784>)
 8004f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f2a:	4a9c      	ldr	r2, [pc, #624]	@ (800519c <HAL_RCC_OscConfig+0x784>)
 8004f2c:	f023 0301 	bic.w	r3, r3, #1
 8004f30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004f34:	4b99      	ldr	r3, [pc, #612]	@ (800519c <HAL_RCC_OscConfig+0x784>)
 8004f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f3a:	4a98      	ldr	r2, [pc, #608]	@ (800519c <HAL_RCC_OscConfig+0x784>)
 8004f3c:	f023 0304 	bic.w	r3, r3, #4
 8004f40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d016      	beq.n	8004f7a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f4c:	f7fe fee6 	bl	8003d1c <HAL_GetTick>
 8004f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f52:	e00a      	b.n	8004f6a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f54:	f7fe fee2 	bl	8003d1c <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d901      	bls.n	8004f6a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e168      	b.n	800523c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f6a:	4b8c      	ldr	r3, [pc, #560]	@ (800519c <HAL_RCC_OscConfig+0x784>)
 8004f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f70:	f003 0302 	and.w	r3, r3, #2
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d0ed      	beq.n	8004f54 <HAL_RCC_OscConfig+0x53c>
 8004f78:	e015      	b.n	8004fa6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f7a:	f7fe fecf 	bl	8003d1c <HAL_GetTick>
 8004f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f80:	e00a      	b.n	8004f98 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f82:	f7fe fecb 	bl	8003d1c <HAL_GetTick>
 8004f86:	4602      	mov	r2, r0
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d901      	bls.n	8004f98 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	e151      	b.n	800523c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f98:	4b80      	ldr	r3, [pc, #512]	@ (800519c <HAL_RCC_OscConfig+0x784>)
 8004f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f9e:	f003 0302 	and.w	r3, r3, #2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1ed      	bne.n	8004f82 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fa6:	7ffb      	ldrb	r3, [r7, #31]
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d105      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fac:	4b7b      	ldr	r3, [pc, #492]	@ (800519c <HAL_RCC_OscConfig+0x784>)
 8004fae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fb0:	4a7a      	ldr	r2, [pc, #488]	@ (800519c <HAL_RCC_OscConfig+0x784>)
 8004fb2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004fb6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0320 	and.w	r3, r3, #32
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d03c      	beq.n	800503e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d01c      	beq.n	8005006 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004fcc:	4b73      	ldr	r3, [pc, #460]	@ (800519c <HAL_RCC_OscConfig+0x784>)
 8004fce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004fd2:	4a72      	ldr	r2, [pc, #456]	@ (800519c <HAL_RCC_OscConfig+0x784>)
 8004fd4:	f043 0301 	orr.w	r3, r3, #1
 8004fd8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fdc:	f7fe fe9e 	bl	8003d1c <HAL_GetTick>
 8004fe0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004fe2:	e008      	b.n	8004ff6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004fe4:	f7fe fe9a 	bl	8003d1c <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d901      	bls.n	8004ff6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e122      	b.n	800523c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004ff6:	4b69      	ldr	r3, [pc, #420]	@ (800519c <HAL_RCC_OscConfig+0x784>)
 8004ff8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ffc:	f003 0302 	and.w	r3, r3, #2
 8005000:	2b00      	cmp	r3, #0
 8005002:	d0ef      	beq.n	8004fe4 <HAL_RCC_OscConfig+0x5cc>
 8005004:	e01b      	b.n	800503e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005006:	4b65      	ldr	r3, [pc, #404]	@ (800519c <HAL_RCC_OscConfig+0x784>)
 8005008:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800500c:	4a63      	ldr	r2, [pc, #396]	@ (800519c <HAL_RCC_OscConfig+0x784>)
 800500e:	f023 0301 	bic.w	r3, r3, #1
 8005012:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005016:	f7fe fe81 	bl	8003d1c <HAL_GetTick>
 800501a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800501c:	e008      	b.n	8005030 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800501e:	f7fe fe7d 	bl	8003d1c <HAL_GetTick>
 8005022:	4602      	mov	r2, r0
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	2b02      	cmp	r3, #2
 800502a:	d901      	bls.n	8005030 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e105      	b.n	800523c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005030:	4b5a      	ldr	r3, [pc, #360]	@ (800519c <HAL_RCC_OscConfig+0x784>)
 8005032:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005036:	f003 0302 	and.w	r3, r3, #2
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1ef      	bne.n	800501e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005042:	2b00      	cmp	r3, #0
 8005044:	f000 80f9 	beq.w	800523a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800504c:	2b02      	cmp	r3, #2
 800504e:	f040 80cf 	bne.w	80051f0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005052:	4b52      	ldr	r3, [pc, #328]	@ (800519c <HAL_RCC_OscConfig+0x784>)
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	f003 0203 	and.w	r2, r3, #3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005062:	429a      	cmp	r2, r3
 8005064:	d12c      	bne.n	80050c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005070:	3b01      	subs	r3, #1
 8005072:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005074:	429a      	cmp	r2, r3
 8005076:	d123      	bne.n	80050c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005082:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005084:	429a      	cmp	r2, r3
 8005086:	d11b      	bne.n	80050c0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005092:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005094:	429a      	cmp	r2, r3
 8005096:	d113      	bne.n	80050c0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050a2:	085b      	lsrs	r3, r3, #1
 80050a4:	3b01      	subs	r3, #1
 80050a6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d109      	bne.n	80050c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b6:	085b      	lsrs	r3, r3, #1
 80050b8:	3b01      	subs	r3, #1
 80050ba:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050bc:	429a      	cmp	r2, r3
 80050be:	d071      	beq.n	80051a4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	2b0c      	cmp	r3, #12
 80050c4:	d068      	beq.n	8005198 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80050c6:	4b35      	ldr	r3, [pc, #212]	@ (800519c <HAL_RCC_OscConfig+0x784>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d105      	bne.n	80050de <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80050d2:	4b32      	ldr	r3, [pc, #200]	@ (800519c <HAL_RCC_OscConfig+0x784>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d001      	beq.n	80050e2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e0ac      	b.n	800523c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80050e2:	4b2e      	ldr	r3, [pc, #184]	@ (800519c <HAL_RCC_OscConfig+0x784>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a2d      	ldr	r2, [pc, #180]	@ (800519c <HAL_RCC_OscConfig+0x784>)
 80050e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050ec:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80050ee:	f7fe fe15 	bl	8003d1c <HAL_GetTick>
 80050f2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050f4:	e008      	b.n	8005108 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050f6:	f7fe fe11 	bl	8003d1c <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	2b02      	cmp	r3, #2
 8005102:	d901      	bls.n	8005108 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e099      	b.n	800523c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005108:	4b24      	ldr	r3, [pc, #144]	@ (800519c <HAL_RCC_OscConfig+0x784>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005110:	2b00      	cmp	r3, #0
 8005112:	d1f0      	bne.n	80050f6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005114:	4b21      	ldr	r3, [pc, #132]	@ (800519c <HAL_RCC_OscConfig+0x784>)
 8005116:	68da      	ldr	r2, [r3, #12]
 8005118:	4b21      	ldr	r3, [pc, #132]	@ (80051a0 <HAL_RCC_OscConfig+0x788>)
 800511a:	4013      	ands	r3, r2
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005124:	3a01      	subs	r2, #1
 8005126:	0112      	lsls	r2, r2, #4
 8005128:	4311      	orrs	r1, r2
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800512e:	0212      	lsls	r2, r2, #8
 8005130:	4311      	orrs	r1, r2
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005136:	0852      	lsrs	r2, r2, #1
 8005138:	3a01      	subs	r2, #1
 800513a:	0552      	lsls	r2, r2, #21
 800513c:	4311      	orrs	r1, r2
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005142:	0852      	lsrs	r2, r2, #1
 8005144:	3a01      	subs	r2, #1
 8005146:	0652      	lsls	r2, r2, #25
 8005148:	4311      	orrs	r1, r2
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800514e:	06d2      	lsls	r2, r2, #27
 8005150:	430a      	orrs	r2, r1
 8005152:	4912      	ldr	r1, [pc, #72]	@ (800519c <HAL_RCC_OscConfig+0x784>)
 8005154:	4313      	orrs	r3, r2
 8005156:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005158:	4b10      	ldr	r3, [pc, #64]	@ (800519c <HAL_RCC_OscConfig+0x784>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a0f      	ldr	r2, [pc, #60]	@ (800519c <HAL_RCC_OscConfig+0x784>)
 800515e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005162:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005164:	4b0d      	ldr	r3, [pc, #52]	@ (800519c <HAL_RCC_OscConfig+0x784>)
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	4a0c      	ldr	r2, [pc, #48]	@ (800519c <HAL_RCC_OscConfig+0x784>)
 800516a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800516e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005170:	f7fe fdd4 	bl	8003d1c <HAL_GetTick>
 8005174:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005176:	e008      	b.n	800518a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005178:	f7fe fdd0 	bl	8003d1c <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	2b02      	cmp	r3, #2
 8005184:	d901      	bls.n	800518a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e058      	b.n	800523c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800518a:	4b04      	ldr	r3, [pc, #16]	@ (800519c <HAL_RCC_OscConfig+0x784>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005192:	2b00      	cmp	r3, #0
 8005194:	d0f0      	beq.n	8005178 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005196:	e050      	b.n	800523a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e04f      	b.n	800523c <HAL_RCC_OscConfig+0x824>
 800519c:	40021000 	.word	0x40021000
 80051a0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051a4:	4b27      	ldr	r3, [pc, #156]	@ (8005244 <HAL_RCC_OscConfig+0x82c>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d144      	bne.n	800523a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80051b0:	4b24      	ldr	r3, [pc, #144]	@ (8005244 <HAL_RCC_OscConfig+0x82c>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a23      	ldr	r2, [pc, #140]	@ (8005244 <HAL_RCC_OscConfig+0x82c>)
 80051b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80051ba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80051bc:	4b21      	ldr	r3, [pc, #132]	@ (8005244 <HAL_RCC_OscConfig+0x82c>)
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	4a20      	ldr	r2, [pc, #128]	@ (8005244 <HAL_RCC_OscConfig+0x82c>)
 80051c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80051c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80051c8:	f7fe fda8 	bl	8003d1c <HAL_GetTick>
 80051cc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051ce:	e008      	b.n	80051e2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051d0:	f7fe fda4 	bl	8003d1c <HAL_GetTick>
 80051d4:	4602      	mov	r2, r0
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d901      	bls.n	80051e2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e02c      	b.n	800523c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051e2:	4b18      	ldr	r3, [pc, #96]	@ (8005244 <HAL_RCC_OscConfig+0x82c>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d0f0      	beq.n	80051d0 <HAL_RCC_OscConfig+0x7b8>
 80051ee:	e024      	b.n	800523a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	2b0c      	cmp	r3, #12
 80051f4:	d01f      	beq.n	8005236 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051f6:	4b13      	ldr	r3, [pc, #76]	@ (8005244 <HAL_RCC_OscConfig+0x82c>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a12      	ldr	r2, [pc, #72]	@ (8005244 <HAL_RCC_OscConfig+0x82c>)
 80051fc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005200:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005202:	f7fe fd8b 	bl	8003d1c <HAL_GetTick>
 8005206:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005208:	e008      	b.n	800521c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800520a:	f7fe fd87 	bl	8003d1c <HAL_GetTick>
 800520e:	4602      	mov	r2, r0
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	2b02      	cmp	r3, #2
 8005216:	d901      	bls.n	800521c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005218:	2303      	movs	r3, #3
 800521a:	e00f      	b.n	800523c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800521c:	4b09      	ldr	r3, [pc, #36]	@ (8005244 <HAL_RCC_OscConfig+0x82c>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d1f0      	bne.n	800520a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005228:	4b06      	ldr	r3, [pc, #24]	@ (8005244 <HAL_RCC_OscConfig+0x82c>)
 800522a:	68da      	ldr	r2, [r3, #12]
 800522c:	4905      	ldr	r1, [pc, #20]	@ (8005244 <HAL_RCC_OscConfig+0x82c>)
 800522e:	4b06      	ldr	r3, [pc, #24]	@ (8005248 <HAL_RCC_OscConfig+0x830>)
 8005230:	4013      	ands	r3, r2
 8005232:	60cb      	str	r3, [r1, #12]
 8005234:	e001      	b.n	800523a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e000      	b.n	800523c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800523a:	2300      	movs	r3, #0
}
 800523c:	4618      	mov	r0, r3
 800523e:	3720      	adds	r7, #32
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}
 8005244:	40021000 	.word	0x40021000
 8005248:	feeefffc 	.word	0xfeeefffc

0800524c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d101      	bne.n	8005260 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e0e7      	b.n	8005430 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005260:	4b75      	ldr	r3, [pc, #468]	@ (8005438 <HAL_RCC_ClockConfig+0x1ec>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0307 	and.w	r3, r3, #7
 8005268:	683a      	ldr	r2, [r7, #0]
 800526a:	429a      	cmp	r2, r3
 800526c:	d910      	bls.n	8005290 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800526e:	4b72      	ldr	r3, [pc, #456]	@ (8005438 <HAL_RCC_ClockConfig+0x1ec>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f023 0207 	bic.w	r2, r3, #7
 8005276:	4970      	ldr	r1, [pc, #448]	@ (8005438 <HAL_RCC_ClockConfig+0x1ec>)
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	4313      	orrs	r3, r2
 800527c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800527e:	4b6e      	ldr	r3, [pc, #440]	@ (8005438 <HAL_RCC_ClockConfig+0x1ec>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0307 	and.w	r3, r3, #7
 8005286:	683a      	ldr	r2, [r7, #0]
 8005288:	429a      	cmp	r2, r3
 800528a:	d001      	beq.n	8005290 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e0cf      	b.n	8005430 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 0302 	and.w	r3, r3, #2
 8005298:	2b00      	cmp	r3, #0
 800529a:	d010      	beq.n	80052be <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	689a      	ldr	r2, [r3, #8]
 80052a0:	4b66      	ldr	r3, [pc, #408]	@ (800543c <HAL_RCC_ClockConfig+0x1f0>)
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d908      	bls.n	80052be <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052ac:	4b63      	ldr	r3, [pc, #396]	@ (800543c <HAL_RCC_ClockConfig+0x1f0>)
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	4960      	ldr	r1, [pc, #384]	@ (800543c <HAL_RCC_ClockConfig+0x1f0>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 0301 	and.w	r3, r3, #1
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d04c      	beq.n	8005364 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	2b03      	cmp	r3, #3
 80052d0:	d107      	bne.n	80052e2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052d2:	4b5a      	ldr	r3, [pc, #360]	@ (800543c <HAL_RCC_ClockConfig+0x1f0>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d121      	bne.n	8005322 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e0a6      	b.n	8005430 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d107      	bne.n	80052fa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052ea:	4b54      	ldr	r3, [pc, #336]	@ (800543c <HAL_RCC_ClockConfig+0x1f0>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d115      	bne.n	8005322 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e09a      	b.n	8005430 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d107      	bne.n	8005312 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005302:	4b4e      	ldr	r3, [pc, #312]	@ (800543c <HAL_RCC_ClockConfig+0x1f0>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0302 	and.w	r3, r3, #2
 800530a:	2b00      	cmp	r3, #0
 800530c:	d109      	bne.n	8005322 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e08e      	b.n	8005430 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005312:	4b4a      	ldr	r3, [pc, #296]	@ (800543c <HAL_RCC_ClockConfig+0x1f0>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800531a:	2b00      	cmp	r3, #0
 800531c:	d101      	bne.n	8005322 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e086      	b.n	8005430 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005322:	4b46      	ldr	r3, [pc, #280]	@ (800543c <HAL_RCC_ClockConfig+0x1f0>)
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	f023 0203 	bic.w	r2, r3, #3
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	4943      	ldr	r1, [pc, #268]	@ (800543c <HAL_RCC_ClockConfig+0x1f0>)
 8005330:	4313      	orrs	r3, r2
 8005332:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005334:	f7fe fcf2 	bl	8003d1c <HAL_GetTick>
 8005338:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800533a:	e00a      	b.n	8005352 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800533c:	f7fe fcee 	bl	8003d1c <HAL_GetTick>
 8005340:	4602      	mov	r2, r0
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	f241 3288 	movw	r2, #5000	@ 0x1388
 800534a:	4293      	cmp	r3, r2
 800534c:	d901      	bls.n	8005352 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e06e      	b.n	8005430 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005352:	4b3a      	ldr	r3, [pc, #232]	@ (800543c <HAL_RCC_ClockConfig+0x1f0>)
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	f003 020c 	and.w	r2, r3, #12
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	429a      	cmp	r2, r3
 8005362:	d1eb      	bne.n	800533c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0302 	and.w	r3, r3, #2
 800536c:	2b00      	cmp	r3, #0
 800536e:	d010      	beq.n	8005392 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	689a      	ldr	r2, [r3, #8]
 8005374:	4b31      	ldr	r3, [pc, #196]	@ (800543c <HAL_RCC_ClockConfig+0x1f0>)
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800537c:	429a      	cmp	r2, r3
 800537e:	d208      	bcs.n	8005392 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005380:	4b2e      	ldr	r3, [pc, #184]	@ (800543c <HAL_RCC_ClockConfig+0x1f0>)
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	492b      	ldr	r1, [pc, #172]	@ (800543c <HAL_RCC_ClockConfig+0x1f0>)
 800538e:	4313      	orrs	r3, r2
 8005390:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005392:	4b29      	ldr	r3, [pc, #164]	@ (8005438 <HAL_RCC_ClockConfig+0x1ec>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0307 	and.w	r3, r3, #7
 800539a:	683a      	ldr	r2, [r7, #0]
 800539c:	429a      	cmp	r2, r3
 800539e:	d210      	bcs.n	80053c2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053a0:	4b25      	ldr	r3, [pc, #148]	@ (8005438 <HAL_RCC_ClockConfig+0x1ec>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f023 0207 	bic.w	r2, r3, #7
 80053a8:	4923      	ldr	r1, [pc, #140]	@ (8005438 <HAL_RCC_ClockConfig+0x1ec>)
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053b0:	4b21      	ldr	r3, [pc, #132]	@ (8005438 <HAL_RCC_ClockConfig+0x1ec>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 0307 	and.w	r3, r3, #7
 80053b8:	683a      	ldr	r2, [r7, #0]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d001      	beq.n	80053c2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e036      	b.n	8005430 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0304 	and.w	r3, r3, #4
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d008      	beq.n	80053e0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053ce:	4b1b      	ldr	r3, [pc, #108]	@ (800543c <HAL_RCC_ClockConfig+0x1f0>)
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	4918      	ldr	r1, [pc, #96]	@ (800543c <HAL_RCC_ClockConfig+0x1f0>)
 80053dc:	4313      	orrs	r3, r2
 80053de:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0308 	and.w	r3, r3, #8
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d009      	beq.n	8005400 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053ec:	4b13      	ldr	r3, [pc, #76]	@ (800543c <HAL_RCC_ClockConfig+0x1f0>)
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	691b      	ldr	r3, [r3, #16]
 80053f8:	00db      	lsls	r3, r3, #3
 80053fa:	4910      	ldr	r1, [pc, #64]	@ (800543c <HAL_RCC_ClockConfig+0x1f0>)
 80053fc:	4313      	orrs	r3, r2
 80053fe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005400:	f000 f824 	bl	800544c <HAL_RCC_GetSysClockFreq>
 8005404:	4602      	mov	r2, r0
 8005406:	4b0d      	ldr	r3, [pc, #52]	@ (800543c <HAL_RCC_ClockConfig+0x1f0>)
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	091b      	lsrs	r3, r3, #4
 800540c:	f003 030f 	and.w	r3, r3, #15
 8005410:	490b      	ldr	r1, [pc, #44]	@ (8005440 <HAL_RCC_ClockConfig+0x1f4>)
 8005412:	5ccb      	ldrb	r3, [r1, r3]
 8005414:	f003 031f 	and.w	r3, r3, #31
 8005418:	fa22 f303 	lsr.w	r3, r2, r3
 800541c:	4a09      	ldr	r2, [pc, #36]	@ (8005444 <HAL_RCC_ClockConfig+0x1f8>)
 800541e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005420:	4b09      	ldr	r3, [pc, #36]	@ (8005448 <HAL_RCC_ClockConfig+0x1fc>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4618      	mov	r0, r3
 8005426:	f7fd ff3d 	bl	80032a4 <HAL_InitTick>
 800542a:	4603      	mov	r3, r0
 800542c:	72fb      	strb	r3, [r7, #11]

  return status;
 800542e:	7afb      	ldrb	r3, [r7, #11]
}
 8005430:	4618      	mov	r0, r3
 8005432:	3710      	adds	r7, #16
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	40022000 	.word	0x40022000
 800543c:	40021000 	.word	0x40021000
 8005440:	08010410 	.word	0x08010410
 8005444:	200001bc 	.word	0x200001bc
 8005448:	200001c0 	.word	0x200001c0

0800544c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800544c:	b480      	push	{r7}
 800544e:	b089      	sub	sp, #36	@ 0x24
 8005450:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005452:	2300      	movs	r3, #0
 8005454:	61fb      	str	r3, [r7, #28]
 8005456:	2300      	movs	r3, #0
 8005458:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800545a:	4b3e      	ldr	r3, [pc, #248]	@ (8005554 <HAL_RCC_GetSysClockFreq+0x108>)
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	f003 030c 	and.w	r3, r3, #12
 8005462:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005464:	4b3b      	ldr	r3, [pc, #236]	@ (8005554 <HAL_RCC_GetSysClockFreq+0x108>)
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	f003 0303 	and.w	r3, r3, #3
 800546c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d005      	beq.n	8005480 <HAL_RCC_GetSysClockFreq+0x34>
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	2b0c      	cmp	r3, #12
 8005478:	d121      	bne.n	80054be <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2b01      	cmp	r3, #1
 800547e:	d11e      	bne.n	80054be <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005480:	4b34      	ldr	r3, [pc, #208]	@ (8005554 <HAL_RCC_GetSysClockFreq+0x108>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0308 	and.w	r3, r3, #8
 8005488:	2b00      	cmp	r3, #0
 800548a:	d107      	bne.n	800549c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800548c:	4b31      	ldr	r3, [pc, #196]	@ (8005554 <HAL_RCC_GetSysClockFreq+0x108>)
 800548e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005492:	0a1b      	lsrs	r3, r3, #8
 8005494:	f003 030f 	and.w	r3, r3, #15
 8005498:	61fb      	str	r3, [r7, #28]
 800549a:	e005      	b.n	80054a8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800549c:	4b2d      	ldr	r3, [pc, #180]	@ (8005554 <HAL_RCC_GetSysClockFreq+0x108>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	091b      	lsrs	r3, r3, #4
 80054a2:	f003 030f 	and.w	r3, r3, #15
 80054a6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80054a8:	4a2b      	ldr	r2, [pc, #172]	@ (8005558 <HAL_RCC_GetSysClockFreq+0x10c>)
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054b0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d10d      	bne.n	80054d4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80054bc:	e00a      	b.n	80054d4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	2b04      	cmp	r3, #4
 80054c2:	d102      	bne.n	80054ca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80054c4:	4b25      	ldr	r3, [pc, #148]	@ (800555c <HAL_RCC_GetSysClockFreq+0x110>)
 80054c6:	61bb      	str	r3, [r7, #24]
 80054c8:	e004      	b.n	80054d4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	2b08      	cmp	r3, #8
 80054ce:	d101      	bne.n	80054d4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80054d0:	4b23      	ldr	r3, [pc, #140]	@ (8005560 <HAL_RCC_GetSysClockFreq+0x114>)
 80054d2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	2b0c      	cmp	r3, #12
 80054d8:	d134      	bne.n	8005544 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80054da:	4b1e      	ldr	r3, [pc, #120]	@ (8005554 <HAL_RCC_GetSysClockFreq+0x108>)
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	f003 0303 	and.w	r3, r3, #3
 80054e2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d003      	beq.n	80054f2 <HAL_RCC_GetSysClockFreq+0xa6>
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	2b03      	cmp	r3, #3
 80054ee:	d003      	beq.n	80054f8 <HAL_RCC_GetSysClockFreq+0xac>
 80054f0:	e005      	b.n	80054fe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80054f2:	4b1a      	ldr	r3, [pc, #104]	@ (800555c <HAL_RCC_GetSysClockFreq+0x110>)
 80054f4:	617b      	str	r3, [r7, #20]
      break;
 80054f6:	e005      	b.n	8005504 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80054f8:	4b19      	ldr	r3, [pc, #100]	@ (8005560 <HAL_RCC_GetSysClockFreq+0x114>)
 80054fa:	617b      	str	r3, [r7, #20]
      break;
 80054fc:	e002      	b.n	8005504 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	617b      	str	r3, [r7, #20]
      break;
 8005502:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005504:	4b13      	ldr	r3, [pc, #76]	@ (8005554 <HAL_RCC_GetSysClockFreq+0x108>)
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	091b      	lsrs	r3, r3, #4
 800550a:	f003 0307 	and.w	r3, r3, #7
 800550e:	3301      	adds	r3, #1
 8005510:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005512:	4b10      	ldr	r3, [pc, #64]	@ (8005554 <HAL_RCC_GetSysClockFreq+0x108>)
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	0a1b      	lsrs	r3, r3, #8
 8005518:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800551c:	697a      	ldr	r2, [r7, #20]
 800551e:	fb03 f202 	mul.w	r2, r3, r2
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	fbb2 f3f3 	udiv	r3, r2, r3
 8005528:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800552a:	4b0a      	ldr	r3, [pc, #40]	@ (8005554 <HAL_RCC_GetSysClockFreq+0x108>)
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	0e5b      	lsrs	r3, r3, #25
 8005530:	f003 0303 	and.w	r3, r3, #3
 8005534:	3301      	adds	r3, #1
 8005536:	005b      	lsls	r3, r3, #1
 8005538:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800553a:	697a      	ldr	r2, [r7, #20]
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005542:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005544:	69bb      	ldr	r3, [r7, #24]
}
 8005546:	4618      	mov	r0, r3
 8005548:	3724      	adds	r7, #36	@ 0x24
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	40021000 	.word	0x40021000
 8005558:	08010428 	.word	0x08010428
 800555c:	00f42400 	.word	0x00f42400
 8005560:	01e84800 	.word	0x01e84800

08005564 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005564:	b480      	push	{r7}
 8005566:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005568:	4b03      	ldr	r3, [pc, #12]	@ (8005578 <HAL_RCC_GetHCLKFreq+0x14>)
 800556a:	681b      	ldr	r3, [r3, #0]
}
 800556c:	4618      	mov	r0, r3
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr
 8005576:	bf00      	nop
 8005578:	200001bc 	.word	0x200001bc

0800557c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005580:	f7ff fff0 	bl	8005564 <HAL_RCC_GetHCLKFreq>
 8005584:	4602      	mov	r2, r0
 8005586:	4b06      	ldr	r3, [pc, #24]	@ (80055a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	0a1b      	lsrs	r3, r3, #8
 800558c:	f003 0307 	and.w	r3, r3, #7
 8005590:	4904      	ldr	r1, [pc, #16]	@ (80055a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005592:	5ccb      	ldrb	r3, [r1, r3]
 8005594:	f003 031f 	and.w	r3, r3, #31
 8005598:	fa22 f303 	lsr.w	r3, r2, r3
}
 800559c:	4618      	mov	r0, r3
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	40021000 	.word	0x40021000
 80055a4:	08010420 	.word	0x08010420

080055a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80055ac:	f7ff ffda 	bl	8005564 <HAL_RCC_GetHCLKFreq>
 80055b0:	4602      	mov	r2, r0
 80055b2:	4b06      	ldr	r3, [pc, #24]	@ (80055cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	0adb      	lsrs	r3, r3, #11
 80055b8:	f003 0307 	and.w	r3, r3, #7
 80055bc:	4904      	ldr	r1, [pc, #16]	@ (80055d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80055be:	5ccb      	ldrb	r3, [r1, r3]
 80055c0:	f003 031f 	and.w	r3, r3, #31
 80055c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	40021000 	.word	0x40021000
 80055d0:	08010420 	.word	0x08010420

080055d4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	220f      	movs	r2, #15
 80055e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80055e4:	4b12      	ldr	r3, [pc, #72]	@ (8005630 <HAL_RCC_GetClockConfig+0x5c>)
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	f003 0203 	and.w	r2, r3, #3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80055f0:	4b0f      	ldr	r3, [pc, #60]	@ (8005630 <HAL_RCC_GetClockConfig+0x5c>)
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80055fc:	4b0c      	ldr	r3, [pc, #48]	@ (8005630 <HAL_RCC_GetClockConfig+0x5c>)
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005608:	4b09      	ldr	r3, [pc, #36]	@ (8005630 <HAL_RCC_GetClockConfig+0x5c>)
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	08db      	lsrs	r3, r3, #3
 800560e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005616:	4b07      	ldr	r3, [pc, #28]	@ (8005634 <HAL_RCC_GetClockConfig+0x60>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 0207 	and.w	r2, r3, #7
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	601a      	str	r2, [r3, #0]
}
 8005622:	bf00      	nop
 8005624:	370c      	adds	r7, #12
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr
 800562e:	bf00      	nop
 8005630:	40021000 	.word	0x40021000
 8005634:	40022000 	.word	0x40022000

08005638 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b086      	sub	sp, #24
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005640:	2300      	movs	r3, #0
 8005642:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005644:	4b2a      	ldr	r3, [pc, #168]	@ (80056f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005646:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005648:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800564c:	2b00      	cmp	r3, #0
 800564e:	d003      	beq.n	8005658 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005650:	f7ff f96e 	bl	8004930 <HAL_PWREx_GetVoltageRange>
 8005654:	6178      	str	r0, [r7, #20]
 8005656:	e014      	b.n	8005682 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005658:	4b25      	ldr	r3, [pc, #148]	@ (80056f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800565a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800565c:	4a24      	ldr	r2, [pc, #144]	@ (80056f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800565e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005662:	6593      	str	r3, [r2, #88]	@ 0x58
 8005664:	4b22      	ldr	r3, [pc, #136]	@ (80056f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005666:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005668:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800566c:	60fb      	str	r3, [r7, #12]
 800566e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005670:	f7ff f95e 	bl	8004930 <HAL_PWREx_GetVoltageRange>
 8005674:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005676:	4b1e      	ldr	r3, [pc, #120]	@ (80056f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800567a:	4a1d      	ldr	r2, [pc, #116]	@ (80056f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800567c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005680:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005688:	d10b      	bne.n	80056a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2b80      	cmp	r3, #128	@ 0x80
 800568e:	d919      	bls.n	80056c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2ba0      	cmp	r3, #160	@ 0xa0
 8005694:	d902      	bls.n	800569c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005696:	2302      	movs	r3, #2
 8005698:	613b      	str	r3, [r7, #16]
 800569a:	e013      	b.n	80056c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800569c:	2301      	movs	r3, #1
 800569e:	613b      	str	r3, [r7, #16]
 80056a0:	e010      	b.n	80056c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2b80      	cmp	r3, #128	@ 0x80
 80056a6:	d902      	bls.n	80056ae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80056a8:	2303      	movs	r3, #3
 80056aa:	613b      	str	r3, [r7, #16]
 80056ac:	e00a      	b.n	80056c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2b80      	cmp	r3, #128	@ 0x80
 80056b2:	d102      	bne.n	80056ba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80056b4:	2302      	movs	r3, #2
 80056b6:	613b      	str	r3, [r7, #16]
 80056b8:	e004      	b.n	80056c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2b70      	cmp	r3, #112	@ 0x70
 80056be:	d101      	bne.n	80056c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80056c0:	2301      	movs	r3, #1
 80056c2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80056c4:	4b0b      	ldr	r3, [pc, #44]	@ (80056f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f023 0207 	bic.w	r2, r3, #7
 80056cc:	4909      	ldr	r1, [pc, #36]	@ (80056f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80056d4:	4b07      	ldr	r3, [pc, #28]	@ (80056f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0307 	and.w	r3, r3, #7
 80056dc:	693a      	ldr	r2, [r7, #16]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d001      	beq.n	80056e6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e000      	b.n	80056e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80056e6:	2300      	movs	r3, #0
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3718      	adds	r7, #24
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	40021000 	.word	0x40021000
 80056f4:	40022000 	.word	0x40022000

080056f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b086      	sub	sp, #24
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005700:	2300      	movs	r3, #0
 8005702:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005704:	2300      	movs	r3, #0
 8005706:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005710:	2b00      	cmp	r3, #0
 8005712:	d041      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005718:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800571c:	d02a      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800571e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005722:	d824      	bhi.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005724:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005728:	d008      	beq.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800572a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800572e:	d81e      	bhi.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005730:	2b00      	cmp	r3, #0
 8005732:	d00a      	beq.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005734:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005738:	d010      	beq.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800573a:	e018      	b.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800573c:	4b86      	ldr	r3, [pc, #536]	@ (8005958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	4a85      	ldr	r2, [pc, #532]	@ (8005958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005742:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005746:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005748:	e015      	b.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	3304      	adds	r3, #4
 800574e:	2100      	movs	r1, #0
 8005750:	4618      	mov	r0, r3
 8005752:	f000 facd 	bl	8005cf0 <RCCEx_PLLSAI1_Config>
 8005756:	4603      	mov	r3, r0
 8005758:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800575a:	e00c      	b.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	3320      	adds	r3, #32
 8005760:	2100      	movs	r1, #0
 8005762:	4618      	mov	r0, r3
 8005764:	f000 fbb6 	bl	8005ed4 <RCCEx_PLLSAI2_Config>
 8005768:	4603      	mov	r3, r0
 800576a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800576c:	e003      	b.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	74fb      	strb	r3, [r7, #19]
      break;
 8005772:	e000      	b.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005774:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005776:	7cfb      	ldrb	r3, [r7, #19]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d10b      	bne.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800577c:	4b76      	ldr	r3, [pc, #472]	@ (8005958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800577e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005782:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800578a:	4973      	ldr	r1, [pc, #460]	@ (8005958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800578c:	4313      	orrs	r3, r2
 800578e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005792:	e001      	b.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005794:	7cfb      	ldrb	r3, [r7, #19]
 8005796:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d041      	beq.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057a8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80057ac:	d02a      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80057ae:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80057b2:	d824      	bhi.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 80057b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80057b8:	d008      	beq.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80057ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80057be:	d81e      	bhi.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d00a      	beq.n	80057da <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80057c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80057c8:	d010      	beq.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80057ca:	e018      	b.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80057cc:	4b62      	ldr	r3, [pc, #392]	@ (8005958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	4a61      	ldr	r2, [pc, #388]	@ (8005958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057d6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80057d8:	e015      	b.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	3304      	adds	r3, #4
 80057de:	2100      	movs	r1, #0
 80057e0:	4618      	mov	r0, r3
 80057e2:	f000 fa85 	bl	8005cf0 <RCCEx_PLLSAI1_Config>
 80057e6:	4603      	mov	r3, r0
 80057e8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80057ea:	e00c      	b.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	3320      	adds	r3, #32
 80057f0:	2100      	movs	r1, #0
 80057f2:	4618      	mov	r0, r3
 80057f4:	f000 fb6e 	bl	8005ed4 <RCCEx_PLLSAI2_Config>
 80057f8:	4603      	mov	r3, r0
 80057fa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80057fc:	e003      	b.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	74fb      	strb	r3, [r7, #19]
      break;
 8005802:	e000      	b.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005804:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005806:	7cfb      	ldrb	r3, [r7, #19]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d10b      	bne.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800580c:	4b52      	ldr	r3, [pc, #328]	@ (8005958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800580e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005812:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800581a:	494f      	ldr	r1, [pc, #316]	@ (8005958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800581c:	4313      	orrs	r3, r2
 800581e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005822:	e001      	b.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005824:	7cfb      	ldrb	r3, [r7, #19]
 8005826:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005830:	2b00      	cmp	r3, #0
 8005832:	f000 80a0 	beq.w	8005976 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005836:	2300      	movs	r3, #0
 8005838:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800583a:	4b47      	ldr	r3, [pc, #284]	@ (8005958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800583c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800583e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005842:	2b00      	cmp	r3, #0
 8005844:	d101      	bne.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005846:	2301      	movs	r3, #1
 8005848:	e000      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800584a:	2300      	movs	r3, #0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00d      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005850:	4b41      	ldr	r3, [pc, #260]	@ (8005958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005852:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005854:	4a40      	ldr	r2, [pc, #256]	@ (8005958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005856:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800585a:	6593      	str	r3, [r2, #88]	@ 0x58
 800585c:	4b3e      	ldr	r3, [pc, #248]	@ (8005958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800585e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005860:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005864:	60bb      	str	r3, [r7, #8]
 8005866:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005868:	2301      	movs	r3, #1
 800586a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800586c:	4b3b      	ldr	r3, [pc, #236]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a3a      	ldr	r2, [pc, #232]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005872:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005876:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005878:	f7fe fa50 	bl	8003d1c <HAL_GetTick>
 800587c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800587e:	e009      	b.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005880:	f7fe fa4c 	bl	8003d1c <HAL_GetTick>
 8005884:	4602      	mov	r2, r0
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	2b02      	cmp	r3, #2
 800588c:	d902      	bls.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800588e:	2303      	movs	r3, #3
 8005890:	74fb      	strb	r3, [r7, #19]
        break;
 8005892:	e005      	b.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005894:	4b31      	ldr	r3, [pc, #196]	@ (800595c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800589c:	2b00      	cmp	r3, #0
 800589e:	d0ef      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80058a0:	7cfb      	ldrb	r3, [r7, #19]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d15c      	bne.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80058a6:	4b2c      	ldr	r3, [pc, #176]	@ (8005958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058b0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d01f      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058be:	697a      	ldr	r2, [r7, #20]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d019      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80058c4:	4b24      	ldr	r3, [pc, #144]	@ (8005958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80058d0:	4b21      	ldr	r3, [pc, #132]	@ (8005958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058d6:	4a20      	ldr	r2, [pc, #128]	@ (8005958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80058e0:	4b1d      	ldr	r3, [pc, #116]	@ (8005958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058e6:	4a1c      	ldr	r2, [pc, #112]	@ (8005958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80058f0:	4a19      	ldr	r2, [pc, #100]	@ (8005958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	f003 0301 	and.w	r3, r3, #1
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d016      	beq.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005902:	f7fe fa0b 	bl	8003d1c <HAL_GetTick>
 8005906:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005908:	e00b      	b.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800590a:	f7fe fa07 	bl	8003d1c <HAL_GetTick>
 800590e:	4602      	mov	r2, r0
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005918:	4293      	cmp	r3, r2
 800591a:	d902      	bls.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800591c:	2303      	movs	r3, #3
 800591e:	74fb      	strb	r3, [r7, #19]
            break;
 8005920:	e006      	b.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005922:	4b0d      	ldr	r3, [pc, #52]	@ (8005958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005924:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005928:	f003 0302 	and.w	r3, r3, #2
 800592c:	2b00      	cmp	r3, #0
 800592e:	d0ec      	beq.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005930:	7cfb      	ldrb	r3, [r7, #19]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d10c      	bne.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005936:	4b08      	ldr	r3, [pc, #32]	@ (8005958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005938:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800593c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005946:	4904      	ldr	r1, [pc, #16]	@ (8005958 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005948:	4313      	orrs	r3, r2
 800594a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800594e:	e009      	b.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005950:	7cfb      	ldrb	r3, [r7, #19]
 8005952:	74bb      	strb	r3, [r7, #18]
 8005954:	e006      	b.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005956:	bf00      	nop
 8005958:	40021000 	.word	0x40021000
 800595c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005960:	7cfb      	ldrb	r3, [r7, #19]
 8005962:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005964:	7c7b      	ldrb	r3, [r7, #17]
 8005966:	2b01      	cmp	r3, #1
 8005968:	d105      	bne.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800596a:	4ba6      	ldr	r3, [pc, #664]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800596c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800596e:	4aa5      	ldr	r2, [pc, #660]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005970:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005974:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0301 	and.w	r3, r3, #1
 800597e:	2b00      	cmp	r3, #0
 8005980:	d00a      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005982:	4ba0      	ldr	r3, [pc, #640]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005984:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005988:	f023 0203 	bic.w	r2, r3, #3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005990:	499c      	ldr	r1, [pc, #624]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005992:	4313      	orrs	r3, r2
 8005994:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 0302 	and.w	r3, r3, #2
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00a      	beq.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80059a4:	4b97      	ldr	r3, [pc, #604]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80059a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059aa:	f023 020c 	bic.w	r2, r3, #12
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059b2:	4994      	ldr	r1, [pc, #592]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80059b4:	4313      	orrs	r3, r2
 80059b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 0304 	and.w	r3, r3, #4
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d00a      	beq.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80059c6:	4b8f      	ldr	r3, [pc, #572]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80059c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059cc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059d4:	498b      	ldr	r1, [pc, #556]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80059d6:	4313      	orrs	r3, r2
 80059d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 0308 	and.w	r3, r3, #8
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d00a      	beq.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80059e8:	4b86      	ldr	r3, [pc, #536]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80059ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059ee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059f6:	4983      	ldr	r1, [pc, #524]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80059f8:	4313      	orrs	r3, r2
 80059fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 0310 	and.w	r3, r3, #16
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00a      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005a0a:	4b7e      	ldr	r3, [pc, #504]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a10:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a18:	497a      	ldr	r1, [pc, #488]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 0320 	and.w	r3, r3, #32
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d00a      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a2c:	4b75      	ldr	r3, [pc, #468]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a32:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a3a:	4972      	ldr	r1, [pc, #456]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00a      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a4e:	4b6d      	ldr	r3, [pc, #436]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a54:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a5c:	4969      	ldr	r1, [pc, #420]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d00a      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005a70:	4b64      	ldr	r3, [pc, #400]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a76:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a7e:	4961      	ldr	r1, [pc, #388]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005a80:	4313      	orrs	r3, r2
 8005a82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00a      	beq.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a92:	4b5c      	ldr	r3, [pc, #368]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a98:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005aa0:	4958      	ldr	r1, [pc, #352]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d00a      	beq.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005ab4:	4b53      	ldr	r3, [pc, #332]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005aba:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ac2:	4950      	ldr	r1, [pc, #320]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00a      	beq.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005ad6:	4b4b      	ldr	r3, [pc, #300]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005adc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ae4:	4947      	ldr	r1, [pc, #284]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d00a      	beq.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005af8:	4b42      	ldr	r3, [pc, #264]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005afa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005afe:	f023 0203 	bic.w	r2, r3, #3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b06:	493f      	ldr	r1, [pc, #252]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d028      	beq.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b1a:	4b3a      	ldr	r3, [pc, #232]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b20:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b28:	4936      	ldr	r1, [pc, #216]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b38:	d106      	bne.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b3a:	4b32      	ldr	r3, [pc, #200]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	4a31      	ldr	r2, [pc, #196]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005b40:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b44:	60d3      	str	r3, [r2, #12]
 8005b46:	e011      	b.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b4c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005b50:	d10c      	bne.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	3304      	adds	r3, #4
 8005b56:	2101      	movs	r1, #1
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f000 f8c9 	bl	8005cf0 <RCCEx_PLLSAI1_Config>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005b62:	7cfb      	ldrb	r3, [r7, #19]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d001      	beq.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8005b68:	7cfb      	ldrb	r3, [r7, #19]
 8005b6a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d028      	beq.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005b78:	4b22      	ldr	r3, [pc, #136]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b7e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b86:	491f      	ldr	r1, [pc, #124]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b96:	d106      	bne.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b98:	4b1a      	ldr	r3, [pc, #104]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	4a19      	ldr	r2, [pc, #100]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005b9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ba2:	60d3      	str	r3, [r2, #12]
 8005ba4:	e011      	b.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005baa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005bae:	d10c      	bne.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	3304      	adds	r3, #4
 8005bb4:	2101      	movs	r1, #1
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f000 f89a 	bl	8005cf0 <RCCEx_PLLSAI1_Config>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005bc0:	7cfb      	ldrb	r3, [r7, #19]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d001      	beq.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8005bc6:	7cfb      	ldrb	r3, [r7, #19]
 8005bc8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d02a      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005bd6:	4b0b      	ldr	r3, [pc, #44]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bdc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005be4:	4907      	ldr	r1, [pc, #28]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005be6:	4313      	orrs	r3, r2
 8005be8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005bf0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005bf4:	d108      	bne.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bf6:	4b03      	ldr	r3, [pc, #12]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	4a02      	ldr	r2, [pc, #8]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005bfc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c00:	60d3      	str	r3, [r2, #12]
 8005c02:	e013      	b.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x534>
 8005c04:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c0c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005c10:	d10c      	bne.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	3304      	adds	r3, #4
 8005c16:	2101      	movs	r1, #1
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f000 f869 	bl	8005cf0 <RCCEx_PLLSAI1_Config>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c22:	7cfb      	ldrb	r3, [r7, #19]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d001      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8005c28:	7cfb      	ldrb	r3, [r7, #19]
 8005c2a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d02f      	beq.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005c38:	4b2c      	ldr	r3, [pc, #176]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c3e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c46:	4929      	ldr	r1, [pc, #164]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c56:	d10d      	bne.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	3304      	adds	r3, #4
 8005c5c:	2102      	movs	r1, #2
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f000 f846 	bl	8005cf0 <RCCEx_PLLSAI1_Config>
 8005c64:	4603      	mov	r3, r0
 8005c66:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c68:	7cfb      	ldrb	r3, [r7, #19]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d014      	beq.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8005c6e:	7cfb      	ldrb	r3, [r7, #19]
 8005c70:	74bb      	strb	r3, [r7, #18]
 8005c72:	e011      	b.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c7c:	d10c      	bne.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	3320      	adds	r3, #32
 8005c82:	2102      	movs	r1, #2
 8005c84:	4618      	mov	r0, r3
 8005c86:	f000 f925 	bl	8005ed4 <RCCEx_PLLSAI2_Config>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c8e:	7cfb      	ldrb	r3, [r7, #19]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d001      	beq.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8005c94:	7cfb      	ldrb	r3, [r7, #19]
 8005c96:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d00b      	beq.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005ca4:	4b11      	ldr	r3, [pc, #68]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005caa:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005cb4:	490d      	ldr	r1, [pc, #52]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d00b      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005cc8:	4b08      	ldr	r3, [pc, #32]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cce:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005cd8:	4904      	ldr	r1, [pc, #16]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005ce0:	7cbb      	ldrb	r3, [r7, #18]
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3718      	adds	r7, #24
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop
 8005cec:	40021000 	.word	0x40021000

08005cf0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005cfe:	4b74      	ldr	r3, [pc, #464]	@ (8005ed0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	f003 0303 	and.w	r3, r3, #3
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d018      	beq.n	8005d3c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005d0a:	4b71      	ldr	r3, [pc, #452]	@ (8005ed0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	f003 0203 	and.w	r2, r3, #3
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d10d      	bne.n	8005d36 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
       ||
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d009      	beq.n	8005d36 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005d22:	4b6b      	ldr	r3, [pc, #428]	@ (8005ed0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	091b      	lsrs	r3, r3, #4
 8005d28:	f003 0307 	and.w	r3, r3, #7
 8005d2c:	1c5a      	adds	r2, r3, #1
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	685b      	ldr	r3, [r3, #4]
       ||
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d047      	beq.n	8005dc6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	73fb      	strb	r3, [r7, #15]
 8005d3a:	e044      	b.n	8005dc6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2b03      	cmp	r3, #3
 8005d42:	d018      	beq.n	8005d76 <RCCEx_PLLSAI1_Config+0x86>
 8005d44:	2b03      	cmp	r3, #3
 8005d46:	d825      	bhi.n	8005d94 <RCCEx_PLLSAI1_Config+0xa4>
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d002      	beq.n	8005d52 <RCCEx_PLLSAI1_Config+0x62>
 8005d4c:	2b02      	cmp	r3, #2
 8005d4e:	d009      	beq.n	8005d64 <RCCEx_PLLSAI1_Config+0x74>
 8005d50:	e020      	b.n	8005d94 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005d52:	4b5f      	ldr	r3, [pc, #380]	@ (8005ed0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 0302 	and.w	r3, r3, #2
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d11d      	bne.n	8005d9a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d62:	e01a      	b.n	8005d9a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005d64:	4b5a      	ldr	r3, [pc, #360]	@ (8005ed0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d116      	bne.n	8005d9e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d74:	e013      	b.n	8005d9e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005d76:	4b56      	ldr	r3, [pc, #344]	@ (8005ed0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d10f      	bne.n	8005da2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005d82:	4b53      	ldr	r3, [pc, #332]	@ (8005ed0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d109      	bne.n	8005da2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005d92:	e006      	b.n	8005da2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	73fb      	strb	r3, [r7, #15]
      break;
 8005d98:	e004      	b.n	8005da4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005d9a:	bf00      	nop
 8005d9c:	e002      	b.n	8005da4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005d9e:	bf00      	nop
 8005da0:	e000      	b.n	8005da4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005da2:	bf00      	nop
    }

    if(status == HAL_OK)
 8005da4:	7bfb      	ldrb	r3, [r7, #15]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d10d      	bne.n	8005dc6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005daa:	4b49      	ldr	r3, [pc, #292]	@ (8005ed0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6819      	ldr	r1, [r3, #0]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	3b01      	subs	r3, #1
 8005dbc:	011b      	lsls	r3, r3, #4
 8005dbe:	430b      	orrs	r3, r1
 8005dc0:	4943      	ldr	r1, [pc, #268]	@ (8005ed0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005dc6:	7bfb      	ldrb	r3, [r7, #15]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d17c      	bne.n	8005ec6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005dcc:	4b40      	ldr	r3, [pc, #256]	@ (8005ed0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a3f      	ldr	r2, [pc, #252]	@ (8005ed0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005dd2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005dd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dd8:	f7fd ffa0 	bl	8003d1c <HAL_GetTick>
 8005ddc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005dde:	e009      	b.n	8005df4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005de0:	f7fd ff9c 	bl	8003d1c <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	d902      	bls.n	8005df4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	73fb      	strb	r3, [r7, #15]
        break;
 8005df2:	e005      	b.n	8005e00 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005df4:	4b36      	ldr	r3, [pc, #216]	@ (8005ed0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d1ef      	bne.n	8005de0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005e00:	7bfb      	ldrb	r3, [r7, #15]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d15f      	bne.n	8005ec6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d110      	bne.n	8005e2e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e0c:	4b30      	ldr	r3, [pc, #192]	@ (8005ed0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e0e:	691b      	ldr	r3, [r3, #16]
 8005e10:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8005e14:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	6892      	ldr	r2, [r2, #8]
 8005e1c:	0211      	lsls	r1, r2, #8
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	68d2      	ldr	r2, [r2, #12]
 8005e22:	06d2      	lsls	r2, r2, #27
 8005e24:	430a      	orrs	r2, r1
 8005e26:	492a      	ldr	r1, [pc, #168]	@ (8005ed0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	610b      	str	r3, [r1, #16]
 8005e2c:	e027      	b.n	8005e7e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d112      	bne.n	8005e5a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e34:	4b26      	ldr	r3, [pc, #152]	@ (8005ed0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e36:	691b      	ldr	r3, [r3, #16]
 8005e38:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005e3c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	6892      	ldr	r2, [r2, #8]
 8005e44:	0211      	lsls	r1, r2, #8
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	6912      	ldr	r2, [r2, #16]
 8005e4a:	0852      	lsrs	r2, r2, #1
 8005e4c:	3a01      	subs	r2, #1
 8005e4e:	0552      	lsls	r2, r2, #21
 8005e50:	430a      	orrs	r2, r1
 8005e52:	491f      	ldr	r1, [pc, #124]	@ (8005ed0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e54:	4313      	orrs	r3, r2
 8005e56:	610b      	str	r3, [r1, #16]
 8005e58:	e011      	b.n	8005e7e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e5a:	4b1d      	ldr	r3, [pc, #116]	@ (8005ed0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005e62:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	6892      	ldr	r2, [r2, #8]
 8005e6a:	0211      	lsls	r1, r2, #8
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	6952      	ldr	r2, [r2, #20]
 8005e70:	0852      	lsrs	r2, r2, #1
 8005e72:	3a01      	subs	r2, #1
 8005e74:	0652      	lsls	r2, r2, #25
 8005e76:	430a      	orrs	r2, r1
 8005e78:	4915      	ldr	r1, [pc, #84]	@ (8005ed0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005e7e:	4b14      	ldr	r3, [pc, #80]	@ (8005ed0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a13      	ldr	r2, [pc, #76]	@ (8005ed0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e84:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005e88:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e8a:	f7fd ff47 	bl	8003d1c <HAL_GetTick>
 8005e8e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005e90:	e009      	b.n	8005ea6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e92:	f7fd ff43 	bl	8003d1c <HAL_GetTick>
 8005e96:	4602      	mov	r2, r0
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d902      	bls.n	8005ea6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	73fb      	strb	r3, [r7, #15]
          break;
 8005ea4:	e005      	b.n	8005eb2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005ea6:	4b0a      	ldr	r3, [pc, #40]	@ (8005ed0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d0ef      	beq.n	8005e92 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005eb2:	7bfb      	ldrb	r3, [r7, #15]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d106      	bne.n	8005ec6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005eb8:	4b05      	ldr	r3, [pc, #20]	@ (8005ed0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005eba:	691a      	ldr	r2, [r3, #16]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	699b      	ldr	r3, [r3, #24]
 8005ec0:	4903      	ldr	r1, [pc, #12]	@ (8005ed0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3710      	adds	r7, #16
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}
 8005ed0:	40021000 	.word	0x40021000

08005ed4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005ee2:	4b69      	ldr	r3, [pc, #420]	@ (8006088 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	f003 0303 	and.w	r3, r3, #3
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d018      	beq.n	8005f20 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005eee:	4b66      	ldr	r3, [pc, #408]	@ (8006088 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	f003 0203 	and.w	r2, r3, #3
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d10d      	bne.n	8005f1a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
       ||
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d009      	beq.n	8005f1a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005f06:	4b60      	ldr	r3, [pc, #384]	@ (8006088 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	091b      	lsrs	r3, r3, #4
 8005f0c:	f003 0307 	and.w	r3, r3, #7
 8005f10:	1c5a      	adds	r2, r3, #1
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	685b      	ldr	r3, [r3, #4]
       ||
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d047      	beq.n	8005faa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	73fb      	strb	r3, [r7, #15]
 8005f1e:	e044      	b.n	8005faa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2b03      	cmp	r3, #3
 8005f26:	d018      	beq.n	8005f5a <RCCEx_PLLSAI2_Config+0x86>
 8005f28:	2b03      	cmp	r3, #3
 8005f2a:	d825      	bhi.n	8005f78 <RCCEx_PLLSAI2_Config+0xa4>
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d002      	beq.n	8005f36 <RCCEx_PLLSAI2_Config+0x62>
 8005f30:	2b02      	cmp	r3, #2
 8005f32:	d009      	beq.n	8005f48 <RCCEx_PLLSAI2_Config+0x74>
 8005f34:	e020      	b.n	8005f78 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005f36:	4b54      	ldr	r3, [pc, #336]	@ (8006088 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 0302 	and.w	r3, r3, #2
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d11d      	bne.n	8005f7e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f46:	e01a      	b.n	8005f7e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005f48:	4b4f      	ldr	r3, [pc, #316]	@ (8006088 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d116      	bne.n	8005f82 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f58:	e013      	b.n	8005f82 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005f5a:	4b4b      	ldr	r3, [pc, #300]	@ (8006088 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d10f      	bne.n	8005f86 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005f66:	4b48      	ldr	r3, [pc, #288]	@ (8006088 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d109      	bne.n	8005f86 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005f76:	e006      	b.n	8005f86 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	73fb      	strb	r3, [r7, #15]
      break;
 8005f7c:	e004      	b.n	8005f88 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005f7e:	bf00      	nop
 8005f80:	e002      	b.n	8005f88 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005f82:	bf00      	nop
 8005f84:	e000      	b.n	8005f88 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005f86:	bf00      	nop
    }

    if(status == HAL_OK)
 8005f88:	7bfb      	ldrb	r3, [r7, #15]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d10d      	bne.n	8005faa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005f8e:	4b3e      	ldr	r3, [pc, #248]	@ (8006088 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6819      	ldr	r1, [r3, #0]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	011b      	lsls	r3, r3, #4
 8005fa2:	430b      	orrs	r3, r1
 8005fa4:	4938      	ldr	r1, [pc, #224]	@ (8006088 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005faa:	7bfb      	ldrb	r3, [r7, #15]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d166      	bne.n	800607e <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005fb0:	4b35      	ldr	r3, [pc, #212]	@ (8006088 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a34      	ldr	r2, [pc, #208]	@ (8006088 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005fb6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005fba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fbc:	f7fd feae 	bl	8003d1c <HAL_GetTick>
 8005fc0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005fc2:	e009      	b.n	8005fd8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005fc4:	f7fd feaa 	bl	8003d1c <HAL_GetTick>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	1ad3      	subs	r3, r2, r3
 8005fce:	2b02      	cmp	r3, #2
 8005fd0:	d902      	bls.n	8005fd8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	73fb      	strb	r3, [r7, #15]
        break;
 8005fd6:	e005      	b.n	8005fe4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005fd8:	4b2b      	ldr	r3, [pc, #172]	@ (8006088 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d1ef      	bne.n	8005fc4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005fe4:	7bfb      	ldrb	r3, [r7, #15]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d149      	bne.n	800607e <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d110      	bne.n	8006012 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005ff0:	4b25      	ldr	r3, [pc, #148]	@ (8006088 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005ff2:	695b      	ldr	r3, [r3, #20]
 8005ff4:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8005ff8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	6892      	ldr	r2, [r2, #8]
 8006000:	0211      	lsls	r1, r2, #8
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	68d2      	ldr	r2, [r2, #12]
 8006006:	06d2      	lsls	r2, r2, #27
 8006008:	430a      	orrs	r2, r1
 800600a:	491f      	ldr	r1, [pc, #124]	@ (8006088 <RCCEx_PLLSAI2_Config+0x1b4>)
 800600c:	4313      	orrs	r3, r2
 800600e:	614b      	str	r3, [r1, #20]
 8006010:	e011      	b.n	8006036 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006012:	4b1d      	ldr	r3, [pc, #116]	@ (8006088 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006014:	695b      	ldr	r3, [r3, #20]
 8006016:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800601a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	6892      	ldr	r2, [r2, #8]
 8006022:	0211      	lsls	r1, r2, #8
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	6912      	ldr	r2, [r2, #16]
 8006028:	0852      	lsrs	r2, r2, #1
 800602a:	3a01      	subs	r2, #1
 800602c:	0652      	lsls	r2, r2, #25
 800602e:	430a      	orrs	r2, r1
 8006030:	4915      	ldr	r1, [pc, #84]	@ (8006088 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006032:	4313      	orrs	r3, r2
 8006034:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006036:	4b14      	ldr	r3, [pc, #80]	@ (8006088 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a13      	ldr	r2, [pc, #76]	@ (8006088 <RCCEx_PLLSAI2_Config+0x1b4>)
 800603c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006040:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006042:	f7fd fe6b 	bl	8003d1c <HAL_GetTick>
 8006046:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006048:	e009      	b.n	800605e <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800604a:	f7fd fe67 	bl	8003d1c <HAL_GetTick>
 800604e:	4602      	mov	r2, r0
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	1ad3      	subs	r3, r2, r3
 8006054:	2b02      	cmp	r3, #2
 8006056:	d902      	bls.n	800605e <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8006058:	2303      	movs	r3, #3
 800605a:	73fb      	strb	r3, [r7, #15]
          break;
 800605c:	e005      	b.n	800606a <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800605e:	4b0a      	ldr	r3, [pc, #40]	@ (8006088 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006066:	2b00      	cmp	r3, #0
 8006068:	d0ef      	beq.n	800604a <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800606a:	7bfb      	ldrb	r3, [r7, #15]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d106      	bne.n	800607e <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006070:	4b05      	ldr	r3, [pc, #20]	@ (8006088 <RCCEx_PLLSAI2_Config+0x1b4>)
 8006072:	695a      	ldr	r2, [r3, #20]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	695b      	ldr	r3, [r3, #20]
 8006078:	4903      	ldr	r1, [pc, #12]	@ (8006088 <RCCEx_PLLSAI2_Config+0x1b4>)
 800607a:	4313      	orrs	r3, r2
 800607c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800607e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006080:	4618      	mov	r0, r3
 8006082:	3710      	adds	r7, #16
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}
 8006088:	40021000 	.word	0x40021000

0800608c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d101      	bne.n	800609e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e095      	b.n	80061ca <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d108      	bne.n	80060b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80060ae:	d009      	beq.n	80060c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	61da      	str	r2, [r3, #28]
 80060b6:	e005      	b.n	80060c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d106      	bne.n	80060e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f7fd f842 	bl	8003168 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2202      	movs	r2, #2
 80060e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060fa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006104:	d902      	bls.n	800610c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006106:	2300      	movs	r3, #0
 8006108:	60fb      	str	r3, [r7, #12]
 800610a:	e002      	b.n	8006112 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800610c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006110:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800611a:	d007      	beq.n	800612c <HAL_SPI_Init+0xa0>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006124:	d002      	beq.n	800612c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800613c:	431a      	orrs	r2, r3
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	f003 0302 	and.w	r3, r3, #2
 8006146:	431a      	orrs	r2, r3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	695b      	ldr	r3, [r3, #20]
 800614c:	f003 0301 	and.w	r3, r3, #1
 8006150:	431a      	orrs	r2, r3
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	699b      	ldr	r3, [r3, #24]
 8006156:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800615a:	431a      	orrs	r2, r3
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	69db      	ldr	r3, [r3, #28]
 8006160:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006164:	431a      	orrs	r2, r3
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a1b      	ldr	r3, [r3, #32]
 800616a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800616e:	ea42 0103 	orr.w	r1, r2, r3
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006176:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	430a      	orrs	r2, r1
 8006180:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	699b      	ldr	r3, [r3, #24]
 8006186:	0c1b      	lsrs	r3, r3, #16
 8006188:	f003 0204 	and.w	r2, r3, #4
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006190:	f003 0310 	and.w	r3, r3, #16
 8006194:	431a      	orrs	r2, r3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800619a:	f003 0308 	and.w	r3, r3, #8
 800619e:	431a      	orrs	r2, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80061a8:	ea42 0103 	orr.w	r1, r2, r3
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	430a      	orrs	r2, r1
 80061b8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3710      	adds	r7, #16
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}

080061d2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061d2:	b580      	push	{r7, lr}
 80061d4:	b088      	sub	sp, #32
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	60f8      	str	r0, [r7, #12]
 80061da:	60b9      	str	r1, [r7, #8]
 80061dc:	603b      	str	r3, [r7, #0]
 80061de:	4613      	mov	r3, r2
 80061e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80061e2:	2300      	movs	r3, #0
 80061e4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d101      	bne.n	80061f4 <HAL_SPI_Transmit+0x22>
 80061f0:	2302      	movs	r3, #2
 80061f2:	e15f      	b.n	80064b4 <HAL_SPI_Transmit+0x2e2>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061fc:	f7fd fd8e 	bl	8003d1c <HAL_GetTick>
 8006200:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006202:	88fb      	ldrh	r3, [r7, #6]
 8006204:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800620c:	b2db      	uxtb	r3, r3
 800620e:	2b01      	cmp	r3, #1
 8006210:	d002      	beq.n	8006218 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006212:	2302      	movs	r3, #2
 8006214:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006216:	e148      	b.n	80064aa <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d002      	beq.n	8006224 <HAL_SPI_Transmit+0x52>
 800621e:	88fb      	ldrh	r3, [r7, #6]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d102      	bne.n	800622a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006228:	e13f      	b.n	80064aa <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2203      	movs	r2, #3
 800622e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2200      	movs	r2, #0
 8006236:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	68ba      	ldr	r2, [r7, #8]
 800623c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	88fa      	ldrh	r2, [r7, #6]
 8006242:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	88fa      	ldrh	r2, [r7, #6]
 8006248:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2200      	movs	r2, #0
 8006254:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2200      	movs	r2, #0
 800625c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2200      	movs	r2, #0
 800626a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006274:	d10f      	bne.n	8006296 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006284:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006294:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062a0:	2b40      	cmp	r3, #64	@ 0x40
 80062a2:	d007      	beq.n	80062b4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80062b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80062bc:	d94f      	bls.n	800635e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d002      	beq.n	80062cc <HAL_SPI_Transmit+0xfa>
 80062c6:	8afb      	ldrh	r3, [r7, #22]
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d142      	bne.n	8006352 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062d0:	881a      	ldrh	r2, [r3, #0]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062dc:	1c9a      	adds	r2, r3, #2
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	3b01      	subs	r3, #1
 80062ea:	b29a      	uxth	r2, r3
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80062f0:	e02f      	b.n	8006352 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	f003 0302 	and.w	r3, r3, #2
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	d112      	bne.n	8006326 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006304:	881a      	ldrh	r2, [r3, #0]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006310:	1c9a      	adds	r2, r3, #2
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800631a:	b29b      	uxth	r3, r3
 800631c:	3b01      	subs	r3, #1
 800631e:	b29a      	uxth	r2, r3
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006324:	e015      	b.n	8006352 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006326:	f7fd fcf9 	bl	8003d1c <HAL_GetTick>
 800632a:	4602      	mov	r2, r0
 800632c:	69bb      	ldr	r3, [r7, #24]
 800632e:	1ad3      	subs	r3, r2, r3
 8006330:	683a      	ldr	r2, [r7, #0]
 8006332:	429a      	cmp	r2, r3
 8006334:	d803      	bhi.n	800633e <HAL_SPI_Transmit+0x16c>
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800633c:	d102      	bne.n	8006344 <HAL_SPI_Transmit+0x172>
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d106      	bne.n	8006352 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8006344:	2303      	movs	r3, #3
 8006346:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006350:	e0ab      	b.n	80064aa <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006356:	b29b      	uxth	r3, r3
 8006358:	2b00      	cmp	r3, #0
 800635a:	d1ca      	bne.n	80062f2 <HAL_SPI_Transmit+0x120>
 800635c:	e080      	b.n	8006460 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d002      	beq.n	800636c <HAL_SPI_Transmit+0x19a>
 8006366:	8afb      	ldrh	r3, [r7, #22]
 8006368:	2b01      	cmp	r3, #1
 800636a:	d174      	bne.n	8006456 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006370:	b29b      	uxth	r3, r3
 8006372:	2b01      	cmp	r3, #1
 8006374:	d912      	bls.n	800639c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800637a:	881a      	ldrh	r2, [r3, #0]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006386:	1c9a      	adds	r2, r3, #2
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006390:	b29b      	uxth	r3, r3
 8006392:	3b02      	subs	r3, #2
 8006394:	b29a      	uxth	r2, r3
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800639a:	e05c      	b.n	8006456 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	330c      	adds	r3, #12
 80063a6:	7812      	ldrb	r2, [r2, #0]
 80063a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ae:	1c5a      	adds	r2, r3, #1
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	3b01      	subs	r3, #1
 80063bc:	b29a      	uxth	r2, r3
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80063c2:	e048      	b.n	8006456 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	f003 0302 	and.w	r3, r3, #2
 80063ce:	2b02      	cmp	r3, #2
 80063d0:	d12b      	bne.n	800642a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d912      	bls.n	8006402 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063e0:	881a      	ldrh	r2, [r3, #0]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ec:	1c9a      	adds	r2, r3, #2
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	3b02      	subs	r3, #2
 80063fa:	b29a      	uxth	r2, r3
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006400:	e029      	b.n	8006456 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	330c      	adds	r3, #12
 800640c:	7812      	ldrb	r2, [r2, #0]
 800640e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006414:	1c5a      	adds	r2, r3, #1
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800641e:	b29b      	uxth	r3, r3
 8006420:	3b01      	subs	r3, #1
 8006422:	b29a      	uxth	r2, r3
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006428:	e015      	b.n	8006456 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800642a:	f7fd fc77 	bl	8003d1c <HAL_GetTick>
 800642e:	4602      	mov	r2, r0
 8006430:	69bb      	ldr	r3, [r7, #24]
 8006432:	1ad3      	subs	r3, r2, r3
 8006434:	683a      	ldr	r2, [r7, #0]
 8006436:	429a      	cmp	r2, r3
 8006438:	d803      	bhi.n	8006442 <HAL_SPI_Transmit+0x270>
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006440:	d102      	bne.n	8006448 <HAL_SPI_Transmit+0x276>
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d106      	bne.n	8006456 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8006448:	2303      	movs	r3, #3
 800644a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2201      	movs	r2, #1
 8006450:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006454:	e029      	b.n	80064aa <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800645a:	b29b      	uxth	r3, r3
 800645c:	2b00      	cmp	r3, #0
 800645e:	d1b1      	bne.n	80063c4 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006460:	69ba      	ldr	r2, [r7, #24]
 8006462:	6839      	ldr	r1, [r7, #0]
 8006464:	68f8      	ldr	r0, [r7, #12]
 8006466:	f000 fe95 	bl	8007194 <SPI_EndRxTxTransaction>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d002      	beq.n	8006476 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2220      	movs	r2, #32
 8006474:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d10a      	bne.n	8006494 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800647e:	2300      	movs	r3, #0
 8006480:	613b      	str	r3, [r7, #16]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	613b      	str	r3, [r7, #16]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	613b      	str	r3, [r7, #16]
 8006492:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006498:	2b00      	cmp	r3, #0
 800649a:	d002      	beq.n	80064a2 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	77fb      	strb	r3, [r7, #31]
 80064a0:	e003      	b.n	80064aa <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2201      	movs	r2, #1
 80064a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80064b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3720      	adds	r7, #32
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b08a      	sub	sp, #40	@ 0x28
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	607a      	str	r2, [r7, #4]
 80064c8:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80064ca:	2301      	movs	r3, #1
 80064cc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80064ce:	2300      	movs	r3, #0
 80064d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d101      	bne.n	80064e2 <HAL_SPI_TransmitReceive+0x26>
 80064de:	2302      	movs	r3, #2
 80064e0:	e20a      	b.n	80068f8 <HAL_SPI_TransmitReceive+0x43c>
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2201      	movs	r2, #1
 80064e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064ea:	f7fd fc17 	bl	8003d1c <HAL_GetTick>
 80064ee:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80064f6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80064fe:	887b      	ldrh	r3, [r7, #2]
 8006500:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006502:	887b      	ldrh	r3, [r7, #2]
 8006504:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006506:	7efb      	ldrb	r3, [r7, #27]
 8006508:	2b01      	cmp	r3, #1
 800650a:	d00e      	beq.n	800652a <HAL_SPI_TransmitReceive+0x6e>
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006512:	d106      	bne.n	8006522 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d102      	bne.n	8006522 <HAL_SPI_TransmitReceive+0x66>
 800651c:	7efb      	ldrb	r3, [r7, #27]
 800651e:	2b04      	cmp	r3, #4
 8006520:	d003      	beq.n	800652a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006522:	2302      	movs	r3, #2
 8006524:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8006528:	e1e0      	b.n	80068ec <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d005      	beq.n	800653c <HAL_SPI_TransmitReceive+0x80>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d002      	beq.n	800653c <HAL_SPI_TransmitReceive+0x80>
 8006536:	887b      	ldrh	r3, [r7, #2]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d103      	bne.n	8006544 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8006542:	e1d3      	b.n	80068ec <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800654a:	b2db      	uxtb	r3, r3
 800654c:	2b04      	cmp	r3, #4
 800654e:	d003      	beq.n	8006558 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2205      	movs	r2, #5
 8006554:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2200      	movs	r2, #0
 800655c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	887a      	ldrh	r2, [r7, #2]
 8006568:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	887a      	ldrh	r2, [r7, #2]
 8006570:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	68ba      	ldr	r2, [r7, #8]
 8006578:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	887a      	ldrh	r2, [r7, #2]
 800657e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	887a      	ldrh	r2, [r7, #2]
 8006584:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2200      	movs	r2, #0
 800658a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2200      	movs	r2, #0
 8006590:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800659a:	d802      	bhi.n	80065a2 <HAL_SPI_TransmitReceive+0xe6>
 800659c:	8a3b      	ldrh	r3, [r7, #16]
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d908      	bls.n	80065b4 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	685a      	ldr	r2, [r3, #4]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80065b0:	605a      	str	r2, [r3, #4]
 80065b2:	e007      	b.n	80065c4 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	685a      	ldr	r2, [r3, #4]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80065c2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065ce:	2b40      	cmp	r3, #64	@ 0x40
 80065d0:	d007      	beq.n	80065e2 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80065e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80065ea:	f240 8081 	bls.w	80066f0 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d002      	beq.n	80065fc <HAL_SPI_TransmitReceive+0x140>
 80065f6:	8a7b      	ldrh	r3, [r7, #18]
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d16d      	bne.n	80066d8 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006600:	881a      	ldrh	r2, [r3, #0]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800660c:	1c9a      	adds	r2, r3, #2
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006616:	b29b      	uxth	r3, r3
 8006618:	3b01      	subs	r3, #1
 800661a:	b29a      	uxth	r2, r3
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006620:	e05a      	b.n	80066d8 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	f003 0302 	and.w	r3, r3, #2
 800662c:	2b02      	cmp	r3, #2
 800662e:	d11b      	bne.n	8006668 <HAL_SPI_TransmitReceive+0x1ac>
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006634:	b29b      	uxth	r3, r3
 8006636:	2b00      	cmp	r3, #0
 8006638:	d016      	beq.n	8006668 <HAL_SPI_TransmitReceive+0x1ac>
 800663a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800663c:	2b01      	cmp	r3, #1
 800663e:	d113      	bne.n	8006668 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006644:	881a      	ldrh	r2, [r3, #0]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006650:	1c9a      	adds	r2, r3, #2
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800665a:	b29b      	uxth	r3, r3
 800665c:	3b01      	subs	r3, #1
 800665e:	b29a      	uxth	r2, r3
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006664:	2300      	movs	r3, #0
 8006666:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	f003 0301 	and.w	r3, r3, #1
 8006672:	2b01      	cmp	r3, #1
 8006674:	d11c      	bne.n	80066b0 <HAL_SPI_TransmitReceive+0x1f4>
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800667c:	b29b      	uxth	r3, r3
 800667e:	2b00      	cmp	r3, #0
 8006680:	d016      	beq.n	80066b0 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	68da      	ldr	r2, [r3, #12]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800668c:	b292      	uxth	r2, r2
 800668e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006694:	1c9a      	adds	r2, r3, #2
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	3b01      	subs	r3, #1
 80066a4:	b29a      	uxth	r2, r3
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80066ac:	2301      	movs	r3, #1
 80066ae:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80066b0:	f7fd fb34 	bl	8003d1c <HAL_GetTick>
 80066b4:	4602      	mov	r2, r0
 80066b6:	69fb      	ldr	r3, [r7, #28]
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066bc:	429a      	cmp	r2, r3
 80066be:	d80b      	bhi.n	80066d8 <HAL_SPI_TransmitReceive+0x21c>
 80066c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066c6:	d007      	beq.n	80066d8 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80066c8:	2303      	movs	r3, #3
 80066ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2201      	movs	r2, #1
 80066d2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80066d6:	e109      	b.n	80068ec <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80066dc:	b29b      	uxth	r3, r3
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d19f      	bne.n	8006622 <HAL_SPI_TransmitReceive+0x166>
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d199      	bne.n	8006622 <HAL_SPI_TransmitReceive+0x166>
 80066ee:	e0e3      	b.n	80068b8 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d003      	beq.n	8006700 <HAL_SPI_TransmitReceive+0x244>
 80066f8:	8a7b      	ldrh	r3, [r7, #18]
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	f040 80cf 	bne.w	800689e <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006704:	b29b      	uxth	r3, r3
 8006706:	2b01      	cmp	r3, #1
 8006708:	d912      	bls.n	8006730 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800670e:	881a      	ldrh	r2, [r3, #0]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800671a:	1c9a      	adds	r2, r3, #2
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006724:	b29b      	uxth	r3, r3
 8006726:	3b02      	subs	r3, #2
 8006728:	b29a      	uxth	r2, r3
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800672e:	e0b6      	b.n	800689e <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	330c      	adds	r3, #12
 800673a:	7812      	ldrb	r2, [r2, #0]
 800673c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006742:	1c5a      	adds	r2, r3, #1
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800674c:	b29b      	uxth	r3, r3
 800674e:	3b01      	subs	r3, #1
 8006750:	b29a      	uxth	r2, r3
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006756:	e0a2      	b.n	800689e <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	f003 0302 	and.w	r3, r3, #2
 8006762:	2b02      	cmp	r3, #2
 8006764:	d134      	bne.n	80067d0 <HAL_SPI_TransmitReceive+0x314>
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800676a:	b29b      	uxth	r3, r3
 800676c:	2b00      	cmp	r3, #0
 800676e:	d02f      	beq.n	80067d0 <HAL_SPI_TransmitReceive+0x314>
 8006770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006772:	2b01      	cmp	r3, #1
 8006774:	d12c      	bne.n	80067d0 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800677a:	b29b      	uxth	r3, r3
 800677c:	2b01      	cmp	r3, #1
 800677e:	d912      	bls.n	80067a6 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006784:	881a      	ldrh	r2, [r3, #0]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006790:	1c9a      	adds	r2, r3, #2
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800679a:	b29b      	uxth	r3, r3
 800679c:	3b02      	subs	r3, #2
 800679e:	b29a      	uxth	r2, r3
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80067a4:	e012      	b.n	80067cc <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	330c      	adds	r3, #12
 80067b0:	7812      	ldrb	r2, [r2, #0]
 80067b2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067b8:	1c5a      	adds	r2, r3, #1
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	3b01      	subs	r3, #1
 80067c6:	b29a      	uxth	r2, r3
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80067cc:	2300      	movs	r3, #0
 80067ce:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	f003 0301 	and.w	r3, r3, #1
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d148      	bne.n	8006870 <HAL_SPI_TransmitReceive+0x3b4>
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d042      	beq.n	8006870 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d923      	bls.n	800683e <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	68da      	ldr	r2, [r3, #12]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006800:	b292      	uxth	r2, r2
 8006802:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006808:	1c9a      	adds	r2, r3, #2
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006814:	b29b      	uxth	r3, r3
 8006816:	3b02      	subs	r3, #2
 8006818:	b29a      	uxth	r2, r3
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006826:	b29b      	uxth	r3, r3
 8006828:	2b01      	cmp	r3, #1
 800682a:	d81f      	bhi.n	800686c <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	685a      	ldr	r2, [r3, #4]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800683a:	605a      	str	r2, [r3, #4]
 800683c:	e016      	b.n	800686c <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f103 020c 	add.w	r2, r3, #12
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800684a:	7812      	ldrb	r2, [r2, #0]
 800684c:	b2d2      	uxtb	r2, r2
 800684e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006854:	1c5a      	adds	r2, r3, #1
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006860:	b29b      	uxth	r3, r3
 8006862:	3b01      	subs	r3, #1
 8006864:	b29a      	uxth	r2, r3
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800686c:	2301      	movs	r3, #1
 800686e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006870:	f7fd fa54 	bl	8003d1c <HAL_GetTick>
 8006874:	4602      	mov	r2, r0
 8006876:	69fb      	ldr	r3, [r7, #28]
 8006878:	1ad3      	subs	r3, r2, r3
 800687a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800687c:	429a      	cmp	r2, r3
 800687e:	d803      	bhi.n	8006888 <HAL_SPI_TransmitReceive+0x3cc>
 8006880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006886:	d102      	bne.n	800688e <HAL_SPI_TransmitReceive+0x3d2>
 8006888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800688a:	2b00      	cmp	r3, #0
 800688c:	d107      	bne.n	800689e <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800688e:	2303      	movs	r3, #3
 8006890:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800689c:	e026      	b.n	80068ec <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	f47f af57 	bne.w	8006758 <HAL_SPI_TransmitReceive+0x29c>
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	f47f af50 	bne.w	8006758 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80068b8:	69fa      	ldr	r2, [r7, #28]
 80068ba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80068bc:	68f8      	ldr	r0, [r7, #12]
 80068be:	f000 fc69 	bl	8007194 <SPI_EndRxTxTransaction>
 80068c2:	4603      	mov	r3, r0
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d005      	beq.n	80068d4 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2220      	movs	r2, #32
 80068d2:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d003      	beq.n	80068e4 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068e2:	e003      	b.n	80068ec <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80068f4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3728      	adds	r7, #40	@ 0x28
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}

08006900 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b086      	sub	sp, #24
 8006904:	af00      	add	r7, sp, #0
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	60b9      	str	r1, [r7, #8]
 800690a:	4613      	mov	r3, r2
 800690c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800690e:	2300      	movs	r3, #0
 8006910:	75fb      	strb	r3, [r7, #23]


  if (hspi->State != HAL_SPI_STATE_READY)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006918:	b2db      	uxtb	r3, r3
 800691a:	2b01      	cmp	r3, #1
 800691c:	d002      	beq.n	8006924 <HAL_SPI_Receive_IT+0x24>
  {
    errorcode = HAL_BUSY;
 800691e:	2302      	movs	r3, #2
 8006920:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006922:	e092      	b.n	8006a4a <HAL_SPI_Receive_IT+0x14a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d110      	bne.n	800694e <HAL_SPI_Receive_IT+0x4e>
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006934:	d10b      	bne.n	800694e <HAL_SPI_Receive_IT+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2204      	movs	r2, #4
 800693a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800693e:	88fb      	ldrh	r3, [r7, #6]
 8006940:	68ba      	ldr	r2, [r7, #8]
 8006942:	68b9      	ldr	r1, [r7, #8]
 8006944:	68f8      	ldr	r0, [r7, #12]
 8006946:	f000 f889 	bl	8006a5c <HAL_SPI_TransmitReceive_IT>
 800694a:	4603      	mov	r3, r0
 800694c:	e07e      	b.n	8006a4c <HAL_SPI_Receive_IT+0x14c>
  }


  if ((pData == NULL) || (Size == 0U))
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d002      	beq.n	800695a <HAL_SPI_Receive_IT+0x5a>
 8006954:	88fb      	ldrh	r3, [r7, #6]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d102      	bne.n	8006960 <HAL_SPI_Receive_IT+0x60>
  {
    errorcode = HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800695e:	e074      	b.n	8006a4a <HAL_SPI_Receive_IT+0x14a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006966:	2b01      	cmp	r3, #1
 8006968:	d101      	bne.n	800696e <HAL_SPI_Receive_IT+0x6e>
 800696a:	2302      	movs	r3, #2
 800696c:	e06e      	b.n	8006a4c <HAL_SPI_Receive_IT+0x14c>
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2201      	movs	r2, #1
 8006972:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2204      	movs	r2, #4
 800697a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2200      	movs	r2, #0
 8006982:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	68ba      	ldr	r2, [r7, #8]
 8006988:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	88fa      	ldrh	r2, [r7, #6]
 800698e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	88fa      	ldrh	r2, [r7, #6]
 8006996:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2200      	movs	r2, #0
 800699e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2200      	movs	r2, #0
 80069a4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2200      	movs	r2, #0
 80069aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2200      	movs	r2, #0
 80069b0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80069ba:	d90b      	bls.n	80069d4 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	685a      	ldr	r2, [r3, #4]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80069ca:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	4a21      	ldr	r2, [pc, #132]	@ (8006a54 <HAL_SPI_Receive_IT+0x154>)
 80069d0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80069d2:	e00a      	b.n	80069ea <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	685a      	ldr	r2, [r3, #4]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80069e2:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	4a1c      	ldr	r2, [pc, #112]	@ (8006a58 <HAL_SPI_Receive_IT+0x158>)
 80069e8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069f2:	d10f      	bne.n	8006a14 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a02:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006a12:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a1e:	2b40      	cmp	r3, #64	@ 0x40
 8006a20:	d007      	beq.n	8006a32 <HAL_SPI_Receive_IT+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	681a      	ldr	r2, [r3, #0]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a30:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2200      	movs	r2, #0
 8006a36:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	685a      	ldr	r2, [r3, #4]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8006a48:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8006a4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3718      	adds	r7, #24
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}
 8006a54:	08006e5b 	.word	0x08006e5b
 8006a58:	08006e0b 	.word	0x08006e0b

08006a5c <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b087      	sub	sp, #28
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	607a      	str	r2, [r7, #4]
 8006a68:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006a74:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006a7c:	7dbb      	ldrb	r3, [r7, #22]
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d00d      	beq.n	8006a9e <HAL_SPI_TransmitReceive_IT+0x42>
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a88:	d106      	bne.n	8006a98 <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d102      	bne.n	8006a98 <HAL_SPI_TransmitReceive_IT+0x3c>
 8006a92:	7dbb      	ldrb	r3, [r7, #22]
 8006a94:	2b04      	cmp	r3, #4
 8006a96:	d002      	beq.n	8006a9e <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 8006a98:	2302      	movs	r3, #2
 8006a9a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006a9c:	e07d      	b.n	8006b9a <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d005      	beq.n	8006ab0 <HAL_SPI_TransmitReceive_IT+0x54>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d002      	beq.n	8006ab0 <HAL_SPI_TransmitReceive_IT+0x54>
 8006aaa:	887b      	ldrh	r3, [r7, #2]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d102      	bne.n	8006ab6 <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006ab4:	e071      	b.n	8006b9a <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d101      	bne.n	8006ac4 <HAL_SPI_TransmitReceive_IT+0x68>
 8006ac0:	2302      	movs	r3, #2
 8006ac2:	e06b      	b.n	8006b9c <HAL_SPI_TransmitReceive_IT+0x140>
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	2b04      	cmp	r3, #4
 8006ad6:	d003      	beq.n	8006ae0 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2205      	movs	r2, #5
 8006adc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	68ba      	ldr	r2, [r7, #8]
 8006aea:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	887a      	ldrh	r2, [r7, #2]
 8006af0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	887a      	ldrh	r2, [r7, #2]
 8006af6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	887a      	ldrh	r2, [r7, #2]
 8006b02:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	887a      	ldrh	r2, [r7, #2]
 8006b0a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006b16:	d906      	bls.n	8006b26 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	4a23      	ldr	r2, [pc, #140]	@ (8006ba8 <HAL_SPI_TransmitReceive_IT+0x14c>)
 8006b1c:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	4a22      	ldr	r2, [pc, #136]	@ (8006bac <HAL_SPI_TransmitReceive_IT+0x150>)
 8006b22:	651a      	str	r2, [r3, #80]	@ 0x50
 8006b24:	e005      	b.n	8006b32 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	4a21      	ldr	r2, [pc, #132]	@ (8006bb0 <HAL_SPI_TransmitReceive_IT+0x154>)
 8006b2a:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	4a21      	ldr	r2, [pc, #132]	@ (8006bb4 <HAL_SPI_TransmitReceive_IT+0x158>)
 8006b30:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	68db      	ldr	r3, [r3, #12]
 8006b36:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006b3a:	d802      	bhi.n	8006b42 <HAL_SPI_TransmitReceive_IT+0xe6>
 8006b3c:	887b      	ldrh	r3, [r7, #2]
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d908      	bls.n	8006b54 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	685a      	ldr	r2, [r3, #4]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006b50:	605a      	str	r2, [r3, #4]
 8006b52:	e007      	b.n	8006b64 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	685a      	ldr	r2, [r3, #4]
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006b62:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b6e:	2b40      	cmp	r3, #64	@ 0x40
 8006b70:	d007      	beq.n	8006b82 <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006b80:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2200      	movs	r2, #0
 8006b86:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	685a      	ldr	r2, [r3, #4]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8006b98:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8006b9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	371c      	adds	r7, #28
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr
 8006ba8:	08006d45 	.word	0x08006d45
 8006bac:	08006dab 	.word	0x08006dab
 8006bb0:	08006bf5 	.word	0x08006bf5
 8006bb4:	08006cb3 	.word	0x08006cb3

08006bb8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8006bc0:	bf00      	nop
 8006bc2:	370c      	adds	r7, #12
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b083      	sub	sp, #12
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006bd4:	bf00      	nop
 8006bd6:	370c      	adds	r7, #12
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr

08006be0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006be8:	bf00      	nop
 8006bea:	370c      	adds	r7, #12
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b082      	sub	sp, #8
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d923      	bls.n	8006c50 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	68da      	ldr	r2, [r3, #12]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c12:	b292      	uxth	r2, r2
 8006c14:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c1a:	1c9a      	adds	r2, r3, #2
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount -= 2U;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	3b02      	subs	r3, #2
 8006c2a:	b29a      	uxth	r2, r3
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    if (hspi->RxXferCount == 1U)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d11f      	bne.n	8006c7e <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	685a      	ldr	r2, [r3, #4]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006c4c:	605a      	str	r2, [r3, #4]
 8006c4e:	e016      	b.n	8006c7e <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f103 020c 	add.w	r2, r3, #12
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c5c:	7812      	ldrb	r2, [r2, #0]
 8006c5e:	b2d2      	uxtb	r2, r2
 8006c60:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c66:	1c5a      	adds	r2, r3, #1
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount--;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	3b01      	subs	r3, #1
 8006c76:	b29a      	uxth	r2, r3
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d10f      	bne.n	8006caa <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	685a      	ldr	r2, [r3, #4]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006c98:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d102      	bne.n	8006caa <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f000 fabb 	bl	8007220 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006caa:	bf00      	nop
 8006cac:	3708      	adds	r7, #8
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}

08006cb2 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006cb2:	b580      	push	{r7, lr}
 8006cb4:	b082      	sub	sp, #8
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d912      	bls.n	8006cea <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cc8:	881a      	ldrh	r2, [r3, #0]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cd4:	1c9a      	adds	r2, r3, #2
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount -= 2U;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	3b02      	subs	r3, #2
 8006ce2:	b29a      	uxth	r2, r3
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006ce8:	e012      	b.n	8006d10 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	330c      	adds	r3, #12
 8006cf4:	7812      	ldrb	r2, [r2, #0]
 8006cf6:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cfc:	1c5a      	adds	r2, r3, #1
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount--;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	3b01      	subs	r3, #1
 8006d0a:	b29a      	uxth	r2, r3
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d110      	bne.n	8006d3c <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	685a      	ldr	r2, [r3, #4]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006d28:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d102      	bne.n	8006d3c <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 fa72 	bl	8007220 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006d3c:	bf00      	nop
 8006d3e:	3708      	adds	r7, #8
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b082      	sub	sp, #8
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	68da      	ldr	r2, [r3, #12]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d56:	b292      	uxth	r2, r2
 8006d58:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d5e:	1c9a      	adds	r2, r3, #2
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	3b01      	subs	r3, #1
 8006d6e:	b29a      	uxth	r2, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  if (hspi->RxXferCount == 0U)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d10f      	bne.n	8006da2 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	685a      	ldr	r2, [r3, #4]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d90:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d102      	bne.n	8006da2 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f000 fa3f 	bl	8007220 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006da2:	bf00      	nop
 8006da4:	3708      	adds	r7, #8
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}

08006daa <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006daa:	b580      	push	{r7, lr}
 8006dac:	b082      	sub	sp, #8
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006db6:	881a      	ldrh	r2, [r3, #0]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dc2:	1c9a      	adds	r2, r3, #2
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	3b01      	subs	r3, #1
 8006dd0:	b29a      	uxth	r2, r3
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d110      	bne.n	8006e02 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	685a      	ldr	r2, [r3, #4]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006dee:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d102      	bne.n	8006e02 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f000 fa0f 	bl	8007220 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006e02:	bf00      	nop
 8006e04:	3708      	adds	r7, #8
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}

08006e0a <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006e0a:	b580      	push	{r7, lr}
 8006e0c:	b082      	sub	sp, #8
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f103 020c 	add.w	r2, r3, #12
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e1e:	7812      	ldrb	r2, [r2, #0]
 8006e20:	b2d2      	uxtb	r2, r2
 8006e22:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e28:	1c5a      	adds	r2, r3, #1
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	3b01      	subs	r3, #1
 8006e38:	b29a      	uxth	r2, r3
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d102      	bne.n	8006e52 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f000 fa29 	bl	80072a4 <SPI_CloseRx_ISR>
  }
}
 8006e52:	bf00      	nop
 8006e54:	3708      	adds	r7, #8
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}

08006e5a <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006e5a:	b580      	push	{r7, lr}
 8006e5c:	b082      	sub	sp, #8
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	68da      	ldr	r2, [r3, #12]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e6c:	b292      	uxth	r2, r2
 8006e6e:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e74:	1c9a      	adds	r2, r3, #2
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	3b01      	subs	r3, #1
 8006e84:	b29a      	uxth	r2, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d102      	bne.n	8006e9e <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f000 fa03 	bl	80072a4 <SPI_CloseRx_ISR>
  }
}
 8006e9e:	bf00      	nop
 8006ea0:	3708      	adds	r7, #8
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
	...

08006ea8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b088      	sub	sp, #32
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	603b      	str	r3, [r7, #0]
 8006eb4:	4613      	mov	r3, r2
 8006eb6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006eb8:	f7fc ff30 	bl	8003d1c <HAL_GetTick>
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ec0:	1a9b      	subs	r3, r3, r2
 8006ec2:	683a      	ldr	r2, [r7, #0]
 8006ec4:	4413      	add	r3, r2
 8006ec6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006ec8:	f7fc ff28 	bl	8003d1c <HAL_GetTick>
 8006ecc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006ece:	4b39      	ldr	r3, [pc, #228]	@ (8006fb4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	015b      	lsls	r3, r3, #5
 8006ed4:	0d1b      	lsrs	r3, r3, #20
 8006ed6:	69fa      	ldr	r2, [r7, #28]
 8006ed8:	fb02 f303 	mul.w	r3, r2, r3
 8006edc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ede:	e054      	b.n	8006f8a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ee6:	d050      	beq.n	8006f8a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006ee8:	f7fc ff18 	bl	8003d1c <HAL_GetTick>
 8006eec:	4602      	mov	r2, r0
 8006eee:	69bb      	ldr	r3, [r7, #24]
 8006ef0:	1ad3      	subs	r3, r2, r3
 8006ef2:	69fa      	ldr	r2, [r7, #28]
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d902      	bls.n	8006efe <SPI_WaitFlagStateUntilTimeout+0x56>
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d13d      	bne.n	8006f7a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	685a      	ldr	r2, [r3, #4]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006f0c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f16:	d111      	bne.n	8006f3c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f20:	d004      	beq.n	8006f2c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f2a:	d107      	bne.n	8006f3c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f3a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f44:	d10f      	bne.n	8006f66 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006f54:	601a      	str	r2, [r3, #0]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006f64:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2201      	movs	r2, #1
 8006f6a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2200      	movs	r2, #0
 8006f72:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006f76:	2303      	movs	r3, #3
 8006f78:	e017      	b.n	8006faa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d101      	bne.n	8006f84 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006f80:	2300      	movs	r3, #0
 8006f82:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	3b01      	subs	r3, #1
 8006f88:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	689a      	ldr	r2, [r3, #8]
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	4013      	ands	r3, r2
 8006f94:	68ba      	ldr	r2, [r7, #8]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	bf0c      	ite	eq
 8006f9a:	2301      	moveq	r3, #1
 8006f9c:	2300      	movne	r3, #0
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	79fb      	ldrb	r3, [r7, #7]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d19b      	bne.n	8006ee0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006fa8:	2300      	movs	r3, #0
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3720      	adds	r7, #32
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	bf00      	nop
 8006fb4:	200001bc 	.word	0x200001bc

08006fb8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b08a      	sub	sp, #40	@ 0x28
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	60b9      	str	r1, [r7, #8]
 8006fc2:	607a      	str	r2, [r7, #4]
 8006fc4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006fca:	f7fc fea7 	bl	8003d1c <HAL_GetTick>
 8006fce:	4602      	mov	r2, r0
 8006fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fd2:	1a9b      	subs	r3, r3, r2
 8006fd4:	683a      	ldr	r2, [r7, #0]
 8006fd6:	4413      	add	r3, r2
 8006fd8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006fda:	f7fc fe9f 	bl	8003d1c <HAL_GetTick>
 8006fde:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	330c      	adds	r3, #12
 8006fe6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006fe8:	4b3d      	ldr	r3, [pc, #244]	@ (80070e0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	4613      	mov	r3, r2
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	4413      	add	r3, r2
 8006ff2:	00da      	lsls	r2, r3, #3
 8006ff4:	1ad3      	subs	r3, r2, r3
 8006ff6:	0d1b      	lsrs	r3, r3, #20
 8006ff8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ffa:	fb02 f303 	mul.w	r3, r2, r3
 8006ffe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007000:	e060      	b.n	80070c4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007008:	d107      	bne.n	800701a <SPI_WaitFifoStateUntilTimeout+0x62>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d104      	bne.n	800701a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007010:	69fb      	ldr	r3, [r7, #28]
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	b2db      	uxtb	r3, r3
 8007016:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007018:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007020:	d050      	beq.n	80070c4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007022:	f7fc fe7b 	bl	8003d1c <HAL_GetTick>
 8007026:	4602      	mov	r2, r0
 8007028:	6a3b      	ldr	r3, [r7, #32]
 800702a:	1ad3      	subs	r3, r2, r3
 800702c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800702e:	429a      	cmp	r2, r3
 8007030:	d902      	bls.n	8007038 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007034:	2b00      	cmp	r3, #0
 8007036:	d13d      	bne.n	80070b4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	685a      	ldr	r2, [r3, #4]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007046:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007050:	d111      	bne.n	8007076 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800705a:	d004      	beq.n	8007066 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007064:	d107      	bne.n	8007076 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007074:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800707a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800707e:	d10f      	bne.n	80070a0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800708e:	601a      	str	r2, [r3, #0]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800709e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2201      	movs	r2, #1
 80070a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2200      	movs	r2, #0
 80070ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80070b0:	2303      	movs	r3, #3
 80070b2:	e010      	b.n	80070d6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80070b4:	69bb      	ldr	r3, [r7, #24]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d101      	bne.n	80070be <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80070ba:	2300      	movs	r3, #0
 80070bc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80070be:	69bb      	ldr	r3, [r7, #24]
 80070c0:	3b01      	subs	r3, #1
 80070c2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	689a      	ldr	r2, [r3, #8]
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	4013      	ands	r3, r2
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d196      	bne.n	8007002 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80070d4:	2300      	movs	r3, #0
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3728      	adds	r7, #40	@ 0x28
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop
 80070e0:	200001bc 	.word	0x200001bc

080070e4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b086      	sub	sp, #24
 80070e8:	af02      	add	r7, sp, #8
 80070ea:	60f8      	str	r0, [r7, #12]
 80070ec:	60b9      	str	r1, [r7, #8]
 80070ee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80070f8:	d111      	bne.n	800711e <SPI_EndRxTransaction+0x3a>
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007102:	d004      	beq.n	800710e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800710c:	d107      	bne.n	800711e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800711c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	9300      	str	r3, [sp, #0]
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	2200      	movs	r2, #0
 8007126:	2180      	movs	r1, #128	@ 0x80
 8007128:	68f8      	ldr	r0, [r7, #12]
 800712a:	f7ff febd 	bl	8006ea8 <SPI_WaitFlagStateUntilTimeout>
 800712e:	4603      	mov	r3, r0
 8007130:	2b00      	cmp	r3, #0
 8007132:	d007      	beq.n	8007144 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007138:	f043 0220 	orr.w	r2, r3, #32
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007140:	2303      	movs	r3, #3
 8007142:	e023      	b.n	800718c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800714c:	d11d      	bne.n	800718a <SPI_EndRxTransaction+0xa6>
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007156:	d004      	beq.n	8007162 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007160:	d113      	bne.n	800718a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	9300      	str	r3, [sp, #0]
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	2200      	movs	r2, #0
 800716a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800716e:	68f8      	ldr	r0, [r7, #12]
 8007170:	f7ff ff22 	bl	8006fb8 <SPI_WaitFifoStateUntilTimeout>
 8007174:	4603      	mov	r3, r0
 8007176:	2b00      	cmp	r3, #0
 8007178:	d007      	beq.n	800718a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800717e:	f043 0220 	orr.w	r2, r3, #32
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8007186:	2303      	movs	r3, #3
 8007188:	e000      	b.n	800718c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800718a:	2300      	movs	r3, #0
}
 800718c:	4618      	mov	r0, r3
 800718e:	3710      	adds	r7, #16
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}

08007194 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b086      	sub	sp, #24
 8007198:	af02      	add	r7, sp, #8
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	60b9      	str	r1, [r7, #8]
 800719e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	9300      	str	r3, [sp, #0]
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	2200      	movs	r2, #0
 80071a8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80071ac:	68f8      	ldr	r0, [r7, #12]
 80071ae:	f7ff ff03 	bl	8006fb8 <SPI_WaitFifoStateUntilTimeout>
 80071b2:	4603      	mov	r3, r0
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d007      	beq.n	80071c8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071bc:	f043 0220 	orr.w	r2, r3, #32
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80071c4:	2303      	movs	r3, #3
 80071c6:	e027      	b.n	8007218 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	9300      	str	r3, [sp, #0]
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	2200      	movs	r2, #0
 80071d0:	2180      	movs	r1, #128	@ 0x80
 80071d2:	68f8      	ldr	r0, [r7, #12]
 80071d4:	f7ff fe68 	bl	8006ea8 <SPI_WaitFlagStateUntilTimeout>
 80071d8:	4603      	mov	r3, r0
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d007      	beq.n	80071ee <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071e2:	f043 0220 	orr.w	r2, r3, #32
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80071ea:	2303      	movs	r3, #3
 80071ec:	e014      	b.n	8007218 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	9300      	str	r3, [sp, #0]
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	2200      	movs	r2, #0
 80071f6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80071fa:	68f8      	ldr	r0, [r7, #12]
 80071fc:	f7ff fedc 	bl	8006fb8 <SPI_WaitFifoStateUntilTimeout>
 8007200:	4603      	mov	r3, r0
 8007202:	2b00      	cmp	r3, #0
 8007204:	d007      	beq.n	8007216 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800720a:	f043 0220 	orr.w	r2, r3, #32
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007212:	2303      	movs	r3, #3
 8007214:	e000      	b.n	8007218 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007216:	2300      	movs	r3, #0
}
 8007218:	4618      	mov	r0, r3
 800721a:	3710      	adds	r7, #16
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b084      	sub	sp, #16
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007228:	f7fc fd78 	bl	8003d1c <HAL_GetTick>
 800722c:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	685a      	ldr	r2, [r3, #4]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f022 0220 	bic.w	r2, r2, #32
 800723c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800723e:	68fa      	ldr	r2, [r7, #12]
 8007240:	2164      	movs	r1, #100	@ 0x64
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f7ff ffa6 	bl	8007194 <SPI_EndRxTxTransaction>
 8007248:	4603      	mov	r3, r0
 800724a:	2b00      	cmp	r3, #0
 800724c:	d005      	beq.n	800725a <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007252:	f043 0220 	orr.w	r2, r3, #32
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	661a      	str	r2, [r3, #96]	@ 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800725e:	2b00      	cmp	r3, #0
 8007260:	d115      	bne.n	800728e <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007268:	b2db      	uxtb	r3, r3
 800726a:	2b04      	cmp	r3, #4
 800726c:	d107      	bne.n	800727e <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2201      	movs	r2, #1
 8007272:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f7ff fc9e 	bl	8006bb8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800727c:	e00e      	b.n	800729c <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2201      	movs	r2, #1
 8007282:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f7ff fca0 	bl	8006bcc <HAL_SPI_TxRxCpltCallback>
}
 800728c:	e006      	b.n	800729c <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2201      	movs	r2, #1
 8007292:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f7ff fca2 	bl	8006be0 <HAL_SPI_ErrorCallback>
}
 800729c:	bf00      	nop
 800729e:	3710      	adds	r7, #16
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b082      	sub	sp, #8
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	685a      	ldr	r2, [r3, #4]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80072ba:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80072bc:	f7fc fd2e 	bl	8003d1c <HAL_GetTick>
 80072c0:	4603      	mov	r3, r0
 80072c2:	461a      	mov	r2, r3
 80072c4:	2164      	movs	r1, #100	@ 0x64
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f7ff ff0c 	bl	80070e4 <SPI_EndRxTransaction>
 80072cc:	4603      	mov	r3, r0
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d005      	beq.n	80072de <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072d6:	f043 0220 	orr.w	r2, r3, #32
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	661a      	str	r2, [r3, #96]	@ 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2201      	movs	r2, #1
 80072e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d103      	bne.n	80072f6 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f7ff fc62 	bl	8006bb8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80072f4:	e002      	b.n	80072fc <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f7ff fc72 	bl	8006be0 <HAL_SPI_ErrorCallback>
}
 80072fc:	bf00      	nop
 80072fe:	3708      	adds	r7, #8
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d101      	bne.n	8007316 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007312:	2301      	movs	r3, #1
 8007314:	e049      	b.n	80073aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800731c:	b2db      	uxtb	r3, r3
 800731e:	2b00      	cmp	r3, #0
 8007320:	d106      	bne.n	8007330 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f7fc f9e2 	bl	80036f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2202      	movs	r2, #2
 8007334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	3304      	adds	r3, #4
 8007340:	4619      	mov	r1, r3
 8007342:	4610      	mov	r0, r2
 8007344:	f000 fb02 	bl	800794c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2201      	movs	r2, #1
 800734c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2201      	movs	r2, #1
 8007354:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2201      	movs	r2, #1
 800735c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2201      	movs	r2, #1
 8007364:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2201      	movs	r2, #1
 800736c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2201      	movs	r2, #1
 8007374:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2201      	movs	r2, #1
 800737c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2201      	movs	r2, #1
 8007384:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2201      	movs	r2, #1
 800738c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2201      	movs	r2, #1
 8007394:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2201      	movs	r2, #1
 800739c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2201      	movs	r2, #1
 80073a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80073a8:	2300      	movs	r3, #0
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3708      	adds	r7, #8
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
	...

080073b4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b085      	sub	sp, #20
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d001      	beq.n	80073cc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
 80073ca:	e047      	b.n	800745c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2202      	movs	r2, #2
 80073d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a23      	ldr	r2, [pc, #140]	@ (8007468 <HAL_TIM_Base_Start+0xb4>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d01d      	beq.n	800741a <HAL_TIM_Base_Start+0x66>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073e6:	d018      	beq.n	800741a <HAL_TIM_Base_Start+0x66>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a1f      	ldr	r2, [pc, #124]	@ (800746c <HAL_TIM_Base_Start+0xb8>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d013      	beq.n	800741a <HAL_TIM_Base_Start+0x66>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a1e      	ldr	r2, [pc, #120]	@ (8007470 <HAL_TIM_Base_Start+0xbc>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d00e      	beq.n	800741a <HAL_TIM_Base_Start+0x66>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a1c      	ldr	r2, [pc, #112]	@ (8007474 <HAL_TIM_Base_Start+0xc0>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d009      	beq.n	800741a <HAL_TIM_Base_Start+0x66>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a1b      	ldr	r2, [pc, #108]	@ (8007478 <HAL_TIM_Base_Start+0xc4>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d004      	beq.n	800741a <HAL_TIM_Base_Start+0x66>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a19      	ldr	r2, [pc, #100]	@ (800747c <HAL_TIM_Base_Start+0xc8>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d115      	bne.n	8007446 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	689a      	ldr	r2, [r3, #8]
 8007420:	4b17      	ldr	r3, [pc, #92]	@ (8007480 <HAL_TIM_Base_Start+0xcc>)
 8007422:	4013      	ands	r3, r2
 8007424:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2b06      	cmp	r3, #6
 800742a:	d015      	beq.n	8007458 <HAL_TIM_Base_Start+0xa4>
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007432:	d011      	beq.n	8007458 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f042 0201 	orr.w	r2, r2, #1
 8007442:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007444:	e008      	b.n	8007458 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f042 0201 	orr.w	r2, r2, #1
 8007454:	601a      	str	r2, [r3, #0]
 8007456:	e000      	b.n	800745a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007458:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800745a:	2300      	movs	r3, #0
}
 800745c:	4618      	mov	r0, r3
 800745e:	3714      	adds	r7, #20
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr
 8007468:	40012c00 	.word	0x40012c00
 800746c:	40000400 	.word	0x40000400
 8007470:	40000800 	.word	0x40000800
 8007474:	40000c00 	.word	0x40000c00
 8007478:	40013400 	.word	0x40013400
 800747c:	40014000 	.word	0x40014000
 8007480:	00010007 	.word	0x00010007

08007484 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007484:	b480      	push	{r7}
 8007486:	b085      	sub	sp, #20
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007492:	b2db      	uxtb	r3, r3
 8007494:	2b01      	cmp	r3, #1
 8007496:	d001      	beq.n	800749c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007498:	2301      	movs	r3, #1
 800749a:	e04f      	b.n	800753c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2202      	movs	r2, #2
 80074a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	68da      	ldr	r2, [r3, #12]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f042 0201 	orr.w	r2, r2, #1
 80074b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a23      	ldr	r2, [pc, #140]	@ (8007548 <HAL_TIM_Base_Start_IT+0xc4>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d01d      	beq.n	80074fa <HAL_TIM_Base_Start_IT+0x76>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074c6:	d018      	beq.n	80074fa <HAL_TIM_Base_Start_IT+0x76>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a1f      	ldr	r2, [pc, #124]	@ (800754c <HAL_TIM_Base_Start_IT+0xc8>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d013      	beq.n	80074fa <HAL_TIM_Base_Start_IT+0x76>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a1e      	ldr	r2, [pc, #120]	@ (8007550 <HAL_TIM_Base_Start_IT+0xcc>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d00e      	beq.n	80074fa <HAL_TIM_Base_Start_IT+0x76>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a1c      	ldr	r2, [pc, #112]	@ (8007554 <HAL_TIM_Base_Start_IT+0xd0>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d009      	beq.n	80074fa <HAL_TIM_Base_Start_IT+0x76>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a1b      	ldr	r2, [pc, #108]	@ (8007558 <HAL_TIM_Base_Start_IT+0xd4>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d004      	beq.n	80074fa <HAL_TIM_Base_Start_IT+0x76>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a19      	ldr	r2, [pc, #100]	@ (800755c <HAL_TIM_Base_Start_IT+0xd8>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d115      	bne.n	8007526 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	689a      	ldr	r2, [r3, #8]
 8007500:	4b17      	ldr	r3, [pc, #92]	@ (8007560 <HAL_TIM_Base_Start_IT+0xdc>)
 8007502:	4013      	ands	r3, r2
 8007504:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2b06      	cmp	r3, #6
 800750a:	d015      	beq.n	8007538 <HAL_TIM_Base_Start_IT+0xb4>
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007512:	d011      	beq.n	8007538 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f042 0201 	orr.w	r2, r2, #1
 8007522:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007524:	e008      	b.n	8007538 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f042 0201 	orr.w	r2, r2, #1
 8007534:	601a      	str	r2, [r3, #0]
 8007536:	e000      	b.n	800753a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007538:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800753a:	2300      	movs	r3, #0
}
 800753c:	4618      	mov	r0, r3
 800753e:	3714      	adds	r7, #20
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr
 8007548:	40012c00 	.word	0x40012c00
 800754c:	40000400 	.word	0x40000400
 8007550:	40000800 	.word	0x40000800
 8007554:	40000c00 	.word	0x40000c00
 8007558:	40013400 	.word	0x40013400
 800755c:	40014000 	.word	0x40014000
 8007560:	00010007 	.word	0x00010007

08007564 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b084      	sub	sp, #16
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	68db      	ldr	r3, [r3, #12]
 8007572:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	691b      	ldr	r3, [r3, #16]
 800757a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	f003 0302 	and.w	r3, r3, #2
 8007582:	2b00      	cmp	r3, #0
 8007584:	d020      	beq.n	80075c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	f003 0302 	and.w	r3, r3, #2
 800758c:	2b00      	cmp	r3, #0
 800758e:	d01b      	beq.n	80075c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f06f 0202 	mvn.w	r2, #2
 8007598:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2201      	movs	r2, #1
 800759e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	699b      	ldr	r3, [r3, #24]
 80075a6:	f003 0303 	and.w	r3, r3, #3
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d003      	beq.n	80075b6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f000 f9ad 	bl	800790e <HAL_TIM_IC_CaptureCallback>
 80075b4:	e005      	b.n	80075c2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 f99f 	bl	80078fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f000 f9b0 	bl	8007922 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2200      	movs	r2, #0
 80075c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	f003 0304 	and.w	r3, r3, #4
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d020      	beq.n	8007614 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f003 0304 	and.w	r3, r3, #4
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d01b      	beq.n	8007614 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f06f 0204 	mvn.w	r2, #4
 80075e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2202      	movs	r2, #2
 80075ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	699b      	ldr	r3, [r3, #24]
 80075f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d003      	beq.n	8007602 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 f987 	bl	800790e <HAL_TIM_IC_CaptureCallback>
 8007600:	e005      	b.n	800760e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 f979 	bl	80078fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 f98a 	bl	8007922 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2200      	movs	r2, #0
 8007612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	f003 0308 	and.w	r3, r3, #8
 800761a:	2b00      	cmp	r3, #0
 800761c:	d020      	beq.n	8007660 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f003 0308 	and.w	r3, r3, #8
 8007624:	2b00      	cmp	r3, #0
 8007626:	d01b      	beq.n	8007660 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f06f 0208 	mvn.w	r2, #8
 8007630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2204      	movs	r2, #4
 8007636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	69db      	ldr	r3, [r3, #28]
 800763e:	f003 0303 	and.w	r3, r3, #3
 8007642:	2b00      	cmp	r3, #0
 8007644:	d003      	beq.n	800764e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 f961 	bl	800790e <HAL_TIM_IC_CaptureCallback>
 800764c:	e005      	b.n	800765a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 f953 	bl	80078fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 f964 	bl	8007922 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2200      	movs	r2, #0
 800765e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	f003 0310 	and.w	r3, r3, #16
 8007666:	2b00      	cmp	r3, #0
 8007668:	d020      	beq.n	80076ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	f003 0310 	and.w	r3, r3, #16
 8007670:	2b00      	cmp	r3, #0
 8007672:	d01b      	beq.n	80076ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f06f 0210 	mvn.w	r2, #16
 800767c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2208      	movs	r2, #8
 8007682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	69db      	ldr	r3, [r3, #28]
 800768a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800768e:	2b00      	cmp	r3, #0
 8007690:	d003      	beq.n	800769a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 f93b 	bl	800790e <HAL_TIM_IC_CaptureCallback>
 8007698:	e005      	b.n	80076a6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 f92d 	bl	80078fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f000 f93e 	bl	8007922 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2200      	movs	r2, #0
 80076aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	f003 0301 	and.w	r3, r3, #1
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d00c      	beq.n	80076d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	f003 0301 	and.w	r3, r3, #1
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d007      	beq.n	80076d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f06f 0201 	mvn.w	r2, #1
 80076c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f7fb fcb8 	bl	8003040 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d00c      	beq.n	80076f4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d007      	beq.n	80076f4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80076ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 faf2 	bl	8007cd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d00c      	beq.n	8007718 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007704:	2b00      	cmp	r3, #0
 8007706:	d007      	beq.n	8007718 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 faea 	bl	8007cec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800771e:	2b00      	cmp	r3, #0
 8007720:	d00c      	beq.n	800773c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007728:	2b00      	cmp	r3, #0
 800772a:	d007      	beq.n	800773c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 f8fd 	bl	8007936 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	f003 0320 	and.w	r3, r3, #32
 8007742:	2b00      	cmp	r3, #0
 8007744:	d00c      	beq.n	8007760 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	f003 0320 	and.w	r3, r3, #32
 800774c:	2b00      	cmp	r3, #0
 800774e:	d007      	beq.n	8007760 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f06f 0220 	mvn.w	r2, #32
 8007758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 fab2 	bl	8007cc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007760:	bf00      	nop
 8007762:	3710      	adds	r7, #16
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}

08007768 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007772:	2300      	movs	r3, #0
 8007774:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800777c:	2b01      	cmp	r3, #1
 800777e:	d101      	bne.n	8007784 <HAL_TIM_ConfigClockSource+0x1c>
 8007780:	2302      	movs	r3, #2
 8007782:	e0b6      	b.n	80078f2 <HAL_TIM_ConfigClockSource+0x18a>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2201      	movs	r2, #1
 8007788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2202      	movs	r2, #2
 8007790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80077a2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80077a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80077ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	68ba      	ldr	r2, [r7, #8]
 80077b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077c0:	d03e      	beq.n	8007840 <HAL_TIM_ConfigClockSource+0xd8>
 80077c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077c6:	f200 8087 	bhi.w	80078d8 <HAL_TIM_ConfigClockSource+0x170>
 80077ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077ce:	f000 8086 	beq.w	80078de <HAL_TIM_ConfigClockSource+0x176>
 80077d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077d6:	d87f      	bhi.n	80078d8 <HAL_TIM_ConfigClockSource+0x170>
 80077d8:	2b70      	cmp	r3, #112	@ 0x70
 80077da:	d01a      	beq.n	8007812 <HAL_TIM_ConfigClockSource+0xaa>
 80077dc:	2b70      	cmp	r3, #112	@ 0x70
 80077de:	d87b      	bhi.n	80078d8 <HAL_TIM_ConfigClockSource+0x170>
 80077e0:	2b60      	cmp	r3, #96	@ 0x60
 80077e2:	d050      	beq.n	8007886 <HAL_TIM_ConfigClockSource+0x11e>
 80077e4:	2b60      	cmp	r3, #96	@ 0x60
 80077e6:	d877      	bhi.n	80078d8 <HAL_TIM_ConfigClockSource+0x170>
 80077e8:	2b50      	cmp	r3, #80	@ 0x50
 80077ea:	d03c      	beq.n	8007866 <HAL_TIM_ConfigClockSource+0xfe>
 80077ec:	2b50      	cmp	r3, #80	@ 0x50
 80077ee:	d873      	bhi.n	80078d8 <HAL_TIM_ConfigClockSource+0x170>
 80077f0:	2b40      	cmp	r3, #64	@ 0x40
 80077f2:	d058      	beq.n	80078a6 <HAL_TIM_ConfigClockSource+0x13e>
 80077f4:	2b40      	cmp	r3, #64	@ 0x40
 80077f6:	d86f      	bhi.n	80078d8 <HAL_TIM_ConfigClockSource+0x170>
 80077f8:	2b30      	cmp	r3, #48	@ 0x30
 80077fa:	d064      	beq.n	80078c6 <HAL_TIM_ConfigClockSource+0x15e>
 80077fc:	2b30      	cmp	r3, #48	@ 0x30
 80077fe:	d86b      	bhi.n	80078d8 <HAL_TIM_ConfigClockSource+0x170>
 8007800:	2b20      	cmp	r3, #32
 8007802:	d060      	beq.n	80078c6 <HAL_TIM_ConfigClockSource+0x15e>
 8007804:	2b20      	cmp	r3, #32
 8007806:	d867      	bhi.n	80078d8 <HAL_TIM_ConfigClockSource+0x170>
 8007808:	2b00      	cmp	r3, #0
 800780a:	d05c      	beq.n	80078c6 <HAL_TIM_ConfigClockSource+0x15e>
 800780c:	2b10      	cmp	r3, #16
 800780e:	d05a      	beq.n	80078c6 <HAL_TIM_ConfigClockSource+0x15e>
 8007810:	e062      	b.n	80078d8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007822:	f000 f9a7 	bl	8007b74 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007834:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	68ba      	ldr	r2, [r7, #8]
 800783c:	609a      	str	r2, [r3, #8]
      break;
 800783e:	e04f      	b.n	80078e0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007850:	f000 f990 	bl	8007b74 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	689a      	ldr	r2, [r3, #8]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007862:	609a      	str	r2, [r3, #8]
      break;
 8007864:	e03c      	b.n	80078e0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007872:	461a      	mov	r2, r3
 8007874:	f000 f904 	bl	8007a80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	2150      	movs	r1, #80	@ 0x50
 800787e:	4618      	mov	r0, r3
 8007880:	f000 f95d 	bl	8007b3e <TIM_ITRx_SetConfig>
      break;
 8007884:	e02c      	b.n	80078e0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007892:	461a      	mov	r2, r3
 8007894:	f000 f923 	bl	8007ade <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2160      	movs	r1, #96	@ 0x60
 800789e:	4618      	mov	r0, r3
 80078a0:	f000 f94d 	bl	8007b3e <TIM_ITRx_SetConfig>
      break;
 80078a4:	e01c      	b.n	80078e0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80078b2:	461a      	mov	r2, r3
 80078b4:	f000 f8e4 	bl	8007a80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	2140      	movs	r1, #64	@ 0x40
 80078be:	4618      	mov	r0, r3
 80078c0:	f000 f93d 	bl	8007b3e <TIM_ITRx_SetConfig>
      break;
 80078c4:	e00c      	b.n	80078e0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4619      	mov	r1, r3
 80078d0:	4610      	mov	r0, r2
 80078d2:	f000 f934 	bl	8007b3e <TIM_ITRx_SetConfig>
      break;
 80078d6:	e003      	b.n	80078e0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80078d8:	2301      	movs	r3, #1
 80078da:	73fb      	strb	r3, [r7, #15]
      break;
 80078dc:	e000      	b.n	80078e0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80078de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2201      	movs	r2, #1
 80078e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2200      	movs	r2, #0
 80078ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80078f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3710      	adds	r7, #16
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}

080078fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80078fa:	b480      	push	{r7}
 80078fc:	b083      	sub	sp, #12
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007902:	bf00      	nop
 8007904:	370c      	adds	r7, #12
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr

0800790e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800790e:	b480      	push	{r7}
 8007910:	b083      	sub	sp, #12
 8007912:	af00      	add	r7, sp, #0
 8007914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007916:	bf00      	nop
 8007918:	370c      	adds	r7, #12
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr

08007922 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007922:	b480      	push	{r7}
 8007924:	b083      	sub	sp, #12
 8007926:	af00      	add	r7, sp, #0
 8007928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800792a:	bf00      	nop
 800792c:	370c      	adds	r7, #12
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr

08007936 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007936:	b480      	push	{r7}
 8007938:	b083      	sub	sp, #12
 800793a:	af00      	add	r7, sp, #0
 800793c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800793e:	bf00      	nop
 8007940:	370c      	adds	r7, #12
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr
	...

0800794c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800794c:	b480      	push	{r7}
 800794e:	b085      	sub	sp, #20
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	4a40      	ldr	r2, [pc, #256]	@ (8007a60 <TIM_Base_SetConfig+0x114>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d013      	beq.n	800798c <TIM_Base_SetConfig+0x40>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800796a:	d00f      	beq.n	800798c <TIM_Base_SetConfig+0x40>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	4a3d      	ldr	r2, [pc, #244]	@ (8007a64 <TIM_Base_SetConfig+0x118>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d00b      	beq.n	800798c <TIM_Base_SetConfig+0x40>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	4a3c      	ldr	r2, [pc, #240]	@ (8007a68 <TIM_Base_SetConfig+0x11c>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d007      	beq.n	800798c <TIM_Base_SetConfig+0x40>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	4a3b      	ldr	r2, [pc, #236]	@ (8007a6c <TIM_Base_SetConfig+0x120>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d003      	beq.n	800798c <TIM_Base_SetConfig+0x40>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	4a3a      	ldr	r2, [pc, #232]	@ (8007a70 <TIM_Base_SetConfig+0x124>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d108      	bne.n	800799e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007992:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	68fa      	ldr	r2, [r7, #12]
 800799a:	4313      	orrs	r3, r2
 800799c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	4a2f      	ldr	r2, [pc, #188]	@ (8007a60 <TIM_Base_SetConfig+0x114>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d01f      	beq.n	80079e6 <TIM_Base_SetConfig+0x9a>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079ac:	d01b      	beq.n	80079e6 <TIM_Base_SetConfig+0x9a>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	4a2c      	ldr	r2, [pc, #176]	@ (8007a64 <TIM_Base_SetConfig+0x118>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d017      	beq.n	80079e6 <TIM_Base_SetConfig+0x9a>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	4a2b      	ldr	r2, [pc, #172]	@ (8007a68 <TIM_Base_SetConfig+0x11c>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d013      	beq.n	80079e6 <TIM_Base_SetConfig+0x9a>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	4a2a      	ldr	r2, [pc, #168]	@ (8007a6c <TIM_Base_SetConfig+0x120>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d00f      	beq.n	80079e6 <TIM_Base_SetConfig+0x9a>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	4a29      	ldr	r2, [pc, #164]	@ (8007a70 <TIM_Base_SetConfig+0x124>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d00b      	beq.n	80079e6 <TIM_Base_SetConfig+0x9a>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	4a28      	ldr	r2, [pc, #160]	@ (8007a74 <TIM_Base_SetConfig+0x128>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d007      	beq.n	80079e6 <TIM_Base_SetConfig+0x9a>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	4a27      	ldr	r2, [pc, #156]	@ (8007a78 <TIM_Base_SetConfig+0x12c>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d003      	beq.n	80079e6 <TIM_Base_SetConfig+0x9a>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	4a26      	ldr	r2, [pc, #152]	@ (8007a7c <TIM_Base_SetConfig+0x130>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d108      	bne.n	80079f8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80079ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	68db      	ldr	r3, [r3, #12]
 80079f2:	68fa      	ldr	r2, [r7, #12]
 80079f4:	4313      	orrs	r3, r2
 80079f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	695b      	ldr	r3, [r3, #20]
 8007a02:	4313      	orrs	r3, r2
 8007a04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	68fa      	ldr	r2, [r7, #12]
 8007a0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	689a      	ldr	r2, [r3, #8]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	4a10      	ldr	r2, [pc, #64]	@ (8007a60 <TIM_Base_SetConfig+0x114>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d00f      	beq.n	8007a44 <TIM_Base_SetConfig+0xf8>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	4a12      	ldr	r2, [pc, #72]	@ (8007a70 <TIM_Base_SetConfig+0x124>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d00b      	beq.n	8007a44 <TIM_Base_SetConfig+0xf8>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	4a11      	ldr	r2, [pc, #68]	@ (8007a74 <TIM_Base_SetConfig+0x128>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d007      	beq.n	8007a44 <TIM_Base_SetConfig+0xf8>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	4a10      	ldr	r2, [pc, #64]	@ (8007a78 <TIM_Base_SetConfig+0x12c>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d003      	beq.n	8007a44 <TIM_Base_SetConfig+0xf8>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	4a0f      	ldr	r2, [pc, #60]	@ (8007a7c <TIM_Base_SetConfig+0x130>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d103      	bne.n	8007a4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	691a      	ldr	r2, [r3, #16]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	615a      	str	r2, [r3, #20]
}
 8007a52:	bf00      	nop
 8007a54:	3714      	adds	r7, #20
 8007a56:	46bd      	mov	sp, r7
 8007a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5c:	4770      	bx	lr
 8007a5e:	bf00      	nop
 8007a60:	40012c00 	.word	0x40012c00
 8007a64:	40000400 	.word	0x40000400
 8007a68:	40000800 	.word	0x40000800
 8007a6c:	40000c00 	.word	0x40000c00
 8007a70:	40013400 	.word	0x40013400
 8007a74:	40014000 	.word	0x40014000
 8007a78:	40014400 	.word	0x40014400
 8007a7c:	40014800 	.word	0x40014800

08007a80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b087      	sub	sp, #28
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	60f8      	str	r0, [r7, #12]
 8007a88:	60b9      	str	r1, [r7, #8]
 8007a8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	6a1b      	ldr	r3, [r3, #32]
 8007a90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	6a1b      	ldr	r3, [r3, #32]
 8007a96:	f023 0201 	bic.w	r2, r3, #1
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	699b      	ldr	r3, [r3, #24]
 8007aa2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007aaa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	011b      	lsls	r3, r3, #4
 8007ab0:	693a      	ldr	r2, [r7, #16]
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	f023 030a 	bic.w	r3, r3, #10
 8007abc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007abe:	697a      	ldr	r2, [r7, #20]
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	693a      	ldr	r2, [r7, #16]
 8007aca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	697a      	ldr	r2, [r7, #20]
 8007ad0:	621a      	str	r2, [r3, #32]
}
 8007ad2:	bf00      	nop
 8007ad4:	371c      	adds	r7, #28
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr

08007ade <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ade:	b480      	push	{r7}
 8007ae0:	b087      	sub	sp, #28
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	60f8      	str	r0, [r7, #12]
 8007ae6:	60b9      	str	r1, [r7, #8]
 8007ae8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	6a1b      	ldr	r3, [r3, #32]
 8007aee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	6a1b      	ldr	r3, [r3, #32]
 8007af4:	f023 0210 	bic.w	r2, r3, #16
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	699b      	ldr	r3, [r3, #24]
 8007b00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007b08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	031b      	lsls	r3, r3, #12
 8007b0e:	693a      	ldr	r2, [r7, #16]
 8007b10:	4313      	orrs	r3, r2
 8007b12:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007b1a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	011b      	lsls	r3, r3, #4
 8007b20:	697a      	ldr	r2, [r7, #20]
 8007b22:	4313      	orrs	r3, r2
 8007b24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	693a      	ldr	r2, [r7, #16]
 8007b2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	697a      	ldr	r2, [r7, #20]
 8007b30:	621a      	str	r2, [r3, #32]
}
 8007b32:	bf00      	nop
 8007b34:	371c      	adds	r7, #28
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr

08007b3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007b3e:	b480      	push	{r7}
 8007b40:	b085      	sub	sp, #20
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
 8007b46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007b56:	683a      	ldr	r2, [r7, #0]
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	f043 0307 	orr.w	r3, r3, #7
 8007b60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	68fa      	ldr	r2, [r7, #12]
 8007b66:	609a      	str	r2, [r3, #8]
}
 8007b68:	bf00      	nop
 8007b6a:	3714      	adds	r7, #20
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr

08007b74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b087      	sub	sp, #28
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	60f8      	str	r0, [r7, #12]
 8007b7c:	60b9      	str	r1, [r7, #8]
 8007b7e:	607a      	str	r2, [r7, #4]
 8007b80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007b8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	021a      	lsls	r2, r3, #8
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	431a      	orrs	r2, r3
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	697a      	ldr	r2, [r7, #20]
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	697a      	ldr	r2, [r7, #20]
 8007ba6:	609a      	str	r2, [r3, #8]
}
 8007ba8:	bf00      	nop
 8007baa:	371c      	adds	r7, #28
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr

08007bb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b085      	sub	sp, #20
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d101      	bne.n	8007bcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007bc8:	2302      	movs	r3, #2
 8007bca:	e068      	b.n	8007c9e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2202      	movs	r2, #2
 8007bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	689b      	ldr	r3, [r3, #8]
 8007bea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a2e      	ldr	r2, [pc, #184]	@ (8007cac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d004      	beq.n	8007c00 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a2d      	ldr	r2, [pc, #180]	@ (8007cb0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d108      	bne.n	8007c12 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007c06:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	68fa      	ldr	r2, [r7, #12]
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c18:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	68fa      	ldr	r2, [r7, #12]
 8007c20:	4313      	orrs	r3, r2
 8007c22:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	68fa      	ldr	r2, [r7, #12]
 8007c2a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a1e      	ldr	r2, [pc, #120]	@ (8007cac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d01d      	beq.n	8007c72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c3e:	d018      	beq.n	8007c72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a1b      	ldr	r2, [pc, #108]	@ (8007cb4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d013      	beq.n	8007c72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a1a      	ldr	r2, [pc, #104]	@ (8007cb8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d00e      	beq.n	8007c72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a18      	ldr	r2, [pc, #96]	@ (8007cbc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d009      	beq.n	8007c72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a13      	ldr	r2, [pc, #76]	@ (8007cb0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d004      	beq.n	8007c72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a14      	ldr	r2, [pc, #80]	@ (8007cc0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d10c      	bne.n	8007c8c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	68ba      	ldr	r2, [r7, #8]
 8007c80:	4313      	orrs	r3, r2
 8007c82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	68ba      	ldr	r2, [r7, #8]
 8007c8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2200      	movs	r2, #0
 8007c98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007c9c:	2300      	movs	r3, #0
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3714      	adds	r7, #20
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr
 8007caa:	bf00      	nop
 8007cac:	40012c00 	.word	0x40012c00
 8007cb0:	40013400 	.word	0x40013400
 8007cb4:	40000400 	.word	0x40000400
 8007cb8:	40000800 	.word	0x40000800
 8007cbc:	40000c00 	.word	0x40000c00
 8007cc0:	40014000 	.word	0x40014000

08007cc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b083      	sub	sp, #12
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ccc:	bf00      	nop
 8007cce:	370c      	adds	r7, #12
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr

08007cd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ce0:	bf00      	nop
 8007ce2:	370c      	adds	r7, #12
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr

08007cec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b083      	sub	sp, #12
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007cf4:	bf00      	nop
 8007cf6:	370c      	adds	r7, #12
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr

08007d00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b082      	sub	sp, #8
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d101      	bne.n	8007d12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	e040      	b.n	8007d94 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d106      	bne.n	8007d28 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f7fb fd9e 	bl	8003864 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2224      	movs	r2, #36	@ 0x24
 8007d2c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f022 0201 	bic.w	r2, r2, #1
 8007d3c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d002      	beq.n	8007d4c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 fec0 	bl	8008acc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 fc05 	bl	800855c <UART_SetConfig>
 8007d52:	4603      	mov	r3, r0
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d101      	bne.n	8007d5c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	e01b      	b.n	8007d94 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	685a      	ldr	r2, [r3, #4]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007d6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	689a      	ldr	r2, [r3, #8]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007d7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f042 0201 	orr.w	r2, r2, #1
 8007d8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f000 ff3f 	bl	8008c10 <UART_CheckIdleState>
 8007d92:	4603      	mov	r3, r0
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3708      	adds	r7, #8
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b08a      	sub	sp, #40	@ 0x28
 8007da0:	af02      	add	r7, sp, #8
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	60b9      	str	r1, [r7, #8]
 8007da6:	603b      	str	r3, [r7, #0]
 8007da8:	4613      	mov	r3, r2
 8007daa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007db0:	2b20      	cmp	r3, #32
 8007db2:	d177      	bne.n	8007ea4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d002      	beq.n	8007dc0 <HAL_UART_Transmit+0x24>
 8007dba:	88fb      	ldrh	r3, [r7, #6]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d101      	bne.n	8007dc4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	e070      	b.n	8007ea6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2221      	movs	r2, #33	@ 0x21
 8007dd0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007dd2:	f7fb ffa3 	bl	8003d1c <HAL_GetTick>
 8007dd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	88fa      	ldrh	r2, [r7, #6]
 8007ddc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	88fa      	ldrh	r2, [r7, #6]
 8007de4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007df0:	d108      	bne.n	8007e04 <HAL_UART_Transmit+0x68>
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	691b      	ldr	r3, [r3, #16]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d104      	bne.n	8007e04 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	61bb      	str	r3, [r7, #24]
 8007e02:	e003      	b.n	8007e0c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007e0c:	e02f      	b.n	8007e6e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	9300      	str	r3, [sp, #0]
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	2200      	movs	r2, #0
 8007e16:	2180      	movs	r1, #128	@ 0x80
 8007e18:	68f8      	ldr	r0, [r7, #12]
 8007e1a:	f000 ffa1 	bl	8008d60 <UART_WaitOnFlagUntilTimeout>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d004      	beq.n	8007e2e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2220      	movs	r2, #32
 8007e28:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8007e2a:	2303      	movs	r3, #3
 8007e2c:	e03b      	b.n	8007ea6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8007e2e:	69fb      	ldr	r3, [r7, #28]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d10b      	bne.n	8007e4c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007e34:	69bb      	ldr	r3, [r7, #24]
 8007e36:	881a      	ldrh	r2, [r3, #0]
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e40:	b292      	uxth	r2, r2
 8007e42:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007e44:	69bb      	ldr	r3, [r7, #24]
 8007e46:	3302      	adds	r3, #2
 8007e48:	61bb      	str	r3, [r7, #24]
 8007e4a:	e007      	b.n	8007e5c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e4c:	69fb      	ldr	r3, [r7, #28]
 8007e4e:	781a      	ldrb	r2, [r3, #0]
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007e56:	69fb      	ldr	r3, [r7, #28]
 8007e58:	3301      	adds	r3, #1
 8007e5a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007e62:	b29b      	uxth	r3, r3
 8007e64:	3b01      	subs	r3, #1
 8007e66:	b29a      	uxth	r2, r3
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007e74:	b29b      	uxth	r3, r3
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d1c9      	bne.n	8007e0e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	9300      	str	r3, [sp, #0]
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	2200      	movs	r2, #0
 8007e82:	2140      	movs	r1, #64	@ 0x40
 8007e84:	68f8      	ldr	r0, [r7, #12]
 8007e86:	f000 ff6b 	bl	8008d60 <UART_WaitOnFlagUntilTimeout>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d004      	beq.n	8007e9a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2220      	movs	r2, #32
 8007e94:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8007e96:	2303      	movs	r3, #3
 8007e98:	e005      	b.n	8007ea6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2220      	movs	r2, #32
 8007e9e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	e000      	b.n	8007ea6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007ea4:	2302      	movs	r3, #2
  }
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3720      	adds	r7, #32
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
	...

08007eb0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b08a      	sub	sp, #40	@ 0x28
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	60f8      	str	r0, [r7, #12]
 8007eb8:	60b9      	str	r1, [r7, #8]
 8007eba:	4613      	mov	r3, r2
 8007ebc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ec4:	2b20      	cmp	r3, #32
 8007ec6:	d137      	bne.n	8007f38 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d002      	beq.n	8007ed4 <HAL_UART_Receive_IT+0x24>
 8007ece:	88fb      	ldrh	r3, [r7, #6]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d101      	bne.n	8007ed8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	e030      	b.n	8007f3a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2200      	movs	r2, #0
 8007edc:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a18      	ldr	r2, [pc, #96]	@ (8007f44 <HAL_UART_Receive_IT+0x94>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d01f      	beq.n	8007f28 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d018      	beq.n	8007f28 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	e853 3f00 	ldrex	r3, [r3]
 8007f02:	613b      	str	r3, [r7, #16]
   return(result);
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007f0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	461a      	mov	r2, r3
 8007f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f14:	623b      	str	r3, [r7, #32]
 8007f16:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f18:	69f9      	ldr	r1, [r7, #28]
 8007f1a:	6a3a      	ldr	r2, [r7, #32]
 8007f1c:	e841 2300 	strex	r3, r2, [r1]
 8007f20:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f22:	69bb      	ldr	r3, [r7, #24]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d1e6      	bne.n	8007ef6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007f28:	88fb      	ldrh	r3, [r7, #6]
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	68b9      	ldr	r1, [r7, #8]
 8007f2e:	68f8      	ldr	r0, [r7, #12]
 8007f30:	f000 ff7e 	bl	8008e30 <UART_Start_Receive_IT>
 8007f34:	4603      	mov	r3, r0
 8007f36:	e000      	b.n	8007f3a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007f38:	2302      	movs	r3, #2
  }
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3728      	adds	r7, #40	@ 0x28
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}
 8007f42:	bf00      	nop
 8007f44:	40008000 	.word	0x40008000

08007f48 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b0ba      	sub	sp, #232	@ 0xe8
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	69db      	ldr	r3, [r3, #28]
 8007f56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007f6e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007f72:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007f76:	4013      	ands	r3, r2
 8007f78:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007f7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d115      	bne.n	8007fb0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007f84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f88:	f003 0320 	and.w	r3, r3, #32
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d00f      	beq.n	8007fb0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007f90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f94:	f003 0320 	and.w	r3, r3, #32
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d009      	beq.n	8007fb0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	f000 82ae 	beq.w	8008502 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	4798      	blx	r3
      }
      return;
 8007fae:	e2a8      	b.n	8008502 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007fb0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	f000 8117 	beq.w	80081e8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007fba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007fbe:	f003 0301 	and.w	r3, r3, #1
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d106      	bne.n	8007fd4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007fc6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007fca:	4b85      	ldr	r3, [pc, #532]	@ (80081e0 <HAL_UART_IRQHandler+0x298>)
 8007fcc:	4013      	ands	r3, r2
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	f000 810a 	beq.w	80081e8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007fd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fd8:	f003 0301 	and.w	r3, r3, #1
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d011      	beq.n	8008004 <HAL_UART_IRQHandler+0xbc>
 8007fe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fe4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d00b      	beq.n	8008004 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ffa:	f043 0201 	orr.w	r2, r3, #1
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008008:	f003 0302 	and.w	r3, r3, #2
 800800c:	2b00      	cmp	r3, #0
 800800e:	d011      	beq.n	8008034 <HAL_UART_IRQHandler+0xec>
 8008010:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008014:	f003 0301 	and.w	r3, r3, #1
 8008018:	2b00      	cmp	r3, #0
 800801a:	d00b      	beq.n	8008034 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	2202      	movs	r2, #2
 8008022:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800802a:	f043 0204 	orr.w	r2, r3, #4
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008038:	f003 0304 	and.w	r3, r3, #4
 800803c:	2b00      	cmp	r3, #0
 800803e:	d011      	beq.n	8008064 <HAL_UART_IRQHandler+0x11c>
 8008040:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008044:	f003 0301 	and.w	r3, r3, #1
 8008048:	2b00      	cmp	r3, #0
 800804a:	d00b      	beq.n	8008064 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	2204      	movs	r2, #4
 8008052:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800805a:	f043 0202 	orr.w	r2, r3, #2
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008068:	f003 0308 	and.w	r3, r3, #8
 800806c:	2b00      	cmp	r3, #0
 800806e:	d017      	beq.n	80080a0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008074:	f003 0320 	and.w	r3, r3, #32
 8008078:	2b00      	cmp	r3, #0
 800807a:	d105      	bne.n	8008088 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800807c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008080:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008084:	2b00      	cmp	r3, #0
 8008086:	d00b      	beq.n	80080a0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	2208      	movs	r2, #8
 800808e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008096:	f043 0208 	orr.w	r2, r3, #8
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80080a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d012      	beq.n	80080d2 <HAL_UART_IRQHandler+0x18a>
 80080ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080b0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d00c      	beq.n	80080d2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80080c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80080c8:	f043 0220 	orr.w	r2, r3, #32
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80080d8:	2b00      	cmp	r3, #0
 80080da:	f000 8214 	beq.w	8008506 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80080de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080e2:	f003 0320 	and.w	r3, r3, #32
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d00d      	beq.n	8008106 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80080ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080ee:	f003 0320 	and.w	r3, r3, #32
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d007      	beq.n	8008106 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d003      	beq.n	8008106 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800810c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	689b      	ldr	r3, [r3, #8]
 8008116:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800811a:	2b40      	cmp	r3, #64	@ 0x40
 800811c:	d005      	beq.n	800812a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800811e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008122:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008126:	2b00      	cmp	r3, #0
 8008128:	d04f      	beq.n	80081ca <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 ff46 	bl	8008fbc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	689b      	ldr	r3, [r3, #8]
 8008136:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800813a:	2b40      	cmp	r3, #64	@ 0x40
 800813c:	d141      	bne.n	80081c2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	3308      	adds	r3, #8
 8008144:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008148:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800814c:	e853 3f00 	ldrex	r3, [r3]
 8008150:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008154:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008158:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800815c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	3308      	adds	r3, #8
 8008166:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800816a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800816e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008172:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008176:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800817a:	e841 2300 	strex	r3, r2, [r1]
 800817e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008182:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008186:	2b00      	cmp	r3, #0
 8008188:	d1d9      	bne.n	800813e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800818e:	2b00      	cmp	r3, #0
 8008190:	d013      	beq.n	80081ba <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008196:	4a13      	ldr	r2, [pc, #76]	@ (80081e4 <HAL_UART_IRQHandler+0x29c>)
 8008198:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800819e:	4618      	mov	r0, r3
 80081a0:	f7fc f855 	bl	800424e <HAL_DMA_Abort_IT>
 80081a4:	4603      	mov	r3, r0
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d017      	beq.n	80081da <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081b0:	687a      	ldr	r2, [r7, #4]
 80081b2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80081b4:	4610      	mov	r0, r2
 80081b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081b8:	e00f      	b.n	80081da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 f9b8 	bl	8008530 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081c0:	e00b      	b.n	80081da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 f9b4 	bl	8008530 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081c8:	e007      	b.n	80081da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 f9b0 	bl	8008530 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2200      	movs	r2, #0
 80081d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80081d8:	e195      	b.n	8008506 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081da:	bf00      	nop
    return;
 80081dc:	e193      	b.n	8008506 <HAL_UART_IRQHandler+0x5be>
 80081de:	bf00      	nop
 80081e0:	04000120 	.word	0x04000120
 80081e4:	08009085 	.word	0x08009085

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	f040 814e 	bne.w	800848e <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80081f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081f6:	f003 0310 	and.w	r3, r3, #16
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	f000 8147 	beq.w	800848e <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008204:	f003 0310 	and.w	r3, r3, #16
 8008208:	2b00      	cmp	r3, #0
 800820a:	f000 8140 	beq.w	800848e <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	2210      	movs	r2, #16
 8008214:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008220:	2b40      	cmp	r3, #64	@ 0x40
 8008222:	f040 80b8 	bne.w	8008396 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008232:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008236:	2b00      	cmp	r3, #0
 8008238:	f000 8167 	beq.w	800850a <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008242:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008246:	429a      	cmp	r2, r3
 8008248:	f080 815f 	bcs.w	800850a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008252:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f003 0320 	and.w	r3, r3, #32
 8008262:	2b00      	cmp	r3, #0
 8008264:	f040 8086 	bne.w	8008374 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008270:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008274:	e853 3f00 	ldrex	r3, [r3]
 8008278:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800827c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008280:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008284:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	461a      	mov	r2, r3
 800828e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008292:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008296:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800829a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800829e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80082a2:	e841 2300 	strex	r3, r2, [r1]
 80082a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80082aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d1da      	bne.n	8008268 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	3308      	adds	r3, #8
 80082b8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80082bc:	e853 3f00 	ldrex	r3, [r3]
 80082c0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80082c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80082c4:	f023 0301 	bic.w	r3, r3, #1
 80082c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	3308      	adds	r3, #8
 80082d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80082d6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80082da:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082dc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80082de:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80082e2:	e841 2300 	strex	r3, r2, [r1]
 80082e6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80082e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d1e1      	bne.n	80082b2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	3308      	adds	r3, #8
 80082f4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80082f8:	e853 3f00 	ldrex	r3, [r3]
 80082fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80082fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008300:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008304:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	3308      	adds	r3, #8
 800830e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008312:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008314:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008316:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008318:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800831a:	e841 2300 	strex	r3, r2, [r1]
 800831e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008320:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008322:	2b00      	cmp	r3, #0
 8008324:	d1e3      	bne.n	80082ee <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2220      	movs	r2, #32
 800832a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2200      	movs	r2, #0
 8008332:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800833a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800833c:	e853 3f00 	ldrex	r3, [r3]
 8008340:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008342:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008344:	f023 0310 	bic.w	r3, r3, #16
 8008348:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	461a      	mov	r2, r3
 8008352:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008356:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008358:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800835a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800835c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800835e:	e841 2300 	strex	r3, r2, [r1]
 8008362:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008364:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008366:	2b00      	cmp	r3, #0
 8008368:	d1e4      	bne.n	8008334 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800836e:	4618      	mov	r0, r3
 8008370:	f7fb ff2f 	bl	80041d2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2202      	movs	r2, #2
 8008378:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008386:	b29b      	uxth	r3, r3
 8008388:	1ad3      	subs	r3, r2, r3
 800838a:	b29b      	uxth	r3, r3
 800838c:	4619      	mov	r1, r3
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 f8d8 	bl	8008544 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008394:	e0b9      	b.n	800850a <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80083a2:	b29b      	uxth	r3, r3
 80083a4:	1ad3      	subs	r3, r2, r3
 80083a6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	f000 80ab 	beq.w	800850e <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 80083b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80083bc:	2b00      	cmp	r3, #0
 80083be:	f000 80a6 	beq.w	800850e <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083ca:	e853 3f00 	ldrex	r3, [r3]
 80083ce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80083d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80083d6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	461a      	mov	r2, r3
 80083e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80083e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80083e6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80083ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80083ec:	e841 2300 	strex	r3, r2, [r1]
 80083f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80083f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d1e4      	bne.n	80083c2 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	3308      	adds	r3, #8
 80083fe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008402:	e853 3f00 	ldrex	r3, [r3]
 8008406:	623b      	str	r3, [r7, #32]
   return(result);
 8008408:	6a3b      	ldr	r3, [r7, #32]
 800840a:	f023 0301 	bic.w	r3, r3, #1
 800840e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	3308      	adds	r3, #8
 8008418:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800841c:	633a      	str	r2, [r7, #48]	@ 0x30
 800841e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008420:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008422:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008424:	e841 2300 	strex	r3, r2, [r1]
 8008428:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800842a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800842c:	2b00      	cmp	r3, #0
 800842e:	d1e3      	bne.n	80083f8 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2220      	movs	r2, #32
 8008434:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2200      	movs	r2, #0
 800843c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2200      	movs	r2, #0
 8008442:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	e853 3f00 	ldrex	r3, [r3]
 8008450:	60fb      	str	r3, [r7, #12]
   return(result);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	f023 0310 	bic.w	r3, r3, #16
 8008458:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	461a      	mov	r2, r3
 8008462:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008466:	61fb      	str	r3, [r7, #28]
 8008468:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800846a:	69b9      	ldr	r1, [r7, #24]
 800846c:	69fa      	ldr	r2, [r7, #28]
 800846e:	e841 2300 	strex	r3, r2, [r1]
 8008472:	617b      	str	r3, [r7, #20]
   return(result);
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d1e4      	bne.n	8008444 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2202      	movs	r2, #2
 800847e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008480:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008484:	4619      	mov	r1, r3
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 f85c 	bl	8008544 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800848c:	e03f      	b.n	800850e <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800848e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008492:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008496:	2b00      	cmp	r3, #0
 8008498:	d00e      	beq.n	80084b8 <HAL_UART_IRQHandler+0x570>
 800849a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800849e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d008      	beq.n	80084b8 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80084ae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f000 ffe3 	bl	800947c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80084b6:	e02d      	b.n	8008514 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80084b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d00e      	beq.n	80084e2 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80084c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d008      	beq.n	80084e2 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d01c      	beq.n	8008512 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	4798      	blx	r3
    }
    return;
 80084e0:	e017      	b.n	8008512 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80084e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d012      	beq.n	8008514 <HAL_UART_IRQHandler+0x5cc>
 80084ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d00c      	beq.n	8008514 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 fdd8 	bl	80090b0 <UART_EndTransmit_IT>
    return;
 8008500:	e008      	b.n	8008514 <HAL_UART_IRQHandler+0x5cc>
      return;
 8008502:	bf00      	nop
 8008504:	e006      	b.n	8008514 <HAL_UART_IRQHandler+0x5cc>
    return;
 8008506:	bf00      	nop
 8008508:	e004      	b.n	8008514 <HAL_UART_IRQHandler+0x5cc>
      return;
 800850a:	bf00      	nop
 800850c:	e002      	b.n	8008514 <HAL_UART_IRQHandler+0x5cc>
      return;
 800850e:	bf00      	nop
 8008510:	e000      	b.n	8008514 <HAL_UART_IRQHandler+0x5cc>
    return;
 8008512:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8008514:	37e8      	adds	r7, #232	@ 0xe8
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}
 800851a:	bf00      	nop

0800851c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800851c:	b480      	push	{r7}
 800851e:	b083      	sub	sp, #12
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008524:	bf00      	nop
 8008526:	370c      	adds	r7, #12
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr

08008530 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008530:	b480      	push	{r7}
 8008532:	b083      	sub	sp, #12
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008538:	bf00      	nop
 800853a:	370c      	adds	r7, #12
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr

08008544 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008544:	b480      	push	{r7}
 8008546:	b083      	sub	sp, #12
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
 800854c:	460b      	mov	r3, r1
 800854e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008550:	bf00      	nop
 8008552:	370c      	adds	r7, #12
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr

0800855c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800855c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008560:	b08a      	sub	sp, #40	@ 0x28
 8008562:	af00      	add	r7, sp, #0
 8008564:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008566:	2300      	movs	r3, #0
 8008568:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	689a      	ldr	r2, [r3, #8]
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	691b      	ldr	r3, [r3, #16]
 8008574:	431a      	orrs	r2, r3
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	695b      	ldr	r3, [r3, #20]
 800857a:	431a      	orrs	r2, r3
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	69db      	ldr	r3, [r3, #28]
 8008580:	4313      	orrs	r3, r2
 8008582:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	681a      	ldr	r2, [r3, #0]
 800858a:	4ba4      	ldr	r3, [pc, #656]	@ (800881c <UART_SetConfig+0x2c0>)
 800858c:	4013      	ands	r3, r2
 800858e:	68fa      	ldr	r2, [r7, #12]
 8008590:	6812      	ldr	r2, [r2, #0]
 8008592:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008594:	430b      	orrs	r3, r1
 8008596:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	68da      	ldr	r2, [r3, #12]
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	430a      	orrs	r2, r1
 80085ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	699b      	ldr	r3, [r3, #24]
 80085b2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a99      	ldr	r2, [pc, #612]	@ (8008820 <UART_SetConfig+0x2c4>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d004      	beq.n	80085c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	6a1b      	ldr	r3, [r3, #32]
 80085c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085c4:	4313      	orrs	r3, r2
 80085c6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	689b      	ldr	r3, [r3, #8]
 80085ce:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085d8:	430a      	orrs	r2, r1
 80085da:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a90      	ldr	r2, [pc, #576]	@ (8008824 <UART_SetConfig+0x2c8>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d126      	bne.n	8008634 <UART_SetConfig+0xd8>
 80085e6:	4b90      	ldr	r3, [pc, #576]	@ (8008828 <UART_SetConfig+0x2cc>)
 80085e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085ec:	f003 0303 	and.w	r3, r3, #3
 80085f0:	2b03      	cmp	r3, #3
 80085f2:	d81b      	bhi.n	800862c <UART_SetConfig+0xd0>
 80085f4:	a201      	add	r2, pc, #4	@ (adr r2, 80085fc <UART_SetConfig+0xa0>)
 80085f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085fa:	bf00      	nop
 80085fc:	0800860d 	.word	0x0800860d
 8008600:	0800861d 	.word	0x0800861d
 8008604:	08008615 	.word	0x08008615
 8008608:	08008625 	.word	0x08008625
 800860c:	2301      	movs	r3, #1
 800860e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008612:	e116      	b.n	8008842 <UART_SetConfig+0x2e6>
 8008614:	2302      	movs	r3, #2
 8008616:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800861a:	e112      	b.n	8008842 <UART_SetConfig+0x2e6>
 800861c:	2304      	movs	r3, #4
 800861e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008622:	e10e      	b.n	8008842 <UART_SetConfig+0x2e6>
 8008624:	2308      	movs	r3, #8
 8008626:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800862a:	e10a      	b.n	8008842 <UART_SetConfig+0x2e6>
 800862c:	2310      	movs	r3, #16
 800862e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008632:	e106      	b.n	8008842 <UART_SetConfig+0x2e6>
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a7c      	ldr	r2, [pc, #496]	@ (800882c <UART_SetConfig+0x2d0>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d138      	bne.n	80086b0 <UART_SetConfig+0x154>
 800863e:	4b7a      	ldr	r3, [pc, #488]	@ (8008828 <UART_SetConfig+0x2cc>)
 8008640:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008644:	f003 030c 	and.w	r3, r3, #12
 8008648:	2b0c      	cmp	r3, #12
 800864a:	d82d      	bhi.n	80086a8 <UART_SetConfig+0x14c>
 800864c:	a201      	add	r2, pc, #4	@ (adr r2, 8008654 <UART_SetConfig+0xf8>)
 800864e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008652:	bf00      	nop
 8008654:	08008689 	.word	0x08008689
 8008658:	080086a9 	.word	0x080086a9
 800865c:	080086a9 	.word	0x080086a9
 8008660:	080086a9 	.word	0x080086a9
 8008664:	08008699 	.word	0x08008699
 8008668:	080086a9 	.word	0x080086a9
 800866c:	080086a9 	.word	0x080086a9
 8008670:	080086a9 	.word	0x080086a9
 8008674:	08008691 	.word	0x08008691
 8008678:	080086a9 	.word	0x080086a9
 800867c:	080086a9 	.word	0x080086a9
 8008680:	080086a9 	.word	0x080086a9
 8008684:	080086a1 	.word	0x080086a1
 8008688:	2300      	movs	r3, #0
 800868a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800868e:	e0d8      	b.n	8008842 <UART_SetConfig+0x2e6>
 8008690:	2302      	movs	r3, #2
 8008692:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008696:	e0d4      	b.n	8008842 <UART_SetConfig+0x2e6>
 8008698:	2304      	movs	r3, #4
 800869a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800869e:	e0d0      	b.n	8008842 <UART_SetConfig+0x2e6>
 80086a0:	2308      	movs	r3, #8
 80086a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086a6:	e0cc      	b.n	8008842 <UART_SetConfig+0x2e6>
 80086a8:	2310      	movs	r3, #16
 80086aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086ae:	e0c8      	b.n	8008842 <UART_SetConfig+0x2e6>
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a5e      	ldr	r2, [pc, #376]	@ (8008830 <UART_SetConfig+0x2d4>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d125      	bne.n	8008706 <UART_SetConfig+0x1aa>
 80086ba:	4b5b      	ldr	r3, [pc, #364]	@ (8008828 <UART_SetConfig+0x2cc>)
 80086bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086c0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80086c4:	2b30      	cmp	r3, #48	@ 0x30
 80086c6:	d016      	beq.n	80086f6 <UART_SetConfig+0x19a>
 80086c8:	2b30      	cmp	r3, #48	@ 0x30
 80086ca:	d818      	bhi.n	80086fe <UART_SetConfig+0x1a2>
 80086cc:	2b20      	cmp	r3, #32
 80086ce:	d00a      	beq.n	80086e6 <UART_SetConfig+0x18a>
 80086d0:	2b20      	cmp	r3, #32
 80086d2:	d814      	bhi.n	80086fe <UART_SetConfig+0x1a2>
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d002      	beq.n	80086de <UART_SetConfig+0x182>
 80086d8:	2b10      	cmp	r3, #16
 80086da:	d008      	beq.n	80086ee <UART_SetConfig+0x192>
 80086dc:	e00f      	b.n	80086fe <UART_SetConfig+0x1a2>
 80086de:	2300      	movs	r3, #0
 80086e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086e4:	e0ad      	b.n	8008842 <UART_SetConfig+0x2e6>
 80086e6:	2302      	movs	r3, #2
 80086e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086ec:	e0a9      	b.n	8008842 <UART_SetConfig+0x2e6>
 80086ee:	2304      	movs	r3, #4
 80086f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086f4:	e0a5      	b.n	8008842 <UART_SetConfig+0x2e6>
 80086f6:	2308      	movs	r3, #8
 80086f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086fc:	e0a1      	b.n	8008842 <UART_SetConfig+0x2e6>
 80086fe:	2310      	movs	r3, #16
 8008700:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008704:	e09d      	b.n	8008842 <UART_SetConfig+0x2e6>
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a4a      	ldr	r2, [pc, #296]	@ (8008834 <UART_SetConfig+0x2d8>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d125      	bne.n	800875c <UART_SetConfig+0x200>
 8008710:	4b45      	ldr	r3, [pc, #276]	@ (8008828 <UART_SetConfig+0x2cc>)
 8008712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008716:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800871a:	2bc0      	cmp	r3, #192	@ 0xc0
 800871c:	d016      	beq.n	800874c <UART_SetConfig+0x1f0>
 800871e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008720:	d818      	bhi.n	8008754 <UART_SetConfig+0x1f8>
 8008722:	2b80      	cmp	r3, #128	@ 0x80
 8008724:	d00a      	beq.n	800873c <UART_SetConfig+0x1e0>
 8008726:	2b80      	cmp	r3, #128	@ 0x80
 8008728:	d814      	bhi.n	8008754 <UART_SetConfig+0x1f8>
 800872a:	2b00      	cmp	r3, #0
 800872c:	d002      	beq.n	8008734 <UART_SetConfig+0x1d8>
 800872e:	2b40      	cmp	r3, #64	@ 0x40
 8008730:	d008      	beq.n	8008744 <UART_SetConfig+0x1e8>
 8008732:	e00f      	b.n	8008754 <UART_SetConfig+0x1f8>
 8008734:	2300      	movs	r3, #0
 8008736:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800873a:	e082      	b.n	8008842 <UART_SetConfig+0x2e6>
 800873c:	2302      	movs	r3, #2
 800873e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008742:	e07e      	b.n	8008842 <UART_SetConfig+0x2e6>
 8008744:	2304      	movs	r3, #4
 8008746:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800874a:	e07a      	b.n	8008842 <UART_SetConfig+0x2e6>
 800874c:	2308      	movs	r3, #8
 800874e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008752:	e076      	b.n	8008842 <UART_SetConfig+0x2e6>
 8008754:	2310      	movs	r3, #16
 8008756:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800875a:	e072      	b.n	8008842 <UART_SetConfig+0x2e6>
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a35      	ldr	r2, [pc, #212]	@ (8008838 <UART_SetConfig+0x2dc>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d12a      	bne.n	80087bc <UART_SetConfig+0x260>
 8008766:	4b30      	ldr	r3, [pc, #192]	@ (8008828 <UART_SetConfig+0x2cc>)
 8008768:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800876c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008770:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008774:	d01a      	beq.n	80087ac <UART_SetConfig+0x250>
 8008776:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800877a:	d81b      	bhi.n	80087b4 <UART_SetConfig+0x258>
 800877c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008780:	d00c      	beq.n	800879c <UART_SetConfig+0x240>
 8008782:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008786:	d815      	bhi.n	80087b4 <UART_SetConfig+0x258>
 8008788:	2b00      	cmp	r3, #0
 800878a:	d003      	beq.n	8008794 <UART_SetConfig+0x238>
 800878c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008790:	d008      	beq.n	80087a4 <UART_SetConfig+0x248>
 8008792:	e00f      	b.n	80087b4 <UART_SetConfig+0x258>
 8008794:	2300      	movs	r3, #0
 8008796:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800879a:	e052      	b.n	8008842 <UART_SetConfig+0x2e6>
 800879c:	2302      	movs	r3, #2
 800879e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80087a2:	e04e      	b.n	8008842 <UART_SetConfig+0x2e6>
 80087a4:	2304      	movs	r3, #4
 80087a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80087aa:	e04a      	b.n	8008842 <UART_SetConfig+0x2e6>
 80087ac:	2308      	movs	r3, #8
 80087ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80087b2:	e046      	b.n	8008842 <UART_SetConfig+0x2e6>
 80087b4:	2310      	movs	r3, #16
 80087b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80087ba:	e042      	b.n	8008842 <UART_SetConfig+0x2e6>
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a17      	ldr	r2, [pc, #92]	@ (8008820 <UART_SetConfig+0x2c4>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d13a      	bne.n	800883c <UART_SetConfig+0x2e0>
 80087c6:	4b18      	ldr	r3, [pc, #96]	@ (8008828 <UART_SetConfig+0x2cc>)
 80087c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087cc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80087d0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80087d4:	d01a      	beq.n	800880c <UART_SetConfig+0x2b0>
 80087d6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80087da:	d81b      	bhi.n	8008814 <UART_SetConfig+0x2b8>
 80087dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80087e0:	d00c      	beq.n	80087fc <UART_SetConfig+0x2a0>
 80087e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80087e6:	d815      	bhi.n	8008814 <UART_SetConfig+0x2b8>
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d003      	beq.n	80087f4 <UART_SetConfig+0x298>
 80087ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087f0:	d008      	beq.n	8008804 <UART_SetConfig+0x2a8>
 80087f2:	e00f      	b.n	8008814 <UART_SetConfig+0x2b8>
 80087f4:	2300      	movs	r3, #0
 80087f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80087fa:	e022      	b.n	8008842 <UART_SetConfig+0x2e6>
 80087fc:	2302      	movs	r3, #2
 80087fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008802:	e01e      	b.n	8008842 <UART_SetConfig+0x2e6>
 8008804:	2304      	movs	r3, #4
 8008806:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800880a:	e01a      	b.n	8008842 <UART_SetConfig+0x2e6>
 800880c:	2308      	movs	r3, #8
 800880e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008812:	e016      	b.n	8008842 <UART_SetConfig+0x2e6>
 8008814:	2310      	movs	r3, #16
 8008816:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800881a:	e012      	b.n	8008842 <UART_SetConfig+0x2e6>
 800881c:	efff69f3 	.word	0xefff69f3
 8008820:	40008000 	.word	0x40008000
 8008824:	40013800 	.word	0x40013800
 8008828:	40021000 	.word	0x40021000
 800882c:	40004400 	.word	0x40004400
 8008830:	40004800 	.word	0x40004800
 8008834:	40004c00 	.word	0x40004c00
 8008838:	40005000 	.word	0x40005000
 800883c:	2310      	movs	r3, #16
 800883e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4a9f      	ldr	r2, [pc, #636]	@ (8008ac4 <UART_SetConfig+0x568>)
 8008848:	4293      	cmp	r3, r2
 800884a:	d17a      	bne.n	8008942 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800884c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008850:	2b08      	cmp	r3, #8
 8008852:	d824      	bhi.n	800889e <UART_SetConfig+0x342>
 8008854:	a201      	add	r2, pc, #4	@ (adr r2, 800885c <UART_SetConfig+0x300>)
 8008856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800885a:	bf00      	nop
 800885c:	08008881 	.word	0x08008881
 8008860:	0800889f 	.word	0x0800889f
 8008864:	08008889 	.word	0x08008889
 8008868:	0800889f 	.word	0x0800889f
 800886c:	0800888f 	.word	0x0800888f
 8008870:	0800889f 	.word	0x0800889f
 8008874:	0800889f 	.word	0x0800889f
 8008878:	0800889f 	.word	0x0800889f
 800887c:	08008897 	.word	0x08008897
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008880:	f7fc fe7c 	bl	800557c <HAL_RCC_GetPCLK1Freq>
 8008884:	61f8      	str	r0, [r7, #28]
        break;
 8008886:	e010      	b.n	80088aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008888:	4b8f      	ldr	r3, [pc, #572]	@ (8008ac8 <UART_SetConfig+0x56c>)
 800888a:	61fb      	str	r3, [r7, #28]
        break;
 800888c:	e00d      	b.n	80088aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800888e:	f7fc fddd 	bl	800544c <HAL_RCC_GetSysClockFreq>
 8008892:	61f8      	str	r0, [r7, #28]
        break;
 8008894:	e009      	b.n	80088aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008896:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800889a:	61fb      	str	r3, [r7, #28]
        break;
 800889c:	e005      	b.n	80088aa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800889e:	2300      	movs	r3, #0
 80088a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80088a2:	2301      	movs	r3, #1
 80088a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80088a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80088aa:	69fb      	ldr	r3, [r7, #28]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	f000 80fb 	beq.w	8008aa8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	685a      	ldr	r2, [r3, #4]
 80088b6:	4613      	mov	r3, r2
 80088b8:	005b      	lsls	r3, r3, #1
 80088ba:	4413      	add	r3, r2
 80088bc:	69fa      	ldr	r2, [r7, #28]
 80088be:	429a      	cmp	r2, r3
 80088c0:	d305      	bcc.n	80088ce <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	685b      	ldr	r3, [r3, #4]
 80088c6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80088c8:	69fa      	ldr	r2, [r7, #28]
 80088ca:	429a      	cmp	r2, r3
 80088cc:	d903      	bls.n	80088d6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80088ce:	2301      	movs	r3, #1
 80088d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80088d4:	e0e8      	b.n	8008aa8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80088d6:	69fb      	ldr	r3, [r7, #28]
 80088d8:	2200      	movs	r2, #0
 80088da:	461c      	mov	r4, r3
 80088dc:	4615      	mov	r5, r2
 80088de:	f04f 0200 	mov.w	r2, #0
 80088e2:	f04f 0300 	mov.w	r3, #0
 80088e6:	022b      	lsls	r3, r5, #8
 80088e8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80088ec:	0222      	lsls	r2, r4, #8
 80088ee:	68f9      	ldr	r1, [r7, #12]
 80088f0:	6849      	ldr	r1, [r1, #4]
 80088f2:	0849      	lsrs	r1, r1, #1
 80088f4:	2000      	movs	r0, #0
 80088f6:	4688      	mov	r8, r1
 80088f8:	4681      	mov	r9, r0
 80088fa:	eb12 0a08 	adds.w	sl, r2, r8
 80088fe:	eb43 0b09 	adc.w	fp, r3, r9
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	2200      	movs	r2, #0
 8008908:	603b      	str	r3, [r7, #0]
 800890a:	607a      	str	r2, [r7, #4]
 800890c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008910:	4650      	mov	r0, sl
 8008912:	4659      	mov	r1, fp
 8008914:	f7f8 f958 	bl	8000bc8 <__aeabi_uldivmod>
 8008918:	4602      	mov	r2, r0
 800891a:	460b      	mov	r3, r1
 800891c:	4613      	mov	r3, r2
 800891e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008920:	69bb      	ldr	r3, [r7, #24]
 8008922:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008926:	d308      	bcc.n	800893a <UART_SetConfig+0x3de>
 8008928:	69bb      	ldr	r3, [r7, #24]
 800892a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800892e:	d204      	bcs.n	800893a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	69ba      	ldr	r2, [r7, #24]
 8008936:	60da      	str	r2, [r3, #12]
 8008938:	e0b6      	b.n	8008aa8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800893a:	2301      	movs	r3, #1
 800893c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008940:	e0b2      	b.n	8008aa8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	69db      	ldr	r3, [r3, #28]
 8008946:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800894a:	d15e      	bne.n	8008a0a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800894c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008950:	2b08      	cmp	r3, #8
 8008952:	d828      	bhi.n	80089a6 <UART_SetConfig+0x44a>
 8008954:	a201      	add	r2, pc, #4	@ (adr r2, 800895c <UART_SetConfig+0x400>)
 8008956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800895a:	bf00      	nop
 800895c:	08008981 	.word	0x08008981
 8008960:	08008989 	.word	0x08008989
 8008964:	08008991 	.word	0x08008991
 8008968:	080089a7 	.word	0x080089a7
 800896c:	08008997 	.word	0x08008997
 8008970:	080089a7 	.word	0x080089a7
 8008974:	080089a7 	.word	0x080089a7
 8008978:	080089a7 	.word	0x080089a7
 800897c:	0800899f 	.word	0x0800899f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008980:	f7fc fdfc 	bl	800557c <HAL_RCC_GetPCLK1Freq>
 8008984:	61f8      	str	r0, [r7, #28]
        break;
 8008986:	e014      	b.n	80089b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008988:	f7fc fe0e 	bl	80055a8 <HAL_RCC_GetPCLK2Freq>
 800898c:	61f8      	str	r0, [r7, #28]
        break;
 800898e:	e010      	b.n	80089b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008990:	4b4d      	ldr	r3, [pc, #308]	@ (8008ac8 <UART_SetConfig+0x56c>)
 8008992:	61fb      	str	r3, [r7, #28]
        break;
 8008994:	e00d      	b.n	80089b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008996:	f7fc fd59 	bl	800544c <HAL_RCC_GetSysClockFreq>
 800899a:	61f8      	str	r0, [r7, #28]
        break;
 800899c:	e009      	b.n	80089b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800899e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80089a2:	61fb      	str	r3, [r7, #28]
        break;
 80089a4:	e005      	b.n	80089b2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80089a6:	2300      	movs	r3, #0
 80089a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80089aa:	2301      	movs	r3, #1
 80089ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80089b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80089b2:	69fb      	ldr	r3, [r7, #28]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d077      	beq.n	8008aa8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80089b8:	69fb      	ldr	r3, [r7, #28]
 80089ba:	005a      	lsls	r2, r3, #1
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	085b      	lsrs	r3, r3, #1
 80089c2:	441a      	add	r2, r3
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80089cc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80089ce:	69bb      	ldr	r3, [r7, #24]
 80089d0:	2b0f      	cmp	r3, #15
 80089d2:	d916      	bls.n	8008a02 <UART_SetConfig+0x4a6>
 80089d4:	69bb      	ldr	r3, [r7, #24]
 80089d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80089da:	d212      	bcs.n	8008a02 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80089dc:	69bb      	ldr	r3, [r7, #24]
 80089de:	b29b      	uxth	r3, r3
 80089e0:	f023 030f 	bic.w	r3, r3, #15
 80089e4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80089e6:	69bb      	ldr	r3, [r7, #24]
 80089e8:	085b      	lsrs	r3, r3, #1
 80089ea:	b29b      	uxth	r3, r3
 80089ec:	f003 0307 	and.w	r3, r3, #7
 80089f0:	b29a      	uxth	r2, r3
 80089f2:	8afb      	ldrh	r3, [r7, #22]
 80089f4:	4313      	orrs	r3, r2
 80089f6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	8afa      	ldrh	r2, [r7, #22]
 80089fe:	60da      	str	r2, [r3, #12]
 8008a00:	e052      	b.n	8008aa8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008a02:	2301      	movs	r3, #1
 8008a04:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008a08:	e04e      	b.n	8008aa8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008a0a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008a0e:	2b08      	cmp	r3, #8
 8008a10:	d827      	bhi.n	8008a62 <UART_SetConfig+0x506>
 8008a12:	a201      	add	r2, pc, #4	@ (adr r2, 8008a18 <UART_SetConfig+0x4bc>)
 8008a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a18:	08008a3d 	.word	0x08008a3d
 8008a1c:	08008a45 	.word	0x08008a45
 8008a20:	08008a4d 	.word	0x08008a4d
 8008a24:	08008a63 	.word	0x08008a63
 8008a28:	08008a53 	.word	0x08008a53
 8008a2c:	08008a63 	.word	0x08008a63
 8008a30:	08008a63 	.word	0x08008a63
 8008a34:	08008a63 	.word	0x08008a63
 8008a38:	08008a5b 	.word	0x08008a5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a3c:	f7fc fd9e 	bl	800557c <HAL_RCC_GetPCLK1Freq>
 8008a40:	61f8      	str	r0, [r7, #28]
        break;
 8008a42:	e014      	b.n	8008a6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a44:	f7fc fdb0 	bl	80055a8 <HAL_RCC_GetPCLK2Freq>
 8008a48:	61f8      	str	r0, [r7, #28]
        break;
 8008a4a:	e010      	b.n	8008a6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a4c:	4b1e      	ldr	r3, [pc, #120]	@ (8008ac8 <UART_SetConfig+0x56c>)
 8008a4e:	61fb      	str	r3, [r7, #28]
        break;
 8008a50:	e00d      	b.n	8008a6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a52:	f7fc fcfb 	bl	800544c <HAL_RCC_GetSysClockFreq>
 8008a56:	61f8      	str	r0, [r7, #28]
        break;
 8008a58:	e009      	b.n	8008a6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a5e:	61fb      	str	r3, [r7, #28]
        break;
 8008a60:	e005      	b.n	8008a6e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8008a62:	2300      	movs	r3, #0
 8008a64:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008a66:	2301      	movs	r3, #1
 8008a68:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008a6c:	bf00      	nop
    }

    if (pclk != 0U)
 8008a6e:	69fb      	ldr	r3, [r7, #28]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d019      	beq.n	8008aa8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	685b      	ldr	r3, [r3, #4]
 8008a78:	085a      	lsrs	r2, r3, #1
 8008a7a:	69fb      	ldr	r3, [r7, #28]
 8008a7c:	441a      	add	r2, r3
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a86:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a88:	69bb      	ldr	r3, [r7, #24]
 8008a8a:	2b0f      	cmp	r3, #15
 8008a8c:	d909      	bls.n	8008aa2 <UART_SetConfig+0x546>
 8008a8e:	69bb      	ldr	r3, [r7, #24]
 8008a90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a94:	d205      	bcs.n	8008aa2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008a96:	69bb      	ldr	r3, [r7, #24]
 8008a98:	b29a      	uxth	r2, r3
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	60da      	str	r2, [r3, #12]
 8008aa0:	e002      	b.n	8008aa8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008ab4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3728      	adds	r7, #40	@ 0x28
 8008abc:	46bd      	mov	sp, r7
 8008abe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008ac2:	bf00      	nop
 8008ac4:	40008000 	.word	0x40008000
 8008ac8:	00f42400 	.word	0x00f42400

08008acc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b083      	sub	sp, #12
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ad8:	f003 0308 	and.w	r3, r3, #8
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d00a      	beq.n	8008af6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	685b      	ldr	r3, [r3, #4]
 8008ae6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	430a      	orrs	r2, r1
 8008af4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008afa:	f003 0301 	and.w	r3, r3, #1
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d00a      	beq.n	8008b18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	685b      	ldr	r3, [r3, #4]
 8008b08:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	430a      	orrs	r2, r1
 8008b16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b1c:	f003 0302 	and.w	r3, r3, #2
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d00a      	beq.n	8008b3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	430a      	orrs	r2, r1
 8008b38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b3e:	f003 0304 	and.w	r3, r3, #4
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d00a      	beq.n	8008b5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	430a      	orrs	r2, r1
 8008b5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b60:	f003 0310 	and.w	r3, r3, #16
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d00a      	beq.n	8008b7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	689b      	ldr	r3, [r3, #8]
 8008b6e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	430a      	orrs	r2, r1
 8008b7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b82:	f003 0320 	and.w	r3, r3, #32
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d00a      	beq.n	8008ba0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	689b      	ldr	r3, [r3, #8]
 8008b90:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	430a      	orrs	r2, r1
 8008b9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ba4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d01a      	beq.n	8008be2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	685b      	ldr	r3, [r3, #4]
 8008bb2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	430a      	orrs	r2, r1
 8008bc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bc6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008bca:	d10a      	bne.n	8008be2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	430a      	orrs	r2, r1
 8008be0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008be6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d00a      	beq.n	8008c04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	430a      	orrs	r2, r1
 8008c02:	605a      	str	r2, [r3, #4]
  }
}
 8008c04:	bf00      	nop
 8008c06:	370c      	adds	r7, #12
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	4770      	bx	lr

08008c10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b098      	sub	sp, #96	@ 0x60
 8008c14:	af02      	add	r7, sp, #8
 8008c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008c20:	f7fb f87c 	bl	8003d1c <HAL_GetTick>
 8008c24:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f003 0308 	and.w	r3, r3, #8
 8008c30:	2b08      	cmp	r3, #8
 8008c32:	d12e      	bne.n	8008c92 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c34:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008c38:	9300      	str	r3, [sp, #0]
 8008c3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 f88c 	bl	8008d60 <UART_WaitOnFlagUntilTimeout>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d021      	beq.n	8008c92 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c56:	e853 3f00 	ldrex	r3, [r3]
 8008c5a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008c5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008c62:	653b      	str	r3, [r7, #80]	@ 0x50
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	461a      	mov	r2, r3
 8008c6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c6e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c70:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008c72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c74:	e841 2300 	strex	r3, r2, [r1]
 8008c78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008c7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d1e6      	bne.n	8008c4e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2220      	movs	r2, #32
 8008c84:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c8e:	2303      	movs	r3, #3
 8008c90:	e062      	b.n	8008d58 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f003 0304 	and.w	r3, r3, #4
 8008c9c:	2b04      	cmp	r3, #4
 8008c9e:	d149      	bne.n	8008d34 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ca0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008ca4:	9300      	str	r3, [sp, #0]
 8008ca6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ca8:	2200      	movs	r2, #0
 8008caa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f000 f856 	bl	8008d60 <UART_WaitOnFlagUntilTimeout>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d03c      	beq.n	8008d34 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cc2:	e853 3f00 	ldrex	r3, [r3]
 8008cc6:	623b      	str	r3, [r7, #32]
   return(result);
 8008cc8:	6a3b      	ldr	r3, [r7, #32]
 8008cca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008cce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008cd8:	633b      	str	r3, [r7, #48]	@ 0x30
 8008cda:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cdc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008cde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ce0:	e841 2300 	strex	r3, r2, [r1]
 8008ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d1e6      	bne.n	8008cba <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	3308      	adds	r3, #8
 8008cf2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	e853 3f00 	ldrex	r3, [r3]
 8008cfa:	60fb      	str	r3, [r7, #12]
   return(result);
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	f023 0301 	bic.w	r3, r3, #1
 8008d02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	3308      	adds	r3, #8
 8008d0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d0c:	61fa      	str	r2, [r7, #28]
 8008d0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d10:	69b9      	ldr	r1, [r7, #24]
 8008d12:	69fa      	ldr	r2, [r7, #28]
 8008d14:	e841 2300 	strex	r3, r2, [r1]
 8008d18:	617b      	str	r3, [r7, #20]
   return(result);
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d1e5      	bne.n	8008cec <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2220      	movs	r2, #32
 8008d24:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d30:	2303      	movs	r3, #3
 8008d32:	e011      	b.n	8008d58 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2220      	movs	r2, #32
 8008d38:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2220      	movs	r2, #32
 8008d3e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2200      	movs	r2, #0
 8008d46:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2200      	movs	r2, #0
 8008d52:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8008d56:	2300      	movs	r3, #0
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3758      	adds	r7, #88	@ 0x58
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b084      	sub	sp, #16
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	60f8      	str	r0, [r7, #12]
 8008d68:	60b9      	str	r1, [r7, #8]
 8008d6a:	603b      	str	r3, [r7, #0]
 8008d6c:	4613      	mov	r3, r2
 8008d6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d70:	e049      	b.n	8008e06 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d72:	69bb      	ldr	r3, [r7, #24]
 8008d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d78:	d045      	beq.n	8008e06 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d7a:	f7fa ffcf 	bl	8003d1c <HAL_GetTick>
 8008d7e:	4602      	mov	r2, r0
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	1ad3      	subs	r3, r2, r3
 8008d84:	69ba      	ldr	r2, [r7, #24]
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d302      	bcc.n	8008d90 <UART_WaitOnFlagUntilTimeout+0x30>
 8008d8a:	69bb      	ldr	r3, [r7, #24]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d101      	bne.n	8008d94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008d90:	2303      	movs	r3, #3
 8008d92:	e048      	b.n	8008e26 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f003 0304 	and.w	r3, r3, #4
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d031      	beq.n	8008e06 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	69db      	ldr	r3, [r3, #28]
 8008da8:	f003 0308 	and.w	r3, r3, #8
 8008dac:	2b08      	cmp	r3, #8
 8008dae:	d110      	bne.n	8008dd2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	2208      	movs	r2, #8
 8008db6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008db8:	68f8      	ldr	r0, [r7, #12]
 8008dba:	f000 f8ff 	bl	8008fbc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	2208      	movs	r2, #8
 8008dc2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8008dce:	2301      	movs	r3, #1
 8008dd0:	e029      	b.n	8008e26 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	69db      	ldr	r3, [r3, #28]
 8008dd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008ddc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008de0:	d111      	bne.n	8008e06 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008dea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008dec:	68f8      	ldr	r0, [r7, #12]
 8008dee:	f000 f8e5 	bl	8008fbc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2220      	movs	r2, #32
 8008df6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8008e02:	2303      	movs	r3, #3
 8008e04:	e00f      	b.n	8008e26 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	69da      	ldr	r2, [r3, #28]
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	4013      	ands	r3, r2
 8008e10:	68ba      	ldr	r2, [r7, #8]
 8008e12:	429a      	cmp	r2, r3
 8008e14:	bf0c      	ite	eq
 8008e16:	2301      	moveq	r3, #1
 8008e18:	2300      	movne	r3, #0
 8008e1a:	b2db      	uxtb	r3, r3
 8008e1c:	461a      	mov	r2, r3
 8008e1e:	79fb      	ldrb	r3, [r7, #7]
 8008e20:	429a      	cmp	r2, r3
 8008e22:	d0a6      	beq.n	8008d72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008e24:	2300      	movs	r3, #0
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3710      	adds	r7, #16
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}
	...

08008e30 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b097      	sub	sp, #92	@ 0x5c
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	60f8      	str	r0, [r7, #12]
 8008e38:	60b9      	str	r1, [r7, #8]
 8008e3a:	4613      	mov	r3, r2
 8008e3c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	68ba      	ldr	r2, [r7, #8]
 8008e42:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	88fa      	ldrh	r2, [r7, #6]
 8008e48:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	88fa      	ldrh	r2, [r7, #6]
 8008e50:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	2200      	movs	r2, #0
 8008e58:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	689b      	ldr	r3, [r3, #8]
 8008e5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e62:	d10e      	bne.n	8008e82 <UART_Start_Receive_IT+0x52>
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	691b      	ldr	r3, [r3, #16]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d105      	bne.n	8008e78 <UART_Start_Receive_IT+0x48>
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008e72:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008e76:	e02d      	b.n	8008ed4 <UART_Start_Receive_IT+0xa4>
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	22ff      	movs	r2, #255	@ 0xff
 8008e7c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008e80:	e028      	b.n	8008ed4 <UART_Start_Receive_IT+0xa4>
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	689b      	ldr	r3, [r3, #8]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d10d      	bne.n	8008ea6 <UART_Start_Receive_IT+0x76>
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	691b      	ldr	r3, [r3, #16]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d104      	bne.n	8008e9c <UART_Start_Receive_IT+0x6c>
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	22ff      	movs	r2, #255	@ 0xff
 8008e96:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008e9a:	e01b      	b.n	8008ed4 <UART_Start_Receive_IT+0xa4>
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	227f      	movs	r2, #127	@ 0x7f
 8008ea0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008ea4:	e016      	b.n	8008ed4 <UART_Start_Receive_IT+0xa4>
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	689b      	ldr	r3, [r3, #8]
 8008eaa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008eae:	d10d      	bne.n	8008ecc <UART_Start_Receive_IT+0x9c>
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	691b      	ldr	r3, [r3, #16]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d104      	bne.n	8008ec2 <UART_Start_Receive_IT+0x92>
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	227f      	movs	r2, #127	@ 0x7f
 8008ebc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008ec0:	e008      	b.n	8008ed4 <UART_Start_Receive_IT+0xa4>
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	223f      	movs	r2, #63	@ 0x3f
 8008ec6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008eca:	e003      	b.n	8008ed4 <UART_Start_Receive_IT+0xa4>
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	2222      	movs	r2, #34	@ 0x22
 8008ee0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	3308      	adds	r3, #8
 8008eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008eee:	e853 3f00 	ldrex	r3, [r3]
 8008ef2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ef6:	f043 0301 	orr.w	r3, r3, #1
 8008efa:	657b      	str	r3, [r7, #84]	@ 0x54
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	3308      	adds	r3, #8
 8008f02:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008f04:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008f06:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f08:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008f0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008f0c:	e841 2300 	strex	r3, r2, [r1]
 8008f10:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008f12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d1e5      	bne.n	8008ee4 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	689b      	ldr	r3, [r3, #8]
 8008f1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f20:	d107      	bne.n	8008f32 <UART_Start_Receive_IT+0x102>
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	691b      	ldr	r3, [r3, #16]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d103      	bne.n	8008f32 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	4a21      	ldr	r2, [pc, #132]	@ (8008fb4 <UART_Start_Receive_IT+0x184>)
 8008f2e:	669a      	str	r2, [r3, #104]	@ 0x68
 8008f30:	e002      	b.n	8008f38 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	4a20      	ldr	r2, [pc, #128]	@ (8008fb8 <UART_Start_Receive_IT+0x188>)
 8008f36:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	691b      	ldr	r3, [r3, #16]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d019      	beq.n	8008f74 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f48:	e853 3f00 	ldrex	r3, [r3]
 8008f4c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f50:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8008f54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f60:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f62:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008f64:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008f66:	e841 2300 	strex	r3, r2, [r1]
 8008f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008f6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d1e6      	bne.n	8008f40 <UART_Start_Receive_IT+0x110>
 8008f72:	e018      	b.n	8008fa6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	e853 3f00 	ldrex	r3, [r3]
 8008f80:	613b      	str	r3, [r7, #16]
   return(result);
 8008f82:	693b      	ldr	r3, [r7, #16]
 8008f84:	f043 0320 	orr.w	r3, r3, #32
 8008f88:	653b      	str	r3, [r7, #80]	@ 0x50
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	461a      	mov	r2, r3
 8008f90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f92:	623b      	str	r3, [r7, #32]
 8008f94:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f96:	69f9      	ldr	r1, [r7, #28]
 8008f98:	6a3a      	ldr	r2, [r7, #32]
 8008f9a:	e841 2300 	strex	r3, r2, [r1]
 8008f9e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008fa0:	69bb      	ldr	r3, [r7, #24]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d1e6      	bne.n	8008f74 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8008fa6:	2300      	movs	r3, #0
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	375c      	adds	r7, #92	@ 0x5c
 8008fac:	46bd      	mov	sp, r7
 8008fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb2:	4770      	bx	lr
 8008fb4:	080092c1 	.word	0x080092c1
 8008fb8:	08009105 	.word	0x08009105

08008fbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b095      	sub	sp, #84	@ 0x54
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fcc:	e853 3f00 	ldrex	r3, [r3]
 8008fd0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fd4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008fd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	461a      	mov	r2, r3
 8008fe0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008fe2:	643b      	str	r3, [r7, #64]	@ 0x40
 8008fe4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fe6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008fe8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008fea:	e841 2300 	strex	r3, r2, [r1]
 8008fee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d1e6      	bne.n	8008fc4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	3308      	adds	r3, #8
 8008ffc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ffe:	6a3b      	ldr	r3, [r7, #32]
 8009000:	e853 3f00 	ldrex	r3, [r3]
 8009004:	61fb      	str	r3, [r7, #28]
   return(result);
 8009006:	69fb      	ldr	r3, [r7, #28]
 8009008:	f023 0301 	bic.w	r3, r3, #1
 800900c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	3308      	adds	r3, #8
 8009014:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009016:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009018:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800901a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800901c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800901e:	e841 2300 	strex	r3, r2, [r1]
 8009022:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009026:	2b00      	cmp	r3, #0
 8009028:	d1e5      	bne.n	8008ff6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800902e:	2b01      	cmp	r3, #1
 8009030:	d118      	bne.n	8009064 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	e853 3f00 	ldrex	r3, [r3]
 800903e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	f023 0310 	bic.w	r3, r3, #16
 8009046:	647b      	str	r3, [r7, #68]	@ 0x44
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	461a      	mov	r2, r3
 800904e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009050:	61bb      	str	r3, [r7, #24]
 8009052:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009054:	6979      	ldr	r1, [r7, #20]
 8009056:	69ba      	ldr	r2, [r7, #24]
 8009058:	e841 2300 	strex	r3, r2, [r1]
 800905c:	613b      	str	r3, [r7, #16]
   return(result);
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d1e6      	bne.n	8009032 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2220      	movs	r2, #32
 8009068:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2200      	movs	r2, #0
 8009070:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2200      	movs	r2, #0
 8009076:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009078:	bf00      	nop
 800907a:	3754      	adds	r7, #84	@ 0x54
 800907c:	46bd      	mov	sp, r7
 800907e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009082:	4770      	bx	lr

08009084 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b084      	sub	sp, #16
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009090:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2200      	movs	r2, #0
 8009096:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2200      	movs	r2, #0
 800909e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80090a2:	68f8      	ldr	r0, [r7, #12]
 80090a4:	f7ff fa44 	bl	8008530 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090a8:	bf00      	nop
 80090aa:	3710      	adds	r7, #16
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b088      	sub	sp, #32
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	e853 3f00 	ldrex	r3, [r3]
 80090c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80090cc:	61fb      	str	r3, [r7, #28]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	461a      	mov	r2, r3
 80090d4:	69fb      	ldr	r3, [r7, #28]
 80090d6:	61bb      	str	r3, [r7, #24]
 80090d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090da:	6979      	ldr	r1, [r7, #20]
 80090dc:	69ba      	ldr	r2, [r7, #24]
 80090de:	e841 2300 	strex	r3, r2, [r1]
 80090e2:	613b      	str	r3, [r7, #16]
   return(result);
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d1e6      	bne.n	80090b8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2220      	movs	r2, #32
 80090ee:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2200      	movs	r2, #0
 80090f4:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f7fa fcd6 	bl	8003aa8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090fc:	bf00      	nop
 80090fe:	3720      	adds	r7, #32
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}

08009104 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b09c      	sub	sp, #112	@ 0x70
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009112:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800911c:	2b22      	cmp	r3, #34	@ 0x22
 800911e:	f040 80be 	bne.w	800929e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8009128:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800912c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009130:	b2d9      	uxtb	r1, r3
 8009132:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009136:	b2da      	uxtb	r2, r3
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800913c:	400a      	ands	r2, r1
 800913e:	b2d2      	uxtb	r2, r2
 8009140:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009146:	1c5a      	adds	r2, r3, #1
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009152:	b29b      	uxth	r3, r3
 8009154:	3b01      	subs	r3, #1
 8009156:	b29a      	uxth	r2, r3
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009164:	b29b      	uxth	r3, r3
 8009166:	2b00      	cmp	r3, #0
 8009168:	f040 80a3 	bne.w	80092b2 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009172:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009174:	e853 3f00 	ldrex	r3, [r3]
 8009178:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800917a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800917c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009180:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	461a      	mov	r2, r3
 8009188:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800918a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800918c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800918e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009190:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009192:	e841 2300 	strex	r3, r2, [r1]
 8009196:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009198:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800919a:	2b00      	cmp	r3, #0
 800919c:	d1e6      	bne.n	800916c <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	3308      	adds	r3, #8
 80091a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091a8:	e853 3f00 	ldrex	r3, [r3]
 80091ac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80091ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091b0:	f023 0301 	bic.w	r3, r3, #1
 80091b4:	667b      	str	r3, [r7, #100]	@ 0x64
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	3308      	adds	r3, #8
 80091bc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80091be:	647a      	str	r2, [r7, #68]	@ 0x44
 80091c0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091c2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80091c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80091c6:	e841 2300 	strex	r3, r2, [r1]
 80091ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80091cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d1e5      	bne.n	800919e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2220      	movs	r2, #32
 80091d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2200      	movs	r2, #0
 80091de:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2200      	movs	r2, #0
 80091e4:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	4a34      	ldr	r2, [pc, #208]	@ (80092bc <UART_RxISR_8BIT+0x1b8>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d01f      	beq.n	8009230 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	685b      	ldr	r3, [r3, #4]
 80091f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d018      	beq.n	8009230 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009206:	e853 3f00 	ldrex	r3, [r3]
 800920a:	623b      	str	r3, [r7, #32]
   return(result);
 800920c:	6a3b      	ldr	r3, [r7, #32]
 800920e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009212:	663b      	str	r3, [r7, #96]	@ 0x60
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	461a      	mov	r2, r3
 800921a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800921c:	633b      	str	r3, [r7, #48]	@ 0x30
 800921e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009220:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009222:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009224:	e841 2300 	strex	r3, r2, [r1]
 8009228:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800922a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800922c:	2b00      	cmp	r3, #0
 800922e:	d1e6      	bne.n	80091fe <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009234:	2b01      	cmp	r3, #1
 8009236:	d12e      	bne.n	8009296 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2200      	movs	r2, #0
 800923c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	e853 3f00 	ldrex	r3, [r3]
 800924a:	60fb      	str	r3, [r7, #12]
   return(result);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	f023 0310 	bic.w	r3, r3, #16
 8009252:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	461a      	mov	r2, r3
 800925a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800925c:	61fb      	str	r3, [r7, #28]
 800925e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009260:	69b9      	ldr	r1, [r7, #24]
 8009262:	69fa      	ldr	r2, [r7, #28]
 8009264:	e841 2300 	strex	r3, r2, [r1]
 8009268:	617b      	str	r3, [r7, #20]
   return(result);
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d1e6      	bne.n	800923e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	69db      	ldr	r3, [r3, #28]
 8009276:	f003 0310 	and.w	r3, r3, #16
 800927a:	2b10      	cmp	r3, #16
 800927c:	d103      	bne.n	8009286 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	2210      	movs	r2, #16
 8009284:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800928c:	4619      	mov	r1, r3
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f7ff f958 	bl	8008544 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009294:	e00d      	b.n	80092b2 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f7ff f940 	bl	800851c <HAL_UART_RxCpltCallback>
}
 800929c:	e009      	b.n	80092b2 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	8b1b      	ldrh	r3, [r3, #24]
 80092a4:	b29a      	uxth	r2, r3
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f042 0208 	orr.w	r2, r2, #8
 80092ae:	b292      	uxth	r2, r2
 80092b0:	831a      	strh	r2, [r3, #24]
}
 80092b2:	bf00      	nop
 80092b4:	3770      	adds	r7, #112	@ 0x70
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}
 80092ba:	bf00      	nop
 80092bc:	40008000 	.word	0x40008000

080092c0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b09c      	sub	sp, #112	@ 0x70
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80092ce:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80092d8:	2b22      	cmp	r3, #34	@ 0x22
 80092da:	f040 80be 	bne.w	800945a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80092e4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092ec:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80092ee:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80092f2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80092f6:	4013      	ands	r3, r2
 80092f8:	b29a      	uxth	r2, r3
 80092fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80092fc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009302:	1c9a      	adds	r2, r3, #2
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800930e:	b29b      	uxth	r3, r3
 8009310:	3b01      	subs	r3, #1
 8009312:	b29a      	uxth	r2, r3
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009320:	b29b      	uxth	r3, r3
 8009322:	2b00      	cmp	r3, #0
 8009324:	f040 80a3 	bne.w	800946e <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800932e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009330:	e853 3f00 	ldrex	r3, [r3]
 8009334:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009336:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009338:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800933c:	667b      	str	r3, [r7, #100]	@ 0x64
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	461a      	mov	r2, r3
 8009344:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009346:	657b      	str	r3, [r7, #84]	@ 0x54
 8009348:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800934a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800934c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800934e:	e841 2300 	strex	r3, r2, [r1]
 8009352:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009354:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009356:	2b00      	cmp	r3, #0
 8009358:	d1e6      	bne.n	8009328 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	3308      	adds	r3, #8
 8009360:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009364:	e853 3f00 	ldrex	r3, [r3]
 8009368:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800936a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800936c:	f023 0301 	bic.w	r3, r3, #1
 8009370:	663b      	str	r3, [r7, #96]	@ 0x60
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	3308      	adds	r3, #8
 8009378:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800937a:	643a      	str	r2, [r7, #64]	@ 0x40
 800937c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800937e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009380:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009382:	e841 2300 	strex	r3, r2, [r1]
 8009386:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800938a:	2b00      	cmp	r3, #0
 800938c:	d1e5      	bne.n	800935a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2220      	movs	r2, #32
 8009392:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2200      	movs	r2, #0
 800939a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2200      	movs	r2, #0
 80093a0:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	4a34      	ldr	r2, [pc, #208]	@ (8009478 <UART_RxISR_16BIT+0x1b8>)
 80093a8:	4293      	cmp	r3, r2
 80093aa:	d01f      	beq.n	80093ec <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	685b      	ldr	r3, [r3, #4]
 80093b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d018      	beq.n	80093ec <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093c0:	6a3b      	ldr	r3, [r7, #32]
 80093c2:	e853 3f00 	ldrex	r3, [r3]
 80093c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80093c8:	69fb      	ldr	r3, [r7, #28]
 80093ca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80093ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	461a      	mov	r2, r3
 80093d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80093d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80093da:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80093de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80093e0:	e841 2300 	strex	r3, r2, [r1]
 80093e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80093e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d1e6      	bne.n	80093ba <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093f0:	2b01      	cmp	r3, #1
 80093f2:	d12e      	bne.n	8009452 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2200      	movs	r2, #0
 80093f8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	e853 3f00 	ldrex	r3, [r3]
 8009406:	60bb      	str	r3, [r7, #8]
   return(result);
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	f023 0310 	bic.w	r3, r3, #16
 800940e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	461a      	mov	r2, r3
 8009416:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009418:	61bb      	str	r3, [r7, #24]
 800941a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800941c:	6979      	ldr	r1, [r7, #20]
 800941e:	69ba      	ldr	r2, [r7, #24]
 8009420:	e841 2300 	strex	r3, r2, [r1]
 8009424:	613b      	str	r3, [r7, #16]
   return(result);
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d1e6      	bne.n	80093fa <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	69db      	ldr	r3, [r3, #28]
 8009432:	f003 0310 	and.w	r3, r3, #16
 8009436:	2b10      	cmp	r3, #16
 8009438:	d103      	bne.n	8009442 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	2210      	movs	r2, #16
 8009440:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009448:	4619      	mov	r1, r3
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f7ff f87a 	bl	8008544 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009450:	e00d      	b.n	800946e <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f7ff f862 	bl	800851c <HAL_UART_RxCpltCallback>
}
 8009458:	e009      	b.n	800946e <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	8b1b      	ldrh	r3, [r3, #24]
 8009460:	b29a      	uxth	r2, r3
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f042 0208 	orr.w	r2, r2, #8
 800946a:	b292      	uxth	r2, r2
 800946c:	831a      	strh	r2, [r3, #24]
}
 800946e:	bf00      	nop
 8009470:	3770      	adds	r7, #112	@ 0x70
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}
 8009476:	bf00      	nop
 8009478:	40008000 	.word	0x40008000

0800947c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800947c:	b480      	push	{r7}
 800947e:	b083      	sub	sp, #12
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009484:	bf00      	nop
 8009486:	370c      	adds	r7, #12
 8009488:	46bd      	mov	sp, r7
 800948a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948e:	4770      	bx	lr

08009490 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009490:	b084      	sub	sp, #16
 8009492:	b580      	push	{r7, lr}
 8009494:	b084      	sub	sp, #16
 8009496:	af00      	add	r7, sp, #0
 8009498:	6078      	str	r0, [r7, #4]
 800949a:	f107 001c 	add.w	r0, r7, #28
 800949e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	68db      	ldr	r3, [r3, #12]
 80094a6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f000 fa66 	bl	8009980 <USB_CoreReset>
 80094b4:	4603      	mov	r3, r0
 80094b6:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80094b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d106      	bne.n	80094cc <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094c2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	639a      	str	r2, [r3, #56]	@ 0x38
 80094ca:	e005      	b.n	80094d8 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094d0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 80094d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80094da:	4618      	mov	r0, r3
 80094dc:	3710      	adds	r7, #16
 80094de:	46bd      	mov	sp, r7
 80094e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80094e4:	b004      	add	sp, #16
 80094e6:	4770      	bx	lr

080094e8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80094e8:	b480      	push	{r7}
 80094ea:	b083      	sub	sp, #12
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	689b      	ldr	r3, [r3, #8]
 80094f4:	f023 0201 	bic.w	r2, r3, #1
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80094fc:	2300      	movs	r3, #0
}
 80094fe:	4618      	mov	r0, r3
 8009500:	370c      	adds	r7, #12
 8009502:	46bd      	mov	sp, r7
 8009504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009508:	4770      	bx	lr

0800950a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800950a:	b580      	push	{r7, lr}
 800950c:	b084      	sub	sp, #16
 800950e:	af00      	add	r7, sp, #0
 8009510:	6078      	str	r0, [r7, #4]
 8009512:	460b      	mov	r3, r1
 8009514:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009516:	2300      	movs	r3, #0
 8009518:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	68db      	ldr	r3, [r3, #12]
 800951e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009526:	78fb      	ldrb	r3, [r7, #3]
 8009528:	2b01      	cmp	r3, #1
 800952a:	d115      	bne.n	8009558 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	68db      	ldr	r3, [r3, #12]
 8009530:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009538:	2001      	movs	r0, #1
 800953a:	f7fa fbfb 	bl	8003d34 <HAL_Delay>
      ms++;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	3301      	adds	r3, #1
 8009542:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f000 fa0d 	bl	8009964 <USB_GetMode>
 800954a:	4603      	mov	r3, r0
 800954c:	2b01      	cmp	r3, #1
 800954e:	d01e      	beq.n	800958e <USB_SetCurrentMode+0x84>
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	2b31      	cmp	r3, #49	@ 0x31
 8009554:	d9f0      	bls.n	8009538 <USB_SetCurrentMode+0x2e>
 8009556:	e01a      	b.n	800958e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009558:	78fb      	ldrb	r3, [r7, #3]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d115      	bne.n	800958a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	68db      	ldr	r3, [r3, #12]
 8009562:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800956a:	2001      	movs	r0, #1
 800956c:	f7fa fbe2 	bl	8003d34 <HAL_Delay>
      ms++;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	3301      	adds	r3, #1
 8009574:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f000 f9f4 	bl	8009964 <USB_GetMode>
 800957c:	4603      	mov	r3, r0
 800957e:	2b00      	cmp	r3, #0
 8009580:	d005      	beq.n	800958e <USB_SetCurrentMode+0x84>
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	2b31      	cmp	r3, #49	@ 0x31
 8009586:	d9f0      	bls.n	800956a <USB_SetCurrentMode+0x60>
 8009588:	e001      	b.n	800958e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800958a:	2301      	movs	r3, #1
 800958c:	e005      	b.n	800959a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2b32      	cmp	r3, #50	@ 0x32
 8009592:	d101      	bne.n	8009598 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009594:	2301      	movs	r3, #1
 8009596:	e000      	b.n	800959a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009598:	2300      	movs	r3, #0
}
 800959a:	4618      	mov	r0, r3
 800959c:	3710      	adds	r7, #16
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}
	...

080095a4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80095a4:	b084      	sub	sp, #16
 80095a6:	b580      	push	{r7, lr}
 80095a8:	b086      	sub	sp, #24
 80095aa:	af00      	add	r7, sp, #0
 80095ac:	6078      	str	r0, [r7, #4]
 80095ae:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80095b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80095b6:	2300      	movs	r3, #0
 80095b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80095be:	2300      	movs	r3, #0
 80095c0:	613b      	str	r3, [r7, #16]
 80095c2:	e009      	b.n	80095d8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80095c4:	687a      	ldr	r2, [r7, #4]
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	3340      	adds	r3, #64	@ 0x40
 80095ca:	009b      	lsls	r3, r3, #2
 80095cc:	4413      	add	r3, r2
 80095ce:	2200      	movs	r2, #0
 80095d0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80095d2:	693b      	ldr	r3, [r7, #16]
 80095d4:	3301      	adds	r3, #1
 80095d6:	613b      	str	r3, [r7, #16]
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	2b0e      	cmp	r3, #14
 80095dc:	d9f2      	bls.n	80095c4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80095de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d11c      	bne.n	800961e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80095ea:	685b      	ldr	r3, [r3, #4]
 80095ec:	68fa      	ldr	r2, [r7, #12]
 80095ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80095f2:	f043 0302 	orr.w	r3, r3, #2
 80095f6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095fc:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	601a      	str	r2, [r3, #0]
 800961c:	e005      	b.n	800962a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009622:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009630:	461a      	mov	r2, r3
 8009632:	2300      	movs	r3, #0
 8009634:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009636:	2103      	movs	r1, #3
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f000 f959 	bl	80098f0 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800963e:	2110      	movs	r1, #16
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f000 f8f1 	bl	8009828 <USB_FlushTxFifo>
 8009646:	4603      	mov	r3, r0
 8009648:	2b00      	cmp	r3, #0
 800964a:	d001      	beq.n	8009650 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 800964c:	2301      	movs	r3, #1
 800964e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f000 f91d 	bl	8009890 <USB_FlushRxFifo>
 8009656:	4603      	mov	r3, r0
 8009658:	2b00      	cmp	r3, #0
 800965a:	d001      	beq.n	8009660 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 800965c:	2301      	movs	r3, #1
 800965e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009666:	461a      	mov	r2, r3
 8009668:	2300      	movs	r3, #0
 800966a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009672:	461a      	mov	r2, r3
 8009674:	2300      	movs	r3, #0
 8009676:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800967e:	461a      	mov	r2, r3
 8009680:	2300      	movs	r3, #0
 8009682:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009684:	2300      	movs	r3, #0
 8009686:	613b      	str	r3, [r7, #16]
 8009688:	e043      	b.n	8009712 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	015a      	lsls	r2, r3, #5
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	4413      	add	r3, r2
 8009692:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800969c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80096a0:	d118      	bne.n	80096d4 <USB_DevInit+0x130>
    {
      if (i == 0U)
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d10a      	bne.n	80096be <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80096a8:	693b      	ldr	r3, [r7, #16]
 80096aa:	015a      	lsls	r2, r3, #5
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	4413      	add	r3, r2
 80096b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096b4:	461a      	mov	r2, r3
 80096b6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80096ba:	6013      	str	r3, [r2, #0]
 80096bc:	e013      	b.n	80096e6 <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	015a      	lsls	r2, r3, #5
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	4413      	add	r3, r2
 80096c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096ca:	461a      	mov	r2, r3
 80096cc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80096d0:	6013      	str	r3, [r2, #0]
 80096d2:	e008      	b.n	80096e6 <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80096d4:	693b      	ldr	r3, [r7, #16]
 80096d6:	015a      	lsls	r2, r3, #5
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	4413      	add	r3, r2
 80096dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096e0:	461a      	mov	r2, r3
 80096e2:	2300      	movs	r3, #0
 80096e4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	015a      	lsls	r2, r3, #5
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	4413      	add	r3, r2
 80096ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096f2:	461a      	mov	r2, r3
 80096f4:	2300      	movs	r3, #0
 80096f6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	015a      	lsls	r2, r3, #5
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	4413      	add	r3, r2
 8009700:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009704:	461a      	mov	r2, r3
 8009706:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800970a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800970c:	693b      	ldr	r3, [r7, #16]
 800970e:	3301      	adds	r3, #1
 8009710:	613b      	str	r3, [r7, #16]
 8009712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009714:	693a      	ldr	r2, [r7, #16]
 8009716:	429a      	cmp	r2, r3
 8009718:	d3b7      	bcc.n	800968a <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800971a:	2300      	movs	r3, #0
 800971c:	613b      	str	r3, [r7, #16]
 800971e:	e043      	b.n	80097a8 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	015a      	lsls	r2, r3, #5
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	4413      	add	r3, r2
 8009728:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009732:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009736:	d118      	bne.n	800976a <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d10a      	bne.n	8009754 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	015a      	lsls	r2, r3, #5
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	4413      	add	r3, r2
 8009746:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800974a:	461a      	mov	r2, r3
 800974c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009750:	6013      	str	r3, [r2, #0]
 8009752:	e013      	b.n	800977c <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	015a      	lsls	r2, r3, #5
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	4413      	add	r3, r2
 800975c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009760:	461a      	mov	r2, r3
 8009762:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009766:	6013      	str	r3, [r2, #0]
 8009768:	e008      	b.n	800977c <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	015a      	lsls	r2, r3, #5
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	4413      	add	r3, r2
 8009772:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009776:	461a      	mov	r2, r3
 8009778:	2300      	movs	r3, #0
 800977a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	015a      	lsls	r2, r3, #5
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	4413      	add	r3, r2
 8009784:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009788:	461a      	mov	r2, r3
 800978a:	2300      	movs	r3, #0
 800978c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800978e:	693b      	ldr	r3, [r7, #16]
 8009790:	015a      	lsls	r2, r3, #5
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	4413      	add	r3, r2
 8009796:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800979a:	461a      	mov	r2, r3
 800979c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80097a0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	3301      	adds	r3, #1
 80097a6:	613b      	str	r3, [r7, #16]
 80097a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097aa:	693a      	ldr	r2, [r7, #16]
 80097ac:	429a      	cmp	r2, r3
 80097ae:	d3b7      	bcc.n	8009720 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097b6:	691b      	ldr	r3, [r3, #16]
 80097b8:	68fa      	ldr	r2, [r7, #12]
 80097ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80097be:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80097c2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2200      	movs	r2, #0
 80097c8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80097d0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	699b      	ldr	r3, [r3, #24]
 80097d6:	f043 0210 	orr.w	r2, r3, #16
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	699a      	ldr	r2, [r3, #24]
 80097e2:	4b10      	ldr	r3, [pc, #64]	@ (8009824 <USB_DevInit+0x280>)
 80097e4:	4313      	orrs	r3, r2
 80097e6:	687a      	ldr	r2, [r7, #4]
 80097e8:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80097ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d005      	beq.n	80097fc <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	699b      	ldr	r3, [r3, #24]
 80097f4:	f043 0208 	orr.w	r2, r3, #8
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80097fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80097fe:	2b01      	cmp	r3, #1
 8009800:	d107      	bne.n	8009812 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	699b      	ldr	r3, [r3, #24]
 8009806:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800980a:	f043 0304 	orr.w	r3, r3, #4
 800980e:	687a      	ldr	r2, [r7, #4]
 8009810:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009812:	7dfb      	ldrb	r3, [r7, #23]
}
 8009814:	4618      	mov	r0, r3
 8009816:	3718      	adds	r7, #24
 8009818:	46bd      	mov	sp, r7
 800981a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800981e:	b004      	add	sp, #16
 8009820:	4770      	bx	lr
 8009822:	bf00      	nop
 8009824:	803c3800 	.word	0x803c3800

08009828 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009828:	b480      	push	{r7}
 800982a:	b085      	sub	sp, #20
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
 8009830:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009832:	2300      	movs	r3, #0
 8009834:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	3301      	adds	r3, #1
 800983a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	4a13      	ldr	r2, [pc, #76]	@ (800988c <USB_FlushTxFifo+0x64>)
 8009840:	4293      	cmp	r3, r2
 8009842:	d901      	bls.n	8009848 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009844:	2303      	movs	r3, #3
 8009846:	e01b      	b.n	8009880 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	691b      	ldr	r3, [r3, #16]
 800984c:	2b00      	cmp	r3, #0
 800984e:	daf2      	bge.n	8009836 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009850:	2300      	movs	r3, #0
 8009852:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	019b      	lsls	r3, r3, #6
 8009858:	f043 0220 	orr.w	r2, r3, #32
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	3301      	adds	r3, #1
 8009864:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	4a08      	ldr	r2, [pc, #32]	@ (800988c <USB_FlushTxFifo+0x64>)
 800986a:	4293      	cmp	r3, r2
 800986c:	d901      	bls.n	8009872 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800986e:	2303      	movs	r3, #3
 8009870:	e006      	b.n	8009880 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	691b      	ldr	r3, [r3, #16]
 8009876:	f003 0320 	and.w	r3, r3, #32
 800987a:	2b20      	cmp	r3, #32
 800987c:	d0f0      	beq.n	8009860 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800987e:	2300      	movs	r3, #0
}
 8009880:	4618      	mov	r0, r3
 8009882:	3714      	adds	r7, #20
 8009884:	46bd      	mov	sp, r7
 8009886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988a:	4770      	bx	lr
 800988c:	00030d40 	.word	0x00030d40

08009890 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009890:	b480      	push	{r7}
 8009892:	b085      	sub	sp, #20
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009898:	2300      	movs	r3, #0
 800989a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	3301      	adds	r3, #1
 80098a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	4a11      	ldr	r2, [pc, #68]	@ (80098ec <USB_FlushRxFifo+0x5c>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d901      	bls.n	80098ae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80098aa:	2303      	movs	r3, #3
 80098ac:	e018      	b.n	80098e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	691b      	ldr	r3, [r3, #16]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	daf2      	bge.n	800989c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80098b6:	2300      	movs	r3, #0
 80098b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2210      	movs	r2, #16
 80098be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	3301      	adds	r3, #1
 80098c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	4a08      	ldr	r2, [pc, #32]	@ (80098ec <USB_FlushRxFifo+0x5c>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d901      	bls.n	80098d2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80098ce:	2303      	movs	r3, #3
 80098d0:	e006      	b.n	80098e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	691b      	ldr	r3, [r3, #16]
 80098d6:	f003 0310 	and.w	r3, r3, #16
 80098da:	2b10      	cmp	r3, #16
 80098dc:	d0f0      	beq.n	80098c0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80098de:	2300      	movs	r3, #0
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3714      	adds	r7, #20
 80098e4:	46bd      	mov	sp, r7
 80098e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ea:	4770      	bx	lr
 80098ec:	00030d40 	.word	0x00030d40

080098f0 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b085      	sub	sp, #20
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
 80098f8:	460b      	mov	r3, r1
 80098fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009906:	681a      	ldr	r2, [r3, #0]
 8009908:	78fb      	ldrb	r3, [r7, #3]
 800990a:	68f9      	ldr	r1, [r7, #12]
 800990c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009910:	4313      	orrs	r3, r2
 8009912:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009914:	2300      	movs	r3, #0
}
 8009916:	4618      	mov	r0, r3
 8009918:	3714      	adds	r7, #20
 800991a:	46bd      	mov	sp, r7
 800991c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009920:	4770      	bx	lr

08009922 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009922:	b480      	push	{r7}
 8009924:	b085      	sub	sp, #20
 8009926:	af00      	add	r7, sp, #0
 8009928:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	68fa      	ldr	r2, [r7, #12]
 8009938:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800993c:	f023 0303 	bic.w	r3, r3, #3
 8009940:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009948:	685b      	ldr	r3, [r3, #4]
 800994a:	68fa      	ldr	r2, [r7, #12]
 800994c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009950:	f043 0302 	orr.w	r3, r3, #2
 8009954:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009956:	2300      	movs	r3, #0
}
 8009958:	4618      	mov	r0, r3
 800995a:	3714      	adds	r7, #20
 800995c:	46bd      	mov	sp, r7
 800995e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009962:	4770      	bx	lr

08009964 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009964:	b480      	push	{r7}
 8009966:	b083      	sub	sp, #12
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	695b      	ldr	r3, [r3, #20]
 8009970:	f003 0301 	and.w	r3, r3, #1
}
 8009974:	4618      	mov	r0, r3
 8009976:	370c      	adds	r7, #12
 8009978:	46bd      	mov	sp, r7
 800997a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997e:	4770      	bx	lr

08009980 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009980:	b480      	push	{r7}
 8009982:	b085      	sub	sp, #20
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009988:	2300      	movs	r3, #0
 800998a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	3301      	adds	r3, #1
 8009990:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	4a13      	ldr	r2, [pc, #76]	@ (80099e4 <USB_CoreReset+0x64>)
 8009996:	4293      	cmp	r3, r2
 8009998:	d901      	bls.n	800999e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800999a:	2303      	movs	r3, #3
 800999c:	e01b      	b.n	80099d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	691b      	ldr	r3, [r3, #16]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	daf2      	bge.n	800998c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80099a6:	2300      	movs	r3, #0
 80099a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	691b      	ldr	r3, [r3, #16]
 80099ae:	f043 0201 	orr.w	r2, r3, #1
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	3301      	adds	r3, #1
 80099ba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	4a09      	ldr	r2, [pc, #36]	@ (80099e4 <USB_CoreReset+0x64>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d901      	bls.n	80099c8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80099c4:	2303      	movs	r3, #3
 80099c6:	e006      	b.n	80099d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	691b      	ldr	r3, [r3, #16]
 80099cc:	f003 0301 	and.w	r3, r3, #1
 80099d0:	2b01      	cmp	r3, #1
 80099d2:	d0f0      	beq.n	80099b6 <USB_CoreReset+0x36>

  return HAL_OK;
 80099d4:	2300      	movs	r3, #0
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3714      	adds	r7, #20
 80099da:	46bd      	mov	sp, r7
 80099dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e0:	4770      	bx	lr
 80099e2:	bf00      	nop
 80099e4:	00030d40 	.word	0x00030d40

080099e8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80099e8:	b480      	push	{r7}
 80099ea:	b085      	sub	sp, #20
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	4603      	mov	r3, r0
 80099f0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80099f2:	2300      	movs	r3, #0
 80099f4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80099f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80099fa:	2b84      	cmp	r3, #132	@ 0x84
 80099fc:	d005      	beq.n	8009a0a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80099fe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	4413      	add	r3, r2
 8009a06:	3303      	adds	r3, #3
 8009a08:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	3714      	adds	r7, #20
 8009a10:	46bd      	mov	sp, r7
 8009a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a16:	4770      	bx	lr

08009a18 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b083      	sub	sp, #12
 8009a1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a1e:	f3ef 8305 	mrs	r3, IPSR
 8009a22:	607b      	str	r3, [r7, #4]
  return(result);
 8009a24:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	bf14      	ite	ne
 8009a2a:	2301      	movne	r3, #1
 8009a2c:	2300      	moveq	r3, #0
 8009a2e:	b2db      	uxtb	r3, r3
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	370c      	adds	r7, #12
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr

08009a3c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009a40:	f001 fc16 	bl	800b270 <vTaskStartScheduler>
  
  return osOK;
 8009a44:	2300      	movs	r3, #0
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	bd80      	pop	{r7, pc}

08009a4a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009a4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a4c:	b089      	sub	sp, #36	@ 0x24
 8009a4e:	af04      	add	r7, sp, #16
 8009a50:	6078      	str	r0, [r7, #4]
 8009a52:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	695b      	ldr	r3, [r3, #20]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d020      	beq.n	8009a9e <osThreadCreate+0x54>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	699b      	ldr	r3, [r3, #24]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d01c      	beq.n	8009a9e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	685c      	ldr	r4, [r3, #4]
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	691e      	ldr	r6, [r3, #16]
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009a76:	4618      	mov	r0, r3
 8009a78:	f7ff ffb6 	bl	80099e8 <makeFreeRtosPriority>
 8009a7c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	695b      	ldr	r3, [r3, #20]
 8009a82:	687a      	ldr	r2, [r7, #4]
 8009a84:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009a86:	9202      	str	r2, [sp, #8]
 8009a88:	9301      	str	r3, [sp, #4]
 8009a8a:	9100      	str	r1, [sp, #0]
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	4632      	mov	r2, r6
 8009a90:	4629      	mov	r1, r5
 8009a92:	4620      	mov	r0, r4
 8009a94:	f001 f968 	bl	800ad68 <xTaskCreateStatic>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	60fb      	str	r3, [r7, #12]
 8009a9c:	e01c      	b.n	8009ad8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	685c      	ldr	r4, [r3, #4]
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009aaa:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f7ff ff98 	bl	80099e8 <makeFreeRtosPriority>
 8009ab8:	4602      	mov	r2, r0
 8009aba:	f107 030c 	add.w	r3, r7, #12
 8009abe:	9301      	str	r3, [sp, #4]
 8009ac0:	9200      	str	r2, [sp, #0]
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	4632      	mov	r2, r6
 8009ac6:	4629      	mov	r1, r5
 8009ac8:	4620      	mov	r0, r4
 8009aca:	f001 f9ad 	bl	800ae28 <xTaskCreate>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	2b01      	cmp	r3, #1
 8009ad2:	d001      	beq.n	8009ad8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	e000      	b.n	8009ada <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3714      	adds	r7, #20
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009ae2 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8009ae2:	b580      	push	{r7, lr}
 8009ae4:	b082      	sub	sp, #8
 8009ae6:	af00      	add	r7, sp, #0
 8009ae8:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f001 fafa 	bl	800b0e4 <vTaskDelete>
  return osOK;
 8009af0:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8009af2:	4618      	mov	r0, r3
 8009af4:	3708      	adds	r7, #8
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}

08009afa <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009afa:	b580      	push	{r7, lr}
 8009afc:	b084      	sub	sp, #16
 8009afe:	af00      	add	r7, sp, #0
 8009b00:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d001      	beq.n	8009b10 <osDelay+0x16>
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	e000      	b.n	8009b12 <osDelay+0x18>
 8009b10:	2301      	movs	r3, #1
 8009b12:	4618      	mov	r0, r3
 8009b14:	f001 fb76 	bl	800b204 <vTaskDelay>
  
  return osOK;
 8009b18:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	3710      	adds	r7, #16
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}

08009b22 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8009b22:	b580      	push	{r7, lr}
 8009b24:	b086      	sub	sp, #24
 8009b26:	af02      	add	r7, sp, #8
 8009b28:	6078      	str	r0, [r7, #4]
 8009b2a:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	685b      	ldr	r3, [r3, #4]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d00f      	beq.n	8009b54 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	2b01      	cmp	r3, #1
 8009b38:	d10a      	bne.n	8009b50 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	685b      	ldr	r3, [r3, #4]
 8009b3e:	2203      	movs	r2, #3
 8009b40:	9200      	str	r2, [sp, #0]
 8009b42:	2200      	movs	r2, #0
 8009b44:	2100      	movs	r1, #0
 8009b46:	2001      	movs	r0, #1
 8009b48:	f000 f9e8 	bl	8009f1c <xQueueGenericCreateStatic>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	e016      	b.n	8009b7e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8009b50:	2300      	movs	r3, #0
 8009b52:	e014      	b.n	8009b7e <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	2b01      	cmp	r3, #1
 8009b58:	d110      	bne.n	8009b7c <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8009b5a:	2203      	movs	r2, #3
 8009b5c:	2100      	movs	r1, #0
 8009b5e:	2001      	movs	r0, #1
 8009b60:	f000 fa59 	bl	800a016 <xQueueGenericCreate>
 8009b64:	60f8      	str	r0, [r7, #12]
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d005      	beq.n	8009b78 <osSemaphoreCreate+0x56>
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	2200      	movs	r2, #0
 8009b70:	2100      	movs	r1, #0
 8009b72:	68f8      	ldr	r0, [r7, #12]
 8009b74:	f000 faae 	bl	800a0d4 <xQueueGenericSend>
      return sema;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	e000      	b.n	8009b7e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8009b7c:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3710      	adds	r7, #16
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}
	...

08009b88 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b084      	sub	sp, #16
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
 8009b90:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8009b92:	2300      	movs	r3, #0
 8009b94:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d101      	bne.n	8009ba0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8009b9c:	2380      	movs	r3, #128	@ 0x80
 8009b9e:	e03a      	b.n	8009c16 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009baa:	d103      	bne.n	8009bb4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8009bac:	f04f 33ff 	mov.w	r3, #4294967295
 8009bb0:	60fb      	str	r3, [r7, #12]
 8009bb2:	e009      	b.n	8009bc8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d006      	beq.n	8009bc8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d101      	bne.n	8009bc8 <osSemaphoreWait+0x40>
      ticks = 1;
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8009bc8:	f7ff ff26 	bl	8009a18 <inHandlerMode>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d017      	beq.n	8009c02 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8009bd2:	f107 0308 	add.w	r3, r7, #8
 8009bd6:	461a      	mov	r2, r3
 8009bd8:	2100      	movs	r1, #0
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f000 fe9c 	bl	800a918 <xQueueReceiveFromISR>
 8009be0:	4603      	mov	r3, r0
 8009be2:	2b01      	cmp	r3, #1
 8009be4:	d001      	beq.n	8009bea <osSemaphoreWait+0x62>
      return osErrorOS;
 8009be6:	23ff      	movs	r3, #255	@ 0xff
 8009be8:	e015      	b.n	8009c16 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d011      	beq.n	8009c14 <osSemaphoreWait+0x8c>
 8009bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8009c20 <osSemaphoreWait+0x98>)
 8009bf2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009bf6:	601a      	str	r2, [r3, #0]
 8009bf8:	f3bf 8f4f 	dsb	sy
 8009bfc:	f3bf 8f6f 	isb	sy
 8009c00:	e008      	b.n	8009c14 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8009c02:	68f9      	ldr	r1, [r7, #12]
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f000 fd77 	bl	800a6f8 <xQueueSemaphoreTake>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	2b01      	cmp	r3, #1
 8009c0e:	d001      	beq.n	8009c14 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8009c10:	23ff      	movs	r3, #255	@ 0xff
 8009c12:	e000      	b.n	8009c16 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8009c14:	2300      	movs	r3, #0
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3710      	adds	r7, #16
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}
 8009c1e:	bf00      	nop
 8009c20:	e000ed04 	.word	0xe000ed04

08009c24 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b084      	sub	sp, #16
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009c30:	2300      	movs	r3, #0
 8009c32:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8009c34:	f7ff fef0 	bl	8009a18 <inHandlerMode>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d016      	beq.n	8009c6c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8009c3e:	f107 0308 	add.w	r3, r7, #8
 8009c42:	4619      	mov	r1, r3
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f000 fbe5 	bl	800a414 <xQueueGiveFromISR>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	2b01      	cmp	r3, #1
 8009c4e:	d001      	beq.n	8009c54 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8009c50:	23ff      	movs	r3, #255	@ 0xff
 8009c52:	e017      	b.n	8009c84 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d013      	beq.n	8009c82 <osSemaphoreRelease+0x5e>
 8009c5a:	4b0c      	ldr	r3, [pc, #48]	@ (8009c8c <osSemaphoreRelease+0x68>)
 8009c5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c60:	601a      	str	r2, [r3, #0]
 8009c62:	f3bf 8f4f 	dsb	sy
 8009c66:	f3bf 8f6f 	isb	sy
 8009c6a:	e00a      	b.n	8009c82 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	2200      	movs	r2, #0
 8009c70:	2100      	movs	r1, #0
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f000 fa2e 	bl	800a0d4 <xQueueGenericSend>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	2b01      	cmp	r3, #1
 8009c7c:	d001      	beq.n	8009c82 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8009c7e:	23ff      	movs	r3, #255	@ 0xff
 8009c80:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8009c82:	68fb      	ldr	r3, [r7, #12]
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	3710      	adds	r7, #16
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}
 8009c8c:	e000ed04 	.word	0xe000ed04

08009c90 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8009c90:	b590      	push	{r4, r7, lr}
 8009c92:	b085      	sub	sp, #20
 8009c94:	af02      	add	r7, sp, #8
 8009c96:	6078      	str	r0, [r7, #4]
 8009c98:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	689b      	ldr	r3, [r3, #8]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d011      	beq.n	8009cc6 <osMessageCreate+0x36>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	68db      	ldr	r3, [r3, #12]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d00d      	beq.n	8009cc6 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6818      	ldr	r0, [r3, #0]
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6859      	ldr	r1, [r3, #4]
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	689a      	ldr	r2, [r3, #8]
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	68db      	ldr	r3, [r3, #12]
 8009cba:	2400      	movs	r4, #0
 8009cbc:	9400      	str	r4, [sp, #0]
 8009cbe:	f000 f92d 	bl	8009f1c <xQueueGenericCreateStatic>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	e008      	b.n	8009cd8 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6818      	ldr	r0, [r3, #0]
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	685b      	ldr	r3, [r3, #4]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	4619      	mov	r1, r3
 8009cd2:	f000 f9a0 	bl	800a016 <xQueueGenericCreate>
 8009cd6:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	370c      	adds	r7, #12
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd90      	pop	{r4, r7, pc}

08009ce0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b083      	sub	sp, #12
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f103 0208 	add.w	r2, r3, #8
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8009cf8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f103 0208 	add.w	r2, r3, #8
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f103 0208 	add.w	r2, r3, #8
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2200      	movs	r2, #0
 8009d12:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009d14:	bf00      	nop
 8009d16:	370c      	adds	r7, #12
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1e:	4770      	bx	lr

08009d20 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009d20:	b480      	push	{r7}
 8009d22:	b083      	sub	sp, #12
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009d2e:	bf00      	nop
 8009d30:	370c      	adds	r7, #12
 8009d32:	46bd      	mov	sp, r7
 8009d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d38:	4770      	bx	lr

08009d3a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009d3a:	b480      	push	{r7}
 8009d3c:	b085      	sub	sp, #20
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	6078      	str	r0, [r7, #4]
 8009d42:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	685b      	ldr	r3, [r3, #4]
 8009d48:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	68fa      	ldr	r2, [r7, #12]
 8009d4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	689a      	ldr	r2, [r3, #8]
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	689b      	ldr	r3, [r3, #8]
 8009d5c:	683a      	ldr	r2, [r7, #0]
 8009d5e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	683a      	ldr	r2, [r7, #0]
 8009d64:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	687a      	ldr	r2, [r7, #4]
 8009d6a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	1c5a      	adds	r2, r3, #1
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	601a      	str	r2, [r3, #0]
}
 8009d76:	bf00      	nop
 8009d78:	3714      	adds	r7, #20
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d80:	4770      	bx	lr

08009d82 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009d82:	b480      	push	{r7}
 8009d84:	b085      	sub	sp, #20
 8009d86:	af00      	add	r7, sp, #0
 8009d88:	6078      	str	r0, [r7, #4]
 8009d8a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d98:	d103      	bne.n	8009da2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	691b      	ldr	r3, [r3, #16]
 8009d9e:	60fb      	str	r3, [r7, #12]
 8009da0:	e00c      	b.n	8009dbc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	3308      	adds	r3, #8
 8009da6:	60fb      	str	r3, [r7, #12]
 8009da8:	e002      	b.n	8009db0 <vListInsert+0x2e>
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	685b      	ldr	r3, [r3, #4]
 8009dae:	60fb      	str	r3, [r7, #12]
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	685b      	ldr	r3, [r3, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	68ba      	ldr	r2, [r7, #8]
 8009db8:	429a      	cmp	r2, r3
 8009dba:	d2f6      	bcs.n	8009daa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	685a      	ldr	r2, [r3, #4]
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	685b      	ldr	r3, [r3, #4]
 8009dc8:	683a      	ldr	r2, [r7, #0]
 8009dca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	68fa      	ldr	r2, [r7, #12]
 8009dd0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	683a      	ldr	r2, [r7, #0]
 8009dd6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	687a      	ldr	r2, [r7, #4]
 8009ddc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	1c5a      	adds	r2, r3, #1
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	601a      	str	r2, [r3, #0]
}
 8009de8:	bf00      	nop
 8009dea:	3714      	adds	r7, #20
 8009dec:	46bd      	mov	sp, r7
 8009dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df2:	4770      	bx	lr

08009df4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009df4:	b480      	push	{r7}
 8009df6:	b085      	sub	sp, #20
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	691b      	ldr	r3, [r3, #16]
 8009e00:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	685b      	ldr	r3, [r3, #4]
 8009e06:	687a      	ldr	r2, [r7, #4]
 8009e08:	6892      	ldr	r2, [r2, #8]
 8009e0a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	689b      	ldr	r3, [r3, #8]
 8009e10:	687a      	ldr	r2, [r7, #4]
 8009e12:	6852      	ldr	r2, [r2, #4]
 8009e14:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	685b      	ldr	r3, [r3, #4]
 8009e1a:	687a      	ldr	r2, [r7, #4]
 8009e1c:	429a      	cmp	r2, r3
 8009e1e:	d103      	bne.n	8009e28 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	689a      	ldr	r2, [r3, #8]
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	1e5a      	subs	r2, r3, #1
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	3714      	adds	r7, #20
 8009e40:	46bd      	mov	sp, r7
 8009e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e46:	4770      	bx	lr

08009e48 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b084      	sub	sp, #16
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
 8009e50:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d10b      	bne.n	8009e74 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009e5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e60:	f383 8811 	msr	BASEPRI, r3
 8009e64:	f3bf 8f6f 	isb	sy
 8009e68:	f3bf 8f4f 	dsb	sy
 8009e6c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009e6e:	bf00      	nop
 8009e70:	bf00      	nop
 8009e72:	e7fd      	b.n	8009e70 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009e74:	f002 fd10 	bl	800c898 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681a      	ldr	r2, [r3, #0]
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e80:	68f9      	ldr	r1, [r7, #12]
 8009e82:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009e84:	fb01 f303 	mul.w	r3, r1, r3
 8009e88:	441a      	add	r2, r3
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	2200      	movs	r2, #0
 8009e92:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681a      	ldr	r2, [r3, #0]
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	681a      	ldr	r2, [r3, #0]
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ea4:	3b01      	subs	r3, #1
 8009ea6:	68f9      	ldr	r1, [r7, #12]
 8009ea8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009eaa:	fb01 f303 	mul.w	r3, r1, r3
 8009eae:	441a      	add	r2, r3
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	22ff      	movs	r2, #255	@ 0xff
 8009eb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	22ff      	movs	r2, #255	@ 0xff
 8009ec0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d114      	bne.n	8009ef4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	691b      	ldr	r3, [r3, #16]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d01a      	beq.n	8009f08 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	3310      	adds	r3, #16
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f001 fc82 	bl	800b7e0 <xTaskRemoveFromEventList>
 8009edc:	4603      	mov	r3, r0
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d012      	beq.n	8009f08 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8009f18 <xQueueGenericReset+0xd0>)
 8009ee4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ee8:	601a      	str	r2, [r3, #0]
 8009eea:	f3bf 8f4f 	dsb	sy
 8009eee:	f3bf 8f6f 	isb	sy
 8009ef2:	e009      	b.n	8009f08 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	3310      	adds	r3, #16
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f7ff fef1 	bl	8009ce0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	3324      	adds	r3, #36	@ 0x24
 8009f02:	4618      	mov	r0, r3
 8009f04:	f7ff feec 	bl	8009ce0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009f08:	f002 fcf8 	bl	800c8fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009f0c:	2301      	movs	r3, #1
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3710      	adds	r7, #16
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}
 8009f16:	bf00      	nop
 8009f18:	e000ed04 	.word	0xe000ed04

08009f1c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b08e      	sub	sp, #56	@ 0x38
 8009f20:	af02      	add	r7, sp, #8
 8009f22:	60f8      	str	r0, [r7, #12]
 8009f24:	60b9      	str	r1, [r7, #8]
 8009f26:	607a      	str	r2, [r7, #4]
 8009f28:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d10b      	bne.n	8009f48 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f34:	f383 8811 	msr	BASEPRI, r3
 8009f38:	f3bf 8f6f 	isb	sy
 8009f3c:	f3bf 8f4f 	dsb	sy
 8009f40:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009f42:	bf00      	nop
 8009f44:	bf00      	nop
 8009f46:	e7fd      	b.n	8009f44 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d10b      	bne.n	8009f66 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f52:	f383 8811 	msr	BASEPRI, r3
 8009f56:	f3bf 8f6f 	isb	sy
 8009f5a:	f3bf 8f4f 	dsb	sy
 8009f5e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009f60:	bf00      	nop
 8009f62:	bf00      	nop
 8009f64:	e7fd      	b.n	8009f62 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d002      	beq.n	8009f72 <xQueueGenericCreateStatic+0x56>
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d001      	beq.n	8009f76 <xQueueGenericCreateStatic+0x5a>
 8009f72:	2301      	movs	r3, #1
 8009f74:	e000      	b.n	8009f78 <xQueueGenericCreateStatic+0x5c>
 8009f76:	2300      	movs	r3, #0
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d10b      	bne.n	8009f94 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f80:	f383 8811 	msr	BASEPRI, r3
 8009f84:	f3bf 8f6f 	isb	sy
 8009f88:	f3bf 8f4f 	dsb	sy
 8009f8c:	623b      	str	r3, [r7, #32]
}
 8009f8e:	bf00      	nop
 8009f90:	bf00      	nop
 8009f92:	e7fd      	b.n	8009f90 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d102      	bne.n	8009fa0 <xQueueGenericCreateStatic+0x84>
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d101      	bne.n	8009fa4 <xQueueGenericCreateStatic+0x88>
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	e000      	b.n	8009fa6 <xQueueGenericCreateStatic+0x8a>
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d10b      	bne.n	8009fc2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8009faa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fae:	f383 8811 	msr	BASEPRI, r3
 8009fb2:	f3bf 8f6f 	isb	sy
 8009fb6:	f3bf 8f4f 	dsb	sy
 8009fba:	61fb      	str	r3, [r7, #28]
}
 8009fbc:	bf00      	nop
 8009fbe:	bf00      	nop
 8009fc0:	e7fd      	b.n	8009fbe <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009fc2:	2350      	movs	r3, #80	@ 0x50
 8009fc4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	2b50      	cmp	r3, #80	@ 0x50
 8009fca:	d00b      	beq.n	8009fe4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009fcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fd0:	f383 8811 	msr	BASEPRI, r3
 8009fd4:	f3bf 8f6f 	isb	sy
 8009fd8:	f3bf 8f4f 	dsb	sy
 8009fdc:	61bb      	str	r3, [r7, #24]
}
 8009fde:	bf00      	nop
 8009fe0:	bf00      	nop
 8009fe2:	e7fd      	b.n	8009fe0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009fe4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8009fea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d00d      	beq.n	800a00c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ff2:	2201      	movs	r2, #1
 8009ff4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009ff8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ffe:	9300      	str	r3, [sp, #0]
 800a000:	4613      	mov	r3, r2
 800a002:	687a      	ldr	r2, [r7, #4]
 800a004:	68b9      	ldr	r1, [r7, #8]
 800a006:	68f8      	ldr	r0, [r7, #12]
 800a008:	f000 f840 	bl	800a08c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a00c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a00e:	4618      	mov	r0, r3
 800a010:	3730      	adds	r7, #48	@ 0x30
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}

0800a016 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a016:	b580      	push	{r7, lr}
 800a018:	b08a      	sub	sp, #40	@ 0x28
 800a01a:	af02      	add	r7, sp, #8
 800a01c:	60f8      	str	r0, [r7, #12]
 800a01e:	60b9      	str	r1, [r7, #8]
 800a020:	4613      	mov	r3, r2
 800a022:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d10b      	bne.n	800a042 <xQueueGenericCreate+0x2c>
	__asm volatile
 800a02a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a02e:	f383 8811 	msr	BASEPRI, r3
 800a032:	f3bf 8f6f 	isb	sy
 800a036:	f3bf 8f4f 	dsb	sy
 800a03a:	613b      	str	r3, [r7, #16]
}
 800a03c:	bf00      	nop
 800a03e:	bf00      	nop
 800a040:	e7fd      	b.n	800a03e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	68ba      	ldr	r2, [r7, #8]
 800a046:	fb02 f303 	mul.w	r3, r2, r3
 800a04a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a04c:	69fb      	ldr	r3, [r7, #28]
 800a04e:	3350      	adds	r3, #80	@ 0x50
 800a050:	4618      	mov	r0, r3
 800a052:	f002 fd43 	bl	800cadc <pvPortMalloc>
 800a056:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a058:	69bb      	ldr	r3, [r7, #24]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d011      	beq.n	800a082 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a05e:	69bb      	ldr	r3, [r7, #24]
 800a060:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	3350      	adds	r3, #80	@ 0x50
 800a066:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a068:	69bb      	ldr	r3, [r7, #24]
 800a06a:	2200      	movs	r2, #0
 800a06c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a070:	79fa      	ldrb	r2, [r7, #7]
 800a072:	69bb      	ldr	r3, [r7, #24]
 800a074:	9300      	str	r3, [sp, #0]
 800a076:	4613      	mov	r3, r2
 800a078:	697a      	ldr	r2, [r7, #20]
 800a07a:	68b9      	ldr	r1, [r7, #8]
 800a07c:	68f8      	ldr	r0, [r7, #12]
 800a07e:	f000 f805 	bl	800a08c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a082:	69bb      	ldr	r3, [r7, #24]
	}
 800a084:	4618      	mov	r0, r3
 800a086:	3720      	adds	r7, #32
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}

0800a08c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b084      	sub	sp, #16
 800a090:	af00      	add	r7, sp, #0
 800a092:	60f8      	str	r0, [r7, #12]
 800a094:	60b9      	str	r1, [r7, #8]
 800a096:	607a      	str	r2, [r7, #4]
 800a098:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d103      	bne.n	800a0a8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a0a0:	69bb      	ldr	r3, [r7, #24]
 800a0a2:	69ba      	ldr	r2, [r7, #24]
 800a0a4:	601a      	str	r2, [r3, #0]
 800a0a6:	e002      	b.n	800a0ae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a0a8:	69bb      	ldr	r3, [r7, #24]
 800a0aa:	687a      	ldr	r2, [r7, #4]
 800a0ac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a0ae:	69bb      	ldr	r3, [r7, #24]
 800a0b0:	68fa      	ldr	r2, [r7, #12]
 800a0b2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a0b4:	69bb      	ldr	r3, [r7, #24]
 800a0b6:	68ba      	ldr	r2, [r7, #8]
 800a0b8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a0ba:	2101      	movs	r1, #1
 800a0bc:	69b8      	ldr	r0, [r7, #24]
 800a0be:	f7ff fec3 	bl	8009e48 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a0c2:	69bb      	ldr	r3, [r7, #24]
 800a0c4:	78fa      	ldrb	r2, [r7, #3]
 800a0c6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a0ca:	bf00      	nop
 800a0cc:	3710      	adds	r7, #16
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}
	...

0800a0d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b08e      	sub	sp, #56	@ 0x38
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	60f8      	str	r0, [r7, #12]
 800a0dc:	60b9      	str	r1, [r7, #8]
 800a0de:	607a      	str	r2, [r7, #4]
 800a0e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a0ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d10b      	bne.n	800a108 <xQueueGenericSend+0x34>
	__asm volatile
 800a0f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0f4:	f383 8811 	msr	BASEPRI, r3
 800a0f8:	f3bf 8f6f 	isb	sy
 800a0fc:	f3bf 8f4f 	dsb	sy
 800a100:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a102:	bf00      	nop
 800a104:	bf00      	nop
 800a106:	e7fd      	b.n	800a104 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d103      	bne.n	800a116 <xQueueGenericSend+0x42>
 800a10e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a112:	2b00      	cmp	r3, #0
 800a114:	d101      	bne.n	800a11a <xQueueGenericSend+0x46>
 800a116:	2301      	movs	r3, #1
 800a118:	e000      	b.n	800a11c <xQueueGenericSend+0x48>
 800a11a:	2300      	movs	r3, #0
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d10b      	bne.n	800a138 <xQueueGenericSend+0x64>
	__asm volatile
 800a120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a124:	f383 8811 	msr	BASEPRI, r3
 800a128:	f3bf 8f6f 	isb	sy
 800a12c:	f3bf 8f4f 	dsb	sy
 800a130:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a132:	bf00      	nop
 800a134:	bf00      	nop
 800a136:	e7fd      	b.n	800a134 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	2b02      	cmp	r3, #2
 800a13c:	d103      	bne.n	800a146 <xQueueGenericSend+0x72>
 800a13e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a140:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a142:	2b01      	cmp	r3, #1
 800a144:	d101      	bne.n	800a14a <xQueueGenericSend+0x76>
 800a146:	2301      	movs	r3, #1
 800a148:	e000      	b.n	800a14c <xQueueGenericSend+0x78>
 800a14a:	2300      	movs	r3, #0
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d10b      	bne.n	800a168 <xQueueGenericSend+0x94>
	__asm volatile
 800a150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a154:	f383 8811 	msr	BASEPRI, r3
 800a158:	f3bf 8f6f 	isb	sy
 800a15c:	f3bf 8f4f 	dsb	sy
 800a160:	623b      	str	r3, [r7, #32]
}
 800a162:	bf00      	nop
 800a164:	bf00      	nop
 800a166:	e7fd      	b.n	800a164 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a168:	f001 fd00 	bl	800bb6c <xTaskGetSchedulerState>
 800a16c:	4603      	mov	r3, r0
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d102      	bne.n	800a178 <xQueueGenericSend+0xa4>
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d101      	bne.n	800a17c <xQueueGenericSend+0xa8>
 800a178:	2301      	movs	r3, #1
 800a17a:	e000      	b.n	800a17e <xQueueGenericSend+0xaa>
 800a17c:	2300      	movs	r3, #0
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d10b      	bne.n	800a19a <xQueueGenericSend+0xc6>
	__asm volatile
 800a182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a186:	f383 8811 	msr	BASEPRI, r3
 800a18a:	f3bf 8f6f 	isb	sy
 800a18e:	f3bf 8f4f 	dsb	sy
 800a192:	61fb      	str	r3, [r7, #28]
}
 800a194:	bf00      	nop
 800a196:	bf00      	nop
 800a198:	e7fd      	b.n	800a196 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a19a:	f002 fb7d 	bl	800c898 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a19e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a1a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1a6:	429a      	cmp	r2, r3
 800a1a8:	d302      	bcc.n	800a1b0 <xQueueGenericSend+0xdc>
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	2b02      	cmp	r3, #2
 800a1ae:	d129      	bne.n	800a204 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a1b0:	683a      	ldr	r2, [r7, #0]
 800a1b2:	68b9      	ldr	r1, [r7, #8]
 800a1b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a1b6:	f000 fc68 	bl	800aa8a <prvCopyDataToQueue>
 800a1ba:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a1bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d010      	beq.n	800a1e6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a1c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1c6:	3324      	adds	r3, #36	@ 0x24
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f001 fb09 	bl	800b7e0 <xTaskRemoveFromEventList>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d013      	beq.n	800a1fc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a1d4:	4b3f      	ldr	r3, [pc, #252]	@ (800a2d4 <xQueueGenericSend+0x200>)
 800a1d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a1da:	601a      	str	r2, [r3, #0]
 800a1dc:	f3bf 8f4f 	dsb	sy
 800a1e0:	f3bf 8f6f 	isb	sy
 800a1e4:	e00a      	b.n	800a1fc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a1e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d007      	beq.n	800a1fc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a1ec:	4b39      	ldr	r3, [pc, #228]	@ (800a2d4 <xQueueGenericSend+0x200>)
 800a1ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a1f2:	601a      	str	r2, [r3, #0]
 800a1f4:	f3bf 8f4f 	dsb	sy
 800a1f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a1fc:	f002 fb7e 	bl	800c8fc <vPortExitCritical>
				return pdPASS;
 800a200:	2301      	movs	r3, #1
 800a202:	e063      	b.n	800a2cc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d103      	bne.n	800a212 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a20a:	f002 fb77 	bl	800c8fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a20e:	2300      	movs	r3, #0
 800a210:	e05c      	b.n	800a2cc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a212:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a214:	2b00      	cmp	r3, #0
 800a216:	d106      	bne.n	800a226 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a218:	f107 0314 	add.w	r3, r7, #20
 800a21c:	4618      	mov	r0, r3
 800a21e:	f001 fb43 	bl	800b8a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a222:	2301      	movs	r3, #1
 800a224:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a226:	f002 fb69 	bl	800c8fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a22a:	f001 f893 	bl	800b354 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a22e:	f002 fb33 	bl	800c898 <vPortEnterCritical>
 800a232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a234:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a238:	b25b      	sxtb	r3, r3
 800a23a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a23e:	d103      	bne.n	800a248 <xQueueGenericSend+0x174>
 800a240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a242:	2200      	movs	r2, #0
 800a244:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a24a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a24e:	b25b      	sxtb	r3, r3
 800a250:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a254:	d103      	bne.n	800a25e <xQueueGenericSend+0x18a>
 800a256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a258:	2200      	movs	r2, #0
 800a25a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a25e:	f002 fb4d 	bl	800c8fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a262:	1d3a      	adds	r2, r7, #4
 800a264:	f107 0314 	add.w	r3, r7, #20
 800a268:	4611      	mov	r1, r2
 800a26a:	4618      	mov	r0, r3
 800a26c:	f001 fb32 	bl	800b8d4 <xTaskCheckForTimeOut>
 800a270:	4603      	mov	r3, r0
 800a272:	2b00      	cmp	r3, #0
 800a274:	d124      	bne.n	800a2c0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a276:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a278:	f000 fcff 	bl	800ac7a <prvIsQueueFull>
 800a27c:	4603      	mov	r3, r0
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d018      	beq.n	800a2b4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a284:	3310      	adds	r3, #16
 800a286:	687a      	ldr	r2, [r7, #4]
 800a288:	4611      	mov	r1, r2
 800a28a:	4618      	mov	r0, r3
 800a28c:	f001 fa56 	bl	800b73c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a290:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a292:	f000 fc8a 	bl	800abaa <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a296:	f001 f86b 	bl	800b370 <xTaskResumeAll>
 800a29a:	4603      	mov	r3, r0
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	f47f af7c 	bne.w	800a19a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a2a2:	4b0c      	ldr	r3, [pc, #48]	@ (800a2d4 <xQueueGenericSend+0x200>)
 800a2a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a2a8:	601a      	str	r2, [r3, #0]
 800a2aa:	f3bf 8f4f 	dsb	sy
 800a2ae:	f3bf 8f6f 	isb	sy
 800a2b2:	e772      	b.n	800a19a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a2b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a2b6:	f000 fc78 	bl	800abaa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a2ba:	f001 f859 	bl	800b370 <xTaskResumeAll>
 800a2be:	e76c      	b.n	800a19a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a2c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a2c2:	f000 fc72 	bl	800abaa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a2c6:	f001 f853 	bl	800b370 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a2ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	3738      	adds	r7, #56	@ 0x38
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}
 800a2d4:	e000ed04 	.word	0xe000ed04

0800a2d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b090      	sub	sp, #64	@ 0x40
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	60f8      	str	r0, [r7, #12]
 800a2e0:	60b9      	str	r1, [r7, #8]
 800a2e2:	607a      	str	r2, [r7, #4]
 800a2e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a2ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d10b      	bne.n	800a308 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a2f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2f4:	f383 8811 	msr	BASEPRI, r3
 800a2f8:	f3bf 8f6f 	isb	sy
 800a2fc:	f3bf 8f4f 	dsb	sy
 800a300:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a302:	bf00      	nop
 800a304:	bf00      	nop
 800a306:	e7fd      	b.n	800a304 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d103      	bne.n	800a316 <xQueueGenericSendFromISR+0x3e>
 800a30e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a312:	2b00      	cmp	r3, #0
 800a314:	d101      	bne.n	800a31a <xQueueGenericSendFromISR+0x42>
 800a316:	2301      	movs	r3, #1
 800a318:	e000      	b.n	800a31c <xQueueGenericSendFromISR+0x44>
 800a31a:	2300      	movs	r3, #0
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d10b      	bne.n	800a338 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a324:	f383 8811 	msr	BASEPRI, r3
 800a328:	f3bf 8f6f 	isb	sy
 800a32c:	f3bf 8f4f 	dsb	sy
 800a330:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a332:	bf00      	nop
 800a334:	bf00      	nop
 800a336:	e7fd      	b.n	800a334 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	2b02      	cmp	r3, #2
 800a33c:	d103      	bne.n	800a346 <xQueueGenericSendFromISR+0x6e>
 800a33e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a340:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a342:	2b01      	cmp	r3, #1
 800a344:	d101      	bne.n	800a34a <xQueueGenericSendFromISR+0x72>
 800a346:	2301      	movs	r3, #1
 800a348:	e000      	b.n	800a34c <xQueueGenericSendFromISR+0x74>
 800a34a:	2300      	movs	r3, #0
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d10b      	bne.n	800a368 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a354:	f383 8811 	msr	BASEPRI, r3
 800a358:	f3bf 8f6f 	isb	sy
 800a35c:	f3bf 8f4f 	dsb	sy
 800a360:	623b      	str	r3, [r7, #32]
}
 800a362:	bf00      	nop
 800a364:	bf00      	nop
 800a366:	e7fd      	b.n	800a364 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a368:	f002 fb76 	bl	800ca58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a36c:	f3ef 8211 	mrs	r2, BASEPRI
 800a370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a374:	f383 8811 	msr	BASEPRI, r3
 800a378:	f3bf 8f6f 	isb	sy
 800a37c:	f3bf 8f4f 	dsb	sy
 800a380:	61fa      	str	r2, [r7, #28]
 800a382:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a384:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a386:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a38a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a38c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a38e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a390:	429a      	cmp	r2, r3
 800a392:	d302      	bcc.n	800a39a <xQueueGenericSendFromISR+0xc2>
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	2b02      	cmp	r3, #2
 800a398:	d12f      	bne.n	800a3fa <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a39a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a39c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a3a0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a3a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a3aa:	683a      	ldr	r2, [r7, #0]
 800a3ac:	68b9      	ldr	r1, [r7, #8]
 800a3ae:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a3b0:	f000 fb6b 	bl	800aa8a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a3b4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a3b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3bc:	d112      	bne.n	800a3e4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a3be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d016      	beq.n	800a3f4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a3c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3c8:	3324      	adds	r3, #36	@ 0x24
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f001 fa08 	bl	800b7e0 <xTaskRemoveFromEventList>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d00e      	beq.n	800a3f4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d00b      	beq.n	800a3f4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2201      	movs	r2, #1
 800a3e0:	601a      	str	r2, [r3, #0]
 800a3e2:	e007      	b.n	800a3f4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a3e4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a3e8:	3301      	adds	r3, #1
 800a3ea:	b2db      	uxtb	r3, r3
 800a3ec:	b25a      	sxtb	r2, r3
 800a3ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a3f8:	e001      	b.n	800a3fe <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a400:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a408:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a40a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	3740      	adds	r7, #64	@ 0x40
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}

0800a414 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b08e      	sub	sp, #56	@ 0x38
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
 800a41c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a424:	2b00      	cmp	r3, #0
 800a426:	d10b      	bne.n	800a440 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800a428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a42c:	f383 8811 	msr	BASEPRI, r3
 800a430:	f3bf 8f6f 	isb	sy
 800a434:	f3bf 8f4f 	dsb	sy
 800a438:	623b      	str	r3, [r7, #32]
}
 800a43a:	bf00      	nop
 800a43c:	bf00      	nop
 800a43e:	e7fd      	b.n	800a43c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a444:	2b00      	cmp	r3, #0
 800a446:	d00b      	beq.n	800a460 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800a448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a44c:	f383 8811 	msr	BASEPRI, r3
 800a450:	f3bf 8f6f 	isb	sy
 800a454:	f3bf 8f4f 	dsb	sy
 800a458:	61fb      	str	r3, [r7, #28]
}
 800a45a:	bf00      	nop
 800a45c:	bf00      	nop
 800a45e:	e7fd      	b.n	800a45c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d103      	bne.n	800a470 <xQueueGiveFromISR+0x5c>
 800a468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a46a:	689b      	ldr	r3, [r3, #8]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d101      	bne.n	800a474 <xQueueGiveFromISR+0x60>
 800a470:	2301      	movs	r3, #1
 800a472:	e000      	b.n	800a476 <xQueueGiveFromISR+0x62>
 800a474:	2300      	movs	r3, #0
 800a476:	2b00      	cmp	r3, #0
 800a478:	d10b      	bne.n	800a492 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800a47a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a47e:	f383 8811 	msr	BASEPRI, r3
 800a482:	f3bf 8f6f 	isb	sy
 800a486:	f3bf 8f4f 	dsb	sy
 800a48a:	61bb      	str	r3, [r7, #24]
}
 800a48c:	bf00      	nop
 800a48e:	bf00      	nop
 800a490:	e7fd      	b.n	800a48e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a492:	f002 fae1 	bl	800ca58 <vPortValidateInterruptPriority>
	__asm volatile
 800a496:	f3ef 8211 	mrs	r2, BASEPRI
 800a49a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a49e:	f383 8811 	msr	BASEPRI, r3
 800a4a2:	f3bf 8f6f 	isb	sy
 800a4a6:	f3bf 8f4f 	dsb	sy
 800a4aa:	617a      	str	r2, [r7, #20]
 800a4ac:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a4ae:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a4b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a4b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4b6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a4b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a4bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a4be:	429a      	cmp	r2, r3
 800a4c0:	d22b      	bcs.n	800a51a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a4c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a4c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a4cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4ce:	1c5a      	adds	r2, r3, #1
 800a4d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4d2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a4d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a4d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4dc:	d112      	bne.n	800a504 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a4de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d016      	beq.n	800a514 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a4e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4e8:	3324      	adds	r3, #36	@ 0x24
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f001 f978 	bl	800b7e0 <xTaskRemoveFromEventList>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d00e      	beq.n	800a514 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d00b      	beq.n	800a514 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	2201      	movs	r2, #1
 800a500:	601a      	str	r2, [r3, #0]
 800a502:	e007      	b.n	800a514 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a504:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a508:	3301      	adds	r3, #1
 800a50a:	b2db      	uxtb	r3, r3
 800a50c:	b25a      	sxtb	r2, r3
 800a50e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a510:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a514:	2301      	movs	r3, #1
 800a516:	637b      	str	r3, [r7, #52]	@ 0x34
 800a518:	e001      	b.n	800a51e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a51a:	2300      	movs	r3, #0
 800a51c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a51e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a520:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	f383 8811 	msr	BASEPRI, r3
}
 800a528:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a52a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	3738      	adds	r7, #56	@ 0x38
 800a530:	46bd      	mov	sp, r7
 800a532:	bd80      	pop	{r7, pc}

0800a534 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b08c      	sub	sp, #48	@ 0x30
 800a538:	af00      	add	r7, sp, #0
 800a53a:	60f8      	str	r0, [r7, #12]
 800a53c:	60b9      	str	r1, [r7, #8]
 800a53e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a540:	2300      	movs	r3, #0
 800a542:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d10b      	bne.n	800a566 <xQueueReceive+0x32>
	__asm volatile
 800a54e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a552:	f383 8811 	msr	BASEPRI, r3
 800a556:	f3bf 8f6f 	isb	sy
 800a55a:	f3bf 8f4f 	dsb	sy
 800a55e:	623b      	str	r3, [r7, #32]
}
 800a560:	bf00      	nop
 800a562:	bf00      	nop
 800a564:	e7fd      	b.n	800a562 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d103      	bne.n	800a574 <xQueueReceive+0x40>
 800a56c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a56e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a570:	2b00      	cmp	r3, #0
 800a572:	d101      	bne.n	800a578 <xQueueReceive+0x44>
 800a574:	2301      	movs	r3, #1
 800a576:	e000      	b.n	800a57a <xQueueReceive+0x46>
 800a578:	2300      	movs	r3, #0
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d10b      	bne.n	800a596 <xQueueReceive+0x62>
	__asm volatile
 800a57e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a582:	f383 8811 	msr	BASEPRI, r3
 800a586:	f3bf 8f6f 	isb	sy
 800a58a:	f3bf 8f4f 	dsb	sy
 800a58e:	61fb      	str	r3, [r7, #28]
}
 800a590:	bf00      	nop
 800a592:	bf00      	nop
 800a594:	e7fd      	b.n	800a592 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a596:	f001 fae9 	bl	800bb6c <xTaskGetSchedulerState>
 800a59a:	4603      	mov	r3, r0
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d102      	bne.n	800a5a6 <xQueueReceive+0x72>
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d101      	bne.n	800a5aa <xQueueReceive+0x76>
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	e000      	b.n	800a5ac <xQueueReceive+0x78>
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d10b      	bne.n	800a5c8 <xQueueReceive+0x94>
	__asm volatile
 800a5b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5b4:	f383 8811 	msr	BASEPRI, r3
 800a5b8:	f3bf 8f6f 	isb	sy
 800a5bc:	f3bf 8f4f 	dsb	sy
 800a5c0:	61bb      	str	r3, [r7, #24]
}
 800a5c2:	bf00      	nop
 800a5c4:	bf00      	nop
 800a5c6:	e7fd      	b.n	800a5c4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a5c8:	f002 f966 	bl	800c898 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a5cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5d0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a5d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d01f      	beq.n	800a618 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a5d8:	68b9      	ldr	r1, [r7, #8]
 800a5da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a5dc:	f000 fabf 	bl	800ab5e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a5e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5e2:	1e5a      	subs	r2, r3, #1
 800a5e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5e6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a5e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5ea:	691b      	ldr	r3, [r3, #16]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d00f      	beq.n	800a610 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a5f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5f2:	3310      	adds	r3, #16
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	f001 f8f3 	bl	800b7e0 <xTaskRemoveFromEventList>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d007      	beq.n	800a610 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a600:	4b3c      	ldr	r3, [pc, #240]	@ (800a6f4 <xQueueReceive+0x1c0>)
 800a602:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a606:	601a      	str	r2, [r3, #0]
 800a608:	f3bf 8f4f 	dsb	sy
 800a60c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a610:	f002 f974 	bl	800c8fc <vPortExitCritical>
				return pdPASS;
 800a614:	2301      	movs	r3, #1
 800a616:	e069      	b.n	800a6ec <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d103      	bne.n	800a626 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a61e:	f002 f96d 	bl	800c8fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a622:	2300      	movs	r3, #0
 800a624:	e062      	b.n	800a6ec <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d106      	bne.n	800a63a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a62c:	f107 0310 	add.w	r3, r7, #16
 800a630:	4618      	mov	r0, r3
 800a632:	f001 f939 	bl	800b8a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a636:	2301      	movs	r3, #1
 800a638:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a63a:	f002 f95f 	bl	800c8fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a63e:	f000 fe89 	bl	800b354 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a642:	f002 f929 	bl	800c898 <vPortEnterCritical>
 800a646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a648:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a64c:	b25b      	sxtb	r3, r3
 800a64e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a652:	d103      	bne.n	800a65c <xQueueReceive+0x128>
 800a654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a656:	2200      	movs	r2, #0
 800a658:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a65c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a65e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a662:	b25b      	sxtb	r3, r3
 800a664:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a668:	d103      	bne.n	800a672 <xQueueReceive+0x13e>
 800a66a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a66c:	2200      	movs	r2, #0
 800a66e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a672:	f002 f943 	bl	800c8fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a676:	1d3a      	adds	r2, r7, #4
 800a678:	f107 0310 	add.w	r3, r7, #16
 800a67c:	4611      	mov	r1, r2
 800a67e:	4618      	mov	r0, r3
 800a680:	f001 f928 	bl	800b8d4 <xTaskCheckForTimeOut>
 800a684:	4603      	mov	r3, r0
 800a686:	2b00      	cmp	r3, #0
 800a688:	d123      	bne.n	800a6d2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a68a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a68c:	f000 fadf 	bl	800ac4e <prvIsQueueEmpty>
 800a690:	4603      	mov	r3, r0
 800a692:	2b00      	cmp	r3, #0
 800a694:	d017      	beq.n	800a6c6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a698:	3324      	adds	r3, #36	@ 0x24
 800a69a:	687a      	ldr	r2, [r7, #4]
 800a69c:	4611      	mov	r1, r2
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f001 f84c 	bl	800b73c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a6a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a6a6:	f000 fa80 	bl	800abaa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a6aa:	f000 fe61 	bl	800b370 <xTaskResumeAll>
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d189      	bne.n	800a5c8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a6b4:	4b0f      	ldr	r3, [pc, #60]	@ (800a6f4 <xQueueReceive+0x1c0>)
 800a6b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a6ba:	601a      	str	r2, [r3, #0]
 800a6bc:	f3bf 8f4f 	dsb	sy
 800a6c0:	f3bf 8f6f 	isb	sy
 800a6c4:	e780      	b.n	800a5c8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a6c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a6c8:	f000 fa6f 	bl	800abaa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a6cc:	f000 fe50 	bl	800b370 <xTaskResumeAll>
 800a6d0:	e77a      	b.n	800a5c8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a6d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a6d4:	f000 fa69 	bl	800abaa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a6d8:	f000 fe4a 	bl	800b370 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a6dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a6de:	f000 fab6 	bl	800ac4e <prvIsQueueEmpty>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	f43f af6f 	beq.w	800a5c8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a6ea:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	3730      	adds	r7, #48	@ 0x30
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}
 800a6f4:	e000ed04 	.word	0xe000ed04

0800a6f8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b08e      	sub	sp, #56	@ 0x38
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
 800a700:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a702:	2300      	movs	r3, #0
 800a704:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a70a:	2300      	movs	r3, #0
 800a70c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a70e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a710:	2b00      	cmp	r3, #0
 800a712:	d10b      	bne.n	800a72c <xQueueSemaphoreTake+0x34>
	__asm volatile
 800a714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a718:	f383 8811 	msr	BASEPRI, r3
 800a71c:	f3bf 8f6f 	isb	sy
 800a720:	f3bf 8f4f 	dsb	sy
 800a724:	623b      	str	r3, [r7, #32]
}
 800a726:	bf00      	nop
 800a728:	bf00      	nop
 800a72a:	e7fd      	b.n	800a728 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a72c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a72e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a730:	2b00      	cmp	r3, #0
 800a732:	d00b      	beq.n	800a74c <xQueueSemaphoreTake+0x54>
	__asm volatile
 800a734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a738:	f383 8811 	msr	BASEPRI, r3
 800a73c:	f3bf 8f6f 	isb	sy
 800a740:	f3bf 8f4f 	dsb	sy
 800a744:	61fb      	str	r3, [r7, #28]
}
 800a746:	bf00      	nop
 800a748:	bf00      	nop
 800a74a:	e7fd      	b.n	800a748 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a74c:	f001 fa0e 	bl	800bb6c <xTaskGetSchedulerState>
 800a750:	4603      	mov	r3, r0
 800a752:	2b00      	cmp	r3, #0
 800a754:	d102      	bne.n	800a75c <xQueueSemaphoreTake+0x64>
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d101      	bne.n	800a760 <xQueueSemaphoreTake+0x68>
 800a75c:	2301      	movs	r3, #1
 800a75e:	e000      	b.n	800a762 <xQueueSemaphoreTake+0x6a>
 800a760:	2300      	movs	r3, #0
 800a762:	2b00      	cmp	r3, #0
 800a764:	d10b      	bne.n	800a77e <xQueueSemaphoreTake+0x86>
	__asm volatile
 800a766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a76a:	f383 8811 	msr	BASEPRI, r3
 800a76e:	f3bf 8f6f 	isb	sy
 800a772:	f3bf 8f4f 	dsb	sy
 800a776:	61bb      	str	r3, [r7, #24]
}
 800a778:	bf00      	nop
 800a77a:	bf00      	nop
 800a77c:	e7fd      	b.n	800a77a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a77e:	f002 f88b 	bl	800c898 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a784:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a786:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d024      	beq.n	800a7d8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a78e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a790:	1e5a      	subs	r2, r3, #1
 800a792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a794:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d104      	bne.n	800a7a8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a79e:	f001 fb91 	bl	800bec4 <pvTaskIncrementMutexHeldCount>
 800a7a2:	4602      	mov	r2, r0
 800a7a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7a6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a7a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7aa:	691b      	ldr	r3, [r3, #16]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d00f      	beq.n	800a7d0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a7b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7b2:	3310      	adds	r3, #16
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f001 f813 	bl	800b7e0 <xTaskRemoveFromEventList>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d007      	beq.n	800a7d0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a7c0:	4b54      	ldr	r3, [pc, #336]	@ (800a914 <xQueueSemaphoreTake+0x21c>)
 800a7c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a7c6:	601a      	str	r2, [r3, #0]
 800a7c8:	f3bf 8f4f 	dsb	sy
 800a7cc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a7d0:	f002 f894 	bl	800c8fc <vPortExitCritical>
				return pdPASS;
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	e098      	b.n	800a90a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d112      	bne.n	800a804 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a7de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d00b      	beq.n	800a7fc <xQueueSemaphoreTake+0x104>
	__asm volatile
 800a7e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7e8:	f383 8811 	msr	BASEPRI, r3
 800a7ec:	f3bf 8f6f 	isb	sy
 800a7f0:	f3bf 8f4f 	dsb	sy
 800a7f4:	617b      	str	r3, [r7, #20]
}
 800a7f6:	bf00      	nop
 800a7f8:	bf00      	nop
 800a7fa:	e7fd      	b.n	800a7f8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a7fc:	f002 f87e 	bl	800c8fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a800:	2300      	movs	r3, #0
 800a802:	e082      	b.n	800a90a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a804:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a806:	2b00      	cmp	r3, #0
 800a808:	d106      	bne.n	800a818 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a80a:	f107 030c 	add.w	r3, r7, #12
 800a80e:	4618      	mov	r0, r3
 800a810:	f001 f84a 	bl	800b8a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a814:	2301      	movs	r3, #1
 800a816:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a818:	f002 f870 	bl	800c8fc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a81c:	f000 fd9a 	bl	800b354 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a820:	f002 f83a 	bl	800c898 <vPortEnterCritical>
 800a824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a826:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a82a:	b25b      	sxtb	r3, r3
 800a82c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a830:	d103      	bne.n	800a83a <xQueueSemaphoreTake+0x142>
 800a832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a834:	2200      	movs	r2, #0
 800a836:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a83a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a83c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a840:	b25b      	sxtb	r3, r3
 800a842:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a846:	d103      	bne.n	800a850 <xQueueSemaphoreTake+0x158>
 800a848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a84a:	2200      	movs	r2, #0
 800a84c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a850:	f002 f854 	bl	800c8fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a854:	463a      	mov	r2, r7
 800a856:	f107 030c 	add.w	r3, r7, #12
 800a85a:	4611      	mov	r1, r2
 800a85c:	4618      	mov	r0, r3
 800a85e:	f001 f839 	bl	800b8d4 <xTaskCheckForTimeOut>
 800a862:	4603      	mov	r3, r0
 800a864:	2b00      	cmp	r3, #0
 800a866:	d132      	bne.n	800a8ce <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a868:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a86a:	f000 f9f0 	bl	800ac4e <prvIsQueueEmpty>
 800a86e:	4603      	mov	r3, r0
 800a870:	2b00      	cmp	r3, #0
 800a872:	d026      	beq.n	800a8c2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d109      	bne.n	800a890 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800a87c:	f002 f80c 	bl	800c898 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a882:	689b      	ldr	r3, [r3, #8]
 800a884:	4618      	mov	r0, r3
 800a886:	f001 f98f 	bl	800bba8 <xTaskPriorityInherit>
 800a88a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800a88c:	f002 f836 	bl	800c8fc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a892:	3324      	adds	r3, #36	@ 0x24
 800a894:	683a      	ldr	r2, [r7, #0]
 800a896:	4611      	mov	r1, r2
 800a898:	4618      	mov	r0, r3
 800a89a:	f000 ff4f 	bl	800b73c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a89e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a8a0:	f000 f983 	bl	800abaa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a8a4:	f000 fd64 	bl	800b370 <xTaskResumeAll>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	f47f af67 	bne.w	800a77e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800a8b0:	4b18      	ldr	r3, [pc, #96]	@ (800a914 <xQueueSemaphoreTake+0x21c>)
 800a8b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a8b6:	601a      	str	r2, [r3, #0]
 800a8b8:	f3bf 8f4f 	dsb	sy
 800a8bc:	f3bf 8f6f 	isb	sy
 800a8c0:	e75d      	b.n	800a77e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a8c2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a8c4:	f000 f971 	bl	800abaa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a8c8:	f000 fd52 	bl	800b370 <xTaskResumeAll>
 800a8cc:	e757      	b.n	800a77e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a8ce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a8d0:	f000 f96b 	bl	800abaa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a8d4:	f000 fd4c 	bl	800b370 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a8d8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a8da:	f000 f9b8 	bl	800ac4e <prvIsQueueEmpty>
 800a8de:	4603      	mov	r3, r0
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	f43f af4c 	beq.w	800a77e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a8e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d00d      	beq.n	800a908 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800a8ec:	f001 ffd4 	bl	800c898 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a8f0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a8f2:	f000 f8b2 	bl	800aa5a <prvGetDisinheritPriorityAfterTimeout>
 800a8f6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a8f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8fa:	689b      	ldr	r3, [r3, #8]
 800a8fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a8fe:	4618      	mov	r0, r3
 800a900:	f001 fa50 	bl	800bda4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a904:	f001 fffa 	bl	800c8fc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a908:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	3738      	adds	r7, #56	@ 0x38
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}
 800a912:	bf00      	nop
 800a914:	e000ed04 	.word	0xe000ed04

0800a918 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b08e      	sub	sp, #56	@ 0x38
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	60f8      	str	r0, [r7, #12]
 800a920:	60b9      	str	r1, [r7, #8]
 800a922:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d10b      	bne.n	800a946 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800a92e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a932:	f383 8811 	msr	BASEPRI, r3
 800a936:	f3bf 8f6f 	isb	sy
 800a93a:	f3bf 8f4f 	dsb	sy
 800a93e:	623b      	str	r3, [r7, #32]
}
 800a940:	bf00      	nop
 800a942:	bf00      	nop
 800a944:	e7fd      	b.n	800a942 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d103      	bne.n	800a954 <xQueueReceiveFromISR+0x3c>
 800a94c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a94e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a950:	2b00      	cmp	r3, #0
 800a952:	d101      	bne.n	800a958 <xQueueReceiveFromISR+0x40>
 800a954:	2301      	movs	r3, #1
 800a956:	e000      	b.n	800a95a <xQueueReceiveFromISR+0x42>
 800a958:	2300      	movs	r3, #0
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d10b      	bne.n	800a976 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800a95e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a962:	f383 8811 	msr	BASEPRI, r3
 800a966:	f3bf 8f6f 	isb	sy
 800a96a:	f3bf 8f4f 	dsb	sy
 800a96e:	61fb      	str	r3, [r7, #28]
}
 800a970:	bf00      	nop
 800a972:	bf00      	nop
 800a974:	e7fd      	b.n	800a972 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a976:	f002 f86f 	bl	800ca58 <vPortValidateInterruptPriority>
	__asm volatile
 800a97a:	f3ef 8211 	mrs	r2, BASEPRI
 800a97e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a982:	f383 8811 	msr	BASEPRI, r3
 800a986:	f3bf 8f6f 	isb	sy
 800a98a:	f3bf 8f4f 	dsb	sy
 800a98e:	61ba      	str	r2, [r7, #24]
 800a990:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a992:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a994:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a998:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a99a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a99c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d02f      	beq.n	800aa02 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a9a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a9a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a9ac:	68b9      	ldr	r1, [r7, #8]
 800a9ae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a9b0:	f000 f8d5 	bl	800ab5e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a9b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9b6:	1e5a      	subs	r2, r3, #1
 800a9b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9ba:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a9bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a9c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9c4:	d112      	bne.n	800a9ec <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a9c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9c8:	691b      	ldr	r3, [r3, #16]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d016      	beq.n	800a9fc <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a9ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9d0:	3310      	adds	r3, #16
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f000 ff04 	bl	800b7e0 <xTaskRemoveFromEventList>
 800a9d8:	4603      	mov	r3, r0
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d00e      	beq.n	800a9fc <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d00b      	beq.n	800a9fc <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2201      	movs	r2, #1
 800a9e8:	601a      	str	r2, [r3, #0]
 800a9ea:	e007      	b.n	800a9fc <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a9ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a9f0:	3301      	adds	r3, #1
 800a9f2:	b2db      	uxtb	r3, r3
 800a9f4:	b25a      	sxtb	r2, r3
 800a9f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800a9fc:	2301      	movs	r3, #1
 800a9fe:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa00:	e001      	b.n	800aa06 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800aa02:	2300      	movs	r3, #0
 800aa04:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa08:	613b      	str	r3, [r7, #16]
	__asm volatile
 800aa0a:	693b      	ldr	r3, [r7, #16]
 800aa0c:	f383 8811 	msr	BASEPRI, r3
}
 800aa10:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aa12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800aa14:	4618      	mov	r0, r3
 800aa16:	3738      	adds	r7, #56	@ 0x38
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}

0800aa1c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b084      	sub	sp, #16
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d10b      	bne.n	800aa42 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 800aa2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa2e:	f383 8811 	msr	BASEPRI, r3
 800aa32:	f3bf 8f6f 	isb	sy
 800aa36:	f3bf 8f4f 	dsb	sy
 800aa3a:	60bb      	str	r3, [r7, #8]
}
 800aa3c:	bf00      	nop
 800aa3e:	bf00      	nop
 800aa40:	e7fd      	b.n	800aa3e <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800aa42:	f001 ff29 	bl	800c898 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa4a:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800aa4c:	f001 ff56 	bl	800c8fc <vPortExitCritical>

	return uxReturn;
 800aa50:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800aa52:	4618      	mov	r0, r3
 800aa54:	3710      	adds	r7, #16
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bd80      	pop	{r7, pc}

0800aa5a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800aa5a:	b480      	push	{r7}
 800aa5c:	b085      	sub	sp, #20
 800aa5e:	af00      	add	r7, sp, #0
 800aa60:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d006      	beq.n	800aa78 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	f1c3 0307 	rsb	r3, r3, #7
 800aa74:	60fb      	str	r3, [r7, #12]
 800aa76:	e001      	b.n	800aa7c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800aa78:	2300      	movs	r3, #0
 800aa7a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
	}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	3714      	adds	r7, #20
 800aa82:	46bd      	mov	sp, r7
 800aa84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa88:	4770      	bx	lr

0800aa8a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800aa8a:	b580      	push	{r7, lr}
 800aa8c:	b086      	sub	sp, #24
 800aa8e:	af00      	add	r7, sp, #0
 800aa90:	60f8      	str	r0, [r7, #12]
 800aa92:	60b9      	str	r1, [r7, #8]
 800aa94:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800aa96:	2300      	movs	r3, #0
 800aa98:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa9e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d10d      	bne.n	800aac4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d14d      	bne.n	800ab4c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	689b      	ldr	r3, [r3, #8]
 800aab4:	4618      	mov	r0, r3
 800aab6:	f001 f8ed 	bl	800bc94 <xTaskPriorityDisinherit>
 800aaba:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	2200      	movs	r2, #0
 800aac0:	609a      	str	r2, [r3, #8]
 800aac2:	e043      	b.n	800ab4c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d119      	bne.n	800aafe <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	6858      	ldr	r0, [r3, #4]
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aad2:	461a      	mov	r2, r3
 800aad4:	68b9      	ldr	r1, [r7, #8]
 800aad6:	f003 f978 	bl	800ddca <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	685a      	ldr	r2, [r3, #4]
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aae2:	441a      	add	r2, r3
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	685a      	ldr	r2, [r3, #4]
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	689b      	ldr	r3, [r3, #8]
 800aaf0:	429a      	cmp	r2, r3
 800aaf2:	d32b      	bcc.n	800ab4c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	681a      	ldr	r2, [r3, #0]
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	605a      	str	r2, [r3, #4]
 800aafc:	e026      	b.n	800ab4c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	68d8      	ldr	r0, [r3, #12]
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab06:	461a      	mov	r2, r3
 800ab08:	68b9      	ldr	r1, [r7, #8]
 800ab0a:	f003 f95e 	bl	800ddca <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	68da      	ldr	r2, [r3, #12]
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab16:	425b      	negs	r3, r3
 800ab18:	441a      	add	r2, r3
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	68da      	ldr	r2, [r3, #12]
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	429a      	cmp	r2, r3
 800ab28:	d207      	bcs.n	800ab3a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	689a      	ldr	r2, [r3, #8]
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab32:	425b      	negs	r3, r3
 800ab34:	441a      	add	r2, r3
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2b02      	cmp	r3, #2
 800ab3e:	d105      	bne.n	800ab4c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ab40:	693b      	ldr	r3, [r7, #16]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d002      	beq.n	800ab4c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ab46:	693b      	ldr	r3, [r7, #16]
 800ab48:	3b01      	subs	r3, #1
 800ab4a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ab4c:	693b      	ldr	r3, [r7, #16]
 800ab4e:	1c5a      	adds	r2, r3, #1
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800ab54:	697b      	ldr	r3, [r7, #20]
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	3718      	adds	r7, #24
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}

0800ab5e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ab5e:	b580      	push	{r7, lr}
 800ab60:	b082      	sub	sp, #8
 800ab62:	af00      	add	r7, sp, #0
 800ab64:	6078      	str	r0, [r7, #4]
 800ab66:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d018      	beq.n	800aba2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	68da      	ldr	r2, [r3, #12]
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab78:	441a      	add	r2, r3
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	68da      	ldr	r2, [r3, #12]
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	689b      	ldr	r3, [r3, #8]
 800ab86:	429a      	cmp	r2, r3
 800ab88:	d303      	bcc.n	800ab92 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681a      	ldr	r2, [r3, #0]
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	68d9      	ldr	r1, [r3, #12]
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab9a:	461a      	mov	r2, r3
 800ab9c:	6838      	ldr	r0, [r7, #0]
 800ab9e:	f003 f914 	bl	800ddca <memcpy>
	}
}
 800aba2:	bf00      	nop
 800aba4:	3708      	adds	r7, #8
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}

0800abaa <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800abaa:	b580      	push	{r7, lr}
 800abac:	b084      	sub	sp, #16
 800abae:	af00      	add	r7, sp, #0
 800abb0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800abb2:	f001 fe71 	bl	800c898 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800abbc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800abbe:	e011      	b.n	800abe4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d012      	beq.n	800abee <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	3324      	adds	r3, #36	@ 0x24
 800abcc:	4618      	mov	r0, r3
 800abce:	f000 fe07 	bl	800b7e0 <xTaskRemoveFromEventList>
 800abd2:	4603      	mov	r3, r0
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d001      	beq.n	800abdc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800abd8:	f000 fee0 	bl	800b99c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800abdc:	7bfb      	ldrb	r3, [r7, #15]
 800abde:	3b01      	subs	r3, #1
 800abe0:	b2db      	uxtb	r3, r3
 800abe2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800abe4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	dce9      	bgt.n	800abc0 <prvUnlockQueue+0x16>
 800abec:	e000      	b.n	800abf0 <prvUnlockQueue+0x46>
					break;
 800abee:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	22ff      	movs	r2, #255	@ 0xff
 800abf4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800abf8:	f001 fe80 	bl	800c8fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800abfc:	f001 fe4c 	bl	800c898 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ac06:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ac08:	e011      	b.n	800ac2e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	691b      	ldr	r3, [r3, #16]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d012      	beq.n	800ac38 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	3310      	adds	r3, #16
 800ac16:	4618      	mov	r0, r3
 800ac18:	f000 fde2 	bl	800b7e0 <xTaskRemoveFromEventList>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d001      	beq.n	800ac26 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ac22:	f000 febb 	bl	800b99c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ac26:	7bbb      	ldrb	r3, [r7, #14]
 800ac28:	3b01      	subs	r3, #1
 800ac2a:	b2db      	uxtb	r3, r3
 800ac2c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ac2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	dce9      	bgt.n	800ac0a <prvUnlockQueue+0x60>
 800ac36:	e000      	b.n	800ac3a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ac38:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	22ff      	movs	r2, #255	@ 0xff
 800ac3e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ac42:	f001 fe5b 	bl	800c8fc <vPortExitCritical>
}
 800ac46:	bf00      	nop
 800ac48:	3710      	adds	r7, #16
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}

0800ac4e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ac4e:	b580      	push	{r7, lr}
 800ac50:	b084      	sub	sp, #16
 800ac52:	af00      	add	r7, sp, #0
 800ac54:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ac56:	f001 fe1f 	bl	800c898 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d102      	bne.n	800ac68 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ac62:	2301      	movs	r3, #1
 800ac64:	60fb      	str	r3, [r7, #12]
 800ac66:	e001      	b.n	800ac6c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ac68:	2300      	movs	r3, #0
 800ac6a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ac6c:	f001 fe46 	bl	800c8fc <vPortExitCritical>

	return xReturn;
 800ac70:	68fb      	ldr	r3, [r7, #12]
}
 800ac72:	4618      	mov	r0, r3
 800ac74:	3710      	adds	r7, #16
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}

0800ac7a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ac7a:	b580      	push	{r7, lr}
 800ac7c:	b084      	sub	sp, #16
 800ac7e:	af00      	add	r7, sp, #0
 800ac80:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ac82:	f001 fe09 	bl	800c898 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac8e:	429a      	cmp	r2, r3
 800ac90:	d102      	bne.n	800ac98 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ac92:	2301      	movs	r3, #1
 800ac94:	60fb      	str	r3, [r7, #12]
 800ac96:	e001      	b.n	800ac9c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ac98:	2300      	movs	r3, #0
 800ac9a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ac9c:	f001 fe2e 	bl	800c8fc <vPortExitCritical>

	return xReturn;
 800aca0:	68fb      	ldr	r3, [r7, #12]
}
 800aca2:	4618      	mov	r0, r3
 800aca4:	3710      	adds	r7, #16
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}
	...

0800acac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800acac:	b480      	push	{r7}
 800acae:	b085      	sub	sp, #20
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
 800acb4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800acb6:	2300      	movs	r3, #0
 800acb8:	60fb      	str	r3, [r7, #12]
 800acba:	e014      	b.n	800ace6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800acbc:	4a0f      	ldr	r2, [pc, #60]	@ (800acfc <vQueueAddToRegistry+0x50>)
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d10b      	bne.n	800ace0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800acc8:	490c      	ldr	r1, [pc, #48]	@ (800acfc <vQueueAddToRegistry+0x50>)
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	683a      	ldr	r2, [r7, #0]
 800acce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800acd2:	4a0a      	ldr	r2, [pc, #40]	@ (800acfc <vQueueAddToRegistry+0x50>)
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	00db      	lsls	r3, r3, #3
 800acd8:	4413      	add	r3, r2
 800acda:	687a      	ldr	r2, [r7, #4]
 800acdc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800acde:	e006      	b.n	800acee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	3301      	adds	r3, #1
 800ace4:	60fb      	str	r3, [r7, #12]
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	2b07      	cmp	r3, #7
 800acea:	d9e7      	bls.n	800acbc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800acec:	bf00      	nop
 800acee:	bf00      	nop
 800acf0:	3714      	adds	r7, #20
 800acf2:	46bd      	mov	sp, r7
 800acf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf8:	4770      	bx	lr
 800acfa:	bf00      	nop
 800acfc:	20002c10 	.word	0x20002c10

0800ad00 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b086      	sub	sp, #24
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	60f8      	str	r0, [r7, #12]
 800ad08:	60b9      	str	r1, [r7, #8]
 800ad0a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ad10:	f001 fdc2 	bl	800c898 <vPortEnterCritical>
 800ad14:	697b      	ldr	r3, [r7, #20]
 800ad16:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ad1a:	b25b      	sxtb	r3, r3
 800ad1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad20:	d103      	bne.n	800ad2a <vQueueWaitForMessageRestricted+0x2a>
 800ad22:	697b      	ldr	r3, [r7, #20]
 800ad24:	2200      	movs	r2, #0
 800ad26:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ad2a:	697b      	ldr	r3, [r7, #20]
 800ad2c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ad30:	b25b      	sxtb	r3, r3
 800ad32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad36:	d103      	bne.n	800ad40 <vQueueWaitForMessageRestricted+0x40>
 800ad38:	697b      	ldr	r3, [r7, #20]
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ad40:	f001 fddc 	bl	800c8fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ad44:	697b      	ldr	r3, [r7, #20]
 800ad46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d106      	bne.n	800ad5a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	3324      	adds	r3, #36	@ 0x24
 800ad50:	687a      	ldr	r2, [r7, #4]
 800ad52:	68b9      	ldr	r1, [r7, #8]
 800ad54:	4618      	mov	r0, r3
 800ad56:	f000 fd17 	bl	800b788 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ad5a:	6978      	ldr	r0, [r7, #20]
 800ad5c:	f7ff ff25 	bl	800abaa <prvUnlockQueue>
	}
 800ad60:	bf00      	nop
 800ad62:	3718      	adds	r7, #24
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd80      	pop	{r7, pc}

0800ad68 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b08e      	sub	sp, #56	@ 0x38
 800ad6c:	af04      	add	r7, sp, #16
 800ad6e:	60f8      	str	r0, [r7, #12]
 800ad70:	60b9      	str	r1, [r7, #8]
 800ad72:	607a      	str	r2, [r7, #4]
 800ad74:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ad76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d10b      	bne.n	800ad94 <xTaskCreateStatic+0x2c>
	__asm volatile
 800ad7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad80:	f383 8811 	msr	BASEPRI, r3
 800ad84:	f3bf 8f6f 	isb	sy
 800ad88:	f3bf 8f4f 	dsb	sy
 800ad8c:	623b      	str	r3, [r7, #32]
}
 800ad8e:	bf00      	nop
 800ad90:	bf00      	nop
 800ad92:	e7fd      	b.n	800ad90 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ad94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d10b      	bne.n	800adb2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800ad9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad9e:	f383 8811 	msr	BASEPRI, r3
 800ada2:	f3bf 8f6f 	isb	sy
 800ada6:	f3bf 8f4f 	dsb	sy
 800adaa:	61fb      	str	r3, [r7, #28]
}
 800adac:	bf00      	nop
 800adae:	bf00      	nop
 800adb0:	e7fd      	b.n	800adae <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800adb2:	23ac      	movs	r3, #172	@ 0xac
 800adb4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	2bac      	cmp	r3, #172	@ 0xac
 800adba:	d00b      	beq.n	800add4 <xTaskCreateStatic+0x6c>
	__asm volatile
 800adbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adc0:	f383 8811 	msr	BASEPRI, r3
 800adc4:	f3bf 8f6f 	isb	sy
 800adc8:	f3bf 8f4f 	dsb	sy
 800adcc:	61bb      	str	r3, [r7, #24]
}
 800adce:	bf00      	nop
 800add0:	bf00      	nop
 800add2:	e7fd      	b.n	800add0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800add4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800add6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800add8:	2b00      	cmp	r3, #0
 800adda:	d01e      	beq.n	800ae1a <xTaskCreateStatic+0xb2>
 800addc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d01b      	beq.n	800ae1a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ade2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ade4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ade6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ade8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800adea:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800adec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adee:	2202      	movs	r2, #2
 800adf0:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800adf4:	2300      	movs	r3, #0
 800adf6:	9303      	str	r3, [sp, #12]
 800adf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adfa:	9302      	str	r3, [sp, #8]
 800adfc:	f107 0314 	add.w	r3, r7, #20
 800ae00:	9301      	str	r3, [sp, #4]
 800ae02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae04:	9300      	str	r3, [sp, #0]
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	687a      	ldr	r2, [r7, #4]
 800ae0a:	68b9      	ldr	r1, [r7, #8]
 800ae0c:	68f8      	ldr	r0, [r7, #12]
 800ae0e:	f000 f851 	bl	800aeb4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ae12:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ae14:	f000 f8f8 	bl	800b008 <prvAddNewTaskToReadyList>
 800ae18:	e001      	b.n	800ae1e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ae1e:	697b      	ldr	r3, [r7, #20]
	}
 800ae20:	4618      	mov	r0, r3
 800ae22:	3728      	adds	r7, #40	@ 0x28
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}

0800ae28 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b08c      	sub	sp, #48	@ 0x30
 800ae2c:	af04      	add	r7, sp, #16
 800ae2e:	60f8      	str	r0, [r7, #12]
 800ae30:	60b9      	str	r1, [r7, #8]
 800ae32:	603b      	str	r3, [r7, #0]
 800ae34:	4613      	mov	r3, r2
 800ae36:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ae38:	88fb      	ldrh	r3, [r7, #6]
 800ae3a:	009b      	lsls	r3, r3, #2
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	f001 fe4d 	bl	800cadc <pvPortMalloc>
 800ae42:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ae44:	697b      	ldr	r3, [r7, #20]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d00e      	beq.n	800ae68 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ae4a:	20ac      	movs	r0, #172	@ 0xac
 800ae4c:	f001 fe46 	bl	800cadc <pvPortMalloc>
 800ae50:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ae52:	69fb      	ldr	r3, [r7, #28]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d003      	beq.n	800ae60 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ae58:	69fb      	ldr	r3, [r7, #28]
 800ae5a:	697a      	ldr	r2, [r7, #20]
 800ae5c:	631a      	str	r2, [r3, #48]	@ 0x30
 800ae5e:	e005      	b.n	800ae6c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ae60:	6978      	ldr	r0, [r7, #20]
 800ae62:	f001 ff0f 	bl	800cc84 <vPortFree>
 800ae66:	e001      	b.n	800ae6c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ae68:	2300      	movs	r3, #0
 800ae6a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ae6c:	69fb      	ldr	r3, [r7, #28]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d017      	beq.n	800aea2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ae72:	69fb      	ldr	r3, [r7, #28]
 800ae74:	2200      	movs	r2, #0
 800ae76:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ae7a:	88fa      	ldrh	r2, [r7, #6]
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	9303      	str	r3, [sp, #12]
 800ae80:	69fb      	ldr	r3, [r7, #28]
 800ae82:	9302      	str	r3, [sp, #8]
 800ae84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae86:	9301      	str	r3, [sp, #4]
 800ae88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae8a:	9300      	str	r3, [sp, #0]
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	68b9      	ldr	r1, [r7, #8]
 800ae90:	68f8      	ldr	r0, [r7, #12]
 800ae92:	f000 f80f 	bl	800aeb4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ae96:	69f8      	ldr	r0, [r7, #28]
 800ae98:	f000 f8b6 	bl	800b008 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	61bb      	str	r3, [r7, #24]
 800aea0:	e002      	b.n	800aea8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800aea2:	f04f 33ff 	mov.w	r3, #4294967295
 800aea6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800aea8:	69bb      	ldr	r3, [r7, #24]
	}
 800aeaa:	4618      	mov	r0, r3
 800aeac:	3720      	adds	r7, #32
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}
	...

0800aeb4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b088      	sub	sp, #32
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	60f8      	str	r0, [r7, #12]
 800aebc:	60b9      	str	r1, [r7, #8]
 800aebe:	607a      	str	r2, [r7, #4]
 800aec0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800aec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aec4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	009b      	lsls	r3, r3, #2
 800aeca:	461a      	mov	r2, r3
 800aecc:	21a5      	movs	r1, #165	@ 0xa5
 800aece:	f002 fe96 	bl	800dbfe <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800aed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aed4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800aedc:	3b01      	subs	r3, #1
 800aede:	009b      	lsls	r3, r3, #2
 800aee0:	4413      	add	r3, r2
 800aee2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800aee4:	69bb      	ldr	r3, [r7, #24]
 800aee6:	f023 0307 	bic.w	r3, r3, #7
 800aeea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800aeec:	69bb      	ldr	r3, [r7, #24]
 800aeee:	f003 0307 	and.w	r3, r3, #7
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d00b      	beq.n	800af0e <prvInitialiseNewTask+0x5a>
	__asm volatile
 800aef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aefa:	f383 8811 	msr	BASEPRI, r3
 800aefe:	f3bf 8f6f 	isb	sy
 800af02:	f3bf 8f4f 	dsb	sy
 800af06:	617b      	str	r3, [r7, #20]
}
 800af08:	bf00      	nop
 800af0a:	bf00      	nop
 800af0c:	e7fd      	b.n	800af0a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800af0e:	68bb      	ldr	r3, [r7, #8]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d01f      	beq.n	800af54 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800af14:	2300      	movs	r3, #0
 800af16:	61fb      	str	r3, [r7, #28]
 800af18:	e012      	b.n	800af40 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800af1a:	68ba      	ldr	r2, [r7, #8]
 800af1c:	69fb      	ldr	r3, [r7, #28]
 800af1e:	4413      	add	r3, r2
 800af20:	7819      	ldrb	r1, [r3, #0]
 800af22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af24:	69fb      	ldr	r3, [r7, #28]
 800af26:	4413      	add	r3, r2
 800af28:	3334      	adds	r3, #52	@ 0x34
 800af2a:	460a      	mov	r2, r1
 800af2c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800af2e:	68ba      	ldr	r2, [r7, #8]
 800af30:	69fb      	ldr	r3, [r7, #28]
 800af32:	4413      	add	r3, r2
 800af34:	781b      	ldrb	r3, [r3, #0]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d006      	beq.n	800af48 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800af3a:	69fb      	ldr	r3, [r7, #28]
 800af3c:	3301      	adds	r3, #1
 800af3e:	61fb      	str	r3, [r7, #28]
 800af40:	69fb      	ldr	r3, [r7, #28]
 800af42:	2b0f      	cmp	r3, #15
 800af44:	d9e9      	bls.n	800af1a <prvInitialiseNewTask+0x66>
 800af46:	e000      	b.n	800af4a <prvInitialiseNewTask+0x96>
			{
				break;
 800af48:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800af4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af4c:	2200      	movs	r2, #0
 800af4e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800af52:	e003      	b.n	800af5c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800af54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af56:	2200      	movs	r2, #0
 800af58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800af5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af5e:	2b06      	cmp	r3, #6
 800af60:	d901      	bls.n	800af66 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800af62:	2306      	movs	r3, #6
 800af64:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800af66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800af6a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800af6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af6e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800af70:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800af72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af74:	2200      	movs	r2, #0
 800af76:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800af78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af7a:	3304      	adds	r3, #4
 800af7c:	4618      	mov	r0, r3
 800af7e:	f7fe fecf 	bl	8009d20 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800af82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af84:	3318      	adds	r3, #24
 800af86:	4618      	mov	r0, r3
 800af88:	f7fe feca 	bl	8009d20 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800af8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af90:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af94:	f1c3 0207 	rsb	r2, r3, #7
 800af98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af9a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800af9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800afa0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800afa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afa4:	2200      	movs	r2, #0
 800afa6:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800afa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afaa:	2200      	movs	r2, #0
 800afac:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800afb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afb2:	2200      	movs	r2, #0
 800afb4:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800afb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afba:	3358      	adds	r3, #88	@ 0x58
 800afbc:	224c      	movs	r2, #76	@ 0x4c
 800afbe:	2100      	movs	r1, #0
 800afc0:	4618      	mov	r0, r3
 800afc2:	f002 fe1c 	bl	800dbfe <memset>
 800afc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afc8:	4a0c      	ldr	r2, [pc, #48]	@ (800affc <prvInitialiseNewTask+0x148>)
 800afca:	65da      	str	r2, [r3, #92]	@ 0x5c
 800afcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afce:	4a0c      	ldr	r2, [pc, #48]	@ (800b000 <prvInitialiseNewTask+0x14c>)
 800afd0:	661a      	str	r2, [r3, #96]	@ 0x60
 800afd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afd4:	4a0b      	ldr	r2, [pc, #44]	@ (800b004 <prvInitialiseNewTask+0x150>)
 800afd6:	665a      	str	r2, [r3, #100]	@ 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800afd8:	683a      	ldr	r2, [r7, #0]
 800afda:	68f9      	ldr	r1, [r7, #12]
 800afdc:	69b8      	ldr	r0, [r7, #24]
 800afde:	f001 fb29 	bl	800c634 <pxPortInitialiseStack>
 800afe2:	4602      	mov	r2, r0
 800afe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afe6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800afe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afea:	2b00      	cmp	r3, #0
 800afec:	d002      	beq.n	800aff4 <prvInitialiseNewTask+0x140>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800afee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aff0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aff2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aff4:	bf00      	nop
 800aff6:	3720      	adds	r7, #32
 800aff8:	46bd      	mov	sp, r7
 800affa:	bd80      	pop	{r7, pc}
 800affc:	20012eb8 	.word	0x20012eb8
 800b000:	20012f20 	.word	0x20012f20
 800b004:	20012f88 	.word	0x20012f88

0800b008 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b082      	sub	sp, #8
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b010:	f001 fc42 	bl	800c898 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b014:	4b2c      	ldr	r3, [pc, #176]	@ (800b0c8 <prvAddNewTaskToReadyList+0xc0>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	3301      	adds	r3, #1
 800b01a:	4a2b      	ldr	r2, [pc, #172]	@ (800b0c8 <prvAddNewTaskToReadyList+0xc0>)
 800b01c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b01e:	4b2b      	ldr	r3, [pc, #172]	@ (800b0cc <prvAddNewTaskToReadyList+0xc4>)
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d109      	bne.n	800b03a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b026:	4a29      	ldr	r2, [pc, #164]	@ (800b0cc <prvAddNewTaskToReadyList+0xc4>)
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b02c:	4b26      	ldr	r3, [pc, #152]	@ (800b0c8 <prvAddNewTaskToReadyList+0xc0>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	2b01      	cmp	r3, #1
 800b032:	d110      	bne.n	800b056 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b034:	f000 fcd6 	bl	800b9e4 <prvInitialiseTaskLists>
 800b038:	e00d      	b.n	800b056 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b03a:	4b25      	ldr	r3, [pc, #148]	@ (800b0d0 <prvAddNewTaskToReadyList+0xc8>)
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d109      	bne.n	800b056 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b042:	4b22      	ldr	r3, [pc, #136]	@ (800b0cc <prvAddNewTaskToReadyList+0xc4>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b04c:	429a      	cmp	r2, r3
 800b04e:	d802      	bhi.n	800b056 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b050:	4a1e      	ldr	r2, [pc, #120]	@ (800b0cc <prvAddNewTaskToReadyList+0xc4>)
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b056:	4b1f      	ldr	r3, [pc, #124]	@ (800b0d4 <prvAddNewTaskToReadyList+0xcc>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	3301      	adds	r3, #1
 800b05c:	4a1d      	ldr	r2, [pc, #116]	@ (800b0d4 <prvAddNewTaskToReadyList+0xcc>)
 800b05e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b060:	4b1c      	ldr	r3, [pc, #112]	@ (800b0d4 <prvAddNewTaskToReadyList+0xcc>)
 800b062:	681a      	ldr	r2, [r3, #0]
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b06c:	2201      	movs	r2, #1
 800b06e:	409a      	lsls	r2, r3
 800b070:	4b19      	ldr	r3, [pc, #100]	@ (800b0d8 <prvAddNewTaskToReadyList+0xd0>)
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	4313      	orrs	r3, r2
 800b076:	4a18      	ldr	r2, [pc, #96]	@ (800b0d8 <prvAddNewTaskToReadyList+0xd0>)
 800b078:	6013      	str	r3, [r2, #0]
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b07e:	4613      	mov	r3, r2
 800b080:	009b      	lsls	r3, r3, #2
 800b082:	4413      	add	r3, r2
 800b084:	009b      	lsls	r3, r3, #2
 800b086:	4a15      	ldr	r2, [pc, #84]	@ (800b0dc <prvAddNewTaskToReadyList+0xd4>)
 800b088:	441a      	add	r2, r3
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	3304      	adds	r3, #4
 800b08e:	4619      	mov	r1, r3
 800b090:	4610      	mov	r0, r2
 800b092:	f7fe fe52 	bl	8009d3a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b096:	f001 fc31 	bl	800c8fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b09a:	4b0d      	ldr	r3, [pc, #52]	@ (800b0d0 <prvAddNewTaskToReadyList+0xc8>)
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d00e      	beq.n	800b0c0 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b0a2:	4b0a      	ldr	r3, [pc, #40]	@ (800b0cc <prvAddNewTaskToReadyList+0xc4>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0ac:	429a      	cmp	r2, r3
 800b0ae:	d207      	bcs.n	800b0c0 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b0b0:	4b0b      	ldr	r3, [pc, #44]	@ (800b0e0 <prvAddNewTaskToReadyList+0xd8>)
 800b0b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b0b6:	601a      	str	r2, [r3, #0]
 800b0b8:	f3bf 8f4f 	dsb	sy
 800b0bc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b0c0:	bf00      	nop
 800b0c2:	3708      	adds	r7, #8
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	bd80      	pop	{r7, pc}
 800b0c8:	20002d50 	.word	0x20002d50
 800b0cc:	20002c50 	.word	0x20002c50
 800b0d0:	20002d5c 	.word	0x20002d5c
 800b0d4:	20002d6c 	.word	0x20002d6c
 800b0d8:	20002d58 	.word	0x20002d58
 800b0dc:	20002c54 	.word	0x20002c54
 800b0e0:	e000ed04 	.word	0xe000ed04

0800b0e4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b084      	sub	sp, #16
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800b0ec:	f001 fbd4 	bl	800c898 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d102      	bne.n	800b0fc <vTaskDelete+0x18>
 800b0f6:	4b39      	ldr	r3, [pc, #228]	@ (800b1dc <vTaskDelete+0xf8>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	e000      	b.n	800b0fe <vTaskDelete+0x1a>
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	3304      	adds	r3, #4
 800b104:	4618      	mov	r0, r3
 800b106:	f7fe fe75 	bl	8009df4 <uxListRemove>
 800b10a:	4603      	mov	r3, r0
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d115      	bne.n	800b13c <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b114:	4932      	ldr	r1, [pc, #200]	@ (800b1e0 <vTaskDelete+0xfc>)
 800b116:	4613      	mov	r3, r2
 800b118:	009b      	lsls	r3, r3, #2
 800b11a:	4413      	add	r3, r2
 800b11c:	009b      	lsls	r3, r3, #2
 800b11e:	440b      	add	r3, r1
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d10a      	bne.n	800b13c <vTaskDelete+0x58>
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b12a:	2201      	movs	r2, #1
 800b12c:	fa02 f303 	lsl.w	r3, r2, r3
 800b130:	43da      	mvns	r2, r3
 800b132:	4b2c      	ldr	r3, [pc, #176]	@ (800b1e4 <vTaskDelete+0x100>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	4013      	ands	r3, r2
 800b138:	4a2a      	ldr	r2, [pc, #168]	@ (800b1e4 <vTaskDelete+0x100>)
 800b13a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b140:	2b00      	cmp	r3, #0
 800b142:	d004      	beq.n	800b14e <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	3318      	adds	r3, #24
 800b148:	4618      	mov	r0, r3
 800b14a:	f7fe fe53 	bl	8009df4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800b14e:	4b26      	ldr	r3, [pc, #152]	@ (800b1e8 <vTaskDelete+0x104>)
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	3301      	adds	r3, #1
 800b154:	4a24      	ldr	r2, [pc, #144]	@ (800b1e8 <vTaskDelete+0x104>)
 800b156:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800b158:	4b20      	ldr	r3, [pc, #128]	@ (800b1dc <vTaskDelete+0xf8>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	68fa      	ldr	r2, [r7, #12]
 800b15e:	429a      	cmp	r2, r3
 800b160:	d10b      	bne.n	800b17a <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	3304      	adds	r3, #4
 800b166:	4619      	mov	r1, r3
 800b168:	4820      	ldr	r0, [pc, #128]	@ (800b1ec <vTaskDelete+0x108>)
 800b16a:	f7fe fde6 	bl	8009d3a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800b16e:	4b20      	ldr	r3, [pc, #128]	@ (800b1f0 <vTaskDelete+0x10c>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	3301      	adds	r3, #1
 800b174:	4a1e      	ldr	r2, [pc, #120]	@ (800b1f0 <vTaskDelete+0x10c>)
 800b176:	6013      	str	r3, [r2, #0]
 800b178:	e009      	b.n	800b18e <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800b17a:	4b1e      	ldr	r3, [pc, #120]	@ (800b1f4 <vTaskDelete+0x110>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	3b01      	subs	r3, #1
 800b180:	4a1c      	ldr	r2, [pc, #112]	@ (800b1f4 <vTaskDelete+0x110>)
 800b182:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800b184:	68f8      	ldr	r0, [r7, #12]
 800b186:	f000 fc9b 	bl	800bac0 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800b18a:	f000 fccf 	bl	800bb2c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800b18e:	f001 fbb5 	bl	800c8fc <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800b192:	4b19      	ldr	r3, [pc, #100]	@ (800b1f8 <vTaskDelete+0x114>)
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d01c      	beq.n	800b1d4 <vTaskDelete+0xf0>
		{
			if( pxTCB == pxCurrentTCB )
 800b19a:	4b10      	ldr	r3, [pc, #64]	@ (800b1dc <vTaskDelete+0xf8>)
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	68fa      	ldr	r2, [r7, #12]
 800b1a0:	429a      	cmp	r2, r3
 800b1a2:	d117      	bne.n	800b1d4 <vTaskDelete+0xf0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800b1a4:	4b15      	ldr	r3, [pc, #84]	@ (800b1fc <vTaskDelete+0x118>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d00b      	beq.n	800b1c4 <vTaskDelete+0xe0>
	__asm volatile
 800b1ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1b0:	f383 8811 	msr	BASEPRI, r3
 800b1b4:	f3bf 8f6f 	isb	sy
 800b1b8:	f3bf 8f4f 	dsb	sy
 800b1bc:	60bb      	str	r3, [r7, #8]
}
 800b1be:	bf00      	nop
 800b1c0:	bf00      	nop
 800b1c2:	e7fd      	b.n	800b1c0 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 800b1c4:	4b0e      	ldr	r3, [pc, #56]	@ (800b200 <vTaskDelete+0x11c>)
 800b1c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b1ca:	601a      	str	r2, [r3, #0]
 800b1cc:	f3bf 8f4f 	dsb	sy
 800b1d0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b1d4:	bf00      	nop
 800b1d6:	3710      	adds	r7, #16
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bd80      	pop	{r7, pc}
 800b1dc:	20002c50 	.word	0x20002c50
 800b1e0:	20002c54 	.word	0x20002c54
 800b1e4:	20002d58 	.word	0x20002d58
 800b1e8:	20002d6c 	.word	0x20002d6c
 800b1ec:	20002d24 	.word	0x20002d24
 800b1f0:	20002d38 	.word	0x20002d38
 800b1f4:	20002d50 	.word	0x20002d50
 800b1f8:	20002d5c 	.word	0x20002d5c
 800b1fc:	20002d78 	.word	0x20002d78
 800b200:	e000ed04 	.word	0xe000ed04

0800b204 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b204:	b580      	push	{r7, lr}
 800b206:	b084      	sub	sp, #16
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b20c:	2300      	movs	r3, #0
 800b20e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d018      	beq.n	800b248 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b216:	4b14      	ldr	r3, [pc, #80]	@ (800b268 <vTaskDelay+0x64>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d00b      	beq.n	800b236 <vTaskDelay+0x32>
	__asm volatile
 800b21e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b222:	f383 8811 	msr	BASEPRI, r3
 800b226:	f3bf 8f6f 	isb	sy
 800b22a:	f3bf 8f4f 	dsb	sy
 800b22e:	60bb      	str	r3, [r7, #8]
}
 800b230:	bf00      	nop
 800b232:	bf00      	nop
 800b234:	e7fd      	b.n	800b232 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b236:	f000 f88d 	bl	800b354 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b23a:	2100      	movs	r1, #0
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f000 fe55 	bl	800beec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b242:	f000 f895 	bl	800b370 <xTaskResumeAll>
 800b246:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d107      	bne.n	800b25e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b24e:	4b07      	ldr	r3, [pc, #28]	@ (800b26c <vTaskDelay+0x68>)
 800b250:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b254:	601a      	str	r2, [r3, #0]
 800b256:	f3bf 8f4f 	dsb	sy
 800b25a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b25e:	bf00      	nop
 800b260:	3710      	adds	r7, #16
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}
 800b266:	bf00      	nop
 800b268:	20002d78 	.word	0x20002d78
 800b26c:	e000ed04 	.word	0xe000ed04

0800b270 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b08a      	sub	sp, #40	@ 0x28
 800b274:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b276:	2300      	movs	r3, #0
 800b278:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b27a:	2300      	movs	r3, #0
 800b27c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b27e:	463a      	mov	r2, r7
 800b280:	1d39      	adds	r1, r7, #4
 800b282:	f107 0308 	add.w	r3, r7, #8
 800b286:	4618      	mov	r0, r3
 800b288:	f7f7 fb6a 	bl	8002960 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b28c:	6839      	ldr	r1, [r7, #0]
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	68ba      	ldr	r2, [r7, #8]
 800b292:	9202      	str	r2, [sp, #8]
 800b294:	9301      	str	r3, [sp, #4]
 800b296:	2300      	movs	r3, #0
 800b298:	9300      	str	r3, [sp, #0]
 800b29a:	2300      	movs	r3, #0
 800b29c:	460a      	mov	r2, r1
 800b29e:	4925      	ldr	r1, [pc, #148]	@ (800b334 <vTaskStartScheduler+0xc4>)
 800b2a0:	4825      	ldr	r0, [pc, #148]	@ (800b338 <vTaskStartScheduler+0xc8>)
 800b2a2:	f7ff fd61 	bl	800ad68 <xTaskCreateStatic>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	4a24      	ldr	r2, [pc, #144]	@ (800b33c <vTaskStartScheduler+0xcc>)
 800b2aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b2ac:	4b23      	ldr	r3, [pc, #140]	@ (800b33c <vTaskStartScheduler+0xcc>)
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d002      	beq.n	800b2ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	617b      	str	r3, [r7, #20]
 800b2b8:	e001      	b.n	800b2be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b2be:	697b      	ldr	r3, [r7, #20]
 800b2c0:	2b01      	cmp	r3, #1
 800b2c2:	d102      	bne.n	800b2ca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b2c4:	f000 fe78 	bl	800bfb8 <xTimerCreateTimerTask>
 800b2c8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b2ca:	697b      	ldr	r3, [r7, #20]
 800b2cc:	2b01      	cmp	r3, #1
 800b2ce:	d11d      	bne.n	800b30c <vTaskStartScheduler+0x9c>
	__asm volatile
 800b2d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2d4:	f383 8811 	msr	BASEPRI, r3
 800b2d8:	f3bf 8f6f 	isb	sy
 800b2dc:	f3bf 8f4f 	dsb	sy
 800b2e0:	613b      	str	r3, [r7, #16]
}
 800b2e2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b2e4:	4b16      	ldr	r3, [pc, #88]	@ (800b340 <vTaskStartScheduler+0xd0>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	3358      	adds	r3, #88	@ 0x58
 800b2ea:	4a16      	ldr	r2, [pc, #88]	@ (800b344 <vTaskStartScheduler+0xd4>)
 800b2ec:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b2ee:	4b16      	ldr	r3, [pc, #88]	@ (800b348 <vTaskStartScheduler+0xd8>)
 800b2f0:	f04f 32ff 	mov.w	r2, #4294967295
 800b2f4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b2f6:	4b15      	ldr	r3, [pc, #84]	@ (800b34c <vTaskStartScheduler+0xdc>)
 800b2f8:	2201      	movs	r2, #1
 800b2fa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b2fc:	4b14      	ldr	r3, [pc, #80]	@ (800b350 <vTaskStartScheduler+0xe0>)
 800b2fe:	2200      	movs	r2, #0
 800b300:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800b302:	f7f7 fb13 	bl	800292c <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b306:	f001 fa23 	bl	800c750 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b30a:	e00f      	b.n	800b32c <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b30c:	697b      	ldr	r3, [r7, #20]
 800b30e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b312:	d10b      	bne.n	800b32c <vTaskStartScheduler+0xbc>
	__asm volatile
 800b314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b318:	f383 8811 	msr	BASEPRI, r3
 800b31c:	f3bf 8f6f 	isb	sy
 800b320:	f3bf 8f4f 	dsb	sy
 800b324:	60fb      	str	r3, [r7, #12]
}
 800b326:	bf00      	nop
 800b328:	bf00      	nop
 800b32a:	e7fd      	b.n	800b328 <vTaskStartScheduler+0xb8>
}
 800b32c:	bf00      	nop
 800b32e:	3718      	adds	r7, #24
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}
 800b334:	080103d0 	.word	0x080103d0
 800b338:	0800b9b5 	.word	0x0800b9b5
 800b33c:	20002d74 	.word	0x20002d74
 800b340:	20002c50 	.word	0x20002c50
 800b344:	200001d8 	.word	0x200001d8
 800b348:	20002d70 	.word	0x20002d70
 800b34c:	20002d5c 	.word	0x20002d5c
 800b350:	20002d54 	.word	0x20002d54

0800b354 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b354:	b480      	push	{r7}
 800b356:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b358:	4b04      	ldr	r3, [pc, #16]	@ (800b36c <vTaskSuspendAll+0x18>)
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	3301      	adds	r3, #1
 800b35e:	4a03      	ldr	r2, [pc, #12]	@ (800b36c <vTaskSuspendAll+0x18>)
 800b360:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b362:	bf00      	nop
 800b364:	46bd      	mov	sp, r7
 800b366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36a:	4770      	bx	lr
 800b36c:	20002d78 	.word	0x20002d78

0800b370 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b084      	sub	sp, #16
 800b374:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b376:	2300      	movs	r3, #0
 800b378:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b37a:	2300      	movs	r3, #0
 800b37c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b37e:	4b42      	ldr	r3, [pc, #264]	@ (800b488 <xTaskResumeAll+0x118>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d10b      	bne.n	800b39e <xTaskResumeAll+0x2e>
	__asm volatile
 800b386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b38a:	f383 8811 	msr	BASEPRI, r3
 800b38e:	f3bf 8f6f 	isb	sy
 800b392:	f3bf 8f4f 	dsb	sy
 800b396:	603b      	str	r3, [r7, #0]
}
 800b398:	bf00      	nop
 800b39a:	bf00      	nop
 800b39c:	e7fd      	b.n	800b39a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b39e:	f001 fa7b 	bl	800c898 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b3a2:	4b39      	ldr	r3, [pc, #228]	@ (800b488 <xTaskResumeAll+0x118>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	3b01      	subs	r3, #1
 800b3a8:	4a37      	ldr	r2, [pc, #220]	@ (800b488 <xTaskResumeAll+0x118>)
 800b3aa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b3ac:	4b36      	ldr	r3, [pc, #216]	@ (800b488 <xTaskResumeAll+0x118>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d161      	bne.n	800b478 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b3b4:	4b35      	ldr	r3, [pc, #212]	@ (800b48c <xTaskResumeAll+0x11c>)
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d05d      	beq.n	800b478 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b3bc:	e02e      	b.n	800b41c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3be:	4b34      	ldr	r3, [pc, #208]	@ (800b490 <xTaskResumeAll+0x120>)
 800b3c0:	68db      	ldr	r3, [r3, #12]
 800b3c2:	68db      	ldr	r3, [r3, #12]
 800b3c4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	3318      	adds	r3, #24
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	f7fe fd12 	bl	8009df4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	3304      	adds	r3, #4
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	f7fe fd0d 	bl	8009df4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3de:	2201      	movs	r2, #1
 800b3e0:	409a      	lsls	r2, r3
 800b3e2:	4b2c      	ldr	r3, [pc, #176]	@ (800b494 <xTaskResumeAll+0x124>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	4313      	orrs	r3, r2
 800b3e8:	4a2a      	ldr	r2, [pc, #168]	@ (800b494 <xTaskResumeAll+0x124>)
 800b3ea:	6013      	str	r3, [r2, #0]
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3f0:	4613      	mov	r3, r2
 800b3f2:	009b      	lsls	r3, r3, #2
 800b3f4:	4413      	add	r3, r2
 800b3f6:	009b      	lsls	r3, r3, #2
 800b3f8:	4a27      	ldr	r2, [pc, #156]	@ (800b498 <xTaskResumeAll+0x128>)
 800b3fa:	441a      	add	r2, r3
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	3304      	adds	r3, #4
 800b400:	4619      	mov	r1, r3
 800b402:	4610      	mov	r0, r2
 800b404:	f7fe fc99 	bl	8009d3a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b40c:	4b23      	ldr	r3, [pc, #140]	@ (800b49c <xTaskResumeAll+0x12c>)
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b412:	429a      	cmp	r2, r3
 800b414:	d302      	bcc.n	800b41c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b416:	4b22      	ldr	r3, [pc, #136]	@ (800b4a0 <xTaskResumeAll+0x130>)
 800b418:	2201      	movs	r2, #1
 800b41a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b41c:	4b1c      	ldr	r3, [pc, #112]	@ (800b490 <xTaskResumeAll+0x120>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d1cc      	bne.n	800b3be <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d001      	beq.n	800b42e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b42a:	f000 fb7f 	bl	800bb2c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b42e:	4b1d      	ldr	r3, [pc, #116]	@ (800b4a4 <xTaskResumeAll+0x134>)
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d010      	beq.n	800b45c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b43a:	f000 f847 	bl	800b4cc <xTaskIncrementTick>
 800b43e:	4603      	mov	r3, r0
 800b440:	2b00      	cmp	r3, #0
 800b442:	d002      	beq.n	800b44a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b444:	4b16      	ldr	r3, [pc, #88]	@ (800b4a0 <xTaskResumeAll+0x130>)
 800b446:	2201      	movs	r2, #1
 800b448:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	3b01      	subs	r3, #1
 800b44e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d1f1      	bne.n	800b43a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b456:	4b13      	ldr	r3, [pc, #76]	@ (800b4a4 <xTaskResumeAll+0x134>)
 800b458:	2200      	movs	r2, #0
 800b45a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b45c:	4b10      	ldr	r3, [pc, #64]	@ (800b4a0 <xTaskResumeAll+0x130>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d009      	beq.n	800b478 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b464:	2301      	movs	r3, #1
 800b466:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b468:	4b0f      	ldr	r3, [pc, #60]	@ (800b4a8 <xTaskResumeAll+0x138>)
 800b46a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b46e:	601a      	str	r2, [r3, #0]
 800b470:	f3bf 8f4f 	dsb	sy
 800b474:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b478:	f001 fa40 	bl	800c8fc <vPortExitCritical>

	return xAlreadyYielded;
 800b47c:	68bb      	ldr	r3, [r7, #8]
}
 800b47e:	4618      	mov	r0, r3
 800b480:	3710      	adds	r7, #16
 800b482:	46bd      	mov	sp, r7
 800b484:	bd80      	pop	{r7, pc}
 800b486:	bf00      	nop
 800b488:	20002d78 	.word	0x20002d78
 800b48c:	20002d50 	.word	0x20002d50
 800b490:	20002d10 	.word	0x20002d10
 800b494:	20002d58 	.word	0x20002d58
 800b498:	20002c54 	.word	0x20002c54
 800b49c:	20002c50 	.word	0x20002c50
 800b4a0:	20002d64 	.word	0x20002d64
 800b4a4:	20002d60 	.word	0x20002d60
 800b4a8:	e000ed04 	.word	0xe000ed04

0800b4ac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b4ac:	b480      	push	{r7}
 800b4ae:	b083      	sub	sp, #12
 800b4b0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b4b2:	4b05      	ldr	r3, [pc, #20]	@ (800b4c8 <xTaskGetTickCount+0x1c>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b4b8:	687b      	ldr	r3, [r7, #4]
}
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	370c      	adds	r7, #12
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c4:	4770      	bx	lr
 800b4c6:	bf00      	nop
 800b4c8:	20002d54 	.word	0x20002d54

0800b4cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b086      	sub	sp, #24
 800b4d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b4d6:	4b4f      	ldr	r3, [pc, #316]	@ (800b614 <xTaskIncrementTick+0x148>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	f040 808f 	bne.w	800b5fe <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b4e0:	4b4d      	ldr	r3, [pc, #308]	@ (800b618 <xTaskIncrementTick+0x14c>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	3301      	adds	r3, #1
 800b4e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b4e8:	4a4b      	ldr	r2, [pc, #300]	@ (800b618 <xTaskIncrementTick+0x14c>)
 800b4ea:	693b      	ldr	r3, [r7, #16]
 800b4ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b4ee:	693b      	ldr	r3, [r7, #16]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d121      	bne.n	800b538 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b4f4:	4b49      	ldr	r3, [pc, #292]	@ (800b61c <xTaskIncrementTick+0x150>)
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d00b      	beq.n	800b516 <xTaskIncrementTick+0x4a>
	__asm volatile
 800b4fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b502:	f383 8811 	msr	BASEPRI, r3
 800b506:	f3bf 8f6f 	isb	sy
 800b50a:	f3bf 8f4f 	dsb	sy
 800b50e:	603b      	str	r3, [r7, #0]
}
 800b510:	bf00      	nop
 800b512:	bf00      	nop
 800b514:	e7fd      	b.n	800b512 <xTaskIncrementTick+0x46>
 800b516:	4b41      	ldr	r3, [pc, #260]	@ (800b61c <xTaskIncrementTick+0x150>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	60fb      	str	r3, [r7, #12]
 800b51c:	4b40      	ldr	r3, [pc, #256]	@ (800b620 <xTaskIncrementTick+0x154>)
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	4a3e      	ldr	r2, [pc, #248]	@ (800b61c <xTaskIncrementTick+0x150>)
 800b522:	6013      	str	r3, [r2, #0]
 800b524:	4a3e      	ldr	r2, [pc, #248]	@ (800b620 <xTaskIncrementTick+0x154>)
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	6013      	str	r3, [r2, #0]
 800b52a:	4b3e      	ldr	r3, [pc, #248]	@ (800b624 <xTaskIncrementTick+0x158>)
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	3301      	adds	r3, #1
 800b530:	4a3c      	ldr	r2, [pc, #240]	@ (800b624 <xTaskIncrementTick+0x158>)
 800b532:	6013      	str	r3, [r2, #0]
 800b534:	f000 fafa 	bl	800bb2c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b538:	4b3b      	ldr	r3, [pc, #236]	@ (800b628 <xTaskIncrementTick+0x15c>)
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	693a      	ldr	r2, [r7, #16]
 800b53e:	429a      	cmp	r2, r3
 800b540:	d348      	bcc.n	800b5d4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b542:	4b36      	ldr	r3, [pc, #216]	@ (800b61c <xTaskIncrementTick+0x150>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d104      	bne.n	800b556 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b54c:	4b36      	ldr	r3, [pc, #216]	@ (800b628 <xTaskIncrementTick+0x15c>)
 800b54e:	f04f 32ff 	mov.w	r2, #4294967295
 800b552:	601a      	str	r2, [r3, #0]
					break;
 800b554:	e03e      	b.n	800b5d4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b556:	4b31      	ldr	r3, [pc, #196]	@ (800b61c <xTaskIncrementTick+0x150>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	68db      	ldr	r3, [r3, #12]
 800b55c:	68db      	ldr	r3, [r3, #12]
 800b55e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b560:	68bb      	ldr	r3, [r7, #8]
 800b562:	685b      	ldr	r3, [r3, #4]
 800b564:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b566:	693a      	ldr	r2, [r7, #16]
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	429a      	cmp	r2, r3
 800b56c:	d203      	bcs.n	800b576 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b56e:	4a2e      	ldr	r2, [pc, #184]	@ (800b628 <xTaskIncrementTick+0x15c>)
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b574:	e02e      	b.n	800b5d4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b576:	68bb      	ldr	r3, [r7, #8]
 800b578:	3304      	adds	r3, #4
 800b57a:	4618      	mov	r0, r3
 800b57c:	f7fe fc3a 	bl	8009df4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b584:	2b00      	cmp	r3, #0
 800b586:	d004      	beq.n	800b592 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	3318      	adds	r3, #24
 800b58c:	4618      	mov	r0, r3
 800b58e:	f7fe fc31 	bl	8009df4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b592:	68bb      	ldr	r3, [r7, #8]
 800b594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b596:	2201      	movs	r2, #1
 800b598:	409a      	lsls	r2, r3
 800b59a:	4b24      	ldr	r3, [pc, #144]	@ (800b62c <xTaskIncrementTick+0x160>)
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	4313      	orrs	r3, r2
 800b5a0:	4a22      	ldr	r2, [pc, #136]	@ (800b62c <xTaskIncrementTick+0x160>)
 800b5a2:	6013      	str	r3, [r2, #0]
 800b5a4:	68bb      	ldr	r3, [r7, #8]
 800b5a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5a8:	4613      	mov	r3, r2
 800b5aa:	009b      	lsls	r3, r3, #2
 800b5ac:	4413      	add	r3, r2
 800b5ae:	009b      	lsls	r3, r3, #2
 800b5b0:	4a1f      	ldr	r2, [pc, #124]	@ (800b630 <xTaskIncrementTick+0x164>)
 800b5b2:	441a      	add	r2, r3
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	3304      	adds	r3, #4
 800b5b8:	4619      	mov	r1, r3
 800b5ba:	4610      	mov	r0, r2
 800b5bc:	f7fe fbbd 	bl	8009d3a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5c4:	4b1b      	ldr	r3, [pc, #108]	@ (800b634 <xTaskIncrementTick+0x168>)
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5ca:	429a      	cmp	r2, r3
 800b5cc:	d3b9      	bcc.n	800b542 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b5ce:	2301      	movs	r3, #1
 800b5d0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b5d2:	e7b6      	b.n	800b542 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b5d4:	4b17      	ldr	r3, [pc, #92]	@ (800b634 <xTaskIncrementTick+0x168>)
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5da:	4915      	ldr	r1, [pc, #84]	@ (800b630 <xTaskIncrementTick+0x164>)
 800b5dc:	4613      	mov	r3, r2
 800b5de:	009b      	lsls	r3, r3, #2
 800b5e0:	4413      	add	r3, r2
 800b5e2:	009b      	lsls	r3, r3, #2
 800b5e4:	440b      	add	r3, r1
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	2b01      	cmp	r3, #1
 800b5ea:	d901      	bls.n	800b5f0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b5ec:	2301      	movs	r3, #1
 800b5ee:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b5f0:	4b11      	ldr	r3, [pc, #68]	@ (800b638 <xTaskIncrementTick+0x16c>)
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d007      	beq.n	800b608 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b5f8:	2301      	movs	r3, #1
 800b5fa:	617b      	str	r3, [r7, #20]
 800b5fc:	e004      	b.n	800b608 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b5fe:	4b0f      	ldr	r3, [pc, #60]	@ (800b63c <xTaskIncrementTick+0x170>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	3301      	adds	r3, #1
 800b604:	4a0d      	ldr	r2, [pc, #52]	@ (800b63c <xTaskIncrementTick+0x170>)
 800b606:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b608:	697b      	ldr	r3, [r7, #20]
}
 800b60a:	4618      	mov	r0, r3
 800b60c:	3718      	adds	r7, #24
 800b60e:	46bd      	mov	sp, r7
 800b610:	bd80      	pop	{r7, pc}
 800b612:	bf00      	nop
 800b614:	20002d78 	.word	0x20002d78
 800b618:	20002d54 	.word	0x20002d54
 800b61c:	20002d08 	.word	0x20002d08
 800b620:	20002d0c 	.word	0x20002d0c
 800b624:	20002d68 	.word	0x20002d68
 800b628:	20002d70 	.word	0x20002d70
 800b62c:	20002d58 	.word	0x20002d58
 800b630:	20002c54 	.word	0x20002c54
 800b634:	20002c50 	.word	0x20002c50
 800b638:	20002d64 	.word	0x20002d64
 800b63c:	20002d60 	.word	0x20002d60

0800b640 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b086      	sub	sp, #24
 800b644:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b646:	4b35      	ldr	r3, [pc, #212]	@ (800b71c <vTaskSwitchContext+0xdc>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d003      	beq.n	800b656 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b64e:	4b34      	ldr	r3, [pc, #208]	@ (800b720 <vTaskSwitchContext+0xe0>)
 800b650:	2201      	movs	r2, #1
 800b652:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b654:	e05e      	b.n	800b714 <vTaskSwitchContext+0xd4>
		xYieldPending = pdFALSE;
 800b656:	4b32      	ldr	r3, [pc, #200]	@ (800b720 <vTaskSwitchContext+0xe0>)
 800b658:	2200      	movs	r2, #0
 800b65a:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800b65c:	f7f7 f970 	bl	8002940 <getRunTimeCounterValue>
 800b660:	4603      	mov	r3, r0
 800b662:	4a30      	ldr	r2, [pc, #192]	@ (800b724 <vTaskSwitchContext+0xe4>)
 800b664:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800b666:	4b2f      	ldr	r3, [pc, #188]	@ (800b724 <vTaskSwitchContext+0xe4>)
 800b668:	681a      	ldr	r2, [r3, #0]
 800b66a:	4b2f      	ldr	r3, [pc, #188]	@ (800b728 <vTaskSwitchContext+0xe8>)
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	429a      	cmp	r2, r3
 800b670:	d909      	bls.n	800b686 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800b672:	4b2e      	ldr	r3, [pc, #184]	@ (800b72c <vTaskSwitchContext+0xec>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b678:	4a2a      	ldr	r2, [pc, #168]	@ (800b724 <vTaskSwitchContext+0xe4>)
 800b67a:	6810      	ldr	r0, [r2, #0]
 800b67c:	4a2a      	ldr	r2, [pc, #168]	@ (800b728 <vTaskSwitchContext+0xe8>)
 800b67e:	6812      	ldr	r2, [r2, #0]
 800b680:	1a82      	subs	r2, r0, r2
 800b682:	440a      	add	r2, r1
 800b684:	655a      	str	r2, [r3, #84]	@ 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800b686:	4b27      	ldr	r3, [pc, #156]	@ (800b724 <vTaskSwitchContext+0xe4>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	4a27      	ldr	r2, [pc, #156]	@ (800b728 <vTaskSwitchContext+0xe8>)
 800b68c:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b68e:	4b28      	ldr	r3, [pc, #160]	@ (800b730 <vTaskSwitchContext+0xf0>)
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	fab3 f383 	clz	r3, r3
 800b69a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b69c:	7afb      	ldrb	r3, [r7, #11]
 800b69e:	f1c3 031f 	rsb	r3, r3, #31
 800b6a2:	617b      	str	r3, [r7, #20]
 800b6a4:	4923      	ldr	r1, [pc, #140]	@ (800b734 <vTaskSwitchContext+0xf4>)
 800b6a6:	697a      	ldr	r2, [r7, #20]
 800b6a8:	4613      	mov	r3, r2
 800b6aa:	009b      	lsls	r3, r3, #2
 800b6ac:	4413      	add	r3, r2
 800b6ae:	009b      	lsls	r3, r3, #2
 800b6b0:	440b      	add	r3, r1
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d10b      	bne.n	800b6d0 <vTaskSwitchContext+0x90>
	__asm volatile
 800b6b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6bc:	f383 8811 	msr	BASEPRI, r3
 800b6c0:	f3bf 8f6f 	isb	sy
 800b6c4:	f3bf 8f4f 	dsb	sy
 800b6c8:	607b      	str	r3, [r7, #4]
}
 800b6ca:	bf00      	nop
 800b6cc:	bf00      	nop
 800b6ce:	e7fd      	b.n	800b6cc <vTaskSwitchContext+0x8c>
 800b6d0:	697a      	ldr	r2, [r7, #20]
 800b6d2:	4613      	mov	r3, r2
 800b6d4:	009b      	lsls	r3, r3, #2
 800b6d6:	4413      	add	r3, r2
 800b6d8:	009b      	lsls	r3, r3, #2
 800b6da:	4a16      	ldr	r2, [pc, #88]	@ (800b734 <vTaskSwitchContext+0xf4>)
 800b6dc:	4413      	add	r3, r2
 800b6de:	613b      	str	r3, [r7, #16]
 800b6e0:	693b      	ldr	r3, [r7, #16]
 800b6e2:	685b      	ldr	r3, [r3, #4]
 800b6e4:	685a      	ldr	r2, [r3, #4]
 800b6e6:	693b      	ldr	r3, [r7, #16]
 800b6e8:	605a      	str	r2, [r3, #4]
 800b6ea:	693b      	ldr	r3, [r7, #16]
 800b6ec:	685a      	ldr	r2, [r3, #4]
 800b6ee:	693b      	ldr	r3, [r7, #16]
 800b6f0:	3308      	adds	r3, #8
 800b6f2:	429a      	cmp	r2, r3
 800b6f4:	d104      	bne.n	800b700 <vTaskSwitchContext+0xc0>
 800b6f6:	693b      	ldr	r3, [r7, #16]
 800b6f8:	685b      	ldr	r3, [r3, #4]
 800b6fa:	685a      	ldr	r2, [r3, #4]
 800b6fc:	693b      	ldr	r3, [r7, #16]
 800b6fe:	605a      	str	r2, [r3, #4]
 800b700:	693b      	ldr	r3, [r7, #16]
 800b702:	685b      	ldr	r3, [r3, #4]
 800b704:	68db      	ldr	r3, [r3, #12]
 800b706:	4a09      	ldr	r2, [pc, #36]	@ (800b72c <vTaskSwitchContext+0xec>)
 800b708:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b70a:	4b08      	ldr	r3, [pc, #32]	@ (800b72c <vTaskSwitchContext+0xec>)
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	3358      	adds	r3, #88	@ 0x58
 800b710:	4a09      	ldr	r2, [pc, #36]	@ (800b738 <vTaskSwitchContext+0xf8>)
 800b712:	6013      	str	r3, [r2, #0]
}
 800b714:	bf00      	nop
 800b716:	3718      	adds	r7, #24
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd80      	pop	{r7, pc}
 800b71c:	20002d78 	.word	0x20002d78
 800b720:	20002d64 	.word	0x20002d64
 800b724:	20002d80 	.word	0x20002d80
 800b728:	20002d7c 	.word	0x20002d7c
 800b72c:	20002c50 	.word	0x20002c50
 800b730:	20002d58 	.word	0x20002d58
 800b734:	20002c54 	.word	0x20002c54
 800b738:	200001d8 	.word	0x200001d8

0800b73c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b084      	sub	sp, #16
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
 800b744:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d10b      	bne.n	800b764 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b74c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b750:	f383 8811 	msr	BASEPRI, r3
 800b754:	f3bf 8f6f 	isb	sy
 800b758:	f3bf 8f4f 	dsb	sy
 800b75c:	60fb      	str	r3, [r7, #12]
}
 800b75e:	bf00      	nop
 800b760:	bf00      	nop
 800b762:	e7fd      	b.n	800b760 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b764:	4b07      	ldr	r3, [pc, #28]	@ (800b784 <vTaskPlaceOnEventList+0x48>)
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	3318      	adds	r3, #24
 800b76a:	4619      	mov	r1, r3
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f7fe fb08 	bl	8009d82 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b772:	2101      	movs	r1, #1
 800b774:	6838      	ldr	r0, [r7, #0]
 800b776:	f000 fbb9 	bl	800beec <prvAddCurrentTaskToDelayedList>
}
 800b77a:	bf00      	nop
 800b77c:	3710      	adds	r7, #16
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd80      	pop	{r7, pc}
 800b782:	bf00      	nop
 800b784:	20002c50 	.word	0x20002c50

0800b788 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b086      	sub	sp, #24
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	60f8      	str	r0, [r7, #12]
 800b790:	60b9      	str	r1, [r7, #8]
 800b792:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d10b      	bne.n	800b7b2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b79a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b79e:	f383 8811 	msr	BASEPRI, r3
 800b7a2:	f3bf 8f6f 	isb	sy
 800b7a6:	f3bf 8f4f 	dsb	sy
 800b7aa:	617b      	str	r3, [r7, #20]
}
 800b7ac:	bf00      	nop
 800b7ae:	bf00      	nop
 800b7b0:	e7fd      	b.n	800b7ae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b7b2:	4b0a      	ldr	r3, [pc, #40]	@ (800b7dc <vTaskPlaceOnEventListRestricted+0x54>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	3318      	adds	r3, #24
 800b7b8:	4619      	mov	r1, r3
 800b7ba:	68f8      	ldr	r0, [r7, #12]
 800b7bc:	f7fe fabd 	bl	8009d3a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d002      	beq.n	800b7cc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b7c6:	f04f 33ff 	mov.w	r3, #4294967295
 800b7ca:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b7cc:	6879      	ldr	r1, [r7, #4]
 800b7ce:	68b8      	ldr	r0, [r7, #8]
 800b7d0:	f000 fb8c 	bl	800beec <prvAddCurrentTaskToDelayedList>
	}
 800b7d4:	bf00      	nop
 800b7d6:	3718      	adds	r7, #24
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	bd80      	pop	{r7, pc}
 800b7dc:	20002c50 	.word	0x20002c50

0800b7e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b086      	sub	sp, #24
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	68db      	ldr	r3, [r3, #12]
 800b7ec:	68db      	ldr	r3, [r3, #12]
 800b7ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b7f0:	693b      	ldr	r3, [r7, #16]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d10b      	bne.n	800b80e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b7f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7fa:	f383 8811 	msr	BASEPRI, r3
 800b7fe:	f3bf 8f6f 	isb	sy
 800b802:	f3bf 8f4f 	dsb	sy
 800b806:	60fb      	str	r3, [r7, #12]
}
 800b808:	bf00      	nop
 800b80a:	bf00      	nop
 800b80c:	e7fd      	b.n	800b80a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b80e:	693b      	ldr	r3, [r7, #16]
 800b810:	3318      	adds	r3, #24
 800b812:	4618      	mov	r0, r3
 800b814:	f7fe faee 	bl	8009df4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b818:	4b1d      	ldr	r3, [pc, #116]	@ (800b890 <xTaskRemoveFromEventList+0xb0>)
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d11c      	bne.n	800b85a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b820:	693b      	ldr	r3, [r7, #16]
 800b822:	3304      	adds	r3, #4
 800b824:	4618      	mov	r0, r3
 800b826:	f7fe fae5 	bl	8009df4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b82a:	693b      	ldr	r3, [r7, #16]
 800b82c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b82e:	2201      	movs	r2, #1
 800b830:	409a      	lsls	r2, r3
 800b832:	4b18      	ldr	r3, [pc, #96]	@ (800b894 <xTaskRemoveFromEventList+0xb4>)
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	4313      	orrs	r3, r2
 800b838:	4a16      	ldr	r2, [pc, #88]	@ (800b894 <xTaskRemoveFromEventList+0xb4>)
 800b83a:	6013      	str	r3, [r2, #0]
 800b83c:	693b      	ldr	r3, [r7, #16]
 800b83e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b840:	4613      	mov	r3, r2
 800b842:	009b      	lsls	r3, r3, #2
 800b844:	4413      	add	r3, r2
 800b846:	009b      	lsls	r3, r3, #2
 800b848:	4a13      	ldr	r2, [pc, #76]	@ (800b898 <xTaskRemoveFromEventList+0xb8>)
 800b84a:	441a      	add	r2, r3
 800b84c:	693b      	ldr	r3, [r7, #16]
 800b84e:	3304      	adds	r3, #4
 800b850:	4619      	mov	r1, r3
 800b852:	4610      	mov	r0, r2
 800b854:	f7fe fa71 	bl	8009d3a <vListInsertEnd>
 800b858:	e005      	b.n	800b866 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b85a:	693b      	ldr	r3, [r7, #16]
 800b85c:	3318      	adds	r3, #24
 800b85e:	4619      	mov	r1, r3
 800b860:	480e      	ldr	r0, [pc, #56]	@ (800b89c <xTaskRemoveFromEventList+0xbc>)
 800b862:	f7fe fa6a 	bl	8009d3a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b866:	693b      	ldr	r3, [r7, #16]
 800b868:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b86a:	4b0d      	ldr	r3, [pc, #52]	@ (800b8a0 <xTaskRemoveFromEventList+0xc0>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b870:	429a      	cmp	r2, r3
 800b872:	d905      	bls.n	800b880 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b874:	2301      	movs	r3, #1
 800b876:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b878:	4b0a      	ldr	r3, [pc, #40]	@ (800b8a4 <xTaskRemoveFromEventList+0xc4>)
 800b87a:	2201      	movs	r2, #1
 800b87c:	601a      	str	r2, [r3, #0]
 800b87e:	e001      	b.n	800b884 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b880:	2300      	movs	r3, #0
 800b882:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b884:	697b      	ldr	r3, [r7, #20]
}
 800b886:	4618      	mov	r0, r3
 800b888:	3718      	adds	r7, #24
 800b88a:	46bd      	mov	sp, r7
 800b88c:	bd80      	pop	{r7, pc}
 800b88e:	bf00      	nop
 800b890:	20002d78 	.word	0x20002d78
 800b894:	20002d58 	.word	0x20002d58
 800b898:	20002c54 	.word	0x20002c54
 800b89c:	20002d10 	.word	0x20002d10
 800b8a0:	20002c50 	.word	0x20002c50
 800b8a4:	20002d64 	.word	0x20002d64

0800b8a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b8a8:	b480      	push	{r7}
 800b8aa:	b083      	sub	sp, #12
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b8b0:	4b06      	ldr	r3, [pc, #24]	@ (800b8cc <vTaskInternalSetTimeOutState+0x24>)
 800b8b2:	681a      	ldr	r2, [r3, #0]
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b8b8:	4b05      	ldr	r3, [pc, #20]	@ (800b8d0 <vTaskInternalSetTimeOutState+0x28>)
 800b8ba:	681a      	ldr	r2, [r3, #0]
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	605a      	str	r2, [r3, #4]
}
 800b8c0:	bf00      	nop
 800b8c2:	370c      	adds	r7, #12
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ca:	4770      	bx	lr
 800b8cc:	20002d68 	.word	0x20002d68
 800b8d0:	20002d54 	.word	0x20002d54

0800b8d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b088      	sub	sp, #32
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
 800b8dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d10b      	bne.n	800b8fc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b8e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8e8:	f383 8811 	msr	BASEPRI, r3
 800b8ec:	f3bf 8f6f 	isb	sy
 800b8f0:	f3bf 8f4f 	dsb	sy
 800b8f4:	613b      	str	r3, [r7, #16]
}
 800b8f6:	bf00      	nop
 800b8f8:	bf00      	nop
 800b8fa:	e7fd      	b.n	800b8f8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d10b      	bne.n	800b91a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b906:	f383 8811 	msr	BASEPRI, r3
 800b90a:	f3bf 8f6f 	isb	sy
 800b90e:	f3bf 8f4f 	dsb	sy
 800b912:	60fb      	str	r3, [r7, #12]
}
 800b914:	bf00      	nop
 800b916:	bf00      	nop
 800b918:	e7fd      	b.n	800b916 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b91a:	f000 ffbd 	bl	800c898 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b91e:	4b1d      	ldr	r3, [pc, #116]	@ (800b994 <xTaskCheckForTimeOut+0xc0>)
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	685b      	ldr	r3, [r3, #4]
 800b928:	69ba      	ldr	r2, [r7, #24]
 800b92a:	1ad3      	subs	r3, r2, r3
 800b92c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b936:	d102      	bne.n	800b93e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b938:	2300      	movs	r3, #0
 800b93a:	61fb      	str	r3, [r7, #28]
 800b93c:	e023      	b.n	800b986 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681a      	ldr	r2, [r3, #0]
 800b942:	4b15      	ldr	r3, [pc, #84]	@ (800b998 <xTaskCheckForTimeOut+0xc4>)
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	429a      	cmp	r2, r3
 800b948:	d007      	beq.n	800b95a <xTaskCheckForTimeOut+0x86>
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	685b      	ldr	r3, [r3, #4]
 800b94e:	69ba      	ldr	r2, [r7, #24]
 800b950:	429a      	cmp	r2, r3
 800b952:	d302      	bcc.n	800b95a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b954:	2301      	movs	r3, #1
 800b956:	61fb      	str	r3, [r7, #28]
 800b958:	e015      	b.n	800b986 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	697a      	ldr	r2, [r7, #20]
 800b960:	429a      	cmp	r2, r3
 800b962:	d20b      	bcs.n	800b97c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	681a      	ldr	r2, [r3, #0]
 800b968:	697b      	ldr	r3, [r7, #20]
 800b96a:	1ad2      	subs	r2, r2, r3
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b970:	6878      	ldr	r0, [r7, #4]
 800b972:	f7ff ff99 	bl	800b8a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b976:	2300      	movs	r3, #0
 800b978:	61fb      	str	r3, [r7, #28]
 800b97a:	e004      	b.n	800b986 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	2200      	movs	r2, #0
 800b980:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b982:	2301      	movs	r3, #1
 800b984:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b986:	f000 ffb9 	bl	800c8fc <vPortExitCritical>

	return xReturn;
 800b98a:	69fb      	ldr	r3, [r7, #28]
}
 800b98c:	4618      	mov	r0, r3
 800b98e:	3720      	adds	r7, #32
 800b990:	46bd      	mov	sp, r7
 800b992:	bd80      	pop	{r7, pc}
 800b994:	20002d54 	.word	0x20002d54
 800b998:	20002d68 	.word	0x20002d68

0800b99c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b99c:	b480      	push	{r7}
 800b99e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b9a0:	4b03      	ldr	r3, [pc, #12]	@ (800b9b0 <vTaskMissedYield+0x14>)
 800b9a2:	2201      	movs	r2, #1
 800b9a4:	601a      	str	r2, [r3, #0]
}
 800b9a6:	bf00      	nop
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ae:	4770      	bx	lr
 800b9b0:	20002d64 	.word	0x20002d64

0800b9b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b082      	sub	sp, #8
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b9bc:	f000 f852 	bl	800ba64 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b9c0:	4b06      	ldr	r3, [pc, #24]	@ (800b9dc <prvIdleTask+0x28>)
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	2b01      	cmp	r3, #1
 800b9c6:	d9f9      	bls.n	800b9bc <prvIdleTask+0x8>
			{
				taskYIELD();
 800b9c8:	4b05      	ldr	r3, [pc, #20]	@ (800b9e0 <prvIdleTask+0x2c>)
 800b9ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b9ce:	601a      	str	r2, [r3, #0]
 800b9d0:	f3bf 8f4f 	dsb	sy
 800b9d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b9d8:	e7f0      	b.n	800b9bc <prvIdleTask+0x8>
 800b9da:	bf00      	nop
 800b9dc:	20002c54 	.word	0x20002c54
 800b9e0:	e000ed04 	.word	0xe000ed04

0800b9e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b082      	sub	sp, #8
 800b9e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	607b      	str	r3, [r7, #4]
 800b9ee:	e00c      	b.n	800ba0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b9f0:	687a      	ldr	r2, [r7, #4]
 800b9f2:	4613      	mov	r3, r2
 800b9f4:	009b      	lsls	r3, r3, #2
 800b9f6:	4413      	add	r3, r2
 800b9f8:	009b      	lsls	r3, r3, #2
 800b9fa:	4a12      	ldr	r2, [pc, #72]	@ (800ba44 <prvInitialiseTaskLists+0x60>)
 800b9fc:	4413      	add	r3, r2
 800b9fe:	4618      	mov	r0, r3
 800ba00:	f7fe f96e 	bl	8009ce0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	3301      	adds	r3, #1
 800ba08:	607b      	str	r3, [r7, #4]
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2b06      	cmp	r3, #6
 800ba0e:	d9ef      	bls.n	800b9f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ba10:	480d      	ldr	r0, [pc, #52]	@ (800ba48 <prvInitialiseTaskLists+0x64>)
 800ba12:	f7fe f965 	bl	8009ce0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ba16:	480d      	ldr	r0, [pc, #52]	@ (800ba4c <prvInitialiseTaskLists+0x68>)
 800ba18:	f7fe f962 	bl	8009ce0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ba1c:	480c      	ldr	r0, [pc, #48]	@ (800ba50 <prvInitialiseTaskLists+0x6c>)
 800ba1e:	f7fe f95f 	bl	8009ce0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ba22:	480c      	ldr	r0, [pc, #48]	@ (800ba54 <prvInitialiseTaskLists+0x70>)
 800ba24:	f7fe f95c 	bl	8009ce0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ba28:	480b      	ldr	r0, [pc, #44]	@ (800ba58 <prvInitialiseTaskLists+0x74>)
 800ba2a:	f7fe f959 	bl	8009ce0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ba2e:	4b0b      	ldr	r3, [pc, #44]	@ (800ba5c <prvInitialiseTaskLists+0x78>)
 800ba30:	4a05      	ldr	r2, [pc, #20]	@ (800ba48 <prvInitialiseTaskLists+0x64>)
 800ba32:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ba34:	4b0a      	ldr	r3, [pc, #40]	@ (800ba60 <prvInitialiseTaskLists+0x7c>)
 800ba36:	4a05      	ldr	r2, [pc, #20]	@ (800ba4c <prvInitialiseTaskLists+0x68>)
 800ba38:	601a      	str	r2, [r3, #0]
}
 800ba3a:	bf00      	nop
 800ba3c:	3708      	adds	r7, #8
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	bd80      	pop	{r7, pc}
 800ba42:	bf00      	nop
 800ba44:	20002c54 	.word	0x20002c54
 800ba48:	20002ce0 	.word	0x20002ce0
 800ba4c:	20002cf4 	.word	0x20002cf4
 800ba50:	20002d10 	.word	0x20002d10
 800ba54:	20002d24 	.word	0x20002d24
 800ba58:	20002d3c 	.word	0x20002d3c
 800ba5c:	20002d08 	.word	0x20002d08
 800ba60:	20002d0c 	.word	0x20002d0c

0800ba64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b082      	sub	sp, #8
 800ba68:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ba6a:	e019      	b.n	800baa0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ba6c:	f000 ff14 	bl	800c898 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba70:	4b10      	ldr	r3, [pc, #64]	@ (800bab4 <prvCheckTasksWaitingTermination+0x50>)
 800ba72:	68db      	ldr	r3, [r3, #12]
 800ba74:	68db      	ldr	r3, [r3, #12]
 800ba76:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	3304      	adds	r3, #4
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	f7fe f9b9 	bl	8009df4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ba82:	4b0d      	ldr	r3, [pc, #52]	@ (800bab8 <prvCheckTasksWaitingTermination+0x54>)
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	3b01      	subs	r3, #1
 800ba88:	4a0b      	ldr	r2, [pc, #44]	@ (800bab8 <prvCheckTasksWaitingTermination+0x54>)
 800ba8a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ba8c:	4b0b      	ldr	r3, [pc, #44]	@ (800babc <prvCheckTasksWaitingTermination+0x58>)
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	3b01      	subs	r3, #1
 800ba92:	4a0a      	ldr	r2, [pc, #40]	@ (800babc <prvCheckTasksWaitingTermination+0x58>)
 800ba94:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ba96:	f000 ff31 	bl	800c8fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ba9a:	6878      	ldr	r0, [r7, #4]
 800ba9c:	f000 f810 	bl	800bac0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800baa0:	4b06      	ldr	r3, [pc, #24]	@ (800babc <prvCheckTasksWaitingTermination+0x58>)
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d1e1      	bne.n	800ba6c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800baa8:	bf00      	nop
 800baaa:	bf00      	nop
 800baac:	3708      	adds	r7, #8
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}
 800bab2:	bf00      	nop
 800bab4:	20002d24 	.word	0x20002d24
 800bab8:	20002d50 	.word	0x20002d50
 800babc:	20002d38 	.word	0x20002d38

0800bac0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b084      	sub	sp, #16
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	3358      	adds	r3, #88	@ 0x58
 800bacc:	4618      	mov	r0, r3
 800bace:	f002 f8b3 	bl	800dc38 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d108      	bne.n	800baee <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bae0:	4618      	mov	r0, r3
 800bae2:	f001 f8cf 	bl	800cc84 <vPortFree>
				vPortFree( pxTCB );
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	f001 f8cc 	bl	800cc84 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800baec:	e019      	b.n	800bb22 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800baf4:	2b01      	cmp	r3, #1
 800baf6:	d103      	bne.n	800bb00 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800baf8:	6878      	ldr	r0, [r7, #4]
 800bafa:	f001 f8c3 	bl	800cc84 <vPortFree>
	}
 800bafe:	e010      	b.n	800bb22 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800bb06:	2b02      	cmp	r3, #2
 800bb08:	d00b      	beq.n	800bb22 <prvDeleteTCB+0x62>
	__asm volatile
 800bb0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb0e:	f383 8811 	msr	BASEPRI, r3
 800bb12:	f3bf 8f6f 	isb	sy
 800bb16:	f3bf 8f4f 	dsb	sy
 800bb1a:	60fb      	str	r3, [r7, #12]
}
 800bb1c:	bf00      	nop
 800bb1e:	bf00      	nop
 800bb20:	e7fd      	b.n	800bb1e <prvDeleteTCB+0x5e>
	}
 800bb22:	bf00      	nop
 800bb24:	3710      	adds	r7, #16
 800bb26:	46bd      	mov	sp, r7
 800bb28:	bd80      	pop	{r7, pc}
	...

0800bb2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bb2c:	b480      	push	{r7}
 800bb2e:	b083      	sub	sp, #12
 800bb30:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb32:	4b0c      	ldr	r3, [pc, #48]	@ (800bb64 <prvResetNextTaskUnblockTime+0x38>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d104      	bne.n	800bb46 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bb3c:	4b0a      	ldr	r3, [pc, #40]	@ (800bb68 <prvResetNextTaskUnblockTime+0x3c>)
 800bb3e:	f04f 32ff 	mov.w	r2, #4294967295
 800bb42:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bb44:	e008      	b.n	800bb58 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb46:	4b07      	ldr	r3, [pc, #28]	@ (800bb64 <prvResetNextTaskUnblockTime+0x38>)
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	68db      	ldr	r3, [r3, #12]
 800bb4c:	68db      	ldr	r3, [r3, #12]
 800bb4e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	685b      	ldr	r3, [r3, #4]
 800bb54:	4a04      	ldr	r2, [pc, #16]	@ (800bb68 <prvResetNextTaskUnblockTime+0x3c>)
 800bb56:	6013      	str	r3, [r2, #0]
}
 800bb58:	bf00      	nop
 800bb5a:	370c      	adds	r7, #12
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb62:	4770      	bx	lr
 800bb64:	20002d08 	.word	0x20002d08
 800bb68:	20002d70 	.word	0x20002d70

0800bb6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bb6c:	b480      	push	{r7}
 800bb6e:	b083      	sub	sp, #12
 800bb70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bb72:	4b0b      	ldr	r3, [pc, #44]	@ (800bba0 <xTaskGetSchedulerState+0x34>)
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d102      	bne.n	800bb80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bb7a:	2301      	movs	r3, #1
 800bb7c:	607b      	str	r3, [r7, #4]
 800bb7e:	e008      	b.n	800bb92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb80:	4b08      	ldr	r3, [pc, #32]	@ (800bba4 <xTaskGetSchedulerState+0x38>)
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d102      	bne.n	800bb8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bb88:	2302      	movs	r3, #2
 800bb8a:	607b      	str	r3, [r7, #4]
 800bb8c:	e001      	b.n	800bb92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bb8e:	2300      	movs	r3, #0
 800bb90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bb92:	687b      	ldr	r3, [r7, #4]
	}
 800bb94:	4618      	mov	r0, r3
 800bb96:	370c      	adds	r7, #12
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9e:	4770      	bx	lr
 800bba0:	20002d5c 	.word	0x20002d5c
 800bba4:	20002d78 	.word	0x20002d78

0800bba8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b084      	sub	sp, #16
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d05e      	beq.n	800bc7c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bbbe:	68bb      	ldr	r3, [r7, #8]
 800bbc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbc2:	4b31      	ldr	r3, [pc, #196]	@ (800bc88 <xTaskPriorityInherit+0xe0>)
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbc8:	429a      	cmp	r2, r3
 800bbca:	d24e      	bcs.n	800bc6a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bbcc:	68bb      	ldr	r3, [r7, #8]
 800bbce:	699b      	ldr	r3, [r3, #24]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	db06      	blt.n	800bbe2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bbd4:	4b2c      	ldr	r3, [pc, #176]	@ (800bc88 <xTaskPriorityInherit+0xe0>)
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbda:	f1c3 0207 	rsb	r2, r3, #7
 800bbde:	68bb      	ldr	r3, [r7, #8]
 800bbe0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bbe2:	68bb      	ldr	r3, [r7, #8]
 800bbe4:	6959      	ldr	r1, [r3, #20]
 800bbe6:	68bb      	ldr	r3, [r7, #8]
 800bbe8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbea:	4613      	mov	r3, r2
 800bbec:	009b      	lsls	r3, r3, #2
 800bbee:	4413      	add	r3, r2
 800bbf0:	009b      	lsls	r3, r3, #2
 800bbf2:	4a26      	ldr	r2, [pc, #152]	@ (800bc8c <xTaskPriorityInherit+0xe4>)
 800bbf4:	4413      	add	r3, r2
 800bbf6:	4299      	cmp	r1, r3
 800bbf8:	d12f      	bne.n	800bc5a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bbfa:	68bb      	ldr	r3, [r7, #8]
 800bbfc:	3304      	adds	r3, #4
 800bbfe:	4618      	mov	r0, r3
 800bc00:	f7fe f8f8 	bl	8009df4 <uxListRemove>
 800bc04:	4603      	mov	r3, r0
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d10a      	bne.n	800bc20 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800bc0a:	68bb      	ldr	r3, [r7, #8]
 800bc0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc0e:	2201      	movs	r2, #1
 800bc10:	fa02 f303 	lsl.w	r3, r2, r3
 800bc14:	43da      	mvns	r2, r3
 800bc16:	4b1e      	ldr	r3, [pc, #120]	@ (800bc90 <xTaskPriorityInherit+0xe8>)
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	4013      	ands	r3, r2
 800bc1c:	4a1c      	ldr	r2, [pc, #112]	@ (800bc90 <xTaskPriorityInherit+0xe8>)
 800bc1e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bc20:	4b19      	ldr	r3, [pc, #100]	@ (800bc88 <xTaskPriorityInherit+0xe0>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc26:	68bb      	ldr	r3, [r7, #8]
 800bc28:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc2e:	2201      	movs	r2, #1
 800bc30:	409a      	lsls	r2, r3
 800bc32:	4b17      	ldr	r3, [pc, #92]	@ (800bc90 <xTaskPriorityInherit+0xe8>)
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	4313      	orrs	r3, r2
 800bc38:	4a15      	ldr	r2, [pc, #84]	@ (800bc90 <xTaskPriorityInherit+0xe8>)
 800bc3a:	6013      	str	r3, [r2, #0]
 800bc3c:	68bb      	ldr	r3, [r7, #8]
 800bc3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc40:	4613      	mov	r3, r2
 800bc42:	009b      	lsls	r3, r3, #2
 800bc44:	4413      	add	r3, r2
 800bc46:	009b      	lsls	r3, r3, #2
 800bc48:	4a10      	ldr	r2, [pc, #64]	@ (800bc8c <xTaskPriorityInherit+0xe4>)
 800bc4a:	441a      	add	r2, r3
 800bc4c:	68bb      	ldr	r3, [r7, #8]
 800bc4e:	3304      	adds	r3, #4
 800bc50:	4619      	mov	r1, r3
 800bc52:	4610      	mov	r0, r2
 800bc54:	f7fe f871 	bl	8009d3a <vListInsertEnd>
 800bc58:	e004      	b.n	800bc64 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bc5a:	4b0b      	ldr	r3, [pc, #44]	@ (800bc88 <xTaskPriorityInherit+0xe0>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc60:	68bb      	ldr	r3, [r7, #8]
 800bc62:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bc64:	2301      	movs	r3, #1
 800bc66:	60fb      	str	r3, [r7, #12]
 800bc68:	e008      	b.n	800bc7c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bc6a:	68bb      	ldr	r3, [r7, #8]
 800bc6c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bc6e:	4b06      	ldr	r3, [pc, #24]	@ (800bc88 <xTaskPriorityInherit+0xe0>)
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc74:	429a      	cmp	r2, r3
 800bc76:	d201      	bcs.n	800bc7c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bc78:	2301      	movs	r3, #1
 800bc7a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
	}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	3710      	adds	r7, #16
 800bc82:	46bd      	mov	sp, r7
 800bc84:	bd80      	pop	{r7, pc}
 800bc86:	bf00      	nop
 800bc88:	20002c50 	.word	0x20002c50
 800bc8c:	20002c54 	.word	0x20002c54
 800bc90:	20002d58 	.word	0x20002d58

0800bc94 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b086      	sub	sp, #24
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bca0:	2300      	movs	r3, #0
 800bca2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d070      	beq.n	800bd8c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bcaa:	4b3b      	ldr	r3, [pc, #236]	@ (800bd98 <xTaskPriorityDisinherit+0x104>)
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	693a      	ldr	r2, [r7, #16]
 800bcb0:	429a      	cmp	r2, r3
 800bcb2:	d00b      	beq.n	800bccc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800bcb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcb8:	f383 8811 	msr	BASEPRI, r3
 800bcbc:	f3bf 8f6f 	isb	sy
 800bcc0:	f3bf 8f4f 	dsb	sy
 800bcc4:	60fb      	str	r3, [r7, #12]
}
 800bcc6:	bf00      	nop
 800bcc8:	bf00      	nop
 800bcca:	e7fd      	b.n	800bcc8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bccc:	693b      	ldr	r3, [r7, #16]
 800bcce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d10b      	bne.n	800bcec <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800bcd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcd8:	f383 8811 	msr	BASEPRI, r3
 800bcdc:	f3bf 8f6f 	isb	sy
 800bce0:	f3bf 8f4f 	dsb	sy
 800bce4:	60bb      	str	r3, [r7, #8]
}
 800bce6:	bf00      	nop
 800bce8:	bf00      	nop
 800bcea:	e7fd      	b.n	800bce8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800bcec:	693b      	ldr	r3, [r7, #16]
 800bcee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bcf0:	1e5a      	subs	r2, r3, #1
 800bcf2:	693b      	ldr	r3, [r7, #16]
 800bcf4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bcf6:	693b      	ldr	r3, [r7, #16]
 800bcf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bcfa:	693b      	ldr	r3, [r7, #16]
 800bcfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bcfe:	429a      	cmp	r2, r3
 800bd00:	d044      	beq.n	800bd8c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bd02:	693b      	ldr	r3, [r7, #16]
 800bd04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d140      	bne.n	800bd8c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd0a:	693b      	ldr	r3, [r7, #16]
 800bd0c:	3304      	adds	r3, #4
 800bd0e:	4618      	mov	r0, r3
 800bd10:	f7fe f870 	bl	8009df4 <uxListRemove>
 800bd14:	4603      	mov	r3, r0
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d115      	bne.n	800bd46 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800bd1a:	693b      	ldr	r3, [r7, #16]
 800bd1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd1e:	491f      	ldr	r1, [pc, #124]	@ (800bd9c <xTaskPriorityDisinherit+0x108>)
 800bd20:	4613      	mov	r3, r2
 800bd22:	009b      	lsls	r3, r3, #2
 800bd24:	4413      	add	r3, r2
 800bd26:	009b      	lsls	r3, r3, #2
 800bd28:	440b      	add	r3, r1
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d10a      	bne.n	800bd46 <xTaskPriorityDisinherit+0xb2>
 800bd30:	693b      	ldr	r3, [r7, #16]
 800bd32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd34:	2201      	movs	r2, #1
 800bd36:	fa02 f303 	lsl.w	r3, r2, r3
 800bd3a:	43da      	mvns	r2, r3
 800bd3c:	4b18      	ldr	r3, [pc, #96]	@ (800bda0 <xTaskPriorityDisinherit+0x10c>)
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	4013      	ands	r3, r2
 800bd42:	4a17      	ldr	r2, [pc, #92]	@ (800bda0 <xTaskPriorityDisinherit+0x10c>)
 800bd44:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bd46:	693b      	ldr	r3, [r7, #16]
 800bd48:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bd4a:	693b      	ldr	r3, [r7, #16]
 800bd4c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd4e:	693b      	ldr	r3, [r7, #16]
 800bd50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd52:	f1c3 0207 	rsb	r2, r3, #7
 800bd56:	693b      	ldr	r3, [r7, #16]
 800bd58:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bd5a:	693b      	ldr	r3, [r7, #16]
 800bd5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd5e:	2201      	movs	r2, #1
 800bd60:	409a      	lsls	r2, r3
 800bd62:	4b0f      	ldr	r3, [pc, #60]	@ (800bda0 <xTaskPriorityDisinherit+0x10c>)
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	4313      	orrs	r3, r2
 800bd68:	4a0d      	ldr	r2, [pc, #52]	@ (800bda0 <xTaskPriorityDisinherit+0x10c>)
 800bd6a:	6013      	str	r3, [r2, #0]
 800bd6c:	693b      	ldr	r3, [r7, #16]
 800bd6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd70:	4613      	mov	r3, r2
 800bd72:	009b      	lsls	r3, r3, #2
 800bd74:	4413      	add	r3, r2
 800bd76:	009b      	lsls	r3, r3, #2
 800bd78:	4a08      	ldr	r2, [pc, #32]	@ (800bd9c <xTaskPriorityDisinherit+0x108>)
 800bd7a:	441a      	add	r2, r3
 800bd7c:	693b      	ldr	r3, [r7, #16]
 800bd7e:	3304      	adds	r3, #4
 800bd80:	4619      	mov	r1, r3
 800bd82:	4610      	mov	r0, r2
 800bd84:	f7fd ffd9 	bl	8009d3a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bd88:	2301      	movs	r3, #1
 800bd8a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bd8c:	697b      	ldr	r3, [r7, #20]
	}
 800bd8e:	4618      	mov	r0, r3
 800bd90:	3718      	adds	r7, #24
 800bd92:	46bd      	mov	sp, r7
 800bd94:	bd80      	pop	{r7, pc}
 800bd96:	bf00      	nop
 800bd98:	20002c50 	.word	0x20002c50
 800bd9c:	20002c54 	.word	0x20002c54
 800bda0:	20002d58 	.word	0x20002d58

0800bda4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b088      	sub	sp, #32
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
 800bdac:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bdb2:	2301      	movs	r3, #1
 800bdb4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d079      	beq.n	800beb0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bdbc:	69bb      	ldr	r3, [r7, #24]
 800bdbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d10b      	bne.n	800bddc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800bdc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdc8:	f383 8811 	msr	BASEPRI, r3
 800bdcc:	f3bf 8f6f 	isb	sy
 800bdd0:	f3bf 8f4f 	dsb	sy
 800bdd4:	60fb      	str	r3, [r7, #12]
}
 800bdd6:	bf00      	nop
 800bdd8:	bf00      	nop
 800bdda:	e7fd      	b.n	800bdd8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bddc:	69bb      	ldr	r3, [r7, #24]
 800bdde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bde0:	683a      	ldr	r2, [r7, #0]
 800bde2:	429a      	cmp	r2, r3
 800bde4:	d902      	bls.n	800bdec <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	61fb      	str	r3, [r7, #28]
 800bdea:	e002      	b.n	800bdf2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bdec:	69bb      	ldr	r3, [r7, #24]
 800bdee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bdf0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bdf2:	69bb      	ldr	r3, [r7, #24]
 800bdf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdf6:	69fa      	ldr	r2, [r7, #28]
 800bdf8:	429a      	cmp	r2, r3
 800bdfa:	d059      	beq.n	800beb0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bdfc:	69bb      	ldr	r3, [r7, #24]
 800bdfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be00:	697a      	ldr	r2, [r7, #20]
 800be02:	429a      	cmp	r2, r3
 800be04:	d154      	bne.n	800beb0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800be06:	4b2c      	ldr	r3, [pc, #176]	@ (800beb8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	69ba      	ldr	r2, [r7, #24]
 800be0c:	429a      	cmp	r2, r3
 800be0e:	d10b      	bne.n	800be28 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800be10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be14:	f383 8811 	msr	BASEPRI, r3
 800be18:	f3bf 8f6f 	isb	sy
 800be1c:	f3bf 8f4f 	dsb	sy
 800be20:	60bb      	str	r3, [r7, #8]
}
 800be22:	bf00      	nop
 800be24:	bf00      	nop
 800be26:	e7fd      	b.n	800be24 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800be28:	69bb      	ldr	r3, [r7, #24]
 800be2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be2c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800be2e:	69bb      	ldr	r3, [r7, #24]
 800be30:	69fa      	ldr	r2, [r7, #28]
 800be32:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800be34:	69bb      	ldr	r3, [r7, #24]
 800be36:	699b      	ldr	r3, [r3, #24]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	db04      	blt.n	800be46 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be3c:	69fb      	ldr	r3, [r7, #28]
 800be3e:	f1c3 0207 	rsb	r2, r3, #7
 800be42:	69bb      	ldr	r3, [r7, #24]
 800be44:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800be46:	69bb      	ldr	r3, [r7, #24]
 800be48:	6959      	ldr	r1, [r3, #20]
 800be4a:	693a      	ldr	r2, [r7, #16]
 800be4c:	4613      	mov	r3, r2
 800be4e:	009b      	lsls	r3, r3, #2
 800be50:	4413      	add	r3, r2
 800be52:	009b      	lsls	r3, r3, #2
 800be54:	4a19      	ldr	r2, [pc, #100]	@ (800bebc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800be56:	4413      	add	r3, r2
 800be58:	4299      	cmp	r1, r3
 800be5a:	d129      	bne.n	800beb0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800be5c:	69bb      	ldr	r3, [r7, #24]
 800be5e:	3304      	adds	r3, #4
 800be60:	4618      	mov	r0, r3
 800be62:	f7fd ffc7 	bl	8009df4 <uxListRemove>
 800be66:	4603      	mov	r3, r0
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d10a      	bne.n	800be82 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800be6c:	69bb      	ldr	r3, [r7, #24]
 800be6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be70:	2201      	movs	r2, #1
 800be72:	fa02 f303 	lsl.w	r3, r2, r3
 800be76:	43da      	mvns	r2, r3
 800be78:	4b11      	ldr	r3, [pc, #68]	@ (800bec0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	4013      	ands	r3, r2
 800be7e:	4a10      	ldr	r2, [pc, #64]	@ (800bec0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800be80:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800be82:	69bb      	ldr	r3, [r7, #24]
 800be84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be86:	2201      	movs	r2, #1
 800be88:	409a      	lsls	r2, r3
 800be8a:	4b0d      	ldr	r3, [pc, #52]	@ (800bec0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	4313      	orrs	r3, r2
 800be90:	4a0b      	ldr	r2, [pc, #44]	@ (800bec0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800be92:	6013      	str	r3, [r2, #0]
 800be94:	69bb      	ldr	r3, [r7, #24]
 800be96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be98:	4613      	mov	r3, r2
 800be9a:	009b      	lsls	r3, r3, #2
 800be9c:	4413      	add	r3, r2
 800be9e:	009b      	lsls	r3, r3, #2
 800bea0:	4a06      	ldr	r2, [pc, #24]	@ (800bebc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800bea2:	441a      	add	r2, r3
 800bea4:	69bb      	ldr	r3, [r7, #24]
 800bea6:	3304      	adds	r3, #4
 800bea8:	4619      	mov	r1, r3
 800beaa:	4610      	mov	r0, r2
 800beac:	f7fd ff45 	bl	8009d3a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800beb0:	bf00      	nop
 800beb2:	3720      	adds	r7, #32
 800beb4:	46bd      	mov	sp, r7
 800beb6:	bd80      	pop	{r7, pc}
 800beb8:	20002c50 	.word	0x20002c50
 800bebc:	20002c54 	.word	0x20002c54
 800bec0:	20002d58 	.word	0x20002d58

0800bec4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bec4:	b480      	push	{r7}
 800bec6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bec8:	4b07      	ldr	r3, [pc, #28]	@ (800bee8 <pvTaskIncrementMutexHeldCount+0x24>)
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d004      	beq.n	800beda <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bed0:	4b05      	ldr	r3, [pc, #20]	@ (800bee8 <pvTaskIncrementMutexHeldCount+0x24>)
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bed6:	3201      	adds	r2, #1
 800bed8:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800beda:	4b03      	ldr	r3, [pc, #12]	@ (800bee8 <pvTaskIncrementMutexHeldCount+0x24>)
 800bedc:	681b      	ldr	r3, [r3, #0]
	}
 800bede:	4618      	mov	r0, r3
 800bee0:	46bd      	mov	sp, r7
 800bee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee6:	4770      	bx	lr
 800bee8:	20002c50 	.word	0x20002c50

0800beec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b084      	sub	sp, #16
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
 800bef4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bef6:	4b29      	ldr	r3, [pc, #164]	@ (800bf9c <prvAddCurrentTaskToDelayedList+0xb0>)
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800befc:	4b28      	ldr	r3, [pc, #160]	@ (800bfa0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	3304      	adds	r3, #4
 800bf02:	4618      	mov	r0, r3
 800bf04:	f7fd ff76 	bl	8009df4 <uxListRemove>
 800bf08:	4603      	mov	r3, r0
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d10b      	bne.n	800bf26 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800bf0e:	4b24      	ldr	r3, [pc, #144]	@ (800bfa0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf14:	2201      	movs	r2, #1
 800bf16:	fa02 f303 	lsl.w	r3, r2, r3
 800bf1a:	43da      	mvns	r2, r3
 800bf1c:	4b21      	ldr	r3, [pc, #132]	@ (800bfa4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	4013      	ands	r3, r2
 800bf22:	4a20      	ldr	r2, [pc, #128]	@ (800bfa4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bf24:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf2c:	d10a      	bne.n	800bf44 <prvAddCurrentTaskToDelayedList+0x58>
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d007      	beq.n	800bf44 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf34:	4b1a      	ldr	r3, [pc, #104]	@ (800bfa0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	3304      	adds	r3, #4
 800bf3a:	4619      	mov	r1, r3
 800bf3c:	481a      	ldr	r0, [pc, #104]	@ (800bfa8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800bf3e:	f7fd fefc 	bl	8009d3a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bf42:	e026      	b.n	800bf92 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bf44:	68fa      	ldr	r2, [r7, #12]
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	4413      	add	r3, r2
 800bf4a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bf4c:	4b14      	ldr	r3, [pc, #80]	@ (800bfa0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	68ba      	ldr	r2, [r7, #8]
 800bf52:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bf54:	68ba      	ldr	r2, [r7, #8]
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	429a      	cmp	r2, r3
 800bf5a:	d209      	bcs.n	800bf70 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf5c:	4b13      	ldr	r3, [pc, #76]	@ (800bfac <prvAddCurrentTaskToDelayedList+0xc0>)
 800bf5e:	681a      	ldr	r2, [r3, #0]
 800bf60:	4b0f      	ldr	r3, [pc, #60]	@ (800bfa0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	3304      	adds	r3, #4
 800bf66:	4619      	mov	r1, r3
 800bf68:	4610      	mov	r0, r2
 800bf6a:	f7fd ff0a 	bl	8009d82 <vListInsert>
}
 800bf6e:	e010      	b.n	800bf92 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf70:	4b0f      	ldr	r3, [pc, #60]	@ (800bfb0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800bf72:	681a      	ldr	r2, [r3, #0]
 800bf74:	4b0a      	ldr	r3, [pc, #40]	@ (800bfa0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	3304      	adds	r3, #4
 800bf7a:	4619      	mov	r1, r3
 800bf7c:	4610      	mov	r0, r2
 800bf7e:	f7fd ff00 	bl	8009d82 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bf82:	4b0c      	ldr	r3, [pc, #48]	@ (800bfb4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	68ba      	ldr	r2, [r7, #8]
 800bf88:	429a      	cmp	r2, r3
 800bf8a:	d202      	bcs.n	800bf92 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800bf8c:	4a09      	ldr	r2, [pc, #36]	@ (800bfb4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bf8e:	68bb      	ldr	r3, [r7, #8]
 800bf90:	6013      	str	r3, [r2, #0]
}
 800bf92:	bf00      	nop
 800bf94:	3710      	adds	r7, #16
 800bf96:	46bd      	mov	sp, r7
 800bf98:	bd80      	pop	{r7, pc}
 800bf9a:	bf00      	nop
 800bf9c:	20002d54 	.word	0x20002d54
 800bfa0:	20002c50 	.word	0x20002c50
 800bfa4:	20002d58 	.word	0x20002d58
 800bfa8:	20002d3c 	.word	0x20002d3c
 800bfac:	20002d0c 	.word	0x20002d0c
 800bfb0:	20002d08 	.word	0x20002d08
 800bfb4:	20002d70 	.word	0x20002d70

0800bfb8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b08a      	sub	sp, #40	@ 0x28
 800bfbc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bfc2:	f000 faf7 	bl	800c5b4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bfc6:	4b1d      	ldr	r3, [pc, #116]	@ (800c03c <xTimerCreateTimerTask+0x84>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d021      	beq.n	800c012 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bfce:	2300      	movs	r3, #0
 800bfd0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bfd6:	1d3a      	adds	r2, r7, #4
 800bfd8:	f107 0108 	add.w	r1, r7, #8
 800bfdc:	f107 030c 	add.w	r3, r7, #12
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	f7f6 fcd7 	bl	8002994 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bfe6:	6879      	ldr	r1, [r7, #4]
 800bfe8:	68bb      	ldr	r3, [r7, #8]
 800bfea:	68fa      	ldr	r2, [r7, #12]
 800bfec:	9202      	str	r2, [sp, #8]
 800bfee:	9301      	str	r3, [sp, #4]
 800bff0:	2302      	movs	r3, #2
 800bff2:	9300      	str	r3, [sp, #0]
 800bff4:	2300      	movs	r3, #0
 800bff6:	460a      	mov	r2, r1
 800bff8:	4911      	ldr	r1, [pc, #68]	@ (800c040 <xTimerCreateTimerTask+0x88>)
 800bffa:	4812      	ldr	r0, [pc, #72]	@ (800c044 <xTimerCreateTimerTask+0x8c>)
 800bffc:	f7fe feb4 	bl	800ad68 <xTaskCreateStatic>
 800c000:	4603      	mov	r3, r0
 800c002:	4a11      	ldr	r2, [pc, #68]	@ (800c048 <xTimerCreateTimerTask+0x90>)
 800c004:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c006:	4b10      	ldr	r3, [pc, #64]	@ (800c048 <xTimerCreateTimerTask+0x90>)
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d001      	beq.n	800c012 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c00e:	2301      	movs	r3, #1
 800c010:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c012:	697b      	ldr	r3, [r7, #20]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d10b      	bne.n	800c030 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800c018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c01c:	f383 8811 	msr	BASEPRI, r3
 800c020:	f3bf 8f6f 	isb	sy
 800c024:	f3bf 8f4f 	dsb	sy
 800c028:	613b      	str	r3, [r7, #16]
}
 800c02a:	bf00      	nop
 800c02c:	bf00      	nop
 800c02e:	e7fd      	b.n	800c02c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c030:	697b      	ldr	r3, [r7, #20]
}
 800c032:	4618      	mov	r0, r3
 800c034:	3718      	adds	r7, #24
 800c036:	46bd      	mov	sp, r7
 800c038:	bd80      	pop	{r7, pc}
 800c03a:	bf00      	nop
 800c03c:	20002db4 	.word	0x20002db4
 800c040:	08010400 	.word	0x08010400
 800c044:	0800c185 	.word	0x0800c185
 800c048:	20002db8 	.word	0x20002db8

0800c04c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b08a      	sub	sp, #40	@ 0x28
 800c050:	af00      	add	r7, sp, #0
 800c052:	60f8      	str	r0, [r7, #12]
 800c054:	60b9      	str	r1, [r7, #8]
 800c056:	607a      	str	r2, [r7, #4]
 800c058:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c05a:	2300      	movs	r3, #0
 800c05c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d10b      	bne.n	800c07c <xTimerGenericCommand+0x30>
	__asm volatile
 800c064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c068:	f383 8811 	msr	BASEPRI, r3
 800c06c:	f3bf 8f6f 	isb	sy
 800c070:	f3bf 8f4f 	dsb	sy
 800c074:	623b      	str	r3, [r7, #32]
}
 800c076:	bf00      	nop
 800c078:	bf00      	nop
 800c07a:	e7fd      	b.n	800c078 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c07c:	4b19      	ldr	r3, [pc, #100]	@ (800c0e4 <xTimerGenericCommand+0x98>)
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d02a      	beq.n	800c0da <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c084:	68bb      	ldr	r3, [r7, #8]
 800c086:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c090:	68bb      	ldr	r3, [r7, #8]
 800c092:	2b05      	cmp	r3, #5
 800c094:	dc18      	bgt.n	800c0c8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c096:	f7ff fd69 	bl	800bb6c <xTaskGetSchedulerState>
 800c09a:	4603      	mov	r3, r0
 800c09c:	2b02      	cmp	r3, #2
 800c09e:	d109      	bne.n	800c0b4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c0a0:	4b10      	ldr	r3, [pc, #64]	@ (800c0e4 <xTimerGenericCommand+0x98>)
 800c0a2:	6818      	ldr	r0, [r3, #0]
 800c0a4:	f107 0114 	add.w	r1, r7, #20
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c0ac:	f7fe f812 	bl	800a0d4 <xQueueGenericSend>
 800c0b0:	6278      	str	r0, [r7, #36]	@ 0x24
 800c0b2:	e012      	b.n	800c0da <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c0b4:	4b0b      	ldr	r3, [pc, #44]	@ (800c0e4 <xTimerGenericCommand+0x98>)
 800c0b6:	6818      	ldr	r0, [r3, #0]
 800c0b8:	f107 0114 	add.w	r1, r7, #20
 800c0bc:	2300      	movs	r3, #0
 800c0be:	2200      	movs	r2, #0
 800c0c0:	f7fe f808 	bl	800a0d4 <xQueueGenericSend>
 800c0c4:	6278      	str	r0, [r7, #36]	@ 0x24
 800c0c6:	e008      	b.n	800c0da <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c0c8:	4b06      	ldr	r3, [pc, #24]	@ (800c0e4 <xTimerGenericCommand+0x98>)
 800c0ca:	6818      	ldr	r0, [r3, #0]
 800c0cc:	f107 0114 	add.w	r1, r7, #20
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	683a      	ldr	r2, [r7, #0]
 800c0d4:	f7fe f900 	bl	800a2d8 <xQueueGenericSendFromISR>
 800c0d8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c0da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c0dc:	4618      	mov	r0, r3
 800c0de:	3728      	adds	r7, #40	@ 0x28
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	bd80      	pop	{r7, pc}
 800c0e4:	20002db4 	.word	0x20002db4

0800c0e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b088      	sub	sp, #32
 800c0ec:	af02      	add	r7, sp, #8
 800c0ee:	6078      	str	r0, [r7, #4]
 800c0f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0f2:	4b23      	ldr	r3, [pc, #140]	@ (800c180 <prvProcessExpiredTimer+0x98>)
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	68db      	ldr	r3, [r3, #12]
 800c0f8:	68db      	ldr	r3, [r3, #12]
 800c0fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c0fc:	697b      	ldr	r3, [r7, #20]
 800c0fe:	3304      	adds	r3, #4
 800c100:	4618      	mov	r0, r3
 800c102:	f7fd fe77 	bl	8009df4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c106:	697b      	ldr	r3, [r7, #20]
 800c108:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c10c:	f003 0304 	and.w	r3, r3, #4
 800c110:	2b00      	cmp	r3, #0
 800c112:	d023      	beq.n	800c15c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c114:	697b      	ldr	r3, [r7, #20]
 800c116:	699a      	ldr	r2, [r3, #24]
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	18d1      	adds	r1, r2, r3
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	683a      	ldr	r2, [r7, #0]
 800c120:	6978      	ldr	r0, [r7, #20]
 800c122:	f000 f8d5 	bl	800c2d0 <prvInsertTimerInActiveList>
 800c126:	4603      	mov	r3, r0
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d020      	beq.n	800c16e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c12c:	2300      	movs	r3, #0
 800c12e:	9300      	str	r3, [sp, #0]
 800c130:	2300      	movs	r3, #0
 800c132:	687a      	ldr	r2, [r7, #4]
 800c134:	2100      	movs	r1, #0
 800c136:	6978      	ldr	r0, [r7, #20]
 800c138:	f7ff ff88 	bl	800c04c <xTimerGenericCommand>
 800c13c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c13e:	693b      	ldr	r3, [r7, #16]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d114      	bne.n	800c16e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800c144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c148:	f383 8811 	msr	BASEPRI, r3
 800c14c:	f3bf 8f6f 	isb	sy
 800c150:	f3bf 8f4f 	dsb	sy
 800c154:	60fb      	str	r3, [r7, #12]
}
 800c156:	bf00      	nop
 800c158:	bf00      	nop
 800c15a:	e7fd      	b.n	800c158 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c15c:	697b      	ldr	r3, [r7, #20]
 800c15e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c162:	f023 0301 	bic.w	r3, r3, #1
 800c166:	b2da      	uxtb	r2, r3
 800c168:	697b      	ldr	r3, [r7, #20]
 800c16a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c16e:	697b      	ldr	r3, [r7, #20]
 800c170:	6a1b      	ldr	r3, [r3, #32]
 800c172:	6978      	ldr	r0, [r7, #20]
 800c174:	4798      	blx	r3
}
 800c176:	bf00      	nop
 800c178:	3718      	adds	r7, #24
 800c17a:	46bd      	mov	sp, r7
 800c17c:	bd80      	pop	{r7, pc}
 800c17e:	bf00      	nop
 800c180:	20002dac 	.word	0x20002dac

0800c184 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b084      	sub	sp, #16
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c18c:	f107 0308 	add.w	r3, r7, #8
 800c190:	4618      	mov	r0, r3
 800c192:	f000 f859 	bl	800c248 <prvGetNextExpireTime>
 800c196:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c198:	68bb      	ldr	r3, [r7, #8]
 800c19a:	4619      	mov	r1, r3
 800c19c:	68f8      	ldr	r0, [r7, #12]
 800c19e:	f000 f805 	bl	800c1ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c1a2:	f000 f8d7 	bl	800c354 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c1a6:	bf00      	nop
 800c1a8:	e7f0      	b.n	800c18c <prvTimerTask+0x8>
	...

0800c1ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b084      	sub	sp, #16
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
 800c1b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c1b6:	f7ff f8cd 	bl	800b354 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c1ba:	f107 0308 	add.w	r3, r7, #8
 800c1be:	4618      	mov	r0, r3
 800c1c0:	f000 f866 	bl	800c290 <prvSampleTimeNow>
 800c1c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c1c6:	68bb      	ldr	r3, [r7, #8]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d130      	bne.n	800c22e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d10a      	bne.n	800c1e8 <prvProcessTimerOrBlockTask+0x3c>
 800c1d2:	687a      	ldr	r2, [r7, #4]
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	429a      	cmp	r2, r3
 800c1d8:	d806      	bhi.n	800c1e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c1da:	f7ff f8c9 	bl	800b370 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c1de:	68f9      	ldr	r1, [r7, #12]
 800c1e0:	6878      	ldr	r0, [r7, #4]
 800c1e2:	f7ff ff81 	bl	800c0e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c1e6:	e024      	b.n	800c232 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d008      	beq.n	800c200 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c1ee:	4b13      	ldr	r3, [pc, #76]	@ (800c23c <prvProcessTimerOrBlockTask+0x90>)
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d101      	bne.n	800c1fc <prvProcessTimerOrBlockTask+0x50>
 800c1f8:	2301      	movs	r3, #1
 800c1fa:	e000      	b.n	800c1fe <prvProcessTimerOrBlockTask+0x52>
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c200:	4b0f      	ldr	r3, [pc, #60]	@ (800c240 <prvProcessTimerOrBlockTask+0x94>)
 800c202:	6818      	ldr	r0, [r3, #0]
 800c204:	687a      	ldr	r2, [r7, #4]
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	1ad3      	subs	r3, r2, r3
 800c20a:	683a      	ldr	r2, [r7, #0]
 800c20c:	4619      	mov	r1, r3
 800c20e:	f7fe fd77 	bl	800ad00 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c212:	f7ff f8ad 	bl	800b370 <xTaskResumeAll>
 800c216:	4603      	mov	r3, r0
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d10a      	bne.n	800c232 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c21c:	4b09      	ldr	r3, [pc, #36]	@ (800c244 <prvProcessTimerOrBlockTask+0x98>)
 800c21e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c222:	601a      	str	r2, [r3, #0]
 800c224:	f3bf 8f4f 	dsb	sy
 800c228:	f3bf 8f6f 	isb	sy
}
 800c22c:	e001      	b.n	800c232 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c22e:	f7ff f89f 	bl	800b370 <xTaskResumeAll>
}
 800c232:	bf00      	nop
 800c234:	3710      	adds	r7, #16
 800c236:	46bd      	mov	sp, r7
 800c238:	bd80      	pop	{r7, pc}
 800c23a:	bf00      	nop
 800c23c:	20002db0 	.word	0x20002db0
 800c240:	20002db4 	.word	0x20002db4
 800c244:	e000ed04 	.word	0xe000ed04

0800c248 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c248:	b480      	push	{r7}
 800c24a:	b085      	sub	sp, #20
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c250:	4b0e      	ldr	r3, [pc, #56]	@ (800c28c <prvGetNextExpireTime+0x44>)
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d101      	bne.n	800c25e <prvGetNextExpireTime+0x16>
 800c25a:	2201      	movs	r2, #1
 800c25c:	e000      	b.n	800c260 <prvGetNextExpireTime+0x18>
 800c25e:	2200      	movs	r2, #0
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d105      	bne.n	800c278 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c26c:	4b07      	ldr	r3, [pc, #28]	@ (800c28c <prvGetNextExpireTime+0x44>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	68db      	ldr	r3, [r3, #12]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	60fb      	str	r3, [r7, #12]
 800c276:	e001      	b.n	800c27c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c278:	2300      	movs	r3, #0
 800c27a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c27c:	68fb      	ldr	r3, [r7, #12]
}
 800c27e:	4618      	mov	r0, r3
 800c280:	3714      	adds	r7, #20
 800c282:	46bd      	mov	sp, r7
 800c284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c288:	4770      	bx	lr
 800c28a:	bf00      	nop
 800c28c:	20002dac 	.word	0x20002dac

0800c290 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b084      	sub	sp, #16
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c298:	f7ff f908 	bl	800b4ac <xTaskGetTickCount>
 800c29c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c29e:	4b0b      	ldr	r3, [pc, #44]	@ (800c2cc <prvSampleTimeNow+0x3c>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	68fa      	ldr	r2, [r7, #12]
 800c2a4:	429a      	cmp	r2, r3
 800c2a6:	d205      	bcs.n	800c2b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c2a8:	f000 f91e 	bl	800c4e8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	2201      	movs	r2, #1
 800c2b0:	601a      	str	r2, [r3, #0]
 800c2b2:	e002      	b.n	800c2ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c2ba:	4a04      	ldr	r2, [pc, #16]	@ (800c2cc <prvSampleTimeNow+0x3c>)
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c2c0:	68fb      	ldr	r3, [r7, #12]
}
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	3710      	adds	r7, #16
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}
 800c2ca:	bf00      	nop
 800c2cc:	20002dbc 	.word	0x20002dbc

0800c2d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b086      	sub	sp, #24
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	60f8      	str	r0, [r7, #12]
 800c2d8:	60b9      	str	r1, [r7, #8]
 800c2da:	607a      	str	r2, [r7, #4]
 800c2dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c2de:	2300      	movs	r3, #0
 800c2e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	68ba      	ldr	r2, [r7, #8]
 800c2e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	68fa      	ldr	r2, [r7, #12]
 800c2ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c2ee:	68ba      	ldr	r2, [r7, #8]
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	429a      	cmp	r2, r3
 800c2f4:	d812      	bhi.n	800c31c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c2f6:	687a      	ldr	r2, [r7, #4]
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	1ad2      	subs	r2, r2, r3
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	699b      	ldr	r3, [r3, #24]
 800c300:	429a      	cmp	r2, r3
 800c302:	d302      	bcc.n	800c30a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c304:	2301      	movs	r3, #1
 800c306:	617b      	str	r3, [r7, #20]
 800c308:	e01b      	b.n	800c342 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c30a:	4b10      	ldr	r3, [pc, #64]	@ (800c34c <prvInsertTimerInActiveList+0x7c>)
 800c30c:	681a      	ldr	r2, [r3, #0]
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	3304      	adds	r3, #4
 800c312:	4619      	mov	r1, r3
 800c314:	4610      	mov	r0, r2
 800c316:	f7fd fd34 	bl	8009d82 <vListInsert>
 800c31a:	e012      	b.n	800c342 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c31c:	687a      	ldr	r2, [r7, #4]
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	429a      	cmp	r2, r3
 800c322:	d206      	bcs.n	800c332 <prvInsertTimerInActiveList+0x62>
 800c324:	68ba      	ldr	r2, [r7, #8]
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	429a      	cmp	r2, r3
 800c32a:	d302      	bcc.n	800c332 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c32c:	2301      	movs	r3, #1
 800c32e:	617b      	str	r3, [r7, #20]
 800c330:	e007      	b.n	800c342 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c332:	4b07      	ldr	r3, [pc, #28]	@ (800c350 <prvInsertTimerInActiveList+0x80>)
 800c334:	681a      	ldr	r2, [r3, #0]
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	3304      	adds	r3, #4
 800c33a:	4619      	mov	r1, r3
 800c33c:	4610      	mov	r0, r2
 800c33e:	f7fd fd20 	bl	8009d82 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c342:	697b      	ldr	r3, [r7, #20]
}
 800c344:	4618      	mov	r0, r3
 800c346:	3718      	adds	r7, #24
 800c348:	46bd      	mov	sp, r7
 800c34a:	bd80      	pop	{r7, pc}
 800c34c:	20002db0 	.word	0x20002db0
 800c350:	20002dac 	.word	0x20002dac

0800c354 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b08c      	sub	sp, #48	@ 0x30
 800c358:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c35a:	e0b2      	b.n	800c4c2 <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c35c:	68bb      	ldr	r3, [r7, #8]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	f2c0 80af 	blt.w	800c4c2 <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c364:	693b      	ldr	r3, [r7, #16]
 800c366:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c36a:	695b      	ldr	r3, [r3, #20]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d004      	beq.n	800c37a <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c372:	3304      	adds	r3, #4
 800c374:	4618      	mov	r0, r3
 800c376:	f7fd fd3d 	bl	8009df4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c37a:	1d3b      	adds	r3, r7, #4
 800c37c:	4618      	mov	r0, r3
 800c37e:	f7ff ff87 	bl	800c290 <prvSampleTimeNow>
 800c382:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800c384:	68bb      	ldr	r3, [r7, #8]
 800c386:	2b09      	cmp	r3, #9
 800c388:	f200 8098 	bhi.w	800c4bc <prvProcessReceivedCommands+0x168>
 800c38c:	a201      	add	r2, pc, #4	@ (adr r2, 800c394 <prvProcessReceivedCommands+0x40>)
 800c38e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c392:	bf00      	nop
 800c394:	0800c3bd 	.word	0x0800c3bd
 800c398:	0800c3bd 	.word	0x0800c3bd
 800c39c:	0800c3bd 	.word	0x0800c3bd
 800c3a0:	0800c433 	.word	0x0800c433
 800c3a4:	0800c447 	.word	0x0800c447
 800c3a8:	0800c493 	.word	0x0800c493
 800c3ac:	0800c3bd 	.word	0x0800c3bd
 800c3b0:	0800c3bd 	.word	0x0800c3bd
 800c3b4:	0800c433 	.word	0x0800c433
 800c3b8:	0800c447 	.word	0x0800c447
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c3bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c3c2:	f043 0301 	orr.w	r3, r3, #1
 800c3c6:	b2da      	uxtb	r2, r3
 800c3c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c3ce:	68fa      	ldr	r2, [r7, #12]
 800c3d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3d2:	699b      	ldr	r3, [r3, #24]
 800c3d4:	18d1      	adds	r1, r2, r3
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	6a3a      	ldr	r2, [r7, #32]
 800c3da:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c3dc:	f7ff ff78 	bl	800c2d0 <prvInsertTimerInActiveList>
 800c3e0:	4603      	mov	r3, r0
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d06c      	beq.n	800c4c0 <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c3e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3e8:	6a1b      	ldr	r3, [r3, #32]
 800c3ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c3ec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c3ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c3f4:	f003 0304 	and.w	r3, r3, #4
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d061      	beq.n	800c4c0 <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c3fc:	68fa      	ldr	r2, [r7, #12]
 800c3fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c400:	699b      	ldr	r3, [r3, #24]
 800c402:	441a      	add	r2, r3
 800c404:	2300      	movs	r3, #0
 800c406:	9300      	str	r3, [sp, #0]
 800c408:	2300      	movs	r3, #0
 800c40a:	2100      	movs	r1, #0
 800c40c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c40e:	f7ff fe1d 	bl	800c04c <xTimerGenericCommand>
 800c412:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800c414:	69fb      	ldr	r3, [r7, #28]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d152      	bne.n	800c4c0 <prvProcessReceivedCommands+0x16c>
	__asm volatile
 800c41a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c41e:	f383 8811 	msr	BASEPRI, r3
 800c422:	f3bf 8f6f 	isb	sy
 800c426:	f3bf 8f4f 	dsb	sy
 800c42a:	61bb      	str	r3, [r7, #24]
}
 800c42c:	bf00      	nop
 800c42e:	bf00      	nop
 800c430:	e7fd      	b.n	800c42e <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c434:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c438:	f023 0301 	bic.w	r3, r3, #1
 800c43c:	b2da      	uxtb	r2, r3
 800c43e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c440:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c444:	e03d      	b.n	800c4c2 <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c448:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c44c:	f043 0301 	orr.w	r3, r3, #1
 800c450:	b2da      	uxtb	r2, r3
 800c452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c454:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c458:	68fa      	ldr	r2, [r7, #12]
 800c45a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c45c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c45e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c460:	699b      	ldr	r3, [r3, #24]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d10b      	bne.n	800c47e <prvProcessReceivedCommands+0x12a>
	__asm volatile
 800c466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c46a:	f383 8811 	msr	BASEPRI, r3
 800c46e:	f3bf 8f6f 	isb	sy
 800c472:	f3bf 8f4f 	dsb	sy
 800c476:	617b      	str	r3, [r7, #20]
}
 800c478:	bf00      	nop
 800c47a:	bf00      	nop
 800c47c:	e7fd      	b.n	800c47a <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c47e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c480:	699a      	ldr	r2, [r3, #24]
 800c482:	6a3b      	ldr	r3, [r7, #32]
 800c484:	18d1      	adds	r1, r2, r3
 800c486:	6a3b      	ldr	r3, [r7, #32]
 800c488:	6a3a      	ldr	r2, [r7, #32]
 800c48a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c48c:	f7ff ff20 	bl	800c2d0 <prvInsertTimerInActiveList>
					break;
 800c490:	e017      	b.n	800c4c2 <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c494:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c498:	f003 0302 	and.w	r3, r3, #2
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d103      	bne.n	800c4a8 <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 800c4a0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c4a2:	f000 fbef 	bl	800cc84 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c4a6:	e00c      	b.n	800c4c2 <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c4a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c4ae:	f023 0301 	bic.w	r3, r3, #1
 800c4b2:	b2da      	uxtb	r2, r3
 800c4b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c4ba:	e002      	b.n	800c4c2 <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 800c4bc:	bf00      	nop
 800c4be:	e000      	b.n	800c4c2 <prvProcessReceivedCommands+0x16e>
					break;
 800c4c0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c4c2:	4b08      	ldr	r3, [pc, #32]	@ (800c4e4 <prvProcessReceivedCommands+0x190>)
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	f107 0108 	add.w	r1, r7, #8
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	f7fe f831 	bl	800a534 <xQueueReceive>
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	f47f af41 	bne.w	800c35c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c4da:	bf00      	nop
 800c4dc:	bf00      	nop
 800c4de:	3728      	adds	r7, #40	@ 0x28
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	bd80      	pop	{r7, pc}
 800c4e4:	20002db4 	.word	0x20002db4

0800c4e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b088      	sub	sp, #32
 800c4ec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c4ee:	e049      	b.n	800c584 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c4f0:	4b2e      	ldr	r3, [pc, #184]	@ (800c5ac <prvSwitchTimerLists+0xc4>)
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	68db      	ldr	r3, [r3, #12]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4fa:	4b2c      	ldr	r3, [pc, #176]	@ (800c5ac <prvSwitchTimerLists+0xc4>)
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	68db      	ldr	r3, [r3, #12]
 800c500:	68db      	ldr	r3, [r3, #12]
 800c502:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	3304      	adds	r3, #4
 800c508:	4618      	mov	r0, r3
 800c50a:	f7fd fc73 	bl	8009df4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	6a1b      	ldr	r3, [r3, #32]
 800c512:	68f8      	ldr	r0, [r7, #12]
 800c514:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c51c:	f003 0304 	and.w	r3, r3, #4
 800c520:	2b00      	cmp	r3, #0
 800c522:	d02f      	beq.n	800c584 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	699b      	ldr	r3, [r3, #24]
 800c528:	693a      	ldr	r2, [r7, #16]
 800c52a:	4413      	add	r3, r2
 800c52c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c52e:	68ba      	ldr	r2, [r7, #8]
 800c530:	693b      	ldr	r3, [r7, #16]
 800c532:	429a      	cmp	r2, r3
 800c534:	d90e      	bls.n	800c554 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	68ba      	ldr	r2, [r7, #8]
 800c53a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	68fa      	ldr	r2, [r7, #12]
 800c540:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c542:	4b1a      	ldr	r3, [pc, #104]	@ (800c5ac <prvSwitchTimerLists+0xc4>)
 800c544:	681a      	ldr	r2, [r3, #0]
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	3304      	adds	r3, #4
 800c54a:	4619      	mov	r1, r3
 800c54c:	4610      	mov	r0, r2
 800c54e:	f7fd fc18 	bl	8009d82 <vListInsert>
 800c552:	e017      	b.n	800c584 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c554:	2300      	movs	r3, #0
 800c556:	9300      	str	r3, [sp, #0]
 800c558:	2300      	movs	r3, #0
 800c55a:	693a      	ldr	r2, [r7, #16]
 800c55c:	2100      	movs	r1, #0
 800c55e:	68f8      	ldr	r0, [r7, #12]
 800c560:	f7ff fd74 	bl	800c04c <xTimerGenericCommand>
 800c564:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d10b      	bne.n	800c584 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c56c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c570:	f383 8811 	msr	BASEPRI, r3
 800c574:	f3bf 8f6f 	isb	sy
 800c578:	f3bf 8f4f 	dsb	sy
 800c57c:	603b      	str	r3, [r7, #0]
}
 800c57e:	bf00      	nop
 800c580:	bf00      	nop
 800c582:	e7fd      	b.n	800c580 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c584:	4b09      	ldr	r3, [pc, #36]	@ (800c5ac <prvSwitchTimerLists+0xc4>)
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d1b0      	bne.n	800c4f0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c58e:	4b07      	ldr	r3, [pc, #28]	@ (800c5ac <prvSwitchTimerLists+0xc4>)
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c594:	4b06      	ldr	r3, [pc, #24]	@ (800c5b0 <prvSwitchTimerLists+0xc8>)
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	4a04      	ldr	r2, [pc, #16]	@ (800c5ac <prvSwitchTimerLists+0xc4>)
 800c59a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c59c:	4a04      	ldr	r2, [pc, #16]	@ (800c5b0 <prvSwitchTimerLists+0xc8>)
 800c59e:	697b      	ldr	r3, [r7, #20]
 800c5a0:	6013      	str	r3, [r2, #0]
}
 800c5a2:	bf00      	nop
 800c5a4:	3718      	adds	r7, #24
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	bd80      	pop	{r7, pc}
 800c5aa:	bf00      	nop
 800c5ac:	20002dac 	.word	0x20002dac
 800c5b0:	20002db0 	.word	0x20002db0

0800c5b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b082      	sub	sp, #8
 800c5b8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c5ba:	f000 f96d 	bl	800c898 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c5be:	4b15      	ldr	r3, [pc, #84]	@ (800c614 <prvCheckForValidListAndQueue+0x60>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d120      	bne.n	800c608 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c5c6:	4814      	ldr	r0, [pc, #80]	@ (800c618 <prvCheckForValidListAndQueue+0x64>)
 800c5c8:	f7fd fb8a 	bl	8009ce0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c5cc:	4813      	ldr	r0, [pc, #76]	@ (800c61c <prvCheckForValidListAndQueue+0x68>)
 800c5ce:	f7fd fb87 	bl	8009ce0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c5d2:	4b13      	ldr	r3, [pc, #76]	@ (800c620 <prvCheckForValidListAndQueue+0x6c>)
 800c5d4:	4a10      	ldr	r2, [pc, #64]	@ (800c618 <prvCheckForValidListAndQueue+0x64>)
 800c5d6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c5d8:	4b12      	ldr	r3, [pc, #72]	@ (800c624 <prvCheckForValidListAndQueue+0x70>)
 800c5da:	4a10      	ldr	r2, [pc, #64]	@ (800c61c <prvCheckForValidListAndQueue+0x68>)
 800c5dc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c5de:	2300      	movs	r3, #0
 800c5e0:	9300      	str	r3, [sp, #0]
 800c5e2:	4b11      	ldr	r3, [pc, #68]	@ (800c628 <prvCheckForValidListAndQueue+0x74>)
 800c5e4:	4a11      	ldr	r2, [pc, #68]	@ (800c62c <prvCheckForValidListAndQueue+0x78>)
 800c5e6:	210c      	movs	r1, #12
 800c5e8:	200a      	movs	r0, #10
 800c5ea:	f7fd fc97 	bl	8009f1c <xQueueGenericCreateStatic>
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	4a08      	ldr	r2, [pc, #32]	@ (800c614 <prvCheckForValidListAndQueue+0x60>)
 800c5f2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c5f4:	4b07      	ldr	r3, [pc, #28]	@ (800c614 <prvCheckForValidListAndQueue+0x60>)
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d005      	beq.n	800c608 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c5fc:	4b05      	ldr	r3, [pc, #20]	@ (800c614 <prvCheckForValidListAndQueue+0x60>)
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	490b      	ldr	r1, [pc, #44]	@ (800c630 <prvCheckForValidListAndQueue+0x7c>)
 800c602:	4618      	mov	r0, r3
 800c604:	f7fe fb52 	bl	800acac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c608:	f000 f978 	bl	800c8fc <vPortExitCritical>
}
 800c60c:	bf00      	nop
 800c60e:	46bd      	mov	sp, r7
 800c610:	bd80      	pop	{r7, pc}
 800c612:	bf00      	nop
 800c614:	20002db4 	.word	0x20002db4
 800c618:	20002d84 	.word	0x20002d84
 800c61c:	20002d98 	.word	0x20002d98
 800c620:	20002dac 	.word	0x20002dac
 800c624:	20002db0 	.word	0x20002db0
 800c628:	20002e38 	.word	0x20002e38
 800c62c:	20002dc0 	.word	0x20002dc0
 800c630:	08010408 	.word	0x08010408

0800c634 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c634:	b480      	push	{r7}
 800c636:	b085      	sub	sp, #20
 800c638:	af00      	add	r7, sp, #0
 800c63a:	60f8      	str	r0, [r7, #12]
 800c63c:	60b9      	str	r1, [r7, #8]
 800c63e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	3b04      	subs	r3, #4
 800c644:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c64c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	3b04      	subs	r3, #4
 800c652:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c654:	68bb      	ldr	r3, [r7, #8]
 800c656:	f023 0201 	bic.w	r2, r3, #1
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	3b04      	subs	r3, #4
 800c662:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c664:	4a0c      	ldr	r2, [pc, #48]	@ (800c698 <pxPortInitialiseStack+0x64>)
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	3b14      	subs	r3, #20
 800c66e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c670:	687a      	ldr	r2, [r7, #4]
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	3b04      	subs	r3, #4
 800c67a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	f06f 0202 	mvn.w	r2, #2
 800c682:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	3b20      	subs	r3, #32
 800c688:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c68a:	68fb      	ldr	r3, [r7, #12]
}
 800c68c:	4618      	mov	r0, r3
 800c68e:	3714      	adds	r7, #20
 800c690:	46bd      	mov	sp, r7
 800c692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c696:	4770      	bx	lr
 800c698:	0800c69d 	.word	0x0800c69d

0800c69c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c69c:	b480      	push	{r7}
 800c69e:	b085      	sub	sp, #20
 800c6a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c6a6:	4b13      	ldr	r3, [pc, #76]	@ (800c6f4 <prvTaskExitError+0x58>)
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6ae:	d00b      	beq.n	800c6c8 <prvTaskExitError+0x2c>
	__asm volatile
 800c6b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6b4:	f383 8811 	msr	BASEPRI, r3
 800c6b8:	f3bf 8f6f 	isb	sy
 800c6bc:	f3bf 8f4f 	dsb	sy
 800c6c0:	60fb      	str	r3, [r7, #12]
}
 800c6c2:	bf00      	nop
 800c6c4:	bf00      	nop
 800c6c6:	e7fd      	b.n	800c6c4 <prvTaskExitError+0x28>
	__asm volatile
 800c6c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6cc:	f383 8811 	msr	BASEPRI, r3
 800c6d0:	f3bf 8f6f 	isb	sy
 800c6d4:	f3bf 8f4f 	dsb	sy
 800c6d8:	60bb      	str	r3, [r7, #8]
}
 800c6da:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c6dc:	bf00      	nop
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d0fc      	beq.n	800c6de <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c6e4:	bf00      	nop
 800c6e6:	bf00      	nop
 800c6e8:	3714      	adds	r7, #20
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f0:	4770      	bx	lr
 800c6f2:	bf00      	nop
 800c6f4:	200001c8 	.word	0x200001c8
	...

0800c700 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c700:	4b07      	ldr	r3, [pc, #28]	@ (800c720 <pxCurrentTCBConst2>)
 800c702:	6819      	ldr	r1, [r3, #0]
 800c704:	6808      	ldr	r0, [r1, #0]
 800c706:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c70a:	f380 8809 	msr	PSP, r0
 800c70e:	f3bf 8f6f 	isb	sy
 800c712:	f04f 0000 	mov.w	r0, #0
 800c716:	f380 8811 	msr	BASEPRI, r0
 800c71a:	4770      	bx	lr
 800c71c:	f3af 8000 	nop.w

0800c720 <pxCurrentTCBConst2>:
 800c720:	20002c50 	.word	0x20002c50
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c724:	bf00      	nop
 800c726:	bf00      	nop

0800c728 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c728:	4808      	ldr	r0, [pc, #32]	@ (800c74c <prvPortStartFirstTask+0x24>)
 800c72a:	6800      	ldr	r0, [r0, #0]
 800c72c:	6800      	ldr	r0, [r0, #0]
 800c72e:	f380 8808 	msr	MSP, r0
 800c732:	f04f 0000 	mov.w	r0, #0
 800c736:	f380 8814 	msr	CONTROL, r0
 800c73a:	b662      	cpsie	i
 800c73c:	b661      	cpsie	f
 800c73e:	f3bf 8f4f 	dsb	sy
 800c742:	f3bf 8f6f 	isb	sy
 800c746:	df00      	svc	0
 800c748:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c74a:	bf00      	nop
 800c74c:	e000ed08 	.word	0xe000ed08

0800c750 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b086      	sub	sp, #24
 800c754:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c756:	4b47      	ldr	r3, [pc, #284]	@ (800c874 <xPortStartScheduler+0x124>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	4a47      	ldr	r2, [pc, #284]	@ (800c878 <xPortStartScheduler+0x128>)
 800c75c:	4293      	cmp	r3, r2
 800c75e:	d10b      	bne.n	800c778 <xPortStartScheduler+0x28>
	__asm volatile
 800c760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c764:	f383 8811 	msr	BASEPRI, r3
 800c768:	f3bf 8f6f 	isb	sy
 800c76c:	f3bf 8f4f 	dsb	sy
 800c770:	613b      	str	r3, [r7, #16]
}
 800c772:	bf00      	nop
 800c774:	bf00      	nop
 800c776:	e7fd      	b.n	800c774 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c778:	4b3e      	ldr	r3, [pc, #248]	@ (800c874 <xPortStartScheduler+0x124>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	4a3f      	ldr	r2, [pc, #252]	@ (800c87c <xPortStartScheduler+0x12c>)
 800c77e:	4293      	cmp	r3, r2
 800c780:	d10b      	bne.n	800c79a <xPortStartScheduler+0x4a>
	__asm volatile
 800c782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c786:	f383 8811 	msr	BASEPRI, r3
 800c78a:	f3bf 8f6f 	isb	sy
 800c78e:	f3bf 8f4f 	dsb	sy
 800c792:	60fb      	str	r3, [r7, #12]
}
 800c794:	bf00      	nop
 800c796:	bf00      	nop
 800c798:	e7fd      	b.n	800c796 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c79a:	4b39      	ldr	r3, [pc, #228]	@ (800c880 <xPortStartScheduler+0x130>)
 800c79c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c79e:	697b      	ldr	r3, [r7, #20]
 800c7a0:	781b      	ldrb	r3, [r3, #0]
 800c7a2:	b2db      	uxtb	r3, r3
 800c7a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c7a6:	697b      	ldr	r3, [r7, #20]
 800c7a8:	22ff      	movs	r2, #255	@ 0xff
 800c7aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c7ac:	697b      	ldr	r3, [r7, #20]
 800c7ae:	781b      	ldrb	r3, [r3, #0]
 800c7b0:	b2db      	uxtb	r3, r3
 800c7b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c7b4:	78fb      	ldrb	r3, [r7, #3]
 800c7b6:	b2db      	uxtb	r3, r3
 800c7b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c7bc:	b2da      	uxtb	r2, r3
 800c7be:	4b31      	ldr	r3, [pc, #196]	@ (800c884 <xPortStartScheduler+0x134>)
 800c7c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c7c2:	4b31      	ldr	r3, [pc, #196]	@ (800c888 <xPortStartScheduler+0x138>)
 800c7c4:	2207      	movs	r2, #7
 800c7c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c7c8:	e009      	b.n	800c7de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c7ca:	4b2f      	ldr	r3, [pc, #188]	@ (800c888 <xPortStartScheduler+0x138>)
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	3b01      	subs	r3, #1
 800c7d0:	4a2d      	ldr	r2, [pc, #180]	@ (800c888 <xPortStartScheduler+0x138>)
 800c7d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c7d4:	78fb      	ldrb	r3, [r7, #3]
 800c7d6:	b2db      	uxtb	r3, r3
 800c7d8:	005b      	lsls	r3, r3, #1
 800c7da:	b2db      	uxtb	r3, r3
 800c7dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c7de:	78fb      	ldrb	r3, [r7, #3]
 800c7e0:	b2db      	uxtb	r3, r3
 800c7e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c7e6:	2b80      	cmp	r3, #128	@ 0x80
 800c7e8:	d0ef      	beq.n	800c7ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c7ea:	4b27      	ldr	r3, [pc, #156]	@ (800c888 <xPortStartScheduler+0x138>)
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	f1c3 0307 	rsb	r3, r3, #7
 800c7f2:	2b04      	cmp	r3, #4
 800c7f4:	d00b      	beq.n	800c80e <xPortStartScheduler+0xbe>
	__asm volatile
 800c7f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7fa:	f383 8811 	msr	BASEPRI, r3
 800c7fe:	f3bf 8f6f 	isb	sy
 800c802:	f3bf 8f4f 	dsb	sy
 800c806:	60bb      	str	r3, [r7, #8]
}
 800c808:	bf00      	nop
 800c80a:	bf00      	nop
 800c80c:	e7fd      	b.n	800c80a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c80e:	4b1e      	ldr	r3, [pc, #120]	@ (800c888 <xPortStartScheduler+0x138>)
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	021b      	lsls	r3, r3, #8
 800c814:	4a1c      	ldr	r2, [pc, #112]	@ (800c888 <xPortStartScheduler+0x138>)
 800c816:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c818:	4b1b      	ldr	r3, [pc, #108]	@ (800c888 <xPortStartScheduler+0x138>)
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c820:	4a19      	ldr	r2, [pc, #100]	@ (800c888 <xPortStartScheduler+0x138>)
 800c822:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	b2da      	uxtb	r2, r3
 800c828:	697b      	ldr	r3, [r7, #20]
 800c82a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c82c:	4b17      	ldr	r3, [pc, #92]	@ (800c88c <xPortStartScheduler+0x13c>)
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	4a16      	ldr	r2, [pc, #88]	@ (800c88c <xPortStartScheduler+0x13c>)
 800c832:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c836:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c838:	4b14      	ldr	r3, [pc, #80]	@ (800c88c <xPortStartScheduler+0x13c>)
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	4a13      	ldr	r2, [pc, #76]	@ (800c88c <xPortStartScheduler+0x13c>)
 800c83e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c842:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c844:	f000 f8da 	bl	800c9fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c848:	4b11      	ldr	r3, [pc, #68]	@ (800c890 <xPortStartScheduler+0x140>)
 800c84a:	2200      	movs	r2, #0
 800c84c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c84e:	f000 f8f9 	bl	800ca44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c852:	4b10      	ldr	r3, [pc, #64]	@ (800c894 <xPortStartScheduler+0x144>)
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	4a0f      	ldr	r2, [pc, #60]	@ (800c894 <xPortStartScheduler+0x144>)
 800c858:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c85c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c85e:	f7ff ff63 	bl	800c728 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c862:	f7fe feed 	bl	800b640 <vTaskSwitchContext>
	prvTaskExitError();
 800c866:	f7ff ff19 	bl	800c69c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c86a:	2300      	movs	r3, #0
}
 800c86c:	4618      	mov	r0, r3
 800c86e:	3718      	adds	r7, #24
 800c870:	46bd      	mov	sp, r7
 800c872:	bd80      	pop	{r7, pc}
 800c874:	e000ed00 	.word	0xe000ed00
 800c878:	410fc271 	.word	0x410fc271
 800c87c:	410fc270 	.word	0x410fc270
 800c880:	e000e400 	.word	0xe000e400
 800c884:	20002e88 	.word	0x20002e88
 800c888:	20002e8c 	.word	0x20002e8c
 800c88c:	e000ed20 	.word	0xe000ed20
 800c890:	200001c8 	.word	0x200001c8
 800c894:	e000ef34 	.word	0xe000ef34

0800c898 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c898:	b480      	push	{r7}
 800c89a:	b083      	sub	sp, #12
 800c89c:	af00      	add	r7, sp, #0
	__asm volatile
 800c89e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8a2:	f383 8811 	msr	BASEPRI, r3
 800c8a6:	f3bf 8f6f 	isb	sy
 800c8aa:	f3bf 8f4f 	dsb	sy
 800c8ae:	607b      	str	r3, [r7, #4]
}
 800c8b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c8b2:	4b10      	ldr	r3, [pc, #64]	@ (800c8f4 <vPortEnterCritical+0x5c>)
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	3301      	adds	r3, #1
 800c8b8:	4a0e      	ldr	r2, [pc, #56]	@ (800c8f4 <vPortEnterCritical+0x5c>)
 800c8ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c8bc:	4b0d      	ldr	r3, [pc, #52]	@ (800c8f4 <vPortEnterCritical+0x5c>)
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	2b01      	cmp	r3, #1
 800c8c2:	d110      	bne.n	800c8e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c8c4:	4b0c      	ldr	r3, [pc, #48]	@ (800c8f8 <vPortEnterCritical+0x60>)
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	b2db      	uxtb	r3, r3
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d00b      	beq.n	800c8e6 <vPortEnterCritical+0x4e>
	__asm volatile
 800c8ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8d2:	f383 8811 	msr	BASEPRI, r3
 800c8d6:	f3bf 8f6f 	isb	sy
 800c8da:	f3bf 8f4f 	dsb	sy
 800c8de:	603b      	str	r3, [r7, #0]
}
 800c8e0:	bf00      	nop
 800c8e2:	bf00      	nop
 800c8e4:	e7fd      	b.n	800c8e2 <vPortEnterCritical+0x4a>
	}
}
 800c8e6:	bf00      	nop
 800c8e8:	370c      	adds	r7, #12
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f0:	4770      	bx	lr
 800c8f2:	bf00      	nop
 800c8f4:	200001c8 	.word	0x200001c8
 800c8f8:	e000ed04 	.word	0xe000ed04

0800c8fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c8fc:	b480      	push	{r7}
 800c8fe:	b083      	sub	sp, #12
 800c900:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c902:	4b12      	ldr	r3, [pc, #72]	@ (800c94c <vPortExitCritical+0x50>)
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d10b      	bne.n	800c922 <vPortExitCritical+0x26>
	__asm volatile
 800c90a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c90e:	f383 8811 	msr	BASEPRI, r3
 800c912:	f3bf 8f6f 	isb	sy
 800c916:	f3bf 8f4f 	dsb	sy
 800c91a:	607b      	str	r3, [r7, #4]
}
 800c91c:	bf00      	nop
 800c91e:	bf00      	nop
 800c920:	e7fd      	b.n	800c91e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c922:	4b0a      	ldr	r3, [pc, #40]	@ (800c94c <vPortExitCritical+0x50>)
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	3b01      	subs	r3, #1
 800c928:	4a08      	ldr	r2, [pc, #32]	@ (800c94c <vPortExitCritical+0x50>)
 800c92a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c92c:	4b07      	ldr	r3, [pc, #28]	@ (800c94c <vPortExitCritical+0x50>)
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d105      	bne.n	800c940 <vPortExitCritical+0x44>
 800c934:	2300      	movs	r3, #0
 800c936:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	f383 8811 	msr	BASEPRI, r3
}
 800c93e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c940:	bf00      	nop
 800c942:	370c      	adds	r7, #12
 800c944:	46bd      	mov	sp, r7
 800c946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94a:	4770      	bx	lr
 800c94c:	200001c8 	.word	0x200001c8

0800c950 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c950:	f3ef 8009 	mrs	r0, PSP
 800c954:	f3bf 8f6f 	isb	sy
 800c958:	4b15      	ldr	r3, [pc, #84]	@ (800c9b0 <pxCurrentTCBConst>)
 800c95a:	681a      	ldr	r2, [r3, #0]
 800c95c:	f01e 0f10 	tst.w	lr, #16
 800c960:	bf08      	it	eq
 800c962:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c966:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c96a:	6010      	str	r0, [r2, #0]
 800c96c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c970:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c974:	f380 8811 	msr	BASEPRI, r0
 800c978:	f3bf 8f4f 	dsb	sy
 800c97c:	f3bf 8f6f 	isb	sy
 800c980:	f7fe fe5e 	bl	800b640 <vTaskSwitchContext>
 800c984:	f04f 0000 	mov.w	r0, #0
 800c988:	f380 8811 	msr	BASEPRI, r0
 800c98c:	bc09      	pop	{r0, r3}
 800c98e:	6819      	ldr	r1, [r3, #0]
 800c990:	6808      	ldr	r0, [r1, #0]
 800c992:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c996:	f01e 0f10 	tst.w	lr, #16
 800c99a:	bf08      	it	eq
 800c99c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c9a0:	f380 8809 	msr	PSP, r0
 800c9a4:	f3bf 8f6f 	isb	sy
 800c9a8:	4770      	bx	lr
 800c9aa:	bf00      	nop
 800c9ac:	f3af 8000 	nop.w

0800c9b0 <pxCurrentTCBConst>:
 800c9b0:	20002c50 	.word	0x20002c50
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c9b4:	bf00      	nop
 800c9b6:	bf00      	nop

0800c9b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b082      	sub	sp, #8
 800c9bc:	af00      	add	r7, sp, #0
	__asm volatile
 800c9be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9c2:	f383 8811 	msr	BASEPRI, r3
 800c9c6:	f3bf 8f6f 	isb	sy
 800c9ca:	f3bf 8f4f 	dsb	sy
 800c9ce:	607b      	str	r3, [r7, #4]
}
 800c9d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c9d2:	f7fe fd7b 	bl	800b4cc <xTaskIncrementTick>
 800c9d6:	4603      	mov	r3, r0
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d003      	beq.n	800c9e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c9dc:	4b06      	ldr	r3, [pc, #24]	@ (800c9f8 <SysTick_Handler+0x40>)
 800c9de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c9e2:	601a      	str	r2, [r3, #0]
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c9e8:	683b      	ldr	r3, [r7, #0]
 800c9ea:	f383 8811 	msr	BASEPRI, r3
}
 800c9ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c9f0:	bf00      	nop
 800c9f2:	3708      	adds	r7, #8
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	bd80      	pop	{r7, pc}
 800c9f8:	e000ed04 	.word	0xe000ed04

0800c9fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c9fc:	b480      	push	{r7}
 800c9fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ca00:	4b0b      	ldr	r3, [pc, #44]	@ (800ca30 <vPortSetupTimerInterrupt+0x34>)
 800ca02:	2200      	movs	r2, #0
 800ca04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ca06:	4b0b      	ldr	r3, [pc, #44]	@ (800ca34 <vPortSetupTimerInterrupt+0x38>)
 800ca08:	2200      	movs	r2, #0
 800ca0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ca0c:	4b0a      	ldr	r3, [pc, #40]	@ (800ca38 <vPortSetupTimerInterrupt+0x3c>)
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	4a0a      	ldr	r2, [pc, #40]	@ (800ca3c <vPortSetupTimerInterrupt+0x40>)
 800ca12:	fba2 2303 	umull	r2, r3, r2, r3
 800ca16:	099b      	lsrs	r3, r3, #6
 800ca18:	4a09      	ldr	r2, [pc, #36]	@ (800ca40 <vPortSetupTimerInterrupt+0x44>)
 800ca1a:	3b01      	subs	r3, #1
 800ca1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ca1e:	4b04      	ldr	r3, [pc, #16]	@ (800ca30 <vPortSetupTimerInterrupt+0x34>)
 800ca20:	2207      	movs	r2, #7
 800ca22:	601a      	str	r2, [r3, #0]
}
 800ca24:	bf00      	nop
 800ca26:	46bd      	mov	sp, r7
 800ca28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2c:	4770      	bx	lr
 800ca2e:	bf00      	nop
 800ca30:	e000e010 	.word	0xe000e010
 800ca34:	e000e018 	.word	0xe000e018
 800ca38:	200001bc 	.word	0x200001bc
 800ca3c:	10624dd3 	.word	0x10624dd3
 800ca40:	e000e014 	.word	0xe000e014

0800ca44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ca44:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ca54 <vPortEnableVFP+0x10>
 800ca48:	6801      	ldr	r1, [r0, #0]
 800ca4a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ca4e:	6001      	str	r1, [r0, #0]
 800ca50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ca52:	bf00      	nop
 800ca54:	e000ed88 	.word	0xe000ed88

0800ca58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ca58:	b480      	push	{r7}
 800ca5a:	b085      	sub	sp, #20
 800ca5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ca5e:	f3ef 8305 	mrs	r3, IPSR
 800ca62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	2b0f      	cmp	r3, #15
 800ca68:	d915      	bls.n	800ca96 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ca6a:	4a18      	ldr	r2, [pc, #96]	@ (800cacc <vPortValidateInterruptPriority+0x74>)
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	4413      	add	r3, r2
 800ca70:	781b      	ldrb	r3, [r3, #0]
 800ca72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ca74:	4b16      	ldr	r3, [pc, #88]	@ (800cad0 <vPortValidateInterruptPriority+0x78>)
 800ca76:	781b      	ldrb	r3, [r3, #0]
 800ca78:	7afa      	ldrb	r2, [r7, #11]
 800ca7a:	429a      	cmp	r2, r3
 800ca7c:	d20b      	bcs.n	800ca96 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ca7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca82:	f383 8811 	msr	BASEPRI, r3
 800ca86:	f3bf 8f6f 	isb	sy
 800ca8a:	f3bf 8f4f 	dsb	sy
 800ca8e:	607b      	str	r3, [r7, #4]
}
 800ca90:	bf00      	nop
 800ca92:	bf00      	nop
 800ca94:	e7fd      	b.n	800ca92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ca96:	4b0f      	ldr	r3, [pc, #60]	@ (800cad4 <vPortValidateInterruptPriority+0x7c>)
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ca9e:	4b0e      	ldr	r3, [pc, #56]	@ (800cad8 <vPortValidateInterruptPriority+0x80>)
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	429a      	cmp	r2, r3
 800caa4:	d90b      	bls.n	800cabe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800caa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caaa:	f383 8811 	msr	BASEPRI, r3
 800caae:	f3bf 8f6f 	isb	sy
 800cab2:	f3bf 8f4f 	dsb	sy
 800cab6:	603b      	str	r3, [r7, #0]
}
 800cab8:	bf00      	nop
 800caba:	bf00      	nop
 800cabc:	e7fd      	b.n	800caba <vPortValidateInterruptPriority+0x62>
	}
 800cabe:	bf00      	nop
 800cac0:	3714      	adds	r7, #20
 800cac2:	46bd      	mov	sp, r7
 800cac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac8:	4770      	bx	lr
 800caca:	bf00      	nop
 800cacc:	e000e3f0 	.word	0xe000e3f0
 800cad0:	20002e88 	.word	0x20002e88
 800cad4:	e000ed0c 	.word	0xe000ed0c
 800cad8:	20002e8c 	.word	0x20002e8c

0800cadc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b08a      	sub	sp, #40	@ 0x28
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cae4:	2300      	movs	r3, #0
 800cae6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cae8:	f7fe fc34 	bl	800b354 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800caec:	4b5f      	ldr	r3, [pc, #380]	@ (800cc6c <pvPortMalloc+0x190>)
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d101      	bne.n	800caf8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800caf4:	f000 f92a 	bl	800cd4c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800caf8:	4b5d      	ldr	r3, [pc, #372]	@ (800cc70 <pvPortMalloc+0x194>)
 800cafa:	681a      	ldr	r2, [r3, #0]
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	4013      	ands	r3, r2
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	f040 8095 	bne.w	800cc30 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d01e      	beq.n	800cb4a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800cb0c:	2208      	movs	r2, #8
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	4413      	add	r3, r2
 800cb12:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	f003 0307 	and.w	r3, r3, #7
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d015      	beq.n	800cb4a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	f023 0307 	bic.w	r3, r3, #7
 800cb24:	3308      	adds	r3, #8
 800cb26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	f003 0307 	and.w	r3, r3, #7
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d00b      	beq.n	800cb4a <pvPortMalloc+0x6e>
	__asm volatile
 800cb32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb36:	f383 8811 	msr	BASEPRI, r3
 800cb3a:	f3bf 8f6f 	isb	sy
 800cb3e:	f3bf 8f4f 	dsb	sy
 800cb42:	617b      	str	r3, [r7, #20]
}
 800cb44:	bf00      	nop
 800cb46:	bf00      	nop
 800cb48:	e7fd      	b.n	800cb46 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d06f      	beq.n	800cc30 <pvPortMalloc+0x154>
 800cb50:	4b48      	ldr	r3, [pc, #288]	@ (800cc74 <pvPortMalloc+0x198>)
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	687a      	ldr	r2, [r7, #4]
 800cb56:	429a      	cmp	r2, r3
 800cb58:	d86a      	bhi.n	800cc30 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cb5a:	4b47      	ldr	r3, [pc, #284]	@ (800cc78 <pvPortMalloc+0x19c>)
 800cb5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cb5e:	4b46      	ldr	r3, [pc, #280]	@ (800cc78 <pvPortMalloc+0x19c>)
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cb64:	e004      	b.n	800cb70 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800cb66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cb6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cb70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb72:	685b      	ldr	r3, [r3, #4]
 800cb74:	687a      	ldr	r2, [r7, #4]
 800cb76:	429a      	cmp	r2, r3
 800cb78:	d903      	bls.n	800cb82 <pvPortMalloc+0xa6>
 800cb7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d1f1      	bne.n	800cb66 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cb82:	4b3a      	ldr	r3, [pc, #232]	@ (800cc6c <pvPortMalloc+0x190>)
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cb88:	429a      	cmp	r2, r3
 800cb8a:	d051      	beq.n	800cc30 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cb8c:	6a3b      	ldr	r3, [r7, #32]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	2208      	movs	r2, #8
 800cb92:	4413      	add	r3, r2
 800cb94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cb96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb98:	681a      	ldr	r2, [r3, #0]
 800cb9a:	6a3b      	ldr	r3, [r7, #32]
 800cb9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cb9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cba0:	685a      	ldr	r2, [r3, #4]
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	1ad2      	subs	r2, r2, r3
 800cba6:	2308      	movs	r3, #8
 800cba8:	005b      	lsls	r3, r3, #1
 800cbaa:	429a      	cmp	r2, r3
 800cbac:	d920      	bls.n	800cbf0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cbae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	4413      	add	r3, r2
 800cbb4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cbb6:	69bb      	ldr	r3, [r7, #24]
 800cbb8:	f003 0307 	and.w	r3, r3, #7
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d00b      	beq.n	800cbd8 <pvPortMalloc+0xfc>
	__asm volatile
 800cbc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbc4:	f383 8811 	msr	BASEPRI, r3
 800cbc8:	f3bf 8f6f 	isb	sy
 800cbcc:	f3bf 8f4f 	dsb	sy
 800cbd0:	613b      	str	r3, [r7, #16]
}
 800cbd2:	bf00      	nop
 800cbd4:	bf00      	nop
 800cbd6:	e7fd      	b.n	800cbd4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cbd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbda:	685a      	ldr	r2, [r3, #4]
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	1ad2      	subs	r2, r2, r3
 800cbe0:	69bb      	ldr	r3, [r7, #24]
 800cbe2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cbe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbe6:	687a      	ldr	r2, [r7, #4]
 800cbe8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cbea:	69b8      	ldr	r0, [r7, #24]
 800cbec:	f000 f910 	bl	800ce10 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cbf0:	4b20      	ldr	r3, [pc, #128]	@ (800cc74 <pvPortMalloc+0x198>)
 800cbf2:	681a      	ldr	r2, [r3, #0]
 800cbf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbf6:	685b      	ldr	r3, [r3, #4]
 800cbf8:	1ad3      	subs	r3, r2, r3
 800cbfa:	4a1e      	ldr	r2, [pc, #120]	@ (800cc74 <pvPortMalloc+0x198>)
 800cbfc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cbfe:	4b1d      	ldr	r3, [pc, #116]	@ (800cc74 <pvPortMalloc+0x198>)
 800cc00:	681a      	ldr	r2, [r3, #0]
 800cc02:	4b1e      	ldr	r3, [pc, #120]	@ (800cc7c <pvPortMalloc+0x1a0>)
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	429a      	cmp	r2, r3
 800cc08:	d203      	bcs.n	800cc12 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cc0a:	4b1a      	ldr	r3, [pc, #104]	@ (800cc74 <pvPortMalloc+0x198>)
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	4a1b      	ldr	r2, [pc, #108]	@ (800cc7c <pvPortMalloc+0x1a0>)
 800cc10:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cc12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc14:	685a      	ldr	r2, [r3, #4]
 800cc16:	4b16      	ldr	r3, [pc, #88]	@ (800cc70 <pvPortMalloc+0x194>)
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	431a      	orrs	r2, r3
 800cc1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc1e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cc20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc22:	2200      	movs	r2, #0
 800cc24:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cc26:	4b16      	ldr	r3, [pc, #88]	@ (800cc80 <pvPortMalloc+0x1a4>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	3301      	adds	r3, #1
 800cc2c:	4a14      	ldr	r2, [pc, #80]	@ (800cc80 <pvPortMalloc+0x1a4>)
 800cc2e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cc30:	f7fe fb9e 	bl	800b370 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800cc34:	69fb      	ldr	r3, [r7, #28]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d101      	bne.n	800cc3e <pvPortMalloc+0x162>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800cc3a:	f7f5 fe89 	bl	8002950 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cc3e:	69fb      	ldr	r3, [r7, #28]
 800cc40:	f003 0307 	and.w	r3, r3, #7
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d00b      	beq.n	800cc60 <pvPortMalloc+0x184>
	__asm volatile
 800cc48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc4c:	f383 8811 	msr	BASEPRI, r3
 800cc50:	f3bf 8f6f 	isb	sy
 800cc54:	f3bf 8f4f 	dsb	sy
 800cc58:	60fb      	str	r3, [r7, #12]
}
 800cc5a:	bf00      	nop
 800cc5c:	bf00      	nop
 800cc5e:	e7fd      	b.n	800cc5c <pvPortMalloc+0x180>
	return pvReturn;
 800cc60:	69fb      	ldr	r3, [r7, #28]
}
 800cc62:	4618      	mov	r0, r3
 800cc64:	3728      	adds	r7, #40	@ 0x28
 800cc66:	46bd      	mov	sp, r7
 800cc68:	bd80      	pop	{r7, pc}
 800cc6a:	bf00      	nop
 800cc6c:	20012e98 	.word	0x20012e98
 800cc70:	20012eac 	.word	0x20012eac
 800cc74:	20012e9c 	.word	0x20012e9c
 800cc78:	20012e90 	.word	0x20012e90
 800cc7c:	20012ea0 	.word	0x20012ea0
 800cc80:	20012ea4 	.word	0x20012ea4

0800cc84 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b086      	sub	sp, #24
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d04f      	beq.n	800cd36 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cc96:	2308      	movs	r3, #8
 800cc98:	425b      	negs	r3, r3
 800cc9a:	697a      	ldr	r2, [r7, #20]
 800cc9c:	4413      	add	r3, r2
 800cc9e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cca0:	697b      	ldr	r3, [r7, #20]
 800cca2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cca4:	693b      	ldr	r3, [r7, #16]
 800cca6:	685a      	ldr	r2, [r3, #4]
 800cca8:	4b25      	ldr	r3, [pc, #148]	@ (800cd40 <vPortFree+0xbc>)
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	4013      	ands	r3, r2
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d10b      	bne.n	800ccca <vPortFree+0x46>
	__asm volatile
 800ccb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccb6:	f383 8811 	msr	BASEPRI, r3
 800ccba:	f3bf 8f6f 	isb	sy
 800ccbe:	f3bf 8f4f 	dsb	sy
 800ccc2:	60fb      	str	r3, [r7, #12]
}
 800ccc4:	bf00      	nop
 800ccc6:	bf00      	nop
 800ccc8:	e7fd      	b.n	800ccc6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ccca:	693b      	ldr	r3, [r7, #16]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d00b      	beq.n	800ccea <vPortFree+0x66>
	__asm volatile
 800ccd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccd6:	f383 8811 	msr	BASEPRI, r3
 800ccda:	f3bf 8f6f 	isb	sy
 800ccde:	f3bf 8f4f 	dsb	sy
 800cce2:	60bb      	str	r3, [r7, #8]
}
 800cce4:	bf00      	nop
 800cce6:	bf00      	nop
 800cce8:	e7fd      	b.n	800cce6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ccea:	693b      	ldr	r3, [r7, #16]
 800ccec:	685a      	ldr	r2, [r3, #4]
 800ccee:	4b14      	ldr	r3, [pc, #80]	@ (800cd40 <vPortFree+0xbc>)
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	4013      	ands	r3, r2
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d01e      	beq.n	800cd36 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ccf8:	693b      	ldr	r3, [r7, #16]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d11a      	bne.n	800cd36 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cd00:	693b      	ldr	r3, [r7, #16]
 800cd02:	685a      	ldr	r2, [r3, #4]
 800cd04:	4b0e      	ldr	r3, [pc, #56]	@ (800cd40 <vPortFree+0xbc>)
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	43db      	mvns	r3, r3
 800cd0a:	401a      	ands	r2, r3
 800cd0c:	693b      	ldr	r3, [r7, #16]
 800cd0e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cd10:	f7fe fb20 	bl	800b354 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cd14:	693b      	ldr	r3, [r7, #16]
 800cd16:	685a      	ldr	r2, [r3, #4]
 800cd18:	4b0a      	ldr	r3, [pc, #40]	@ (800cd44 <vPortFree+0xc0>)
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	4413      	add	r3, r2
 800cd1e:	4a09      	ldr	r2, [pc, #36]	@ (800cd44 <vPortFree+0xc0>)
 800cd20:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cd22:	6938      	ldr	r0, [r7, #16]
 800cd24:	f000 f874 	bl	800ce10 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cd28:	4b07      	ldr	r3, [pc, #28]	@ (800cd48 <vPortFree+0xc4>)
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	3301      	adds	r3, #1
 800cd2e:	4a06      	ldr	r2, [pc, #24]	@ (800cd48 <vPortFree+0xc4>)
 800cd30:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cd32:	f7fe fb1d 	bl	800b370 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cd36:	bf00      	nop
 800cd38:	3718      	adds	r7, #24
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	bd80      	pop	{r7, pc}
 800cd3e:	bf00      	nop
 800cd40:	20012eac 	.word	0x20012eac
 800cd44:	20012e9c 	.word	0x20012e9c
 800cd48:	20012ea8 	.word	0x20012ea8

0800cd4c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cd4c:	b480      	push	{r7}
 800cd4e:	b085      	sub	sp, #20
 800cd50:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cd52:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800cd56:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cd58:	4b27      	ldr	r3, [pc, #156]	@ (800cdf8 <prvHeapInit+0xac>)
 800cd5a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	f003 0307 	and.w	r3, r3, #7
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d00c      	beq.n	800cd80 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	3307      	adds	r3, #7
 800cd6a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	f023 0307 	bic.w	r3, r3, #7
 800cd72:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cd74:	68ba      	ldr	r2, [r7, #8]
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	1ad3      	subs	r3, r2, r3
 800cd7a:	4a1f      	ldr	r2, [pc, #124]	@ (800cdf8 <prvHeapInit+0xac>)
 800cd7c:	4413      	add	r3, r2
 800cd7e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cd84:	4a1d      	ldr	r2, [pc, #116]	@ (800cdfc <prvHeapInit+0xb0>)
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cd8a:	4b1c      	ldr	r3, [pc, #112]	@ (800cdfc <prvHeapInit+0xb0>)
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	68ba      	ldr	r2, [r7, #8]
 800cd94:	4413      	add	r3, r2
 800cd96:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cd98:	2208      	movs	r2, #8
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	1a9b      	subs	r3, r3, r2
 800cd9e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	f023 0307 	bic.w	r3, r3, #7
 800cda6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	4a15      	ldr	r2, [pc, #84]	@ (800ce00 <prvHeapInit+0xb4>)
 800cdac:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cdae:	4b14      	ldr	r3, [pc, #80]	@ (800ce00 <prvHeapInit+0xb4>)
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cdb6:	4b12      	ldr	r3, [pc, #72]	@ (800ce00 <prvHeapInit+0xb4>)
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	2200      	movs	r2, #0
 800cdbc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cdc2:	683b      	ldr	r3, [r7, #0]
 800cdc4:	68fa      	ldr	r2, [r7, #12]
 800cdc6:	1ad2      	subs	r2, r2, r3
 800cdc8:	683b      	ldr	r3, [r7, #0]
 800cdca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cdcc:	4b0c      	ldr	r3, [pc, #48]	@ (800ce00 <prvHeapInit+0xb4>)
 800cdce:	681a      	ldr	r2, [r3, #0]
 800cdd0:	683b      	ldr	r3, [r7, #0]
 800cdd2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	685b      	ldr	r3, [r3, #4]
 800cdd8:	4a0a      	ldr	r2, [pc, #40]	@ (800ce04 <prvHeapInit+0xb8>)
 800cdda:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	685b      	ldr	r3, [r3, #4]
 800cde0:	4a09      	ldr	r2, [pc, #36]	@ (800ce08 <prvHeapInit+0xbc>)
 800cde2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cde4:	4b09      	ldr	r3, [pc, #36]	@ (800ce0c <prvHeapInit+0xc0>)
 800cde6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800cdea:	601a      	str	r2, [r3, #0]
}
 800cdec:	bf00      	nop
 800cdee:	3714      	adds	r7, #20
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf6:	4770      	bx	lr
 800cdf8:	20002e90 	.word	0x20002e90
 800cdfc:	20012e90 	.word	0x20012e90
 800ce00:	20012e98 	.word	0x20012e98
 800ce04:	20012ea0 	.word	0x20012ea0
 800ce08:	20012e9c 	.word	0x20012e9c
 800ce0c:	20012eac 	.word	0x20012eac

0800ce10 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ce10:	b480      	push	{r7}
 800ce12:	b085      	sub	sp, #20
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ce18:	4b28      	ldr	r3, [pc, #160]	@ (800cebc <prvInsertBlockIntoFreeList+0xac>)
 800ce1a:	60fb      	str	r3, [r7, #12]
 800ce1c:	e002      	b.n	800ce24 <prvInsertBlockIntoFreeList+0x14>
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	60fb      	str	r3, [r7, #12]
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	687a      	ldr	r2, [r7, #4]
 800ce2a:	429a      	cmp	r2, r3
 800ce2c:	d8f7      	bhi.n	800ce1e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	685b      	ldr	r3, [r3, #4]
 800ce36:	68ba      	ldr	r2, [r7, #8]
 800ce38:	4413      	add	r3, r2
 800ce3a:	687a      	ldr	r2, [r7, #4]
 800ce3c:	429a      	cmp	r2, r3
 800ce3e:	d108      	bne.n	800ce52 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	685a      	ldr	r2, [r3, #4]
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	685b      	ldr	r3, [r3, #4]
 800ce48:	441a      	add	r2, r3
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	685b      	ldr	r3, [r3, #4]
 800ce5a:	68ba      	ldr	r2, [r7, #8]
 800ce5c:	441a      	add	r2, r3
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	429a      	cmp	r2, r3
 800ce64:	d118      	bne.n	800ce98 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	681a      	ldr	r2, [r3, #0]
 800ce6a:	4b15      	ldr	r3, [pc, #84]	@ (800cec0 <prvInsertBlockIntoFreeList+0xb0>)
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	429a      	cmp	r2, r3
 800ce70:	d00d      	beq.n	800ce8e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	685a      	ldr	r2, [r3, #4]
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	685b      	ldr	r3, [r3, #4]
 800ce7c:	441a      	add	r2, r3
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	681a      	ldr	r2, [r3, #0]
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	601a      	str	r2, [r3, #0]
 800ce8c:	e008      	b.n	800cea0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ce8e:	4b0c      	ldr	r3, [pc, #48]	@ (800cec0 <prvInsertBlockIntoFreeList+0xb0>)
 800ce90:	681a      	ldr	r2, [r3, #0]
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	601a      	str	r2, [r3, #0]
 800ce96:	e003      	b.n	800cea0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	681a      	ldr	r2, [r3, #0]
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cea0:	68fa      	ldr	r2, [r7, #12]
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	429a      	cmp	r2, r3
 800cea6:	d002      	beq.n	800ceae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	687a      	ldr	r2, [r7, #4]
 800ceac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ceae:	bf00      	nop
 800ceb0:	3714      	adds	r7, #20
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb8:	4770      	bx	lr
 800ceba:	bf00      	nop
 800cebc:	20012e90 	.word	0x20012e90
 800cec0:	20012e98 	.word	0x20012e98

0800cec4 <malloc>:
 800cec4:	4b02      	ldr	r3, [pc, #8]	@ (800ced0 <malloc+0xc>)
 800cec6:	4601      	mov	r1, r0
 800cec8:	6818      	ldr	r0, [r3, #0]
 800ceca:	f000 b82d 	b.w	800cf28 <_malloc_r>
 800cece:	bf00      	nop
 800ced0:	200001d8 	.word	0x200001d8

0800ced4 <free>:
 800ced4:	4b02      	ldr	r3, [pc, #8]	@ (800cee0 <free+0xc>)
 800ced6:	4601      	mov	r1, r0
 800ced8:	6818      	ldr	r0, [r3, #0]
 800ceda:	f001 bdd1 	b.w	800ea80 <_free_r>
 800cede:	bf00      	nop
 800cee0:	200001d8 	.word	0x200001d8

0800cee4 <sbrk_aligned>:
 800cee4:	b570      	push	{r4, r5, r6, lr}
 800cee6:	4e0f      	ldr	r6, [pc, #60]	@ (800cf24 <sbrk_aligned+0x40>)
 800cee8:	460c      	mov	r4, r1
 800ceea:	6831      	ldr	r1, [r6, #0]
 800ceec:	4605      	mov	r5, r0
 800ceee:	b911      	cbnz	r1, 800cef6 <sbrk_aligned+0x12>
 800cef0:	f000 ff1c 	bl	800dd2c <_sbrk_r>
 800cef4:	6030      	str	r0, [r6, #0]
 800cef6:	4621      	mov	r1, r4
 800cef8:	4628      	mov	r0, r5
 800cefa:	f000 ff17 	bl	800dd2c <_sbrk_r>
 800cefe:	1c43      	adds	r3, r0, #1
 800cf00:	d103      	bne.n	800cf0a <sbrk_aligned+0x26>
 800cf02:	f04f 34ff 	mov.w	r4, #4294967295
 800cf06:	4620      	mov	r0, r4
 800cf08:	bd70      	pop	{r4, r5, r6, pc}
 800cf0a:	1cc4      	adds	r4, r0, #3
 800cf0c:	f024 0403 	bic.w	r4, r4, #3
 800cf10:	42a0      	cmp	r0, r4
 800cf12:	d0f8      	beq.n	800cf06 <sbrk_aligned+0x22>
 800cf14:	1a21      	subs	r1, r4, r0
 800cf16:	4628      	mov	r0, r5
 800cf18:	f000 ff08 	bl	800dd2c <_sbrk_r>
 800cf1c:	3001      	adds	r0, #1
 800cf1e:	d1f2      	bne.n	800cf06 <sbrk_aligned+0x22>
 800cf20:	e7ef      	b.n	800cf02 <sbrk_aligned+0x1e>
 800cf22:	bf00      	nop
 800cf24:	20012eb0 	.word	0x20012eb0

0800cf28 <_malloc_r>:
 800cf28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf2c:	1ccd      	adds	r5, r1, #3
 800cf2e:	f025 0503 	bic.w	r5, r5, #3
 800cf32:	3508      	adds	r5, #8
 800cf34:	2d0c      	cmp	r5, #12
 800cf36:	bf38      	it	cc
 800cf38:	250c      	movcc	r5, #12
 800cf3a:	2d00      	cmp	r5, #0
 800cf3c:	4606      	mov	r6, r0
 800cf3e:	db01      	blt.n	800cf44 <_malloc_r+0x1c>
 800cf40:	42a9      	cmp	r1, r5
 800cf42:	d904      	bls.n	800cf4e <_malloc_r+0x26>
 800cf44:	230c      	movs	r3, #12
 800cf46:	6033      	str	r3, [r6, #0]
 800cf48:	2000      	movs	r0, #0
 800cf4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d024 <_malloc_r+0xfc>
 800cf52:	f000 f869 	bl	800d028 <__malloc_lock>
 800cf56:	f8d8 3000 	ldr.w	r3, [r8]
 800cf5a:	461c      	mov	r4, r3
 800cf5c:	bb44      	cbnz	r4, 800cfb0 <_malloc_r+0x88>
 800cf5e:	4629      	mov	r1, r5
 800cf60:	4630      	mov	r0, r6
 800cf62:	f7ff ffbf 	bl	800cee4 <sbrk_aligned>
 800cf66:	1c43      	adds	r3, r0, #1
 800cf68:	4604      	mov	r4, r0
 800cf6a:	d158      	bne.n	800d01e <_malloc_r+0xf6>
 800cf6c:	f8d8 4000 	ldr.w	r4, [r8]
 800cf70:	4627      	mov	r7, r4
 800cf72:	2f00      	cmp	r7, #0
 800cf74:	d143      	bne.n	800cffe <_malloc_r+0xd6>
 800cf76:	2c00      	cmp	r4, #0
 800cf78:	d04b      	beq.n	800d012 <_malloc_r+0xea>
 800cf7a:	6823      	ldr	r3, [r4, #0]
 800cf7c:	4639      	mov	r1, r7
 800cf7e:	4630      	mov	r0, r6
 800cf80:	eb04 0903 	add.w	r9, r4, r3
 800cf84:	f000 fed2 	bl	800dd2c <_sbrk_r>
 800cf88:	4581      	cmp	r9, r0
 800cf8a:	d142      	bne.n	800d012 <_malloc_r+0xea>
 800cf8c:	6821      	ldr	r1, [r4, #0]
 800cf8e:	1a6d      	subs	r5, r5, r1
 800cf90:	4629      	mov	r1, r5
 800cf92:	4630      	mov	r0, r6
 800cf94:	f7ff ffa6 	bl	800cee4 <sbrk_aligned>
 800cf98:	3001      	adds	r0, #1
 800cf9a:	d03a      	beq.n	800d012 <_malloc_r+0xea>
 800cf9c:	6823      	ldr	r3, [r4, #0]
 800cf9e:	442b      	add	r3, r5
 800cfa0:	6023      	str	r3, [r4, #0]
 800cfa2:	f8d8 3000 	ldr.w	r3, [r8]
 800cfa6:	685a      	ldr	r2, [r3, #4]
 800cfa8:	bb62      	cbnz	r2, 800d004 <_malloc_r+0xdc>
 800cfaa:	f8c8 7000 	str.w	r7, [r8]
 800cfae:	e00f      	b.n	800cfd0 <_malloc_r+0xa8>
 800cfb0:	6822      	ldr	r2, [r4, #0]
 800cfb2:	1b52      	subs	r2, r2, r5
 800cfb4:	d420      	bmi.n	800cff8 <_malloc_r+0xd0>
 800cfb6:	2a0b      	cmp	r2, #11
 800cfb8:	d917      	bls.n	800cfea <_malloc_r+0xc2>
 800cfba:	1961      	adds	r1, r4, r5
 800cfbc:	42a3      	cmp	r3, r4
 800cfbe:	6025      	str	r5, [r4, #0]
 800cfc0:	bf18      	it	ne
 800cfc2:	6059      	strne	r1, [r3, #4]
 800cfc4:	6863      	ldr	r3, [r4, #4]
 800cfc6:	bf08      	it	eq
 800cfc8:	f8c8 1000 	streq.w	r1, [r8]
 800cfcc:	5162      	str	r2, [r4, r5]
 800cfce:	604b      	str	r3, [r1, #4]
 800cfd0:	4630      	mov	r0, r6
 800cfd2:	f000 f82f 	bl	800d034 <__malloc_unlock>
 800cfd6:	f104 000b 	add.w	r0, r4, #11
 800cfda:	1d23      	adds	r3, r4, #4
 800cfdc:	f020 0007 	bic.w	r0, r0, #7
 800cfe0:	1ac2      	subs	r2, r0, r3
 800cfe2:	bf1c      	itt	ne
 800cfe4:	1a1b      	subne	r3, r3, r0
 800cfe6:	50a3      	strne	r3, [r4, r2]
 800cfe8:	e7af      	b.n	800cf4a <_malloc_r+0x22>
 800cfea:	6862      	ldr	r2, [r4, #4]
 800cfec:	42a3      	cmp	r3, r4
 800cfee:	bf0c      	ite	eq
 800cff0:	f8c8 2000 	streq.w	r2, [r8]
 800cff4:	605a      	strne	r2, [r3, #4]
 800cff6:	e7eb      	b.n	800cfd0 <_malloc_r+0xa8>
 800cff8:	4623      	mov	r3, r4
 800cffa:	6864      	ldr	r4, [r4, #4]
 800cffc:	e7ae      	b.n	800cf5c <_malloc_r+0x34>
 800cffe:	463c      	mov	r4, r7
 800d000:	687f      	ldr	r7, [r7, #4]
 800d002:	e7b6      	b.n	800cf72 <_malloc_r+0x4a>
 800d004:	461a      	mov	r2, r3
 800d006:	685b      	ldr	r3, [r3, #4]
 800d008:	42a3      	cmp	r3, r4
 800d00a:	d1fb      	bne.n	800d004 <_malloc_r+0xdc>
 800d00c:	2300      	movs	r3, #0
 800d00e:	6053      	str	r3, [r2, #4]
 800d010:	e7de      	b.n	800cfd0 <_malloc_r+0xa8>
 800d012:	230c      	movs	r3, #12
 800d014:	6033      	str	r3, [r6, #0]
 800d016:	4630      	mov	r0, r6
 800d018:	f000 f80c 	bl	800d034 <__malloc_unlock>
 800d01c:	e794      	b.n	800cf48 <_malloc_r+0x20>
 800d01e:	6005      	str	r5, [r0, #0]
 800d020:	e7d6      	b.n	800cfd0 <_malloc_r+0xa8>
 800d022:	bf00      	nop
 800d024:	20012eb4 	.word	0x20012eb4

0800d028 <__malloc_lock>:
 800d028:	4801      	ldr	r0, [pc, #4]	@ (800d030 <__malloc_lock+0x8>)
 800d02a:	f000 becc 	b.w	800ddc6 <__retarget_lock_acquire_recursive>
 800d02e:	bf00      	nop
 800d030:	20012ff8 	.word	0x20012ff8

0800d034 <__malloc_unlock>:
 800d034:	4801      	ldr	r0, [pc, #4]	@ (800d03c <__malloc_unlock+0x8>)
 800d036:	f000 bec7 	b.w	800ddc8 <__retarget_lock_release_recursive>
 800d03a:	bf00      	nop
 800d03c:	20012ff8 	.word	0x20012ff8

0800d040 <_realloc_r>:
 800d040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d044:	4680      	mov	r8, r0
 800d046:	4615      	mov	r5, r2
 800d048:	460c      	mov	r4, r1
 800d04a:	b921      	cbnz	r1, 800d056 <_realloc_r+0x16>
 800d04c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d050:	4611      	mov	r1, r2
 800d052:	f7ff bf69 	b.w	800cf28 <_malloc_r>
 800d056:	b92a      	cbnz	r2, 800d064 <_realloc_r+0x24>
 800d058:	f001 fd12 	bl	800ea80 <_free_r>
 800d05c:	2400      	movs	r4, #0
 800d05e:	4620      	mov	r0, r4
 800d060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d064:	f002 f8d8 	bl	800f218 <_malloc_usable_size_r>
 800d068:	4285      	cmp	r5, r0
 800d06a:	4606      	mov	r6, r0
 800d06c:	d802      	bhi.n	800d074 <_realloc_r+0x34>
 800d06e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d072:	d8f4      	bhi.n	800d05e <_realloc_r+0x1e>
 800d074:	4629      	mov	r1, r5
 800d076:	4640      	mov	r0, r8
 800d078:	f7ff ff56 	bl	800cf28 <_malloc_r>
 800d07c:	4607      	mov	r7, r0
 800d07e:	2800      	cmp	r0, #0
 800d080:	d0ec      	beq.n	800d05c <_realloc_r+0x1c>
 800d082:	42b5      	cmp	r5, r6
 800d084:	462a      	mov	r2, r5
 800d086:	4621      	mov	r1, r4
 800d088:	bf28      	it	cs
 800d08a:	4632      	movcs	r2, r6
 800d08c:	f000 fe9d 	bl	800ddca <memcpy>
 800d090:	4621      	mov	r1, r4
 800d092:	4640      	mov	r0, r8
 800d094:	f001 fcf4 	bl	800ea80 <_free_r>
 800d098:	463c      	mov	r4, r7
 800d09a:	e7e0      	b.n	800d05e <_realloc_r+0x1e>

0800d09c <__cvt>:
 800d09c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d0a0:	ec57 6b10 	vmov	r6, r7, d0
 800d0a4:	2f00      	cmp	r7, #0
 800d0a6:	460c      	mov	r4, r1
 800d0a8:	4619      	mov	r1, r3
 800d0aa:	463b      	mov	r3, r7
 800d0ac:	bfbb      	ittet	lt
 800d0ae:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d0b2:	461f      	movlt	r7, r3
 800d0b4:	2300      	movge	r3, #0
 800d0b6:	232d      	movlt	r3, #45	@ 0x2d
 800d0b8:	700b      	strb	r3, [r1, #0]
 800d0ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d0bc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d0c0:	4691      	mov	r9, r2
 800d0c2:	f023 0820 	bic.w	r8, r3, #32
 800d0c6:	bfbc      	itt	lt
 800d0c8:	4632      	movlt	r2, r6
 800d0ca:	4616      	movlt	r6, r2
 800d0cc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d0d0:	d005      	beq.n	800d0de <__cvt+0x42>
 800d0d2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d0d6:	d100      	bne.n	800d0da <__cvt+0x3e>
 800d0d8:	3401      	adds	r4, #1
 800d0da:	2102      	movs	r1, #2
 800d0dc:	e000      	b.n	800d0e0 <__cvt+0x44>
 800d0de:	2103      	movs	r1, #3
 800d0e0:	ab03      	add	r3, sp, #12
 800d0e2:	9301      	str	r3, [sp, #4]
 800d0e4:	ab02      	add	r3, sp, #8
 800d0e6:	9300      	str	r3, [sp, #0]
 800d0e8:	ec47 6b10 	vmov	d0, r6, r7
 800d0ec:	4653      	mov	r3, sl
 800d0ee:	4622      	mov	r2, r4
 800d0f0:	f000 ff02 	bl	800def8 <_dtoa_r>
 800d0f4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d0f8:	4605      	mov	r5, r0
 800d0fa:	d119      	bne.n	800d130 <__cvt+0x94>
 800d0fc:	f019 0f01 	tst.w	r9, #1
 800d100:	d00e      	beq.n	800d120 <__cvt+0x84>
 800d102:	eb00 0904 	add.w	r9, r0, r4
 800d106:	2200      	movs	r2, #0
 800d108:	2300      	movs	r3, #0
 800d10a:	4630      	mov	r0, r6
 800d10c:	4639      	mov	r1, r7
 800d10e:	f7f3 fceb 	bl	8000ae8 <__aeabi_dcmpeq>
 800d112:	b108      	cbz	r0, 800d118 <__cvt+0x7c>
 800d114:	f8cd 900c 	str.w	r9, [sp, #12]
 800d118:	2230      	movs	r2, #48	@ 0x30
 800d11a:	9b03      	ldr	r3, [sp, #12]
 800d11c:	454b      	cmp	r3, r9
 800d11e:	d31e      	bcc.n	800d15e <__cvt+0xc2>
 800d120:	9b03      	ldr	r3, [sp, #12]
 800d122:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d124:	1b5b      	subs	r3, r3, r5
 800d126:	4628      	mov	r0, r5
 800d128:	6013      	str	r3, [r2, #0]
 800d12a:	b004      	add	sp, #16
 800d12c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d130:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d134:	eb00 0904 	add.w	r9, r0, r4
 800d138:	d1e5      	bne.n	800d106 <__cvt+0x6a>
 800d13a:	7803      	ldrb	r3, [r0, #0]
 800d13c:	2b30      	cmp	r3, #48	@ 0x30
 800d13e:	d10a      	bne.n	800d156 <__cvt+0xba>
 800d140:	2200      	movs	r2, #0
 800d142:	2300      	movs	r3, #0
 800d144:	4630      	mov	r0, r6
 800d146:	4639      	mov	r1, r7
 800d148:	f7f3 fcce 	bl	8000ae8 <__aeabi_dcmpeq>
 800d14c:	b918      	cbnz	r0, 800d156 <__cvt+0xba>
 800d14e:	f1c4 0401 	rsb	r4, r4, #1
 800d152:	f8ca 4000 	str.w	r4, [sl]
 800d156:	f8da 3000 	ldr.w	r3, [sl]
 800d15a:	4499      	add	r9, r3
 800d15c:	e7d3      	b.n	800d106 <__cvt+0x6a>
 800d15e:	1c59      	adds	r1, r3, #1
 800d160:	9103      	str	r1, [sp, #12]
 800d162:	701a      	strb	r2, [r3, #0]
 800d164:	e7d9      	b.n	800d11a <__cvt+0x7e>

0800d166 <__exponent>:
 800d166:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d168:	2900      	cmp	r1, #0
 800d16a:	bfba      	itte	lt
 800d16c:	4249      	neglt	r1, r1
 800d16e:	232d      	movlt	r3, #45	@ 0x2d
 800d170:	232b      	movge	r3, #43	@ 0x2b
 800d172:	2909      	cmp	r1, #9
 800d174:	7002      	strb	r2, [r0, #0]
 800d176:	7043      	strb	r3, [r0, #1]
 800d178:	dd29      	ble.n	800d1ce <__exponent+0x68>
 800d17a:	f10d 0307 	add.w	r3, sp, #7
 800d17e:	461d      	mov	r5, r3
 800d180:	270a      	movs	r7, #10
 800d182:	461a      	mov	r2, r3
 800d184:	fbb1 f6f7 	udiv	r6, r1, r7
 800d188:	fb07 1416 	mls	r4, r7, r6, r1
 800d18c:	3430      	adds	r4, #48	@ 0x30
 800d18e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d192:	460c      	mov	r4, r1
 800d194:	2c63      	cmp	r4, #99	@ 0x63
 800d196:	f103 33ff 	add.w	r3, r3, #4294967295
 800d19a:	4631      	mov	r1, r6
 800d19c:	dcf1      	bgt.n	800d182 <__exponent+0x1c>
 800d19e:	3130      	adds	r1, #48	@ 0x30
 800d1a0:	1e94      	subs	r4, r2, #2
 800d1a2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d1a6:	1c41      	adds	r1, r0, #1
 800d1a8:	4623      	mov	r3, r4
 800d1aa:	42ab      	cmp	r3, r5
 800d1ac:	d30a      	bcc.n	800d1c4 <__exponent+0x5e>
 800d1ae:	f10d 0309 	add.w	r3, sp, #9
 800d1b2:	1a9b      	subs	r3, r3, r2
 800d1b4:	42ac      	cmp	r4, r5
 800d1b6:	bf88      	it	hi
 800d1b8:	2300      	movhi	r3, #0
 800d1ba:	3302      	adds	r3, #2
 800d1bc:	4403      	add	r3, r0
 800d1be:	1a18      	subs	r0, r3, r0
 800d1c0:	b003      	add	sp, #12
 800d1c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1c4:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d1c8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d1cc:	e7ed      	b.n	800d1aa <__exponent+0x44>
 800d1ce:	2330      	movs	r3, #48	@ 0x30
 800d1d0:	3130      	adds	r1, #48	@ 0x30
 800d1d2:	7083      	strb	r3, [r0, #2]
 800d1d4:	70c1      	strb	r1, [r0, #3]
 800d1d6:	1d03      	adds	r3, r0, #4
 800d1d8:	e7f1      	b.n	800d1be <__exponent+0x58>
	...

0800d1dc <_printf_float>:
 800d1dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1e0:	b08d      	sub	sp, #52	@ 0x34
 800d1e2:	460c      	mov	r4, r1
 800d1e4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d1e8:	4616      	mov	r6, r2
 800d1ea:	461f      	mov	r7, r3
 800d1ec:	4605      	mov	r5, r0
 800d1ee:	f000 fd0f 	bl	800dc10 <_localeconv_r>
 800d1f2:	6803      	ldr	r3, [r0, #0]
 800d1f4:	9304      	str	r3, [sp, #16]
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	f7f3 f84a 	bl	8000290 <strlen>
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	930a      	str	r3, [sp, #40]	@ 0x28
 800d200:	f8d8 3000 	ldr.w	r3, [r8]
 800d204:	9005      	str	r0, [sp, #20]
 800d206:	3307      	adds	r3, #7
 800d208:	f023 0307 	bic.w	r3, r3, #7
 800d20c:	f103 0208 	add.w	r2, r3, #8
 800d210:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d214:	f8d4 b000 	ldr.w	fp, [r4]
 800d218:	f8c8 2000 	str.w	r2, [r8]
 800d21c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d220:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d224:	9307      	str	r3, [sp, #28]
 800d226:	f8cd 8018 	str.w	r8, [sp, #24]
 800d22a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d22e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d232:	4b9c      	ldr	r3, [pc, #624]	@ (800d4a4 <_printf_float+0x2c8>)
 800d234:	f04f 32ff 	mov.w	r2, #4294967295
 800d238:	f7f3 fc88 	bl	8000b4c <__aeabi_dcmpun>
 800d23c:	bb70      	cbnz	r0, 800d29c <_printf_float+0xc0>
 800d23e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d242:	4b98      	ldr	r3, [pc, #608]	@ (800d4a4 <_printf_float+0x2c8>)
 800d244:	f04f 32ff 	mov.w	r2, #4294967295
 800d248:	f7f3 fc62 	bl	8000b10 <__aeabi_dcmple>
 800d24c:	bb30      	cbnz	r0, 800d29c <_printf_float+0xc0>
 800d24e:	2200      	movs	r2, #0
 800d250:	2300      	movs	r3, #0
 800d252:	4640      	mov	r0, r8
 800d254:	4649      	mov	r1, r9
 800d256:	f7f3 fc51 	bl	8000afc <__aeabi_dcmplt>
 800d25a:	b110      	cbz	r0, 800d262 <_printf_float+0x86>
 800d25c:	232d      	movs	r3, #45	@ 0x2d
 800d25e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d262:	4a91      	ldr	r2, [pc, #580]	@ (800d4a8 <_printf_float+0x2cc>)
 800d264:	4b91      	ldr	r3, [pc, #580]	@ (800d4ac <_printf_float+0x2d0>)
 800d266:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d26a:	bf94      	ite	ls
 800d26c:	4690      	movls	r8, r2
 800d26e:	4698      	movhi	r8, r3
 800d270:	2303      	movs	r3, #3
 800d272:	6123      	str	r3, [r4, #16]
 800d274:	f02b 0304 	bic.w	r3, fp, #4
 800d278:	6023      	str	r3, [r4, #0]
 800d27a:	f04f 0900 	mov.w	r9, #0
 800d27e:	9700      	str	r7, [sp, #0]
 800d280:	4633      	mov	r3, r6
 800d282:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d284:	4621      	mov	r1, r4
 800d286:	4628      	mov	r0, r5
 800d288:	f000 f9d2 	bl	800d630 <_printf_common>
 800d28c:	3001      	adds	r0, #1
 800d28e:	f040 808d 	bne.w	800d3ac <_printf_float+0x1d0>
 800d292:	f04f 30ff 	mov.w	r0, #4294967295
 800d296:	b00d      	add	sp, #52	@ 0x34
 800d298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d29c:	4642      	mov	r2, r8
 800d29e:	464b      	mov	r3, r9
 800d2a0:	4640      	mov	r0, r8
 800d2a2:	4649      	mov	r1, r9
 800d2a4:	f7f3 fc52 	bl	8000b4c <__aeabi_dcmpun>
 800d2a8:	b140      	cbz	r0, 800d2bc <_printf_float+0xe0>
 800d2aa:	464b      	mov	r3, r9
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	bfbc      	itt	lt
 800d2b0:	232d      	movlt	r3, #45	@ 0x2d
 800d2b2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d2b6:	4a7e      	ldr	r2, [pc, #504]	@ (800d4b0 <_printf_float+0x2d4>)
 800d2b8:	4b7e      	ldr	r3, [pc, #504]	@ (800d4b4 <_printf_float+0x2d8>)
 800d2ba:	e7d4      	b.n	800d266 <_printf_float+0x8a>
 800d2bc:	6863      	ldr	r3, [r4, #4]
 800d2be:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d2c2:	9206      	str	r2, [sp, #24]
 800d2c4:	1c5a      	adds	r2, r3, #1
 800d2c6:	d13b      	bne.n	800d340 <_printf_float+0x164>
 800d2c8:	2306      	movs	r3, #6
 800d2ca:	6063      	str	r3, [r4, #4]
 800d2cc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	6022      	str	r2, [r4, #0]
 800d2d4:	9303      	str	r3, [sp, #12]
 800d2d6:	ab0a      	add	r3, sp, #40	@ 0x28
 800d2d8:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d2dc:	ab09      	add	r3, sp, #36	@ 0x24
 800d2de:	9300      	str	r3, [sp, #0]
 800d2e0:	6861      	ldr	r1, [r4, #4]
 800d2e2:	ec49 8b10 	vmov	d0, r8, r9
 800d2e6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d2ea:	4628      	mov	r0, r5
 800d2ec:	f7ff fed6 	bl	800d09c <__cvt>
 800d2f0:	9b06      	ldr	r3, [sp, #24]
 800d2f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d2f4:	2b47      	cmp	r3, #71	@ 0x47
 800d2f6:	4680      	mov	r8, r0
 800d2f8:	d129      	bne.n	800d34e <_printf_float+0x172>
 800d2fa:	1cc8      	adds	r0, r1, #3
 800d2fc:	db02      	blt.n	800d304 <_printf_float+0x128>
 800d2fe:	6863      	ldr	r3, [r4, #4]
 800d300:	4299      	cmp	r1, r3
 800d302:	dd41      	ble.n	800d388 <_printf_float+0x1ac>
 800d304:	f1aa 0a02 	sub.w	sl, sl, #2
 800d308:	fa5f fa8a 	uxtb.w	sl, sl
 800d30c:	3901      	subs	r1, #1
 800d30e:	4652      	mov	r2, sl
 800d310:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d314:	9109      	str	r1, [sp, #36]	@ 0x24
 800d316:	f7ff ff26 	bl	800d166 <__exponent>
 800d31a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d31c:	1813      	adds	r3, r2, r0
 800d31e:	2a01      	cmp	r2, #1
 800d320:	4681      	mov	r9, r0
 800d322:	6123      	str	r3, [r4, #16]
 800d324:	dc02      	bgt.n	800d32c <_printf_float+0x150>
 800d326:	6822      	ldr	r2, [r4, #0]
 800d328:	07d2      	lsls	r2, r2, #31
 800d32a:	d501      	bpl.n	800d330 <_printf_float+0x154>
 800d32c:	3301      	adds	r3, #1
 800d32e:	6123      	str	r3, [r4, #16]
 800d330:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d334:	2b00      	cmp	r3, #0
 800d336:	d0a2      	beq.n	800d27e <_printf_float+0xa2>
 800d338:	232d      	movs	r3, #45	@ 0x2d
 800d33a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d33e:	e79e      	b.n	800d27e <_printf_float+0xa2>
 800d340:	9a06      	ldr	r2, [sp, #24]
 800d342:	2a47      	cmp	r2, #71	@ 0x47
 800d344:	d1c2      	bne.n	800d2cc <_printf_float+0xf0>
 800d346:	2b00      	cmp	r3, #0
 800d348:	d1c0      	bne.n	800d2cc <_printf_float+0xf0>
 800d34a:	2301      	movs	r3, #1
 800d34c:	e7bd      	b.n	800d2ca <_printf_float+0xee>
 800d34e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d352:	d9db      	bls.n	800d30c <_printf_float+0x130>
 800d354:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d358:	d118      	bne.n	800d38c <_printf_float+0x1b0>
 800d35a:	2900      	cmp	r1, #0
 800d35c:	6863      	ldr	r3, [r4, #4]
 800d35e:	dd0b      	ble.n	800d378 <_printf_float+0x19c>
 800d360:	6121      	str	r1, [r4, #16]
 800d362:	b913      	cbnz	r3, 800d36a <_printf_float+0x18e>
 800d364:	6822      	ldr	r2, [r4, #0]
 800d366:	07d0      	lsls	r0, r2, #31
 800d368:	d502      	bpl.n	800d370 <_printf_float+0x194>
 800d36a:	3301      	adds	r3, #1
 800d36c:	440b      	add	r3, r1
 800d36e:	6123      	str	r3, [r4, #16]
 800d370:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d372:	f04f 0900 	mov.w	r9, #0
 800d376:	e7db      	b.n	800d330 <_printf_float+0x154>
 800d378:	b913      	cbnz	r3, 800d380 <_printf_float+0x1a4>
 800d37a:	6822      	ldr	r2, [r4, #0]
 800d37c:	07d2      	lsls	r2, r2, #31
 800d37e:	d501      	bpl.n	800d384 <_printf_float+0x1a8>
 800d380:	3302      	adds	r3, #2
 800d382:	e7f4      	b.n	800d36e <_printf_float+0x192>
 800d384:	2301      	movs	r3, #1
 800d386:	e7f2      	b.n	800d36e <_printf_float+0x192>
 800d388:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d38c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d38e:	4299      	cmp	r1, r3
 800d390:	db05      	blt.n	800d39e <_printf_float+0x1c2>
 800d392:	6823      	ldr	r3, [r4, #0]
 800d394:	6121      	str	r1, [r4, #16]
 800d396:	07d8      	lsls	r0, r3, #31
 800d398:	d5ea      	bpl.n	800d370 <_printf_float+0x194>
 800d39a:	1c4b      	adds	r3, r1, #1
 800d39c:	e7e7      	b.n	800d36e <_printf_float+0x192>
 800d39e:	2900      	cmp	r1, #0
 800d3a0:	bfd4      	ite	le
 800d3a2:	f1c1 0202 	rsble	r2, r1, #2
 800d3a6:	2201      	movgt	r2, #1
 800d3a8:	4413      	add	r3, r2
 800d3aa:	e7e0      	b.n	800d36e <_printf_float+0x192>
 800d3ac:	6823      	ldr	r3, [r4, #0]
 800d3ae:	055a      	lsls	r2, r3, #21
 800d3b0:	d407      	bmi.n	800d3c2 <_printf_float+0x1e6>
 800d3b2:	6923      	ldr	r3, [r4, #16]
 800d3b4:	4642      	mov	r2, r8
 800d3b6:	4631      	mov	r1, r6
 800d3b8:	4628      	mov	r0, r5
 800d3ba:	47b8      	blx	r7
 800d3bc:	3001      	adds	r0, #1
 800d3be:	d12b      	bne.n	800d418 <_printf_float+0x23c>
 800d3c0:	e767      	b.n	800d292 <_printf_float+0xb6>
 800d3c2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d3c6:	f240 80dd 	bls.w	800d584 <_printf_float+0x3a8>
 800d3ca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	f7f3 fb89 	bl	8000ae8 <__aeabi_dcmpeq>
 800d3d6:	2800      	cmp	r0, #0
 800d3d8:	d033      	beq.n	800d442 <_printf_float+0x266>
 800d3da:	4a37      	ldr	r2, [pc, #220]	@ (800d4b8 <_printf_float+0x2dc>)
 800d3dc:	2301      	movs	r3, #1
 800d3de:	4631      	mov	r1, r6
 800d3e0:	4628      	mov	r0, r5
 800d3e2:	47b8      	blx	r7
 800d3e4:	3001      	adds	r0, #1
 800d3e6:	f43f af54 	beq.w	800d292 <_printf_float+0xb6>
 800d3ea:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d3ee:	4543      	cmp	r3, r8
 800d3f0:	db02      	blt.n	800d3f8 <_printf_float+0x21c>
 800d3f2:	6823      	ldr	r3, [r4, #0]
 800d3f4:	07d8      	lsls	r0, r3, #31
 800d3f6:	d50f      	bpl.n	800d418 <_printf_float+0x23c>
 800d3f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d3fc:	4631      	mov	r1, r6
 800d3fe:	4628      	mov	r0, r5
 800d400:	47b8      	blx	r7
 800d402:	3001      	adds	r0, #1
 800d404:	f43f af45 	beq.w	800d292 <_printf_float+0xb6>
 800d408:	f04f 0900 	mov.w	r9, #0
 800d40c:	f108 38ff 	add.w	r8, r8, #4294967295
 800d410:	f104 0a1a 	add.w	sl, r4, #26
 800d414:	45c8      	cmp	r8, r9
 800d416:	dc09      	bgt.n	800d42c <_printf_float+0x250>
 800d418:	6823      	ldr	r3, [r4, #0]
 800d41a:	079b      	lsls	r3, r3, #30
 800d41c:	f100 8103 	bmi.w	800d626 <_printf_float+0x44a>
 800d420:	68e0      	ldr	r0, [r4, #12]
 800d422:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d424:	4298      	cmp	r0, r3
 800d426:	bfb8      	it	lt
 800d428:	4618      	movlt	r0, r3
 800d42a:	e734      	b.n	800d296 <_printf_float+0xba>
 800d42c:	2301      	movs	r3, #1
 800d42e:	4652      	mov	r2, sl
 800d430:	4631      	mov	r1, r6
 800d432:	4628      	mov	r0, r5
 800d434:	47b8      	blx	r7
 800d436:	3001      	adds	r0, #1
 800d438:	f43f af2b 	beq.w	800d292 <_printf_float+0xb6>
 800d43c:	f109 0901 	add.w	r9, r9, #1
 800d440:	e7e8      	b.n	800d414 <_printf_float+0x238>
 800d442:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d444:	2b00      	cmp	r3, #0
 800d446:	dc39      	bgt.n	800d4bc <_printf_float+0x2e0>
 800d448:	4a1b      	ldr	r2, [pc, #108]	@ (800d4b8 <_printf_float+0x2dc>)
 800d44a:	2301      	movs	r3, #1
 800d44c:	4631      	mov	r1, r6
 800d44e:	4628      	mov	r0, r5
 800d450:	47b8      	blx	r7
 800d452:	3001      	adds	r0, #1
 800d454:	f43f af1d 	beq.w	800d292 <_printf_float+0xb6>
 800d458:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d45c:	ea59 0303 	orrs.w	r3, r9, r3
 800d460:	d102      	bne.n	800d468 <_printf_float+0x28c>
 800d462:	6823      	ldr	r3, [r4, #0]
 800d464:	07d9      	lsls	r1, r3, #31
 800d466:	d5d7      	bpl.n	800d418 <_printf_float+0x23c>
 800d468:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d46c:	4631      	mov	r1, r6
 800d46e:	4628      	mov	r0, r5
 800d470:	47b8      	blx	r7
 800d472:	3001      	adds	r0, #1
 800d474:	f43f af0d 	beq.w	800d292 <_printf_float+0xb6>
 800d478:	f04f 0a00 	mov.w	sl, #0
 800d47c:	f104 0b1a 	add.w	fp, r4, #26
 800d480:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d482:	425b      	negs	r3, r3
 800d484:	4553      	cmp	r3, sl
 800d486:	dc01      	bgt.n	800d48c <_printf_float+0x2b0>
 800d488:	464b      	mov	r3, r9
 800d48a:	e793      	b.n	800d3b4 <_printf_float+0x1d8>
 800d48c:	2301      	movs	r3, #1
 800d48e:	465a      	mov	r2, fp
 800d490:	4631      	mov	r1, r6
 800d492:	4628      	mov	r0, r5
 800d494:	47b8      	blx	r7
 800d496:	3001      	adds	r0, #1
 800d498:	f43f aefb 	beq.w	800d292 <_printf_float+0xb6>
 800d49c:	f10a 0a01 	add.w	sl, sl, #1
 800d4a0:	e7ee      	b.n	800d480 <_printf_float+0x2a4>
 800d4a2:	bf00      	nop
 800d4a4:	7fefffff 	.word	0x7fefffff
 800d4a8:	08010458 	.word	0x08010458
 800d4ac:	0801045c 	.word	0x0801045c
 800d4b0:	08010460 	.word	0x08010460
 800d4b4:	08010464 	.word	0x08010464
 800d4b8:	08010468 	.word	0x08010468
 800d4bc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d4be:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d4c2:	4553      	cmp	r3, sl
 800d4c4:	bfa8      	it	ge
 800d4c6:	4653      	movge	r3, sl
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	4699      	mov	r9, r3
 800d4cc:	dc36      	bgt.n	800d53c <_printf_float+0x360>
 800d4ce:	f04f 0b00 	mov.w	fp, #0
 800d4d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d4d6:	f104 021a 	add.w	r2, r4, #26
 800d4da:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d4dc:	9306      	str	r3, [sp, #24]
 800d4de:	eba3 0309 	sub.w	r3, r3, r9
 800d4e2:	455b      	cmp	r3, fp
 800d4e4:	dc31      	bgt.n	800d54a <_printf_float+0x36e>
 800d4e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4e8:	459a      	cmp	sl, r3
 800d4ea:	dc3a      	bgt.n	800d562 <_printf_float+0x386>
 800d4ec:	6823      	ldr	r3, [r4, #0]
 800d4ee:	07da      	lsls	r2, r3, #31
 800d4f0:	d437      	bmi.n	800d562 <_printf_float+0x386>
 800d4f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4f4:	ebaa 0903 	sub.w	r9, sl, r3
 800d4f8:	9b06      	ldr	r3, [sp, #24]
 800d4fa:	ebaa 0303 	sub.w	r3, sl, r3
 800d4fe:	4599      	cmp	r9, r3
 800d500:	bfa8      	it	ge
 800d502:	4699      	movge	r9, r3
 800d504:	f1b9 0f00 	cmp.w	r9, #0
 800d508:	dc33      	bgt.n	800d572 <_printf_float+0x396>
 800d50a:	f04f 0800 	mov.w	r8, #0
 800d50e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d512:	f104 0b1a 	add.w	fp, r4, #26
 800d516:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d518:	ebaa 0303 	sub.w	r3, sl, r3
 800d51c:	eba3 0309 	sub.w	r3, r3, r9
 800d520:	4543      	cmp	r3, r8
 800d522:	f77f af79 	ble.w	800d418 <_printf_float+0x23c>
 800d526:	2301      	movs	r3, #1
 800d528:	465a      	mov	r2, fp
 800d52a:	4631      	mov	r1, r6
 800d52c:	4628      	mov	r0, r5
 800d52e:	47b8      	blx	r7
 800d530:	3001      	adds	r0, #1
 800d532:	f43f aeae 	beq.w	800d292 <_printf_float+0xb6>
 800d536:	f108 0801 	add.w	r8, r8, #1
 800d53a:	e7ec      	b.n	800d516 <_printf_float+0x33a>
 800d53c:	4642      	mov	r2, r8
 800d53e:	4631      	mov	r1, r6
 800d540:	4628      	mov	r0, r5
 800d542:	47b8      	blx	r7
 800d544:	3001      	adds	r0, #1
 800d546:	d1c2      	bne.n	800d4ce <_printf_float+0x2f2>
 800d548:	e6a3      	b.n	800d292 <_printf_float+0xb6>
 800d54a:	2301      	movs	r3, #1
 800d54c:	4631      	mov	r1, r6
 800d54e:	4628      	mov	r0, r5
 800d550:	9206      	str	r2, [sp, #24]
 800d552:	47b8      	blx	r7
 800d554:	3001      	adds	r0, #1
 800d556:	f43f ae9c 	beq.w	800d292 <_printf_float+0xb6>
 800d55a:	9a06      	ldr	r2, [sp, #24]
 800d55c:	f10b 0b01 	add.w	fp, fp, #1
 800d560:	e7bb      	b.n	800d4da <_printf_float+0x2fe>
 800d562:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d566:	4631      	mov	r1, r6
 800d568:	4628      	mov	r0, r5
 800d56a:	47b8      	blx	r7
 800d56c:	3001      	adds	r0, #1
 800d56e:	d1c0      	bne.n	800d4f2 <_printf_float+0x316>
 800d570:	e68f      	b.n	800d292 <_printf_float+0xb6>
 800d572:	9a06      	ldr	r2, [sp, #24]
 800d574:	464b      	mov	r3, r9
 800d576:	4442      	add	r2, r8
 800d578:	4631      	mov	r1, r6
 800d57a:	4628      	mov	r0, r5
 800d57c:	47b8      	blx	r7
 800d57e:	3001      	adds	r0, #1
 800d580:	d1c3      	bne.n	800d50a <_printf_float+0x32e>
 800d582:	e686      	b.n	800d292 <_printf_float+0xb6>
 800d584:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d588:	f1ba 0f01 	cmp.w	sl, #1
 800d58c:	dc01      	bgt.n	800d592 <_printf_float+0x3b6>
 800d58e:	07db      	lsls	r3, r3, #31
 800d590:	d536      	bpl.n	800d600 <_printf_float+0x424>
 800d592:	2301      	movs	r3, #1
 800d594:	4642      	mov	r2, r8
 800d596:	4631      	mov	r1, r6
 800d598:	4628      	mov	r0, r5
 800d59a:	47b8      	blx	r7
 800d59c:	3001      	adds	r0, #1
 800d59e:	f43f ae78 	beq.w	800d292 <_printf_float+0xb6>
 800d5a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d5a6:	4631      	mov	r1, r6
 800d5a8:	4628      	mov	r0, r5
 800d5aa:	47b8      	blx	r7
 800d5ac:	3001      	adds	r0, #1
 800d5ae:	f43f ae70 	beq.w	800d292 <_printf_float+0xb6>
 800d5b2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d5be:	f7f3 fa93 	bl	8000ae8 <__aeabi_dcmpeq>
 800d5c2:	b9c0      	cbnz	r0, 800d5f6 <_printf_float+0x41a>
 800d5c4:	4653      	mov	r3, sl
 800d5c6:	f108 0201 	add.w	r2, r8, #1
 800d5ca:	4631      	mov	r1, r6
 800d5cc:	4628      	mov	r0, r5
 800d5ce:	47b8      	blx	r7
 800d5d0:	3001      	adds	r0, #1
 800d5d2:	d10c      	bne.n	800d5ee <_printf_float+0x412>
 800d5d4:	e65d      	b.n	800d292 <_printf_float+0xb6>
 800d5d6:	2301      	movs	r3, #1
 800d5d8:	465a      	mov	r2, fp
 800d5da:	4631      	mov	r1, r6
 800d5dc:	4628      	mov	r0, r5
 800d5de:	47b8      	blx	r7
 800d5e0:	3001      	adds	r0, #1
 800d5e2:	f43f ae56 	beq.w	800d292 <_printf_float+0xb6>
 800d5e6:	f108 0801 	add.w	r8, r8, #1
 800d5ea:	45d0      	cmp	r8, sl
 800d5ec:	dbf3      	blt.n	800d5d6 <_printf_float+0x3fa>
 800d5ee:	464b      	mov	r3, r9
 800d5f0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d5f4:	e6df      	b.n	800d3b6 <_printf_float+0x1da>
 800d5f6:	f04f 0800 	mov.w	r8, #0
 800d5fa:	f104 0b1a 	add.w	fp, r4, #26
 800d5fe:	e7f4      	b.n	800d5ea <_printf_float+0x40e>
 800d600:	2301      	movs	r3, #1
 800d602:	4642      	mov	r2, r8
 800d604:	e7e1      	b.n	800d5ca <_printf_float+0x3ee>
 800d606:	2301      	movs	r3, #1
 800d608:	464a      	mov	r2, r9
 800d60a:	4631      	mov	r1, r6
 800d60c:	4628      	mov	r0, r5
 800d60e:	47b8      	blx	r7
 800d610:	3001      	adds	r0, #1
 800d612:	f43f ae3e 	beq.w	800d292 <_printf_float+0xb6>
 800d616:	f108 0801 	add.w	r8, r8, #1
 800d61a:	68e3      	ldr	r3, [r4, #12]
 800d61c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d61e:	1a5b      	subs	r3, r3, r1
 800d620:	4543      	cmp	r3, r8
 800d622:	dcf0      	bgt.n	800d606 <_printf_float+0x42a>
 800d624:	e6fc      	b.n	800d420 <_printf_float+0x244>
 800d626:	f04f 0800 	mov.w	r8, #0
 800d62a:	f104 0919 	add.w	r9, r4, #25
 800d62e:	e7f4      	b.n	800d61a <_printf_float+0x43e>

0800d630 <_printf_common>:
 800d630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d634:	4616      	mov	r6, r2
 800d636:	4698      	mov	r8, r3
 800d638:	688a      	ldr	r2, [r1, #8]
 800d63a:	690b      	ldr	r3, [r1, #16]
 800d63c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d640:	4293      	cmp	r3, r2
 800d642:	bfb8      	it	lt
 800d644:	4613      	movlt	r3, r2
 800d646:	6033      	str	r3, [r6, #0]
 800d648:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d64c:	4607      	mov	r7, r0
 800d64e:	460c      	mov	r4, r1
 800d650:	b10a      	cbz	r2, 800d656 <_printf_common+0x26>
 800d652:	3301      	adds	r3, #1
 800d654:	6033      	str	r3, [r6, #0]
 800d656:	6823      	ldr	r3, [r4, #0]
 800d658:	0699      	lsls	r1, r3, #26
 800d65a:	bf42      	ittt	mi
 800d65c:	6833      	ldrmi	r3, [r6, #0]
 800d65e:	3302      	addmi	r3, #2
 800d660:	6033      	strmi	r3, [r6, #0]
 800d662:	6825      	ldr	r5, [r4, #0]
 800d664:	f015 0506 	ands.w	r5, r5, #6
 800d668:	d106      	bne.n	800d678 <_printf_common+0x48>
 800d66a:	f104 0a19 	add.w	sl, r4, #25
 800d66e:	68e3      	ldr	r3, [r4, #12]
 800d670:	6832      	ldr	r2, [r6, #0]
 800d672:	1a9b      	subs	r3, r3, r2
 800d674:	42ab      	cmp	r3, r5
 800d676:	dc26      	bgt.n	800d6c6 <_printf_common+0x96>
 800d678:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d67c:	6822      	ldr	r2, [r4, #0]
 800d67e:	3b00      	subs	r3, #0
 800d680:	bf18      	it	ne
 800d682:	2301      	movne	r3, #1
 800d684:	0692      	lsls	r2, r2, #26
 800d686:	d42b      	bmi.n	800d6e0 <_printf_common+0xb0>
 800d688:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d68c:	4641      	mov	r1, r8
 800d68e:	4638      	mov	r0, r7
 800d690:	47c8      	blx	r9
 800d692:	3001      	adds	r0, #1
 800d694:	d01e      	beq.n	800d6d4 <_printf_common+0xa4>
 800d696:	6823      	ldr	r3, [r4, #0]
 800d698:	6922      	ldr	r2, [r4, #16]
 800d69a:	f003 0306 	and.w	r3, r3, #6
 800d69e:	2b04      	cmp	r3, #4
 800d6a0:	bf02      	ittt	eq
 800d6a2:	68e5      	ldreq	r5, [r4, #12]
 800d6a4:	6833      	ldreq	r3, [r6, #0]
 800d6a6:	1aed      	subeq	r5, r5, r3
 800d6a8:	68a3      	ldr	r3, [r4, #8]
 800d6aa:	bf0c      	ite	eq
 800d6ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d6b0:	2500      	movne	r5, #0
 800d6b2:	4293      	cmp	r3, r2
 800d6b4:	bfc4      	itt	gt
 800d6b6:	1a9b      	subgt	r3, r3, r2
 800d6b8:	18ed      	addgt	r5, r5, r3
 800d6ba:	2600      	movs	r6, #0
 800d6bc:	341a      	adds	r4, #26
 800d6be:	42b5      	cmp	r5, r6
 800d6c0:	d11a      	bne.n	800d6f8 <_printf_common+0xc8>
 800d6c2:	2000      	movs	r0, #0
 800d6c4:	e008      	b.n	800d6d8 <_printf_common+0xa8>
 800d6c6:	2301      	movs	r3, #1
 800d6c8:	4652      	mov	r2, sl
 800d6ca:	4641      	mov	r1, r8
 800d6cc:	4638      	mov	r0, r7
 800d6ce:	47c8      	blx	r9
 800d6d0:	3001      	adds	r0, #1
 800d6d2:	d103      	bne.n	800d6dc <_printf_common+0xac>
 800d6d4:	f04f 30ff 	mov.w	r0, #4294967295
 800d6d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6dc:	3501      	adds	r5, #1
 800d6de:	e7c6      	b.n	800d66e <_printf_common+0x3e>
 800d6e0:	18e1      	adds	r1, r4, r3
 800d6e2:	1c5a      	adds	r2, r3, #1
 800d6e4:	2030      	movs	r0, #48	@ 0x30
 800d6e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d6ea:	4422      	add	r2, r4
 800d6ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d6f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d6f4:	3302      	adds	r3, #2
 800d6f6:	e7c7      	b.n	800d688 <_printf_common+0x58>
 800d6f8:	2301      	movs	r3, #1
 800d6fa:	4622      	mov	r2, r4
 800d6fc:	4641      	mov	r1, r8
 800d6fe:	4638      	mov	r0, r7
 800d700:	47c8      	blx	r9
 800d702:	3001      	adds	r0, #1
 800d704:	d0e6      	beq.n	800d6d4 <_printf_common+0xa4>
 800d706:	3601      	adds	r6, #1
 800d708:	e7d9      	b.n	800d6be <_printf_common+0x8e>
	...

0800d70c <_printf_i>:
 800d70c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d710:	7e0f      	ldrb	r7, [r1, #24]
 800d712:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d714:	2f78      	cmp	r7, #120	@ 0x78
 800d716:	4691      	mov	r9, r2
 800d718:	4680      	mov	r8, r0
 800d71a:	460c      	mov	r4, r1
 800d71c:	469a      	mov	sl, r3
 800d71e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d722:	d807      	bhi.n	800d734 <_printf_i+0x28>
 800d724:	2f62      	cmp	r7, #98	@ 0x62
 800d726:	d80a      	bhi.n	800d73e <_printf_i+0x32>
 800d728:	2f00      	cmp	r7, #0
 800d72a:	f000 80d2 	beq.w	800d8d2 <_printf_i+0x1c6>
 800d72e:	2f58      	cmp	r7, #88	@ 0x58
 800d730:	f000 80b9 	beq.w	800d8a6 <_printf_i+0x19a>
 800d734:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d738:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d73c:	e03a      	b.n	800d7b4 <_printf_i+0xa8>
 800d73e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d742:	2b15      	cmp	r3, #21
 800d744:	d8f6      	bhi.n	800d734 <_printf_i+0x28>
 800d746:	a101      	add	r1, pc, #4	@ (adr r1, 800d74c <_printf_i+0x40>)
 800d748:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d74c:	0800d7a5 	.word	0x0800d7a5
 800d750:	0800d7b9 	.word	0x0800d7b9
 800d754:	0800d735 	.word	0x0800d735
 800d758:	0800d735 	.word	0x0800d735
 800d75c:	0800d735 	.word	0x0800d735
 800d760:	0800d735 	.word	0x0800d735
 800d764:	0800d7b9 	.word	0x0800d7b9
 800d768:	0800d735 	.word	0x0800d735
 800d76c:	0800d735 	.word	0x0800d735
 800d770:	0800d735 	.word	0x0800d735
 800d774:	0800d735 	.word	0x0800d735
 800d778:	0800d8b9 	.word	0x0800d8b9
 800d77c:	0800d7e3 	.word	0x0800d7e3
 800d780:	0800d873 	.word	0x0800d873
 800d784:	0800d735 	.word	0x0800d735
 800d788:	0800d735 	.word	0x0800d735
 800d78c:	0800d8db 	.word	0x0800d8db
 800d790:	0800d735 	.word	0x0800d735
 800d794:	0800d7e3 	.word	0x0800d7e3
 800d798:	0800d735 	.word	0x0800d735
 800d79c:	0800d735 	.word	0x0800d735
 800d7a0:	0800d87b 	.word	0x0800d87b
 800d7a4:	6833      	ldr	r3, [r6, #0]
 800d7a6:	1d1a      	adds	r2, r3, #4
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	6032      	str	r2, [r6, #0]
 800d7ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d7b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d7b4:	2301      	movs	r3, #1
 800d7b6:	e09d      	b.n	800d8f4 <_printf_i+0x1e8>
 800d7b8:	6833      	ldr	r3, [r6, #0]
 800d7ba:	6820      	ldr	r0, [r4, #0]
 800d7bc:	1d19      	adds	r1, r3, #4
 800d7be:	6031      	str	r1, [r6, #0]
 800d7c0:	0606      	lsls	r6, r0, #24
 800d7c2:	d501      	bpl.n	800d7c8 <_printf_i+0xbc>
 800d7c4:	681d      	ldr	r5, [r3, #0]
 800d7c6:	e003      	b.n	800d7d0 <_printf_i+0xc4>
 800d7c8:	0645      	lsls	r5, r0, #25
 800d7ca:	d5fb      	bpl.n	800d7c4 <_printf_i+0xb8>
 800d7cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d7d0:	2d00      	cmp	r5, #0
 800d7d2:	da03      	bge.n	800d7dc <_printf_i+0xd0>
 800d7d4:	232d      	movs	r3, #45	@ 0x2d
 800d7d6:	426d      	negs	r5, r5
 800d7d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d7dc:	4859      	ldr	r0, [pc, #356]	@ (800d944 <_printf_i+0x238>)
 800d7de:	230a      	movs	r3, #10
 800d7e0:	e011      	b.n	800d806 <_printf_i+0xfa>
 800d7e2:	6821      	ldr	r1, [r4, #0]
 800d7e4:	6833      	ldr	r3, [r6, #0]
 800d7e6:	0608      	lsls	r0, r1, #24
 800d7e8:	f853 5b04 	ldr.w	r5, [r3], #4
 800d7ec:	d402      	bmi.n	800d7f4 <_printf_i+0xe8>
 800d7ee:	0649      	lsls	r1, r1, #25
 800d7f0:	bf48      	it	mi
 800d7f2:	b2ad      	uxthmi	r5, r5
 800d7f4:	2f6f      	cmp	r7, #111	@ 0x6f
 800d7f6:	4853      	ldr	r0, [pc, #332]	@ (800d944 <_printf_i+0x238>)
 800d7f8:	6033      	str	r3, [r6, #0]
 800d7fa:	bf14      	ite	ne
 800d7fc:	230a      	movne	r3, #10
 800d7fe:	2308      	moveq	r3, #8
 800d800:	2100      	movs	r1, #0
 800d802:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d806:	6866      	ldr	r6, [r4, #4]
 800d808:	60a6      	str	r6, [r4, #8]
 800d80a:	2e00      	cmp	r6, #0
 800d80c:	bfa2      	ittt	ge
 800d80e:	6821      	ldrge	r1, [r4, #0]
 800d810:	f021 0104 	bicge.w	r1, r1, #4
 800d814:	6021      	strge	r1, [r4, #0]
 800d816:	b90d      	cbnz	r5, 800d81c <_printf_i+0x110>
 800d818:	2e00      	cmp	r6, #0
 800d81a:	d04b      	beq.n	800d8b4 <_printf_i+0x1a8>
 800d81c:	4616      	mov	r6, r2
 800d81e:	fbb5 f1f3 	udiv	r1, r5, r3
 800d822:	fb03 5711 	mls	r7, r3, r1, r5
 800d826:	5dc7      	ldrb	r7, [r0, r7]
 800d828:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d82c:	462f      	mov	r7, r5
 800d82e:	42bb      	cmp	r3, r7
 800d830:	460d      	mov	r5, r1
 800d832:	d9f4      	bls.n	800d81e <_printf_i+0x112>
 800d834:	2b08      	cmp	r3, #8
 800d836:	d10b      	bne.n	800d850 <_printf_i+0x144>
 800d838:	6823      	ldr	r3, [r4, #0]
 800d83a:	07df      	lsls	r7, r3, #31
 800d83c:	d508      	bpl.n	800d850 <_printf_i+0x144>
 800d83e:	6923      	ldr	r3, [r4, #16]
 800d840:	6861      	ldr	r1, [r4, #4]
 800d842:	4299      	cmp	r1, r3
 800d844:	bfde      	ittt	le
 800d846:	2330      	movle	r3, #48	@ 0x30
 800d848:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d84c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d850:	1b92      	subs	r2, r2, r6
 800d852:	6122      	str	r2, [r4, #16]
 800d854:	f8cd a000 	str.w	sl, [sp]
 800d858:	464b      	mov	r3, r9
 800d85a:	aa03      	add	r2, sp, #12
 800d85c:	4621      	mov	r1, r4
 800d85e:	4640      	mov	r0, r8
 800d860:	f7ff fee6 	bl	800d630 <_printf_common>
 800d864:	3001      	adds	r0, #1
 800d866:	d14a      	bne.n	800d8fe <_printf_i+0x1f2>
 800d868:	f04f 30ff 	mov.w	r0, #4294967295
 800d86c:	b004      	add	sp, #16
 800d86e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d872:	6823      	ldr	r3, [r4, #0]
 800d874:	f043 0320 	orr.w	r3, r3, #32
 800d878:	6023      	str	r3, [r4, #0]
 800d87a:	4833      	ldr	r0, [pc, #204]	@ (800d948 <_printf_i+0x23c>)
 800d87c:	2778      	movs	r7, #120	@ 0x78
 800d87e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d882:	6823      	ldr	r3, [r4, #0]
 800d884:	6831      	ldr	r1, [r6, #0]
 800d886:	061f      	lsls	r7, r3, #24
 800d888:	f851 5b04 	ldr.w	r5, [r1], #4
 800d88c:	d402      	bmi.n	800d894 <_printf_i+0x188>
 800d88e:	065f      	lsls	r7, r3, #25
 800d890:	bf48      	it	mi
 800d892:	b2ad      	uxthmi	r5, r5
 800d894:	6031      	str	r1, [r6, #0]
 800d896:	07d9      	lsls	r1, r3, #31
 800d898:	bf44      	itt	mi
 800d89a:	f043 0320 	orrmi.w	r3, r3, #32
 800d89e:	6023      	strmi	r3, [r4, #0]
 800d8a0:	b11d      	cbz	r5, 800d8aa <_printf_i+0x19e>
 800d8a2:	2310      	movs	r3, #16
 800d8a4:	e7ac      	b.n	800d800 <_printf_i+0xf4>
 800d8a6:	4827      	ldr	r0, [pc, #156]	@ (800d944 <_printf_i+0x238>)
 800d8a8:	e7e9      	b.n	800d87e <_printf_i+0x172>
 800d8aa:	6823      	ldr	r3, [r4, #0]
 800d8ac:	f023 0320 	bic.w	r3, r3, #32
 800d8b0:	6023      	str	r3, [r4, #0]
 800d8b2:	e7f6      	b.n	800d8a2 <_printf_i+0x196>
 800d8b4:	4616      	mov	r6, r2
 800d8b6:	e7bd      	b.n	800d834 <_printf_i+0x128>
 800d8b8:	6833      	ldr	r3, [r6, #0]
 800d8ba:	6825      	ldr	r5, [r4, #0]
 800d8bc:	6961      	ldr	r1, [r4, #20]
 800d8be:	1d18      	adds	r0, r3, #4
 800d8c0:	6030      	str	r0, [r6, #0]
 800d8c2:	062e      	lsls	r6, r5, #24
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	d501      	bpl.n	800d8cc <_printf_i+0x1c0>
 800d8c8:	6019      	str	r1, [r3, #0]
 800d8ca:	e002      	b.n	800d8d2 <_printf_i+0x1c6>
 800d8cc:	0668      	lsls	r0, r5, #25
 800d8ce:	d5fb      	bpl.n	800d8c8 <_printf_i+0x1bc>
 800d8d0:	8019      	strh	r1, [r3, #0]
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	6123      	str	r3, [r4, #16]
 800d8d6:	4616      	mov	r6, r2
 800d8d8:	e7bc      	b.n	800d854 <_printf_i+0x148>
 800d8da:	6833      	ldr	r3, [r6, #0]
 800d8dc:	1d1a      	adds	r2, r3, #4
 800d8de:	6032      	str	r2, [r6, #0]
 800d8e0:	681e      	ldr	r6, [r3, #0]
 800d8e2:	6862      	ldr	r2, [r4, #4]
 800d8e4:	2100      	movs	r1, #0
 800d8e6:	4630      	mov	r0, r6
 800d8e8:	f7f2 fc82 	bl	80001f0 <memchr>
 800d8ec:	b108      	cbz	r0, 800d8f2 <_printf_i+0x1e6>
 800d8ee:	1b80      	subs	r0, r0, r6
 800d8f0:	6060      	str	r0, [r4, #4]
 800d8f2:	6863      	ldr	r3, [r4, #4]
 800d8f4:	6123      	str	r3, [r4, #16]
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d8fc:	e7aa      	b.n	800d854 <_printf_i+0x148>
 800d8fe:	6923      	ldr	r3, [r4, #16]
 800d900:	4632      	mov	r2, r6
 800d902:	4649      	mov	r1, r9
 800d904:	4640      	mov	r0, r8
 800d906:	47d0      	blx	sl
 800d908:	3001      	adds	r0, #1
 800d90a:	d0ad      	beq.n	800d868 <_printf_i+0x15c>
 800d90c:	6823      	ldr	r3, [r4, #0]
 800d90e:	079b      	lsls	r3, r3, #30
 800d910:	d413      	bmi.n	800d93a <_printf_i+0x22e>
 800d912:	68e0      	ldr	r0, [r4, #12]
 800d914:	9b03      	ldr	r3, [sp, #12]
 800d916:	4298      	cmp	r0, r3
 800d918:	bfb8      	it	lt
 800d91a:	4618      	movlt	r0, r3
 800d91c:	e7a6      	b.n	800d86c <_printf_i+0x160>
 800d91e:	2301      	movs	r3, #1
 800d920:	4632      	mov	r2, r6
 800d922:	4649      	mov	r1, r9
 800d924:	4640      	mov	r0, r8
 800d926:	47d0      	blx	sl
 800d928:	3001      	adds	r0, #1
 800d92a:	d09d      	beq.n	800d868 <_printf_i+0x15c>
 800d92c:	3501      	adds	r5, #1
 800d92e:	68e3      	ldr	r3, [r4, #12]
 800d930:	9903      	ldr	r1, [sp, #12]
 800d932:	1a5b      	subs	r3, r3, r1
 800d934:	42ab      	cmp	r3, r5
 800d936:	dcf2      	bgt.n	800d91e <_printf_i+0x212>
 800d938:	e7eb      	b.n	800d912 <_printf_i+0x206>
 800d93a:	2500      	movs	r5, #0
 800d93c:	f104 0619 	add.w	r6, r4, #25
 800d940:	e7f5      	b.n	800d92e <_printf_i+0x222>
 800d942:	bf00      	nop
 800d944:	0801046a 	.word	0x0801046a
 800d948:	0801047b 	.word	0x0801047b

0800d94c <std>:
 800d94c:	2300      	movs	r3, #0
 800d94e:	b510      	push	{r4, lr}
 800d950:	4604      	mov	r4, r0
 800d952:	e9c0 3300 	strd	r3, r3, [r0]
 800d956:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d95a:	6083      	str	r3, [r0, #8]
 800d95c:	8181      	strh	r1, [r0, #12]
 800d95e:	6643      	str	r3, [r0, #100]	@ 0x64
 800d960:	81c2      	strh	r2, [r0, #14]
 800d962:	6183      	str	r3, [r0, #24]
 800d964:	4619      	mov	r1, r3
 800d966:	2208      	movs	r2, #8
 800d968:	305c      	adds	r0, #92	@ 0x5c
 800d96a:	f000 f948 	bl	800dbfe <memset>
 800d96e:	4b0d      	ldr	r3, [pc, #52]	@ (800d9a4 <std+0x58>)
 800d970:	6263      	str	r3, [r4, #36]	@ 0x24
 800d972:	4b0d      	ldr	r3, [pc, #52]	@ (800d9a8 <std+0x5c>)
 800d974:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d976:	4b0d      	ldr	r3, [pc, #52]	@ (800d9ac <std+0x60>)
 800d978:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d97a:	4b0d      	ldr	r3, [pc, #52]	@ (800d9b0 <std+0x64>)
 800d97c:	6323      	str	r3, [r4, #48]	@ 0x30
 800d97e:	4b0d      	ldr	r3, [pc, #52]	@ (800d9b4 <std+0x68>)
 800d980:	6224      	str	r4, [r4, #32]
 800d982:	429c      	cmp	r4, r3
 800d984:	d006      	beq.n	800d994 <std+0x48>
 800d986:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d98a:	4294      	cmp	r4, r2
 800d98c:	d002      	beq.n	800d994 <std+0x48>
 800d98e:	33d0      	adds	r3, #208	@ 0xd0
 800d990:	429c      	cmp	r4, r3
 800d992:	d105      	bne.n	800d9a0 <std+0x54>
 800d994:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d99c:	f000 ba12 	b.w	800ddc4 <__retarget_lock_init_recursive>
 800d9a0:	bd10      	pop	{r4, pc}
 800d9a2:	bf00      	nop
 800d9a4:	0800db79 	.word	0x0800db79
 800d9a8:	0800db9b 	.word	0x0800db9b
 800d9ac:	0800dbd3 	.word	0x0800dbd3
 800d9b0:	0800dbf7 	.word	0x0800dbf7
 800d9b4:	20012eb8 	.word	0x20012eb8

0800d9b8 <stdio_exit_handler>:
 800d9b8:	4a02      	ldr	r2, [pc, #8]	@ (800d9c4 <stdio_exit_handler+0xc>)
 800d9ba:	4903      	ldr	r1, [pc, #12]	@ (800d9c8 <stdio_exit_handler+0x10>)
 800d9bc:	4803      	ldr	r0, [pc, #12]	@ (800d9cc <stdio_exit_handler+0x14>)
 800d9be:	f000 b869 	b.w	800da94 <_fwalk_sglue>
 800d9c2:	bf00      	nop
 800d9c4:	200001cc 	.word	0x200001cc
 800d9c8:	0800f5e1 	.word	0x0800f5e1
 800d9cc:	200001dc 	.word	0x200001dc

0800d9d0 <cleanup_stdio>:
 800d9d0:	6841      	ldr	r1, [r0, #4]
 800d9d2:	4b0c      	ldr	r3, [pc, #48]	@ (800da04 <cleanup_stdio+0x34>)
 800d9d4:	4299      	cmp	r1, r3
 800d9d6:	b510      	push	{r4, lr}
 800d9d8:	4604      	mov	r4, r0
 800d9da:	d001      	beq.n	800d9e0 <cleanup_stdio+0x10>
 800d9dc:	f001 fe00 	bl	800f5e0 <_fflush_r>
 800d9e0:	68a1      	ldr	r1, [r4, #8]
 800d9e2:	4b09      	ldr	r3, [pc, #36]	@ (800da08 <cleanup_stdio+0x38>)
 800d9e4:	4299      	cmp	r1, r3
 800d9e6:	d002      	beq.n	800d9ee <cleanup_stdio+0x1e>
 800d9e8:	4620      	mov	r0, r4
 800d9ea:	f001 fdf9 	bl	800f5e0 <_fflush_r>
 800d9ee:	68e1      	ldr	r1, [r4, #12]
 800d9f0:	4b06      	ldr	r3, [pc, #24]	@ (800da0c <cleanup_stdio+0x3c>)
 800d9f2:	4299      	cmp	r1, r3
 800d9f4:	d004      	beq.n	800da00 <cleanup_stdio+0x30>
 800d9f6:	4620      	mov	r0, r4
 800d9f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d9fc:	f001 bdf0 	b.w	800f5e0 <_fflush_r>
 800da00:	bd10      	pop	{r4, pc}
 800da02:	bf00      	nop
 800da04:	20012eb8 	.word	0x20012eb8
 800da08:	20012f20 	.word	0x20012f20
 800da0c:	20012f88 	.word	0x20012f88

0800da10 <global_stdio_init.part.0>:
 800da10:	b510      	push	{r4, lr}
 800da12:	4b0b      	ldr	r3, [pc, #44]	@ (800da40 <global_stdio_init.part.0+0x30>)
 800da14:	4c0b      	ldr	r4, [pc, #44]	@ (800da44 <global_stdio_init.part.0+0x34>)
 800da16:	4a0c      	ldr	r2, [pc, #48]	@ (800da48 <global_stdio_init.part.0+0x38>)
 800da18:	601a      	str	r2, [r3, #0]
 800da1a:	4620      	mov	r0, r4
 800da1c:	2200      	movs	r2, #0
 800da1e:	2104      	movs	r1, #4
 800da20:	f7ff ff94 	bl	800d94c <std>
 800da24:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800da28:	2201      	movs	r2, #1
 800da2a:	2109      	movs	r1, #9
 800da2c:	f7ff ff8e 	bl	800d94c <std>
 800da30:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800da34:	2202      	movs	r2, #2
 800da36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da3a:	2112      	movs	r1, #18
 800da3c:	f7ff bf86 	b.w	800d94c <std>
 800da40:	20012ff0 	.word	0x20012ff0
 800da44:	20012eb8 	.word	0x20012eb8
 800da48:	0800d9b9 	.word	0x0800d9b9

0800da4c <__sfp_lock_acquire>:
 800da4c:	4801      	ldr	r0, [pc, #4]	@ (800da54 <__sfp_lock_acquire+0x8>)
 800da4e:	f000 b9ba 	b.w	800ddc6 <__retarget_lock_acquire_recursive>
 800da52:	bf00      	nop
 800da54:	20012ff9 	.word	0x20012ff9

0800da58 <__sfp_lock_release>:
 800da58:	4801      	ldr	r0, [pc, #4]	@ (800da60 <__sfp_lock_release+0x8>)
 800da5a:	f000 b9b5 	b.w	800ddc8 <__retarget_lock_release_recursive>
 800da5e:	bf00      	nop
 800da60:	20012ff9 	.word	0x20012ff9

0800da64 <__sinit>:
 800da64:	b510      	push	{r4, lr}
 800da66:	4604      	mov	r4, r0
 800da68:	f7ff fff0 	bl	800da4c <__sfp_lock_acquire>
 800da6c:	6a23      	ldr	r3, [r4, #32]
 800da6e:	b11b      	cbz	r3, 800da78 <__sinit+0x14>
 800da70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da74:	f7ff bff0 	b.w	800da58 <__sfp_lock_release>
 800da78:	4b04      	ldr	r3, [pc, #16]	@ (800da8c <__sinit+0x28>)
 800da7a:	6223      	str	r3, [r4, #32]
 800da7c:	4b04      	ldr	r3, [pc, #16]	@ (800da90 <__sinit+0x2c>)
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d1f5      	bne.n	800da70 <__sinit+0xc>
 800da84:	f7ff ffc4 	bl	800da10 <global_stdio_init.part.0>
 800da88:	e7f2      	b.n	800da70 <__sinit+0xc>
 800da8a:	bf00      	nop
 800da8c:	0800d9d1 	.word	0x0800d9d1
 800da90:	20012ff0 	.word	0x20012ff0

0800da94 <_fwalk_sglue>:
 800da94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da98:	4607      	mov	r7, r0
 800da9a:	4688      	mov	r8, r1
 800da9c:	4614      	mov	r4, r2
 800da9e:	2600      	movs	r6, #0
 800daa0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800daa4:	f1b9 0901 	subs.w	r9, r9, #1
 800daa8:	d505      	bpl.n	800dab6 <_fwalk_sglue+0x22>
 800daaa:	6824      	ldr	r4, [r4, #0]
 800daac:	2c00      	cmp	r4, #0
 800daae:	d1f7      	bne.n	800daa0 <_fwalk_sglue+0xc>
 800dab0:	4630      	mov	r0, r6
 800dab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dab6:	89ab      	ldrh	r3, [r5, #12]
 800dab8:	2b01      	cmp	r3, #1
 800daba:	d907      	bls.n	800dacc <_fwalk_sglue+0x38>
 800dabc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dac0:	3301      	adds	r3, #1
 800dac2:	d003      	beq.n	800dacc <_fwalk_sglue+0x38>
 800dac4:	4629      	mov	r1, r5
 800dac6:	4638      	mov	r0, r7
 800dac8:	47c0      	blx	r8
 800daca:	4306      	orrs	r6, r0
 800dacc:	3568      	adds	r5, #104	@ 0x68
 800dace:	e7e9      	b.n	800daa4 <_fwalk_sglue+0x10>

0800dad0 <sniprintf>:
 800dad0:	b40c      	push	{r2, r3}
 800dad2:	b530      	push	{r4, r5, lr}
 800dad4:	4b17      	ldr	r3, [pc, #92]	@ (800db34 <sniprintf+0x64>)
 800dad6:	1e0c      	subs	r4, r1, #0
 800dad8:	681d      	ldr	r5, [r3, #0]
 800dada:	b09d      	sub	sp, #116	@ 0x74
 800dadc:	da08      	bge.n	800daf0 <sniprintf+0x20>
 800dade:	238b      	movs	r3, #139	@ 0x8b
 800dae0:	602b      	str	r3, [r5, #0]
 800dae2:	f04f 30ff 	mov.w	r0, #4294967295
 800dae6:	b01d      	add	sp, #116	@ 0x74
 800dae8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800daec:	b002      	add	sp, #8
 800daee:	4770      	bx	lr
 800daf0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800daf4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800daf8:	bf14      	ite	ne
 800dafa:	f104 33ff 	addne.w	r3, r4, #4294967295
 800dafe:	4623      	moveq	r3, r4
 800db00:	9304      	str	r3, [sp, #16]
 800db02:	9307      	str	r3, [sp, #28]
 800db04:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800db08:	9002      	str	r0, [sp, #8]
 800db0a:	9006      	str	r0, [sp, #24]
 800db0c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800db10:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800db12:	ab21      	add	r3, sp, #132	@ 0x84
 800db14:	a902      	add	r1, sp, #8
 800db16:	4628      	mov	r0, r5
 800db18:	9301      	str	r3, [sp, #4]
 800db1a:	f001 fbe1 	bl	800f2e0 <_svfiprintf_r>
 800db1e:	1c43      	adds	r3, r0, #1
 800db20:	bfbc      	itt	lt
 800db22:	238b      	movlt	r3, #139	@ 0x8b
 800db24:	602b      	strlt	r3, [r5, #0]
 800db26:	2c00      	cmp	r4, #0
 800db28:	d0dd      	beq.n	800dae6 <sniprintf+0x16>
 800db2a:	9b02      	ldr	r3, [sp, #8]
 800db2c:	2200      	movs	r2, #0
 800db2e:	701a      	strb	r2, [r3, #0]
 800db30:	e7d9      	b.n	800dae6 <sniprintf+0x16>
 800db32:	bf00      	nop
 800db34:	200001d8 	.word	0x200001d8

0800db38 <siprintf>:
 800db38:	b40e      	push	{r1, r2, r3}
 800db3a:	b500      	push	{lr}
 800db3c:	b09c      	sub	sp, #112	@ 0x70
 800db3e:	ab1d      	add	r3, sp, #116	@ 0x74
 800db40:	9002      	str	r0, [sp, #8]
 800db42:	9006      	str	r0, [sp, #24]
 800db44:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800db48:	4809      	ldr	r0, [pc, #36]	@ (800db70 <siprintf+0x38>)
 800db4a:	9107      	str	r1, [sp, #28]
 800db4c:	9104      	str	r1, [sp, #16]
 800db4e:	4909      	ldr	r1, [pc, #36]	@ (800db74 <siprintf+0x3c>)
 800db50:	f853 2b04 	ldr.w	r2, [r3], #4
 800db54:	9105      	str	r1, [sp, #20]
 800db56:	6800      	ldr	r0, [r0, #0]
 800db58:	9301      	str	r3, [sp, #4]
 800db5a:	a902      	add	r1, sp, #8
 800db5c:	f001 fbc0 	bl	800f2e0 <_svfiprintf_r>
 800db60:	9b02      	ldr	r3, [sp, #8]
 800db62:	2200      	movs	r2, #0
 800db64:	701a      	strb	r2, [r3, #0]
 800db66:	b01c      	add	sp, #112	@ 0x70
 800db68:	f85d eb04 	ldr.w	lr, [sp], #4
 800db6c:	b003      	add	sp, #12
 800db6e:	4770      	bx	lr
 800db70:	200001d8 	.word	0x200001d8
 800db74:	ffff0208 	.word	0xffff0208

0800db78 <__sread>:
 800db78:	b510      	push	{r4, lr}
 800db7a:	460c      	mov	r4, r1
 800db7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db80:	f000 f8c2 	bl	800dd08 <_read_r>
 800db84:	2800      	cmp	r0, #0
 800db86:	bfab      	itete	ge
 800db88:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800db8a:	89a3      	ldrhlt	r3, [r4, #12]
 800db8c:	181b      	addge	r3, r3, r0
 800db8e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800db92:	bfac      	ite	ge
 800db94:	6563      	strge	r3, [r4, #84]	@ 0x54
 800db96:	81a3      	strhlt	r3, [r4, #12]
 800db98:	bd10      	pop	{r4, pc}

0800db9a <__swrite>:
 800db9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db9e:	461f      	mov	r7, r3
 800dba0:	898b      	ldrh	r3, [r1, #12]
 800dba2:	05db      	lsls	r3, r3, #23
 800dba4:	4605      	mov	r5, r0
 800dba6:	460c      	mov	r4, r1
 800dba8:	4616      	mov	r6, r2
 800dbaa:	d505      	bpl.n	800dbb8 <__swrite+0x1e>
 800dbac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbb0:	2302      	movs	r3, #2
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	f000 f896 	bl	800dce4 <_lseek_r>
 800dbb8:	89a3      	ldrh	r3, [r4, #12]
 800dbba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dbbe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dbc2:	81a3      	strh	r3, [r4, #12]
 800dbc4:	4632      	mov	r2, r6
 800dbc6:	463b      	mov	r3, r7
 800dbc8:	4628      	mov	r0, r5
 800dbca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dbce:	f000 b8bd 	b.w	800dd4c <_write_r>

0800dbd2 <__sseek>:
 800dbd2:	b510      	push	{r4, lr}
 800dbd4:	460c      	mov	r4, r1
 800dbd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbda:	f000 f883 	bl	800dce4 <_lseek_r>
 800dbde:	1c43      	adds	r3, r0, #1
 800dbe0:	89a3      	ldrh	r3, [r4, #12]
 800dbe2:	bf15      	itete	ne
 800dbe4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800dbe6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800dbea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800dbee:	81a3      	strheq	r3, [r4, #12]
 800dbf0:	bf18      	it	ne
 800dbf2:	81a3      	strhne	r3, [r4, #12]
 800dbf4:	bd10      	pop	{r4, pc}

0800dbf6 <__sclose>:
 800dbf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbfa:	f000 b80d 	b.w	800dc18 <_close_r>

0800dbfe <memset>:
 800dbfe:	4402      	add	r2, r0
 800dc00:	4603      	mov	r3, r0
 800dc02:	4293      	cmp	r3, r2
 800dc04:	d100      	bne.n	800dc08 <memset+0xa>
 800dc06:	4770      	bx	lr
 800dc08:	f803 1b01 	strb.w	r1, [r3], #1
 800dc0c:	e7f9      	b.n	800dc02 <memset+0x4>
	...

0800dc10 <_localeconv_r>:
 800dc10:	4800      	ldr	r0, [pc, #0]	@ (800dc14 <_localeconv_r+0x4>)
 800dc12:	4770      	bx	lr
 800dc14:	20000318 	.word	0x20000318

0800dc18 <_close_r>:
 800dc18:	b538      	push	{r3, r4, r5, lr}
 800dc1a:	4d06      	ldr	r5, [pc, #24]	@ (800dc34 <_close_r+0x1c>)
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	4604      	mov	r4, r0
 800dc20:	4608      	mov	r0, r1
 800dc22:	602b      	str	r3, [r5, #0]
 800dc24:	f7f5 fc9e 	bl	8003564 <_close>
 800dc28:	1c43      	adds	r3, r0, #1
 800dc2a:	d102      	bne.n	800dc32 <_close_r+0x1a>
 800dc2c:	682b      	ldr	r3, [r5, #0]
 800dc2e:	b103      	cbz	r3, 800dc32 <_close_r+0x1a>
 800dc30:	6023      	str	r3, [r4, #0]
 800dc32:	bd38      	pop	{r3, r4, r5, pc}
 800dc34:	20012ff4 	.word	0x20012ff4

0800dc38 <_reclaim_reent>:
 800dc38:	4b29      	ldr	r3, [pc, #164]	@ (800dce0 <_reclaim_reent+0xa8>)
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	4283      	cmp	r3, r0
 800dc3e:	b570      	push	{r4, r5, r6, lr}
 800dc40:	4604      	mov	r4, r0
 800dc42:	d04b      	beq.n	800dcdc <_reclaim_reent+0xa4>
 800dc44:	69c3      	ldr	r3, [r0, #28]
 800dc46:	b1ab      	cbz	r3, 800dc74 <_reclaim_reent+0x3c>
 800dc48:	68db      	ldr	r3, [r3, #12]
 800dc4a:	b16b      	cbz	r3, 800dc68 <_reclaim_reent+0x30>
 800dc4c:	2500      	movs	r5, #0
 800dc4e:	69e3      	ldr	r3, [r4, #28]
 800dc50:	68db      	ldr	r3, [r3, #12]
 800dc52:	5959      	ldr	r1, [r3, r5]
 800dc54:	2900      	cmp	r1, #0
 800dc56:	d13b      	bne.n	800dcd0 <_reclaim_reent+0x98>
 800dc58:	3504      	adds	r5, #4
 800dc5a:	2d80      	cmp	r5, #128	@ 0x80
 800dc5c:	d1f7      	bne.n	800dc4e <_reclaim_reent+0x16>
 800dc5e:	69e3      	ldr	r3, [r4, #28]
 800dc60:	4620      	mov	r0, r4
 800dc62:	68d9      	ldr	r1, [r3, #12]
 800dc64:	f000 ff0c 	bl	800ea80 <_free_r>
 800dc68:	69e3      	ldr	r3, [r4, #28]
 800dc6a:	6819      	ldr	r1, [r3, #0]
 800dc6c:	b111      	cbz	r1, 800dc74 <_reclaim_reent+0x3c>
 800dc6e:	4620      	mov	r0, r4
 800dc70:	f000 ff06 	bl	800ea80 <_free_r>
 800dc74:	6961      	ldr	r1, [r4, #20]
 800dc76:	b111      	cbz	r1, 800dc7e <_reclaim_reent+0x46>
 800dc78:	4620      	mov	r0, r4
 800dc7a:	f000 ff01 	bl	800ea80 <_free_r>
 800dc7e:	69e1      	ldr	r1, [r4, #28]
 800dc80:	b111      	cbz	r1, 800dc88 <_reclaim_reent+0x50>
 800dc82:	4620      	mov	r0, r4
 800dc84:	f000 fefc 	bl	800ea80 <_free_r>
 800dc88:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800dc8a:	b111      	cbz	r1, 800dc92 <_reclaim_reent+0x5a>
 800dc8c:	4620      	mov	r0, r4
 800dc8e:	f000 fef7 	bl	800ea80 <_free_r>
 800dc92:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dc94:	b111      	cbz	r1, 800dc9c <_reclaim_reent+0x64>
 800dc96:	4620      	mov	r0, r4
 800dc98:	f000 fef2 	bl	800ea80 <_free_r>
 800dc9c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800dc9e:	b111      	cbz	r1, 800dca6 <_reclaim_reent+0x6e>
 800dca0:	4620      	mov	r0, r4
 800dca2:	f000 feed 	bl	800ea80 <_free_r>
 800dca6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800dca8:	b111      	cbz	r1, 800dcb0 <_reclaim_reent+0x78>
 800dcaa:	4620      	mov	r0, r4
 800dcac:	f000 fee8 	bl	800ea80 <_free_r>
 800dcb0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800dcb2:	b111      	cbz	r1, 800dcba <_reclaim_reent+0x82>
 800dcb4:	4620      	mov	r0, r4
 800dcb6:	f000 fee3 	bl	800ea80 <_free_r>
 800dcba:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800dcbc:	b111      	cbz	r1, 800dcc4 <_reclaim_reent+0x8c>
 800dcbe:	4620      	mov	r0, r4
 800dcc0:	f000 fede 	bl	800ea80 <_free_r>
 800dcc4:	6a23      	ldr	r3, [r4, #32]
 800dcc6:	b14b      	cbz	r3, 800dcdc <_reclaim_reent+0xa4>
 800dcc8:	4620      	mov	r0, r4
 800dcca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dcce:	4718      	bx	r3
 800dcd0:	680e      	ldr	r6, [r1, #0]
 800dcd2:	4620      	mov	r0, r4
 800dcd4:	f000 fed4 	bl	800ea80 <_free_r>
 800dcd8:	4631      	mov	r1, r6
 800dcda:	e7bb      	b.n	800dc54 <_reclaim_reent+0x1c>
 800dcdc:	bd70      	pop	{r4, r5, r6, pc}
 800dcde:	bf00      	nop
 800dce0:	200001d8 	.word	0x200001d8

0800dce4 <_lseek_r>:
 800dce4:	b538      	push	{r3, r4, r5, lr}
 800dce6:	4d07      	ldr	r5, [pc, #28]	@ (800dd04 <_lseek_r+0x20>)
 800dce8:	4604      	mov	r4, r0
 800dcea:	4608      	mov	r0, r1
 800dcec:	4611      	mov	r1, r2
 800dcee:	2200      	movs	r2, #0
 800dcf0:	602a      	str	r2, [r5, #0]
 800dcf2:	461a      	mov	r2, r3
 800dcf4:	f7f5 fc5d 	bl	80035b2 <_lseek>
 800dcf8:	1c43      	adds	r3, r0, #1
 800dcfa:	d102      	bne.n	800dd02 <_lseek_r+0x1e>
 800dcfc:	682b      	ldr	r3, [r5, #0]
 800dcfe:	b103      	cbz	r3, 800dd02 <_lseek_r+0x1e>
 800dd00:	6023      	str	r3, [r4, #0]
 800dd02:	bd38      	pop	{r3, r4, r5, pc}
 800dd04:	20012ff4 	.word	0x20012ff4

0800dd08 <_read_r>:
 800dd08:	b538      	push	{r3, r4, r5, lr}
 800dd0a:	4d07      	ldr	r5, [pc, #28]	@ (800dd28 <_read_r+0x20>)
 800dd0c:	4604      	mov	r4, r0
 800dd0e:	4608      	mov	r0, r1
 800dd10:	4611      	mov	r1, r2
 800dd12:	2200      	movs	r2, #0
 800dd14:	602a      	str	r2, [r5, #0]
 800dd16:	461a      	mov	r2, r3
 800dd18:	f7f5 fbeb 	bl	80034f2 <_read>
 800dd1c:	1c43      	adds	r3, r0, #1
 800dd1e:	d102      	bne.n	800dd26 <_read_r+0x1e>
 800dd20:	682b      	ldr	r3, [r5, #0]
 800dd22:	b103      	cbz	r3, 800dd26 <_read_r+0x1e>
 800dd24:	6023      	str	r3, [r4, #0]
 800dd26:	bd38      	pop	{r3, r4, r5, pc}
 800dd28:	20012ff4 	.word	0x20012ff4

0800dd2c <_sbrk_r>:
 800dd2c:	b538      	push	{r3, r4, r5, lr}
 800dd2e:	4d06      	ldr	r5, [pc, #24]	@ (800dd48 <_sbrk_r+0x1c>)
 800dd30:	2300      	movs	r3, #0
 800dd32:	4604      	mov	r4, r0
 800dd34:	4608      	mov	r0, r1
 800dd36:	602b      	str	r3, [r5, #0]
 800dd38:	f7f5 fc48 	bl	80035cc <_sbrk>
 800dd3c:	1c43      	adds	r3, r0, #1
 800dd3e:	d102      	bne.n	800dd46 <_sbrk_r+0x1a>
 800dd40:	682b      	ldr	r3, [r5, #0]
 800dd42:	b103      	cbz	r3, 800dd46 <_sbrk_r+0x1a>
 800dd44:	6023      	str	r3, [r4, #0]
 800dd46:	bd38      	pop	{r3, r4, r5, pc}
 800dd48:	20012ff4 	.word	0x20012ff4

0800dd4c <_write_r>:
 800dd4c:	b538      	push	{r3, r4, r5, lr}
 800dd4e:	4d07      	ldr	r5, [pc, #28]	@ (800dd6c <_write_r+0x20>)
 800dd50:	4604      	mov	r4, r0
 800dd52:	4608      	mov	r0, r1
 800dd54:	4611      	mov	r1, r2
 800dd56:	2200      	movs	r2, #0
 800dd58:	602a      	str	r2, [r5, #0]
 800dd5a:	461a      	mov	r2, r3
 800dd5c:	f7f5 fbe6 	bl	800352c <_write>
 800dd60:	1c43      	adds	r3, r0, #1
 800dd62:	d102      	bne.n	800dd6a <_write_r+0x1e>
 800dd64:	682b      	ldr	r3, [r5, #0]
 800dd66:	b103      	cbz	r3, 800dd6a <_write_r+0x1e>
 800dd68:	6023      	str	r3, [r4, #0]
 800dd6a:	bd38      	pop	{r3, r4, r5, pc}
 800dd6c:	20012ff4 	.word	0x20012ff4

0800dd70 <__errno>:
 800dd70:	4b01      	ldr	r3, [pc, #4]	@ (800dd78 <__errno+0x8>)
 800dd72:	6818      	ldr	r0, [r3, #0]
 800dd74:	4770      	bx	lr
 800dd76:	bf00      	nop
 800dd78:	200001d8 	.word	0x200001d8

0800dd7c <__libc_init_array>:
 800dd7c:	b570      	push	{r4, r5, r6, lr}
 800dd7e:	4d0d      	ldr	r5, [pc, #52]	@ (800ddb4 <__libc_init_array+0x38>)
 800dd80:	4c0d      	ldr	r4, [pc, #52]	@ (800ddb8 <__libc_init_array+0x3c>)
 800dd82:	1b64      	subs	r4, r4, r5
 800dd84:	10a4      	asrs	r4, r4, #2
 800dd86:	2600      	movs	r6, #0
 800dd88:	42a6      	cmp	r6, r4
 800dd8a:	d109      	bne.n	800dda0 <__libc_init_array+0x24>
 800dd8c:	4d0b      	ldr	r5, [pc, #44]	@ (800ddbc <__libc_init_array+0x40>)
 800dd8e:	4c0c      	ldr	r4, [pc, #48]	@ (800ddc0 <__libc_init_array+0x44>)
 800dd90:	f001 ff70 	bl	800fc74 <_init>
 800dd94:	1b64      	subs	r4, r4, r5
 800dd96:	10a4      	asrs	r4, r4, #2
 800dd98:	2600      	movs	r6, #0
 800dd9a:	42a6      	cmp	r6, r4
 800dd9c:	d105      	bne.n	800ddaa <__libc_init_array+0x2e>
 800dd9e:	bd70      	pop	{r4, r5, r6, pc}
 800dda0:	f855 3b04 	ldr.w	r3, [r5], #4
 800dda4:	4798      	blx	r3
 800dda6:	3601      	adds	r6, #1
 800dda8:	e7ee      	b.n	800dd88 <__libc_init_array+0xc>
 800ddaa:	f855 3b04 	ldr.w	r3, [r5], #4
 800ddae:	4798      	blx	r3
 800ddb0:	3601      	adds	r6, #1
 800ddb2:	e7f2      	b.n	800dd9a <__libc_init_array+0x1e>
 800ddb4:	080107d0 	.word	0x080107d0
 800ddb8:	080107d0 	.word	0x080107d0
 800ddbc:	080107d0 	.word	0x080107d0
 800ddc0:	080107d4 	.word	0x080107d4

0800ddc4 <__retarget_lock_init_recursive>:
 800ddc4:	4770      	bx	lr

0800ddc6 <__retarget_lock_acquire_recursive>:
 800ddc6:	4770      	bx	lr

0800ddc8 <__retarget_lock_release_recursive>:
 800ddc8:	4770      	bx	lr

0800ddca <memcpy>:
 800ddca:	440a      	add	r2, r1
 800ddcc:	4291      	cmp	r1, r2
 800ddce:	f100 33ff 	add.w	r3, r0, #4294967295
 800ddd2:	d100      	bne.n	800ddd6 <memcpy+0xc>
 800ddd4:	4770      	bx	lr
 800ddd6:	b510      	push	{r4, lr}
 800ddd8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dddc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dde0:	4291      	cmp	r1, r2
 800dde2:	d1f9      	bne.n	800ddd8 <memcpy+0xe>
 800dde4:	bd10      	pop	{r4, pc}

0800dde6 <quorem>:
 800dde6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddea:	6903      	ldr	r3, [r0, #16]
 800ddec:	690c      	ldr	r4, [r1, #16]
 800ddee:	42a3      	cmp	r3, r4
 800ddf0:	4607      	mov	r7, r0
 800ddf2:	db7e      	blt.n	800def2 <quorem+0x10c>
 800ddf4:	3c01      	subs	r4, #1
 800ddf6:	f101 0814 	add.w	r8, r1, #20
 800ddfa:	00a3      	lsls	r3, r4, #2
 800ddfc:	f100 0514 	add.w	r5, r0, #20
 800de00:	9300      	str	r3, [sp, #0]
 800de02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800de06:	9301      	str	r3, [sp, #4]
 800de08:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800de0c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800de10:	3301      	adds	r3, #1
 800de12:	429a      	cmp	r2, r3
 800de14:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800de18:	fbb2 f6f3 	udiv	r6, r2, r3
 800de1c:	d32e      	bcc.n	800de7c <quorem+0x96>
 800de1e:	f04f 0a00 	mov.w	sl, #0
 800de22:	46c4      	mov	ip, r8
 800de24:	46ae      	mov	lr, r5
 800de26:	46d3      	mov	fp, sl
 800de28:	f85c 3b04 	ldr.w	r3, [ip], #4
 800de2c:	b298      	uxth	r0, r3
 800de2e:	fb06 a000 	mla	r0, r6, r0, sl
 800de32:	0c02      	lsrs	r2, r0, #16
 800de34:	0c1b      	lsrs	r3, r3, #16
 800de36:	fb06 2303 	mla	r3, r6, r3, r2
 800de3a:	f8de 2000 	ldr.w	r2, [lr]
 800de3e:	b280      	uxth	r0, r0
 800de40:	b292      	uxth	r2, r2
 800de42:	1a12      	subs	r2, r2, r0
 800de44:	445a      	add	r2, fp
 800de46:	f8de 0000 	ldr.w	r0, [lr]
 800de4a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800de4e:	b29b      	uxth	r3, r3
 800de50:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800de54:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800de58:	b292      	uxth	r2, r2
 800de5a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800de5e:	45e1      	cmp	r9, ip
 800de60:	f84e 2b04 	str.w	r2, [lr], #4
 800de64:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800de68:	d2de      	bcs.n	800de28 <quorem+0x42>
 800de6a:	9b00      	ldr	r3, [sp, #0]
 800de6c:	58eb      	ldr	r3, [r5, r3]
 800de6e:	b92b      	cbnz	r3, 800de7c <quorem+0x96>
 800de70:	9b01      	ldr	r3, [sp, #4]
 800de72:	3b04      	subs	r3, #4
 800de74:	429d      	cmp	r5, r3
 800de76:	461a      	mov	r2, r3
 800de78:	d32f      	bcc.n	800deda <quorem+0xf4>
 800de7a:	613c      	str	r4, [r7, #16]
 800de7c:	4638      	mov	r0, r7
 800de7e:	f001 f8c3 	bl	800f008 <__mcmp>
 800de82:	2800      	cmp	r0, #0
 800de84:	db25      	blt.n	800ded2 <quorem+0xec>
 800de86:	4629      	mov	r1, r5
 800de88:	2000      	movs	r0, #0
 800de8a:	f858 2b04 	ldr.w	r2, [r8], #4
 800de8e:	f8d1 c000 	ldr.w	ip, [r1]
 800de92:	fa1f fe82 	uxth.w	lr, r2
 800de96:	fa1f f38c 	uxth.w	r3, ip
 800de9a:	eba3 030e 	sub.w	r3, r3, lr
 800de9e:	4403      	add	r3, r0
 800dea0:	0c12      	lsrs	r2, r2, #16
 800dea2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800dea6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800deaa:	b29b      	uxth	r3, r3
 800deac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800deb0:	45c1      	cmp	r9, r8
 800deb2:	f841 3b04 	str.w	r3, [r1], #4
 800deb6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800deba:	d2e6      	bcs.n	800de8a <quorem+0xa4>
 800debc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dec0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dec4:	b922      	cbnz	r2, 800ded0 <quorem+0xea>
 800dec6:	3b04      	subs	r3, #4
 800dec8:	429d      	cmp	r5, r3
 800deca:	461a      	mov	r2, r3
 800decc:	d30b      	bcc.n	800dee6 <quorem+0x100>
 800dece:	613c      	str	r4, [r7, #16]
 800ded0:	3601      	adds	r6, #1
 800ded2:	4630      	mov	r0, r6
 800ded4:	b003      	add	sp, #12
 800ded6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800deda:	6812      	ldr	r2, [r2, #0]
 800dedc:	3b04      	subs	r3, #4
 800dede:	2a00      	cmp	r2, #0
 800dee0:	d1cb      	bne.n	800de7a <quorem+0x94>
 800dee2:	3c01      	subs	r4, #1
 800dee4:	e7c6      	b.n	800de74 <quorem+0x8e>
 800dee6:	6812      	ldr	r2, [r2, #0]
 800dee8:	3b04      	subs	r3, #4
 800deea:	2a00      	cmp	r2, #0
 800deec:	d1ef      	bne.n	800dece <quorem+0xe8>
 800deee:	3c01      	subs	r4, #1
 800def0:	e7ea      	b.n	800dec8 <quorem+0xe2>
 800def2:	2000      	movs	r0, #0
 800def4:	e7ee      	b.n	800ded4 <quorem+0xee>
	...

0800def8 <_dtoa_r>:
 800def8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800defc:	69c7      	ldr	r7, [r0, #28]
 800defe:	b099      	sub	sp, #100	@ 0x64
 800df00:	ed8d 0b02 	vstr	d0, [sp, #8]
 800df04:	ec55 4b10 	vmov	r4, r5, d0
 800df08:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800df0a:	9109      	str	r1, [sp, #36]	@ 0x24
 800df0c:	4683      	mov	fp, r0
 800df0e:	920e      	str	r2, [sp, #56]	@ 0x38
 800df10:	9313      	str	r3, [sp, #76]	@ 0x4c
 800df12:	b97f      	cbnz	r7, 800df34 <_dtoa_r+0x3c>
 800df14:	2010      	movs	r0, #16
 800df16:	f7fe ffd5 	bl	800cec4 <malloc>
 800df1a:	4602      	mov	r2, r0
 800df1c:	f8cb 001c 	str.w	r0, [fp, #28]
 800df20:	b920      	cbnz	r0, 800df2c <_dtoa_r+0x34>
 800df22:	4ba7      	ldr	r3, [pc, #668]	@ (800e1c0 <_dtoa_r+0x2c8>)
 800df24:	21ef      	movs	r1, #239	@ 0xef
 800df26:	48a7      	ldr	r0, [pc, #668]	@ (800e1c4 <_dtoa_r+0x2cc>)
 800df28:	f001 fb9c 	bl	800f664 <__assert_func>
 800df2c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800df30:	6007      	str	r7, [r0, #0]
 800df32:	60c7      	str	r7, [r0, #12]
 800df34:	f8db 301c 	ldr.w	r3, [fp, #28]
 800df38:	6819      	ldr	r1, [r3, #0]
 800df3a:	b159      	cbz	r1, 800df54 <_dtoa_r+0x5c>
 800df3c:	685a      	ldr	r2, [r3, #4]
 800df3e:	604a      	str	r2, [r1, #4]
 800df40:	2301      	movs	r3, #1
 800df42:	4093      	lsls	r3, r2
 800df44:	608b      	str	r3, [r1, #8]
 800df46:	4658      	mov	r0, fp
 800df48:	f000 fe24 	bl	800eb94 <_Bfree>
 800df4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800df50:	2200      	movs	r2, #0
 800df52:	601a      	str	r2, [r3, #0]
 800df54:	1e2b      	subs	r3, r5, #0
 800df56:	bfb9      	ittee	lt
 800df58:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800df5c:	9303      	strlt	r3, [sp, #12]
 800df5e:	2300      	movge	r3, #0
 800df60:	6033      	strge	r3, [r6, #0]
 800df62:	9f03      	ldr	r7, [sp, #12]
 800df64:	4b98      	ldr	r3, [pc, #608]	@ (800e1c8 <_dtoa_r+0x2d0>)
 800df66:	bfbc      	itt	lt
 800df68:	2201      	movlt	r2, #1
 800df6a:	6032      	strlt	r2, [r6, #0]
 800df6c:	43bb      	bics	r3, r7
 800df6e:	d112      	bne.n	800df96 <_dtoa_r+0x9e>
 800df70:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800df72:	f242 730f 	movw	r3, #9999	@ 0x270f
 800df76:	6013      	str	r3, [r2, #0]
 800df78:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800df7c:	4323      	orrs	r3, r4
 800df7e:	f000 854d 	beq.w	800ea1c <_dtoa_r+0xb24>
 800df82:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800df84:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e1dc <_dtoa_r+0x2e4>
 800df88:	2b00      	cmp	r3, #0
 800df8a:	f000 854f 	beq.w	800ea2c <_dtoa_r+0xb34>
 800df8e:	f10a 0303 	add.w	r3, sl, #3
 800df92:	f000 bd49 	b.w	800ea28 <_dtoa_r+0xb30>
 800df96:	ed9d 7b02 	vldr	d7, [sp, #8]
 800df9a:	2200      	movs	r2, #0
 800df9c:	ec51 0b17 	vmov	r0, r1, d7
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800dfa6:	f7f2 fd9f 	bl	8000ae8 <__aeabi_dcmpeq>
 800dfaa:	4680      	mov	r8, r0
 800dfac:	b158      	cbz	r0, 800dfc6 <_dtoa_r+0xce>
 800dfae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800dfb0:	2301      	movs	r3, #1
 800dfb2:	6013      	str	r3, [r2, #0]
 800dfb4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dfb6:	b113      	cbz	r3, 800dfbe <_dtoa_r+0xc6>
 800dfb8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800dfba:	4b84      	ldr	r3, [pc, #528]	@ (800e1cc <_dtoa_r+0x2d4>)
 800dfbc:	6013      	str	r3, [r2, #0]
 800dfbe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800e1e0 <_dtoa_r+0x2e8>
 800dfc2:	f000 bd33 	b.w	800ea2c <_dtoa_r+0xb34>
 800dfc6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800dfca:	aa16      	add	r2, sp, #88	@ 0x58
 800dfcc:	a917      	add	r1, sp, #92	@ 0x5c
 800dfce:	4658      	mov	r0, fp
 800dfd0:	f001 f8ca 	bl	800f168 <__d2b>
 800dfd4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800dfd8:	4681      	mov	r9, r0
 800dfda:	2e00      	cmp	r6, #0
 800dfdc:	d077      	beq.n	800e0ce <_dtoa_r+0x1d6>
 800dfde:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dfe0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800dfe4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dfe8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dfec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800dff0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800dff4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800dff8:	4619      	mov	r1, r3
 800dffa:	2200      	movs	r2, #0
 800dffc:	4b74      	ldr	r3, [pc, #464]	@ (800e1d0 <_dtoa_r+0x2d8>)
 800dffe:	f7f2 f953 	bl	80002a8 <__aeabi_dsub>
 800e002:	a369      	add	r3, pc, #420	@ (adr r3, 800e1a8 <_dtoa_r+0x2b0>)
 800e004:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e008:	f7f2 fb06 	bl	8000618 <__aeabi_dmul>
 800e00c:	a368      	add	r3, pc, #416	@ (adr r3, 800e1b0 <_dtoa_r+0x2b8>)
 800e00e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e012:	f7f2 f94b 	bl	80002ac <__adddf3>
 800e016:	4604      	mov	r4, r0
 800e018:	4630      	mov	r0, r6
 800e01a:	460d      	mov	r5, r1
 800e01c:	f7f2 fa92 	bl	8000544 <__aeabi_i2d>
 800e020:	a365      	add	r3, pc, #404	@ (adr r3, 800e1b8 <_dtoa_r+0x2c0>)
 800e022:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e026:	f7f2 faf7 	bl	8000618 <__aeabi_dmul>
 800e02a:	4602      	mov	r2, r0
 800e02c:	460b      	mov	r3, r1
 800e02e:	4620      	mov	r0, r4
 800e030:	4629      	mov	r1, r5
 800e032:	f7f2 f93b 	bl	80002ac <__adddf3>
 800e036:	4604      	mov	r4, r0
 800e038:	460d      	mov	r5, r1
 800e03a:	f7f2 fd9d 	bl	8000b78 <__aeabi_d2iz>
 800e03e:	2200      	movs	r2, #0
 800e040:	4607      	mov	r7, r0
 800e042:	2300      	movs	r3, #0
 800e044:	4620      	mov	r0, r4
 800e046:	4629      	mov	r1, r5
 800e048:	f7f2 fd58 	bl	8000afc <__aeabi_dcmplt>
 800e04c:	b140      	cbz	r0, 800e060 <_dtoa_r+0x168>
 800e04e:	4638      	mov	r0, r7
 800e050:	f7f2 fa78 	bl	8000544 <__aeabi_i2d>
 800e054:	4622      	mov	r2, r4
 800e056:	462b      	mov	r3, r5
 800e058:	f7f2 fd46 	bl	8000ae8 <__aeabi_dcmpeq>
 800e05c:	b900      	cbnz	r0, 800e060 <_dtoa_r+0x168>
 800e05e:	3f01      	subs	r7, #1
 800e060:	2f16      	cmp	r7, #22
 800e062:	d851      	bhi.n	800e108 <_dtoa_r+0x210>
 800e064:	4b5b      	ldr	r3, [pc, #364]	@ (800e1d4 <_dtoa_r+0x2dc>)
 800e066:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e06a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e06e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e072:	f7f2 fd43 	bl	8000afc <__aeabi_dcmplt>
 800e076:	2800      	cmp	r0, #0
 800e078:	d048      	beq.n	800e10c <_dtoa_r+0x214>
 800e07a:	3f01      	subs	r7, #1
 800e07c:	2300      	movs	r3, #0
 800e07e:	9312      	str	r3, [sp, #72]	@ 0x48
 800e080:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e082:	1b9b      	subs	r3, r3, r6
 800e084:	1e5a      	subs	r2, r3, #1
 800e086:	bf44      	itt	mi
 800e088:	f1c3 0801 	rsbmi	r8, r3, #1
 800e08c:	2300      	movmi	r3, #0
 800e08e:	9208      	str	r2, [sp, #32]
 800e090:	bf54      	ite	pl
 800e092:	f04f 0800 	movpl.w	r8, #0
 800e096:	9308      	strmi	r3, [sp, #32]
 800e098:	2f00      	cmp	r7, #0
 800e09a:	db39      	blt.n	800e110 <_dtoa_r+0x218>
 800e09c:	9b08      	ldr	r3, [sp, #32]
 800e09e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800e0a0:	443b      	add	r3, r7
 800e0a2:	9308      	str	r3, [sp, #32]
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	930a      	str	r3, [sp, #40]	@ 0x28
 800e0a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0aa:	2b09      	cmp	r3, #9
 800e0ac:	d864      	bhi.n	800e178 <_dtoa_r+0x280>
 800e0ae:	2b05      	cmp	r3, #5
 800e0b0:	bfc4      	itt	gt
 800e0b2:	3b04      	subgt	r3, #4
 800e0b4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800e0b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0b8:	f1a3 0302 	sub.w	r3, r3, #2
 800e0bc:	bfcc      	ite	gt
 800e0be:	2400      	movgt	r4, #0
 800e0c0:	2401      	movle	r4, #1
 800e0c2:	2b03      	cmp	r3, #3
 800e0c4:	d863      	bhi.n	800e18e <_dtoa_r+0x296>
 800e0c6:	e8df f003 	tbb	[pc, r3]
 800e0ca:	372a      	.short	0x372a
 800e0cc:	5535      	.short	0x5535
 800e0ce:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800e0d2:	441e      	add	r6, r3
 800e0d4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e0d8:	2b20      	cmp	r3, #32
 800e0da:	bfc1      	itttt	gt
 800e0dc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e0e0:	409f      	lslgt	r7, r3
 800e0e2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e0e6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e0ea:	bfd6      	itet	le
 800e0ec:	f1c3 0320 	rsble	r3, r3, #32
 800e0f0:	ea47 0003 	orrgt.w	r0, r7, r3
 800e0f4:	fa04 f003 	lslle.w	r0, r4, r3
 800e0f8:	f7f2 fa14 	bl	8000524 <__aeabi_ui2d>
 800e0fc:	2201      	movs	r2, #1
 800e0fe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e102:	3e01      	subs	r6, #1
 800e104:	9214      	str	r2, [sp, #80]	@ 0x50
 800e106:	e777      	b.n	800dff8 <_dtoa_r+0x100>
 800e108:	2301      	movs	r3, #1
 800e10a:	e7b8      	b.n	800e07e <_dtoa_r+0x186>
 800e10c:	9012      	str	r0, [sp, #72]	@ 0x48
 800e10e:	e7b7      	b.n	800e080 <_dtoa_r+0x188>
 800e110:	427b      	negs	r3, r7
 800e112:	930a      	str	r3, [sp, #40]	@ 0x28
 800e114:	2300      	movs	r3, #0
 800e116:	eba8 0807 	sub.w	r8, r8, r7
 800e11a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e11c:	e7c4      	b.n	800e0a8 <_dtoa_r+0x1b0>
 800e11e:	2300      	movs	r3, #0
 800e120:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e122:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e124:	2b00      	cmp	r3, #0
 800e126:	dc35      	bgt.n	800e194 <_dtoa_r+0x29c>
 800e128:	2301      	movs	r3, #1
 800e12a:	9300      	str	r3, [sp, #0]
 800e12c:	9307      	str	r3, [sp, #28]
 800e12e:	461a      	mov	r2, r3
 800e130:	920e      	str	r2, [sp, #56]	@ 0x38
 800e132:	e00b      	b.n	800e14c <_dtoa_r+0x254>
 800e134:	2301      	movs	r3, #1
 800e136:	e7f3      	b.n	800e120 <_dtoa_r+0x228>
 800e138:	2300      	movs	r3, #0
 800e13a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e13c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e13e:	18fb      	adds	r3, r7, r3
 800e140:	9300      	str	r3, [sp, #0]
 800e142:	3301      	adds	r3, #1
 800e144:	2b01      	cmp	r3, #1
 800e146:	9307      	str	r3, [sp, #28]
 800e148:	bfb8      	it	lt
 800e14a:	2301      	movlt	r3, #1
 800e14c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800e150:	2100      	movs	r1, #0
 800e152:	2204      	movs	r2, #4
 800e154:	f102 0514 	add.w	r5, r2, #20
 800e158:	429d      	cmp	r5, r3
 800e15a:	d91f      	bls.n	800e19c <_dtoa_r+0x2a4>
 800e15c:	6041      	str	r1, [r0, #4]
 800e15e:	4658      	mov	r0, fp
 800e160:	f000 fcd8 	bl	800eb14 <_Balloc>
 800e164:	4682      	mov	sl, r0
 800e166:	2800      	cmp	r0, #0
 800e168:	d13c      	bne.n	800e1e4 <_dtoa_r+0x2ec>
 800e16a:	4b1b      	ldr	r3, [pc, #108]	@ (800e1d8 <_dtoa_r+0x2e0>)
 800e16c:	4602      	mov	r2, r0
 800e16e:	f240 11af 	movw	r1, #431	@ 0x1af
 800e172:	e6d8      	b.n	800df26 <_dtoa_r+0x2e>
 800e174:	2301      	movs	r3, #1
 800e176:	e7e0      	b.n	800e13a <_dtoa_r+0x242>
 800e178:	2401      	movs	r4, #1
 800e17a:	2300      	movs	r3, #0
 800e17c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e17e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e180:	f04f 33ff 	mov.w	r3, #4294967295
 800e184:	9300      	str	r3, [sp, #0]
 800e186:	9307      	str	r3, [sp, #28]
 800e188:	2200      	movs	r2, #0
 800e18a:	2312      	movs	r3, #18
 800e18c:	e7d0      	b.n	800e130 <_dtoa_r+0x238>
 800e18e:	2301      	movs	r3, #1
 800e190:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e192:	e7f5      	b.n	800e180 <_dtoa_r+0x288>
 800e194:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e196:	9300      	str	r3, [sp, #0]
 800e198:	9307      	str	r3, [sp, #28]
 800e19a:	e7d7      	b.n	800e14c <_dtoa_r+0x254>
 800e19c:	3101      	adds	r1, #1
 800e19e:	0052      	lsls	r2, r2, #1
 800e1a0:	e7d8      	b.n	800e154 <_dtoa_r+0x25c>
 800e1a2:	bf00      	nop
 800e1a4:	f3af 8000 	nop.w
 800e1a8:	636f4361 	.word	0x636f4361
 800e1ac:	3fd287a7 	.word	0x3fd287a7
 800e1b0:	8b60c8b3 	.word	0x8b60c8b3
 800e1b4:	3fc68a28 	.word	0x3fc68a28
 800e1b8:	509f79fb 	.word	0x509f79fb
 800e1bc:	3fd34413 	.word	0x3fd34413
 800e1c0:	08010499 	.word	0x08010499
 800e1c4:	080104b0 	.word	0x080104b0
 800e1c8:	7ff00000 	.word	0x7ff00000
 800e1cc:	08010469 	.word	0x08010469
 800e1d0:	3ff80000 	.word	0x3ff80000
 800e1d4:	080105a8 	.word	0x080105a8
 800e1d8:	08010508 	.word	0x08010508
 800e1dc:	08010495 	.word	0x08010495
 800e1e0:	08010468 	.word	0x08010468
 800e1e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e1e8:	6018      	str	r0, [r3, #0]
 800e1ea:	9b07      	ldr	r3, [sp, #28]
 800e1ec:	2b0e      	cmp	r3, #14
 800e1ee:	f200 80a4 	bhi.w	800e33a <_dtoa_r+0x442>
 800e1f2:	2c00      	cmp	r4, #0
 800e1f4:	f000 80a1 	beq.w	800e33a <_dtoa_r+0x442>
 800e1f8:	2f00      	cmp	r7, #0
 800e1fa:	dd33      	ble.n	800e264 <_dtoa_r+0x36c>
 800e1fc:	4bad      	ldr	r3, [pc, #692]	@ (800e4b4 <_dtoa_r+0x5bc>)
 800e1fe:	f007 020f 	and.w	r2, r7, #15
 800e202:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e206:	ed93 7b00 	vldr	d7, [r3]
 800e20a:	05f8      	lsls	r0, r7, #23
 800e20c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e210:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e214:	d516      	bpl.n	800e244 <_dtoa_r+0x34c>
 800e216:	4ba8      	ldr	r3, [pc, #672]	@ (800e4b8 <_dtoa_r+0x5c0>)
 800e218:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e21c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e220:	f7f2 fb24 	bl	800086c <__aeabi_ddiv>
 800e224:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e228:	f004 040f 	and.w	r4, r4, #15
 800e22c:	2603      	movs	r6, #3
 800e22e:	4da2      	ldr	r5, [pc, #648]	@ (800e4b8 <_dtoa_r+0x5c0>)
 800e230:	b954      	cbnz	r4, 800e248 <_dtoa_r+0x350>
 800e232:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e236:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e23a:	f7f2 fb17 	bl	800086c <__aeabi_ddiv>
 800e23e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e242:	e028      	b.n	800e296 <_dtoa_r+0x39e>
 800e244:	2602      	movs	r6, #2
 800e246:	e7f2      	b.n	800e22e <_dtoa_r+0x336>
 800e248:	07e1      	lsls	r1, r4, #31
 800e24a:	d508      	bpl.n	800e25e <_dtoa_r+0x366>
 800e24c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e250:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e254:	f7f2 f9e0 	bl	8000618 <__aeabi_dmul>
 800e258:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e25c:	3601      	adds	r6, #1
 800e25e:	1064      	asrs	r4, r4, #1
 800e260:	3508      	adds	r5, #8
 800e262:	e7e5      	b.n	800e230 <_dtoa_r+0x338>
 800e264:	f000 80d2 	beq.w	800e40c <_dtoa_r+0x514>
 800e268:	427c      	negs	r4, r7
 800e26a:	4b92      	ldr	r3, [pc, #584]	@ (800e4b4 <_dtoa_r+0x5bc>)
 800e26c:	4d92      	ldr	r5, [pc, #584]	@ (800e4b8 <_dtoa_r+0x5c0>)
 800e26e:	f004 020f 	and.w	r2, r4, #15
 800e272:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e27a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e27e:	f7f2 f9cb 	bl	8000618 <__aeabi_dmul>
 800e282:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e286:	1124      	asrs	r4, r4, #4
 800e288:	2300      	movs	r3, #0
 800e28a:	2602      	movs	r6, #2
 800e28c:	2c00      	cmp	r4, #0
 800e28e:	f040 80b2 	bne.w	800e3f6 <_dtoa_r+0x4fe>
 800e292:	2b00      	cmp	r3, #0
 800e294:	d1d3      	bne.n	800e23e <_dtoa_r+0x346>
 800e296:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e298:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	f000 80b7 	beq.w	800e410 <_dtoa_r+0x518>
 800e2a2:	4b86      	ldr	r3, [pc, #536]	@ (800e4bc <_dtoa_r+0x5c4>)
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	4620      	mov	r0, r4
 800e2a8:	4629      	mov	r1, r5
 800e2aa:	f7f2 fc27 	bl	8000afc <__aeabi_dcmplt>
 800e2ae:	2800      	cmp	r0, #0
 800e2b0:	f000 80ae 	beq.w	800e410 <_dtoa_r+0x518>
 800e2b4:	9b07      	ldr	r3, [sp, #28]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	f000 80aa 	beq.w	800e410 <_dtoa_r+0x518>
 800e2bc:	9b00      	ldr	r3, [sp, #0]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	dd37      	ble.n	800e332 <_dtoa_r+0x43a>
 800e2c2:	1e7b      	subs	r3, r7, #1
 800e2c4:	9304      	str	r3, [sp, #16]
 800e2c6:	4620      	mov	r0, r4
 800e2c8:	4b7d      	ldr	r3, [pc, #500]	@ (800e4c0 <_dtoa_r+0x5c8>)
 800e2ca:	2200      	movs	r2, #0
 800e2cc:	4629      	mov	r1, r5
 800e2ce:	f7f2 f9a3 	bl	8000618 <__aeabi_dmul>
 800e2d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e2d6:	9c00      	ldr	r4, [sp, #0]
 800e2d8:	3601      	adds	r6, #1
 800e2da:	4630      	mov	r0, r6
 800e2dc:	f7f2 f932 	bl	8000544 <__aeabi_i2d>
 800e2e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e2e4:	f7f2 f998 	bl	8000618 <__aeabi_dmul>
 800e2e8:	4b76      	ldr	r3, [pc, #472]	@ (800e4c4 <_dtoa_r+0x5cc>)
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	f7f1 ffde 	bl	80002ac <__adddf3>
 800e2f0:	4605      	mov	r5, r0
 800e2f2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e2f6:	2c00      	cmp	r4, #0
 800e2f8:	f040 808d 	bne.w	800e416 <_dtoa_r+0x51e>
 800e2fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e300:	4b71      	ldr	r3, [pc, #452]	@ (800e4c8 <_dtoa_r+0x5d0>)
 800e302:	2200      	movs	r2, #0
 800e304:	f7f1 ffd0 	bl	80002a8 <__aeabi_dsub>
 800e308:	4602      	mov	r2, r0
 800e30a:	460b      	mov	r3, r1
 800e30c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e310:	462a      	mov	r2, r5
 800e312:	4633      	mov	r3, r6
 800e314:	f7f2 fc10 	bl	8000b38 <__aeabi_dcmpgt>
 800e318:	2800      	cmp	r0, #0
 800e31a:	f040 828b 	bne.w	800e834 <_dtoa_r+0x93c>
 800e31e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e322:	462a      	mov	r2, r5
 800e324:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e328:	f7f2 fbe8 	bl	8000afc <__aeabi_dcmplt>
 800e32c:	2800      	cmp	r0, #0
 800e32e:	f040 8128 	bne.w	800e582 <_dtoa_r+0x68a>
 800e332:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e336:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e33a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	f2c0 815a 	blt.w	800e5f6 <_dtoa_r+0x6fe>
 800e342:	2f0e      	cmp	r7, #14
 800e344:	f300 8157 	bgt.w	800e5f6 <_dtoa_r+0x6fe>
 800e348:	4b5a      	ldr	r3, [pc, #360]	@ (800e4b4 <_dtoa_r+0x5bc>)
 800e34a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e34e:	ed93 7b00 	vldr	d7, [r3]
 800e352:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e354:	2b00      	cmp	r3, #0
 800e356:	ed8d 7b00 	vstr	d7, [sp]
 800e35a:	da03      	bge.n	800e364 <_dtoa_r+0x46c>
 800e35c:	9b07      	ldr	r3, [sp, #28]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	f340 8101 	ble.w	800e566 <_dtoa_r+0x66e>
 800e364:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e368:	4656      	mov	r6, sl
 800e36a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e36e:	4620      	mov	r0, r4
 800e370:	4629      	mov	r1, r5
 800e372:	f7f2 fa7b 	bl	800086c <__aeabi_ddiv>
 800e376:	f7f2 fbff 	bl	8000b78 <__aeabi_d2iz>
 800e37a:	4680      	mov	r8, r0
 800e37c:	f7f2 f8e2 	bl	8000544 <__aeabi_i2d>
 800e380:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e384:	f7f2 f948 	bl	8000618 <__aeabi_dmul>
 800e388:	4602      	mov	r2, r0
 800e38a:	460b      	mov	r3, r1
 800e38c:	4620      	mov	r0, r4
 800e38e:	4629      	mov	r1, r5
 800e390:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e394:	f7f1 ff88 	bl	80002a8 <__aeabi_dsub>
 800e398:	f806 4b01 	strb.w	r4, [r6], #1
 800e39c:	9d07      	ldr	r5, [sp, #28]
 800e39e:	eba6 040a 	sub.w	r4, r6, sl
 800e3a2:	42a5      	cmp	r5, r4
 800e3a4:	4602      	mov	r2, r0
 800e3a6:	460b      	mov	r3, r1
 800e3a8:	f040 8117 	bne.w	800e5da <_dtoa_r+0x6e2>
 800e3ac:	f7f1 ff7e 	bl	80002ac <__adddf3>
 800e3b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e3b4:	4604      	mov	r4, r0
 800e3b6:	460d      	mov	r5, r1
 800e3b8:	f7f2 fbbe 	bl	8000b38 <__aeabi_dcmpgt>
 800e3bc:	2800      	cmp	r0, #0
 800e3be:	f040 80f9 	bne.w	800e5b4 <_dtoa_r+0x6bc>
 800e3c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e3c6:	4620      	mov	r0, r4
 800e3c8:	4629      	mov	r1, r5
 800e3ca:	f7f2 fb8d 	bl	8000ae8 <__aeabi_dcmpeq>
 800e3ce:	b118      	cbz	r0, 800e3d8 <_dtoa_r+0x4e0>
 800e3d0:	f018 0f01 	tst.w	r8, #1
 800e3d4:	f040 80ee 	bne.w	800e5b4 <_dtoa_r+0x6bc>
 800e3d8:	4649      	mov	r1, r9
 800e3da:	4658      	mov	r0, fp
 800e3dc:	f000 fbda 	bl	800eb94 <_Bfree>
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	7033      	strb	r3, [r6, #0]
 800e3e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e3e6:	3701      	adds	r7, #1
 800e3e8:	601f      	str	r7, [r3, #0]
 800e3ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	f000 831d 	beq.w	800ea2c <_dtoa_r+0xb34>
 800e3f2:	601e      	str	r6, [r3, #0]
 800e3f4:	e31a      	b.n	800ea2c <_dtoa_r+0xb34>
 800e3f6:	07e2      	lsls	r2, r4, #31
 800e3f8:	d505      	bpl.n	800e406 <_dtoa_r+0x50e>
 800e3fa:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e3fe:	f7f2 f90b 	bl	8000618 <__aeabi_dmul>
 800e402:	3601      	adds	r6, #1
 800e404:	2301      	movs	r3, #1
 800e406:	1064      	asrs	r4, r4, #1
 800e408:	3508      	adds	r5, #8
 800e40a:	e73f      	b.n	800e28c <_dtoa_r+0x394>
 800e40c:	2602      	movs	r6, #2
 800e40e:	e742      	b.n	800e296 <_dtoa_r+0x39e>
 800e410:	9c07      	ldr	r4, [sp, #28]
 800e412:	9704      	str	r7, [sp, #16]
 800e414:	e761      	b.n	800e2da <_dtoa_r+0x3e2>
 800e416:	4b27      	ldr	r3, [pc, #156]	@ (800e4b4 <_dtoa_r+0x5bc>)
 800e418:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e41a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e41e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e422:	4454      	add	r4, sl
 800e424:	2900      	cmp	r1, #0
 800e426:	d053      	beq.n	800e4d0 <_dtoa_r+0x5d8>
 800e428:	4928      	ldr	r1, [pc, #160]	@ (800e4cc <_dtoa_r+0x5d4>)
 800e42a:	2000      	movs	r0, #0
 800e42c:	f7f2 fa1e 	bl	800086c <__aeabi_ddiv>
 800e430:	4633      	mov	r3, r6
 800e432:	462a      	mov	r2, r5
 800e434:	f7f1 ff38 	bl	80002a8 <__aeabi_dsub>
 800e438:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e43c:	4656      	mov	r6, sl
 800e43e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e442:	f7f2 fb99 	bl	8000b78 <__aeabi_d2iz>
 800e446:	4605      	mov	r5, r0
 800e448:	f7f2 f87c 	bl	8000544 <__aeabi_i2d>
 800e44c:	4602      	mov	r2, r0
 800e44e:	460b      	mov	r3, r1
 800e450:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e454:	f7f1 ff28 	bl	80002a8 <__aeabi_dsub>
 800e458:	3530      	adds	r5, #48	@ 0x30
 800e45a:	4602      	mov	r2, r0
 800e45c:	460b      	mov	r3, r1
 800e45e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e462:	f806 5b01 	strb.w	r5, [r6], #1
 800e466:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e46a:	f7f2 fb47 	bl	8000afc <__aeabi_dcmplt>
 800e46e:	2800      	cmp	r0, #0
 800e470:	d171      	bne.n	800e556 <_dtoa_r+0x65e>
 800e472:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e476:	4911      	ldr	r1, [pc, #68]	@ (800e4bc <_dtoa_r+0x5c4>)
 800e478:	2000      	movs	r0, #0
 800e47a:	f7f1 ff15 	bl	80002a8 <__aeabi_dsub>
 800e47e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e482:	f7f2 fb3b 	bl	8000afc <__aeabi_dcmplt>
 800e486:	2800      	cmp	r0, #0
 800e488:	f040 8095 	bne.w	800e5b6 <_dtoa_r+0x6be>
 800e48c:	42a6      	cmp	r6, r4
 800e48e:	f43f af50 	beq.w	800e332 <_dtoa_r+0x43a>
 800e492:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e496:	4b0a      	ldr	r3, [pc, #40]	@ (800e4c0 <_dtoa_r+0x5c8>)
 800e498:	2200      	movs	r2, #0
 800e49a:	f7f2 f8bd 	bl	8000618 <__aeabi_dmul>
 800e49e:	4b08      	ldr	r3, [pc, #32]	@ (800e4c0 <_dtoa_r+0x5c8>)
 800e4a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e4a4:	2200      	movs	r2, #0
 800e4a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e4aa:	f7f2 f8b5 	bl	8000618 <__aeabi_dmul>
 800e4ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e4b2:	e7c4      	b.n	800e43e <_dtoa_r+0x546>
 800e4b4:	080105a8 	.word	0x080105a8
 800e4b8:	08010580 	.word	0x08010580
 800e4bc:	3ff00000 	.word	0x3ff00000
 800e4c0:	40240000 	.word	0x40240000
 800e4c4:	401c0000 	.word	0x401c0000
 800e4c8:	40140000 	.word	0x40140000
 800e4cc:	3fe00000 	.word	0x3fe00000
 800e4d0:	4631      	mov	r1, r6
 800e4d2:	4628      	mov	r0, r5
 800e4d4:	f7f2 f8a0 	bl	8000618 <__aeabi_dmul>
 800e4d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e4dc:	9415      	str	r4, [sp, #84]	@ 0x54
 800e4de:	4656      	mov	r6, sl
 800e4e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e4e4:	f7f2 fb48 	bl	8000b78 <__aeabi_d2iz>
 800e4e8:	4605      	mov	r5, r0
 800e4ea:	f7f2 f82b 	bl	8000544 <__aeabi_i2d>
 800e4ee:	4602      	mov	r2, r0
 800e4f0:	460b      	mov	r3, r1
 800e4f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e4f6:	f7f1 fed7 	bl	80002a8 <__aeabi_dsub>
 800e4fa:	3530      	adds	r5, #48	@ 0x30
 800e4fc:	f806 5b01 	strb.w	r5, [r6], #1
 800e500:	4602      	mov	r2, r0
 800e502:	460b      	mov	r3, r1
 800e504:	42a6      	cmp	r6, r4
 800e506:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e50a:	f04f 0200 	mov.w	r2, #0
 800e50e:	d124      	bne.n	800e55a <_dtoa_r+0x662>
 800e510:	4bac      	ldr	r3, [pc, #688]	@ (800e7c4 <_dtoa_r+0x8cc>)
 800e512:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e516:	f7f1 fec9 	bl	80002ac <__adddf3>
 800e51a:	4602      	mov	r2, r0
 800e51c:	460b      	mov	r3, r1
 800e51e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e522:	f7f2 fb09 	bl	8000b38 <__aeabi_dcmpgt>
 800e526:	2800      	cmp	r0, #0
 800e528:	d145      	bne.n	800e5b6 <_dtoa_r+0x6be>
 800e52a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e52e:	49a5      	ldr	r1, [pc, #660]	@ (800e7c4 <_dtoa_r+0x8cc>)
 800e530:	2000      	movs	r0, #0
 800e532:	f7f1 feb9 	bl	80002a8 <__aeabi_dsub>
 800e536:	4602      	mov	r2, r0
 800e538:	460b      	mov	r3, r1
 800e53a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e53e:	f7f2 fadd 	bl	8000afc <__aeabi_dcmplt>
 800e542:	2800      	cmp	r0, #0
 800e544:	f43f aef5 	beq.w	800e332 <_dtoa_r+0x43a>
 800e548:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800e54a:	1e73      	subs	r3, r6, #1
 800e54c:	9315      	str	r3, [sp, #84]	@ 0x54
 800e54e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e552:	2b30      	cmp	r3, #48	@ 0x30
 800e554:	d0f8      	beq.n	800e548 <_dtoa_r+0x650>
 800e556:	9f04      	ldr	r7, [sp, #16]
 800e558:	e73e      	b.n	800e3d8 <_dtoa_r+0x4e0>
 800e55a:	4b9b      	ldr	r3, [pc, #620]	@ (800e7c8 <_dtoa_r+0x8d0>)
 800e55c:	f7f2 f85c 	bl	8000618 <__aeabi_dmul>
 800e560:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e564:	e7bc      	b.n	800e4e0 <_dtoa_r+0x5e8>
 800e566:	d10c      	bne.n	800e582 <_dtoa_r+0x68a>
 800e568:	4b98      	ldr	r3, [pc, #608]	@ (800e7cc <_dtoa_r+0x8d4>)
 800e56a:	2200      	movs	r2, #0
 800e56c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e570:	f7f2 f852 	bl	8000618 <__aeabi_dmul>
 800e574:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e578:	f7f2 fad4 	bl	8000b24 <__aeabi_dcmpge>
 800e57c:	2800      	cmp	r0, #0
 800e57e:	f000 8157 	beq.w	800e830 <_dtoa_r+0x938>
 800e582:	2400      	movs	r4, #0
 800e584:	4625      	mov	r5, r4
 800e586:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e588:	43db      	mvns	r3, r3
 800e58a:	9304      	str	r3, [sp, #16]
 800e58c:	4656      	mov	r6, sl
 800e58e:	2700      	movs	r7, #0
 800e590:	4621      	mov	r1, r4
 800e592:	4658      	mov	r0, fp
 800e594:	f000 fafe 	bl	800eb94 <_Bfree>
 800e598:	2d00      	cmp	r5, #0
 800e59a:	d0dc      	beq.n	800e556 <_dtoa_r+0x65e>
 800e59c:	b12f      	cbz	r7, 800e5aa <_dtoa_r+0x6b2>
 800e59e:	42af      	cmp	r7, r5
 800e5a0:	d003      	beq.n	800e5aa <_dtoa_r+0x6b2>
 800e5a2:	4639      	mov	r1, r7
 800e5a4:	4658      	mov	r0, fp
 800e5a6:	f000 faf5 	bl	800eb94 <_Bfree>
 800e5aa:	4629      	mov	r1, r5
 800e5ac:	4658      	mov	r0, fp
 800e5ae:	f000 faf1 	bl	800eb94 <_Bfree>
 800e5b2:	e7d0      	b.n	800e556 <_dtoa_r+0x65e>
 800e5b4:	9704      	str	r7, [sp, #16]
 800e5b6:	4633      	mov	r3, r6
 800e5b8:	461e      	mov	r6, r3
 800e5ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e5be:	2a39      	cmp	r2, #57	@ 0x39
 800e5c0:	d107      	bne.n	800e5d2 <_dtoa_r+0x6da>
 800e5c2:	459a      	cmp	sl, r3
 800e5c4:	d1f8      	bne.n	800e5b8 <_dtoa_r+0x6c0>
 800e5c6:	9a04      	ldr	r2, [sp, #16]
 800e5c8:	3201      	adds	r2, #1
 800e5ca:	9204      	str	r2, [sp, #16]
 800e5cc:	2230      	movs	r2, #48	@ 0x30
 800e5ce:	f88a 2000 	strb.w	r2, [sl]
 800e5d2:	781a      	ldrb	r2, [r3, #0]
 800e5d4:	3201      	adds	r2, #1
 800e5d6:	701a      	strb	r2, [r3, #0]
 800e5d8:	e7bd      	b.n	800e556 <_dtoa_r+0x65e>
 800e5da:	4b7b      	ldr	r3, [pc, #492]	@ (800e7c8 <_dtoa_r+0x8d0>)
 800e5dc:	2200      	movs	r2, #0
 800e5de:	f7f2 f81b 	bl	8000618 <__aeabi_dmul>
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	4604      	mov	r4, r0
 800e5e8:	460d      	mov	r5, r1
 800e5ea:	f7f2 fa7d 	bl	8000ae8 <__aeabi_dcmpeq>
 800e5ee:	2800      	cmp	r0, #0
 800e5f0:	f43f aebb 	beq.w	800e36a <_dtoa_r+0x472>
 800e5f4:	e6f0      	b.n	800e3d8 <_dtoa_r+0x4e0>
 800e5f6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e5f8:	2a00      	cmp	r2, #0
 800e5fa:	f000 80db 	beq.w	800e7b4 <_dtoa_r+0x8bc>
 800e5fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e600:	2a01      	cmp	r2, #1
 800e602:	f300 80bf 	bgt.w	800e784 <_dtoa_r+0x88c>
 800e606:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e608:	2a00      	cmp	r2, #0
 800e60a:	f000 80b7 	beq.w	800e77c <_dtoa_r+0x884>
 800e60e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e612:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e614:	4646      	mov	r6, r8
 800e616:	9a08      	ldr	r2, [sp, #32]
 800e618:	2101      	movs	r1, #1
 800e61a:	441a      	add	r2, r3
 800e61c:	4658      	mov	r0, fp
 800e61e:	4498      	add	r8, r3
 800e620:	9208      	str	r2, [sp, #32]
 800e622:	f000 fb6b 	bl	800ecfc <__i2b>
 800e626:	4605      	mov	r5, r0
 800e628:	b15e      	cbz	r6, 800e642 <_dtoa_r+0x74a>
 800e62a:	9b08      	ldr	r3, [sp, #32]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	dd08      	ble.n	800e642 <_dtoa_r+0x74a>
 800e630:	42b3      	cmp	r3, r6
 800e632:	9a08      	ldr	r2, [sp, #32]
 800e634:	bfa8      	it	ge
 800e636:	4633      	movge	r3, r6
 800e638:	eba8 0803 	sub.w	r8, r8, r3
 800e63c:	1af6      	subs	r6, r6, r3
 800e63e:	1ad3      	subs	r3, r2, r3
 800e640:	9308      	str	r3, [sp, #32]
 800e642:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e644:	b1f3      	cbz	r3, 800e684 <_dtoa_r+0x78c>
 800e646:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e648:	2b00      	cmp	r3, #0
 800e64a:	f000 80b7 	beq.w	800e7bc <_dtoa_r+0x8c4>
 800e64e:	b18c      	cbz	r4, 800e674 <_dtoa_r+0x77c>
 800e650:	4629      	mov	r1, r5
 800e652:	4622      	mov	r2, r4
 800e654:	4658      	mov	r0, fp
 800e656:	f000 fc11 	bl	800ee7c <__pow5mult>
 800e65a:	464a      	mov	r2, r9
 800e65c:	4601      	mov	r1, r0
 800e65e:	4605      	mov	r5, r0
 800e660:	4658      	mov	r0, fp
 800e662:	f000 fb61 	bl	800ed28 <__multiply>
 800e666:	4649      	mov	r1, r9
 800e668:	9004      	str	r0, [sp, #16]
 800e66a:	4658      	mov	r0, fp
 800e66c:	f000 fa92 	bl	800eb94 <_Bfree>
 800e670:	9b04      	ldr	r3, [sp, #16]
 800e672:	4699      	mov	r9, r3
 800e674:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e676:	1b1a      	subs	r2, r3, r4
 800e678:	d004      	beq.n	800e684 <_dtoa_r+0x78c>
 800e67a:	4649      	mov	r1, r9
 800e67c:	4658      	mov	r0, fp
 800e67e:	f000 fbfd 	bl	800ee7c <__pow5mult>
 800e682:	4681      	mov	r9, r0
 800e684:	2101      	movs	r1, #1
 800e686:	4658      	mov	r0, fp
 800e688:	f000 fb38 	bl	800ecfc <__i2b>
 800e68c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e68e:	4604      	mov	r4, r0
 800e690:	2b00      	cmp	r3, #0
 800e692:	f000 81cf 	beq.w	800ea34 <_dtoa_r+0xb3c>
 800e696:	461a      	mov	r2, r3
 800e698:	4601      	mov	r1, r0
 800e69a:	4658      	mov	r0, fp
 800e69c:	f000 fbee 	bl	800ee7c <__pow5mult>
 800e6a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e6a2:	2b01      	cmp	r3, #1
 800e6a4:	4604      	mov	r4, r0
 800e6a6:	f300 8095 	bgt.w	800e7d4 <_dtoa_r+0x8dc>
 800e6aa:	9b02      	ldr	r3, [sp, #8]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	f040 8087 	bne.w	800e7c0 <_dtoa_r+0x8c8>
 800e6b2:	9b03      	ldr	r3, [sp, #12]
 800e6b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	f040 8089 	bne.w	800e7d0 <_dtoa_r+0x8d8>
 800e6be:	9b03      	ldr	r3, [sp, #12]
 800e6c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e6c4:	0d1b      	lsrs	r3, r3, #20
 800e6c6:	051b      	lsls	r3, r3, #20
 800e6c8:	b12b      	cbz	r3, 800e6d6 <_dtoa_r+0x7de>
 800e6ca:	9b08      	ldr	r3, [sp, #32]
 800e6cc:	3301      	adds	r3, #1
 800e6ce:	9308      	str	r3, [sp, #32]
 800e6d0:	f108 0801 	add.w	r8, r8, #1
 800e6d4:	2301      	movs	r3, #1
 800e6d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800e6d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	f000 81b0 	beq.w	800ea40 <_dtoa_r+0xb48>
 800e6e0:	6923      	ldr	r3, [r4, #16]
 800e6e2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e6e6:	6918      	ldr	r0, [r3, #16]
 800e6e8:	f000 fabc 	bl	800ec64 <__hi0bits>
 800e6ec:	f1c0 0020 	rsb	r0, r0, #32
 800e6f0:	9b08      	ldr	r3, [sp, #32]
 800e6f2:	4418      	add	r0, r3
 800e6f4:	f010 001f 	ands.w	r0, r0, #31
 800e6f8:	d077      	beq.n	800e7ea <_dtoa_r+0x8f2>
 800e6fa:	f1c0 0320 	rsb	r3, r0, #32
 800e6fe:	2b04      	cmp	r3, #4
 800e700:	dd6b      	ble.n	800e7da <_dtoa_r+0x8e2>
 800e702:	9b08      	ldr	r3, [sp, #32]
 800e704:	f1c0 001c 	rsb	r0, r0, #28
 800e708:	4403      	add	r3, r0
 800e70a:	4480      	add	r8, r0
 800e70c:	4406      	add	r6, r0
 800e70e:	9308      	str	r3, [sp, #32]
 800e710:	f1b8 0f00 	cmp.w	r8, #0
 800e714:	dd05      	ble.n	800e722 <_dtoa_r+0x82a>
 800e716:	4649      	mov	r1, r9
 800e718:	4642      	mov	r2, r8
 800e71a:	4658      	mov	r0, fp
 800e71c:	f000 fc08 	bl	800ef30 <__lshift>
 800e720:	4681      	mov	r9, r0
 800e722:	9b08      	ldr	r3, [sp, #32]
 800e724:	2b00      	cmp	r3, #0
 800e726:	dd05      	ble.n	800e734 <_dtoa_r+0x83c>
 800e728:	4621      	mov	r1, r4
 800e72a:	461a      	mov	r2, r3
 800e72c:	4658      	mov	r0, fp
 800e72e:	f000 fbff 	bl	800ef30 <__lshift>
 800e732:	4604      	mov	r4, r0
 800e734:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e736:	2b00      	cmp	r3, #0
 800e738:	d059      	beq.n	800e7ee <_dtoa_r+0x8f6>
 800e73a:	4621      	mov	r1, r4
 800e73c:	4648      	mov	r0, r9
 800e73e:	f000 fc63 	bl	800f008 <__mcmp>
 800e742:	2800      	cmp	r0, #0
 800e744:	da53      	bge.n	800e7ee <_dtoa_r+0x8f6>
 800e746:	1e7b      	subs	r3, r7, #1
 800e748:	9304      	str	r3, [sp, #16]
 800e74a:	4649      	mov	r1, r9
 800e74c:	2300      	movs	r3, #0
 800e74e:	220a      	movs	r2, #10
 800e750:	4658      	mov	r0, fp
 800e752:	f000 fa41 	bl	800ebd8 <__multadd>
 800e756:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e758:	4681      	mov	r9, r0
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	f000 8172 	beq.w	800ea44 <_dtoa_r+0xb4c>
 800e760:	2300      	movs	r3, #0
 800e762:	4629      	mov	r1, r5
 800e764:	220a      	movs	r2, #10
 800e766:	4658      	mov	r0, fp
 800e768:	f000 fa36 	bl	800ebd8 <__multadd>
 800e76c:	9b00      	ldr	r3, [sp, #0]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	4605      	mov	r5, r0
 800e772:	dc67      	bgt.n	800e844 <_dtoa_r+0x94c>
 800e774:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e776:	2b02      	cmp	r3, #2
 800e778:	dc41      	bgt.n	800e7fe <_dtoa_r+0x906>
 800e77a:	e063      	b.n	800e844 <_dtoa_r+0x94c>
 800e77c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e77e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e782:	e746      	b.n	800e612 <_dtoa_r+0x71a>
 800e784:	9b07      	ldr	r3, [sp, #28]
 800e786:	1e5c      	subs	r4, r3, #1
 800e788:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e78a:	42a3      	cmp	r3, r4
 800e78c:	bfbf      	itttt	lt
 800e78e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800e790:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800e792:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800e794:	1ae3      	sublt	r3, r4, r3
 800e796:	bfb4      	ite	lt
 800e798:	18d2      	addlt	r2, r2, r3
 800e79a:	1b1c      	subge	r4, r3, r4
 800e79c:	9b07      	ldr	r3, [sp, #28]
 800e79e:	bfbc      	itt	lt
 800e7a0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800e7a2:	2400      	movlt	r4, #0
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	bfb5      	itete	lt
 800e7a8:	eba8 0603 	sublt.w	r6, r8, r3
 800e7ac:	9b07      	ldrge	r3, [sp, #28]
 800e7ae:	2300      	movlt	r3, #0
 800e7b0:	4646      	movge	r6, r8
 800e7b2:	e730      	b.n	800e616 <_dtoa_r+0x71e>
 800e7b4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e7b6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800e7b8:	4646      	mov	r6, r8
 800e7ba:	e735      	b.n	800e628 <_dtoa_r+0x730>
 800e7bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e7be:	e75c      	b.n	800e67a <_dtoa_r+0x782>
 800e7c0:	2300      	movs	r3, #0
 800e7c2:	e788      	b.n	800e6d6 <_dtoa_r+0x7de>
 800e7c4:	3fe00000 	.word	0x3fe00000
 800e7c8:	40240000 	.word	0x40240000
 800e7cc:	40140000 	.word	0x40140000
 800e7d0:	9b02      	ldr	r3, [sp, #8]
 800e7d2:	e780      	b.n	800e6d6 <_dtoa_r+0x7de>
 800e7d4:	2300      	movs	r3, #0
 800e7d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800e7d8:	e782      	b.n	800e6e0 <_dtoa_r+0x7e8>
 800e7da:	d099      	beq.n	800e710 <_dtoa_r+0x818>
 800e7dc:	9a08      	ldr	r2, [sp, #32]
 800e7de:	331c      	adds	r3, #28
 800e7e0:	441a      	add	r2, r3
 800e7e2:	4498      	add	r8, r3
 800e7e4:	441e      	add	r6, r3
 800e7e6:	9208      	str	r2, [sp, #32]
 800e7e8:	e792      	b.n	800e710 <_dtoa_r+0x818>
 800e7ea:	4603      	mov	r3, r0
 800e7ec:	e7f6      	b.n	800e7dc <_dtoa_r+0x8e4>
 800e7ee:	9b07      	ldr	r3, [sp, #28]
 800e7f0:	9704      	str	r7, [sp, #16]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	dc20      	bgt.n	800e838 <_dtoa_r+0x940>
 800e7f6:	9300      	str	r3, [sp, #0]
 800e7f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e7fa:	2b02      	cmp	r3, #2
 800e7fc:	dd1e      	ble.n	800e83c <_dtoa_r+0x944>
 800e7fe:	9b00      	ldr	r3, [sp, #0]
 800e800:	2b00      	cmp	r3, #0
 800e802:	f47f aec0 	bne.w	800e586 <_dtoa_r+0x68e>
 800e806:	4621      	mov	r1, r4
 800e808:	2205      	movs	r2, #5
 800e80a:	4658      	mov	r0, fp
 800e80c:	f000 f9e4 	bl	800ebd8 <__multadd>
 800e810:	4601      	mov	r1, r0
 800e812:	4604      	mov	r4, r0
 800e814:	4648      	mov	r0, r9
 800e816:	f000 fbf7 	bl	800f008 <__mcmp>
 800e81a:	2800      	cmp	r0, #0
 800e81c:	f77f aeb3 	ble.w	800e586 <_dtoa_r+0x68e>
 800e820:	4656      	mov	r6, sl
 800e822:	2331      	movs	r3, #49	@ 0x31
 800e824:	f806 3b01 	strb.w	r3, [r6], #1
 800e828:	9b04      	ldr	r3, [sp, #16]
 800e82a:	3301      	adds	r3, #1
 800e82c:	9304      	str	r3, [sp, #16]
 800e82e:	e6ae      	b.n	800e58e <_dtoa_r+0x696>
 800e830:	9c07      	ldr	r4, [sp, #28]
 800e832:	9704      	str	r7, [sp, #16]
 800e834:	4625      	mov	r5, r4
 800e836:	e7f3      	b.n	800e820 <_dtoa_r+0x928>
 800e838:	9b07      	ldr	r3, [sp, #28]
 800e83a:	9300      	str	r3, [sp, #0]
 800e83c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e83e:	2b00      	cmp	r3, #0
 800e840:	f000 8104 	beq.w	800ea4c <_dtoa_r+0xb54>
 800e844:	2e00      	cmp	r6, #0
 800e846:	dd05      	ble.n	800e854 <_dtoa_r+0x95c>
 800e848:	4629      	mov	r1, r5
 800e84a:	4632      	mov	r2, r6
 800e84c:	4658      	mov	r0, fp
 800e84e:	f000 fb6f 	bl	800ef30 <__lshift>
 800e852:	4605      	mov	r5, r0
 800e854:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e856:	2b00      	cmp	r3, #0
 800e858:	d05a      	beq.n	800e910 <_dtoa_r+0xa18>
 800e85a:	6869      	ldr	r1, [r5, #4]
 800e85c:	4658      	mov	r0, fp
 800e85e:	f000 f959 	bl	800eb14 <_Balloc>
 800e862:	4606      	mov	r6, r0
 800e864:	b928      	cbnz	r0, 800e872 <_dtoa_r+0x97a>
 800e866:	4b84      	ldr	r3, [pc, #528]	@ (800ea78 <_dtoa_r+0xb80>)
 800e868:	4602      	mov	r2, r0
 800e86a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e86e:	f7ff bb5a 	b.w	800df26 <_dtoa_r+0x2e>
 800e872:	692a      	ldr	r2, [r5, #16]
 800e874:	3202      	adds	r2, #2
 800e876:	0092      	lsls	r2, r2, #2
 800e878:	f105 010c 	add.w	r1, r5, #12
 800e87c:	300c      	adds	r0, #12
 800e87e:	f7ff faa4 	bl	800ddca <memcpy>
 800e882:	2201      	movs	r2, #1
 800e884:	4631      	mov	r1, r6
 800e886:	4658      	mov	r0, fp
 800e888:	f000 fb52 	bl	800ef30 <__lshift>
 800e88c:	f10a 0301 	add.w	r3, sl, #1
 800e890:	9307      	str	r3, [sp, #28]
 800e892:	9b00      	ldr	r3, [sp, #0]
 800e894:	4453      	add	r3, sl
 800e896:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e898:	9b02      	ldr	r3, [sp, #8]
 800e89a:	f003 0301 	and.w	r3, r3, #1
 800e89e:	462f      	mov	r7, r5
 800e8a0:	930a      	str	r3, [sp, #40]	@ 0x28
 800e8a2:	4605      	mov	r5, r0
 800e8a4:	9b07      	ldr	r3, [sp, #28]
 800e8a6:	4621      	mov	r1, r4
 800e8a8:	3b01      	subs	r3, #1
 800e8aa:	4648      	mov	r0, r9
 800e8ac:	9300      	str	r3, [sp, #0]
 800e8ae:	f7ff fa9a 	bl	800dde6 <quorem>
 800e8b2:	4639      	mov	r1, r7
 800e8b4:	9002      	str	r0, [sp, #8]
 800e8b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e8ba:	4648      	mov	r0, r9
 800e8bc:	f000 fba4 	bl	800f008 <__mcmp>
 800e8c0:	462a      	mov	r2, r5
 800e8c2:	9008      	str	r0, [sp, #32]
 800e8c4:	4621      	mov	r1, r4
 800e8c6:	4658      	mov	r0, fp
 800e8c8:	f000 fbba 	bl	800f040 <__mdiff>
 800e8cc:	68c2      	ldr	r2, [r0, #12]
 800e8ce:	4606      	mov	r6, r0
 800e8d0:	bb02      	cbnz	r2, 800e914 <_dtoa_r+0xa1c>
 800e8d2:	4601      	mov	r1, r0
 800e8d4:	4648      	mov	r0, r9
 800e8d6:	f000 fb97 	bl	800f008 <__mcmp>
 800e8da:	4602      	mov	r2, r0
 800e8dc:	4631      	mov	r1, r6
 800e8de:	4658      	mov	r0, fp
 800e8e0:	920e      	str	r2, [sp, #56]	@ 0x38
 800e8e2:	f000 f957 	bl	800eb94 <_Bfree>
 800e8e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e8e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e8ea:	9e07      	ldr	r6, [sp, #28]
 800e8ec:	ea43 0102 	orr.w	r1, r3, r2
 800e8f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e8f2:	4319      	orrs	r1, r3
 800e8f4:	d110      	bne.n	800e918 <_dtoa_r+0xa20>
 800e8f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e8fa:	d029      	beq.n	800e950 <_dtoa_r+0xa58>
 800e8fc:	9b08      	ldr	r3, [sp, #32]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	dd02      	ble.n	800e908 <_dtoa_r+0xa10>
 800e902:	9b02      	ldr	r3, [sp, #8]
 800e904:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800e908:	9b00      	ldr	r3, [sp, #0]
 800e90a:	f883 8000 	strb.w	r8, [r3]
 800e90e:	e63f      	b.n	800e590 <_dtoa_r+0x698>
 800e910:	4628      	mov	r0, r5
 800e912:	e7bb      	b.n	800e88c <_dtoa_r+0x994>
 800e914:	2201      	movs	r2, #1
 800e916:	e7e1      	b.n	800e8dc <_dtoa_r+0x9e4>
 800e918:	9b08      	ldr	r3, [sp, #32]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	db04      	blt.n	800e928 <_dtoa_r+0xa30>
 800e91e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e920:	430b      	orrs	r3, r1
 800e922:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e924:	430b      	orrs	r3, r1
 800e926:	d120      	bne.n	800e96a <_dtoa_r+0xa72>
 800e928:	2a00      	cmp	r2, #0
 800e92a:	dded      	ble.n	800e908 <_dtoa_r+0xa10>
 800e92c:	4649      	mov	r1, r9
 800e92e:	2201      	movs	r2, #1
 800e930:	4658      	mov	r0, fp
 800e932:	f000 fafd 	bl	800ef30 <__lshift>
 800e936:	4621      	mov	r1, r4
 800e938:	4681      	mov	r9, r0
 800e93a:	f000 fb65 	bl	800f008 <__mcmp>
 800e93e:	2800      	cmp	r0, #0
 800e940:	dc03      	bgt.n	800e94a <_dtoa_r+0xa52>
 800e942:	d1e1      	bne.n	800e908 <_dtoa_r+0xa10>
 800e944:	f018 0f01 	tst.w	r8, #1
 800e948:	d0de      	beq.n	800e908 <_dtoa_r+0xa10>
 800e94a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e94e:	d1d8      	bne.n	800e902 <_dtoa_r+0xa0a>
 800e950:	9a00      	ldr	r2, [sp, #0]
 800e952:	2339      	movs	r3, #57	@ 0x39
 800e954:	7013      	strb	r3, [r2, #0]
 800e956:	4633      	mov	r3, r6
 800e958:	461e      	mov	r6, r3
 800e95a:	3b01      	subs	r3, #1
 800e95c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e960:	2a39      	cmp	r2, #57	@ 0x39
 800e962:	d052      	beq.n	800ea0a <_dtoa_r+0xb12>
 800e964:	3201      	adds	r2, #1
 800e966:	701a      	strb	r2, [r3, #0]
 800e968:	e612      	b.n	800e590 <_dtoa_r+0x698>
 800e96a:	2a00      	cmp	r2, #0
 800e96c:	dd07      	ble.n	800e97e <_dtoa_r+0xa86>
 800e96e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e972:	d0ed      	beq.n	800e950 <_dtoa_r+0xa58>
 800e974:	9a00      	ldr	r2, [sp, #0]
 800e976:	f108 0301 	add.w	r3, r8, #1
 800e97a:	7013      	strb	r3, [r2, #0]
 800e97c:	e608      	b.n	800e590 <_dtoa_r+0x698>
 800e97e:	9b07      	ldr	r3, [sp, #28]
 800e980:	9a07      	ldr	r2, [sp, #28]
 800e982:	f803 8c01 	strb.w	r8, [r3, #-1]
 800e986:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e988:	4293      	cmp	r3, r2
 800e98a:	d028      	beq.n	800e9de <_dtoa_r+0xae6>
 800e98c:	4649      	mov	r1, r9
 800e98e:	2300      	movs	r3, #0
 800e990:	220a      	movs	r2, #10
 800e992:	4658      	mov	r0, fp
 800e994:	f000 f920 	bl	800ebd8 <__multadd>
 800e998:	42af      	cmp	r7, r5
 800e99a:	4681      	mov	r9, r0
 800e99c:	f04f 0300 	mov.w	r3, #0
 800e9a0:	f04f 020a 	mov.w	r2, #10
 800e9a4:	4639      	mov	r1, r7
 800e9a6:	4658      	mov	r0, fp
 800e9a8:	d107      	bne.n	800e9ba <_dtoa_r+0xac2>
 800e9aa:	f000 f915 	bl	800ebd8 <__multadd>
 800e9ae:	4607      	mov	r7, r0
 800e9b0:	4605      	mov	r5, r0
 800e9b2:	9b07      	ldr	r3, [sp, #28]
 800e9b4:	3301      	adds	r3, #1
 800e9b6:	9307      	str	r3, [sp, #28]
 800e9b8:	e774      	b.n	800e8a4 <_dtoa_r+0x9ac>
 800e9ba:	f000 f90d 	bl	800ebd8 <__multadd>
 800e9be:	4629      	mov	r1, r5
 800e9c0:	4607      	mov	r7, r0
 800e9c2:	2300      	movs	r3, #0
 800e9c4:	220a      	movs	r2, #10
 800e9c6:	4658      	mov	r0, fp
 800e9c8:	f000 f906 	bl	800ebd8 <__multadd>
 800e9cc:	4605      	mov	r5, r0
 800e9ce:	e7f0      	b.n	800e9b2 <_dtoa_r+0xaba>
 800e9d0:	9b00      	ldr	r3, [sp, #0]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	bfcc      	ite	gt
 800e9d6:	461e      	movgt	r6, r3
 800e9d8:	2601      	movle	r6, #1
 800e9da:	4456      	add	r6, sl
 800e9dc:	2700      	movs	r7, #0
 800e9de:	4649      	mov	r1, r9
 800e9e0:	2201      	movs	r2, #1
 800e9e2:	4658      	mov	r0, fp
 800e9e4:	f000 faa4 	bl	800ef30 <__lshift>
 800e9e8:	4621      	mov	r1, r4
 800e9ea:	4681      	mov	r9, r0
 800e9ec:	f000 fb0c 	bl	800f008 <__mcmp>
 800e9f0:	2800      	cmp	r0, #0
 800e9f2:	dcb0      	bgt.n	800e956 <_dtoa_r+0xa5e>
 800e9f4:	d102      	bne.n	800e9fc <_dtoa_r+0xb04>
 800e9f6:	f018 0f01 	tst.w	r8, #1
 800e9fa:	d1ac      	bne.n	800e956 <_dtoa_r+0xa5e>
 800e9fc:	4633      	mov	r3, r6
 800e9fe:	461e      	mov	r6, r3
 800ea00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ea04:	2a30      	cmp	r2, #48	@ 0x30
 800ea06:	d0fa      	beq.n	800e9fe <_dtoa_r+0xb06>
 800ea08:	e5c2      	b.n	800e590 <_dtoa_r+0x698>
 800ea0a:	459a      	cmp	sl, r3
 800ea0c:	d1a4      	bne.n	800e958 <_dtoa_r+0xa60>
 800ea0e:	9b04      	ldr	r3, [sp, #16]
 800ea10:	3301      	adds	r3, #1
 800ea12:	9304      	str	r3, [sp, #16]
 800ea14:	2331      	movs	r3, #49	@ 0x31
 800ea16:	f88a 3000 	strb.w	r3, [sl]
 800ea1a:	e5b9      	b.n	800e590 <_dtoa_r+0x698>
 800ea1c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ea1e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ea7c <_dtoa_r+0xb84>
 800ea22:	b11b      	cbz	r3, 800ea2c <_dtoa_r+0xb34>
 800ea24:	f10a 0308 	add.w	r3, sl, #8
 800ea28:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ea2a:	6013      	str	r3, [r2, #0]
 800ea2c:	4650      	mov	r0, sl
 800ea2e:	b019      	add	sp, #100	@ 0x64
 800ea30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea36:	2b01      	cmp	r3, #1
 800ea38:	f77f ae37 	ble.w	800e6aa <_dtoa_r+0x7b2>
 800ea3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ea3e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ea40:	2001      	movs	r0, #1
 800ea42:	e655      	b.n	800e6f0 <_dtoa_r+0x7f8>
 800ea44:	9b00      	ldr	r3, [sp, #0]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	f77f aed6 	ble.w	800e7f8 <_dtoa_r+0x900>
 800ea4c:	4656      	mov	r6, sl
 800ea4e:	4621      	mov	r1, r4
 800ea50:	4648      	mov	r0, r9
 800ea52:	f7ff f9c8 	bl	800dde6 <quorem>
 800ea56:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ea5a:	f806 8b01 	strb.w	r8, [r6], #1
 800ea5e:	9b00      	ldr	r3, [sp, #0]
 800ea60:	eba6 020a 	sub.w	r2, r6, sl
 800ea64:	4293      	cmp	r3, r2
 800ea66:	ddb3      	ble.n	800e9d0 <_dtoa_r+0xad8>
 800ea68:	4649      	mov	r1, r9
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	220a      	movs	r2, #10
 800ea6e:	4658      	mov	r0, fp
 800ea70:	f000 f8b2 	bl	800ebd8 <__multadd>
 800ea74:	4681      	mov	r9, r0
 800ea76:	e7ea      	b.n	800ea4e <_dtoa_r+0xb56>
 800ea78:	08010508 	.word	0x08010508
 800ea7c:	0801048c 	.word	0x0801048c

0800ea80 <_free_r>:
 800ea80:	b538      	push	{r3, r4, r5, lr}
 800ea82:	4605      	mov	r5, r0
 800ea84:	2900      	cmp	r1, #0
 800ea86:	d041      	beq.n	800eb0c <_free_r+0x8c>
 800ea88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea8c:	1f0c      	subs	r4, r1, #4
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	bfb8      	it	lt
 800ea92:	18e4      	addlt	r4, r4, r3
 800ea94:	f7fe fac8 	bl	800d028 <__malloc_lock>
 800ea98:	4a1d      	ldr	r2, [pc, #116]	@ (800eb10 <_free_r+0x90>)
 800ea9a:	6813      	ldr	r3, [r2, #0]
 800ea9c:	b933      	cbnz	r3, 800eaac <_free_r+0x2c>
 800ea9e:	6063      	str	r3, [r4, #4]
 800eaa0:	6014      	str	r4, [r2, #0]
 800eaa2:	4628      	mov	r0, r5
 800eaa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eaa8:	f7fe bac4 	b.w	800d034 <__malloc_unlock>
 800eaac:	42a3      	cmp	r3, r4
 800eaae:	d908      	bls.n	800eac2 <_free_r+0x42>
 800eab0:	6820      	ldr	r0, [r4, #0]
 800eab2:	1821      	adds	r1, r4, r0
 800eab4:	428b      	cmp	r3, r1
 800eab6:	bf01      	itttt	eq
 800eab8:	6819      	ldreq	r1, [r3, #0]
 800eaba:	685b      	ldreq	r3, [r3, #4]
 800eabc:	1809      	addeq	r1, r1, r0
 800eabe:	6021      	streq	r1, [r4, #0]
 800eac0:	e7ed      	b.n	800ea9e <_free_r+0x1e>
 800eac2:	461a      	mov	r2, r3
 800eac4:	685b      	ldr	r3, [r3, #4]
 800eac6:	b10b      	cbz	r3, 800eacc <_free_r+0x4c>
 800eac8:	42a3      	cmp	r3, r4
 800eaca:	d9fa      	bls.n	800eac2 <_free_r+0x42>
 800eacc:	6811      	ldr	r1, [r2, #0]
 800eace:	1850      	adds	r0, r2, r1
 800ead0:	42a0      	cmp	r0, r4
 800ead2:	d10b      	bne.n	800eaec <_free_r+0x6c>
 800ead4:	6820      	ldr	r0, [r4, #0]
 800ead6:	4401      	add	r1, r0
 800ead8:	1850      	adds	r0, r2, r1
 800eada:	4283      	cmp	r3, r0
 800eadc:	6011      	str	r1, [r2, #0]
 800eade:	d1e0      	bne.n	800eaa2 <_free_r+0x22>
 800eae0:	6818      	ldr	r0, [r3, #0]
 800eae2:	685b      	ldr	r3, [r3, #4]
 800eae4:	6053      	str	r3, [r2, #4]
 800eae6:	4408      	add	r0, r1
 800eae8:	6010      	str	r0, [r2, #0]
 800eaea:	e7da      	b.n	800eaa2 <_free_r+0x22>
 800eaec:	d902      	bls.n	800eaf4 <_free_r+0x74>
 800eaee:	230c      	movs	r3, #12
 800eaf0:	602b      	str	r3, [r5, #0]
 800eaf2:	e7d6      	b.n	800eaa2 <_free_r+0x22>
 800eaf4:	6820      	ldr	r0, [r4, #0]
 800eaf6:	1821      	adds	r1, r4, r0
 800eaf8:	428b      	cmp	r3, r1
 800eafa:	bf04      	itt	eq
 800eafc:	6819      	ldreq	r1, [r3, #0]
 800eafe:	685b      	ldreq	r3, [r3, #4]
 800eb00:	6063      	str	r3, [r4, #4]
 800eb02:	bf04      	itt	eq
 800eb04:	1809      	addeq	r1, r1, r0
 800eb06:	6021      	streq	r1, [r4, #0]
 800eb08:	6054      	str	r4, [r2, #4]
 800eb0a:	e7ca      	b.n	800eaa2 <_free_r+0x22>
 800eb0c:	bd38      	pop	{r3, r4, r5, pc}
 800eb0e:	bf00      	nop
 800eb10:	20012eb4 	.word	0x20012eb4

0800eb14 <_Balloc>:
 800eb14:	b570      	push	{r4, r5, r6, lr}
 800eb16:	69c6      	ldr	r6, [r0, #28]
 800eb18:	4604      	mov	r4, r0
 800eb1a:	460d      	mov	r5, r1
 800eb1c:	b976      	cbnz	r6, 800eb3c <_Balloc+0x28>
 800eb1e:	2010      	movs	r0, #16
 800eb20:	f7fe f9d0 	bl	800cec4 <malloc>
 800eb24:	4602      	mov	r2, r0
 800eb26:	61e0      	str	r0, [r4, #28]
 800eb28:	b920      	cbnz	r0, 800eb34 <_Balloc+0x20>
 800eb2a:	4b18      	ldr	r3, [pc, #96]	@ (800eb8c <_Balloc+0x78>)
 800eb2c:	4818      	ldr	r0, [pc, #96]	@ (800eb90 <_Balloc+0x7c>)
 800eb2e:	216b      	movs	r1, #107	@ 0x6b
 800eb30:	f000 fd98 	bl	800f664 <__assert_func>
 800eb34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eb38:	6006      	str	r6, [r0, #0]
 800eb3a:	60c6      	str	r6, [r0, #12]
 800eb3c:	69e6      	ldr	r6, [r4, #28]
 800eb3e:	68f3      	ldr	r3, [r6, #12]
 800eb40:	b183      	cbz	r3, 800eb64 <_Balloc+0x50>
 800eb42:	69e3      	ldr	r3, [r4, #28]
 800eb44:	68db      	ldr	r3, [r3, #12]
 800eb46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800eb4a:	b9b8      	cbnz	r0, 800eb7c <_Balloc+0x68>
 800eb4c:	2101      	movs	r1, #1
 800eb4e:	fa01 f605 	lsl.w	r6, r1, r5
 800eb52:	1d72      	adds	r2, r6, #5
 800eb54:	0092      	lsls	r2, r2, #2
 800eb56:	4620      	mov	r0, r4
 800eb58:	f000 fda2 	bl	800f6a0 <_calloc_r>
 800eb5c:	b160      	cbz	r0, 800eb78 <_Balloc+0x64>
 800eb5e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800eb62:	e00e      	b.n	800eb82 <_Balloc+0x6e>
 800eb64:	2221      	movs	r2, #33	@ 0x21
 800eb66:	2104      	movs	r1, #4
 800eb68:	4620      	mov	r0, r4
 800eb6a:	f000 fd99 	bl	800f6a0 <_calloc_r>
 800eb6e:	69e3      	ldr	r3, [r4, #28]
 800eb70:	60f0      	str	r0, [r6, #12]
 800eb72:	68db      	ldr	r3, [r3, #12]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d1e4      	bne.n	800eb42 <_Balloc+0x2e>
 800eb78:	2000      	movs	r0, #0
 800eb7a:	bd70      	pop	{r4, r5, r6, pc}
 800eb7c:	6802      	ldr	r2, [r0, #0]
 800eb7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800eb82:	2300      	movs	r3, #0
 800eb84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800eb88:	e7f7      	b.n	800eb7a <_Balloc+0x66>
 800eb8a:	bf00      	nop
 800eb8c:	08010499 	.word	0x08010499
 800eb90:	08010519 	.word	0x08010519

0800eb94 <_Bfree>:
 800eb94:	b570      	push	{r4, r5, r6, lr}
 800eb96:	69c6      	ldr	r6, [r0, #28]
 800eb98:	4605      	mov	r5, r0
 800eb9a:	460c      	mov	r4, r1
 800eb9c:	b976      	cbnz	r6, 800ebbc <_Bfree+0x28>
 800eb9e:	2010      	movs	r0, #16
 800eba0:	f7fe f990 	bl	800cec4 <malloc>
 800eba4:	4602      	mov	r2, r0
 800eba6:	61e8      	str	r0, [r5, #28]
 800eba8:	b920      	cbnz	r0, 800ebb4 <_Bfree+0x20>
 800ebaa:	4b09      	ldr	r3, [pc, #36]	@ (800ebd0 <_Bfree+0x3c>)
 800ebac:	4809      	ldr	r0, [pc, #36]	@ (800ebd4 <_Bfree+0x40>)
 800ebae:	218f      	movs	r1, #143	@ 0x8f
 800ebb0:	f000 fd58 	bl	800f664 <__assert_func>
 800ebb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ebb8:	6006      	str	r6, [r0, #0]
 800ebba:	60c6      	str	r6, [r0, #12]
 800ebbc:	b13c      	cbz	r4, 800ebce <_Bfree+0x3a>
 800ebbe:	69eb      	ldr	r3, [r5, #28]
 800ebc0:	6862      	ldr	r2, [r4, #4]
 800ebc2:	68db      	ldr	r3, [r3, #12]
 800ebc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ebc8:	6021      	str	r1, [r4, #0]
 800ebca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ebce:	bd70      	pop	{r4, r5, r6, pc}
 800ebd0:	08010499 	.word	0x08010499
 800ebd4:	08010519 	.word	0x08010519

0800ebd8 <__multadd>:
 800ebd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebdc:	690d      	ldr	r5, [r1, #16]
 800ebde:	4607      	mov	r7, r0
 800ebe0:	460c      	mov	r4, r1
 800ebe2:	461e      	mov	r6, r3
 800ebe4:	f101 0c14 	add.w	ip, r1, #20
 800ebe8:	2000      	movs	r0, #0
 800ebea:	f8dc 3000 	ldr.w	r3, [ip]
 800ebee:	b299      	uxth	r1, r3
 800ebf0:	fb02 6101 	mla	r1, r2, r1, r6
 800ebf4:	0c1e      	lsrs	r6, r3, #16
 800ebf6:	0c0b      	lsrs	r3, r1, #16
 800ebf8:	fb02 3306 	mla	r3, r2, r6, r3
 800ebfc:	b289      	uxth	r1, r1
 800ebfe:	3001      	adds	r0, #1
 800ec00:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ec04:	4285      	cmp	r5, r0
 800ec06:	f84c 1b04 	str.w	r1, [ip], #4
 800ec0a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ec0e:	dcec      	bgt.n	800ebea <__multadd+0x12>
 800ec10:	b30e      	cbz	r6, 800ec56 <__multadd+0x7e>
 800ec12:	68a3      	ldr	r3, [r4, #8]
 800ec14:	42ab      	cmp	r3, r5
 800ec16:	dc19      	bgt.n	800ec4c <__multadd+0x74>
 800ec18:	6861      	ldr	r1, [r4, #4]
 800ec1a:	4638      	mov	r0, r7
 800ec1c:	3101      	adds	r1, #1
 800ec1e:	f7ff ff79 	bl	800eb14 <_Balloc>
 800ec22:	4680      	mov	r8, r0
 800ec24:	b928      	cbnz	r0, 800ec32 <__multadd+0x5a>
 800ec26:	4602      	mov	r2, r0
 800ec28:	4b0c      	ldr	r3, [pc, #48]	@ (800ec5c <__multadd+0x84>)
 800ec2a:	480d      	ldr	r0, [pc, #52]	@ (800ec60 <__multadd+0x88>)
 800ec2c:	21ba      	movs	r1, #186	@ 0xba
 800ec2e:	f000 fd19 	bl	800f664 <__assert_func>
 800ec32:	6922      	ldr	r2, [r4, #16]
 800ec34:	3202      	adds	r2, #2
 800ec36:	f104 010c 	add.w	r1, r4, #12
 800ec3a:	0092      	lsls	r2, r2, #2
 800ec3c:	300c      	adds	r0, #12
 800ec3e:	f7ff f8c4 	bl	800ddca <memcpy>
 800ec42:	4621      	mov	r1, r4
 800ec44:	4638      	mov	r0, r7
 800ec46:	f7ff ffa5 	bl	800eb94 <_Bfree>
 800ec4a:	4644      	mov	r4, r8
 800ec4c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ec50:	3501      	adds	r5, #1
 800ec52:	615e      	str	r6, [r3, #20]
 800ec54:	6125      	str	r5, [r4, #16]
 800ec56:	4620      	mov	r0, r4
 800ec58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec5c:	08010508 	.word	0x08010508
 800ec60:	08010519 	.word	0x08010519

0800ec64 <__hi0bits>:
 800ec64:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ec68:	4603      	mov	r3, r0
 800ec6a:	bf36      	itet	cc
 800ec6c:	0403      	lslcc	r3, r0, #16
 800ec6e:	2000      	movcs	r0, #0
 800ec70:	2010      	movcc	r0, #16
 800ec72:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ec76:	bf3c      	itt	cc
 800ec78:	021b      	lslcc	r3, r3, #8
 800ec7a:	3008      	addcc	r0, #8
 800ec7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ec80:	bf3c      	itt	cc
 800ec82:	011b      	lslcc	r3, r3, #4
 800ec84:	3004      	addcc	r0, #4
 800ec86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ec8a:	bf3c      	itt	cc
 800ec8c:	009b      	lslcc	r3, r3, #2
 800ec8e:	3002      	addcc	r0, #2
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	db05      	blt.n	800eca0 <__hi0bits+0x3c>
 800ec94:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ec98:	f100 0001 	add.w	r0, r0, #1
 800ec9c:	bf08      	it	eq
 800ec9e:	2020      	moveq	r0, #32
 800eca0:	4770      	bx	lr

0800eca2 <__lo0bits>:
 800eca2:	6803      	ldr	r3, [r0, #0]
 800eca4:	4602      	mov	r2, r0
 800eca6:	f013 0007 	ands.w	r0, r3, #7
 800ecaa:	d00b      	beq.n	800ecc4 <__lo0bits+0x22>
 800ecac:	07d9      	lsls	r1, r3, #31
 800ecae:	d421      	bmi.n	800ecf4 <__lo0bits+0x52>
 800ecb0:	0798      	lsls	r0, r3, #30
 800ecb2:	bf49      	itett	mi
 800ecb4:	085b      	lsrmi	r3, r3, #1
 800ecb6:	089b      	lsrpl	r3, r3, #2
 800ecb8:	2001      	movmi	r0, #1
 800ecba:	6013      	strmi	r3, [r2, #0]
 800ecbc:	bf5c      	itt	pl
 800ecbe:	6013      	strpl	r3, [r2, #0]
 800ecc0:	2002      	movpl	r0, #2
 800ecc2:	4770      	bx	lr
 800ecc4:	b299      	uxth	r1, r3
 800ecc6:	b909      	cbnz	r1, 800eccc <__lo0bits+0x2a>
 800ecc8:	0c1b      	lsrs	r3, r3, #16
 800ecca:	2010      	movs	r0, #16
 800eccc:	b2d9      	uxtb	r1, r3
 800ecce:	b909      	cbnz	r1, 800ecd4 <__lo0bits+0x32>
 800ecd0:	3008      	adds	r0, #8
 800ecd2:	0a1b      	lsrs	r3, r3, #8
 800ecd4:	0719      	lsls	r1, r3, #28
 800ecd6:	bf04      	itt	eq
 800ecd8:	091b      	lsreq	r3, r3, #4
 800ecda:	3004      	addeq	r0, #4
 800ecdc:	0799      	lsls	r1, r3, #30
 800ecde:	bf04      	itt	eq
 800ece0:	089b      	lsreq	r3, r3, #2
 800ece2:	3002      	addeq	r0, #2
 800ece4:	07d9      	lsls	r1, r3, #31
 800ece6:	d403      	bmi.n	800ecf0 <__lo0bits+0x4e>
 800ece8:	085b      	lsrs	r3, r3, #1
 800ecea:	f100 0001 	add.w	r0, r0, #1
 800ecee:	d003      	beq.n	800ecf8 <__lo0bits+0x56>
 800ecf0:	6013      	str	r3, [r2, #0]
 800ecf2:	4770      	bx	lr
 800ecf4:	2000      	movs	r0, #0
 800ecf6:	4770      	bx	lr
 800ecf8:	2020      	movs	r0, #32
 800ecfa:	4770      	bx	lr

0800ecfc <__i2b>:
 800ecfc:	b510      	push	{r4, lr}
 800ecfe:	460c      	mov	r4, r1
 800ed00:	2101      	movs	r1, #1
 800ed02:	f7ff ff07 	bl	800eb14 <_Balloc>
 800ed06:	4602      	mov	r2, r0
 800ed08:	b928      	cbnz	r0, 800ed16 <__i2b+0x1a>
 800ed0a:	4b05      	ldr	r3, [pc, #20]	@ (800ed20 <__i2b+0x24>)
 800ed0c:	4805      	ldr	r0, [pc, #20]	@ (800ed24 <__i2b+0x28>)
 800ed0e:	f240 1145 	movw	r1, #325	@ 0x145
 800ed12:	f000 fca7 	bl	800f664 <__assert_func>
 800ed16:	2301      	movs	r3, #1
 800ed18:	6144      	str	r4, [r0, #20]
 800ed1a:	6103      	str	r3, [r0, #16]
 800ed1c:	bd10      	pop	{r4, pc}
 800ed1e:	bf00      	nop
 800ed20:	08010508 	.word	0x08010508
 800ed24:	08010519 	.word	0x08010519

0800ed28 <__multiply>:
 800ed28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed2c:	4614      	mov	r4, r2
 800ed2e:	690a      	ldr	r2, [r1, #16]
 800ed30:	6923      	ldr	r3, [r4, #16]
 800ed32:	429a      	cmp	r2, r3
 800ed34:	bfa8      	it	ge
 800ed36:	4623      	movge	r3, r4
 800ed38:	460f      	mov	r7, r1
 800ed3a:	bfa4      	itt	ge
 800ed3c:	460c      	movge	r4, r1
 800ed3e:	461f      	movge	r7, r3
 800ed40:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ed44:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ed48:	68a3      	ldr	r3, [r4, #8]
 800ed4a:	6861      	ldr	r1, [r4, #4]
 800ed4c:	eb0a 0609 	add.w	r6, sl, r9
 800ed50:	42b3      	cmp	r3, r6
 800ed52:	b085      	sub	sp, #20
 800ed54:	bfb8      	it	lt
 800ed56:	3101      	addlt	r1, #1
 800ed58:	f7ff fedc 	bl	800eb14 <_Balloc>
 800ed5c:	b930      	cbnz	r0, 800ed6c <__multiply+0x44>
 800ed5e:	4602      	mov	r2, r0
 800ed60:	4b44      	ldr	r3, [pc, #272]	@ (800ee74 <__multiply+0x14c>)
 800ed62:	4845      	ldr	r0, [pc, #276]	@ (800ee78 <__multiply+0x150>)
 800ed64:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ed68:	f000 fc7c 	bl	800f664 <__assert_func>
 800ed6c:	f100 0514 	add.w	r5, r0, #20
 800ed70:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ed74:	462b      	mov	r3, r5
 800ed76:	2200      	movs	r2, #0
 800ed78:	4543      	cmp	r3, r8
 800ed7a:	d321      	bcc.n	800edc0 <__multiply+0x98>
 800ed7c:	f107 0114 	add.w	r1, r7, #20
 800ed80:	f104 0214 	add.w	r2, r4, #20
 800ed84:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ed88:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ed8c:	9302      	str	r3, [sp, #8]
 800ed8e:	1b13      	subs	r3, r2, r4
 800ed90:	3b15      	subs	r3, #21
 800ed92:	f023 0303 	bic.w	r3, r3, #3
 800ed96:	3304      	adds	r3, #4
 800ed98:	f104 0715 	add.w	r7, r4, #21
 800ed9c:	42ba      	cmp	r2, r7
 800ed9e:	bf38      	it	cc
 800eda0:	2304      	movcc	r3, #4
 800eda2:	9301      	str	r3, [sp, #4]
 800eda4:	9b02      	ldr	r3, [sp, #8]
 800eda6:	9103      	str	r1, [sp, #12]
 800eda8:	428b      	cmp	r3, r1
 800edaa:	d80c      	bhi.n	800edc6 <__multiply+0x9e>
 800edac:	2e00      	cmp	r6, #0
 800edae:	dd03      	ble.n	800edb8 <__multiply+0x90>
 800edb0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d05b      	beq.n	800ee70 <__multiply+0x148>
 800edb8:	6106      	str	r6, [r0, #16]
 800edba:	b005      	add	sp, #20
 800edbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edc0:	f843 2b04 	str.w	r2, [r3], #4
 800edc4:	e7d8      	b.n	800ed78 <__multiply+0x50>
 800edc6:	f8b1 a000 	ldrh.w	sl, [r1]
 800edca:	f1ba 0f00 	cmp.w	sl, #0
 800edce:	d024      	beq.n	800ee1a <__multiply+0xf2>
 800edd0:	f104 0e14 	add.w	lr, r4, #20
 800edd4:	46a9      	mov	r9, r5
 800edd6:	f04f 0c00 	mov.w	ip, #0
 800edda:	f85e 7b04 	ldr.w	r7, [lr], #4
 800edde:	f8d9 3000 	ldr.w	r3, [r9]
 800ede2:	fa1f fb87 	uxth.w	fp, r7
 800ede6:	b29b      	uxth	r3, r3
 800ede8:	fb0a 330b 	mla	r3, sl, fp, r3
 800edec:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800edf0:	f8d9 7000 	ldr.w	r7, [r9]
 800edf4:	4463      	add	r3, ip
 800edf6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800edfa:	fb0a c70b 	mla	r7, sl, fp, ip
 800edfe:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ee02:	b29b      	uxth	r3, r3
 800ee04:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ee08:	4572      	cmp	r2, lr
 800ee0a:	f849 3b04 	str.w	r3, [r9], #4
 800ee0e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ee12:	d8e2      	bhi.n	800edda <__multiply+0xb2>
 800ee14:	9b01      	ldr	r3, [sp, #4]
 800ee16:	f845 c003 	str.w	ip, [r5, r3]
 800ee1a:	9b03      	ldr	r3, [sp, #12]
 800ee1c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ee20:	3104      	adds	r1, #4
 800ee22:	f1b9 0f00 	cmp.w	r9, #0
 800ee26:	d021      	beq.n	800ee6c <__multiply+0x144>
 800ee28:	682b      	ldr	r3, [r5, #0]
 800ee2a:	f104 0c14 	add.w	ip, r4, #20
 800ee2e:	46ae      	mov	lr, r5
 800ee30:	f04f 0a00 	mov.w	sl, #0
 800ee34:	f8bc b000 	ldrh.w	fp, [ip]
 800ee38:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ee3c:	fb09 770b 	mla	r7, r9, fp, r7
 800ee40:	4457      	add	r7, sl
 800ee42:	b29b      	uxth	r3, r3
 800ee44:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ee48:	f84e 3b04 	str.w	r3, [lr], #4
 800ee4c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ee50:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ee54:	f8be 3000 	ldrh.w	r3, [lr]
 800ee58:	fb09 330a 	mla	r3, r9, sl, r3
 800ee5c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ee60:	4562      	cmp	r2, ip
 800ee62:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ee66:	d8e5      	bhi.n	800ee34 <__multiply+0x10c>
 800ee68:	9f01      	ldr	r7, [sp, #4]
 800ee6a:	51eb      	str	r3, [r5, r7]
 800ee6c:	3504      	adds	r5, #4
 800ee6e:	e799      	b.n	800eda4 <__multiply+0x7c>
 800ee70:	3e01      	subs	r6, #1
 800ee72:	e79b      	b.n	800edac <__multiply+0x84>
 800ee74:	08010508 	.word	0x08010508
 800ee78:	08010519 	.word	0x08010519

0800ee7c <__pow5mult>:
 800ee7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee80:	4615      	mov	r5, r2
 800ee82:	f012 0203 	ands.w	r2, r2, #3
 800ee86:	4607      	mov	r7, r0
 800ee88:	460e      	mov	r6, r1
 800ee8a:	d007      	beq.n	800ee9c <__pow5mult+0x20>
 800ee8c:	4c25      	ldr	r4, [pc, #148]	@ (800ef24 <__pow5mult+0xa8>)
 800ee8e:	3a01      	subs	r2, #1
 800ee90:	2300      	movs	r3, #0
 800ee92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ee96:	f7ff fe9f 	bl	800ebd8 <__multadd>
 800ee9a:	4606      	mov	r6, r0
 800ee9c:	10ad      	asrs	r5, r5, #2
 800ee9e:	d03d      	beq.n	800ef1c <__pow5mult+0xa0>
 800eea0:	69fc      	ldr	r4, [r7, #28]
 800eea2:	b97c      	cbnz	r4, 800eec4 <__pow5mult+0x48>
 800eea4:	2010      	movs	r0, #16
 800eea6:	f7fe f80d 	bl	800cec4 <malloc>
 800eeaa:	4602      	mov	r2, r0
 800eeac:	61f8      	str	r0, [r7, #28]
 800eeae:	b928      	cbnz	r0, 800eebc <__pow5mult+0x40>
 800eeb0:	4b1d      	ldr	r3, [pc, #116]	@ (800ef28 <__pow5mult+0xac>)
 800eeb2:	481e      	ldr	r0, [pc, #120]	@ (800ef2c <__pow5mult+0xb0>)
 800eeb4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800eeb8:	f000 fbd4 	bl	800f664 <__assert_func>
 800eebc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800eec0:	6004      	str	r4, [r0, #0]
 800eec2:	60c4      	str	r4, [r0, #12]
 800eec4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800eec8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800eecc:	b94c      	cbnz	r4, 800eee2 <__pow5mult+0x66>
 800eece:	f240 2171 	movw	r1, #625	@ 0x271
 800eed2:	4638      	mov	r0, r7
 800eed4:	f7ff ff12 	bl	800ecfc <__i2b>
 800eed8:	2300      	movs	r3, #0
 800eeda:	f8c8 0008 	str.w	r0, [r8, #8]
 800eede:	4604      	mov	r4, r0
 800eee0:	6003      	str	r3, [r0, #0]
 800eee2:	f04f 0900 	mov.w	r9, #0
 800eee6:	07eb      	lsls	r3, r5, #31
 800eee8:	d50a      	bpl.n	800ef00 <__pow5mult+0x84>
 800eeea:	4631      	mov	r1, r6
 800eeec:	4622      	mov	r2, r4
 800eeee:	4638      	mov	r0, r7
 800eef0:	f7ff ff1a 	bl	800ed28 <__multiply>
 800eef4:	4631      	mov	r1, r6
 800eef6:	4680      	mov	r8, r0
 800eef8:	4638      	mov	r0, r7
 800eefa:	f7ff fe4b 	bl	800eb94 <_Bfree>
 800eefe:	4646      	mov	r6, r8
 800ef00:	106d      	asrs	r5, r5, #1
 800ef02:	d00b      	beq.n	800ef1c <__pow5mult+0xa0>
 800ef04:	6820      	ldr	r0, [r4, #0]
 800ef06:	b938      	cbnz	r0, 800ef18 <__pow5mult+0x9c>
 800ef08:	4622      	mov	r2, r4
 800ef0a:	4621      	mov	r1, r4
 800ef0c:	4638      	mov	r0, r7
 800ef0e:	f7ff ff0b 	bl	800ed28 <__multiply>
 800ef12:	6020      	str	r0, [r4, #0]
 800ef14:	f8c0 9000 	str.w	r9, [r0]
 800ef18:	4604      	mov	r4, r0
 800ef1a:	e7e4      	b.n	800eee6 <__pow5mult+0x6a>
 800ef1c:	4630      	mov	r0, r6
 800ef1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef22:	bf00      	nop
 800ef24:	08010574 	.word	0x08010574
 800ef28:	08010499 	.word	0x08010499
 800ef2c:	08010519 	.word	0x08010519

0800ef30 <__lshift>:
 800ef30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef34:	460c      	mov	r4, r1
 800ef36:	6849      	ldr	r1, [r1, #4]
 800ef38:	6923      	ldr	r3, [r4, #16]
 800ef3a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ef3e:	68a3      	ldr	r3, [r4, #8]
 800ef40:	4607      	mov	r7, r0
 800ef42:	4691      	mov	r9, r2
 800ef44:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ef48:	f108 0601 	add.w	r6, r8, #1
 800ef4c:	42b3      	cmp	r3, r6
 800ef4e:	db0b      	blt.n	800ef68 <__lshift+0x38>
 800ef50:	4638      	mov	r0, r7
 800ef52:	f7ff fddf 	bl	800eb14 <_Balloc>
 800ef56:	4605      	mov	r5, r0
 800ef58:	b948      	cbnz	r0, 800ef6e <__lshift+0x3e>
 800ef5a:	4602      	mov	r2, r0
 800ef5c:	4b28      	ldr	r3, [pc, #160]	@ (800f000 <__lshift+0xd0>)
 800ef5e:	4829      	ldr	r0, [pc, #164]	@ (800f004 <__lshift+0xd4>)
 800ef60:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ef64:	f000 fb7e 	bl	800f664 <__assert_func>
 800ef68:	3101      	adds	r1, #1
 800ef6a:	005b      	lsls	r3, r3, #1
 800ef6c:	e7ee      	b.n	800ef4c <__lshift+0x1c>
 800ef6e:	2300      	movs	r3, #0
 800ef70:	f100 0114 	add.w	r1, r0, #20
 800ef74:	f100 0210 	add.w	r2, r0, #16
 800ef78:	4618      	mov	r0, r3
 800ef7a:	4553      	cmp	r3, sl
 800ef7c:	db33      	blt.n	800efe6 <__lshift+0xb6>
 800ef7e:	6920      	ldr	r0, [r4, #16]
 800ef80:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ef84:	f104 0314 	add.w	r3, r4, #20
 800ef88:	f019 091f 	ands.w	r9, r9, #31
 800ef8c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ef90:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ef94:	d02b      	beq.n	800efee <__lshift+0xbe>
 800ef96:	f1c9 0e20 	rsb	lr, r9, #32
 800ef9a:	468a      	mov	sl, r1
 800ef9c:	2200      	movs	r2, #0
 800ef9e:	6818      	ldr	r0, [r3, #0]
 800efa0:	fa00 f009 	lsl.w	r0, r0, r9
 800efa4:	4310      	orrs	r0, r2
 800efa6:	f84a 0b04 	str.w	r0, [sl], #4
 800efaa:	f853 2b04 	ldr.w	r2, [r3], #4
 800efae:	459c      	cmp	ip, r3
 800efb0:	fa22 f20e 	lsr.w	r2, r2, lr
 800efb4:	d8f3      	bhi.n	800ef9e <__lshift+0x6e>
 800efb6:	ebac 0304 	sub.w	r3, ip, r4
 800efba:	3b15      	subs	r3, #21
 800efbc:	f023 0303 	bic.w	r3, r3, #3
 800efc0:	3304      	adds	r3, #4
 800efc2:	f104 0015 	add.w	r0, r4, #21
 800efc6:	4584      	cmp	ip, r0
 800efc8:	bf38      	it	cc
 800efca:	2304      	movcc	r3, #4
 800efcc:	50ca      	str	r2, [r1, r3]
 800efce:	b10a      	cbz	r2, 800efd4 <__lshift+0xa4>
 800efd0:	f108 0602 	add.w	r6, r8, #2
 800efd4:	3e01      	subs	r6, #1
 800efd6:	4638      	mov	r0, r7
 800efd8:	612e      	str	r6, [r5, #16]
 800efda:	4621      	mov	r1, r4
 800efdc:	f7ff fdda 	bl	800eb94 <_Bfree>
 800efe0:	4628      	mov	r0, r5
 800efe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efe6:	f842 0f04 	str.w	r0, [r2, #4]!
 800efea:	3301      	adds	r3, #1
 800efec:	e7c5      	b.n	800ef7a <__lshift+0x4a>
 800efee:	3904      	subs	r1, #4
 800eff0:	f853 2b04 	ldr.w	r2, [r3], #4
 800eff4:	f841 2f04 	str.w	r2, [r1, #4]!
 800eff8:	459c      	cmp	ip, r3
 800effa:	d8f9      	bhi.n	800eff0 <__lshift+0xc0>
 800effc:	e7ea      	b.n	800efd4 <__lshift+0xa4>
 800effe:	bf00      	nop
 800f000:	08010508 	.word	0x08010508
 800f004:	08010519 	.word	0x08010519

0800f008 <__mcmp>:
 800f008:	690a      	ldr	r2, [r1, #16]
 800f00a:	4603      	mov	r3, r0
 800f00c:	6900      	ldr	r0, [r0, #16]
 800f00e:	1a80      	subs	r0, r0, r2
 800f010:	b530      	push	{r4, r5, lr}
 800f012:	d10e      	bne.n	800f032 <__mcmp+0x2a>
 800f014:	3314      	adds	r3, #20
 800f016:	3114      	adds	r1, #20
 800f018:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f01c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f020:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f024:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f028:	4295      	cmp	r5, r2
 800f02a:	d003      	beq.n	800f034 <__mcmp+0x2c>
 800f02c:	d205      	bcs.n	800f03a <__mcmp+0x32>
 800f02e:	f04f 30ff 	mov.w	r0, #4294967295
 800f032:	bd30      	pop	{r4, r5, pc}
 800f034:	42a3      	cmp	r3, r4
 800f036:	d3f3      	bcc.n	800f020 <__mcmp+0x18>
 800f038:	e7fb      	b.n	800f032 <__mcmp+0x2a>
 800f03a:	2001      	movs	r0, #1
 800f03c:	e7f9      	b.n	800f032 <__mcmp+0x2a>
	...

0800f040 <__mdiff>:
 800f040:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f044:	4689      	mov	r9, r1
 800f046:	4606      	mov	r6, r0
 800f048:	4611      	mov	r1, r2
 800f04a:	4648      	mov	r0, r9
 800f04c:	4614      	mov	r4, r2
 800f04e:	f7ff ffdb 	bl	800f008 <__mcmp>
 800f052:	1e05      	subs	r5, r0, #0
 800f054:	d112      	bne.n	800f07c <__mdiff+0x3c>
 800f056:	4629      	mov	r1, r5
 800f058:	4630      	mov	r0, r6
 800f05a:	f7ff fd5b 	bl	800eb14 <_Balloc>
 800f05e:	4602      	mov	r2, r0
 800f060:	b928      	cbnz	r0, 800f06e <__mdiff+0x2e>
 800f062:	4b3f      	ldr	r3, [pc, #252]	@ (800f160 <__mdiff+0x120>)
 800f064:	f240 2137 	movw	r1, #567	@ 0x237
 800f068:	483e      	ldr	r0, [pc, #248]	@ (800f164 <__mdiff+0x124>)
 800f06a:	f000 fafb 	bl	800f664 <__assert_func>
 800f06e:	2301      	movs	r3, #1
 800f070:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f074:	4610      	mov	r0, r2
 800f076:	b003      	add	sp, #12
 800f078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f07c:	bfbc      	itt	lt
 800f07e:	464b      	movlt	r3, r9
 800f080:	46a1      	movlt	r9, r4
 800f082:	4630      	mov	r0, r6
 800f084:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f088:	bfba      	itte	lt
 800f08a:	461c      	movlt	r4, r3
 800f08c:	2501      	movlt	r5, #1
 800f08e:	2500      	movge	r5, #0
 800f090:	f7ff fd40 	bl	800eb14 <_Balloc>
 800f094:	4602      	mov	r2, r0
 800f096:	b918      	cbnz	r0, 800f0a0 <__mdiff+0x60>
 800f098:	4b31      	ldr	r3, [pc, #196]	@ (800f160 <__mdiff+0x120>)
 800f09a:	f240 2145 	movw	r1, #581	@ 0x245
 800f09e:	e7e3      	b.n	800f068 <__mdiff+0x28>
 800f0a0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f0a4:	6926      	ldr	r6, [r4, #16]
 800f0a6:	60c5      	str	r5, [r0, #12]
 800f0a8:	f109 0310 	add.w	r3, r9, #16
 800f0ac:	f109 0514 	add.w	r5, r9, #20
 800f0b0:	f104 0e14 	add.w	lr, r4, #20
 800f0b4:	f100 0b14 	add.w	fp, r0, #20
 800f0b8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f0bc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f0c0:	9301      	str	r3, [sp, #4]
 800f0c2:	46d9      	mov	r9, fp
 800f0c4:	f04f 0c00 	mov.w	ip, #0
 800f0c8:	9b01      	ldr	r3, [sp, #4]
 800f0ca:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f0ce:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f0d2:	9301      	str	r3, [sp, #4]
 800f0d4:	fa1f f38a 	uxth.w	r3, sl
 800f0d8:	4619      	mov	r1, r3
 800f0da:	b283      	uxth	r3, r0
 800f0dc:	1acb      	subs	r3, r1, r3
 800f0de:	0c00      	lsrs	r0, r0, #16
 800f0e0:	4463      	add	r3, ip
 800f0e2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f0e6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f0ea:	b29b      	uxth	r3, r3
 800f0ec:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f0f0:	4576      	cmp	r6, lr
 800f0f2:	f849 3b04 	str.w	r3, [r9], #4
 800f0f6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f0fa:	d8e5      	bhi.n	800f0c8 <__mdiff+0x88>
 800f0fc:	1b33      	subs	r3, r6, r4
 800f0fe:	3b15      	subs	r3, #21
 800f100:	f023 0303 	bic.w	r3, r3, #3
 800f104:	3415      	adds	r4, #21
 800f106:	3304      	adds	r3, #4
 800f108:	42a6      	cmp	r6, r4
 800f10a:	bf38      	it	cc
 800f10c:	2304      	movcc	r3, #4
 800f10e:	441d      	add	r5, r3
 800f110:	445b      	add	r3, fp
 800f112:	461e      	mov	r6, r3
 800f114:	462c      	mov	r4, r5
 800f116:	4544      	cmp	r4, r8
 800f118:	d30e      	bcc.n	800f138 <__mdiff+0xf8>
 800f11a:	f108 0103 	add.w	r1, r8, #3
 800f11e:	1b49      	subs	r1, r1, r5
 800f120:	f021 0103 	bic.w	r1, r1, #3
 800f124:	3d03      	subs	r5, #3
 800f126:	45a8      	cmp	r8, r5
 800f128:	bf38      	it	cc
 800f12a:	2100      	movcc	r1, #0
 800f12c:	440b      	add	r3, r1
 800f12e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f132:	b191      	cbz	r1, 800f15a <__mdiff+0x11a>
 800f134:	6117      	str	r7, [r2, #16]
 800f136:	e79d      	b.n	800f074 <__mdiff+0x34>
 800f138:	f854 1b04 	ldr.w	r1, [r4], #4
 800f13c:	46e6      	mov	lr, ip
 800f13e:	0c08      	lsrs	r0, r1, #16
 800f140:	fa1c fc81 	uxtah	ip, ip, r1
 800f144:	4471      	add	r1, lr
 800f146:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f14a:	b289      	uxth	r1, r1
 800f14c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f150:	f846 1b04 	str.w	r1, [r6], #4
 800f154:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f158:	e7dd      	b.n	800f116 <__mdiff+0xd6>
 800f15a:	3f01      	subs	r7, #1
 800f15c:	e7e7      	b.n	800f12e <__mdiff+0xee>
 800f15e:	bf00      	nop
 800f160:	08010508 	.word	0x08010508
 800f164:	08010519 	.word	0x08010519

0800f168 <__d2b>:
 800f168:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f16c:	460f      	mov	r7, r1
 800f16e:	2101      	movs	r1, #1
 800f170:	ec59 8b10 	vmov	r8, r9, d0
 800f174:	4616      	mov	r6, r2
 800f176:	f7ff fccd 	bl	800eb14 <_Balloc>
 800f17a:	4604      	mov	r4, r0
 800f17c:	b930      	cbnz	r0, 800f18c <__d2b+0x24>
 800f17e:	4602      	mov	r2, r0
 800f180:	4b23      	ldr	r3, [pc, #140]	@ (800f210 <__d2b+0xa8>)
 800f182:	4824      	ldr	r0, [pc, #144]	@ (800f214 <__d2b+0xac>)
 800f184:	f240 310f 	movw	r1, #783	@ 0x30f
 800f188:	f000 fa6c 	bl	800f664 <__assert_func>
 800f18c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f190:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f194:	b10d      	cbz	r5, 800f19a <__d2b+0x32>
 800f196:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f19a:	9301      	str	r3, [sp, #4]
 800f19c:	f1b8 0300 	subs.w	r3, r8, #0
 800f1a0:	d023      	beq.n	800f1ea <__d2b+0x82>
 800f1a2:	4668      	mov	r0, sp
 800f1a4:	9300      	str	r3, [sp, #0]
 800f1a6:	f7ff fd7c 	bl	800eca2 <__lo0bits>
 800f1aa:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f1ae:	b1d0      	cbz	r0, 800f1e6 <__d2b+0x7e>
 800f1b0:	f1c0 0320 	rsb	r3, r0, #32
 800f1b4:	fa02 f303 	lsl.w	r3, r2, r3
 800f1b8:	430b      	orrs	r3, r1
 800f1ba:	40c2      	lsrs	r2, r0
 800f1bc:	6163      	str	r3, [r4, #20]
 800f1be:	9201      	str	r2, [sp, #4]
 800f1c0:	9b01      	ldr	r3, [sp, #4]
 800f1c2:	61a3      	str	r3, [r4, #24]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	bf0c      	ite	eq
 800f1c8:	2201      	moveq	r2, #1
 800f1ca:	2202      	movne	r2, #2
 800f1cc:	6122      	str	r2, [r4, #16]
 800f1ce:	b1a5      	cbz	r5, 800f1fa <__d2b+0x92>
 800f1d0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f1d4:	4405      	add	r5, r0
 800f1d6:	603d      	str	r5, [r7, #0]
 800f1d8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f1dc:	6030      	str	r0, [r6, #0]
 800f1de:	4620      	mov	r0, r4
 800f1e0:	b003      	add	sp, #12
 800f1e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f1e6:	6161      	str	r1, [r4, #20]
 800f1e8:	e7ea      	b.n	800f1c0 <__d2b+0x58>
 800f1ea:	a801      	add	r0, sp, #4
 800f1ec:	f7ff fd59 	bl	800eca2 <__lo0bits>
 800f1f0:	9b01      	ldr	r3, [sp, #4]
 800f1f2:	6163      	str	r3, [r4, #20]
 800f1f4:	3020      	adds	r0, #32
 800f1f6:	2201      	movs	r2, #1
 800f1f8:	e7e8      	b.n	800f1cc <__d2b+0x64>
 800f1fa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f1fe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f202:	6038      	str	r0, [r7, #0]
 800f204:	6918      	ldr	r0, [r3, #16]
 800f206:	f7ff fd2d 	bl	800ec64 <__hi0bits>
 800f20a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f20e:	e7e5      	b.n	800f1dc <__d2b+0x74>
 800f210:	08010508 	.word	0x08010508
 800f214:	08010519 	.word	0x08010519

0800f218 <_malloc_usable_size_r>:
 800f218:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f21c:	1f18      	subs	r0, r3, #4
 800f21e:	2b00      	cmp	r3, #0
 800f220:	bfbc      	itt	lt
 800f222:	580b      	ldrlt	r3, [r1, r0]
 800f224:	18c0      	addlt	r0, r0, r3
 800f226:	4770      	bx	lr

0800f228 <__ssputs_r>:
 800f228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f22c:	688e      	ldr	r6, [r1, #8]
 800f22e:	461f      	mov	r7, r3
 800f230:	42be      	cmp	r6, r7
 800f232:	680b      	ldr	r3, [r1, #0]
 800f234:	4682      	mov	sl, r0
 800f236:	460c      	mov	r4, r1
 800f238:	4690      	mov	r8, r2
 800f23a:	d82d      	bhi.n	800f298 <__ssputs_r+0x70>
 800f23c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f240:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f244:	d026      	beq.n	800f294 <__ssputs_r+0x6c>
 800f246:	6965      	ldr	r5, [r4, #20]
 800f248:	6909      	ldr	r1, [r1, #16]
 800f24a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f24e:	eba3 0901 	sub.w	r9, r3, r1
 800f252:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f256:	1c7b      	adds	r3, r7, #1
 800f258:	444b      	add	r3, r9
 800f25a:	106d      	asrs	r5, r5, #1
 800f25c:	429d      	cmp	r5, r3
 800f25e:	bf38      	it	cc
 800f260:	461d      	movcc	r5, r3
 800f262:	0553      	lsls	r3, r2, #21
 800f264:	d527      	bpl.n	800f2b6 <__ssputs_r+0x8e>
 800f266:	4629      	mov	r1, r5
 800f268:	f7fd fe5e 	bl	800cf28 <_malloc_r>
 800f26c:	4606      	mov	r6, r0
 800f26e:	b360      	cbz	r0, 800f2ca <__ssputs_r+0xa2>
 800f270:	6921      	ldr	r1, [r4, #16]
 800f272:	464a      	mov	r2, r9
 800f274:	f7fe fda9 	bl	800ddca <memcpy>
 800f278:	89a3      	ldrh	r3, [r4, #12]
 800f27a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f27e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f282:	81a3      	strh	r3, [r4, #12]
 800f284:	6126      	str	r6, [r4, #16]
 800f286:	6165      	str	r5, [r4, #20]
 800f288:	444e      	add	r6, r9
 800f28a:	eba5 0509 	sub.w	r5, r5, r9
 800f28e:	6026      	str	r6, [r4, #0]
 800f290:	60a5      	str	r5, [r4, #8]
 800f292:	463e      	mov	r6, r7
 800f294:	42be      	cmp	r6, r7
 800f296:	d900      	bls.n	800f29a <__ssputs_r+0x72>
 800f298:	463e      	mov	r6, r7
 800f29a:	6820      	ldr	r0, [r4, #0]
 800f29c:	4632      	mov	r2, r6
 800f29e:	4641      	mov	r1, r8
 800f2a0:	f000 f9c6 	bl	800f630 <memmove>
 800f2a4:	68a3      	ldr	r3, [r4, #8]
 800f2a6:	1b9b      	subs	r3, r3, r6
 800f2a8:	60a3      	str	r3, [r4, #8]
 800f2aa:	6823      	ldr	r3, [r4, #0]
 800f2ac:	4433      	add	r3, r6
 800f2ae:	6023      	str	r3, [r4, #0]
 800f2b0:	2000      	movs	r0, #0
 800f2b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2b6:	462a      	mov	r2, r5
 800f2b8:	f7fd fec2 	bl	800d040 <_realloc_r>
 800f2bc:	4606      	mov	r6, r0
 800f2be:	2800      	cmp	r0, #0
 800f2c0:	d1e0      	bne.n	800f284 <__ssputs_r+0x5c>
 800f2c2:	6921      	ldr	r1, [r4, #16]
 800f2c4:	4650      	mov	r0, sl
 800f2c6:	f7ff fbdb 	bl	800ea80 <_free_r>
 800f2ca:	230c      	movs	r3, #12
 800f2cc:	f8ca 3000 	str.w	r3, [sl]
 800f2d0:	89a3      	ldrh	r3, [r4, #12]
 800f2d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f2d6:	81a3      	strh	r3, [r4, #12]
 800f2d8:	f04f 30ff 	mov.w	r0, #4294967295
 800f2dc:	e7e9      	b.n	800f2b2 <__ssputs_r+0x8a>
	...

0800f2e0 <_svfiprintf_r>:
 800f2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2e4:	4698      	mov	r8, r3
 800f2e6:	898b      	ldrh	r3, [r1, #12]
 800f2e8:	061b      	lsls	r3, r3, #24
 800f2ea:	b09d      	sub	sp, #116	@ 0x74
 800f2ec:	4607      	mov	r7, r0
 800f2ee:	460d      	mov	r5, r1
 800f2f0:	4614      	mov	r4, r2
 800f2f2:	d510      	bpl.n	800f316 <_svfiprintf_r+0x36>
 800f2f4:	690b      	ldr	r3, [r1, #16]
 800f2f6:	b973      	cbnz	r3, 800f316 <_svfiprintf_r+0x36>
 800f2f8:	2140      	movs	r1, #64	@ 0x40
 800f2fa:	f7fd fe15 	bl	800cf28 <_malloc_r>
 800f2fe:	6028      	str	r0, [r5, #0]
 800f300:	6128      	str	r0, [r5, #16]
 800f302:	b930      	cbnz	r0, 800f312 <_svfiprintf_r+0x32>
 800f304:	230c      	movs	r3, #12
 800f306:	603b      	str	r3, [r7, #0]
 800f308:	f04f 30ff 	mov.w	r0, #4294967295
 800f30c:	b01d      	add	sp, #116	@ 0x74
 800f30e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f312:	2340      	movs	r3, #64	@ 0x40
 800f314:	616b      	str	r3, [r5, #20]
 800f316:	2300      	movs	r3, #0
 800f318:	9309      	str	r3, [sp, #36]	@ 0x24
 800f31a:	2320      	movs	r3, #32
 800f31c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f320:	f8cd 800c 	str.w	r8, [sp, #12]
 800f324:	2330      	movs	r3, #48	@ 0x30
 800f326:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f4c4 <_svfiprintf_r+0x1e4>
 800f32a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f32e:	f04f 0901 	mov.w	r9, #1
 800f332:	4623      	mov	r3, r4
 800f334:	469a      	mov	sl, r3
 800f336:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f33a:	b10a      	cbz	r2, 800f340 <_svfiprintf_r+0x60>
 800f33c:	2a25      	cmp	r2, #37	@ 0x25
 800f33e:	d1f9      	bne.n	800f334 <_svfiprintf_r+0x54>
 800f340:	ebba 0b04 	subs.w	fp, sl, r4
 800f344:	d00b      	beq.n	800f35e <_svfiprintf_r+0x7e>
 800f346:	465b      	mov	r3, fp
 800f348:	4622      	mov	r2, r4
 800f34a:	4629      	mov	r1, r5
 800f34c:	4638      	mov	r0, r7
 800f34e:	f7ff ff6b 	bl	800f228 <__ssputs_r>
 800f352:	3001      	adds	r0, #1
 800f354:	f000 80a7 	beq.w	800f4a6 <_svfiprintf_r+0x1c6>
 800f358:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f35a:	445a      	add	r2, fp
 800f35c:	9209      	str	r2, [sp, #36]	@ 0x24
 800f35e:	f89a 3000 	ldrb.w	r3, [sl]
 800f362:	2b00      	cmp	r3, #0
 800f364:	f000 809f 	beq.w	800f4a6 <_svfiprintf_r+0x1c6>
 800f368:	2300      	movs	r3, #0
 800f36a:	f04f 32ff 	mov.w	r2, #4294967295
 800f36e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f372:	f10a 0a01 	add.w	sl, sl, #1
 800f376:	9304      	str	r3, [sp, #16]
 800f378:	9307      	str	r3, [sp, #28]
 800f37a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f37e:	931a      	str	r3, [sp, #104]	@ 0x68
 800f380:	4654      	mov	r4, sl
 800f382:	2205      	movs	r2, #5
 800f384:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f388:	484e      	ldr	r0, [pc, #312]	@ (800f4c4 <_svfiprintf_r+0x1e4>)
 800f38a:	f7f0 ff31 	bl	80001f0 <memchr>
 800f38e:	9a04      	ldr	r2, [sp, #16]
 800f390:	b9d8      	cbnz	r0, 800f3ca <_svfiprintf_r+0xea>
 800f392:	06d0      	lsls	r0, r2, #27
 800f394:	bf44      	itt	mi
 800f396:	2320      	movmi	r3, #32
 800f398:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f39c:	0711      	lsls	r1, r2, #28
 800f39e:	bf44      	itt	mi
 800f3a0:	232b      	movmi	r3, #43	@ 0x2b
 800f3a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f3a6:	f89a 3000 	ldrb.w	r3, [sl]
 800f3aa:	2b2a      	cmp	r3, #42	@ 0x2a
 800f3ac:	d015      	beq.n	800f3da <_svfiprintf_r+0xfa>
 800f3ae:	9a07      	ldr	r2, [sp, #28]
 800f3b0:	4654      	mov	r4, sl
 800f3b2:	2000      	movs	r0, #0
 800f3b4:	f04f 0c0a 	mov.w	ip, #10
 800f3b8:	4621      	mov	r1, r4
 800f3ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f3be:	3b30      	subs	r3, #48	@ 0x30
 800f3c0:	2b09      	cmp	r3, #9
 800f3c2:	d94b      	bls.n	800f45c <_svfiprintf_r+0x17c>
 800f3c4:	b1b0      	cbz	r0, 800f3f4 <_svfiprintf_r+0x114>
 800f3c6:	9207      	str	r2, [sp, #28]
 800f3c8:	e014      	b.n	800f3f4 <_svfiprintf_r+0x114>
 800f3ca:	eba0 0308 	sub.w	r3, r0, r8
 800f3ce:	fa09 f303 	lsl.w	r3, r9, r3
 800f3d2:	4313      	orrs	r3, r2
 800f3d4:	9304      	str	r3, [sp, #16]
 800f3d6:	46a2      	mov	sl, r4
 800f3d8:	e7d2      	b.n	800f380 <_svfiprintf_r+0xa0>
 800f3da:	9b03      	ldr	r3, [sp, #12]
 800f3dc:	1d19      	adds	r1, r3, #4
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	9103      	str	r1, [sp, #12]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	bfbb      	ittet	lt
 800f3e6:	425b      	neglt	r3, r3
 800f3e8:	f042 0202 	orrlt.w	r2, r2, #2
 800f3ec:	9307      	strge	r3, [sp, #28]
 800f3ee:	9307      	strlt	r3, [sp, #28]
 800f3f0:	bfb8      	it	lt
 800f3f2:	9204      	strlt	r2, [sp, #16]
 800f3f4:	7823      	ldrb	r3, [r4, #0]
 800f3f6:	2b2e      	cmp	r3, #46	@ 0x2e
 800f3f8:	d10a      	bne.n	800f410 <_svfiprintf_r+0x130>
 800f3fa:	7863      	ldrb	r3, [r4, #1]
 800f3fc:	2b2a      	cmp	r3, #42	@ 0x2a
 800f3fe:	d132      	bne.n	800f466 <_svfiprintf_r+0x186>
 800f400:	9b03      	ldr	r3, [sp, #12]
 800f402:	1d1a      	adds	r2, r3, #4
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	9203      	str	r2, [sp, #12]
 800f408:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f40c:	3402      	adds	r4, #2
 800f40e:	9305      	str	r3, [sp, #20]
 800f410:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f4d4 <_svfiprintf_r+0x1f4>
 800f414:	7821      	ldrb	r1, [r4, #0]
 800f416:	2203      	movs	r2, #3
 800f418:	4650      	mov	r0, sl
 800f41a:	f7f0 fee9 	bl	80001f0 <memchr>
 800f41e:	b138      	cbz	r0, 800f430 <_svfiprintf_r+0x150>
 800f420:	9b04      	ldr	r3, [sp, #16]
 800f422:	eba0 000a 	sub.w	r0, r0, sl
 800f426:	2240      	movs	r2, #64	@ 0x40
 800f428:	4082      	lsls	r2, r0
 800f42a:	4313      	orrs	r3, r2
 800f42c:	3401      	adds	r4, #1
 800f42e:	9304      	str	r3, [sp, #16]
 800f430:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f434:	4824      	ldr	r0, [pc, #144]	@ (800f4c8 <_svfiprintf_r+0x1e8>)
 800f436:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f43a:	2206      	movs	r2, #6
 800f43c:	f7f0 fed8 	bl	80001f0 <memchr>
 800f440:	2800      	cmp	r0, #0
 800f442:	d036      	beq.n	800f4b2 <_svfiprintf_r+0x1d2>
 800f444:	4b21      	ldr	r3, [pc, #132]	@ (800f4cc <_svfiprintf_r+0x1ec>)
 800f446:	bb1b      	cbnz	r3, 800f490 <_svfiprintf_r+0x1b0>
 800f448:	9b03      	ldr	r3, [sp, #12]
 800f44a:	3307      	adds	r3, #7
 800f44c:	f023 0307 	bic.w	r3, r3, #7
 800f450:	3308      	adds	r3, #8
 800f452:	9303      	str	r3, [sp, #12]
 800f454:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f456:	4433      	add	r3, r6
 800f458:	9309      	str	r3, [sp, #36]	@ 0x24
 800f45a:	e76a      	b.n	800f332 <_svfiprintf_r+0x52>
 800f45c:	fb0c 3202 	mla	r2, ip, r2, r3
 800f460:	460c      	mov	r4, r1
 800f462:	2001      	movs	r0, #1
 800f464:	e7a8      	b.n	800f3b8 <_svfiprintf_r+0xd8>
 800f466:	2300      	movs	r3, #0
 800f468:	3401      	adds	r4, #1
 800f46a:	9305      	str	r3, [sp, #20]
 800f46c:	4619      	mov	r1, r3
 800f46e:	f04f 0c0a 	mov.w	ip, #10
 800f472:	4620      	mov	r0, r4
 800f474:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f478:	3a30      	subs	r2, #48	@ 0x30
 800f47a:	2a09      	cmp	r2, #9
 800f47c:	d903      	bls.n	800f486 <_svfiprintf_r+0x1a6>
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d0c6      	beq.n	800f410 <_svfiprintf_r+0x130>
 800f482:	9105      	str	r1, [sp, #20]
 800f484:	e7c4      	b.n	800f410 <_svfiprintf_r+0x130>
 800f486:	fb0c 2101 	mla	r1, ip, r1, r2
 800f48a:	4604      	mov	r4, r0
 800f48c:	2301      	movs	r3, #1
 800f48e:	e7f0      	b.n	800f472 <_svfiprintf_r+0x192>
 800f490:	ab03      	add	r3, sp, #12
 800f492:	9300      	str	r3, [sp, #0]
 800f494:	462a      	mov	r2, r5
 800f496:	4b0e      	ldr	r3, [pc, #56]	@ (800f4d0 <_svfiprintf_r+0x1f0>)
 800f498:	a904      	add	r1, sp, #16
 800f49a:	4638      	mov	r0, r7
 800f49c:	f7fd fe9e 	bl	800d1dc <_printf_float>
 800f4a0:	1c42      	adds	r2, r0, #1
 800f4a2:	4606      	mov	r6, r0
 800f4a4:	d1d6      	bne.n	800f454 <_svfiprintf_r+0x174>
 800f4a6:	89ab      	ldrh	r3, [r5, #12]
 800f4a8:	065b      	lsls	r3, r3, #25
 800f4aa:	f53f af2d 	bmi.w	800f308 <_svfiprintf_r+0x28>
 800f4ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f4b0:	e72c      	b.n	800f30c <_svfiprintf_r+0x2c>
 800f4b2:	ab03      	add	r3, sp, #12
 800f4b4:	9300      	str	r3, [sp, #0]
 800f4b6:	462a      	mov	r2, r5
 800f4b8:	4b05      	ldr	r3, [pc, #20]	@ (800f4d0 <_svfiprintf_r+0x1f0>)
 800f4ba:	a904      	add	r1, sp, #16
 800f4bc:	4638      	mov	r0, r7
 800f4be:	f7fe f925 	bl	800d70c <_printf_i>
 800f4c2:	e7ed      	b.n	800f4a0 <_svfiprintf_r+0x1c0>
 800f4c4:	08010670 	.word	0x08010670
 800f4c8:	0801067a 	.word	0x0801067a
 800f4cc:	0800d1dd 	.word	0x0800d1dd
 800f4d0:	0800f229 	.word	0x0800f229
 800f4d4:	08010676 	.word	0x08010676

0800f4d8 <__sflush_r>:
 800f4d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f4dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4e0:	0716      	lsls	r6, r2, #28
 800f4e2:	4605      	mov	r5, r0
 800f4e4:	460c      	mov	r4, r1
 800f4e6:	d454      	bmi.n	800f592 <__sflush_r+0xba>
 800f4e8:	684b      	ldr	r3, [r1, #4]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	dc02      	bgt.n	800f4f4 <__sflush_r+0x1c>
 800f4ee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	dd48      	ble.n	800f586 <__sflush_r+0xae>
 800f4f4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f4f6:	2e00      	cmp	r6, #0
 800f4f8:	d045      	beq.n	800f586 <__sflush_r+0xae>
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f500:	682f      	ldr	r7, [r5, #0]
 800f502:	6a21      	ldr	r1, [r4, #32]
 800f504:	602b      	str	r3, [r5, #0]
 800f506:	d030      	beq.n	800f56a <__sflush_r+0x92>
 800f508:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f50a:	89a3      	ldrh	r3, [r4, #12]
 800f50c:	0759      	lsls	r1, r3, #29
 800f50e:	d505      	bpl.n	800f51c <__sflush_r+0x44>
 800f510:	6863      	ldr	r3, [r4, #4]
 800f512:	1ad2      	subs	r2, r2, r3
 800f514:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f516:	b10b      	cbz	r3, 800f51c <__sflush_r+0x44>
 800f518:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f51a:	1ad2      	subs	r2, r2, r3
 800f51c:	2300      	movs	r3, #0
 800f51e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f520:	6a21      	ldr	r1, [r4, #32]
 800f522:	4628      	mov	r0, r5
 800f524:	47b0      	blx	r6
 800f526:	1c43      	adds	r3, r0, #1
 800f528:	89a3      	ldrh	r3, [r4, #12]
 800f52a:	d106      	bne.n	800f53a <__sflush_r+0x62>
 800f52c:	6829      	ldr	r1, [r5, #0]
 800f52e:	291d      	cmp	r1, #29
 800f530:	d82b      	bhi.n	800f58a <__sflush_r+0xb2>
 800f532:	4a2a      	ldr	r2, [pc, #168]	@ (800f5dc <__sflush_r+0x104>)
 800f534:	410a      	asrs	r2, r1
 800f536:	07d6      	lsls	r6, r2, #31
 800f538:	d427      	bmi.n	800f58a <__sflush_r+0xb2>
 800f53a:	2200      	movs	r2, #0
 800f53c:	6062      	str	r2, [r4, #4]
 800f53e:	04d9      	lsls	r1, r3, #19
 800f540:	6922      	ldr	r2, [r4, #16]
 800f542:	6022      	str	r2, [r4, #0]
 800f544:	d504      	bpl.n	800f550 <__sflush_r+0x78>
 800f546:	1c42      	adds	r2, r0, #1
 800f548:	d101      	bne.n	800f54e <__sflush_r+0x76>
 800f54a:	682b      	ldr	r3, [r5, #0]
 800f54c:	b903      	cbnz	r3, 800f550 <__sflush_r+0x78>
 800f54e:	6560      	str	r0, [r4, #84]	@ 0x54
 800f550:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f552:	602f      	str	r7, [r5, #0]
 800f554:	b1b9      	cbz	r1, 800f586 <__sflush_r+0xae>
 800f556:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f55a:	4299      	cmp	r1, r3
 800f55c:	d002      	beq.n	800f564 <__sflush_r+0x8c>
 800f55e:	4628      	mov	r0, r5
 800f560:	f7ff fa8e 	bl	800ea80 <_free_r>
 800f564:	2300      	movs	r3, #0
 800f566:	6363      	str	r3, [r4, #52]	@ 0x34
 800f568:	e00d      	b.n	800f586 <__sflush_r+0xae>
 800f56a:	2301      	movs	r3, #1
 800f56c:	4628      	mov	r0, r5
 800f56e:	47b0      	blx	r6
 800f570:	4602      	mov	r2, r0
 800f572:	1c50      	adds	r0, r2, #1
 800f574:	d1c9      	bne.n	800f50a <__sflush_r+0x32>
 800f576:	682b      	ldr	r3, [r5, #0]
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d0c6      	beq.n	800f50a <__sflush_r+0x32>
 800f57c:	2b1d      	cmp	r3, #29
 800f57e:	d001      	beq.n	800f584 <__sflush_r+0xac>
 800f580:	2b16      	cmp	r3, #22
 800f582:	d11e      	bne.n	800f5c2 <__sflush_r+0xea>
 800f584:	602f      	str	r7, [r5, #0]
 800f586:	2000      	movs	r0, #0
 800f588:	e022      	b.n	800f5d0 <__sflush_r+0xf8>
 800f58a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f58e:	b21b      	sxth	r3, r3
 800f590:	e01b      	b.n	800f5ca <__sflush_r+0xf2>
 800f592:	690f      	ldr	r7, [r1, #16]
 800f594:	2f00      	cmp	r7, #0
 800f596:	d0f6      	beq.n	800f586 <__sflush_r+0xae>
 800f598:	0793      	lsls	r3, r2, #30
 800f59a:	680e      	ldr	r6, [r1, #0]
 800f59c:	bf08      	it	eq
 800f59e:	694b      	ldreq	r3, [r1, #20]
 800f5a0:	600f      	str	r7, [r1, #0]
 800f5a2:	bf18      	it	ne
 800f5a4:	2300      	movne	r3, #0
 800f5a6:	eba6 0807 	sub.w	r8, r6, r7
 800f5aa:	608b      	str	r3, [r1, #8]
 800f5ac:	f1b8 0f00 	cmp.w	r8, #0
 800f5b0:	dde9      	ble.n	800f586 <__sflush_r+0xae>
 800f5b2:	6a21      	ldr	r1, [r4, #32]
 800f5b4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f5b6:	4643      	mov	r3, r8
 800f5b8:	463a      	mov	r2, r7
 800f5ba:	4628      	mov	r0, r5
 800f5bc:	47b0      	blx	r6
 800f5be:	2800      	cmp	r0, #0
 800f5c0:	dc08      	bgt.n	800f5d4 <__sflush_r+0xfc>
 800f5c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f5c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f5ca:	81a3      	strh	r3, [r4, #12]
 800f5cc:	f04f 30ff 	mov.w	r0, #4294967295
 800f5d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5d4:	4407      	add	r7, r0
 800f5d6:	eba8 0800 	sub.w	r8, r8, r0
 800f5da:	e7e7      	b.n	800f5ac <__sflush_r+0xd4>
 800f5dc:	dfbffffe 	.word	0xdfbffffe

0800f5e0 <_fflush_r>:
 800f5e0:	b538      	push	{r3, r4, r5, lr}
 800f5e2:	690b      	ldr	r3, [r1, #16]
 800f5e4:	4605      	mov	r5, r0
 800f5e6:	460c      	mov	r4, r1
 800f5e8:	b913      	cbnz	r3, 800f5f0 <_fflush_r+0x10>
 800f5ea:	2500      	movs	r5, #0
 800f5ec:	4628      	mov	r0, r5
 800f5ee:	bd38      	pop	{r3, r4, r5, pc}
 800f5f0:	b118      	cbz	r0, 800f5fa <_fflush_r+0x1a>
 800f5f2:	6a03      	ldr	r3, [r0, #32]
 800f5f4:	b90b      	cbnz	r3, 800f5fa <_fflush_r+0x1a>
 800f5f6:	f7fe fa35 	bl	800da64 <__sinit>
 800f5fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d0f3      	beq.n	800f5ea <_fflush_r+0xa>
 800f602:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f604:	07d0      	lsls	r0, r2, #31
 800f606:	d404      	bmi.n	800f612 <_fflush_r+0x32>
 800f608:	0599      	lsls	r1, r3, #22
 800f60a:	d402      	bmi.n	800f612 <_fflush_r+0x32>
 800f60c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f60e:	f7fe fbda 	bl	800ddc6 <__retarget_lock_acquire_recursive>
 800f612:	4628      	mov	r0, r5
 800f614:	4621      	mov	r1, r4
 800f616:	f7ff ff5f 	bl	800f4d8 <__sflush_r>
 800f61a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f61c:	07da      	lsls	r2, r3, #31
 800f61e:	4605      	mov	r5, r0
 800f620:	d4e4      	bmi.n	800f5ec <_fflush_r+0xc>
 800f622:	89a3      	ldrh	r3, [r4, #12]
 800f624:	059b      	lsls	r3, r3, #22
 800f626:	d4e1      	bmi.n	800f5ec <_fflush_r+0xc>
 800f628:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f62a:	f7fe fbcd 	bl	800ddc8 <__retarget_lock_release_recursive>
 800f62e:	e7dd      	b.n	800f5ec <_fflush_r+0xc>

0800f630 <memmove>:
 800f630:	4288      	cmp	r0, r1
 800f632:	b510      	push	{r4, lr}
 800f634:	eb01 0402 	add.w	r4, r1, r2
 800f638:	d902      	bls.n	800f640 <memmove+0x10>
 800f63a:	4284      	cmp	r4, r0
 800f63c:	4623      	mov	r3, r4
 800f63e:	d807      	bhi.n	800f650 <memmove+0x20>
 800f640:	1e43      	subs	r3, r0, #1
 800f642:	42a1      	cmp	r1, r4
 800f644:	d008      	beq.n	800f658 <memmove+0x28>
 800f646:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f64a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f64e:	e7f8      	b.n	800f642 <memmove+0x12>
 800f650:	4402      	add	r2, r0
 800f652:	4601      	mov	r1, r0
 800f654:	428a      	cmp	r2, r1
 800f656:	d100      	bne.n	800f65a <memmove+0x2a>
 800f658:	bd10      	pop	{r4, pc}
 800f65a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f65e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f662:	e7f7      	b.n	800f654 <memmove+0x24>

0800f664 <__assert_func>:
 800f664:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f666:	4614      	mov	r4, r2
 800f668:	461a      	mov	r2, r3
 800f66a:	4b09      	ldr	r3, [pc, #36]	@ (800f690 <__assert_func+0x2c>)
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	4605      	mov	r5, r0
 800f670:	68d8      	ldr	r0, [r3, #12]
 800f672:	b954      	cbnz	r4, 800f68a <__assert_func+0x26>
 800f674:	4b07      	ldr	r3, [pc, #28]	@ (800f694 <__assert_func+0x30>)
 800f676:	461c      	mov	r4, r3
 800f678:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f67c:	9100      	str	r1, [sp, #0]
 800f67e:	462b      	mov	r3, r5
 800f680:	4905      	ldr	r1, [pc, #20]	@ (800f698 <__assert_func+0x34>)
 800f682:	f000 f841 	bl	800f708 <fiprintf>
 800f686:	f000 f851 	bl	800f72c <abort>
 800f68a:	4b04      	ldr	r3, [pc, #16]	@ (800f69c <__assert_func+0x38>)
 800f68c:	e7f4      	b.n	800f678 <__assert_func+0x14>
 800f68e:	bf00      	nop
 800f690:	200001d8 	.word	0x200001d8
 800f694:	080106c6 	.word	0x080106c6
 800f698:	08010698 	.word	0x08010698
 800f69c:	0801068b 	.word	0x0801068b

0800f6a0 <_calloc_r>:
 800f6a0:	b570      	push	{r4, r5, r6, lr}
 800f6a2:	fba1 5402 	umull	r5, r4, r1, r2
 800f6a6:	b93c      	cbnz	r4, 800f6b8 <_calloc_r+0x18>
 800f6a8:	4629      	mov	r1, r5
 800f6aa:	f7fd fc3d 	bl	800cf28 <_malloc_r>
 800f6ae:	4606      	mov	r6, r0
 800f6b0:	b928      	cbnz	r0, 800f6be <_calloc_r+0x1e>
 800f6b2:	2600      	movs	r6, #0
 800f6b4:	4630      	mov	r0, r6
 800f6b6:	bd70      	pop	{r4, r5, r6, pc}
 800f6b8:	220c      	movs	r2, #12
 800f6ba:	6002      	str	r2, [r0, #0]
 800f6bc:	e7f9      	b.n	800f6b2 <_calloc_r+0x12>
 800f6be:	462a      	mov	r2, r5
 800f6c0:	4621      	mov	r1, r4
 800f6c2:	f7fe fa9c 	bl	800dbfe <memset>
 800f6c6:	e7f5      	b.n	800f6b4 <_calloc_r+0x14>

0800f6c8 <__ascii_mbtowc>:
 800f6c8:	b082      	sub	sp, #8
 800f6ca:	b901      	cbnz	r1, 800f6ce <__ascii_mbtowc+0x6>
 800f6cc:	a901      	add	r1, sp, #4
 800f6ce:	b142      	cbz	r2, 800f6e2 <__ascii_mbtowc+0x1a>
 800f6d0:	b14b      	cbz	r3, 800f6e6 <__ascii_mbtowc+0x1e>
 800f6d2:	7813      	ldrb	r3, [r2, #0]
 800f6d4:	600b      	str	r3, [r1, #0]
 800f6d6:	7812      	ldrb	r2, [r2, #0]
 800f6d8:	1e10      	subs	r0, r2, #0
 800f6da:	bf18      	it	ne
 800f6dc:	2001      	movne	r0, #1
 800f6de:	b002      	add	sp, #8
 800f6e0:	4770      	bx	lr
 800f6e2:	4610      	mov	r0, r2
 800f6e4:	e7fb      	b.n	800f6de <__ascii_mbtowc+0x16>
 800f6e6:	f06f 0001 	mvn.w	r0, #1
 800f6ea:	e7f8      	b.n	800f6de <__ascii_mbtowc+0x16>

0800f6ec <__ascii_wctomb>:
 800f6ec:	4603      	mov	r3, r0
 800f6ee:	4608      	mov	r0, r1
 800f6f0:	b141      	cbz	r1, 800f704 <__ascii_wctomb+0x18>
 800f6f2:	2aff      	cmp	r2, #255	@ 0xff
 800f6f4:	d904      	bls.n	800f700 <__ascii_wctomb+0x14>
 800f6f6:	228a      	movs	r2, #138	@ 0x8a
 800f6f8:	601a      	str	r2, [r3, #0]
 800f6fa:	f04f 30ff 	mov.w	r0, #4294967295
 800f6fe:	4770      	bx	lr
 800f700:	700a      	strb	r2, [r1, #0]
 800f702:	2001      	movs	r0, #1
 800f704:	4770      	bx	lr
	...

0800f708 <fiprintf>:
 800f708:	b40e      	push	{r1, r2, r3}
 800f70a:	b503      	push	{r0, r1, lr}
 800f70c:	4601      	mov	r1, r0
 800f70e:	ab03      	add	r3, sp, #12
 800f710:	4805      	ldr	r0, [pc, #20]	@ (800f728 <fiprintf+0x20>)
 800f712:	f853 2b04 	ldr.w	r2, [r3], #4
 800f716:	6800      	ldr	r0, [r0, #0]
 800f718:	9301      	str	r3, [sp, #4]
 800f71a:	f000 f837 	bl	800f78c <_vfiprintf_r>
 800f71e:	b002      	add	sp, #8
 800f720:	f85d eb04 	ldr.w	lr, [sp], #4
 800f724:	b003      	add	sp, #12
 800f726:	4770      	bx	lr
 800f728:	200001d8 	.word	0x200001d8

0800f72c <abort>:
 800f72c:	b508      	push	{r3, lr}
 800f72e:	2006      	movs	r0, #6
 800f730:	f000 fa00 	bl	800fb34 <raise>
 800f734:	2001      	movs	r0, #1
 800f736:	f7f3 fed1 	bl	80034dc <_exit>

0800f73a <__sfputc_r>:
 800f73a:	6893      	ldr	r3, [r2, #8]
 800f73c:	3b01      	subs	r3, #1
 800f73e:	2b00      	cmp	r3, #0
 800f740:	b410      	push	{r4}
 800f742:	6093      	str	r3, [r2, #8]
 800f744:	da08      	bge.n	800f758 <__sfputc_r+0x1e>
 800f746:	6994      	ldr	r4, [r2, #24]
 800f748:	42a3      	cmp	r3, r4
 800f74a:	db01      	blt.n	800f750 <__sfputc_r+0x16>
 800f74c:	290a      	cmp	r1, #10
 800f74e:	d103      	bne.n	800f758 <__sfputc_r+0x1e>
 800f750:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f754:	f000 b932 	b.w	800f9bc <__swbuf_r>
 800f758:	6813      	ldr	r3, [r2, #0]
 800f75a:	1c58      	adds	r0, r3, #1
 800f75c:	6010      	str	r0, [r2, #0]
 800f75e:	7019      	strb	r1, [r3, #0]
 800f760:	4608      	mov	r0, r1
 800f762:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f766:	4770      	bx	lr

0800f768 <__sfputs_r>:
 800f768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f76a:	4606      	mov	r6, r0
 800f76c:	460f      	mov	r7, r1
 800f76e:	4614      	mov	r4, r2
 800f770:	18d5      	adds	r5, r2, r3
 800f772:	42ac      	cmp	r4, r5
 800f774:	d101      	bne.n	800f77a <__sfputs_r+0x12>
 800f776:	2000      	movs	r0, #0
 800f778:	e007      	b.n	800f78a <__sfputs_r+0x22>
 800f77a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f77e:	463a      	mov	r2, r7
 800f780:	4630      	mov	r0, r6
 800f782:	f7ff ffda 	bl	800f73a <__sfputc_r>
 800f786:	1c43      	adds	r3, r0, #1
 800f788:	d1f3      	bne.n	800f772 <__sfputs_r+0xa>
 800f78a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f78c <_vfiprintf_r>:
 800f78c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f790:	460d      	mov	r5, r1
 800f792:	b09d      	sub	sp, #116	@ 0x74
 800f794:	4614      	mov	r4, r2
 800f796:	4698      	mov	r8, r3
 800f798:	4606      	mov	r6, r0
 800f79a:	b118      	cbz	r0, 800f7a4 <_vfiprintf_r+0x18>
 800f79c:	6a03      	ldr	r3, [r0, #32]
 800f79e:	b90b      	cbnz	r3, 800f7a4 <_vfiprintf_r+0x18>
 800f7a0:	f7fe f960 	bl	800da64 <__sinit>
 800f7a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f7a6:	07d9      	lsls	r1, r3, #31
 800f7a8:	d405      	bmi.n	800f7b6 <_vfiprintf_r+0x2a>
 800f7aa:	89ab      	ldrh	r3, [r5, #12]
 800f7ac:	059a      	lsls	r2, r3, #22
 800f7ae:	d402      	bmi.n	800f7b6 <_vfiprintf_r+0x2a>
 800f7b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f7b2:	f7fe fb08 	bl	800ddc6 <__retarget_lock_acquire_recursive>
 800f7b6:	89ab      	ldrh	r3, [r5, #12]
 800f7b8:	071b      	lsls	r3, r3, #28
 800f7ba:	d501      	bpl.n	800f7c0 <_vfiprintf_r+0x34>
 800f7bc:	692b      	ldr	r3, [r5, #16]
 800f7be:	b99b      	cbnz	r3, 800f7e8 <_vfiprintf_r+0x5c>
 800f7c0:	4629      	mov	r1, r5
 800f7c2:	4630      	mov	r0, r6
 800f7c4:	f000 f938 	bl	800fa38 <__swsetup_r>
 800f7c8:	b170      	cbz	r0, 800f7e8 <_vfiprintf_r+0x5c>
 800f7ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f7cc:	07dc      	lsls	r4, r3, #31
 800f7ce:	d504      	bpl.n	800f7da <_vfiprintf_r+0x4e>
 800f7d0:	f04f 30ff 	mov.w	r0, #4294967295
 800f7d4:	b01d      	add	sp, #116	@ 0x74
 800f7d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7da:	89ab      	ldrh	r3, [r5, #12]
 800f7dc:	0598      	lsls	r0, r3, #22
 800f7de:	d4f7      	bmi.n	800f7d0 <_vfiprintf_r+0x44>
 800f7e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f7e2:	f7fe faf1 	bl	800ddc8 <__retarget_lock_release_recursive>
 800f7e6:	e7f3      	b.n	800f7d0 <_vfiprintf_r+0x44>
 800f7e8:	2300      	movs	r3, #0
 800f7ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800f7ec:	2320      	movs	r3, #32
 800f7ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f7f2:	f8cd 800c 	str.w	r8, [sp, #12]
 800f7f6:	2330      	movs	r3, #48	@ 0x30
 800f7f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f9a8 <_vfiprintf_r+0x21c>
 800f7fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f800:	f04f 0901 	mov.w	r9, #1
 800f804:	4623      	mov	r3, r4
 800f806:	469a      	mov	sl, r3
 800f808:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f80c:	b10a      	cbz	r2, 800f812 <_vfiprintf_r+0x86>
 800f80e:	2a25      	cmp	r2, #37	@ 0x25
 800f810:	d1f9      	bne.n	800f806 <_vfiprintf_r+0x7a>
 800f812:	ebba 0b04 	subs.w	fp, sl, r4
 800f816:	d00b      	beq.n	800f830 <_vfiprintf_r+0xa4>
 800f818:	465b      	mov	r3, fp
 800f81a:	4622      	mov	r2, r4
 800f81c:	4629      	mov	r1, r5
 800f81e:	4630      	mov	r0, r6
 800f820:	f7ff ffa2 	bl	800f768 <__sfputs_r>
 800f824:	3001      	adds	r0, #1
 800f826:	f000 80a7 	beq.w	800f978 <_vfiprintf_r+0x1ec>
 800f82a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f82c:	445a      	add	r2, fp
 800f82e:	9209      	str	r2, [sp, #36]	@ 0x24
 800f830:	f89a 3000 	ldrb.w	r3, [sl]
 800f834:	2b00      	cmp	r3, #0
 800f836:	f000 809f 	beq.w	800f978 <_vfiprintf_r+0x1ec>
 800f83a:	2300      	movs	r3, #0
 800f83c:	f04f 32ff 	mov.w	r2, #4294967295
 800f840:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f844:	f10a 0a01 	add.w	sl, sl, #1
 800f848:	9304      	str	r3, [sp, #16]
 800f84a:	9307      	str	r3, [sp, #28]
 800f84c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f850:	931a      	str	r3, [sp, #104]	@ 0x68
 800f852:	4654      	mov	r4, sl
 800f854:	2205      	movs	r2, #5
 800f856:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f85a:	4853      	ldr	r0, [pc, #332]	@ (800f9a8 <_vfiprintf_r+0x21c>)
 800f85c:	f7f0 fcc8 	bl	80001f0 <memchr>
 800f860:	9a04      	ldr	r2, [sp, #16]
 800f862:	b9d8      	cbnz	r0, 800f89c <_vfiprintf_r+0x110>
 800f864:	06d1      	lsls	r1, r2, #27
 800f866:	bf44      	itt	mi
 800f868:	2320      	movmi	r3, #32
 800f86a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f86e:	0713      	lsls	r3, r2, #28
 800f870:	bf44      	itt	mi
 800f872:	232b      	movmi	r3, #43	@ 0x2b
 800f874:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f878:	f89a 3000 	ldrb.w	r3, [sl]
 800f87c:	2b2a      	cmp	r3, #42	@ 0x2a
 800f87e:	d015      	beq.n	800f8ac <_vfiprintf_r+0x120>
 800f880:	9a07      	ldr	r2, [sp, #28]
 800f882:	4654      	mov	r4, sl
 800f884:	2000      	movs	r0, #0
 800f886:	f04f 0c0a 	mov.w	ip, #10
 800f88a:	4621      	mov	r1, r4
 800f88c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f890:	3b30      	subs	r3, #48	@ 0x30
 800f892:	2b09      	cmp	r3, #9
 800f894:	d94b      	bls.n	800f92e <_vfiprintf_r+0x1a2>
 800f896:	b1b0      	cbz	r0, 800f8c6 <_vfiprintf_r+0x13a>
 800f898:	9207      	str	r2, [sp, #28]
 800f89a:	e014      	b.n	800f8c6 <_vfiprintf_r+0x13a>
 800f89c:	eba0 0308 	sub.w	r3, r0, r8
 800f8a0:	fa09 f303 	lsl.w	r3, r9, r3
 800f8a4:	4313      	orrs	r3, r2
 800f8a6:	9304      	str	r3, [sp, #16]
 800f8a8:	46a2      	mov	sl, r4
 800f8aa:	e7d2      	b.n	800f852 <_vfiprintf_r+0xc6>
 800f8ac:	9b03      	ldr	r3, [sp, #12]
 800f8ae:	1d19      	adds	r1, r3, #4
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	9103      	str	r1, [sp, #12]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	bfbb      	ittet	lt
 800f8b8:	425b      	neglt	r3, r3
 800f8ba:	f042 0202 	orrlt.w	r2, r2, #2
 800f8be:	9307      	strge	r3, [sp, #28]
 800f8c0:	9307      	strlt	r3, [sp, #28]
 800f8c2:	bfb8      	it	lt
 800f8c4:	9204      	strlt	r2, [sp, #16]
 800f8c6:	7823      	ldrb	r3, [r4, #0]
 800f8c8:	2b2e      	cmp	r3, #46	@ 0x2e
 800f8ca:	d10a      	bne.n	800f8e2 <_vfiprintf_r+0x156>
 800f8cc:	7863      	ldrb	r3, [r4, #1]
 800f8ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800f8d0:	d132      	bne.n	800f938 <_vfiprintf_r+0x1ac>
 800f8d2:	9b03      	ldr	r3, [sp, #12]
 800f8d4:	1d1a      	adds	r2, r3, #4
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	9203      	str	r2, [sp, #12]
 800f8da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f8de:	3402      	adds	r4, #2
 800f8e0:	9305      	str	r3, [sp, #20]
 800f8e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f9b8 <_vfiprintf_r+0x22c>
 800f8e6:	7821      	ldrb	r1, [r4, #0]
 800f8e8:	2203      	movs	r2, #3
 800f8ea:	4650      	mov	r0, sl
 800f8ec:	f7f0 fc80 	bl	80001f0 <memchr>
 800f8f0:	b138      	cbz	r0, 800f902 <_vfiprintf_r+0x176>
 800f8f2:	9b04      	ldr	r3, [sp, #16]
 800f8f4:	eba0 000a 	sub.w	r0, r0, sl
 800f8f8:	2240      	movs	r2, #64	@ 0x40
 800f8fa:	4082      	lsls	r2, r0
 800f8fc:	4313      	orrs	r3, r2
 800f8fe:	3401      	adds	r4, #1
 800f900:	9304      	str	r3, [sp, #16]
 800f902:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f906:	4829      	ldr	r0, [pc, #164]	@ (800f9ac <_vfiprintf_r+0x220>)
 800f908:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f90c:	2206      	movs	r2, #6
 800f90e:	f7f0 fc6f 	bl	80001f0 <memchr>
 800f912:	2800      	cmp	r0, #0
 800f914:	d03f      	beq.n	800f996 <_vfiprintf_r+0x20a>
 800f916:	4b26      	ldr	r3, [pc, #152]	@ (800f9b0 <_vfiprintf_r+0x224>)
 800f918:	bb1b      	cbnz	r3, 800f962 <_vfiprintf_r+0x1d6>
 800f91a:	9b03      	ldr	r3, [sp, #12]
 800f91c:	3307      	adds	r3, #7
 800f91e:	f023 0307 	bic.w	r3, r3, #7
 800f922:	3308      	adds	r3, #8
 800f924:	9303      	str	r3, [sp, #12]
 800f926:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f928:	443b      	add	r3, r7
 800f92a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f92c:	e76a      	b.n	800f804 <_vfiprintf_r+0x78>
 800f92e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f932:	460c      	mov	r4, r1
 800f934:	2001      	movs	r0, #1
 800f936:	e7a8      	b.n	800f88a <_vfiprintf_r+0xfe>
 800f938:	2300      	movs	r3, #0
 800f93a:	3401      	adds	r4, #1
 800f93c:	9305      	str	r3, [sp, #20]
 800f93e:	4619      	mov	r1, r3
 800f940:	f04f 0c0a 	mov.w	ip, #10
 800f944:	4620      	mov	r0, r4
 800f946:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f94a:	3a30      	subs	r2, #48	@ 0x30
 800f94c:	2a09      	cmp	r2, #9
 800f94e:	d903      	bls.n	800f958 <_vfiprintf_r+0x1cc>
 800f950:	2b00      	cmp	r3, #0
 800f952:	d0c6      	beq.n	800f8e2 <_vfiprintf_r+0x156>
 800f954:	9105      	str	r1, [sp, #20]
 800f956:	e7c4      	b.n	800f8e2 <_vfiprintf_r+0x156>
 800f958:	fb0c 2101 	mla	r1, ip, r1, r2
 800f95c:	4604      	mov	r4, r0
 800f95e:	2301      	movs	r3, #1
 800f960:	e7f0      	b.n	800f944 <_vfiprintf_r+0x1b8>
 800f962:	ab03      	add	r3, sp, #12
 800f964:	9300      	str	r3, [sp, #0]
 800f966:	462a      	mov	r2, r5
 800f968:	4b12      	ldr	r3, [pc, #72]	@ (800f9b4 <_vfiprintf_r+0x228>)
 800f96a:	a904      	add	r1, sp, #16
 800f96c:	4630      	mov	r0, r6
 800f96e:	f7fd fc35 	bl	800d1dc <_printf_float>
 800f972:	4607      	mov	r7, r0
 800f974:	1c78      	adds	r0, r7, #1
 800f976:	d1d6      	bne.n	800f926 <_vfiprintf_r+0x19a>
 800f978:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f97a:	07d9      	lsls	r1, r3, #31
 800f97c:	d405      	bmi.n	800f98a <_vfiprintf_r+0x1fe>
 800f97e:	89ab      	ldrh	r3, [r5, #12]
 800f980:	059a      	lsls	r2, r3, #22
 800f982:	d402      	bmi.n	800f98a <_vfiprintf_r+0x1fe>
 800f984:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f986:	f7fe fa1f 	bl	800ddc8 <__retarget_lock_release_recursive>
 800f98a:	89ab      	ldrh	r3, [r5, #12]
 800f98c:	065b      	lsls	r3, r3, #25
 800f98e:	f53f af1f 	bmi.w	800f7d0 <_vfiprintf_r+0x44>
 800f992:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f994:	e71e      	b.n	800f7d4 <_vfiprintf_r+0x48>
 800f996:	ab03      	add	r3, sp, #12
 800f998:	9300      	str	r3, [sp, #0]
 800f99a:	462a      	mov	r2, r5
 800f99c:	4b05      	ldr	r3, [pc, #20]	@ (800f9b4 <_vfiprintf_r+0x228>)
 800f99e:	a904      	add	r1, sp, #16
 800f9a0:	4630      	mov	r0, r6
 800f9a2:	f7fd feb3 	bl	800d70c <_printf_i>
 800f9a6:	e7e4      	b.n	800f972 <_vfiprintf_r+0x1e6>
 800f9a8:	08010670 	.word	0x08010670
 800f9ac:	0801067a 	.word	0x0801067a
 800f9b0:	0800d1dd 	.word	0x0800d1dd
 800f9b4:	0800f769 	.word	0x0800f769
 800f9b8:	08010676 	.word	0x08010676

0800f9bc <__swbuf_r>:
 800f9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9be:	460e      	mov	r6, r1
 800f9c0:	4614      	mov	r4, r2
 800f9c2:	4605      	mov	r5, r0
 800f9c4:	b118      	cbz	r0, 800f9ce <__swbuf_r+0x12>
 800f9c6:	6a03      	ldr	r3, [r0, #32]
 800f9c8:	b90b      	cbnz	r3, 800f9ce <__swbuf_r+0x12>
 800f9ca:	f7fe f84b 	bl	800da64 <__sinit>
 800f9ce:	69a3      	ldr	r3, [r4, #24]
 800f9d0:	60a3      	str	r3, [r4, #8]
 800f9d2:	89a3      	ldrh	r3, [r4, #12]
 800f9d4:	071a      	lsls	r2, r3, #28
 800f9d6:	d501      	bpl.n	800f9dc <__swbuf_r+0x20>
 800f9d8:	6923      	ldr	r3, [r4, #16]
 800f9da:	b943      	cbnz	r3, 800f9ee <__swbuf_r+0x32>
 800f9dc:	4621      	mov	r1, r4
 800f9de:	4628      	mov	r0, r5
 800f9e0:	f000 f82a 	bl	800fa38 <__swsetup_r>
 800f9e4:	b118      	cbz	r0, 800f9ee <__swbuf_r+0x32>
 800f9e6:	f04f 37ff 	mov.w	r7, #4294967295
 800f9ea:	4638      	mov	r0, r7
 800f9ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f9ee:	6823      	ldr	r3, [r4, #0]
 800f9f0:	6922      	ldr	r2, [r4, #16]
 800f9f2:	1a98      	subs	r0, r3, r2
 800f9f4:	6963      	ldr	r3, [r4, #20]
 800f9f6:	b2f6      	uxtb	r6, r6
 800f9f8:	4283      	cmp	r3, r0
 800f9fa:	4637      	mov	r7, r6
 800f9fc:	dc05      	bgt.n	800fa0a <__swbuf_r+0x4e>
 800f9fe:	4621      	mov	r1, r4
 800fa00:	4628      	mov	r0, r5
 800fa02:	f7ff fded 	bl	800f5e0 <_fflush_r>
 800fa06:	2800      	cmp	r0, #0
 800fa08:	d1ed      	bne.n	800f9e6 <__swbuf_r+0x2a>
 800fa0a:	68a3      	ldr	r3, [r4, #8]
 800fa0c:	3b01      	subs	r3, #1
 800fa0e:	60a3      	str	r3, [r4, #8]
 800fa10:	6823      	ldr	r3, [r4, #0]
 800fa12:	1c5a      	adds	r2, r3, #1
 800fa14:	6022      	str	r2, [r4, #0]
 800fa16:	701e      	strb	r6, [r3, #0]
 800fa18:	6962      	ldr	r2, [r4, #20]
 800fa1a:	1c43      	adds	r3, r0, #1
 800fa1c:	429a      	cmp	r2, r3
 800fa1e:	d004      	beq.n	800fa2a <__swbuf_r+0x6e>
 800fa20:	89a3      	ldrh	r3, [r4, #12]
 800fa22:	07db      	lsls	r3, r3, #31
 800fa24:	d5e1      	bpl.n	800f9ea <__swbuf_r+0x2e>
 800fa26:	2e0a      	cmp	r6, #10
 800fa28:	d1df      	bne.n	800f9ea <__swbuf_r+0x2e>
 800fa2a:	4621      	mov	r1, r4
 800fa2c:	4628      	mov	r0, r5
 800fa2e:	f7ff fdd7 	bl	800f5e0 <_fflush_r>
 800fa32:	2800      	cmp	r0, #0
 800fa34:	d0d9      	beq.n	800f9ea <__swbuf_r+0x2e>
 800fa36:	e7d6      	b.n	800f9e6 <__swbuf_r+0x2a>

0800fa38 <__swsetup_r>:
 800fa38:	b538      	push	{r3, r4, r5, lr}
 800fa3a:	4b29      	ldr	r3, [pc, #164]	@ (800fae0 <__swsetup_r+0xa8>)
 800fa3c:	4605      	mov	r5, r0
 800fa3e:	6818      	ldr	r0, [r3, #0]
 800fa40:	460c      	mov	r4, r1
 800fa42:	b118      	cbz	r0, 800fa4c <__swsetup_r+0x14>
 800fa44:	6a03      	ldr	r3, [r0, #32]
 800fa46:	b90b      	cbnz	r3, 800fa4c <__swsetup_r+0x14>
 800fa48:	f7fe f80c 	bl	800da64 <__sinit>
 800fa4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa50:	0719      	lsls	r1, r3, #28
 800fa52:	d422      	bmi.n	800fa9a <__swsetup_r+0x62>
 800fa54:	06da      	lsls	r2, r3, #27
 800fa56:	d407      	bmi.n	800fa68 <__swsetup_r+0x30>
 800fa58:	2209      	movs	r2, #9
 800fa5a:	602a      	str	r2, [r5, #0]
 800fa5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fa60:	81a3      	strh	r3, [r4, #12]
 800fa62:	f04f 30ff 	mov.w	r0, #4294967295
 800fa66:	e033      	b.n	800fad0 <__swsetup_r+0x98>
 800fa68:	0758      	lsls	r0, r3, #29
 800fa6a:	d512      	bpl.n	800fa92 <__swsetup_r+0x5a>
 800fa6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fa6e:	b141      	cbz	r1, 800fa82 <__swsetup_r+0x4a>
 800fa70:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fa74:	4299      	cmp	r1, r3
 800fa76:	d002      	beq.n	800fa7e <__swsetup_r+0x46>
 800fa78:	4628      	mov	r0, r5
 800fa7a:	f7ff f801 	bl	800ea80 <_free_r>
 800fa7e:	2300      	movs	r3, #0
 800fa80:	6363      	str	r3, [r4, #52]	@ 0x34
 800fa82:	89a3      	ldrh	r3, [r4, #12]
 800fa84:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fa88:	81a3      	strh	r3, [r4, #12]
 800fa8a:	2300      	movs	r3, #0
 800fa8c:	6063      	str	r3, [r4, #4]
 800fa8e:	6923      	ldr	r3, [r4, #16]
 800fa90:	6023      	str	r3, [r4, #0]
 800fa92:	89a3      	ldrh	r3, [r4, #12]
 800fa94:	f043 0308 	orr.w	r3, r3, #8
 800fa98:	81a3      	strh	r3, [r4, #12]
 800fa9a:	6923      	ldr	r3, [r4, #16]
 800fa9c:	b94b      	cbnz	r3, 800fab2 <__swsetup_r+0x7a>
 800fa9e:	89a3      	ldrh	r3, [r4, #12]
 800faa0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800faa4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800faa8:	d003      	beq.n	800fab2 <__swsetup_r+0x7a>
 800faaa:	4621      	mov	r1, r4
 800faac:	4628      	mov	r0, r5
 800faae:	f000 f883 	bl	800fbb8 <__smakebuf_r>
 800fab2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fab6:	f013 0201 	ands.w	r2, r3, #1
 800faba:	d00a      	beq.n	800fad2 <__swsetup_r+0x9a>
 800fabc:	2200      	movs	r2, #0
 800fabe:	60a2      	str	r2, [r4, #8]
 800fac0:	6962      	ldr	r2, [r4, #20]
 800fac2:	4252      	negs	r2, r2
 800fac4:	61a2      	str	r2, [r4, #24]
 800fac6:	6922      	ldr	r2, [r4, #16]
 800fac8:	b942      	cbnz	r2, 800fadc <__swsetup_r+0xa4>
 800faca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800face:	d1c5      	bne.n	800fa5c <__swsetup_r+0x24>
 800fad0:	bd38      	pop	{r3, r4, r5, pc}
 800fad2:	0799      	lsls	r1, r3, #30
 800fad4:	bf58      	it	pl
 800fad6:	6962      	ldrpl	r2, [r4, #20]
 800fad8:	60a2      	str	r2, [r4, #8]
 800fada:	e7f4      	b.n	800fac6 <__swsetup_r+0x8e>
 800fadc:	2000      	movs	r0, #0
 800fade:	e7f7      	b.n	800fad0 <__swsetup_r+0x98>
 800fae0:	200001d8 	.word	0x200001d8

0800fae4 <_raise_r>:
 800fae4:	291f      	cmp	r1, #31
 800fae6:	b538      	push	{r3, r4, r5, lr}
 800fae8:	4605      	mov	r5, r0
 800faea:	460c      	mov	r4, r1
 800faec:	d904      	bls.n	800faf8 <_raise_r+0x14>
 800faee:	2316      	movs	r3, #22
 800faf0:	6003      	str	r3, [r0, #0]
 800faf2:	f04f 30ff 	mov.w	r0, #4294967295
 800faf6:	bd38      	pop	{r3, r4, r5, pc}
 800faf8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fafa:	b112      	cbz	r2, 800fb02 <_raise_r+0x1e>
 800fafc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fb00:	b94b      	cbnz	r3, 800fb16 <_raise_r+0x32>
 800fb02:	4628      	mov	r0, r5
 800fb04:	f000 f830 	bl	800fb68 <_getpid_r>
 800fb08:	4622      	mov	r2, r4
 800fb0a:	4601      	mov	r1, r0
 800fb0c:	4628      	mov	r0, r5
 800fb0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fb12:	f000 b817 	b.w	800fb44 <_kill_r>
 800fb16:	2b01      	cmp	r3, #1
 800fb18:	d00a      	beq.n	800fb30 <_raise_r+0x4c>
 800fb1a:	1c59      	adds	r1, r3, #1
 800fb1c:	d103      	bne.n	800fb26 <_raise_r+0x42>
 800fb1e:	2316      	movs	r3, #22
 800fb20:	6003      	str	r3, [r0, #0]
 800fb22:	2001      	movs	r0, #1
 800fb24:	e7e7      	b.n	800faf6 <_raise_r+0x12>
 800fb26:	2100      	movs	r1, #0
 800fb28:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fb2c:	4620      	mov	r0, r4
 800fb2e:	4798      	blx	r3
 800fb30:	2000      	movs	r0, #0
 800fb32:	e7e0      	b.n	800faf6 <_raise_r+0x12>

0800fb34 <raise>:
 800fb34:	4b02      	ldr	r3, [pc, #8]	@ (800fb40 <raise+0xc>)
 800fb36:	4601      	mov	r1, r0
 800fb38:	6818      	ldr	r0, [r3, #0]
 800fb3a:	f7ff bfd3 	b.w	800fae4 <_raise_r>
 800fb3e:	bf00      	nop
 800fb40:	200001d8 	.word	0x200001d8

0800fb44 <_kill_r>:
 800fb44:	b538      	push	{r3, r4, r5, lr}
 800fb46:	4d07      	ldr	r5, [pc, #28]	@ (800fb64 <_kill_r+0x20>)
 800fb48:	2300      	movs	r3, #0
 800fb4a:	4604      	mov	r4, r0
 800fb4c:	4608      	mov	r0, r1
 800fb4e:	4611      	mov	r1, r2
 800fb50:	602b      	str	r3, [r5, #0]
 800fb52:	f7f3 fcb3 	bl	80034bc <_kill>
 800fb56:	1c43      	adds	r3, r0, #1
 800fb58:	d102      	bne.n	800fb60 <_kill_r+0x1c>
 800fb5a:	682b      	ldr	r3, [r5, #0]
 800fb5c:	b103      	cbz	r3, 800fb60 <_kill_r+0x1c>
 800fb5e:	6023      	str	r3, [r4, #0]
 800fb60:	bd38      	pop	{r3, r4, r5, pc}
 800fb62:	bf00      	nop
 800fb64:	20012ff4 	.word	0x20012ff4

0800fb68 <_getpid_r>:
 800fb68:	f7f3 bca0 	b.w	80034ac <_getpid>

0800fb6c <__swhatbuf_r>:
 800fb6c:	b570      	push	{r4, r5, r6, lr}
 800fb6e:	460c      	mov	r4, r1
 800fb70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb74:	2900      	cmp	r1, #0
 800fb76:	b096      	sub	sp, #88	@ 0x58
 800fb78:	4615      	mov	r5, r2
 800fb7a:	461e      	mov	r6, r3
 800fb7c:	da0d      	bge.n	800fb9a <__swhatbuf_r+0x2e>
 800fb7e:	89a3      	ldrh	r3, [r4, #12]
 800fb80:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fb84:	f04f 0100 	mov.w	r1, #0
 800fb88:	bf14      	ite	ne
 800fb8a:	2340      	movne	r3, #64	@ 0x40
 800fb8c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fb90:	2000      	movs	r0, #0
 800fb92:	6031      	str	r1, [r6, #0]
 800fb94:	602b      	str	r3, [r5, #0]
 800fb96:	b016      	add	sp, #88	@ 0x58
 800fb98:	bd70      	pop	{r4, r5, r6, pc}
 800fb9a:	466a      	mov	r2, sp
 800fb9c:	f000 f848 	bl	800fc30 <_fstat_r>
 800fba0:	2800      	cmp	r0, #0
 800fba2:	dbec      	blt.n	800fb7e <__swhatbuf_r+0x12>
 800fba4:	9901      	ldr	r1, [sp, #4]
 800fba6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fbaa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fbae:	4259      	negs	r1, r3
 800fbb0:	4159      	adcs	r1, r3
 800fbb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fbb6:	e7eb      	b.n	800fb90 <__swhatbuf_r+0x24>

0800fbb8 <__smakebuf_r>:
 800fbb8:	898b      	ldrh	r3, [r1, #12]
 800fbba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fbbc:	079d      	lsls	r5, r3, #30
 800fbbe:	4606      	mov	r6, r0
 800fbc0:	460c      	mov	r4, r1
 800fbc2:	d507      	bpl.n	800fbd4 <__smakebuf_r+0x1c>
 800fbc4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fbc8:	6023      	str	r3, [r4, #0]
 800fbca:	6123      	str	r3, [r4, #16]
 800fbcc:	2301      	movs	r3, #1
 800fbce:	6163      	str	r3, [r4, #20]
 800fbd0:	b003      	add	sp, #12
 800fbd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fbd4:	ab01      	add	r3, sp, #4
 800fbd6:	466a      	mov	r2, sp
 800fbd8:	f7ff ffc8 	bl	800fb6c <__swhatbuf_r>
 800fbdc:	9f00      	ldr	r7, [sp, #0]
 800fbde:	4605      	mov	r5, r0
 800fbe0:	4639      	mov	r1, r7
 800fbe2:	4630      	mov	r0, r6
 800fbe4:	f7fd f9a0 	bl	800cf28 <_malloc_r>
 800fbe8:	b948      	cbnz	r0, 800fbfe <__smakebuf_r+0x46>
 800fbea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fbee:	059a      	lsls	r2, r3, #22
 800fbf0:	d4ee      	bmi.n	800fbd0 <__smakebuf_r+0x18>
 800fbf2:	f023 0303 	bic.w	r3, r3, #3
 800fbf6:	f043 0302 	orr.w	r3, r3, #2
 800fbfa:	81a3      	strh	r3, [r4, #12]
 800fbfc:	e7e2      	b.n	800fbc4 <__smakebuf_r+0xc>
 800fbfe:	89a3      	ldrh	r3, [r4, #12]
 800fc00:	6020      	str	r0, [r4, #0]
 800fc02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fc06:	81a3      	strh	r3, [r4, #12]
 800fc08:	9b01      	ldr	r3, [sp, #4]
 800fc0a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fc0e:	b15b      	cbz	r3, 800fc28 <__smakebuf_r+0x70>
 800fc10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fc14:	4630      	mov	r0, r6
 800fc16:	f000 f81d 	bl	800fc54 <_isatty_r>
 800fc1a:	b128      	cbz	r0, 800fc28 <__smakebuf_r+0x70>
 800fc1c:	89a3      	ldrh	r3, [r4, #12]
 800fc1e:	f023 0303 	bic.w	r3, r3, #3
 800fc22:	f043 0301 	orr.w	r3, r3, #1
 800fc26:	81a3      	strh	r3, [r4, #12]
 800fc28:	89a3      	ldrh	r3, [r4, #12]
 800fc2a:	431d      	orrs	r5, r3
 800fc2c:	81a5      	strh	r5, [r4, #12]
 800fc2e:	e7cf      	b.n	800fbd0 <__smakebuf_r+0x18>

0800fc30 <_fstat_r>:
 800fc30:	b538      	push	{r3, r4, r5, lr}
 800fc32:	4d07      	ldr	r5, [pc, #28]	@ (800fc50 <_fstat_r+0x20>)
 800fc34:	2300      	movs	r3, #0
 800fc36:	4604      	mov	r4, r0
 800fc38:	4608      	mov	r0, r1
 800fc3a:	4611      	mov	r1, r2
 800fc3c:	602b      	str	r3, [r5, #0]
 800fc3e:	f7f3 fc9d 	bl	800357c <_fstat>
 800fc42:	1c43      	adds	r3, r0, #1
 800fc44:	d102      	bne.n	800fc4c <_fstat_r+0x1c>
 800fc46:	682b      	ldr	r3, [r5, #0]
 800fc48:	b103      	cbz	r3, 800fc4c <_fstat_r+0x1c>
 800fc4a:	6023      	str	r3, [r4, #0]
 800fc4c:	bd38      	pop	{r3, r4, r5, pc}
 800fc4e:	bf00      	nop
 800fc50:	20012ff4 	.word	0x20012ff4

0800fc54 <_isatty_r>:
 800fc54:	b538      	push	{r3, r4, r5, lr}
 800fc56:	4d06      	ldr	r5, [pc, #24]	@ (800fc70 <_isatty_r+0x1c>)
 800fc58:	2300      	movs	r3, #0
 800fc5a:	4604      	mov	r4, r0
 800fc5c:	4608      	mov	r0, r1
 800fc5e:	602b      	str	r3, [r5, #0]
 800fc60:	f7f3 fc9c 	bl	800359c <_isatty>
 800fc64:	1c43      	adds	r3, r0, #1
 800fc66:	d102      	bne.n	800fc6e <_isatty_r+0x1a>
 800fc68:	682b      	ldr	r3, [r5, #0]
 800fc6a:	b103      	cbz	r3, 800fc6e <_isatty_r+0x1a>
 800fc6c:	6023      	str	r3, [r4, #0]
 800fc6e:	bd38      	pop	{r3, r4, r5, pc}
 800fc70:	20012ff4 	.word	0x20012ff4

0800fc74 <_init>:
 800fc74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc76:	bf00      	nop
 800fc78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc7a:	bc08      	pop	{r3}
 800fc7c:	469e      	mov	lr, r3
 800fc7e:	4770      	bx	lr

0800fc80 <_fini>:
 800fc80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc82:	bf00      	nop
 800fc84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc86:	bc08      	pop	{r3}
 800fc88:	469e      	mov	lr, r3
 800fc8a:	4770      	bx	lr
